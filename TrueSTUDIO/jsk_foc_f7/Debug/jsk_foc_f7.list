
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08005acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000474c  20000014  08005ae0  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004760  08005ae0  00024760  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_line   00010151  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003fe95  00000000  00000000  00030193  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000072e1  00000000  00000000  00070028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001958  00000000  00000000  00077310  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000020a0  00000000  00000000  00078c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013410  00000000  00000000  0007ad08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000095ce  00000000  00000000  0008e118  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000976e6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004aa4  00000000  00000000  00097764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000014 	.word	0x20000014
 800021c:	00000000 	.word	0x00000000
 8000220:	080058ac 	.word	0x080058ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000018 	.word	0x20000018
 800023c:	080058ac 	.word	0x080058ac

08000240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
  ldr  r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800025e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800026a:	f001 fad5 	bl	8001818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f005 fae5 	bl	800583c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000272:	f000 fe8b 	bl	8000f8c <main>
  bx  lr    
 8000276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000278:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800027c:	08005acc 	.word	0x08005acc
  ldr  r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000284:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000288:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800028c:	20004760 	.word	0x20004760

08000290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC_IRQHandler>
	...

08000294 <StartcontrolTask>:
 * clark -> park -> control -> rev park -> rev clark -> PWM
 *
 */

void StartcontrolTask(void const * argument)
{
 8000294:	b530      	push	{r4, r5, lr}
	uint16_t duty_a = 0;
	for(;;)
	{
		CURDATA shuntdata;
		if(xQueueReceive(shuntQueueHandle,&shuntdata,2)==pdPASS)
 8000296:	4c0a      	ldr	r4, [pc, #40]	; (80002c0 <StartcontrolTask+0x2c>)
{
 8000298:	b085      	sub	sp, #20
			//then park...


//			setMotorDuty(duty_a,0,0);
			//to test the control frequency
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 800029a:	4d0a      	ldr	r5, [pc, #40]	; (80002c4 <StartcontrolTask+0x30>)
		if(xQueueReceive(shuntQueueHandle,&shuntdata,2)==pdPASS)
 800029c:	2300      	movs	r3, #0
 800029e:	2202      	movs	r2, #2
 80002a0:	a901      	add	r1, sp, #4
 80002a2:	6820      	ldr	r0, [r4, #0]
 80002a4:	f004 fd70 	bl	8004d88 <xQueueGenericReceive>
 80002a8:	2801      	cmp	r0, #1
 80002aa:	d105      	bne.n	80002b8 <StartcontrolTask+0x24>
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80002ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b0:	4628      	mov	r0, r5
 80002b2:	f001 ffb4 	bl	800221e <HAL_GPIO_TogglePin>
 80002b6:	e7f1      	b.n	800029c <StartcontrolTask+0x8>
		}
		else
		{
			//1ms no current data was receieved...something is wrong...error handle
			//  _Error_Handler("controlFOC, 1ms no data receved.",500);
			osDelay(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f004 f87c 	bl	80043b6 <osDelay>
	{
 80002be:	e7ed      	b.n	800029c <StartcontrolTask+0x8>
 80002c0:	20003fc0 	.word	0x20003fc0
 80002c4:	40020800 	.word	0x40020800

080002c8 <HAL_UART_ErrorCallback>:
 * UART4 error handler
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	//error...
	_Error_Handler("isrSensors.c, uart error",41);
 80002c8:	2129      	movs	r1, #41	; 0x29
 80002ca:	4801      	ldr	r0, [pc, #4]	; (80002d0 <HAL_UART_ErrorCallback+0x8>)
 80002cc:	f000 bec8 	b.w	8001060 <_Error_Handler>
 80002d0:	080059a0 	.word	0x080059a0

080002d4 <HAL_UART_RxCpltCallback>:
 * UART4 receive complete callback..
 * obtain hall sensor, encoder, etc data from intelligent board.
 * data updating rate <10us  ~100khz
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * the xHigherPriorityTaskWoken will be set to pdTrue and we can directly perform a context switch and thus
	 * leaves the ISR and go to task B, if not so, we need to go back to task A and wait for a tick to switch to B.
	 */
	static BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	if(huart->Instance==huart4.Instance) //not necessary to check..
 80002d8:	4b50      	ldr	r3, [pc, #320]	; (800041c <HAL_UART_RxCpltCallback+0x148>)
 80002da:	6802      	ldr	r2, [r0, #0]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d17a      	bne.n	80003d8 <HAL_UART_RxCpltCallback+0x104>
	{
		for(int i=0; i<5; i++)
		{
			if(enchall_buff[i] == TXHEADER)
 80002e2:	4f4f      	ldr	r7, [pc, #316]	; (8000420 <HAL_UART_RxCpltCallback+0x14c>)
 80002e4:	2501      	movs	r5, #1
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
				{
					//then we can obtain the correct bytes...
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 80002e6:	4c4f      	ldr	r4, [pc, #316]	; (8000424 <HAL_UART_RxCpltCallback+0x150>)
 80002e8:	463e      	mov	r6, r7
			if(enchall_buff[i] == TXHEADER)
 80002ea:	19eb      	adds	r3, r5, r7
 80002ec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80002f0:	2bf8      	cmp	r3, #248	; 0xf8
 80002f2:	d16b      	bne.n	80003cc <HAL_UART_RxCpltCallback+0xf8>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002f4:	2d05      	cmp	r5, #5
 80002f6:	d005      	beq.n	8000304 <HAL_UART_RxCpltCallback+0x30>
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002f8:	2d04      	cmp	r5, #4
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002fa:	b2ea      	uxtb	r2, r5
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002fc:	d103      	bne.n	8000306 <HAL_UART_RxCpltCallback+0x32>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002fe:	462a      	mov	r2, r5
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 8000300:	2300      	movs	r3, #0
 8000302:	e002      	b.n	800030a <HAL_UART_RxCpltCallback+0x36>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 8000304:	2200      	movs	r2, #0
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 8000306:	1c53      	adds	r3, r2, #1
 8000308:	b2db      	uxtb	r3, r3
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 800030a:	5cb1      	ldrb	r1, [r6, r2]
 800030c:	060a      	lsls	r2, r1, #24
 800030e:	d55d      	bpl.n	80003cc <HAL_UART_RxCpltCallback+0xf8>
 8000310:	5cf2      	ldrb	r2, [r6, r3]
 8000312:	f012 0f60 	tst.w	r2, #96	; 0x60
 8000316:	d059      	beq.n	80003cc <HAL_UART_RxCpltCallback+0xf8>
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000318:	f3c1 1080 	ubfx	r0, r1, #6, #1
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
					//next byte
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 800031c:	f002 021f 	and.w	r2, r2, #31
					//next two bytes
					uint8_t b1 = t==4?0:t+1;
 8000320:	2b04      	cmp	r3, #4
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000322:	7020      	strb	r0, [r4, #0]
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 8000324:	f3c1 1040 	ubfx	r0, r1, #5, #1
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 8000328:	7122      	strb	r2, [r4, #4]
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 800032a:	7060      	strb	r0, [r4, #1]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 800032c:	f3c1 0082 	ubfx	r0, r1, #2, #3
 8000330:	70a0      	strb	r0, [r4, #2]
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 8000332:	f001 0003 	and.w	r0, r1, #3
 8000336:	70e0      	strb	r0, [r4, #3]
					uint8_t b1 = t==4?0:t+1;
 8000338:	d005      	beq.n	8000346 <HAL_UART_RxCpltCallback+0x72>
 800033a:	3301      	adds	r3, #1
 800033c:	b2db      	uxtb	r3, r3
					uint8_t b2 = b1==4?0:b1+1;
 800033e:	2b04      	cmp	r3, #4
 8000340:	d102      	bne.n	8000348 <HAL_UART_RxCpltCallback+0x74>
 8000342:	2100      	movs	r1, #0
 8000344:	e002      	b.n	800034c <HAL_UART_RxCpltCallback+0x78>
					uint8_t b1 = t==4?0:t+1;
 8000346:	2300      	movs	r3, #0
					uint8_t b2 = b1==4?0:b1+1;
 8000348:	1c59      	adds	r1, r3, #1
 800034a:	b2c9      	uxtb	r1, r1
					enchall.enc_high = enchall_buff[b1]&0xff;
 800034c:	5cf3      	ldrb	r3, [r6, r3]
					enchall.enc_low = enchall_buff[b2]&0xff;
					//process the data... change to from 0-2000 encoder count..
					if(enchall.calc_tag == 2) //all 0
 800034e:	2802      	cmp	r0, #2
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000350:	7163      	strb	r3, [r4, #5]
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000352:	5c73      	ldrb	r3, [r6, r1]
 8000354:	4934      	ldr	r1, [pc, #208]	; (8000428 <HAL_UART_RxCpltCallback+0x154>)
 8000356:	71a3      	strb	r3, [r4, #6]
					if(enchall.calc_tag == 2) //all 0
 8000358:	d14b      	bne.n	80003f2 <HAL_UART_RxCpltCallback+0x11e>
					{
						enchall.recon_counter = enchall.enc_counter;  //only 5bits OK
 800035a:	8122      	strh	r2, [r4, #8]
					//get the last data..
					last5bitsdata = enchall.enc_counter;

					//send the queue to tasks...
					//since we need to always refresh the data, need to use overwrite, only return pass
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 800035c:	4833      	ldr	r0, [pc, #204]	; (800042c <HAL_UART_RxCpltCallback+0x158>)
 800035e:	2302      	movs	r3, #2
					last5bitsdata = enchall.enc_counter;
 8000360:	800a      	strh	r2, [r1, #0]
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000362:	4621      	mov	r1, r4
 8000364:	4a32      	ldr	r2, [pc, #200]	; (8000430 <HAL_UART_RxCpltCallback+0x15c>)
 8000366:	6800      	ldr	r0, [r0, #0]
 8000368:	f004 fca4 	bl	8004cb4 <xQueueGenericSendFromISR>
					//send the DFSDM current sensing data.
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 800036c:	2100      	movs	r1, #0
 800036e:	4831      	ldr	r0, [pc, #196]	; (8000434 <HAL_UART_RxCpltCallback+0x160>)
 8000370:	f001 fc8e 	bl	8001c90 <HAL_DFSDM_FilterPollForRegConversion>
 8000374:	4601      	mov	r1, r0
 8000376:	bb48      	cbnz	r0, 80003cc <HAL_UART_RxCpltCallback+0xf8>
							HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter1,0) == HAL_OK)
 8000378:	482f      	ldr	r0, [pc, #188]	; (8000438 <HAL_UART_RxCpltCallback+0x164>)
 800037a:	f001 fc89 	bl	8001c90 <HAL_DFSDM_FilterPollForRegConversion>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 800037e:	4681      	mov	r9, r0
 8000380:	bb20      	cbnz	r0, 80003cc <HAL_UART_RxCpltCallback+0xf8>
					{
						//also we need to deal with the offset by shorting the shunt sensor..
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000382:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800044c <HAL_UART_RxCpltCallback+0x178>
 8000386:	492d      	ldr	r1, [pc, #180]	; (800043c <HAL_UART_RxCpltCallback+0x168>)
 8000388:	482a      	ldr	r0, [pc, #168]	; (8000434 <HAL_UART_RxCpltCallback+0x160>)
 800038a:	f001 fc79 	bl	8001c80 <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 800038e:	492c      	ldr	r1, [pc, #176]	; (8000440 <HAL_UART_RxCpltCallback+0x16c>)
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000390:	f8c8 0004 	str.w	r0, [r8, #4]
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 8000394:	4828      	ldr	r0, [pc, #160]	; (8000438 <HAL_UART_RxCpltCallback+0x164>)
 8000396:	f001 fc73 	bl	8001c80 <HAL_DFSDM_FilterGetRegularValue>
						// f 256, I 2,  a: 8600 b:18400;  1ma = 100
						// f 128, I 2,  a:1200 b:2300;   1ma = 100/(2^3) = 12.5
						motorcurrent.cur_a -= 8600;
						motorcurrent.cur_b -= 18400;
 800039a:	f8d8 2004 	ldr.w	r2, [r8, #4]
						motorcurrent.cur_a -= 8600;
 800039e:	f5a0 5306 	sub.w	r3, r0, #8576	; 0x2180
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80003a2:	f5c0 5006 	rsb	r0, r0, #8576	; 0x2180
						motorcurrent.cur_b -= 18400;
 80003a6:	f5a2 428f 	sub.w	r2, r2, #18304	; 0x4780
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80003aa:	4641      	mov	r1, r8
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80003ac:	3018      	adds	r0, #24
						motorcurrent.cur_a -= 8600;
 80003ae:	3b18      	subs	r3, #24
						motorcurrent.cur_b -= 18400;
 80003b0:	3a60      	subs	r2, #96	; 0x60
						motorcurrent.cur_a -= 8600;
 80003b2:	f8c8 3000 	str.w	r3, [r8]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80003b6:	464b      	mov	r3, r9
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80003b8:	1a80      	subs	r0, r0, r2
						motorcurrent.cur_b -= 18400;
 80003ba:	f8c8 2004 	str.w	r2, [r8, #4]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80003be:	4a1c      	ldr	r2, [pc, #112]	; (8000430 <HAL_UART_RxCpltCallback+0x15c>)
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80003c0:	f8c8 0008 	str.w	r0, [r8, #8]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80003c4:	481f      	ldr	r0, [pc, #124]	; (8000444 <HAL_UART_RxCpltCallback+0x170>)
 80003c6:	6800      	ldr	r0, [r0, #0]
 80003c8:	f004 fc74 	bl	8004cb4 <xQueueGenericSendFromISR>
 80003cc:	3501      	adds	r5, #1
		for(int i=0; i<5; i++)
 80003ce:	2d06      	cmp	r5, #6
 80003d0:	d18b      	bne.n	80002ea <HAL_UART_RxCpltCallback+0x16>
					}
				}
			}
		}
		//continue DMA
		HAL_UART_DMAResume(&huart4);
 80003d2:	4812      	ldr	r0, [pc, #72]	; (800041c <HAL_UART_RxCpltCallback+0x148>)
 80003d4:	f003 fa9e 	bl	8003914 <HAL_UART_DMAResume>
	}
	//call a context switch if needed..
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <HAL_UART_RxCpltCallback+0x15c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	b13b      	cbz	r3, 80003ee <HAL_UART_RxCpltCallback+0x11a>
 80003de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003e2:	4b19      	ldr	r3, [pc, #100]	; (8000448 <HAL_UART_RxCpltCallback+0x174>)
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	f3bf 8f4f 	dsb	sy
 80003ea:	f3bf 8f6f 	isb	sy
 80003ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					else if(enchall.calc_tag == 3) //all 1
 80003f2:	2803      	cmp	r0, #3
 80003f4:	d103      	bne.n	80003fe <HAL_UART_RxCpltCallback+0x12a>
						enchall.recon_counter = ALLONECOUNT + enchall.enc_counter;
 80003f6:	f502 63f8 	add.w	r3, r2, #1984	; 0x7c0
							enchall.recon_counter = enchall.recon_counter&0xFFE0|enchall.enc_counter;
 80003fa:	8123      	strh	r3, [r4, #8]
 80003fc:	e7ae      	b.n	800035c <HAL_UART_RxCpltCallback+0x88>
						if(enchall.enc_counter-last5bitsdata>16) //overflowed..
 80003fe:	880b      	ldrh	r3, [r1, #0]
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	2b10      	cmp	r3, #16
 8000404:	dd05      	ble.n	8000412 <HAL_UART_RxCpltCallback+0x13e>
							enchall.recon_counter = (enchall.recon_counter - 32)&0xFFE0|enchall.enc_counter;
 8000406:	8923      	ldrh	r3, [r4, #8]
 8000408:	3b20      	subs	r3, #32
							enchall.recon_counter = enchall.recon_counter&0xFFE0|enchall.enc_counter;
 800040a:	f023 031f 	bic.w	r3, r3, #31
 800040e:	4313      	orrs	r3, r2
 8000410:	e7f3      	b.n	80003fa <HAL_UART_RxCpltCallback+0x126>
						else if(enchall.enc_counter-last5bitsdata<-16)
 8000412:	3310      	adds	r3, #16
							enchall.recon_counter = (enchall.recon_counter + 32)&0xFFE0|enchall.enc_counter;
 8000414:	8923      	ldrh	r3, [r4, #8]
 8000416:	bfb8      	it	lt
 8000418:	3320      	addlt	r3, #32
 800041a:	e7f6      	b.n	800040a <HAL_UART_RxCpltCallback+0x136>
 800041c:	200042ec 	.word	0x200042ec
 8000420:	20003dbc 	.word	0x20003dbc
 8000424:	20000000 	.word	0x20000000
 8000428:	20000030 	.word	0x20000030
 800042c:	20003fb0 	.word	0x20003fb0
 8000430:	20000040 	.word	0x20000040
 8000434:	20003dc4 	.word	0x20003dc4
 8000438:	20003f10 	.word	0x20003f10
 800043c:	20003f64 	.word	0x20003f64
 8000440:	20003e18 	.word	0x20003e18
 8000444:	20003fc0 	.word	0x20003fc0
 8000448:	e000ed04 	.word	0xe000ed04
 800044c:	20000034 	.word	0x20000034

08000450 <StartledblueTask>:
/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000450:	4c05      	ldr	r4, [pc, #20]	; (8000468 <StartledblueTask+0x18>)
{
 8000452:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000454:	4620      	mov	r0, r4
 8000456:	2104      	movs	r1, #4
 8000458:	f001 fee1 	bl	800221e <HAL_GPIO_TogglePin>
		osDelay(500);
 800045c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000460:	f003 ffa9 	bl	80043b6 <osDelay>
 8000464:	e7f6      	b.n	8000454 <StartledblueTask+0x4>
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <StartledgreenTask>:
/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 800046c:	4c05      	ldr	r4, [pc, #20]	; (8000484 <StartledgreenTask+0x18>)
{
 800046e:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000470:	4620      	mov	r0, r4
 8000472:	2108      	movs	r1, #8
 8000474:	f001 fed3 	bl	800221e <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047c:	f003 ff9b 	bl	80043b6 <osDelay>
 8000480:	e7f6      	b.n	8000470 <StartledgreenTask+0x4>
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 8000488:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 800048a:	2032      	movs	r0, #50	; 0x32
 800048c:	f003 ff93 	bl	80043b6 <osDelay>
 8000490:	e7fb      	b.n	800048a <StartiwdgTask+0x2>
	...

08000494 <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000498:	f240 36f3 	movw	r6, #1011	; 0x3f3
 800049c:	22c8      	movs	r2, #200	; 0xc8
 800049e:	2100      	movs	r1, #0
 80004a0:	a802      	add	r0, sp, #8
 80004a2:	f240 35f5 	movw	r5, #1013	; 0x3f5
 80004a6:	f005 f9f8 	bl	800589a <memset>
 80004aa:	f8ad 601e 	strh.w	r6, [sp, #30]
 80004ae:	f240 76db 	movw	r6, #2011	; 0x7db
 80004b2:	f240 71dd 	movw	r1, #2013	; 0x7dd
 80004b6:	f240 72df 	movw	r2, #2015	; 0x7df
 80004ba:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80004be:	f8ad 6020 	strh.w	r6, [sp, #32]
 80004c2:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
 80004c6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80004ca:	f240 34f7 	movw	r4, #1015	; 0x3f7
 80004ce:	f8ad 100a 	strh.w	r1, [sp, #10]
 80004d2:	f240 77dc 	movw	r7, #2012	; 0x7dc
 80004d6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80004da:	f8ad 2012 	strh.w	r2, [sp, #18]
 80004de:	f8ad 0014 	strh.w	r0, [sp, #20]
 80004e2:	f8ad 1018 	strh.w	r1, [sp, #24]
 80004e6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80004ea:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80004ee:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 80004f2:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80004f6:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80004fa:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80004fe:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000502:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 8000506:	f240 71e5 	movw	r1, #2021	; 0x7e5
 800050a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800050e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8000512:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8000516:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 800051a:	f240 70e6 	movw	r0, #2022	; 0x7e6
 800051e:	f8ad 5008 	strh.w	r5, [sp, #8]
 8000522:	f8ad 300e 	strh.w	r3, [sp, #14]
 8000526:	f8ad 4010 	strh.w	r4, [sp, #16]
 800052a:	f8ad 5016 	strh.w	r5, [sp, #22]
 800052e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000532:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8000536:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 800053a:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 800053e:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
 8000542:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8000546:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 800054a:	f8ad 701a 	strh.w	r7, [sp, #26]
 800054e:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 8000552:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8000556:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 800055a:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800055e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8000562:	f240 33ff 	movw	r3, #1023	; 0x3ff
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
	for(;;)
	{
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000566:	4c29      	ldr	r4, [pc, #164]	; (800060c <StartbuzzerrythmTask+0x178>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000568:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800056c:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8000570:	4625      	mov	r5, r4
		{
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 8000572:	4e27      	ldr	r6, [pc, #156]	; (8000610 <StartbuzzerrythmTask+0x17c>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000574:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8000578:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800057c:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8000580:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 8000584:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8000588:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 800058c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 8000590:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8000594:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000598:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 800059c:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 80005a0:	f44f 637b 	mov.w	r3, #4016	; 0xfb0
 80005a4:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 80005a8:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	volatile uint16_t i = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f8ad 3006 	strh.w	r3, [sp, #6]
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 80005b2:	2300      	movs	r3, #0
 80005b4:	6820      	ldr	r0, [r4, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	f004 fbe5 	bl	8004d88 <xQueueGenericReceive>
 80005be:	2801      	cmp	r0, #1
 80005c0:	d11d      	bne.n	80005fe <StartbuzzerrythmTask+0x16a>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 80005c2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80005c6:	2300      	movs	r3, #0
 80005c8:	a802      	add	r0, sp, #8
 80005ca:	b289      	uxth	r1, r1
 80005cc:	461a      	mov	r2, r3
 80005ce:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80005d2:	6830      	ldr	r0, [r6, #0]
 80005d4:	f004 fa9e 	bl	8004b14 <xQueueGenericSend>
 80005d8:	2801      	cmp	r0, #1
 80005da:	d10a      	bne.n	80005f2 <StartbuzzerrythmTask+0x15e>
			{
				i=i==SONGLENGTH-1?0:i+1;
 80005dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	2b31      	cmp	r3, #49	; 0x31
 80005e4:	d00f      	beq.n	8000606 <StartbuzzerrythmTask+0x172>
 80005e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80005ea:	3301      	adds	r3, #1
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f8ad 3006 	strh.w	r3, [sp, #6]
			}
			xSemaphoreGive(buzzerMutexHandle);
 80005f2:	2300      	movs	r3, #0
 80005f4:	6828      	ldr	r0, [r5, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	f004 fa8b 	bl	8004b14 <xQueueGenericSend>
		}
		osDelay(10);
 80005fe:	200a      	movs	r0, #10
 8000600:	f003 fed9 	bl	80043b6 <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000604:	e7d5      	b.n	80005b2 <StartbuzzerrythmTask+0x11e>
				i=i==SONGLENGTH-1?0:i+1;
 8000606:	2300      	movs	r3, #0
 8000608:	e7f1      	b.n	80005ee <StartbuzzerrythmTask+0x15a>
 800060a:	bf00      	nop
 800060c:	20003fac 	.word	0x20003fac
 8000610:	20003fa0 	.word	0x20003fa0
 8000614:	00000000 	.word	0x00000000

08000618 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 8000618:	b570      	push	{r4, r5, r6, lr}
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800061a:	4c4b      	ldr	r4, [pc, #300]	; (8000748 <StartbuzzertoneTask+0x130>)
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 800061c:	2600      	movs	r6, #0
{
 800061e:	ed2d 8b02 	vpush	{d8}
 8000622:	b090      	sub	sp, #64	; 0x40
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000626:	ad09      	add	r5, sp, #36	; 0x24
	volatile float tonefreq = 0, time = 0;;
 8000628:	9602      	str	r6, [sp, #8]
 800062a:	9603      	str	r6, [sp, #12]
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800062c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800062e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000632:	340c      	adds	r4, #12
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000634:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	ad04      	add	r5, sp, #16
 800063c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063e:	6823      	ldr	r3, [r4, #0]
				if(black)
					tonefreq = tonetable_black[black-1] * num *2 ;
				else
					tonefreq = tonetable_white[white-1] * num *2;
				//ring
				SetbuzzerFreq(tonefreq);
 8000640:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 8000740 <StartbuzzertoneTask+0x128>
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000644:	602b      	str	r3, [r5, #0]
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 8000646:	4d41      	ldr	r5, [pc, #260]	; (800074c <StartbuzzertoneTask+0x134>)
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 8000648:	4841      	ldr	r0, [pc, #260]	; (8000750 <StartbuzzertoneTask+0x138>)
 800064a:	220a      	movs	r2, #10
 800064c:	2300      	movs	r3, #0
 800064e:	f10d 0106 	add.w	r1, sp, #6
 8000652:	6800      	ldr	r0, [r0, #0]
 8000654:	f004 fb98 	bl	8004d88 <xQueueGenericReceive>
 8000658:	2801      	cmp	r0, #1
 800065a:	4602      	mov	r2, r0
 800065c:	4c3d      	ldr	r4, [pc, #244]	; (8000754 <StartbuzzertoneTask+0x13c>)
 800065e:	d168      	bne.n	8000732 <StartbuzzertoneTask+0x11a>
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 8000660:	2300      	movs	r3, #0
 8000662:	6828      	ldr	r0, [r5, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f004 fb8f 	bl	8004d88 <xQueueGenericReceive>
			time = tonedata/1000;
 800066a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	fbb1 f2f3 	udiv	r2, r1, r3
 8000676:	b290      	uxth	r0, r2
			black = (tonedata%1000)/100;
 8000678:	fb03 1212 	mls	r2, r3, r2, r1
			time = tonedata/1000;
 800067c:	ee07 0a90 	vmov	s15, r0
			black = (tonedata%1000)/100;
 8000680:	b292      	uxth	r2, r2
			time = tonedata/1000;
 8000682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000686:	edcd 7a03 	vstr	s15, [sp, #12]
			if((tonedata%1000) != 0)
 800068a:	2a00      	cmp	r2, #0
 800068c:	d04c      	beq.n	8000728 <StartbuzzertoneTask+0x110>
			black = (tonedata%1000)/100;
 800068e:	2064      	movs	r0, #100	; 0x64
			num = (tonedata%100)/10;
 8000690:	fbb1 f3f0 	udiv	r3, r1, r0
 8000694:	fb00 1313 	mls	r3, r0, r3, r1
			black = (tonedata%1000)/100;
 8000698:	fbb2 f2f0 	udiv	r2, r2, r0
			num = (tonedata%100)/10;
 800069c:	b29b      	uxth	r3, r3
 800069e:	200a      	movs	r0, #10
 80006a0:	fbb3 f3f0 	udiv	r3, r3, r0
 80006a4:	ee07 3a90 	vmov	s15, r3
 80006a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if(black)
 80006ac:	b38a      	cbz	r2, 8000712 <StartbuzzertoneTask+0xfa>
					tonefreq = tonetable_black[black-1] * num *2 ;
 80006ae:	ab10      	add	r3, sp, #64	; 0x40
 80006b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80006b4:	ed12 7a0d 	vldr	s14, [r2, #-52]	; 0xffffffcc
					tonefreq = tonetable_white[white-1] * num *2;
 80006b8:	ee67 7a87 	vmul.f32	s15, s15, s14
				SetbuzzerFreq(tonefreq);
 80006bc:	6823      	ldr	r3, [r4, #0]
 80006be:	2200      	movs	r2, #0
					tonefreq = tonetable_white[white-1] * num *2;
 80006c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006c4:	edcd 7a02 	vstr	s15, [sp, #8]
				SetbuzzerFreq(tonefreq);
 80006c8:	ed9d 6a02 	vldr	s12, [sp, #8]
 80006cc:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80006d0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80006d4:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80006d8:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
			else
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
 80006de:	eddd 7a03 	vldr	s15, [sp, #12]
 80006e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	d00b      	beq.n	8000704 <StartbuzzertoneTask+0xec>
				osDelay(500/time); //time is used to shorter the sound..
 80006ec:	ed9d 7a03 	vldr	s14, [sp, #12]
 80006f0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000758 <StartbuzzertoneTask+0x140>
 80006f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006fc:	ee17 0a90 	vmov	r0, s15
 8000700:	f003 fe59 	bl	80043b6 <osDelay>
			xSemaphoreGive(buzzerMutexHandle);
 8000704:	2300      	movs	r3, #0
 8000706:	6828      	ldr	r0, [r5, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4619      	mov	r1, r3
 800070c:	f004 fa02 	bl	8004b14 <xQueueGenericSend>
 8000710:	e79a      	b.n	8000648 <StartbuzzertoneTask+0x30>
			white  = tonedata%10;
 8000712:	fbb1 f3f0 	udiv	r3, r1, r0
 8000716:	fb00 1313 	mls	r3, r0, r3, r1
					tonefreq = tonetable_white[white-1] * num *2;
 800071a:	aa10      	add	r2, sp, #64	; 0x40
 800071c:	b29b      	uxth	r3, r3
 800071e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000722:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8000726:	e7c7      	b.n	80006b8 <StartbuzzertoneTask+0xa0>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 800072e:	9602      	str	r6, [sp, #8]
 8000730:	e7d5      	b.n	80006de <StartbuzzertoneTask+0xc6>
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
 800073a:	e785      	b.n	8000648 <StartbuzzertoneTask+0x30>
 800073c:	f3af 8000 	nop.w
 8000740:	00000000 	.word	0x00000000
 8000744:	412e8480 	.word	0x412e8480
 8000748:	080058c4 	.word	0x080058c4
 800074c:	20003fac 	.word	0x20003fac
 8000750:	20003fa0 	.word	0x20003fa0
 8000754:	200040fc 	.word	0x200040fc
 8000758:	43fa0000 	.word	0x43fa0000

0800075c <SystemInitialization>:
extern uint8_t enchall_buff[5];
extern int32_t cur_u;
extern int32_t cur_v;

void SystemInitialization(void)
{
 800075c:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);

	/*
	 * tim1 pwm initialization
	 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800075e:	4c15      	ldr	r4, [pc, #84]	; (80007b4 <SystemInitialization+0x58>)
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000760:	2100      	movs	r1, #0
 8000762:	4815      	ldr	r0, [pc, #84]	; (80007b8 <SystemInitialization+0x5c>)
 8000764:	f002 ff0a 	bl	800357c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000768:	2100      	movs	r1, #0
 800076a:	4620      	mov	r0, r4
 800076c:	f002 ff06 	bl	800357c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8000770:	2100      	movs	r1, #0
 8000772:	4620      	mov	r0, r4
 8000774:	f002 ff78 	bl	8003668 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000778:	2104      	movs	r1, #4
 800077a:	4620      	mov	r0, r4
 800077c:	f002 fefe 	bl	800357c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8000780:	2104      	movs	r1, #4
 8000782:	4620      	mov	r0, r4
 8000784:	f002 ff70 	bl	8003668 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000788:	2108      	movs	r1, #8
 800078a:	4620      	mov	r0, r4
 800078c:	f002 fef6 	bl	800357c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8000790:	2108      	movs	r1, #8
 8000792:	4620      	mov	r0, r4
 8000794:	f002 ff68 	bl	8003668 <HAL_TIMEx_PWMN_Start>

	/*
	 * register the call back of uart4 transmit..
	 */
	//HAL_DMA_RegisterCallback(&hdma_uart4_rx,HAL_DMA_XFER_CPLTUART4_DMA2_Cplt_Callback);
	HAL_UART_Receive_DMA(&huart4,enchall_buff,5);
 8000798:	2205      	movs	r2, #5
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <SystemInitialization+0x60>)
 800079c:	4808      	ldr	r0, [pc, #32]	; (80007c0 <SystemInitialization+0x64>)
 800079e:	f003 f875 	bl	800388c <HAL_UART_Receive_DMA>

	/*
	 * DFSDM initial
	 */
	//polling mode
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0);
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <SystemInitialization+0x68>)
 80007a4:	f001 fa5f 	bl	8001c66 <HAL_DFSDM_FilterRegularStart>
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <SystemInitialization+0x6c>)
	//DMA mode
//	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,&cur_u,1);
//	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,&cur_v,1);
}
 80007aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 80007ae:	f001 ba5a 	b.w	8001c66 <HAL_DFSDM_FilterRegularStart>
 80007b2:	bf00      	nop
 80007b4:	200040bc 	.word	0x200040bc
 80007b8:	200040fc 	.word	0x200040fc
 80007bc:	20003dbc 	.word	0x20003dbc
 80007c0:	200042ec 	.word	0x200042ec
 80007c4:	20003dc4 	.word	0x20003dc4
 80007c8:	20003f10 	.word	0x20003f10

080007cc <StartenchallTask>:
#include "cmsis_os.h"
#include "main.h"
extern osMessageQId enchallQueueHandle;

void StartenchallTask(void const * argument)
{
 80007cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  for(;;)
  {
	  ENCHD encdata;
	  uint8_t datatosend[50];
	  //We dont wanna read out and destory the data in the queue therefore use xQueuePeek
	  if(xQueuePeek(enchallQueueHandle,&encdata,0)==pdPASS)
 80007ce:	4d35      	ldr	r5, [pc, #212]	; (80008a4 <StartenchallTask+0xd8>)
{
 80007d0:	b091      	sub	sp, #68	; 0x44
		  datatosend[++i] = '\t';
		  datatosend[++i] = encdata.enc_counter/10 + 0x30; //msb unit
		  datatosend[++i] = encdata.enc_counter%10 + 0x30; //lsb unit
		  datatosend[++i] = '\t';
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 80007d2:	2464      	movs	r4, #100	; 0x64
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
		  datatosend[++i] = '\t';
		  datatosend[++i] = '\r';
		  datatosend[++i] = '\n';
		  HAL_UART_Transmit(&huart1,datatosend,i,10);
 80007d4:	4e34      	ldr	r6, [pc, #208]	; (80008a8 <StartenchallTask+0xdc>)
	  if(xQueuePeek(enchallQueueHandle,&encdata,0)==pdPASS)
 80007d6:	2301      	movs	r3, #1
 80007d8:	2200      	movs	r2, #0
 80007da:	4669      	mov	r1, sp
 80007dc:	6828      	ldr	r0, [r5, #0]
 80007de:	f004 fad3 	bl	8004d88 <xQueueGenericReceive>
 80007e2:	2801      	cmp	r0, #1
 80007e4:	d159      	bne.n	800089a <StartenchallTask+0xce>
		  datatosend[i] = encdata.mseq_out + 0x30;//1bit
 80007e6:	f89d 3000 	ldrb.w	r3, [sp]
		  datatosend[++i] = '\t';
 80007ea:	2009      	movs	r0, #9
		  datatosend[++i] = encdata.enc_counter/10 + 0x30; //msb unit
 80007ec:	f89d 1004 	ldrb.w	r1, [sp, #4]
		  datatosend[i] = encdata.mseq_out + 0x30;//1bit
 80007f0:	3330      	adds	r3, #48	; 0x30
		  datatosend[++i] = '\t';
 80007f2:	f88d 000e 	strb.w	r0, [sp, #14]
		  datatosend[++i] = '\t';
 80007f6:	f88d 0010 	strb.w	r0, [sp, #16]
		  datatosend[i] = encdata.mseq_out + 0x30;//1bit
 80007fa:	f88d 300c 	strb.w	r3, [sp, #12]
		  datatosend[++i] = encdata.auxbit_in + 0x30;//1bit
 80007fe:	f89d 3001 	ldrb.w	r3, [sp, #1]
		  datatosend[++i] = '\t';
 8000802:	f88d 0012 	strb.w	r0, [sp, #18]
		  datatosend[++i] = encdata.auxbit_in + 0x30;//1bit
 8000806:	3330      	adds	r3, #48	; 0x30
		  datatosend[++i] = '\t';
 8000808:	f88d 0015 	strb.w	r0, [sp, #21]
		  datatosend[++i] = '\t';
 800080c:	f88d 001a 	strb.w	r0, [sp, #26]
		  HAL_UART_Transmit(&huart1,datatosend,i,10);
 8000810:	4630      	mov	r0, r6
		  datatosend[++i] = encdata.auxbit_in + 0x30;//1bit
 8000812:	f88d 300d 	strb.w	r3, [sp, #13]
		  datatosend[++i] = encdata.hole_in + 0x30; //3bits
 8000816:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800081a:	3330      	adds	r3, #48	; 0x30
 800081c:	f88d 300f 	strb.w	r3, [sp, #15]
		  datatosend[++i] = encdata.calc_tag + 0x30; //2bits
 8000820:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000824:	3330      	adds	r3, #48	; 0x30
 8000826:	f88d 3011 	strb.w	r3, [sp, #17]
		  datatosend[++i] = encdata.enc_counter/10 + 0x30; //msb unit
 800082a:	230a      	movs	r3, #10
 800082c:	fbb1 f2f3 	udiv	r2, r1, r3
 8000830:	f102 0730 	add.w	r7, r2, #48	; 0x30
		  datatosend[++i] = encdata.enc_counter%10 + 0x30; //lsb unit
 8000834:	fb03 1212 	mls	r2, r3, r2, r1
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8000838:	f8bd 1008 	ldrh.w	r1, [sp, #8]
		  datatosend[++i] = encdata.enc_counter%10 + 0x30; //lsb unit
 800083c:	3230      	adds	r2, #48	; 0x30
		  datatosend[++i] = encdata.enc_counter/10 + 0x30; //msb unit
 800083e:	f88d 7013 	strb.w	r7, [sp, #19]
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8000842:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		  datatosend[++i] = '\n';
 8000846:	f88d 301c 	strb.w	r3, [sp, #28]
		  datatosend[++i] = encdata.enc_counter%10 + 0x30; //lsb unit
 800084a:	f88d 2014 	strb.w	r2, [sp, #20]
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 800084e:	fbb1 f2f7 	udiv	r2, r1, r7
 8000852:	f102 0e30 	add.w	lr, r2, #48	; 0x30
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8000856:	fb07 1212 	mls	r2, r7, r2, r1
 800085a:	b292      	uxth	r2, r2
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 800085c:	f88d e016 	strb.w	lr, [sp, #22]
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8000860:	fbb2 f2f4 	udiv	r2, r2, r4
 8000864:	3230      	adds	r2, #48	; 0x30
 8000866:	f88d 2017 	strb.w	r2, [sp, #23]
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 800086a:	fbb1 f2f4 	udiv	r2, r1, r4
 800086e:	fb04 1212 	mls	r2, r4, r2, r1
 8000872:	b292      	uxth	r2, r2
 8000874:	fbb2 f2f3 	udiv	r2, r2, r3
 8000878:	3230      	adds	r2, #48	; 0x30
 800087a:	f88d 2018 	strb.w	r2, [sp, #24]
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 800087e:	fbb1 f2f3 	udiv	r2, r1, r3
 8000882:	fb03 1112 	mls	r1, r3, r2, r1
		  datatosend[++i] = '\r';
 8000886:	220d      	movs	r2, #13
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 8000888:	3130      	adds	r1, #48	; 0x30
		  datatosend[++i] = '\r';
 800088a:	f88d 201b 	strb.w	r2, [sp, #27]
		  HAL_UART_Transmit(&huart1,datatosend,i,10);
 800088e:	2210      	movs	r2, #16
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 8000890:	f88d 1019 	strb.w	r1, [sp, #25]
		  HAL_UART_Transmit(&huart1,datatosend,i,10);
 8000894:	a903      	add	r1, sp, #12
 8000896:	f003 f89d 	bl	80039d4 <HAL_UART_Transmit>
	  }
	  //every 5 mini
	  osDelay(100);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f003 fd8b 	bl	80043b6 <osDelay>
  {
 80008a0:	e799      	b.n	80007d6 <StartenchallTask+0xa>
 80008a2:	bf00      	nop
 80008a4:	20003fb0 	.word	0x20003fb0
 80008a8:	2000420c 	.word	0x2000420c

080008ac <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80008ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80008b0:	482e      	ldr	r0, [pc, #184]	; (800096c <MX_DFSDM1_Init+0xc0>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80008b2:	2400      	movs	r4, #0
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80008b4:	2501      	movs	r5, #1
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <MX_DFSDM1_Init+0xc4>)
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 80008b8:	2602      	movs	r6, #2
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80008ba:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 80008be:	f44f 7780 	mov.w	r7, #256	; 0x100
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80008c2:	7205      	strb	r5, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80008c4:	7245      	strb	r5, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80008c6:	f8c0 801c 	str.w	r8, [r0, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 80008ca:	6207      	str	r7, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 80008cc:	6246      	str	r6, [r0, #36]	; 0x24
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80008ce:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80008d2:	f001 f939 	bl	8001b48 <HAL_DFSDM_FilterInit>

  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80008d6:	4827      	ldr	r0, [pc, #156]	; (8000974 <MX_DFSDM1_Init+0xc8>)
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_DFSDM1_Init+0xcc>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80008da:	7205      	strb	r5, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80008dc:	7245      	strb	r5, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80008de:	f8c0 801c 	str.w	r8, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
 80008e2:	6207      	str	r7, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
 80008e4:	6246      	str	r6, [r0, #36]	; 0x24
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80008e6:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80008ea:	f001 f92d 	bl	8001b48 <HAL_DFSDM_FilterInit>

  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008ee:	4823      	ldr	r0, [pc, #140]	; (800097c <MX_DFSDM1_Init+0xd0>)
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_DFSDM1_Init+0xd4>)
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80008f2:	7104      	strb	r4, [r0, #4]
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008f4:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80008f6:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008fa:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80008fc:	60c6      	str	r6, [r0, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008fe:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000900:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000902:	6184      	str	r4, [r0, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000904:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000906:	6204      	str	r4, [r0, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000908:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800090a:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800090c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800090e:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000910:	f001 f8a6 	bl	8001a60 <HAL_DFSDM_ChannelInit>
 8000914:	b118      	cbz	r0, 800091e <MX_DFSDM1_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000916:	2168      	movs	r1, #104	; 0x68
 8000918:	481a      	ldr	r0, [pc, #104]	; (8000984 <MX_DFSDM1_Init+0xd8>)
 800091a:	f000 fba1 	bl	8001060 <_Error_Handler>
  }

  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 800091e:	481a      	ldr	r0, [pc, #104]	; (8000988 <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 8000920:	2202      	movs	r2, #2
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_DFSDM1_Init+0xe0>)
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 8000924:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000926:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 800092a:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 800092c:	2300      	movs	r3, #0
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800092e:	6242      	str	r2, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000930:	2201      	movs	r2, #1
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 8000932:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000934:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000936:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000938:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800093a:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800093c:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800093e:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000940:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 8000942:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 8000944:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8000946:	f001 f88b 	bl	8001a60 <HAL_DFSDM_ChannelInit>
 800094a:	b118      	cbz	r0, 8000954 <MX_DFSDM1_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800094c:	217a      	movs	r1, #122	; 0x7a
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_DFSDM1_Init+0xd8>)
 8000950:	f000 fb86 	bl	8001060 <_Error_Handler>
  }

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 8000954:	2201      	movs	r2, #1
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_DFSDM1_Init+0xc0>)
 8000958:	4611      	mov	r1, r2
 800095a:	f001 f967 	bl	8001c2c <HAL_DFSDM_FilterConfigRegChannel>

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 800095e:	2201      	movs	r2, #1
 8000960:	490b      	ldr	r1, [pc, #44]	; (8000990 <MX_DFSDM1_Init+0xe4>)
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_DFSDM1_Init+0xc8>)

}
 8000964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 8000968:	f001 b960 	b.w	8001c2c <HAL_DFSDM_FilterConfigRegChannel>
 800096c:	20003dc4 	.word	0x20003dc4
 8000970:	40017500 	.word	0x40017500
 8000974:	20003f10 	.word	0x20003f10
 8000978:	40017580 	.word	0x40017580
 800097c:	20003f64 	.word	0x20003f64
 8000980:	40017400 	.word	0x40017400
 8000984:	080059b9 	.word	0x080059b9
 8000988:	20003e18 	.word	0x20003e18
 800098c:	40017460 	.word	0x40017460
 8000990:	00030008 	.word	0x00030008

08000994 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000994:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 8000996:	4c43      	ldr	r4, [pc, #268]	; (8000aa4 <HAL_DFSDM_FilterMspInit+0x110>)
{
 8000998:	b087      	sub	sp, #28
 800099a:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 800099c:	6823      	ldr	r3, [r4, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d12a      	bne.n	80009f8 <HAL_DFSDM_FilterMspInit+0x64>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80009a2:	4a41      	ldr	r2, [pc, #260]	; (8000aa8 <HAL_DFSDM_FilterMspInit+0x114>)
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80009a8:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80009aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80009ac:	d109      	bne.n	80009c2 <HAL_DFSDM_FilterMspInit+0x2e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80009ae:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <HAL_DFSDM_FilterMspInit+0x118>)
 80009b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009b2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80009b6:	645a      	str	r2, [r3, #68]	; 0x44
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	9b00      	ldr	r3, [sp, #0]
    PE4     ------> DFSDM1_DATIN3
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009c2:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009ca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80009cc:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ce:	4838      	ldr	r0, [pc, #224]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80009d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d8:	f001 fb32 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80009dc:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009de:	a901      	add	r1, sp, #4
 80009e0:	4834      	ldr	r0, [pc, #208]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x120>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80009e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009e4:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ee:	f001 fb27 	bl	8002040 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80009f8:	682a      	ldr	r2, [r5, #0]
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x124>)
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d125      	bne.n	8000a4c <HAL_DFSDM_FilterMspInit+0xb8>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000a00:	4c2e      	ldr	r4, [pc, #184]	; (8000abc <HAL_DFSDM_FilterMspInit+0x128>)
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000a06:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000a0a:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000a10:	3310      	adds	r3, #16
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000a12:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a14:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000a1a:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000a1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a20:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000a22:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000a26:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a28:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000a2a:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a30:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a32:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a34:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a36:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000a38:	f001 f976 	bl	8001d28 <HAL_DMA_Init>
 8000a3c:	b118      	cbz	r0, 8000a46 <HAL_DFSDM_FilterMspInit+0xb2>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000a3e:	21bf      	movs	r1, #191	; 0xbf
 8000a40:	481f      	ldr	r0, [pc, #124]	; (8000ac0 <HAL_DFSDM_FilterMspInit+0x12c>)
 8000a42:	f000 fb0d 	bl	8001060 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000a46:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000a48:	62ac      	str	r4, [r5, #40]	; 0x28
 8000a4a:	63a5      	str	r5, [r4, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000a4c:	682a      	ldr	r2, [r5, #0]
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x130>)
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d125      	bne.n	8000aa0 <HAL_DFSDM_FilterMspInit+0x10c>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8000a54:	4c1c      	ldr	r4, [pc, #112]	; (8000ac8 <HAL_DFSDM_FilterMspInit+0x134>)
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8000a5a:	f503 436e 	add.w	r3, r3, #60928	; 0xee00
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000a5e:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8000a64:	33a8      	adds	r3, #168	; 0xa8
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000a66:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a68:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8000a6e:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000a70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a74:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000a76:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000a7a:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a7c:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000a7e:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a84:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a86:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a88:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a8a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000a8c:	f001 f94c 	bl	8001d28 <HAL_DMA_Init>
 8000a90:	b118      	cbz	r0, 8000a9a <HAL_DFSDM_FilterMspInit+0x106>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000a92:	21d6      	movs	r1, #214	; 0xd6
 8000a94:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <HAL_DFSDM_FilterMspInit+0x12c>)
 8000a96:	f000 fae3 	bl	8001060 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000a9a:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000a9c:	62ac      	str	r4, [r5, #40]	; 0x28
 8000a9e:	63a5      	str	r5, [r4, #56]	; 0x38
  }

}
 8000aa0:	b007      	add	sp, #28
 8000aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa4:	20000044 	.word	0x20000044
 8000aa8:	20000048 	.word	0x20000048
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	40017500 	.word	0x40017500
 8000abc:	20003eb0 	.word	0x20003eb0
 8000ac0:	080059b9 	.word	0x080059b9
 8000ac4:	40017580 	.word	0x40017580
 8000ac8:	20003e50 	.word	0x20003e50

08000acc <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000acc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 8000ace:	4c19      	ldr	r4, [pc, #100]	; (8000b34 <HAL_DFSDM_ChannelMspInit+0x68>)
{
 8000ad0:	b086      	sub	sp, #24
  if(DFSDM1_Init == 0)
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d12a      	bne.n	8000b2e <HAL_DFSDM_ChannelMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8000ada:	6813      	ldr	r3, [r2, #0]
 8000adc:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000ade:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000ae0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000ae2:	d109      	bne.n	8000af8 <HAL_DFSDM_ChannelMspInit+0x2c>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_DFSDM_ChannelMspInit+0x70>)
 8000ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ae8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000aec:	645a      	str	r2, [r3, #68]	; 0x44
 8000aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	9b00      	ldr	r3, [sp, #0]
    PE4     ------> DFSDM1_DATIN3
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000af8:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afe:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b00:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000b02:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b04:	480e      	ldr	r0, [pc, #56]	; (8000b40 <HAL_DFSDM_ChannelMspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000b06:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0e:	f001 fa97 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b12:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	a901      	add	r1, sp, #4
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <HAL_DFSDM_ChannelMspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b18:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b1a:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b1e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b24:	f001 fa8c 	bl	8002040 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	6023      	str	r3, [r4, #0]
  }
}
 8000b2e:	b006      	add	sp, #24
 8000b30:	bd70      	pop	{r4, r5, r6, pc}
 8000b32:	bf00      	nop
 8000b34:	20000044 	.word	0x20000044
 8000b38:	20000048 	.word	0x20000048
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40020c00 	.word	0x40020c00

08000b48 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_DMA_Init+0x60>)
{
 8000b4a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b4e:	2105      	movs	r1, #5
 8000b50:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b52:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000b56:	631a      	str	r2, [r3, #48]	; 0x30
 8000b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b5a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000b5e:	9200      	str	r2, [sp, #0]
 8000b60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b64:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b6a:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b76:	f000 feb5 	bl	80018e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b7a:	200d      	movs	r0, #13
 8000b7c:	f000 feea 	bl	8001954 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2105      	movs	r1, #5
 8000b84:	2038      	movs	r0, #56	; 0x38
 8000b86:	f000 fead 	bl	80018e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b8a:	2038      	movs	r0, #56	; 0x38
 8000b8c:	f000 fee2 	bl	8001954 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2105      	movs	r1, #5
 8000b94:	2039      	movs	r0, #57	; 0x39
 8000b96:	f000 fea5 	bl	80018e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b9a:	2039      	movs	r0, #57	; 0x39
 8000b9c:	f000 feda 	bl	8001954 <HAL_NVIC_EnableIRQ>

}
 8000ba0:	b003      	add	sp, #12
 8000ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	b0ad      	sub	sp, #180	; 0xb4
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of buzzerMutex */
  osMutexDef(buzzerMutex);
 8000bb0:	2500      	movs	r5, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of enchallTask */
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000bb2:	4c4b      	ldr	r4, [pc, #300]	; (8000ce0 <MX_FREERTOS_Init+0x134>)
  osMutexDef(buzzerMutex);
 8000bb4:	a82c      	add	r0, sp, #176	; 0xb0
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000bb6:	ae09      	add	r6, sp, #36	; 0x24
 8000bb8:	4627      	mov	r7, r4
  osMutexDef(buzzerMutex);
 8000bba:	f840 5db0 	str.w	r5, [r0, #-176]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 8000bbe:	f003 fc02 	bl	80043c6 <osMutexCreate>
 8000bc2:	4b48      	ldr	r3, [pc, #288]	; (8000ce4 <MX_FREERTOS_Init+0x138>)
 8000bc4:	6018      	str	r0, [r3, #0]
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000bc6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000bc8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bca:	683b      	ldr	r3, [r7, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000bcc:	4629      	mov	r1, r5
 8000bce:	a809      	add	r0, sp, #36	; 0x24

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 8000bd0:	f104 0714 	add.w	r7, r4, #20
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000bd4:	6033      	str	r3, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000bd6:	f003 fbd6 	bl	8004386 <osThreadCreate>
 8000bda:	4b43      	ldr	r3, [pc, #268]	; (8000ce8 <MX_FREERTOS_Init+0x13c>)
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 8000bdc:	ae0e      	add	r6, sp, #56	; 0x38
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000bde:	6018      	str	r0, [r3, #0]
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 8000be0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000be2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000be4:	683b      	ldr	r3, [r7, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8000be6:	4629      	mov	r1, r5
 8000be8:	a80e      	add	r0, sp, #56	; 0x38

  /* definition and creation of ledblueTask */
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000bea:	f104 0728 	add.w	r7, r4, #40	; 0x28
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 8000bee:	6033      	str	r3, [r6, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8000bf0:	f003 fbc9 	bl	8004386 <osThreadCreate>
 8000bf4:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <MX_FREERTOS_Init+0x140>)
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000bf6:	ae13      	add	r6, sp, #76	; 0x4c
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8000bf8:	6018      	str	r0, [r3, #0]
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000bfa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000bfc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bfe:	683b      	ldr	r3, [r7, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000c00:	4629      	mov	r1, r5
 8000c02:	a813      	add	r0, sp, #76	; 0x4c

  /* definition and creation of ledgreenTask */
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000c04:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000c08:	6033      	str	r3, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000c0a:	f003 fbbc 	bl	8004386 <osThreadCreate>
 8000c0e:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <MX_FREERTOS_Init+0x144>)
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000c10:	ae18      	add	r6, sp, #96	; 0x60
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000c12:	6018      	str	r0, [r3, #0]
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000c14:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000c16:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c18:	683b      	ldr	r3, [r7, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	a818      	add	r0, sp, #96	; 0x60

  /* definition and creation of iwdgTask */
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000c1e:	f104 0750 	add.w	r7, r4, #80	; 0x50
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000c22:	6033      	str	r3, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000c24:	f003 fbaf 	bl	8004386 <osThreadCreate>
 8000c28:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <MX_FREERTOS_Init+0x148>)
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000c2a:	ae1d      	add	r6, sp, #116	; 0x74
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000c2c:	6018      	str	r0, [r3, #0]
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000c2e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000c30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c32:	683b      	ldr	r3, [r7, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000c34:	4629      	mov	r1, r5
 8000c36:	a81d      	add	r0, sp, #116	; 0x74

  /* definition and creation of buzzertoneTask */
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000c38:	f104 0764 	add.w	r7, r4, #100	; 0x64
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000c3c:	6033      	str	r3, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000c3e:	f003 fba2 	bl	8004386 <osThreadCreate>
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <MX_FREERTOS_Init+0x14c>)
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000c44:	ae22      	add	r6, sp, #136	; 0x88
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000c46:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000c48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000c4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c4c:	683b      	ldr	r3, [r7, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000c4e:	4629      	mov	r1, r5
 8000c50:	a822      	add	r0, sp, #136	; 0x88

  /* definition and creation of buzzerrythmTask */
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000c52:	f104 0778 	add.w	r7, r4, #120	; 0x78
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000c56:	6033      	str	r3, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000c58:	f003 fb95 	bl	8004386 <osThreadCreate>
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <MX_FREERTOS_Init+0x150>)
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000c5e:	ae27      	add	r6, sp, #156	; 0x9c
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000c60:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000c62:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000c64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c66:	683b      	ldr	r3, [r7, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000c68:	4629      	mov	r1, r5
 8000c6a:	a827      	add	r0, sp, #156	; 0x9c
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000c6c:	6033      	str	r3, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000c6e:	f003 fb8a 	bl	8004386 <osThreadCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of buzzerQueue */
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000c72:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_FREERTOS_Init+0x154>)
 8000c78:	6018      	str	r0, [r3, #0]
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000c7a:	ab01      	add	r3, sp, #4
 8000c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c80:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000c84:	4629      	mov	r1, r5
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fba0 	bl	80043cc <osMessageCreate>

  /* definition and creation of rythmQueue */
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000c8c:	f104 0294 	add.w	r2, r4, #148	; 0x94
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_FREERTOS_Init+0x158>)
 8000c92:	6018      	str	r0, [r3, #0]
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000c94:	ab03      	add	r3, sp, #12
 8000c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c9a:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 fb93 	bl	80043cc <osMessageCreate>

  /* definition and creation of enchallQueue */
  osMessageQDef(enchallQueue, 1, ENCHD);
 8000ca6:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_FREERTOS_Init+0x15c>)
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);

  /* definition and creation of shuntQueue */
  osMessageQDef(shuntQueue, 1, CURDATA);
 8000cac:	34a4      	adds	r4, #164	; 0xa4
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8000cae:	6018      	str	r0, [r3, #0]
  osMessageQDef(enchallQueue, 1, ENCHD);
 8000cb0:	ab05      	add	r3, sp, #20
 8000cb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb6:	e883 0003 	stmia.w	r3, {r0, r1}
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 8000cba:	4629      	mov	r1, r5
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fb85 	bl	80043cc <osMessageCreate>
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_FREERTOS_Init+0x160>)
 8000cc4:	6018      	str	r0, [r3, #0]
  osMessageQDef(shuntQueue, 1, CURDATA);
 8000cc6:	ab07      	add	r3, sp, #28
 8000cc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ccc:	e883 0003 	stmia.w	r3, {r0, r1}
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 8000cd0:	4629      	mov	r1, r5
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fb7a 	bl	80043cc <osMessageCreate>
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <MX_FREERTOS_Init+0x164>)
 8000cda:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  /* USER CODE END RTOS_QUEUES */
}
 8000cdc:	b02d      	add	sp, #180	; 0xb4
 8000cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce0:	080058f4 	.word	0x080058f4
 8000ce4:	20003fac 	.word	0x20003fac
 8000ce8:	20003fa8 	.word	0x20003fa8
 8000cec:	20003fb4 	.word	0x20003fb4
 8000cf0:	20003fbc 	.word	0x20003fbc
 8000cf4:	20003fb8 	.word	0x20003fb8
 8000cf8:	20003fc4 	.word	0x20003fc4
 8000cfc:	20003f9c 	.word	0x20003f9c
 8000d00:	20003fc8 	.word	0x20003fc8
 8000d04:	20003fa0 	.word	0x20003fa0
 8000d08:	20003fa4 	.word	0x20003fa4
 8000d0c:	20003fb0 	.word	0x20003fb0
 8000d10:	20003fc0 	.word	0x20003fc0

08000d14 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000d16:	210c      	movs	r1, #12
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d1a:	f042 0210 	orr.w	r2, r2, #16
{
 8000d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d20:	631a      	str	r2, [r3, #48]	; 0x30
{
 8000d22:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000d28:	4c32      	ldr	r4, [pc, #200]	; (8000df4 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2a:	f002 0210 	and.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d2e:	4f32      	ldr	r7, [pc, #200]	; (8000df8 <MX_GPIO_Init+0xe4>)
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000d30:	4620      	mov	r0, r4
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8000d32:	4e32      	ldr	r6, [pc, #200]	; (8000dfc <MX_GPIO_Init+0xe8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d34:	9201      	str	r2, [sp, #4]
 8000d36:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8000d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d42:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000d46:	9202      	str	r2, [sp, #8]
 8000d48:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d4c:	f042 0204 	orr.w	r2, r2, #4
 8000d50:	631a      	str	r2, [r3, #48]	; 0x30
 8000d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d54:	f002 0204 	and.w	r2, r2, #4
 8000d58:	9203      	str	r2, [sp, #12]
 8000d5a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d5e:	f042 0201 	orr.w	r2, r2, #1
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
 8000d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d66:	f002 0201 	and.w	r2, r2, #1
 8000d6a:	9204      	str	r2, [sp, #16]
 8000d6c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d70:	f042 0202 	orr.w	r2, r2, #2
 8000d74:	631a      	str	r2, [r3, #48]	; 0x30
 8000d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d78:	f002 0202 	and.w	r2, r2, #2
 8000d7c:	9205      	str	r2, [sp, #20]
 8000d7e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d82:	f042 0208 	orr.w	r2, r2, #8
 8000d86:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	9306      	str	r3, [sp, #24]
 8000d92:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000d94:	f001 fa3e 	bl	8002214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d98:	4638      	mov	r0, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da0:	f001 fa38 	bl	8002214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	4630      	mov	r0, r6
 8000da8:	2140      	movs	r1, #64	; 0x40
 8000daa:	f001 fa33 	bl	8002214 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000dae:	230c      	movs	r3, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db0:	a907      	add	r1, sp, #28
 8000db2:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000db4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000db6:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	9509      	str	r5, [sp, #36]	; 0x24

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dbc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc0:	f001 f93e 	bl	8002040 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	a907      	add	r1, sp, #28
 8000dca:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dd0:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dd4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f001 f933 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000dda:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	a907      	add	r1, sp, #28
 8000dde:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000de2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000de6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f001 f92a 	bl	8002040 <HAL_GPIO_Init>

}
 8000dec:	b00d      	add	sp, #52	; 0x34
 8000dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020400 	.word	0x40020400

08000e00 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000e00:	b508      	push	{r3, lr}

  hi2c4.Instance = I2C4;
 8000e02:	4815      	ldr	r0, [pc, #84]	; (8000e58 <MX_I2C4_Init+0x58>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e04:	2201      	movs	r2, #1
  hi2c4.Init.Timing = 0x20404768;
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_I2C4_Init+0x5c>)
 8000e08:	4915      	ldr	r1, [pc, #84]	; (8000e60 <MX_I2C4_Init+0x60>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0a:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.Timing = 0x20404768;
 8000e0c:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c4.Init.OwnAddress1 = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	6083      	str	r3, [r0, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e14:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e16:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e18:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1a:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e1e:	f001 fa02 	bl	8002226 <HAL_I2C_Init>
 8000e22:	b118      	cbz	r0, 8000e2c <MX_I2C4_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e24:	214c      	movs	r1, #76	; 0x4c
 8000e26:	480f      	ldr	r0, [pc, #60]	; (8000e64 <MX_I2C4_Init+0x64>)
 8000e28:	f000 f91a 	bl	8001060 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	480a      	ldr	r0, [pc, #40]	; (8000e58 <MX_I2C4_Init+0x58>)
 8000e30:	f001 fa4a 	bl	80022c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e34:	b118      	cbz	r0, 8000e3e <MX_I2C4_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e36:	2153      	movs	r1, #83	; 0x53
 8000e38:	480a      	ldr	r0, [pc, #40]	; (8000e64 <MX_I2C4_Init+0x64>)
 8000e3a:	f000 f911 	bl	8001060 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_I2C4_Init+0x58>)
 8000e42:	f001 fa67 	bl	8002314 <HAL_I2CEx_ConfigDigitalFilter>
 8000e46:	b128      	cbz	r0, 8000e54 <MX_I2C4_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e48:	215a      	movs	r1, #90	; 0x5a
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <MX_I2C4_Init+0x64>)
  }

}
 8000e4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000e50:	f000 b906 	b.w	8001060 <_Error_Handler>
 8000e54:	bd08      	pop	{r3, pc}
 8000e56:	bf00      	nop
 8000e58:	20003fcc 	.word	0x20003fcc
 8000e5c:	20404768 	.word	0x20404768
 8000e60:	40006000 	.word	0x40006000
 8000e64:	08005a27 	.word	0x08005a27

08000e68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C4)
 8000e6a:	6802      	ldr	r2, [r0, #0]
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_I2C_MspInit+0x44>)
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d119      	bne.n	8000ea6 <HAL_I2C_MspInit+0x3e>
  
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e72:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e78:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7a:	2312      	movs	r3, #18
 8000e7c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e86:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e88:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f001 f8d7 	bl	8002040 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_I2C_MspInit+0x4c>)
 8000e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e96:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000ea6:	b007      	add	sp, #28
 8000ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eac:	40006000 	.word	0x40006000
 8000eb0:	40020c00 	.word	0x40020c00
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	4b31      	ldr	r3, [pc, #196]	; (8000f80 <SystemClock_Config+0xc8>)
 8000eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ebc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	641a      	str	r2, [r3, #64]	; 0x40
{
 8000ec4:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec8:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eca:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ecc:	2701      	movs	r7, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <SystemClock_Config+0xcc>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee4:	9707      	str	r7, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eea:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eec:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef6:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000efe:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f00:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f02:	23d8      	movs	r3, #216	; 0xd8
 8000f04:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f06:	f001 fae5 	bl	80024d4 <HAL_RCC_OscConfig>
 8000f0a:	b100      	cbz	r0, 8000f0e <SystemClock_Config+0x56>
 8000f0c:	e7fe      	b.n	8000f0c <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f0e:	f001 faa9 	bl	8002464 <HAL_PWREx_EnableOverDrive>
 8000f12:	b100      	cbz	r0, 8000f16 <SystemClock_Config+0x5e>
 8000f14:	e7fe      	b.n	8000f14 <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1a:	260f      	movs	r6, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f1e:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f20:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f26:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2a:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f2c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f2e:	f001 fc8f 	bl	8002850 <HAL_RCC_ClockConfig>
 8000f32:	b100      	cbz	r0, 8000f36 <SystemClock_Config+0x7e>
 8000f34:	e7fe      	b.n	8000f34 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <SystemClock_Config+0xd0>)
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000f38:	9030      	str	r0, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000f3a:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000f3c:	2310      	movs	r3, #16
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f3e:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f40:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000f42:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000f44:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000f46:	9725      	str	r7, [sp, #148]	; 0x94
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000f48:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8000f4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f4e:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f50:	f001 fd52 	bl	80029f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f54:	4605      	mov	r5, r0
 8000f56:	b100      	cbz	r0, 8000f5a <SystemClock_Config+0xa2>
 8000f58:	e7fe      	b.n	8000f58 <SystemClock_Config+0xa0>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f5a:	f001 fd09 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f66:	f000 fd01 	bl	800196c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f000 fd14 	bl	8001998 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000f70:	462a      	mov	r2, r5
 8000f72:	4631      	mov	r1, r6
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 fcb4 	bl	80018e4 <HAL_NVIC_SetPriority>
}
 8000f7c:	b039      	add	sp, #228	; 0xe4
 8000f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40007000 	.word	0x40007000
 8000f88:	08022340 	.word	0x08022340

08000f8c <main>:
{
 8000f8c:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f92:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f96:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <main+0xbc>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fa4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000faa:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8000fae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fb6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fba:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fbe:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fc2:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000fc6:	07a5      	lsls	r5, r4, #30
 8000fc8:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fca:	ea02 0e06 	and.w	lr, r2, r6
 8000fce:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fd0:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fd2:	ea4e 0700 	orr.w	r7, lr, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8000fd6:	3901      	subs	r1, #1
 8000fd8:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fdc:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 8000fe0:	1c4f      	adds	r7, r1, #1
 8000fe2:	d1f6      	bne.n	8000fd2 <main+0x46>
 8000fe4:	3a20      	subs	r2, #32
    } while(sets--);
 8000fe6:	f112 0f20 	cmn.w	r2, #32
 8000fea:	d1ee      	bne.n	8000fca <main+0x3e>
 8000fec:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ff6:	615a      	str	r2, [r3, #20]
 8000ff8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ffc:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001000:	f000 fc30 	bl	8001864 <HAL_Init>
  SystemClock_Config();
 8001004:	f7ff ff58 	bl	8000eb8 <SystemClock_Config>
  MX_GPIO_Init();
 8001008:	f7ff fe84 	bl	8000d14 <MX_GPIO_Init>
  MX_DMA_Init();
 800100c:	f7ff fd9c 	bl	8000b48 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8001010:	f7ff fc4c 	bl	80008ac <MX_DFSDM1_Init>
  MX_I2C4_Init();
 8001014:	f7ff fef4 	bl	8000e00 <MX_I2C4_Init>
  MX_SPI1_Init();
 8001018:	f000 f824 	bl	8001064 <MX_SPI1_Init>
  MX_TIM1_Init();
 800101c:	f000 f96c 	bl	80012f8 <MX_TIM1_Init>
  MX_UART4_Init();
 8001020:	f000 fa46 	bl	80014b0 <MX_UART4_Init>
  MX_UART8_Init();
 8001024:	f000 fa6e 	bl	8001504 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001028:	f000 fa92 	bl	8001550 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800102c:	f000 fab6 	bl	800159c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8001030:	f000 fb88 	bl	8001744 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8001034:	f000 f9ea 	bl	800140c <MX_TIM2_Init>
  SystemInitialization();
 8001038:	f7ff fb90 	bl	800075c <SystemInitialization>
  MX_FREERTOS_Init();
 800103c:	f7ff fdb6 	bl	8000bac <MX_FREERTOS_Init>
  osKernelStart();
 8001040:	f003 f99c 	bl	800437c <osKernelStart>
 8001044:	e7fe      	b.n	8001044 <main+0xb8>
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800104c:	6802      	ldr	r2, [r0, #0]
 800104e:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001050:	429a      	cmp	r2, r3
 8001052:	d101      	bne.n	8001058 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001054:	f000 bc18 	b.w	8001888 <HAL_IncTick>
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40000800 	.word	0x40000800

08001060 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001060:	e7fe      	b.n	8001060 <_Error_Handler>
	...

08001064 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001066:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106a:	4912      	ldr	r1, [pc, #72]	; (80010b4 <MX_SPI1_Init+0x50>)
{
 800106c:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001072:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001074:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001078:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800107c:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800107e:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001080:	2230      	movs	r2, #48	; 0x30
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001082:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001084:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001086:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001088:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 800108a:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800108e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001090:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001092:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001094:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8001096:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001098:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800109a:	f001 ff3b 	bl	8002f14 <HAL_SPI_Init>
 800109e:	b128      	cbz	r0, 80010ac <MX_SPI1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 80010a0:	2151      	movs	r1, #81	; 0x51
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_SPI1_Init+0x54>)
  }

}
 80010a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80010a8:	f7ff bfda 	b.w	8001060 <_Error_Handler>
 80010ac:	bd08      	pop	{r3, pc}
 80010ae:	bf00      	nop
 80010b0:	20004018 	.word	0x20004018
 80010b4:	40013000 	.word	0x40013000
 80010b8:	08005a3a 	.word	0x08005a3a

080010bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 80010bc:	6802      	ldr	r2, [r0, #0]
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_SPI_MspInit+0x58>)
 80010c0:	429a      	cmp	r2, r3
{
 80010c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c4:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI1)
 80010c6:	d122      	bne.n	800110e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010c8:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d4:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d6:	a901      	add	r1, sp, #4
 80010d8:	480f      	ldr	r0, [pc, #60]	; (8001118 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010de:	645a      	str	r2, [r3, #68]	; 0x44
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010f0:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010f4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f6:	f000 ffa3 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80010fa:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	a901      	add	r1, sp, #4
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001100:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001108:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f000 ff99 	bl	8002040 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800110e:	b007      	add	sp, #28
 8001110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001112:	bf00      	nop
 8001114:	40013000 	.word	0x40013000
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40020400 	.word	0x40020400

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001122:	2003      	movs	r0, #3
 8001124:	f000 fbcc 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	f06f 000b 	mvn.w	r0, #11
 800112e:	4611      	mov	r1, r2
 8001130:	f000 fbd8 	bl	80018e4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	f06f 000a 	mvn.w	r0, #10
 800113a:	4611      	mov	r1, r2
 800113c:	f000 fbd2 	bl	80018e4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	f06f 0009 	mvn.w	r0, #9
 8001146:	4611      	mov	r1, r2
 8001148:	f000 fbcc 	bl	80018e4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	f06f 0004 	mvn.w	r0, #4
 8001152:	4611      	mov	r1, r2
 8001154:	f000 fbc6 	bl	80018e4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	f06f 0003 	mvn.w	r0, #3
 800115e:	4611      	mov	r1, r2
 8001160:	f000 fbc0 	bl	80018e4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	210f      	movs	r1, #15
 8001168:	f06f 0001 	mvn.w	r0, #1
 800116c:	f000 fbba 	bl	80018e4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800117c:	f000 bbb2 	b.w	80018e4 <HAL_NVIC_SetPriority>

08001180 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001182:	4601      	mov	r1, r0
{
 8001184:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001186:	2200      	movs	r2, #0
 8001188:	201e      	movs	r0, #30
 800118a:	f000 fbab 	bl	80018e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800118e:	201e      	movs	r0, #30
 8001190:	f000 fbe0 	bl	8001954 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001196:	a901      	add	r1, sp, #4
 8001198:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 800119a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800119c:	4c13      	ldr	r4, [pc, #76]	; (80011ec <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 800119e:	f042 0204 	orr.w	r2, r2, #4
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ae:	f001 fc05 	bl	80029bc <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011b2:	f001 fbe3 	bl	800297c <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011b8:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 80011ba:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80011bc:	f240 33e7 	movw	r3, #999	; 0x3e7
 80011c0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_InitTick+0x74>)
 80011c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80011c8:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 80011ca:	2300      	movs	r3, #0
  htim4.Init.Prescaler = uwPrescalerValue;
 80011cc:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80011ce:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 80011d0:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80011d4:	f002 f83e 	bl	8003254 <HAL_TIM_Base_Init>
 80011d8:	b920      	cbnz	r0, 80011e4 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80011da:	4620      	mov	r0, r4
 80011dc:	f001 ff12 	bl	8003004 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80011e0:	b008      	add	sp, #32
 80011e2:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80011e4:	2001      	movs	r0, #1
 80011e6:	e7fb      	b.n	80011e0 <HAL_InitTick+0x60>
 80011e8:	40023800 	.word	0x40023800
 80011ec:	2000407c 	.word	0x2000407c
 80011f0:	40000800 	.word	0x40000800
 80011f4:	000f4240 	.word	0x000f4240

080011f8 <NMI_Handler>:
 80011f8:	4770      	bx	lr

080011fa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler>

080011fc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler>

080011fe <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler>

08001200 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001200:	e7fe      	b.n	8001200 <UsageFault_Handler>

08001202 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001202:	4770      	bx	lr

08001204 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001204:	f003 b8e6 	b.w	80043d4 <osSystickHandler>

08001208 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001208:	4801      	ldr	r0, [pc, #4]	; (8001210 <DMA1_Stream2_IRQHandler+0x8>)
 800120a:	f000 be5b 	b.w	8001ec4 <HAL_DMA_IRQHandler>
 800120e:	bf00      	nop
 8001210:	2000413c 	.word	0x2000413c

08001214 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001214:	4801      	ldr	r0, [pc, #4]	; (800121c <TIM4_IRQHandler+0x8>)
 8001216:	f001 bf05 	b.w	8003024 <HAL_TIM_IRQHandler>
 800121a:	bf00      	nop
 800121c:	2000407c 	.word	0x2000407c

08001220 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001220:	4801      	ldr	r0, [pc, #4]	; (8001228 <UART4_IRQHandler+0x8>)
 8001222:	f002 bcb5 	b.w	8003b90 <HAL_UART_IRQHandler>
 8001226:	bf00      	nop
 8001228:	200042ec 	.word	0x200042ec

0800122c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800122c:	4801      	ldr	r0, [pc, #4]	; (8001234 <DMA2_Stream0_IRQHandler+0x8>)
 800122e:	f000 be49 	b.w	8001ec4 <HAL_DMA_IRQHandler>
 8001232:	bf00      	nop
 8001234:	20003eb0 	.word	0x20003eb0

08001238 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001238:	4801      	ldr	r0, [pc, #4]	; (8001240 <DMA2_Stream1_IRQHandler+0x8>)
 800123a:	f000 be43 	b.w	8001ec4 <HAL_DMA_IRQHandler>
 800123e:	bf00      	nop
 8001240:	20003e50 	.word	0x20003e50

08001244 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8001244:	6803      	ldr	r3, [r0, #0]
{
 8001246:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_TIM_Base_MspInit+0x40>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10b      	bne.n	8001266 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_TIM_Base_MspInit+0x44>)
 8001250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	645a      	str	r2, [r3, #68]	; 0x44
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001262:	b002      	add	sp, #8
 8001264:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 8001266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800126a:	d1fa      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	9b01      	ldr	r3, [sp, #4]
}
 8001282:	e7ee      	b.n	8001262 <HAL_TIM_Base_MspInit+0x1e>
 8001284:	40010000 	.word	0x40010000
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 800128c:	6803      	ldr	r3, [r0, #0]
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_TIM_MspPostInit+0x60>)
 8001290:	4293      	cmp	r3, r2
{
 8001292:	b570      	push	{r4, r5, r6, lr}
 8001294:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 8001296:	d119      	bne.n	80012cc <HAL_TIM_MspPostInit+0x40>
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800129a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800129e:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	a901      	add	r1, sp, #4
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012ac:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f000 fec7 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80012b2:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b6:	a901      	add	r1, sp, #4
 80012b8:	480e      	ldr	r0, [pc, #56]	; (80012f4 <HAL_TIM_MspPostInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80012ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012c2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f000 febc 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012c8:	b006      	add	sp, #24
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM2)
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d0:	d1fa      	bne.n	80012c8 <HAL_TIM_MspPostInit+0x3c>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	a901      	add	r1, sp, #4
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012e4:	2301      	movs	r3, #1
 80012e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012e8:	9305      	str	r3, [sp, #20]
 80012ea:	e7eb      	b.n	80012c4 <HAL_TIM_MspPostInit+0x38>
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40021000 	.word	0x40021000

080012f8 <MX_TIM1_Init>:
  htim1.Instance = TIM1;
 80012f8:	4841      	ldr	r0, [pc, #260]	; (8001400 <MX_TIM1_Init+0x108>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80012fa:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 80012fc:	4b41      	ldr	r3, [pc, #260]	; (8001404 <MX_TIM1_Init+0x10c>)
{
 80012fe:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 8001300:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001302:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001304:	6082      	str	r2, [r0, #8]
  htim1.Init.Period = 2160;
 8001306:	f44f 6207 	mov.w	r2, #2160	; 0x870
{
 800130a:	b09a      	sub	sp, #104	; 0x68
  htim1.Init.Prescaler = 0;
 800130c:	6043      	str	r3, [r0, #4]
  htim1.Init.Period = 2160;
 800130e:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001312:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001316:	f001 ff9d 	bl	8003254 <HAL_TIM_Base_Init>
 800131a:	b118      	cbz	r0, 8001324 <MX_TIM1_Init+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 800131c:	214d      	movs	r1, #77	; 0x4d
 800131e:	483a      	ldr	r0, [pc, #232]	; (8001408 <MX_TIM1_Init+0x110>)
 8001320:	f7ff fe9e 	bl	8001060 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001324:	a91a      	add	r1, sp, #104	; 0x68
 8001326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800132a:	4835      	ldr	r0, [pc, #212]	; (8001400 <MX_TIM1_Init+0x108>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001330:	f002 f88a 	bl	8003448 <HAL_TIM_ConfigClockSource>
 8001334:	b118      	cbz	r0, 800133e <MX_TIM1_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 8001336:	2153      	movs	r1, #83	; 0x53
 8001338:	4833      	ldr	r0, [pc, #204]	; (8001408 <MX_TIM1_Init+0x110>)
 800133a:	f7ff fe91 	bl	8001060 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133e:	4830      	ldr	r0, [pc, #192]	; (8001400 <MX_TIM1_Init+0x108>)
 8001340:	f001 ffa2 	bl	8003288 <HAL_TIM_PWM_Init>
 8001344:	b118      	cbz	r0, 800134e <MX_TIM1_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 8001346:	2158      	movs	r1, #88	; 0x58
 8001348:	482f      	ldr	r0, [pc, #188]	; (8001408 <MX_TIM1_Init+0x110>)
 800134a:	f7ff fe89 	bl	8001060 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001350:	a901      	add	r1, sp, #4
 8001352:	482b      	ldr	r0, [pc, #172]	; (8001400 <MX_TIM1_Init+0x108>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001356:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800135a:	f002 f997 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	b118      	cbz	r0, 8001368 <MX_TIM1_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
 8001360:	2160      	movs	r1, #96	; 0x60
 8001362:	4829      	ldr	r0, [pc, #164]	; (8001408 <MX_TIM1_Init+0x110>)
 8001364:	f7ff fe7c 	bl	8001060 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001368:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136a:	2400      	movs	r4, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136c:	a908      	add	r1, sp, #32
 800136e:	4824      	ldr	r0, [pc, #144]	; (8001400 <MX_TIM1_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001370:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 580;
 8001372:	f44f 7311 	mov.w	r3, #580	; 0x244
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001376:	4622      	mov	r2, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001378:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.Pulse = 580;
 800137a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800137c:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137e:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001380:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001382:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001384:	f002 f9ee 	bl	8003764 <HAL_TIM_PWM_ConfigChannel>
 8001388:	b118      	cbz	r0, 8001392 <MX_TIM1_Init+0x9a>
    _Error_Handler(__FILE__, __LINE__);
 800138a:	216c      	movs	r1, #108	; 0x6c
 800138c:	481e      	ldr	r0, [pc, #120]	; (8001408 <MX_TIM1_Init+0x110>)
 800138e:	f7ff fe67 	bl	8001060 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001392:	2204      	movs	r2, #4
 8001394:	a908      	add	r1, sp, #32
 8001396:	481a      	ldr	r0, [pc, #104]	; (8001400 <MX_TIM1_Init+0x108>)
  sConfigOC.Pulse = 0;
 8001398:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139a:	f002 f9e3 	bl	8003764 <HAL_TIM_PWM_ConfigChannel>
 800139e:	b118      	cbz	r0, 80013a8 <MX_TIM1_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 80013a0:	2172      	movs	r1, #114	; 0x72
 80013a2:	4819      	ldr	r0, [pc, #100]	; (8001408 <MX_TIM1_Init+0x110>)
 80013a4:	f7ff fe5c 	bl	8001060 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a8:	2208      	movs	r2, #8
 80013aa:	a908      	add	r1, sp, #32
 80013ac:	4814      	ldr	r0, [pc, #80]	; (8001400 <MX_TIM1_Init+0x108>)
 80013ae:	f002 f9d9 	bl	8003764 <HAL_TIM_PWM_ConfigChannel>
 80013b2:	b118      	cbz	r0, 80013bc <MX_TIM1_Init+0xc4>
    _Error_Handler(__FILE__, __LINE__);
 80013b4:	2177      	movs	r1, #119	; 0x77
 80013b6:	4814      	ldr	r0, [pc, #80]	; (8001408 <MX_TIM1_Init+0x110>)
 80013b8:	f7ff fe52 	bl	8001060 <_Error_Handler>
  sBreakDeadTimeConfig.DeadTime = 2;
 80013bc:	2202      	movs	r2, #2
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013be:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c0:	a90f      	add	r1, sp, #60	; 0x3c
 80013c2:	480f      	ldr	r0, [pc, #60]	; (8001400 <MX_TIM1_Init+0x108>)
  sBreakDeadTimeConfig.DeadTime = 2;
 80013c4:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ca:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013cc:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ce:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d0:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d2:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013d8:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013da:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013dc:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80013de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013e2:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80013e4:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e6:	f002 f977 	bl	80036d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ea:	b118      	cbz	r0, 80013f4 <MX_TIM1_Init+0xfc>
    _Error_Handler(__FILE__, __LINE__);
 80013ec:	2187      	movs	r1, #135	; 0x87
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_TIM1_Init+0x110>)
 80013f0:	f7ff fe36 	bl	8001060 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <MX_TIM1_Init+0x108>)
 80013f6:	f7ff ff49 	bl	800128c <HAL_TIM_MspPostInit>
}
 80013fa:	b01a      	add	sp, #104	; 0x68
 80013fc:	bd10      	pop	{r4, pc}
 80013fe:	bf00      	nop
 8001400:	200040bc 	.word	0x200040bc
 8001404:	40010000 	.word	0x40010000
 8001408:	08005a4d 	.word	0x08005a4d

0800140c <MX_TIM2_Init>:
  htim2.Instance = TIM2;
 800140c:	4826      	ldr	r0, [pc, #152]	; (80014a8 <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 107;
 800140e:	236b      	movs	r3, #107	; 0x6b
 8001410:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 50000;
 8001414:	f24c 3250 	movw	r2, #50000	; 0xc350
{
 8001418:	b500      	push	{lr}
  htim2.Init.Prescaler = 107;
 800141a:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	2300      	movs	r3, #0
{
 8001420:	b08f      	sub	sp, #60	; 0x3c
  htim2.Init.Period = 50000;
 8001422:	60c2      	str	r2, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142c:	f001 ff12 	bl	8003254 <HAL_TIM_Base_Init>
 8001430:	b118      	cbz	r0, 800143a <MX_TIM2_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 8001432:	219c      	movs	r1, #156	; 0x9c
 8001434:	481d      	ldr	r0, [pc, #116]	; (80014ac <MX_TIM2_Init+0xa0>)
 8001436:	f7ff fe13 	bl	8001060 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143a:	a90e      	add	r1, sp, #56	; 0x38
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001440:	4819      	ldr	r0, [pc, #100]	; (80014a8 <MX_TIM2_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001442:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001446:	f001 ffff 	bl	8003448 <HAL_TIM_ConfigClockSource>
 800144a:	b118      	cbz	r0, 8001454 <MX_TIM2_Init+0x48>
    _Error_Handler(__FILE__, __LINE__);
 800144c:	21a2      	movs	r1, #162	; 0xa2
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <MX_TIM2_Init+0xa0>)
 8001450:	f7ff fe06 	bl	8001060 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <MX_TIM2_Init+0x9c>)
 8001456:	f001 ff17 	bl	8003288 <HAL_TIM_PWM_Init>
 800145a:	b118      	cbz	r0, 8001464 <MX_TIM2_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 800145c:	21a7      	movs	r1, #167	; 0xa7
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <MX_TIM2_Init+0xa0>)
 8001460:	f7ff fdfe 	bl	8001060 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001466:	4669      	mov	r1, sp
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146e:	f002 f90d 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	b118      	cbz	r0, 800147c <MX_TIM2_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
 8001474:	21ae      	movs	r1, #174	; 0xae
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_TIM2_Init+0xa0>)
 8001478:	f7ff fdf2 	bl	8001060 <_Error_Handler>
  sConfigOC.Pulse = 0;
 800147c:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001480:	a907      	add	r1, sp, #28
 8001482:	4809      	ldr	r0, [pc, #36]	; (80014a8 <MX_TIM2_Init+0x9c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001484:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001486:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001488:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148a:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148c:	f002 f96a 	bl	8003764 <HAL_TIM_PWM_ConfigChannel>
 8001490:	b118      	cbz	r0, 800149a <MX_TIM2_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 8001492:	21b7      	movs	r1, #183	; 0xb7
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_TIM2_Init+0xa0>)
 8001496:	f7ff fde3 	bl	8001060 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 800149a:	4803      	ldr	r0, [pc, #12]	; (80014a8 <MX_TIM2_Init+0x9c>)
 800149c:	f7ff fef6 	bl	800128c <HAL_TIM_MspPostInit>
}
 80014a0:	b00f      	add	sp, #60	; 0x3c
 80014a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80014a6:	bf00      	nop
 80014a8:	200040fc 	.word	0x200040fc
 80014ac:	08005a4d 	.word	0x08005a4d

080014b0 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80014b0:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 80014b2:	4810      	ldr	r0, [pc, #64]	; (80014f4 <MX_UART4_Init+0x44>)
  huart4.Init.BaudRate = 8000000;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_RX;
 80014b4:	2204      	movs	r2, #4
  huart4.Init.BaudRate = 8000000;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_UART4_Init+0x48>)
 80014b8:	f8df e044 	ldr.w	lr, [pc, #68]	; 8001500 <MX_UART4_Init+0x50>
  huart4.Init.Mode = UART_MODE_RX;
 80014bc:	6142      	str	r2, [r0, #20]
  huart4.Init.BaudRate = 8000000;
 80014be:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	2300      	movs	r3, #0
 80014c4:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014c6:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014c8:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_MSBFIRST_INIT;
 80014d0:	2390      	movs	r3, #144	; 0x90
 80014d2:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80014d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d8:	6383      	str	r3, [r0, #56]	; 0x38
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 80014da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80014de:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014e0:	f002 fdcd 	bl	800407e <HAL_UART_Init>
 80014e4:	b128      	cbz	r0, 80014f2 <MX_UART4_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014e6:	2154      	movs	r1, #84	; 0x54
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_UART4_Init+0x4c>)
  }

}
 80014ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80014ee:	f7ff bdb7 	b.w	8001060 <_Error_Handler>
 80014f2:	bd08      	pop	{r3, pc}
 80014f4:	200042ec 	.word	0x200042ec
 80014f8:	40004c00 	.word	0x40004c00
 80014fc:	08005a60 	.word	0x08005a60
 8001500:	007a1200 	.word	0x007a1200

08001504 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001504:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 8001506:	480e      	ldr	r0, [pc, #56]	; (8001540 <MX_UART8_Init+0x3c>)
  huart8.Init.BaudRate = 26666666;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001508:	220c      	movs	r2, #12
  huart8.Init.BaudRate = 26666666;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_UART8_Init+0x40>)
 800150c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800154c <MX_UART8_Init+0x48>
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001510:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 8001512:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart8.Init.BaudRate = 26666666;
 8001516:	e880 4008 	stmia.w	r0, {r3, lr}
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	2300      	movs	r3, #0
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 800151c:	61c2      	str	r2, [r0, #28]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001520:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001522:	6103      	str	r3, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001524:	6183      	str	r3, [r0, #24]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001526:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800152a:	f002 fda8 	bl	800407e <HAL_UART_Init>
 800152e:	b128      	cbz	r0, 800153c <MX_UART8_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001530:	2168      	movs	r1, #104	; 0x68
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_UART8_Init+0x44>)
  }

}
 8001534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001538:	f7ff bd92 	b.w	8001060 <_Error_Handler>
 800153c:	bd08      	pop	{r3, pc}
 800153e:	bf00      	nop
 8001540:	2000427c 	.word	0x2000427c
 8001544:	40007c00 	.word	0x40007c00
 8001548:	08005a60 	.word	0x08005a60
 800154c:	0196e6aa 	.word	0x0196e6aa

08001550 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001550:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001552:	480f      	ldr	r0, [pc, #60]	; (8001590 <MX_USART1_UART_Init+0x40>)
  huart1.Init.BaudRate = 921600;
 8001554:	f44f 2e61 	mov.w	lr, #921600	; 0xe1000
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART1_UART_Init+0x44>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800155a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 921600;
 800155c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001560:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001562:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001564:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001566:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001568:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001570:	2310      	movs	r3, #16
 8001572:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800157a:	f002 fd80 	bl	800407e <HAL_UART_Init>
 800157e:	b128      	cbz	r0, 800158c <MX_USART1_UART_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001580:	217e      	movs	r1, #126	; 0x7e
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_USART1_UART_Init+0x48>)
  }

}
 8001584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001588:	f7ff bd6a 	b.w	8001060 <_Error_Handler>
 800158c:	bd08      	pop	{r3, pc}
 800158e:	bf00      	nop
 8001590:	2000420c 	.word	0x2000420c
 8001594:	40011000 	.word	0x40011000
 8001598:	08005a60 	.word	0x08005a60

0800159c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800159c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800159e:	480e      	ldr	r0, [pc, #56]	; (80015d8 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 26666666;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a0:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 26666666;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_USART3_UART_Init+0x40>)
 80015a4:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80015e4 <MX_USART3_UART_Init+0x48>
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80015aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart3.Init.BaudRate = 26666666;
 80015ae:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	2300      	movs	r3, #0
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80015b4:	61c2      	str	r2, [r0, #28]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b8:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ba:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015bc:	6183      	str	r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015be:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c2:	f002 fd5c 	bl	800407e <HAL_UART_Init>
 80015c6:	b128      	cbz	r0, 80015d4 <MX_USART3_UART_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 80015c8:	2193      	movs	r1, #147	; 0x93
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_USART3_UART_Init+0x44>)
  }

}
 80015cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80015d0:	f7ff bd46 	b.w	8001060 <_Error_Handler>
 80015d4:	bd08      	pop	{r3, pc}
 80015d6:	bf00      	nop
 80015d8:	2000419c 	.word	0x2000419c
 80015dc:	40004800 	.word	0x40004800
 80015e0:	08005a60 	.word	0x08005a60
 80015e4:	0196e6aa 	.word	0x0196e6aa

080015e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 80015e8:	6803      	ldr	r3, [r0, #0]
 80015ea:	4a4b      	ldr	r2, [pc, #300]	; (8001718 <HAL_UART_MspInit+0x130>)
 80015ec:	4293      	cmp	r3, r2
{
 80015ee:	b530      	push	{r4, r5, lr}
 80015f0:	4605      	mov	r5, r0
 80015f2:	b08b      	sub	sp, #44	; 0x2c
  if(uartHandle->Instance==UART4)
 80015f4:	d13f      	bne.n	8001676 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <HAL_UART_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	a905      	add	r1, sp, #20
 80015fa:	4849      	ldr	r0, [pc, #292]	; (8001720 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80015fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80015fe:	4c49      	ldr	r4, [pc, #292]	; (8001724 <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001600:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2202      	movs	r2, #2
    __HAL_RCC_UART4_CLK_ENABLE();
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160c:	2201      	movs	r2, #1
    __HAL_RCC_UART4_CLK_ENABLE();
 800160e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART4_CLK_ENABLE();
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001618:	2303      	movs	r3, #3
 800161a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800161e:	2308      	movs	r3, #8
 8001620:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f000 fd0d 	bl	8002040 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800162a:	483f      	ldr	r0, [pc, #252]	; (8001728 <HAL_UART_MspInit+0x140>)
 800162c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001630:	6122      	str	r2, [r4, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001632:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001636:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800163a:	61e2      	str	r2, [r4, #28]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163c:	2300      	movs	r3, #0
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800163e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001642:	4620      	mov	r0, r4
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001644:	60a3      	str	r3, [r4, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	60e3      	str	r3, [r4, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001648:	6163      	str	r3, [r4, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800164a:	61a3      	str	r3, [r4, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800164c:	6222      	str	r2, [r4, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800164e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001650:	f000 fb6a 	bl	8001d28 <HAL_DMA_Init>
 8001654:	b118      	cbz	r0, 800165e <HAL_UART_MspInit+0x76>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001656:	21bd      	movs	r1, #189	; 0xbd
 8001658:	4834      	ldr	r0, [pc, #208]	; (800172c <HAL_UART_MspInit+0x144>)
 800165a:	f7ff fd01 	bl	8001060 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800165e:	2034      	movs	r0, #52	; 0x34
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001660:	666c      	str	r4, [r5, #100]	; 0x64
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2105      	movs	r1, #5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001666:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001668:	f000 f93c 	bl	80018e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800166c:	2034      	movs	r0, #52	; 0x34
 800166e:	f000 f971 	bl	8001954 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001672:	b00b      	add	sp, #44	; 0x2c
 8001674:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==UART8)
 8001676:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <HAL_UART_MspInit+0x148>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d117      	bne.n	80016ac <HAL_UART_MspInit+0xc4>
    __HAL_RCC_UART8_CLK_ENABLE();
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167e:	a905      	add	r1, sp, #20
 8001680:	482c      	ldr	r0, [pc, #176]	; (8001734 <HAL_UART_MspInit+0x14c>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8001682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001684:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2202      	movs	r2, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001690:	2201      	movs	r2, #1
    __HAL_RCC_UART8_CLK_ENABLE();
 8001692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001696:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART8_CLK_ENABLE();
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800169c:	2303      	movs	r3, #3
 800169e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80016a2:	2308      	movs	r3, #8
 80016a4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a6:	f000 fccb 	bl	8002040 <HAL_GPIO_Init>
}
 80016aa:	e7e2      	b.n	8001672 <HAL_UART_MspInit+0x8a>
  else if(uartHandle->Instance==USART1)
 80016ac:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_UART_MspInit+0x150>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d117      	bne.n	80016e2 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	a905      	add	r1, sp, #20
 80016b6:	481a      	ldr	r0, [pc, #104]	; (8001720 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ba:	f042 0210 	orr.w	r2, r2, #16
 80016be:	645a      	str	r2, [r3, #68]	; 0x44
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	9303      	str	r3, [sp, #12]
 80016c8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016dc:	2307      	movs	r3, #7
 80016de:	9309      	str	r3, [sp, #36]	; 0x24
 80016e0:	e7e1      	b.n	80016a6 <HAL_UART_MspInit+0xbe>
  else if(uartHandle->Instance==USART3)
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <HAL_UART_MspInit+0x154>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d1c4      	bne.n	8001672 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ea:	a905      	add	r1, sp, #20
 80016ec:	4814      	ldr	r0, [pc, #80]	; (8001740 <HAL_UART_MspInit+0x158>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fc:	9304      	str	r3, [sp, #16]
 80016fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001700:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001704:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170a:	2301      	movs	r3, #1
 800170c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001712:	2307      	movs	r3, #7
 8001714:	9309      	str	r3, [sp, #36]	; 0x24
 8001716:	e7c6      	b.n	80016a6 <HAL_UART_MspInit+0xbe>
 8001718:	40004c00 	.word	0x40004c00
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000
 8001724:	2000413c 	.word	0x2000413c
 8001728:	40026040 	.word	0x40026040
 800172c:	08005a60 	.word	0x08005a60
 8001730:	40007c00 	.word	0x40007c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40011000 	.word	0x40011000
 800173c:	40004800 	.word	0x40004800
 8001740:	40020c00 	.word	0x40020c00

08001744 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8001744:	b508      	push	{r3, lr}

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x38>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001748:	2309      	movs	r3, #9
 800174a:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <MX_USB_OTG_HS_PCD_Init+0x3c>)
 800174c:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001750:	2300      	movs	r3, #0
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001752:	2201      	movs	r2, #1
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001754:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 8001756:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001758:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800175a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800175c:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800175e:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001760:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001762:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001764:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001766:	f000 fdfa 	bl	800235e <HAL_PCD_Init>
 800176a:	b128      	cbz	r0, 8001778 <MX_USB_OTG_HS_PCD_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800176c:	214f      	movs	r1, #79	; 0x4f
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_USB_OTG_HS_PCD_Init+0x40>)
  }

}
 8001770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001774:	f7ff bc74 	b.w	8001060 <_Error_Handler>
 8001778:	bd08      	pop	{r3, pc}
 800177a:	bf00      	nop
 800177c:	2000435c 	.word	0x2000435c
 8001780:	40040000 	.word	0x40040000
 8001784:	08005a75 	.word	0x08005a75

08001788 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 8001788:	6802      	ldr	r2, [r0, #0]
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_PCD_MspInit+0x7c>)
 800178c:	429a      	cmp	r2, r3
{
 800178e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001790:	b089      	sub	sp, #36	; 0x24
  if(pcdHandle->Instance==USB_OTG_HS)
 8001792:	d135      	bne.n	8001800 <HAL_PCD_MspInit+0x78>
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001794:	230d      	movs	r3, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800179c:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179e:	a903      	add	r1, sp, #12
 80017a0:	4819      	ldr	r0, [pc, #100]	; (8001808 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80017a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017aa:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f000 fc48 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80017b0:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	a903      	add	r1, sp, #12
 80017b4:	4815      	ldr	r0, [pc, #84]	; (800180c <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80017b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017be:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f000 fc3e 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80017c4:	f643 4323 	movw	r3, #15395	; 0x3c23
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	a903      	add	r1, sp, #12
 80017ca:	4811      	ldr	r0, [pc, #68]	; (8001810 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80017cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017d4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f000 fc33 	bl	8002040 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_PCD_MspInit+0x8c>)
 80017dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017de:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
 80017e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80017ea:	9201      	str	r2, [sp, #4]
 80017ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80017ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001800:	b009      	add	sp, #36	; 0x24
 8001802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001804:	40040000 	.word	0x40040000
 8001808:	40020800 	.word	0x40020800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400
 8001814:	40023800 	.word	0x40023800

08001818 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001818:	490f      	ldr	r1, [pc, #60]	; (8001858 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800181a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <SystemInit+0x44>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f042 0201 	orr.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001832:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800183a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800183e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <SystemInit+0x48>)
 8001842:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800184a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800184c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800184e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001852:	608b      	str	r3, [r1, #8]
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00
 800185c:	40023800 	.word	0x40023800
 8001860:	24003010 	.word	0x24003010

08001864 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x20>)
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001866:	2003      	movs	r0, #3
{
 8001868:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800186a:	6813      	ldr	r3, [r2, #0]
 800186c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001870:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001872:	f000 f825 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff fc82 	bl	8001180 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff fc50 	bl	8001120 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001880:	2000      	movs	r0, #0
 8001882:	bd08      	pop	{r3, pc}
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001888:	4a02      	ldr	r2, [pc, #8]	; (8001894 <HAL_IncTick+0xc>)
 800188a:	6813      	ldr	r3, [r2, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	2000475c 	.word	0x2000475c

08001898 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001898:	4b01      	ldr	r3, [pc, #4]	; (80018a0 <HAL_GetTick+0x8>)
 800189a:	6818      	ldr	r0, [r3, #0]
}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000475c 	.word	0x2000475c

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80018a4:	b513      	push	{r0, r1, r4, lr}
 80018a6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80018a8:	f7ff fff6 	bl	8001898 <HAL_GetTick>
 80018ac:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80018ae:	f7ff fff3 	bl	8001898 <HAL_GetTick>
 80018b2:	9b01      	ldr	r3, [sp, #4]
 80018b4:	1b00      	subs	r0, r0, r4
 80018b6:	4298      	cmp	r0, r3
 80018b8:	d3f9      	bcc.n	80018ae <HAL_Delay+0xa>
  {
  }
}
 80018ba:	b002      	add	sp, #8
 80018bc:	bd10      	pop	{r4, pc}
	...

080018c0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80018c2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80018c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018ce:	041b      	lsls	r3, r3, #16
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80018da:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018dc:	60d3      	str	r3, [r2, #12]
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b530      	push	{r4, r5, lr}
 80018e8:	68dc      	ldr	r4, [r3, #12]
 80018ea:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ee:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	bf28      	it	cs
 80018f8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001900:	bf8c      	ite	hi
 8001902:	3c03      	subhi	r4, #3
 8001904:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001906:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800190a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001910:	ea01 0103 	and.w	r1, r1, r3
 8001914:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	fa05 f404 	lsl.w	r4, r5, r4
 800191c:	f104 34ff 	add.w	r4, r4, #4294967295
 8001920:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	ea42 0201 	orr.w	r2, r2, r1
 8001928:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800192c:	da05      	bge.n	800193a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	f000 000f 	and.w	r0, r0, #15
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_NVIC_SetPriority+0x6c>)
 8001936:	541a      	strb	r2, [r3, r0]
 8001938:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001944:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8001948:	bd30      	pop	{r4, r5, pc}
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	e000ed14 	.word	0xe000ed14

08001954 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001954:	0942      	lsrs	r2, r0, #5
 8001956:	2301      	movs	r3, #1
 8001958:	f000 001f 	and.w	r0, r0, #31
 800195c:	fa03 f000 	lsl.w	r0, r3, r0
 8001960:	4b01      	ldr	r3, [pc, #4]	; (8001968 <HAL_NVIC_EnableIRQ+0x14>)
 8001962:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100

0800196c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	3801      	subs	r0, #1
 800196e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001972:	d20a      	bcs.n	800198a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	21f0      	movs	r1, #240	; 0xf0
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800199a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	bf0c      	ite	eq
 80019a0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80019a4:	f022 0204 	bicne.w	r2, r2, #4
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	4770      	bx	lr
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80019b0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80019b2:	6803      	ldr	r3, [r0, #0]
 80019b4:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 80019b8:	b93a      	cbnz	r2, 80019ca <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019c0:	601a      	str	r2, [r3, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80019c2:	2901      	cmp	r1, #1
 80019c4:	d11c      	bne.n	8001a00 <DFSDM_RegConvStart+0x50>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e01b      	b.n	8001a02 <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80019ca:	681a      	ldr	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80019cc:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019da:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80019e4:	d1ed      	bne.n	80019c2 <DFSDM_RegConvStart+0x12>
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80019e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80019e8:	b91a      	cbnz	r2, 80019f2 <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	f042 0202 	orr.w	r2, r2, #2
 80019f0:	601a      	str	r2, [r3, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 80019f2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	bf0c      	ite	eq
 80019fa:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 80019fc:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80019fe:	6483      	str	r3, [r0, #72]	; 0x48
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001a00:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001a02:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8001a06:	4770      	bx	lr

08001a08 <DFSDM_GetChannelFromInstance>:
  if(Instance == DFSDM1_Channel0)
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <DFSDM_GetChannelFromInstance+0x54>)
 8001a0a:	4298      	cmp	r0, r3
 8001a0c:	d017      	beq.n	8001a3e <DFSDM_GetChannelFromInstance+0x36>
  else if(Instance == DFSDM1_Channel1)
 8001a0e:	3320      	adds	r3, #32
 8001a10:	4298      	cmp	r0, r3
 8001a12:	d016      	beq.n	8001a42 <DFSDM_GetChannelFromInstance+0x3a>
  else if(Instance == DFSDM1_Channel2)
 8001a14:	3320      	adds	r3, #32
 8001a16:	4298      	cmp	r0, r3
 8001a18:	d015      	beq.n	8001a46 <DFSDM_GetChannelFromInstance+0x3e>
  else if(Instance == DFSDM1_Channel3)
 8001a1a:	3320      	adds	r3, #32
 8001a1c:	4298      	cmp	r0, r3
 8001a1e:	d014      	beq.n	8001a4a <DFSDM_GetChannelFromInstance+0x42>
  else if(Instance == DFSDM1_Channel4)
 8001a20:	3320      	adds	r3, #32
 8001a22:	4298      	cmp	r0, r3
 8001a24:	d013      	beq.n	8001a4e <DFSDM_GetChannelFromInstance+0x46>
  else if(Instance == DFSDM1_Channel5)
 8001a26:	3320      	adds	r3, #32
 8001a28:	4298      	cmp	r0, r3
 8001a2a:	d012      	beq.n	8001a52 <DFSDM_GetChannelFromInstance+0x4a>
  else if(Instance == DFSDM1_Channel6)
 8001a2c:	3320      	adds	r3, #32
 8001a2e:	4298      	cmp	r0, r3
 8001a30:	d011      	beq.n	8001a56 <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 8001a32:	3320      	adds	r3, #32
 8001a34:	4298      	cmp	r0, r3
 8001a36:	bf14      	ite	ne
 8001a38:	20ff      	movne	r0, #255	; 0xff
 8001a3a:	2007      	moveq	r0, #7
 8001a3c:	4770      	bx	lr
    channel = 0;
 8001a3e:	2000      	movs	r0, #0
 8001a40:	4770      	bx	lr
    channel = 1;
 8001a42:	2001      	movs	r0, #1
 8001a44:	4770      	bx	lr
    channel = 2;
 8001a46:	2002      	movs	r0, #2
 8001a48:	4770      	bx	lr
    channel = 3;
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	4770      	bx	lr
    channel = 4;
 8001a4e:	2004      	movs	r0, #4
 8001a50:	4770      	bx	lr
    channel = 5;
 8001a52:	2005      	movs	r0, #5
 8001a54:	4770      	bx	lr
    channel = 6;
 8001a56:	2006      	movs	r0, #6
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40017400 	.word	0x40017400

08001a60 <HAL_DFSDM_ChannelInit>:
{
 8001a60:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 8001a62:	4604      	mov	r4, r0
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d067      	beq.n	8001b38 <HAL_DFSDM_ChannelInit+0xd8>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a68:	4d34      	ldr	r5, [pc, #208]	; (8001b3c <HAL_DFSDM_ChannelInit+0xdc>)
 8001a6a:	6800      	ldr	r0, [r0, #0]
 8001a6c:	f7ff ffcc 	bl	8001a08 <DFSDM_GetChannelFromInstance>
 8001a70:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d15f      	bne.n	8001b38 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7ff f827 	bl	8000acc <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8001a7e:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_DFSDM_ChannelInit+0xe0>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	3201      	adds	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d119      	bne.n	8001ac0 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_DFSDM_ChannelInit+0xe4>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001a94:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68a1      	ldr	r1, [r4, #8]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001aa4:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001aa6:	7922      	ldrb	r2, [r4, #4]
 8001aa8:	2a01      	cmp	r2, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8001aac:	68e1      	ldr	r1, [r4, #12]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	3901      	subs	r1, #1
 8001ab2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ab6:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001abe:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001ac0:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001ac2:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001ac4:	6803      	ldr	r3, [r0, #0]
 8001ac6:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8001aca:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001acc:	6923      	ldr	r3, [r4, #16]
 8001ace:	6802      	ldr	r2, [r0, #0]
 8001ad0:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001ad2:	69a1      	ldr	r1, [r4, #24]
 8001ad4:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001ad6:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001adc:	6803      	ldr	r3, [r0, #0]
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001ae4:	69e3      	ldr	r3, [r4, #28]
 8001ae6:	6802      	ldr	r2, [r0, #0]
 8001ae8:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001aea:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001aec:	4313      	orrs	r3, r2
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001aee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001af0:	6003      	str	r3, [r0, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001af2:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001af4:	6883      	ldr	r3, [r0, #8]
 8001af6:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8001afa:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001afc:	6883      	ldr	r3, [r0, #8]
 8001afe:	430b      	orrs	r3, r1
 8001b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b04:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001b06:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b08:	6843      	ldr	r3, [r0, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001b10:	6843      	ldr	r3, [r0, #4]
 8001b12:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b1c:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b1e:	6803      	ldr	r3, [r0, #0]
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b2c:	f7ff ff6c 	bl	8001a08 <DFSDM_GetChannelFromInstance>
 8001b30:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8001b34:	2000      	movs	r0, #0
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001b38:	2001      	movs	r0, #1
}
 8001b3a:	bd38      	pop	{r3, r4, r5, pc}
 8001b3c:	2000004c 	.word	0x2000004c
 8001b40:	2000006c 	.word	0x2000006c
 8001b44:	40017400 	.word	0x40017400

08001b48 <HAL_DFSDM_FilterInit>:
{
 8001b48:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_filter == NULL)
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d069      	beq.n	8001c24 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001b50:	6802      	ldr	r2, [r0, #0]
 8001b52:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <HAL_DFSDM_FilterInit+0xe0>)
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d105      	bne.n	8001b64 <HAL_DFSDM_FilterInit+0x1c>
 8001b58:	6840      	ldr	r0, [r0, #4]
 8001b5a:	2801      	cmp	r0, #1
 8001b5c:	d063      	beq.n	8001c26 <HAL_DFSDM_FilterInit+0xde>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001b5e:	68e0      	ldr	r0, [r4, #12]
 8001b60:	2801      	cmp	r0, #1
 8001b62:	d060      	beq.n	8001c26 <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001b64:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001b66:	2201      	movs	r2, #1
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001b68:	4620      	mov	r0, r4
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001b6a:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001b6c:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001b6e:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001b70:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001b72:	f7fe ff0f 	bl	8000994 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001b7e:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001b80:	7a22      	ldrb	r2, [r4, #8]
 8001b82:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	bf0c      	ite	eq
 8001b88:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001b8c:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8001b90:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001b92:	7a62      	ldrb	r2, [r4, #9]
 8001b94:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	bf0c      	ite	eq
 8001b9a:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001b9e:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8001ba2:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001ba4:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001ba6:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001ba8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001bac:	2d02      	cmp	r5, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001bae:	f022 0208 	bic.w	r2, r2, #8
 8001bb2:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001bb4:	d103      	bne.n	8001bbe <HAL_DFSDM_FilterInit+0x76>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	6961      	ldr	r1, [r4, #20]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001bbe:	7c20      	ldrb	r0, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001bc0:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001bc2:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001bc4:	bf0c      	ite	eq
 8001bc6:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001bca:	f022 0210 	bicne.w	r2, r2, #16
 8001bce:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001bd0:	7c62      	ldrb	r2, [r4, #17]
 8001bd2:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	bf0c      	ite	eq
 8001bd8:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001bdc:	f022 0220 	bicne.w	r2, r2, #32
 8001be0:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8001be8:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001bec:	615a      	str	r2, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8001bee:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001bf0:	6959      	ldr	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8001bf2:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	69e1      	ldr	r1, [r4, #28]
 8001bf8:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8001bfa:	6a21      	ldr	r1, [r4, #32]
 8001bfc:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001bfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c02:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001c04:	6862      	ldr	r2, [r4, #4]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001c06:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001c0a:	2000      	movs	r0, #0
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001c0c:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001c0e:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001c10:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001c12:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8001c22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001c24:	2001      	movs	r0, #1
}
 8001c26:	bd38      	pop	{r3, r4, r5, pc}
 8001c28:	40017500 	.word	0x40017500

08001c2c <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001c2c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2bfd      	cmp	r3, #253	; 0xfd
{
 8001c36:	b510      	push	{r4, lr}
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001c38:	d813      	bhi.n	8001c62 <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001c3a:	6803      	ldr	r3, [r0, #0]
 8001c3c:	0209      	lsls	r1, r1, #8
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001c3e:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001c40:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001c42:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001c46:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001c4a:	bf08      	it	eq
 8001c4c:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001c50:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001c54:	601c      	str	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001c56:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001c58:	4321      	orrs	r1, r4
 8001c5a:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001c5c:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8001c5e:	2000      	movs	r0, #0
 8001c60:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001c62:	2001      	movs	r0, #1
}
 8001c64:	bd10      	pop	{r4, pc}

08001c66 <HAL_DFSDM_FilterRegularStart>:
{
 8001c66:	b508      	push	{r3, lr}
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001c68:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001c6c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d103      	bne.n	8001c7c <HAL_DFSDM_FilterRegularStart+0x16>
    DFSDM_RegConvStart(hdfsdm_filter);
 8001c74:	f7ff fe9c 	bl	80019b0 <DFSDM_RegConvStart>
  HAL_StatusTypeDef status = HAL_OK;
 8001c78:	2000      	movs	r0, #0
    DFSDM_RegConvStart(hdfsdm_filter);
 8001c7a:	bd08      	pop	{r3, pc}
    status = HAL_ERROR;
 8001c7c:	2001      	movs	r0, #1
}
 8001c7e:	bd08      	pop	{r3, pc}

08001c80 <HAL_DFSDM_FilterGetRegularValue>:
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8001c80:	6803      	ldr	r3, [r0, #0]
 8001c82:	69d8      	ldr	r0, [r3, #28]
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8001c84:	f000 0307 	and.w	r3, r0, #7
}
 8001c88:	1200      	asrs	r0, r0, #8
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8001c8a:	600b      	str	r3, [r1, #0]
}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_DFSDM_FilterErrorCallback>:
{
 8001c8e:	4770      	bx	lr

08001c90 <HAL_DFSDM_FilterPollForRegConversion>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001c90:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001c94:	2b02      	cmp	r3, #2
{
 8001c96:	b570      	push	{r4, r5, r6, lr}
 8001c98:	4604      	mov	r4, r0
 8001c9a:	460d      	mov	r5, r1
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001c9c:	d001      	beq.n	8001ca2 <HAL_DFSDM_FilterPollForRegConversion+0x12>
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d12a      	bne.n	8001cf8 <HAL_DFSDM_FilterPollForRegConversion+0x68>
    tickstart = HAL_GetTick();  
 8001ca2:	f7ff fdf9 	bl	8001898 <HAL_GetTick>
 8001ca6:	4606      	mov	r6, r0
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	0792      	lsls	r2, r2, #30
 8001cae:	d518      	bpl.n	8001ce2 <HAL_DFSDM_FilterPollForRegConversion+0x52>
    if((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	071b      	lsls	r3, r3, #28
 8001cb4:	d507      	bpl.n	8001cc6 <HAL_DFSDM_FilterPollForRegConversion+0x36>
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001cb6:	2301      	movs	r3, #1
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001cb8:	4620      	mov	r0, r4
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001cba:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001cbc:	f7ff ffe7 	bl	8001c8e <HAL_DFSDM_FilterErrorCallback>
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	60da      	str	r2, [r3, #12]
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001cc6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001cc8:	b948      	cbnz	r0, 8001cde <HAL_DFSDM_FilterPollForRegConversion+0x4e>
 8001cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ccc:	b943      	cbnz	r3, 8001ce0 <HAL_DFSDM_FilterPollForRegConversion+0x50>
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001cce:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8001cd2:	2a02      	cmp	r2, #2
 8001cd4:	bf0c      	ite	eq
 8001cd6:	2201      	moveq	r2, #1
 8001cd8:	2203      	movne	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001cda:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    return HAL_OK;
 8001cde:	2000      	movs	r0, #0
}
 8001ce0:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001ce2:	1c69      	adds	r1, r5, #1
 8001ce4:	d0e1      	beq.n	8001caa <HAL_DFSDM_FilterPollForRegConversion+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ce6:	b90d      	cbnz	r5, 8001cec <HAL_DFSDM_FilterPollForRegConversion+0x5c>
          return HAL_TIMEOUT;
 8001ce8:	2003      	movs	r0, #3
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001cec:	f7ff fdd4 	bl	8001898 <HAL_GetTick>
 8001cf0:	1b80      	subs	r0, r0, r6
 8001cf2:	4285      	cmp	r5, r0
 8001cf4:	d2d8      	bcs.n	8001ca8 <HAL_DFSDM_FilterPollForRegConversion+0x18>
 8001cf6:	e7f7      	b.n	8001ce8 <HAL_DFSDM_FilterPollForRegConversion+0x58>
    return HAL_ERROR;
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}

08001cfc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cfc:	6803      	ldr	r3, [r0, #0]
 8001cfe:	2118      	movs	r1, #24
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d06:	3a10      	subs	r2, #16
 8001d08:	f023 0303 	bic.w	r3, r3, #3
 8001d0c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d10:	4904      	ldr	r1, [pc, #16]	; (8001d24 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001d12:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d14:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d16:	bf88      	it	hi
 8001d18:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d1a:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d1c:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001d1e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	08005aa4 	.word	0x08005aa4

08001d28 <HAL_DMA_Init>:
{
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff fdb4 	bl	8001898 <HAL_GetTick>
 8001d30:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001d32:	2c00      	cmp	r4, #0
 8001d34:	d071      	beq.n	8001e1a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001d36:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8001d38:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001d3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4c:	6821      	ldr	r1, [r4, #0]
 8001d4e:	680b      	ldr	r3, [r1, #0]
 8001d50:	07d8      	lsls	r0, r3, #31
 8001d52:	d43c      	bmi.n	8001dce <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001d54:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d56:	4d32      	ldr	r5, [pc, #200]	; (8001e20 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d58:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d5a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d60:	4313      	orrs	r3, r2
 8001d62:	68e2      	ldr	r2, [r4, #12]
 8001d64:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d66:	6922      	ldr	r2, [r4, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	6962      	ldr	r2, [r4, #20]
 8001d6c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	69e2      	ldr	r2, [r4, #28]
 8001d70:	4303      	orrs	r3, r0
 8001d72:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d74:	6a22      	ldr	r2, [r4, #32]
 8001d76:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d7a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d80:	bf01      	itttt	eq
 8001d82:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001d84:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001d86:	4335      	orreq	r5, r6
 8001d88:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d8a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001d8c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001d8e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d90:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001d94:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d98:	d10b      	bne.n	8001db2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001d9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d9c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001d9e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001da0:	b13d      	cbz	r5, 8001db2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001da2:	b9f8      	cbnz	r0, 8001de4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001da4:	2a01      	cmp	r2, #1
 8001da6:	d02d      	beq.n	8001e04 <HAL_DMA_Init+0xdc>
 8001da8:	d301      	bcc.n	8001dae <HAL_DMA_Init+0x86>
 8001daa:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dac:	d101      	bne.n	8001db2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dae:	01ea      	lsls	r2, r5, #7
 8001db0:	d42b      	bmi.n	8001e0a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001db2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db4:	4620      	mov	r0, r4
 8001db6:	f7ff ffa1 	bl	8001cfc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001dbc:	233f      	movs	r3, #63	; 0x3f
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001dc8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001dcc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dce:	f7ff fd63 	bl	8001898 <HAL_GetTick>
 8001dd2:	1b40      	subs	r0, r0, r5
 8001dd4:	2805      	cmp	r0, #5
 8001dd6:	d9b9      	bls.n	8001d4c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd8:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dda:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ddc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001dde:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001de2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001de4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001de8:	d113      	bne.n	8001e12 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001dea:	2a03      	cmp	r2, #3
 8001dec:	d8e1      	bhi.n	8001db2 <HAL_DMA_Init+0x8a>
 8001dee:	a001      	add	r0, pc, #4	; (adr r0, 8001df4 <HAL_DMA_Init+0xcc>)
 8001df0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001df4:	08001e0b 	.word	0x08001e0b
 8001df8:	08001daf 	.word	0x08001daf
 8001dfc:	08001e0b 	.word	0x08001e0b
 8001e00:	08001e05 	.word	0x08001e05
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e04:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001e08:	d1d3      	bne.n	8001db2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e0a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001e0c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e0e:	6563      	str	r3, [r4, #84]	; 0x54
 8001e10:	e7e5      	b.n	8001dde <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001e12:	2a02      	cmp	r2, #2
 8001e14:	d9f9      	bls.n	8001e0a <HAL_DMA_Init+0xe2>
 8001e16:	2a03      	cmp	r2, #3
 8001e18:	e7c8      	b.n	8001dac <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
 8001e1e:	bf00      	nop
 8001e20:	e010803f 	.word	0xe010803f

08001e24 <HAL_DMA_Start_IT>:
{
 8001e24:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001e26:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001e2a:	2c01      	cmp	r4, #1
 8001e2c:	d035      	beq.n	8001e9a <HAL_DMA_Start_IT+0x76>
 8001e2e:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e30:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001e32:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8001e34:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e38:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001e3c:	2c01      	cmp	r4, #1
 8001e3e:	f04f 0402 	mov.w	r4, #2
 8001e42:	d128      	bne.n	8001e96 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e44:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e48:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e4c:	6825      	ldr	r5, [r4, #0]
 8001e4e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001e52:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001e54:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e56:	6883      	ldr	r3, [r0, #8]
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d119      	bne.n	8001e90 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8001e5c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001e5e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e60:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001e62:	233f      	movs	r3, #63	; 0x3f
 8001e64:	4093      	lsls	r3, r2
 8001e66:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f043 0316 	orr.w	r3, r3, #22
 8001e6e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e70:	6963      	ldr	r3, [r4, #20]
 8001e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e76:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001e78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e7a:	b11b      	cbz	r3, 8001e84 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e84:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e86:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6023      	str	r3, [r4, #0]
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8001e90:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e92:	60e2      	str	r2, [r4, #12]
 8001e94:	e7e4      	b.n	8001e60 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8001e96:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001e9a:	2002      	movs	r0, #2
}
 8001e9c:	bd70      	pop	{r4, r5, r6, pc}

08001e9e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d003      	beq.n	8001eae <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001eaa:	2001      	movs	r0, #1
 8001eac:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001eae:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb0:	2305      	movs	r3, #5
 8001eb2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8001eb6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001eb8:	6813      	ldr	r3, [r2, #0]
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8001ec4:	2300      	movs	r3, #0
{
 8001ec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001ec8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eca:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001ecc:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_DMA_IRQHandler+0x170>)
{
 8001ece:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8001ed2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001ed6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	4216      	tst	r6, r2
 8001edc:	d00c      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ede:	6801      	ldr	r1, [r0, #0]
 8001ee0:	6808      	ldr	r0, [r1, #0]
 8001ee2:	0740      	lsls	r0, r0, #29
 8001ee4:	d508      	bpl.n	8001ef8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ee6:	6808      	ldr	r0, [r1, #0]
 8001ee8:	f020 0004 	bic.w	r0, r0, #4
 8001eec:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eee:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ef0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <HAL_DMA_IRQHandler+0x174>)
 8001efa:	409a      	lsls	r2, r3
 8001efc:	4216      	tst	r6, r2
 8001efe:	d008      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f00:	6821      	ldr	r1, [r4, #0]
 8001f02:	6949      	ldr	r1, [r1, #20]
 8001f04:	0609      	lsls	r1, r1, #24
 8001f06:	d504      	bpl.n	8001f12 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f08:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f0a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f0c:	f042 0202 	orr.w	r2, r2, #2
 8001f10:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f12:	4a4a      	ldr	r2, [pc, #296]	; (800203c <HAL_DMA_IRQHandler+0x178>)
 8001f14:	409a      	lsls	r2, r3
 8001f16:	4216      	tst	r6, r2
 8001f18:	d008      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f1a:	6821      	ldr	r1, [r4, #0]
 8001f1c:	6809      	ldr	r1, [r1, #0]
 8001f1e:	0788      	lsls	r0, r1, #30
 8001f20:	d504      	bpl.n	8001f2c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f22:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f26:	f042 0204 	orr.w	r2, r2, #4
 8001f2a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	4216      	tst	r6, r2
 8001f32:	d010      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	0709      	lsls	r1, r1, #28
 8001f3a:	d50c      	bpl.n	8001f56 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f3c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	0350      	lsls	r0, r2, #13
 8001f42:	d535      	bpl.n	8001fb0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	0319      	lsls	r1, r3, #12
 8001f48:	d401      	bmi.n	8001f4e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001f4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f4c:	e000      	b.n	8001f50 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001f50:	b10b      	cbz	r3, 8001f56 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001f52:	4620      	mov	r0, r4
 8001f54:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f56:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001f58:	2220      	movs	r2, #32
 8001f5a:	408a      	lsls	r2, r1
 8001f5c:	4216      	tst	r6, r2
 8001f5e:	d038      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	06c6      	lsls	r6, r0, #27
 8001f66:	d534      	bpl.n	8001fd2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f68:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f6a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001f6e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f70:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f72:	d125      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f74:	f022 0216 	bic.w	r2, r2, #22
 8001f78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f80:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f84:	b90a      	cbnz	r2, 8001f8a <HAL_DMA_IRQHandler+0xc6>
 8001f86:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001f88:	b11a      	cbz	r2, 8001f92 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f022 0208 	bic.w	r2, r2, #8
 8001f90:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f92:	233f      	movs	r3, #63	; 0x3f
 8001f94:	408b      	lsls	r3, r1
 8001f96:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001fa4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001fa6:	b10b      	cbz	r3, 8001fac <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001fa8:	4620      	mov	r0, r4
 8001faa:	4798      	blx	r3
}
 8001fac:	b003      	add	sp, #12
 8001fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	05d2      	lsls	r2, r2, #23
 8001fb4:	d4c9      	bmi.n	8001f4a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	f022 0208 	bic.w	r2, r2, #8
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e7c4      	b.n	8001f4a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc0:	0350      	lsls	r0, r2, #13
 8001fc2:	d528      	bpl.n	8002016 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0319      	lsls	r1, r3, #12
 8001fc8:	d432      	bmi.n	8002030 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001fca:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001fcc:	b10b      	cbz	r3, 8001fd2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001fce:	4620      	mov	r0, r4
 8001fd0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0e9      	beq.n	8001fac <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fda:	07da      	lsls	r2, r3, #31
 8001fdc:	d519      	bpl.n	8002012 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fde:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001fe0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8001fee:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001ff2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001ff6:	9b01      	ldr	r3, [sp, #4]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	429f      	cmp	r7, r3
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	d302      	bcc.n	8002006 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002000:	6813      	ldr	r3, [r2, #0]
 8002002:	07db      	lsls	r3, r3, #31
 8002004:	d4f7      	bmi.n	8001ff6 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8002006:	2300      	movs	r3, #0
 8002008:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800200c:	2301      	movs	r3, #1
 800200e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002012:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002014:	e7c7      	b.n	8001fa6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800201c:	d108      	bne.n	8002030 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	f021 0110 	bic.w	r1, r1, #16
 8002024:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002026:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002028:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800202c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002030:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002032:	e7cb      	b.n	8001fcc <HAL_DMA_IRQHandler+0x108>
 8002034:	2000000c 	.word	0x2000000c
 8002038:	00800001 	.word	0x00800001
 800203c:	00800004 	.word	0x00800004

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002044:	680b      	ldr	r3, [r1, #0]
{
 8002046:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002048:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800220c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002050:	4a6c      	ldr	r2, [pc, #432]	; (8002204 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002052:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002210 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8002056:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 800205c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002060:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8002064:	45b6      	cmp	lr, r6
 8002066:	f040 80b3 	bne.w	80021d0 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800206a:	684c      	ldr	r4, [r1, #4]
 800206c:	f024 0710 	bic.w	r7, r4, #16
 8002070:	2f02      	cmp	r7, #2
 8002072:	d116      	bne.n	80020a2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8002074:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002078:	f003 0b07 	and.w	fp, r3, #7
 800207c:	f04f 0c0f 	mov.w	ip, #15
 8002080:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8002084:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002088:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800208c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002090:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002094:	690d      	ldr	r5, [r1, #16]
 8002096:	fa05 f50b 	lsl.w	r5, r5, fp
 800209a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800209e:	f8ca 5020 	str.w	r5, [sl, #32]
 80020a2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020a6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80020a8:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020ac:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020b0:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020b4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020b6:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020ba:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020bc:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020be:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020c2:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 80020c6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ca:	d811      	bhi.n	80020f0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80020cc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020ce:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80020d2:	68cf      	ldr	r7, [r1, #12]
 80020d4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80020d8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80020dc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80020de:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80020e4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80020e8:	409f      	lsls	r7, r3
 80020ea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80020ee:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80020f0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020f2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80020f4:	688f      	ldr	r7, [r1, #8]
 80020f6:	fa07 f70a 	lsl.w	r7, r7, sl
 80020fa:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80020fc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020fe:	00e5      	lsls	r5, r4, #3
 8002100:	d566      	bpl.n	80021d0 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002106:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800210a:	f003 0e03 	and.w	lr, r3, #3
 800210e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8002116:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800211a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8002122:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002126:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800212a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800212e:	9503      	str	r5, [sp, #12]
 8002130:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002132:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8002136:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800213a:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800213e:	4d32      	ldr	r5, [pc, #200]	; (8002208 <HAL_GPIO_Init+0x1c8>)
 8002140:	42a8      	cmp	r0, r5
 8002142:	d04c      	beq.n	80021de <HAL_GPIO_Init+0x19e>
 8002144:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002148:	42a8      	cmp	r0, r5
 800214a:	d04a      	beq.n	80021e2 <HAL_GPIO_Init+0x1a2>
 800214c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002150:	42a8      	cmp	r0, r5
 8002152:	d048      	beq.n	80021e6 <HAL_GPIO_Init+0x1a6>
 8002154:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002158:	42a8      	cmp	r0, r5
 800215a:	d046      	beq.n	80021ea <HAL_GPIO_Init+0x1aa>
 800215c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002160:	42a8      	cmp	r0, r5
 8002162:	d044      	beq.n	80021ee <HAL_GPIO_Init+0x1ae>
 8002164:	4548      	cmp	r0, r9
 8002166:	d044      	beq.n	80021f2 <HAL_GPIO_Init+0x1b2>
 8002168:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800216c:	42a8      	cmp	r0, r5
 800216e:	d042      	beq.n	80021f6 <HAL_GPIO_Init+0x1b6>
 8002170:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002174:	42a8      	cmp	r0, r5
 8002176:	d040      	beq.n	80021fa <HAL_GPIO_Init+0x1ba>
 8002178:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800217c:	42a8      	cmp	r0, r5
 800217e:	d03e      	beq.n	80021fe <HAL_GPIO_Init+0x1be>
 8002180:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002184:	42a8      	cmp	r0, r5
 8002186:	bf14      	ite	ne
 8002188:	250a      	movne	r5, #10
 800218a:	2509      	moveq	r5, #9
 800218c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002190:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002194:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8002198:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800219a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 800219e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80021a0:	bf0c      	ite	eq
 80021a2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80021a4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80021aa:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80021ac:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	bf0c      	ite	eq
 80021b0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80021b2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80021b8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80021ba:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	bf0c      	ite	eq
 80021be:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80021c0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c2:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80021c4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80021c6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	bf54      	ite	pl
 80021ca:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80021cc:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80021ce:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021d0:	3301      	adds	r3, #1
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	f47f af3f 	bne.w	8002056 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80021d8:	b005      	add	sp, #20
 80021da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021de:	2500      	movs	r5, #0
 80021e0:	e7d4      	b.n	800218c <HAL_GPIO_Init+0x14c>
 80021e2:	2501      	movs	r5, #1
 80021e4:	e7d2      	b.n	800218c <HAL_GPIO_Init+0x14c>
 80021e6:	2502      	movs	r5, #2
 80021e8:	e7d0      	b.n	800218c <HAL_GPIO_Init+0x14c>
 80021ea:	2503      	movs	r5, #3
 80021ec:	e7ce      	b.n	800218c <HAL_GPIO_Init+0x14c>
 80021ee:	2504      	movs	r5, #4
 80021f0:	e7cc      	b.n	800218c <HAL_GPIO_Init+0x14c>
 80021f2:	2505      	movs	r5, #5
 80021f4:	e7ca      	b.n	800218c <HAL_GPIO_Init+0x14c>
 80021f6:	2506      	movs	r5, #6
 80021f8:	e7c8      	b.n	800218c <HAL_GPIO_Init+0x14c>
 80021fa:	2507      	movs	r5, #7
 80021fc:	e7c6      	b.n	800218c <HAL_GPIO_Init+0x14c>
 80021fe:	2508      	movs	r5, #8
 8002200:	e7c4      	b.n	800218c <HAL_GPIO_Init+0x14c>
 8002202:	bf00      	nop
 8002204:	40013c00 	.word	0x40013c00
 8002208:	40020000 	.word	0x40020000
 800220c:	40023800 	.word	0x40023800
 8002210:	40021400 	.word	0x40021400

08002214 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002214:	b10a      	cbz	r2, 800221a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002216:	6181      	str	r1, [r0, #24]
 8002218:	4770      	bx	lr
 800221a:	0409      	lsls	r1, r1, #16
 800221c:	e7fb      	b.n	8002216 <HAL_GPIO_WritePin+0x2>

0800221e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800221e:	6943      	ldr	r3, [r0, #20]
 8002220:	4059      	eors	r1, r3
 8002222:	6141      	str	r1, [r0, #20]
 8002224:	4770      	bx	lr

08002226 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002226:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002228:	4604      	mov	r4, r0
 800222a:	2800      	cmp	r0, #0
 800222c:	d04a      	beq.n	80022c4 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800222e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002232:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002236:	b91b      	cbnz	r3, 8002240 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002238:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800223c:	f7fe fe14 	bl	8000e68 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002240:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002242:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002244:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002248:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002254:	6862      	ldr	r2, [r4, #4]
 8002256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002266:	d124      	bne.n	80022b2 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800226c:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800226e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002270:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002272:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002274:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800227c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002284:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002286:	6922      	ldr	r2, [r4, #16]
 8002288:	430a      	orrs	r2, r1
 800228a:	69a1      	ldr	r1, [r4, #24]
 800228c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002290:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002292:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002294:	69e2      	ldr	r2, [r4, #28]
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022aa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 80022b0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022b6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022b8:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022ba:	d1d8      	bne.n	800226e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	e7d4      	b.n	800226e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80022c4:	2001      	movs	r0, #1
}
 80022c6:	bd10      	pop	{r4, pc}

080022c8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	2a20      	cmp	r2, #32
{
 80022d0:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 80022d2:	d11d      	bne.n	8002310 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d019      	beq.n	8002310 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022dc:	2324      	movs	r3, #36	; 0x24
 80022de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022e2:	6803      	ldr	r3, [r0, #0]
 80022e4:	681c      	ldr	r4, [r3, #0]
 80022e6:	f024 0401 	bic.w	r4, r4, #1
 80022ea:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022ec:	681c      	ldr	r4, [r3, #0]
 80022ee:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80022f2:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022f4:	681c      	ldr	r4, [r3, #0]
 80022f6:	4321      	orrs	r1, r4
 80022f8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	f041 0101 	orr.w	r1, r1, #1
 8002300:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002302:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002304:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002308:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800230c:	4618      	mov	r0, r3
 800230e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002310:	2002      	movs	r0, #2
  }
}
 8002312:	bd10      	pop	{r4, pc}

08002314 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002314:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002316:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800231a:	b2e4      	uxtb	r4, r4
 800231c:	2c20      	cmp	r4, #32
 800231e:	d11c      	bne.n	800235a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002320:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002324:	2b01      	cmp	r3, #1
 8002326:	d018      	beq.n	800235a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002328:	2324      	movs	r3, #36	; 0x24
 800232a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800232e:	6803      	ldr	r3, [r0, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002338:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800233a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800233e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002342:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800234e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002352:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002356:	4618      	mov	r0, r3
 8002358:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800235a:	2002      	movs	r0, #2
  }
}
 800235c:	bd10      	pop	{r4, pc}

0800235e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002360:	4606      	mov	r6, r0
{
 8002362:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8002364:	2800      	cmp	r0, #0
 8002366:	d067      	beq.n	8002438 <HAL_PCD_Init+0xda>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002368:	2303      	movs	r3, #3

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800236a:	4634      	mov	r4, r6

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800236c:	466d      	mov	r5, sp
 800236e:	1d37      	adds	r7, r6, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002370:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8002374:	f7ff fa08 	bl	8001788 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8002378:	f854 0b10 	ldr.w	r0, [r4], #16
 800237c:	f001 ff05 	bl	800418a <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002388:	e894 0003 	ldmia.w	r4, {r0, r1}
 800238c:	f106 0410 	add.w	r4, r6, #16
 8002390:	e885 0003 	stmia.w	r5, {r0, r1}
 8002394:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002398:	6830      	ldr	r0, [r6, #0]

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 800239a:	2501      	movs	r5, #1
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800239c:	f001 feba 	bl	8004114 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80023a0:	2100      	movs	r1, #0
 80023a2:	6830      	ldr	r0, [r6, #0]
 80023a4:	f001 fef7 	bl	8004196 <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 80023a8:	2100      	movs	r1, #0
 80023aa:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80023ac:	4632      	mov	r2, r6
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023ae:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 80023b0:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 80023b4:	321c      	adds	r2, #28
   hpcd->IN_ep[i].tx_fifo_num = i;
 80023b6:	8451      	strh	r1, [r2, #34]	; 0x22
 for (i = 0; i < 15 ; i++)
 80023b8:	3101      	adds	r1, #1
   hpcd->IN_ep[i].is_in = 1;
 80023ba:	7755      	strb	r5, [r2, #29]
 for (i = 0; i < 15 ; i++)
 80023bc:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023be:	77d0      	strb	r0, [r2, #31]
   hpcd->IN_ep[i].maxpacket =  0;
 80023c0:	6250      	str	r0, [r2, #36]	; 0x24
   hpcd->IN_ep[i].xfer_buff = 0;
 80023c2:	6290      	str	r0, [r2, #40]	; 0x28
   hpcd->IN_ep[i].xfer_len = 0;
 80023c4:	6310      	str	r0, [r2, #48]	; 0x30
 for (i = 0; i < 15 ; i++)
 80023c6:	d1f3      	bne.n	80023b0 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0;
   hpcd->OUT_ep[i].xfer_buff = 0;
   hpcd->OUT_ep[i].xfer_len = 0;

   hpcd->Instance->DIEPTXF[i] = 0;
 80023c8:	2200      	movs	r2, #0
 80023ca:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0;
 80023ce:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 80023d0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->Instance->DIEPTXF[i] = 0;
 80023d4:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->IN_ep[i].tx_fifo_num = i;
 80023d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 for (i = 0; i < 15 ; i++)
 80023da:	3201      	adds	r2, #1
   hpcd->Instance->DIEPTXF[i] = 0;
 80023dc:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->OUT_ep[i].is_in = 0;
 80023e0:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
 for (i = 0; i < 15 ; i++)
 80023e4:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023e6:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 80023ea:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 80023ee:	f103 031c 	add.w	r3, r3, #28
   hpcd->OUT_ep[i].xfer_buff = 0;
 80023f2:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0;
 80023f6:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   hpcd->Instance->DIEPTXF[i] = 0;
 80023fa:	6041      	str	r1, [r0, #4]
 for (i = 0; i < 15 ; i++)
 80023fc:	d1e8      	bne.n	80023d0 <HAL_PCD_Init+0x72>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80023fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002400:	466d      	mov	r5, sp
 8002402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002408:	e894 0003 	ldmia.w	r4, {r0, r1}
 800240c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002410:	4670      	mov	r0, lr
 8002412:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002416:	f001 feff 	bl	8004218 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 800241a:	2301      	movs	r3, #1
 800241c:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8002420:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_PCD_Init+0xce>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8002426:	4630      	mov	r0, r6
 8002428:	f000 f808 	bl	800243c <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 800242c:	6830      	ldr	r0, [r6, #0]
 800242e:	f001 ff99 	bl	8004364 <USB_DevDisconnect>
 return HAL_OK;
 8002432:	2000      	movs	r0, #0
}
 8002434:	b00b      	add	sp, #44	; 0x2c
 8002436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002438:	2001      	movs	r0, #1
 800243a:	e7fb      	b.n	8002434 <HAL_PCD_Init+0xd6>

0800243c <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 800243c:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800243e:	6802      	ldr	r2, [r0, #0]
{
 8002440:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 8002442:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8002446:	2000      	movs	r0, #0
 8002448:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800244c:	6993      	ldr	r3, [r2, #24]
 800244e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002452:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002454:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245a:	f043 0303 	orr.w	r3, r3, #3
 800245e:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 8002460:	4770      	bx	lr
	...

08002464 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002466:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800246a:	4c19      	ldr	r4, [pc, #100]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002484:	f7ff fa08 	bl	8001898 <HAL_GetTick>
 8002488:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800248a:	6863      	ldr	r3, [r4, #4]
 800248c:	03da      	lsls	r2, r3, #15
 800248e:	d50c      	bpl.n	80024aa <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002496:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002498:	f7ff f9fe 	bl	8001898 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800249c:	4c0c      	ldr	r4, [pc, #48]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800249e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024a0:	6863      	ldr	r3, [r4, #4]
 80024a2:	039b      	lsls	r3, r3, #14
 80024a4:	d50a      	bpl.n	80024bc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80024a6:	2000      	movs	r0, #0
 80024a8:	e006      	b.n	80024b8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024aa:	f7ff f9f5 	bl	8001898 <HAL_GetTick>
 80024ae:	1b40      	subs	r0, r0, r5
 80024b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80024b4:	d9e9      	bls.n	800248a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80024b6:	2003      	movs	r0, #3
}
 80024b8:	b003      	add	sp, #12
 80024ba:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024bc:	f7ff f9ec 	bl	8001898 <HAL_GetTick>
 80024c0:	1b40      	subs	r0, r0, r5
 80024c2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80024c6:	d9eb      	bls.n	80024a0 <HAL_PWREx_EnableOverDrive+0x3c>
 80024c8:	e7f5      	b.n	80024b6 <HAL_PWREx_EnableOverDrive+0x52>
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40007000 	.word	0x40007000

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d8:	4604      	mov	r4, r0
 80024da:	b918      	cbnz	r0, 80024e4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80024de:	b002      	add	sp, #8
 80024e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e4:	6803      	ldr	r3, [r0, #0]
 80024e6:	07d8      	lsls	r0, r3, #31
 80024e8:	d410      	bmi.n	800250c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	0799      	lsls	r1, r3, #30
 80024ee:	d45e      	bmi.n	80025ae <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	0719      	lsls	r1, r3, #28
 80024f4:	f100 80a3 	bmi.w	800263e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	075a      	lsls	r2, r3, #29
 80024fc:	f100 80c4 	bmi.w	8002688 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002500:	69a2      	ldr	r2, [r4, #24]
 8002502:	2a00      	cmp	r2, #0
 8002504:	f040 812e 	bne.w	8002764 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8002508:	2000      	movs	r0, #0
 800250a:	e7e8      	b.n	80024de <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	4b93      	ldr	r3, [pc, #588]	; (800275c <HAL_RCC_OscConfig+0x288>)
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	f002 020c 	and.w	r2, r2, #12
 8002514:	2a04      	cmp	r2, #4
 8002516:	d007      	beq.n	8002528 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	f002 020c 	and.w	r2, r2, #12
 800251e:	2a08      	cmp	r2, #8
 8002520:	d10a      	bne.n	8002538 <HAL_RCC_OscConfig+0x64>
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	025a      	lsls	r2, r3, #9
 8002526:	d507      	bpl.n	8002538 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	4b8c      	ldr	r3, [pc, #560]	; (800275c <HAL_RCC_OscConfig+0x288>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	039b      	lsls	r3, r3, #14
 800252e:	d5dc      	bpl.n	80024ea <HAL_RCC_OscConfig+0x16>
 8002530:	6863      	ldr	r3, [r4, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1d9      	bne.n	80024ea <HAL_RCC_OscConfig+0x16>
 8002536:	e7d1      	b.n	80024dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	6863      	ldr	r3, [r4, #4]
 800253a:	4d88      	ldr	r5, [pc, #544]	; (800275c <HAL_RCC_OscConfig+0x288>)
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d111      	bne.n	8002566 <HAL_RCC_OscConfig+0x92>
 8002542:	682b      	ldr	r3, [r5, #0]
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800254a:	f7ff f9a5 	bl	8001898 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4d83      	ldr	r5, [pc, #524]	; (800275c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8002550:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	682b      	ldr	r3, [r5, #0]
 8002554:	039f      	lsls	r7, r3, #14
 8002556:	d4c8      	bmi.n	80024ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff f99e 	bl	8001898 <HAL_GetTick>
 800255c:	1b80      	subs	r0, r0, r6
 800255e:	2864      	cmp	r0, #100	; 0x64
 8002560:	d9f7      	bls.n	8002552 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002562:	2003      	movs	r0, #3
 8002564:	e7bb      	b.n	80024de <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002566:	b99b      	cbnz	r3, 8002590 <HAL_RCC_OscConfig+0xbc>
 8002568:	682b      	ldr	r3, [r5, #0]
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	602b      	str	r3, [r5, #0]
 8002570:	682b      	ldr	r3, [r5, #0]
 8002572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002576:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002578:	f7ff f98e 	bl	8001898 <HAL_GetTick>
 800257c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	682b      	ldr	r3, [r5, #0]
 8002580:	0398      	lsls	r0, r3, #14
 8002582:	d5b2      	bpl.n	80024ea <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002584:	f7ff f988 	bl	8001898 <HAL_GetTick>
 8002588:	1b80      	subs	r0, r0, r6
 800258a:	2864      	cmp	r0, #100	; 0x64
 800258c:	d9f7      	bls.n	800257e <HAL_RCC_OscConfig+0xaa>
 800258e:	e7e8      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	d103      	bne.n	80025a0 <HAL_RCC_OscConfig+0xcc>
 8002598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	e7d0      	b.n	8002542 <HAL_RCC_OscConfig+0x6e>
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a4:	602b      	str	r3, [r5, #0]
 80025a6:	682b      	ldr	r3, [r5, #0]
 80025a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ac:	e7cc      	b.n	8002548 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ae:	4b6b      	ldr	r3, [pc, #428]	; (800275c <HAL_RCC_OscConfig+0x288>)
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	f012 0f0c 	tst.w	r2, #12
 80025b6:	d007      	beq.n	80025c8 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	f002 020c 	and.w	r2, r2, #12
 80025be:	2a08      	cmp	r2, #8
 80025c0:	d111      	bne.n	80025e6 <HAL_RCC_OscConfig+0x112>
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	0259      	lsls	r1, r3, #9
 80025c6:	d40e      	bmi.n	80025e6 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c8:	4b64      	ldr	r3, [pc, #400]	; (800275c <HAL_RCC_OscConfig+0x288>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	0792      	lsls	r2, r2, #30
 80025ce:	d502      	bpl.n	80025d6 <HAL_RCC_OscConfig+0x102>
 80025d0:	68e2      	ldr	r2, [r4, #12]
 80025d2:	2a01      	cmp	r2, #1
 80025d4:	d182      	bne.n	80024dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	6921      	ldr	r1, [r4, #16]
 80025da:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80025de:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80025e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e4:	e784      	b.n	80024f0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e6:	68e3      	ldr	r3, [r4, #12]
 80025e8:	4d5c      	ldr	r5, [pc, #368]	; (800275c <HAL_RCC_OscConfig+0x288>)
 80025ea:	b1bb      	cbz	r3, 800261c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80025ec:	682b      	ldr	r3, [r5, #0]
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025f4:	f7ff f950 	bl	8001898 <HAL_GetTick>
 80025f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	682b      	ldr	r3, [r5, #0]
 80025fc:	079f      	lsls	r7, r3, #30
 80025fe:	d507      	bpl.n	8002610 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	682b      	ldr	r3, [r5, #0]
 8002602:	6922      	ldr	r2, [r4, #16]
 8002604:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002608:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800260c:	602b      	str	r3, [r5, #0]
 800260e:	e76f      	b.n	80024f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002610:	f7ff f942 	bl	8001898 <HAL_GetTick>
 8002614:	1b80      	subs	r0, r0, r6
 8002616:	2802      	cmp	r0, #2
 8002618:	d9ef      	bls.n	80025fa <HAL_RCC_OscConfig+0x126>
 800261a:	e7a2      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002624:	f7ff f938 	bl	8001898 <HAL_GetTick>
 8002628:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	682b      	ldr	r3, [r5, #0]
 800262c:	0798      	lsls	r0, r3, #30
 800262e:	f57f af5f 	bpl.w	80024f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002632:	f7ff f931 	bl	8001898 <HAL_GetTick>
 8002636:	1b80      	subs	r0, r0, r6
 8002638:	2802      	cmp	r0, #2
 800263a:	d9f6      	bls.n	800262a <HAL_RCC_OscConfig+0x156>
 800263c:	e791      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800263e:	6963      	ldr	r3, [r4, #20]
 8002640:	4d46      	ldr	r5, [pc, #280]	; (800275c <HAL_RCC_OscConfig+0x288>)
 8002642:	b183      	cbz	r3, 8002666 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8002644:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800264c:	f7ff f924 	bl	8001898 <HAL_GetTick>
 8002650:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002654:	079b      	lsls	r3, r3, #30
 8002656:	f53f af4f 	bmi.w	80024f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265a:	f7ff f91d 	bl	8001898 <HAL_GetTick>
 800265e:	1b80      	subs	r0, r0, r6
 8002660:	2802      	cmp	r0, #2
 8002662:	d9f6      	bls.n	8002652 <HAL_RCC_OscConfig+0x17e>
 8002664:	e77d      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002666:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800266e:	f7ff f913 	bl	8001898 <HAL_GetTick>
 8002672:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002676:	079f      	lsls	r7, r3, #30
 8002678:	f57f af3e 	bpl.w	80024f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267c:	f7ff f90c 	bl	8001898 <HAL_GetTick>
 8002680:	1b80      	subs	r0, r0, r6
 8002682:	2802      	cmp	r0, #2
 8002684:	d9f6      	bls.n	8002674 <HAL_RCC_OscConfig+0x1a0>
 8002686:	e76c      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002688:	4b34      	ldr	r3, [pc, #208]	; (800275c <HAL_RCC_OscConfig+0x288>)
 800268a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800268c:	00d0      	lsls	r0, r2, #3
 800268e:	d427      	bmi.n	80026e0 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002692:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a4:	4d2e      	ldr	r5, [pc, #184]	; (8002760 <HAL_RCC_OscConfig+0x28c>)
 80026a6:	682b      	ldr	r3, [r5, #0]
 80026a8:	05d9      	lsls	r1, r3, #23
 80026aa:	d51b      	bpl.n	80026e4 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ac:	68a3      	ldr	r3, [r4, #8]
 80026ae:	4d2b      	ldr	r5, [pc, #172]	; (800275c <HAL_RCC_OscConfig+0x288>)
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d127      	bne.n	8002704 <HAL_RCC_OscConfig+0x230>
 80026b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80026c0:	f7ff f8ea 	bl	8001898 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	4f25      	ldr	r7, [pc, #148]	; (800275c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80026c6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ca:	079b      	lsls	r3, r3, #30
 80026cc:	d53f      	bpl.n	800274e <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80026ce:	2e00      	cmp	r6, #0
 80026d0:	f43f af16 	beq.w	8002500 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4a21      	ldr	r2, [pc, #132]	; (800275c <HAL_RCC_OscConfig+0x288>)
 80026d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	e70f      	b.n	8002500 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80026e0:	2600      	movs	r6, #0
 80026e2:	e7df      	b.n	80026a4 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80026e4:	682b      	ldr	r3, [r5, #0]
 80026e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80026ec:	f7ff f8d4 	bl	8001898 <HAL_GetTick>
 80026f0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f2:	682b      	ldr	r3, [r5, #0]
 80026f4:	05da      	lsls	r2, r3, #23
 80026f6:	d4d9      	bmi.n	80026ac <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80026f8:	f7ff f8ce 	bl	8001898 <HAL_GetTick>
 80026fc:	1bc0      	subs	r0, r0, r7
 80026fe:	2864      	cmp	r0, #100	; 0x64
 8002700:	d9f7      	bls.n	80026f2 <HAL_RCC_OscConfig+0x21e>
 8002702:	e72e      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002704:	b9ab      	cbnz	r3, 8002732 <HAL_RCC_OscConfig+0x25e>
 8002706:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	672b      	str	r3, [r5, #112]	; 0x70
 8002712:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800271a:	f7ff f8bd 	bl	8001898 <HAL_GetTick>
 800271e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002720:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002722:	0798      	lsls	r0, r3, #30
 8002724:	d5d3      	bpl.n	80026ce <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff f8b7 	bl	8001898 <HAL_GetTick>
 800272a:	1bc0      	subs	r0, r0, r7
 800272c:	4540      	cmp	r0, r8
 800272e:	d9f7      	bls.n	8002720 <HAL_RCC_OscConfig+0x24c>
 8002730:	e717      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002732:	2b05      	cmp	r3, #5
 8002734:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002736:	d103      	bne.n	8002740 <HAL_RCC_OscConfig+0x26c>
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	672b      	str	r3, [r5, #112]	; 0x70
 800273e:	e7b9      	b.n	80026b4 <HAL_RCC_OscConfig+0x1e0>
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	672b      	str	r3, [r5, #112]	; 0x70
 8002746:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	e7b5      	b.n	80026ba <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff f8a3 	bl	8001898 <HAL_GetTick>
 8002752:	eba0 0008 	sub.w	r0, r0, r8
 8002756:	42a8      	cmp	r0, r5
 8002758:	d9b6      	bls.n	80026c8 <HAL_RCC_OscConfig+0x1f4>
 800275a:	e702      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002764:	4d24      	ldr	r5, [pc, #144]	; (80027f8 <HAL_RCC_OscConfig+0x324>)
 8002766:	68ab      	ldr	r3, [r5, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	f43f aeb5 	beq.w	80024dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002772:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002774:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277c:	d12f      	bne.n	80027de <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 800277e:	f7ff f88b 	bl	8001898 <HAL_GetTick>
 8002782:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	0199      	lsls	r1, r3, #6
 8002788:	d423      	bmi.n	80027d2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800278a:	6a22      	ldr	r2, [r4, #32]
 800278c:	69e3      	ldr	r3, [r4, #28]
 800278e:	4313      	orrs	r3, r2
 8002790:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002792:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002796:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002798:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800279c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800279e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80027a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a4:	4c14      	ldr	r4, [pc, #80]	; (80027f8 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a6:	0852      	lsrs	r2, r2, #1
 80027a8:	3a01      	subs	r2, #1
 80027aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80027ae:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80027b0:	682b      	ldr	r3, [r5, #0]
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027b8:	f7ff f86e 	bl	8001898 <HAL_GetTick>
 80027bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	019a      	lsls	r2, r3, #6
 80027c2:	f53f aea1 	bmi.w	8002508 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c6:	f7ff f867 	bl	8001898 <HAL_GetTick>
 80027ca:	1b40      	subs	r0, r0, r5
 80027cc:	2802      	cmp	r0, #2
 80027ce:	d9f6      	bls.n	80027be <HAL_RCC_OscConfig+0x2ea>
 80027d0:	e6c7      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7ff f861 	bl	8001898 <HAL_GetTick>
 80027d6:	1b80      	subs	r0, r0, r6
 80027d8:	2802      	cmp	r0, #2
 80027da:	d9d3      	bls.n	8002784 <HAL_RCC_OscConfig+0x2b0>
 80027dc:	e6c1      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80027de:	f7ff f85b 	bl	8001898 <HAL_GetTick>
 80027e2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	019b      	lsls	r3, r3, #6
 80027e8:	f57f ae8e 	bpl.w	8002508 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ec:	f7ff f854 	bl	8001898 <HAL_GetTick>
 80027f0:	1b00      	subs	r0, r0, r4
 80027f2:	2802      	cmp	r0, #2
 80027f4:	d9f6      	bls.n	80027e4 <HAL_RCC_OscConfig+0x310>
 80027f6:	e6b4      	b.n	8002562 <HAL_RCC_OscConfig+0x8e>
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_RCC_GetSysClockFreq+0x48>)
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	f002 020c 	and.w	r2, r2, #12
 8002804:	2a04      	cmp	r2, #4
 8002806:	d003      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x14>
 8002808:	2a08      	cmp	r2, #8
 800280a:	d003      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800280c:	480e      	ldr	r0, [pc, #56]	; (8002848 <HAL_RCC_GetSysClockFreq+0x4c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800280e:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002810:	480e      	ldr	r0, [pc, #56]	; (800284c <HAL_RCC_GetSysClockFreq+0x50>)
 8002812:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002814:	685a      	ldr	r2, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002816:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002818:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 800281c:	685b      	ldr	r3, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800281e:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8002820:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002824:	bf4c      	ite	mi
 8002826:	4809      	ldrmi	r0, [pc, #36]	; (800284c <HAL_RCC_GetSysClockFreq+0x50>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8002828:	4807      	ldrpl	r0, [pc, #28]	; (8002848 <HAL_RCC_GetSysClockFreq+0x4c>)
 800282a:	fbb0 f0f2 	udiv	r0, r0, r2
 800282e:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <HAL_RCC_GetSysClockFreq+0x48>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002838:	3301      	adds	r3, #1
 800283a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800283c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	00f42400 	.word	0x00f42400
 800284c:	007a1200 	.word	0x007a1200

08002850 <HAL_RCC_ClockConfig>:
{
 8002850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002854:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002856:	4604      	mov	r4, r0
 8002858:	b910      	cbnz	r0, 8002860 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800285a:	2001      	movs	r0, #1
 800285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002860:	4a3f      	ldr	r2, [pc, #252]	; (8002960 <HAL_RCC_ClockConfig+0x110>)
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	428b      	cmp	r3, r1
 800286a:	d328      	bcc.n	80028be <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	0796      	lsls	r6, r2, #30
 8002870:	d430      	bmi.n	80028d4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	07d0      	lsls	r0, r2, #31
 8002874:	d436      	bmi.n	80028e4 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002876:	4a3a      	ldr	r2, [pc, #232]	; (8002960 <HAL_RCC_ClockConfig+0x110>)
 8002878:	6813      	ldr	r3, [r2, #0]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	429d      	cmp	r5, r3
 8002880:	d35a      	bcc.n	8002938 <HAL_RCC_ClockConfig+0xe8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002882:	6822      	ldr	r2, [r4, #0]
 8002884:	0751      	lsls	r1, r2, #29
 8002886:	d462      	bmi.n	800294e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	0713      	lsls	r3, r2, #28
 800288a:	d507      	bpl.n	800289c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800288c:	4a35      	ldr	r2, [pc, #212]	; (8002964 <HAL_RCC_ClockConfig+0x114>)
 800288e:	6921      	ldr	r1, [r4, #16]
 8002890:	6893      	ldr	r3, [r2, #8]
 8002892:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002896:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800289a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800289c:	f7ff ffae 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_RCC_ClockConfig+0x114>)
 80028a2:	4a31      	ldr	r2, [pc, #196]	; (8002968 <HAL_RCC_ClockConfig+0x118>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	40d8      	lsrs	r0, r3
 80028ae:	4b2f      	ldr	r3, [pc, #188]	; (800296c <HAL_RCC_ClockConfig+0x11c>)
 80028b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe fc64 	bl	8001180 <HAL_InitTick>
  return HAL_OK;
 80028b8:	2000      	movs	r0, #0
 80028ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	6813      	ldr	r3, [r2, #0]
 80028c0:	f023 030f 	bic.w	r3, r3, #15
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c8:	6813      	ldr	r3, [r2, #0]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4299      	cmp	r1, r3
 80028d0:	d1c3      	bne.n	800285a <HAL_RCC_ClockConfig+0xa>
 80028d2:	e7cb      	b.n	800286c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d4:	4923      	ldr	r1, [pc, #140]	; (8002964 <HAL_RCC_ClockConfig+0x114>)
 80028d6:	68a0      	ldr	r0, [r4, #8]
 80028d8:	688b      	ldr	r3, [r1, #8]
 80028da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028de:	4303      	orrs	r3, r0
 80028e0:	608b      	str	r3, [r1, #8]
 80028e2:	e7c6      	b.n	8002872 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e4:	6861      	ldr	r1, [r4, #4]
 80028e6:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <HAL_RCC_ClockConfig+0x114>)
 80028e8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ec:	d11c      	bne.n	8002928 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f2:	d0b2      	beq.n	800285a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f4:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4e1a      	ldr	r6, [pc, #104]	; (8002964 <HAL_RCC_ClockConfig+0x114>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fc:	f022 0203 	bic.w	r2, r2, #3
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002904:	f7fe ffc8 	bl	8001898 <HAL_GetTick>
 8002908:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	68b3      	ldr	r3, [r6, #8]
 800290c:	6862      	ldr	r2, [r4, #4]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002916:	d0ae      	beq.n	8002876 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe ffbe 	bl	8001898 <HAL_GetTick>
 800291c:	1bc0      	subs	r0, r0, r7
 800291e:	4540      	cmp	r0, r8
 8002920:	d9f3      	bls.n	800290a <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 8002922:	2003      	movs	r0, #3
}
 8002924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002928:	2902      	cmp	r1, #2
 800292a:	d102      	bne.n	8002932 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002930:	e7df      	b.n	80028f2 <HAL_RCC_ClockConfig+0xa2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	f012 0f02 	tst.w	r2, #2
 8002936:	e7dc      	b.n	80028f2 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002938:	6813      	ldr	r3, [r2, #0]
 800293a:	f023 030f 	bic.w	r3, r3, #15
 800293e:	432b      	orrs	r3, r5
 8002940:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	429d      	cmp	r5, r3
 800294a:	d186      	bne.n	800285a <HAL_RCC_ClockConfig+0xa>
 800294c:	e799      	b.n	8002882 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800294e:	4905      	ldr	r1, [pc, #20]	; (8002964 <HAL_RCC_ClockConfig+0x114>)
 8002950:	68e0      	ldr	r0, [r4, #12]
 8002952:	688b      	ldr	r3, [r1, #8]
 8002954:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002958:	4303      	orrs	r3, r0
 800295a:	608b      	str	r3, [r1, #8]
 800295c:	e794      	b.n	8002888 <HAL_RCC_ClockConfig+0x38>
 800295e:	bf00      	nop
 8002960:	40023c00 	.word	0x40023c00
 8002964:	40023800 	.word	0x40023800
 8002968:	08005a8c 	.word	0x08005a8c
 800296c:	2000000c 	.word	0x2000000c

08002970 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <HAL_RCC_GetHCLKFreq+0x8>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	2000000c 	.word	0x2000000c

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x14>)
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002986:	5cd3      	ldrb	r3, [r2, r3]
 8002988:	4a03      	ldr	r2, [pc, #12]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800298a:	6810      	ldr	r0, [r2, #0]
}
 800298c:	40d8      	lsrs	r0, r3
 800298e:	4770      	bx	lr
 8002990:	40023800 	.word	0x40023800
 8002994:	08005a9c 	.word	0x08005a9c
 8002998:	2000000c 	.word	0x2000000c

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	4a03      	ldr	r2, [pc, #12]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80029aa:	6810      	ldr	r0, [r2, #0]
} 
 80029ac:	40d8      	lsrs	r0, r3
 80029ae:	4770      	bx	lr
 80029b0:	40023800 	.word	0x40023800
 80029b4:	08005a9c 	.word	0x08005a9c
 80029b8:	2000000c 	.word	0x2000000c

080029bc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029bc:	230f      	movs	r3, #15
 80029be:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_GetClockConfig+0x34>)
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	f002 0203 	and.w	r2, r2, #3
 80029c8:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80029d0:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80029d8:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80029e2:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_RCC_GetClockConfig+0x38>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	600b      	str	r3, [r1, #0]
 80029ee:	4770      	bx	lr
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40023c00 	.word	0x40023c00

080029f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029fc:	6802      	ldr	r2, [r0, #0]
{
 80029fe:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a00:	f012 0601 	ands.w	r6, r2, #1
 8002a04:	d00b      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a06:	4bb8      	ldr	r3, [pc, #736]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a08:	6899      	ldr	r1, [r3, #8]
 8002a0a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002a0e:	6099      	str	r1, [r3, #8]
 8002a10:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a16:	fab6 f686 	clz	r6, r6
 8002a1a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a1c:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a1e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8002a22:	d012      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a24:	49b0      	ldr	r1, [pc, #704]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a26:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002a28:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a2c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8002a34:	bf08      	it	eq
 8002a36:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a38:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a3c:	bf16      	itet	ne
 8002a3e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8002a42:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a44:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a4a:	02d7      	lsls	r7, r2, #11
 8002a4c:	d510      	bpl.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a4e:	48a6      	ldr	r0, [pc, #664]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a50:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002a52:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a56:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a5e:	ea43 0301 	orr.w	r3, r3, r1
 8002a62:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a66:	f000 8189 	beq.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x384>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8002a6a:	2900      	cmp	r1, #0
 8002a6c:	bf08      	it	eq
 8002a6e:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8002a70:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002a74:	bf18      	it	ne
 8002a76:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a78:	0690      	lsls	r0, r2, #26
 8002a7a:	d531      	bpl.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	4b9a      	ldr	r3, [pc, #616]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a7e:	4f9b      	ldr	r7, [pc, #620]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9a:	f7fe fefd 	bl	8001898 <HAL_GetTick>
 8002a9e:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	05d9      	lsls	r1, r3, #23
 8002aa4:	f140 816c 	bpl.w	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x388>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aa8:	4f8f      	ldr	r7, [pc, #572]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002ab0:	f040 8171 	bne.w	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ab6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002aba:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002abe:	4a8a      	ldr	r2, [pc, #552]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ac0:	f040 818f 	bne.w	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002ac4:	6891      	ldr	r1, [r2, #8]
 8002ac6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002aca:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002ace:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002ad2:	4301      	orrs	r1, r0
 8002ad4:	6091      	str	r1, [r2, #8]
 8002ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ada:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	06df      	lsls	r7, r3, #27
 8002ae4:	d50c      	bpl.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ae6:	4a80      	ldr	r2, [pc, #512]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ae8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002aec:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002af0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002af4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002af8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002afa:	4301      	orrs	r1, r0
 8002afc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b00:	0458      	lsls	r0, r3, #17
 8002b02:	d508      	bpl.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b04:	4978      	ldr	r1, [pc, #480]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b06:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002b08:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b0c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002b10:	4302      	orrs	r2, r0
 8002b12:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b16:	0419      	lsls	r1, r3, #16
 8002b18:	d508      	bpl.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b1a:	4973      	ldr	r1, [pc, #460]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b1c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002b1e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b22:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002b26:	4302      	orrs	r2, r0
 8002b28:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b2c:	03da      	lsls	r2, r3, #15
 8002b2e:	d508      	bpl.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b30:	496d      	ldr	r1, [pc, #436]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b32:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002b34:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b38:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002b3c:	4302      	orrs	r2, r0
 8002b3e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b42:	039f      	lsls	r7, r3, #14
 8002b44:	d508      	bpl.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b46:	4968      	ldr	r1, [pc, #416]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b48:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002b4a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b4e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002b52:	4302      	orrs	r2, r0
 8002b54:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b58:	0658      	lsls	r0, r3, #25
 8002b5a:	d508      	bpl.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5c:	4962      	ldr	r1, [pc, #392]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b5e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002b60:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b64:	f022 0203 	bic.w	r2, r2, #3
 8002b68:	4302      	orrs	r2, r0
 8002b6a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b6e:	0619      	lsls	r1, r3, #24
 8002b70:	d508      	bpl.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b72:	495d      	ldr	r1, [pc, #372]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b74:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002b76:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b7a:	f022 020c 	bic.w	r2, r2, #12
 8002b7e:	4302      	orrs	r2, r0
 8002b80:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b84:	05da      	lsls	r2, r3, #23
 8002b86:	d508      	bpl.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b88:	4957      	ldr	r1, [pc, #348]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b8a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b8c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b90:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002b94:	4302      	orrs	r2, r0
 8002b96:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b9a:	059f      	lsls	r7, r3, #22
 8002b9c:	d508      	bpl.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b9e:	4952      	ldr	r1, [pc, #328]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ba0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002ba2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ba6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002baa:	4302      	orrs	r2, r0
 8002bac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bb0:	0558      	lsls	r0, r3, #21
 8002bb2:	d508      	bpl.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bb4:	494c      	ldr	r1, [pc, #304]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bb8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002bbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bc0:	4302      	orrs	r2, r0
 8002bc2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bc6:	0519      	lsls	r1, r3, #20
 8002bc8:	d508      	bpl.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bca:	4947      	ldr	r1, [pc, #284]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002bd2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bd6:	4302      	orrs	r2, r0
 8002bd8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bdc:	04da      	lsls	r2, r3, #19
 8002bde:	d508      	bpl.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002be0:	4941      	ldr	r1, [pc, #260]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002be2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002be4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002be8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002bec:	4302      	orrs	r2, r0
 8002bee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bf2:	049f      	lsls	r7, r3, #18
 8002bf4:	d508      	bpl.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bf6:	493c      	ldr	r1, [pc, #240]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bf8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002bfa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002bfe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002c02:	4302      	orrs	r2, r0
 8002c04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c08:	0258      	lsls	r0, r3, #9
 8002c0a:	d508      	bpl.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c0c:	4936      	ldr	r1, [pc, #216]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c0e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002c10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002c14:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002c18:	4302      	orrs	r2, r0
 8002c1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c1e:	0299      	lsls	r1, r3, #10
 8002c20:	d50c      	bpl.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c22:	4831      	ldr	r0, [pc, #196]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c24:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002c26:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8002c2a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c2e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8002c32:	bf08      	it	eq
 8002c34:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c36:	430a      	orrs	r2, r1
 8002c38:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c3c:	035a      	lsls	r2, r3, #13
 8002c3e:	d508      	bpl.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c40:	4929      	ldr	r1, [pc, #164]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c42:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002c44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002c48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c4c:	4302      	orrs	r2, r0
 8002c4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c52:	021f      	lsls	r7, r3, #8
 8002c54:	d509      	bpl.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c56:	4924      	ldr	r1, [pc, #144]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c58:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002c5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002c60:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002c64:	4302      	orrs	r2, r0
 8002c66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c6a:	0158      	lsls	r0, r3, #5
 8002c6c:	d509      	bpl.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c6e:	491e      	ldr	r1, [pc, #120]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c70:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002c74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002c78:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c7c:	4302      	orrs	r2, r0
 8002c7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c82:	0119      	lsls	r1, r3, #4
 8002c84:	d509      	bpl.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c86:	4918      	ldr	r1, [pc, #96]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c88:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8002c8c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002c90:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002c94:	4302      	orrs	r2, r0
 8002c96:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c9a:	00da      	lsls	r2, r3, #3
 8002c9c:	d509      	bpl.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c9e:	4912      	ldr	r1, [pc, #72]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ca0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002ca4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002ca8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002cac:	4302      	orrs	r2, r0
 8002cae:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002cb2:	2e01      	cmp	r6, #1
 8002cb4:	f000 8099 	beq.w	8002dea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002cb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cbc:	f000 8095 	beq.w	8002dea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cc0:	2d01      	cmp	r5, #1
 8002cc2:	d159      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8002cc4:	4d08      	ldr	r5, [pc, #32]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cc6:	682b      	ldr	r3, [r5, #0]
 8002cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cce:	f7fe fde3 	bl	8001898 <HAL_GetTick>
 8002cd2:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	009f      	lsls	r7, r3, #2
 8002cd8:	f100 810b 	bmi.w	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cdc:	6821      	ldr	r1, [r4, #0]
 8002cde:	030d      	lsls	r5, r1, #12
 8002ce0:	d506      	bpl.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002ce2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ce4:	b143      	cbz	r3, 8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002ce6:	e003      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	02c8      	lsls	r0, r1, #11
 8002cf2:	d51d      	bpl.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x338>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cf6:	b9db      	cbnz	r3, 8002d30 <HAL_RCCEx_PeriphCLKConfig+0x338>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cf8:	4a85      	ldr	r2, [pc, #532]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002cfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cfe:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d06:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002d0a:	4303      	orrs	r3, r0
 8002d0c:	6960      	ldr	r0, [r4, #20]
 8002d0e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002d12:	69a0      	ldr	r0, [r4, #24]
 8002d14:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d1c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002d20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002d22:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002d26:	3801      	subs	r0, #1
 8002d28:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002d2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d30:	028a      	lsls	r2, r1, #10
 8002d32:	d515      	bpl.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002d34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d3a:	d111      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d3c:	4a74      	ldr	r2, [pc, #464]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002d3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d42:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d46:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002d4a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	6961      	ldr	r1, [r4, #20]
 8002d52:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002d56:	6a21      	ldr	r1, [r4, #32]
 8002d58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d60:	4c6b      	ldr	r4, [pc, #428]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6a:	f7fe fd95 	bl	8001898 <HAL_GetTick>
 8002d6e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	f140 80c4 	bpl.w	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x508>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002d78:	2000      	movs	r0, #0
 8002d7a:	e009      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x398>
      plli2sused = 1; 
 8002d7c:	2601      	movs	r6, #1
 8002d7e:	e677      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d80:	f7fe fd8a 	bl	8001898 <HAL_GetTick>
 8002d84:	eba0 0008 	sub.w	r0, r0, r8
 8002d88:	2864      	cmp	r0, #100	; 0x64
 8002d8a:	f67f ae89 	bls.w	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002d8e:	2003      	movs	r0, #3
}
 8002d90:	b003      	add	sp, #12
 8002d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d98:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	f43f ae89 	beq.w	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002da4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002daa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dae:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002db2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002db6:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002db8:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dbc:	07da      	lsls	r2, r3, #31
 8002dbe:	f57f ae79 	bpl.w	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fd69 	bl	8001898 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002dca:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dce:	079b      	lsls	r3, r3, #30
 8002dd0:	f53f ae70 	bmi.w	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fd60 	bl	8001898 <HAL_GetTick>
 8002dd8:	eba0 0008 	sub.w	r0, r0, r8
 8002ddc:	4548      	cmp	r0, r9
 8002dde:	d9f5      	bls.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8002de0:	e7d5      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x396>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de2:	6891      	ldr	r1, [r2, #8]
 8002de4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002de8:	e674      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 8002dea:	4e49      	ldr	r6, [pc, #292]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002dec:	6833      	ldr	r3, [r6, #0]
 8002dee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002df2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002df4:	f7fe fd50 	bl	8001898 <HAL_GetTick>
 8002df8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dfa:	6833      	ldr	r3, [r6, #0]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	d472      	bmi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e00:	6822      	ldr	r2, [r4, #0]
 8002e02:	07d7      	lsls	r7, r2, #31
 8002e04:	d512      	bpl.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e08:	b983      	cbnz	r3, 8002e2c <HAL_RCCEx_PeriphCLKConfig+0x434>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e0a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e0e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e16:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	6861      	ldr	r1, [r4, #4]
 8002e1e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002e22:	68a1      	ldr	r1, [r4, #8]
 8002e24:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002e28:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e2c:	0316      	lsls	r6, r2, #12
 8002e2e:	d503      	bpl.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002e30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e36:	d005      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8002e38:	02d0      	lsls	r0, r2, #11
 8002e3a:	d51e      	bpl.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x482>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8002e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e42:	d11a      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e44:	4932      	ldr	r1, [pc, #200]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002e46:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e4a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e52:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002e56:	4303      	orrs	r3, r0
 8002e58:	6860      	ldr	r0, [r4, #4]
 8002e5a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002e5e:	68e0      	ldr	r0, [r4, #12]
 8002e60:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002e68:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e6e:	f020 001f 	bic.w	r0, r0, #31
 8002e72:	3b01      	subs	r3, #1
 8002e74:	4303      	orrs	r3, r0
 8002e76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e7a:	01d1      	lsls	r1, r2, #7
 8002e7c:	d511      	bpl.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e7e:	4924      	ldr	r1, [pc, #144]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002e80:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e84:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e88:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002e8c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002e90:	4303      	orrs	r3, r0
 8002e92:	6860      	ldr	r0, [r4, #4]
 8002e94:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002e98:	6920      	ldr	r0, [r4, #16]
 8002e9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002e9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ea2:	0192      	lsls	r2, r2, #6
 8002ea4:	d50d      	bpl.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ea6:	6923      	ldr	r3, [r4, #16]
 8002ea8:	6862      	ldr	r2, [r4, #4]
 8002eaa:	041b      	lsls	r3, r3, #16
 8002eac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002eb0:	68e2      	ldr	r2, [r4, #12]
 8002eb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002eb6:	68a2      	ldr	r2, [r4, #8]
 8002eb8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002ebe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002ec2:	4e13      	ldr	r6, [pc, #76]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002ec4:	6833      	ldr	r3, [r6, #0]
 8002ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eca:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fce4 	bl	8001898 <HAL_GetTick>
 8002ed0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ed2:	6833      	ldr	r3, [r6, #0]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	f53f aef3 	bmi.w	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eda:	f7fe fcdd 	bl	8001898 <HAL_GetTick>
 8002ede:	1bc0      	subs	r0, r0, r7
 8002ee0:	2864      	cmp	r0, #100	; 0x64
 8002ee2:	d9f6      	bls.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002ee4:	e753      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ee6:	f7fe fcd7 	bl	8001898 <HAL_GetTick>
 8002eea:	1bc0      	subs	r0, r0, r7
 8002eec:	2864      	cmp	r0, #100	; 0x64
 8002eee:	d984      	bls.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x402>
 8002ef0:	e74d      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ef2:	f7fe fcd1 	bl	8001898 <HAL_GetTick>
 8002ef6:	1b80      	subs	r0, r0, r6
 8002ef8:	2864      	cmp	r0, #100	; 0x64
 8002efa:	f67f aeeb 	bls.w	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002efe:	e746      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f00:	f7fe fcca 	bl	8001898 <HAL_GetTick>
 8002f04:	1b40      	subs	r0, r0, r5
 8002f06:	2864      	cmp	r0, #100	; 0x64
 8002f08:	f67f af32 	bls.w	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002f0c:	e73f      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x396>
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800

08002f14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f14:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f16:	4604      	mov	r4, r0
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d04e      	beq.n	8002fba <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f20:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002f24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f28:	b91b      	cbnz	r3, 8002f32 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f2a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f2e:	f7fe f8c5 	bl	80010bc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f32:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f34:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f36:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f38:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002f3c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f3e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f46:	600b      	str	r3, [r1, #0]
 8002f48:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f4c:	d932      	bls.n	8002fb4 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f4e:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f50:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f54:	bf18      	it	ne
 8002f56:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f5a:	b92b      	cbnz	r3, 8002f68 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f5c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002f60:	bf8c      	ite	hi
 8002f62:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002f64:	2301      	movls	r3, #1
 8002f66:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002f68:	68a6      	ldr	r6, [r4, #8]
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	69a5      	ldr	r5, [r4, #24]
 8002f6e:	4333      	orrs	r3, r6
 8002f70:	6926      	ldr	r6, [r4, #16]
 8002f72:	4333      	orrs	r3, r6
 8002f74:	6966      	ldr	r6, [r4, #20]
 8002f76:	4333      	orrs	r3, r6
 8002f78:	69e6      	ldr	r6, [r4, #28]
 8002f7a:	4333      	orrs	r3, r6
 8002f7c:	6a26      	ldr	r6, [r4, #32]
 8002f7e:	4333      	orrs	r3, r6
 8002f80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f82:	4333      	orrs	r3, r6
 8002f84:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f88:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002f8a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f8c:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002f90:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f94:	431a      	orrs	r2, r3
 8002f96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	432a      	orrs	r2, r5
 8002f9c:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f9e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002fa0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fa2:	69cb      	ldr	r3, [r1, #28]
 8002fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fa8:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002faa:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fac:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002fb8:	e7cc      	b.n	8002f54 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002fba:	2001      	movs	r0, #1
}
 8002fbc:	bd70      	pop	{r4, r5, r6, pc}

08002fbe <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fbe:	6a03      	ldr	r3, [r0, #32]
{
 8002fc0:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc2:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc4:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc8:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8002fcc:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fce:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002fd0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002fd6:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fda:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fdc:	6203      	str	r3, [r0, #32]
 8002fde:	bd10      	pop	{r4, pc}

08002fe0 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe0:	6a03      	ldr	r3, [r0, #32]
 8002fe2:	f023 0310 	bic.w	r3, r3, #16
{
 8002fe6:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fea:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002fec:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fee:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ff2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002ff6:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8002ffa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ffe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003000:	6203      	str	r3, [r0, #32]
 8003002:	bd10      	pop	{r4, pc}

08003004 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003004:	6803      	ldr	r3, [r0, #0]
}
 8003006:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
}
 8003018:	4770      	bx	lr

0800301a <HAL_TIM_PWM_MspInit>:
 800301a:	4770      	bx	lr

0800301c <HAL_TIM_OC_DelayElapsedCallback>:
 800301c:	4770      	bx	lr

0800301e <HAL_TIM_IC_CaptureCallback>:
 800301e:	4770      	bx	lr

08003020 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003020:	4770      	bx	lr

08003022 <HAL_TIM_TriggerCallback>:
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003024:	6803      	ldr	r3, [r0, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	0791      	lsls	r1, r2, #30
{
 800302a:	b510      	push	{r4, lr}
 800302c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800302e:	d50f      	bpl.n	8003050 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	0792      	lsls	r2, r2, #30
 8003034:	d50c      	bpl.n	8003050 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003036:	f06f 0202 	mvn.w	r2, #2
 800303a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800303c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800303e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003040:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003042:	0799      	lsls	r1, r3, #30
 8003044:	f000 8085 	beq.w	8003152 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003048:	f7ff ffe9 	bl	800301e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304c:	2300      	movs	r3, #0
 800304e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	0752      	lsls	r2, r2, #29
 8003056:	d510      	bpl.n	800307a <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	0750      	lsls	r0, r2, #29
 800305c:	d50d      	bpl.n	800307a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800305e:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003066:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003068:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800306a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800306c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003070:	d075      	beq.n	800315e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	f7ff ffd4 	bl	800301e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	2300      	movs	r3, #0
 8003078:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	0711      	lsls	r1, r2, #28
 8003080:	d50f      	bpl.n	80030a2 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	0712      	lsls	r2, r2, #28
 8003086:	d50c      	bpl.n	80030a2 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003088:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800308c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800308e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003090:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003092:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003094:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003096:	079b      	lsls	r3, r3, #30
 8003098:	d067      	beq.n	800316a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800309a:	f7ff ffc0 	bl	800301e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	2300      	movs	r3, #0
 80030a0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	06d0      	lsls	r0, r2, #27
 80030a8:	d510      	bpl.n	80030cc <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	06d1      	lsls	r1, r2, #27
 80030ae:	d50d      	bpl.n	80030cc <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b0:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80030b4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b8:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80030ba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030bc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80030be:	f413 7f40 	tst.w	r3, #768	; 0x300
 80030c2:	d058      	beq.n	8003176 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80030c4:	f7ff ffab 	bl	800301e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c8:	2300      	movs	r3, #0
 80030ca:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	07d2      	lsls	r2, r2, #31
 80030d2:	d508      	bpl.n	80030e6 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	07d0      	lsls	r0, r2, #31
 80030d8:	d505      	bpl.n	80030e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030da:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80030de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80030e2:	f7fd ffb3 	bl	800104c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	0611      	lsls	r1, r2, #24
 80030ec:	d508      	bpl.n	8003100 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	0612      	lsls	r2, r2, #24
 80030f2:	d505      	bpl.n	8003100 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80030f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80030fc:	f000 fb31 	bl	8003762 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	05d0      	lsls	r0, r2, #23
 8003106:	d508      	bpl.n	800311a <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	0611      	lsls	r1, r2, #24
 800310c:	d505      	bpl.n	800311a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800310e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003112:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003114:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003116:	f000 fb24 	bl	8003762 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	0652      	lsls	r2, r2, #25
 8003120:	d508      	bpl.n	8003134 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	0650      	lsls	r0, r2, #25
 8003126:	d505      	bpl.n	8003134 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003128:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800312c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800312e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003130:	f7ff ff77 	bl	8003022 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	0691      	lsls	r1, r2, #26
 800313a:	d522      	bpl.n	8003182 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	0692      	lsls	r2, r2, #26
 8003140:	d51f      	bpl.n	8003182 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003142:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003146:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003148:	611a      	str	r2, [r3, #16]
}
 800314a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800314e:	f000 bb07 	b.w	8003760 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	f7ff ff63 	bl	800301c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003156:	4620      	mov	r0, r4
 8003158:	f7ff ff62 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
 800315c:	e776      	b.n	800304c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	f7ff ff5d 	bl	800301c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003162:	4620      	mov	r0, r4
 8003164:	f7ff ff5c 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
 8003168:	e785      	b.n	8003076 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	f7ff ff57 	bl	800301c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800316e:	4620      	mov	r0, r4
 8003170:	f7ff ff56 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
 8003174:	e793      	b.n	800309e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	f7ff ff51 	bl	800301c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317a:	4620      	mov	r0, r4
 800317c:	f7ff ff50 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
 8003180:	e7a2      	b.n	80030c8 <HAL_TIM_IRQHandler+0xa4>
 8003182:	bd10      	pop	{r4, pc}

08003184 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003184:	4a30      	ldr	r2, [pc, #192]	; (8003248 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003186:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003188:	4290      	cmp	r0, r2
 800318a:	d012      	beq.n	80031b2 <TIM_Base_SetConfig+0x2e>
 800318c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003190:	d00f      	beq.n	80031b2 <TIM_Base_SetConfig+0x2e>
 8003192:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003196:	4290      	cmp	r0, r2
 8003198:	d00b      	beq.n	80031b2 <TIM_Base_SetConfig+0x2e>
 800319a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800319e:	4290      	cmp	r0, r2
 80031a0:	d007      	beq.n	80031b2 <TIM_Base_SetConfig+0x2e>
 80031a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031a6:	4290      	cmp	r0, r2
 80031a8:	d003      	beq.n	80031b2 <TIM_Base_SetConfig+0x2e>
 80031aa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80031ae:	4290      	cmp	r0, r2
 80031b0:	d11d      	bne.n	80031ee <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80031b2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80031b8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <TIM_Base_SetConfig+0xc4>)
 80031bc:	4290      	cmp	r0, r2
 80031be:	d104      	bne.n	80031ca <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c4:	68ca      	ldr	r2, [r1, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	e028      	b.n	800321c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80031ca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80031ce:	d0f7      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
 80031d0:	4a1e      	ldr	r2, [pc, #120]	; (800324c <TIM_Base_SetConfig+0xc8>)
 80031d2:	4290      	cmp	r0, r2
 80031d4:	d0f4      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
 80031d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031da:	4290      	cmp	r0, r2
 80031dc:	d0f0      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
 80031de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031e2:	4290      	cmp	r0, r2
 80031e4:	d0ec      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
 80031e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80031ea:	4290      	cmp	r0, r2
 80031ec:	d0e8      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
 80031ee:	4a18      	ldr	r2, [pc, #96]	; (8003250 <TIM_Base_SetConfig+0xcc>)
 80031f0:	4290      	cmp	r0, r2
 80031f2:	d0e5      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
 80031f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031f8:	4290      	cmp	r0, r2
 80031fa:	d0e1      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
 80031fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003200:	4290      	cmp	r0, r2
 8003202:	d0dd      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
 8003204:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003208:	4290      	cmp	r0, r2
 800320a:	d0d9      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
 800320c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003210:	4290      	cmp	r0, r2
 8003212:	d0d5      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
 8003214:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003218:	4290      	cmp	r0, r2
 800321a:	d0d1      	beq.n	80031c0 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800321c:	694a      	ldr	r2, [r1, #20]
 800321e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003222:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003224:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003226:	688b      	ldr	r3, [r1, #8]
 8003228:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800322a:	680b      	ldr	r3, [r1, #0]
 800322c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <TIM_Base_SetConfig+0xc4>)
 8003230:	4298      	cmp	r0, r3
 8003232:	d006      	beq.n	8003242 <TIM_Base_SetConfig+0xbe>
 8003234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003238:	4298      	cmp	r0, r3
 800323a:	d002      	beq.n	8003242 <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 800323c:	2301      	movs	r3, #1
 800323e:	6143      	str	r3, [r0, #20]
}
 8003240:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003242:	690b      	ldr	r3, [r1, #16]
 8003244:	6303      	str	r3, [r0, #48]	; 0x30
 8003246:	e7f9      	b.n	800323c <TIM_Base_SetConfig+0xb8>
 8003248:	40010000 	.word	0x40010000
 800324c:	40000400 	.word	0x40000400
 8003250:	40014000 	.word	0x40014000

08003254 <HAL_TIM_Base_Init>:
{ 
 8003254:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003256:	4604      	mov	r4, r0
 8003258:	b1a0      	cbz	r0, 8003284 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800325a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800325e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003262:	b91b      	cbnz	r3, 800326c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003264:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003268:	f7fd ffec 	bl	8001244 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800326c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800326e:	6820      	ldr	r0, [r4, #0]
 8003270:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8003272:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003276:	f7ff ff85 	bl	8003184 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800327a:	2301      	movs	r3, #1
  return HAL_OK;
 800327c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800327e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003282:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003284:	2001      	movs	r0, #1
}
 8003286:	bd10      	pop	{r4, pc}

08003288 <HAL_TIM_PWM_Init>:
{
 8003288:	b510      	push	{r4, lr}
  if(htim == NULL)
 800328a:	4604      	mov	r4, r0
 800328c:	b1a0      	cbz	r0, 80032b8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800328e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003292:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003296:	b91b      	cbnz	r3, 80032a0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;  
 8003298:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800329c:	f7ff febd 	bl	800301a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80032a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80032a2:	6820      	ldr	r0, [r4, #0]
 80032a4:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 80032a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80032aa:	f7ff ff6b 	bl	8003184 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80032ae:	2301      	movs	r3, #1
  return HAL_OK;
 80032b0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80032b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80032b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80032b8:	2001      	movs	r0, #1
}  
 80032ba:	bd10      	pop	{r4, pc}

080032bc <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032bc:	6a03      	ldr	r3, [r0, #32]
 80032be:	f023 0301 	bic.w	r3, r3, #1
{
 80032c2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80032c6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80032c8:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80032ca:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80032cc:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80032d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032d2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80032d6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80032da:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 80032dc:	688d      	ldr	r5, [r1, #8]
 80032de:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80032e0:	4d0c      	ldr	r5, [pc, #48]	; (8003314 <TIM_OC1_SetConfig+0x58>)
 80032e2:	42a8      	cmp	r0, r5
 80032e4:	d009      	beq.n	80032fa <TIM_OC1_SetConfig+0x3e>
 80032e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032ea:	42a8      	cmp	r0, r5
 80032ec:	d005      	beq.n	80032fa <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80032ee:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 80032f0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80032f2:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80032f4:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 80032f6:	6203      	str	r3, [r0, #32]
} 
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 80032fa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80032fc:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8003300:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003302:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8003306:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003308:	694d      	ldr	r5, [r1, #20]
 800330a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800330c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003310:	432a      	orrs	r2, r5
 8003312:	e7ec      	b.n	80032ee <TIM_OC1_SetConfig+0x32>
 8003314:	40010000 	.word	0x40010000

08003318 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003318:	6a03      	ldr	r3, [r0, #32]
 800331a:	f023 0310 	bic.w	r3, r3, #16
{
 800331e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003320:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003322:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003324:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003326:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003328:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 800332c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800332e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003332:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003336:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 800333a:	688d      	ldr	r5, [r1, #8]
 800333c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003340:	4d0d      	ldr	r5, [pc, #52]	; (8003378 <TIM_OC2_SetConfig+0x60>)
 8003342:	42a8      	cmp	r0, r5
 8003344:	d009      	beq.n	800335a <TIM_OC2_SetConfig+0x42>
 8003346:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800334a:	42a8      	cmp	r0, r5
 800334c:	d005      	beq.n	800335a <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 800334e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003350:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003352:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003354:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003356:	6203      	str	r3, [r0, #32]
}
 8003358:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800335a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800335c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003360:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003362:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003366:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800336a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800336c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800336e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003372:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003376:	e7ea      	b.n	800334e <TIM_OC2_SetConfig+0x36>
 8003378:	40010000 	.word	0x40010000

0800337c <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800337c:	6a03      	ldr	r3, [r0, #32]
 800337e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8003382:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003384:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003386:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003388:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800338a:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800338c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8003390:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003392:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003396:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800339a:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 800339c:	688d      	ldr	r5, [r1, #8]
 800339e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80033a2:	4d0e      	ldr	r5, [pc, #56]	; (80033dc <TIM_OC3_SetConfig+0x60>)
 80033a4:	42a8      	cmp	r0, r5
 80033a6:	d009      	beq.n	80033bc <TIM_OC3_SetConfig+0x40>
 80033a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80033ac:	42a8      	cmp	r0, r5
 80033ae:	d005      	beq.n	80033bc <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 80033b0:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 80033b2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80033b4:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80033b6:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80033b8:	6203      	str	r3, [r0, #32]
}
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80033bc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80033be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80033c2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80033c8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80033cc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80033ce:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80033d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80033d4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80033d8:	e7ea      	b.n	80033b0 <TIM_OC3_SetConfig+0x34>
 80033da:	bf00      	nop
 80033dc:	40010000 	.word	0x40010000

080033e0 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033e0:	6a03      	ldr	r3, [r0, #32]
 80033e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80033e6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80033ea:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80033ec:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80033ee:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80033f0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80033f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fa:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80033fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003402:	688d      	ldr	r5, [r1, #8]
 8003404:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003408:	4d09      	ldr	r5, [pc, #36]	; (8003430 <TIM_OC4_SetConfig+0x50>)
 800340a:	42a8      	cmp	r0, r5
 800340c:	d009      	beq.n	8003422 <TIM_OC4_SetConfig+0x42>
 800340e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003412:	42a8      	cmp	r0, r5
 8003414:	d005      	beq.n	8003422 <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8003416:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003418:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800341a:	684b      	ldr	r3, [r1, #4]
 800341c:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800341e:	6204      	str	r4, [r0, #32]
}
 8003420:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003422:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003426:	694d      	ldr	r5, [r1, #20]
 8003428:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800342c:	e7f3      	b.n	8003416 <TIM_OC4_SetConfig+0x36>
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000

08003434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003434:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003436:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8003438:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800343a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003442:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003444:	6083      	str	r3, [r0, #8]
 8003446:	bd10      	pop	{r4, pc}

08003448 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003448:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800344c:	2b01      	cmp	r3, #1
{
 800344e:	b510      	push	{r4, lr}
 8003450:	4604      	mov	r4, r0
 8003452:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003456:	d018      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800345c:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 800345e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003460:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003464:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003466:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <HAL_TIM_ConfigClockSource+0x118>)
 8003468:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800346a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800346c:	680b      	ldr	r3, [r1, #0]
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d059      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0xde>
 8003472:	d815      	bhi.n	80034a0 <HAL_TIM_ConfigClockSource+0x58>
 8003474:	2b10      	cmp	r3, #16
 8003476:	d067      	beq.n	8003548 <HAL_TIM_ConfigClockSource+0x100>
 8003478:	d808      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x44>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d05e      	beq.n	800353c <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 800347e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003480:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003482:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003486:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800348a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800348c:	2b20      	cmp	r3, #32
 800348e:	d061      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x10c>
 8003490:	2b30      	cmp	r3, #48	; 0x30
 8003492:	d1f4      	bne.n	800347e <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8003494:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800349a:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 800349e:	e026      	b.n	80034ee <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 80034a0:	2b70      	cmp	r3, #112	; 0x70
 80034a2:	d026      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0xaa>
 80034a4:	d80e      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x7c>
 80034a6:	2b50      	cmp	r3, #80	; 0x50
 80034a8:	d032      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0xc8>
 80034aa:	2b60      	cmp	r3, #96	; 0x60
 80034ac:	d1e7      	bne.n	800347e <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80034ae:	68ca      	ldr	r2, [r1, #12]
 80034b0:	6849      	ldr	r1, [r1, #4]
 80034b2:	f7ff fd95 	bl	8002fe0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b6:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80034b8:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80034ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80034be:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80034c2:	e023      	b.n	800350c <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c8:	d00c      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0x9c>
 80034ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ce:	d1d6      	bne.n	800347e <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 80034d0:	68cb      	ldr	r3, [r1, #12]
 80034d2:	684a      	ldr	r2, [r1, #4]
 80034d4:	6889      	ldr	r1, [r1, #8]
 80034d6:	f7ff ffad 	bl	8003434 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	6893      	ldr	r3, [r2, #8]
 80034de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e2:	e013      	b.n	800350c <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80034e4:	6883      	ldr	r3, [r0, #8]
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80034ee:	6083      	str	r3, [r0, #8]
 80034f0:	e7c5      	b.n	800347e <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 80034f2:	68cb      	ldr	r3, [r1, #12]
 80034f4:	684a      	ldr	r2, [r1, #4]
 80034f6:	6889      	ldr	r1, [r1, #8]
 80034f8:	f7ff ff9c 	bl	8003434 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003504:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800350c:	6093      	str	r3, [r2, #8]
    break;
 800350e:	e7b6      	b.n	800347e <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003510:	68ca      	ldr	r2, [r1, #12]
 8003512:	6849      	ldr	r1, [r1, #4]
 8003514:	f7ff fd53 	bl	8002fbe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003518:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800351a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800351c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003520:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8003524:	e7f2      	b.n	800350c <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003526:	68ca      	ldr	r2, [r1, #12]
 8003528:	6849      	ldr	r1, [r1, #4]
 800352a:	f7ff fd48 	bl	8002fbe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800352e:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003530:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003536:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800353a:	e7e7      	b.n	800350c <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 800353c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003542:	f043 0307 	orr.w	r3, r3, #7
 8003546:	e7d2      	b.n	80034ee <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8003548:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800354e:	f043 0317 	orr.w	r3, r3, #23
 8003552:	e7cc      	b.n	80034ee <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8003554:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800355a:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800355e:	e7c6      	b.n	80034ee <HAL_TIM_ConfigClockSource+0xa6>
 8003560:	fffe0088 	.word	0xfffe0088

08003564 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003564:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003566:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003568:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800356a:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 800356c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800356e:	ea23 0304 	bic.w	r3, r3, r4
 8003572:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003574:	6a03      	ldr	r3, [r0, #32]
 8003576:	431a      	orrs	r2, r3
 8003578:	6202      	str	r2, [r0, #32]
 800357a:	bd10      	pop	{r4, pc}

0800357c <HAL_TIM_PWM_Start>:
{
 800357c:	b510      	push	{r4, lr}
 800357e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003580:	2201      	movs	r2, #1
 8003582:	6800      	ldr	r0, [r0, #0]
 8003584:	f7ff ffee 	bl	8003564 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <HAL_TIM_PWM_Start+0x30>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <HAL_TIM_PWM_Start+0x1c>
 8003590:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003594:	4293      	cmp	r3, r2
 8003596:	d103      	bne.n	80035a0 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8003598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800359e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80035a0:	681a      	ldr	r2, [r3, #0]
} 
 80035a2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
} 
 80035aa:	bd10      	pop	{r4, pc}
 80035ac:	40010000 	.word	0x40010000

080035b0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80035b0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 80035b2:	2404      	movs	r4, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 80035b4:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80035b6:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1NE << Channel;
 80035b8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80035ba:	ea23 0304 	bic.w	r3, r3, r4
 80035be:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80035c0:	6a03      	ldr	r3, [r0, #32]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	6202      	str	r2, [r0, #32]
 80035c6:	bd10      	pop	{r4, pc}

080035c8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035c8:	6a03      	ldr	r3, [r0, #32]
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80035ce:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035d0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80035d4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80035dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80035e6:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80035e8:	688d      	ldr	r5, [r1, #8]
 80035ea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80035ee:	4d09      	ldr	r5, [pc, #36]	; (8003614 <TIM_OC5_SetConfig+0x4c>)
 80035f0:	42a8      	cmp	r0, r5
 80035f2:	d003      	beq.n	80035fc <TIM_OC5_SetConfig+0x34>
 80035f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035f8:	42a8      	cmp	r0, r5
 80035fa:	d104      	bne.n	8003606 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035fc:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8003600:	694d      	ldr	r5, [r1, #20]
 8003602:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003606:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003608:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800360a:	684b      	ldr	r3, [r1, #4]
 800360c:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800360e:	6202      	str	r2, [r0, #32]
 8003610:	bd30      	pop	{r4, r5, pc}
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000

08003618 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003618:	6a03      	ldr	r3, [r0, #32]
 800361a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800361e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003620:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003622:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003624:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003626:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003628:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 800362c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800362e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003636:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800363a:	688d      	ldr	r5, [r1, #8]
 800363c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003640:	4d08      	ldr	r5, [pc, #32]	; (8003664 <TIM_OC6_SetConfig+0x4c>)
 8003642:	42a8      	cmp	r0, r5
 8003644:	d003      	beq.n	800364e <TIM_OC6_SetConfig+0x36>
 8003646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800364a:	42a8      	cmp	r0, r5
 800364c:	d104      	bne.n	8003658 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800364e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8003652:	694d      	ldr	r5, [r1, #20]
 8003654:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003658:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800365a:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800365c:	684b      	ldr	r3, [r1, #4]
 800365e:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003660:	6202      	str	r2, [r0, #32]
 8003662:	bd30      	pop	{r4, r5, pc}
 8003664:	40010000 	.word	0x40010000

08003668 <HAL_TIMEx_PWMN_Start>:
{
 8003668:	b510      	push	{r4, lr}
 800366a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800366c:	2204      	movs	r2, #4
 800366e:	6800      	ldr	r0, [r0, #0]
 8003670:	f7ff ff9e 	bl	80035b0 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8003674:	6823      	ldr	r3, [r4, #0]
} 
 8003676:	2000      	movs	r0, #0
  __HAL_TIM_MOE_ENABLE(htim);
 8003678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800367e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
} 
 8003688:	bd10      	pop	{r4, pc}
	...

0800368c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800368c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003690:	2b01      	cmp	r3, #1
{
 8003692:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8003694:	d01c      	beq.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 8003696:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003698:	4d0e      	ldr	r5, [pc, #56]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800369a:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800369c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800369e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036a0:	d003      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80036a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80036a6:	42aa      	cmp	r2, r5
 80036a8:	d103      	bne.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036ae:	684d      	ldr	r5, [r1, #4]
 80036b0:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b8:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80036ba:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036be:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036c0:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 80036c2:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 80036c4:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80036c6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80036c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80036d0:	2002      	movs	r0, #2
} 
 80036d2:	bd30      	pop	{r4, r5, pc}
 80036d4:	40010000 	.word	0x40010000

080036d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80036d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	f04f 0302 	mov.w	r3, #2
{
 80036e2:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80036e4:	d038      	beq.n	8003758 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 80036e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036ea:	68cb      	ldr	r3, [r1, #12]
 80036ec:	688a      	ldr	r2, [r1, #8]
 80036ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80036f2:	4c1a      	ldr	r4, [pc, #104]	; (800375c <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036f6:	684a      	ldr	r2, [r1, #4]
 80036f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036fe:	680a      	ldr	r2, [r1, #0]
 8003700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003704:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003706:	690a      	ldr	r2, [r1, #16]
 8003708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800370c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800370e:	694a      	ldr	r2, [r1, #20]
 8003710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003714:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003716:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800371c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800371e:	698a      	ldr	r2, [r1, #24]
 8003720:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003728:	6802      	ldr	r2, [r0, #0]
 800372a:	42a2      	cmp	r2, r4
 800372c:	d003      	beq.n	8003736 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 800372e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003732:	42a2      	cmp	r2, r4
 8003734:	d10c      	bne.n	8003750 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8003736:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003738:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800373c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003740:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003742:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003748:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800374a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800374e:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003750:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003752:	2300      	movs	r3, #0
 8003754:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003758:	4618      	mov	r0, r3
}
 800375a:	bd10      	pop	{r4, pc}
 800375c:	40010000 	.word	0x40010000

08003760 <HAL_TIMEx_CommutationCallback>:
 8003760:	4770      	bx	lr

08003762 <HAL_TIMEx_BreakCallback>:
{
 8003762:	4770      	bx	lr

08003764 <HAL_TIM_PWM_ConfigChannel>:
{
 8003764:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003766:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800376a:	4604      	mov	r4, r0
 800376c:	460d      	mov	r5, r1
 800376e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003770:	2b01      	cmp	r3, #1
 8003772:	d010      	beq.n	8003796 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003774:	2301      	movs	r3, #1
  switch (Channel)
 8003776:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800377c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003780:	d043      	beq.n	800380a <HAL_TIM_PWM_ConfigChannel+0xa6>
 8003782:	d809      	bhi.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003784:	b1fa      	cbz	r2, 80037c6 <HAL_TIM_PWM_ConfigChannel+0x62>
 8003786:	2a04      	cmp	r2, #4
 8003788:	d02e      	beq.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800378a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800378c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800378e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003792:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003796:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003798:	2a10      	cmp	r2, #16
 800379a:	d047      	beq.n	800382c <HAL_TIM_PWM_ConfigChannel+0xc8>
 800379c:	2a14      	cmp	r2, #20
 800379e:	d056      	beq.n	800384e <HAL_TIM_PWM_ConfigChannel+0xea>
 80037a0:	2a0c      	cmp	r2, #12
 80037a2:	d1f2      	bne.n	800378a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037a4:	6820      	ldr	r0, [r4, #0]
 80037a6:	f7ff fe1b 	bl	80033e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037aa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80037ac:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037c4:	e030      	b.n	8003828 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c6:	6820      	ldr	r0, [r4, #0]
 80037c8:	f7ff fd78 	bl	80032bc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037cc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037ce:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	f042 0208 	orr.w	r2, r2, #8
 80037d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	f022 0204 	bic.w	r2, r2, #4
 80037de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80037e4:	619a      	str	r2, [r3, #24]
    break;
 80037e6:	e7d0      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	f7ff fd95 	bl	8003318 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037ee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80037f0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003800:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003808:	e7ec      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800380a:	6820      	ldr	r0, [r4, #0]
 800380c:	f7ff fdb6 	bl	800337c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003810:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003812:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	f042 0208 	orr.w	r2, r2, #8
 800381a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	f022 0204 	bic.w	r2, r2, #4
 8003822:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003828:	61da      	str	r2, [r3, #28]
    break;
 800382a:	e7ae      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800382c:	6820      	ldr	r0, [r4, #0]
 800382e:	f7ff fecb 	bl	80035c8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003832:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003834:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003836:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003838:	f042 0208 	orr.w	r2, r2, #8
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800383e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003840:	f022 0204 	bic.w	r2, r2, #4
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003846:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003848:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800384c:	e79d      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800384e:	6820      	ldr	r0, [r4, #0]
 8003850:	f7ff fee2 	bl	8003618 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003854:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003856:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800385a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800385e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800386a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800386e:	e7ec      	b.n	800384a <HAL_TIM_PWM_ConfigChannel+0xe6>

08003870 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003870:	6803      	ldr	r3, [r0, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003878:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003882:	2320      	movs	r3, #32
 8003884:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8003888:	4770      	bx	lr
	...

0800388c <HAL_UART_Receive_DMA>:
{
 800388c:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800388e:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8003892:	2a20      	cmp	r2, #32
{
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 8003898:	d133      	bne.n	8003902 <HAL_UART_Receive_DMA+0x76>
    if((pData == NULL ) || (Size == 0U))
 800389a:	2900      	cmp	r1, #0
 800389c:	d02f      	beq.n	80038fe <HAL_UART_Receive_DMA+0x72>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d02d      	beq.n	80038fe <HAL_UART_Receive_DMA+0x72>
    __HAL_LOCK(huart);
 80038a2:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 80038a6:	2a01      	cmp	r2, #1
 80038a8:	d02b      	beq.n	8003902 <HAL_UART_Receive_DMA+0x76>
 80038aa:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	2500      	movs	r5, #0
    huart->pRxBuffPtr = pData;
 80038ae:	6541      	str	r1, [r0, #84]	; 0x54
    __HAL_LOCK(huart);
 80038b0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038b4:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b6:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxXferSize = Size;
 80038b8:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038bc:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038c0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80038c2:	4a11      	ldr	r2, [pc, #68]	; (8003908 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80038c4:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038c6:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038c8:	4a10      	ldr	r2, [pc, #64]	; (800390c <HAL_UART_Receive_DMA+0x80>)
    huart->hdmarx->XferAbortCallback = NULL;
 80038ca:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038cc:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038ce:	4a10      	ldr	r2, [pc, #64]	; (8003910 <HAL_UART_Receive_DMA+0x84>)
 80038d0:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80038d2:	460a      	mov	r2, r1
 80038d4:	f106 0124 	add.w	r1, r6, #36	; 0x24
 80038d8:	f7fe faa4 	bl	8001e24 <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038dc:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 80038de:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    return HAL_OK;
 80038e2:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ea:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038fa:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80038fc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80038fe:	2001      	movs	r0, #1
 8003900:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003902:	2002      	movs	r0, #2
}
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	bf00      	nop
 8003908:	08003a89 	.word	0x08003a89
 800390c:	08003b33 	.word	0x08003b33
 8003910:	08003b3d 	.word	0x08003b3d

08003914 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8003914:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003918:	2b01      	cmp	r3, #1
 800391a:	d026      	beq.n	800396a <HAL_UART_DMAResume+0x56>
 800391c:	2301      	movs	r3, #1
 800391e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003922:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003926:	2b21      	cmp	r3, #33	; 0x21
 8003928:	6803      	ldr	r3, [r0, #0]
 800392a:	d103      	bne.n	8003934 <HAL_UART_DMAResume+0x20>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003932:	609a      	str	r2, [r3, #8]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003934:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8003938:	2a22      	cmp	r2, #34	; 0x22
 800393a:	d10d      	bne.n	8003958 <HAL_UART_DMAResume+0x44>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800393c:	2208      	movs	r2, #8
 800393e:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003946:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003956:	609a      	str	r2, [r3, #8]
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	f010 0001 	ands.w	r0, r0, #1
 800395e:	d106      	bne.n	800396e <HAL_UART_DMAResume+0x5a>
    __HAL_UART_ENABLE(huart);
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4770      	bx	lr
  __HAL_LOCK(huart);
 800396a:	2002      	movs	r0, #2
 800396c:	4770      	bx	lr
  return HAL_OK;
 800396e:	2000      	movs	r0, #0
}
 8003970:	4770      	bx	lr

08003972 <UART_WaitOnFlagUntilTimeout>:
{
 8003972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003976:	9d06      	ldr	r5, [sp, #24]
 8003978:	4604      	mov	r4, r0
 800397a:	460f      	mov	r7, r1
 800397c:	4616      	mov	r6, r2
 800397e:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003980:	6821      	ldr	r1, [r4, #0]
 8003982:	69ca      	ldr	r2, [r1, #28]
 8003984:	ea37 0302 	bics.w	r3, r7, r2
 8003988:	bf0c      	ite	eq
 800398a:	2201      	moveq	r2, #1
 800398c:	2200      	movne	r2, #0
 800398e:	42b2      	cmp	r2, r6
 8003990:	d002      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003992:	2000      	movs	r0, #0
}
 8003994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003998:	1c6b      	adds	r3, r5, #1
 800399a:	d0f2      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800399c:	b99d      	cbnz	r5, 80039c6 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800399e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80039a0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80039b2:	2320      	movs	r3, #32
 80039b4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80039b8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80039bc:	2300      	movs	r3, #0
 80039be:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80039c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80039c6:	f7fd ff67 	bl	8001898 <HAL_GetTick>
 80039ca:	eba0 0008 	sub.w	r0, r0, r8
 80039ce:	4285      	cmp	r5, r0
 80039d0:	d8d6      	bhi.n	8003980 <UART_WaitOnFlagUntilTimeout+0xe>
 80039d2:	e7e4      	b.n	800399e <UART_WaitOnFlagUntilTimeout+0x2c>

080039d4 <HAL_UART_Transmit>:
{
 80039d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80039d8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80039da:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 80039de:	4604      	mov	r4, r0
 80039e0:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 80039e2:	2b20      	cmp	r3, #32
{
 80039e4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80039e6:	d14c      	bne.n	8003a82 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80039e8:	2900      	cmp	r1, #0
 80039ea:	d048      	beq.n	8003a7e <HAL_UART_Transmit+0xaa>
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	d046      	beq.n	8003a7e <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80039f0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d044      	beq.n	8003a82 <HAL_UART_Transmit+0xae>
 80039f8:	2301      	movs	r3, #1
 80039fa:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a02:	2321      	movs	r3, #33	; 0x21
 8003a04:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8003a08:	f7fd ff46 	bl	8001898 <HAL_GetTick>
 8003a0c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003a0e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a12:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003a16:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003a1a:	b292      	uxth	r2, r2
 8003a1c:	b962      	cbnz	r2, 8003a38 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a1e:	9700      	str	r7, [sp, #0]
 8003a20:	4633      	mov	r3, r6
 8003a22:	2140      	movs	r1, #64	; 0x40
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff ffa4 	bl	8003972 <UART_WaitOnFlagUntilTimeout>
 8003a2a:	b998      	cbnz	r0, 8003a54 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8003a2c:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003a2e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8003a32:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8003a36:	e00e      	b.n	8003a56 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8003a38:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	9700      	str	r7, [sp, #0]
 8003a40:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8003a42:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a44:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4c:	4633      	mov	r3, r6
 8003a4e:	f7ff ff90 	bl	8003972 <UART_WaitOnFlagUntilTimeout>
 8003a52:	b118      	cbz	r0, 8003a5c <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8003a54:	2003      	movs	r0, #3
}
 8003a56:	b002      	add	sp, #8
 8003a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68a3      	ldr	r3, [r4, #8]
 8003a5e:	6822      	ldr	r2, [r4, #0]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a64:	d107      	bne.n	8003a76 <HAL_UART_Transmit+0xa2>
 8003a66:	6923      	ldr	r3, [r4, #16]
 8003a68:	b92b      	cbnz	r3, 8003a76 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003a6a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a72:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8003a74:	e7cf      	b.n	8003a16 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003a76:	782b      	ldrb	r3, [r5, #0]
 8003a78:	3501      	adds	r5, #1
 8003a7a:	6293      	str	r3, [r2, #40]	; 0x28
 8003a7c:	e7cb      	b.n	8003a16 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003a7e:	2001      	movs	r0, #1
 8003a80:	e7e9      	b.n	8003a56 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8003a82:	2002      	movs	r0, #2
 8003a84:	e7e7      	b.n	8003a56 <HAL_UART_Transmit+0x82>

08003a86 <HAL_UART_TxCpltCallback>:
 8003a86:	4770      	bx	lr

08003a88 <UART_DMAReceiveCplt>:
{
 8003a88:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a8a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a8c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003a94:	d111      	bne.n	8003aba <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 8003a96:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003aa2:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa4:	6899      	ldr	r1, [r3, #8]
 8003aa6:	f021 0101 	bic.w	r1, r1, #1
 8003aaa:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aac:	6899      	ldr	r1, [r3, #8]
 8003aae:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003ab2:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	2320      	movs	r3, #32
 8003ab6:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
  HAL_UART_RxCpltCallback(huart);
 8003aba:	4610      	mov	r0, r2
 8003abc:	f7fc fc0a 	bl	80002d4 <HAL_UART_RxCpltCallback>
 8003ac0:	bd08      	pop	{r3, pc}

08003ac2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ac2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003ac6:	6802      	ldr	r2, [r0, #0]
 8003ac8:	2b22      	cmp	r3, #34	; 0x22
{
 8003aca:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003acc:	d12a      	bne.n	8003b24 <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8003ad0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003ada:	d11d      	bne.n	8003b18 <UART_Receive_IT+0x56>
 8003adc:	6904      	ldr	r4, [r0, #16]
 8003ade:	b9dc      	cbnz	r4, 8003b18 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ae0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ae2:	4011      	ands	r1, r2
 8003ae4:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8003ae8:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8003aea:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8003aee:	3c01      	subs	r4, #1
 8003af0:	b2a4      	uxth	r4, r4
 8003af2:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8003af6:	b96c      	cbnz	r4, 8003b14 <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af8:	6803      	ldr	r3, [r0, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b00:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8003b10:	f7fc fbe0 	bl	80002d4 <HAL_UART_RxCpltCallback>
    return HAL_OK;
 8003b14:	2000      	movs	r0, #0
}
 8003b16:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003b18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b1a:	1c5c      	adds	r4, r3, #1
 8003b1c:	4011      	ands	r1, r2
 8003b1e:	6544      	str	r4, [r0, #84]	; 0x54
 8003b20:	7019      	strb	r1, [r3, #0]
 8003b22:	e7e2      	b.n	8003aea <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b24:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 8003b26:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 8003b2e:	bd10      	pop	{r4, pc}

08003b30 <HAL_UART_RxHalfCpltCallback>:
 8003b30:	4770      	bx	lr

08003b32 <UART_DMARxHalfCplt>:
{
 8003b32:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8003b34:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003b36:	f7ff fffb 	bl	8003b30 <HAL_UART_RxHalfCpltCallback>
 8003b3a:	bd08      	pop	{r3, pc}

08003b3c <UART_DMAError>:
{
 8003b3c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b3e:	6b81      	ldr	r1, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b46:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b4a:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 8003b4e:	2b21      	cmp	r3, #33	; 0x21
 8003b50:	d10a      	bne.n	8003b68 <UART_DMAError+0x2c>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8003b52:	680b      	ldr	r3, [r1, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	0612      	lsls	r2, r2, #24
 8003b58:	d506      	bpl.n	8003b68 <UART_DMAError+0x2c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003b60:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003b62:	2320      	movs	r3, #32
 8003b64:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b68:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 8003b6c:	2b22      	cmp	r3, #34	; 0x22
 8003b6e:	d106      	bne.n	8003b7e <UART_DMAError+0x42>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8003b70:	680b      	ldr	r3, [r1, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	065b      	lsls	r3, r3, #25
 8003b76:	d502      	bpl.n	8003b7e <UART_DMAError+0x42>
    UART_EndRxTransfer(huart);
 8003b78:	4608      	mov	r0, r1
 8003b7a:	f7ff fe79 	bl	8003870 <UART_EndRxTransfer>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8003b7e:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003b80:	4608      	mov	r0, r1
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8003b82:	f043 0310 	orr.w	r3, r3, #16
 8003b86:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003b88:	f7fc fb9e 	bl	80002c8 <HAL_UART_ErrorCallback>
 8003b8c:	bd08      	pop	{r3, pc}
	...

08003b90 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b90:	6803      	ldr	r3, [r0, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b94:	6819      	ldr	r1, [r3, #0]
{
 8003b96:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003b98:	0716      	lsls	r6, r2, #28
{
 8003b9a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b9c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8003b9e:	d107      	bne.n	8003bb0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ba0:	0695      	lsls	r5, r2, #26
 8003ba2:	d563      	bpl.n	8003c6c <HAL_UART_IRQHandler+0xdc>
 8003ba4:	068e      	lsls	r6, r1, #26
 8003ba6:	d561      	bpl.n	8003c6c <HAL_UART_IRQHandler+0xdc>
}
 8003ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003bac:	f7ff bf89 	b.w	8003ac2 <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003bb0:	f015 0001 	ands.w	r0, r5, #1
 8003bb4:	d102      	bne.n	8003bbc <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003bb6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003bba:	d057      	beq.n	8003c6c <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bbc:	07d5      	lsls	r5, r2, #31
 8003bbe:	d507      	bpl.n	8003bd0 <HAL_UART_IRQHandler+0x40>
 8003bc0:	05ce      	lsls	r6, r1, #23
 8003bc2:	d505      	bpl.n	8003bd0 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003bc4:	2501      	movs	r5, #1
 8003bc6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bc8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003bca:	f045 0501 	orr.w	r5, r5, #1
 8003bce:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd0:	0795      	lsls	r5, r2, #30
 8003bd2:	d506      	bpl.n	8003be2 <HAL_UART_IRQHandler+0x52>
 8003bd4:	b128      	cbz	r0, 8003be2 <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003bd6:	2502      	movs	r5, #2
 8003bd8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bda:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003bdc:	f045 0504 	orr.w	r5, r5, #4
 8003be0:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be2:	0756      	lsls	r6, r2, #29
 8003be4:	d506      	bpl.n	8003bf4 <HAL_UART_IRQHandler+0x64>
 8003be6:	b128      	cbz	r0, 8003bf4 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003be8:	2504      	movs	r5, #4
 8003bea:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bec:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003bee:	f045 0502 	orr.w	r5, r5, #2
 8003bf2:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003bf4:	0715      	lsls	r5, r2, #28
 8003bf6:	d507      	bpl.n	8003c08 <HAL_UART_IRQHandler+0x78>
 8003bf8:	068e      	lsls	r6, r1, #26
 8003bfa:	d400      	bmi.n	8003bfe <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bfc:	b120      	cbz	r0, 8003c08 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003bfe:	2008      	movs	r0, #8
 8003c00:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c02:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003c04:	4303      	orrs	r3, r0
 8003c06:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c08:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d06a      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c0e:	0695      	lsls	r5, r2, #26
 8003c10:	d504      	bpl.n	8003c1c <HAL_UART_IRQHandler+0x8c>
 8003c12:	0688      	lsls	r0, r1, #26
 8003c14:	d502      	bpl.n	8003c1c <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8003c16:	4620      	mov	r0, r4
 8003c18:	f7ff ff53 	bl	8003ac2 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003c1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8003c1e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003c20:	0719      	lsls	r1, r3, #28
 8003c22:	d404      	bmi.n	8003c2e <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003c28:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003c2c:	d01a      	beq.n	8003c64 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 8003c2e:	f7ff fe1f 	bl	8003870 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	0652      	lsls	r2, r2, #25
 8003c38:	d510      	bpl.n	8003c5c <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c3a:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003c3c:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c42:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003c44:	b150      	cbz	r0, 8003c5c <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c46:	4b28      	ldr	r3, [pc, #160]	; (8003ce8 <HAL_UART_IRQHandler+0x158>)
 8003c48:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4a:	f7fe f928 	bl	8001e9e <HAL_DMA_Abort_IT>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d048      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c52:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8003c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c58:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003c5a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7fc fb33 	bl	80002c8 <HAL_UART_ErrorCallback>
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003c64:	f7fc fb30 	bl	80002c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c68:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c6c:	0616      	lsls	r6, r2, #24
 8003c6e:	d52b      	bpl.n	8003cc8 <HAL_UART_IRQHandler+0x138>
 8003c70:	060d      	lsls	r5, r1, #24
 8003c72:	d529      	bpl.n	8003cc8 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c74:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8003c78:	2a21      	cmp	r2, #33	; 0x21
 8003c7a:	d133      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 8003c7c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003c80:	b292      	uxth	r2, r2
 8003c82:	b942      	cbnz	r2, 8003c96 <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c8a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c96:	68a2      	ldr	r2, [r4, #8]
 8003c98:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003c9c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003c9e:	d10e      	bne.n	8003cbe <HAL_UART_IRQHandler+0x12e>
 8003ca0:	6921      	ldr	r1, [r4, #16]
 8003ca2:	b961      	cbnz	r1, 8003cbe <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003ca4:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003ca8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003cac:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003cae:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 8003cb0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003cbe:	1c51      	adds	r1, r2, #1
 8003cc0:	64e1      	str	r1, [r4, #76]	; 0x4c
 8003cc2:	7812      	ldrb	r2, [r2, #0]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28
 8003cc6:	e7f3      	b.n	8003cb0 <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cc8:	0650      	lsls	r0, r2, #25
 8003cca:	d50b      	bpl.n	8003ce4 <HAL_UART_IRQHandler+0x154>
 8003ccc:	064a      	lsls	r2, r1, #25
 8003cce:	d509      	bpl.n	8003ce4 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cd0:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8003cd2:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003cda:	2320      	movs	r3, #32
 8003cdc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8003ce0:	f7ff fed1 	bl	8003a86 <HAL_UART_TxCpltCallback>
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
 8003ce6:	bf00      	nop
 8003ce8:	08003ced 	.word	0x08003ced

08003cec <UART_DMAAbortOnError>:
{
 8003cec:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003cee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cf6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003cfa:	f7fc fae5 	bl	80002c8 <HAL_UART_ErrorCallback>
 8003cfe:	bd08      	pop	{r3, pc}

08003d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d04:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d06:	69c3      	ldr	r3, [r0, #28]
 8003d08:	6921      	ldr	r1, [r4, #16]
 8003d0a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d0c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	6961      	ldr	r1, [r4, #20]
 8003d12:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d14:	4993      	ldr	r1, [pc, #588]	; (8003f64 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d16:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d18:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003d1a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d1c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d20:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d22:	686a      	ldr	r2, [r5, #4]
 8003d24:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003d2c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003d2e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003d30:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003d32:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003d36:	430a      	orrs	r2, r1
 8003d38:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d3a:	4a8b      	ldr	r2, [pc, #556]	; (8003f68 <UART_SetConfig+0x268>)
 8003d3c:	4295      	cmp	r5, r2
 8003d3e:	d119      	bne.n	8003d74 <UART_SetConfig+0x74>
 8003d40:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003d44:	4989      	ldr	r1, [pc, #548]	; (8003f6c <UART_SetConfig+0x26c>)
 8003d46:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d4a:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d52:	5c8a      	ldrb	r2, [r1, r2]
 8003d54:	f040 80b3 	bne.w	8003ebe <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8003d58:	2a08      	cmp	r2, #8
 8003d5a:	f200 80ad 	bhi.w	8003eb8 <UART_SetConfig+0x1b8>
 8003d5e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003d62:	0026      	.short	0x0026
 8003d64:	00e9007b 	.word	0x00e9007b
 8003d68:	00f500ab 	.word	0x00f500ab
 8003d6c:	00ab00ab 	.word	0x00ab00ab
 8003d70:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d74:	4a7e      	ldr	r2, [pc, #504]	; (8003f70 <UART_SetConfig+0x270>)
 8003d76:	4295      	cmp	r5, r2
 8003d78:	d107      	bne.n	8003d8a <UART_SetConfig+0x8a>
 8003d7a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003d7e:	497d      	ldr	r1, [pc, #500]	; (8003f74 <UART_SetConfig+0x274>)
 8003d80:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d84:	f002 020c 	and.w	r2, r2, #12
 8003d88:	e7e1      	b.n	8003d4e <UART_SetConfig+0x4e>
 8003d8a:	4a7b      	ldr	r2, [pc, #492]	; (8003f78 <UART_SetConfig+0x278>)
 8003d8c:	4295      	cmp	r5, r2
 8003d8e:	d12b      	bne.n	8003de8 <UART_SetConfig+0xe8>
 8003d90:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8003d94:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d98:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003d9c:	2a10      	cmp	r2, #16
 8003d9e:	f000 80d2 	beq.w	8003f46 <UART_SetConfig+0x246>
 8003da2:	d816      	bhi.n	8003dd2 <UART_SetConfig+0xd2>
 8003da4:	b9da      	cbnz	r2, 8003dde <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003daa:	f040 809f 	bne.w	8003eec <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003dae:	f7fe fde5 	bl	800297c <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003db2:	6861      	ldr	r1, [r4, #4]
 8003db4:	084a      	lsrs	r2, r1, #1
 8003db6:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dbe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc0:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003dc2:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dc6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8003dca:	6821      	ldr	r1, [r4, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60cb      	str	r3, [r1, #12]
 8003dd0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dd2:	2a20      	cmp	r2, #32
 8003dd4:	f000 80ab 	beq.w	8003f2e <UART_SetConfig+0x22e>
 8003dd8:	2a30      	cmp	r2, #48	; 0x30
 8003dda:	f000 80ba 	beq.w	8003f52 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de2:	d069      	beq.n	8003eb8 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003de4:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003de8:	4a64      	ldr	r2, [pc, #400]	; (8003f7c <UART_SetConfig+0x27c>)
 8003dea:	4295      	cmp	r5, r2
 8003dec:	d10e      	bne.n	8003e0c <UART_SetConfig+0x10c>
 8003dee:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8003df2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003df6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003dfa:	2a40      	cmp	r2, #64	; 0x40
 8003dfc:	f000 80a3 	beq.w	8003f46 <UART_SetConfig+0x246>
 8003e00:	d9d0      	bls.n	8003da4 <UART_SetConfig+0xa4>
 8003e02:	2a80      	cmp	r2, #128	; 0x80
 8003e04:	f000 8093 	beq.w	8003f2e <UART_SetConfig+0x22e>
 8003e08:	2ac0      	cmp	r2, #192	; 0xc0
 8003e0a:	e7e6      	b.n	8003dda <UART_SetConfig+0xda>
 8003e0c:	4a5c      	ldr	r2, [pc, #368]	; (8003f80 <UART_SetConfig+0x280>)
 8003e0e:	4295      	cmp	r5, r2
 8003e10:	d110      	bne.n	8003e34 <UART_SetConfig+0x134>
 8003e12:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8003e16:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003e1a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003e1e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003e22:	f000 8090 	beq.w	8003f46 <UART_SetConfig+0x246>
 8003e26:	d9bd      	bls.n	8003da4 <UART_SetConfig+0xa4>
 8003e28:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003e2c:	d07f      	beq.n	8003f2e <UART_SetConfig+0x22e>
 8003e2e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003e32:	e7d2      	b.n	8003dda <UART_SetConfig+0xda>
 8003e34:	4a53      	ldr	r2, [pc, #332]	; (8003f84 <UART_SetConfig+0x284>)
 8003e36:	4295      	cmp	r5, r2
 8003e38:	d117      	bne.n	8003e6a <UART_SetConfig+0x16a>
 8003e3a:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8003e3e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003e42:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003e46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003e4a:	d07c      	beq.n	8003f46 <UART_SetConfig+0x246>
 8003e4c:	d807      	bhi.n	8003e5e <UART_SetConfig+0x15e>
 8003e4e:	2a00      	cmp	r2, #0
 8003e50:	d1c5      	bne.n	8003dde <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e56:	d154      	bne.n	8003f02 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e58:	f7fe fda0 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003e5c:	e7a9      	b.n	8003db2 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e5e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003e62:	d064      	beq.n	8003f2e <UART_SetConfig+0x22e>
 8003e64:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003e68:	e7b7      	b.n	8003dda <UART_SetConfig+0xda>
 8003e6a:	4a47      	ldr	r2, [pc, #284]	; (8003f88 <UART_SetConfig+0x288>)
 8003e6c:	4295      	cmp	r5, r2
 8003e6e:	d10f      	bne.n	8003e90 <UART_SetConfig+0x190>
 8003e70:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003e74:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003e78:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003e7c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003e80:	d061      	beq.n	8003f46 <UART_SetConfig+0x246>
 8003e82:	d98f      	bls.n	8003da4 <UART_SetConfig+0xa4>
 8003e84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e88:	d051      	beq.n	8003f2e <UART_SetConfig+0x22e>
 8003e8a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003e8e:	e7a4      	b.n	8003dda <UART_SetConfig+0xda>
 8003e90:	4a3e      	ldr	r2, [pc, #248]	; (8003f8c <UART_SetConfig+0x28c>)
 8003e92:	4295      	cmp	r5, r2
 8003e94:	d1a3      	bne.n	8003dde <UART_SetConfig+0xde>
 8003e96:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8003e9a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003e9e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003ea2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003ea6:	d04e      	beq.n	8003f46 <UART_SetConfig+0x246>
 8003ea8:	f67f af7c 	bls.w	8003da4 <UART_SetConfig+0xa4>
 8003eac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003eb0:	d03d      	beq.n	8003f2e <UART_SetConfig+0x22e>
 8003eb2:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8003eb6:	e790      	b.n	8003dda <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8003eb8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e781      	b.n	8003dc2 <UART_SetConfig+0xc2>
    switch (clocksource)
 8003ebe:	2a08      	cmp	r2, #8
 8003ec0:	d890      	bhi.n	8003de4 <UART_SetConfig+0xe4>
 8003ec2:	a301      	add	r3, pc, #4	; (adr r3, 8003ec8 <UART_SetConfig+0x1c8>)
 8003ec4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003f03 	.word	0x08003f03
 8003ed0:	08003f09 	.word	0x08003f09
 8003ed4:	08003de5 	.word	0x08003de5
 8003ed8:	08003f1f 	.word	0x08003f1f
 8003edc:	08003de5 	.word	0x08003de5
 8003ee0:	08003de5 	.word	0x08003de5
 8003ee4:	08003de5 	.word	0x08003de5
 8003ee8:	08003f25 	.word	0x08003f25
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003eec:	f7fe fd46 	bl	800297c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ef0:	6863      	ldr	r3, [r4, #4]
 8003ef2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003ef6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003efa:	b280      	uxth	r0, r0
 8003efc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003efe:	2000      	movs	r0, #0
      break;
 8003f00:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f02:	f7fe fd4b 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003f06:	e7f3      	b.n	8003ef0 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f08:	6862      	ldr	r2, [r4, #4]
 8003f0a:	0853      	lsrs	r3, r2, #1
 8003f0c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003f10:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	60eb      	str	r3, [r5, #12]
 8003f1c:	e7ef      	b.n	8003efe <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f1e:	f7fe fc6d 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8003f22:	e7e5      	b.n	8003ef0 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f24:	6862      	ldr	r2, [r4, #4]
 8003f26:	0853      	lsrs	r3, r2, #1
 8003f28:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003f2c:	e7f2      	b.n	8003f14 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f32:	d1e9      	bne.n	8003f08 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f34:	6860      	ldr	r0, [r4, #4]
 8003f36:	0843      	lsrs	r3, r0, #1
 8003f38:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003f3c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f40:	fbb3 f3f0 	udiv	r3, r3, r0
 8003f44:	e73b      	b.n	8003dbe <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4a:	d1e8      	bne.n	8003f1e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f4c:	f7fe fc56 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8003f50:	e72f      	b.n	8003db2 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f56:	d1e5      	bne.n	8003f24 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f58:	6860      	ldr	r0, [r4, #4]
 8003f5a:	0843      	lsrs	r3, r0, #1
 8003f5c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003f60:	e7ee      	b.n	8003f40 <UART_SetConfig+0x240>
 8003f62:	bf00      	nop
 8003f64:	efff69f3 	.word	0xefff69f3
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	08005aac 	.word	0x08005aac
 8003f70:	40004400 	.word	0x40004400
 8003f74:	08005ab0 	.word	0x08005ab0
 8003f78:	40004800 	.word	0x40004800
 8003f7c:	40004c00 	.word	0x40004c00
 8003f80:	40005000 	.word	0x40005000
 8003f84:	40011400 	.word	0x40011400
 8003f88:	40007800 	.word	0x40007800
 8003f8c:	40007c00 	.word	0x40007c00

08003f90 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f92:	07da      	lsls	r2, r3, #31
{
 8003f94:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f96:	d506      	bpl.n	8003fa6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f98:	6801      	ldr	r1, [r0, #0]
 8003f9a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003f9c:	684a      	ldr	r2, [r1, #4]
 8003f9e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003fa2:	4322      	orrs	r2, r4
 8003fa4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fa6:	079c      	lsls	r4, r3, #30
 8003fa8:	d506      	bpl.n	8003fb8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003faa:	6801      	ldr	r1, [r0, #0]
 8003fac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003fae:	684a      	ldr	r2, [r1, #4]
 8003fb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fb4:	4322      	orrs	r2, r4
 8003fb6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb8:	0759      	lsls	r1, r3, #29
 8003fba:	d506      	bpl.n	8003fca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fbc:	6801      	ldr	r1, [r0, #0]
 8003fbe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003fc0:	684a      	ldr	r2, [r1, #4]
 8003fc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fc6:	4322      	orrs	r2, r4
 8003fc8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fca:	071a      	lsls	r2, r3, #28
 8003fcc:	d506      	bpl.n	8003fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fce:	6801      	ldr	r1, [r0, #0]
 8003fd0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003fd2:	684a      	ldr	r2, [r1, #4]
 8003fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fd8:	4322      	orrs	r2, r4
 8003fda:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fdc:	06dc      	lsls	r4, r3, #27
 8003fde:	d506      	bpl.n	8003fee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe0:	6801      	ldr	r1, [r0, #0]
 8003fe2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003fe4:	688a      	ldr	r2, [r1, #8]
 8003fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fea:	4322      	orrs	r2, r4
 8003fec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fee:	0699      	lsls	r1, r3, #26
 8003ff0:	d506      	bpl.n	8004000 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ff2:	6801      	ldr	r1, [r0, #0]
 8003ff4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003ff6:	688a      	ldr	r2, [r1, #8]
 8003ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffc:	4322      	orrs	r2, r4
 8003ffe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004000:	065a      	lsls	r2, r3, #25
 8004002:	d510      	bpl.n	8004026 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004004:	6801      	ldr	r1, [r0, #0]
 8004006:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004008:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800400a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800400e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004012:	ea42 0204 	orr.w	r2, r2, r4
 8004016:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004018:	d105      	bne.n	8004026 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800401a:	684a      	ldr	r2, [r1, #4]
 800401c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800401e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004022:	4322      	orrs	r2, r4
 8004024:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	d506      	bpl.n	8004038 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800402a:	6802      	ldr	r2, [r0, #0]
 800402c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800402e:	6853      	ldr	r3, [r2, #4]
 8004030:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004034:	430b      	orrs	r3, r1
 8004036:	6053      	str	r3, [r2, #4]
 8004038:	bd10      	pop	{r4, pc}

0800403a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800403a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	2500      	movs	r5, #0
{
 800403e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004040:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004042:	f7fd fc29 	bl	8001898 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004046:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004048:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	0712      	lsls	r2, r2, #28
 800404e:	d409      	bmi.n	8004064 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8004050:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004052:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8004054:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8004058:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 800405c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8004060:	b003      	add	sp, #12
 8004062:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004064:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004068:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800406c:	4620      	mov	r0, r4
 800406e:	9200      	str	r2, [sp, #0]
 8004070:	462a      	mov	r2, r5
 8004072:	f7ff fc7e 	bl	8003972 <UART_WaitOnFlagUntilTimeout>
 8004076:	2800      	cmp	r0, #0
 8004078:	d0ea      	beq.n	8004050 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800407a:	2003      	movs	r0, #3
 800407c:	e7f0      	b.n	8004060 <UART_CheckIdleState+0x26>

0800407e <HAL_UART_Init>:
{
 800407e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8004080:	4604      	mov	r4, r0
 8004082:	b360      	cbz	r0, 80040de <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004084:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004088:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800408c:	b91b      	cbnz	r3, 8004096 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800408e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004092:	f7fd faa9 	bl	80015e8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004096:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004098:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800409a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800409c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80040a0:	6813      	ldr	r3, [r2, #0]
 80040a2:	f023 0301 	bic.w	r3, r3, #1
 80040a6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040a8:	f7ff fe2a 	bl	8003d00 <UART_SetConfig>
 80040ac:	2801      	cmp	r0, #1
 80040ae:	d016      	beq.n	80040de <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040b2:	b113      	cbz	r3, 80040ba <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7ff ff6b 	bl	8003f90 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ba:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80040bc:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040cc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
}
 80040d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80040d8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80040da:	f7ff bfae 	b.w	800403a <UART_CheckIdleState>
}
 80040de:	2001      	movs	r0, #1
 80040e0:	bd10      	pop	{r4, pc}
	...

080040e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 80040e6:	3b01      	subs	r3, #1
 80040e8:	d101      	bne.n	80040ee <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80040ea:	2003      	movs	r0, #3
 80040ec:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 80040ee:	6902      	ldr	r2, [r0, #16]
 80040f0:	2a00      	cmp	r2, #0
 80040f2:	daf8      	bge.n	80040e6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040f4:	6903      	ldr	r3, [r0, #16]
 80040f6:	4a06      	ldr	r2, [pc, #24]	; (8004110 <USB_CoreReset+0x2c>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 80040fe:	3a01      	subs	r2, #1
 8004100:	d0f3      	beq.n	80040ea <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004102:	6903      	ldr	r3, [r0, #16]
 8004104:	f013 0301 	ands.w	r3, r3, #1
 8004108:	d1f9      	bne.n	80040fe <USB_CoreReset+0x1a>

  return HAL_OK;
 800410a:	4618      	mov	r0, r3
}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	00030d41 	.word	0x00030d41

08004114 <USB_CoreInit>:
{
 8004114:	b084      	sub	sp, #16
 8004116:	b538      	push	{r3, r4, r5, lr}
 8004118:	ad05      	add	r5, sp, #20
 800411a:	4604      	mov	r4, r0
 800411c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004122:	2b01      	cmp	r3, #1
 8004124:	d127      	bne.n	8004176 <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004126:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800412e:	68c3      	ldr	r3, [r0, #12]
 8004130:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004138:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800413a:	68c3      	ldr	r3, [r0, #12]
 800413c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004140:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 8004142:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004144:	2b01      	cmp	r3, #1
 8004146:	d103      	bne.n	8004150 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004148:	68c3      	ldr	r3, [r0, #12]
 800414a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800414e:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8004150:	4620      	mov	r0, r4
 8004152:	f7ff ffc7 	bl	80040e4 <USB_CoreReset>
  if(cfg.dma_enable == ENABLE)
 8004156:	9b08      	ldr	r3, [sp, #32]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d107      	bne.n	800416c <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800415c:	68a3      	ldr	r3, [r4, #8]
 800415e:	f043 0306 	orr.w	r3, r3, #6
 8004162:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004164:	68a3      	ldr	r3, [r4, #8]
 8004166:	f043 0320 	orr.w	r3, r3, #32
 800416a:	60a3      	str	r3, [r4, #8]
}
 800416c:	2000      	movs	r0, #0
 800416e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004172:	b004      	add	sp, #16
 8004174:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004176:	68c3      	ldr	r3, [r0, #12]
 8004178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800417c:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 800417e:	f7ff ffb1 	bl	80040e4 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8004182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004186:	63a3      	str	r3, [r4, #56]	; 0x38
 8004188:	e7e5      	b.n	8004156 <USB_CoreInit+0x42>

0800418a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800418a:	6883      	ldr	r3, [r0, #8]
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	6083      	str	r3, [r0, #8]
}
 8004192:	2000      	movs	r0, #0
 8004194:	4770      	bx	lr

08004196 <USB_SetCurrentMode>:
{
 8004196:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004198:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 800419a:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800419c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041a0:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80041a2:	d108      	bne.n	80041b6 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041a4:	68c3      	ldr	r3, [r0, #12]
 80041a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041aa:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 80041ac:	2032      	movs	r0, #50	; 0x32
 80041ae:	f7fd fb79 	bl	80018a4 <HAL_Delay>
}
 80041b2:	2000      	movs	r0, #0
 80041b4:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 80041b6:	2900      	cmp	r1, #0
 80041b8:	d1f8      	bne.n	80041ac <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041ba:	68c3      	ldr	r3, [r0, #12]
 80041bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041c0:	e7f3      	b.n	80041aa <USB_SetCurrentMode+0x14>
	...

080041c4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 80041c4:	0189      	lsls	r1, r1, #6
 80041c6:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <USB_FlushTxFifo+0x20>)
 80041c8:	f041 0120 	orr.w	r1, r1, #32
 80041cc:	6101      	str	r1, [r0, #16]
    if (++count > 200000)
 80041ce:	3a01      	subs	r2, #1
 80041d0:	d005      	beq.n	80041de <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041d2:	6903      	ldr	r3, [r0, #16]
 80041d4:	f013 0320 	ands.w	r3, r3, #32
 80041d8:	d1f9      	bne.n	80041ce <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80041da:	4618      	mov	r0, r3
 80041dc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80041de:	2003      	movs	r0, #3
}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	00030d41 	.word	0x00030d41

080041e8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041e8:	2310      	movs	r3, #16
 80041ea:	4a06      	ldr	r2, [pc, #24]	; (8004204 <USB_FlushRxFifo+0x1c>)
 80041ec:	6103      	str	r3, [r0, #16]
    if (++count > 200000)
 80041ee:	3a01      	subs	r2, #1
 80041f0:	d005      	beq.n	80041fe <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041f2:	6903      	ldr	r3, [r0, #16]
 80041f4:	f013 0310 	ands.w	r3, r3, #16
 80041f8:	d1f9      	bne.n	80041ee <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80041fa:	4618      	mov	r0, r3
 80041fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80041fe:	2003      	movs	r0, #3
}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	00030d41 	.word	0x00030d41

08004208 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004208:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800420c:	4319      	orrs	r1, r3
 800420e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004212:	2000      	movs	r0, #0
 8004214:	4770      	bx	lr
	...

08004218 <USB_DevInit>:
{
 8004218:	b084      	sub	sp, #16
 800421a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800421e:	4604      	mov	r4, r0
 8004220:	a807      	add	r0, sp, #28
 8004222:	4688      	mov	r8, r1
 8004224:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800422a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800422c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004232:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004234:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004236:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0)
 8004238:	b95e      	cbnz	r6, 8004252 <USB_DevInit+0x3a>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 800423a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800423c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004240:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004248:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004250:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0;
 8004252:	2300      	movs	r3, #0
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8004254:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004256:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0;
 800425a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800425e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004262:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8004266:	d158      	bne.n	800431a <USB_DevInit+0x102>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8004268:	2a00      	cmp	r2, #0
 800426a:	d154      	bne.n	8004316 <USB_DevInit+0xfe>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 800426c:	2100      	movs	r1, #0
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800426e:	4620      	mov	r0, r4
 8004270:	f7ff ffca 	bl	8004208 <USB_SetDevSpeed>
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8004274:	2110      	movs	r1, #16
 8004276:	4620      	mov	r0, r4
 8004278:	f7ff ffa4 	bl	80041c4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800427c:	4620      	mov	r0, r4
 800427e:	f7ff ffb3 	bl	80041e8 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0;
 8004282:	2300      	movs	r3, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004284:	f04f 32ff 	mov.w	r2, #4294967295
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8004288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DIEPMSK = 0;
 800428c:	612b      	str	r3, [r5, #16]
 800428e:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0;
 8004290:	616b      	str	r3, [r5, #20]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8004292:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004296:	61aa      	str	r2, [r5, #24]
 8004298:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DAINTMSK = 0;
 800429c:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800429e:	4543      	cmp	r3, r8
 80042a0:	d13f      	bne.n	8004322 <USB_DevInit+0x10a>
 80042a2:	2100      	movs	r1, #0
 80042a4:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80042a8:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80042ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80042b0:	4608      	mov	r0, r1
  for (i = 0; i < cfg.dev_endpoints; i++)
 80042b2:	428b      	cmp	r3, r1
 80042b4:	d143      	bne.n	800433e <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042b6:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 80042b8:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042be:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 80042c0:	d108      	bne.n	80042d4 <USB_DevInit+0xbc>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <USB_DevInit+0x144>)
 80042c4:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80042c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042cc:	f043 0303 	orr.w	r3, r3, #3
 80042d0:	632b      	str	r3, [r5, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 80042d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 80042d8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80042dc:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == DISABLE)
 80042de:	b91f      	cbnz	r7, 80042e8 <USB_DevInit+0xd0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042e0:	69a3      	ldr	r3, [r4, #24]
 80042e2:	f043 0310 	orr.w	r3, r3, #16
 80042e6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80042e8:	69a2      	ldr	r2, [r4, #24]
 80042ea:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <USB_DevInit+0x148>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable)
 80042f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042f2:	b11b      	cbz	r3, 80042fc <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042f4:	69a3      	ldr	r3, [r4, #24]
 80042f6:	f043 0308 	orr.w	r3, r3, #8
 80042fa:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 80042fc:	2e01      	cmp	r6, #1
 80042fe:	d105      	bne.n	800430c <USB_DevInit+0xf4>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004300:	69a3      	ldr	r3, [r4, #24]
 8004302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004306:	f043 0304 	orr.w	r3, r3, #4
 800430a:	61a3      	str	r3, [r4, #24]
}
 800430c:	2000      	movs	r0, #0
 800430e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004312:	b004      	add	sp, #16
 8004314:	4770      	bx	lr
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8004316:	2101      	movs	r1, #1
 8004318:	e7a9      	b.n	800426e <USB_DevInit+0x56>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 800431a:	2903      	cmp	r1, #3
 800431c:	d0a4      	beq.n	8004268 <USB_DevInit+0x50>
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800431e:	2103      	movs	r1, #3
 8004320:	e7a5      	b.n	800426e <USB_DevInit+0x56>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004322:	f8d2 c000 	ldr.w	ip, [r2]
 8004326:	f1bc 0f00 	cmp.w	ip, #0
 800432a:	da06      	bge.n	800433a <USB_DevInit+0x122>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800432c:	6010      	str	r0, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 800432e:	6111      	str	r1, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004330:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8004332:	f8c2 e008 	str.w	lr, [r2, #8]
 8004336:	3220      	adds	r2, #32
 8004338:	e7b1      	b.n	800429e <USB_DevInit+0x86>
      USBx_INEP(i)->DIEPCTL = 0;
 800433a:	6011      	str	r1, [r2, #0]
 800433c:	e7f7      	b.n	800432e <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800433e:	f8d2 8000 	ldr.w	r8, [r2]
 8004342:	f1b8 0f00 	cmp.w	r8, #0
 8004346:	da07      	bge.n	8004358 <USB_DevInit+0x140>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8004348:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 800434c:	6110      	str	r0, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800434e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8004350:	f8c2 c008 	str.w	ip, [r2, #8]
 8004354:	3220      	adds	r2, #32
 8004356:	e7ac      	b.n	80042b2 <USB_DevInit+0x9a>
      USBx_OUTEP(i)->DOEPCTL = 0;
 8004358:	6010      	str	r0, [r2, #0]
 800435a:	e7f7      	b.n	800434c <USB_DevInit+0x134>
 800435c:	00800100 	.word	0x00800100
 8004360:	803c3800 	.word	0x803c3800

08004364 <USB_DevDisconnect>:
{
 8004364:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004366:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800436a:	f043 0302 	orr.w	r3, r3, #2
 800436e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8004372:	2003      	movs	r0, #3
 8004374:	f7fd fa96 	bl	80018a4 <HAL_Delay>
}
 8004378:	2000      	movs	r0, #0
 800437a:	bd08      	pop	{r3, pc}

0800437c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800437c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800437e:	f000 ff01 	bl	8005184 <vTaskStartScheduler>
  
  return osOK;
}
 8004382:	2000      	movs	r0, #0
 8004384:	bd08      	pop	{r3, pc}

08004386 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004386:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004388:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800438c:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800438e:	8a02      	ldrh	r2, [r0, #16]
{
 8004390:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8004392:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004394:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 8004398:	bf14      	ite	ne
 800439a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800439c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800439e:	a803      	add	r0, sp, #12
 80043a0:	9400      	str	r4, [sp, #0]
 80043a2:	9001      	str	r0, [sp, #4]
 80043a4:	4628      	mov	r0, r5
 80043a6:	f000 fe1d 	bl	8004fe4 <xTaskCreate>
 80043aa:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80043ac:	bf0c      	ite	eq
 80043ae:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80043b0:	2000      	movne	r0, #0
}
 80043b2:	b005      	add	sp, #20
 80043b4:	bd30      	pop	{r4, r5, pc}

080043b6 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80043b6:	2800      	cmp	r0, #0
 80043b8:	bf08      	it	eq
 80043ba:	2001      	moveq	r0, #1
{
 80043bc:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80043be:	f001 f837 	bl	8005430 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80043c2:	2000      	movs	r0, #0
 80043c4:	bd08      	pop	{r3, pc}

080043c6 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80043c6:	2001      	movs	r0, #1
 80043c8:	f000 bc62 	b.w	8004c90 <xQueueCreateMutex>

080043cc <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80043cc:	2200      	movs	r2, #0
 80043ce:	c803      	ldmia	r0, {r0, r1}
 80043d0:	f000 bb7c 	b.w	8004acc <xQueueGenericCreate>

080043d4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80043d4:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80043d6:	f001 f97b 	bl	80056d0 <xTaskGetSchedulerState>
 80043da:	2801      	cmp	r0, #1
 80043dc:	d003      	beq.n	80043e6 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80043de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80043e2:	f000 b9ff 	b.w	80047e4 <xPortSysTickHandler>
 80043e6:	bd08      	pop	{r3, pc}

080043e8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043e8:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <prvInsertBlockIntoFreeList+0x40>)
{
 80043ea:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4282      	cmp	r2, r0
 80043f0:	d318      	bcc.n	8004424 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043f2:	685c      	ldr	r4, [r3, #4]
 80043f4:	1919      	adds	r1, r3, r4
 80043f6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043f8:	bf01      	itttt	eq
 80043fa:	6841      	ldreq	r1, [r0, #4]
 80043fc:	4618      	moveq	r0, r3
 80043fe:	1909      	addeq	r1, r1, r4
 8004400:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004402:	6844      	ldr	r4, [r0, #4]
 8004404:	1901      	adds	r1, r0, r4
 8004406:	428a      	cmp	r2, r1
 8004408:	d107      	bne.n	800441a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800440a:	4908      	ldr	r1, [pc, #32]	; (800442c <prvInsertBlockIntoFreeList+0x44>)
 800440c:	6809      	ldr	r1, [r1, #0]
 800440e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004410:	bf1f      	itttt	ne
 8004412:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004414:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004416:	1909      	addne	r1, r1, r4
 8004418:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800441a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800441c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800441e:	bf18      	it	ne
 8004420:	6018      	strne	r0, [r3, #0]
 8004422:	bd10      	pop	{r4, pc}
 8004424:	4613      	mov	r3, r2
 8004426:	e7e1      	b.n	80043ec <prvInsertBlockIntoFreeList+0x4>
 8004428:	20003c80 	.word	0x20003c80
 800442c:	20000070 	.word	0x20000070

08004430 <pvPortMalloc>:
{
 8004430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004434:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004436:	f000 fee5 	bl	8005204 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800443a:	4940      	ldr	r1, [pc, #256]	; (800453c <pvPortMalloc+0x10c>)
 800443c:	4d40      	ldr	r5, [pc, #256]	; (8004540 <pvPortMalloc+0x110>)
 800443e:	680b      	ldr	r3, [r1, #0]
 8004440:	bb0b      	cbnz	r3, 8004486 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8004442:	4a40      	ldr	r2, [pc, #256]	; (8004544 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004444:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004446:	4e40      	ldr	r6, [pc, #256]	; (8004548 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004448:	bf1b      	ittet	ne
 800444a:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800444c:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004450:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004454:	f020 0007 	bicne.w	r0, r0, #7
 8004458:	bf1c      	itt	ne
 800445a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800445c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800445e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004460:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004462:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004464:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8004466:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004468:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800446c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800446e:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004470:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8004472:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004474:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004476:	4b35      	ldr	r3, [pc, #212]	; (800454c <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004478:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800447a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800447c:	4b34      	ldr	r3, [pc, #208]	; (8004550 <pvPortMalloc+0x120>)
 800447e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004480:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004484:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004486:	682f      	ldr	r7, [r5, #0]
 8004488:	4227      	tst	r7, r4
 800448a:	d116      	bne.n	80044ba <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800448c:	2c00      	cmp	r4, #0
 800448e:	d042      	beq.n	8004516 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8004490:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004494:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004496:	bf1c      	itt	ne
 8004498:	f023 0307 	bicne.w	r3, r3, #7
 800449c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800449e:	b163      	cbz	r3, 80044ba <pvPortMalloc+0x8a>
 80044a0:	4a2b      	ldr	r2, [pc, #172]	; (8004550 <pvPortMalloc+0x120>)
 80044a2:	6816      	ldr	r6, [r2, #0]
 80044a4:	4690      	mov	r8, r2
 80044a6:	42b3      	cmp	r3, r6
 80044a8:	d807      	bhi.n	80044ba <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80044aa:	4a27      	ldr	r2, [pc, #156]	; (8004548 <pvPortMalloc+0x118>)
 80044ac:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044ae:	6868      	ldr	r0, [r5, #4]
 80044b0:	4283      	cmp	r3, r0
 80044b2:	d804      	bhi.n	80044be <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80044b4:	6809      	ldr	r1, [r1, #0]
 80044b6:	428d      	cmp	r5, r1
 80044b8:	d107      	bne.n	80044ca <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80044ba:	2400      	movs	r4, #0
 80044bc:	e02b      	b.n	8004516 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044be:	682c      	ldr	r4, [r5, #0]
 80044c0:	2c00      	cmp	r4, #0
 80044c2:	d0f7      	beq.n	80044b4 <pvPortMalloc+0x84>
 80044c4:	462a      	mov	r2, r5
 80044c6:	4625      	mov	r5, r4
 80044c8:	e7f1      	b.n	80044ae <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044ca:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044cc:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044ce:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044d0:	1ac2      	subs	r2, r0, r3
 80044d2:	2a10      	cmp	r2, #16
 80044d4:	d911      	bls.n	80044fa <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044d6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044d8:	0741      	lsls	r1, r0, #29
 80044da:	d00a      	beq.n	80044f2 <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	b672      	cpsid	i
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	b662      	cpsie	i
 80044f0:	e7fe      	b.n	80044f0 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044f2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044f4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044f6:	f7ff ff77 	bl	80043e8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044fa:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044fc:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044fe:	4913      	ldr	r1, [pc, #76]	; (800454c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004500:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004502:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004504:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8004506:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004508:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800450c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800450e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004510:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004512:	bf38      	it	cc
 8004514:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8004516:	f000 ff11 	bl	800533c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800451a:	0763      	lsls	r3, r4, #29
 800451c:	d00a      	beq.n	8004534 <pvPortMalloc+0x104>
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	b672      	cpsid	i
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	b662      	cpsie	i
 8004532:	e7fe      	b.n	8004532 <pvPortMalloc+0x102>
}
 8004534:	4620      	mov	r0, r4
 8004536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800453a:	bf00      	nop
 800453c:	20000070 	.word	0x20000070
 8004540:	20003c74 	.word	0x20003c74
 8004544:	20000074 	.word	0x20000074
 8004548:	20003c80 	.word	0x20003c80
 800454c:	20003c7c 	.word	0x20003c7c
 8004550:	20003c78 	.word	0x20003c78

08004554 <vPortFree>:
{
 8004554:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004556:	4604      	mov	r4, r0
 8004558:	2800      	cmp	r0, #0
 800455a:	d032      	beq.n	80045c2 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800455c:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <vPortFree+0x70>)
 800455e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	4213      	tst	r3, r2
 8004566:	d10a      	bne.n	800457e <vPortFree+0x2a>
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	b672      	cpsid	i
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	b662      	cpsie	i
 800457c:	e7fe      	b.n	800457c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800457e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004582:	b151      	cbz	r1, 800459a <vPortFree+0x46>
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	b672      	cpsid	i
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	b662      	cpsie	i
 8004598:	e7fe      	b.n	8004598 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800459a:	ea23 0302 	bic.w	r3, r3, r2
 800459e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80045a2:	f000 fe2f 	bl	8005204 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <vPortFree+0x74>)
 80045a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045ac:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045b0:	6811      	ldr	r1, [r2, #0]
 80045b2:	440b      	add	r3, r1
 80045b4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045b6:	f7ff ff17 	bl	80043e8 <prvInsertBlockIntoFreeList>
}
 80045ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80045be:	f000 bebd 	b.w	800533c <xTaskResumeAll>
 80045c2:	bd10      	pop	{r4, pc}
 80045c4:	20003c74 	.word	0x20003c74
 80045c8:	20003c78 	.word	0x20003c78

080045cc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045cc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045da:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045dc:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045de:	6003      	str	r3, [r0, #0]
 80045e0:	4770      	bx	lr

080045e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	6103      	str	r3, [r0, #16]
 80045e6:	4770      	bx	lr

080045e8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80045e8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045ea:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80045ec:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045ee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045f4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80045f6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80045fa:	3301      	adds	r3, #1
 80045fc:	6003      	str	r3, [r0, #0]
 80045fe:	4770      	bx	lr

08004600 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004600:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004602:	1c53      	adds	r3, r2, #1
{
 8004604:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8004606:	d10a      	bne.n	800461e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004608:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800460e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004610:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004612:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004614:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004616:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004618:	3301      	adds	r3, #1
 800461a:	6003      	str	r3, [r0, #0]
 800461c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800461e:	f100 0308 	add.w	r3, r0, #8
 8004622:	685c      	ldr	r4, [r3, #4]
 8004624:	6825      	ldr	r5, [r4, #0]
 8004626:	42aa      	cmp	r2, r5
 8004628:	d3ef      	bcc.n	800460a <vListInsert+0xa>
 800462a:	4623      	mov	r3, r4
 800462c:	e7f9      	b.n	8004622 <vListInsert+0x22>

0800462e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800462e:	6841      	ldr	r1, [r0, #4]
 8004630:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004632:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004634:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004636:	6882      	ldr	r2, [r0, #8]
 8004638:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800463e:	bf08      	it	eq
 8004640:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004642:	2200      	movs	r2, #0
 8004644:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	3801      	subs	r0, #1
 800464a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800464c:	4770      	bx	lr
	...

08004650 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <prvTaskExitError+0x34>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	d00a      	beq.n	800466e <prvTaskExitError+0x1e>
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	b672      	cpsid	i
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	b662      	cpsie	i
 800466c:	e7fe      	b.n	800466c <prvTaskExitError+0x1c>
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	b672      	cpsid	i
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	b662      	cpsie	i
 8004682:	e7fe      	b.n	8004682 <prvTaskExitError+0x32>
 8004684:	20000010 	.word	0x20000010

08004688 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004688:	4806      	ldr	r0, [pc, #24]	; (80046a4 <prvPortStartFirstTask+0x1c>)
 800468a:	6800      	ldr	r0, [r0, #0]
 800468c:	6800      	ldr	r0, [r0, #0]
 800468e:	f380 8808 	msr	MSP, r0
 8004692:	b662      	cpsie	i
 8004694:	b661      	cpsie	f
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	df00      	svc	0
 80046a0:	bf00      	nop
 80046a2:	0000      	.short	0x0000
 80046a4:	e000ed08 	.word	0xe000ed08

080046a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046b8 <vPortEnableVFP+0x10>
 80046ac:	6801      	ldr	r1, [r0, #0]
 80046ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046b2:	6001      	str	r1, [r0, #0]
 80046b4:	4770      	bx	lr
 80046b6:	0000      	.short	0x0000
 80046b8:	e000ed88 	.word	0xe000ed88

080046bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046c0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046c4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80046c8:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046ca:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046ce:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046d0:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80046d2:	f06f 0302 	mvn.w	r3, #2
 80046d6:	6203      	str	r3, [r0, #32]
}
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	08004651 	.word	0x08004651

080046e0 <SVC_Handler>:
	__asm volatile (
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <pxCurrentTCBConst2>)
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	6808      	ldr	r0, [r1, #0]
 80046e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	f380 8809 	msr	PSP, r0
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f380 8811 	msr	BASEPRI, r0
 80046fa:	4770      	bx	lr
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst2>:
 8004700:	20003c90 	.word	0x20003c90

08004704 <vPortEnterCritical>:
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	b672      	cpsid	i
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	b662      	cpsie	i
	uxCriticalNesting++;
 8004718:	4a0b      	ldr	r2, [pc, #44]	; (8004748 <vPortEnterCritical+0x44>)
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800471e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004722:	d10f      	bne.n	8004744 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <vPortEnterCritical+0x48>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f013 0fff 	tst.w	r3, #255	; 0xff
 800472c:	d00a      	beq.n	8004744 <vPortEnterCritical+0x40>
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	b672      	cpsid	i
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	b662      	cpsie	i
 8004742:	e7fe      	b.n	8004742 <vPortEnterCritical+0x3e>
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000010 	.word	0x20000010
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004750:	4a09      	ldr	r2, [pc, #36]	; (8004778 <vPortExitCritical+0x28>)
 8004752:	6813      	ldr	r3, [r2, #0]
 8004754:	b953      	cbnz	r3, 800476c <vPortExitCritical+0x1c>
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	b672      	cpsid	i
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	b662      	cpsie	i
 800476a:	e7fe      	b.n	800476a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800476c:	3b01      	subs	r3, #1
 800476e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004770:	b90b      	cbnz	r3, 8004776 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	4770      	bx	lr
 8004778:	20000010 	.word	0x20000010
 800477c:	00000000 	.word	0x00000000

08004780 <PendSV_Handler>:
	__asm volatile
 8004780:	f3ef 8009 	mrs	r0, PSP
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <pxCurrentTCBConst>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	f01e 0f10 	tst.w	lr, #16
 8004790:	bf08      	it	eq
 8004792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80047a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047a4:	b672      	cpsid	i
 80047a6:	f380 8811 	msr	BASEPRI, r0
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	b662      	cpsie	i
 80047b4:	f000 fe9c 	bl	80054f0 <vTaskSwitchContext>
 80047b8:	f04f 0000 	mov.w	r0, #0
 80047bc:	f380 8811 	msr	BASEPRI, r0
 80047c0:	bc08      	pop	{r3}
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	6808      	ldr	r0, [r1, #0]
 80047c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	f01e 0f10 	tst.w	lr, #16
 80047ce:	bf08      	it	eq
 80047d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047d4:	f380 8809 	msr	PSP, r0
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop

080047e0 <pxCurrentTCBConst>:
 80047e0:	20003c90 	.word	0x20003c90

080047e4 <xPortSysTickHandler>:
{
 80047e4:	b508      	push	{r3, lr}
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	b672      	cpsid	i
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80047fa:	f000 fd0b 	bl	8005214 <xTaskIncrementTick>
 80047fe:	b118      	cbz	r0, 8004808 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004804:	4b02      	ldr	r3, [pc, #8]	; (8004810 <xPortSysTickHandler+0x2c>)
 8004806:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004808:	2300      	movs	r3, #0
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	bd08      	pop	{r3, pc}
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <vPortSetupTimerInterrupt+0x1c>)
 8004816:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004820:	4a04      	ldr	r2, [pc, #16]	; (8004834 <vPortSetupTimerInterrupt+0x20>)
 8004822:	3b01      	subs	r3, #1
 8004824:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004826:	2207      	movs	r2, #7
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <vPortSetupTimerInterrupt+0x24>)
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	2000000c 	.word	0x2000000c
 8004834:	e000e014 	.word	0xe000e014
 8004838:	e000e010 	.word	0xe000e010

0800483c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <xPortStartScheduler+0x90>)
{
 800483e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004840:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004842:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004848:	22ff      	movs	r2, #255	; 0xff
 800484a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800484c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800484e:	4a20      	ldr	r2, [pc, #128]	; (80048d0 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004856:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800485a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800485e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004860:	2207      	movs	r2, #7
 8004862:	4b1c      	ldr	r3, [pc, #112]	; (80048d4 <xPortStartScheduler+0x98>)
 8004864:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004866:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800486a:	1e54      	subs	r4, r2, #1
 800486c:	0600      	lsls	r0, r0, #24
 800486e:	d423      	bmi.n	80048b8 <xPortStartScheduler+0x7c>
 8004870:	b101      	cbz	r1, 8004874 <xPortStartScheduler+0x38>
 8004872:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004878:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800487c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800487e:	9b01      	ldr	r3, [sp, #4]
 8004880:	4a12      	ldr	r2, [pc, #72]	; (80048cc <xPortStartScheduler+0x90>)
 8004882:	b2db      	uxtb	r3, r3
 8004884:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004886:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <xPortStartScheduler+0x9c>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800488e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004896:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004898:	f7ff ffbc 	bl	8004814 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800489c:	2200      	movs	r2, #0
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <xPortStartScheduler+0xa0>)
 80048a0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80048a2:	f7ff ff01 	bl	80046a8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048a6:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <xPortStartScheduler+0xa4>)
 80048a8:	6813      	ldr	r3, [r2, #0]
 80048aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048ae:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80048b0:	f7ff feea 	bl	8004688 <prvPortStartFirstTask>
	prvTaskExitError();
 80048b4:	f7ff fecc 	bl	8004650 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80048bc:	2101      	movs	r1, #1
 80048be:	0052      	lsls	r2, r2, #1
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	f88d 2003 	strb.w	r2, [sp, #3]
 80048c6:	4622      	mov	r2, r4
 80048c8:	e7cd      	b.n	8004866 <xPortStartScheduler+0x2a>
 80048ca:	bf00      	nop
 80048cc:	e000e400 	.word	0xe000e400
 80048d0:	20003c88 	.word	0x20003c88
 80048d4:	20003c8c 	.word	0x20003c8c
 80048d8:	e000ed20 	.word	0xe000ed20
 80048dc:	20000010 	.word	0x20000010
 80048e0:	e000ef34 	.word	0xe000ef34

080048e4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80048e4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048e8:	2b0f      	cmp	r3, #15
 80048ea:	d910      	bls.n	800490e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ec:	4a12      	ldr	r2, [pc, #72]	; (8004938 <vPortValidateInterruptPriority+0x54>)
 80048ee:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048f0:	4a12      	ldr	r2, [pc, #72]	; (800493c <vPortValidateInterruptPriority+0x58>)
 80048f2:	7812      	ldrb	r2, [r2, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d90a      	bls.n	800490e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	b672      	cpsid	i
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	b662      	cpsie	i
 800490c:	e7fe      	b.n	800490c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <vPortValidateInterruptPriority+0x5c>)
 8004910:	4a0c      	ldr	r2, [pc, #48]	; (8004944 <vPortValidateInterruptPriority+0x60>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800491a:	4293      	cmp	r3, r2
 800491c:	d90a      	bls.n	8004934 <vPortValidateInterruptPriority+0x50>
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	b672      	cpsid	i
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	b662      	cpsie	i
 8004932:	e7fe      	b.n	8004932 <vPortValidateInterruptPriority+0x4e>
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	e000e3f0 	.word	0xe000e3f0
 800493c:	20003c88 	.word	0x20003c88
 8004940:	e000ed0c 	.word	0xe000ed0c
 8004944:	20003c8c 	.word	0x20003c8c

08004948 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800494c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800494e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004950:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004952:	b942      	cbnz	r2, 8004966 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004954:	6805      	ldr	r5, [r0, #0]
 8004956:	b99d      	cbnz	r5, 8004980 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004958:	6840      	ldr	r0, [r0, #4]
 800495a:	f000 ff0f 	bl	800577c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800495e:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004960:	3601      	adds	r6, #1
 8004962:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8004964:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004966:	b96d      	cbnz	r5, 8004984 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004968:	6880      	ldr	r0, [r0, #8]
 800496a:	f000 ff8b 	bl	8005884 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800496e:	68a3      	ldr	r3, [r4, #8]
 8004970:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004972:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004974:	6862      	ldr	r2, [r4, #4]
 8004976:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004978:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800497a:	d301      	bcc.n	8004980 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004980:	2000      	movs	r0, #0
 8004982:	e7ed      	b.n	8004960 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004984:	68c0      	ldr	r0, [r0, #12]
 8004986:	f000 ff7d 	bl	8005884 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800498a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800498c:	68e2      	ldr	r2, [r4, #12]
 800498e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004990:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004992:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004994:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004996:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004998:	bf3e      	ittt	cc
 800499a:	6862      	ldrcc	r2, [r4, #4]
 800499c:	189b      	addcc	r3, r3, r2
 800499e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80049a0:	2d02      	cmp	r5, #2
 80049a2:	d1ed      	bne.n	8004980 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049a4:	b10e      	cbz	r6, 80049aa <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80049a6:	3e01      	subs	r6, #1
 80049a8:	e7ea      	b.n	8004980 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80049aa:	4630      	mov	r0, r6
 80049ac:	e7d8      	b.n	8004960 <prvCopyDataToQueue+0x18>

080049ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049ae:	4603      	mov	r3, r0
 80049b0:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80049b4:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049b6:	b162      	cbz	r2, 80049d2 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80049b8:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049ba:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80049bc:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049be:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80049c0:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 80049c2:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80049c6:	bf24      	itt	cs
 80049c8:	6819      	ldrcs	r1, [r3, #0]
 80049ca:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80049cc:	68d9      	ldr	r1, [r3, #12]
 80049ce:	f000 bf59 	b.w	8005884 <memcpy>
}
 80049d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049dc:	f7ff fe92 	bl	8004704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049e0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049e4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80049e8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049ea:	2d00      	cmp	r5, #0
 80049ec:	dc14      	bgt.n	8004a18 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049ee:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049f0:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80049f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80049f8:	f7ff feaa 	bl	8004750 <vPortExitCritical>
	taskENTER_CRITICAL();
 80049fc:	f7ff fe82 	bl	8004704 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004a00:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8004a04:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	dc12      	bgt.n	8004a30 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a0a:	23ff      	movs	r3, #255	; 0xff
 8004a0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8004a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004a14:	f7ff be9c 	b.w	8004750 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0e7      	beq.n	80049ee <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a1e:	4630      	mov	r0, r6
 8004a20:	f000 fdbe 	bl	80055a0 <xTaskRemoveFromEventList>
 8004a24:	b108      	cbz	r0, 8004a2a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004a26:	f000 fe4d 	bl	80056c4 <vTaskMissedYield>
 8004a2a:	3d01      	subs	r5, #1
 8004a2c:	b26d      	sxtb	r5, r5
 8004a2e:	e7dc      	b.n	80049ea <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a30:	6923      	ldr	r3, [r4, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0e9      	beq.n	8004a0a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a36:	4630      	mov	r0, r6
 8004a38:	f000 fdb2 	bl	80055a0 <xTaskRemoveFromEventList>
 8004a3c:	b108      	cbz	r0, 8004a42 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004a3e:	f000 fe41 	bl	80056c4 <vTaskMissedYield>
 8004a42:	3d01      	subs	r5, #1
 8004a44:	b26d      	sxtb	r5, r5
 8004a46:	e7de      	b.n	8004a06 <prvUnlockQueue+0x2e>

08004a48 <xQueueGenericReset>:
{
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	b950      	cbnz	r0, 8004a66 <xQueueGenericReset+0x1e>
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	b672      	cpsid	i
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	b662      	cpsie	i
 8004a64:	e7fe      	b.n	8004a64 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8004a66:	f7ff fe4d 	bl	8004704 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a6a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004a6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a72:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a74:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004a76:	1a1b      	subs	r3, r3, r0
 8004a78:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a7a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a7c:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004a7e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a80:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a82:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004a84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004a8c:	b995      	cbnz	r5, 8004ab4 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a8e:	6923      	ldr	r3, [r4, #16]
 8004a90:	b163      	cbz	r3, 8004aac <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a92:	f104 0010 	add.w	r0, r4, #16
 8004a96:	f000 fd83 	bl	80055a0 <xTaskRemoveFromEventList>
 8004a9a:	b138      	cbz	r0, 8004aac <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8004a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <xQueueGenericReset+0x80>)
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004aac:	f7ff fe50 	bl	8004750 <vPortExitCritical>
}
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ab4:	f104 0010 	add.w	r0, r4, #16
 8004ab8:	f7ff fd88 	bl	80045cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004abc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ac0:	f7ff fd84 	bl	80045cc <vListInitialise>
 8004ac4:	e7f2      	b.n	8004aac <xQueueGenericReset+0x64>
 8004ac6:	bf00      	nop
 8004ac8:	e000ed04 	.word	0xe000ed04

08004acc <xQueueGenericCreate>:
	{
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	b950      	cbnz	r0, 8004aea <xQueueGenericCreate+0x1e>
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	b672      	cpsid	i
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	b662      	cpsie	i
 8004ae8:	e7fe      	b.n	8004ae8 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aea:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004aec:	3048      	adds	r0, #72	; 0x48
 8004aee:	f7ff fc9f 	bl	8004430 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004af2:	4604      	mov	r4, r0
 8004af4:	b138      	cbz	r0, 8004b06 <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004af6:	b945      	cbnz	r5, 8004b0a <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004af8:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004afa:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004afc:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8004afe:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b00:	4620      	mov	r0, r4
 8004b02:	f7ff ffa1 	bl	8004a48 <xQueueGenericReset>
	}
 8004b06:	4620      	mov	r0, r4
 8004b08:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004b0a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b0e:	6003      	str	r3, [r0, #0]
 8004b10:	e7f3      	b.n	8004afa <xQueueGenericCreate+0x2e>
	...

08004b14 <xQueueGenericSend>:
{
 8004b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	4689      	mov	r9, r1
 8004b1a:	9201      	str	r2, [sp, #4]
 8004b1c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004b1e:	4604      	mov	r4, r0
 8004b20:	b950      	cbnz	r0, 8004b38 <xQueueGenericSend+0x24>
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	b672      	cpsid	i
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	b662      	cpsie	i
 8004b36:	e7fe      	b.n	8004b36 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b38:	2900      	cmp	r1, #0
 8004b3a:	f040 808c 	bne.w	8004c56 <xQueueGenericSend+0x142>
 8004b3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8088 	beq.w	8004c56 <xQueueGenericSend+0x142>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	b672      	cpsid	i
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	b662      	cpsie	i
 8004b5a:	e7fe      	b.n	8004b5a <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b5c:	9e01      	ldr	r6, [sp, #4]
 8004b5e:	2e00      	cmp	r6, #0
 8004b60:	f000 8084 	beq.w	8004c6c <xQueueGenericSend+0x158>
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	b672      	cpsid	i
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	b662      	cpsie	i
 8004b78:	e7fe      	b.n	8004b78 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b7a:	9d01      	ldr	r5, [sp, #4]
 8004b7c:	b91d      	cbnz	r5, 8004b86 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8004b7e:	f7ff fde7 	bl	8004750 <vPortExitCritical>
			return errQUEUE_FULL;
 8004b82:	2000      	movs	r0, #0
 8004b84:	e058      	b.n	8004c38 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8004b86:	b916      	cbnz	r6, 8004b8e <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 8004b88:	a802      	add	r0, sp, #8
 8004b8a:	f000 fd4d 	bl	8005628 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004b8e:	f7ff fddf 	bl	8004750 <vPortExitCritical>
		vTaskSuspendAll();
 8004b92:	f000 fb37 	bl	8005204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b96:	f7ff fdb5 	bl	8004704 <vPortEnterCritical>
 8004b9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004b9e:	2bff      	cmp	r3, #255	; 0xff
 8004ba0:	d101      	bne.n	8004ba6 <xQueueGenericSend+0x92>
 8004ba2:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8004ba6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004baa:	2bff      	cmp	r3, #255	; 0xff
 8004bac:	d101      	bne.n	8004bb2 <xQueueGenericSend+0x9e>
 8004bae:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8004bb2:	f7ff fdcd 	bl	8004750 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bb6:	a901      	add	r1, sp, #4
 8004bb8:	a802      	add	r0, sp, #8
 8004bba:	f000 fd45 	bl	8005648 <xTaskCheckForTimeOut>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d143      	bne.n	8004c4a <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bc2:	f7ff fd9f 	bl	8004704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bc6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004bc8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004bca:	f7ff fdc1 	bl	8004750 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bce:	42ae      	cmp	r6, r5
 8004bd0:	d135      	bne.n	8004c3e <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bd2:	9901      	ldr	r1, [sp, #4]
 8004bd4:	f104 0010 	add.w	r0, r4, #16
 8004bd8:	f000 fcc6 	bl	8005568 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f7ff fefb 	bl	80049d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004be2:	f000 fbab 	bl	800533c <xTaskResumeAll>
 8004be6:	b938      	cbnz	r0, 8004bf8 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8004be8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004bec:	f8ca 3000 	str.w	r3, [sl]
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004bfa:	f7ff fd83 	bl	8004704 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bfe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d301      	bcc.n	8004c0a <xQueueGenericSend+0xf6>
 8004c06:	2f02      	cmp	r7, #2
 8004c08:	d1b7      	bne.n	8004b7a <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c0a:	463a      	mov	r2, r7
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f7ff fe9a 	bl	8004948 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c16:	b11b      	cbz	r3, 8004c20 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c1c:	f000 fcc0 	bl	80055a0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004c20:	b138      	cbz	r0, 8004c32 <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8004c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c26:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <xQueueGenericSend+0x178>)
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004c32:	f7ff fd8d 	bl	8004750 <vPortExitCritical>
				return pdPASS;
 8004c36:	2001      	movs	r0, #1
}
 8004c38:	b004      	add	sp, #16
 8004c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7ff feca 	bl	80049d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c44:	f000 fb7a 	bl	800533c <xTaskResumeAll>
 8004c48:	e7d6      	b.n	8004bf8 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f7ff fec4 	bl	80049d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c50:	f000 fb74 	bl	800533c <xTaskResumeAll>
 8004c54:	e795      	b.n	8004b82 <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c56:	2f02      	cmp	r7, #2
 8004c58:	d102      	bne.n	8004c60 <xQueueGenericSend+0x14c>
 8004c5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d10a      	bne.n	8004c76 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c60:	f000 fd36 	bl	80056d0 <xTaskGetSchedulerState>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	f43f af79 	beq.w	8004b5c <xQueueGenericSend+0x48>
 8004c6a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004c6c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004c70:	f8df a018 	ldr.w	sl, [pc, #24]	; 8004c8c <xQueueGenericSend+0x178>
 8004c74:	e7c1      	b.n	8004bfa <xQueueGenericSend+0xe6>
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	b672      	cpsid	i
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	b662      	cpsie	i
 8004c8a:	e7fe      	b.n	8004c8a <xQueueGenericSend+0x176>
 8004c8c:	e000ed04 	.word	0xe000ed04

08004c90 <xQueueCreateMutex>:
	{
 8004c90:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c92:	4602      	mov	r2, r0
 8004c94:	2100      	movs	r1, #0
 8004c96:	2001      	movs	r0, #1
 8004c98:	f7ff ff18 	bl	8004acc <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	b138      	cbz	r0, 8004cb0 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004ca4:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004ca6:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004ca8:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004caa:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004cac:	f7ff ff32 	bl	8004b14 <xQueueGenericSend>
	}
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	bd10      	pop	{r4, pc}

08004cb4 <xQueueGenericSendFromISR>:
{
 8004cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb8:	4688      	mov	r8, r1
 8004cba:	4691      	mov	r9, r2
 8004cbc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	b950      	cbnz	r0, 8004cd8 <xQueueGenericSendFromISR+0x24>
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	b672      	cpsid	i
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	b662      	cpsie	i
 8004cd6:	e7fe      	b.n	8004cd6 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cd8:	bb19      	cbnz	r1, 8004d22 <xQueueGenericSendFromISR+0x6e>
 8004cda:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004cdc:	b30b      	cbz	r3, 8004d22 <xQueueGenericSendFromISR+0x6e>
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	b672      	cpsid	i
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	b662      	cpsie	i
 8004cf2:	e7fe      	b.n	8004cf2 <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004cf8:	f000 fc52 	bl	80055a0 <xTaskRemoveFromEventList>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d036      	beq.n	8004d6e <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8004d00:	f1b9 0f00 	cmp.w	r9, #0
 8004d04:	d033      	beq.n	8004d6e <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d06:	2001      	movs	r0, #1
 8004d08:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004d0c:	f386 8811 	msr	BASEPRI, r6
}
 8004d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d14:	3501      	adds	r5, #1
 8004d16:	b26d      	sxtb	r5, r5
 8004d18:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004d1c:	e027      	b.n	8004d6e <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e7f4      	b.n	8004d0c <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d22:	2f02      	cmp	r7, #2
 8004d24:	d102      	bne.n	8004d2c <xQueueGenericSendFromISR+0x78>
 8004d26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d122      	bne.n	8004d72 <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d2c:	f7ff fdda 	bl	80048e4 <vPortValidateInterruptPriority>
	__asm volatile
 8004d30:	f3ef 8611 	mrs	r6, BASEPRI
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	b672      	cpsid	i
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d301      	bcc.n	8004d54 <xQueueGenericSendFromISR+0xa0>
 8004d50:	2f02      	cmp	r7, #2
 8004d52:	d1e4      	bne.n	8004d1e <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d54:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d58:	463a      	mov	r2, r7
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d5e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d60:	f7ff fdf2 	bl	8004948 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004d64:	1c6b      	adds	r3, r5, #1
 8004d66:	d1d5      	bne.n	8004d14 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1c2      	bne.n	8004cf4 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8004d6e:	2001      	movs	r0, #1
 8004d70:	e7cc      	b.n	8004d0c <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	b672      	cpsid	i
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	b662      	cpsie	i
 8004d86:	e7fe      	b.n	8004d86 <xQueueGenericSendFromISR+0xd2>

08004d88 <xQueueGenericReceive>:
{
 8004d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8c:	4688      	mov	r8, r1
 8004d8e:	9201      	str	r2, [sp, #4]
 8004d90:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8004d92:	4604      	mov	r4, r0
 8004d94:	b950      	cbnz	r0, 8004dac <xQueueGenericReceive+0x24>
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	b672      	cpsid	i
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	b662      	cpsie	i
 8004daa:	e7fe      	b.n	8004daa <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dac:	2900      	cmp	r1, #0
 8004dae:	f040 80a9 	bne.w	8004f04 <xQueueGenericReceive+0x17c>
 8004db2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80a5 	beq.w	8004f04 <xQueueGenericReceive+0x17c>
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	b672      	cpsid	i
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	b662      	cpsie	i
 8004dce:	e7fe      	b.n	8004dce <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dd0:	9e01      	ldr	r6, [sp, #4]
 8004dd2:	2e00      	cmp	r6, #0
 8004dd4:	f000 809c 	beq.w	8004f10 <xQueueGenericReceive+0x188>
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	b672      	cpsid	i
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	b662      	cpsie	i
 8004dec:	e7fe      	b.n	8004dec <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004df0:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d06d      	beq.n	8004ed2 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004dfa:	e05f      	b.n	8004ebc <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dfc:	9d01      	ldr	r5, [sp, #4]
 8004dfe:	b91d      	cbnz	r5, 8004e08 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 8004e00:	f7ff fca6 	bl	8004750 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004e04:	4628      	mov	r0, r5
 8004e06:	e067      	b.n	8004ed8 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 8004e08:	b916      	cbnz	r6, 8004e10 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 8004e0a:	a802      	add	r0, sp, #8
 8004e0c:	f000 fc0c 	bl	8005628 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004e10:	f7ff fc9e 	bl	8004750 <vPortExitCritical>
		vTaskSuspendAll();
 8004e14:	f000 f9f6 	bl	8005204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e18:	f7ff fc74 	bl	8004704 <vPortEnterCritical>
 8004e1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004e20:	2bff      	cmp	r3, #255	; 0xff
 8004e22:	d101      	bne.n	8004e28 <xQueueGenericReceive+0xa0>
 8004e24:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004e28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e2c:	2bff      	cmp	r3, #255	; 0xff
 8004e2e:	d101      	bne.n	8004e34 <xQueueGenericReceive+0xac>
 8004e30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e34:	f7ff fc8c 	bl	8004750 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e38:	a901      	add	r1, sp, #4
 8004e3a:	a802      	add	r0, sp, #8
 8004e3c:	f000 fc04 	bl	8005648 <xTaskCheckForTimeOut>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d152      	bne.n	8004eea <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 8004e44:	f7ff fc5e 	bl	8004704 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e48:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004e4a:	f7ff fc81 	bl	8004750 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	d145      	bne.n	8004ede <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	b933      	cbnz	r3, 8004e64 <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 8004e56:	f7ff fc55 	bl	8004704 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004e5a:	6860      	ldr	r0, [r4, #4]
 8004e5c:	f000 fc48 	bl	80056f0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8004e60:	f7ff fc76 	bl	8004750 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e64:	9901      	ldr	r1, [sp, #4]
 8004e66:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e6a:	f000 fb7d 	bl	8005568 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7ff fdb2 	bl	80049d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e74:	f000 fa62 	bl	800533c <xTaskResumeAll>
 8004e78:	b938      	cbnz	r0, 8004e8a <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 8004e7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e7e:	f8ca 3000 	str.w	r3, [sl]
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004e8c:	f7ff fc3a 	bl	8004704 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e90:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	d0b2      	beq.n	8004dfc <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e96:	4641      	mov	r1, r8
 8004e98:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004e9a:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e9c:	f7ff fd87 	bl	80049ae <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8004ea0:	f1b9 0f00 	cmp.w	r9, #0
 8004ea4:	d1a3      	bne.n	8004dee <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004ea6:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ea8:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004eaa:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eac:	b913      	cbnz	r3, 8004eb4 <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004eae:	f000 fcb9 	bl	8005824 <pvTaskIncrementMutexHeldCount>
 8004eb2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb4:	6923      	ldr	r3, [r4, #16]
 8004eb6:	b163      	cbz	r3, 8004ed2 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb8:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ebc:	f000 fb70 	bl	80055a0 <xTaskRemoveFromEventList>
 8004ec0:	b138      	cbz	r0, 8004ed2 <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 8004ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec6:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <xQueueGenericReceive+0x190>)
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004ed2:	f7ff fc3d 	bl	8004750 <vPortExitCritical>
				return pdPASS;
 8004ed6:	2001      	movs	r0, #1
}
 8004ed8:	b004      	add	sp, #16
 8004eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f7ff fd7a 	bl	80049d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ee4:	f000 fa2a 	bl	800533c <xTaskResumeAll>
 8004ee8:	e7cf      	b.n	8004e8a <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 8004eea:	4620      	mov	r0, r4
 8004eec:	f7ff fd74 	bl	80049d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ef0:	f000 fa24 	bl	800533c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004ef4:	f7ff fc06 	bl	8004704 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ef8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004efa:	f7ff fc29 	bl	8004750 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004efe:	2d00      	cmp	r5, #0
 8004f00:	d1c3      	bne.n	8004e8a <xQueueGenericReceive+0x102>
 8004f02:	e77f      	b.n	8004e04 <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f04:	f000 fbe4 	bl	80056d0 <xTaskGetSchedulerState>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	f43f af61 	beq.w	8004dd0 <xQueueGenericReceive+0x48>
 8004f0e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004f10:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8004f12:	f8df a004 	ldr.w	sl, [pc, #4]	; 8004f18 <xQueueGenericReceive+0x190>
 8004f16:	e7b9      	b.n	8004e8c <xQueueGenericReceive+0x104>
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f1c:	4a06      	ldr	r2, [pc, #24]	; (8004f38 <prvResetNextTaskUnblockTime+0x1c>)
 8004f1e:	6813      	ldr	r3, [r2, #0]
 8004f20:	6819      	ldr	r1, [r3, #0]
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <prvResetNextTaskUnblockTime+0x20>)
 8004f24:	b919      	cbnz	r1, 8004f2e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f32:	68d2      	ldr	r2, [r2, #12]
 8004f34:	6852      	ldr	r2, [r2, #4]
 8004f36:	e7f8      	b.n	8004f2a <prvResetNextTaskUnblockTime+0xe>
 8004f38:	20003c94 	.word	0x20003c94
 8004f3c:	20003d6c 	.word	0x20003d6c

08004f40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f42:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8004f44:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f46:	4e1b      	ldr	r6, [pc, #108]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8004f48:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8004f4a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f4c:	6830      	ldr	r0, [r6, #0]
 8004f4e:	3004      	adds	r0, #4
 8004f50:	f7ff fb6d 	bl	800462e <uxListRemove>
 8004f54:	4633      	mov	r3, r6
 8004f56:	b940      	cbnz	r0, 8004f6a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004f58:	6831      	ldr	r1, [r6, #0]
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	4e16      	ldr	r6, [pc, #88]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0x78>)
 8004f5e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004f60:	6832      	ldr	r2, [r6, #0]
 8004f62:	4088      	lsls	r0, r1
 8004f64:	ea22 0200 	bic.w	r2, r2, r0
 8004f68:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f6a:	1c62      	adds	r2, r4, #1
 8004f6c:	d107      	bne.n	8004f7e <prvAddCurrentTaskToDelayedList+0x3e>
 8004f6e:	b137      	cbz	r7, 8004f7e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f70:	6819      	ldr	r1, [r3, #0]
 8004f72:	4812      	ldr	r0, [pc, #72]	; (8004fbc <prvAddCurrentTaskToDelayedList+0x7c>)
 8004f74:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f7a:	f7ff bb35 	b.w	80045e8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f7e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f80:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8004f82:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f84:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8004f86:	d907      	bls.n	8004f98 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f88:	4a0d      	ldr	r2, [pc, #52]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0x80>)
 8004f8a:	6810      	ldr	r0, [r2, #0]
 8004f8c:	6819      	ldr	r1, [r3, #0]
}
 8004f8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f92:	3104      	adds	r1, #4
 8004f94:	f7ff bb34 	b.w	8004600 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f98:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0x84>)
 8004f9a:	6810      	ldr	r0, [r2, #0]
 8004f9c:	6819      	ldr	r1, [r3, #0]
 8004f9e:	3104      	adds	r1, #4
 8004fa0:	f7ff fb2e 	bl	8004600 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <prvAddCurrentTaskToDelayedList+0x88>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4294      	cmp	r4, r2
 8004faa:	d200      	bcs.n	8004fae <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8004fac:	601c      	str	r4, [r3, #0]
 8004fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb0:	20003db4 	.word	0x20003db4
 8004fb4:	20003c90 	.word	0x20003c90
 8004fb8:	20003d3c 	.word	0x20003d3c
 8004fbc:	20003d8c 	.word	0x20003d8c
 8004fc0:	20003c98 	.word	0x20003c98
 8004fc4:	20003c94 	.word	0x20003c94
 8004fc8:	20003d6c 	.word	0x20003d6c

08004fcc <prvTaskIsTaskSuspended.part.0>:
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	b672      	cpsid	i
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	b662      	cpsie	i
 8004fe0:	e7fe      	b.n	8004fe0 <prvTaskIsTaskSuspended.part.0+0x14>
	...

08004fe4 <xTaskCreate>:
	{
 8004fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8004fec:	4680      	mov	r8, r0
 8004fee:	460f      	mov	r7, r1
 8004ff0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff2:	4650      	mov	r0, sl
	{
 8004ff4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff6:	f7ff fa1b 	bl	8004430 <pvPortMalloc>
			if( pxStack != NULL )
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	f000 8096 	beq.w	800512e <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005002:	2054      	movs	r0, #84	; 0x54
 8005004:	f7ff fa14 	bl	8004430 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005008:	4604      	mov	r4, r0
 800500a:	2800      	cmp	r0, #0
 800500c:	f000 808c 	beq.w	8005128 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005010:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8005014:	6305      	str	r5, [r0, #48]	; 0x30
 8005016:	1e7b      	subs	r3, r7, #1
 8005018:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800501c:	4455      	add	r5, sl
 800501e:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005020:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005024:	7859      	ldrb	r1, [r3, #1]
 8005026:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800502a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800502e:	b109      	cbz	r1, 8005034 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005030:	42bb      	cmp	r3, r7
 8005032:	d1f7      	bne.n	8005024 <xTaskCreate+0x40>
 8005034:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005036:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800503a:	1d27      	adds	r7, r4, #4
 800503c:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800503e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005042:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8005044:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8005048:	bf28      	it	cs
 800504a:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800504c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800504e:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005050:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005054:	f7ff fac5 	bl	80045e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005058:	f104 0018 	add.w	r0, r4, #24
 800505c:	f7ff fac1 	bl	80045e2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005060:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005064:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005066:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005068:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800506a:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800506c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800506e:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005070:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005074:	f7ff fb22 	bl	80046bc <pxPortInitialiseStack>
 8005078:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800507a:	b106      	cbz	r6, 800507e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800507c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800507e:	f7ff fb41 	bl	8004704 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005082:	4b32      	ldr	r3, [pc, #200]	; (800514c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8005084:	4e32      	ldr	r6, [pc, #200]	; (8005150 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800517c <xTaskCreate+0x198>
 800508c:	3201      	adds	r2, #1
 800508e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005090:	6835      	ldr	r5, [r6, #0]
 8005092:	2d00      	cmp	r5, #0
 8005094:	d14e      	bne.n	8005134 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8005096:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d11d      	bne.n	80050da <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800509e:	eb08 0005 	add.w	r0, r8, r5
 80050a2:	3514      	adds	r5, #20
 80050a4:	f7ff fa92 	bl	80045cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050a8:	2d8c      	cmp	r5, #140	; 0x8c
 80050aa:	d1f8      	bne.n	800509e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80050ac:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8005180 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80050b0:	4d28      	ldr	r5, [pc, #160]	; (8005154 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80050b2:	4648      	mov	r0, r9
 80050b4:	f7ff fa8a 	bl	80045cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050b8:	4628      	mov	r0, r5
 80050ba:	f7ff fa87 	bl	80045cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050be:	4826      	ldr	r0, [pc, #152]	; (8005158 <xTaskCreate+0x174>)
 80050c0:	f7ff fa84 	bl	80045cc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80050c4:	4825      	ldr	r0, [pc, #148]	; (800515c <xTaskCreate+0x178>)
 80050c6:	f7ff fa81 	bl	80045cc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80050ca:	4825      	ldr	r0, [pc, #148]	; (8005160 <xTaskCreate+0x17c>)
 80050cc:	f7ff fa7e 	bl	80045cc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80050d0:	4b24      	ldr	r3, [pc, #144]	; (8005164 <xTaskCreate+0x180>)
 80050d2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050d6:	4b24      	ldr	r3, [pc, #144]	; (8005168 <xTaskCreate+0x184>)
 80050d8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80050da:	4a24      	ldr	r2, [pc, #144]	; (800516c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80050dc:	2501      	movs	r5, #1
 80050de:	4924      	ldr	r1, [pc, #144]	; (8005170 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80050e0:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80050e2:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80050e4:	3301      	adds	r3, #1
 80050e6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80050e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80050ea:	fa05 f302 	lsl.w	r3, r5, r2
 80050ee:	4303      	orrs	r3, r0
 80050f0:	2014      	movs	r0, #20
 80050f2:	600b      	str	r3, [r1, #0]
 80050f4:	4639      	mov	r1, r7
 80050f6:	fb00 8002 	mla	r0, r0, r2, r8
 80050fa:	f7ff fa75 	bl	80045e8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80050fe:	f7ff fb27 	bl	8004750 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005102:	4b1c      	ldr	r3, [pc, #112]	; (8005174 <xTaskCreate+0x190>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	b163      	cbz	r3, 8005122 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005108:	6833      	ldr	r3, [r6, #0]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800510e:	429a      	cmp	r2, r3
 8005110:	d207      	bcs.n	8005122 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8005112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005116:	4b18      	ldr	r3, [pc, #96]	; (8005178 <xTaskCreate+0x194>)
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	f3bf 8f6f 	isb	sy
	}
 8005122:	4628      	mov	r0, r5
 8005124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8005128:	4628      	mov	r0, r5
 800512a:	f7ff fa13 	bl	8004554 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800512e:	f04f 35ff 	mov.w	r5, #4294967295
 8005132:	e7f6      	b.n	8005122 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <xTaskCreate+0x190>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1ce      	bne.n	80050da <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800513c:	6833      	ldr	r3, [r6, #0]
 800513e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005140:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005142:	429a      	cmp	r2, r3
 8005144:	d8c9      	bhi.n	80050da <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 8005146:	6034      	str	r4, [r6, #0]
 8005148:	e7c7      	b.n	80050da <xTaskCreate+0xf6>
 800514a:	bf00      	nop
 800514c:	20003d28 	.word	0x20003d28
 8005150:	20003c90 	.word	0x20003c90
 8005154:	20003d54 	.word	0x20003d54
 8005158:	20003d74 	.word	0x20003d74
 800515c:	20003da0 	.word	0x20003da0
 8005160:	20003d8c 	.word	0x20003d8c
 8005164:	20003c94 	.word	0x20003c94
 8005168:	20003c98 	.word	0x20003c98
 800516c:	20003d38 	.word	0x20003d38
 8005170:	20003d3c 	.word	0x20003d3c
 8005174:	20003d88 	.word	0x20003d88
 8005178:	e000ed04 	.word	0xe000ed04
 800517c:	20003c9c 	.word	0x20003c9c
 8005180:	20003d40 	.word	0x20003d40

08005184 <vTaskStartScheduler>:
{
 8005184:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8005186:	4b19      	ldr	r3, [pc, #100]	; (80051ec <vTaskStartScheduler+0x68>)
 8005188:	2400      	movs	r4, #0
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	4918      	ldr	r1, [pc, #96]	; (80051f0 <vTaskStartScheduler+0x6c>)
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	4623      	mov	r3, r4
 8005192:	9400      	str	r4, [sp, #0]
 8005194:	4817      	ldr	r0, [pc, #92]	; (80051f4 <vTaskStartScheduler+0x70>)
 8005196:	f7ff ff25 	bl	8004fe4 <xTaskCreate>
	if( xReturn == pdPASS )
 800519a:	2801      	cmp	r0, #1
 800519c:	d116      	bne.n	80051cc <vTaskStartScheduler+0x48>
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	b672      	cpsid	i
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80051b2:	f04f 32ff 	mov.w	r2, #4294967295
 80051b6:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <vTaskStartScheduler+0x74>)
 80051b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <vTaskStartScheduler+0x78>)
 80051bc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80051be:	4b10      	ldr	r3, [pc, #64]	; (8005200 <vTaskStartScheduler+0x7c>)
 80051c0:	601c      	str	r4, [r3, #0]
}
 80051c2:	b002      	add	sp, #8
 80051c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80051c8:	f7ff bb38 	b.w	800483c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051cc:	3001      	adds	r0, #1
 80051ce:	d10a      	bne.n	80051e6 <vTaskStartScheduler+0x62>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	b672      	cpsid	i
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	b662      	cpsie	i
 80051e4:	e7fe      	b.n	80051e4 <vTaskStartScheduler+0x60>
}
 80051e6:	b002      	add	sp, #8
 80051e8:	bd10      	pop	{r4, pc}
 80051ea:	bf00      	nop
 80051ec:	20003d68 	.word	0x20003d68
 80051f0:	08005abd 	.word	0x08005abd
 80051f4:	0800547d 	.word	0x0800547d
 80051f8:	20003d6c 	.word	0x20003d6c
 80051fc:	20003d88 	.word	0x20003d88
 8005200:	20003db4 	.word	0x20003db4

08005204 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005204:	4a02      	ldr	r2, [pc, #8]	; (8005210 <vTaskSuspendAll+0xc>)
 8005206:	6813      	ldr	r3, [r2, #0]
 8005208:	3301      	adds	r3, #1
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20003d34 	.word	0x20003d34

08005214 <xTaskIncrementTick>:
{
 8005214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005218:	4b3d      	ldr	r3, [pc, #244]	; (8005310 <xTaskIncrementTick+0xfc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d155      	bne.n	80052cc <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8005220:	4b3c      	ldr	r3, [pc, #240]	; (8005314 <xTaskIncrementTick+0x100>)
 8005222:	681c      	ldr	r4, [r3, #0]
 8005224:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8005226:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8005228:	b9cc      	cbnz	r4, 800525e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800522a:	4b3b      	ldr	r3, [pc, #236]	; (8005318 <xTaskIncrementTick+0x104>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	b152      	cbz	r2, 8005248 <xTaskIncrementTick+0x34>
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	b672      	cpsid	i
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	b662      	cpsie	i
 8005246:	e7fe      	b.n	8005246 <xTaskIncrementTick+0x32>
 8005248:	4a34      	ldr	r2, [pc, #208]	; (800531c <xTaskIncrementTick+0x108>)
 800524a:	6819      	ldr	r1, [r3, #0]
 800524c:	6810      	ldr	r0, [r2, #0]
 800524e:	6018      	str	r0, [r3, #0]
 8005250:	6011      	str	r1, [r2, #0]
 8005252:	4a33      	ldr	r2, [pc, #204]	; (8005320 <xTaskIncrementTick+0x10c>)
 8005254:	6813      	ldr	r3, [r2, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	f7ff fe5f 	bl	8004f1c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800525e:	4d31      	ldr	r5, [pc, #196]	; (8005324 <xTaskIncrementTick+0x110>)
 8005260:	f04f 0b00 	mov.w	fp, #0
 8005264:	4f30      	ldr	r7, [pc, #192]	; (8005328 <xTaskIncrementTick+0x114>)
 8005266:	682b      	ldr	r3, [r5, #0]
 8005268:	429c      	cmp	r4, r3
 800526a:	d33e      	bcc.n	80052ea <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800526c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005318 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8005270:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005338 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005274:	f8d8 2000 	ldr.w	r2, [r8]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	bb72      	cbnz	r2, 80052da <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800527c:	f04f 32ff 	mov.w	r2, #4294967295
 8005280:	602a      	str	r2, [r5, #0]
					break;
 8005282:	e032      	b.n	80052ea <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005284:	f106 0a04 	add.w	sl, r6, #4
 8005288:	4650      	mov	r0, sl
 800528a:	f7ff f9d0 	bl	800462e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800528e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8005290:	b119      	cbz	r1, 800529a <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005292:	f106 0018 	add.w	r0, r6, #24
 8005296:	f7ff f9ca 	bl	800462e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800529a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800529c:	2201      	movs	r2, #1
 800529e:	f8d9 3000 	ldr.w	r3, [r9]
 80052a2:	f04f 0e14 	mov.w	lr, #20
 80052a6:	fa02 f100 	lsl.w	r1, r2, r0
 80052aa:	4319      	orrs	r1, r3
 80052ac:	4b1f      	ldr	r3, [pc, #124]	; (800532c <xTaskIncrementTick+0x118>)
 80052ae:	f8c9 1000 	str.w	r1, [r9]
 80052b2:	4651      	mov	r1, sl
 80052b4:	fb0e 3000 	mla	r0, lr, r0, r3
 80052b8:	f7ff f996 	bl	80045e8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052bc:	6838      	ldr	r0, [r7, #0]
 80052be:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80052c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80052c2:	4291      	cmp	r1, r2
 80052c4:	bf28      	it	cs
 80052c6:	f04f 0b01 	movcs.w	fp, #1
 80052ca:	e7d3      	b.n	8005274 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 80052cc:	4a18      	ldr	r2, [pc, #96]	; (8005330 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80052ce:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	e011      	b.n	80052fe <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80052da:	f8d8 2000 	ldr.w	r2, [r8]
 80052de:	68d2      	ldr	r2, [r2, #12]
 80052e0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052e2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80052e4:	428c      	cmp	r4, r1
 80052e6:	d2cd      	bcs.n	8005284 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 80052e8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	4b0f      	ldr	r3, [pc, #60]	; (800532c <xTaskIncrementTick+0x118>)
 80052ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80052f0:	2214      	movs	r2, #20
 80052f2:	434a      	muls	r2, r1
 80052f4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80052f6:	2a02      	cmp	r2, #2
 80052f8:	bf28      	it	cs
 80052fa:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80052fe:	4a0d      	ldr	r2, [pc, #52]	; (8005334 <xTaskIncrementTick+0x120>)
 8005300:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8005302:	2a00      	cmp	r2, #0
 8005304:	bf18      	it	ne
 8005306:	f04f 0b01 	movne.w	fp, #1
}
 800530a:	4658      	mov	r0, fp
 800530c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005310:	20003d34 	.word	0x20003d34
 8005314:	20003db4 	.word	0x20003db4
 8005318:	20003c94 	.word	0x20003c94
 800531c:	20003c98 	.word	0x20003c98
 8005320:	20003d70 	.word	0x20003d70
 8005324:	20003d6c 	.word	0x20003d6c
 8005328:	20003c90 	.word	0x20003c90
 800532c:	20003c9c 	.word	0x20003c9c
 8005330:	20003d30 	.word	0x20003d30
 8005334:	20003db8 	.word	0x20003db8
 8005338:	20003d3c 	.word	0x20003d3c

0800533c <xTaskResumeAll>:
{
 800533c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8005340:	4c32      	ldr	r4, [pc, #200]	; (800540c <xTaskResumeAll+0xd0>)
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	b953      	cbnz	r3, 800535c <xTaskResumeAll+0x20>
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	b672      	cpsid	i
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	b662      	cpsie	i
 800535a:	e7fe      	b.n	800535a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800535c:	f7ff f9d2 	bl	8004704 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	3b01      	subs	r3, #1
 8005364:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005366:	6824      	ldr	r4, [r4, #0]
 8005368:	b12c      	cbz	r4, 8005376 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800536a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800536c:	f7ff f9f0 	bl	8004750 <vPortExitCritical>
}
 8005370:	4620      	mov	r0, r4
 8005372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005376:	4b26      	ldr	r3, [pc, #152]	; (8005410 <xTaskResumeAll+0xd4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f5      	beq.n	800536a <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800537e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005428 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8005382:	4f24      	ldr	r7, [pc, #144]	; (8005414 <xTaskResumeAll+0xd8>)
 8005384:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800542c <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005388:	f8d9 3000 	ldr.w	r3, [r9]
 800538c:	b9e3      	cbnz	r3, 80053c8 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800538e:	b10c      	cbz	r4, 8005394 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8005390:	f7ff fdc4 	bl	8004f1c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005394:	4d20      	ldr	r5, [pc, #128]	; (8005418 <xTaskResumeAll+0xdc>)
 8005396:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005398:	b144      	cbz	r4, 80053ac <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 800539a:	4e20      	ldr	r6, [pc, #128]	; (800541c <xTaskResumeAll+0xe0>)
 800539c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800539e:	f7ff ff39 	bl	8005214 <xTaskIncrementTick>
 80053a2:	b100      	cbz	r0, 80053a6 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 80053a4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80053a6:	3c01      	subs	r4, #1
 80053a8:	d1f9      	bne.n	800539e <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 80053aa:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <xTaskResumeAll+0xe0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0da      	beq.n	800536a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 80053b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <xTaskResumeAll+0xe4>)
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80053c4:	2401      	movs	r4, #1
 80053c6:	e7d1      	b.n	800536c <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80053c8:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80053cc:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80053ce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053d0:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053d2:	f104 0018 	add.w	r0, r4, #24
 80053d6:	f7ff f92a 	bl	800462e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053da:	4630      	mov	r0, r6
 80053dc:	f7ff f927 	bl	800462e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	2014      	movs	r0, #20
 80053e6:	fa05 f302 	lsl.w	r3, r5, r2
 80053ea:	fb00 8002 	mla	r0, r0, r2, r8
 80053ee:	430b      	orrs	r3, r1
 80053f0:	4631      	mov	r1, r6
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	f7ff f8f8 	bl	80045e8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <xTaskResumeAll+0xe8>)
 80053fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	429a      	cmp	r2, r3
 8005402:	d3c1      	bcc.n	8005388 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <xTaskResumeAll+0xe0>)
 8005406:	601d      	str	r5, [r3, #0]
 8005408:	e7be      	b.n	8005388 <xTaskResumeAll+0x4c>
 800540a:	bf00      	nop
 800540c:	20003d34 	.word	0x20003d34
 8005410:	20003d28 	.word	0x20003d28
 8005414:	20003d3c 	.word	0x20003d3c
 8005418:	20003d30 	.word	0x20003d30
 800541c:	20003db8 	.word	0x20003db8
 8005420:	e000ed04 	.word	0xe000ed04
 8005424:	20003c90 	.word	0x20003c90
 8005428:	20003d74 	.word	0x20003d74
 800542c:	20003c9c 	.word	0x20003c9c

08005430 <vTaskDelay>:
	{
 8005430:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005432:	b940      	cbnz	r0, 8005446 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8005434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005438:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <vTaskDelay+0x44>)
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <vTaskDelay+0x48>)
 8005448:	6819      	ldr	r1, [r3, #0]
 800544a:	b151      	cbz	r1, 8005462 <vTaskDelay+0x32>
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	b672      	cpsid	i
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	b662      	cpsie	i
 8005460:	e7fe      	b.n	8005460 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8005462:	f7ff fecf 	bl	8005204 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005466:	f7ff fd6b 	bl	8004f40 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800546a:	f7ff ff67 	bl	800533c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800546e:	2800      	cmp	r0, #0
 8005470:	d0e0      	beq.n	8005434 <vTaskDelay+0x4>
 8005472:	bd08      	pop	{r3, pc}
 8005474:	e000ed04 	.word	0xe000ed04
 8005478:	20003d34 	.word	0x20003d34

0800547c <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800547c:	4e17      	ldr	r6, [pc, #92]	; (80054dc <prvIdleTask+0x60>)
{
 800547e:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005480:	4c17      	ldr	r4, [pc, #92]	; (80054e0 <prvIdleTask+0x64>)
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	b963      	cbnz	r3, 80054a0 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005486:	4b17      	ldr	r3, [pc, #92]	; (80054e4 <prvIdleTask+0x68>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d9f8      	bls.n	8005480 <prvIdleTask+0x4>
				taskYIELD();
 800548e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <prvIdleTask+0x6c>)
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	e7ef      	b.n	8005480 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80054a0:	f7ff feb0 	bl	8005204 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80054a4:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80054a6:	f7ff ff49 	bl	800533c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80054aa:	2d00      	cmp	r5, #0
 80054ac:	d0e9      	beq.n	8005482 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80054ae:	f7ff f929 	bl	8004704 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80054b2:	68f3      	ldr	r3, [r6, #12]
 80054b4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054b6:	1d28      	adds	r0, r5, #4
 80054b8:	f7ff f8b9 	bl	800462e <uxListRemove>
					--uxCurrentNumberOfTasks;
 80054bc:	4a0b      	ldr	r2, [pc, #44]	; (80054ec <prvIdleTask+0x70>)
 80054be:	6813      	ldr	r3, [r2, #0]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80054ca:	f7ff f941 	bl	8004750 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80054ce:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80054d0:	f7ff f840 	bl	8004554 <vPortFree>
			vPortFree( pxTCB );
 80054d4:	4628      	mov	r0, r5
 80054d6:	f7ff f83d 	bl	8004554 <vPortFree>
 80054da:	e7d2      	b.n	8005482 <prvIdleTask+0x6>
 80054dc:	20003da0 	.word	0x20003da0
 80054e0:	20003d2c 	.word	0x20003d2c
 80054e4:	20003c9c 	.word	0x20003c9c
 80054e8:	e000ed04 	.word	0xe000ed04
 80054ec:	20003d28 	.word	0x20003d28

080054f0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054f0:	4b18      	ldr	r3, [pc, #96]	; (8005554 <vTaskSwitchContext+0x64>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b18      	ldr	r3, [pc, #96]	; (8005558 <vTaskSwitchContext+0x68>)
{
 80054f6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054f8:	b112      	cbz	r2, 8005500 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80054fa:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8005500:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005502:	4b16      	ldr	r3, [pc, #88]	; (800555c <vTaskSwitchContext+0x6c>)
 8005504:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8005506:	fab3 f383 	clz	r3, r3
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2214      	movs	r2, #20
 800550e:	4914      	ldr	r1, [pc, #80]	; (8005560 <vTaskSwitchContext+0x70>)
 8005510:	f1c3 031f 	rsb	r3, r3, #31
 8005514:	435a      	muls	r2, r3
 8005516:	588c      	ldr	r4, [r1, r2]
 8005518:	1888      	adds	r0, r1, r2
 800551a:	b954      	cbnz	r4, 8005532 <vTaskSwitchContext+0x42>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	b672      	cpsid	i
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	b662      	cpsie	i
 8005530:	e7fe      	b.n	8005530 <vTaskSwitchContext+0x40>
 8005532:	6844      	ldr	r4, [r0, #4]
 8005534:	3208      	adds	r2, #8
 8005536:	6864      	ldr	r4, [r4, #4]
 8005538:	440a      	add	r2, r1
 800553a:	4294      	cmp	r4, r2
 800553c:	6044      	str	r4, [r0, #4]
 800553e:	bf04      	itt	eq
 8005540:	6862      	ldreq	r2, [r4, #4]
 8005542:	6042      	streq	r2, [r0, #4]
 8005544:	2214      	movs	r2, #20
 8005546:	fb02 1303 	mla	r3, r2, r3, r1
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	4b05      	ldr	r3, [pc, #20]	; (8005564 <vTaskSwitchContext+0x74>)
 8005550:	e7d4      	b.n	80054fc <vTaskSwitchContext+0xc>
 8005552:	bf00      	nop
 8005554:	20003d34 	.word	0x20003d34
 8005558:	20003db8 	.word	0x20003db8
 800555c:	20003d3c 	.word	0x20003d3c
 8005560:	20003c9c 	.word	0x20003c9c
 8005564:	20003c90 	.word	0x20003c90

08005568 <vTaskPlaceOnEventList>:
{
 8005568:	b510      	push	{r4, lr}
 800556a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800556c:	b950      	cbnz	r0, 8005584 <vTaskPlaceOnEventList+0x1c>
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	b672      	cpsid	i
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	b662      	cpsie	i
 8005582:	e7fe      	b.n	8005582 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <vTaskPlaceOnEventList+0x34>)
 8005586:	6819      	ldr	r1, [r3, #0]
 8005588:	3118      	adds	r1, #24
 800558a:	f7ff f839 	bl	8004600 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800558e:	4620      	mov	r0, r4
 8005590:	2101      	movs	r1, #1
}
 8005592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005596:	f7ff bcd3 	b.w	8004f40 <prvAddCurrentTaskToDelayedList>
 800559a:	bf00      	nop
 800559c:	20003c90 	.word	0x20003c90

080055a0 <xTaskRemoveFromEventList>:
{
 80055a0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80055a2:	68c3      	ldr	r3, [r0, #12]
 80055a4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80055a6:	b954      	cbnz	r4, 80055be <xTaskRemoveFromEventList+0x1e>
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	b672      	cpsid	i
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	b662      	cpsie	i
 80055bc:	e7fe      	b.n	80055bc <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055be:	f104 0518 	add.w	r5, r4, #24
 80055c2:	4628      	mov	r0, r5
 80055c4:	f7ff f833 	bl	800462e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055c8:	4b11      	ldr	r3, [pc, #68]	; (8005610 <xTaskRemoveFromEventList+0x70>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	b9db      	cbnz	r3, 8005606 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055ce:	1d25      	adds	r5, r4, #4
 80055d0:	4628      	mov	r0, r5
 80055d2:	f7ff f82c 	bl	800462e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055d6:	490f      	ldr	r1, [pc, #60]	; (8005614 <xTaskRemoveFromEventList+0x74>)
 80055d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80055da:	2301      	movs	r3, #1
 80055dc:	6808      	ldr	r0, [r1, #0]
 80055de:	4093      	lsls	r3, r2
 80055e0:	4303      	orrs	r3, r0
 80055e2:	2014      	movs	r0, #20
 80055e4:	600b      	str	r3, [r1, #0]
 80055e6:	4629      	mov	r1, r5
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <xTaskRemoveFromEventList+0x78>)
 80055ea:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055ee:	f7fe fffb 	bl	80045e8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <xTaskRemoveFromEventList+0x7c>)
 80055f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d906      	bls.n	800560c <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 80055fe:	2001      	movs	r0, #1
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <xTaskRemoveFromEventList+0x80>)
 8005602:	6018      	str	r0, [r3, #0]
 8005604:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005606:	4629      	mov	r1, r5
 8005608:	4806      	ldr	r0, [pc, #24]	; (8005624 <xTaskRemoveFromEventList+0x84>)
 800560a:	e7f0      	b.n	80055ee <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800560c:	2000      	movs	r0, #0
}
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20003d34 	.word	0x20003d34
 8005614:	20003d3c 	.word	0x20003d3c
 8005618:	20003c9c 	.word	0x20003c9c
 800561c:	20003c90 	.word	0x20003c90
 8005620:	20003db8 	.word	0x20003db8
 8005624:	20003d74 	.word	0x20003d74

08005628 <vTaskSetTimeOutState>:
{
 8005628:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800562a:	b908      	cbnz	r0, 8005630 <vTaskSetTimeOutState+0x8>
 800562c:	f7ff fcce 	bl	8004fcc <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <vTaskSetTimeOutState+0x18>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005636:	4b03      	ldr	r3, [pc, #12]	; (8005644 <vTaskSetTimeOutState+0x1c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6043      	str	r3, [r0, #4]
 800563c:	bd08      	pop	{r3, pc}
 800563e:	bf00      	nop
 8005640:	20003d70 	.word	0x20003d70
 8005644:	20003db4 	.word	0x20003db4

08005648 <xTaskCheckForTimeOut>:
{
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 800564c:	4604      	mov	r4, r0
 800564e:	b950      	cbnz	r0, 8005666 <xTaskCheckForTimeOut+0x1e>
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	b672      	cpsid	i
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	b662      	cpsie	i
 8005664:	e7fe      	b.n	8005664 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8005666:	b951      	cbnz	r1, 800567e <xTaskCheckForTimeOut+0x36>
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	b672      	cpsid	i
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	b662      	cpsie	i
 800567c:	e7fe      	b.n	800567c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800567e:	f7ff f841 	bl	8004704 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005682:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <xTaskCheckForTimeOut+0x74>)
 8005684:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005686:	682b      	ldr	r3, [r5, #0]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	d010      	beq.n	80056ae <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800568c:	4a0c      	ldr	r2, [pc, #48]	; (80056c0 <xTaskCheckForTimeOut+0x78>)
 800568e:	6820      	ldr	r0, [r4, #0]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	4290      	cmp	r0, r2
 8005694:	6862      	ldr	r2, [r4, #4]
 8005696:	d001      	beq.n	800569c <xTaskCheckForTimeOut+0x54>
 8005698:	4291      	cmp	r1, r2
 800569a:	d20d      	bcs.n	80056b8 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800569c:	1a88      	subs	r0, r1, r2
 800569e:	4283      	cmp	r3, r0
 80056a0:	d90a      	bls.n	80056b8 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80056a2:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 80056a4:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80056a6:	4413      	add	r3, r2
 80056a8:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80056aa:	f7ff ffbd 	bl	8005628 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80056ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80056b0:	f7ff f84e 	bl	8004750 <vPortExitCritical>
}
 80056b4:	4620      	mov	r0, r4
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80056b8:	2401      	movs	r4, #1
 80056ba:	e7f9      	b.n	80056b0 <xTaskCheckForTimeOut+0x68>
 80056bc:	20003db4 	.word	0x20003db4
 80056c0:	20003d70 	.word	0x20003d70

080056c4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80056c4:	2201      	movs	r2, #1
 80056c6:	4b01      	ldr	r3, [pc, #4]	; (80056cc <vTaskMissedYield+0x8>)
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	4770      	bx	lr
 80056cc:	20003db8 	.word	0x20003db8

080056d0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <xTaskGetSchedulerState+0x18>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	b133      	cbz	r3, 80056e4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d6:	4b05      	ldr	r3, [pc, #20]	; (80056ec <xTaskGetSchedulerState+0x1c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80056dc:	bf0c      	ite	eq
 80056de:	2002      	moveq	r0, #2
 80056e0:	2000      	movne	r0, #0
 80056e2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056e4:	2001      	movs	r0, #1
	}
 80056e6:	4770      	bx	lr
 80056e8:	20003d88 	.word	0x20003d88
 80056ec:	20003d34 	.word	0x20003d34

080056f0 <vTaskPriorityInherit>:
	{
 80056f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80056f4:	4604      	mov	r4, r0
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d038      	beq.n	800576c <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80056fa:	4d1d      	ldr	r5, [pc, #116]	; (8005770 <vTaskPriorityInherit+0x80>)
 80056fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056fe:	682a      	ldr	r2, [r5, #0]
 8005700:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005702:	4293      	cmp	r3, r2
 8005704:	d232      	bcs.n	800576c <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005706:	6982      	ldr	r2, [r0, #24]
 8005708:	2a00      	cmp	r2, #0
 800570a:	db04      	blt.n	8005716 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800570c:	682a      	ldr	r2, [r5, #0]
 800570e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005710:	f1c2 0207 	rsb	r2, r2, #7
 8005714:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005716:	4e17      	ldr	r6, [pc, #92]	; (8005774 <vTaskPriorityInherit+0x84>)
 8005718:	2714      	movs	r7, #20
 800571a:	6962      	ldr	r2, [r4, #20]
 800571c:	fb07 6303 	mla	r3, r7, r3, r6
 8005720:	429a      	cmp	r2, r3
 8005722:	d120      	bne.n	8005766 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005724:	f104 0804 	add.w	r8, r4, #4
 8005728:	4640      	mov	r0, r8
 800572a:	f7fe ff80 	bl	800462e <uxListRemove>
 800572e:	4a12      	ldr	r2, [pc, #72]	; (8005778 <vTaskPriorityInherit+0x88>)
 8005730:	b948      	cbnz	r0, 8005746 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005732:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005734:	4347      	muls	r7, r0
 8005736:	59f3      	ldr	r3, [r6, r7]
 8005738:	b92b      	cbnz	r3, 8005746 <vTaskPriorityInherit+0x56>
 800573a:	2101      	movs	r1, #1
 800573c:	6813      	ldr	r3, [r2, #0]
 800573e:	4081      	lsls	r1, r0
 8005740:	ea23 0301 	bic.w	r3, r3, r1
 8005744:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005746:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8005748:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800574a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800574c:	2301      	movs	r3, #1
 800574e:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005750:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005752:	430b      	orrs	r3, r1
 8005754:	4641      	mov	r1, r8
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	2314      	movs	r3, #20
 800575a:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800575e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8005762:	f7fe bf41 	b.w	80045e8 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005766:	682b      	ldr	r3, [r5, #0]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005770:	20003c90 	.word	0x20003c90
 8005774:	20003c9c 	.word	0x20003c9c
 8005778:	20003d3c 	.word	0x20003d3c

0800577c <xTaskPriorityDisinherit>:
	{
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800577e:	4604      	mov	r4, r0
 8005780:	b908      	cbnz	r0, 8005786 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8005782:	2000      	movs	r0, #0
 8005784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <xTaskPriorityDisinherit+0x9c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4298      	cmp	r0, r3
 800578c:	d00a      	beq.n	80057a4 <xTaskPriorityDisinherit+0x28>
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	b672      	cpsid	i
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	b662      	cpsie	i
 80057a2:	e7fe      	b.n	80057a2 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 80057a4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80057a6:	b953      	cbnz	r3, 80057be <xTaskPriorityDisinherit+0x42>
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	b672      	cpsid	i
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	b662      	cpsie	i
 80057bc:	e7fe      	b.n	80057bc <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057be:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80057c0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80057c4:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057c6:	4291      	cmp	r1, r2
 80057c8:	d0db      	beq.n	8005782 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1d9      	bne.n	8005782 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ce:	1d05      	adds	r5, r0, #4
 80057d0:	4e12      	ldr	r6, [pc, #72]	; (800581c <xTaskPriorityDisinherit+0xa0>)
 80057d2:	4628      	mov	r0, r5
 80057d4:	f7fe ff2b 	bl	800462e <uxListRemove>
 80057d8:	4a11      	ldr	r2, [pc, #68]	; (8005820 <xTaskPriorityDisinherit+0xa4>)
 80057da:	b950      	cbnz	r0, 80057f2 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80057dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80057de:	2114      	movs	r1, #20
 80057e0:	4379      	muls	r1, r7
 80057e2:	5873      	ldr	r3, [r6, r1]
 80057e4:	b92b      	cbnz	r3, 80057f2 <xTaskPriorityDisinherit+0x76>
 80057e6:	2001      	movs	r0, #1
 80057e8:	6813      	ldr	r3, [r2, #0]
 80057ea:	40b8      	lsls	r0, r7
 80057ec:	ea23 0300 	bic.w	r3, r3, r0
 80057f0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f4:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057f8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057fa:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80057fc:	2401      	movs	r4, #1
 80057fe:	6811      	ldr	r1, [r2, #0]
 8005800:	fa04 f003 	lsl.w	r0, r4, r3
 8005804:	4308      	orrs	r0, r1
 8005806:	4629      	mov	r1, r5
 8005808:	6010      	str	r0, [r2, #0]
 800580a:	2014      	movs	r0, #20
 800580c:	fb00 6003 	mla	r0, r0, r3, r6
 8005810:	f7fe feea 	bl	80045e8 <vListInsertEnd>
					xReturn = pdTRUE;
 8005814:	4620      	mov	r0, r4
	}
 8005816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005818:	20003c90 	.word	0x20003c90
 800581c:	20003c9c 	.word	0x20003c9c
 8005820:	20003d3c 	.word	0x20003d3c

08005824 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <pvTaskIncrementMutexHeldCount+0x14>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	b11a      	cbz	r2, 8005832 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800582e:	3201      	adds	r2, #1
 8005830:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8005832:	6818      	ldr	r0, [r3, #0]
	}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	20003c90 	.word	0x20003c90

0800583c <__libc_init_array>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4e0d      	ldr	r6, [pc, #52]	; (8005874 <__libc_init_array+0x38>)
 8005840:	4c0d      	ldr	r4, [pc, #52]	; (8005878 <__libc_init_array+0x3c>)
 8005842:	1ba4      	subs	r4, r4, r6
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	2500      	movs	r5, #0
 8005848:	42a5      	cmp	r5, r4
 800584a:	d109      	bne.n	8005860 <__libc_init_array+0x24>
 800584c:	4e0b      	ldr	r6, [pc, #44]	; (800587c <__libc_init_array+0x40>)
 800584e:	4c0c      	ldr	r4, [pc, #48]	; (8005880 <__libc_init_array+0x44>)
 8005850:	f000 f82c 	bl	80058ac <_init>
 8005854:	1ba4      	subs	r4, r4, r6
 8005856:	10a4      	asrs	r4, r4, #2
 8005858:	2500      	movs	r5, #0
 800585a:	42a5      	cmp	r5, r4
 800585c:	d105      	bne.n	800586a <__libc_init_array+0x2e>
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005864:	4798      	blx	r3
 8005866:	3501      	adds	r5, #1
 8005868:	e7ee      	b.n	8005848 <__libc_init_array+0xc>
 800586a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800586e:	4798      	blx	r3
 8005870:	3501      	adds	r5, #1
 8005872:	e7f2      	b.n	800585a <__libc_init_array+0x1e>
 8005874:	08005ac4 	.word	0x08005ac4
 8005878:	08005ac4 	.word	0x08005ac4
 800587c:	08005ac4 	.word	0x08005ac4
 8005880:	08005ac8 	.word	0x08005ac8

08005884 <memcpy>:
 8005884:	b510      	push	{r4, lr}
 8005886:	1e43      	subs	r3, r0, #1
 8005888:	440a      	add	r2, r1
 800588a:	4291      	cmp	r1, r2
 800588c:	d100      	bne.n	8005890 <memcpy+0xc>
 800588e:	bd10      	pop	{r4, pc}
 8005890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005898:	e7f7      	b.n	800588a <memcpy+0x6>

0800589a <memset>:
 800589a:	4402      	add	r2, r0
 800589c:	4603      	mov	r3, r0
 800589e:	4293      	cmp	r3, r2
 80058a0:	d100      	bne.n	80058a4 <memset+0xa>
 80058a2:	4770      	bx	lr
 80058a4:	f803 1b01 	strb.w	r1, [r3], #1
 80058a8:	e7f9      	b.n	800589e <memset+0x4>
	...

080058ac <_init>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	bf00      	nop
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr

080058b8 <_fini>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	bf00      	nop
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr
