
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  0800538c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000476c  20000008  08005394  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004774  08005394  00024774  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000f7bc  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003cb40  00000000  00000000  0002f7f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006ed3  00000000  00000000  0006c332  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001918  00000000  00000000  00073208  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001fd8  00000000  00000000  00074b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001326a  00000000  00000000  00076af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00009432  00000000  00000000  00089d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00093194  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004a4c  00000000  00000000  00093210  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000008 	.word	0x20000008
 800021c:	00000000 	.word	0x00000000
 8000220:	08005194 	.word	0x08005194

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000000c 	.word	0x2000000c
 800023c:	08005194 	.word	0x08005194

08000240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
  ldr  r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800025e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800026a:	f001 f9cf 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f004 ff59 	bl	8005124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000272:	f000 fda1 	bl	8000db8 <main>
  bx  lr    
 8000276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000278:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800027c:	0800538c 	.word	0x0800538c
  ldr  r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000284:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000288:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800028c:	20004774 	.word	0x20004774

08000290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC_IRQHandler>
	...

08000294 <HAL_UART_ErrorCallback>:
}enchall;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	//error...
	_Error_Handler("omg",11);
 8000294:	210b      	movs	r1, #11
 8000296:	4801      	ldr	r0, [pc, #4]	; (800029c <HAL_UART_ErrorCallback+0x8>)
 8000298:	f000 bdf8 	b.w	8000e8c <_Error_Handler>
 800029c:	08005278 	.word	0x08005278

080002a0 <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance==huart4.Instance) //not necessary to check..
 80002a0:	4b44      	ldr	r3, [pc, #272]	; (80003b4 <HAL_UART_RxCpltCallback+0x114>)
 80002a2:	6802      	ldr	r2, [r0, #0]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
{
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	b087      	sub	sp, #28
	if(huart->Instance==huart4.Instance) //not necessary to check..
 80002ae:	d17d      	bne.n	80003ac <HAL_UART_RxCpltCallback+0x10c>
 80002b0:	4b41      	ldr	r3, [pc, #260]	; (80003b8 <HAL_UART_RxCpltCallback+0x118>)
 80002b2:	2101      	movs	r1, #1
	{
		for(int i=0; i<5; i++)
		{
			if(enchall_buff[i] == TXHEADER)
 80002b4:	4c41      	ldr	r4, [pc, #260]	; (80003bc <HAL_UART_RxCpltCallback+0x11c>)
 80002b6:	78da      	ldrb	r2, [r3, #3]
 80002b8:	f893 8000 	ldrb.w	r8, [r3]
 80002bc:	46a2      	mov	sl, r4
 80002be:	f893 e001 	ldrb.w	lr, [r3, #1]
 80002c2:	789e      	ldrb	r6, [r3, #2]
 80002c4:	9201      	str	r2, [sp, #4]
 80002c6:	f893 9005 	ldrb.w	r9, [r3, #5]
 80002ca:	791a      	ldrb	r2, [r3, #4]
 80002cc:	f893 c006 	ldrb.w	ip, [r3, #6]
	if(huart->Instance==huart4.Instance) //not necessary to check..
 80002d0:	2300      	movs	r3, #0
 80002d2:	9203      	str	r2, [sp, #12]
 80002d4:	461d      	mov	r5, r3
 80002d6:	461f      	mov	r7, r3
 80002d8:	9305      	str	r3, [sp, #20]
 80002da:	9304      	str	r3, [sp, #16]
 80002dc:	9302      	str	r3, [sp, #8]
 80002de:	9300      	str	r3, [sp, #0]
			if(enchall_buff[i] == TXHEADER)
 80002e0:	190a      	adds	r2, r1, r4
 80002e2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80002e6:	2af8      	cmp	r2, #248	; 0xf8
 80002e8:	d136      	bne.n	8000358 <HAL_UART_RxCpltCallback+0xb8>
			{
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002ea:	2905      	cmp	r1, #5
 80002ec:	d005      	beq.n	80002fa <HAL_UART_RxCpltCallback+0x5a>
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002ee:	2904      	cmp	r1, #4
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002f0:	b2c8      	uxtb	r0, r1
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002f2:	d103      	bne.n	80002fc <HAL_UART_RxCpltCallback+0x5c>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002f4:	4608      	mov	r0, r1
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002f6:	2200      	movs	r2, #0
 80002f8:	e002      	b.n	8000300 <HAL_UART_RxCpltCallback+0x60>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002fa:	2000      	movs	r0, #0
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002fc:	1c42      	adds	r2, r0, #1
 80002fe:	b2d2      	uxtb	r2, r2
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 8000300:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8000304:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000308:	d026      	beq.n	8000358 <HAL_UART_RxCpltCallback+0xb8>
 800030a:	f81a b002 	ldrb.w	fp, [sl, r2]
 800030e:	f01b 0f60 	tst.w	fp, #96	; 0x60
 8000312:	d021      	beq.n	8000358 <HAL_UART_RxCpltCallback+0xb8>
				{
					//then we can obtain the correct bytes...
					enchall.mseq_out = enchall_buff[s]&0x01;
					enchall.auxbit_in = enchall_buff[s]&0x02;
					enchall.hole_in = enchall_buff[s]&0x1c; //0001|1100
					enchall.calc_tag = enchall_buff[s]&0x60; // 0110|0000
 8000314:	f000 0360 	and.w	r3, r0, #96	; 0x60
					//next byte
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
					//next two bytes
					uint8_t b1 = t==4?0:t+1;
 8000318:	2a04      	cmp	r2, #4
					enchall.mseq_out = enchall_buff[s]&0x01;
 800031a:	f000 0801 	and.w	r8, r0, #1
					enchall.auxbit_in = enchall_buff[s]&0x02;
 800031e:	f000 0e02 	and.w	lr, r0, #2
					enchall.calc_tag = enchall_buff[s]&0x60; // 0110|0000
 8000322:	9301      	str	r3, [sp, #4]
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 8000324:	f00b 031f 	and.w	r3, fp, #31
					enchall.hole_in = enchall_buff[s]&0x1c; //0001|1100
 8000328:	f000 061c 	and.w	r6, r0, #28
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 800032c:	9303      	str	r3, [sp, #12]
					uint8_t b1 = t==4?0:t+1;
 800032e:	d005      	beq.n	800033c <HAL_UART_RxCpltCallback+0x9c>
 8000330:	3201      	adds	r2, #1
 8000332:	b2d2      	uxtb	r2, r2
					uint8_t b2 = b1==4?0:b1+1;
 8000334:	2a04      	cmp	r2, #4
 8000336:	d102      	bne.n	800033e <HAL_UART_RxCpltCallback+0x9e>
 8000338:	2300      	movs	r3, #0
 800033a:	e002      	b.n	8000342 <HAL_UART_RxCpltCallback+0xa2>
					uint8_t b1 = t==4?0:t+1;
 800033c:	2200      	movs	r2, #0
					uint8_t b2 = b1==4?0:b1+1;
 800033e:	1c53      	adds	r3, r2, #1
 8000340:	b2db      	uxtb	r3, r3
					enchall.enc_high = enchall_buff[b1]&0xff;
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000342:	f814 c003 	ldrb.w	ip, [r4, r3]
 8000346:	2301      	movs	r3, #1
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000348:	f814 9002 	ldrb.w	r9, [r4, r2]
					enchall.enc_low = enchall_buff[b2]&0xff;
 800034c:	461d      	mov	r5, r3
 800034e:	461f      	mov	r7, r3
 8000350:	9305      	str	r3, [sp, #20]
 8000352:	9304      	str	r3, [sp, #16]
 8000354:	9302      	str	r3, [sp, #8]
 8000356:	9300      	str	r3, [sp, #0]
 8000358:	3101      	adds	r1, #1
		for(int i=0; i<5; i++)
 800035a:	2906      	cmp	r1, #6
 800035c:	d1c0      	bne.n	80002e0 <HAL_UART_RxCpltCallback+0x40>
 800035e:	9a00      	ldr	r2, [sp, #0]
 8000360:	b112      	cbz	r2, 8000368 <HAL_UART_RxCpltCallback+0xc8>
 8000362:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <HAL_UART_RxCpltCallback+0x118>)
 8000364:	f882 8000 	strb.w	r8, [r2]
 8000368:	9a02      	ldr	r2, [sp, #8]
 800036a:	b112      	cbz	r2, 8000372 <HAL_UART_RxCpltCallback+0xd2>
 800036c:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <HAL_UART_RxCpltCallback+0x118>)
 800036e:	f882 e001 	strb.w	lr, [r2, #1]
 8000372:	b10f      	cbz	r7, 8000378 <HAL_UART_RxCpltCallback+0xd8>
 8000374:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <HAL_UART_RxCpltCallback+0x118>)
 8000376:	7096      	strb	r6, [r2, #2]
 8000378:	b11d      	cbz	r5, 8000382 <HAL_UART_RxCpltCallback+0xe2>
 800037a:	4a0f      	ldr	r2, [pc, #60]	; (80003b8 <HAL_UART_RxCpltCallback+0x118>)
 800037c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000380:	70d1      	strb	r1, [r2, #3]
 8000382:	9a04      	ldr	r2, [sp, #16]
 8000384:	b11a      	cbz	r2, 800038e <HAL_UART_RxCpltCallback+0xee>
 8000386:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <HAL_UART_RxCpltCallback+0x118>)
 8000388:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800038c:	7111      	strb	r1, [r2, #4]
 800038e:	9a05      	ldr	r2, [sp, #20]
 8000390:	b112      	cbz	r2, 8000398 <HAL_UART_RxCpltCallback+0xf8>
 8000392:	4a09      	ldr	r2, [pc, #36]	; (80003b8 <HAL_UART_RxCpltCallback+0x118>)
 8000394:	f882 9005 	strb.w	r9, [r2, #5]
 8000398:	b113      	cbz	r3, 80003a0 <HAL_UART_RxCpltCallback+0x100>
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <HAL_UART_RxCpltCallback+0x118>)
 800039c:	f883 c006 	strb.w	ip, [r3, #6]
				}
			}
		}
		//continue DMA
		HAL_UART_DMAResume(&huart4);
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <HAL_UART_RxCpltCallback+0x114>)
	}
}
 80003a2:	b007      	add	sp, #28
 80003a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_UART_DMAResume(&huart4);
 80003a8:	f003 b908 	b.w	80035bc <HAL_UART_DMAResume>
}
 80003ac:	b007      	add	sp, #28
 80003ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003b2:	bf00      	nop
 80003b4:	20004300 	.word	0x20004300
 80003b8:	20003da1 	.word	0x20003da1
 80003bc:	20003d9c 	.word	0x20003d9c

080003c0 <StartledblueTask>:
/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 80003c0:	4c05      	ldr	r4, [pc, #20]	; (80003d8 <StartledblueTask+0x18>)
{
 80003c2:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 80003c4:	4620      	mov	r0, r4
 80003c6:	2104      	movs	r1, #4
 80003c8:	f001 fd9b 	bl	8001f02 <HAL_GPIO_TogglePin>
		osDelay(500);
 80003cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d0:	f003 fcfb 	bl	8003dca <osDelay>
 80003d4:	e7f6      	b.n	80003c4 <StartledblueTask+0x4>
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <StartledgreenTask>:
/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 80003dc:	4c05      	ldr	r4, [pc, #20]	; (80003f4 <StartledgreenTask+0x18>)
{
 80003de:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 80003e0:	4620      	mov	r0, r4
 80003e2:	2108      	movs	r1, #8
 80003e4:	f001 fd8d 	bl	8001f02 <HAL_GPIO_TogglePin>
		osDelay(1000);
 80003e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ec:	f003 fced 	bl	8003dca <osDelay>
 80003f0:	e7f6      	b.n	80003e0 <StartledgreenTask+0x4>
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000

080003f8 <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 80003f8:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 80003fa:	2032      	movs	r0, #50	; 0x32
 80003fc:	f003 fce5 	bl	8003dca <osDelay>
 8000400:	e7fb      	b.n	80003fa <StartiwdgTask+0x2>
	...

08000404 <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000408:	f240 36f3 	movw	r6, #1011	; 0x3f3
 800040c:	22c8      	movs	r2, #200	; 0xc8
 800040e:	2100      	movs	r1, #0
 8000410:	a802      	add	r0, sp, #8
 8000412:	f240 35f5 	movw	r5, #1013	; 0x3f5
 8000416:	f004 feb4 	bl	8005182 <memset>
 800041a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800041e:	f240 76db 	movw	r6, #2011	; 0x7db
 8000422:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8000426:	f240 72df 	movw	r2, #2015	; 0x7df
 800042a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800042e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8000432:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
 8000436:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800043a:	f240 34f7 	movw	r4, #1015	; 0x3f7
 800043e:	f8ad 100a 	strh.w	r1, [sp, #10]
 8000442:	f240 77dc 	movw	r7, #2012	; 0x7dc
 8000446:	f8ad 200c 	strh.w	r2, [sp, #12]
 800044a:	f8ad 2012 	strh.w	r2, [sp, #18]
 800044e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8000452:	f8ad 1018 	strh.w	r1, [sp, #24]
 8000456:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800045a:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800045e:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8000462:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8000466:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800046a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 800046e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000472:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 8000476:	f240 71e5 	movw	r1, #2021	; 0x7e5
 800047a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800047e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8000482:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8000486:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 800048a:	f240 70e6 	movw	r0, #2022	; 0x7e6
 800048e:	f8ad 5008 	strh.w	r5, [sp, #8]
 8000492:	f8ad 300e 	strh.w	r3, [sp, #14]
 8000496:	f8ad 4010 	strh.w	r4, [sp, #16]
 800049a:	f8ad 5016 	strh.w	r5, [sp, #22]
 800049e:	f8ad 301c 	strh.w	r3, [sp, #28]
 80004a2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80004a6:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 80004aa:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 80004ae:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
 80004b2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 80004b6:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 80004ba:	f8ad 701a 	strh.w	r7, [sp, #26]
 80004be:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 80004c2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80004c6:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 80004ca:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 80004ce:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80004d2:	f240 33ff 	movw	r3, #1023	; 0x3ff
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
	for(;;)
	{
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 80004d6:	4c29      	ldr	r4, [pc, #164]	; (800057c <StartbuzzerrythmTask+0x178>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 80004d8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80004dc:	f240 73e7 	movw	r3, #2023	; 0x7e7
 80004e0:	4625      	mov	r5, r4
		{
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 80004e2:	4e27      	ldr	r6, [pc, #156]	; (8000580 <StartbuzzerrythmTask+0x17c>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 80004e4:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 80004e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004ec:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80004f0:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 80004f4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80004f8:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 80004fc:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 8000500:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8000504:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000508:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 800050c:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 8000510:	f44f 637b 	mov.w	r3, #4016	; 0xfb0
 8000514:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8000518:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	volatile uint16_t i = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	f8ad 3006 	strh.w	r3, [sp, #6]
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000522:	2300      	movs	r3, #0
 8000524:	6820      	ldr	r0, [r4, #0]
 8000526:	461a      	mov	r2, r3
 8000528:	4619      	mov	r1, r3
 800052a:	f004 f8a1 	bl	8004670 <xQueueGenericReceive>
 800052e:	2801      	cmp	r0, #1
 8000530:	d11d      	bne.n	800056e <StartbuzzerrythmTask+0x16a>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 8000532:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8000536:	2300      	movs	r3, #0
 8000538:	a802      	add	r0, sp, #8
 800053a:	b289      	uxth	r1, r1
 800053c:	461a      	mov	r2, r3
 800053e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8000542:	6830      	ldr	r0, [r6, #0]
 8000544:	f003 ffc4 	bl	80044d0 <xQueueGenericSend>
 8000548:	2801      	cmp	r0, #1
 800054a:	d10a      	bne.n	8000562 <StartbuzzerrythmTask+0x15e>
			{
				i=i==SONGLENGTH-1?0:i+1;
 800054c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000550:	b29b      	uxth	r3, r3
 8000552:	2b31      	cmp	r3, #49	; 0x31
 8000554:	d00f      	beq.n	8000576 <StartbuzzerrythmTask+0x172>
 8000556:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800055a:	3301      	adds	r3, #1
 800055c:	b29b      	uxth	r3, r3
 800055e:	f8ad 3006 	strh.w	r3, [sp, #6]
			}
			xSemaphoreGive(buzzerMutexHandle);
 8000562:	2300      	movs	r3, #0
 8000564:	6828      	ldr	r0, [r5, #0]
 8000566:	461a      	mov	r2, r3
 8000568:	4619      	mov	r1, r3
 800056a:	f003 ffb1 	bl	80044d0 <xQueueGenericSend>
		}
		osDelay(10);
 800056e:	200a      	movs	r0, #10
 8000570:	f003 fc2b 	bl	8003dca <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000574:	e7d5      	b.n	8000522 <StartbuzzerrythmTask+0x11e>
				i=i==SONGLENGTH-1?0:i+1;
 8000576:	2300      	movs	r3, #0
 8000578:	e7f1      	b.n	800055e <StartbuzzerrythmTask+0x15a>
 800057a:	bf00      	nop
 800057c:	20003fcc 	.word	0x20003fcc
 8000580:	20003fc0 	.word	0x20003fc0
 8000584:	00000000 	.word	0x00000000

08000588 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 8000588:	b570      	push	{r4, r5, r6, lr}
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800058a:	4c4b      	ldr	r4, [pc, #300]	; (80006b8 <StartbuzzertoneTask+0x130>)
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 800058c:	2600      	movs	r6, #0
{
 800058e:	ed2d 8b02 	vpush	{d8}
 8000592:	b090      	sub	sp, #64	; 0x40
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000596:	ad09      	add	r5, sp, #36	; 0x24
	volatile float tonefreq = 0, time = 0;;
 8000598:	9602      	str	r6, [sp, #8]
 800059a:	9603      	str	r6, [sp, #12]
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800059c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800059e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 80005a2:	340c      	adds	r4, #12
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 80005a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 80005a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005aa:	ad04      	add	r5, sp, #16
 80005ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ae:	6823      	ldr	r3, [r4, #0]
				if(black)
					tonefreq = tonetable_black[black-1] * num *2 ;
				else
					tonefreq = tonetable_white[white-1] * num *2;
				//ring
				SetbuzzerFreq(tonefreq);
 80005b0:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 80006b0 <StartbuzzertoneTask+0x128>
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 80005b4:	602b      	str	r3, [r5, #0]
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 80005b6:	4d41      	ldr	r5, [pc, #260]	; (80006bc <StartbuzzertoneTask+0x134>)
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 80005b8:	4841      	ldr	r0, [pc, #260]	; (80006c0 <StartbuzzertoneTask+0x138>)
 80005ba:	220a      	movs	r2, #10
 80005bc:	2300      	movs	r3, #0
 80005be:	f10d 0106 	add.w	r1, sp, #6
 80005c2:	6800      	ldr	r0, [r0, #0]
 80005c4:	f004 f854 	bl	8004670 <xQueueGenericReceive>
 80005c8:	2801      	cmp	r0, #1
 80005ca:	4602      	mov	r2, r0
 80005cc:	4c3d      	ldr	r4, [pc, #244]	; (80006c4 <StartbuzzertoneTask+0x13c>)
 80005ce:	d168      	bne.n	80006a2 <StartbuzzertoneTask+0x11a>
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 80005d0:	2300      	movs	r3, #0
 80005d2:	6828      	ldr	r0, [r5, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f004 f84b 	bl	8004670 <xQueueGenericReceive>
			time = tonedata/1000;
 80005da:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	fbb1 f2f3 	udiv	r2, r1, r3
 80005e6:	b290      	uxth	r0, r2
			black = (tonedata%1000)/100;
 80005e8:	fb03 1212 	mls	r2, r3, r2, r1
			time = tonedata/1000;
 80005ec:	ee07 0a90 	vmov	s15, r0
			black = (tonedata%1000)/100;
 80005f0:	b292      	uxth	r2, r2
			time = tonedata/1000;
 80005f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f6:	edcd 7a03 	vstr	s15, [sp, #12]
			if((tonedata%1000) != 0)
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	d04c      	beq.n	8000698 <StartbuzzertoneTask+0x110>
			black = (tonedata%1000)/100;
 80005fe:	2064      	movs	r0, #100	; 0x64
			num = (tonedata%100)/10;
 8000600:	fbb1 f3f0 	udiv	r3, r1, r0
 8000604:	fb00 1313 	mls	r3, r0, r3, r1
			black = (tonedata%1000)/100;
 8000608:	fbb2 f2f0 	udiv	r2, r2, r0
			num = (tonedata%100)/10;
 800060c:	b29b      	uxth	r3, r3
 800060e:	200a      	movs	r0, #10
 8000610:	fbb3 f3f0 	udiv	r3, r3, r0
 8000614:	ee07 3a90 	vmov	s15, r3
 8000618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if(black)
 800061c:	b38a      	cbz	r2, 8000682 <StartbuzzertoneTask+0xfa>
					tonefreq = tonetable_black[black-1] * num *2 ;
 800061e:	ab10      	add	r3, sp, #64	; 0x40
 8000620:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000624:	ed12 7a0d 	vldr	s14, [r2, #-52]	; 0xffffffcc
					tonefreq = tonetable_white[white-1] * num *2;
 8000628:	ee67 7a87 	vmul.f32	s15, s15, s14
				SetbuzzerFreq(tonefreq);
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	2200      	movs	r2, #0
					tonefreq = tonetable_white[white-1] * num *2;
 8000630:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000634:	edcd 7a02 	vstr	s15, [sp, #8]
				SetbuzzerFreq(tonefreq);
 8000638:	ed9d 6a02 	vldr	s12, [sp, #8]
 800063c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000640:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000644:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8000648:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
			else
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
 800064e:	eddd 7a03 	vldr	s15, [sp, #12]
 8000652:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065a:	d00b      	beq.n	8000674 <StartbuzzertoneTask+0xec>
				osDelay(500/time); //time is used to shorter the sound..
 800065c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8000660:	eddf 6a19 	vldr	s13, [pc, #100]	; 80006c8 <StartbuzzertoneTask+0x140>
 8000664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800066c:	ee17 0a90 	vmov	r0, s15
 8000670:	f003 fbab 	bl	8003dca <osDelay>
			xSemaphoreGive(buzzerMutexHandle);
 8000674:	2300      	movs	r3, #0
 8000676:	6828      	ldr	r0, [r5, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4619      	mov	r1, r3
 800067c:	f003 ff28 	bl	80044d0 <xQueueGenericSend>
 8000680:	e79a      	b.n	80005b8 <StartbuzzertoneTask+0x30>
			white  = tonedata%10;
 8000682:	fbb1 f3f0 	udiv	r3, r1, r0
 8000686:	fb00 1313 	mls	r3, r0, r3, r1
					tonefreq = tonetable_white[white-1] * num *2;
 800068a:	aa10      	add	r2, sp, #64	; 0x40
 800068c:	b29b      	uxth	r3, r3
 800068e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000692:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8000696:	e7c7      	b.n	8000628 <StartbuzzertoneTask+0xa0>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000698:	6823      	ldr	r3, [r4, #0]
 800069a:	635a      	str	r2, [r3, #52]	; 0x34
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 800069e:	9602      	str	r6, [sp, #8]
 80006a0:	e7d5      	b.n	800064e <StartbuzzertoneTask+0xc6>
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 80006a2:	6823      	ldr	r3, [r4, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
 80006aa:	e785      	b.n	80005b8 <StartbuzzertoneTask+0x30>
 80006ac:	f3af 8000 	nop.w
 80006b0:	00000000 	.word	0x00000000
 80006b4:	412e8480 	.word	0x412e8480
 80006b8:	080051ac 	.word	0x080051ac
 80006bc:	20003fcc 	.word	0x20003fcc
 80006c0:	20003fc0 	.word	0x20003fc0
 80006c4:	20004110 	.word	0x20004110
 80006c8:	43fa0000 	.word	0x43fa0000

080006cc <SystemInitialization>:

//databuff
extern uint8_t enchall_buff[5];

void SystemInitialization(void)
{
 80006cc:	b508      	push	{r3, lr}
  //start tim2 for BUZZER
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <SystemInitialization+0x18>)
 80006d2:	f002 fdc5 	bl	8003260 <HAL_TIM_PWM_Start>
  //register the call back of uart4 transmit..
  //HAL_DMA_RegisterCallback(&hdma_uart4_rx,HAL_DMA_XFER_CPLT_CB_ID, UART4_DMA2_Cplt_Callback);
  HAL_UART_Receive_DMA(&huart4,enchall_buff, 5);
 80006d6:	2205      	movs	r2, #5
 80006d8:	4903      	ldr	r1, [pc, #12]	; (80006e8 <SystemInitialization+0x1c>)
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <SystemInitialization+0x20>)

}
 80006dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_Receive_DMA(&huart4,enchall_buff, 5);
 80006e0:	f002 bf28 	b.w	8003534 <HAL_UART_Receive_DMA>
 80006e4:	20004110 	.word	0x20004110
 80006e8:	20003d9c 	.word	0x20003d9c
 80006ec:	20004300 	.word	0x20004300

080006f0 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80006f0:	b570      	push	{r4, r5, r6, lr}

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80006f2:	4839      	ldr	r0, [pc, #228]	; (80007d8 <MX_DFSDM1_Init+0xe8>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80006f4:	2400      	movs	r4, #0
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 80006f6:	2501      	movs	r5, #1
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80006f8:	4b38      	ldr	r3, [pc, #224]	; (80007dc <MX_DFSDM1_Init+0xec>)
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80006fa:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 80006fe:	7204      	strb	r4, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8000700:	7244      	strb	r4, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000702:	61c6      	str	r6, [r0, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 8000704:	6205      	str	r5, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000706:	6245      	str	r5, [r0, #36]	; 0x24
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000708:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 800070c:	f001 f8ea 	bl	80018e4 <HAL_DFSDM_FilterInit>

  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000710:	4833      	ldr	r0, [pc, #204]	; (80007e0 <MX_DFSDM1_Init+0xf0>)
 8000712:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <MX_DFSDM1_Init+0xf4>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter1.Init.RegularParam.FastMode = DISABLE;
 8000714:	7204      	strb	r4, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 8000716:	7244      	strb	r4, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000718:	61c6      	str	r6, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 1;
 800071a:	6205      	str	r5, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 800071c:	6245      	str	r5, [r0, #36]	; 0x24
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800071e:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 8000722:	f001 f8df 	bl	80018e4 <HAL_DFSDM_FilterInit>

  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000726:	4830      	ldr	r0, [pc, #192]	; (80007e8 <MX_DFSDM1_Init+0xf8>)
 8000728:	4b30      	ldr	r3, [pc, #192]	; (80007ec <MX_DFSDM1_Init+0xfc>)
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 800072a:	7104      	strb	r4, [r0, #4]
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800072c:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800072e:	2302      	movs	r3, #2
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000730:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000732:	60c3      	str	r3, [r0, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000734:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000736:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000738:	6184      	str	r4, [r0, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800073a:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800073c:	6204      	str	r4, [r0, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800073e:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000740:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000742:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000744:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000746:	f001 f859 	bl	80017fc <HAL_DFSDM_ChannelInit>
 800074a:	b118      	cbz	r0, 8000754 <MX_DFSDM1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 800074c:	2169      	movs	r1, #105	; 0x69
 800074e:	4828      	ldr	r0, [pc, #160]	; (80007f0 <MX_DFSDM1_Init+0x100>)
 8000750:	f000 fb9c 	bl	8000e8c <_Error_Handler>
  }

  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000754:	4827      	ldr	r0, [pc, #156]	; (80007f4 <MX_DFSDM1_Init+0x104>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 8000756:	2202      	movs	r2, #2
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <MX_DFSDM1_Init+0x108>)
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 800075a:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800075c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000760:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 8000762:	2300      	movs	r3, #0
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000764:	6242      	str	r2, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000766:	2201      	movs	r2, #1
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 8000768:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800076a:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800076c:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800076e:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000770:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000772:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000774:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000776:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 8000778:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 800077a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 800077c:	f001 f83e 	bl	80017fc <HAL_DFSDM_ChannelInit>
 8000780:	b118      	cbz	r0, 800078a <MX_DFSDM1_Init+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000782:	217b      	movs	r1, #123	; 0x7b
 8000784:	481a      	ldr	r0, [pc, #104]	; (80007f0 <MX_DFSDM1_Init+0x100>)
 8000786:	f000 fb81 	bl	8000e8c <_Error_Handler>
  }

  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 800078a:	481c      	ldr	r0, [pc, #112]	; (80007fc <MX_DFSDM1_Init+0x10c>)
  hdfsdm1_channel7.Init.OutputClock.Activation = DISABLE;
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 800078c:	2202      	movs	r2, #2
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_DFSDM1_Init+0x110>)
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 8000790:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000792:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 8000796:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel7.Init.OutputClock.Activation = DISABLE;
 8000798:	2300      	movs	r3, #0
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800079a:	6242      	str	r2, [r0, #36]	; 0x24
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 800079c:	2201      	movs	r2, #1
  hdfsdm1_channel7.Init.OutputClock.Activation = DISABLE;
 800079e:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007a0:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007a2:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007a4:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007a6:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007a8:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80007aa:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 80007ac:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel7.Init.Offset = 0;
 80007ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel7.Init.RightBitShift = 0x00;
 80007b0:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel7) != HAL_OK)
 80007b2:	f001 f823 	bl	80017fc <HAL_DFSDM_ChannelInit>
 80007b6:	b118      	cbz	r0, 80007c0 <MX_DFSDM1_Init+0xd0>
  {
    _Error_Handler(__FILE__, __LINE__);
 80007b8:	218d      	movs	r1, #141	; 0x8d
 80007ba:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_DFSDM1_Init+0x100>)
 80007bc:	f000 fb66 	bl	8000e8c <_Error_Handler>
  }

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 80007c0:	2201      	movs	r2, #1
 80007c2:	4910      	ldr	r1, [pc, #64]	; (8000804 <MX_DFSDM1_Init+0x114>)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_DFSDM1_Init+0xe8>)
 80007c6:	f001 f8ff 	bl	80019c8 <HAL_DFSDM_FilterConfigRegChannel>

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_7, DFSDM_CONTINUOUS_CONV_ON);
 80007ca:	2201      	movs	r2, #1
 80007cc:	490e      	ldr	r1, [pc, #56]	; (8000808 <MX_DFSDM1_Init+0x118>)
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_DFSDM1_Init+0xf0>)

}
 80007d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_7, DFSDM_CONTINUOUS_CONV_ON);
 80007d4:	f001 b8f8 	b.w	80019c8 <HAL_DFSDM_FilterConfigRegChannel>
 80007d8:	20003da8 	.word	0x20003da8
 80007dc:	40017500 	.word	0x40017500
 80007e0:	20003ef4 	.word	0x20003ef4
 80007e4:	40017580 	.word	0x40017580
 80007e8:	20003f48 	.word	0x20003f48
 80007ec:	40017400 	.word	0x40017400
 80007f0:	0800527c 	.word	0x0800527c
 80007f4:	20003dfc 	.word	0x20003dfc
 80007f8:	40017460 	.word	0x40017460
 80007fc:	20003f80 	.word	0x20003f80
 8000800:	400174e0 	.word	0x400174e0
 8000804:	00030008 	.word	0x00030008
 8000808:	00070080 	.word	0x00070080

0800080c <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 800080e:	4c43      	ldr	r4, [pc, #268]	; (800091c <HAL_DFSDM_FilterMspInit+0x110>)
{
 8000810:	b087      	sub	sp, #28
 8000812:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d12a      	bne.n	8000870 <HAL_DFSDM_FilterMspInit+0x64>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800081a:	4a41      	ldr	r2, [pc, #260]	; (8000920 <HAL_DFSDM_FilterMspInit+0x114>)
 800081c:	6813      	ldr	r3, [r2, #0]
 800081e:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000820:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000822:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000824:	d109      	bne.n	800083a <HAL_DFSDM_FilterMspInit+0x2e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000826:	4b3f      	ldr	r3, [pc, #252]	; (8000924 <HAL_DFSDM_FilterMspInit+0x118>)
 8000828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800082a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800082e:	645a      	str	r2, [r3, #68]	; 0x44
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	9b00      	ldr	r3, [sp, #0]
    PD0     ------> DFSDM1_DATIN7
    PD1     ------> DFSDM1_CKIN7
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800083a:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000840:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000842:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000844:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000846:	4838      	ldr	r0, [pc, #224]	; (8000928 <HAL_DFSDM_FilterMspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000848:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000850:	f001 fa68 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000854:	231b      	movs	r3, #27
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000856:	a901      	add	r1, sp, #4
 8000858:	4834      	ldr	r0, [pc, #208]	; (800092c <HAL_DFSDM_FilterMspInit+0x120>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800085a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800085c:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000860:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000866:	f001 fa5d 	bl	8001d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000870:	682a      	ldr	r2, [r5, #0]
 8000872:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <HAL_DFSDM_FilterMspInit+0x124>)
 8000874:	429a      	cmp	r2, r3
 8000876:	d125      	bne.n	80008c4 <HAL_DFSDM_FilterMspInit+0xb8>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000878:	4c2e      	ldr	r4, [pc, #184]	; (8000934 <HAL_DFSDM_FilterMspInit+0x128>)
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800087a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800087e:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000882:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000888:	3310      	adds	r3, #16
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800088a:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800088c:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000892:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000894:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000898:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800089a:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800089e:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a0:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80008a2:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a8:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80008aa:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008ac:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008ae:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80008b0:	f001 f8be 	bl	8001a30 <HAL_DMA_Init>
 80008b4:	b118      	cbz	r0, 80008be <HAL_DFSDM_FilterMspInit+0xb2>
    {
      _Error_Handler(__FILE__, __LINE__);
 80008b6:	21d4      	movs	r1, #212	; 0xd4
 80008b8:	481f      	ldr	r0, [pc, #124]	; (8000938 <HAL_DFSDM_FilterMspInit+0x12c>)
 80008ba:	f000 fae7 	bl	8000e8c <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80008be:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80008c0:	62ac      	str	r4, [r5, #40]	; 0x28
 80008c2:	63a5      	str	r5, [r4, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 80008c4:	682a      	ldr	r2, [r5, #0]
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_DFSDM_FilterMspInit+0x130>)
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d125      	bne.n	8000918 <HAL_DFSDM_FilterMspInit+0x10c>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80008cc:	4c1c      	ldr	r4, [pc, #112]	; (8000940 <HAL_DFSDM_FilterMspInit+0x134>)
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80008ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80008d2:	f503 436e 	add.w	r3, r3, #60928	; 0xee00
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80008d6:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80008dc:	33a8      	adds	r3, #168	; 0xa8
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80008de:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008e0:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80008e6:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80008e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008ec:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80008ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80008f2:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f4:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80008f6:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008fc:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008fe:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000900:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000902:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000904:	f001 f894 	bl	8001a30 <HAL_DMA_Init>
 8000908:	b118      	cbz	r0, 8000912 <HAL_DFSDM_FilterMspInit+0x106>
    {
      _Error_Handler(__FILE__, __LINE__);
 800090a:	21eb      	movs	r1, #235	; 0xeb
 800090c:	480a      	ldr	r0, [pc, #40]	; (8000938 <HAL_DFSDM_FilterMspInit+0x12c>)
 800090e:	f000 fabd 	bl	8000e8c <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000912:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000914:	62ac      	str	r4, [r5, #40]	; 0x28
 8000916:	63a5      	str	r5, [r4, #56]	; 0x38
  }

}
 8000918:	b007      	add	sp, #28
 800091a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091c:	20000024 	.word	0x20000024
 8000920:	20000028 	.word	0x20000028
 8000924:	40023800 	.word	0x40023800
 8000928:	40021000 	.word	0x40021000
 800092c:	40020c00 	.word	0x40020c00
 8000930:	40017500 	.word	0x40017500
 8000934:	20003e94 	.word	0x20003e94
 8000938:	0800527c 	.word	0x0800527c
 800093c:	40017580 	.word	0x40017580
 8000940:	20003e34 	.word	0x20003e34

08000944 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000944:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 8000946:	4c19      	ldr	r4, [pc, #100]	; (80009ac <HAL_DFSDM_ChannelMspInit+0x68>)
{
 8000948:	b086      	sub	sp, #24
  if(DFSDM1_Init == 0)
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d12a      	bne.n	80009a6 <HAL_DFSDM_ChannelMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000950:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8000952:	6813      	ldr	r3, [r2, #0]
 8000954:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000956:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000958:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800095a:	d109      	bne.n	8000970 <HAL_DFSDM_ChannelMspInit+0x2c>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_DFSDM_ChannelMspInit+0x70>)
 800095e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000960:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000964:	645a      	str	r2, [r3, #68]	; 0x44
 8000966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	9b00      	ldr	r3, [sp, #0]
    PD0     ------> DFSDM1_DATIN7
    PD1     ------> DFSDM1_CKIN7
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000970:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000976:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000978:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800097a:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097c:	480e      	ldr	r0, [pc, #56]	; (80009b8 <HAL_DFSDM_ChannelMspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800097e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000986:	f001 f9cd 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800098a:	231b      	movs	r3, #27
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098c:	a901      	add	r1, sp, #4
 800098e:	480b      	ldr	r0, [pc, #44]	; (80009bc <HAL_DFSDM_ChannelMspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000990:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000992:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000996:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f001 f9c2 	bl	8001d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80009a0:	6823      	ldr	r3, [r4, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	6023      	str	r3, [r4, #0]
  }
}
 80009a6:	b006      	add	sp, #24
 80009a8:	bd70      	pop	{r4, r5, r6, pc}
 80009aa:	bf00      	nop
 80009ac:	20000024 	.word	0x20000024
 80009b0:	20000028 	.word	0x20000028
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_DMA_Init+0x60>)
{
 80009c2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80009c6:	2105      	movs	r1, #5
 80009c8:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ca:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80009ce:	631a      	str	r2, [r3, #48]	; 0x30
 80009d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009d2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80009d6:	9200      	str	r2, [sp, #0]
 80009d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009dc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80009e2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80009ee:	f000 fe73 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80009f2:	200d      	movs	r0, #13
 80009f4:	f000 fea8 	bl	8001748 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2105      	movs	r1, #5
 80009fc:	2038      	movs	r0, #56	; 0x38
 80009fe:	f000 fe6b 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a02:	2038      	movs	r0, #56	; 0x38
 8000a04:	f000 fea0 	bl	8001748 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2105      	movs	r1, #5
 8000a0c:	2039      	movs	r0, #57	; 0x39
 8000a0e:	f000 fe63 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a12:	2039      	movs	r0, #57	; 0x39
 8000a14:	f000 fe98 	bl	8001748 <HAL_NVIC_EnableIRQ>

}
 8000a18:	b003      	add	sp, #12
 8000a1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <StartenchallTask>:
 8000a24:	b508      	push	{r3, lr}
 8000a26:	2001      	movs	r0, #1
 8000a28:	f003 f9cf 	bl	8003dca <osDelay>
 8000a2c:	e7fb      	b.n	8000a26 <StartenchallTask+0x2>
	...

08000a30 <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 8000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a32:	b0a9      	sub	sp, #164	; 0xa4
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of buzzerMutex */
  osMutexDef(buzzerMutex);
 8000a34:	2500      	movs	r5, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of enchallTask */
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000a36:	4c3e      	ldr	r4, [pc, #248]	; (8000b30 <MX_FREERTOS_Init+0x100>)
  osMutexDef(buzzerMutex);
 8000a38:	a828      	add	r0, sp, #160	; 0xa0
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000a3a:	ae05      	add	r6, sp, #20
 8000a3c:	4627      	mov	r7, r4
  osMutexDef(buzzerMutex);
 8000a3e:	f840 5da0 	str.w	r5, [r0, #-160]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 8000a42:	f003 f9ca 	bl	8003dda <osMutexCreate>
 8000a46:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <MX_FREERTOS_Init+0x104>)
 8000a48:	6018      	str	r0, [r3, #0]
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000a4a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a4c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a4e:	683b      	ldr	r3, [r7, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000a50:	4629      	mov	r1, r5
 8000a52:	a805      	add	r0, sp, #20

  /* definition and creation of shuntTask */
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000a54:	f104 0714 	add.w	r7, r4, #20
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000a58:	6033      	str	r3, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000a5a:	f003 f99e 	bl	8003d9a <osThreadCreate>
 8000a5e:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <MX_FREERTOS_Init+0x108>)
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000a60:	ae0a      	add	r6, sp, #40	; 0x28
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000a62:	6018      	str	r0, [r3, #0]
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000a64:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a68:	683b      	ldr	r3, [r7, #0]
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 8000a6a:	4629      	mov	r1, r5
 8000a6c:	a80a      	add	r0, sp, #40	; 0x28

  /* definition and creation of ledblueTask */
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000a6e:	f104 0728 	add.w	r7, r4, #40	; 0x28
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000a72:	6033      	str	r3, [r6, #0]
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 8000a74:	f003 f991 	bl	8003d9a <osThreadCreate>
 8000a78:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MX_FREERTOS_Init+0x10c>)
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000a7a:	ae0f      	add	r6, sp, #60	; 0x3c
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 8000a7c:	6018      	str	r0, [r3, #0]
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000a7e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a82:	683b      	ldr	r3, [r7, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000a84:	4629      	mov	r1, r5
 8000a86:	a80f      	add	r0, sp, #60	; 0x3c

  /* definition and creation of ledgreenTask */
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000a88:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000a8c:	6033      	str	r3, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000a8e:	f003 f984 	bl	8003d9a <osThreadCreate>
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <MX_FREERTOS_Init+0x110>)
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000a94:	ae14      	add	r6, sp, #80	; 0x50
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000a96:	6018      	str	r0, [r3, #0]
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000a98:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a9c:	683b      	ldr	r3, [r7, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000a9e:	4629      	mov	r1, r5
 8000aa0:	a814      	add	r0, sp, #80	; 0x50

  /* definition and creation of iwdgTask */
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000aa2:	f104 0750 	add.w	r7, r4, #80	; 0x50
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000aa6:	6033      	str	r3, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000aa8:	f003 f977 	bl	8003d9a <osThreadCreate>
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <MX_FREERTOS_Init+0x114>)
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000aae:	ae19      	add	r6, sp, #100	; 0x64
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000ab0:	6018      	str	r0, [r3, #0]
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000ab2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000ab4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ab6:	683b      	ldr	r3, [r7, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000ab8:	4629      	mov	r1, r5
 8000aba:	a819      	add	r0, sp, #100	; 0x64

  /* definition and creation of buzzertoneTask */
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000abc:	f104 0764 	add.w	r7, r4, #100	; 0x64
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000ac0:	6033      	str	r3, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000ac2:	f003 f96a 	bl	8003d9a <osThreadCreate>
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <MX_FREERTOS_Init+0x118>)
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000ac8:	ae1e      	add	r6, sp, #120	; 0x78
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000aca:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000acc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000ace:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ad0:	683b      	ldr	r3, [r7, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000ad2:	4629      	mov	r1, r5
 8000ad4:	a81e      	add	r0, sp, #120	; 0x78

  /* definition and creation of buzzerrythmTask */
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000ad6:	f104 0778 	add.w	r7, r4, #120	; 0x78
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000ada:	6033      	str	r3, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000adc:	f003 f95d 	bl	8003d9a <osThreadCreate>
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_FREERTOS_Init+0x11c>)
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000ae2:	ae23      	add	r6, sp, #140	; 0x8c
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000ae4:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000ae6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000ae8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000aea:	683b      	ldr	r3, [r7, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000aec:	4629      	mov	r1, r5
 8000aee:	a823      	add	r0, sp, #140	; 0x8c
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000af0:	6033      	str	r3, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000af2:	f003 f952 	bl	8003d9a <osThreadCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of buzzerQueue */
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000af6:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_FREERTOS_Init+0x120>)
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);

  /* definition and creation of rythmQueue */
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000afc:	3494      	adds	r4, #148	; 0x94
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000afe:	6018      	str	r0, [r3, #0]
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000b00:	ab01      	add	r3, sp, #4
 8000b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b06:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000b0a:	4629      	mov	r1, r5
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 f967 	bl	8003de0 <osMessageCreate>
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_FREERTOS_Init+0x124>)
 8000b14:	6018      	str	r0, [r3, #0]
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000b16:	ab03      	add	r3, sp, #12
 8000b18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b1c:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8000b20:	4629      	mov	r1, r5
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 f95c 	bl	8003de0 <osMessageCreate>
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_FREERTOS_Init+0x128>)
 8000b2a:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
}
 8000b2c:	b029      	add	sp, #164	; 0xa4
 8000b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b30:	080051dc 	.word	0x080051dc
 8000b34:	20003fcc 	.word	0x20003fcc
 8000b38:	20003fc8 	.word	0x20003fc8
 8000b3c:	20003fbc 	.word	0x20003fbc
 8000b40:	20003fd4 	.word	0x20003fd4
 8000b44:	20003fd0 	.word	0x20003fd0
 8000b48:	20003fd8 	.word	0x20003fd8
 8000b4c:	20003fb8 	.word	0x20003fb8
 8000b50:	20003fdc 	.word	0x20003fdc
 8000b54:	20003fc0 	.word	0x20003fc0
 8000b58:	20003fc4 	.word	0x20003fc4

08000b5c <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000b5e:	210c      	movs	r1, #12
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b62:	f042 0210 	orr.w	r2, r2, #16
{
 8000b66:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
{
 8000b6a:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000b6e:	4d2a      	ldr	r5, [pc, #168]	; (8000c18 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b70:	f002 0210 	and.w	r2, r2, #16

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8000b74:	4c29      	ldr	r4, [pc, #164]	; (8000c1c <MX_GPIO_Init+0xc0>)
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000b76:	4628      	mov	r0, r5
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b78:	9201      	str	r2, [sp, #4]
 8000b7a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
 8000b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b86:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000b8a:	9202      	str	r2, [sp, #8]
 8000b8c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b90:	f042 0204 	orr.w	r2, r2, #4
 8000b94:	631a      	str	r2, [r3, #48]	; 0x30
 8000b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b98:	f002 0204 	and.w	r2, r2, #4
 8000b9c:	9203      	str	r2, [sp, #12]
 8000b9e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba2:	f042 0201 	orr.w	r2, r2, #1
 8000ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000baa:	f002 0201 	and.w	r2, r2, #1
 8000bae:	9204      	str	r2, [sp, #16]
 8000bb0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb4:	f042 0202 	orr.w	r2, r2, #2
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
 8000bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bbc:	f002 0202 	and.w	r2, r2, #2
 8000bc0:	9205      	str	r2, [sp, #20]
 8000bc2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc6:	f042 0208 	orr.w	r2, r2, #8
 8000bca:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	9306      	str	r3, [sp, #24]
 8000bd6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000bd8:	f001 f98e 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4620      	mov	r0, r4
 8000be0:	2140      	movs	r1, #64	; 0x40
 8000be2:	f001 f989 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000be6:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be8:	a907      	add	r1, sp, #28
 8000bea:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000bec:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bee:	2311      	movs	r3, #17
 8000bf0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf8:	f001 f894 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000bfc:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	a907      	add	r1, sp, #28
 8000c00:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000c02:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c08:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c0a:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f001 f88a 	bl	8001d24 <HAL_GPIO_Init>

}
 8000c10:	b00d      	add	sp, #52	; 0x34
 8000c12:	bd30      	pop	{r4, r5, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40020400 	.word	0x40020400

08000c20 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000c20:	b508      	push	{r3, lr}

  hi2c4.Instance = I2C4;
 8000c22:	4815      	ldr	r0, [pc, #84]	; (8000c78 <MX_I2C4_Init+0x58>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c24:	2201      	movs	r2, #1
  hi2c4.Init.Timing = 0x20404768;
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_I2C4_Init+0x5c>)
 8000c28:	4915      	ldr	r1, [pc, #84]	; (8000c80 <MX_I2C4_Init+0x60>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2a:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.Timing = 0x20404768;
 8000c2c:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c4.Init.OwnAddress1 = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	6083      	str	r3, [r0, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c34:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c36:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3a:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c3e:	f001 f964 	bl	8001f0a <HAL_I2C_Init>
 8000c42:	b118      	cbz	r0, 8000c4c <MX_I2C4_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c44:	214c      	movs	r1, #76	; 0x4c
 8000c46:	480f      	ldr	r0, [pc, #60]	; (8000c84 <MX_I2C4_Init+0x64>)
 8000c48:	f000 f920 	bl	8000e8c <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480a      	ldr	r0, [pc, #40]	; (8000c78 <MX_I2C4_Init+0x58>)
 8000c50:	f001 f9ac 	bl	8001fac <HAL_I2CEx_ConfigAnalogFilter>
 8000c54:	b118      	cbz	r0, 8000c5e <MX_I2C4_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c56:	2153      	movs	r1, #83	; 0x53
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <MX_I2C4_Init+0x64>)
 8000c5a:	f000 f917 	bl	8000e8c <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_I2C4_Init+0x58>)
 8000c62:	f001 f9c9 	bl	8001ff8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c66:	b128      	cbz	r0, 8000c74 <MX_I2C4_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c68:	215a      	movs	r1, #90	; 0x5a
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_I2C4_Init+0x64>)
  }

}
 8000c6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000c70:	f000 b90c 	b.w	8000e8c <_Error_Handler>
 8000c74:	bd08      	pop	{r3, pc}
 8000c76:	bf00      	nop
 8000c78:	20003fe0 	.word	0x20003fe0
 8000c7c:	20404768 	.word	0x20404768
 8000c80:	40006000 	.word	0x40006000
 8000c84:	080052e8 	.word	0x080052e8

08000c88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C4)
 8000c8a:	6802      	ldr	r2, [r0, #0]
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_I2C_MspInit+0x44>)
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d119      	bne.n	8000cc6 <HAL_I2C_MspInit+0x3e>
  
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c92:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c98:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000ca6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca8:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f001 f839 	bl	8001d24 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_I2C_MspInit+0x4c>)
 8000cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000cba:	641a      	str	r2, [r3, #64]	; 0x40
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000cc6:	b007      	add	sp, #28
 8000cc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ccc:	40006000 	.word	0x40006000
 8000cd0:	40020c00 	.word	0x40020c00
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <StartshuntTask>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void StartshuntTask(void const * argument)
{
 8000cd8:	b508      	push	{r3, lr}
  for(;;)
  {
    osDelay(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f003 f875 	bl	8003dca <osDelay>
 8000ce0:	e7fb      	b.n	8000cda <StartshuntTask+0x2>
	...

08000ce4 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <SystemClock_Config+0xc8>)
 8000ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	641a      	str	r2, [r3, #64]	; 0x40
{
 8000cf0:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cf6:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	2701      	movs	r7, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d10:	9707      	str	r7, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d18:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d22:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d24:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d2a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d2e:	23d8      	movs	r3, #216	; 0xd8
 8000d30:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f001 fa41 	bl	80021b8 <HAL_RCC_OscConfig>
 8000d36:	b100      	cbz	r0, 8000d3a <SystemClock_Config+0x56>
 8000d38:	e7fe      	b.n	8000d38 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d3a:	f001 fa05 	bl	8002148 <HAL_PWREx_EnableOverDrive>
 8000d3e:	b100      	cbz	r0, 8000d42 <SystemClock_Config+0x5e>
 8000d40:	e7fe      	b.n	8000d40 <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	260f      	movs	r6, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d4a:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d4c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d52:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d56:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d58:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d5a:	f001 fbeb 	bl	8002534 <HAL_RCC_ClockConfig>
 8000d5e:	b100      	cbz	r0, 8000d62 <SystemClock_Config+0x7e>
 8000d60:	e7fe      	b.n	8000d60 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <SystemClock_Config+0xd0>)
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000d64:	9030      	str	r0, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000d66:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000d68:	2310      	movs	r3, #16
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d6a:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000d6e:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000d70:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000d72:	9725      	str	r7, [sp, #148]	; 0x94
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000d74:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8000d76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d7a:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7c:	f001 fcae 	bl	80026dc <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4605      	mov	r5, r0
 8000d82:	b100      	cbz	r0, 8000d86 <SystemClock_Config+0xa2>
 8000d84:	e7fe      	b.n	8000d84 <SystemClock_Config+0xa0>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000d86:	f001 fc65 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d92:	f000 fce5 	bl	8001760 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d96:	4620      	mov	r0, r4
 8000d98:	f000 fcf8 	bl	800178c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000d9c:	462a      	mov	r2, r5
 8000d9e:	4631      	mov	r1, r6
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 fc98 	bl	80016d8 <HAL_NVIC_SetPriority>
}
 8000da8:	b039      	add	sp, #228	; 0xe4
 8000daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40007000 	.word	0x40007000
 8000db4:	08022340 	.word	0x08022340

08000db8 <main>:
{
 8000db8:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dbe:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <main+0xbc>)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000dca:	695a      	ldr	r2, [r3, #20]
 8000dcc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000dd0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd6:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8000dda:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dde:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000de2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000de6:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dea:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dee:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000df2:	07a5      	lsls	r5, r4, #30
 8000df4:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000df6:	ea02 0e06 	and.w	lr, r2, r6
 8000dfa:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dfc:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dfe:	ea4e 0700 	orr.w	r7, lr, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8000e02:	3901      	subs	r1, #1
 8000e04:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e08:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 8000e0c:	1c4f      	adds	r7, r1, #1
 8000e0e:	d1f6      	bne.n	8000dfe <main+0x46>
 8000e10:	3a20      	subs	r2, #32
    } while(sets--);
 8000e12:	f112 0f20 	cmn.w	r2, #32
 8000e16:	d1ee      	bne.n	8000df6 <main+0x3e>
 8000e18:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e28:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000e2c:	f000 fc14 	bl	8001658 <HAL_Init>
  SystemClock_Config();
 8000e30:	f7ff ff58 	bl	8000ce4 <SystemClock_Config>
  MX_GPIO_Init();
 8000e34:	f7ff fe92 	bl	8000b5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e38:	f7ff fdc2 	bl	80009c0 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000e3c:	f7ff fc58 	bl	80006f0 <MX_DFSDM1_Init>
  MX_I2C4_Init();
 8000e40:	f7ff feee 	bl	8000c20 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000e44:	f000 f824 	bl	8000e90 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e48:	f000 f966 	bl	8001118 <MX_TIM1_Init>
  MX_UART4_Init();
 8000e4c:	f000 fa3c 	bl	80012c8 <MX_UART4_Init>
  MX_UART8_Init();
 8000e50:	f000 fa5e 	bl	8001310 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000e54:	f000 fa82 	bl	800135c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e58:	f000 faa2 	bl	80013a0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000e5c:	f000 fb6c 	bl	8001538 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8000e60:	f000 f9e0 	bl	8001224 <MX_TIM2_Init>
  MX_FREERTOS_Init();
 8000e64:	f7ff fde4 	bl	8000a30 <MX_FREERTOS_Init>
  SystemInitialization();
 8000e68:	f7ff fc30 	bl	80006cc <SystemInitialization>
  osKernelStart();
 8000e6c:	f002 ff90 	bl	8003d90 <osKernelStart>
 8000e70:	e7fe      	b.n	8000e70 <main+0xb8>
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e78:	6802      	ldr	r2, [r0, #0]
 8000e7a:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d101      	bne.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000e80:	f000 bbfc 	b.w	800167c <HAL_IncTick>
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40000800 	.word	0x40000800

08000e8c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000e8c:	e7fe      	b.n	8000e8c <_Error_Handler>
	...

08000e90 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8000e90:	4812      	ldr	r0, [pc, #72]	; (8000edc <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e96:	4912      	ldr	r1, [pc, #72]	; (8000ee0 <MX_SPI1_Init+0x50>)
{
 8000e98:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e9e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea4:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea8:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eaa:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000eac:	2230      	movs	r2, #48	; 0x30
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eae:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb2:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000eb4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000eb6:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eba:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ebc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ebe:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ec0:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8000ec2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ec4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec6:	f001 fe97 	bl	8002bf8 <HAL_SPI_Init>
 8000eca:	b128      	cbz	r0, 8000ed8 <MX_SPI1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ecc:	2151      	movs	r1, #81	; 0x51
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_SPI1_Init+0x54>)
  }

}
 8000ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000ed4:	f7ff bfda 	b.w	8000e8c <_Error_Handler>
 8000ed8:	bd08      	pop	{r3, pc}
 8000eda:	bf00      	nop
 8000edc:	2000402c 	.word	0x2000402c
 8000ee0:	40013000 	.word	0x40013000
 8000ee4:	080052fb 	.word	0x080052fb

08000ee8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8000ee8:	6802      	ldr	r2, [r0, #0]
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_SPI_MspInit+0x58>)
 8000eec:	429a      	cmp	r2, r3
{
 8000eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef0:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI1)
 8000ef2:	d122      	bne.n	8000f3a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f00:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	a901      	add	r1, sp, #4
 8000f04:	480f      	ldr	r0, [pc, #60]	; (8000f44 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f0a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f1c:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f1e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f20:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f22:	f000 feff 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000f26:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	a901      	add	r1, sp, #4
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000f2c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f34:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f000 fef5 	bl	8001d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f3a:	b007      	add	sp, #28
 8000f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40013000 	.word	0x40013000
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40020400 	.word	0x40020400

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 fbb0 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f06f 000b 	mvn.w	r0, #11
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	f000 fbbc 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f06f 000a 	mvn.w	r0, #10
 8000f66:	4611      	mov	r1, r2
 8000f68:	f000 fbb6 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f06f 0009 	mvn.w	r0, #9
 8000f72:	4611      	mov	r1, r2
 8000f74:	f000 fbb0 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f06f 0004 	mvn.w	r0, #4
 8000f7e:	4611      	mov	r1, r2
 8000f80:	f000 fbaa 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f06f 0003 	mvn.w	r0, #3
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	f000 fba4 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	210f      	movs	r1, #15
 8000f94:	f06f 0001 	mvn.w	r0, #1
 8000f98:	f000 fb9e 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000fa8:	f000 bb96 	b.w	80016d8 <HAL_NVIC_SetPriority>

08000fac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000fae:	4601      	mov	r1, r0
{
 8000fb0:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	201e      	movs	r0, #30
 8000fb6:	f000 fb8f 	bl	80016d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000fba:	201e      	movs	r0, #30
 8000fbc:	f000 fbc4 	bl	8001748 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc2:	a901      	add	r1, sp, #4
 8000fc4:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000fc8:	4c13      	ldr	r4, [pc, #76]	; (8001018 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000fca:	f042 0204 	orr.w	r2, r2, #4
 8000fce:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fda:	f001 fb61 	bl	80026a0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fde:	f001 fb3f 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fe4:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 8000fe6:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000fe8:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000fec:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_InitTick+0x74>)
 8000ff0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ff4:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8000ff6:	2300      	movs	r3, #0
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ff8:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000ffa:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8000ffc:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001000:	f001 ff9a 	bl	8002f38 <HAL_TIM_Base_Init>
 8001004:	b920      	cbnz	r0, 8001010 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001006:	4620      	mov	r0, r4
 8001008:	f001 fe6e 	bl	8002ce8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800100c:	b008      	add	sp, #32
 800100e:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001010:	2001      	movs	r0, #1
 8001012:	e7fb      	b.n	800100c <HAL_InitTick+0x60>
 8001014:	40023800 	.word	0x40023800
 8001018:	20004090 	.word	0x20004090
 800101c:	40000800 	.word	0x40000800
 8001020:	000f4240 	.word	0x000f4240

08001024 <NMI_Handler>:
 8001024:	4770      	bx	lr

08001026 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler>

08001028 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler>

0800102a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800102a:	e7fe      	b.n	800102a <BusFault_Handler>

0800102c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler>

0800102e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001030:	f002 beda 	b.w	8003de8 <osSystickHandler>

08001034 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001034:	4801      	ldr	r0, [pc, #4]	; (800103c <DMA1_Stream2_IRQHandler+0x8>)
 8001036:	f000 bdb7 	b.w	8001ba8 <HAL_DMA_IRQHandler>
 800103a:	bf00      	nop
 800103c:	20004150 	.word	0x20004150

08001040 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001040:	4801      	ldr	r0, [pc, #4]	; (8001048 <TIM4_IRQHandler+0x8>)
 8001042:	f001 be61 	b.w	8002d08 <HAL_TIM_IRQHandler>
 8001046:	bf00      	nop
 8001048:	20004090 	.word	0x20004090

0800104c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800104c:	4801      	ldr	r0, [pc, #4]	; (8001054 <DMA2_Stream0_IRQHandler+0x8>)
 800104e:	f000 bdab 	b.w	8001ba8 <HAL_DMA_IRQHandler>
 8001052:	bf00      	nop
 8001054:	20003e94 	.word	0x20003e94

08001058 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001058:	4801      	ldr	r0, [pc, #4]	; (8001060 <DMA2_Stream1_IRQHandler+0x8>)
 800105a:	f000 bda5 	b.w	8001ba8 <HAL_DMA_IRQHandler>
 800105e:	bf00      	nop
 8001060:	20003e34 	.word	0x20003e34

08001064 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8001064:	6803      	ldr	r3, [r0, #0]
{
 8001066:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <HAL_TIM_Base_MspInit+0x40>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d10b      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_TIM_Base_MspInit+0x44>)
 8001070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001072:	f042 0201 	orr.w	r2, r2, #1
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001082:	b002      	add	sp, #8
 8001084:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 8001086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800108a:	d1fa      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	9b01      	ldr	r3, [sp, #4]
}
 80010a2:	e7ee      	b.n	8001082 <HAL_TIM_Base_MspInit+0x1e>
 80010a4:	40010000 	.word	0x40010000
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80010ac:	6803      	ldr	r3, [r0, #0]
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_TIM_MspPostInit+0x60>)
 80010b0:	4293      	cmp	r3, r2
{
 80010b2:	b570      	push	{r4, r5, r6, lr}
 80010b4:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 80010b6:	d119      	bne.n	80010ec <HAL_TIM_MspPostInit+0x40>
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010ba:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010be:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	a901      	add	r1, sp, #4
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010cc:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f000 fe29 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80010d2:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d6:	a901      	add	r1, sp, #4
 80010d8:	480e      	ldr	r0, [pc, #56]	; (8001114 <HAL_TIM_MspPostInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80010da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f000 fe1e 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010e8:	b006      	add	sp, #24
 80010ea:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM2)
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d1fa      	bne.n	80010e8 <HAL_TIM_MspPostInit+0x3c>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	a901      	add	r1, sp, #4
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001104:	2301      	movs	r3, #1
 8001106:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001108:	9305      	str	r3, [sp, #20]
 800110a:	e7eb      	b.n	80010e4 <HAL_TIM_MspPostInit+0x38>
 800110c:	40010000 	.word	0x40010000
 8001110:	40020000 	.word	0x40020000
 8001114:	40021000 	.word	0x40021000

08001118 <MX_TIM1_Init>:
  htim1.Instance = TIM1;
 8001118:	483f      	ldr	r0, [pc, #252]	; (8001218 <MX_TIM1_Init+0x100>)
  htim1.Init.Period = 10000;
 800111a:	f242 7210 	movw	r2, #10000	; 0x2710
  htim1.Instance = TIM1;
 800111e:	4b3f      	ldr	r3, [pc, #252]	; (800121c <MX_TIM1_Init+0x104>)
{
 8001120:	b500      	push	{lr}
  htim1.Instance = TIM1;
 8001122:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001124:	2300      	movs	r3, #0
{
 8001126:	b09b      	sub	sp, #108	; 0x6c
  htim1.Init.Period = 10000;
 8001128:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = 0;
 800112a:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	6083      	str	r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001130:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001134:	f001 ff00 	bl	8002f38 <HAL_TIM_Base_Init>
 8001138:	b118      	cbz	r0, 8001142 <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 800113a:	214d      	movs	r1, #77	; 0x4d
 800113c:	4838      	ldr	r0, [pc, #224]	; (8001220 <MX_TIM1_Init+0x108>)
 800113e:	f7ff fea5 	bl	8000e8c <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001142:	a91a      	add	r1, sp, #104	; 0x68
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001148:	4833      	ldr	r0, [pc, #204]	; (8001218 <MX_TIM1_Init+0x100>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800114e:	f001 ffed 	bl	800312c <HAL_TIM_ConfigClockSource>
 8001152:	b118      	cbz	r0, 800115c <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8001154:	2153      	movs	r1, #83	; 0x53
 8001156:	4832      	ldr	r0, [pc, #200]	; (8001220 <MX_TIM1_Init+0x108>)
 8001158:	f7ff fe98 	bl	8000e8c <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800115c:	482e      	ldr	r0, [pc, #184]	; (8001218 <MX_TIM1_Init+0x100>)
 800115e:	f001 ff05 	bl	8002f6c <HAL_TIM_PWM_Init>
 8001162:	b118      	cbz	r0, 800116c <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8001164:	2158      	movs	r1, #88	; 0x58
 8001166:	482e      	ldr	r0, [pc, #184]	; (8001220 <MX_TIM1_Init+0x108>)
 8001168:	f7ff fe90 	bl	8000e8c <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800116e:	a901      	add	r1, sp, #4
 8001170:	4829      	ldr	r0, [pc, #164]	; (8001218 <MX_TIM1_Init+0x100>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001174:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001178:	f002 f8dc 	bl	8003334 <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	b118      	cbz	r0, 8001186 <MX_TIM1_Init+0x6e>
    _Error_Handler(__FILE__, __LINE__);
 800117e:	2160      	movs	r1, #96	; 0x60
 8001180:	4827      	ldr	r0, [pc, #156]	; (8001220 <MX_TIM1_Init+0x108>)
 8001182:	f7ff fe83 	bl	8000e8c <_Error_Handler>
  sConfigOC.Pulse = 0;
 8001186:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001188:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118a:	a908      	add	r1, sp, #32
 800118c:	4822      	ldr	r0, [pc, #136]	; (8001218 <MX_TIM1_Init+0x100>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800118e:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8001190:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001192:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001194:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001196:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001198:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119a:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	f002 f936 	bl	800340c <HAL_TIM_PWM_ConfigChannel>
 80011a0:	b118      	cbz	r0, 80011aa <MX_TIM1_Init+0x92>
    _Error_Handler(__FILE__, __LINE__);
 80011a2:	216c      	movs	r1, #108	; 0x6c
 80011a4:	481e      	ldr	r0, [pc, #120]	; (8001220 <MX_TIM1_Init+0x108>)
 80011a6:	f7ff fe71 	bl	8000e8c <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011aa:	2204      	movs	r2, #4
 80011ac:	a908      	add	r1, sp, #32
 80011ae:	481a      	ldr	r0, [pc, #104]	; (8001218 <MX_TIM1_Init+0x100>)
 80011b0:	f002 f92c 	bl	800340c <HAL_TIM_PWM_ConfigChannel>
 80011b4:	b118      	cbz	r0, 80011be <MX_TIM1_Init+0xa6>
    _Error_Handler(__FILE__, __LINE__);
 80011b6:	2171      	movs	r1, #113	; 0x71
 80011b8:	4819      	ldr	r0, [pc, #100]	; (8001220 <MX_TIM1_Init+0x108>)
 80011ba:	f7ff fe67 	bl	8000e8c <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011be:	2208      	movs	r2, #8
 80011c0:	a908      	add	r1, sp, #32
 80011c2:	4815      	ldr	r0, [pc, #84]	; (8001218 <MX_TIM1_Init+0x100>)
 80011c4:	f002 f922 	bl	800340c <HAL_TIM_PWM_ConfigChannel>
 80011c8:	b118      	cbz	r0, 80011d2 <MX_TIM1_Init+0xba>
    _Error_Handler(__FILE__, __LINE__);
 80011ca:	2176      	movs	r1, #118	; 0x76
 80011cc:	4814      	ldr	r0, [pc, #80]	; (8001220 <MX_TIM1_Init+0x108>)
 80011ce:	f7ff fe5d 	bl	8000e8c <_Error_Handler>
  sBreakDeadTimeConfig.DeadTime = 2;
 80011d2:	2202      	movs	r2, #2
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d4:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011d6:	a90f      	add	r1, sp, #60	; 0x3c
 80011d8:	480f      	ldr	r0, [pc, #60]	; (8001218 <MX_TIM1_Init+0x100>)
  sBreakDeadTimeConfig.DeadTime = 2;
 80011da:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e0:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e2:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e4:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e6:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e8:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ee:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011f0:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011f2:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80011f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011f8:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80011fa:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011fc:	f002 f8c0 	bl	8003380 <HAL_TIMEx_ConfigBreakDeadTime>
 8001200:	b118      	cbz	r0, 800120a <MX_TIM1_Init+0xf2>
    _Error_Handler(__FILE__, __LINE__);
 8001202:	2186      	movs	r1, #134	; 0x86
 8001204:	4806      	ldr	r0, [pc, #24]	; (8001220 <MX_TIM1_Init+0x108>)
 8001206:	f7ff fe41 	bl	8000e8c <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <MX_TIM1_Init+0x100>)
 800120c:	f7ff ff4e 	bl	80010ac <HAL_TIM_MspPostInit>
}
 8001210:	b01b      	add	sp, #108	; 0x6c
 8001212:	f85d fb04 	ldr.w	pc, [sp], #4
 8001216:	bf00      	nop
 8001218:	200040d0 	.word	0x200040d0
 800121c:	40010000 	.word	0x40010000
 8001220:	0800530e 	.word	0x0800530e

08001224 <MX_TIM2_Init>:
  htim2.Instance = TIM2;
 8001224:	4826      	ldr	r0, [pc, #152]	; (80012c0 <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 107;
 8001226:	236b      	movs	r3, #107	; 0x6b
 8001228:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 50000;
 800122c:	f24c 3250 	movw	r2, #50000	; 0xc350
{
 8001230:	b500      	push	{lr}
  htim2.Init.Prescaler = 107;
 8001232:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	2300      	movs	r3, #0
{
 8001238:	b08f      	sub	sp, #60	; 0x3c
  htim2.Init.Period = 50000;
 800123a:	60c2      	str	r2, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001244:	f001 fe78 	bl	8002f38 <HAL_TIM_Base_Init>
 8001248:	b118      	cbz	r0, 8001252 <MX_TIM2_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 800124a:	219b      	movs	r1, #155	; 0x9b
 800124c:	481d      	ldr	r0, [pc, #116]	; (80012c4 <MX_TIM2_Init+0xa0>)
 800124e:	f7ff fe1d 	bl	8000e8c <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001252:	a90e      	add	r1, sp, #56	; 0x38
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001258:	4819      	ldr	r0, [pc, #100]	; (80012c0 <MX_TIM2_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125e:	f001 ff65 	bl	800312c <HAL_TIM_ConfigClockSource>
 8001262:	b118      	cbz	r0, 800126c <MX_TIM2_Init+0x48>
    _Error_Handler(__FILE__, __LINE__);
 8001264:	21a1      	movs	r1, #161	; 0xa1
 8001266:	4817      	ldr	r0, [pc, #92]	; (80012c4 <MX_TIM2_Init+0xa0>)
 8001268:	f7ff fe10 	bl	8000e8c <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800126c:	4814      	ldr	r0, [pc, #80]	; (80012c0 <MX_TIM2_Init+0x9c>)
 800126e:	f001 fe7d 	bl	8002f6c <HAL_TIM_PWM_Init>
 8001272:	b118      	cbz	r0, 800127c <MX_TIM2_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 8001274:	21a6      	movs	r1, #166	; 0xa6
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <MX_TIM2_Init+0xa0>)
 8001278:	f7ff fe08 	bl	8000e8c <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127e:	4669      	mov	r1, sp
 8001280:	480f      	ldr	r0, [pc, #60]	; (80012c0 <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001286:	f002 f855 	bl	8003334 <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	b118      	cbz	r0, 8001294 <MX_TIM2_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
 800128c:	21ad      	movs	r1, #173	; 0xad
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_TIM2_Init+0xa0>)
 8001290:	f7ff fdfc 	bl	8000e8c <_Error_Handler>
  sConfigOC.Pulse = 0;
 8001294:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001296:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001298:	a907      	add	r1, sp, #28
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <MX_TIM2_Init+0x9c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129c:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800129e:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a0:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a2:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a4:	f002 f8b2 	bl	800340c <HAL_TIM_PWM_ConfigChannel>
 80012a8:	b118      	cbz	r0, 80012b2 <MX_TIM2_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 80012aa:	21b6      	movs	r1, #182	; 0xb6
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_TIM2_Init+0xa0>)
 80012ae:	f7ff fded 	bl	8000e8c <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80012b2:	4803      	ldr	r0, [pc, #12]	; (80012c0 <MX_TIM2_Init+0x9c>)
 80012b4:	f7ff fefa 	bl	80010ac <HAL_TIM_MspPostInit>
}
 80012b8:	b00f      	add	sp, #60	; 0x3c
 80012ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80012be:	bf00      	nop
 80012c0:	20004110 	.word	0x20004110
 80012c4:	0800530e 	.word	0x0800530e

080012c8 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80012c8:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_UART4_Init+0x38>)
  huart4.Init.BaudRate = 8000000;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012cc:	220c      	movs	r2, #12
  huart4.Init.BaudRate = 8000000;
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_UART4_Init+0x3c>)
 80012d0:	f8df e038 	ldr.w	lr, [pc, #56]	; 800130c <MX_UART4_Init+0x44>
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012d4:	6142      	str	r2, [r0, #20]
  huart4.Init.BaudRate = 8000000;
 80012d6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	2300      	movs	r3, #0
 80012dc:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012de:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012e0:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e6:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012ea:	f002 fbd2 	bl	8003a92 <HAL_UART_Init>
 80012ee:	b128      	cbz	r0, 80012fc <MX_UART4_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80012f0:	2152      	movs	r1, #82	; 0x52
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_UART4_Init+0x40>)
  }

}
 80012f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80012f8:	f7ff bdc8 	b.w	8000e8c <_Error_Handler>
 80012fc:	bd08      	pop	{r3, pc}
 80012fe:	bf00      	nop
 8001300:	20004300 	.word	0x20004300
 8001304:	40004c00 	.word	0x40004c00
 8001308:	08005321 	.word	0x08005321
 800130c:	007a1200 	.word	0x007a1200

08001310 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001310:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <MX_UART8_Init+0x3c>)
  huart8.Init.BaudRate = 26666666;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001314:	220c      	movs	r2, #12
  huart8.Init.BaudRate = 26666666;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_UART8_Init+0x40>)
 8001318:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8001358 <MX_UART8_Init+0x48>
  huart8.Init.Mode = UART_MODE_TX_RX;
 800131c:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 800131e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart8.Init.BaudRate = 26666666;
 8001322:	e880 4008 	stmia.w	r0, {r3, lr}
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	2300      	movs	r3, #0
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 8001328:	61c2      	str	r2, [r0, #28]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800132c:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800132e:	6103      	str	r3, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001330:	6183      	str	r3, [r0, #24]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001332:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001334:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001336:	f002 fbac 	bl	8003a92 <HAL_UART_Init>
 800133a:	b128      	cbz	r0, 8001348 <MX_UART8_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 800133c:	2166      	movs	r1, #102	; 0x66
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_UART8_Init+0x44>)
  }

}
 8001340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001344:	f7ff bda2 	b.w	8000e8c <_Error_Handler>
 8001348:	bd08      	pop	{r3, pc}
 800134a:	bf00      	nop
 800134c:	20004290 	.word	0x20004290
 8001350:	40007c00 	.word	0x40007c00
 8001354:	08005321 	.word	0x08005321
 8001358:	0196e6aa 	.word	0x0196e6aa

0800135c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800135c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 921600;
 8001360:	f44f 2e61 	mov.w	lr, #921600	; 0xe1000
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART1_UART_Init+0x3c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001366:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 921600;
 8001368:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800136e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001370:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001372:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001374:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800137e:	f002 fb88 	bl	8003a92 <HAL_UART_Init>
 8001382:	b128      	cbz	r0, 8001390 <MX_USART1_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001384:	217b      	movs	r1, #123	; 0x7b
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART1_UART_Init+0x40>)
  }

}
 8001388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800138c:	f7ff bd7e 	b.w	8000e8c <_Error_Handler>
 8001390:	bd08      	pop	{r3, pc}
 8001392:	bf00      	nop
 8001394:	20004220 	.word	0x20004220
 8001398:	40011000 	.word	0x40011000
 800139c:	08005321 	.word	0x08005321

080013a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013a0:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80013a2:	480e      	ldr	r0, [pc, #56]	; (80013dc <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 26666666;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013a4:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 26666666;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART3_UART_Init+0x40>)
 80013a8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80013e8 <MX_USART3_UART_Init+0x48>
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013ac:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80013ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart3.Init.BaudRate = 26666666;
 80013b2:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	2300      	movs	r3, #0
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80013b8:	61c2      	str	r2, [r0, #28]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013bc:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013be:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c0:	6183      	str	r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013c6:	f002 fb64 	bl	8003a92 <HAL_UART_Init>
 80013ca:	b128      	cbz	r0, 80013d8 <MX_USART3_UART_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 80013cc:	2190      	movs	r1, #144	; 0x90
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART3_UART_Init+0x44>)
  }

}
 80013d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80013d4:	f7ff bd5a 	b.w	8000e8c <_Error_Handler>
 80013d8:	bd08      	pop	{r3, pc}
 80013da:	bf00      	nop
 80013dc:	200041b0 	.word	0x200041b0
 80013e0:	40004800 	.word	0x40004800
 80013e4:	08005321 	.word	0x08005321
 80013e8:	0196e6aa 	.word	0x0196e6aa

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 80013ec:	6803      	ldr	r3, [r0, #0]
 80013ee:	4a47      	ldr	r2, [pc, #284]	; (800150c <HAL_UART_MspInit+0x120>)
 80013f0:	4293      	cmp	r3, r2
{
 80013f2:	b530      	push	{r4, r5, lr}
 80013f4:	4605      	mov	r5, r0
 80013f6:	b08b      	sub	sp, #44	; 0x2c
  if(uartHandle->Instance==UART4)
 80013f8:	d137      	bne.n	800146a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013fa:	4b45      	ldr	r3, [pc, #276]	; (8001510 <HAL_UART_MspInit+0x124>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	a905      	add	r1, sp, #20
 80013fe:	4845      	ldr	r0, [pc, #276]	; (8001514 <HAL_UART_MspInit+0x128>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001400:	6c1a      	ldr	r2, [r3, #64]	; 0x40

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001402:	4c45      	ldr	r4, [pc, #276]	; (8001518 <HAL_UART_MspInit+0x12c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001404:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001408:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2202      	movs	r2, #2
    __HAL_RCC_UART4_CLK_ENABLE();
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001410:	2201      	movs	r2, #1
    __HAL_RCC_UART4_CLK_ENABLE();
 8001412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001416:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART4_CLK_ENABLE();
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800141c:	2303      	movs	r3, #3
 800141e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001422:	2308      	movs	r3, #8
 8001424:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f000 fc7d 	bl	8001d24 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800142e:	483b      	ldr	r0, [pc, #236]	; (800151c <HAL_UART_MspInit+0x130>)
 8001430:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001434:	6122      	str	r2, [r4, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001436:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800143a:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800143e:	61e2      	str	r2, [r4, #28]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001440:	2300      	movs	r3, #0
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001442:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001446:	4620      	mov	r0, r4
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001448:	60a3      	str	r3, [r4, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144a:	60e3      	str	r3, [r4, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144c:	6163      	str	r3, [r4, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800144e:	61a3      	str	r3, [r4, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001450:	6222      	str	r2, [r4, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001452:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001454:	f000 faec 	bl	8001a30 <HAL_DMA_Init>
 8001458:	b118      	cbz	r0, 8001462 <HAL_UART_MspInit+0x76>
    {
      _Error_Handler(__FILE__, __LINE__);
 800145a:	21ba      	movs	r1, #186	; 0xba
 800145c:	4830      	ldr	r0, [pc, #192]	; (8001520 <HAL_UART_MspInit+0x134>)
 800145e:	f7ff fd15 	bl	8000e8c <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001462:	666c      	str	r4, [r5, #100]	; 0x64
 8001464:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001466:	b00b      	add	sp, #44	; 0x2c
 8001468:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==UART8)
 800146a:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <HAL_UART_MspInit+0x138>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d117      	bne.n	80014a0 <HAL_UART_MspInit+0xb4>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_UART_MspInit+0x124>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001472:	a905      	add	r1, sp, #20
 8001474:	482c      	ldr	r0, [pc, #176]	; (8001528 <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8001476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001478:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800147c:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2202      	movs	r2, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001484:	2201      	movs	r2, #1
    __HAL_RCC_UART8_CLK_ENABLE();
 8001486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148a:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART8_CLK_ENABLE();
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001490:	2303      	movs	r3, #3
 8001492:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001496:	2308      	movs	r3, #8
 8001498:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149a:	f000 fc43 	bl	8001d24 <HAL_GPIO_Init>
}
 800149e:	e7e2      	b.n	8001466 <HAL_UART_MspInit+0x7a>
  else if(uartHandle->Instance==USART1)
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <HAL_UART_MspInit+0x140>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d117      	bne.n	80014d6 <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_UART_MspInit+0x124>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	a905      	add	r1, sp, #20
 80014aa:	481a      	ldr	r0, [pc, #104]	; (8001514 <HAL_UART_MspInit+0x128>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ae:	f042 0210 	orr.w	r2, r2, #16
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	9303      	str	r3, [sp, #12]
 80014bc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014d0:	2307      	movs	r3, #7
 80014d2:	9309      	str	r3, [sp, #36]	; 0x24
 80014d4:	e7e1      	b.n	800149a <HAL_UART_MspInit+0xae>
  else if(uartHandle->Instance==USART3)
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_UART_MspInit+0x144>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d1c4      	bne.n	8001466 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_UART_MspInit+0x124>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014de:	a905      	add	r1, sp, #20
 80014e0:	4814      	ldr	r0, [pc, #80]	; (8001534 <HAL_UART_MspInit+0x148>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80014e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014f0:	9304      	str	r3, [sp, #16]
 80014f2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fe:	2301      	movs	r3, #1
 8001500:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001506:	2307      	movs	r3, #7
 8001508:	9309      	str	r3, [sp, #36]	; 0x24
 800150a:	e7c6      	b.n	800149a <HAL_UART_MspInit+0xae>
 800150c:	40004c00 	.word	0x40004c00
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000
 8001518:	20004150 	.word	0x20004150
 800151c:	40026040 	.word	0x40026040
 8001520:	08005321 	.word	0x08005321
 8001524:	40007c00 	.word	0x40007c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40011000 	.word	0x40011000
 8001530:	40004800 	.word	0x40004800
 8001534:	40020c00 	.word	0x40020c00

08001538 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8001538:	b508      	push	{r3, lr}

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_USB_OTG_HS_PCD_Init+0x38>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800153c:	2309      	movs	r3, #9
 800153e:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <MX_USB_OTG_HS_PCD_Init+0x3c>)
 8001540:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001544:	2300      	movs	r3, #0
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001546:	2201      	movs	r2, #1
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001548:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 800154a:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800154c:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800154e:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001550:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001552:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001554:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001556:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001558:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800155a:	f000 fd72 	bl	8002042 <HAL_PCD_Init>
 800155e:	b128      	cbz	r0, 800156c <MX_USB_OTG_HS_PCD_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001560:	214f      	movs	r1, #79	; 0x4f
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USB_OTG_HS_PCD_Init+0x40>)
  }

}
 8001564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001568:	f7ff bc90 	b.w	8000e8c <_Error_Handler>
 800156c:	bd08      	pop	{r3, pc}
 800156e:	bf00      	nop
 8001570:	20004370 	.word	0x20004370
 8001574:	40040000 	.word	0x40040000
 8001578:	08005336 	.word	0x08005336

0800157c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 800157c:	6802      	ldr	r2, [r0, #0]
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_PCD_MspInit+0x7c>)
 8001580:	429a      	cmp	r2, r3
{
 8001582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001584:	b089      	sub	sp, #36	; 0x24
  if(pcdHandle->Instance==USB_OTG_HS)
 8001586:	d135      	bne.n	80015f4 <HAL_PCD_MspInit+0x78>
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001588:	230d      	movs	r3, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001590:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	a903      	add	r1, sp, #12
 8001594:	4819      	ldr	r0, [pc, #100]	; (80015fc <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001596:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800159e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f000 fbc0 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80015a4:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	a903      	add	r1, sp, #12
 80015a8:	4815      	ldr	r0, [pc, #84]	; (8001600 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80015aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015b2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f000 fbb6 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80015b8:	f643 4323 	movw	r3, #15395	; 0x3c23
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	a903      	add	r1, sp, #12
 80015be:	4811      	ldr	r0, [pc, #68]	; (8001604 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80015c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015c8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f000 fbab 	bl	8001d24 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_PCD_MspInit+0x8c>)
 80015d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
 80015d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015da:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80015de:	9201      	str	r2, [sp, #4]
 80015e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80015e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015e8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80015f4:	b009      	add	sp, #36	; 0x24
 80015f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f8:	40040000 	.word	0x40040000
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40023800 	.word	0x40023800

0800160c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	490f      	ldr	r1, [pc, #60]	; (800164c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800160e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001610:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <SystemInit+0x44>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f042 0201 	orr.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001626:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800162e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001632:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <SystemInit+0x48>)
 8001636:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800163e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001640:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001646:	608b      	str	r3, [r1, #8]
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00
 8001650:	40023800 	.word	0x40023800
 8001654:	24003010 	.word	0x24003010

08001658 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x20>)
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165a:	2003      	movs	r0, #3
{
 800165c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800165e:	6813      	ldr	r3, [r2, #0]
 8001660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001664:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001666:	f000 f825 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff fc9e 	bl	8000fac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001670:	f7ff fc6c 	bl	8000f4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001674:	2000      	movs	r0, #0
 8001676:	bd08      	pop	{r3, pc}
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800167c:	4a02      	ldr	r2, [pc, #8]	; (8001688 <HAL_IncTick+0xc>)
 800167e:	6813      	ldr	r3, [r2, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20004770 	.word	0x20004770

0800168c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800168c:	4b01      	ldr	r3, [pc, #4]	; (8001694 <HAL_GetTick+0x8>)
 800168e:	6818      	ldr	r0, [r3, #0]
}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20004770 	.word	0x20004770

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001698:	b513      	push	{r0, r1, r4, lr}
 800169a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800169c:	f7ff fff6 	bl	800168c <HAL_GetTick>
 80016a0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80016a2:	f7ff fff3 	bl	800168c <HAL_GetTick>
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	1b00      	subs	r0, r0, r4
 80016aa:	4298      	cmp	r0, r3
 80016ac:	d3f9      	bcc.n	80016a2 <HAL_Delay+0xa>
  {
  }
}
 80016ae:	b002      	add	sp, #8
 80016b0:	bd10      	pop	{r4, pc}
	...

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016b6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	0c1b      	lsrs	r3, r3, #16
 80016c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80016ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016d0:	60d3      	str	r3, [r2, #12]
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016da:	b530      	push	{r4, r5, lr}
 80016dc:	68dc      	ldr	r4, [r3, #12]
 80016de:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	bf28      	it	cs
 80016ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f4:	bf8c      	ite	hi
 80016f6:	3c03      	subhi	r4, #3
 80016f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fa:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80016fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f103 33ff 	add.w	r3, r3, #4294967295
 8001704:	ea01 0103 	and.w	r1, r1, r3
 8001708:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	fa05 f404 	lsl.w	r4, r5, r4
 8001710:	f104 34ff 	add.w	r4, r4, #4294967295
 8001714:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	ea42 0201 	orr.w	r2, r2, r1
 800171c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8001720:	da05      	bge.n	800172e <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	f000 000f 	and.w	r0, r0, #15
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_NVIC_SetPriority+0x6c>)
 800172a:	541a      	strb	r2, [r3, r0]
 800172c:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001738:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800173c:	bd30      	pop	{r4, r5, pc}
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00
 8001744:	e000ed14 	.word	0xe000ed14

08001748 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001748:	0942      	lsrs	r2, r0, #5
 800174a:	2301      	movs	r3, #1
 800174c:	f000 001f 	and.w	r0, r0, #31
 8001750:	fa03 f000 	lsl.w	r0, r3, r0
 8001754:	4b01      	ldr	r3, [pc, #4]	; (800175c <HAL_NVIC_EnableIRQ+0x14>)
 8001756:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100

08001760 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	3801      	subs	r0, #1
 8001762:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001766:	d20a      	bcs.n	800177e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	21f0      	movs	r1, #240	; 0xf0
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001770:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800178e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	bf0c      	ite	eq
 8001794:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001798:	f022 0204 	bicne.w	r2, r2, #4
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	4770      	bx	lr
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <DFSDM_GetChannelFromInstance+0x54>)
 80017a6:	4298      	cmp	r0, r3
 80017a8:	d017      	beq.n	80017da <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 80017aa:	3320      	adds	r3, #32
 80017ac:	4298      	cmp	r0, r3
 80017ae:	d016      	beq.n	80017de <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 80017b0:	3320      	adds	r3, #32
 80017b2:	4298      	cmp	r0, r3
 80017b4:	d015      	beq.n	80017e2 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 80017b6:	3320      	adds	r3, #32
 80017b8:	4298      	cmp	r0, r3
 80017ba:	d014      	beq.n	80017e6 <DFSDM_GetChannelFromInstance+0x42>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 80017bc:	3320      	adds	r3, #32
 80017be:	4298      	cmp	r0, r3
 80017c0:	d013      	beq.n	80017ea <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 80017c2:	3320      	adds	r3, #32
 80017c4:	4298      	cmp	r0, r3
 80017c6:	d012      	beq.n	80017ee <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 80017c8:	3320      	adds	r3, #32
 80017ca:	4298      	cmp	r0, r3
 80017cc:	d011      	beq.n	80017f2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
  {
    channel = 7;
 80017ce:	3320      	adds	r3, #32
 80017d0:	4298      	cmp	r0, r3
 80017d2:	bf14      	ite	ne
 80017d4:	20ff      	movne	r0, #255	; 0xff
 80017d6:	2007      	moveq	r0, #7
 80017d8:	4770      	bx	lr
    channel = 0;
 80017da:	2000      	movs	r0, #0
 80017dc:	4770      	bx	lr
    channel = 1;
 80017de:	2001      	movs	r0, #1
 80017e0:	4770      	bx	lr
    channel = 2;
 80017e2:	2002      	movs	r0, #2
 80017e4:	4770      	bx	lr
    channel = 3;
 80017e6:	2003      	movs	r0, #3
 80017e8:	4770      	bx	lr
    channel = 4;
 80017ea:	2004      	movs	r0, #4
 80017ec:	4770      	bx	lr
    channel = 5;
 80017ee:	2005      	movs	r0, #5
 80017f0:	4770      	bx	lr
    channel = 6;
 80017f2:	2006      	movs	r0, #6
  }

  return channel;
}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40017400 	.word	0x40017400

080017fc <HAL_DFSDM_ChannelInit>:
{
 80017fc:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 80017fe:	4604      	mov	r4, r0
 8001800:	2800      	cmp	r0, #0
 8001802:	d067      	beq.n	80018d4 <HAL_DFSDM_ChannelInit+0xd8>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001804:	4d34      	ldr	r5, [pc, #208]	; (80018d8 <HAL_DFSDM_ChannelInit+0xdc>)
 8001806:	6800      	ldr	r0, [r0, #0]
 8001808:	f7ff ffcc 	bl	80017a4 <DFSDM_GetChannelFromInstance>
 800180c:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d15f      	bne.n	80018d4 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff f895 	bl	8000944 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 800181a:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_DFSDM_ChannelInit+0xe0>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	3201      	adds	r2, #1
 8001820:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d119      	bne.n	800185c <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_DFSDM_ChannelInit+0xe4>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001830:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68a1      	ldr	r1, [r4, #8]
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001840:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001842:	7922      	ldrb	r2, [r4, #4]
 8001844:	2a01      	cmp	r2, #1
 8001846:	d105      	bne.n	8001854 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8001848:	68e1      	ldr	r1, [r4, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	3901      	subs	r1, #1
 800184e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001852:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800185a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800185c:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800185e:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001860:	6803      	ldr	r3, [r0, #0]
 8001862:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8001866:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001868:	6923      	ldr	r3, [r4, #16]
 800186a:	6802      	ldr	r2, [r0, #0]
 800186c:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800186e:	69a1      	ldr	r1, [r4, #24]
 8001870:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001872:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001874:	4313      	orrs	r3, r2
 8001876:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001878:	6803      	ldr	r3, [r0, #0]
 800187a:	f023 030f 	bic.w	r3, r3, #15
 800187e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001880:	69e3      	ldr	r3, [r4, #28]
 8001882:	6802      	ldr	r2, [r0, #0]
 8001884:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001886:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001888:	4313      	orrs	r3, r2
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800188a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800188c:	6003      	str	r3, [r0, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800188e:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001890:	6883      	ldr	r3, [r0, #8]
 8001892:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8001896:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001898:	6883      	ldr	r3, [r0, #8]
 800189a:	430b      	orrs	r3, r1
 800189c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80018a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80018a2:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018a4:	6843      	ldr	r3, [r0, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80018ac:	6843      	ldr	r3, [r0, #4]
 80018ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018b8:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80018ba:	6803      	ldr	r3, [r0, #0]
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80018c8:	f7ff ff6c 	bl	80017a4 <DFSDM_GetChannelFromInstance>
 80018cc:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 80018d0:	2000      	movs	r0, #0
 80018d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
}
 80018d6:	bd38      	pop	{r3, r4, r5, pc}
 80018d8:	2000002c 	.word	0x2000002c
 80018dc:	2000004c 	.word	0x2000004c
 80018e0:	40017400 	.word	0x40017400

080018e4 <HAL_DFSDM_FilterInit>:
{
 80018e4:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_filter == NULL)
 80018e6:	4604      	mov	r4, r0
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d069      	beq.n	80019c0 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80018ec:	6802      	ldr	r2, [r0, #0]
 80018ee:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <HAL_DFSDM_FilterInit+0xe0>)
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d105      	bne.n	8001900 <HAL_DFSDM_FilterInit+0x1c>
 80018f4:	6840      	ldr	r0, [r0, #4]
 80018f6:	2801      	cmp	r0, #1
 80018f8:	d063      	beq.n	80019c2 <HAL_DFSDM_FilterInit+0xde>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80018fa:	68e0      	ldr	r0, [r4, #12]
 80018fc:	2801      	cmp	r0, #1
 80018fe:	d060      	beq.n	80019c2 <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001900:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001902:	2201      	movs	r2, #1
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001904:	4620      	mov	r0, r4
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001906:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001908:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800190a:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800190c:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800190e:	f7fe ff7d 	bl	800080c <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800191a:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800191c:	7a22      	ldrb	r2, [r4, #8]
 800191e:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	bf0c      	ite	eq
 8001924:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001928:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 800192c:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800192e:	7a62      	ldrb	r2, [r4, #9]
 8001930:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	bf0c      	ite	eq
 8001936:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800193a:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 800193e:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001940:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001942:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001944:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001948:	2d02      	cmp	r5, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800194a:	f022 0208 	bic.w	r2, r2, #8
 800194e:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001950:	d103      	bne.n	800195a <HAL_DFSDM_FilterInit+0x76>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	6961      	ldr	r1, [r4, #20]
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800195a:	7c20      	ldrb	r0, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800195c:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800195e:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001960:	bf0c      	ite	eq
 8001962:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001966:	f022 0210 	bicne.w	r2, r2, #16
 800196a:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800196c:	7c62      	ldrb	r2, [r4, #17]
 800196e:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	bf0c      	ite	eq
 8001974:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001978:	f022 0220 	bicne.w	r2, r2, #32
 800197c:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8001984:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001988:	615a      	str	r2, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800198a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800198c:	6959      	ldr	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800198e:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001990:	430a      	orrs	r2, r1
 8001992:	69e1      	ldr	r1, [r4, #28]
 8001994:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8001996:	6a21      	ldr	r1, [r4, #32]
 8001998:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800199a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800199e:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80019a0:	6862      	ldr	r2, [r4, #4]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80019a2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80019a6:	2000      	movs	r0, #0
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80019a8:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80019aa:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80019ac:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80019ae:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 80019be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
}
 80019c2:	bd38      	pop	{r3, r4, r5, pc}
 80019c4:	40017500 	.word	0x40017500

080019c8 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 80019c8:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2bfd      	cmp	r3, #253	; 0xfd
{
 80019d2:	b510      	push	{r4, lr}
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 80019d4:	d813      	bhi.n	80019fe <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80019d6:	6803      	ldr	r3, [r0, #0]
 80019d8:	0209      	lsls	r1, r1, #8
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80019da:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80019dc:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80019de:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80019e2:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80019e6:	bf08      	it	eq
 80019e8:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80019ec:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80019f0:	601c      	str	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80019f2:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80019f4:	4321      	orrs	r1, r4
 80019f6:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80019f8:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80019fa:	2000      	movs	r0, #0
 80019fc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80019fe:	2001      	movs	r0, #1
}
 8001a00:	bd10      	pop	{r4, pc}
	...

08001a04 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a04:	6803      	ldr	r3, [r0, #0]
 8001a06:	2118      	movs	r1, #24
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a0e:	3a10      	subs	r2, #16
 8001a10:	f023 0303 	bic.w	r3, r3, #3
 8001a14:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a18:	4904      	ldr	r1, [pc, #16]	; (8001a2c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001a1a:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a1c:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a1e:	bf88      	it	hi
 8001a20:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a22:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a24:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001a26:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	08005365 	.word	0x08005365

08001a30 <HAL_DMA_Init>:
{
 8001a30:	b570      	push	{r4, r5, r6, lr}
 8001a32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff fe2a 	bl	800168c <HAL_GetTick>
 8001a38:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001a3a:	2c00      	cmp	r4, #0
 8001a3c:	d071      	beq.n	8001b22 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001a3e:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8001a40:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001a42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a46:	2302      	movs	r3, #2
 8001a48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001a4c:	6813      	ldr	r3, [r2, #0]
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a54:	6821      	ldr	r1, [r4, #0]
 8001a56:	680b      	ldr	r3, [r1, #0]
 8001a58:	07d8      	lsls	r0, r3, #31
 8001a5a:	d43c      	bmi.n	8001ad6 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001a5c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a5e:	4d32      	ldr	r5, [pc, #200]	; (8001b28 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a60:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a62:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a64:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a66:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	68e2      	ldr	r2, [r4, #12]
 8001a6c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6e:	6922      	ldr	r2, [r4, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	6962      	ldr	r2, [r4, #20]
 8001a74:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a76:	69e2      	ldr	r2, [r4, #28]
 8001a78:	4303      	orrs	r3, r0
 8001a7a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7c:	6a22      	ldr	r2, [r4, #32]
 8001a7e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a82:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a84:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a88:	bf01      	itttt	eq
 8001a8a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001a8c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001a8e:	4335      	orreq	r5, r6
 8001a90:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a92:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001a94:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001a96:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a98:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001a9c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa0:	d10b      	bne.n	8001aba <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001aa2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aa4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001aa6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aa8:	b13d      	cbz	r5, 8001aba <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aaa:	b9f8      	cbnz	r0, 8001aec <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001aac:	2a01      	cmp	r2, #1
 8001aae:	d02d      	beq.n	8001b0c <HAL_DMA_Init+0xdc>
 8001ab0:	d301      	bcc.n	8001ab6 <HAL_DMA_Init+0x86>
 8001ab2:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ab4:	d101      	bne.n	8001aba <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ab6:	01ea      	lsls	r2, r5, #7
 8001ab8:	d42b      	bmi.n	8001b12 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001aba:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001abc:	4620      	mov	r0, r4
 8001abe:	f7ff ffa1 	bl	8001a04 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ac4:	233f      	movs	r3, #63	; 0x3f
 8001ac6:	4093      	lsls	r3, r2
 8001ac8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aca:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001acc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ace:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad6:	f7ff fdd9 	bl	800168c <HAL_GetTick>
 8001ada:	1b40      	subs	r0, r0, r5
 8001adc:	2805      	cmp	r0, #5
 8001ade:	d9b9      	bls.n	8001a54 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae0:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ae2:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001aea:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aec:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001af0:	d113      	bne.n	8001b1a <HAL_DMA_Init+0xea>
    switch (tmp)
 8001af2:	2a03      	cmp	r2, #3
 8001af4:	d8e1      	bhi.n	8001aba <HAL_DMA_Init+0x8a>
 8001af6:	a001      	add	r0, pc, #4	; (adr r0, 8001afc <HAL_DMA_Init+0xcc>)
 8001af8:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001afc:	08001b13 	.word	0x08001b13
 8001b00:	08001ab7 	.word	0x08001ab7
 8001b04:	08001b13 	.word	0x08001b13
 8001b08:	08001b0d 	.word	0x08001b0d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b0c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001b10:	d1d3      	bne.n	8001aba <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b12:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001b14:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b16:	6563      	str	r3, [r4, #84]	; 0x54
 8001b18:	e7e5      	b.n	8001ae6 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001b1a:	2a02      	cmp	r2, #2
 8001b1c:	d9f9      	bls.n	8001b12 <HAL_DMA_Init+0xe2>
 8001b1e:	2a03      	cmp	r2, #3
 8001b20:	e7c8      	b.n	8001ab4 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001b22:	2001      	movs	r0, #1
 8001b24:	bd70      	pop	{r4, r5, r6, pc}
 8001b26:	bf00      	nop
 8001b28:	e010803f 	.word	0xe010803f

08001b2c <HAL_DMA_Start_IT>:
{
 8001b2c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001b2e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001b32:	2c01      	cmp	r4, #1
 8001b34:	d035      	beq.n	8001ba2 <HAL_DMA_Start_IT+0x76>
 8001b36:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b38:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001b3a:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8001b3c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b40:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001b44:	2c01      	cmp	r4, #1
 8001b46:	f04f 0402 	mov.w	r4, #2
 8001b4a:	d128      	bne.n	8001b9e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b4c:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b50:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b52:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b54:	6825      	ldr	r5, [r4, #0]
 8001b56:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001b5a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001b5c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b5e:	6883      	ldr	r3, [r0, #8]
 8001b60:	2b40      	cmp	r3, #64	; 0x40
 8001b62:	d119      	bne.n	8001b98 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8001b64:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001b66:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b68:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001b6a:	233f      	movs	r3, #63	; 0x3f
 8001b6c:	4093      	lsls	r3, r2
 8001b6e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	f043 0316 	orr.w	r3, r3, #22
 8001b76:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001b78:	6963      	ldr	r3, [r4, #20]
 8001b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001b80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b82:	b11b      	cbz	r3, 8001b8c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b8c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8001b98:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b9a:	60e2      	str	r2, [r4, #12]
 8001b9c:	e7e4      	b.n	8001b68 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8001b9e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001ba2:	2002      	movs	r0, #2
}
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ba8 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8001ba8:	2300      	movs	r3, #0
{
 8001baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001bac:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bae:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001bb0:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <HAL_DMA_IRQHandler+0x170>)
{
 8001bb2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8001bb6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001bba:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4216      	tst	r6, r2
 8001bc0:	d00c      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bc2:	6801      	ldr	r1, [r0, #0]
 8001bc4:	6808      	ldr	r0, [r1, #0]
 8001bc6:	0740      	lsls	r0, r0, #29
 8001bc8:	d508      	bpl.n	8001bdc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bca:	6808      	ldr	r0, [r1, #0]
 8001bcc:	f020 0004 	bic.w	r0, r0, #4
 8001bd0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bd2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bdc:	4a4f      	ldr	r2, [pc, #316]	; (8001d1c <HAL_DMA_IRQHandler+0x174>)
 8001bde:	409a      	lsls	r2, r3
 8001be0:	4216      	tst	r6, r2
 8001be2:	d008      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001be4:	6821      	ldr	r1, [r4, #0]
 8001be6:	6949      	ldr	r1, [r1, #20]
 8001be8:	0609      	lsls	r1, r1, #24
 8001bea:	d504      	bpl.n	8001bf6 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bec:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001bf0:	f042 0202 	orr.w	r2, r2, #2
 8001bf4:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf6:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_DMA_IRQHandler+0x178>)
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	4216      	tst	r6, r2
 8001bfc:	d008      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bfe:	6821      	ldr	r1, [r4, #0]
 8001c00:	6809      	ldr	r1, [r1, #0]
 8001c02:	0788      	lsls	r0, r1, #30
 8001c04:	d504      	bpl.n	8001c10 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c06:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c08:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001c0a:	f042 0204 	orr.w	r2, r2, #4
 8001c0e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c10:	2210      	movs	r2, #16
 8001c12:	409a      	lsls	r2, r3
 8001c14:	4216      	tst	r6, r2
 8001c16:	d010      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	0709      	lsls	r1, r1, #28
 8001c1e:	d50c      	bpl.n	8001c3a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c20:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	0350      	lsls	r0, r2, #13
 8001c26:	d535      	bpl.n	8001c94 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0319      	lsls	r1, r3, #12
 8001c2c:	d401      	bmi.n	8001c32 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001c2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c30:	e000      	b.n	8001c34 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001c34:	b10b      	cbz	r3, 8001c3a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001c36:	4620      	mov	r0, r4
 8001c38:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	408a      	lsls	r2, r1
 8001c40:	4216      	tst	r6, r2
 8001c42:	d038      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	06c6      	lsls	r6, r0, #27
 8001c4a:	d534      	bpl.n	8001cb6 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c4c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c4e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001c52:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c54:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c56:	d125      	bne.n	8001ca4 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c58:	f022 0216 	bic.w	r2, r2, #22
 8001c5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c64:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c68:	b90a      	cbnz	r2, 8001c6e <HAL_DMA_IRQHandler+0xc6>
 8001c6a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001c6c:	b11a      	cbz	r2, 8001c76 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	f022 0208 	bic.w	r2, r2, #8
 8001c74:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c76:	233f      	movs	r3, #63	; 0x3f
 8001c78:	408b      	lsls	r3, r1
 8001c7a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001c88:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001c8a:	b10b      	cbz	r3, 8001c90 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	4798      	blx	r3
}
 8001c90:	b003      	add	sp, #12
 8001c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	05d2      	lsls	r2, r2, #23
 8001c98:	d4c9      	bmi.n	8001c2e <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f022 0208 	bic.w	r2, r2, #8
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e7c4      	b.n	8001c2e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca4:	0350      	lsls	r0, r2, #13
 8001ca6:	d528      	bpl.n	8001cfa <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0319      	lsls	r1, r3, #12
 8001cac:	d432      	bmi.n	8001d14 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001cae:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001cb0:	b10b      	cbz	r3, 8001cb6 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0e9      	beq.n	8001c90 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cbe:	07da      	lsls	r2, r3, #31
 8001cc0:	d519      	bpl.n	8001cf6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cc2:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001cc4:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001cca:	6813      	ldr	r3, [r2, #0]
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8001cd2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001cd6:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001cda:	9b01      	ldr	r3, [sp, #4]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	429f      	cmp	r7, r3
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	d302      	bcc.n	8001cea <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ce4:	6813      	ldr	r3, [r2, #0]
 8001ce6:	07db      	lsls	r3, r3, #31
 8001ce8:	d4f7      	bmi.n	8001cda <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8001cea:	2300      	movs	r3, #0
 8001cec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001cf6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001cf8:	e7c7      	b.n	8001c8a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001d00:	d108      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	f021 0110 	bic.w	r1, r1, #16
 8001d08:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001d0c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001d10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001d14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d16:	e7cb      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x108>
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	00800001 	.word	0x00800001
 8001d20:	00800004 	.word	0x00800004

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d28:	680b      	ldr	r3, [r1, #0]
{
 8001d2a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001ef0 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d30:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4a6c      	ldr	r2, [pc, #432]	; (8001ee8 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d36:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001ef4 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8001d3a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3e:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8001d40:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d44:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001d48:	45b6      	cmp	lr, r6
 8001d4a:	f040 80b3 	bne.w	8001eb4 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4e:	684c      	ldr	r4, [r1, #4]
 8001d50:	f024 0710 	bic.w	r7, r4, #16
 8001d54:	2f02      	cmp	r7, #2
 8001d56:	d116      	bne.n	8001d86 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001d58:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d5c:	f003 0b07 	and.w	fp, r3, #7
 8001d60:	f04f 0c0f 	mov.w	ip, #15
 8001d64:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001d68:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001d6c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d70:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001d74:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d78:	690d      	ldr	r5, [r1, #16]
 8001d7a:	fa05 f50b 	lsl.w	r5, r5, fp
 8001d7e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001d82:	f8ca 5020 	str.w	r5, [sl, #32]
 8001d86:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d8a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001d8c:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d90:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d94:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d98:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d9a:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d9e:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da0:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001da2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001da6:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8001daa:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dae:	d811      	bhi.n	8001dd4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001db0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001db2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8001db6:	68cf      	ldr	r7, [r1, #12]
 8001db8:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001dbc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001dc0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001dc2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001dc8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001dcc:	409f      	lsls	r7, r3
 8001dce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001dd2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001dd4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dd6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dd8:	688f      	ldr	r7, [r1, #8]
 8001dda:	fa07 f70a 	lsl.w	r7, r7, sl
 8001dde:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001de0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de2:	00e5      	lsls	r5, r4, #3
 8001de4:	d566      	bpl.n	8001eb4 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001dea:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dee:	f003 0e03 	and.w	lr, r3, #3
 8001df2:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8001dfa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dfe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8001e06:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001e0a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001e0e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8001e12:	9503      	str	r5, [sp, #12]
 8001e14:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e16:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8001e1a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e1e:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e22:	4d32      	ldr	r5, [pc, #200]	; (8001eec <HAL_GPIO_Init+0x1c8>)
 8001e24:	42a8      	cmp	r0, r5
 8001e26:	d04c      	beq.n	8001ec2 <HAL_GPIO_Init+0x19e>
 8001e28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e2c:	42a8      	cmp	r0, r5
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_GPIO_Init+0x1a2>
 8001e30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e34:	42a8      	cmp	r0, r5
 8001e36:	d048      	beq.n	8001eca <HAL_GPIO_Init+0x1a6>
 8001e38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e3c:	42a8      	cmp	r0, r5
 8001e3e:	d046      	beq.n	8001ece <HAL_GPIO_Init+0x1aa>
 8001e40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e44:	42a8      	cmp	r0, r5
 8001e46:	d044      	beq.n	8001ed2 <HAL_GPIO_Init+0x1ae>
 8001e48:	4548      	cmp	r0, r9
 8001e4a:	d044      	beq.n	8001ed6 <HAL_GPIO_Init+0x1b2>
 8001e4c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001e50:	42a8      	cmp	r0, r5
 8001e52:	d042      	beq.n	8001eda <HAL_GPIO_Init+0x1b6>
 8001e54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e58:	42a8      	cmp	r0, r5
 8001e5a:	d040      	beq.n	8001ede <HAL_GPIO_Init+0x1ba>
 8001e5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e60:	42a8      	cmp	r0, r5
 8001e62:	d03e      	beq.n	8001ee2 <HAL_GPIO_Init+0x1be>
 8001e64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e68:	42a8      	cmp	r0, r5
 8001e6a:	bf14      	ite	ne
 8001e6c:	250a      	movne	r5, #10
 8001e6e:	2509      	moveq	r5, #9
 8001e70:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e74:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e78:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e7c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8001e82:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	bf0c      	ite	eq
 8001e86:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001e88:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e8a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8001e8e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001e90:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	bf0c      	ite	eq
 8001e94:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001e96:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e98:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001e9c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001e9e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	bf0c      	ite	eq
 8001ea2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001ea4:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001ea8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001eaa:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	bf54      	ite	pl
 8001eae:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001eb0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001eb2:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	f47f af3f 	bne.w	8001d3a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001ebc:	b005      	add	sp, #20
 8001ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ec2:	2500      	movs	r5, #0
 8001ec4:	e7d4      	b.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001ec6:	2501      	movs	r5, #1
 8001ec8:	e7d2      	b.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001eca:	2502      	movs	r5, #2
 8001ecc:	e7d0      	b.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001ece:	2503      	movs	r5, #3
 8001ed0:	e7ce      	b.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001ed2:	2504      	movs	r5, #4
 8001ed4:	e7cc      	b.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001ed6:	2505      	movs	r5, #5
 8001ed8:	e7ca      	b.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001eda:	2506      	movs	r5, #6
 8001edc:	e7c8      	b.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001ede:	2507      	movs	r5, #7
 8001ee0:	e7c6      	b.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001ee2:	2508      	movs	r5, #8
 8001ee4:	e7c4      	b.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001ee6:	bf00      	nop
 8001ee8:	40013c00 	.word	0x40013c00
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40021400 	.word	0x40021400

08001ef8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef8:	b10a      	cbz	r2, 8001efe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001efa:	6181      	str	r1, [r0, #24]
 8001efc:	4770      	bx	lr
 8001efe:	0409      	lsls	r1, r1, #16
 8001f00:	e7fb      	b.n	8001efa <HAL_GPIO_WritePin+0x2>

08001f02 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001f02:	6943      	ldr	r3, [r0, #20]
 8001f04:	4059      	eors	r1, r3
 8001f06:	6141      	str	r1, [r0, #20]
 8001f08:	4770      	bx	lr

08001f0a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f0a:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d04a      	beq.n	8001fa8 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001f12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f1a:	b91b      	cbnz	r3, 8001f24 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f20:	f7fe feb2 	bl	8000c88 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f24:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f26:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f2c:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f38:	6862      	ldr	r2, [r4, #4]
 8001f3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f3e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f4a:	d124      	bne.n	8001f96 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f50:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f52:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f54:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f56:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f58:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f60:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f68:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f6a:	6922      	ldr	r2, [r4, #16]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	69a1      	ldr	r1, [r4, #24]
 8001f70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f74:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f76:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f78:	69e2      	ldr	r2, [r4, #28]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f88:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f8e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001f94:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f9a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f9c:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f9e:	d1d8      	bne.n	8001f52 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	e7d4      	b.n	8001f52 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001fa8:	2001      	movs	r0, #1
}
 8001faa:	bd10      	pop	{r4, pc}

08001fac <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001fac:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	2a20      	cmp	r2, #32
{
 8001fb4:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001fb6:	d11d      	bne.n	8001ff4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d019      	beq.n	8001ff4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc0:	2324      	movs	r3, #36	; 0x24
 8001fc2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fc6:	6803      	ldr	r3, [r0, #0]
 8001fc8:	681c      	ldr	r4, [r3, #0]
 8001fca:	f024 0401 	bic.w	r4, r4, #1
 8001fce:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fd0:	681c      	ldr	r4, [r3, #0]
 8001fd2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001fd6:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fd8:	681c      	ldr	r4, [r3, #0]
 8001fda:	4321      	orrs	r1, r4
 8001fdc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fde:	6819      	ldr	r1, [r3, #0]
 8001fe0:	f041 0101 	orr.w	r1, r1, #1
 8001fe4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001fec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001ff4:	2002      	movs	r0, #2
  }
}
 8001ff6:	bd10      	pop	{r4, pc}

08001ff8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ff8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ffa:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001ffe:	b2e4      	uxtb	r4, r4
 8002000:	2c20      	cmp	r4, #32
 8002002:	d11c      	bne.n	800203e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002004:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002008:	2b01      	cmp	r3, #1
 800200a:	d018      	beq.n	800203e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	2324      	movs	r3, #36	; 0x24
 800200e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002012:	6803      	ldr	r3, [r0, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800201c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800201e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002022:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002026:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002030:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002032:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002036:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800203a:	4618      	mov	r0, r3
 800203c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800203e:	2002      	movs	r0, #2
  }
}
 8002040:	bd10      	pop	{r4, pc}

08002042 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002042:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002044:	4606      	mov	r6, r0
{
 8002046:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8002048:	2800      	cmp	r0, #0
 800204a:	d067      	beq.n	800211c <HAL_PCD_Init+0xda>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800204c:	2303      	movs	r3, #3

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800204e:	4634      	mov	r4, r6

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002050:	466d      	mov	r5, sp
 8002052:	1d37      	adds	r7, r6, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002054:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8002058:	f7ff fa90 	bl	800157c <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 800205c:	f854 0b10 	ldr.w	r0, [r4], #16
 8002060:	f001 fd9d 	bl	8003b9e <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002070:	f106 0410 	add.w	r4, r6, #16
 8002074:	e885 0003 	stmia.w	r5, {r0, r1}
 8002078:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800207c:	6830      	ldr	r0, [r6, #0]

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 800207e:	2501      	movs	r5, #1
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002080:	f001 fd52 	bl	8003b28 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8002084:	2100      	movs	r1, #0
 8002086:	6830      	ldr	r0, [r6, #0]
 8002088:	f001 fd8f 	bl	8003baa <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 800208c:	2100      	movs	r1, #0
 800208e:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8002090:	4632      	mov	r2, r6
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002092:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8002094:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8002098:	321c      	adds	r2, #28
   hpcd->IN_ep[i].tx_fifo_num = i;
 800209a:	8451      	strh	r1, [r2, #34]	; 0x22
 for (i = 0; i < 15 ; i++)
 800209c:	3101      	adds	r1, #1
   hpcd->IN_ep[i].is_in = 1;
 800209e:	7755      	strb	r5, [r2, #29]
 for (i = 0; i < 15 ; i++)
 80020a0:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020a2:	77d0      	strb	r0, [r2, #31]
   hpcd->IN_ep[i].maxpacket =  0;
 80020a4:	6250      	str	r0, [r2, #36]	; 0x24
   hpcd->IN_ep[i].xfer_buff = 0;
 80020a6:	6290      	str	r0, [r2, #40]	; 0x28
   hpcd->IN_ep[i].xfer_len = 0;
 80020a8:	6310      	str	r0, [r2, #48]	; 0x30
 for (i = 0; i < 15 ; i++)
 80020aa:	d1f3      	bne.n	8002094 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0;
   hpcd->OUT_ep[i].xfer_buff = 0;
   hpcd->OUT_ep[i].xfer_len = 0;

   hpcd->Instance->DIEPTXF[i] = 0;
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0;
 80020b2:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 80020b4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->Instance->DIEPTXF[i] = 0;
 80020b8:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->IN_ep[i].tx_fifo_num = i;
 80020bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 for (i = 0; i < 15 ; i++)
 80020be:	3201      	adds	r2, #1
   hpcd->Instance->DIEPTXF[i] = 0;
 80020c0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->OUT_ep[i].is_in = 0;
 80020c4:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
 for (i = 0; i < 15 ; i++)
 80020c8:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020ca:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 80020ce:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 80020d2:	f103 031c 	add.w	r3, r3, #28
   hpcd->OUT_ep[i].xfer_buff = 0;
 80020d6:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0;
 80020da:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   hpcd->Instance->DIEPTXF[i] = 0;
 80020de:	6041      	str	r1, [r0, #4]
 for (i = 0; i < 15 ; i++)
 80020e0:	d1e8      	bne.n	80020b4 <HAL_PCD_Init+0x72>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80020e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e4:	466d      	mov	r5, sp
 80020e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f4:	4670      	mov	r0, lr
 80020f6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80020fa:	f001 fd97 	bl	8003c2c <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 80020fe:	2301      	movs	r3, #1
 8002100:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8002104:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002106:	2b01      	cmp	r3, #1
 8002108:	d102      	bne.n	8002110 <HAL_PCD_Init+0xce>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 800210a:	4630      	mov	r0, r6
 800210c:	f000 f808 	bl	8002120 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 8002110:	6830      	ldr	r0, [r6, #0]
 8002112:	f001 fe31 	bl	8003d78 <USB_DevDisconnect>
 return HAL_OK;
 8002116:	2000      	movs	r0, #0
}
 8002118:	b00b      	add	sp, #44	; 0x2c
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800211c:	2001      	movs	r0, #1
 800211e:	e7fb      	b.n	8002118 <HAL_PCD_Init+0xd6>

08002120 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 8002120:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8002122:	6802      	ldr	r2, [r0, #0]
{
 8002124:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 8002126:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 800212a:	2000      	movs	r0, #0
 800212c:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002130:	6993      	ldr	r3, [r2, #24]
 8002132:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002136:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002138:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800213a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213e:	f043 0303 	orr.w	r3, r3, #3
 8002142:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 8002144:	4770      	bx	lr
	...

08002148 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800214a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800214e:	4c19      	ldr	r4, [pc, #100]	; (80021b4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002168:	f7ff fa90 	bl	800168c <HAL_GetTick>
 800216c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800216e:	6863      	ldr	r3, [r4, #4]
 8002170:	03da      	lsls	r2, r3, #15
 8002172:	d50c      	bpl.n	800218e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800217c:	f7ff fa86 	bl	800168c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002180:	4c0c      	ldr	r4, [pc, #48]	; (80021b4 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8002182:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002184:	6863      	ldr	r3, [r4, #4]
 8002186:	039b      	lsls	r3, r3, #14
 8002188:	d50a      	bpl.n	80021a0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800218a:	2000      	movs	r0, #0
 800218c:	e006      	b.n	800219c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800218e:	f7ff fa7d 	bl	800168c <HAL_GetTick>
 8002192:	1b40      	subs	r0, r0, r5
 8002194:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002198:	d9e9      	bls.n	800216e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800219a:	2003      	movs	r0, #3
}
 800219c:	b003      	add	sp, #12
 800219e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021a0:	f7ff fa74 	bl	800168c <HAL_GetTick>
 80021a4:	1b40      	subs	r0, r0, r5
 80021a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021aa:	d9eb      	bls.n	8002184 <HAL_PWREx_EnableOverDrive+0x3c>
 80021ac:	e7f5      	b.n	800219a <HAL_PWREx_EnableOverDrive+0x52>
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40007000 	.word	0x40007000

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021bc:	4604      	mov	r4, r0
 80021be:	b918      	cbnz	r0, 80021c8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80021c2:	b002      	add	sp, #8
 80021c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c8:	6803      	ldr	r3, [r0, #0]
 80021ca:	07d8      	lsls	r0, r3, #31
 80021cc:	d410      	bmi.n	80021f0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	0799      	lsls	r1, r3, #30
 80021d2:	d45e      	bmi.n	8002292 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	0719      	lsls	r1, r3, #28
 80021d8:	f100 80a3 	bmi.w	8002322 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	075a      	lsls	r2, r3, #29
 80021e0:	f100 80c4 	bmi.w	800236c <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e4:	69a2      	ldr	r2, [r4, #24]
 80021e6:	2a00      	cmp	r2, #0
 80021e8:	f040 812e 	bne.w	8002448 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 80021ec:	2000      	movs	r0, #0
 80021ee:	e7e8      	b.n	80021c2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f0:	4b93      	ldr	r3, [pc, #588]	; (8002440 <HAL_RCC_OscConfig+0x288>)
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	f002 020c 	and.w	r2, r2, #12
 80021f8:	2a04      	cmp	r2, #4
 80021fa:	d007      	beq.n	800220c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	f002 020c 	and.w	r2, r2, #12
 8002202:	2a08      	cmp	r2, #8
 8002204:	d10a      	bne.n	800221c <HAL_RCC_OscConfig+0x64>
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	025a      	lsls	r2, r3, #9
 800220a:	d507      	bpl.n	800221c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	4b8c      	ldr	r3, [pc, #560]	; (8002440 <HAL_RCC_OscConfig+0x288>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	039b      	lsls	r3, r3, #14
 8002212:	d5dc      	bpl.n	80021ce <HAL_RCC_OscConfig+0x16>
 8002214:	6863      	ldr	r3, [r4, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1d9      	bne.n	80021ce <HAL_RCC_OscConfig+0x16>
 800221a:	e7d1      	b.n	80021c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	6863      	ldr	r3, [r4, #4]
 800221e:	4d88      	ldr	r5, [pc, #544]	; (8002440 <HAL_RCC_OscConfig+0x288>)
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d111      	bne.n	800224a <HAL_RCC_OscConfig+0x92>
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800222e:	f7ff fa2d 	bl	800168c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4d83      	ldr	r5, [pc, #524]	; (8002440 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8002234:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	682b      	ldr	r3, [r5, #0]
 8002238:	039f      	lsls	r7, r3, #14
 800223a:	d4c8      	bmi.n	80021ce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fa26 	bl	800168c <HAL_GetTick>
 8002240:	1b80      	subs	r0, r0, r6
 8002242:	2864      	cmp	r0, #100	; 0x64
 8002244:	d9f7      	bls.n	8002236 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002246:	2003      	movs	r0, #3
 8002248:	e7bb      	b.n	80021c2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224a:	b99b      	cbnz	r3, 8002274 <HAL_RCC_OscConfig+0xbc>
 800224c:	682b      	ldr	r3, [r5, #0]
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	602b      	str	r3, [r5, #0]
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800225c:	f7ff fa16 	bl	800168c <HAL_GetTick>
 8002260:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	682b      	ldr	r3, [r5, #0]
 8002264:	0398      	lsls	r0, r3, #14
 8002266:	d5b2      	bpl.n	80021ce <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff fa10 	bl	800168c <HAL_GetTick>
 800226c:	1b80      	subs	r0, r0, r6
 800226e:	2864      	cmp	r0, #100	; 0x64
 8002270:	d9f7      	bls.n	8002262 <HAL_RCC_OscConfig+0xaa>
 8002272:	e7e8      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002278:	682b      	ldr	r3, [r5, #0]
 800227a:	d103      	bne.n	8002284 <HAL_RCC_OscConfig+0xcc>
 800227c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002280:	602b      	str	r3, [r5, #0]
 8002282:	e7d0      	b.n	8002226 <HAL_RCC_OscConfig+0x6e>
 8002284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002288:	602b      	str	r3, [r5, #0]
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002290:	e7cc      	b.n	800222c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002292:	4b6b      	ldr	r3, [pc, #428]	; (8002440 <HAL_RCC_OscConfig+0x288>)
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	f012 0f0c 	tst.w	r2, #12
 800229a:	d007      	beq.n	80022ac <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	f002 020c 	and.w	r2, r2, #12
 80022a2:	2a08      	cmp	r2, #8
 80022a4:	d111      	bne.n	80022ca <HAL_RCC_OscConfig+0x112>
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	0259      	lsls	r1, r3, #9
 80022aa:	d40e      	bmi.n	80022ca <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ac:	4b64      	ldr	r3, [pc, #400]	; (8002440 <HAL_RCC_OscConfig+0x288>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	0792      	lsls	r2, r2, #30
 80022b2:	d502      	bpl.n	80022ba <HAL_RCC_OscConfig+0x102>
 80022b4:	68e2      	ldr	r2, [r4, #12]
 80022b6:	2a01      	cmp	r2, #1
 80022b8:	d182      	bne.n	80021c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	6921      	ldr	r1, [r4, #16]
 80022be:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80022c2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80022c6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c8:	e784      	b.n	80021d4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ca:	68e3      	ldr	r3, [r4, #12]
 80022cc:	4d5c      	ldr	r5, [pc, #368]	; (8002440 <HAL_RCC_OscConfig+0x288>)
 80022ce:	b1bb      	cbz	r3, 8002300 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80022d0:	682b      	ldr	r3, [r5, #0]
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022d8:	f7ff f9d8 	bl	800168c <HAL_GetTick>
 80022dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	682b      	ldr	r3, [r5, #0]
 80022e0:	079f      	lsls	r7, r3, #30
 80022e2:	d507      	bpl.n	80022f4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	6922      	ldr	r2, [r4, #16]
 80022e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80022f0:	602b      	str	r3, [r5, #0]
 80022f2:	e76f      	b.n	80021d4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f4:	f7ff f9ca 	bl	800168c <HAL_GetTick>
 80022f8:	1b80      	subs	r0, r0, r6
 80022fa:	2802      	cmp	r0, #2
 80022fc:	d9ef      	bls.n	80022de <HAL_RCC_OscConfig+0x126>
 80022fe:	e7a2      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002308:	f7ff f9c0 	bl	800168c <HAL_GetTick>
 800230c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	682b      	ldr	r3, [r5, #0]
 8002310:	0798      	lsls	r0, r3, #30
 8002312:	f57f af5f 	bpl.w	80021d4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002316:	f7ff f9b9 	bl	800168c <HAL_GetTick>
 800231a:	1b80      	subs	r0, r0, r6
 800231c:	2802      	cmp	r0, #2
 800231e:	d9f6      	bls.n	800230e <HAL_RCC_OscConfig+0x156>
 8002320:	e791      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002322:	6963      	ldr	r3, [r4, #20]
 8002324:	4d46      	ldr	r5, [pc, #280]	; (8002440 <HAL_RCC_OscConfig+0x288>)
 8002326:	b183      	cbz	r3, 800234a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8002328:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002330:	f7ff f9ac 	bl	800168c <HAL_GetTick>
 8002334:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002338:	079b      	lsls	r3, r3, #30
 800233a:	f53f af4f 	bmi.w	80021dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233e:	f7ff f9a5 	bl	800168c <HAL_GetTick>
 8002342:	1b80      	subs	r0, r0, r6
 8002344:	2802      	cmp	r0, #2
 8002346:	d9f6      	bls.n	8002336 <HAL_RCC_OscConfig+0x17e>
 8002348:	e77d      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800234a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002352:	f7ff f99b 	bl	800168c <HAL_GetTick>
 8002356:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800235a:	079f      	lsls	r7, r3, #30
 800235c:	f57f af3e 	bpl.w	80021dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002360:	f7ff f994 	bl	800168c <HAL_GetTick>
 8002364:	1b80      	subs	r0, r0, r6
 8002366:	2802      	cmp	r0, #2
 8002368:	d9f6      	bls.n	8002358 <HAL_RCC_OscConfig+0x1a0>
 800236a:	e76c      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236c:	4b34      	ldr	r3, [pc, #208]	; (8002440 <HAL_RCC_OscConfig+0x288>)
 800236e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002370:	00d0      	lsls	r0, r2, #3
 8002372:	d427      	bmi.n	80023c4 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002376:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002388:	4d2e      	ldr	r5, [pc, #184]	; (8002444 <HAL_RCC_OscConfig+0x28c>)
 800238a:	682b      	ldr	r3, [r5, #0]
 800238c:	05d9      	lsls	r1, r3, #23
 800238e:	d51b      	bpl.n	80023c8 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	68a3      	ldr	r3, [r4, #8]
 8002392:	4d2b      	ldr	r5, [pc, #172]	; (8002440 <HAL_RCC_OscConfig+0x288>)
 8002394:	2b01      	cmp	r3, #1
 8002396:	d127      	bne.n	80023e8 <HAL_RCC_OscConfig+0x230>
 8002398:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a0:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023a4:	f7ff f972 	bl	800168c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	4f25      	ldr	r7, [pc, #148]	; (8002440 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80023aa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ae:	079b      	lsls	r3, r3, #30
 80023b0:	d53f      	bpl.n	8002432 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80023b2:	2e00      	cmp	r6, #0
 80023b4:	f43f af16 	beq.w	80021e4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b8:	4a21      	ldr	r2, [pc, #132]	; (8002440 <HAL_RCC_OscConfig+0x288>)
 80023ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	e70f      	b.n	80021e4 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80023c4:	2600      	movs	r6, #0
 80023c6:	e7df      	b.n	8002388 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80023d0:	f7ff f95c 	bl	800168c <HAL_GetTick>
 80023d4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d6:	682b      	ldr	r3, [r5, #0]
 80023d8:	05da      	lsls	r2, r3, #23
 80023da:	d4d9      	bmi.n	8002390 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80023dc:	f7ff f956 	bl	800168c <HAL_GetTick>
 80023e0:	1bc0      	subs	r0, r0, r7
 80023e2:	2864      	cmp	r0, #100	; 0x64
 80023e4:	d9f7      	bls.n	80023d6 <HAL_RCC_OscConfig+0x21e>
 80023e6:	e72e      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	b9ab      	cbnz	r3, 8002416 <HAL_RCC_OscConfig+0x25e>
 80023ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	672b      	str	r3, [r5, #112]	; 0x70
 80023f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80023fe:	f7ff f945 	bl	800168c <HAL_GetTick>
 8002402:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002406:	0798      	lsls	r0, r3, #30
 8002408:	d5d3      	bpl.n	80023b2 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7ff f93f 	bl	800168c <HAL_GetTick>
 800240e:	1bc0      	subs	r0, r0, r7
 8002410:	4540      	cmp	r0, r8
 8002412:	d9f7      	bls.n	8002404 <HAL_RCC_OscConfig+0x24c>
 8002414:	e717      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002416:	2b05      	cmp	r3, #5
 8002418:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800241a:	d103      	bne.n	8002424 <HAL_RCC_OscConfig+0x26c>
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	672b      	str	r3, [r5, #112]	; 0x70
 8002422:	e7b9      	b.n	8002398 <HAL_RCC_OscConfig+0x1e0>
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	672b      	str	r3, [r5, #112]	; 0x70
 800242a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	e7b5      	b.n	800239e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7ff f92b 	bl	800168c <HAL_GetTick>
 8002436:	eba0 0008 	sub.w	r0, r0, r8
 800243a:	42a8      	cmp	r0, r5
 800243c:	d9b6      	bls.n	80023ac <HAL_RCC_OscConfig+0x1f4>
 800243e:	e702      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
 8002440:	40023800 	.word	0x40023800
 8002444:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002448:	4d24      	ldr	r5, [pc, #144]	; (80024dc <HAL_RCC_OscConfig+0x324>)
 800244a:	68ab      	ldr	r3, [r5, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	f43f aeb5 	beq.w	80021c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002456:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002458:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800245a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002460:	d12f      	bne.n	80024c2 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8002462:	f7ff f913 	bl	800168c <HAL_GetTick>
 8002466:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	0199      	lsls	r1, r3, #6
 800246c:	d423      	bmi.n	80024b6 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246e:	6a22      	ldr	r2, [r4, #32]
 8002470:	69e3      	ldr	r3, [r4, #28]
 8002472:	4313      	orrs	r3, r2
 8002474:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002476:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800247a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800247c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002480:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002482:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002486:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002488:	4c14      	ldr	r4, [pc, #80]	; (80024dc <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248a:	0852      	lsrs	r2, r2, #1
 800248c:	3a01      	subs	r2, #1
 800248e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002492:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002494:	682b      	ldr	r3, [r5, #0]
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800249c:	f7ff f8f6 	bl	800168c <HAL_GetTick>
 80024a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	019a      	lsls	r2, r3, #6
 80024a6:	f53f aea1 	bmi.w	80021ec <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024aa:	f7ff f8ef 	bl	800168c <HAL_GetTick>
 80024ae:	1b40      	subs	r0, r0, r5
 80024b0:	2802      	cmp	r0, #2
 80024b2:	d9f6      	bls.n	80024a2 <HAL_RCC_OscConfig+0x2ea>
 80024b4:	e6c7      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7ff f8e9 	bl	800168c <HAL_GetTick>
 80024ba:	1b80      	subs	r0, r0, r6
 80024bc:	2802      	cmp	r0, #2
 80024be:	d9d3      	bls.n	8002468 <HAL_RCC_OscConfig+0x2b0>
 80024c0:	e6c1      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80024c2:	f7ff f8e3 	bl	800168c <HAL_GetTick>
 80024c6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	019b      	lsls	r3, r3, #6
 80024cc:	f57f ae8e 	bpl.w	80021ec <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7ff f8dc 	bl	800168c <HAL_GetTick>
 80024d4:	1b00      	subs	r0, r0, r4
 80024d6:	2802      	cmp	r0, #2
 80024d8:	d9f6      	bls.n	80024c8 <HAL_RCC_OscConfig+0x310>
 80024da:	e6b4      	b.n	8002246 <HAL_RCC_OscConfig+0x8e>
 80024dc:	40023800 	.word	0x40023800

080024e0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0x48>)
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	f002 020c 	and.w	r2, r2, #12
 80024e8:	2a04      	cmp	r2, #4
 80024ea:	d003      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x14>
 80024ec:	2a08      	cmp	r2, #8
 80024ee:	d003      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	480e      	ldr	r0, [pc, #56]	; (800252c <HAL_RCC_GetSysClockFreq+0x4c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024f2:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80024f4:	480e      	ldr	r0, [pc, #56]	; (8002530 <HAL_RCC_GetSysClockFreq+0x50>)
 80024f6:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f8:	685a      	ldr	r2, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024fa:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8002500:	685b      	ldr	r3, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002502:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8002504:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002508:	bf4c      	ite	mi
 800250a:	4809      	ldrmi	r0, [pc, #36]	; (8002530 <HAL_RCC_GetSysClockFreq+0x50>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 800250c:	4807      	ldrpl	r0, [pc, #28]	; (800252c <HAL_RCC_GetSysClockFreq+0x4c>)
 800250e:	fbb0 f0f2 	udiv	r0, r0, r2
 8002512:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <HAL_RCC_GetSysClockFreq+0x48>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800251c:	3301      	adds	r3, #1
 800251e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002520:	fbb0 f0f3 	udiv	r0, r0, r3
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	00f42400 	.word	0x00f42400
 8002530:	007a1200 	.word	0x007a1200

08002534 <HAL_RCC_ClockConfig>:
{
 8002534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002538:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800253a:	4604      	mov	r4, r0
 800253c:	b910      	cbnz	r0, 8002544 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800253e:	2001      	movs	r0, #1
 8002540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4a3f      	ldr	r2, [pc, #252]	; (8002644 <HAL_RCC_ClockConfig+0x110>)
 8002546:	6813      	ldr	r3, [r2, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	428b      	cmp	r3, r1
 800254e:	d328      	bcc.n	80025a2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	6822      	ldr	r2, [r4, #0]
 8002552:	0796      	lsls	r6, r2, #30
 8002554:	d430      	bmi.n	80025b8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002556:	07d0      	lsls	r0, r2, #31
 8002558:	d436      	bmi.n	80025c8 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800255a:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <HAL_RCC_ClockConfig+0x110>)
 800255c:	6813      	ldr	r3, [r2, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	429d      	cmp	r5, r3
 8002564:	d35a      	bcc.n	800261c <HAL_RCC_ClockConfig+0xe8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002566:	6822      	ldr	r2, [r4, #0]
 8002568:	0751      	lsls	r1, r2, #29
 800256a:	d462      	bmi.n	8002632 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	0713      	lsls	r3, r2, #28
 800256e:	d507      	bpl.n	8002580 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002570:	4a35      	ldr	r2, [pc, #212]	; (8002648 <HAL_RCC_ClockConfig+0x114>)
 8002572:	6921      	ldr	r1, [r4, #16]
 8002574:	6893      	ldr	r3, [r2, #8]
 8002576:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800257a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800257e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002580:	f7ff ffae 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCC_ClockConfig+0x114>)
 8002586:	4a31      	ldr	r2, [pc, #196]	; (800264c <HAL_RCC_ClockConfig+0x118>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	40d8      	lsrs	r0, r3
 8002592:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <HAL_RCC_ClockConfig+0x11c>)
 8002594:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe fd08 	bl	8000fac <HAL_InitTick>
  return HAL_OK;
 800259c:	2000      	movs	r0, #0
 800259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	f023 030f 	bic.w	r3, r3, #15
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ac:	6813      	ldr	r3, [r2, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	4299      	cmp	r1, r3
 80025b4:	d1c3      	bne.n	800253e <HAL_RCC_ClockConfig+0xa>
 80025b6:	e7cb      	b.n	8002550 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4923      	ldr	r1, [pc, #140]	; (8002648 <HAL_RCC_ClockConfig+0x114>)
 80025ba:	68a0      	ldr	r0, [r4, #8]
 80025bc:	688b      	ldr	r3, [r1, #8]
 80025be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c2:	4303      	orrs	r3, r0
 80025c4:	608b      	str	r3, [r1, #8]
 80025c6:	e7c6      	b.n	8002556 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c8:	6861      	ldr	r1, [r4, #4]
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <HAL_RCC_ClockConfig+0x114>)
 80025cc:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	d0b2      	beq.n	800253e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d8:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025da:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4e1a      	ldr	r6, [pc, #104]	; (8002648 <HAL_RCC_ClockConfig+0x114>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e0:	f022 0203 	bic.w	r2, r2, #3
 80025e4:	430a      	orrs	r2, r1
 80025e6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80025e8:	f7ff f850 	bl	800168c <HAL_GetTick>
 80025ec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	68b3      	ldr	r3, [r6, #8]
 80025f0:	6862      	ldr	r2, [r4, #4]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025fa:	d0ae      	beq.n	800255a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7ff f846 	bl	800168c <HAL_GetTick>
 8002600:	1bc0      	subs	r0, r0, r7
 8002602:	4540      	cmp	r0, r8
 8002604:	d9f3      	bls.n	80025ee <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 8002606:	2003      	movs	r0, #3
}
 8002608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260c:	2902      	cmp	r1, #2
 800260e:	d102      	bne.n	8002616 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002610:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002614:	e7df      	b.n	80025d6 <HAL_RCC_ClockConfig+0xa2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002616:	f012 0f02 	tst.w	r2, #2
 800261a:	e7dc      	b.n	80025d6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261c:	6813      	ldr	r3, [r2, #0]
 800261e:	f023 030f 	bic.w	r3, r3, #15
 8002622:	432b      	orrs	r3, r5
 8002624:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	6813      	ldr	r3, [r2, #0]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	429d      	cmp	r5, r3
 800262e:	d186      	bne.n	800253e <HAL_RCC_ClockConfig+0xa>
 8002630:	e799      	b.n	8002566 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002632:	4905      	ldr	r1, [pc, #20]	; (8002648 <HAL_RCC_ClockConfig+0x114>)
 8002634:	68e0      	ldr	r0, [r4, #12]
 8002636:	688b      	ldr	r3, [r1, #8]
 8002638:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800263c:	4303      	orrs	r3, r0
 800263e:	608b      	str	r3, [r1, #8]
 8002640:	e794      	b.n	800256c <HAL_RCC_ClockConfig+0x38>
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00
 8002648:	40023800 	.word	0x40023800
 800264c:	0800534d 	.word	0x0800534d
 8002650:	20000000 	.word	0x20000000

08002654 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002654:	4b01      	ldr	r3, [pc, #4]	; (800265c <HAL_RCC_GetHCLKFreq+0x8>)
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000000 	.word	0x20000000

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	4a03      	ldr	r2, [pc, #12]	; (800267c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800266e:	6810      	ldr	r0, [r2, #0]
}
 8002670:	40d8      	lsrs	r0, r3
 8002672:	4770      	bx	lr
 8002674:	40023800 	.word	0x40023800
 8002678:	0800535d 	.word	0x0800535d
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	4a03      	ldr	r2, [pc, #12]	; (800269c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800268e:	6810      	ldr	r0, [r2, #0]
} 
 8002690:	40d8      	lsrs	r0, r3
 8002692:	4770      	bx	lr
 8002694:	40023800 	.word	0x40023800
 8002698:	0800535d 	.word	0x0800535d
 800269c:	20000000 	.word	0x20000000

080026a0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026a0:	230f      	movs	r3, #15
 80026a2:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_GetClockConfig+0x34>)
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	f002 0203 	and.w	r2, r2, #3
 80026ac:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80026b4:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80026bc:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80026c6:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_RCC_GetClockConfig+0x38>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	600b      	str	r3, [r1, #0]
 80026d2:	4770      	bx	lr
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40023c00 	.word	0x40023c00

080026dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026e0:	6802      	ldr	r2, [r0, #0]
{
 80026e2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026e4:	f012 0601 	ands.w	r6, r2, #1
 80026e8:	d00b      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ea:	4bb8      	ldr	r3, [pc, #736]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80026f2:	6099      	str	r1, [r3, #8]
 80026f4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80026f6:	6899      	ldr	r1, [r3, #8]
 80026f8:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026fa:	fab6 f686 	clz	r6, r6
 80026fe:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002700:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002702:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8002706:	d012      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002708:	49b0      	ldr	r1, [pc, #704]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800270a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800270c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002710:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002714:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8002718:	bf08      	it	eq
 800271a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800271c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002720:	bf16      	itet	ne
 8002722:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8002726:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002728:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800272a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800272e:	02d7      	lsls	r7, r2, #11
 8002730:	d510      	bpl.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002732:	48a6      	ldr	r0, [pc, #664]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002734:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002736:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800273a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800273e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002742:	ea43 0301 	orr.w	r3, r3, r1
 8002746:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800274a:	f000 8189 	beq.w	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x384>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 800274e:	2900      	cmp	r1, #0
 8002750:	bf08      	it	eq
 8002752:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8002754:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002758:	bf18      	it	ne
 800275a:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800275c:	0690      	lsls	r0, r2, #26
 800275e:	d531      	bpl.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002760:	4b9a      	ldr	r3, [pc, #616]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002762:	4f9b      	ldr	r7, [pc, #620]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002766:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277e:	f7fe ff85 	bl	800168c <HAL_GetTick>
 8002782:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	05d9      	lsls	r1, r3, #23
 8002788:	f140 816c 	bpl.w	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x388>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800278c:	4f8f      	ldr	r7, [pc, #572]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800278e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002790:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002794:	f040 8171 	bne.w	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002798:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800279a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800279e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80027a2:	4a8a      	ldr	r2, [pc, #552]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027a4:	f040 818f 	bne.w	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80027a8:	6891      	ldr	r1, [r2, #8]
 80027aa:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80027ae:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80027b2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80027b6:	4301      	orrs	r1, r0
 80027b8:	6091      	str	r1, [r2, #8]
 80027ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027be:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	06df      	lsls	r7, r3, #27
 80027c8:	d50c      	bpl.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027ca:	4a80      	ldr	r2, [pc, #512]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027cc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80027d0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80027d4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80027d8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80027dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027de:	4301      	orrs	r1, r0
 80027e0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e4:	0458      	lsls	r0, r3, #17
 80027e6:	d508      	bpl.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e8:	4978      	ldr	r1, [pc, #480]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027ea:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80027ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027f0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80027f4:	4302      	orrs	r2, r0
 80027f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027fa:	0419      	lsls	r1, r3, #16
 80027fc:	d508      	bpl.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027fe:	4973      	ldr	r1, [pc, #460]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002800:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002802:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002806:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800280a:	4302      	orrs	r2, r0
 800280c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002810:	03da      	lsls	r2, r3, #15
 8002812:	d508      	bpl.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002814:	496d      	ldr	r1, [pc, #436]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002816:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002818:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800281c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002820:	4302      	orrs	r2, r0
 8002822:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002826:	039f      	lsls	r7, r3, #14
 8002828:	d508      	bpl.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800282a:	4968      	ldr	r1, [pc, #416]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800282c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800282e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002832:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002836:	4302      	orrs	r2, r0
 8002838:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800283c:	0658      	lsls	r0, r3, #25
 800283e:	d508      	bpl.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002840:	4962      	ldr	r1, [pc, #392]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002842:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002844:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002848:	f022 0203 	bic.w	r2, r2, #3
 800284c:	4302      	orrs	r2, r0
 800284e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002852:	0619      	lsls	r1, r3, #24
 8002854:	d508      	bpl.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002856:	495d      	ldr	r1, [pc, #372]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002858:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800285a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800285e:	f022 020c 	bic.w	r2, r2, #12
 8002862:	4302      	orrs	r2, r0
 8002864:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002868:	05da      	lsls	r2, r3, #23
 800286a:	d508      	bpl.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800286c:	4957      	ldr	r1, [pc, #348]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800286e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002870:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002874:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002878:	4302      	orrs	r2, r0
 800287a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800287e:	059f      	lsls	r7, r3, #22
 8002880:	d508      	bpl.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002882:	4952      	ldr	r1, [pc, #328]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002884:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002886:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800288a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800288e:	4302      	orrs	r2, r0
 8002890:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002894:	0558      	lsls	r0, r3, #21
 8002896:	d508      	bpl.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002898:	494c      	ldr	r1, [pc, #304]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800289a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800289c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028a4:	4302      	orrs	r2, r0
 80028a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028aa:	0519      	lsls	r1, r3, #20
 80028ac:	d508      	bpl.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028ae:	4947      	ldr	r1, [pc, #284]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80028ba:	4302      	orrs	r2, r0
 80028bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028c0:	04da      	lsls	r2, r3, #19
 80028c2:	d508      	bpl.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028c4:	4941      	ldr	r1, [pc, #260]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028c6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80028c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80028d0:	4302      	orrs	r2, r0
 80028d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028d6:	049f      	lsls	r7, r3, #18
 80028d8:	d508      	bpl.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028da:	493c      	ldr	r1, [pc, #240]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028dc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80028de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028e2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80028e6:	4302      	orrs	r2, r0
 80028e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ec:	0258      	lsls	r0, r3, #9
 80028ee:	d508      	bpl.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028f0:	4936      	ldr	r1, [pc, #216]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028f2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80028f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028f8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80028fc:	4302      	orrs	r2, r0
 80028fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002902:	0299      	lsls	r1, r3, #10
 8002904:	d50c      	bpl.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002906:	4831      	ldr	r0, [pc, #196]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002908:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800290a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 800290e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002912:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8002916:	bf08      	it	eq
 8002918:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800291a:	430a      	orrs	r2, r1
 800291c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002920:	035a      	lsls	r2, r3, #13
 8002922:	d508      	bpl.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002924:	4929      	ldr	r1, [pc, #164]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002926:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002928:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800292c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002930:	4302      	orrs	r2, r0
 8002932:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002936:	021f      	lsls	r7, r3, #8
 8002938:	d509      	bpl.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800293a:	4924      	ldr	r1, [pc, #144]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800293c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002940:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002944:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002948:	4302      	orrs	r2, r0
 800294a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800294e:	0158      	lsls	r0, r3, #5
 8002950:	d509      	bpl.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002952:	491e      	ldr	r1, [pc, #120]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002954:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002958:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800295c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002960:	4302      	orrs	r2, r0
 8002962:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002966:	0119      	lsls	r1, r3, #4
 8002968:	d509      	bpl.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800296a:	4918      	ldr	r1, [pc, #96]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800296c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8002970:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002974:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002978:	4302      	orrs	r2, r0
 800297a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800297e:	00da      	lsls	r2, r3, #3
 8002980:	d509      	bpl.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002982:	4912      	ldr	r1, [pc, #72]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002984:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002988:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800298c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002990:	4302      	orrs	r2, r0
 8002992:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002996:	2e01      	cmp	r6, #1
 8002998:	f000 8099 	beq.w	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800299c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029a0:	f000 8095 	beq.w	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029a4:	2d01      	cmp	r5, #1
 80029a6:	d159      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80029a8:	4d08      	ldr	r5, [pc, #32]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029aa:	682b      	ldr	r3, [r5, #0]
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b0:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b2:	f7fe fe6b 	bl	800168c <HAL_GetTick>
 80029b6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029b8:	682b      	ldr	r3, [r5, #0]
 80029ba:	009f      	lsls	r7, r3, #2
 80029bc:	f100 810b 	bmi.w	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029c0:	6821      	ldr	r1, [r4, #0]
 80029c2:	030d      	lsls	r5, r1, #12
 80029c4:	d506      	bpl.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80029c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029c8:	b143      	cbz	r3, 80029dc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80029ca:	e003      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000
 80029d4:	02c8      	lsls	r0, r1, #11
 80029d6:	d51d      	bpl.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x338>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029da:	b9db      	cbnz	r3, 8002a14 <HAL_RCCEx_PeriphCLKConfig+0x338>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029dc:	4a85      	ldr	r2, [pc, #532]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 80029de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029e2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ea:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80029ee:	4303      	orrs	r3, r0
 80029f0:	6960      	ldr	r0, [r4, #20]
 80029f2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80029f6:	69a0      	ldr	r0, [r4, #24]
 80029f8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80029fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a00:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002a04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a06:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002a0a:	3801      	subs	r0, #1
 8002a0c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002a10:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a14:	028a      	lsls	r2, r1, #10
 8002a16:	d515      	bpl.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002a18:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1e:	d111      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a20:	4a74      	ldr	r2, [pc, #464]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002a22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a26:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a2a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002a2e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002a32:	430b      	orrs	r3, r1
 8002a34:	6961      	ldr	r1, [r4, #20]
 8002a36:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002a3a:	6a21      	ldr	r1, [r4, #32]
 8002a3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a44:	4c6b      	ldr	r4, [pc, #428]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4e:	f7fe fe1d 	bl	800168c <HAL_GetTick>
 8002a52:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	f140 80c4 	bpl.w	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x508>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	e009      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x398>
      plli2sused = 1; 
 8002a60:	2601      	movs	r6, #1
 8002a62:	e677      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a64:	f7fe fe12 	bl	800168c <HAL_GetTick>
 8002a68:	eba0 0008 	sub.w	r0, r0, r8
 8002a6c:	2864      	cmp	r0, #100	; 0x64
 8002a6e:	f67f ae89 	bls.w	8002784 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002a72:	2003      	movs	r0, #3
}
 8002a74:	b003      	add	sp, #12
 8002a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a7c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a80:	4293      	cmp	r3, r2
 8002a82:	f43f ae89 	beq.w	8002798 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a92:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a94:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a9a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002a9c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa0:	07da      	lsls	r2, r3, #31
 8002aa2:	f57f ae79 	bpl.w	8002798 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fdf1 	bl	800168c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002aae:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab2:	079b      	lsls	r3, r3, #30
 8002ab4:	f53f ae70 	bmi.w	8002798 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fde8 	bl	800168c <HAL_GetTick>
 8002abc:	eba0 0008 	sub.w	r0, r0, r8
 8002ac0:	4548      	cmp	r0, r9
 8002ac2:	d9f5      	bls.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8002ac4:	e7d5      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x396>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac6:	6891      	ldr	r1, [r2, #8]
 8002ac8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002acc:	e674      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 8002ace:	4e49      	ldr	r6, [pc, #292]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002ad0:	6833      	ldr	r3, [r6, #0]
 8002ad2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ad6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fdd8 	bl	800168c <HAL_GetTick>
 8002adc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ade:	6833      	ldr	r3, [r6, #0]
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	d472      	bmi.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ae4:	6822      	ldr	r2, [r4, #0]
 8002ae6:	07d7      	lsls	r7, r2, #31
 8002ae8:	d512      	bpl.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002aec:	b983      	cbnz	r3, 8002b10 <HAL_RCCEx_PeriphCLKConfig+0x434>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002aee:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002af2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002afe:	430b      	orrs	r3, r1
 8002b00:	6861      	ldr	r1, [r4, #4]
 8002b02:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002b06:	68a1      	ldr	r1, [r4, #8]
 8002b08:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002b0c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b10:	0316      	lsls	r6, r2, #12
 8002b12:	d503      	bpl.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002b14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8002b1c:	02d0      	lsls	r0, r2, #11
 8002b1e:	d51e      	bpl.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x482>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8002b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b26:	d11a      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b28:	4932      	ldr	r1, [pc, #200]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002b2a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b2e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b36:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002b3a:	4303      	orrs	r3, r0
 8002b3c:	6860      	ldr	r0, [r4, #4]
 8002b3e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002b42:	68e0      	ldr	r0, [r4, #12]
 8002b44:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002b4c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b52:	f020 001f 	bic.w	r0, r0, #31
 8002b56:	3b01      	subs	r3, #1
 8002b58:	4303      	orrs	r3, r0
 8002b5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b5e:	01d1      	lsls	r1, r2, #7
 8002b60:	d511      	bpl.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b62:	4924      	ldr	r1, [pc, #144]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002b64:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b68:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b6c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002b70:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002b74:	4303      	orrs	r3, r0
 8002b76:	6860      	ldr	r0, [r4, #4]
 8002b78:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002b7c:	6920      	ldr	r0, [r4, #16]
 8002b7e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b86:	0192      	lsls	r2, r2, #6
 8002b88:	d50d      	bpl.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b8a:	6923      	ldr	r3, [r4, #16]
 8002b8c:	6862      	ldr	r2, [r4, #4]
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b94:	68e2      	ldr	r2, [r4, #12]
 8002b96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b9a:	68a2      	ldr	r2, [r4, #8]
 8002b9c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002ba0:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002ba2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002ba6:	4e13      	ldr	r6, [pc, #76]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002ba8:	6833      	ldr	r3, [r6, #0]
 8002baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bae:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002bb0:	f7fe fd6c 	bl	800168c <HAL_GetTick>
 8002bb4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bb6:	6833      	ldr	r3, [r6, #0]
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	f53f aef3 	bmi.w	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bbe:	f7fe fd65 	bl	800168c <HAL_GetTick>
 8002bc2:	1bc0      	subs	r0, r0, r7
 8002bc4:	2864      	cmp	r0, #100	; 0x64
 8002bc6:	d9f6      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002bc8:	e753      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bca:	f7fe fd5f 	bl	800168c <HAL_GetTick>
 8002bce:	1bc0      	subs	r0, r0, r7
 8002bd0:	2864      	cmp	r0, #100	; 0x64
 8002bd2:	d984      	bls.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x402>
 8002bd4:	e74d      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bd6:	f7fe fd59 	bl	800168c <HAL_GetTick>
 8002bda:	1b80      	subs	r0, r0, r6
 8002bdc:	2864      	cmp	r0, #100	; 0x64
 8002bde:	f67f aeeb 	bls.w	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002be2:	e746      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002be4:	f7fe fd52 	bl	800168c <HAL_GetTick>
 8002be8:	1b40      	subs	r0, r0, r5
 8002bea:	2864      	cmp	r0, #100	; 0x64
 8002bec:	f67f af32 	bls.w	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002bf0:	e73f      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bf8:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d04e      	beq.n	8002c9e <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c04:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002c08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c0c:	b91b      	cbnz	r3, 8002c16 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c0e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c12:	f7fe f969 	bl	8000ee8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c16:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c18:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c1a:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002c1c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002c20:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c22:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c30:	d932      	bls.n	8002c98 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c32:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c34:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c38:	bf18      	it	ne
 8002c3a:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002c3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c3e:	b92b      	cbnz	r3, 8002c4c <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c40:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002c44:	bf8c      	ite	hi
 8002c46:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002c48:	2301      	movls	r3, #1
 8002c4a:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002c4c:	68a6      	ldr	r6, [r4, #8]
 8002c4e:	6863      	ldr	r3, [r4, #4]
 8002c50:	69a5      	ldr	r5, [r4, #24]
 8002c52:	4333      	orrs	r3, r6
 8002c54:	6926      	ldr	r6, [r4, #16]
 8002c56:	4333      	orrs	r3, r6
 8002c58:	6966      	ldr	r6, [r4, #20]
 8002c5a:	4333      	orrs	r3, r6
 8002c5c:	69e6      	ldr	r6, [r4, #28]
 8002c5e:	4333      	orrs	r3, r6
 8002c60:	6a26      	ldr	r6, [r4, #32]
 8002c62:	4333      	orrs	r3, r6
 8002c64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c66:	4333      	orrs	r3, r6
 8002c68:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002c6c:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002c6e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002c70:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002c74:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	432a      	orrs	r2, r5
 8002c80:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c82:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002c84:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c86:	69cb      	ldr	r3, [r1, #28]
 8002c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c8c:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002c8e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c90:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c92:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c9c:	e7cc      	b.n	8002c38 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002c9e:	2001      	movs	r0, #1
}
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}

08002ca2 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ca2:	6a03      	ldr	r3, [r0, #32]
{
 8002ca4:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca6:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ca8:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cac:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8002cb0:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002cb4:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cb6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002cba:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cbe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002cc0:	6203      	str	r3, [r0, #32]
 8002cc2:	bd10      	pop	{r4, pc}

08002cc4 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc4:	6a03      	ldr	r3, [r0, #32]
 8002cc6:	f023 0310 	bic.w	r3, r3, #16
{
 8002cca:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ccc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cce:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002cd0:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cd2:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002cda:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8002cde:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ce2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ce4:	6203      	str	r3, [r0, #32]
 8002ce6:	bd10      	pop	{r4, pc}

08002ce8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce8:	6803      	ldr	r3, [r0, #0]
}
 8002cea:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
}
 8002cfc:	4770      	bx	lr

08002cfe <HAL_TIM_PWM_MspInit>:
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_OC_DelayElapsedCallback>:
 8002d00:	4770      	bx	lr

08002d02 <HAL_TIM_IC_CaptureCallback>:
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIM_TriggerCallback>:
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d08:	6803      	ldr	r3, [r0, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	0791      	lsls	r1, r2, #30
{
 8002d0e:	b510      	push	{r4, lr}
 8002d10:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d12:	d50f      	bpl.n	8002d34 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	0792      	lsls	r2, r2, #30
 8002d18:	d50c      	bpl.n	8002d34 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d1a:	f06f 0202 	mvn.w	r2, #2
 8002d1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d20:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002d22:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d24:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002d26:	0799      	lsls	r1, r3, #30
 8002d28:	f000 8085 	beq.w	8002e36 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d2c:	f7ff ffe9 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d30:	2300      	movs	r3, #0
 8002d32:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	0752      	lsls	r2, r2, #29
 8002d3a:	d510      	bpl.n	8002d5e <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	0750      	lsls	r0, r2, #29
 8002d40:	d50d      	bpl.n	8002d5e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d42:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002d4c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002d50:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002d54:	d075      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	f7ff ffd4 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	0711      	lsls	r1, r2, #28
 8002d64:	d50f      	bpl.n	8002d86 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	0712      	lsls	r2, r2, #28
 8002d6a:	d50c      	bpl.n	8002d86 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d6c:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002d70:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d74:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002d76:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d78:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002d7a:	079b      	lsls	r3, r3, #30
 8002d7c:	d067      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	f7ff ffc0 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	2300      	movs	r3, #0
 8002d84:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	06d0      	lsls	r0, r2, #27
 8002d8c:	d510      	bpl.n	8002db0 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	06d1      	lsls	r1, r2, #27
 8002d92:	d50d      	bpl.n	8002db0 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d94:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8002d98:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002d9e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002da0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002da2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002da6:	d058      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002da8:	f7ff ffab 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dac:	2300      	movs	r3, #0
 8002dae:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	07d2      	lsls	r2, r2, #31
 8002db6:	d508      	bpl.n	8002dca <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	07d0      	lsls	r0, r2, #31
 8002dbc:	d505      	bpl.n	8002dca <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dbe:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dc2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dc6:	f7fe f857 	bl	8000e78 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	0611      	lsls	r1, r2, #24
 8002dd0:	d508      	bpl.n	8002de4 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	0612      	lsls	r2, r2, #24
 8002dd6:	d505      	bpl.n	8002de4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002ddc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dde:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002de0:	f000 fb13 	bl	800340a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	05d0      	lsls	r0, r2, #23
 8002dea:	d508      	bpl.n	8002dfe <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	0611      	lsls	r1, r2, #24
 8002df0:	d505      	bpl.n	8002dfe <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002df6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002dfa:	f000 fb06 	bl	800340a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	0652      	lsls	r2, r2, #25
 8002e04:	d508      	bpl.n	8002e18 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	0650      	lsls	r0, r2, #25
 8002e0a:	d505      	bpl.n	8002e18 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002e10:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e12:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002e14:	f7ff ff77 	bl	8002d06 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	0691      	lsls	r1, r2, #26
 8002e1e:	d522      	bpl.n	8002e66 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	0692      	lsls	r2, r2, #26
 8002e24:	d51f      	bpl.n	8002e66 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e26:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002e2a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e2c:	611a      	str	r2, [r3, #16]
}
 8002e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002e32:	f000 bae9 	b.w	8003408 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	f7ff ff63 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff ff62 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e40:	e776      	b.n	8002d30 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	f7ff ff5d 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e46:	4620      	mov	r0, r4
 8002e48:	f7ff ff5c 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e4c:	e785      	b.n	8002d5a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	f7ff ff57 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002e52:	4620      	mov	r0, r4
 8002e54:	f7ff ff56 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e58:	e793      	b.n	8002d82 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5a:	f7ff ff51 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f7ff ff50 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e64:	e7a2      	b.n	8002dac <HAL_TIM_IRQHandler+0xa4>
 8002e66:	bd10      	pop	{r4, pc}

08002e68 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002e68:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002e6a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002e6c:	4290      	cmp	r0, r2
 8002e6e:	d012      	beq.n	8002e96 <TIM_Base_SetConfig+0x2e>
 8002e70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e74:	d00f      	beq.n	8002e96 <TIM_Base_SetConfig+0x2e>
 8002e76:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002e7a:	4290      	cmp	r0, r2
 8002e7c:	d00b      	beq.n	8002e96 <TIM_Base_SetConfig+0x2e>
 8002e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e82:	4290      	cmp	r0, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_Base_SetConfig+0x2e>
 8002e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e8a:	4290      	cmp	r0, r2
 8002e8c:	d003      	beq.n	8002e96 <TIM_Base_SetConfig+0x2e>
 8002e8e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002e92:	4290      	cmp	r0, r2
 8002e94:	d11d      	bne.n	8002ed2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002e96:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e9c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002e9e:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <TIM_Base_SetConfig+0xc4>)
 8002ea0:	4290      	cmp	r0, r2
 8002ea2:	d104      	bne.n	8002eae <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ea8:	68ca      	ldr	r2, [r1, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	e028      	b.n	8002f00 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002eae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002eb2:	d0f7      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
 8002eb4:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <TIM_Base_SetConfig+0xc8>)
 8002eb6:	4290      	cmp	r0, r2
 8002eb8:	d0f4      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
 8002eba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ebe:	4290      	cmp	r0, r2
 8002ec0:	d0f0      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
 8002ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ec6:	4290      	cmp	r0, r2
 8002ec8:	d0ec      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
 8002eca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002ece:	4290      	cmp	r0, r2
 8002ed0:	d0e8      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
 8002ed2:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <TIM_Base_SetConfig+0xcc>)
 8002ed4:	4290      	cmp	r0, r2
 8002ed6:	d0e5      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
 8002ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002edc:	4290      	cmp	r0, r2
 8002ede:	d0e1      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
 8002ee0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ee4:	4290      	cmp	r0, r2
 8002ee6:	d0dd      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
 8002ee8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002eec:	4290      	cmp	r0, r2
 8002eee:	d0d9      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
 8002ef0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ef4:	4290      	cmp	r0, r2
 8002ef6:	d0d5      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
 8002ef8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002efc:	4290      	cmp	r0, r2
 8002efe:	d0d1      	beq.n	8002ea4 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f00:	694a      	ldr	r2, [r1, #20]
 8002f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f06:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002f08:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0a:	688b      	ldr	r3, [r1, #8]
 8002f0c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002f0e:	680b      	ldr	r3, [r1, #0]
 8002f10:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <TIM_Base_SetConfig+0xc4>)
 8002f14:	4298      	cmp	r0, r3
 8002f16:	d006      	beq.n	8002f26 <TIM_Base_SetConfig+0xbe>
 8002f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	d002      	beq.n	8002f26 <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8002f20:	2301      	movs	r3, #1
 8002f22:	6143      	str	r3, [r0, #20]
}
 8002f24:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002f26:	690b      	ldr	r3, [r1, #16]
 8002f28:	6303      	str	r3, [r0, #48]	; 0x30
 8002f2a:	e7f9      	b.n	8002f20 <TIM_Base_SetConfig+0xb8>
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40014000 	.word	0x40014000

08002f38 <HAL_TIM_Base_Init>:
{ 
 8002f38:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	b1a0      	cbz	r0, 8002f68 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f46:	b91b      	cbnz	r3, 8002f50 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002f4c:	f7fe f88a 	bl	8001064 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002f50:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f52:	6820      	ldr	r0, [r4, #0]
 8002f54:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002f56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f5a:	f7ff ff85 	bl	8002e68 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f5e:	2301      	movs	r3, #1
  return HAL_OK;
 8002f60:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002f62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f68:	2001      	movs	r0, #1
}
 8002f6a:	bd10      	pop	{r4, pc}

08002f6c <HAL_TIM_PWM_Init>:
{
 8002f6c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002f6e:	4604      	mov	r4, r0
 8002f70:	b1a0      	cbz	r0, 8002f9c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f7a:	b91b      	cbnz	r3, 8002f84 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;  
 8002f7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002f80:	f7ff febd 	bl	8002cfe <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002f84:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f86:	6820      	ldr	r0, [r4, #0]
 8002f88:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 8002f8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f8e:	f7ff ff6b 	bl	8002e68 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f92:	2301      	movs	r3, #1
  return HAL_OK;
 8002f94:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002f96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f9c:	2001      	movs	r0, #1
}  
 8002f9e:	bd10      	pop	{r4, pc}

08002fa0 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa0:	6a03      	ldr	r3, [r0, #32]
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
{
 8002fa6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002faa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002fac:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002fae:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8002fb0:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8002fb4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fb6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002fba:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002fbe:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8002fc0:	688d      	ldr	r5, [r1, #8]
 8002fc2:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002fc4:	4d0c      	ldr	r5, [pc, #48]	; (8002ff8 <TIM_OC1_SetConfig+0x58>)
 8002fc6:	42a8      	cmp	r0, r5
 8002fc8:	d009      	beq.n	8002fde <TIM_OC1_SetConfig+0x3e>
 8002fca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002fce:	42a8      	cmp	r0, r5
 8002fd0:	d005      	beq.n	8002fde <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8002fd2:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8002fd4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002fd6:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002fd8:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8002fda:	6203      	str	r3, [r0, #32]
} 
 8002fdc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8002fde:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fe0:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fe4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fe6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8002fea:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fec:	694d      	ldr	r5, [r1, #20]
 8002fee:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ff4:	432a      	orrs	r2, r5
 8002ff6:	e7ec      	b.n	8002fd2 <TIM_OC1_SetConfig+0x32>
 8002ff8:	40010000 	.word	0x40010000

08002ffc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ffc:	6a03      	ldr	r3, [r0, #32]
 8002ffe:	f023 0310 	bic.w	r3, r3, #16
{
 8003002:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003004:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003006:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003008:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800300a:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800300c:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003010:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003012:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003016:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 800301a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 800301e:	688d      	ldr	r5, [r1, #8]
 8003020:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003024:	4d0d      	ldr	r5, [pc, #52]	; (800305c <TIM_OC2_SetConfig+0x60>)
 8003026:	42a8      	cmp	r0, r5
 8003028:	d009      	beq.n	800303e <TIM_OC2_SetConfig+0x42>
 800302a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800302e:	42a8      	cmp	r0, r5
 8003030:	d005      	beq.n	800303e <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8003032:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003034:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003036:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003038:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800303a:	6203      	str	r3, [r0, #32]
}
 800303c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800303e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003044:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003046:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800304a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800304e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003050:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003056:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800305a:	e7ea      	b.n	8003032 <TIM_OC2_SetConfig+0x36>
 800305c:	40010000 	.word	0x40010000

08003060 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003060:	6a03      	ldr	r3, [r0, #32]
 8003062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8003066:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003068:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800306a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800306c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800306e:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8003074:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003076:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800307a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800307e:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8003080:	688d      	ldr	r5, [r1, #8]
 8003082:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003086:	4d0e      	ldr	r5, [pc, #56]	; (80030c0 <TIM_OC3_SetConfig+0x60>)
 8003088:	42a8      	cmp	r0, r5
 800308a:	d009      	beq.n	80030a0 <TIM_OC3_SetConfig+0x40>
 800308c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003090:	42a8      	cmp	r0, r5
 8003092:	d005      	beq.n	80030a0 <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8003094:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8003096:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003098:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800309a:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800309c:	6203      	str	r3, [r0, #32]
}
 800309e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80030a0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80030a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80030a6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80030ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80030b0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80030b2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80030b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80030b8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80030bc:	e7ea      	b.n	8003094 <TIM_OC3_SetConfig+0x34>
 80030be:	bf00      	nop
 80030c0:	40010000 	.word	0x40010000

080030c4 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030c4:	6a03      	ldr	r3, [r0, #32]
 80030c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80030ca:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030cc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80030ce:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80030d0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80030d2:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80030d4:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80030d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030de:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80030e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 80030e6:	688d      	ldr	r5, [r1, #8]
 80030e8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80030ec:	4d09      	ldr	r5, [pc, #36]	; (8003114 <TIM_OC4_SetConfig+0x50>)
 80030ee:	42a8      	cmp	r0, r5
 80030f0:	d009      	beq.n	8003106 <TIM_OC4_SetConfig+0x42>
 80030f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030f6:	42a8      	cmp	r0, r5
 80030f8:	d005      	beq.n	8003106 <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 80030fa:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80030fc:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80030fe:	684b      	ldr	r3, [r1, #4]
 8003100:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003102:	6204      	str	r4, [r0, #32]
}
 8003104:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003106:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800310a:	694d      	ldr	r5, [r1, #20]
 800310c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8003110:	e7f3      	b.n	80030fa <TIM_OC4_SetConfig+0x36>
 8003112:	bf00      	nop
 8003114:	40010000 	.word	0x40010000

08003118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003118:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800311a:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 800311c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800311e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003122:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003126:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003128:	6083      	str	r3, [r0, #8]
 800312a:	bd10      	pop	{r4, pc}

0800312c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800312c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003130:	2b01      	cmp	r3, #1
{
 8003132:	b510      	push	{r4, lr}
 8003134:	4604      	mov	r4, r0
 8003136:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800313a:	d018      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003140:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8003142:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003144:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003148:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800314a:	4b3e      	ldr	r3, [pc, #248]	; (8003244 <HAL_TIM_ConfigClockSource+0x118>)
 800314c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800314e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003150:	680b      	ldr	r3, [r1, #0]
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d059      	beq.n	800320a <HAL_TIM_ConfigClockSource+0xde>
 8003156:	d815      	bhi.n	8003184 <HAL_TIM_ConfigClockSource+0x58>
 8003158:	2b10      	cmp	r3, #16
 800315a:	d067      	beq.n	800322c <HAL_TIM_ConfigClockSource+0x100>
 800315c:	d808      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x44>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d05e      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8003162:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003164:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003166:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800316a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800316e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003170:	2b20      	cmp	r3, #32
 8003172:	d061      	beq.n	8003238 <HAL_TIM_ConfigClockSource+0x10c>
 8003174:	2b30      	cmp	r3, #48	; 0x30
 8003176:	d1f4      	bne.n	8003162 <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8003178:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800317a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800317e:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8003182:	e026      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8003184:	2b70      	cmp	r3, #112	; 0x70
 8003186:	d026      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0xaa>
 8003188:	d80e      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x7c>
 800318a:	2b50      	cmp	r3, #80	; 0x50
 800318c:	d032      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0xc8>
 800318e:	2b60      	cmp	r3, #96	; 0x60
 8003190:	d1e7      	bne.n	8003162 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003192:	68ca      	ldr	r2, [r1, #12]
 8003194:	6849      	ldr	r1, [r1, #4]
 8003196:	f7ff fd95 	bl	8002cc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800319a:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800319c:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80031a2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80031a6:	e023      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ac:	d00c      	beq.n	80031c8 <HAL_TIM_ConfigClockSource+0x9c>
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b2:	d1d6      	bne.n	8003162 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 80031b4:	68cb      	ldr	r3, [r1, #12]
 80031b6:	684a      	ldr	r2, [r1, #4]
 80031b8:	6889      	ldr	r1, [r1, #8]
 80031ba:	f7ff ffad 	bl	8003118 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031be:	6822      	ldr	r2, [r4, #0]
 80031c0:	6893      	ldr	r3, [r2, #8]
 80031c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c6:	e013      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80031c8:	6883      	ldr	r3, [r0, #8]
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80031d2:	6083      	str	r3, [r0, #8]
 80031d4:	e7c5      	b.n	8003162 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 80031d6:	68cb      	ldr	r3, [r1, #12]
 80031d8:	684a      	ldr	r2, [r1, #4]
 80031da:	6889      	ldr	r1, [r1, #8]
 80031dc:	f7ff ff9c 	bl	8003118 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031f0:	6093      	str	r3, [r2, #8]
    break;
 80031f2:	e7b6      	b.n	8003162 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80031f4:	68ca      	ldr	r2, [r1, #12]
 80031f6:	6849      	ldr	r1, [r1, #4]
 80031f8:	f7ff fd53 	bl	8002ca2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031fc:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80031fe:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003204:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8003208:	e7f2      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800320a:	68ca      	ldr	r2, [r1, #12]
 800320c:	6849      	ldr	r1, [r1, #4]
 800320e:	f7ff fd48 	bl	8002ca2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003212:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003214:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800321a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800321e:	e7e7      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8003220:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003226:	f043 0307 	orr.w	r3, r3, #7
 800322a:	e7d2      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 800322c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003232:	f043 0317 	orr.w	r3, r3, #23
 8003236:	e7cc      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8003238:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800323e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8003242:	e7c6      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0xa6>
 8003244:	fffe0088 	.word	0xfffe0088

08003248 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003248:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800324a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800324c:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800324e:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 8003250:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003252:	ea23 0304 	bic.w	r3, r3, r4
 8003256:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003258:	6a03      	ldr	r3, [r0, #32]
 800325a:	431a      	orrs	r2, r3
 800325c:	6202      	str	r2, [r0, #32]
 800325e:	bd10      	pop	{r4, pc}

08003260 <HAL_TIM_PWM_Start>:
{
 8003260:	b510      	push	{r4, lr}
 8003262:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003264:	2201      	movs	r2, #1
 8003266:	6800      	ldr	r0, [r0, #0]
 8003268:	f7ff ffee 	bl	8003248 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <HAL_TIM_PWM_Start+0x30>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d003      	beq.n	800327c <HAL_TIM_PWM_Start+0x1c>
 8003274:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003278:	4293      	cmp	r3, r2
 800327a:	d103      	bne.n	8003284 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 800327c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003282:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003284:	681a      	ldr	r2, [r3, #0]
} 
 8003286:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
} 
 800328e:	bd10      	pop	{r4, pc}
 8003290:	40010000 	.word	0x40010000

08003294 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003294:	6a03      	ldr	r3, [r0, #32]
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800329a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800329c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80032a0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032a2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032a4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80032a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80032b2:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80032b4:	688d      	ldr	r5, [r1, #8]
 80032b6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80032ba:	4d09      	ldr	r5, [pc, #36]	; (80032e0 <TIM_OC5_SetConfig+0x4c>)
 80032bc:	42a8      	cmp	r0, r5
 80032be:	d003      	beq.n	80032c8 <TIM_OC5_SetConfig+0x34>
 80032c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032c4:	42a8      	cmp	r0, r5
 80032c6:	d104      	bne.n	80032d2 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032c8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80032cc:	694d      	ldr	r5, [r1, #20]
 80032ce:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032d4:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032d6:	684b      	ldr	r3, [r1, #4]
 80032d8:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80032da:	6202      	str	r2, [r0, #32]
 80032dc:	bd30      	pop	{r4, r5, pc}
 80032de:	bf00      	nop
 80032e0:	40010000 	.word	0x40010000

080032e4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032e4:	6a03      	ldr	r3, [r0, #32]
 80032e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80032ea:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032ec:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80032f0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032f4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80032f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003302:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003306:	688d      	ldr	r5, [r1, #8]
 8003308:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800330c:	4d08      	ldr	r5, [pc, #32]	; (8003330 <TIM_OC6_SetConfig+0x4c>)
 800330e:	42a8      	cmp	r0, r5
 8003310:	d003      	beq.n	800331a <TIM_OC6_SetConfig+0x36>
 8003312:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003316:	42a8      	cmp	r0, r5
 8003318:	d104      	bne.n	8003324 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800331a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800331e:	694d      	ldr	r5, [r1, #20]
 8003320:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003326:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003328:	684b      	ldr	r3, [r1, #4]
 800332a:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800332c:	6202      	str	r2, [r0, #32]
 800332e:	bd30      	pop	{r4, r5, pc}
 8003330:	40010000 	.word	0x40010000

08003334 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8003334:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003338:	2b01      	cmp	r3, #1
{
 800333a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800333c:	d01c      	beq.n	8003378 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 800333e:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003340:	4d0e      	ldr	r5, [pc, #56]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8003342:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003344:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8003346:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003348:	d003      	beq.n	8003352 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800334a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800334e:	42aa      	cmp	r2, r5
 8003350:	d103      	bne.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003356:	684d      	ldr	r5, [r1, #4]
 8003358:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800335a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800335c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003360:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003362:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003366:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003368:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 800336a:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 800336c:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800336e:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8003370:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003374:	4618      	mov	r0, r3
 8003376:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8003378:	2002      	movs	r0, #2
} 
 800337a:	bd30      	pop	{r4, r5, pc}
 800337c:	40010000 	.word	0x40010000

08003380 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8003380:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003384:	2b01      	cmp	r3, #1
 8003386:	f04f 0302 	mov.w	r3, #2
{
 800338a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800338c:	d038      	beq.n	8003400 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800338e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003392:	68cb      	ldr	r3, [r1, #12]
 8003394:	688a      	ldr	r2, [r1, #8]
 8003396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800339a:	4c1a      	ldr	r4, [pc, #104]	; (8003404 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800339c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800339e:	684a      	ldr	r2, [r1, #4]
 80033a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033a6:	680a      	ldr	r2, [r1, #0]
 80033a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033ae:	690a      	ldr	r2, [r1, #16]
 80033b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033b6:	694a      	ldr	r2, [r1, #20]
 80033b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033be:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80033c6:	698a      	ldr	r2, [r1, #24]
 80033c8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80033cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80033d0:	6802      	ldr	r2, [r0, #0]
 80033d2:	42a2      	cmp	r2, r4
 80033d4:	d003      	beq.n	80033de <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 80033d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033da:	42a2      	cmp	r2, r4
 80033dc:	d10c      	bne.n	80033f8 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80033de:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80033e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033e4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033e8:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033ea:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033f2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80033f6:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80033f8:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80033fa:	2300      	movs	r3, #0
 80033fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003400:	4618      	mov	r0, r3
}
 8003402:	bd10      	pop	{r4, pc}
 8003404:	40010000 	.word	0x40010000

08003408 <HAL_TIMEx_CommutationCallback>:
 8003408:	4770      	bx	lr

0800340a <HAL_TIMEx_BreakCallback>:
{
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_PWM_ConfigChannel>:
{
 800340c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800340e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003412:	4604      	mov	r4, r0
 8003414:	460d      	mov	r5, r1
 8003416:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003418:	2b01      	cmp	r3, #1
 800341a:	d010      	beq.n	800343e <HAL_TIM_PWM_ConfigChannel+0x32>
 800341c:	2301      	movs	r3, #1
  switch (Channel)
 800341e:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003424:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003428:	d043      	beq.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0xa6>
 800342a:	d809      	bhi.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x34>
 800342c:	b1fa      	cbz	r2, 800346e <HAL_TIM_PWM_ConfigChannel+0x62>
 800342e:	2a04      	cmp	r2, #4
 8003430:	d02e      	beq.n	8003490 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8003432:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003434:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800343a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800343e:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003440:	2a10      	cmp	r2, #16
 8003442:	d047      	beq.n	80034d4 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8003444:	2a14      	cmp	r2, #20
 8003446:	d056      	beq.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0xea>
 8003448:	2a0c      	cmp	r2, #12
 800344a:	d1f2      	bne.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800344c:	6820      	ldr	r0, [r4, #0]
 800344e:	f7ff fe39 	bl	80030c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003452:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003454:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800346c:	e030      	b.n	80034d0 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800346e:	6820      	ldr	r0, [r4, #0]
 8003470:	f7ff fd96 	bl	8002fa0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003474:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003476:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	f042 0208 	orr.w	r2, r2, #8
 800347e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800348c:	619a      	str	r2, [r3, #24]
    break;
 800348e:	e7d0      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003490:	6820      	ldr	r0, [r4, #0]
 8003492:	f7ff fdb3 	bl	8002ffc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003496:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003498:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034a2:	699a      	ldr	r2, [r3, #24]
 80034a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80034aa:	699a      	ldr	r2, [r3, #24]
 80034ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80034b0:	e7ec      	b.n	800348c <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	f7ff fdd4 	bl	8003060 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034b8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80034ba:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80034d0:	61da      	str	r2, [r3, #28]
    break;
 80034d2:	e7ae      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034d4:	6820      	ldr	r0, [r4, #0]
 80034d6:	f7ff fedd 	bl	8003294 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80034dc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034e0:	f042 0208 	orr.w	r2, r2, #8
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034e8:	f022 0204 	bic.w	r2, r2, #4
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80034ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034f0:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 80034f4:	e79d      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034f6:	6820      	ldr	r0, [r4, #0]
 80034f8:	f7ff fef4 	bl	80032e4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80034fe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800350a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003512:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003516:	e7ec      	b.n	80034f2 <HAL_TIM_PWM_ConfigChannel+0xe6>

08003518 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003518:	6803      	ldr	r3, [r0, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003520:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800352a:	2320      	movs	r3, #32
 800352c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8003530:	4770      	bx	lr
	...

08003534 <HAL_UART_Receive_DMA>:
{
 8003534:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8003536:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 800353a:	2a20      	cmp	r2, #32
{
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 8003540:	d133      	bne.n	80035aa <HAL_UART_Receive_DMA+0x76>
    if((pData == NULL ) || (Size == 0U))
 8003542:	2900      	cmp	r1, #0
 8003544:	d02f      	beq.n	80035a6 <HAL_UART_Receive_DMA+0x72>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d02d      	beq.n	80035a6 <HAL_UART_Receive_DMA+0x72>
    __HAL_LOCK(huart);
 800354a:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 800354e:	2a01      	cmp	r2, #1
 8003550:	d02b      	beq.n	80035aa <HAL_UART_Receive_DMA+0x76>
 8003552:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003554:	2500      	movs	r5, #0
    huart->pRxBuffPtr = pData;
 8003556:	6541      	str	r1, [r0, #84]	; 0x54
    __HAL_LOCK(huart);
 8003558:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800355c:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355e:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxXferSize = Size;
 8003560:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003564:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003568:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800356a:	4a11      	ldr	r2, [pc, #68]	; (80035b0 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 800356c:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800356e:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003570:	4a10      	ldr	r2, [pc, #64]	; (80035b4 <HAL_UART_Receive_DMA+0x80>)
    huart->hdmarx->XferAbortCallback = NULL;
 8003572:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003574:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003576:	4a10      	ldr	r2, [pc, #64]	; (80035b8 <HAL_UART_Receive_DMA+0x84>)
 8003578:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 800357a:	460a      	mov	r2, r1
 800357c:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8003580:	f7fe fad4 	bl	8001b2c <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003584:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8003586:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    return HAL_OK;
 800358a:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003592:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a2:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80035a6:	2001      	movs	r0, #1
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80035aa:	2002      	movs	r0, #2
}
 80035ac:	bd70      	pop	{r4, r5, r6, pc}
 80035ae:	bf00      	nop
 80035b0:	0800367d 	.word	0x0800367d
 80035b4:	080036b9 	.word	0x080036b9
 80035b8:	080036c3 	.word	0x080036c3

080035bc <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 80035bc:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d026      	beq.n	8003612 <HAL_UART_DMAResume+0x56>
 80035c4:	2301      	movs	r3, #1
 80035c6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80035ca:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80035ce:	2b21      	cmp	r3, #33	; 0x21
 80035d0:	6803      	ldr	r3, [r0, #0]
 80035d2:	d103      	bne.n	80035dc <HAL_UART_DMAResume+0x20>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035da:	609a      	str	r2, [r3, #8]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035dc:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 80035e0:	2a22      	cmp	r2, #34	; 0x22
 80035e2:	d10d      	bne.n	8003600 <HAL_UART_DMAResume+0x44>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80035e4:	2208      	movs	r2, #8
 80035e6:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ee:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fe:	609a      	str	r2, [r3, #8]
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	f010 0001 	ands.w	r0, r0, #1
 8003606:	d106      	bne.n	8003616 <HAL_UART_DMAResume+0x5a>
    __HAL_UART_ENABLE(huart);
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003612:	2002      	movs	r0, #2
 8003614:	4770      	bx	lr
  return HAL_OK;
 8003616:	2000      	movs	r0, #0
}
 8003618:	4770      	bx	lr

0800361a <UART_WaitOnFlagUntilTimeout>:
{
 800361a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800361e:	9d06      	ldr	r5, [sp, #24]
 8003620:	4604      	mov	r4, r0
 8003622:	460f      	mov	r7, r1
 8003624:	4616      	mov	r6, r2
 8003626:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003628:	6821      	ldr	r1, [r4, #0]
 800362a:	69ca      	ldr	r2, [r1, #28]
 800362c:	ea37 0302 	bics.w	r3, r7, r2
 8003630:	bf0c      	ite	eq
 8003632:	2201      	moveq	r2, #1
 8003634:	2200      	movne	r2, #0
 8003636:	42b2      	cmp	r2, r6
 8003638:	d002      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800363a:	2000      	movs	r0, #0
}
 800363c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003640:	1c6b      	adds	r3, r5, #1
 8003642:	d0f2      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8003644:	b99d      	cbnz	r5, 800366e <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003646:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003648:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003650:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800365a:	2320      	movs	r3, #32
 800365c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003660:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8003664:	2300      	movs	r3, #0
 8003666:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800366a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800366e:	f7fe f80d 	bl	800168c <HAL_GetTick>
 8003672:	eba0 0008 	sub.w	r0, r0, r8
 8003676:	4285      	cmp	r5, r0
 8003678:	d8d6      	bhi.n	8003628 <UART_WaitOnFlagUntilTimeout+0xe>
 800367a:	e7e4      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0x2c>

0800367c <UART_DMAReceiveCplt>:
{
 800367c:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800367e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003680:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003688:	d111      	bne.n	80036ae <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 800368a:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003696:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003698:	6899      	ldr	r1, [r3, #8]
 800369a:	f021 0101 	bic.w	r1, r1, #1
 800369e:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a0:	6899      	ldr	r1, [r3, #8]
 80036a2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80036a6:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 80036a8:	2320      	movs	r3, #32
 80036aa:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
  HAL_UART_RxCpltCallback(huart);
 80036ae:	4610      	mov	r0, r2
 80036b0:	f7fc fdf6 	bl	80002a0 <HAL_UART_RxCpltCallback>
 80036b4:	bd08      	pop	{r3, pc}

080036b6 <HAL_UART_RxHalfCpltCallback>:
 80036b6:	4770      	bx	lr

080036b8 <UART_DMARxHalfCplt>:
{
 80036b8:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80036ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80036bc:	f7ff fffb 	bl	80036b6 <HAL_UART_RxHalfCpltCallback>
 80036c0:	bd08      	pop	{r3, pc}

080036c2 <UART_DMAError>:
{
 80036c2:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036c4:	6b81      	ldr	r1, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80036cc:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036d0:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 80036d4:	2b21      	cmp	r3, #33	; 0x21
 80036d6:	d10a      	bne.n	80036ee <UART_DMAError+0x2c>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80036d8:	680b      	ldr	r3, [r1, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	0612      	lsls	r2, r2, #24
 80036de:	d506      	bpl.n	80036ee <UART_DMAError+0x2c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80036e6:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80036e8:	2320      	movs	r3, #32
 80036ea:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036ee:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 80036f2:	2b22      	cmp	r3, #34	; 0x22
 80036f4:	d106      	bne.n	8003704 <UART_DMAError+0x42>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80036f6:	680b      	ldr	r3, [r1, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	065b      	lsls	r3, r3, #25
 80036fc:	d502      	bpl.n	8003704 <UART_DMAError+0x42>
    UART_EndRxTransfer(huart);
 80036fe:	4608      	mov	r0, r1
 8003700:	f7ff ff0a 	bl	8003518 <UART_EndRxTransfer>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8003704:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003706:	4608      	mov	r0, r1
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8003708:	f043 0310 	orr.w	r3, r3, #16
 800370c:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800370e:	f7fc fdc1 	bl	8000294 <HAL_UART_ErrorCallback>
 8003712:	bd08      	pop	{r3, pc}

08003714 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003718:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800371a:	69c3      	ldr	r3, [r0, #28]
 800371c:	6921      	ldr	r1, [r4, #16]
 800371e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003720:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003722:	430a      	orrs	r2, r1
 8003724:	6961      	ldr	r1, [r4, #20]
 8003726:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003728:	4993      	ldr	r1, [pc, #588]	; (8003978 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800372a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800372c:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800372e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003730:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003732:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003734:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003736:	686a      	ldr	r2, [r5, #4]
 8003738:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800373c:	430a      	orrs	r2, r1
 800373e:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003740:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003742:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003744:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003746:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800374a:	430a      	orrs	r2, r1
 800374c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800374e:	4a8b      	ldr	r2, [pc, #556]	; (800397c <UART_SetConfig+0x268>)
 8003750:	4295      	cmp	r5, r2
 8003752:	d119      	bne.n	8003788 <UART_SetConfig+0x74>
 8003754:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003758:	4989      	ldr	r1, [pc, #548]	; (8003980 <UART_SetConfig+0x26c>)
 800375a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800375e:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003766:	5c8a      	ldrb	r2, [r1, r2]
 8003768:	f040 80b3 	bne.w	80038d2 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 800376c:	2a08      	cmp	r2, #8
 800376e:	f200 80ad 	bhi.w	80038cc <UART_SetConfig+0x1b8>
 8003772:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003776:	0026      	.short	0x0026
 8003778:	00e9007b 	.word	0x00e9007b
 800377c:	00f500ab 	.word	0x00f500ab
 8003780:	00ab00ab 	.word	0x00ab00ab
 8003784:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003788:	4a7e      	ldr	r2, [pc, #504]	; (8003984 <UART_SetConfig+0x270>)
 800378a:	4295      	cmp	r5, r2
 800378c:	d107      	bne.n	800379e <UART_SetConfig+0x8a>
 800378e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003792:	497d      	ldr	r1, [pc, #500]	; (8003988 <UART_SetConfig+0x274>)
 8003794:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003798:	f002 020c 	and.w	r2, r2, #12
 800379c:	e7e1      	b.n	8003762 <UART_SetConfig+0x4e>
 800379e:	4a7b      	ldr	r2, [pc, #492]	; (800398c <UART_SetConfig+0x278>)
 80037a0:	4295      	cmp	r5, r2
 80037a2:	d12b      	bne.n	80037fc <UART_SetConfig+0xe8>
 80037a4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80037a8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80037ac:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80037b0:	2a10      	cmp	r2, #16
 80037b2:	f000 80d2 	beq.w	800395a <UART_SetConfig+0x246>
 80037b6:	d816      	bhi.n	80037e6 <UART_SetConfig+0xd2>
 80037b8:	b9da      	cbnz	r2, 80037f2 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037be:	f040 809f 	bne.w	8003900 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80037c2:	f7fe ff4d 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037c6:	6861      	ldr	r1, [r4, #4]
 80037c8:	084a      	lsrs	r2, r1, #1
 80037ca:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80037ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80037d2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d4:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80037d6:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037da:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80037de:	6821      	ldr	r1, [r4, #0]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60cb      	str	r3, [r1, #12]
 80037e4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037e6:	2a20      	cmp	r2, #32
 80037e8:	f000 80ab 	beq.w	8003942 <UART_SetConfig+0x22e>
 80037ec:	2a30      	cmp	r2, #48	; 0x30
 80037ee:	f000 80ba 	beq.w	8003966 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f6:	d069      	beq.n	80038cc <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80037f8:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037fc:	4a64      	ldr	r2, [pc, #400]	; (8003990 <UART_SetConfig+0x27c>)
 80037fe:	4295      	cmp	r5, r2
 8003800:	d10e      	bne.n	8003820 <UART_SetConfig+0x10c>
 8003802:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8003806:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800380a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800380e:	2a40      	cmp	r2, #64	; 0x40
 8003810:	f000 80a3 	beq.w	800395a <UART_SetConfig+0x246>
 8003814:	d9d0      	bls.n	80037b8 <UART_SetConfig+0xa4>
 8003816:	2a80      	cmp	r2, #128	; 0x80
 8003818:	f000 8093 	beq.w	8003942 <UART_SetConfig+0x22e>
 800381c:	2ac0      	cmp	r2, #192	; 0xc0
 800381e:	e7e6      	b.n	80037ee <UART_SetConfig+0xda>
 8003820:	4a5c      	ldr	r2, [pc, #368]	; (8003994 <UART_SetConfig+0x280>)
 8003822:	4295      	cmp	r5, r2
 8003824:	d110      	bne.n	8003848 <UART_SetConfig+0x134>
 8003826:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 800382a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800382e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003832:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003836:	f000 8090 	beq.w	800395a <UART_SetConfig+0x246>
 800383a:	d9bd      	bls.n	80037b8 <UART_SetConfig+0xa4>
 800383c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003840:	d07f      	beq.n	8003942 <UART_SetConfig+0x22e>
 8003842:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003846:	e7d2      	b.n	80037ee <UART_SetConfig+0xda>
 8003848:	4a53      	ldr	r2, [pc, #332]	; (8003998 <UART_SetConfig+0x284>)
 800384a:	4295      	cmp	r5, r2
 800384c:	d117      	bne.n	800387e <UART_SetConfig+0x16a>
 800384e:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8003852:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003856:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800385a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800385e:	d07c      	beq.n	800395a <UART_SetConfig+0x246>
 8003860:	d807      	bhi.n	8003872 <UART_SetConfig+0x15e>
 8003862:	2a00      	cmp	r2, #0
 8003864:	d1c5      	bne.n	80037f2 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386a:	d154      	bne.n	8003916 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800386c:	f7fe ff08 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
 8003870:	e7a9      	b.n	80037c6 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003872:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003876:	d064      	beq.n	8003942 <UART_SetConfig+0x22e>
 8003878:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800387c:	e7b7      	b.n	80037ee <UART_SetConfig+0xda>
 800387e:	4a47      	ldr	r2, [pc, #284]	; (800399c <UART_SetConfig+0x288>)
 8003880:	4295      	cmp	r5, r2
 8003882:	d10f      	bne.n	80038a4 <UART_SetConfig+0x190>
 8003884:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003888:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800388c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003890:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003894:	d061      	beq.n	800395a <UART_SetConfig+0x246>
 8003896:	d98f      	bls.n	80037b8 <UART_SetConfig+0xa4>
 8003898:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800389c:	d051      	beq.n	8003942 <UART_SetConfig+0x22e>
 800389e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80038a2:	e7a4      	b.n	80037ee <UART_SetConfig+0xda>
 80038a4:	4a3e      	ldr	r2, [pc, #248]	; (80039a0 <UART_SetConfig+0x28c>)
 80038a6:	4295      	cmp	r5, r2
 80038a8:	d1a3      	bne.n	80037f2 <UART_SetConfig+0xde>
 80038aa:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80038ae:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80038b2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80038b6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80038ba:	d04e      	beq.n	800395a <UART_SetConfig+0x246>
 80038bc:	f67f af7c 	bls.w	80037b8 <UART_SetConfig+0xa4>
 80038c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80038c4:	d03d      	beq.n	8003942 <UART_SetConfig+0x22e>
 80038c6:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80038ca:	e790      	b.n	80037ee <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 80038cc:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e781      	b.n	80037d6 <UART_SetConfig+0xc2>
    switch (clocksource)
 80038d2:	2a08      	cmp	r2, #8
 80038d4:	d890      	bhi.n	80037f8 <UART_SetConfig+0xe4>
 80038d6:	a301      	add	r3, pc, #4	; (adr r3, 80038dc <UART_SetConfig+0x1c8>)
 80038d8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80038dc:	08003901 	.word	0x08003901
 80038e0:	08003917 	.word	0x08003917
 80038e4:	0800391d 	.word	0x0800391d
 80038e8:	080037f9 	.word	0x080037f9
 80038ec:	08003933 	.word	0x08003933
 80038f0:	080037f9 	.word	0x080037f9
 80038f4:	080037f9 	.word	0x080037f9
 80038f8:	080037f9 	.word	0x080037f9
 80038fc:	08003939 	.word	0x08003939
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003900:	f7fe feae 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003904:	6863      	ldr	r3, [r4, #4]
 8003906:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800390a:	fbb0 f0f3 	udiv	r0, r0, r3
 800390e:	b280      	uxth	r0, r0
 8003910:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003912:	2000      	movs	r0, #0
      break;
 8003914:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003916:	f7fe feb3 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
 800391a:	e7f3      	b.n	8003904 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800391c:	6862      	ldr	r2, [r4, #4]
 800391e:	0853      	lsrs	r3, r2, #1
 8003920:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003924:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003928:	fbb3 f3f2 	udiv	r3, r3, r2
 800392c:	b29b      	uxth	r3, r3
 800392e:	60eb      	str	r3, [r5, #12]
 8003930:	e7ef      	b.n	8003912 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003932:	f7fe fdd5 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8003936:	e7e5      	b.n	8003904 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003938:	6862      	ldr	r2, [r4, #4]
 800393a:	0853      	lsrs	r3, r2, #1
 800393c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003940:	e7f2      	b.n	8003928 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003946:	d1e9      	bne.n	800391c <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003948:	6860      	ldr	r0, [r4, #4]
 800394a:	0843      	lsrs	r3, r0, #1
 800394c:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003950:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003954:	fbb3 f3f0 	udiv	r3, r3, r0
 8003958:	e73b      	b.n	80037d2 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395e:	d1e8      	bne.n	8003932 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003960:	f7fe fdbe 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8003964:	e72f      	b.n	80037c6 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396a:	d1e5      	bne.n	8003938 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800396c:	6860      	ldr	r0, [r4, #4]
 800396e:	0843      	lsrs	r3, r0, #1
 8003970:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003974:	e7ee      	b.n	8003954 <UART_SetConfig+0x240>
 8003976:	bf00      	nop
 8003978:	efff69f3 	.word	0xefff69f3
 800397c:	40011000 	.word	0x40011000
 8003980:	0800536d 	.word	0x0800536d
 8003984:	40004400 	.word	0x40004400
 8003988:	08005371 	.word	0x08005371
 800398c:	40004800 	.word	0x40004800
 8003990:	40004c00 	.word	0x40004c00
 8003994:	40005000 	.word	0x40005000
 8003998:	40011400 	.word	0x40011400
 800399c:	40007800 	.word	0x40007800
 80039a0:	40007c00 	.word	0x40007c00

080039a4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80039a6:	07da      	lsls	r2, r3, #31
{
 80039a8:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039aa:	d506      	bpl.n	80039ba <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039ac:	6801      	ldr	r1, [r0, #0]
 80039ae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80039b0:	684a      	ldr	r2, [r1, #4]
 80039b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80039b6:	4322      	orrs	r2, r4
 80039b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ba:	079c      	lsls	r4, r3, #30
 80039bc:	d506      	bpl.n	80039cc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039be:	6801      	ldr	r1, [r0, #0]
 80039c0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80039c2:	684a      	ldr	r2, [r1, #4]
 80039c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039c8:	4322      	orrs	r2, r4
 80039ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039cc:	0759      	lsls	r1, r3, #29
 80039ce:	d506      	bpl.n	80039de <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039d0:	6801      	ldr	r1, [r0, #0]
 80039d2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80039d4:	684a      	ldr	r2, [r1, #4]
 80039d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039da:	4322      	orrs	r2, r4
 80039dc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039de:	071a      	lsls	r2, r3, #28
 80039e0:	d506      	bpl.n	80039f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039e2:	6801      	ldr	r1, [r0, #0]
 80039e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80039e6:	684a      	ldr	r2, [r1, #4]
 80039e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ec:	4322      	orrs	r2, r4
 80039ee:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f0:	06dc      	lsls	r4, r3, #27
 80039f2:	d506      	bpl.n	8003a02 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039f4:	6801      	ldr	r1, [r0, #0]
 80039f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80039f8:	688a      	ldr	r2, [r1, #8]
 80039fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039fe:	4322      	orrs	r2, r4
 8003a00:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a02:	0699      	lsls	r1, r3, #26
 8003a04:	d506      	bpl.n	8003a14 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a06:	6801      	ldr	r1, [r0, #0]
 8003a08:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003a0a:	688a      	ldr	r2, [r1, #8]
 8003a0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a10:	4322      	orrs	r2, r4
 8003a12:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a14:	065a      	lsls	r2, r3, #25
 8003a16:	d510      	bpl.n	8003a3a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a18:	6801      	ldr	r1, [r0, #0]
 8003a1a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003a1c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a1e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a22:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003a26:	ea42 0204 	orr.w	r2, r2, r4
 8003a2a:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a2c:	d105      	bne.n	8003a3a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a2e:	684a      	ldr	r2, [r1, #4]
 8003a30:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003a32:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003a36:	4322      	orrs	r2, r4
 8003a38:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a3a:	061b      	lsls	r3, r3, #24
 8003a3c:	d506      	bpl.n	8003a4c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a3e:	6802      	ldr	r2, [r0, #0]
 8003a40:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003a42:	6853      	ldr	r3, [r2, #4]
 8003a44:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6053      	str	r3, [r2, #4]
 8003a4c:	bd10      	pop	{r4, pc}

08003a4e <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a50:	2500      	movs	r5, #0
{
 8003a52:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003a56:	f7fd fe19 	bl	800168c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a5a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003a5c:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	0712      	lsls	r2, r2, #28
 8003a62:	d409      	bmi.n	8003a78 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8003a64:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a66:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003a68:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8003a6c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8003a70:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8003a74:	b003      	add	sp, #12
 8003a76:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a78:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003a7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a80:	4620      	mov	r0, r4
 8003a82:	9200      	str	r2, [sp, #0]
 8003a84:	462a      	mov	r2, r5
 8003a86:	f7ff fdc8 	bl	800361a <UART_WaitOnFlagUntilTimeout>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d0ea      	beq.n	8003a64 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003a8e:	2003      	movs	r0, #3
 8003a90:	e7f0      	b.n	8003a74 <UART_CheckIdleState+0x26>

08003a92 <HAL_UART_Init>:
{
 8003a92:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003a94:	4604      	mov	r4, r0
 8003a96:	b360      	cbz	r0, 8003af2 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003a98:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003a9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003aa0:	b91b      	cbnz	r3, 8003aaa <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003aa2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8003aa6:	f7fd fca1 	bl	80013ec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003aaa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003aac:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aae:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003ab0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003ab4:	6813      	ldr	r3, [r2, #0]
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003abc:	f7ff fe2a 	bl	8003714 <UART_SetConfig>
 8003ac0:	2801      	cmp	r0, #1
 8003ac2:	d016      	beq.n	8003af2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ac6:	b113      	cbz	r3, 8003ace <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff ff6b 	bl	80039a4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ace:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003ad0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
}
 8003ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003aec:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003aee:	f7ff bfae 	b.w	8003a4e <UART_CheckIdleState>
}
 8003af2:	2001      	movs	r0, #1
 8003af4:	bd10      	pop	{r4, pc}
	...

08003af8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8003afa:	3b01      	subs	r3, #1
 8003afc:	d101      	bne.n	8003b02 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003afe:	2003      	movs	r0, #3
 8003b00:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8003b02:	6902      	ldr	r2, [r0, #16]
 8003b04:	2a00      	cmp	r2, #0
 8003b06:	daf8      	bge.n	8003afa <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b08:	6903      	ldr	r3, [r0, #16]
 8003b0a:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <USB_CoreReset+0x2c>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 8003b12:	3a01      	subs	r2, #1
 8003b14:	d0f3      	beq.n	8003afe <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b16:	6903      	ldr	r3, [r0, #16]
 8003b18:	f013 0301 	ands.w	r3, r3, #1
 8003b1c:	d1f9      	bne.n	8003b12 <USB_CoreReset+0x1a>

  return HAL_OK;
 8003b1e:	4618      	mov	r0, r3
}
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	00030d41 	.word	0x00030d41

08003b28 <USB_CoreInit>:
{
 8003b28:	b084      	sub	sp, #16
 8003b2a:	b538      	push	{r3, r4, r5, lr}
 8003b2c:	ad05      	add	r5, sp, #20
 8003b2e:	4604      	mov	r4, r0
 8003b30:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d127      	bne.n	8003b8a <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b40:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b42:	68c3      	ldr	r3, [r0, #12]
 8003b44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b4e:	68c3      	ldr	r3, [r0, #12]
 8003b50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003b54:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 8003b56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d103      	bne.n	8003b64 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b5c:	68c3      	ldr	r3, [r0, #12]
 8003b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b62:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003b64:	4620      	mov	r0, r4
 8003b66:	f7ff ffc7 	bl	8003af8 <USB_CoreReset>
  if(cfg.dma_enable == ENABLE)
 8003b6a:	9b08      	ldr	r3, [sp, #32]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b70:	68a3      	ldr	r3, [r4, #8]
 8003b72:	f043 0306 	orr.w	r3, r3, #6
 8003b76:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b78:	68a3      	ldr	r3, [r4, #8]
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	60a3      	str	r3, [r4, #8]
}
 8003b80:	2000      	movs	r0, #0
 8003b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b86:	b004      	add	sp, #16
 8003b88:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b8a:	68c3      	ldr	r3, [r0, #12]
 8003b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b90:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003b92:	f7ff ffb1 	bl	8003af8 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b9a:	63a3      	str	r3, [r4, #56]	; 0x38
 8003b9c:	e7e5      	b.n	8003b6a <USB_CoreInit+0x42>

08003b9e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b9e:	6883      	ldr	r3, [r0, #8]
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6083      	str	r3, [r0, #8]
}
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	4770      	bx	lr

08003baa <USB_SetCurrentMode>:
{
 8003baa:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bac:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8003bae:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003bb4:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8003bb6:	d108      	bne.n	8003bca <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bb8:	68c3      	ldr	r3, [r0, #12]
 8003bba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bbe:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 8003bc0:	2032      	movs	r0, #50	; 0x32
 8003bc2:	f7fd fd69 	bl	8001698 <HAL_Delay>
}
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8003bca:	2900      	cmp	r1, #0
 8003bcc:	d1f8      	bne.n	8003bc0 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bce:	68c3      	ldr	r3, [r0, #12]
 8003bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bd4:	e7f3      	b.n	8003bbe <USB_SetCurrentMode+0x14>
	...

08003bd8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8003bd8:	0189      	lsls	r1, r1, #6
 8003bda:	4a07      	ldr	r2, [pc, #28]	; (8003bf8 <USB_FlushTxFifo+0x20>)
 8003bdc:	f041 0120 	orr.w	r1, r1, #32
 8003be0:	6101      	str	r1, [r0, #16]
    if (++count > 200000)
 8003be2:	3a01      	subs	r2, #1
 8003be4:	d005      	beq.n	8003bf2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003be6:	6903      	ldr	r3, [r0, #16]
 8003be8:	f013 0320 	ands.w	r3, r3, #32
 8003bec:	d1f9      	bne.n	8003be2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003bee:	4618      	mov	r0, r3
 8003bf0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003bf2:	2003      	movs	r0, #3
}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	00030d41 	.word	0x00030d41

08003bfc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	4a06      	ldr	r2, [pc, #24]	; (8003c18 <USB_FlushRxFifo+0x1c>)
 8003c00:	6103      	str	r3, [r0, #16]
    if (++count > 200000)
 8003c02:	3a01      	subs	r2, #1
 8003c04:	d005      	beq.n	8003c12 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c06:	6903      	ldr	r3, [r0, #16]
 8003c08:	f013 0310 	ands.w	r3, r3, #16
 8003c0c:	d1f9      	bne.n	8003c02 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003c0e:	4618      	mov	r0, r3
 8003c10:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003c12:	2003      	movs	r0, #3
}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	00030d41 	.word	0x00030d41

08003c1c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003c1c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003c20:	4319      	orrs	r1, r3
 8003c22:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003c26:	2000      	movs	r0, #0
 8003c28:	4770      	bx	lr
	...

08003c2c <USB_DevInit>:
{
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c32:	4604      	mov	r4, r0
 8003c34:	a807      	add	r0, sp, #28
 8003c36:	4688      	mov	r8, r1
 8003c38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c3e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8003c40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c46:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003c48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c4a:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0)
 8003c4c:	b95e      	cbnz	r6, 8003c66 <USB_DevInit+0x3a>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8003c4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c54:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5c:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c64:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0;
 8003c66:	2300      	movs	r3, #0
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003c68:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c6a:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0;
 8003c6e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c72:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003c76:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003c7a:	d158      	bne.n	8003d2e <USB_DevInit+0x102>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8003c7c:	2a00      	cmp	r2, #0
 8003c7e:	d154      	bne.n	8003d2a <USB_DevInit+0xfe>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8003c80:	2100      	movs	r1, #0
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8003c82:	4620      	mov	r0, r4
 8003c84:	f7ff ffca 	bl	8003c1c <USB_SetDevSpeed>
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8003c88:	2110      	movs	r1, #16
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f7ff ffa4 	bl	8003bd8 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7ff ffb3 	bl	8003bfc <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0;
 8003c96:	2300      	movs	r3, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8003c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DIEPMSK = 0;
 8003ca0:	612b      	str	r3, [r5, #16]
 8003ca2:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0;
 8003ca4:	616b      	str	r3, [r5, #20]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8003ca6:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8003caa:	61aa      	str	r2, [r5, #24]
 8003cac:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DAINTMSK = 0;
 8003cb0:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003cb2:	4543      	cmp	r3, r8
 8003cb4:	d13f      	bne.n	8003d36 <USB_DevInit+0x10a>
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003cbc:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8003cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003cc4:	4608      	mov	r0, r1
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	d143      	bne.n	8003d52 <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cca:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 8003ccc:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd2:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 8003cd4:	d108      	bne.n	8003ce8 <USB_DevInit+0xbc>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8003cd6:	4b26      	ldr	r3, [pc, #152]	; (8003d70 <USB_DevInit+0x144>)
 8003cd8:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8003cda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	f043 0303 	orr.w	r3, r3, #3
 8003ce4:	632b      	str	r3, [r5, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 8003ce6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 8003cec:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003cf0:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == DISABLE)
 8003cf2:	b91f      	cbnz	r7, 8003cfc <USB_DevInit+0xd0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cf4:	69a3      	ldr	r3, [r4, #24]
 8003cf6:	f043 0310 	orr.w	r3, r3, #16
 8003cfa:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8003cfc:	69a2      	ldr	r2, [r4, #24]
 8003cfe:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <USB_DevInit+0x148>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable)
 8003d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d06:	b11b      	cbz	r3, 8003d10 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d08:	69a3      	ldr	r3, [r4, #24]
 8003d0a:	f043 0308 	orr.w	r3, r3, #8
 8003d0e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 8003d10:	2e01      	cmp	r6, #1
 8003d12:	d105      	bne.n	8003d20 <USB_DevInit+0xf4>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d14:	69a3      	ldr	r3, [r4, #24]
 8003d16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d1a:	f043 0304 	orr.w	r3, r3, #4
 8003d1e:	61a3      	str	r3, [r4, #24]
}
 8003d20:	2000      	movs	r0, #0
 8003d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d26:	b004      	add	sp, #16
 8003d28:	4770      	bx	lr
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	e7a9      	b.n	8003c82 <USB_DevInit+0x56>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 8003d2e:	2903      	cmp	r1, #3
 8003d30:	d0a4      	beq.n	8003c7c <USB_DevInit+0x50>
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8003d32:	2103      	movs	r1, #3
 8003d34:	e7a5      	b.n	8003c82 <USB_DevInit+0x56>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d36:	f8d2 c000 	ldr.w	ip, [r2]
 8003d3a:	f1bc 0f00 	cmp.w	ip, #0
 8003d3e:	da06      	bge.n	8003d4e <USB_DevInit+0x122>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8003d40:	6010      	str	r0, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 8003d42:	6111      	str	r1, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003d44:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8003d46:	f8c2 e008 	str.w	lr, [r2, #8]
 8003d4a:	3220      	adds	r2, #32
 8003d4c:	e7b1      	b.n	8003cb2 <USB_DevInit+0x86>
      USBx_INEP(i)->DIEPCTL = 0;
 8003d4e:	6011      	str	r1, [r2, #0]
 8003d50:	e7f7      	b.n	8003d42 <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d52:	f8d2 8000 	ldr.w	r8, [r2]
 8003d56:	f1b8 0f00 	cmp.w	r8, #0
 8003d5a:	da07      	bge.n	8003d6c <USB_DevInit+0x140>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003d5c:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8003d60:	6110      	str	r0, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003d62:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8003d64:	f8c2 c008 	str.w	ip, [r2, #8]
 8003d68:	3220      	adds	r2, #32
 8003d6a:	e7ac      	b.n	8003cc6 <USB_DevInit+0x9a>
      USBx_OUTEP(i)->DOEPCTL = 0;
 8003d6c:	6010      	str	r0, [r2, #0]
 8003d6e:	e7f7      	b.n	8003d60 <USB_DevInit+0x134>
 8003d70:	00800100 	.word	0x00800100
 8003d74:	803c3800 	.word	0x803c3800

08003d78 <USB_DevDisconnect>:
{
 8003d78:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8003d7a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003d7e:	f043 0302 	orr.w	r3, r3, #2
 8003d82:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8003d86:	2003      	movs	r0, #3
 8003d88:	f7fd fc86 	bl	8001698 <HAL_Delay>
}
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	bd08      	pop	{r3, pc}

08003d90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d90:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003d92:	f000 fe6b 	bl	8004a6c <vTaskStartScheduler>
  
  return osOK;
}
 8003d96:	2000      	movs	r0, #0
 8003d98:	bd08      	pop	{r3, pc}

08003d9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d9a:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d9c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8003da0:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003da2:	8a02      	ldrh	r2, [r0, #16]
{
 8003da4:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8003da6:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003da8:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 8003dac:	bf14      	ite	ne
 8003dae:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003db0:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003db2:	a803      	add	r0, sp, #12
 8003db4:	9400      	str	r4, [sp, #0]
 8003db6:	9001      	str	r0, [sp, #4]
 8003db8:	4628      	mov	r0, r5
 8003dba:	f000 fd87 	bl	80048cc <xTaskCreate>
 8003dbe:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003dc0:	bf0c      	ite	eq
 8003dc2:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8003dc4:	2000      	movne	r0, #0
}
 8003dc6:	b005      	add	sp, #20
 8003dc8:	bd30      	pop	{r4, r5, pc}

08003dca <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	bf08      	it	eq
 8003dce:	2001      	moveq	r0, #1
{
 8003dd0:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003dd2:	f000 ffa1 	bl	8004d18 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	bd08      	pop	{r3, pc}

08003dda <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f000 bc36 	b.w	800464c <xQueueCreateMutex>

08003de0 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003de0:	2200      	movs	r2, #0
 8003de2:	c803      	ldmia	r0, {r0, r1}
 8003de4:	f000 bb50 	b.w	8004488 <xQueueGenericCreate>

08003de8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003de8:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003dea:	f001 f8e5 	bl	8004fb8 <xTaskGetSchedulerState>
 8003dee:	2801      	cmp	r0, #1
 8003df0:	d003      	beq.n	8003dfa <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003df6:	f000 ba05 	b.w	8004204 <xPortSysTickHandler>
 8003dfa:	bd08      	pop	{r3, pc}

08003dfc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <prvInsertBlockIntoFreeList+0x40>)
{
 8003dfe:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4282      	cmp	r2, r0
 8003e04:	d318      	bcc.n	8003e38 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e06:	685c      	ldr	r4, [r3, #4]
 8003e08:	1919      	adds	r1, r3, r4
 8003e0a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e0c:	bf01      	itttt	eq
 8003e0e:	6841      	ldreq	r1, [r0, #4]
 8003e10:	4618      	moveq	r0, r3
 8003e12:	1909      	addeq	r1, r1, r4
 8003e14:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e16:	6844      	ldr	r4, [r0, #4]
 8003e18:	1901      	adds	r1, r0, r4
 8003e1a:	428a      	cmp	r2, r1
 8003e1c:	d107      	bne.n	8003e2e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e1e:	4908      	ldr	r1, [pc, #32]	; (8003e40 <prvInsertBlockIntoFreeList+0x44>)
 8003e20:	6809      	ldr	r1, [r1, #0]
 8003e22:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e24:	bf1f      	itttt	ne
 8003e26:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e28:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e2a:	1909      	addne	r1, r1, r4
 8003e2c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e2e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e30:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e32:	bf18      	it	ne
 8003e34:	6018      	strne	r0, [r3, #0]
 8003e36:	bd10      	pop	{r4, pc}
 8003e38:	4613      	mov	r3, r2
 8003e3a:	e7e1      	b.n	8003e00 <prvInsertBlockIntoFreeList+0x4>
 8003e3c:	20003c60 	.word	0x20003c60
 8003e40:	20000050 	.word	0x20000050

08003e44 <pvPortMalloc>:
{
 8003e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e48:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003e4a:	f000 fe4f 	bl	8004aec <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003e4e:	4940      	ldr	r1, [pc, #256]	; (8003f50 <pvPortMalloc+0x10c>)
 8003e50:	4d40      	ldr	r5, [pc, #256]	; (8003f54 <pvPortMalloc+0x110>)
 8003e52:	680b      	ldr	r3, [r1, #0]
 8003e54:	bb0b      	cbnz	r3, 8003e9a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003e56:	4a40      	ldr	r2, [pc, #256]	; (8003f58 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e58:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e5a:	4e40      	ldr	r6, [pc, #256]	; (8003f5c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e5c:	bf1b      	ittet	ne
 8003e5e:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e60:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e64:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e68:	f020 0007 	bicne.w	r0, r0, #7
 8003e6c:	bf1c      	itt	ne
 8003e6e:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e70:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8003e72:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e74:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e76:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e78:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8003e7a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e7c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8003e80:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003e82:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e84:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8003e86:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e88:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e8a:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e8c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e8e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e90:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <pvPortMalloc+0x120>)
 8003e92:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e98:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e9a:	682f      	ldr	r7, [r5, #0]
 8003e9c:	4227      	tst	r7, r4
 8003e9e:	d116      	bne.n	8003ece <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8003ea0:	2c00      	cmp	r4, #0
 8003ea2:	d042      	beq.n	8003f2a <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8003ea4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ea8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003eaa:	bf1c      	itt	ne
 8003eac:	f023 0307 	bicne.w	r3, r3, #7
 8003eb0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003eb2:	b163      	cbz	r3, 8003ece <pvPortMalloc+0x8a>
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <pvPortMalloc+0x120>)
 8003eb6:	6816      	ldr	r6, [r2, #0]
 8003eb8:	4690      	mov	r8, r2
 8003eba:	42b3      	cmp	r3, r6
 8003ebc:	d807      	bhi.n	8003ece <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8003ebe:	4a27      	ldr	r2, [pc, #156]	; (8003f5c <pvPortMalloc+0x118>)
 8003ec0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ec2:	6868      	ldr	r0, [r5, #4]
 8003ec4:	4283      	cmp	r3, r0
 8003ec6:	d804      	bhi.n	8003ed2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003ec8:	6809      	ldr	r1, [r1, #0]
 8003eca:	428d      	cmp	r5, r1
 8003ecc:	d107      	bne.n	8003ede <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8003ece:	2400      	movs	r4, #0
 8003ed0:	e02b      	b.n	8003f2a <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ed2:	682c      	ldr	r4, [r5, #0]
 8003ed4:	2c00      	cmp	r4, #0
 8003ed6:	d0f7      	beq.n	8003ec8 <pvPortMalloc+0x84>
 8003ed8:	462a      	mov	r2, r5
 8003eda:	4625      	mov	r5, r4
 8003edc:	e7f1      	b.n	8003ec2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ede:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ee0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ee2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ee4:	1ac2      	subs	r2, r0, r3
 8003ee6:	2a10      	cmp	r2, #16
 8003ee8:	d911      	bls.n	8003f0e <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003eea:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eec:	0741      	lsls	r1, r0, #29
 8003eee:	d00a      	beq.n	8003f06 <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	b672      	cpsid	i
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	b662      	cpsie	i
 8003f04:	e7fe      	b.n	8003f04 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f06:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f08:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f0a:	f7ff ff77 	bl	8003dfc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f0e:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f10:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f12:	4913      	ldr	r1, [pc, #76]	; (8003f60 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f14:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f16:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f18:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8003f1a:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f1c:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f20:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f22:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f24:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f26:	bf38      	it	cc
 8003f28:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8003f2a:	f000 fe7b 	bl	8004c24 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f2e:	0763      	lsls	r3, r4, #29
 8003f30:	d00a      	beq.n	8003f48 <pvPortMalloc+0x104>
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	b672      	cpsid	i
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	b662      	cpsie	i
 8003f46:	e7fe      	b.n	8003f46 <pvPortMalloc+0x102>
}
 8003f48:	4620      	mov	r0, r4
 8003f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000050 	.word	0x20000050
 8003f54:	20003c54 	.word	0x20003c54
 8003f58:	20000054 	.word	0x20000054
 8003f5c:	20003c60 	.word	0x20003c60
 8003f60:	20003c5c 	.word	0x20003c5c
 8003f64:	20003c58 	.word	0x20003c58

08003f68 <vPortFree>:
{
 8003f68:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d032      	beq.n	8003fd6 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f70:	4a19      	ldr	r2, [pc, #100]	; (8003fd8 <vPortFree+0x70>)
 8003f72:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	4213      	tst	r3, r2
 8003f7a:	d10a      	bne.n	8003f92 <vPortFree+0x2a>
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	b672      	cpsid	i
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	b662      	cpsie	i
 8003f90:	e7fe      	b.n	8003f90 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f92:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003f96:	b151      	cbz	r1, 8003fae <vPortFree+0x46>
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	b672      	cpsid	i
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	b662      	cpsie	i
 8003fac:	e7fe      	b.n	8003fac <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fae:	ea23 0302 	bic.w	r3, r3, r2
 8003fb2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003fb6:	f000 fd99 	bl	8004aec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fba:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <vPortFree+0x74>)
 8003fbc:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fc0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fc4:	6811      	ldr	r1, [r2, #0]
 8003fc6:	440b      	add	r3, r1
 8003fc8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fca:	f7ff ff17 	bl	8003dfc <prvInsertBlockIntoFreeList>
}
 8003fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003fd2:	f000 be27 	b.w	8004c24 <xTaskResumeAll>
 8003fd6:	bd10      	pop	{r4, pc}
 8003fd8:	20003c54 	.word	0x20003c54
 8003fdc:	20003c58 	.word	0x20003c58

08003fe0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fea:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fec:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fee:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ff0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ff2:	6003      	str	r3, [r0, #0]
 8003ff4:	4770      	bx	lr

08003ff6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6103      	str	r3, [r0, #16]
 8003ffa:	4770      	bx	lr

08003ffc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ffc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ffe:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004000:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004002:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004008:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800400a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800400c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800400e:	3301      	adds	r3, #1
 8004010:	6003      	str	r3, [r0, #0]
 8004012:	4770      	bx	lr

08004014 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004014:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004016:	1c53      	adds	r3, r2, #1
{
 8004018:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800401a:	d10a      	bne.n	8004032 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800401c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004022:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004024:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004026:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004028:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800402a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800402c:	3301      	adds	r3, #1
 800402e:	6003      	str	r3, [r0, #0]
 8004030:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004032:	f100 0308 	add.w	r3, r0, #8
 8004036:	685c      	ldr	r4, [r3, #4]
 8004038:	6825      	ldr	r5, [r4, #0]
 800403a:	42aa      	cmp	r2, r5
 800403c:	d3ef      	bcc.n	800401e <vListInsert+0xa>
 800403e:	4623      	mov	r3, r4
 8004040:	e7f9      	b.n	8004036 <vListInsert+0x22>

08004042 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004042:	6841      	ldr	r1, [r0, #4]
 8004044:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004046:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004048:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800404a:	6882      	ldr	r2, [r0, #8]
 800404c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004052:	bf08      	it	eq
 8004054:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004056:	2200      	movs	r2, #0
 8004058:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	3801      	subs	r0, #1
 800405e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8004060:	4770      	bx	lr
	...

08004064 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <prvTaskExitError+0x34>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	d00a      	beq.n	8004082 <prvTaskExitError+0x1e>
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	b672      	cpsid	i
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	b662      	cpsie	i
 8004080:	e7fe      	b.n	8004080 <prvTaskExitError+0x1c>
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	b672      	cpsid	i
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	b662      	cpsie	i
 8004096:	e7fe      	b.n	8004096 <prvTaskExitError+0x32>
 8004098:	20000004 	.word	0x20000004

0800409c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800409c:	4806      	ldr	r0, [pc, #24]	; (80040b8 <prvPortStartFirstTask+0x1c>)
 800409e:	6800      	ldr	r0, [r0, #0]
 80040a0:	6800      	ldr	r0, [r0, #0]
 80040a2:	f380 8808 	msr	MSP, r0
 80040a6:	b662      	cpsie	i
 80040a8:	b661      	cpsie	f
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	df00      	svc	0
 80040b4:	bf00      	nop
 80040b6:	0000      	.short	0x0000
 80040b8:	e000ed08 	.word	0xe000ed08

080040bc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80040bc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80040cc <vPortEnableVFP+0x10>
 80040c0:	6801      	ldr	r1, [r0, #0]
 80040c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040c6:	6001      	str	r1, [r0, #0]
 80040c8:	4770      	bx	lr
 80040ca:	0000      	.short	0x0000
 80040cc:	e000ed88 	.word	0xe000ed88

080040d0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040d4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040d8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80040dc:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040de:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040e2:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040e4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80040e6:	f06f 0302 	mvn.w	r3, #2
 80040ea:	6203      	str	r3, [r0, #32]
}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	08004065 	.word	0x08004065
	...

08004100 <SVC_Handler>:
	__asm volatile (
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <pxCurrentTCBConst2>)
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6808      	ldr	r0, [r1, #0]
 8004106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410a:	f380 8809 	msr	PSP, r0
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8811 	msr	BASEPRI, r0
 800411a:	4770      	bx	lr
 800411c:	f3af 8000 	nop.w

08004120 <pxCurrentTCBConst2>:
 8004120:	20003c70 	.word	0x20003c70

08004124 <vPortEnterCritical>:
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	b672      	cpsid	i
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	b662      	cpsie	i
	uxCriticalNesting++;
 8004138:	4a0b      	ldr	r2, [pc, #44]	; (8004168 <vPortEnterCritical+0x44>)
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800413e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004142:	d10f      	bne.n	8004164 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004144:	4b09      	ldr	r3, [pc, #36]	; (800416c <vPortEnterCritical+0x48>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f013 0fff 	tst.w	r3, #255	; 0xff
 800414c:	d00a      	beq.n	8004164 <vPortEnterCritical+0x40>
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	b672      	cpsid	i
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	b662      	cpsie	i
 8004162:	e7fe      	b.n	8004162 <vPortEnterCritical+0x3e>
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000004 	.word	0x20000004
 800416c:	e000ed04 	.word	0xe000ed04

08004170 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004170:	4a09      	ldr	r2, [pc, #36]	; (8004198 <vPortExitCritical+0x28>)
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	b953      	cbnz	r3, 800418c <vPortExitCritical+0x1c>
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	b672      	cpsid	i
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	b662      	cpsie	i
 800418a:	e7fe      	b.n	800418a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800418c:	3b01      	subs	r3, #1
 800418e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004190:	b90b      	cbnz	r3, 8004196 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	4770      	bx	lr
 8004198:	20000004 	.word	0x20000004
 800419c:	00000000 	.word	0x00000000

080041a0 <PendSV_Handler>:
	__asm volatile
 80041a0:	f3ef 8009 	mrs	r0, PSP
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	4b15      	ldr	r3, [pc, #84]	; (8004200 <pxCurrentTCBConst>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	f01e 0f10 	tst.w	lr, #16
 80041b0:	bf08      	it	eq
 80041b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	6010      	str	r0, [r2, #0]
 80041bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80041c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041c4:	b672      	cpsid	i
 80041c6:	f380 8811 	msr	BASEPRI, r0
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	b662      	cpsie	i
 80041d4:	f000 fe00 	bl	8004dd8 <vTaskSwitchContext>
 80041d8:	f04f 0000 	mov.w	r0, #0
 80041dc:	f380 8811 	msr	BASEPRI, r0
 80041e0:	bc08      	pop	{r3}
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	6808      	ldr	r0, [r1, #0]
 80041e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ea:	f01e 0f10 	tst.w	lr, #16
 80041ee:	bf08      	it	eq
 80041f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041f4:	f380 8809 	msr	PSP, r0
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop

08004200 <pxCurrentTCBConst>:
 8004200:	20003c70 	.word	0x20003c70

08004204 <xPortSysTickHandler>:
{
 8004204:	b508      	push	{r3, lr}
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	b672      	cpsid	i
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800421a:	f000 fc6f 	bl	8004afc <xTaskIncrementTick>
 800421e:	b118      	cbz	r0, 8004228 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004224:	4b02      	ldr	r3, [pc, #8]	; (8004230 <xPortSysTickHandler+0x2c>)
 8004226:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004228:	2300      	movs	r3, #0
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	bd08      	pop	{r3, pc}
 8004230:	e000ed04 	.word	0xe000ed04

08004234 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <vPortSetupTimerInterrupt+0x1c>)
 8004236:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <vPortSetupTimerInterrupt+0x20>)
 8004242:	3b01      	subs	r3, #1
 8004244:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004246:	2207      	movs	r2, #7
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <vPortSetupTimerInterrupt+0x24>)
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000000 	.word	0x20000000
 8004254:	e000e014 	.word	0xe000e014
 8004258:	e000e010 	.word	0xe000e010

0800425c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800425c:	4b23      	ldr	r3, [pc, #140]	; (80042ec <xPortStartScheduler+0x90>)
{
 800425e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004260:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004262:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004268:	22ff      	movs	r2, #255	; 0xff
 800426a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800426c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800426e:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004276:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800427a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800427e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004280:	2207      	movs	r2, #7
 8004282:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <xPortStartScheduler+0x98>)
 8004284:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004286:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800428a:	1e54      	subs	r4, r2, #1
 800428c:	0600      	lsls	r0, r0, #24
 800428e:	d423      	bmi.n	80042d8 <xPortStartScheduler+0x7c>
 8004290:	b101      	cbz	r1, 8004294 <xPortStartScheduler+0x38>
 8004292:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004298:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800429c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800429e:	9b01      	ldr	r3, [sp, #4]
 80042a0:	4a12      	ldr	r2, [pc, #72]	; (80042ec <xPortStartScheduler+0x90>)
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <xPortStartScheduler+0x9c>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80042ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80042b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80042b8:	f7ff ffbc 	bl	8004234 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80042bc:	2200      	movs	r2, #0
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <xPortStartScheduler+0xa0>)
 80042c0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80042c2:	f7ff fefb 	bl	80040bc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <xPortStartScheduler+0xa4>)
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80042d0:	f7ff fee4 	bl	800409c <prvPortStartFirstTask>
	prvTaskExitError();
 80042d4:	f7ff fec6 	bl	8004064 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80042dc:	2101      	movs	r1, #1
 80042de:	0052      	lsls	r2, r2, #1
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	f88d 2003 	strb.w	r2, [sp, #3]
 80042e6:	4622      	mov	r2, r4
 80042e8:	e7cd      	b.n	8004286 <xPortStartScheduler+0x2a>
 80042ea:	bf00      	nop
 80042ec:	e000e400 	.word	0xe000e400
 80042f0:	20003c68 	.word	0x20003c68
 80042f4:	20003c6c 	.word	0x20003c6c
 80042f8:	e000ed20 	.word	0xe000ed20
 80042fc:	20000004 	.word	0x20000004
 8004300:	e000ef34 	.word	0xe000ef34

08004304 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004308:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800430a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800430c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800430e:	b942      	cbnz	r2, 8004322 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004310:	6805      	ldr	r5, [r0, #0]
 8004312:	b99d      	cbnz	r5, 800433c <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004314:	6840      	ldr	r0, [r0, #4]
 8004316:	f000 fea5 	bl	8005064 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800431a:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800431c:	3601      	adds	r6, #1
 800431e:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8004320:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004322:	b96d      	cbnz	r5, 8004340 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004324:	6880      	ldr	r0, [r0, #8]
 8004326:	f000 ff21 	bl	800516c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800432a:	68a3      	ldr	r3, [r4, #8]
 800432c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800432e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004330:	6862      	ldr	r2, [r4, #4]
 8004332:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004334:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004336:	d301      	bcc.n	800433c <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800433c:	2000      	movs	r0, #0
 800433e:	e7ed      	b.n	800431c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004340:	68c0      	ldr	r0, [r0, #12]
 8004342:	f000 ff13 	bl	800516c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004348:	68e2      	ldr	r2, [r4, #12]
 800434a:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800434c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800434e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004350:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004352:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004354:	bf3e      	ittt	cc
 8004356:	6862      	ldrcc	r2, [r4, #4]
 8004358:	189b      	addcc	r3, r3, r2
 800435a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800435c:	2d02      	cmp	r5, #2
 800435e:	d1ed      	bne.n	800433c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004360:	b10e      	cbz	r6, 8004366 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004362:	3e01      	subs	r6, #1
 8004364:	e7ea      	b.n	800433c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004366:	4630      	mov	r0, r6
 8004368:	e7d8      	b.n	800431c <prvCopyDataToQueue+0x18>

0800436a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800436a:	4603      	mov	r3, r0
 800436c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800436e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004370:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004372:	b162      	cbz	r2, 800438e <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004374:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004376:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004378:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800437a:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800437c:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 800437e:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004382:	bf24      	itt	cs
 8004384:	6819      	ldrcs	r1, [r3, #0]
 8004386:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004388:	68d9      	ldr	r1, [r3, #12]
 800438a:	f000 beef 	b.w	800516c <memcpy>
}
 800438e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004392:	4770      	bx	lr

08004394 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004398:	f7ff fec4 	bl	8004124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800439c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043a0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80043a4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043a6:	2d00      	cmp	r5, #0
 80043a8:	dc14      	bgt.n	80043d4 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043aa:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043ac:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80043b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80043b4:	f7ff fedc 	bl	8004170 <vPortExitCritical>
	taskENTER_CRITICAL();
 80043b8:	f7ff feb4 	bl	8004124 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80043bc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80043c0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043c2:	2d00      	cmp	r5, #0
 80043c4:	dc12      	bgt.n	80043ec <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043c6:	23ff      	movs	r3, #255	; 0xff
 80043c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80043cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80043d0:	f7ff bece 	b.w	8004170 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0e7      	beq.n	80043aa <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043da:	4630      	mov	r0, r6
 80043dc:	f000 fd54 	bl	8004e88 <xTaskRemoveFromEventList>
 80043e0:	b108      	cbz	r0, 80043e6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80043e2:	f000 fde3 	bl	8004fac <vTaskMissedYield>
 80043e6:	3d01      	subs	r5, #1
 80043e8:	b26d      	sxtb	r5, r5
 80043ea:	e7dc      	b.n	80043a6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0e9      	beq.n	80043c6 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043f2:	4630      	mov	r0, r6
 80043f4:	f000 fd48 	bl	8004e88 <xTaskRemoveFromEventList>
 80043f8:	b108      	cbz	r0, 80043fe <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80043fa:	f000 fdd7 	bl	8004fac <vTaskMissedYield>
 80043fe:	3d01      	subs	r5, #1
 8004400:	b26d      	sxtb	r5, r5
 8004402:	e7de      	b.n	80043c2 <prvUnlockQueue+0x2e>

08004404 <xQueueGenericReset>:
{
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004408:	4604      	mov	r4, r0
 800440a:	b950      	cbnz	r0, 8004422 <xQueueGenericReset+0x1e>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	b672      	cpsid	i
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	b662      	cpsie	i
 8004420:	e7fe      	b.n	8004420 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8004422:	f7ff fe7f 	bl	8004124 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004426:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800442e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004430:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004432:	1a1b      	subs	r3, r3, r0
 8004434:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004436:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004438:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800443a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800443c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800443e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004440:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004444:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004448:	b995      	cbnz	r5, 8004470 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800444a:	6923      	ldr	r3, [r4, #16]
 800444c:	b163      	cbz	r3, 8004468 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800444e:	f104 0010 	add.w	r0, r4, #16
 8004452:	f000 fd19 	bl	8004e88 <xTaskRemoveFromEventList>
 8004456:	b138      	cbz	r0, 8004468 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8004458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445c:	4b09      	ldr	r3, [pc, #36]	; (8004484 <xQueueGenericReset+0x80>)
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004468:	f7ff fe82 	bl	8004170 <vPortExitCritical>
}
 800446c:	2001      	movs	r0, #1
 800446e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004470:	f104 0010 	add.w	r0, r4, #16
 8004474:	f7ff fdb4 	bl	8003fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004478:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800447c:	f7ff fdb0 	bl	8003fe0 <vListInitialise>
 8004480:	e7f2      	b.n	8004468 <xQueueGenericReset+0x64>
 8004482:	bf00      	nop
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <xQueueGenericCreate>:
	{
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800448c:	4606      	mov	r6, r0
 800448e:	b950      	cbnz	r0, 80044a6 <xQueueGenericCreate+0x1e>
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	b672      	cpsid	i
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	b662      	cpsie	i
 80044a4:	e7fe      	b.n	80044a4 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a6:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80044a8:	3048      	adds	r0, #72	; 0x48
 80044aa:	f7ff fccb 	bl	8003e44 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80044ae:	4604      	mov	r4, r0
 80044b0:	b138      	cbz	r0, 80044c2 <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80044b2:	b945      	cbnz	r5, 80044c6 <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044b4:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80044b6:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044b8:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 80044ba:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044bc:	4620      	mov	r0, r4
 80044be:	f7ff ffa1 	bl	8004404 <xQueueGenericReset>
	}
 80044c2:	4620      	mov	r0, r4
 80044c4:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80044c6:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044ca:	6003      	str	r3, [r0, #0]
 80044cc:	e7f3      	b.n	80044b6 <xQueueGenericCreate+0x2e>
	...

080044d0 <xQueueGenericSend>:
{
 80044d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	4689      	mov	r9, r1
 80044d6:	9201      	str	r2, [sp, #4]
 80044d8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80044da:	4604      	mov	r4, r0
 80044dc:	b950      	cbnz	r0, 80044f4 <xQueueGenericSend+0x24>
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	b672      	cpsid	i
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	b662      	cpsie	i
 80044f2:	e7fe      	b.n	80044f2 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044f4:	2900      	cmp	r1, #0
 80044f6:	f040 808c 	bne.w	8004612 <xQueueGenericSend+0x142>
 80044fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8088 	beq.w	8004612 <xQueueGenericSend+0x142>
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	b672      	cpsid	i
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	b662      	cpsie	i
 8004516:	e7fe      	b.n	8004516 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004518:	9e01      	ldr	r6, [sp, #4]
 800451a:	2e00      	cmp	r6, #0
 800451c:	f000 8084 	beq.w	8004628 <xQueueGenericSend+0x158>
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	b672      	cpsid	i
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	b662      	cpsie	i
 8004534:	e7fe      	b.n	8004534 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004536:	9d01      	ldr	r5, [sp, #4]
 8004538:	b91d      	cbnz	r5, 8004542 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 800453a:	f7ff fe19 	bl	8004170 <vPortExitCritical>
			return errQUEUE_FULL;
 800453e:	2000      	movs	r0, #0
 8004540:	e058      	b.n	80045f4 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8004542:	b916      	cbnz	r6, 800454a <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 8004544:	a802      	add	r0, sp, #8
 8004546:	f000 fce3 	bl	8004f10 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800454a:	f7ff fe11 	bl	8004170 <vPortExitCritical>
		vTaskSuspendAll();
 800454e:	f000 facd 	bl	8004aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004552:	f7ff fde7 	bl	8004124 <vPortEnterCritical>
 8004556:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800455a:	2bff      	cmp	r3, #255	; 0xff
 800455c:	d101      	bne.n	8004562 <xQueueGenericSend+0x92>
 800455e:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8004562:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004566:	2bff      	cmp	r3, #255	; 0xff
 8004568:	d101      	bne.n	800456e <xQueueGenericSend+0x9e>
 800456a:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800456e:	f7ff fdff 	bl	8004170 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004572:	a901      	add	r1, sp, #4
 8004574:	a802      	add	r0, sp, #8
 8004576:	f000 fcdb 	bl	8004f30 <xTaskCheckForTimeOut>
 800457a:	2800      	cmp	r0, #0
 800457c:	d143      	bne.n	8004606 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800457e:	f7ff fdd1 	bl	8004124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004582:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004584:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004586:	f7ff fdf3 	bl	8004170 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800458a:	42ae      	cmp	r6, r5
 800458c:	d135      	bne.n	80045fa <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800458e:	9901      	ldr	r1, [sp, #4]
 8004590:	f104 0010 	add.w	r0, r4, #16
 8004594:	f000 fc5c 	bl	8004e50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004598:	4620      	mov	r0, r4
 800459a:	f7ff fefb 	bl	8004394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800459e:	f000 fb41 	bl	8004c24 <xTaskResumeAll>
 80045a2:	b938      	cbnz	r0, 80045b4 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 80045a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045a8:	f8ca 3000 	str.w	r3, [sl]
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80045b6:	f7ff fdb5 	bl	8004124 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045be:	429a      	cmp	r2, r3
 80045c0:	d301      	bcc.n	80045c6 <xQueueGenericSend+0xf6>
 80045c2:	2f02      	cmp	r7, #2
 80045c4:	d1b7      	bne.n	8004536 <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045c6:	463a      	mov	r2, r7
 80045c8:	4649      	mov	r1, r9
 80045ca:	4620      	mov	r0, r4
 80045cc:	f7ff fe9a 	bl	8004304 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045d2:	b11b      	cbz	r3, 80045dc <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80045d8:	f000 fc56 	bl	8004e88 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80045dc:	b138      	cbz	r0, 80045ee <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 80045de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e2:	4b19      	ldr	r3, [pc, #100]	; (8004648 <xQueueGenericSend+0x178>)
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80045ee:	f7ff fdbf 	bl	8004170 <vPortExitCritical>
				return pdPASS;
 80045f2:	2001      	movs	r0, #1
}
 80045f4:	b004      	add	sp, #16
 80045f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80045fa:	4620      	mov	r0, r4
 80045fc:	f7ff feca 	bl	8004394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004600:	f000 fb10 	bl	8004c24 <xTaskResumeAll>
 8004604:	e7d6      	b.n	80045b4 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8004606:	4620      	mov	r0, r4
 8004608:	f7ff fec4 	bl	8004394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800460c:	f000 fb0a 	bl	8004c24 <xTaskResumeAll>
 8004610:	e795      	b.n	800453e <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004612:	2f02      	cmp	r7, #2
 8004614:	d102      	bne.n	800461c <xQueueGenericSend+0x14c>
 8004616:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d10a      	bne.n	8004632 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800461c:	f000 fccc 	bl	8004fb8 <xTaskGetSchedulerState>
 8004620:	2800      	cmp	r0, #0
 8004622:	f43f af79 	beq.w	8004518 <xQueueGenericSend+0x48>
 8004626:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004628:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800462c:	f8df a018 	ldr.w	sl, [pc, #24]	; 8004648 <xQueueGenericSend+0x178>
 8004630:	e7c1      	b.n	80045b6 <xQueueGenericSend+0xe6>
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	b672      	cpsid	i
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	b662      	cpsie	i
 8004646:	e7fe      	b.n	8004646 <xQueueGenericSend+0x176>
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <xQueueCreateMutex>:
	{
 800464c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800464e:	4602      	mov	r2, r0
 8004650:	2100      	movs	r1, #0
 8004652:	2001      	movs	r0, #1
 8004654:	f7ff ff18 	bl	8004488 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8004658:	4604      	mov	r4, r0
 800465a:	b138      	cbz	r0, 800466c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004660:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004662:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004664:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004666:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004668:	f7ff ff32 	bl	80044d0 <xQueueGenericSend>
	}
 800466c:	4620      	mov	r0, r4
 800466e:	bd10      	pop	{r4, pc}

08004670 <xQueueGenericReceive>:
{
 8004670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004674:	4688      	mov	r8, r1
 8004676:	9201      	str	r2, [sp, #4]
 8004678:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 800467a:	4604      	mov	r4, r0
 800467c:	b950      	cbnz	r0, 8004694 <xQueueGenericReceive+0x24>
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	b672      	cpsid	i
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	b662      	cpsie	i
 8004692:	e7fe      	b.n	8004692 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004694:	2900      	cmp	r1, #0
 8004696:	f040 80a9 	bne.w	80047ec <xQueueGenericReceive+0x17c>
 800469a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80a5 	beq.w	80047ec <xQueueGenericReceive+0x17c>
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	b672      	cpsid	i
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	b662      	cpsie	i
 80046b6:	e7fe      	b.n	80046b6 <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046b8:	9e01      	ldr	r6, [sp, #4]
 80046ba:	2e00      	cmp	r6, #0
 80046bc:	f000 809c 	beq.w	80047f8 <xQueueGenericReceive+0x188>
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	b672      	cpsid	i
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	b662      	cpsie	i
 80046d4:	e7fe      	b.n	80046d4 <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80046d8:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d06d      	beq.n	80047ba <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80046e2:	e05f      	b.n	80047a4 <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 80046e4:	9d01      	ldr	r5, [sp, #4]
 80046e6:	b91d      	cbnz	r5, 80046f0 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 80046e8:	f7ff fd42 	bl	8004170 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80046ec:	4628      	mov	r0, r5
 80046ee:	e067      	b.n	80047c0 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 80046f0:	b916      	cbnz	r6, 80046f8 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 80046f2:	a802      	add	r0, sp, #8
 80046f4:	f000 fc0c 	bl	8004f10 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80046f8:	f7ff fd3a 	bl	8004170 <vPortExitCritical>
		vTaskSuspendAll();
 80046fc:	f000 f9f6 	bl	8004aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004700:	f7ff fd10 	bl	8004124 <vPortEnterCritical>
 8004704:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004708:	2bff      	cmp	r3, #255	; 0xff
 800470a:	d101      	bne.n	8004710 <xQueueGenericReceive+0xa0>
 800470c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004710:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004714:	2bff      	cmp	r3, #255	; 0xff
 8004716:	d101      	bne.n	800471c <xQueueGenericReceive+0xac>
 8004718:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800471c:	f7ff fd28 	bl	8004170 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004720:	a901      	add	r1, sp, #4
 8004722:	a802      	add	r0, sp, #8
 8004724:	f000 fc04 	bl	8004f30 <xTaskCheckForTimeOut>
 8004728:	2800      	cmp	r0, #0
 800472a:	d152      	bne.n	80047d2 <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 800472c:	f7ff fcfa 	bl	8004124 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004730:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004732:	f7ff fd1d 	bl	8004170 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004736:	2d00      	cmp	r5, #0
 8004738:	d145      	bne.n	80047c6 <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	b933      	cbnz	r3, 800474c <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 800473e:	f7ff fcf1 	bl	8004124 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004742:	6860      	ldr	r0, [r4, #4]
 8004744:	f000 fc48 	bl	8004fd8 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8004748:	f7ff fd12 	bl	8004170 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800474c:	9901      	ldr	r1, [sp, #4]
 800474e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004752:	f000 fb7d 	bl	8004e50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004756:	4620      	mov	r0, r4
 8004758:	f7ff fe1c 	bl	8004394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800475c:	f000 fa62 	bl	8004c24 <xTaskResumeAll>
 8004760:	b938      	cbnz	r0, 8004772 <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 8004762:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004766:	f8ca 3000 	str.w	r3, [sl]
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004774:	f7ff fcd6 	bl	8004124 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004778:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800477a:	2d00      	cmp	r5, #0
 800477c:	d0b2      	beq.n	80046e4 <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800477e:	4641      	mov	r1, r8
 8004780:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004782:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004784:	f7ff fdf1 	bl	800436a <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8004788:	f1b9 0f00 	cmp.w	r9, #0
 800478c:	d1a3      	bne.n	80046d6 <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800478e:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004790:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004792:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004794:	b913      	cbnz	r3, 800479c <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004796:	f000 fcb9 	bl	800510c <pvTaskIncrementMutexHeldCount>
 800479a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800479c:	6923      	ldr	r3, [r4, #16]
 800479e:	b163      	cbz	r3, 80047ba <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a0:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047a4:	f000 fb70 	bl	8004e88 <xTaskRemoveFromEventList>
 80047a8:	b138      	cbz	r0, 80047ba <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 80047aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <xQueueGenericReceive+0x190>)
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80047ba:	f7ff fcd9 	bl	8004170 <vPortExitCritical>
				return pdPASS;
 80047be:	2001      	movs	r0, #1
}
 80047c0:	b004      	add	sp, #16
 80047c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80047c6:	4620      	mov	r0, r4
 80047c8:	f7ff fde4 	bl	8004394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047cc:	f000 fa2a 	bl	8004c24 <xTaskResumeAll>
 80047d0:	e7cf      	b.n	8004772 <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 80047d2:	4620      	mov	r0, r4
 80047d4:	f7ff fdde 	bl	8004394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047d8:	f000 fa24 	bl	8004c24 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80047dc:	f7ff fca2 	bl	8004124 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047e0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80047e2:	f7ff fcc5 	bl	8004170 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047e6:	2d00      	cmp	r5, #0
 80047e8:	d1c3      	bne.n	8004772 <xQueueGenericReceive+0x102>
 80047ea:	e77f      	b.n	80046ec <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ec:	f000 fbe4 	bl	8004fb8 <xTaskGetSchedulerState>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	f43f af61 	beq.w	80046b8 <xQueueGenericReceive+0x48>
 80047f6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80047f8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80047fa:	f8df a004 	ldr.w	sl, [pc, #4]	; 8004800 <xQueueGenericReceive+0x190>
 80047fe:	e7b9      	b.n	8004774 <xQueueGenericReceive+0x104>
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004804:	4a06      	ldr	r2, [pc, #24]	; (8004820 <prvResetNextTaskUnblockTime+0x1c>)
 8004806:	6813      	ldr	r3, [r2, #0]
 8004808:	6819      	ldr	r1, [r3, #0]
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <prvResetNextTaskUnblockTime+0x20>)
 800480c:	b919      	cbnz	r1, 8004816 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800480e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800481a:	68d2      	ldr	r2, [r2, #12]
 800481c:	6852      	ldr	r2, [r2, #4]
 800481e:	e7f8      	b.n	8004812 <prvResetNextTaskUnblockTime+0xe>
 8004820:	20003c74 	.word	0x20003c74
 8004824:	20003d4c 	.word	0x20003d4c

08004828 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800482a:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800482c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800482e:	4e1b      	ldr	r6, [pc, #108]	; (800489c <prvAddCurrentTaskToDelayedList+0x74>)
{
 8004830:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8004832:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004834:	6830      	ldr	r0, [r6, #0]
 8004836:	3004      	adds	r0, #4
 8004838:	f7ff fc03 	bl	8004042 <uxListRemove>
 800483c:	4633      	mov	r3, r6
 800483e:	b940      	cbnz	r0, 8004852 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004840:	6831      	ldr	r1, [r6, #0]
 8004842:	2001      	movs	r0, #1
 8004844:	4e16      	ldr	r6, [pc, #88]	; (80048a0 <prvAddCurrentTaskToDelayedList+0x78>)
 8004846:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004848:	6832      	ldr	r2, [r6, #0]
 800484a:	4088      	lsls	r0, r1
 800484c:	ea22 0200 	bic.w	r2, r2, r0
 8004850:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004852:	1c62      	adds	r2, r4, #1
 8004854:	d107      	bne.n	8004866 <prvAddCurrentTaskToDelayedList+0x3e>
 8004856:	b137      	cbz	r7, 8004866 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004858:	6819      	ldr	r1, [r3, #0]
 800485a:	4812      	ldr	r0, [pc, #72]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800485c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800485e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004862:	f7ff bbcb 	b.w	8003ffc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004866:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004868:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800486a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800486c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800486e:	d907      	bls.n	8004880 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004870:	4a0d      	ldr	r2, [pc, #52]	; (80048a8 <prvAddCurrentTaskToDelayedList+0x80>)
 8004872:	6810      	ldr	r0, [r2, #0]
 8004874:	6819      	ldr	r1, [r3, #0]
}
 8004876:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800487a:	3104      	adds	r1, #4
 800487c:	f7ff bbca 	b.w	8004014 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <prvAddCurrentTaskToDelayedList+0x84>)
 8004882:	6810      	ldr	r0, [r2, #0]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	3104      	adds	r1, #4
 8004888:	f7ff fbc4 	bl	8004014 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <prvAddCurrentTaskToDelayedList+0x88>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4294      	cmp	r4, r2
 8004892:	d200      	bcs.n	8004896 <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8004894:	601c      	str	r4, [r3, #0]
 8004896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004898:	20003d94 	.word	0x20003d94
 800489c:	20003c70 	.word	0x20003c70
 80048a0:	20003d1c 	.word	0x20003d1c
 80048a4:	20003d6c 	.word	0x20003d6c
 80048a8:	20003c78 	.word	0x20003c78
 80048ac:	20003c74 	.word	0x20003c74
 80048b0:	20003d4c 	.word	0x20003d4c

080048b4 <prvTaskIsTaskSuspended.part.0>:
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	b672      	cpsid	i
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	b662      	cpsie	i
 80048c8:	e7fe      	b.n	80048c8 <prvTaskIsTaskSuspended.part.0+0x14>
	...

080048cc <xTaskCreate>:
	{
 80048cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d0:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80048d4:	4680      	mov	r8, r0
 80048d6:	460f      	mov	r7, r1
 80048d8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048da:	4650      	mov	r0, sl
	{
 80048dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048de:	f7ff fab1 	bl	8003e44 <pvPortMalloc>
			if( pxStack != NULL )
 80048e2:	4605      	mov	r5, r0
 80048e4:	2800      	cmp	r0, #0
 80048e6:	f000 8096 	beq.w	8004a16 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048ea:	2054      	movs	r0, #84	; 0x54
 80048ec:	f7ff faaa 	bl	8003e44 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80048f0:	4604      	mov	r4, r0
 80048f2:	2800      	cmp	r0, #0
 80048f4:	f000 808c 	beq.w	8004a10 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80048f8:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80048fc:	6305      	str	r5, [r0, #48]	; 0x30
 80048fe:	1e7b      	subs	r3, r7, #1
 8004900:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004904:	4455      	add	r5, sl
 8004906:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004908:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800490c:	7859      	ldrb	r1, [r3, #1]
 800490e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004912:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004916:	b109      	cbz	r1, 800491c <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004918:	42bb      	cmp	r3, r7
 800491a:	d1f7      	bne.n	800490c <xTaskCreate+0x40>
 800491c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800491e:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004922:	1d27      	adds	r7, r4, #4
 8004924:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004926:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800492a:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 800492c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8004930:	bf28      	it	cs
 8004932:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004934:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004936:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004938:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800493c:	f7ff fb5b 	bl	8003ff6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004940:	f104 0018 	add.w	r0, r4, #24
 8004944:	f7ff fb57 	bl	8003ff6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004948:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800494c:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800494e:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004950:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004952:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004954:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004956:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004958:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800495c:	f7ff fbb8 	bl	80040d0 <pxPortInitialiseStack>
 8004960:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004962:	b106      	cbz	r6, 8004966 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004964:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8004966:	f7ff fbdd 	bl	8004124 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800496a:	4b32      	ldr	r3, [pc, #200]	; (8004a34 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 800496c:	4e32      	ldr	r6, [pc, #200]	; (8004a38 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004a64 <xTaskCreate+0x198>
 8004974:	3201      	adds	r2, #1
 8004976:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004978:	6835      	ldr	r5, [r6, #0]
 800497a:	2d00      	cmp	r5, #0
 800497c:	d14e      	bne.n	8004a1c <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800497e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d11d      	bne.n	80049c2 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004986:	eb08 0005 	add.w	r0, r8, r5
 800498a:	3514      	adds	r5, #20
 800498c:	f7ff fb28 	bl	8003fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004990:	2d8c      	cmp	r5, #140	; 0x8c
 8004992:	d1f8      	bne.n	8004986 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8004994:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004a68 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8004998:	4d28      	ldr	r5, [pc, #160]	; (8004a3c <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800499a:	4648      	mov	r0, r9
 800499c:	f7ff fb20 	bl	8003fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049a0:	4628      	mov	r0, r5
 80049a2:	f7ff fb1d 	bl	8003fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049a6:	4826      	ldr	r0, [pc, #152]	; (8004a40 <xTaskCreate+0x174>)
 80049a8:	f7ff fb1a 	bl	8003fe0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80049ac:	4825      	ldr	r0, [pc, #148]	; (8004a44 <xTaskCreate+0x178>)
 80049ae:	f7ff fb17 	bl	8003fe0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80049b2:	4825      	ldr	r0, [pc, #148]	; (8004a48 <xTaskCreate+0x17c>)
 80049b4:	f7ff fb14 	bl	8003fe0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80049b8:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <xTaskCreate+0x180>)
 80049ba:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <xTaskCreate+0x184>)
 80049c0:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80049c2:	4a24      	ldr	r2, [pc, #144]	; (8004a54 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80049c4:	2501      	movs	r5, #1
 80049c6:	4924      	ldr	r1, [pc, #144]	; (8004a58 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80049c8:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80049ca:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80049cc:	3301      	adds	r3, #1
 80049ce:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80049d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049d2:	fa05 f302 	lsl.w	r3, r5, r2
 80049d6:	4303      	orrs	r3, r0
 80049d8:	2014      	movs	r0, #20
 80049da:	600b      	str	r3, [r1, #0]
 80049dc:	4639      	mov	r1, r7
 80049de:	fb00 8002 	mla	r0, r0, r2, r8
 80049e2:	f7ff fb0b 	bl	8003ffc <vListInsertEnd>
	taskEXIT_CRITICAL();
 80049e6:	f7ff fbc3 	bl	8004170 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80049ea:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <xTaskCreate+0x190>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	b163      	cbz	r3, 8004a0a <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049f0:	6833      	ldr	r3, [r6, #0]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d207      	bcs.n	8004a0a <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80049fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fe:	4b18      	ldr	r3, [pc, #96]	; (8004a60 <xTaskCreate+0x194>)
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	f3bf 8f6f 	isb	sy
	}
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8004a10:	4628      	mov	r0, r5
 8004a12:	f7ff faa9 	bl	8003f68 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a16:	f04f 35ff 	mov.w	r5, #4294967295
 8004a1a:	e7f6      	b.n	8004a0a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <xTaskCreate+0x190>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ce      	bne.n	80049c2 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a24:	6833      	ldr	r3, [r6, #0]
 8004a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d8c9      	bhi.n	80049c2 <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 8004a2e:	6034      	str	r4, [r6, #0]
 8004a30:	e7c7      	b.n	80049c2 <xTaskCreate+0xf6>
 8004a32:	bf00      	nop
 8004a34:	20003d08 	.word	0x20003d08
 8004a38:	20003c70 	.word	0x20003c70
 8004a3c:	20003d34 	.word	0x20003d34
 8004a40:	20003d54 	.word	0x20003d54
 8004a44:	20003d80 	.word	0x20003d80
 8004a48:	20003d6c 	.word	0x20003d6c
 8004a4c:	20003c74 	.word	0x20003c74
 8004a50:	20003c78 	.word	0x20003c78
 8004a54:	20003d18 	.word	0x20003d18
 8004a58:	20003d1c 	.word	0x20003d1c
 8004a5c:	20003d68 	.word	0x20003d68
 8004a60:	e000ed04 	.word	0xe000ed04
 8004a64:	20003c7c 	.word	0x20003c7c
 8004a68:	20003d20 	.word	0x20003d20

08004a6c <vTaskStartScheduler>:
{
 8004a6c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8004a6e:	4b19      	ldr	r3, [pc, #100]	; (8004ad4 <vTaskStartScheduler+0x68>)
 8004a70:	2400      	movs	r4, #0
 8004a72:	2280      	movs	r2, #128	; 0x80
 8004a74:	4918      	ldr	r1, [pc, #96]	; (8004ad8 <vTaskStartScheduler+0x6c>)
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	4623      	mov	r3, r4
 8004a7a:	9400      	str	r4, [sp, #0]
 8004a7c:	4817      	ldr	r0, [pc, #92]	; (8004adc <vTaskStartScheduler+0x70>)
 8004a7e:	f7ff ff25 	bl	80048cc <xTaskCreate>
	if( xReturn == pdPASS )
 8004a82:	2801      	cmp	r0, #1
 8004a84:	d116      	bne.n	8004ab4 <vTaskStartScheduler+0x48>
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	b672      	cpsid	i
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <vTaskStartScheduler+0x74>)
 8004aa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <vTaskStartScheduler+0x78>)
 8004aa4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <vTaskStartScheduler+0x7c>)
 8004aa8:	601c      	str	r4, [r3, #0]
}
 8004aaa:	b002      	add	sp, #8
 8004aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004ab0:	f7ff bbd4 	b.w	800425c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d10a      	bne.n	8004ace <vTaskStartScheduler+0x62>
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	b672      	cpsid	i
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	b662      	cpsie	i
 8004acc:	e7fe      	b.n	8004acc <vTaskStartScheduler+0x60>
}
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd10      	pop	{r4, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20003d48 	.word	0x20003d48
 8004ad8:	0800537e 	.word	0x0800537e
 8004adc:	08004d65 	.word	0x08004d65
 8004ae0:	20003d4c 	.word	0x20003d4c
 8004ae4:	20003d68 	.word	0x20003d68
 8004ae8:	20003d94 	.word	0x20003d94

08004aec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004aec:	4a02      	ldr	r2, [pc, #8]	; (8004af8 <vTaskSuspendAll+0xc>)
 8004aee:	6813      	ldr	r3, [r2, #0]
 8004af0:	3301      	adds	r3, #1
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20003d14 	.word	0x20003d14

08004afc <xTaskIncrementTick>:
{
 8004afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b00:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <xTaskIncrementTick+0xfc>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d155      	bne.n	8004bb4 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8004b08:	4b3c      	ldr	r3, [pc, #240]	; (8004bfc <xTaskIncrementTick+0x100>)
 8004b0a:	681c      	ldr	r4, [r3, #0]
 8004b0c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004b0e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004b10:	b9cc      	cbnz	r4, 8004b46 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8004b12:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <xTaskIncrementTick+0x104>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	b152      	cbz	r2, 8004b30 <xTaskIncrementTick+0x34>
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	b672      	cpsid	i
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	b662      	cpsie	i
 8004b2e:	e7fe      	b.n	8004b2e <xTaskIncrementTick+0x32>
 8004b30:	4a34      	ldr	r2, [pc, #208]	; (8004c04 <xTaskIncrementTick+0x108>)
 8004b32:	6819      	ldr	r1, [r3, #0]
 8004b34:	6810      	ldr	r0, [r2, #0]
 8004b36:	6018      	str	r0, [r3, #0]
 8004b38:	6011      	str	r1, [r2, #0]
 8004b3a:	4a33      	ldr	r2, [pc, #204]	; (8004c08 <xTaskIncrementTick+0x10c>)
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	f7ff fe5f 	bl	8004804 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b46:	4d31      	ldr	r5, [pc, #196]	; (8004c0c <xTaskIncrementTick+0x110>)
 8004b48:	f04f 0b00 	mov.w	fp, #0
 8004b4c:	4f30      	ldr	r7, [pc, #192]	; (8004c10 <xTaskIncrementTick+0x114>)
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	429c      	cmp	r4, r3
 8004b52:	d33e      	bcc.n	8004bd2 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b54:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004c00 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8004b58:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004c20 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b5c:	f8d8 2000 	ldr.w	r2, [r8]
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	bb72      	cbnz	r2, 8004bc2 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b64:	f04f 32ff 	mov.w	r2, #4294967295
 8004b68:	602a      	str	r2, [r5, #0]
					break;
 8004b6a:	e032      	b.n	8004bd2 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b6c:	f106 0a04 	add.w	sl, r6, #4
 8004b70:	4650      	mov	r0, sl
 8004b72:	f7ff fa66 	bl	8004042 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b76:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004b78:	b119      	cbz	r1, 8004b82 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b7a:	f106 0018 	add.w	r0, r6, #24
 8004b7e:	f7ff fa60 	bl	8004042 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b82:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004b84:	2201      	movs	r2, #1
 8004b86:	f8d9 3000 	ldr.w	r3, [r9]
 8004b8a:	f04f 0e14 	mov.w	lr, #20
 8004b8e:	fa02 f100 	lsl.w	r1, r2, r0
 8004b92:	4319      	orrs	r1, r3
 8004b94:	4b1f      	ldr	r3, [pc, #124]	; (8004c14 <xTaskIncrementTick+0x118>)
 8004b96:	f8c9 1000 	str.w	r1, [r9]
 8004b9a:	4651      	mov	r1, sl
 8004b9c:	fb0e 3000 	mla	r0, lr, r0, r3
 8004ba0:	f7ff fa2c 	bl	8003ffc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ba4:	6838      	ldr	r0, [r7, #0]
 8004ba6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004ba8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004baa:	4291      	cmp	r1, r2
 8004bac:	bf28      	it	cs
 8004bae:	f04f 0b01 	movcs.w	fp, #1
 8004bb2:	e7d3      	b.n	8004b5c <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8004bb4:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8004bb6:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8004bba:	6813      	ldr	r3, [r2, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	e011      	b.n	8004be6 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bc2:	f8d8 2000 	ldr.w	r2, [r8]
 8004bc6:	68d2      	ldr	r2, [r2, #12]
 8004bc8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bca:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004bcc:	428c      	cmp	r4, r1
 8004bce:	d2cd      	bcs.n	8004b6c <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 8004bd0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <xTaskIncrementTick+0x118>)
 8004bd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004bd8:	2214      	movs	r2, #20
 8004bda:	434a      	muls	r2, r1
 8004bdc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004bde:	2a02      	cmp	r2, #2
 8004be0:	bf28      	it	cs
 8004be2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004be6:	4a0d      	ldr	r2, [pc, #52]	; (8004c1c <xTaskIncrementTick+0x120>)
 8004be8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	bf18      	it	ne
 8004bee:	f04f 0b01 	movne.w	fp, #1
}
 8004bf2:	4658      	mov	r0, fp
 8004bf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf8:	20003d14 	.word	0x20003d14
 8004bfc:	20003d94 	.word	0x20003d94
 8004c00:	20003c74 	.word	0x20003c74
 8004c04:	20003c78 	.word	0x20003c78
 8004c08:	20003d50 	.word	0x20003d50
 8004c0c:	20003d4c 	.word	0x20003d4c
 8004c10:	20003c70 	.word	0x20003c70
 8004c14:	20003c7c 	.word	0x20003c7c
 8004c18:	20003d10 	.word	0x20003d10
 8004c1c:	20003d98 	.word	0x20003d98
 8004c20:	20003d1c 	.word	0x20003d1c

08004c24 <xTaskResumeAll>:
{
 8004c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004c28:	4c32      	ldr	r4, [pc, #200]	; (8004cf4 <xTaskResumeAll+0xd0>)
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	b953      	cbnz	r3, 8004c44 <xTaskResumeAll+0x20>
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	b672      	cpsid	i
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	b662      	cpsie	i
 8004c42:	e7fe      	b.n	8004c42 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8004c44:	f7ff fa6e 	bl	8004124 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c4e:	6824      	ldr	r4, [r4, #0]
 8004c50:	b12c      	cbz	r4, 8004c5e <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8004c52:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004c54:	f7ff fa8c 	bl	8004170 <vPortExitCritical>
}
 8004c58:	4620      	mov	r0, r4
 8004c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c5e:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <xTaskResumeAll+0xd4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f5      	beq.n	8004c52 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c66:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004d10 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8004c6a:	4f24      	ldr	r7, [pc, #144]	; (8004cfc <xTaskResumeAll+0xd8>)
 8004c6c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004d14 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c70:	f8d9 3000 	ldr.w	r3, [r9]
 8004c74:	b9e3      	cbnz	r3, 8004cb0 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8004c76:	b10c      	cbz	r4, 8004c7c <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8004c78:	f7ff fdc4 	bl	8004804 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c7c:	4d20      	ldr	r5, [pc, #128]	; (8004d00 <xTaskResumeAll+0xdc>)
 8004c7e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c80:	b144      	cbz	r4, 8004c94 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8004c82:	4e20      	ldr	r6, [pc, #128]	; (8004d04 <xTaskResumeAll+0xe0>)
 8004c84:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004c86:	f7ff ff39 	bl	8004afc <xTaskIncrementTick>
 8004c8a:	b100      	cbz	r0, 8004c8e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8004c8c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c8e:	3c01      	subs	r4, #1
 8004c90:	d1f9      	bne.n	8004c86 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8004c92:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <xTaskResumeAll+0xe0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0da      	beq.n	8004c52 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8004c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <xTaskResumeAll+0xe4>)
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004cac:	2401      	movs	r4, #1
 8004cae:	e7d1      	b.n	8004c54 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cb0:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8004cb4:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cb6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb8:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cba:	f104 0018 	add.w	r0, r4, #24
 8004cbe:	f7ff f9c0 	bl	8004042 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f7ff f9bd 	bl	8004042 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	2014      	movs	r0, #20
 8004cce:	fa05 f302 	lsl.w	r3, r5, r2
 8004cd2:	fb00 8002 	mla	r0, r0, r2, r8
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	4631      	mov	r1, r6
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	f7ff f98e 	bl	8003ffc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <xTaskResumeAll+0xe8>)
 8004ce2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d3c1      	bcc.n	8004c70 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <xTaskResumeAll+0xe0>)
 8004cee:	601d      	str	r5, [r3, #0]
 8004cf0:	e7be      	b.n	8004c70 <xTaskResumeAll+0x4c>
 8004cf2:	bf00      	nop
 8004cf4:	20003d14 	.word	0x20003d14
 8004cf8:	20003d08 	.word	0x20003d08
 8004cfc:	20003d1c 	.word	0x20003d1c
 8004d00:	20003d10 	.word	0x20003d10
 8004d04:	20003d98 	.word	0x20003d98
 8004d08:	e000ed04 	.word	0xe000ed04
 8004d0c:	20003c70 	.word	0x20003c70
 8004d10:	20003d54 	.word	0x20003d54
 8004d14:	20003c7c 	.word	0x20003c7c

08004d18 <vTaskDelay>:
	{
 8004d18:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d1a:	b940      	cbnz	r0, 8004d2e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d20:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <vTaskDelay+0x44>)
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <vTaskDelay+0x48>)
 8004d30:	6819      	ldr	r1, [r3, #0]
 8004d32:	b151      	cbz	r1, 8004d4a <vTaskDelay+0x32>
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	b672      	cpsid	i
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	b662      	cpsie	i
 8004d48:	e7fe      	b.n	8004d48 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004d4a:	f7ff fecf 	bl	8004aec <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d4e:	f7ff fd6b 	bl	8004828 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004d52:	f7ff ff67 	bl	8004c24 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d0e0      	beq.n	8004d1c <vTaskDelay+0x4>
 8004d5a:	bd08      	pop	{r3, pc}
 8004d5c:	e000ed04 	.word	0xe000ed04
 8004d60:	20003d14 	.word	0x20003d14

08004d64 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004d64:	4e17      	ldr	r6, [pc, #92]	; (8004dc4 <prvIdleTask+0x60>)
{
 8004d66:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d68:	4c17      	ldr	r4, [pc, #92]	; (8004dc8 <prvIdleTask+0x64>)
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	b963      	cbnz	r3, 8004d88 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d6e:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <prvIdleTask+0x68>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d9f8      	bls.n	8004d68 <prvIdleTask+0x4>
				taskYIELD();
 8004d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <prvIdleTask+0x6c>)
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	e7ef      	b.n	8004d68 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8004d88:	f7ff feb0 	bl	8004aec <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004d8c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8004d8e:	f7ff ff49 	bl	8004c24 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8004d92:	2d00      	cmp	r5, #0
 8004d94:	d0e9      	beq.n	8004d6a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8004d96:	f7ff f9c5 	bl	8004124 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d9a:	68f3      	ldr	r3, [r6, #12]
 8004d9c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d9e:	1d28      	adds	r0, r5, #4
 8004da0:	f7ff f94f 	bl	8004042 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004da4:	4a0b      	ldr	r2, [pc, #44]	; (8004dd4 <prvIdleTask+0x70>)
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8004db2:	f7ff f9dd 	bl	8004170 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8004db6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004db8:	f7ff f8d6 	bl	8003f68 <vPortFree>
			vPortFree( pxTCB );
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f7ff f8d3 	bl	8003f68 <vPortFree>
 8004dc2:	e7d2      	b.n	8004d6a <prvIdleTask+0x6>
 8004dc4:	20003d80 	.word	0x20003d80
 8004dc8:	20003d0c 	.word	0x20003d0c
 8004dcc:	20003c7c 	.word	0x20003c7c
 8004dd0:	e000ed04 	.word	0xe000ed04
 8004dd4:	20003d08 	.word	0x20003d08

08004dd8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <vTaskSwitchContext+0x64>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <vTaskSwitchContext+0x68>)
{
 8004dde:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004de0:	b112      	cbz	r2, 8004de8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004de2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004de8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004dea:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <vTaskSwitchContext+0x6c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004dee:	fab3 f383 	clz	r3, r3
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2214      	movs	r2, #20
 8004df6:	4914      	ldr	r1, [pc, #80]	; (8004e48 <vTaskSwitchContext+0x70>)
 8004df8:	f1c3 031f 	rsb	r3, r3, #31
 8004dfc:	435a      	muls	r2, r3
 8004dfe:	588c      	ldr	r4, [r1, r2]
 8004e00:	1888      	adds	r0, r1, r2
 8004e02:	b954      	cbnz	r4, 8004e1a <vTaskSwitchContext+0x42>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	b672      	cpsid	i
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	b662      	cpsie	i
 8004e18:	e7fe      	b.n	8004e18 <vTaskSwitchContext+0x40>
 8004e1a:	6844      	ldr	r4, [r0, #4]
 8004e1c:	3208      	adds	r2, #8
 8004e1e:	6864      	ldr	r4, [r4, #4]
 8004e20:	440a      	add	r2, r1
 8004e22:	4294      	cmp	r4, r2
 8004e24:	6044      	str	r4, [r0, #4]
 8004e26:	bf04      	itt	eq
 8004e28:	6862      	ldreq	r2, [r4, #4]
 8004e2a:	6042      	streq	r2, [r0, #4]
 8004e2c:	2214      	movs	r2, #20
 8004e2e:	fb02 1303 	mla	r3, r2, r3, r1
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <vTaskSwitchContext+0x74>)
 8004e38:	e7d4      	b.n	8004de4 <vTaskSwitchContext+0xc>
 8004e3a:	bf00      	nop
 8004e3c:	20003d14 	.word	0x20003d14
 8004e40:	20003d98 	.word	0x20003d98
 8004e44:	20003d1c 	.word	0x20003d1c
 8004e48:	20003c7c 	.word	0x20003c7c
 8004e4c:	20003c70 	.word	0x20003c70

08004e50 <vTaskPlaceOnEventList>:
{
 8004e50:	b510      	push	{r4, lr}
 8004e52:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004e54:	b950      	cbnz	r0, 8004e6c <vTaskPlaceOnEventList+0x1c>
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	b672      	cpsid	i
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	b662      	cpsie	i
 8004e6a:	e7fe      	b.n	8004e6a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <vTaskPlaceOnEventList+0x34>)
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	3118      	adds	r1, #24
 8004e72:	f7ff f8cf 	bl	8004014 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e76:	4620      	mov	r0, r4
 8004e78:	2101      	movs	r1, #1
}
 8004e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e7e:	f7ff bcd3 	b.w	8004828 <prvAddCurrentTaskToDelayedList>
 8004e82:	bf00      	nop
 8004e84:	20003c70 	.word	0x20003c70

08004e88 <xTaskRemoveFromEventList>:
{
 8004e88:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e8a:	68c3      	ldr	r3, [r0, #12]
 8004e8c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004e8e:	b954      	cbnz	r4, 8004ea6 <xTaskRemoveFromEventList+0x1e>
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	b672      	cpsid	i
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	b662      	cpsie	i
 8004ea4:	e7fe      	b.n	8004ea4 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ea6:	f104 0518 	add.w	r5, r4, #24
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f7ff f8c9 	bl	8004042 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb0:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <xTaskRemoveFromEventList+0x70>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	b9db      	cbnz	r3, 8004eee <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eb6:	1d25      	adds	r5, r4, #4
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f7ff f8c2 	bl	8004042 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ebe:	490f      	ldr	r1, [pc, #60]	; (8004efc <xTaskRemoveFromEventList+0x74>)
 8004ec0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	6808      	ldr	r0, [r1, #0]
 8004ec6:	4093      	lsls	r3, r2
 8004ec8:	4303      	orrs	r3, r0
 8004eca:	2014      	movs	r0, #20
 8004ecc:	600b      	str	r3, [r1, #0]
 8004ece:	4629      	mov	r1, r5
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <xTaskRemoveFromEventList+0x78>)
 8004ed2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ed6:	f7ff f891 	bl	8003ffc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004eda:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <xTaskRemoveFromEventList+0x7c>)
 8004edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d906      	bls.n	8004ef4 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <xTaskRemoveFromEventList+0x80>)
 8004eea:	6018      	str	r0, [r3, #0]
 8004eec:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eee:	4629      	mov	r1, r5
 8004ef0:	4806      	ldr	r0, [pc, #24]	; (8004f0c <xTaskRemoveFromEventList+0x84>)
 8004ef2:	e7f0      	b.n	8004ed6 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8004ef4:	2000      	movs	r0, #0
}
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	20003d14 	.word	0x20003d14
 8004efc:	20003d1c 	.word	0x20003d1c
 8004f00:	20003c7c 	.word	0x20003c7c
 8004f04:	20003c70 	.word	0x20003c70
 8004f08:	20003d98 	.word	0x20003d98
 8004f0c:	20003d54 	.word	0x20003d54

08004f10 <vTaskSetTimeOutState>:
{
 8004f10:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8004f12:	b908      	cbnz	r0, 8004f18 <vTaskSetTimeOutState+0x8>
 8004f14:	f7ff fcce 	bl	80048b4 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f18:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <vTaskSetTimeOutState+0x18>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f1e:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <vTaskSetTimeOutState+0x1c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6043      	str	r3, [r0, #4]
 8004f24:	bd08      	pop	{r3, pc}
 8004f26:	bf00      	nop
 8004f28:	20003d50 	.word	0x20003d50
 8004f2c:	20003d94 	.word	0x20003d94

08004f30 <xTaskCheckForTimeOut>:
{
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8004f34:	4604      	mov	r4, r0
 8004f36:	b950      	cbnz	r0, 8004f4e <xTaskCheckForTimeOut+0x1e>
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	b672      	cpsid	i
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	b662      	cpsie	i
 8004f4c:	e7fe      	b.n	8004f4c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8004f4e:	b951      	cbnz	r1, 8004f66 <xTaskCheckForTimeOut+0x36>
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	b672      	cpsid	i
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	b662      	cpsie	i
 8004f64:	e7fe      	b.n	8004f64 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8004f66:	f7ff f8dd 	bl	8004124 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004f6a:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <xTaskCheckForTimeOut+0x74>)
 8004f6c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004f6e:	682b      	ldr	r3, [r5, #0]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	d010      	beq.n	8004f96 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f74:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <xTaskCheckForTimeOut+0x78>)
 8004f76:	6820      	ldr	r0, [r4, #0]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	4290      	cmp	r0, r2
 8004f7c:	6862      	ldr	r2, [r4, #4]
 8004f7e:	d001      	beq.n	8004f84 <xTaskCheckForTimeOut+0x54>
 8004f80:	4291      	cmp	r1, r2
 8004f82:	d20d      	bcs.n	8004fa0 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f84:	1a88      	subs	r0, r1, r2
 8004f86:	4283      	cmp	r3, r0
 8004f88:	d90a      	bls.n	8004fa0 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004f8a:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 8004f8c:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004f8e:	4413      	add	r3, r2
 8004f90:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004f92:	f7ff ffbd 	bl	8004f10 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8004f96:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004f98:	f7ff f8ea 	bl	8004170 <vPortExitCritical>
}
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8004fa0:	2401      	movs	r4, #1
 8004fa2:	e7f9      	b.n	8004f98 <xTaskCheckForTimeOut+0x68>
 8004fa4:	20003d94 	.word	0x20003d94
 8004fa8:	20003d50 	.word	0x20003d50

08004fac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004fac:	2201      	movs	r2, #1
 8004fae:	4b01      	ldr	r3, [pc, #4]	; (8004fb4 <vTaskMissedYield+0x8>)
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	4770      	bx	lr
 8004fb4:	20003d98 	.word	0x20003d98

08004fb8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <xTaskGetSchedulerState+0x18>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	b133      	cbz	r3, 8004fcc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <xTaskGetSchedulerState+0x1c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2002      	moveq	r0, #2
 8004fc8:	2000      	movne	r0, #0
 8004fca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fcc:	2001      	movs	r0, #1
	}
 8004fce:	4770      	bx	lr
 8004fd0:	20003d68 	.word	0x20003d68
 8004fd4:	20003d14 	.word	0x20003d14

08004fd8 <vTaskPriorityInherit>:
	{
 8004fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8004fdc:	4604      	mov	r4, r0
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d038      	beq.n	8005054 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004fe2:	4d1d      	ldr	r5, [pc, #116]	; (8005058 <vTaskPriorityInherit+0x80>)
 8004fe4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004fe6:	682a      	ldr	r2, [r5, #0]
 8004fe8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d232      	bcs.n	8005054 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fee:	6982      	ldr	r2, [r0, #24]
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	db04      	blt.n	8004ffe <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff4:	682a      	ldr	r2, [r5, #0]
 8004ff6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ff8:	f1c2 0207 	rsb	r2, r2, #7
 8004ffc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ffe:	4e17      	ldr	r6, [pc, #92]	; (800505c <vTaskPriorityInherit+0x84>)
 8005000:	2714      	movs	r7, #20
 8005002:	6962      	ldr	r2, [r4, #20]
 8005004:	fb07 6303 	mla	r3, r7, r3, r6
 8005008:	429a      	cmp	r2, r3
 800500a:	d120      	bne.n	800504e <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800500c:	f104 0804 	add.w	r8, r4, #4
 8005010:	4640      	mov	r0, r8
 8005012:	f7ff f816 	bl	8004042 <uxListRemove>
 8005016:	4a12      	ldr	r2, [pc, #72]	; (8005060 <vTaskPriorityInherit+0x88>)
 8005018:	b948      	cbnz	r0, 800502e <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800501a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800501c:	4347      	muls	r7, r0
 800501e:	59f3      	ldr	r3, [r6, r7]
 8005020:	b92b      	cbnz	r3, 800502e <vTaskPriorityInherit+0x56>
 8005022:	2101      	movs	r1, #1
 8005024:	6813      	ldr	r3, [r2, #0]
 8005026:	4081      	lsls	r1, r0
 8005028:	ea23 0301 	bic.w	r3, r3, r1
 800502c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800502e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8005030:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005032:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005034:	2301      	movs	r3, #1
 8005036:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005038:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800503a:	430b      	orrs	r3, r1
 800503c:	4641      	mov	r1, r8
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	2314      	movs	r3, #20
 8005042:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8005046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 800504a:	f7fe bfd7 	b.w	8003ffc <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800504e:	682b      	ldr	r3, [r5, #0]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005058:	20003c70 	.word	0x20003c70
 800505c:	20003c7c 	.word	0x20003c7c
 8005060:	20003d1c 	.word	0x20003d1c

08005064 <xTaskPriorityDisinherit>:
	{
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005066:	4604      	mov	r4, r0
 8005068:	b908      	cbnz	r0, 800506e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800506a:	2000      	movs	r0, #0
 800506c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <xTaskPriorityDisinherit+0x9c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4298      	cmp	r0, r3
 8005074:	d00a      	beq.n	800508c <xTaskPriorityDisinherit+0x28>
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	b672      	cpsid	i
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	b662      	cpsie	i
 800508a:	e7fe      	b.n	800508a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800508c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800508e:	b953      	cbnz	r3, 80050a6 <xTaskPriorityDisinherit+0x42>
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	b672      	cpsid	i
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	b662      	cpsie	i
 80050a4:	e7fe      	b.n	80050a4 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050a6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80050a8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80050ac:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050ae:	4291      	cmp	r1, r2
 80050b0:	d0db      	beq.n	800506a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1d9      	bne.n	800506a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b6:	1d05      	adds	r5, r0, #4
 80050b8:	4e12      	ldr	r6, [pc, #72]	; (8005104 <xTaskPriorityDisinherit+0xa0>)
 80050ba:	4628      	mov	r0, r5
 80050bc:	f7fe ffc1 	bl	8004042 <uxListRemove>
 80050c0:	4a11      	ldr	r2, [pc, #68]	; (8005108 <xTaskPriorityDisinherit+0xa4>)
 80050c2:	b950      	cbnz	r0, 80050da <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80050c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80050c6:	2114      	movs	r1, #20
 80050c8:	4379      	muls	r1, r7
 80050ca:	5873      	ldr	r3, [r6, r1]
 80050cc:	b92b      	cbnz	r3, 80050da <xTaskPriorityDisinherit+0x76>
 80050ce:	2001      	movs	r0, #1
 80050d0:	6813      	ldr	r3, [r2, #0]
 80050d2:	40b8      	lsls	r0, r7
 80050d4:	ea23 0300 	bic.w	r3, r3, r0
 80050d8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050da:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050dc:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050e0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80050e4:	2401      	movs	r4, #1
 80050e6:	6811      	ldr	r1, [r2, #0]
 80050e8:	fa04 f003 	lsl.w	r0, r4, r3
 80050ec:	4308      	orrs	r0, r1
 80050ee:	4629      	mov	r1, r5
 80050f0:	6010      	str	r0, [r2, #0]
 80050f2:	2014      	movs	r0, #20
 80050f4:	fb00 6003 	mla	r0, r0, r3, r6
 80050f8:	f7fe ff80 	bl	8003ffc <vListInsertEnd>
					xReturn = pdTRUE;
 80050fc:	4620      	mov	r0, r4
	}
 80050fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005100:	20003c70 	.word	0x20003c70
 8005104:	20003c7c 	.word	0x20003c7c
 8005108:	20003d1c 	.word	0x20003d1c

0800510c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <pvTaskIncrementMutexHeldCount+0x14>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	b11a      	cbz	r2, 800511a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8005116:	3201      	adds	r2, #1
 8005118:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800511a:	6818      	ldr	r0, [r3, #0]
	}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20003c70 	.word	0x20003c70

08005124 <__libc_init_array>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4e0d      	ldr	r6, [pc, #52]	; (800515c <__libc_init_array+0x38>)
 8005128:	4c0d      	ldr	r4, [pc, #52]	; (8005160 <__libc_init_array+0x3c>)
 800512a:	1ba4      	subs	r4, r4, r6
 800512c:	10a4      	asrs	r4, r4, #2
 800512e:	2500      	movs	r5, #0
 8005130:	42a5      	cmp	r5, r4
 8005132:	d109      	bne.n	8005148 <__libc_init_array+0x24>
 8005134:	4e0b      	ldr	r6, [pc, #44]	; (8005164 <__libc_init_array+0x40>)
 8005136:	4c0c      	ldr	r4, [pc, #48]	; (8005168 <__libc_init_array+0x44>)
 8005138:	f000 f82c 	bl	8005194 <_init>
 800513c:	1ba4      	subs	r4, r4, r6
 800513e:	10a4      	asrs	r4, r4, #2
 8005140:	2500      	movs	r5, #0
 8005142:	42a5      	cmp	r5, r4
 8005144:	d105      	bne.n	8005152 <__libc_init_array+0x2e>
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800514c:	4798      	blx	r3
 800514e:	3501      	adds	r5, #1
 8005150:	e7ee      	b.n	8005130 <__libc_init_array+0xc>
 8005152:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005156:	4798      	blx	r3
 8005158:	3501      	adds	r5, #1
 800515a:	e7f2      	b.n	8005142 <__libc_init_array+0x1e>
 800515c:	08005384 	.word	0x08005384
 8005160:	08005384 	.word	0x08005384
 8005164:	08005384 	.word	0x08005384
 8005168:	08005388 	.word	0x08005388

0800516c <memcpy>:
 800516c:	b510      	push	{r4, lr}
 800516e:	1e43      	subs	r3, r0, #1
 8005170:	440a      	add	r2, r1
 8005172:	4291      	cmp	r1, r2
 8005174:	d100      	bne.n	8005178 <memcpy+0xc>
 8005176:	bd10      	pop	{r4, pc}
 8005178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800517c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005180:	e7f7      	b.n	8005172 <memcpy+0x6>

08005182 <memset>:
 8005182:	4402      	add	r2, r0
 8005184:	4603      	mov	r3, r0
 8005186:	4293      	cmp	r3, r2
 8005188:	d100      	bne.n	800518c <memset+0xa>
 800518a:	4770      	bx	lr
 800518c:	f803 1b01 	strb.w	r1, [r3], #1
 8005190:	e7f9      	b.n	8005186 <memset+0x4>
	...

08005194 <_init>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr

080051a0 <_fini>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr
