
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c78  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08007e78  08007e78  00017e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008274  08008274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08008278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000047c0  20000018  08008290  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200047d8  08008290  000247d8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_line   00013b52  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004471c  00000000  00000000  00033b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007602  00000000  00000000  000782b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001868  00000000  00000000  0007f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004d70  00000000  00000000  00081120  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001fc93  00000000  00000000  00085e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00009703  00000000  00000000  000a5b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000af226  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000054c8  00000000  00000000  000af2a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000018 	.word	0x20000018
 800021c:	00000000 	.word	0x00000000
 8000220:	08007e60 	.word	0x08007e60

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000001c 	.word	0x2000001c
 800023c:	08007e60 	.word	0x08007e60

08000240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
  ldr  r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800025e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800026a:	f002 fa29 	bl	80026c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f007 fdbf 	bl	8007df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000272:	f001 fd6b 	bl	8001d4c <main>
  bx  lr    
 8000276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000278:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800027c:	08008278 	.word	0x08008278
  ldr  r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000284:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000288:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 800028c:	200047d8 	.word	0x200047d8

08000290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC_IRQHandler>
 8000292:	0000      	movs	r0, r0
 8000294:	0000      	movs	r0, r0
	...

08000298 <StartcontrolTask>:
 * Start FOC control task...
 * clark -> park -> control -> rev park -> rev clark -> PWM
 *
 */
void StartcontrolTask(void const * argument)
{
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	ed2d 8b10 	vpush	{d8-d15}
	float integra_Cd = 0;
	float integra_Cq = 0;
	float vd_st = 0, vq_st = 0;
 800029e:	eddf faf4 	vldr	s31, [pc, #976]	; 8000670 <StartcontrolTask+0x3d8>
{
 80002a2:	b0a3      	sub	sp, #140	; 0x8c
 80002a4:	4cf3      	ldr	r4, [pc, #972]	; (8000674 <StartcontrolTask+0x3dc>)
	float vd_st = 0, vq_st = 0;
 80002a6:	eeb0 fa6f 	vmov.f32	s30, s31
 80002aa:	4df3      	ldr	r5, [pc, #972]	; (8000678 <StartcontrolTask+0x3e0>)
	float integra_Cq = 0;
 80002ac:	eef0 ea6f 	vmov.f32	s29, s31
	float integra_Cd = 0;
 80002b0:	eeb0 ea6f 	vmov.f32	s28, s31
				integra_Cd = 1000;
			if(integra_Cd<-1000)
				integra_Cd = -1000;

			//get the control voltage
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 80002b4:	ed9f abe0 	vldr	d10, [pc, #896]	; 8000638 <StartcontrolTask+0x3a0>
			volatile float v_q = shuntdata.Kp * er_q + shuntdata.Ki * integra_Cq * 51.2 * 1e-6;
			v_d *= 0.1; v_q *=0.1;
 80002b8:	ed9f 9be1 	vldr	d9, [pc, #900]	; 8000640 <StartcontrolTask+0x3a8>
	*vb = -apha/3 + beta/sq3;
 80002bc:	ed9f 8be2 	vldr	d8, [pc, #904]	; 8000648 <StartcontrolTask+0x3b0>
		if(xQueueReceive(shuntQueueHandle,&shuntdata,2)==pdPASS)
 80002c0:	2300      	movs	r3, #0
 80002c2:	2202      	movs	r2, #2
 80002c4:	a91d      	add	r1, sp, #116	; 0x74
 80002c6:	6820      	ldr	r0, [r4, #0]
 80002c8:	f006 f8b4 	bl	8006434 <xQueueGenericReceive>
 80002cc:	2801      	cmp	r0, #1
 80002ce:	f040 8271 	bne.w	80007b4 <StartcontrolTask+0x51c>
			volatile float c_a = ((float)shuntdata.cur_a)/100;
 80002d2:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80002d6:	4603      	mov	r3, r0
			volatile float c_a = ((float)shuntdata.cur_a)/100;
 80002d8:	ed9f 6ae8 	vldr	s12, [pc, #928]	; 800067c <StartcontrolTask+0x3e4>
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80002dc:	2200      	movs	r2, #0
			volatile float c_a = ((float)shuntdata.cur_a)/100;
 80002de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
			volatile float c_b = ((float)shuntdata.cur_b)/100;
 80002e2:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80002e6:	a919      	add	r1, sp, #100	; 0x64
 80002e8:	6828      	ldr	r0, [r5, #0]
			volatile float c_b = ((float)shuntdata.cur_b)/100;
 80002ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			volatile float c_c = ((float)shuntdata.cur_c)/100;
 80002ee:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
			volatile float c_a = ((float)shuntdata.cur_a)/100;
 80002f2:	ee66 6a86 	vmul.f32	s13, s13, s12
			volatile float c_c = ((float)shuntdata.cur_c)/100;
 80002f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			volatile float c_b = ((float)shuntdata.cur_b)/100;
 80002fa:	ee27 7a06 	vmul.f32	s14, s14, s12
			volatile float c_a = ((float)shuntdata.cur_a)/100;
 80002fe:	edcd 6a05 	vstr	s13, [sp, #20]
			volatile float c_c = ((float)shuntdata.cur_c)/100;
 8000302:	ee67 7a86 	vmul.f32	s15, s15, s12
			volatile float c_b = ((float)shuntdata.cur_b)/100;
 8000306:	ed8d 7a06 	vstr	s14, [sp, #24]
			volatile float c_c = ((float)shuntdata.cur_c)/100;
 800030a:	edcd 7a07 	vstr	s15, [sp, #28]
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 800030e:	f006 f891 	bl	8006434 <xQueueGenericReceive>
 8000312:	2801      	cmp	r0, #1
 8000314:	f040 8258 	bne.w	80007c8 <StartcontrolTask+0x530>
			ClarkeTrans(c_a, c_b, &c_apha, &c_beta);
 8000318:	eddd 7a05 	vldr	s15, [sp, #20]
	*apha = 1.5 * a;
 800031c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
			volatile float theta = 4 * PI * (encdata.recon_counter - CENTERCOUNT
 8000320:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
	*beta = sq3 * b + (sq3 * a)/2;
 8000324:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			ClarkeTrans(c_a, c_b, &c_apha, &c_beta);
 8000328:	ed9d 5a06 	vldr	s10, [sp, #24]
					+ shuntdata.centeroffset) / MAXCOUNT;
 800032c:	f99d 2084 	ldrsb.w	r2, [sp, #132]	; 0x84
			volatile float theta = 4 * PI * (encdata.recon_counter - CENTERCOUNT
 8000330:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
	*beta = sq3 * b + (sq3 * a)/2;
 8000334:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
					+ shuntdata.centeroffset) / MAXCOUNT;
 8000338:	4413      	add	r3, r2
	*apha = 1.5 * a;
 800033a:	ee67 7a87 	vmul.f32	s15, s15, s14
	*beta = sq3 * b + (sq3 * a)/2;
 800033e:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 8000650 <StartcontrolTask+0x3b8>
					+ shuntdata.centeroffset) / MAXCOUNT;
 8000342:	ee07 3a10 	vmov	s14, r3
	*apha = 1.5 * a;
 8000346:	edcd 7a08 	vstr	s15, [sp, #32]
	*beta = sq3 * b + (sq3 * a)/2;
 800034a:	ee26 6b04 	vmul.f64	d6, d6, d4
					+ shuntdata.centeroffset) / MAXCOUNT;
 800034e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
	*beta = sq3 * b + (sq3 * a)/2;
 8000352:	ed9f 4bc1 	vldr	d4, [pc, #772]	; 8000658 <StartcontrolTask+0x3c0>
 8000356:	eea5 6b04 	vfma.f64	d6, d5, d4
					+ shuntdata.centeroffset) / MAXCOUNT;
 800035a:	ed9f 5bc1 	vldr	d5, [pc, #772]	; 8000660 <StartcontrolTask+0x3c8>
 800035e:	ee27 7b05 	vmul.f64	d7, d7, d5
	*beta = sq3 * b + (sq3 * a)/2;
 8000362:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
					+ shuntdata.centeroffset) / MAXCOUNT;
 8000366:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	*beta = sq3 * b + (sq3 * a)/2;
 800036a:	ed8d 6a09 	vstr	s12, [sp, #36]	; 0x24
			volatile float theta = 4 * PI * (encdata.recon_counter - CENTERCOUNT
 800036e:	ed8d 7a0a 	vstr	s14, [sp, #40]	; 0x28
			ParkTrans(c_apha,c_beta,theta,&c_d,&c_q);
 8000372:	ed9d ca08 	vldr	s24, [sp, #32]
 8000376:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 800037a:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
	*i_d = apha*cos(theta) + beta*sin(theta);
 800037e:	eeb7 dac7 	vcvt.f64.f32	d13, s14
 8000382:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000386:	eeb0 0b46 	vmov.f64	d0, d6
 800038a:	ed8d 6b00 	vstr	d6, [sp]
 800038e:	f006 ff33 	bl	80071f8 <cos>
 8000392:	eeb0 bb40 	vmov.f64	d11, d0
 8000396:	ed9d 6b00 	vldr	d6, [sp]
 800039a:	eeb0 0b46 	vmov.f64	d0, d6
 800039e:	f006 ff67 	bl	8007270 <sin>
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80003a2:	eeb1 5a4c 	vneg.f32	s10, s24
 80003a6:	ee2b 6b0d 	vmul.f64	d6, d11, d13
			volatile float er_q = shuntdata.target_cur - c_q;
 80003aa:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 80003ae:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
			volatile float er_q = shuntdata.target_cur - c_q;
 80003b2:	ee07 2a90 	vmov	s15, r2
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80003b6:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
	*i_d = apha*cos(theta) + beta*sin(theta);
 80003ba:	ee2d 3b00 	vmul.f64	d3, d13, d0
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80003be:	eea0 6b05 	vfma.f64	d6, d0, d5
	*i_d = apha*cos(theta) + beta*sin(theta);
 80003c2:	eeb7 5acc 	vcvt.f64.f32	d5, s24
			volatile float er_q = shuntdata.target_cur - c_q;
 80003c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	*i_d = apha*cos(theta) + beta*sin(theta);
 80003ca:	eea5 3b0b 	vfma.f64	d3, d5, d11
 80003ce:	ed9f 5aac 	vldr	s10, [pc, #688]	; 8000680 <StartcontrolTask+0x3e8>

#define MAXVqd 4000000
			if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 80003d2:	eddf 5aac 	vldr	s11, [pc, #688]	; 8000684 <StartcontrolTask+0x3ec>
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80003d6:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 80003da:	eddf 6aab 	vldr	s13, [pc, #684]	; 8000688 <StartcontrolTask+0x3f0>
 80003de:	ed8d 6a0c 	vstr	s12, [sp, #48]	; 0x30
			volatile float er_q = shuntdata.target_cur - c_q;
 80003e2:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
	*i_d = apha*cos(theta) + beta*sin(theta);
 80003e6:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
			volatile float er_q = shuntdata.target_cur - c_q;
 80003ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
	*i_d = apha*cos(theta) + beta*sin(theta);
 80003ee:	ed8d 3a0b 	vstr	s6, [sp, #44]	; 0x2c
			volatile float er_q = shuntdata.target_cur - c_q;
 80003f2:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
			volatile float er_d = T_ID - c_d;
 80003f6:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80003fa:	eef1 7a67 	vneg.f32	s15, s15
 80003fe:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 8000402:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8000406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800040a:	ee17 3a90 	vmov	r3, s15
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 800040e:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 8000412:	fa01 f383 	sxtah	r3, r1, r3
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800041a:	f9bd 105a 	ldrsh.w	r1, [sp, #90]	; 0x5a
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 800041e:	2b00      	cmp	r3, #0
 8000420:	bfb8      	it	lt
 8000422:	3301      	addlt	r3, #1
 8000424:	105a      	asrs	r2, r3, #1
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000426:	ee17 3a90 	vmov	r3, s15
			integra_Cd +=  er_d;
 800042a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 800042e:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000432:	fa01 f383 	sxtah	r3, r1, r3
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 8000436:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
			integra_Cd +=  er_d;
 800043a:	ee3e ea27 	vadd.f32	s28, s28, s15
			integra_Cq +=  er_q;
 800043e:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000442:	2b00      	cmp	r3, #0
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 8000444:	ee04 2a10 	vmov	s8, r2
 8000448:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800044c:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
			integra_Cq +=  er_q;
 8000450:	ee7e eaa7 	vadd.f32	s29, s29, s15
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 8000454:	ee07 2a10 	vmov	s14, r2
 8000458:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 800045c:	fe8e ea45 	vminnm.f32	s28, s28, s10
 8000460:	fe8e ea26 	vmaxnm.f32	s28, s28, s13
 8000464:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000468:	fece eac5 	vminnm.f32	s29, s29, s10
 800046c:	ee24 3a0e 	vmul.f32	s6, s8, s28
 8000470:	fece eaa6 	vmaxnm.f32	s29, s29, s13
			volatile float v_q = shuntdata.Kp * er_q + shuntdata.Ki * integra_Cq * 51.2 * 1e-6;
 8000474:	ee24 4a2e 	vmul.f32	s8, s8, s29
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000478:	bfb8      	it	lt
 800047a:	3301      	addlt	r3, #1
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 800047c:	ee27 6a06 	vmul.f32	s12, s14, s12
 8000480:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000484:	105b      	asrs	r3, r3, #1
			volatile float v_q = shuntdata.Kp * er_q + shuntdata.Ki * integra_Cq * 51.2 * 1e-6;
 8000486:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 800048a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 800048e:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 8000492:	eea3 6b0a 	vfma.f64	d6, d3, d10
 8000496:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 800049a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
			volatile float v_q = shuntdata.Kp * er_q + shuntdata.Ki * integra_Cq * 51.2 * 1e-6;
 800049e:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80004a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80004a6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80004aa:	eea4 7b0a 	vfma.f64	d7, d4, d10
 80004ae:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80004b2:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
			v_d *= 0.1; v_q *=0.1;
 80004b6:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 80004ba:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80004be:	ee27 7b09 	vmul.f64	d7, d7, d9
 80004c2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80004c6:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
 80004ca:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 80004ce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80004d2:	ee27 7b09 	vmul.f64	d7, d7, d9
 80004d6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80004da:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
			if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 80004de:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80004e2:	ee7f 7a27 	vadd.f32	s15, s30, s15
 80004e6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80004ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004ee:	d524      	bpl.n	800053a <StartcontrolTask+0x2a2>
 80004f0:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80004f4:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800068c <StartcontrolTask+0x3f4>
 80004f8:	ee7f 7a27 	vadd.f32	s15, s30, s15
 80004fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000504:	dd19      	ble.n	800053a <StartcontrolTask+0x2a2>
					(vq_st + v_q)<MAXVqd && (vq_st + v_q)>-MAXVqd)
 8000506:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800050a:	ee7f 7aa7 	vadd.f32	s15, s31, s15
			if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 800050e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8000512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000516:	d510      	bpl.n	800053a <StartcontrolTask+0x2a2>
					(vq_st + v_q)<MAXVqd && (vq_st + v_q)>-MAXVqd)
 8000518:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800051c:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 8000520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000528:	dd07      	ble.n	800053a <StartcontrolTask+0x2a2>
			{
				vd_st += v_d;  //equals to Kp..
 800052a:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
				vq_st += v_q;
 800052e:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
				vd_st += v_d;  //equals to Kp..
 8000532:	ee3f fa07 	vadd.f32	s30, s30, s14
				vq_st += v_q;
 8000536:	ee7f faa7 	vadd.f32	s31, s31, s15
			}

			//reverse park...
			volatile float v_apha,v_beta;
			RevParkTrans(&v_apha,&v_beta,theta,vd_st,vq_st);
 800053a:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
	*apha = v_d*cos(theta) - v_q*sin(theta);
 800053e:	eeb7 daef 	vcvt.f64.f32	d13, s31
 8000542:	eeb7 cacf 	vcvt.f64.f32	d12, s30
 8000546:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 800054a:	eeb0 0b45 	vmov.f64	d0, d5
 800054e:	ed8d 5b00 	vstr	d5, [sp]
 8000552:	f006 fe51 	bl	80071f8 <cos>
 8000556:	eeb0 bb40 	vmov.f64	d11, d0
 800055a:	ed9d 5b00 	vldr	d5, [sp]
 800055e:	eeb0 0b45 	vmov.f64	d0, d5
 8000562:	f006 fe85 	bl	8007270 <sin>
 8000566:	ee20 3b4d 	vnmul.f64	d3, d0, d13
	*vb = -apha/3 + beta/sq3;
 800056a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000690 <StartcontrolTask+0x3f8>
	*va = 2*apha/3;
 800056e:	eddf 7a49 	vldr	s15, [pc, #292]	; 8000694 <StartcontrolTask+0x3fc>
	*beta = v_d*sin(theta) + v_q*cos(theta);
 8000572:	ee2b 5b0d 	vmul.f64	d5, d11, d13
	*apha = v_d*cos(theta) - v_q*sin(theta);
 8000576:	eeac 3b0b 	vfma.f64	d3, d12, d11
	*beta = v_d*sin(theta) + v_q*cos(theta);
 800057a:	eeac 5b00 	vfma.f64	d5, d12, d0
			//reverse clarke
			volatile float v_a,v_b,v_c;
			RevClarkeTrans(&v_a,&v_b,&v_c,v_apha,v_beta);

			//mapping the v_a v_b v_c to the real voltage and to the max duty of 2160
			v_a *= VOLTSUP * PHASERES/1000;  //because of 1 is 1 mv
 800057e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8000668 <StartcontrolTask+0x3d0>
	*apha = v_d*cos(theta) - v_q*sin(theta);
 8000582:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
 8000586:	ed8d 3a11 	vstr	s6, [sp, #68]	; 0x44
	*beta = v_d*sin(theta) + v_q*cos(theta);
 800058a:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
			RevClarkeTrans(&v_a,&v_b,&v_c,v_apha,v_beta);
 800058e:	eddd 5a11 	vldr	s11, [sp, #68]	; 0x44
	*vb = -apha/3 + beta/sq3;
 8000592:	ee25 7ac7 	vnmul.f32	s14, s11, s14
	*va = 2*apha/3;
 8000596:	ee65 4aa7 	vmul.f32	s9, s11, s15
	*beta = v_d*sin(theta) + v_q*cos(theta);
 800059a:	ed8d 5a12 	vstr	s10, [sp, #72]	; 0x48
			RevClarkeTrans(&v_a,&v_b,&v_c,v_apha,v_beta);
 800059e:	ed9d 5a12 	vldr	s10, [sp, #72]	; 0x48
	*vb = -apha/3 + beta/sq3;
 80005a2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	*va = 2*apha/3;
 80005a6:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
	*vb = -apha/3 + beta/sq3;
 80005aa:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80005ae:	eeb0 4b47 	vmov.f64	d4, d7
	*vc = -apha/3 - beta/sq3;
 80005b2:	eea5 7b48 	vfms.f64	d7, d5, d8
	*vb = -apha/3 + beta/sq3;
 80005b6:	eea5 4b08 	vfma.f64	d4, d5, d8
	*vc = -apha/3 - beta/sq3;
 80005ba:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	*vb = -apha/3 + beta/sq3;
 80005be:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
 80005c2:	ed8d 4a14 	vstr	s8, [sp, #80]	; 0x50
	*vc = -apha/3 - beta/sq3;
 80005c6:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
			v_a *= VOLTSUP * PHASERES/1000;  //because of 1 is 1 mv
 80005ca:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 80005ce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80005d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005d6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80005da:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
			v_b *= VOLTSUP * PHASERES/1000;
 80005de:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 80005e2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80005e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005ea:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80005ee:	ed8d 7a14 	vstr	s14, [sp, #80]	; 0x50
			v_c *= VOLTSUP * PHASERES/1000;
 80005f2:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 80005f6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80005fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80005fe:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8000602:	ed8d 6a15 	vstr	s12, [sp, #84]	; 0x54
	v_big = *v_a>*v_b?*v_a:*v_b;
 8000606:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 800060a:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 800060e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000616:	f340 80d4 	ble.w	80007c2 <StartcontrolTask+0x52a>
 800061a:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
	v_big = v_big>*v_c?v_big:*v_c;
 800061e:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8000622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062a:	db37      	blt.n	800069c <StartcontrolTask+0x404>
 800062c:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8000630:	e034      	b.n	800069c <StartcontrolTask+0x404>
 8000632:	bf00      	nop
 8000634:	f3af 8000 	nop.w
 8000638:	9abcaf48 	.word	0x9abcaf48
 800063c:	3f0ad7f2 	.word	0x3f0ad7f2
 8000640:	9999999a 	.word	0x9999999a
 8000644:	3fb99999 	.word	0x3fb99999
 8000648:	23205b49 	.word	0x23205b49
 800064c:	3fe279a7 	.word	0x3fe279a7
 8000650:	1c0010c7 	.word	0x1c0010c7
 8000654:	3febb67b 	.word	0x3febb67b
 8000658:	1c0010c7 	.word	0x1c0010c7
 800065c:	3ffbb67b 	.word	0x3ffbb67b
 8000660:	a83a464d 	.word	0xa83a464d
 8000664:	3f79bc69 	.word	0x3f79bc69
 8000668:	43aa79bb 	.word	0x43aa79bb
 800066c:	3f4b866e 	.word	0x3f4b866e
 8000670:	00000000 	.word	0x00000000
 8000674:	20003fd8 	.word	0x20003fd8
 8000678:	20003fc8 	.word	0x20003fc8
 800067c:	3c23d70a 	.word	0x3c23d70a
 8000680:	447a0000 	.word	0x447a0000
 8000684:	4a742400 	.word	0x4a742400
 8000688:	c47a0000 	.word	0xc47a0000
 800068c:	ca742400 	.word	0xca742400
 8000690:	3eaaaaab 	.word	0x3eaaaaab
 8000694:	3f2aaaab 	.word	0x3f2aaaab
 8000698:	c506f000 	.word	0xc506f000
	*v_a -= v_big;
 800069c:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 80006a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006a4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
	*v_b -= v_big;
 80006a8:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 80006ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006b0:	ed8d 7a14 	vstr	s14, [sp, #80]	; 0x50
	*v_c -= v_big;
 80006b4:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 80006b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006bc:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
	v_small = *v_a<*v_b?*v_a:*v_b;
 80006c0:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 80006c4:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 80006c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d0:	d574      	bpl.n	80007bc <StartcontrolTask+0x524>
 80006d2:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
	v_small = v_small<*v_c?v_small:*v_c;
 80006d6:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 80006da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e2:	d801      	bhi.n	80006e8 <StartcontrolTask+0x450>
 80006e4:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
	if(v_small<-MAXDUTY+1) // <-2159..
 80006e8:	ed5f 6a15 	vldr	s13, [pc, #-84]	; 8000698 <StartcontrolTask+0x400>
 80006ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80006f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f4:	d513      	bpl.n	800071e <StartcontrolTask+0x486>
		*v_a *= -(MAXDUTY-1)/v_small;
 80006f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006fa:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80006fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000702:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
		*v_b *= -(MAXDUTY-1)/v_small;
 8000706:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 800070a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800070e:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
		*v_c *= -(MAXDUTY-1)/v_small;  //then the data is proportional under maxduty
 8000712:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8000716:	ee27 7a27 	vmul.f32	s14, s14, s15
 800071a:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54

			//find the bigest one.. sent the duty to 0;
			SVMDuty(&v_a,&v_b,&v_c);
			volatile uint16_t cont_a = (uint16_t)(-v_a);
 800071e:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
			volatile uint16_t cont_b = (uint16_t)(-v_b);
			volatile uint16_t cont_c = (uint16_t)(-v_c);
			setMotorDuty(cont_a, cont_b, cont_c);
			//for debug view..
			conres.duty_a = cont_a;conres.duty_b = cont_b;conres.duty_c = cont_c;
			xQueueOverwrite(conresQueueHandle,&conres);
 8000722:	2302      	movs	r3, #2
			setMotorDuty(cont_a, cont_b, cont_c);
 8000724:	492a      	ldr	r1, [pc, #168]	; (80007d0 <StartcontrolTask+0x538>)
			xQueueOverwrite(conresQueueHandle,&conres);
 8000726:	2200      	movs	r2, #0
			volatile uint16_t cont_a = (uint16_t)(-v_a);
 8000728:	eef1 7a67 	vneg.f32	s15, s15
			xQueueOverwrite(conresQueueHandle,&conres);
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <StartcontrolTask+0x53c>)
			setMotorDuty(cont_a, cont_b, cont_c);
 800072e:	680e      	ldr	r6, [r1, #0]
			xQueueOverwrite(conresQueueHandle,&conres);
 8000730:	a916      	add	r1, sp, #88	; 0x58
 8000732:	6800      	ldr	r0, [r0, #0]
			volatile uint16_t cont_a = (uint16_t)(-v_a);
 8000734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000738:	edcd 7a00 	vstr	s15, [sp]
 800073c:	f8bd 7000 	ldrh.w	r7, [sp]
 8000740:	f8ad 700e 	strh.w	r7, [sp, #14]
			volatile uint16_t cont_b = (uint16_t)(-v_b);
 8000744:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 8000748:	eef1 7a67 	vneg.f32	s15, s15
 800074c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000750:	edcd 7a00 	vstr	s15, [sp]
 8000754:	f8bd 7000 	ldrh.w	r7, [sp]
 8000758:	f8ad 7010 	strh.w	r7, [sp, #16]
			volatile uint16_t cont_c = (uint16_t)(-v_c);
 800075c:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8000760:	eef1 7a67 	vneg.f32	s15, s15
 8000764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000768:	edcd 7a00 	vstr	s15, [sp]
 800076c:	f8bd 7000 	ldrh.w	r7, [sp]
 8000770:	f8ad 7012 	strh.w	r7, [sp, #18]
			setMotorDuty(cont_a, cont_b, cont_c);
 8000774:	f8bd 700e 	ldrh.w	r7, [sp, #14]
 8000778:	b2bf      	uxth	r7, r7
 800077a:	6377      	str	r7, [r6, #52]	; 0x34
 800077c:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 8000780:	b2bf      	uxth	r7, r7
 8000782:	63b7      	str	r7, [r6, #56]	; 0x38
 8000784:	f8bd 7012 	ldrh.w	r7, [sp, #18]
 8000788:	b2bf      	uxth	r7, r7
 800078a:	63f7      	str	r7, [r6, #60]	; 0x3c
			conres.duty_a = cont_a;conres.duty_b = cont_b;conres.duty_c = cont_c;
 800078c:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 8000790:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 8000794:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000798:	f8ad e05c 	strh.w	lr, [sp, #92]	; 0x5c
 800079c:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
 80007a0:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
			xQueueOverwrite(conresQueueHandle,&conres);
 80007a4:	f005 fc3c 	bl	8006020 <xQueueGenericSend>
			//to test the control frequency
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80007a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <StartcontrolTask+0x540>)
 80007ae:	f002 fd27 	bl	8003200 <HAL_GPIO_TogglePin>
 80007b2:	e585      	b.n	80002c0 <StartcontrolTask+0x28>
		}
		else
		{
			//1ms no current data was receieved...something is wrong...error handle
			//  _Error_Handler("controlFOC, 1ms no data receved.",500);
			osDelay(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f005 f86f 	bl	8005898 <osDelay>
	{
 80007ba:	e581      	b.n	80002c0 <StartcontrolTask+0x28>
	v_small = *v_a<*v_b?*v_a:*v_b;
 80007bc:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 80007c0:	e789      	b.n	80006d6 <StartcontrolTask+0x43e>
	v_big = *v_a>*v_b?*v_a:*v_b;
 80007c2:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 80007c6:	e72a      	b.n	800061e <StartcontrolTask+0x386>
		}
  }
}
 80007c8:	b023      	add	sp, #140	; 0x8c
 80007ca:	ecbd 8b10 	vpop	{d8-d15}
 80007ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d0:	200040d4 	.word	0x200040d4
 80007d4:	20003fb0 	.word	0x20003fb0
 80007d8:	40020800 	.word	0x40020800

080007dc <HAL_UART_ErrorCallback>:
 * UART4 error handler
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	//error...
	_Error_Handler("isrSensors.c, uart error",53);
 80007dc:	2135      	movs	r1, #53	; 0x35
 80007de:	4801      	ldr	r0, [pc, #4]	; (80007e4 <HAL_UART_ErrorCallback+0x8>)
 80007e0:	f001 bb1e 	b.w	8001e20 <_Error_Handler>
 80007e4:	08007f5c 	.word	0x08007f5c

080007e8 <HAL_UART_RxCpltCallback>:
	 * if some other task B that has higher priority than A are being woken by the passing queue or semaphore,
	 * the xHigherPriorityTaskWoken will be set to pdTrue and we can directly perform a context switch and thus
	 * leaves the ISR and go to task B, if not so, we need to go back to task A and wait for a tick to switch to B.
	 */

	if(huart->Instance==huart4.Instance) //not necessary to check..
 80007e8:	4ac5      	ldr	r2, [pc, #788]	; (8000b00 <HAL_UART_RxCpltCallback+0x318>)
 80007ea:	6803      	ldr	r3, [r0, #0]
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	4293      	cmp	r3, r2
{
 80007f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007f4:	b085      	sub	sp, #20
	if(huart->Instance==huart4.Instance) //not necessary to check..
 80007f6:	d047      	beq.n	8000888 <HAL_UART_RxCpltCallback+0xa0>
			//call a context switch if needed..
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

	//USART 1 DMA interrupt
	else if(huart->Instance==huart1.Instance)
 80007f8:	4ac2      	ldr	r2, [pc, #776]	; (8000b04 <HAL_UART_RxCpltCallback+0x31c>)
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d002      	beq.n	8000806 <HAL_UART_RxCpltCallback+0x1e>
			}
		}
		//continue DMA
		HAL_UART_DMAResume(&huart1);
	}
}
 8000800:	b005      	add	sp, #20
 8000802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(order_buff[i] == TXHEADER)
 8000806:	4ac0      	ldr	r2, [pc, #768]	; (8000b08 <HAL_UART_RxCpltCallback+0x320>)
 8000808:	4bc0      	ldr	r3, [pc, #768]	; (8000b0c <HAL_UART_RxCpltCallback+0x324>)
 800080a:	7810      	ldrb	r0, [r2, #0]
 800080c:	49c0      	ldr	r1, [pc, #768]	; (8000b10 <HAL_UART_RxCpltCallback+0x328>)
 800080e:	f993 7010 	ldrsb.w	r7, [r3, #16]
 8000812:	28f8      	cmp	r0, #248	; 0xf8
 8000814:	7b1e      	ldrb	r6, [r3, #12]
 8000816:	7b5d      	ldrb	r5, [r3, #13]
 8000818:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800081c:	9701      	str	r7, [sp, #4]
 800081e:	f891 800a 	ldrb.w	r8, [r1, #10]
 8000822:	f891 c00b 	ldrb.w	ip, [r1, #11]
 8000826:	f9b1 b00c 	ldrsh.w	fp, [r1, #12]
 800082a:	f000 81b1 	beq.w	8000b90 <HAL_UART_RxCpltCallback+0x3a8>
 800082e:	f892 e001 	ldrb.w	lr, [r2, #1]
 8000832:	f1be 0ff8 	cmp.w	lr, #248	; 0xf8
 8000836:	f000 8185 	beq.w	8000b44 <HAL_UART_RxCpltCallback+0x35c>
 800083a:	7897      	ldrb	r7, [r2, #2]
 800083c:	2ff8      	cmp	r7, #248	; 0xf8
 800083e:	9702      	str	r7, [sp, #8]
 8000840:	f000 8139 	beq.w	8000ab6 <HAL_UART_RxCpltCallback+0x2ce>
 8000844:	f892 a003 	ldrb.w	sl, [r2, #3]
 8000848:	f1ba 0ff8 	cmp.w	sl, #248	; 0xf8
 800084c:	f000 810c 	beq.w	8000a68 <HAL_UART_RxCpltCallback+0x280>
 8000850:	f892 9004 	ldrb.w	r9, [r2, #4]
 8000854:	f1b9 0ff8 	cmp.w	r9, #248	; 0xf8
 8000858:	f000 80e1 	beq.w	8000a1e <HAL_UART_RxCpltCallback+0x236>
 800085c:	7952      	ldrb	r2, [r2, #5]
 800085e:	2af8      	cmp	r2, #248	; 0xf8
 8000860:	f000 80ba 	beq.w	80009d8 <HAL_UART_RxCpltCallback+0x1f0>
 8000864:	f89d 2004 	ldrb.w	r2, [sp, #4]
		HAL_UART_DMAResume(&huart1);
 8000868:	48a6      	ldr	r0, [pc, #664]	; (8000b04 <HAL_UART_RxCpltCallback+0x31c>)
 800086a:	731e      	strb	r6, [r3, #12]
 800086c:	735d      	strb	r5, [r3, #13]
 800086e:	81dc      	strh	r4, [r3, #14]
 8000870:	741a      	strb	r2, [r3, #16]
 8000872:	f881 800a 	strb.w	r8, [r1, #10]
 8000876:	f881 c00b 	strb.w	ip, [r1, #11]
 800087a:	f8a1 b00c 	strh.w	fp, [r1, #12]
}
 800087e:	b005      	add	sp, #20
 8000880:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_UART_DMAResume(&huart1);
 8000884:	f004 bbda 	b.w	800503c <HAL_UART_DMAResume>
 8000888:	4ea2      	ldr	r6, [pc, #648]	; (8000b14 <HAL_UART_RxCpltCallback+0x32c>)
	if(huart->Instance==huart4.Instance) //not necessary to check..
 800088a:	2401      	movs	r4, #1
 800088c:	4fa2      	ldr	r7, [pc, #648]	; (8000b18 <HAL_UART_RxCpltCallback+0x330>)
 800088e:	4635      	mov	r5, r6
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000890:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8000b10 <HAL_UART_RxCpltCallback+0x328>
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000894:	46b9      	mov	r9, r7
 8000896:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 8000b38 <HAL_UART_RxCpltCallback+0x350>
			if(enchall_buff[i] == TXHEADER)
 800089a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800089e:	2bf8      	cmp	r3, #248	; 0xf8
 80008a0:	d011      	beq.n	80008c6 <HAL_UART_RxCpltCallback+0xde>
 80008a2:	3401      	adds	r4, #1
		for(int i=0; i<UART4BYTE; i++)
 80008a4:	2c06      	cmp	r4, #6
 80008a6:	d1f8      	bne.n	800089a <HAL_UART_RxCpltCallback+0xb2>
		HAL_UART_DMAResume(&huart4);
 80008a8:	4895      	ldr	r0, [pc, #596]	; (8000b00 <HAL_UART_RxCpltCallback+0x318>)
 80008aa:	f004 fbc7 	bl	800503c <HAL_UART_DMAResume>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0a5      	beq.n	8000800 <HAL_UART_RxCpltCallback+0x18>
 80008b4:	4b99      	ldr	r3, [pc, #612]	; (8000b1c <HAL_UART_RxCpltCallback+0x334>)
 80008b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	f3bf 8f6f 	isb	sy
 80008c4:	e79c      	b.n	8000800 <HAL_UART_RxCpltCallback+0x18>
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 80008c6:	2c05      	cmp	r4, #5
 80008c8:	f000 81d7 	beq.w	8000c7a <HAL_UART_RxCpltCallback+0x492>
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 80008cc:	2c04      	cmp	r4, #4
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 80008ce:	b2e3      	uxtb	r3, r4
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 80008d0:	d07f      	beq.n	80009d2 <HAL_UART_RxCpltCallback+0x1ea>
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	b2d2      	uxtb	r2, r2
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 80008d6:	5cf3      	ldrb	r3, [r6, r3]
 80008d8:	0619      	lsls	r1, r3, #24
 80008da:	d5e2      	bpl.n	80008a2 <HAL_UART_RxCpltCallback+0xba>
 80008dc:	5cb1      	ldrb	r1, [r6, r2]
 80008de:	f011 0f60 	tst.w	r1, #96	; 0x60
 80008e2:	d0de      	beq.n	80008a2 <HAL_UART_RxCpltCallback+0xba>
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 80008e4:	f3c3 1c80 	ubfx	ip, r3, #6, #1
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 80008e8:	f3c3 1e40 	ubfx	lr, r3, #5, #1
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 80008ec:	f3c3 0082 	ubfx	r0, r3, #2, #3
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 80008f0:	f001 011f 	and.w	r1, r1, #31
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 80008f4:	f003 0303 	and.w	r3, r3, #3
					uint8_t b1 = t==UART4BYTE-1?0:t+1;
 80008f8:	2a04      	cmp	r2, #4
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 80008fa:	f888 1004 	strb.w	r1, [r8, #4]
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 80008fe:	f888 c000 	strb.w	ip, [r8]
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 8000902:	f888 e001 	strb.w	lr, [r8, #1]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 8000906:	f888 0002 	strb.w	r0, [r8, #2]
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 800090a:	f888 3003 	strb.w	r3, [r8, #3]
					uint8_t b1 = t==UART4BYTE-1?0:t+1;
 800090e:	f000 8170 	beq.w	8000bf2 <HAL_UART_RxCpltCallback+0x40a>
 8000912:	1c50      	adds	r0, r2, #1
 8000914:	b2c0      	uxtb	r0, r0
					uint8_t b2 = b1==UART4BYTE-1?0:b1+1;
 8000916:	2804      	cmp	r0, #4
 8000918:	f000 817b 	beq.w	8000c12 <HAL_UART_RxCpltCallback+0x42a>
 800091c:	3202      	adds	r2, #2
 800091e:	b2d2      	uxtb	r2, r2
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000920:	5c30      	ldrb	r0, [r6, r0]
					if(enchall.calc_tag == 2) //all 0
 8000922:	2b02      	cmp	r3, #2
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000924:	5cb2      	ldrb	r2, [r6, r2]
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000926:	f888 0005 	strb.w	r0, [r8, #5]
					enchall.enc_low = enchall_buff[b2]&0xff;
 800092a:	f888 2006 	strb.w	r2, [r8, #6]
					if(enchall.calc_tag == 2) //all 0
 800092e:	f000 8155 	beq.w	8000bdc <HAL_UART_RxCpltCallback+0x3f4>
					else if(enchall.calc_tag == 3) //all 1
 8000932:	2b03      	cmp	r3, #3
 8000934:	f000 816f 	beq.w	8000c16 <HAL_UART_RxCpltCallback+0x42e>
						if(enchall.enc_counter-last5bitsdata>16) //overflowed..
 8000938:	4879      	ldr	r0, [pc, #484]	; (8000b20 <HAL_UART_RxCpltCallback+0x338>)
 800093a:	8803      	ldrh	r3, [r0, #0]
 800093c:	1acb      	subs	r3, r1, r3
 800093e:	2b10      	cmp	r3, #16
 8000940:	f340 815a 	ble.w	8000bf8 <HAL_UART_RxCpltCallback+0x410>
							enchall.recon_counter = (enchall.recon_counter - 32)&0xFFE0|enchall.enc_counter;
 8000944:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8000948:	fa1f fe81 	uxth.w	lr, r1
 800094c:	3b20      	subs	r3, #32
 800094e:	f023 031f 	bic.w	r3, r3, #31
 8000952:	4319      	orrs	r1, r3
 8000954:	f8a8 1008 	strh.w	r1, [r8, #8]
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000958:	4641      	mov	r1, r8
					last5bitsdata = enchall.enc_counter;
 800095a:	f8a0 e000 	strh.w	lr, [r0]
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 800095e:	2302      	movs	r3, #2
 8000960:	464a      	mov	r2, r9
 8000962:	f8da 0000 	ldr.w	r0, [sl]
 8000966:	f005 fcf5 	bl	8006354 <xQueueGenericSendFromISR>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 800096a:	2100      	movs	r1, #0
 800096c:	486d      	ldr	r0, [pc, #436]	; (8000b24 <HAL_UART_RxCpltCallback+0x33c>)
 800096e:	f002 f929 	bl	8002bc4 <HAL_DFSDM_FilterPollForRegConversion>
 8000972:	2800      	cmp	r0, #0
 8000974:	d195      	bne.n	80008a2 <HAL_UART_RxCpltCallback+0xba>
							HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter1,0) == HAL_OK)
 8000976:	4601      	mov	r1, r0
 8000978:	486b      	ldr	r0, [pc, #428]	; (8000b28 <HAL_UART_RxCpltCallback+0x340>)
 800097a:	f002 f923 	bl	8002bc4 <HAL_DFSDM_FilterPollForRegConversion>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 800097e:	2800      	cmp	r0, #0
 8000980:	d18f      	bne.n	80008a2 <HAL_UART_RxCpltCallback+0xba>
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000982:	f8df b188 	ldr.w	fp, [pc, #392]	; 8000b0c <HAL_UART_RxCpltCallback+0x324>
 8000986:	9001      	str	r0, [sp, #4]
 8000988:	4968      	ldr	r1, [pc, #416]	; (8000b2c <HAL_UART_RxCpltCallback+0x344>)
 800098a:	4866      	ldr	r0, [pc, #408]	; (8000b24 <HAL_UART_RxCpltCallback+0x33c>)
 800098c:	f002 f910 	bl	8002bb0 <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 8000990:	4967      	ldr	r1, [pc, #412]	; (8000b30 <HAL_UART_RxCpltCallback+0x348>)
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000992:	f8cb 0004 	str.w	r0, [fp, #4]
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 8000996:	4864      	ldr	r0, [pc, #400]	; (8000b28 <HAL_UART_RxCpltCallback+0x340>)
 8000998:	f002 f90a 	bl	8002bb0 <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_b -= 18400;
 800099c:	f8db 1004 	ldr.w	r1, [fp, #4]
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80009a0:	f242 1298 	movw	r2, #8600	; 0x2198
						motorcurrent.cur_b -= 18400;
 80009a4:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000b3c <HAL_UART_RxCpltCallback+0x354>
						motorcurrent.cur_a -= 8600;
 80009a8:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000b40 <HAL_UART_RxCpltCallback+0x358>
						motorcurrent.cur_b -= 18400;
 80009ac:	448e      	add	lr, r1
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80009ae:	1a12      	subs	r2, r2, r0
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80009b0:	4960      	ldr	r1, [pc, #384]	; (8000b34 <HAL_UART_RxCpltCallback+0x34c>)
						motorcurrent.cur_a -= 8600;
 80009b2:	4484      	add	ip, r0
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80009b4:	eba2 020e 	sub.w	r2, r2, lr
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80009b8:	9b01      	ldr	r3, [sp, #4]
 80009ba:	6808      	ldr	r0, [r1, #0]
 80009bc:	4659      	mov	r1, fp
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80009be:	f8cb 2008 	str.w	r2, [fp, #8]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80009c2:	464a      	mov	r2, r9
						motorcurrent.cur_a -= 8600;
 80009c4:	f8cb c000 	str.w	ip, [fp]
						motorcurrent.cur_b -= 18400;
 80009c8:	f8cb e004 	str.w	lr, [fp, #4]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80009cc:	f005 fcc2 	bl	8006354 <xQueueGenericSendFromISR>
 80009d0:	e767      	b.n	80008a2 <HAL_UART_RxCpltCallback+0xba>
 80009d2:	4623      	mov	r3, r4
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 80009d4:	2200      	movs	r2, #0
 80009d6:	e77e      	b.n	80008d6 <HAL_UART_RxCpltCallback+0xee>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 80009d8:	0602      	lsls	r2, r0, #24
 80009da:	f57f af43 	bpl.w	8000864 <HAL_UART_RxCpltCallback+0x7c>
 80009de:	f01e 0f60 	tst.w	lr, #96	; 0x60
 80009e2:	f43f af3f 	beq.w	8000864 <HAL_UART_RxCpltCallback+0x7c>
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 80009e6:	ea4f 240a 	mov.w	r4, sl, lsl #8
 80009ea:	9a02      	ldr	r2, [sp, #8]
					if(order_buff[b2]&0x80) //minus
 80009ec:	f01a 0f80 	tst.w	sl, #128	; 0x80
					motorcurrent.Kp = order_buff[s] & 0x7f;
 80009f0:	f000 067f 	and.w	r6, r0, #127	; 0x7f
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 80009f4:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
					motorcurrent.Ki = order_buff[t] & 0x1f;
 80009f8:	f00e 051f 	and.w	r5, lr, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 80009fc:	ea44 0402 	orr.w	r4, r4, r2
					if(order_buff[b2]&0x80) //minus
 8000a00:	f040 812a 	bne.w	8000c58 <HAL_UART_RxCpltCallback+0x470>
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000a04:	fa4f f989 	sxtb.w	r9, r9
 8000a08:	f009 027f 	and.w	r2, r9, #127	; 0x7f
					if(order_buff[b3]&0x80) //minus
 8000a0c:	f1b9 0f00 	cmp.w	r9, #0
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000a10:	9201      	str	r2, [sp, #4]
					if(order_buff[b3]&0x80) //minus
 8000a12:	f2c0 811d 	blt.w	8000c50 <HAL_UART_RxCpltCallback+0x468>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a16:	46a3      	mov	fp, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000a18:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a1a:	46b0      	mov	r8, r6
 8000a1c:	e722      	b.n	8000864 <HAL_UART_RxCpltCallback+0x7c>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000a1e:	7957      	ldrb	r7, [r2, #5]
 8000a20:	f017 0f80 	tst.w	r7, #128	; 0x80
 8000a24:	9703      	str	r7, [sp, #12]
 8000a26:	f43f af19 	beq.w	800085c <HAL_UART_RxCpltCallback+0x74>
 8000a2a:	f010 0f60 	tst.w	r0, #96	; 0x60
 8000a2e:	f43f af15 	beq.w	800085c <HAL_UART_RxCpltCallback+0x74>
 8000a32:	463d      	mov	r5, r7
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000a34:	9f02      	ldr	r7, [sp, #8]
 8000a36:	023c      	lsls	r4, r7, #8
					if(order_buff[b2]&0x80) //minus
 8000a38:	063f      	lsls	r7, r7, #24
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a3a:	f005 067f 	and.w	r6, r5, #127	; 0x7f
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000a3e:	f000 051f 	and.w	r5, r0, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000a42:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 8000a46:	ea44 040e 	orr.w	r4, r4, lr
					if(order_buff[b2]&0x80) //minus
 8000a4a:	f100 80f0 	bmi.w	8000c2e <HAL_UART_RxCpltCallback+0x446>
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000a4e:	fa4f fc8a 	sxtb.w	ip, sl
 8000a52:	f00c 077f 	and.w	r7, ip, #127	; 0x7f
					if(order_buff[b3]&0x80) //minus
 8000a56:	f1bc 0f00 	cmp.w	ip, #0
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000a5a:	9701      	str	r7, [sp, #4]
					if(order_buff[b3]&0x80) //minus
 8000a5c:	f2c0 80e3 	blt.w	8000c26 <HAL_UART_RxCpltCallback+0x43e>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a60:	46a3      	mov	fp, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000a62:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a64:	46b0      	mov	r8, r6
 8000a66:	e6f9      	b.n	800085c <HAL_UART_RxCpltCallback+0x74>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000a68:	f892 9004 	ldrb.w	r9, [r2, #4]
 8000a6c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000a70:	f43f aeee 	beq.w	8000850 <HAL_UART_RxCpltCallback+0x68>
 8000a74:	7957      	ldrb	r7, [r2, #5]
 8000a76:	f017 0f60 	tst.w	r7, #96	; 0x60
 8000a7a:	9703      	str	r7, [sp, #12]
 8000a7c:	f43f aee8 	beq.w	8000850 <HAL_UART_RxCpltCallback+0x68>
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000a80:	ea4f 240e 	mov.w	r4, lr, lsl #8
					if(order_buff[b2]&0x80) //minus
 8000a84:	f01e 0f80 	tst.w	lr, #128	; 0x80
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a88:	f009 067f 	and.w	r6, r9, #127	; 0x7f
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000a8c:	f007 051f 	and.w	r5, r7, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000a90:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 8000a94:	ea44 0400 	orr.w	r4, r4, r0
					if(order_buff[b2]&0x80) //minus
 8000a98:	f040 80ec 	bne.w	8000c74 <HAL_UART_RxCpltCallback+0x48c>
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000a9c:	f99d c008 	ldrsb.w	ip, [sp, #8]
 8000aa0:	f00c 077f 	and.w	r7, ip, #127	; 0x7f
					if(order_buff[b3]&0x80) //minus
 8000aa4:	f1bc 0f00 	cmp.w	ip, #0
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000aa8:	9701      	str	r7, [sp, #4]
					if(order_buff[b3]&0x80) //minus
 8000aaa:	f2c0 80df 	blt.w	8000c6c <HAL_UART_RxCpltCallback+0x484>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000aae:	46a3      	mov	fp, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000ab0:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000ab2:	46b0      	mov	r8, r6
 8000ab4:	e6cc      	b.n	8000850 <HAL_UART_RxCpltCallback+0x68>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000ab6:	f892 9003 	ldrb.w	r9, [r2, #3]
 8000aba:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000abe:	f43f aec1 	beq.w	8000844 <HAL_UART_RxCpltCallback+0x5c>
 8000ac2:	f892 a004 	ldrb.w	sl, [r2, #4]
 8000ac6:	f01a 0f60 	tst.w	sl, #96	; 0x60
 8000aca:	f43f aebb 	beq.w	8000844 <HAL_UART_RxCpltCallback+0x5c>
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000ace:	0204      	lsls	r4, r0, #8
 8000ad0:	7957      	ldrb	r7, [r2, #5]
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000ad2:	f009 067f 	and.w	r6, r9, #127	; 0x7f
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000ad6:	f00a 051f 	and.w	r5, sl, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000ada:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 8000ade:	433c      	orrs	r4, r7
					if(order_buff[b2]&0x80) //minus
 8000ae0:	0607      	lsls	r7, r0, #24
 8000ae2:	f100 80ab 	bmi.w	8000c3c <HAL_UART_RxCpltCallback+0x454>
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000ae6:	fa4f fc8e 	sxtb.w	ip, lr
 8000aea:	f00c 077f 	and.w	r7, ip, #127	; 0x7f
					if(order_buff[b3]&0x80) //minus
 8000aee:	f1bc 0f00 	cmp.w	ip, #0
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000af2:	9701      	str	r7, [sp, #4]
					if(order_buff[b3]&0x80) //minus
 8000af4:	f2c0 809e 	blt.w	8000c34 <HAL_UART_RxCpltCallback+0x44c>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000af8:	46a3      	mov	fp, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000afa:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000afc:	46b0      	mov	r8, r6
 8000afe:	e6a1      	b.n	8000844 <HAL_UART_RxCpltCallback+0x5c>
 8000b00:	20004364 	.word	0x20004364
 8000b04:	20004284 	.word	0x20004284
 8000b08:	20003dd0 	.word	0x20003dd0
 8000b0c:	20000038 	.word	0x20000038
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20003dc8 	.word	0x20003dc8
 8000b18:	2000004c 	.word	0x2000004c
 8000b1c:	e000ed04 	.word	0xe000ed04
 8000b20:	20000034 	.word	0x20000034
 8000b24:	20003dd8 	.word	0x20003dd8
 8000b28:	20003f24 	.word	0x20003f24
 8000b2c:	20003f78 	.word	0x20003f78
 8000b30:	20003e2c 	.word	0x20003e2c
 8000b34:	20003fd8 	.word	0x20003fd8
 8000b38:	20003fc8 	.word	0x20003fc8
 8000b3c:	ffffb820 	.word	0xffffb820
 8000b40:	ffffde68 	.word	0xffffde68
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000b44:	f892 9002 	ldrb.w	r9, [r2, #2]
 8000b48:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000b4c:	f43f ae75 	beq.w	800083a <HAL_UART_RxCpltCallback+0x52>
 8000b50:	f892 a003 	ldrb.w	sl, [r2, #3]
 8000b54:	f01a 0f60 	tst.w	sl, #96	; 0x60
 8000b58:	f43f ae6f 	beq.w	800083a <HAL_UART_RxCpltCallback+0x52>
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000b5c:	7957      	ldrb	r7, [r2, #5]
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000b5e:	f009 067f 	and.w	r6, r9, #127	; 0x7f
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000b62:	f892 c004 	ldrb.w	ip, [r2, #4]
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000b66:	f00a 051f 	and.w	r5, sl, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000b6a:	023c      	lsls	r4, r7, #8
					if(order_buff[b2]&0x80) //minus
 8000b6c:	063f      	lsls	r7, r7, #24
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000b6e:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 8000b72:	ea4c 0404 	orr.w	r4, ip, r4
					if(order_buff[b2]&0x80) //minus
 8000b76:	d476      	bmi.n	8000c66 <HAL_UART_RxCpltCallback+0x47e>
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000b78:	fa4f fc80 	sxtb.w	ip, r0
 8000b7c:	f00c 077f 	and.w	r7, ip, #127	; 0x7f
					if(order_buff[b3]&0x80) //minus
 8000b80:	f1bc 0f00 	cmp.w	ip, #0
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000b84:	9701      	str	r7, [sp, #4]
					if(order_buff[b3]&0x80) //minus
 8000b86:	db6a      	blt.n	8000c5e <HAL_UART_RxCpltCallback+0x476>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000b88:	46a3      	mov	fp, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000b8a:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000b8c:	46b0      	mov	r8, r6
 8000b8e:	e654      	b.n	800083a <HAL_UART_RxCpltCallback+0x52>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000b90:	f892 e001 	ldrb.w	lr, [r2, #1]
 8000b94:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8000b98:	f43f ae49 	beq.w	800082e <HAL_UART_RxCpltCallback+0x46>
 8000b9c:	f892 9002 	ldrb.w	r9, [r2, #2]
 8000ba0:	f019 0f60 	tst.w	r9, #96	; 0x60
 8000ba4:	f43f ae43 	beq.w	800082e <HAL_UART_RxCpltCallback+0x46>
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000ba8:	7917      	ldrb	r7, [r2, #4]
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000baa:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000bae:	f892 e003 	ldrb.w	lr, [r2, #3]
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000bb2:	f009 051f 	and.w	r5, r9, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000bb6:	023c      	lsls	r4, r7, #8
					if(order_buff[b2]&0x80) //minus
 8000bb8:	063f      	lsls	r7, r7, #24
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000bba:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 8000bbe:	ea4e 0404 	orr.w	r4, lr, r4
					if(order_buff[b2]&0x80) //minus
 8000bc2:	d442      	bmi.n	8000c4a <HAL_UART_RxCpltCallback+0x462>
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000bc4:	f992 e005 	ldrsb.w	lr, [r2, #5]
 8000bc8:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
					if(order_buff[b3]&0x80) //minus
 8000bcc:	f1be 0f00 	cmp.w	lr, #0
					motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000bd0:	9701      	str	r7, [sp, #4]
					if(order_buff[b3]&0x80) //minus
 8000bd2:	db36      	blt.n	8000c42 <HAL_UART_RxCpltCallback+0x45a>
 8000bd4:	46a3      	mov	fp, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000bd6:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000bd8:	46b0      	mov	r8, r6
 8000bda:	e628      	b.n	800082e <HAL_UART_RxCpltCallback+0x46>
						enchall.z_count++;
 8000bdc:	f8b8 300e 	ldrh.w	r3, [r8, #14]
						enchall.recon_counter = enchall.enc_counter;  //only 5bits OK
 8000be0:	fa1f fe81 	uxth.w	lr, r1
 8000be4:	4826      	ldr	r0, [pc, #152]	; (8000c80 <HAL_UART_RxCpltCallback+0x498>)
						enchall.z_count++;
 8000be6:	3301      	adds	r3, #1
						enchall.recon_counter = enchall.enc_counter;  //only 5bits OK
 8000be8:	f8a8 e008 	strh.w	lr, [r8, #8]
						enchall.z_count++;
 8000bec:	f8a8 300e 	strh.w	r3, [r8, #14]
 8000bf0:	e6b2      	b.n	8000958 <HAL_UART_RxCpltCallback+0x170>
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	e693      	b.n	8000920 <HAL_UART_RxCpltCallback+0x138>
						else if(enchall.enc_counter-last5bitsdata<-16)
 8000bf8:	3310      	adds	r3, #16
							enchall.recon_counter = (enchall.recon_counter + 32)&0xFFE0|enchall.enc_counter;
 8000bfa:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8000bfe:	fa1f fe81 	uxth.w	lr, r1
 8000c02:	bfb8      	it	lt
 8000c04:	3320      	addlt	r3, #32
							enchall.recon_counter = enchall.recon_counter&0xFFE0|enchall.enc_counter;
 8000c06:	f023 031f 	bic.w	r3, r3, #31
 8000c0a:	4319      	orrs	r1, r3
 8000c0c:	f8a8 1008 	strh.w	r1, [r8, #8]
 8000c10:	e6a2      	b.n	8000958 <HAL_UART_RxCpltCallback+0x170>
 8000c12:	2200      	movs	r2, #0
 8000c14:	e684      	b.n	8000920 <HAL_UART_RxCpltCallback+0x138>
						enchall.recon_counter = ALLONECOUNT + enchall.enc_counter;
 8000c16:	fa1f fe81 	uxth.w	lr, r1
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <HAL_UART_RxCpltCallback+0x498>)
 8000c1c:	f50e 63f8 	add.w	r3, lr, #1984	; 0x7c0
 8000c20:	f8a8 3008 	strh.w	r3, [r8, #8]
 8000c24:	e698      	b.n	8000958 <HAL_UART_RxCpltCallback+0x170>
						motorcurrent.centeroffset = -motorcurrent.centeroffset;
 8000c26:	427f      	negs	r7, r7
 8000c28:	b27f      	sxtb	r7, r7
 8000c2a:	9701      	str	r7, [sp, #4]
 8000c2c:	e718      	b.n	8000a60 <HAL_UART_RxCpltCallback+0x278>
						motorcurrent.target_cur = -motorcurrent.target_cur;
 8000c2e:	4264      	negs	r4, r4
 8000c30:	b224      	sxth	r4, r4
 8000c32:	e70c      	b.n	8000a4e <HAL_UART_RxCpltCallback+0x266>
						motorcurrent.centeroffset = -motorcurrent.centeroffset;
 8000c34:	427f      	negs	r7, r7
 8000c36:	b27f      	sxtb	r7, r7
 8000c38:	9701      	str	r7, [sp, #4]
 8000c3a:	e75d      	b.n	8000af8 <HAL_UART_RxCpltCallback+0x310>
						motorcurrent.target_cur = -motorcurrent.target_cur;
 8000c3c:	4264      	negs	r4, r4
 8000c3e:	b224      	sxth	r4, r4
 8000c40:	e751      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x2fe>
						motorcurrent.centeroffset = -motorcurrent.centeroffset;
 8000c42:	427f      	negs	r7, r7
 8000c44:	b27f      	sxtb	r7, r7
 8000c46:	9701      	str	r7, [sp, #4]
 8000c48:	e7c4      	b.n	8000bd4 <HAL_UART_RxCpltCallback+0x3ec>
						motorcurrent.target_cur = -motorcurrent.target_cur;
 8000c4a:	4264      	negs	r4, r4
 8000c4c:	b224      	sxth	r4, r4
 8000c4e:	e7b9      	b.n	8000bc4 <HAL_UART_RxCpltCallback+0x3dc>
						motorcurrent.centeroffset = -motorcurrent.centeroffset;
 8000c50:	4257      	negs	r7, r2
 8000c52:	b27a      	sxtb	r2, r7
 8000c54:	9201      	str	r2, [sp, #4]
 8000c56:	e6de      	b.n	8000a16 <HAL_UART_RxCpltCallback+0x22e>
						motorcurrent.target_cur = -motorcurrent.target_cur;
 8000c58:	4264      	negs	r4, r4
 8000c5a:	b224      	sxth	r4, r4
 8000c5c:	e6d2      	b.n	8000a04 <HAL_UART_RxCpltCallback+0x21c>
						motorcurrent.centeroffset = -motorcurrent.centeroffset;
 8000c5e:	427f      	negs	r7, r7
 8000c60:	b27f      	sxtb	r7, r7
 8000c62:	9701      	str	r7, [sp, #4]
 8000c64:	e790      	b.n	8000b88 <HAL_UART_RxCpltCallback+0x3a0>
						motorcurrent.target_cur = -motorcurrent.target_cur;
 8000c66:	4264      	negs	r4, r4
 8000c68:	b224      	sxth	r4, r4
 8000c6a:	e785      	b.n	8000b78 <HAL_UART_RxCpltCallback+0x390>
						motorcurrent.centeroffset = -motorcurrent.centeroffset;
 8000c6c:	427f      	negs	r7, r7
 8000c6e:	b27f      	sxtb	r7, r7
 8000c70:	9701      	str	r7, [sp, #4]
 8000c72:	e71c      	b.n	8000aae <HAL_UART_RxCpltCallback+0x2c6>
						motorcurrent.target_cur = -motorcurrent.target_cur;
 8000c74:	4264      	negs	r4, r4
 8000c76:	b224      	sxth	r4, r4
 8000c78:	e710      	b.n	8000a9c <HAL_UART_RxCpltCallback+0x2b4>
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e629      	b.n	80008d2 <HAL_UART_RxCpltCallback+0xea>
 8000c7e:	bf00      	nop
 8000c80:	20000034 	.word	0x20000034

08000c84 <StartledblueTask>:
/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000c84:	4c05      	ldr	r4, [pc, #20]	; (8000c9c <StartledblueTask+0x18>)
{
 8000c86:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000c88:	4620      	mov	r0, r4
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	f002 fab8 	bl	8003200 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000c90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c94:	f004 fe00 	bl	8005898 <osDelay>
 8000c98:	e7f6      	b.n	8000c88 <StartledblueTask+0x4>
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <StartledgreenTask>:
/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000ca0:	4c05      	ldr	r4, [pc, #20]	; (8000cb8 <StartledgreenTask+0x18>)
{
 8000ca2:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	f002 faaa 	bl	8003200 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb0:	f004 fdf2 	bl	8005898 <osDelay>
 8000cb4:	e7f6      	b.n	8000ca4 <StartledgreenTask+0x4>
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 8000cbc:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 8000cbe:	2032      	movs	r0, #50	; 0x32
 8000cc0:	f004 fdea 	bl	8005898 <osDelay>
 8000cc4:	e7fb      	b.n	8000cbe <StartiwdgTask+0x2>
 8000cc6:	bf00      	nop

08000cc8 <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000ccc:	22c8      	movs	r2, #200	; 0xc8
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f240 37f5 	movw	r7, #1013	; 0x3f5
 8000cd4:	a802      	add	r0, sp, #8
 8000cd6:	f240 36f7 	movw	r6, #1015	; 0x3f7
 8000cda:	f007 f8b8 	bl	8007e4e <memset>
 8000cde:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8000ce2:	f240 72df 	movw	r2, #2015	; 0x7df
 8000ce6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000cea:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000cee:	f240 7edc 	movw	lr, #2012	; 0x7dc
 8000cf2:	f8ad 7008 	strh.w	r7, [sp, #8]
 8000cf6:	f240 38f3 	movw	r8, #1011	; 0x3f3
 8000cfa:	f8ad 7016 	strh.w	r7, [sp, #22]
 8000cfe:	f240 7cdb 	movw	ip, #2011	; 0x7db
 8000d02:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
 8000d06:	f44f 777d 	mov.w	r7, #1012	; 0x3f4
 8000d0a:	f8ad 100a 	strh.w	r1, [sp, #10]
 8000d0e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8000d12:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8000d16:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8000d1a:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 8000d1e:	f240 71e5 	movw	r1, #2021	; 0x7e5
 8000d22:	f8ad 200c 	strh.w	r2, [sp, #12]
 8000d26:	f8ad 2012 	strh.w	r2, [sp, #18]
 8000d2a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8000d2e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8000d32:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8000d36:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8000d3a:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000d3e:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8000d42:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
 8000d46:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000d4a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8000d4e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8000d52:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8000d56:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8000d5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8000d5e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000d62:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8000d66:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8000d6a:	f8ad e01a 	strh.w	lr, [sp, #26]
 8000d6e:	f8ad e026 	strh.w	lr, [sp, #38]	; 0x26
 8000d72:	f240 3eff 	movw	lr, #1023	; 0x3ff
 8000d76:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8000d7a:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
 8000d7e:	f240 77e7 	movw	r7, #2023	; 0x7e7
 8000d82:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 8000d86:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 8000d8a:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8000d8e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8000d92:	f8ad 801e 	strh.w	r8, [sp, #30]
 8000d96:	f8ad c020 	strh.w	ip, [sp, #32]
 8000d9a:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8000d9e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8000da2:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8000da6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8000daa:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
 8000dae:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 8000db2:	f44f 617b 	mov.w	r1, #4016	; 0xfb0
 8000db6:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 8000dba:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
			1013, 2013, 2012, 8000, 1011, 2011, 4000, 1012, 2012, 2013, 8000, 1015, 2015, 2013, 1012, 1000,
			1013, 2013, 2015, 8000, 1015, 2015, 4000,
			1021, 2021, 2022, 8000, 1023, 2023, 2000,
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4c1f      	ldr	r4, [pc, #124]	; (8000e40 <StartbuzzerrythmTask+0x178>)
 8000dc2:	4d20      	ldr	r5, [pc, #128]	; (8000e44 <StartbuzzerrythmTask+0x17c>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000dc4:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
 8000dc8:	f8ad 704e 	strh.w	r7, [sp, #78]	; 0x4e
 8000dcc:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 8000dd0:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 8000dd4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8000dd8:	f8ad 005a 	strh.w	r0, [sp, #90]	; 0x5a
 8000ddc:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
	volatile uint16_t i = 0;
 8000de0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8000de4:	e002      	b.n	8000dec <StartbuzzerrythmTask+0x124>
			{
				i=i==SONGLENGTH-1?0:i+1;
			}
			xSemaphoreGive(buzzerMutexHandle);
		}
		osDelay(10);
 8000de6:	200a      	movs	r0, #10
 8000de8:	f004 fd56 	bl	8005898 <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000dec:	2300      	movs	r3, #0
 8000dee:	6820      	ldr	r0, [r4, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	f005 fb1e 	bl	8006434 <xQueueGenericReceive>
 8000df8:	2801      	cmp	r0, #1
 8000dfa:	d1f4      	bne.n	8000de6 <StartbuzzerrythmTask+0x11e>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 8000dfc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8000e00:	2300      	movs	r3, #0
 8000e02:	ae02      	add	r6, sp, #8
 8000e04:	6828      	ldr	r0, [r5, #0]
 8000e06:	b289      	uxth	r1, r1
 8000e08:	461a      	mov	r2, r3
 8000e0a:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8000e0e:	f005 f907 	bl	8006020 <xQueueGenericSend>
 8000e12:	2801      	cmp	r0, #1
 8000e14:	d006      	beq.n	8000e24 <StartbuzzerrythmTask+0x15c>
			xSemaphoreGive(buzzerMutexHandle);
 8000e16:	2300      	movs	r3, #0
 8000e18:	6820      	ldr	r0, [r4, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f005 f8ff 	bl	8006020 <xQueueGenericSend>
 8000e22:	e7e0      	b.n	8000de6 <StartbuzzerrythmTask+0x11e>
				i=i==SONGLENGTH-1?0:i+1;
 8000e24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	2b31      	cmp	r3, #49	; 0x31
 8000e2c:	d006      	beq.n	8000e3c <StartbuzzerrythmTask+0x174>
 8000e2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e32:	3301      	adds	r3, #1
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000e3a:	e7ec      	b.n	8000e16 <StartbuzzerrythmTask+0x14e>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e7fa      	b.n	8000e36 <StartbuzzerrythmTask+0x16e>
 8000e40:	20003fc4 	.word	0x20003fc4
 8000e44:	20003fb8 	.word	0x20003fb8

08000e48 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 8000e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000e4c:	4d5c      	ldr	r5, [pc, #368]	; (8000fc0 <StartbuzzertoneTask+0x178>)
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 8000e4e:	f04f 0a00 	mov.w	sl, #0
 8000e52:	4c5c      	ldr	r4, [pc, #368]	; (8000fc4 <StartbuzzertoneTask+0x17c>)
			//if all is 0 then no sound...
			//like 512 should be black[5-1] = 466.16/4   la+
			//013 should be white[3-1] = 329.63/4    mi
			//023 should be 2 * white[3-1] = 329.63/2
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
			time = tonedata/1000;
 8000e54:	4f5c      	ldr	r7, [pc, #368]	; (8000fc8 <StartbuzzertoneTask+0x180>)
			black = (tonedata%1000)/100;
 8000e56:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8000fd8 <StartbuzzertoneTask+0x190>
			num = (tonedata%100)/10;
 8000e5a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8000fdc <StartbuzzertoneTask+0x194>
{
 8000e5e:	ed2d 8b04 	vpush	{d8-d9}
 8000e62:	b090      	sub	sp, #64	; 0x40
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
				osDelay(500/time); //time is used to shorter the sound..
 8000e64:	ed9f 9a59 	vldr	s18, [pc, #356]	; 8000fcc <StartbuzzertoneTask+0x184>
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6a:	ae09      	add	r6, sp, #36	; 0x24
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000e6c:	f10d 0e10 	add.w	lr, sp, #16
	volatile float tonefreq = 0, time = 0;;
 8000e70:	f8cd a008 	str.w	sl, [sp, #8]
 8000e74:	f8cd a00c 	str.w	sl, [sp, #12]
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000e78:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000e7e:	350c      	adds	r5, #12
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000e80:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e86:	f8d5 c000 	ldr.w	ip, [r5]
 8000e8a:	4e51      	ldr	r6, [pc, #324]	; (8000fd0 <StartbuzzertoneTask+0x188>)
 8000e8c:	4d51      	ldr	r5, [pc, #324]	; (8000fd4 <StartbuzzertoneTask+0x18c>)
 8000e8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
				SetbuzzerFreq(tonefreq);
 8000e92:	ed9f 8b49 	vldr	d8, [pc, #292]	; 8000fb8 <StartbuzzertoneTask+0x170>
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000e96:	f8ce c000 	str.w	ip, [lr]
 8000e9a:	e003      	b.n	8000ea4 <StartbuzzertoneTask+0x5c>
			xSemaphoreGive(buzzerMutexHandle);
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000e9c:	682b      	ldr	r3, [r5, #0]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	220a      	movs	r2, #10
 8000ea8:	f10d 0106 	add.w	r1, sp, #6
 8000eac:	6820      	ldr	r0, [r4, #0]
 8000eae:	f005 fac1 	bl	8006434 <xQueueGenericReceive>
 8000eb2:	2801      	cmp	r0, #1
 8000eb4:	d1f2      	bne.n	8000e9c <StartbuzzertoneTask+0x54>
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	4602      	mov	r2, r0
 8000eba:	6830      	ldr	r0, [r6, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f005 fab9 	bl	8006434 <xQueueGenericReceive>
			time = tonedata/1000;
 8000ec2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
			black = (tonedata%1000)/100;
 8000ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			time = tonedata/1000;
 8000eca:	fba7 0301 	umull	r0, r3, r7, r1
 8000ece:	099b      	lsrs	r3, r3, #6
 8000ed0:	ee07 3a90 	vmov	s15, r3
			black = (tonedata%1000)/100;
 8000ed4:	fb02 1213 	mls	r2, r2, r3, r1
			time = tonedata/1000;
 8000ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			black = (tonedata%1000)/100;
 8000edc:	b292      	uxth	r2, r2
			time = tonedata/1000;
 8000ede:	edcd 7a03 	vstr	s15, [sp, #12]
			if((tonedata%1000) != 0)
 8000ee2:	b3c2      	cbz	r2, 8000f56 <StartbuzzertoneTask+0x10e>
			num = (tonedata%100)/10;
 8000ee4:	fba8 0301 	umull	r0, r3, r8, r1
 8000ee8:	2064      	movs	r0, #100	; 0x64
			black = (tonedata%1000)/100;
 8000eea:	fba8 e202 	umull	lr, r2, r8, r2
			num = (tonedata%100)/10;
 8000eee:	095b      	lsrs	r3, r3, #5
				if(black)
 8000ef0:	0952      	lsrs	r2, r2, #5
			num = (tonedata%100)/10;
 8000ef2:	fb00 1313 	mls	r3, r0, r3, r1
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	fba9 0303 	umull	r0, r3, r9, r3
 8000efc:	ea4f 03d3 	mov.w	r3, r3, lsr #3
				if(black)
 8000f00:	d040      	beq.n	8000f84 <StartbuzzertoneTask+0x13c>
					tonefreq = tonetable_black[black-1] * num *2 ;
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	ab10      	add	r3, sp, #64	; 0x40
 8000f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000f10:	ed12 7a0d 	vldr	s14, [r2, #-52]	; 0xffffffcc
 8000f14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f1c:	edcd 7a02 	vstr	s15, [sp, #8]
				SetbuzzerFreq(tonefreq);
 8000f20:	ed9d 6a02 	vldr	s12, [sp, #8]
 8000f24:	2200      	movs	r2, #0
 8000f26:	682b      	ldr	r3, [r5, #0]
 8000f28:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000f2c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000f30:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8000f34:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
			if(time!=0)
 8000f3a:	eddd 7a03 	vldr	s15, [sp, #12]
 8000f3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	d112      	bne.n	8000f6e <StartbuzzertoneTask+0x126>
			xSemaphoreGive(buzzerMutexHandle);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	6830      	ldr	r0, [r6, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f005 f866 	bl	8006020 <xQueueGenericSend>
 8000f54:	e7a6      	b.n	8000ea4 <StartbuzzertoneTask+0x5c>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000f56:	682b      	ldr	r3, [r5, #0]
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 8000f5c:	f8cd a008 	str.w	sl, [sp, #8]
			if(time!=0)
 8000f60:	eddd 7a03 	vldr	s15, [sp, #12]
 8000f64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	d0ec      	beq.n	8000f48 <StartbuzzertoneTask+0x100>
				osDelay(500/time); //time is used to shorter the sound..
 8000f6e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8000f72:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8000f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f7a:	ee17 0a90 	vmov	r0, s15
 8000f7e:	f004 fc8b 	bl	8005898 <osDelay>
 8000f82:	e7e1      	b.n	8000f48 <StartbuzzertoneTask+0x100>
			white  = tonedata%10;
 8000f84:	fba9 0201 	umull	r0, r2, r9, r1
					tonefreq = tonetable_white[white-1] * num *2;
 8000f88:	ee07 3a90 	vmov	s15, r3
			white  = tonedata%10;
 8000f8c:	08d3      	lsrs	r3, r2, #3
					tonefreq = tonetable_white[white-1] * num *2;
 8000f8e:	aa10      	add	r2, sp, #64	; 0x40
 8000f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			white  = tonedata%10;
 8000f94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f98:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
					tonefreq = tonetable_white[white-1] * num *2;
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000fa2:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8000fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000faa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fae:	edcd 7a02 	vstr	s15, [sp, #8]
 8000fb2:	e7b5      	b.n	8000f20 <StartbuzzertoneTask+0xd8>
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	412e8480 	.word	0x412e8480
 8000fc0:	08007e78 	.word	0x08007e78
 8000fc4:	20003fb8 	.word	0x20003fb8
 8000fc8:	10624dd3 	.word	0x10624dd3
 8000fcc:	43fa0000 	.word	0x43fa0000
 8000fd0:	20003fc4 	.word	0x20003fc4
 8000fd4:	20004114 	.word	0x20004114
 8000fd8:	51eb851f 	.word	0x51eb851f
 8000fdc:	cccccccd 	.word	0xcccccccd

08000fe0 <SystemInitialization>:
extern uint8_t order_buff[5];
//int32_t cur_u;
//int32_t cur_v;

void SystemInitialization(void)
{
 8000fe0:	b510      	push	{r4, lr}
	 * thus if we consider the driver delay and blabla...
	 * we choose the dead time to be 200ns~...
	 * lookinto the tim.c file the dead time is calculated by
	 * 1/216mhz * DeadTime,  thus we choose DeadTime to be 45~
	 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000fe2:	4c17      	ldr	r4, [pc, #92]	; (8001040 <SystemInitialization+0x60>)
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4817      	ldr	r0, [pc, #92]	; (8001044 <SystemInitialization+0x64>)
 8000fe8:	f003 fb7c 	bl	80046e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000fec:	4620      	mov	r0, r4
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f003 fb78 	bl	80046e4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f003 fde6 	bl	8004bc8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	2104      	movs	r1, #4
 8001000:	f003 fb70 	bl	80046e4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8001004:	4620      	mov	r0, r4
 8001006:	2104      	movs	r1, #4
 8001008:	f003 fdde 	bl	8004bc8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800100c:	4620      	mov	r0, r4
 800100e:	2108      	movs	r1, #8
 8001010:	f003 fb68 	bl	80046e4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8001014:	4620      	mov	r0, r4
 8001016:	2108      	movs	r1, #8
 8001018:	f003 fdd6 	bl	8004bc8 <HAL_TIMEx_PWMN_Start>

	/*
	 * register the call back of uart4 transmit..
	 */
	//HAL_DMA_RegisterCallback(&hdma_uart4_rx,HAL_DMA_XFER_CPLTUART4_DMA2_Cplt_Callback);
	HAL_UART_Receive_DMA(&huart4,enchall_buff,5);
 800101c:	2205      	movs	r2, #5
 800101e:	490a      	ldr	r1, [pc, #40]	; (8001048 <SystemInitialization+0x68>)
 8001020:	480a      	ldr	r0, [pc, #40]	; (800104c <SystemInitialization+0x6c>)
 8001022:	f003 ffc3 	bl	8004fac <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1,order_buff,6);
 8001026:	2206      	movs	r2, #6
 8001028:	4909      	ldr	r1, [pc, #36]	; (8001050 <SystemInitialization+0x70>)
 800102a:	480a      	ldr	r0, [pc, #40]	; (8001054 <SystemInitialization+0x74>)
 800102c:	f003 ffbe 	bl	8004fac <HAL_UART_Receive_DMA>

	/*
	 * DFSDM initial
	 */
	//polling mode
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0);
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <SystemInitialization+0x78>)
 8001032:	f001 fd83 	bl	8002b3c <HAL_DFSDM_FilterRegularStart>
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <SystemInitialization+0x7c>)
	//DMA mode
//	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,&cur_u,1);
//	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,&cur_v,1);
}
 8001038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 800103c:	f001 bd7e 	b.w	8002b3c <HAL_DFSDM_FilterRegularStart>
 8001040:	200040d4 	.word	0x200040d4
 8001044:	20004114 	.word	0x20004114
 8001048:	20003dc8 	.word	0x20003dc8
 800104c:	20004364 	.word	0x20004364
 8001050:	20003dd0 	.word	0x20003dd0
 8001054:	20004284 	.word	0x20004284
 8001058:	20003dd8 	.word	0x20003dd8
 800105c:	20003f24 	.word	0x20003f24

08001060 <StartenchallTask>:
#include "main.h"
extern osMessageQId enchallQueueHandle;
extern osMessageQId conresQueueHandle;

void StartenchallTask(void const * argument)
{
 8001060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		  vel = encdata.z_count - last_count;
		  if(vel<0)
			  vel += 65536;
		  last_count = encdata.z_count;
		  datatosend[++i] = 'V';datatosend[++i] = ':';
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 8001064:	4f02      	ldr	r7, [pc, #8]	; (8001070 <StartenchallTask+0x10>)
{
 8001066:	b0a3      	sub	sp, #140	; 0x8c
		  datatosend[++i] = vel%100/10 + 0x30; //3bits
 8001068:	f8df b008 	ldr.w	fp, [pc, #8]	; 8001074 <StartenchallTask+0x14>
 800106c:	e02b      	b.n	80010c6 <StartenchallTask+0x66>
 800106e:	bf00      	nop
 8001070:	51eb851f 	.word	0x51eb851f
 8001074:	cccccccd 	.word	0xcccccccd
 8001078:	2227      	movs	r2, #39	; 0x27
 800107a:	2326      	movs	r3, #38	; 0x26
 800107c:	2125      	movs	r1, #37	; 0x25
 800107e:	4610      	mov	r0, r2
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
		  }

		  datatosend[++i] = '\t';
 8001080:	ac22      	add	r4, sp, #136	; 0x88
		  datatosend[++i] = '\r';
		  datatosend[++i] = '\n';
 8001082:	250a      	movs	r5, #10
		  datatosend[++i] = '\r';
 8001084:	260d      	movs	r6, #13
		  datatosend[++i] = '\t';
 8001086:	4421      	add	r1, r4
		  datatosend[++i] = '\r';
 8001088:	4423      	add	r3, r4
		  datatosend[++i] = '\n';
 800108a:	4420      	add	r0, r4
		  datatosend[++i] = '\t';
 800108c:	2409      	movs	r4, #9
 800108e:	f801 4c50 	strb.w	r4, [r1, #-80]
		  __HAL_UNLOCK(&huart1);
 8001092:	2400      	movs	r4, #0
		  datatosend[++i] = '\r';
 8001094:	f803 6c50 	strb.w	r6, [r3, #-80]
		  HAL_UART_Transmit(&huart1,datatosend,i,50);
 8001098:	a90e      	add	r1, sp, #56	; 0x38
		  datatosend[++i] = '\n';
 800109a:	f800 5c50 	strb.w	r5, [r0, #-80]
		  HAL_UART_Transmit(&huart1,datatosend,i,50);
 800109e:	2332      	movs	r3, #50	; 0x32
 80010a0:	48e7      	ldr	r0, [pc, #924]	; (8001440 <StartenchallTask+0x3e0>)
		  __HAL_UNLOCK(&huart1);
 80010a2:	4605      	mov	r5, r0
 80010a4:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
		  HAL_UART_Transmit(&huart1,datatosend,i,50);
 80010a8:	f003 ff00 	bl	8004eac <HAL_UART_Transmit>
		  __HAL_LOCK(&huart1);
 80010ac:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	f000 828f 	beq.w	80015d4 <StartenchallTask+0x574>
 80010b6:	2301      	movs	r3, #1
 80010b8:	4ae1      	ldr	r2, [pc, #900]	; (8001440 <StartenchallTask+0x3e0>)
		  last_count = encdata.z_count;
 80010ba:	9d01      	ldr	r5, [sp, #4]
		  __HAL_LOCK(&huart1);
 80010bc:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
	  }
	  //every 100mini
	  osDelay(100);
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f004 fbe9 	bl	8005898 <osDelay>
	  if(xQueuePeek(enchallQueueHandle,&encdata,0)==pdPASS)
 80010c6:	48df      	ldr	r0, [pc, #892]	; (8001444 <StartenchallTask+0x3e4>)
 80010c8:	2301      	movs	r3, #1
 80010ca:	2200      	movs	r2, #0
 80010cc:	a90a      	add	r1, sp, #40	; 0x28
 80010ce:	6800      	ldr	r0, [r0, #0]
 80010d0:	f005 f9b0 	bl	8006434 <xQueueGenericReceive>
 80010d4:	2801      	cmp	r0, #1
 80010d6:	d1f3      	bne.n	80010c0 <StartenchallTask+0x60>
		  vel = encdata.z_count - last_count;
 80010d8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
		  datatosend[++i] = vel%100/10 + 0x30; //3bits
 80010dc:	2464      	movs	r4, #100	; 0x64
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 80010de:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 80010e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		  vel = encdata.z_count - last_count;
 80010e6:	1b5d      	subs	r5, r3, r5
 80010e8:	9301      	str	r3, [sp, #4]
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 80010ea:	fba7 2308 	umull	r2, r3, r7, r8
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 80010ee:	4ad6      	ldr	r2, [pc, #856]	; (8001448 <StartenchallTask+0x3e8>)
		  vel = encdata.z_count - last_count;
 80010f0:	b2ad      	uxth	r5, r5
		  datatosend[++i] = encdata.Kp/10 + 0x30;
 80010f2:	f89d e032 	ldrb.w	lr, [sp, #50]	; 0x32
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 80010f6:	095b      	lsrs	r3, r3, #5
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 80010f8:	fba2 2105 	umull	r2, r1, r2, r5
		  datatosend[++i] = vel%100/10 + 0x30; //3bits
 80010fc:	fba7 6205 	umull	r6, r2, r7, r5
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8001100:	4ed1      	ldr	r6, [pc, #836]	; (8001448 <StartenchallTask+0x3e8>)
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 8001102:	0989      	lsrs	r1, r1, #6
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8001104:	fb04 8313 	mls	r3, r4, r3, r8
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8001108:	fba6 6c08 	umull	r6, ip, r6, r8
		  datatosend[++i] = vel%100/10 + 0x30; //3bits
 800110c:	0952      	lsrs	r2, r2, #5
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 800110e:	fb00 5111 	mls	r1, r0, r1, r5
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8001112:	b29b      	uxth	r3, r3
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8001114:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
		  datatosend[++i] = vel%100/10 + 0x30; //3bits
 8001118:	fb04 5212 	mls	r2, r4, r2, r5
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 800111c:	b289      	uxth	r1, r1
		  datatosend[++i] = vel%10 + 0x30; //3bits
 800111e:	fbab 4905 	umull	r4, r9, fp, r5
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8001122:	fb00 801c 	mls	r0, r0, ip, r8
		  datatosend[++i] = vel%100/10 + 0x30; //3bits
 8001126:	b292      	uxth	r2, r2
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8001128:	fbab 4303 	umull	r4, r3, fp, r3
		  datatosend[++i] = vel%10 + 0x30; //3bits
 800112c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8001130:	b280      	uxth	r0, r0
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 8001132:	fba7 4101 	umull	r4, r1, r7, r1
		  datatosend[++i] = vel%100/10 + 0x30; //3bits
 8001136:	fbab 4202 	umull	r4, r2, fp, r2
		  datatosend[++i] = encdata.Ki/10 + 0x30;
 800113a:	f89d 6033 	ldrb.w	r6, [sp, #51]	; 0x33
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 800113e:	fba7 4000 	umull	r4, r0, r7, r0
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 8001142:	0949      	lsrs	r1, r1, #5
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 8001144:	fbab a408 	umull	sl, r4, fp, r8
		  datatosend[++i] = vel%10 + 0x30; //3bits
 8001148:	eb09 0989 	add.w	r9, r9, r9, lsl #2
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 800114c:	3130      	adds	r1, #48	; 0x30
		  datatosend[++i] = vel%100/10 + 0x30; //3bits
 800114e:	08d2      	lsrs	r2, r2, #3
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 8001150:	08e4      	lsrs	r4, r4, #3
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8001152:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
		  datatosend[++i] = vel%100/10 + 0x30; //3bits
 8001156:	3230      	adds	r2, #48	; 0x30
		  datatosend[++i] = vel%10 + 0x30; //3bits
 8001158:	eba5 0549 	sub.w	r5, r5, r9, lsl #1
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 800115c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
		  datatosend[++i] = encdata.Kp/10 + 0x30;
 8001160:	fbab 9a0e 	umull	r9, sl, fp, lr
		  datatosend[++i] = vel%1000/100 + 0x30; //3bits
 8001164:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8001168:	08db      	lsrs	r3, r3, #3
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 800116a:	eba8 0444 	sub.w	r4, r8, r4, lsl #1
		  datatosend[++i] = encdata.Ki/10 + 0x30;
 800116e:	fbab 8106 	umull	r8, r1, fp, r6
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8001172:	3330      	adds	r3, #48	; 0x30
		  datatosend[++i] = encdata.Kp/10 + 0x30;
 8001174:	ea4f 0ada 	mov.w	sl, sl, lsr #3
		  datatosend[++i] = vel%100/10 + 0x30; //3bits
 8001178:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 800117c:	0940      	lsrs	r0, r0, #5
		  datatosend[++i] = encdata.Ki/10 + 0x30;
 800117e:	08ca      	lsrs	r2, r1, #3
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8001180:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
		  datatosend[++i] = encdata.Kp%10 + 0x30;
 8001184:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8001188:	3030      	adds	r0, #48	; 0x30
		  datatosend[++i] = encdata.Ki%10 + 0x30;
 800118a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
		  datatosend[++i] = vel%10 + 0x30; //3bits
 800118e:	3530      	adds	r5, #48	; 0x30
		  datatosend[++i] = encdata.Kp%10 + 0x30;
 8001190:	ebae 0e41 	sub.w	lr, lr, r1, lsl #1
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8001194:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
		  datatosend[++i] = encdata.Ki%10 + 0x30;
 8001198:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
		  datatosend[++i] = encdata.hole_in + 0x30; //3bits
 800119c:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 80011a0:	3430      	adds	r4, #48	; 0x30
		  datatosend[++i] = encdata.Kp%10 + 0x30;
 80011a2:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
		  datatosend[++i] = encdata.Ki%10 + 0x30;
 80011a6:	3630      	adds	r6, #48	; 0x30
		  datatosend[++i] = encdata.hole_in + 0x30; //3bits
 80011a8:	3030      	adds	r0, #48	; 0x30
		  datatosend[i] = 'H';datatosend[++i] = ':';
 80011aa:	233a      	movs	r3, #58	; 0x3a
		  datatosend[++i] = encdata.Ki/10 + 0x30;
 80011ac:	f102 0130 	add.w	r1, r2, #48	; 0x30
		  datatosend[++i] = vel%10 + 0x30; //3bits
 80011b0:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
		  datatosend[++i] = '\t';
 80011b4:	2209      	movs	r2, #9
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 80011b6:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
		  datatosend[++i] = encdata.Kp/10 + 0x30;
 80011ba:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
		  datatosend[++i] = encdata.Kp%10 + 0x30;
 80011be:	f88d e04c 	strb.w	lr, [sp, #76]	; 0x4c
		  datatosend[i] = 'H';datatosend[++i] = ':';
 80011c2:	2548      	movs	r5, #72	; 0x48
		  datatosend[++i] = encdata.Ki%10 + 0x30;
 80011c4:	f88d 6051 	strb.w	r6, [sp, #81]	; 0x51
		  datatosend[++i] = 'V';datatosend[++i] = ':';
 80011c8:	f04f 0e56 	mov.w	lr, #86	; 0x56
		  datatosend[++i] = encdata.hole_in + 0x30; //3bits
 80011cc:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
		  datatosend[++i] = 'E';datatosend[++i] = ':';
 80011d0:	2645      	movs	r6, #69	; 0x45
		  datatosend[++i] = 'I';datatosend[++i] = ':';
 80011d2:	2049      	movs	r0, #73	; 0x49
		  datatosend[++i] = 'P';datatosend[++i] = ':';
 80011d4:	2450      	movs	r4, #80	; 0x50
		  datatosend[++i] = encdata.Ki/10 + 0x30;
 80011d6:	f88d 1050 	strb.w	r1, [sp, #80]	; 0x50
		  datatosend[++i] = 'T';datatosend[++i] = 'Q';datatosend[++i] = ':';
 80011da:	2154      	movs	r1, #84	; 0x54
		  datatosend[++i] = '\t';
 80011dc:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
		  datatosend[++i] = '\t';
 80011e0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		  datatosend[++i] = '\t';
 80011e4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		  datatosend[++i] = '\t';
 80011e8:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
		  datatosend[++i] = '\t';
 80011ec:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
		  datatosend[++i] = 'T';datatosend[++i] = 'Q';datatosend[++i] = ':';
 80011f0:	2251      	movs	r2, #81	; 0x51
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 80011f2:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
		  datatosend[++i] = encdata.Kp/10 + 0x30;
 80011f6:	f88d a04b 	strb.w	sl, [sp, #75]	; 0x4b
		  datatosend[i] = 'H';datatosend[++i] = ':';
 80011fa:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
 80011fe:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		  datatosend[++i] = 'V';datatosend[++i] = ':';
 8001202:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
		  datatosend[++i] = 'E';datatosend[++i] = ':';
 8001206:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		  datatosend[++i] = 'P';datatosend[++i] = ':';
 800120a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		  datatosend[++i] = 'I';datatosend[++i] = ':';
 800120e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
		  datatosend[++i] = 'V';datatosend[++i] = ':';
 8001212:	f88d e03c 	strb.w	lr, [sp, #60]	; 0x3c
		  datatosend[++i] = 'E';datatosend[++i] = ':';
 8001216:	f88d 6042 	strb.w	r6, [sp, #66]	; 0x42
		  datatosend[++i] = 'P';datatosend[++i] = ':';
 800121a:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
		  datatosend[++i] = 'I';datatosend[++i] = ':';
 800121e:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
		  if(encdata.target_cur<0) //minus
 8001222:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
		  datatosend[++i] = 'T';datatosend[++i] = 'Q';datatosend[++i] = ':';
 8001226:	f88d 1053 	strb.w	r1, [sp, #83]	; 0x53
		  if(encdata.target_cur<0) //minus
 800122a:	2800      	cmp	r0, #0
		  datatosend[++i] = 'T';datatosend[++i] = 'Q';datatosend[++i] = ':';
 800122c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
 8001230:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
		  if(encdata.target_cur<0) //minus
 8001234:	f2c0 81c8 	blt.w	80015c8 <StartenchallTask+0x568>
			  datatosend[++i] = '+';
 8001238:	262b      	movs	r6, #43	; 0x2b
		  datatosend[++i] = encdata.target_cur/10000 + 0x30;
 800123a:	4b84      	ldr	r3, [pc, #528]	; (800144c <StartenchallTask+0x3ec>)
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 800123c:	fb87 e500 	smull	lr, r5, r7, r0
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001240:	4a81      	ldr	r2, [pc, #516]	; (8001448 <StartenchallTask+0x3e8>)
		  datatosend[++i] = encdata.target_cur/10000 + 0x30;
 8001242:	fb83 3400 	smull	r3, r4, r3, r0
 8001246:	17c3      	asrs	r3, r0, #31
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001248:	fb82 1200 	smull	r1, r2, r2, r0
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 800124c:	f242 7110 	movw	r1, #10000	; 0x2710
		  datatosend[++i] = encdata.target_cur/10000 + 0x30;
 8001250:	ebc3 3424 	rsb	r4, r3, r4, asr #12
 8001254:	f88d 6056 	strb.w	r6, [sp, #86]	; 0x56
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001258:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 800125c:	ebc3 1365 	rsb	r3, r3, r5, asr #5
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001260:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 8001264:	fb01 0114 	mls	r1, r1, r4, r0
		  datatosend[++i] = encdata.target_cur/10000 + 0x30;
 8001268:	3430      	adds	r4, #48	; 0x30
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 800126a:	fb05 0212 	mls	r2, r5, r2, r0
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 800126e:	2564      	movs	r5, #100	; 0x64
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 8001270:	b209      	sxth	r1, r1
		  datatosend[++i] = encdata.target_cur/10000 + 0x30;
 8001272:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 8001276:	fb05 0313 	mls	r3, r5, r3, r0
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 800127a:	b212      	sxth	r2, r2
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 800127c:	4872      	ldr	r0, [pc, #456]	; (8001448 <StartenchallTask+0x3e8>)
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 800127e:	b21b      	sxth	r3, r3
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 8001280:	fb80 0401 	smull	r0, r4, r0, r1
 8001284:	17c8      	asrs	r0, r1, #31
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001286:	fb87 1502 	smull	r1, r5, r7, r2
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 800128a:	4971      	ldr	r1, [pc, #452]	; (8001450 <StartenchallTask+0x3f0>)
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 800128c:	ebc0 10a4 	rsb	r0, r0, r4, asr #6
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001290:	17d2      	asrs	r2, r2, #31
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 8001292:	fb81 1403 	smull	r1, r4, r1, r3
 8001296:	17d9      	asrs	r1, r3, #31
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 8001298:	3030      	adds	r0, #48	; 0x30
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 800129a:	ebc2 1265 	rsb	r2, r2, r5, asr #5
		  datatosend[++i] = '.';
 800129e:	252e      	movs	r5, #46	; 0x2e
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 80012a0:	ebc1 01a4 	rsb	r1, r1, r4, asr #2
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 80012a4:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 80012a8:	3230      	adds	r2, #48	; 0x30
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 80012aa:	486a      	ldr	r0, [pc, #424]	; (8001454 <StartenchallTask+0x3f4>)
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 80012ac:	3130      	adds	r1, #48	; 0x30
		  datatosend[++i] = 'A';
 80012ae:	2441      	movs	r4, #65	; 0x41
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 80012b0:	f88d 205a 	strb.w	r2, [sp, #90]	; 0x5a
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 80012b4:	2301      	movs	r3, #1
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 80012b6:	f88d 105b 	strb.w	r1, [sp, #91]	; 0x5b
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 80012ba:	2200      	movs	r2, #0
 80012bc:	a907      	add	r1, sp, #28
 80012be:	6800      	ldr	r0, [r0, #0]
		  datatosend[++i] = '.';
 80012c0:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
		  datatosend[++i] = 'A';
 80012c4:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 80012c8:	f005 f8b4 	bl	8006434 <xQueueGenericReceive>
 80012cc:	2801      	cmp	r0, #1
 80012ce:	f47f aed3 	bne.w	8001078 <StartenchallTask+0x18>
			  if(conresdata.feedback_cq<0) //minus
 80012d2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
			  datatosend[++i] = '\t';
 80012d6:	4b60      	ldr	r3, [pc, #384]	; (8001458 <StartenchallTask+0x3f8>)
			  if(conresdata.feedback_cq<0) //minus
 80012d8:	2800      	cmp	r0, #0
			  datatosend[++i] = '\t';
 80012da:	f8cd 305d 	str.w	r3, [sp, #93]	; 0x5d
			  if(conresdata.feedback_cq<0) //minus
 80012de:	f2c0 8184 	blt.w	80015ea <StartenchallTask+0x58a>
				  datatosend[++i] = '+';
 80012e2:	262b      	movs	r6, #43	; 0x2b
			  datatosend[++i] = conresdata.feedback_cq/10000 + 0x30;
 80012e4:	4b59      	ldr	r3, [pc, #356]	; (800144c <StartenchallTask+0x3ec>)
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 80012e6:	fb87 e500 	smull	lr, r5, r7, r0
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 80012ea:	4a57      	ldr	r2, [pc, #348]	; (8001448 <StartenchallTask+0x3e8>)
			  datatosend[++i] = conresdata.feedback_cq/10000 + 0x30;
 80012ec:	fb83 3400 	smull	r3, r4, r3, r0
 80012f0:	17c3      	asrs	r3, r0, #31
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 80012f2:	fb82 1200 	smull	r1, r2, r2, r0
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 80012f6:	f242 7110 	movw	r1, #10000	; 0x2710
			  datatosend[++i] = conresdata.feedback_cq/10000 + 0x30;
 80012fa:	ebc3 3424 	rsb	r4, r3, r4, asr #12
			  if(conresdata.feedback_cd<0) //minus
 80012fe:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 8001302:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 8001306:	f88d 6061 	strb.w	r6, [sp, #97]	; 0x61
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 800130a:	ebc3 1365 	rsb	r3, r3, r5, asr #5
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 800130e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 8001312:	fb01 0114 	mls	r1, r1, r4, r0
			  datatosend[++i] = conresdata.feedback_cq/10000 + 0x30;
 8001316:	3430      	adds	r4, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 8001318:	fb05 0212 	mls	r2, r5, r2, r0
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 800131c:	2564      	movs	r5, #100	; 0x64
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 800131e:	b209      	sxth	r1, r1
			  datatosend[++i] = conresdata.feedback_cq/10000 + 0x30;
 8001320:	f88d 4062 	strb.w	r4, [sp, #98]	; 0x62
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 8001324:	fb05 0313 	mls	r3, r5, r3, r0
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 8001328:	4847      	ldr	r0, [pc, #284]	; (8001448 <StartenchallTask+0x3e8>)
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 800132a:	b212      	sxth	r2, r2
			  if(conresdata.feedback_cd<0) //minus
 800132c:	f1be 0f00 	cmp.w	lr, #0
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 8001330:	fb80 4001 	smull	r4, r0, r0, r1
 8001334:	ea4f 71e1 	mov.w	r1, r1, asr #31
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 8001338:	b21b      	sxth	r3, r3
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 800133a:	fb87 5402 	smull	r5, r4, r7, r2
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 800133e:	ebc1 11a0 	rsb	r1, r1, r0, asr #6
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 8001342:	4843      	ldr	r0, [pc, #268]	; (8001450 <StartenchallTask+0x3f0>)
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 8001344:	ea4f 72e2 	mov.w	r2, r2, asr #31
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 8001348:	fb80 5003 	smull	r5, r0, r0, r3
 800134c:	ea4f 73e3 	mov.w	r3, r3, asr #31
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 8001350:	ebc2 1264 	rsb	r2, r2, r4, asr #5
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 8001354:	f101 0130 	add.w	r1, r1, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 8001358:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
			  datatosend[++i] = '.';
 800135c:	f04f 052e 	mov.w	r5, #46	; 0x2e
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 8001360:	f102 0230 	add.w	r2, r2, #48	; 0x30
			  datatosend[++i] = 'A';
 8001364:	f04f 0441 	mov.w	r4, #65	; 0x41
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 8001368:	f103 0330 	add.w	r3, r3, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 800136c:	f88d 1063 	strb.w	r1, [sp, #99]	; 0x63
			  datatosend[++i] = '\t';
 8001370:	f04f 0009 	mov.w	r0, #9
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 8001374:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
			  datatosend[++i] = 'F';datatosend[++i] = 'D';datatosend[++i] = ':';
 8001378:	f04f 0146 	mov.w	r1, #70	; 0x46
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 800137c:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
			  datatosend[++i] = 'F';datatosend[++i] = 'D';datatosend[++i] = ':';
 8001380:	f04f 0244 	mov.w	r2, #68	; 0x44
 8001384:	f04f 033a 	mov.w	r3, #58	; 0x3a
			  datatosend[++i] = '.';
 8001388:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
			  datatosend[++i] = 'A';
 800138c:	f88d 4067 	strb.w	r4, [sp, #103]	; 0x67
			  datatosend[++i] = '\t';
 8001390:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
			  datatosend[++i] = 'F';datatosend[++i] = 'D';datatosend[++i] = ':';
 8001394:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
 8001398:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 800139c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
			  if(conresdata.feedback_cd<0) //minus
 80013a0:	f2c0 811b 	blt.w	80015da <StartenchallTask+0x57a>
				  datatosend[++i] = '+';
 80013a4:	232b      	movs	r3, #43	; 0x2b
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 80013a6:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 80013aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 80013ae:	4926      	ldr	r1, [pc, #152]	; (8001448 <StartenchallTask+0x3e8>)
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 80013b0:	ea4f 79ee 	mov.w	r9, lr, asr #31
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 80013b4:	17e8      	asrs	r0, r5, #31
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 80013b6:	f8bd 8022 	ldrh.w	r8, [sp, #34]	; 0x22
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 80013ba:	fb81 1c05 	smull	r1, ip, r1, r5
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 80013be:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80013c2:	fb87 4105 	smull	r4, r1, r7, r5
 80013c6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 80013ca:	ebc0 1cac 	rsb	ip, r0, ip, asr #6
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80013ce:	ebc0 1161 	rsb	r1, r0, r1, asr #5
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <StartenchallTask+0x3e8>)
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80013d4:	9103      	str	r1, [sp, #12]
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 80013d6:	fba3 4308 	umull	r4, r3, r3, r8
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 80013da:	fba7 1408 	umull	r1, r4, r7, r8
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 80013de:	491a      	ldr	r1, [pc, #104]	; (8001448 <StartenchallTask+0x3e8>)
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 80013e0:	099b      	lsrs	r3, r3, #6
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 80013e2:	fba1 1a06 	umull	r1, sl, r1, r6
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 80013e6:	0964      	lsrs	r4, r4, #5
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 80013e8:	9305      	str	r3, [sp, #20]
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 80013ea:	ea4f 119a 	mov.w	r1, sl, lsr #6
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 80013ee:	fb02 531c 	mls	r3, r2, ip, r5
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 80013f2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 80013f6:	9102      	str	r1, [sp, #8]
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 80013f8:	b21b      	sxth	r3, r3
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 80013fa:	4913      	ldr	r1, [pc, #76]	; (8001448 <StartenchallTask+0x3e8>)
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 80013fc:	f88d c079 	strb.w	ip, [sp, #121]	; 0x79
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 8001400:	ea4f 7ce3 	mov.w	ip, r3, asr #31
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 8001404:	fb81 1a0e 	smull	r1, sl, r1, lr
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 8001408:	fb87 1303 	smull	r1, r3, r7, r3
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 800140c:	9903      	ldr	r1, [sp, #12]
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 800140e:	ebc9 1aaa 	rsb	sl, r9, sl, asr #6
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 8001412:	ebcc 1363 	rsb	r3, ip, r3, asr #5
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 8001416:	f04f 0c64 	mov.w	ip, #100	; 0x64
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 800141a:	fb02 ea1a 	mls	sl, r2, sl, lr
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 800141e:	3330      	adds	r3, #48	; 0x30
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 8001420:	fb0c 5111 	mls	r1, ip, r1, r5
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 8001424:	fb0c 8414 	mls	r4, ip, r4, r8
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 8001428:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <StartenchallTask+0x3f0>)
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 800142e:	b2a4      	uxth	r4, r4
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 8001430:	9104      	str	r1, [sp, #16]
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 8001432:	fa0f f18a 	sxth.w	r1, sl
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 8001436:	fb83 a305 	smull	sl, r3, r3, r5
			  datatosend[++i] = 'd';datatosend[++i] = 'u';
 800143a:	f88d c074 	strb.w	ip, [sp, #116]	; 0x74
 800143e:	e00d      	b.n	800145c <StartenchallTask+0x3fc>
 8001440:	20004284 	.word	0x20004284
 8001444:	20003fc8 	.word	0x20003fc8
 8001448:	10624dd3 	.word	0x10624dd3
 800144c:	68db8bad 	.word	0x68db8bad
 8001450:	66666667 	.word	0x66666667
 8001454:	20003fb0 	.word	0x20003fb0
 8001458:	3a514609 	.word	0x3a514609
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 800145c:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 8001460:	fba7 3a06 	umull	r3, sl, r7, r6
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 8001464:	fbab 3404 	umull	r3, r4, fp, r4
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 8001468:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 800146c:	9103      	str	r1, [sp, #12]
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 800146e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 8001472:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 8001476:	eba5 0540 	sub.w	r5, r5, r0, lsl #1
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 800147a:	fb87 030e 	smull	r0, r3, r7, lr
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 800147e:	fb0c 6a1a 	mls	sl, ip, sl, r6
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 8001482:	08e4      	lsrs	r4, r4, #3
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 8001484:	ebc9 1063 	rsb	r0, r9, r3, asr #5
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 8001488:	f105 0330 	add.w	r3, r5, #48	; 0x30
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 800148c:	fa1f fa8a 	uxth.w	sl, sl
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 8001490:	3430      	adds	r4, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 8001492:	fb0c ec10 	mls	ip, ip, r0, lr
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 8001496:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 800149a:	fa0f f38c 	sxth.w	r3, ip
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 800149e:	fbab 5a0a 	umull	r5, sl, fp, sl
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 80014a2:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 80014a6:	f242 7510 	movw	r5, #10000	; 0x2710
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 80014aa:	9304      	str	r3, [sp, #16]
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 80014ac:	ea4f 00da 	mov.w	r0, sl, lsr #3
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 80014b0:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <StartenchallTask+0x598>)
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 80014b2:	9c05      	ldr	r4, [sp, #20]
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 80014b4:	3030      	adds	r0, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 80014b6:	fb83 ac0e 	smull	sl, ip, r3, lr
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80014ba:	4b50      	ldr	r3, [pc, #320]	; (80015fc <StartenchallTask+0x59c>)
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 80014bc:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80014c0:	fb83 3a01 	smull	r3, sl, r3, r1
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 80014c4:	9b02      	ldr	r3, [sp, #8]
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 80014c6:	fb02 8014 	mls	r0, r2, r4, r8
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80014ca:	17c9      	asrs	r1, r1, #31
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 80014cc:	fb02 6213 	mls	r2, r2, r3, r6
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 80014d0:	ebc9 3c2c 	rsb	ip, r9, ip, asr #12
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80014d4:	ebc1 01aa 	rsb	r1, r1, sl, asr #2
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 80014d8:	3430      	adds	r4, #48	; 0x30
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 80014da:	b292      	uxth	r2, r2
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 80014dc:	fb05 e51c 	mls	r5, r5, ip, lr
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80014e0:	3130      	adds	r1, #48	; 0x30
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 80014e2:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 80014e6:	fba7 a202 	umull	sl, r2, r7, r2
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 80014ea:	9c03      	ldr	r4, [sp, #12]
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80014ec:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 80014f0:	f103 0930 	add.w	r9, r3, #48	; 0x30
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 80014f4:	fbab a106 	umull	sl, r1, fp, r6
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 80014f8:	0952      	lsrs	r2, r2, #5
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 80014fa:	4623      	mov	r3, r4
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 80014fc:	b22d      	sxth	r5, r5
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 80014fe:	3230      	adds	r2, #48	; 0x30
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 8001500:	08c9      	lsrs	r1, r1, #3
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 8001502:	fa1f fe80 	uxth.w	lr, r0
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 8001506:	fbab a008 	umull	sl, r0, fp, r8
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 800150a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 800150e:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 8001512:	4a3b      	ldr	r2, [pc, #236]	; (8001600 <StartenchallTask+0x5a0>)
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 8001514:	fba7 ae0e 	umull	sl, lr, r7, lr
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 8001518:	eba6 0641 	sub.w	r6, r6, r1, lsl #1
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 800151c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 8001520:	fb82 2105 	smull	r2, r1, r2, r5
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 8001524:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 8001528:	fb87 3203 	smull	r3, r2, r7, r3
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 800152c:	9c04      	ldr	r4, [sp, #16]
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <StartenchallTask+0x59c>)
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 8001530:	08c0      	lsrs	r0, r0, #3
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 8001532:	17ed      	asrs	r5, r5, #31
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 8001534:	3630      	adds	r6, #48	; 0x30
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 8001536:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 800153a:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 800153e:	ebc5 15a1 	rsb	r5, r5, r1, asr #6
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 8001542:	fb83 3104 	smull	r3, r1, r3, r4
 8001546:	17e3      	asrs	r3, r4, #31
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 8001548:	f88d c06d 	strb.w	ip, [sp, #109]	; 0x6d
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 800154c:	eba8 0040 	sub.w	r0, r8, r0, lsl #1
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 8001550:	3530      	adds	r5, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 8001552:	ebca 1a62 	rsb	sl, sl, r2, asr #5
			  datatosend[++i] = '.';
 8001556:	222e      	movs	r2, #46	; 0x2e
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 8001558:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 800155c:	3030      	adds	r0, #48	; 0x30
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 800155e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 8001562:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 8001566:	3330      	adds	r3, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 8001568:	f88d 506e 	strb.w	r5, [sp, #110]	; 0x6e
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 800156c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
			  datatosend[++i] = 't';datatosend[++i] = 'y';datatosend[++i] = ':';
 8001570:	2174      	movs	r1, #116	; 0x74
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 8001572:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
			  datatosend[++i] = ',';
 8001576:	242c      	movs	r4, #44	; 0x2c
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 8001578:	f88d e07f 	strb.w	lr, [sp, #127]	; 0x7f
			  datatosend[++i] = 'A';
 800157c:	f04f 0941 	mov.w	r9, #65	; 0x41
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 8001580:	f88d 0081 	strb.w	r0, [sp, #129]	; 0x81
			  datatosend[++i] = '\t';
 8001584:	f04f 0809 	mov.w	r8, #9
			  datatosend[++i] = 'd';datatosend[++i] = 'u';
 8001588:	f04f 0c75 	mov.w	ip, #117	; 0x75
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 800158c:	f88d a070 	strb.w	sl, [sp, #112]	; 0x70
			  datatosend[++i] = 't';datatosend[++i] = 'y';datatosend[++i] = ':';
 8001590:	f04f 0e79 	mov.w	lr, #121	; 0x79
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 8001594:	f88d 6086 	strb.w	r6, [sp, #134]	; 0x86
			  datatosend[++i] = 't';datatosend[++i] = 'y';datatosend[++i] = ':';
 8001598:	253a      	movs	r5, #58	; 0x3a
			  datatosend[++i] = '.';
 800159a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 800159e:	2251      	movs	r2, #81	; 0x51
			  datatosend[++i] = 't';datatosend[++i] = 'y';datatosend[++i] = ':';
 80015a0:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
			  datatosend[++i] = 'A';
 80015a4:	f88d 9072 	strb.w	r9, [sp, #114]	; 0x72
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 80015a8:	2350      	movs	r3, #80	; 0x50
			  datatosend[++i] = '\t';
 80015aa:	f88d 8073 	strb.w	r8, [sp, #115]	; 0x73
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 80015ae:	4610      	mov	r0, r2
			  datatosend[++i] = 'd';datatosend[++i] = 'u';
 80015b0:	f88d c075 	strb.w	ip, [sp, #117]	; 0x75
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 80015b4:	214f      	movs	r1, #79	; 0x4f
			  datatosend[++i] = 't';datatosend[++i] = 'y';datatosend[++i] = ':';
 80015b6:	f88d e077 	strb.w	lr, [sp, #119]	; 0x77
 80015ba:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
			  datatosend[++i] = ',';
 80015be:	f88d 407d 	strb.w	r4, [sp, #125]	; 0x7d
			  datatosend[++i] = ',';
 80015c2:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
 80015c6:	e55b      	b.n	8001080 <StartenchallTask+0x20>
			  encdata.target_cur = ~(encdata.target_cur - 1);
 80015c8:	4243      	negs	r3, r0
			  datatosend[++i] = '-';
 80015ca:	262d      	movs	r6, #45	; 0x2d
			  encdata.target_cur = ~(encdata.target_cur - 1);
 80015cc:	b218      	sxth	r0, r3
 80015ce:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80015d2:	e632      	b.n	800123a <StartenchallTask+0x1da>
  }
}
 80015d4:	b023      	add	sp, #140	; 0x8c
 80015d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  conresdata.feedback_cd = ~(conresdata.feedback_cd - 1);
 80015da:	f1ce 0e00 	rsb	lr, lr, #0
				  datatosend[++i] = '-';
 80015de:	232d      	movs	r3, #45	; 0x2d
				  conresdata.feedback_cd = ~(conresdata.feedback_cd - 1);
 80015e0:	fa0f fe8e 	sxth.w	lr, lr
 80015e4:	f8ad e01e 	strh.w	lr, [sp, #30]
 80015e8:	e6dd      	b.n	80013a6 <StartenchallTask+0x346>
				  conresdata.feedback_cq = ~(conresdata.feedback_cq - 1);
 80015ea:	4243      	negs	r3, r0
				  datatosend[++i] = '-';
 80015ec:	262d      	movs	r6, #45	; 0x2d
				  conresdata.feedback_cq = ~(conresdata.feedback_cq - 1);
 80015ee:	b218      	sxth	r0, r3
 80015f0:	f8ad 001c 	strh.w	r0, [sp, #28]
 80015f4:	e676      	b.n	80012e4 <StartenchallTask+0x284>
 80015f6:	bf00      	nop
 80015f8:	68db8bad 	.word	0x68db8bad
 80015fc:	66666667 	.word	0x66666667
 8001600:	10624dd3 	.word	0x10624dd3

08001604 <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <MX_DFSDM1_Init+0xcc>)
 8001606:	4a33      	ldr	r2, [pc, #204]	; (80016d4 <MX_DFSDM1_Init+0xd0>)
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8001608:	4618      	mov	r0, r3
{
 800160a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800160e:	2400      	movs	r4, #0
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001610:	2501      	movs	r5, #1
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 8001612:	2602      	movs	r6, #2
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001614:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 8001618:	f44f 7780 	mov.w	r7, #256	; 0x100
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800161c:	721d      	strb	r5, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800161e:	725d      	strb	r5, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001620:	f8c3 801c 	str.w	r8, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 8001624:	621f      	str	r7, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 8001626:	625e      	str	r6, [r3, #36]	; 0x24
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001628:	e883 0014 	stmia.w	r3, {r2, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 800162c:	f001 f9e6 	bl	80029fc <HAL_DFSDM_FilterInit>

  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <MX_DFSDM1_Init+0xd4>)
 8001632:	4a2a      	ldr	r2, [pc, #168]	; (80016dc <MX_DFSDM1_Init+0xd8>)
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 8001634:	4618      	mov	r0, r3
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001636:	f8c3 801c 	str.w	r8, [r3, #28]
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 800163a:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800163c:	605c      	str	r4, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800163e:	721d      	strb	r5, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8001640:	725d      	strb	r5, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
 8001642:	621f      	str	r7, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
 8001644:	625e      	str	r6, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 8001646:	f001 f9d9 	bl	80029fc <HAL_DFSDM_FilterInit>

  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800164c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8001650:	4924      	ldr	r1, [pc, #144]	; (80016e4 <MX_DFSDM1_Init+0xe0>)
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
  hdfsdm1_channel0.Init.Offset = 0;
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8001652:	4618      	mov	r0, r3
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8001654:	60de      	str	r6, [r3, #12]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8001656:	711c      	strb	r4, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001658:	609c      	str	r4, [r3, #8]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800165a:	611c      	str	r4, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800165c:	615c      	str	r4, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800165e:	619c      	str	r4, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001660:	61dc      	str	r4, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001662:	621c      	str	r4, [r3, #32]
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8001664:	629d      	str	r5, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8001666:	62dc      	str	r4, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8001668:	631c      	str	r4, [r3, #48]	; 0x30
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800166a:	6019      	str	r1, [r3, #0]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800166e:	f001 f8fb 	bl	8002868 <HAL_DFSDM_ChannelInit>
 8001672:	bb38      	cbnz	r0, 80016c4 <MX_DFSDM1_Init+0xc0>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_DFSDM1_Init+0xe4>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 8001676:	2200      	movs	r2, #0
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 8001678:	2502      	movs	r5, #2
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 800167a:	4e1c      	ldr	r6, [pc, #112]	; (80016ec <MX_DFSDM1_Init+0xe8>)
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800167c:	f44f 0440 	mov.w	r4, #12582912	; 0xc00000
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8001680:	2101      	movs	r1, #1
  hdfsdm1_channel3.Init.Offset = 0;
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8001682:	4618      	mov	r0, r3
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8001684:	601e      	str	r6, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 8001686:	60dd      	str	r5, [r3, #12]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8001688:	625c      	str	r4, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 800168a:	6299      	str	r1, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 800168c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800168e:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001690:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001692:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001694:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001696:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001698:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Offset = 0;
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 800169e:	f001 f8e3 	bl	8002868 <HAL_DFSDM_ChannelInit>
 80016a2:	b118      	cbz	r0, 80016ac <MX_DFSDM1_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80016a4:	217a      	movs	r1, #122	; 0x7a
 80016a6:	4812      	ldr	r0, [pc, #72]	; (80016f0 <MX_DFSDM1_Init+0xec>)
 80016a8:	f000 fbba 	bl	8001e20 <_Error_Handler>
  }

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 80016ac:	2201      	movs	r2, #1
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <MX_DFSDM1_Init+0xcc>)
 80016b0:	4611      	mov	r1, r2
 80016b2:	f001 fa19 	bl	8002ae8 <HAL_DFSDM_FilterConfigRegChannel>

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 80016b6:	2201      	movs	r2, #1
 80016b8:	490e      	ldr	r1, [pc, #56]	; (80016f4 <MX_DFSDM1_Init+0xf0>)
 80016ba:	4807      	ldr	r0, [pc, #28]	; (80016d8 <MX_DFSDM1_Init+0xd4>)

}
 80016bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 80016c0:	f001 ba12 	b.w	8002ae8 <HAL_DFSDM_FilterConfigRegChannel>
    _Error_Handler(__FILE__, __LINE__);
 80016c4:	2168      	movs	r1, #104	; 0x68
 80016c6:	480a      	ldr	r0, [pc, #40]	; (80016f0 <MX_DFSDM1_Init+0xec>)
 80016c8:	f000 fbaa 	bl	8001e20 <_Error_Handler>
 80016cc:	e7d2      	b.n	8001674 <MX_DFSDM1_Init+0x70>
 80016ce:	bf00      	nop
 80016d0:	20003dd8 	.word	0x20003dd8
 80016d4:	40017500 	.word	0x40017500
 80016d8:	20003f24 	.word	0x20003f24
 80016dc:	40017580 	.word	0x40017580
 80016e0:	20003f78 	.word	0x20003f78
 80016e4:	40017400 	.word	0x40017400
 80016e8:	20003e2c 	.word	0x20003e2c
 80016ec:	40017460 	.word	0x40017460
 80016f0:	08007f78 	.word	0x08007f78
 80016f4:	00030008 	.word	0x00030008

080016f8 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 80016fa:	4c46      	ldr	r4, [pc, #280]	; (8001814 <HAL_DFSDM_FilterMspInit+0x11c>)
{
 80016fc:	b087      	sub	sp, #28
 80016fe:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	bb03      	cbnz	r3, 8001746 <HAL_DFSDM_FilterMspInit+0x4e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001704:	4a44      	ldr	r2, [pc, #272]	; (8001818 <HAL_DFSDM_FilterMspInit+0x120>)
 8001706:	6813      	ldr	r3, [r2, #0]
 8001708:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800170a:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800170c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800170e:	d023      	beq.n	8001758 <HAL_DFSDM_FilterMspInit+0x60>
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001712:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001714:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001718:	a901      	add	r1, sp, #4
 800171a:	4840      	ldr	r0, [pc, #256]	; (800181c <HAL_DFSDM_FilterMspInit+0x124>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800171c:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800171e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001726:	f001 fc3d 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800172a:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800172c:	2218      	movs	r2, #24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172e:	a901      	add	r1, sp, #4
 8001730:	483b      	ldr	r0, [pc, #236]	; (8001820 <HAL_DFSDM_FilterMspInit+0x128>)
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001732:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800173a:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173c:	f001 fc32 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8001746:	682b      	ldr	r3, [r5, #0]
 8001748:	4a36      	ldr	r2, [pc, #216]	; (8001824 <HAL_DFSDM_FilterMspInit+0x12c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d034      	beq.n	80017b8 <HAL_DFSDM_FilterMspInit+0xc0>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 800174e:	4a36      	ldr	r2, [pc, #216]	; (8001828 <HAL_DFSDM_FilterMspInit+0x130>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d00c      	beq.n	800176e <HAL_DFSDM_FilterMspInit+0x76>
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
  }

}
 8001754:	b007      	add	sp, #28
 8001756:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001758:	4b34      	ldr	r3, [pc, #208]	; (800182c <HAL_DFSDM_FilterMspInit+0x134>)
 800175a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800175c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	9b00      	ldr	r3, [sp, #0]
 800176c:	e7d0      	b.n	8001710 <HAL_DFSDM_FilterMspInit+0x18>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 800176e:	f502 426e 	add.w	r2, r2, #60928	; 0xee00
 8001772:	4c2f      	ldr	r4, [pc, #188]	; (8001830 <HAL_DFSDM_FilterMspInit+0x138>)
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8001774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001778:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 800177c:	32a8      	adds	r2, #168	; 0xa8
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800177e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001782:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001786:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 800178a:	6022      	str	r2, [r4, #0]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800178c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8001790:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001792:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	6120      	str	r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001796:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001798:	6167      	str	r7, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800179a:	61a6      	str	r6, [r4, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800179c:	61e1      	str	r1, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800179e:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a0:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a2:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a4:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80017a6:	f001 fa47 	bl	8002c38 <HAL_DMA_Init>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d12d      	bne.n	800180a <HAL_DFSDM_FilterMspInit+0x112>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 80017ae:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 80017b0:	62ac      	str	r4, [r5, #40]	; 0x28
 80017b2:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80017b4:	b007      	add	sp, #28
 80017b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80017b8:	f502 426f 	add.w	r2, r2, #61184	; 0xef00
 80017bc:	4c1d      	ldr	r4, [pc, #116]	; (8001834 <HAL_DFSDM_FilterMspInit+0x13c>)
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80017be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80017c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80017c6:	3210      	adds	r2, #16
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017cc:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80017d0:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80017d4:	6022      	str	r2, [r4, #0]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80017da:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017dc:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80017de:	6120      	str	r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80017e0:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017e2:	6167      	str	r7, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017e4:	61a6      	str	r6, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80017e6:	61e1      	str	r1, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017e8:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ea:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ec:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ee:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80017f0:	f001 fa22 	bl	8002c38 <HAL_DMA_Init>
 80017f4:	b920      	cbnz	r0, 8001800 <HAL_DFSDM_FilterMspInit+0x108>
 80017f6:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80017f8:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80017fa:	62ac      	str	r4, [r5, #40]	; 0x28
 80017fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80017fe:	e7a6      	b.n	800174e <HAL_DFSDM_FilterMspInit+0x56>
      _Error_Handler(__FILE__, __LINE__);
 8001800:	21bf      	movs	r1, #191	; 0xbf
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <HAL_DFSDM_FilterMspInit+0x140>)
 8001804:	f000 fb0c 	bl	8001e20 <_Error_Handler>
 8001808:	e7f5      	b.n	80017f6 <HAL_DFSDM_FilterMspInit+0xfe>
      _Error_Handler(__FILE__, __LINE__);
 800180a:	21d6      	movs	r1, #214	; 0xd6
 800180c:	480a      	ldr	r0, [pc, #40]	; (8001838 <HAL_DFSDM_FilterMspInit+0x140>)
 800180e:	f000 fb07 	bl	8001e20 <_Error_Handler>
 8001812:	e7cc      	b.n	80017ae <HAL_DFSDM_FilterMspInit+0xb6>
 8001814:	20000050 	.word	0x20000050
 8001818:	20000054 	.word	0x20000054
 800181c:	40021000 	.word	0x40021000
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40017500 	.word	0x40017500
 8001828:	40017580 	.word	0x40017580
 800182c:	40023800 	.word	0x40023800
 8001830:	20003e64 	.word	0x20003e64
 8001834:	20003ec4 	.word	0x20003ec4
 8001838:	08007f78 	.word	0x08007f78

0800183c <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800183c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 800183e:	4c19      	ldr	r4, [pc, #100]	; (80018a4 <HAL_DFSDM_ChannelMspInit+0x68>)
{
 8001840:	b086      	sub	sp, #24
  if(DFSDM1_Init == 0)
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	bb03      	cbnz	r3, 8001888 <HAL_DFSDM_ChannelMspInit+0x4c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8001848:	6813      	ldr	r3, [r2, #0]
 800184a:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800184c:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800184e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001850:	d01c      	beq.n	800188c <HAL_DFSDM_ChannelMspInit+0x50>
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001854:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001856:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185a:	a901      	add	r1, sp, #4
 800185c:	4813      	ldr	r0, [pc, #76]	; (80018ac <HAL_DFSDM_ChannelMspInit+0x70>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800185e:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001860:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001868:	f001 fb9c 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800186c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800186e:	2218      	movs	r2, #24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001870:	a901      	add	r1, sp, #4
 8001872:	480f      	ldr	r0, [pc, #60]	; (80018b0 <HAL_DFSDM_ChannelMspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001874:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800187c:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187e:	f001 fb91 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	6023      	str	r3, [r4, #0]
  }
}
 8001888:	b006      	add	sp, #24
 800188a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_DFSDM_ChannelMspInit+0x78>)
 800188e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001890:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	9b00      	ldr	r3, [sp, #0]
 80018a0:	e7d7      	b.n	8001852 <HAL_DFSDM_ChannelMspInit+0x16>
 80018a2:	bf00      	nop
 80018a4:	20000050 	.word	0x20000050
 80018a8:	20000054 	.word	0x20000054
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40023800 	.word	0x40023800

080018b8 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <MX_DMA_Init+0x70>)
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2105      	movs	r1, #5
 80018be:	200d      	movs	r0, #13
{
 80018c0:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018c2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 80018c4:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018c6:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 80018ca:	631c      	str	r4, [r3, #48]	; 0x30
 80018cc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80018ce:	f404 0480 	and.w	r4, r4, #4194304	; 0x400000
 80018d2:	9400      	str	r4, [sp, #0]
 80018d4:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80018d8:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 80018dc:	631c      	str	r4, [r3, #48]	; 0x30
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80018e8:	f000 ff54 	bl	8002794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80018ec:	200d      	movs	r0, #13
 80018ee:	f000 ff8b 	bl	8002808 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2105      	movs	r1, #5
 80018f6:	2038      	movs	r0, #56	; 0x38
 80018f8:	f000 ff4c 	bl	8002794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018fc:	2038      	movs	r0, #56	; 0x38
 80018fe:	f000 ff83 	bl	8002808 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2105      	movs	r1, #5
 8001906:	2039      	movs	r0, #57	; 0x39
 8001908:	f000 ff44 	bl	8002794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800190c:	2039      	movs	r0, #57	; 0x39
 800190e:	f000 ff7b 	bl	8002808 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2105      	movs	r1, #5
 8001916:	203a      	movs	r0, #58	; 0x3a
 8001918:	f000 ff3c 	bl	8002794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800191c:	203a      	movs	r0, #58	; 0x3a
 800191e:	f000 ff73 	bl	8002808 <HAL_NVIC_EnableIRQ>

}
 8001922:	b002      	add	sp, #8
 8001924:	bd10      	pop	{r4, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b0af      	sub	sp, #188	; 0xbc
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of buzzerMutex */
  osMutexDef(buzzerMutex);
 8001930:	2500      	movs	r5, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of enchallTask */
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8001932:	4c52      	ldr	r4, [pc, #328]	; (8001a7c <MX_FREERTOS_Init+0x150>)
  osMutexDef(buzzerMutex);
 8001934:	a82e      	add	r0, sp, #184	; 0xb8
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8001936:	ae0b      	add	r6, sp, #44	; 0x2c
 8001938:	4627      	mov	r7, r4
  osMutexDef(buzzerMutex);
 800193a:	f840 5db8 	str.w	r5, [r0, #-184]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 800193e:	f003 ffb3 	bl	80058a8 <osMutexCreate>
 8001942:	4b4f      	ldr	r3, [pc, #316]	; (8001a80 <MX_FREERTOS_Init+0x154>)
 8001944:	6018      	str	r0, [r3, #0]
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8001946:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001948:	683f      	ldr	r7, [r7, #0]
 800194a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 800194c:	4629      	mov	r1, r5
 800194e:	a80b      	add	r0, sp, #44	; 0x2c
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8001950:	6037      	str	r7, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8001952:	f003 ff89 	bl	8005868 <osThreadCreate>

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 8001956:	f104 0714 	add.w	r7, r4, #20
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 800195a:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <MX_FREERTOS_Init+0x158>)
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 800195c:	ae10      	add	r6, sp, #64	; 0x40
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 800195e:	6018      	str	r0, [r3, #0]
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 8001960:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001962:	683f      	ldr	r7, [r7, #0]
 8001964:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8001966:	4629      	mov	r1, r5
 8001968:	a810      	add	r0, sp, #64	; 0x40
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 800196a:	6037      	str	r7, [r6, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 800196c:	f003 ff7c 	bl	8005868 <osThreadCreate>

  /* definition and creation of ledblueTask */
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8001970:	f104 0728 	add.w	r7, r4, #40	; 0x28
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8001974:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <MX_FREERTOS_Init+0x15c>)
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8001976:	ae15      	add	r6, sp, #84	; 0x54
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8001978:	6018      	str	r0, [r3, #0]
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 800197a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800197c:	683f      	ldr	r7, [r7, #0]
 800197e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8001980:	4629      	mov	r1, r5
 8001982:	a815      	add	r0, sp, #84	; 0x54
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8001984:	6037      	str	r7, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8001986:	f003 ff6f 	bl	8005868 <osThreadCreate>

  /* definition and creation of ledgreenTask */
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 800198a:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <MX_FREERTOS_Init+0x160>)
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8001990:	ae1a      	add	r6, sp, #104	; 0x68
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8001992:	6018      	str	r0, [r3, #0]
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8001994:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001996:	683f      	ldr	r7, [r7, #0]
 8001998:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 800199a:	4629      	mov	r1, r5
 800199c:	a81a      	add	r0, sp, #104	; 0x68
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 800199e:	6037      	str	r7, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 80019a0:	f003 ff62 	bl	8005868 <osThreadCreate>

  /* definition and creation of iwdgTask */
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 80019a4:	f104 0750 	add.w	r7, r4, #80	; 0x50
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 80019a8:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <MX_FREERTOS_Init+0x164>)
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 80019aa:	ae1f      	add	r6, sp, #124	; 0x7c
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 80019ac:	6018      	str	r0, [r3, #0]
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 80019ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80019b0:	683f      	ldr	r7, [r7, #0]
 80019b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 80019b4:	4629      	mov	r1, r5
 80019b6:	a81f      	add	r0, sp, #124	; 0x7c
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 80019b8:	6037      	str	r7, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 80019ba:	f003 ff55 	bl	8005868 <osThreadCreate>

  /* definition and creation of buzzertoneTask */
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 80019be:	f104 0764 	add.w	r7, r4, #100	; 0x64
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <MX_FREERTOS_Init+0x168>)
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 80019c4:	ae24      	add	r6, sp, #144	; 0x90
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 80019c6:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 80019c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80019ca:	683f      	ldr	r7, [r7, #0]
 80019cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 80019ce:	4629      	mov	r1, r5
 80019d0:	a824      	add	r0, sp, #144	; 0x90
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 80019d2:	6037      	str	r7, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 80019d4:	f003 ff48 	bl	8005868 <osThreadCreate>

  /* definition and creation of buzzerrythmTask */
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 80019d8:	f104 0778 	add.w	r7, r4, #120	; 0x78
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 80019dc:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <MX_FREERTOS_Init+0x16c>)
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 80019de:	ae29      	add	r6, sp, #164	; 0xa4
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 80019e0:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 80019e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80019e4:	683f      	ldr	r7, [r7, #0]
 80019e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 80019e8:	4629      	mov	r1, r5
 80019ea:	a829      	add	r0, sp, #164	; 0xa4
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 80019ec:	6037      	str	r7, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 80019ee:	f003 ff3b 	bl	8005868 <osThreadCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of buzzerQueue */
  osMessageQDef(buzzerQueue, 1, uint16_t);
 80019f2:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 80019f6:	4929      	ldr	r1, [pc, #164]	; (8001a9c <MX_FREERTOS_Init+0x170>)
  osMessageQDef(buzzerQueue, 1, uint16_t);
 80019f8:	ab01      	add	r3, sp, #4
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 80019fa:	6008      	str	r0, [r1, #0]
  osMessageQDef(buzzerQueue, 1, uint16_t);
 80019fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a00:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8001a04:	4629      	mov	r1, r5
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 ff52 	bl	80058b0 <osMessageCreate>

  /* definition and creation of rythmQueue */
  osMessageQDef(rythmQueue, 32, uint16_t);
 8001a0c:	f104 0294 	add.w	r2, r4, #148	; 0x94
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8001a10:	4923      	ldr	r1, [pc, #140]	; (8001aa0 <MX_FREERTOS_Init+0x174>)
  osMessageQDef(rythmQueue, 32, uint16_t);
 8001a12:	ab03      	add	r3, sp, #12
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8001a14:	6008      	str	r0, [r1, #0]
  osMessageQDef(rythmQueue, 32, uint16_t);
 8001a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a1a:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8001a1e:	4629      	mov	r1, r5
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 ff45 	bl	80058b0 <osMessageCreate>

  /* definition and creation of enchallQueue */
  osMessageQDef(enchallQueue, 1, ENCHD);
 8001a26:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8001a2a:	491e      	ldr	r1, [pc, #120]	; (8001aa4 <MX_FREERTOS_Init+0x178>)
  osMessageQDef(enchallQueue, 1, ENCHD);
 8001a2c:	ab05      	add	r3, sp, #20
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8001a2e:	6008      	str	r0, [r1, #0]
  osMessageQDef(enchallQueue, 1, ENCHD);
 8001a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a34:	e883 0003 	stmia.w	r3, {r0, r1}
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 8001a38:	4629      	mov	r1, r5
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 ff38 	bl	80058b0 <osMessageCreate>

  /* definition and creation of shuntQueue */
  osMessageQDef(shuntQueue, 1, CURDATA);
 8001a40:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 8001a44:	4918      	ldr	r1, [pc, #96]	; (8001aa8 <MX_FREERTOS_Init+0x17c>)
  osMessageQDef(shuntQueue, 1, CURDATA);
 8001a46:	ab07      	add	r3, sp, #28
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);

  /* definition and creation of conresQueue */
  osMessageQDef(conresQueue, 1, CONRES);
 8001a48:	34ac      	adds	r4, #172	; 0xac
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 8001a4a:	6008      	str	r0, [r1, #0]
  osMessageQDef(shuntQueue, 1, CURDATA);
 8001a4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a50:	e883 0003 	stmia.w	r3, {r0, r1}
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 8001a54:	4629      	mov	r1, r5
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 ff2a 	bl	80058b0 <osMessageCreate>
 8001a5c:	4a13      	ldr	r2, [pc, #76]	; (8001aac <MX_FREERTOS_Init+0x180>)
  osMessageQDef(conresQueue, 1, CONRES);
 8001a5e:	ab09      	add	r3, sp, #36	; 0x24
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 8001a60:	6010      	str	r0, [r2, #0]
  osMessageQDef(conresQueue, 1, CONRES);
 8001a62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a66:	e883 0003 	stmia.w	r3, {r0, r1}
  conresQueueHandle = osMessageCreate(osMessageQ(conresQueue), NULL);
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 ff1f 	bl	80058b0 <osMessageCreate>
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_FREERTOS_Init+0x184>)
 8001a74:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  /* USER CODE END RTOS_QUEUES */
}
 8001a76:	b02f      	add	sp, #188	; 0xbc
 8001a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	08007ea8 	.word	0x08007ea8
 8001a80:	20003fc4 	.word	0x20003fc4
 8001a84:	20003fc0 	.word	0x20003fc0
 8001a88:	20003fcc 	.word	0x20003fcc
 8001a8c:	20003fd4 	.word	0x20003fd4
 8001a90:	20003fd0 	.word	0x20003fd0
 8001a94:	20003fdc 	.word	0x20003fdc
 8001a98:	20003fb4 	.word	0x20003fb4
 8001a9c:	20003fe0 	.word	0x20003fe0
 8001aa0:	20003fb8 	.word	0x20003fb8
 8001aa4:	20003fbc 	.word	0x20003fbc
 8001aa8:	20003fc8 	.word	0x20003fc8
 8001aac:	20003fd8 	.word	0x20003fd8
 8001ab0:	20003fb0 	.word	0x20003fb0

08001ab4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ab4:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	210c      	movs	r1, #12
{
 8001aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001abe:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 8001ac0:	b08c      	sub	sp, #48	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001ac2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8001ba4 <MX_GPIO_Init+0xf0>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	4615      	mov	r5, r2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac8:	f044 0410 	orr.w	r4, r4, #16
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001acc:	4f33      	ldr	r7, [pc, #204]	; (8001b9c <MX_GPIO_Init+0xe8>)
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001ace:	4640      	mov	r0, r8
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8001ad0:	4e33      	ldr	r6, [pc, #204]	; (8001ba0 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad2:	631c      	str	r4, [r3, #48]	; 0x30
 8001ad4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001ad6:	f004 0410 	and.w	r4, r4, #16
 8001ada:	9401      	str	r4, [sp, #4]
 8001adc:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001ae0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001ae4:	631c      	str	r4, [r3, #48]	; 0x30
 8001ae6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001ae8:	f004 0480 	and.w	r4, r4, #128	; 0x80
 8001aec:	9402      	str	r4, [sp, #8]
 8001aee:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001af2:	f044 0404 	orr.w	r4, r4, #4
 8001af6:	631c      	str	r4, [r3, #48]	; 0x30
 8001af8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001afa:	f004 0404 	and.w	r4, r4, #4
 8001afe:	9403      	str	r4, [sp, #12]
 8001b00:	9c03      	ldr	r4, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001b04:	f044 0401 	orr.w	r4, r4, #1
 8001b08:	631c      	str	r4, [r3, #48]	; 0x30
 8001b0a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001b0c:	f004 0401 	and.w	r4, r4, #1
 8001b10:	9404      	str	r4, [sp, #16]
 8001b12:	9c04      	ldr	r4, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001b16:	f044 0402 	orr.w	r4, r4, #2
 8001b1a:	631c      	str	r4, [r3, #48]	; 0x30
 8001b1c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001b1e:	f004 0402 	and.w	r4, r4, #2
 8001b22:	9405      	str	r4, [sp, #20]
 8001b24:	9c05      	ldr	r4, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001b28:	f044 0408 	orr.w	r4, r4, #8
 8001b2c:	631c      	str	r4, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2401      	movs	r4, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	9306      	str	r3, [sp, #24]
 8001b38:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001b3a:	f001 fb5d 	bl	80031f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b3e:	4638      	mov	r0, r7
 8001b40:	462a      	mov	r2, r5
 8001b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b46:	f001 fb57 	bl	80031f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	462a      	mov	r2, r5
 8001b4e:	2140      	movs	r1, #64	; 0x40
 8001b50:	f001 fb52 	bl	80031f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8001b54:	220c      	movs	r2, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b56:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b58:	4640      	mov	r0, r8
 8001b5a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8001b5c:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b5e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b64:	f001 fa1e 	bl	8002fa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b6c:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	4638      	mov	r0, r7
 8001b70:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b72:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b74:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7a:	f001 fa13 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8001b7e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8001b80:	a907      	add	r1, sp, #28
 8001b82:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b86:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b88:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8001b8a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f001 fa0a 	bl	8002fa4 <HAL_GPIO_Init>

}
 8001b90:	b00c      	add	sp, #48	; 0x30
 8001b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001ba8:	b538      	push	{r3, r4, r5, lr}

  hi2c4.Instance = I2C4;
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_I2C4_Init+0x5c>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
 8001bac:	2200      	movs	r2, #0
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bae:	2101      	movs	r1, #1
  hi2c4.Instance = I2C4;
 8001bb0:	4d15      	ldr	r5, [pc, #84]	; (8001c08 <MX_I2C4_Init+0x60>)
  hi2c4.Init.Timing = 0x20404768;
 8001bb2:	4c16      	ldr	r4, [pc, #88]	; (8001c0c <MX_I2C4_Init+0x64>)
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001bb4:	4618      	mov	r0, r3
  hi2c4.Instance = I2C4;
 8001bb6:	601d      	str	r5, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001bb8:	605c      	str	r4, [r3, #4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bba:	60d9      	str	r1, [r3, #12]
  hi2c4.Init.OwnAddress1 = 0;
 8001bbc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bbe:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001bc0:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bc2:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc4:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001bc8:	f001 fb1e 	bl	8003208 <HAL_I2C_Init>
 8001bcc:	b9a8      	cbnz	r0, 8001bfa <MX_I2C4_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <MX_I2C4_Init+0x5c>)
 8001bd2:	f001 fb6f 	bl	80032b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001bd6:	b958      	cbnz	r0, 8001bf0 <MX_I2C4_Init+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	480a      	ldr	r0, [pc, #40]	; (8001c04 <MX_I2C4_Init+0x5c>)
 8001bdc:	f001 fb92 	bl	8003304 <HAL_I2CEx_ConfigDigitalFilter>
 8001be0:	b900      	cbnz	r0, 8001be4 <MX_I2C4_Init+0x3c>
 8001be2:	bd38      	pop	{r3, r4, r5, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001be4:	215a      	movs	r1, #90	; 0x5a
 8001be6:	480a      	ldr	r0, [pc, #40]	; (8001c10 <MX_I2C4_Init+0x68>)
  }

}
 8001be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001bec:	f000 b918 	b.w	8001e20 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001bf0:	2153      	movs	r1, #83	; 0x53
 8001bf2:	4807      	ldr	r0, [pc, #28]	; (8001c10 <MX_I2C4_Init+0x68>)
 8001bf4:	f000 f914 	bl	8001e20 <_Error_Handler>
 8001bf8:	e7ee      	b.n	8001bd8 <MX_I2C4_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8001bfa:	214c      	movs	r1, #76	; 0x4c
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_I2C4_Init+0x68>)
 8001bfe:	f000 f90f 	bl	8001e20 <_Error_Handler>
 8001c02:	e7e4      	b.n	8001bce <MX_I2C4_Init+0x26>
 8001c04:	20003fe4 	.word	0x20003fe4
 8001c08:	40006000 	.word	0x40006000
 8001c0c:	20404768 	.word	0x20404768
 8001c10:	08007ff0 	.word	0x08007ff0

08001c14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C4)
 8001c14:	6802      	ldr	r2, [r0, #0]
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_I2C_MspInit+0x48>)
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d000      	beq.n	8001c1e <HAL_I2C_MspInit+0xa>
 8001c1c:	4770      	bx	lr
{
 8001c1e:	b570      	push	{r4, r5, r6, lr}
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c20:	2304      	movs	r3, #4
{
 8001c22:	b086      	sub	sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c26:	f44f 5640 	mov.w	r6, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2a:	2512      	movs	r5, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2c:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2e:	eb0d 0103 	add.w	r1, sp, r3
 8001c32:	480b      	ldr	r0, [pc, #44]	; (8001c60 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c38:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3a:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3c:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3e:	f001 f9b1 	bl	8002fa4 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_I2C_MspInit+0x50>)
 8001c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c46:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c56:	b006      	add	sp, #24
 8001c58:	bd70      	pop	{r4, r5, r6, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40006000 	.word	0x40006000
 8001c60:	40020c00 	.word	0x40020c00
 8001c64:	40023800 	.word	0x40023800

08001c68 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c68:	4a34      	ldr	r2, [pc, #208]	; (8001d3c <SystemClock_Config+0xd4>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c6a:	21d8      	movs	r1, #216	; 0xd8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <SystemClock_Config+0xd8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001c70:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
{
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	6410      	str	r0, [r2, #64]	; 0x40
{
 8001c78:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c7c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c7e:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c80:	2601      	movs	r6, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c86:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c8a:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8e:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c90:	9200      	str	r2, [sp, #0]
 8001c92:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c9e:	9607      	str	r6, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ca4:	f8cd e020 	str.w	lr, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca8:	950d      	str	r5, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cae:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cb0:	970e      	str	r7, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cb2:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cb4:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001cb6:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb8:	f001 fdba 	bl	8003830 <HAL_RCC_OscConfig>
 8001cbc:	b100      	cbz	r0, 8001cc0 <SystemClock_Config+0x58>
 8001cbe:	e7fe      	b.n	8001cbe <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cc0:	f001 fd7a 	bl	80037b8 <HAL_PWREx_EnableOverDrive>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b100      	cbz	r0, 8001cca <SystemClock_Config+0x62>
 8001cc8:	e7fe      	b.n	8001cc8 <SystemClock_Config+0x60>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cca:	f44f 5ea0 	mov.w	lr, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd2:	270f      	movs	r7, #15

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001cd4:	2107      	movs	r1, #7
 8001cd6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cda:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cdc:	9702      	str	r7, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cde:	f8cd e014 	str.w	lr, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ce2:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001ce4:	f001 ff7c 	bl	8003be0 <HAL_RCC_ClockConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	b100      	cbz	r0, 8001cee <SystemClock_Config+0x86>
 8001cec:	e7fe      	b.n	8001cec <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8001cee:	f8df e058 	ldr.w	lr, [pc, #88]	; 8001d48 <SystemClock_Config+0xe0>
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001cf2:	2510      	movs	r5, #16
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001cf4:	2140      	movs	r1, #64	; 0x40
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8001cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfa:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001cfc:	9527      	str	r5, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001cfe:	9625      	str	r6, [sp, #148]	; 0x94
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001d00:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001d02:	9336      	str	r3, [sp, #216]	; 0xd8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8001d04:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001d08:	9128      	str	r1, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8001d0a:	922c      	str	r2, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d0c:	f002 f88e 	bl	8003e2c <HAL_RCCEx_PeriphCLKConfig>
 8001d10:	4605      	mov	r5, r0
 8001d12:	b100      	cbz	r0, 8001d16 <SystemClock_Config+0xae>
 8001d14:	e7fe      	b.n	8001d14 <SystemClock_Config+0xac>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001d16:	f002 f841 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <SystemClock_Config+0xdc>)
 8001d1c:	fba3 3000 	umull	r3, r0, r3, r0
 8001d20:	0980      	lsrs	r0, r0, #6
 8001d22:	f000 fd7d 	bl	8002820 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d26:	4620      	mov	r0, r4
 8001d28:	f000 fd92 	bl	8002850 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001d2c:	462a      	mov	r2, r5
 8001d2e:	4639      	mov	r1, r7
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f000 fd2e 	bl	8002794 <HAL_NVIC_SetPriority>
}
 8001d38:	b039      	add	sp, #228	; 0xe4
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40007000 	.word	0x40007000
 8001d44:	10624dd3 	.word	0x10624dd3
 8001d48:	08022340 	.word	0x08022340

08001d4c <main>:
{
 8001d4c:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d52:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001d56:	482c      	ldr	r0, [pc, #176]	; (8001e08 <main+0xbc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d5e:	6943      	ldr	r3, [r0, #20]
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d6a:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8001d6e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d72:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001d76:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8001d7a:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
 8001d7e:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d82:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001d86:	07b7      	lsls	r7, r6, #30
 8001d88:	015d      	lsls	r5, r3, #5
 8001d8a:	ea05 040e 	and.w	r4, r5, lr
 8001d8e:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d90:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d92:	ea44 0301 	orr.w	r3, r4, r1
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8001d96:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d98:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8001d9c:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways--);
 8001da0:	1c53      	adds	r3, r2, #1
 8001da2:	d1f6      	bne.n	8001d92 <main+0x46>
 8001da4:	3d20      	subs	r5, #32
    } while(sets--);
 8001da6:	f115 0f20 	cmn.w	r5, #32
 8001daa:	d1ee      	bne.n	8001d8a <main+0x3e>
 8001dac:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001db0:	6943      	ldr	r3, [r0, #20]
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db6:	6143      	str	r3, [r0, #20]
 8001db8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dbc:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001dc0:	f000 fca6 	bl	8002710 <HAL_Init>
  SystemClock_Config();
 8001dc4:	f7ff ff50 	bl	8001c68 <SystemClock_Config>
  MX_GPIO_Init();
 8001dc8:	f7ff fe74 	bl	8001ab4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dcc:	f7ff fd74 	bl	80018b8 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8001dd0:	f7ff fc18 	bl	8001604 <MX_DFSDM1_Init>
  MX_I2C4_Init();
 8001dd4:	f7ff fee8 	bl	8001ba8 <MX_I2C4_Init>
  MX_SPI1_Init();
 8001dd8:	f000 f824 	bl	8001e24 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001ddc:	f000 f91a 	bl	8002014 <MX_TIM1_Init>
  MX_UART4_Init();
 8001de0:	f000 fa92 	bl	8002308 <MX_UART4_Init>
  MX_UART8_Init();
 8001de4:	f000 faba 	bl	800235c <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001de8:	f000 fade 	bl	80023a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001dec:	f000 fb02 	bl	80023f4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8001df0:	f000 fbfa 	bl	80025e8 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8001df4:	f000 f9d6 	bl	80021a4 <MX_TIM2_Init>
  SystemInitialization();
 8001df8:	f7ff f8f2 	bl	8000fe0 <SystemInitialization>
  MX_FREERTOS_Init();
 8001dfc:	f7ff fd96 	bl	800192c <MX_FREERTOS_Init>
  osKernelStart();
 8001e00:	f003 fd2c 	bl	800585c <osKernelStart>
 8001e04:	e7fe      	b.n	8001e04 <main+0xb8>
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001e0c:	6802      	ldr	r2, [r0, #0]
 8001e0e:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d000      	beq.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001e14:	4770      	bx	lr
    HAL_IncTick();
 8001e16:	f000 bc8d 	b.w	8002734 <HAL_IncTick>
 8001e1a:	bf00      	nop
 8001e1c:	40000800 	.word	0x40000800

08001e20 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001e20:	e7fe      	b.n	8001e20 <_Error_Handler>
 8001e22:	bf00      	nop

08001e24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hspi1.Instance = SPI1;
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e28:	f44f 7082 	mov.w	r0, #260	; 0x104
  hspi1.Instance = SPI1;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_SPI1_Init+0x50>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e2e:	f44f 67e0 	mov.w	r7, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e32:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e36:	2530      	movs	r5, #48	; 0x30
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001e38:	2407      	movs	r4, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e3a:	2108      	movs	r1, #8
  hspi1.Instance = SPI1;
 8001e3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3e:	2200      	movs	r2, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e40:	6058      	str	r0, [r3, #4]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e42:	4618      	mov	r0, r3
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e44:	60df      	str	r7, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e46:	619e      	str	r6, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e48:	61dd      	str	r5, [r3, #28]
  hspi1.Init.CRCPolynomial = 7;
 8001e4a:	62dc      	str	r4, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e4c:	6359      	str	r1, [r3, #52]	; 0x34
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e52:	615a      	str	r2, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e5c:	f002 fa86 	bl	800436c <HAL_SPI_Init>
 8001e60:	b900      	cbnz	r0, 8001e64 <MX_SPI1_Init+0x40>
 8001e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001e64:	2151      	movs	r1, #81	; 0x51
 8001e66:	4804      	ldr	r0, [pc, #16]	; (8001e78 <MX_SPI1_Init+0x54>)
  }

}
 8001e68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001e6c:	f7ff bfd8 	b.w	8001e20 <_Error_Handler>
 8001e70:	40013000 	.word	0x40013000
 8001e74:	20004030 	.word	0x20004030
 8001e78:	08008004 	.word	0x08008004

08001e7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8001e7c:	6802      	ldr	r2, [r0, #0]
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_SPI_MspInit+0x58>)
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d000      	beq.n	8001e86 <HAL_SPI_MspInit+0xa>
 8001e84:	4770      	bx	lr
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e86:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    /**SPI1 GPIO Configuration    
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e8a:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 8001e92:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
{
 8001e96:	b087      	sub	sp, #28
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ea4:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ea8:	9001      	str	r0, [sp, #4]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eaa:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eac:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb8:	f001 f874 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001ebc:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebe:	a901      	add	r1, sp, #4
 8001ec0:	4806      	ldr	r0, [pc, #24]	; (8001edc <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ec8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001eca:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f001 f86a 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ed0:	b007      	add	sp, #28
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	40013000 	.word	0x40013000
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40020400 	.word	0x40020400

08001ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	f000 fc42 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f06f 000b 	mvn.w	r0, #11
 8001eee:	4611      	mov	r1, r2
 8001ef0:	f000 fc50 	bl	8002794 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f06f 000a 	mvn.w	r0, #10
 8001efa:	4611      	mov	r1, r2
 8001efc:	f000 fc4a 	bl	8002794 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f06f 0009 	mvn.w	r0, #9
 8001f06:	4611      	mov	r1, r2
 8001f08:	f000 fc44 	bl	8002794 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f06f 0004 	mvn.w	r0, #4
 8001f12:	4611      	mov	r1, r2
 8001f14:	f000 fc3e 	bl	8002794 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f06f 0003 	mvn.w	r0, #3
 8001f1e:	4611      	mov	r1, r2
 8001f20:	f000 fc38 	bl	8002794 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	210f      	movs	r1, #15
 8001f28:	f06f 0001 	mvn.w	r0, #1
 8001f2c:	f000 fc32 	bl	8002794 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	210f      	movs	r1, #15
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001f3c:	f000 bc2a 	b.w	8002794 <HAL_NVIC_SetPriority>

08001f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001f42:	4601      	mov	r1, r0
{
 8001f44:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001f46:	2200      	movs	r2, #0
 8001f48:	201e      	movs	r0, #30
 8001f4a:	f000 fc23 	bl	8002794 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001f4e:	201e      	movs	r0, #30
 8001f50:	f000 fc5a 	bl	8002808 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f56:	a901      	add	r1, sp, #4
 8001f58:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f5c:	4e14      	ldr	r6, [pc, #80]	; (8001fb0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001f5e:	f042 0204 	orr.w	r2, r2, #4
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001f62:	4c14      	ldr	r4, [pc, #80]	; (8001fb4 <HAL_InitTick+0x74>)
 8001f64:	4d14      	ldr	r5, [pc, #80]	; (8001fb8 <HAL_InitTick+0x78>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f72:	f001 ff39 	bl	8003de8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f76:	f001 ff17 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8001f7a:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f7c:	0043      	lsls	r3, r0, #1
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001f7e:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim4.Instance = TIM4;
 8001f82:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f84:	fba6 0303 	umull	r0, r3, r6, r3
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001f88:	4620      	mov	r0, r4
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001f8a:	60e1      	str	r1, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f8c:	0c9b      	lsrs	r3, r3, #18
  htim4.Init.ClockDivision = 0;
 8001f8e:	6122      	str	r2, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f90:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f92:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8001f94:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001f96:	f002 fa4b 	bl	8004430 <HAL_TIM_Base_Init>
 8001f9a:	b110      	cbz	r0, 8001fa2 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001f9c:	2001      	movs	r0, #1
}
 8001f9e:	b008      	add	sp, #32
 8001fa0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim4);
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f002 faea 	bl	800457c <HAL_TIM_Base_Start_IT>
}
 8001fa8:	b008      	add	sp, #32
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	431bde83 	.word	0x431bde83
 8001fb4:	20004094 	.word	0x20004094
 8001fb8:	40000800 	.word	0x40000800

08001fbc <NMI_Handler>:
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop

08001fc0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001fc0:	e7fe      	b.n	8001fc0 <HardFault_Handler>
 8001fc2:	bf00      	nop

08001fc4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler>
 8001fc6:	bf00      	nop

08001fc8 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001fc8:	e7fe      	b.n	8001fc8 <BusFault_Handler>
 8001fca:	bf00      	nop

08001fcc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001fcc:	e7fe      	b.n	8001fcc <UsageFault_Handler>
 8001fce:	bf00      	nop

08001fd0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop

08001fd4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001fd4:	f003 bc70 	b.w	80058b8 <osSystickHandler>

08001fd8 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001fd8:	4801      	ldr	r0, [pc, #4]	; (8001fe0 <DMA1_Stream2_IRQHandler+0x8>)
 8001fda:	f000 bf0f 	b.w	8002dfc <HAL_DMA_IRQHandler>
 8001fde:	bf00      	nop
 8001fe0:	20004154 	.word	0x20004154

08001fe4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fe4:	4801      	ldr	r0, [pc, #4]	; (8001fec <TIM4_IRQHandler+0x8>)
 8001fe6:	f002 bc71 	b.w	80048cc <HAL_TIM_IRQHandler>
 8001fea:	bf00      	nop
 8001fec:	20004094 	.word	0x20004094

08001ff0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001ff0:	4801      	ldr	r0, [pc, #4]	; (8001ff8 <DMA2_Stream0_IRQHandler+0x8>)
 8001ff2:	f000 bf03 	b.w	8002dfc <HAL_DMA_IRQHandler>
 8001ff6:	bf00      	nop
 8001ff8:	20003ec4 	.word	0x20003ec4

08001ffc <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001ffc:	4801      	ldr	r0, [pc, #4]	; (8002004 <DMA2_Stream1_IRQHandler+0x8>)
 8001ffe:	f000 befd 	b.w	8002dfc <HAL_DMA_IRQHandler>
 8002002:	bf00      	nop
 8002004:	20003e64 	.word	0x20003e64

08002008 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002008:	4801      	ldr	r0, [pc, #4]	; (8002010 <DMA2_Stream2_IRQHandler+0x8>)
 800200a:	f000 bef7 	b.w	8002dfc <HAL_DMA_IRQHandler>
 800200e:	bf00      	nop
 8002010:	20004224 	.word	0x20004224

08002014 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002014:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8002016:	4c5e      	ldr	r4, [pc, #376]	; (8002190 <MX_TIM1_Init+0x17c>)
  htim1.Init.Prescaler = 0;
 8002018:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800201a:	2120      	movs	r1, #32
  htim1.Instance = TIM1;
 800201c:	4d5d      	ldr	r5, [pc, #372]	; (8002194 <MX_TIM1_Init+0x180>)
  htim1.Init.Period = 2160;
 800201e:	f44f 6207 	mov.w	r2, #2160	; 0x870
{
 8002022:	b09f      	sub	sp, #124	; 0x7c
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002024:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 8002026:	6025      	str	r5, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002028:	60a1      	str	r1, [r4, #8]
  htim1.Init.Period = 2160;
 800202a:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = 0;
 800202c:	6063      	str	r3, [r4, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202e:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8002030:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002032:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002034:	f002 f9fc 	bl	8004430 <HAL_TIM_Base_Init>
 8002038:	2800      	cmp	r0, #0
 800203a:	d17c      	bne.n	8002136 <MX_TIM1_Init+0x122>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002040:	a91e      	add	r1, sp, #120	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002042:	4853      	ldr	r0, [pc, #332]	; (8002190 <MX_TIM1_Init+0x17c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002044:	f841 3d6c 	str.w	r3, [r1, #-108]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002048:	f002 fb70 	bl	800472c <HAL_TIM_ConfigClockSource>
 800204c:	2800      	cmp	r0, #0
 800204e:	d16d      	bne.n	800212c <MX_TIM1_Init+0x118>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002050:	484f      	ldr	r0, [pc, #316]	; (8002190 <MX_TIM1_Init+0x17c>)
 8002052:	f002 faa1 	bl	8004598 <HAL_TIM_PWM_Init>
 8002056:	2800      	cmp	r0, #0
 8002058:	d163      	bne.n	8002122 <MX_TIM1_Init+0x10e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800205c:	4669      	mov	r1, sp
 800205e:	484c      	ldr	r0, [pc, #304]	; (8002190 <MX_TIM1_Init+0x17c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002060:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002062:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002064:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002066:	f002 fdc7 	bl	8004bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800206a:	2800      	cmp	r0, #0
 800206c:	d154      	bne.n	8002118 <MX_TIM1_Init+0x104>
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 580;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206e:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002070:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 580;
 8002072:	f44f 7511 	mov.w	r5, #580	; 0x244
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002076:	a90c      	add	r1, sp, #48	; 0x30
 8002078:	461a      	mov	r2, r3
 800207a:	4845      	ldr	r0, [pc, #276]	; (8002190 <MX_TIM1_Init+0x17c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800207c:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800207e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002080:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002082:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002084:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002086:	960c      	str	r6, [sp, #48]	; 0x30
  sConfigOC.Pulse = 580;
 8002088:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800208a:	f002 fe31 	bl	8004cf0 <HAL_TIM_PWM_ConfigChannel>
 800208e:	2800      	cmp	r0, #0
 8002090:	d13d      	bne.n	800210e <MX_TIM1_Init+0xfa>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.Pulse = 0;
 8002092:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002094:	2204      	movs	r2, #4
 8002096:	a90c      	add	r1, sp, #48	; 0x30
 8002098:	483d      	ldr	r0, [pc, #244]	; (8002190 <MX_TIM1_Init+0x17c>)
  sConfigOC.Pulse = 0;
 800209a:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800209c:	f002 fe28 	bl	8004cf0 <HAL_TIM_PWM_ConfigChannel>
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d12f      	bne.n	8002104 <MX_TIM1_Init+0xf0>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020a4:	a90c      	add	r1, sp, #48	; 0x30
 80020a6:	2208      	movs	r2, #8
 80020a8:	4839      	ldr	r0, [pc, #228]	; (8002190 <MX_TIM1_Init+0x17c>)
 80020aa:	f002 fe21 	bl	8004cf0 <HAL_TIM_PWM_ConfigChannel>
 80020ae:	bb20      	cbnz	r0, 80020fa <MX_TIM1_Init+0xe6>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020b0:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 45;
 80020b2:	272d      	movs	r7, #45	; 0x2d
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020b4:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020b8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80020bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020c0:	a913      	add	r1, sp, #76	; 0x4c
 80020c2:	4833      	ldr	r0, [pc, #204]	; (8002190 <MX_TIM1_Init+0x17c>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020c4:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020c6:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020c8:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ca:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020cc:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020ce:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020d0:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.DeadTime = 45;
 80020d2:	9716      	str	r7, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020d4:	9618      	str	r6, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020d6:	951b      	str	r5, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80020d8:	921d      	str	r2, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020da:	f002 fdb9 	bl	8004c50 <HAL_TIMEx_ConfigBreakDeadTime>
 80020de:	b118      	cbz	r0, 80020e8 <MX_TIM1_Init+0xd4>
  {
    _Error_Handler(__FILE__, __LINE__);
 80020e0:	2187      	movs	r1, #135	; 0x87
 80020e2:	482d      	ldr	r0, [pc, #180]	; (8002198 <MX_TIM1_Init+0x184>)
 80020e4:	f7ff fe9c 	bl	8001e20 <_Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <MX_TIM1_Init+0x180>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d036      	beq.n	800215e <MX_TIM1_Init+0x14a>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f4:	d024      	beq.n	8002140 <MX_TIM1_Init+0x12c>
}
 80020f6:	b01f      	add	sp, #124	; 0x7c
 80020f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _Error_Handler(__FILE__, __LINE__);
 80020fa:	2177      	movs	r1, #119	; 0x77
 80020fc:	4826      	ldr	r0, [pc, #152]	; (8002198 <MX_TIM1_Init+0x184>)
 80020fe:	f7ff fe8f 	bl	8001e20 <_Error_Handler>
 8002102:	e7d5      	b.n	80020b0 <MX_TIM1_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8002104:	2172      	movs	r1, #114	; 0x72
 8002106:	4824      	ldr	r0, [pc, #144]	; (8002198 <MX_TIM1_Init+0x184>)
 8002108:	f7ff fe8a 	bl	8001e20 <_Error_Handler>
 800210c:	e7ca      	b.n	80020a4 <MX_TIM1_Init+0x90>
    _Error_Handler(__FILE__, __LINE__);
 800210e:	216c      	movs	r1, #108	; 0x6c
 8002110:	4821      	ldr	r0, [pc, #132]	; (8002198 <MX_TIM1_Init+0x184>)
 8002112:	f7ff fe85 	bl	8001e20 <_Error_Handler>
 8002116:	e7bc      	b.n	8002092 <MX_TIM1_Init+0x7e>
    _Error_Handler(__FILE__, __LINE__);
 8002118:	2160      	movs	r1, #96	; 0x60
 800211a:	481f      	ldr	r0, [pc, #124]	; (8002198 <MX_TIM1_Init+0x184>)
 800211c:	f7ff fe80 	bl	8001e20 <_Error_Handler>
 8002120:	e7a5      	b.n	800206e <MX_TIM1_Init+0x5a>
    _Error_Handler(__FILE__, __LINE__);
 8002122:	2158      	movs	r1, #88	; 0x58
 8002124:	481c      	ldr	r0, [pc, #112]	; (8002198 <MX_TIM1_Init+0x184>)
 8002126:	f7ff fe7b 	bl	8001e20 <_Error_Handler>
 800212a:	e796      	b.n	800205a <MX_TIM1_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 800212c:	2153      	movs	r1, #83	; 0x53
 800212e:	481a      	ldr	r0, [pc, #104]	; (8002198 <MX_TIM1_Init+0x184>)
 8002130:	f7ff fe76 	bl	8001e20 <_Error_Handler>
 8002134:	e78c      	b.n	8002050 <MX_TIM1_Init+0x3c>
    _Error_Handler(__FILE__, __LINE__);
 8002136:	214d      	movs	r1, #77	; 0x4d
 8002138:	4817      	ldr	r0, [pc, #92]	; (8002198 <MX_TIM1_Init+0x184>)
 800213a:	f7ff fe71 	bl	8001e20 <_Error_Handler>
 800213e:	e77d      	b.n	800203c <MX_TIM1_Init+0x28>
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002140:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002142:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	a907      	add	r1, sp, #28
 800214c:	4813      	ldr	r0, [pc, #76]	; (800219c <MX_TIM1_Init+0x188>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800214e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002154:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002156:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f000 ff24 	bl	8002fa4 <HAL_GPIO_Init>
}
 800215c:	e7cb      	b.n	80020f6 <MX_TIM1_Init+0xe2>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002160:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002164:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	a907      	add	r1, sp, #28
 8002168:	480c      	ldr	r0, [pc, #48]	; (800219c <MX_TIM1_Init+0x188>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800216a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002172:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f000 ff16 	bl	8002fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8002178:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800217c:	a907      	add	r1, sp, #28
 800217e:	4808      	ldr	r0, [pc, #32]	; (80021a0 <MX_TIM1_Init+0x18c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002186:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8002188:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800218a:	f000 ff0b 	bl	8002fa4 <HAL_GPIO_Init>
 800218e:	e7b2      	b.n	80020f6 <MX_TIM1_Init+0xe2>
 8002190:	200040d4 	.word	0x200040d4
 8002194:	40010000 	.word	0x40010000
 8002198:	08008018 	.word	0x08008018
 800219c:	40020000 	.word	0x40020000
 80021a0:	40021000 	.word	0x40021000

080021a4 <MX_TIM2_Init>:
{
 80021a4:	b570      	push	{r4, r5, r6, lr}
  htim2.Instance = TIM2;
 80021a6:	4c3f      	ldr	r4, [pc, #252]	; (80022a4 <MX_TIM2_Init+0x100>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a8:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 80021aa:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 107;
 80021ae:	256b      	movs	r5, #107	; 0x6b
  htim2.Init.Period = 50000;
 80021b0:	f24c 3150 	movw	r1, #50000	; 0xc350
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021b4:	2280      	movs	r2, #128	; 0x80
{
 80021b6:	b094      	sub	sp, #80	; 0x50
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021b8:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 80021ba:	6026      	str	r6, [r4, #0]
  htim2.Init.Prescaler = 107;
 80021bc:	6065      	str	r5, [r4, #4]
  htim2.Init.Period = 50000;
 80021be:	60e1      	str	r1, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021c0:	61a2      	str	r2, [r4, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c2:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	6123      	str	r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021c6:	f002 f933 	bl	8004430 <HAL_TIM_Base_Init>
 80021ca:	2800      	cmp	r0, #0
 80021cc:	d13d      	bne.n	800224a <MX_TIM2_Init+0xa6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d2:	a914      	add	r1, sp, #80	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021d4:	4833      	ldr	r0, [pc, #204]	; (80022a4 <MX_TIM2_Init+0x100>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d6:	f841 3d40 	str.w	r3, [r1, #-64]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021da:	f002 faa7 	bl	800472c <HAL_TIM_ConfigClockSource>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d12e      	bne.n	8002240 <MX_TIM2_Init+0x9c>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021e2:	4830      	ldr	r0, [pc, #192]	; (80022a4 <MX_TIM2_Init+0x100>)
 80021e4:	f002 f9d8 	bl	8004598 <HAL_TIM_PWM_Init>
 80021e8:	bb28      	cbnz	r0, 8002236 <MX_TIM2_Init+0x92>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ea:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021ec:	a901      	add	r1, sp, #4
 80021ee:	482d      	ldr	r0, [pc, #180]	; (80022a4 <MX_TIM2_Init+0x100>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f4:	f002 fd00 	bl	8004bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80021f8:	b9c0      	cbnz	r0, 800222c <MX_TIM2_Init+0x88>
  sConfigOC.Pulse = 0;
 80021fa:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fc:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021fe:	a90d      	add	r1, sp, #52	; 0x34
 8002200:	4828      	ldr	r0, [pc, #160]	; (80022a4 <MX_TIM2_Init+0x100>)
 8002202:	461a      	mov	r2, r3
  sConfigOC.Pulse = 0;
 8002204:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002206:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002208:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220a:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220c:	f002 fd70 	bl	8004cf0 <HAL_TIM_PWM_ConfigChannel>
 8002210:	b118      	cbz	r0, 800221a <MX_TIM2_Init+0x76>
    _Error_Handler(__FILE__, __LINE__);
 8002212:	21b7      	movs	r1, #183	; 0xb7
 8002214:	4824      	ldr	r0, [pc, #144]	; (80022a8 <MX_TIM2_Init+0x104>)
 8002216:	f7ff fe03 	bl	8001e20 <_Error_Handler>
  if(timHandle->Instance==TIM1)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <MX_TIM2_Init+0x108>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d027      	beq.n	8002272 <MX_TIM2_Init+0xce>
  else if(timHandle->Instance==TIM2)
 8002222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002226:	d015      	beq.n	8002254 <MX_TIM2_Init+0xb0>
}
 8002228:	b014      	add	sp, #80	; 0x50
 800222a:	bd70      	pop	{r4, r5, r6, pc}
    _Error_Handler(__FILE__, __LINE__);
 800222c:	21ae      	movs	r1, #174	; 0xae
 800222e:	481e      	ldr	r0, [pc, #120]	; (80022a8 <MX_TIM2_Init+0x104>)
 8002230:	f7ff fdf6 	bl	8001e20 <_Error_Handler>
 8002234:	e7e1      	b.n	80021fa <MX_TIM2_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 8002236:	21a7      	movs	r1, #167	; 0xa7
 8002238:	481b      	ldr	r0, [pc, #108]	; (80022a8 <MX_TIM2_Init+0x104>)
 800223a:	f7ff fdf1 	bl	8001e20 <_Error_Handler>
 800223e:	e7d4      	b.n	80021ea <MX_TIM2_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 8002240:	21a2      	movs	r1, #162	; 0xa2
 8002242:	4819      	ldr	r0, [pc, #100]	; (80022a8 <MX_TIM2_Init+0x104>)
 8002244:	f7ff fdec 	bl	8001e20 <_Error_Handler>
 8002248:	e7cb      	b.n	80021e2 <MX_TIM2_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 800224a:	219c      	movs	r1, #156	; 0x9c
 800224c:	4816      	ldr	r0, [pc, #88]	; (80022a8 <MX_TIM2_Init+0x104>)
 800224e:	f7ff fde7 	bl	8001e20 <_Error_Handler>
 8002252:	e7bc      	b.n	80021ce <MX_TIM2_Init+0x2a>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002254:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002256:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	a908      	add	r1, sp, #32
 8002260:	4813      	ldr	r0, [pc, #76]	; (80022b0 <MX_TIM2_Init+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002262:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002268:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800226a:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f000 fe9a 	bl	8002fa4 <HAL_GPIO_Init>
}
 8002270:	e7da      	b.n	8002228 <MX_TIM2_Init+0x84>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002274:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002278:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227a:	a908      	add	r1, sp, #32
 800227c:	480c      	ldr	r0, [pc, #48]	; (80022b0 <MX_TIM2_Init+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800227e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002286:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f000 fe8c 	bl	8002fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 800228c:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002290:	a908      	add	r1, sp, #32
 8002292:	4808      	ldr	r0, [pc, #32]	; (80022b4 <MX_TIM2_Init+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800229a:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 800229c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800229e:	f000 fe81 	bl	8002fa4 <HAL_GPIO_Init>
 80022a2:	e7c1      	b.n	8002228 <MX_TIM2_Init+0x84>
 80022a4:	20004114 	.word	0x20004114
 80022a8:	08008018 	.word	0x08008018
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40021000 	.word	0x40021000

080022b8 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 80022b8:	6803      	ldr	r3, [r0, #0]
{
 80022ba:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 80022bc:	4a10      	ldr	r2, [pc, #64]	; (8002300 <HAL_TIM_Base_MspInit+0x48>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d011      	beq.n	80022e6 <HAL_TIM_Base_MspInit+0x2e>
  else if(tim_baseHandle->Instance==TIM2)
 80022c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c6:	d001      	beq.n	80022cc <HAL_TIM_Base_MspInit+0x14>
}
 80022c8:	b002      	add	sp, #8
 80022ca:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022cc:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80022d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	9b01      	ldr	r3, [sp, #4]
}
 80022e2:	b002      	add	sp, #8
 80022e4:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	9b00      	ldr	r3, [sp, #0]
}
 80022fa:	b002      	add	sp, #8
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40010000 	.word	0x40010000
 8002304:	40023800 	.word	0x40023800

08002308 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart4.Instance = UART4;
 800230a:	4810      	ldr	r0, [pc, #64]	; (800234c <MX_UART4_Init+0x44>)
  huart4.Init.BaudRate = 8000000;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800230c:	2200      	movs	r2, #0
  huart4.Instance = UART4;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <MX_UART4_Init+0x48>)
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_RX;
 8002310:	2604      	movs	r6, #4
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_MSBFIRST_INIT;
 8002312:	2590      	movs	r5, #144	; 0x90
  huart4.Init.BaudRate = 8000000;
 8002314:	4f0f      	ldr	r7, [pc, #60]	; (8002354 <MX_UART4_Init+0x4c>)
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002316:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 800231a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  huart4.Instance = UART4;
 800231e:	6018      	str	r0, [r3, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002320:	4618      	mov	r0, r3
  huart4.Init.BaudRate = 8000000;
 8002322:	605f      	str	r7, [r3, #4]
  huart4.Init.Mode = UART_MODE_RX;
 8002324:	615e      	str	r6, [r3, #20]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_MSBFIRST_INIT;
 8002326:	625d      	str	r5, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002328:	639c      	str	r4, [r3, #56]	; 0x38
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 800232a:	6499      	str	r1, [r3, #72]	; 0x48
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800232c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800232e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002330:	611a      	str	r2, [r3, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002334:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002336:	621a      	str	r2, [r3, #32]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002338:	f002 ff6a 	bl	8005210 <HAL_UART_Init>
 800233c:	b900      	cbnz	r0, 8002340 <MX_UART4_Init+0x38>
 800233e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8002340:	2155      	movs	r1, #85	; 0x55
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <MX_UART4_Init+0x50>)
  }

}
 8002344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002348:	f7ff bd6a 	b.w	8001e20 <_Error_Handler>
 800234c:	40004c00 	.word	0x40004c00
 8002350:	20004364 	.word	0x20004364
 8002354:	007a1200 	.word	0x007a1200
 8002358:	0800802c 	.word	0x0800802c

0800235c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{

  huart8.Instance = UART8;
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_UART8_Init+0x3c>)
  huart8.Init.BaudRate = 26666666;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	2200      	movs	r2, #0
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 8002360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002364:	4618      	mov	r0, r3
{
 8002366:	b570      	push	{r4, r5, r6, lr}
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002368:	240c      	movs	r4, #12
  huart8.Instance = UART8;
 800236a:	4e0c      	ldr	r6, [pc, #48]	; (800239c <MX_UART8_Init+0x40>)
  huart8.Init.BaudRate = 26666666;
 800236c:	4d0c      	ldr	r5, [pc, #48]	; (80023a0 <MX_UART8_Init+0x44>)
  huart8.Instance = UART8;
 800236e:	601e      	str	r6, [r3, #0]
  huart8.Init.BaudRate = 26666666;
 8002370:	605d      	str	r5, [r3, #4]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002372:	615c      	str	r4, [r3, #20]
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 8002374:	61d9      	str	r1, [r3, #28]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002376:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002378:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800237a:	611a      	str	r2, [r3, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237c:	619a      	str	r2, [r3, #24]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800237e:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002382:	f002 ff45 	bl	8005210 <HAL_UART_Init>
 8002386:	b900      	cbnz	r0, 800238a <MX_UART8_Init+0x2e>
 8002388:	bd70      	pop	{r4, r5, r6, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 800238a:	2169      	movs	r1, #105	; 0x69
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_UART8_Init+0x48>)
  }

}
 800238e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002392:	f7ff bd45 	b.w	8001e20 <_Error_Handler>
 8002396:	bf00      	nop
 8002398:	200042f4 	.word	0x200042f4
 800239c:	40007c00 	.word	0x40007c00
 80023a0:	0196e6aa 	.word	0x0196e6aa
 80023a4:	0800802c 	.word	0x0800802c

080023a8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart1.Instance = USART1;
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <MX_USART1_UART_Init+0x40>)
  huart1.Init.BaudRate = 921600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ac:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 921600;
 80023ae:	f44f 2661 	mov.w	r6, #921600	; 0xe1000
  huart1.Instance = USART1;
 80023b2:	4f0e      	ldr	r7, [pc, #56]	; (80023ec <MX_USART1_UART_Init+0x44>)
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b4:	250c      	movs	r5, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80023b6:	2410      	movs	r4, #16
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80023b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023bc:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 80023be:	601f      	str	r7, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80023c0:	605e      	str	r6, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023c2:	615d      	str	r5, [r3, #20]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80023c4:	625c      	str	r4, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80023c6:	6399      	str	r1, [r3, #56]	; 0x38
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023c8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023ca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023cc:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023d2:	621a      	str	r2, [r3, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023d4:	f002 ff1c 	bl	8005210 <HAL_UART_Init>
 80023d8:	b900      	cbnz	r0, 80023dc <MX_USART1_UART_Init+0x34>
 80023da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 80023dc:	217f      	movs	r1, #127	; 0x7f
 80023de:	4804      	ldr	r0, [pc, #16]	; (80023f0 <MX_USART1_UART_Init+0x48>)
  }

}
 80023e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 80023e4:	f7ff bd1c 	b.w	8001e20 <_Error_Handler>
 80023e8:	20004284 	.word	0x20004284
 80023ec:	40011000 	.word	0x40011000
 80023f0:	0800802c 	.word	0x0800802c

080023f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 26666666;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	2200      	movs	r2, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80023f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023fc:	4618      	mov	r0, r3
{
 80023fe:	b570      	push	{r4, r5, r6, lr}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002400:	240c      	movs	r4, #12
  huart3.Instance = USART3;
 8002402:	4e0c      	ldr	r6, [pc, #48]	; (8002434 <MX_USART3_UART_Init+0x40>)
  huart3.Init.BaudRate = 26666666;
 8002404:	4d0c      	ldr	r5, [pc, #48]	; (8002438 <MX_USART3_UART_Init+0x44>)
  huart3.Instance = USART3;
 8002406:	601e      	str	r6, [r3, #0]
  huart3.Init.BaudRate = 26666666;
 8002408:	605d      	str	r5, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800240a:	615c      	str	r4, [r3, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 800240c:	61d9      	str	r1, [r3, #28]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800240e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002410:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002412:	611a      	str	r2, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002414:	619a      	str	r2, [r3, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002416:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800241a:	f002 fef9 	bl	8005210 <HAL_UART_Init>
 800241e:	b900      	cbnz	r0, 8002422 <MX_USART3_UART_Init+0x2e>
 8002420:	bd70      	pop	{r4, r5, r6, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8002422:	2194      	movs	r1, #148	; 0x94
 8002424:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_USART3_UART_Init+0x48>)
  }

}
 8002426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _Error_Handler(__FILE__, __LINE__);
 800242a:	f7ff bcf9 	b.w	8001e20 <_Error_Handler>
 800242e:	bf00      	nop
 8002430:	200041b4 	.word	0x200041b4
 8002434:	40004800 	.word	0x40004800
 8002438:	0196e6aa 	.word	0x0196e6aa
 800243c:	0800802c 	.word	0x0800802c

08002440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8002440:	4a5c      	ldr	r2, [pc, #368]	; (80025b4 <HAL_UART_MspInit+0x174>)
 8002442:	6803      	ldr	r3, [r0, #0]
 8002444:	4293      	cmp	r3, r2
{
 8002446:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002448:	4604      	mov	r4, r0
 800244a:	b08b      	sub	sp, #44	; 0x2c
  if(uartHandle->Instance==UART4)
 800244c:	d026      	beq.n	800249c <HAL_UART_MspInit+0x5c>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 800244e:	4a5a      	ldr	r2, [pc, #360]	; (80025b8 <HAL_UART_MspInit+0x178>)
 8002450:	4293      	cmp	r3, r2
 8002452:	f000 8097 	beq.w	8002584 <HAL_UART_MspInit+0x144>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8002456:	4a59      	ldr	r2, [pc, #356]	; (80025bc <HAL_UART_MspInit+0x17c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d056      	beq.n	800250a <HAL_UART_MspInit+0xca>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800245c:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <HAL_UART_MspInit+0x180>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d001      	beq.n	8002466 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002462:	b00b      	add	sp, #44	; 0x2c
 8002464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8002466:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <HAL_UART_MspInit+0x184>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002468:	f44f 7e40 	mov.w	lr, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800246e:	2601      	movs	r6, #1
    __HAL_RCC_USART3_CLK_ENABLE();
 8002470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002474:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002476:	a905      	add	r1, sp, #20
    __HAL_RCC_USART3_CLK_ENABLE();
 8002478:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247c:	4852      	ldr	r0, [pc, #328]	; (80025c8 <HAL_UART_MspInit+0x188>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002482:	f8cd e014 	str.w	lr, [sp, #20]
    __HAL_RCC_USART3_CLK_ENABLE();
 8002486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800248c:	9607      	str	r6, [sp, #28]
    __HAL_RCC_USART3_CLK_ENABLE();
 800248e:	9304      	str	r3, [sp, #16]
 8002490:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002494:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002496:	f000 fd85 	bl	8002fa4 <HAL_GPIO_Init>
}
 800249a:	e7e2      	b.n	8002462 <HAL_UART_MspInit+0x22>
    __HAL_RCC_UART4_CLK_ENABLE();
 800249c:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <HAL_UART_MspInit+0x184>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800249e:	2503      	movs	r5, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	f04f 0e02 	mov.w	lr, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a4:	2701      	movs	r7, #1
    __HAL_RCC_UART4_CLK_ENABLE();
 80024a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024a8:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024aa:	a905      	add	r1, sp, #20
 80024ac:	4847      	ldr	r0, [pc, #284]	; (80025cc <HAL_UART_MspInit+0x18c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80024ae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024b6:	9505      	str	r5, [sp, #20]
    __HAL_RCC_UART4_CLK_ENABLE();
 80024b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024be:	9707      	str	r7, [sp, #28]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80024c0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    __HAL_RCC_UART4_CLK_ENABLE();
 80024c4:	9301      	str	r3, [sp, #4]
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80024c6:	4d42      	ldr	r5, [pc, #264]	; (80025d0 <HAL_UART_MspInit+0x190>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80024c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024ca:	9609      	str	r6, [sp, #36]	; 0x24
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024cc:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	f8cd e018 	str.w	lr, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d4:	f000 fd66 	bl	8002fa4 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80024d8:	483e      	ldr	r0, [pc, #248]	; (80025d4 <HAL_UART_MspInit+0x194>)
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024da:	2300      	movs	r3, #0
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80024dc:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80024e4:	6028      	str	r0, [r5, #0]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024e6:	4628      	mov	r0, r5
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80024e8:	606f      	str	r7, [r5, #4]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ea:	612e      	str	r6, [r5, #16]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80024ec:	61e9      	str	r1, [r5, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024ee:	622a      	str	r2, [r5, #32]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024f0:	60ab      	str	r3, [r5, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f2:	60eb      	str	r3, [r5, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f4:	616b      	str	r3, [r5, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f6:	61ab      	str	r3, [r5, #24]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f8:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024fa:	f000 fb9d 	bl	8002c38 <HAL_DMA_Init>
 80024fe:	2800      	cmp	r0, #0
 8002500:	d13b      	bne.n	800257a <HAL_UART_MspInit+0x13a>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002502:	6665      	str	r5, [r4, #100]	; 0x64
 8002504:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8002506:	b00b      	add	sp, #44	; 0x2c
 8002508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800250a:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <HAL_UART_MspInit+0x184>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800250c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002512:	f04f 0e01 	mov.w	lr, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8002516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800251a:	2607      	movs	r6, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 800251e:	f042 0210 	orr.w	r2, r2, #16
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002526:	9005      	str	r0, [sp, #20]
    __HAL_RCC_USART1_CLK_ENABLE();
 8002528:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	4827      	ldr	r0, [pc, #156]	; (80025cc <HAL_UART_MspInit+0x18c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	9506      	str	r5, [sp, #24]
    __HAL_RCC_USART1_CLK_ENABLE();
 8002530:	9303      	str	r3, [sp, #12]
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002532:	4d29      	ldr	r5, [pc, #164]	; (80025d8 <HAL_UART_MspInit+0x198>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002534:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002538:	9609      	str	r6, [sp, #36]	; 0x24
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800253a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253e:	f8cd e01c 	str.w	lr, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f000 fd2f 	bl	8002fa4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002546:	4f25      	ldr	r7, [pc, #148]	; (80025dc <HAL_UART_MspInit+0x19c>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002548:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800254a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800254e:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002552:	4628      	mov	r0, r5
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002554:	602f      	str	r7, [r5, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002556:	606e      	str	r6, [r5, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002558:	6129      	str	r1, [r5, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800255a:	61ea      	str	r2, [r5, #28]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800255c:	60ab      	str	r3, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800255e:	60eb      	str	r3, [r5, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002560:	616b      	str	r3, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002562:	61ab      	str	r3, [r5, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002564:	622b      	str	r3, [r5, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002566:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002568:	f000 fb66 	bl	8002c38 <HAL_DMA_Init>
 800256c:	2800      	cmp	r0, #0
 800256e:	d0c8      	beq.n	8002502 <HAL_UART_MspInit+0xc2>
      _Error_Handler(__FILE__, __LINE__);
 8002570:	21ff      	movs	r1, #255	; 0xff
 8002572:	481b      	ldr	r0, [pc, #108]	; (80025e0 <HAL_UART_MspInit+0x1a0>)
 8002574:	f7ff fc54 	bl	8001e20 <_Error_Handler>
 8002578:	e7c3      	b.n	8002502 <HAL_UART_MspInit+0xc2>
      _Error_Handler(__FILE__, __LINE__);
 800257a:	21be      	movs	r1, #190	; 0xbe
 800257c:	4818      	ldr	r0, [pc, #96]	; (80025e0 <HAL_UART_MspInit+0x1a0>)
 800257e:	f7ff fc4f 	bl	8001e20 <_Error_Handler>
 8002582:	e7be      	b.n	8002502 <HAL_UART_MspInit+0xc2>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_UART_MspInit+0x184>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002586:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258a:	2601      	movs	r6, #1
    __HAL_RCC_UART8_CLK_ENABLE();
 800258c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800258e:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002590:	a905      	add	r1, sp, #20
 8002592:	4814      	ldr	r0, [pc, #80]	; (80025e4 <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8002594:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800259c:	9405      	str	r4, [sp, #20]
    __HAL_RCC_UART8_CLK_ENABLE();
 800259e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	9706      	str	r7, [sp, #24]
    __HAL_RCC_UART8_CLK_ENABLE();
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025aa:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80025ac:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ae:	f000 fcf9 	bl	8002fa4 <HAL_GPIO_Init>
 80025b2:	e756      	b.n	8002462 <HAL_UART_MspInit+0x22>
 80025b4:	40004c00 	.word	0x40004c00
 80025b8:	40007c00 	.word	0x40007c00
 80025bc:	40011000 	.word	0x40011000
 80025c0:	40004800 	.word	0x40004800
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020c00 	.word	0x40020c00
 80025cc:	40020000 	.word	0x40020000
 80025d0:	20004154 	.word	0x20004154
 80025d4:	40026040 	.word	0x40026040
 80025d8:	20004224 	.word	0x20004224
 80025dc:	40026440 	.word	0x40026440
 80025e0:	0800802c 	.word	0x0800802c
 80025e4:	40021000 	.word	0x40021000

080025e8 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 80025e8:	b538      	push	{r3, r4, r5, lr}

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <MX_USB_OTG_HS_PCD_Init+0x38>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80025ec:	2200      	movs	r2, #0
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80025ee:	2409      	movs	r4, #9
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80025f0:	4d0c      	ldr	r5, [pc, #48]	; (8002624 <MX_USB_OTG_HS_PCD_Init+0x3c>)
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80025f2:	2101      	movs	r1, #1
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80025f4:	4618      	mov	r0, r3
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80025f6:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80025f8:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80025fa:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80025fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 80025fe:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8002600:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002602:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800260a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800260c:	f000 fea2 	bl	8003354 <HAL_PCD_Init>
 8002610:	b900      	cbnz	r0, 8002614 <MX_USB_OTG_HS_PCD_Init+0x2c>
 8002612:	bd38      	pop	{r3, r4, r5, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8002614:	214f      	movs	r1, #79	; 0x4f
 8002616:	4804      	ldr	r0, [pc, #16]	; (8002628 <MX_USB_OTG_HS_PCD_Init+0x40>)
  }

}
 8002618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _Error_Handler(__FILE__, __LINE__);
 800261c:	f7ff bc00 	b.w	8001e20 <_Error_Handler>
 8002620:	200043d4 	.word	0x200043d4
 8002624:	40040000 	.word	0x40040000
 8002628:	08008044 	.word	0x08008044

0800262c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 800262c:	6802      	ldr	r2, [r0, #0]
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <HAL_PCD_MspInit+0x80>)
 8002630:	429a      	cmp	r2, r3
 8002632:	d000      	beq.n	8002636 <HAL_PCD_MspInit+0xa>
 8002634:	4770      	bx	lr
{
 8002636:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002638:	b089      	sub	sp, #36	; 0x24
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002640:	240a      	movs	r4, #10
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002642:	230d      	movs	r3, #13
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002644:	a903      	add	r1, sp, #12
 8002646:	481a      	ldr	r0, [pc, #104]	; (80026b0 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002648:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002650:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002652:	f000 fca7 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002656:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	a903      	add	r1, sp, #12
 800265a:	4816      	ldr	r0, [pc, #88]	; (80026b4 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800265c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002664:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	f000 fc9d 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 800266a:	f643 4323 	movw	r3, #15395	; 0x3c23
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	a903      	add	r1, sp, #12
 8002670:	4811      	ldr	r0, [pc, #68]	; (80026b8 <HAL_PCD_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8002672:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002678:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800267a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267c:	f000 fc92 	bl	8002fa4 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_PCD_MspInit+0x90>)
 8002682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002684:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
 800268a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8002694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002696:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026a2:	9302      	str	r3, [sp, #8]
 80026a4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80026a6:	b009      	add	sp, #36	; 0x24
 80026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40040000 	.word	0x40040000
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40020400 	.word	0x40020400
 80026bc:	40023800 	.word	0x40023800

080026c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c0:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026c8:	490f      	ldr	r1, [pc, #60]	; (8002708 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026ca:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 80026ce:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026d0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 80026d4:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 80026d6:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026d8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 80026dc:	4e0b      	ldr	r6, [pc, #44]	; (800270c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 80026de:	f040 0001 	orr.w	r0, r0, #1
 80026e2:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 80026e4:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	4001      	ands	r1, r0
 80026ea:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 80026ec:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80026f4:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 80026f6:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026f8:	6095      	str	r5, [r2, #8]
#endif
}
 80026fa:	bc70      	pop	{r4, r5, r6}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00
 8002704:	40023800 	.word	0x40023800
 8002708:	fef6ffff 	.word	0xfef6ffff
 800270c:	24003010 	.word	0x24003010

08002710 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_Init+0x20>)
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002712:	2003      	movs	r0, #3
{
 8002714:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800271c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271e:	f000 f825 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002722:	2000      	movs	r0, #0
 8002724:	f7ff fc0c 	bl	8001f40 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002728:	f7ff fbda 	bl	8001ee0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800272c:	2000      	movs	r0, #0
 800272e:	bd08      	pop	{r3, pc}
 8002730:	40023c00 	.word	0x40023c00

08002734 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002734:	4a02      	ldr	r2, [pc, #8]	; (8002740 <HAL_IncTick+0xc>)
 8002736:	6813      	ldr	r3, [r2, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	200047d4 	.word	0x200047d4

08002744 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002744:	4b01      	ldr	r3, [pc, #4]	; (800274c <HAL_GetTick+0x8>)
 8002746:	6818      	ldr	r0, [r3, #0]
}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	200047d4 	.word	0x200047d4

08002750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002750:	b510      	push	{r4, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8002756:	f7ff fff5 	bl	8002744 <HAL_GetTick>
 800275a:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800275c:	f7ff fff2 	bl	8002744 <HAL_GetTick>
 8002760:	9b01      	ldr	r3, [sp, #4]
 8002762:	1b00      	subs	r0, r0, r4
 8002764:	4298      	cmp	r0, r3
 8002766:	d3f9      	bcc.n	800275c <HAL_Delay+0xc>
  {
  }
}
 8002768:	b002      	add	sp, #8
 800276a:	bd10      	pop	{r4, pc}

0800276c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4907      	ldr	r1, [pc, #28]	; (800278c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800276e:	0200      	lsls	r0, r0, #8
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002772:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002774:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800277e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002784:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002786:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8002788:	60c8      	str	r0, [r1, #12]
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00
 8002790:	05fa0000 	.word	0x05fa0000

08002794 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002796:	b470      	push	{r4, r5, r6}
 8002798:	68dc      	ldr	r4, [r3, #12]
 800279a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279e:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	2e04      	cmp	r6, #4
 80027a6:	bf28      	it	cs
 80027a8:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d919      	bls.n	80027e2 <HAL_NVIC_SetPriority+0x4e>
 80027ae:	3c03      	subs	r4, #3
 80027b0:	2501      	movs	r5, #1
 80027b2:	40a5      	lsls	r5, r4
 80027b4:	3d01      	subs	r5, #1
 80027b6:	402a      	ands	r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) < 0)
 80027ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	fa03 f306 	lsl.w	r3, r3, r6
 80027c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80027c4:	ea01 0103 	and.w	r1, r1, r3
 80027c8:	fa01 f104 	lsl.w	r1, r1, r4
 80027cc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80027d0:	db0a      	blt.n	80027e8 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	0109      	lsls	r1, r1, #4
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_NVIC_SetPriority+0x6c>)
 80027d6:	b2c9      	uxtb	r1, r1
 80027d8:	4403      	add	r3, r0
 80027da:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80027de:	bc70      	pop	{r4, r5, r6}
 80027e0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e2:	2200      	movs	r2, #0
 80027e4:	4614      	mov	r4, r2
 80027e6:	e7e7      	b.n	80027b8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	f000 000f 	and.w	r0, r0, #15
 80027ec:	0109      	lsls	r1, r1, #4
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_NVIC_SetPriority+0x70>)
 80027f0:	b2c9      	uxtb	r1, r1
 80027f2:	4403      	add	r3, r0
 80027f4:	7619      	strb	r1, [r3, #24]
 80027f6:	bc70      	pop	{r4, r5, r6}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000ed00 	.word	0xe000ed00
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ecfc 	.word	0xe000ecfc

08002808 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002808:	f000 011f 	and.w	r1, r0, #31
 800280c:	2301      	movs	r3, #1
 800280e:	4a03      	ldr	r2, [pc, #12]	; (800281c <HAL_NVIC_EnableIRQ+0x14>)
 8002810:	0940      	lsrs	r0, r0, #5
 8002812:	408b      	lsls	r3, r1
 8002814:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000e100 	.word	0xe000e100

08002820 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	3801      	subs	r0, #1
 8002822:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002826:	d20d      	bcs.n	8002844 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800282a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282c:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800282e:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	25f0      	movs	r5, #240	; 0xf0
 8002832:	4c06      	ldr	r4, [pc, #24]	; (800284c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002834:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002836:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800283c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8002840:	bc30      	pop	{r4, r5}
 8002842:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002844:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8002846:	4770      	bx	lr
 8002848:	e000e010 	.word	0xe000e010
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002852:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002854:	6813      	ldr	r3, [r2, #0]
 8002856:	bf0c      	ite	eq
 8002858:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800285c:	f023 0304 	bicne.w	r3, r3, #4
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4770      	bx	lr
 8002864:	e000e010 	.word	0xe000e010

08002868 <HAL_DFSDM_ChannelInit>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002868:	b350      	cbz	r0, 80028c0 <HAL_DFSDM_ChannelInit+0x58>
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800286a:	4a5f      	ldr	r2, [pc, #380]	; (80029e8 <HAL_DFSDM_ChannelInit+0x180>)
{
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800286e:	6803      	ldr	r3, [r0, #0]
  if(Instance == DFSDM1_Channel0)
 8002870:	4293      	cmp	r3, r2
 8002872:	d027      	beq.n	80028c4 <HAL_DFSDM_ChannelInit+0x5c>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 8002874:	3220      	adds	r2, #32
 8002876:	4293      	cmp	r3, r2
 8002878:	f000 8087 	beq.w	800298a <HAL_DFSDM_ChannelInit+0x122>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 800287c:	3220      	adds	r2, #32
 800287e:	4293      	cmp	r3, r2
 8002880:	d01a      	beq.n	80028b8 <HAL_DFSDM_ChannelInit+0x50>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 8002882:	3220      	adds	r2, #32
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <HAL_DFSDM_ChannelInit+0x48>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 8002888:	3220      	adds	r2, #32
 800288a:	4293      	cmp	r3, r2
 800288c:	d016      	beq.n	80028bc <HAL_DFSDM_ChannelInit+0x54>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 800288e:	3220      	adds	r2, #32
 8002890:	4293      	cmp	r3, r2
 8002892:	d07c      	beq.n	800298e <HAL_DFSDM_ChannelInit+0x126>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 8002894:	3220      	adds	r2, #32
 8002896:	4293      	cmp	r3, r2
 8002898:	d00c      	beq.n	80028b4 <HAL_DFSDM_ChannelInit+0x4c>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
 800289a:	3220      	adds	r2, #32
  {
    channel = 7;
 800289c:	4293      	cmp	r3, r2
 800289e:	bf14      	ite	ne
 80028a0:	23ff      	movne	r3, #255	; 0xff
 80028a2:	2307      	moveq	r3, #7
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80028a4:	4d51      	ldr	r5, [pc, #324]	; (80029ec <HAL_DFSDM_ChannelInit+0x184>)
 80028a6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80028aa:	b16b      	cbz	r3, 80028c8 <HAL_DFSDM_ChannelInit+0x60>
    return HAL_ERROR;
 80028ac:	2001      	movs	r0, #1
}
 80028ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    channel = 3;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e7f7      	b.n	80028a4 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 6;
 80028b4:	2306      	movs	r3, #6
 80028b6:	e7f5      	b.n	80028a4 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 2;
 80028b8:	2302      	movs	r3, #2
 80028ba:	e7f3      	b.n	80028a4 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 4;
 80028bc:	2304      	movs	r3, #4
 80028be:	e7f1      	b.n	80028a4 <HAL_DFSDM_ChannelInit+0x3c>
    return HAL_ERROR;
 80028c0:	2001      	movs	r0, #1
 80028c2:	4770      	bx	lr
    channel = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e7ed      	b.n	80028a4 <HAL_DFSDM_ChannelInit+0x3c>
 80028c8:	4604      	mov	r4, r0
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80028ca:	f7fe ffb7 	bl	800183c <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 80028ce:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <HAL_DFSDM_ChannelInit+0x188>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	3201      	adds	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d05c      	beq.n	8002996 <HAL_DFSDM_ChannelInit+0x12e>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80028dc:	6823      	ldr	r3, [r4, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80028de:	2001      	movs	r0, #1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80028e0:	6966      	ldr	r6, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80028e2:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80028e4:	6922      	ldr	r2, [r4, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80028e6:	69a7      	ldr	r7, [r4, #24]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80028e8:	f421 4171 	bic.w	r1, r1, #61696	; 0xf100
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80028ec:	4332      	orrs	r2, r6
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80028ee:	69e6      	ldr	r6, [r4, #28]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80028f0:	6019      	str	r1, [r3, #0]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80028f2:	433a      	orrs	r2, r7
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80028f4:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80028f6:	6a27      	ldr	r7, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80028f8:	430a      	orrs	r2, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80028fa:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80028fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002900:	433e      	orrs	r6, r7
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002902:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002904:	681f      	ldr	r7, [r3, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002906:	1e4a      	subs	r2, r1, #1
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002908:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800290c:	f027 070f 	bic.w	r7, r7, #15
 8002910:	601f      	str	r7, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002912:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002914:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002916:	430e      	orrs	r6, r1
 8002918:	601e      	str	r6, [r3, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800291a:	6899      	ldr	r1, [r3, #8]
  if(Instance == DFSDM1_Channel0)
 800291c:	4e32      	ldr	r6, [pc, #200]	; (80029e8 <HAL_DFSDM_ChannelInit+0x180>)
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800291e:	f421 015f 	bic.w	r1, r1, #14614528	; 0xdf0000
  if(Instance == DFSDM1_Channel0)
 8002922:	42b3      	cmp	r3, r6
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002924:	6099      	str	r1, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002926:	6899      	ldr	r1, [r3, #8]
 8002928:	ea41 010c 	orr.w	r1, r1, ip
 800292c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002930:	6099      	str	r1, [r3, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	f001 0107 	and.w	r1, r1, #7
 8002938:	6059      	str	r1, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	ea42 02ce 	orr.w	r2, r2, lr, lsl #3
 8002940:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002944:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800294c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800294e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(Instance == DFSDM1_Channel0)
 8002952:	d03b      	beq.n	80029cc <HAL_DFSDM_ChannelInit+0x164>
  else if(Instance == DFSDM1_Channel1)
 8002954:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <HAL_DFSDM_ChannelInit+0x18c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_DFSDM_ChannelInit+0x11a>
  else if(Instance == DFSDM1_Channel2)
 800295a:	3220      	adds	r2, #32
 800295c:	4293      	cmp	r3, r2
 800295e:	d031      	beq.n	80029c4 <HAL_DFSDM_ChannelInit+0x15c>
  else if(Instance == DFSDM1_Channel3)
 8002960:	3220      	adds	r2, #32
 8002962:	4293      	cmp	r3, r2
 8002964:	d015      	beq.n	8002992 <HAL_DFSDM_ChannelInit+0x12a>
  else if(Instance == DFSDM1_Channel4)
 8002966:	3220      	adds	r2, #32
 8002968:	4293      	cmp	r3, r2
 800296a:	d02d      	beq.n	80029c8 <HAL_DFSDM_ChannelInit+0x160>
  else if(Instance == DFSDM1_Channel5)
 800296c:	3220      	adds	r2, #32
 800296e:	4293      	cmp	r3, r2
 8002970:	d02e      	beq.n	80029d0 <HAL_DFSDM_ChannelInit+0x168>
  else if(Instance == DFSDM1_Channel6)
 8002972:	3220      	adds	r2, #32
 8002974:	4293      	cmp	r3, r2
 8002976:	d034      	beq.n	80029e2 <HAL_DFSDM_ChannelInit+0x17a>
  else if(Instance == DFSDM1_Channel7)
 8002978:	481f      	ldr	r0, [pc, #124]	; (80029f8 <HAL_DFSDM_ChannelInit+0x190>)
    channel = 7;
 800297a:	4283      	cmp	r3, r0
 800297c:	bf14      	ite	ne
 800297e:	20ff      	movne	r0, #255	; 0xff
 8002980:	2007      	moveq	r0, #7
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002982:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8002986:	2000      	movs	r0, #0
 8002988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    channel = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	e78a      	b.n	80028a4 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 5;
 800298e:	2305      	movs	r3, #5
 8002990:	e788      	b.n	80028a4 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 3;
 8002992:	2003      	movs	r0, #3
 8002994:	e7f5      	b.n	8002982 <HAL_DFSDM_ChannelInit+0x11a>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <HAL_DFSDM_ChannelInit+0x180>)
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002998:	7921      	ldrb	r1, [r4, #4]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800299a:	681a      	ldr	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800299c:	2901      	cmp	r1, #1
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800299e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80029a2:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68a0      	ldr	r0, [r4, #8]
 80029a8:	ea42 0200 	orr.w	r2, r2, r0
 80029ac:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80029b4:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80029b6:	d00d      	beq.n	80029d4 <HAL_DFSDM_ChannelInit+0x16c>
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80029b8:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <HAL_DFSDM_ChannelInit+0x180>)
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e78b      	b.n	80028dc <HAL_DFSDM_ChannelInit+0x74>
    channel = 2;
 80029c4:	2002      	movs	r0, #2
 80029c6:	e7dc      	b.n	8002982 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 4;
 80029c8:	2004      	movs	r0, #4
 80029ca:	e7da      	b.n	8002982 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 0;
 80029cc:	2000      	movs	r0, #0
 80029ce:	e7d8      	b.n	8002982 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 5;
 80029d0:	2005      	movs	r0, #5
 80029d2:	e7d6      	b.n	8002982 <HAL_DFSDM_ChannelInit+0x11a>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 80029d4:	68e1      	ldr	r1, [r4, #12]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	3901      	subs	r1, #1
 80029da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e7ea      	b.n	80029b8 <HAL_DFSDM_ChannelInit+0x150>
    channel = 6;
 80029e2:	2006      	movs	r0, #6
 80029e4:	e7cd      	b.n	8002982 <HAL_DFSDM_ChannelInit+0x11a>
 80029e6:	bf00      	nop
 80029e8:	40017400 	.word	0x40017400
 80029ec:	20000058 	.word	0x20000058
 80029f0:	20000078 	.word	0x20000078
 80029f4:	40017420 	.word	0x40017420
 80029f8:	400174e0 	.word	0x400174e0

080029fc <HAL_DFSDM_FilterInit>:
  if(hdfsdm_filter == NULL)
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d06b      	beq.n	8002ad8 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002a00:	6802      	ldr	r2, [r0, #0]
{
 8002a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002a04:	4b35      	ldr	r3, [pc, #212]	; (8002adc <HAL_DFSDM_FilterInit+0xe0>)
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d059      	beq.n	8002abe <HAL_DFSDM_FilterInit+0xc2>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002a0a:	2200      	movs	r2, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	4604      	mov	r4, r0
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002a10:	6302      	str	r2, [r0, #48]	; 0x30
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002a12:	6502      	str	r2, [r0, #80]	; 0x50
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002a14:	6443      	str	r3, [r0, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002a16:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002a18:	f7fe fe6e 	bl	80016f8 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002a1c:	6823      	ldr	r3, [r4, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002a1e:	7a21      	ldrb	r1, [r4, #8]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002a20:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002a22:	2901      	cmp	r1, #1
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002a24:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002a28:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	bf0c      	ite	eq
 8002a2e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002a32:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8002a36:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002a38:	7a62      	ldrb	r2, [r4, #9]
 8002a3a:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	bf0c      	ite	eq
 8002a40:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002a44:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8002a48:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002a4a:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <HAL_DFSDM_FilterInit+0xe4>)
 8002a4c:	6819      	ldr	r1, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002a4e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002a52:	400a      	ands	r2, r1
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002a54:	f1be 0f02 	cmp.w	lr, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002a58:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002a5a:	d038      	beq.n	8002ace <HAL_DFSDM_FilterInit+0xd2>
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002a5c:	7c25      	ldrb	r5, [r4, #16]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002a5e:	2601      	movs	r6, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002a60:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002a62:	2000      	movs	r0, #0
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002a64:	2d01      	cmp	r5, #1
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002a66:	491f      	ldr	r1, [pc, #124]	; (8002ae4 <HAL_DFSDM_FilterInit+0xe8>)
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002a68:	bf0c      	ite	eq
 8002a6a:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002a6e:	f022 0210 	bicne.w	r2, r2, #16
 8002a72:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002a74:	7c62      	ldrb	r2, [r4, #17]
 8002a76:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	bf0c      	ite	eq
 8002a7c:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002a80:	f022 0220 	bicne.w	r2, r2, #32
 8002a84:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002a86:	695a      	ldr	r2, [r3, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002a88:	69e7      	ldr	r7, [r4, #28]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002a8a:	4011      	ands	r1, r2
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8002a8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002a8e:	6159      	str	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8002a90:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002a92:	6959      	ldr	r1, [r3, #20]
 8002a94:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002a96:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002a98:	433a      	orrs	r2, r7
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002a9a:	3901      	subs	r1, #1
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002a9c:	6867      	ldr	r7, [r4, #4]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002a9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002aa2:	69a1      	ldr	r1, [r4, #24]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002aa4:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002aa6:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002aa8:	f8c4 e038 	str.w	lr, [r4, #56]	; 0x38
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002aac:	4332      	orrs	r2, r6
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002aae:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002ab2:	6367      	str	r7, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002ab4:	63e1      	str	r1, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002ab6:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002ab8:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
  return HAL_OK;
 8002abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002abe:	6843      	ldr	r3, [r0, #4]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d002      	beq.n	8002aca <HAL_DFSDM_FilterInit+0xce>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002ac4:	68c3      	ldr	r3, [r0, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d19f      	bne.n	8002a0a <HAL_DFSDM_FilterInit+0xe>
    return HAL_ERROR;
 8002aca:	4618      	mov	r0, r3
}
 8002acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	6961      	ldr	r1, [r4, #20]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e7c1      	b.n	8002a5c <HAL_DFSDM_FilterInit+0x60>
    return HAL_ERROR;
 8002ad8:	2001      	movs	r0, #1
 8002ada:	4770      	bx	lr
 8002adc:	40017500 	.word	0x40017500
 8002ae0:	ffff80f7 	.word	0xffff80f7
 8002ae4:	1c00ff00 	.word	0x1c00ff00

08002ae8 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002ae8:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2bfd      	cmp	r3, #253	; 0xfd
 8002af2:	d812      	bhi.n	8002b1a <HAL_DFSDM_FilterConfigRegChannel+0x32>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_DFSDM_FilterConfigRegChannel+0x50>)
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002af6:	2a01      	cmp	r2, #1
{
 8002af8:	b430      	push	{r4, r5}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002afa:	6804      	ldr	r4, [r0, #0]
 8002afc:	6825      	ldr	r5, [r4, #0]
 8002afe:	ea03 0305 	and.w	r3, r3, r5
 8002b02:	6023      	str	r3, [r4, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002b04:	d00b      	beq.n	8002b1e <HAL_DFSDM_FilterConfigRegChannel+0x36>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002b06:	0209      	lsls	r1, r1, #8
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8002b0e:	4319      	orrs	r1, r3
 8002b10:	6021      	str	r1, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002b12:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8002b14:	2000      	movs	r0, #0
}
 8002b16:	bc30      	pop	{r4, r5}
 8002b18:	4770      	bx	lr
    status = HAL_ERROR;
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002b1e:	020b      	lsls	r3, r1, #8
 8002b20:	6821      	ldr	r1, [r4, #0]
 8002b22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	6023      	str	r3, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002b2e:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8002b30:	2000      	movs	r0, #0
}
 8002b32:	bc30      	pop	{r4, r5}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	f8fbffff 	.word	0xf8fbffff

08002b3c <HAL_DFSDM_FilterRegularStart>:
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002b3c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002b40:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8002b44:	2a01      	cmp	r2, #1
 8002b46:	d001      	beq.n	8002b4c <HAL_DFSDM_FilterRegularStart+0x10>
    status = HAL_ERROR;
 8002b48:	2001      	movs	r0, #1
}
 8002b4a:	4770      	bx	lr
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002b4c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002b4e:	b19a      	cbz	r2, 8002b78 <HAL_DFSDM_FilterRegularStart+0x3c>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002b50:	6802      	ldr	r2, [r0, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002b52:	2b03      	cmp	r3, #3
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002b54:	6811      	ldr	r1, [r2, #0]
 8002b56:	f021 0101 	bic.w	r1, r1, #1
 8002b5a:	6011      	str	r1, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002b5c:	6811      	ldr	r1, [r2, #0]
 8002b5e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8002b62:	6011      	str	r1, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002b64:	6811      	ldr	r1, [r2, #0]
 8002b66:	f041 0101 	orr.w	r1, r1, #1
 8002b6a:	6011      	str	r1, [r2, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002b6c:	d010      	beq.n	8002b90 <HAL_DFSDM_FilterRegularStart+0x54>
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002b6e:	2302      	movs	r3, #2
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002b70:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2000      	movs	r0, #0
 8002b76:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002b78:	6801      	ldr	r1, [r0, #0]
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002b7a:	2b01      	cmp	r3, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002b7c:	680a      	ldr	r2, [r1, #0]
 8002b7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b82:	600a      	str	r2, [r1, #0]
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002b84:	d0f3      	beq.n	8002b6e <HAL_DFSDM_FilterRegularStart+0x32>
 8002b86:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002b88:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	4770      	bx	lr
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002b90:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b92:	b91b      	cbnz	r3, 8002b9c <HAL_DFSDM_FilterRegularStart+0x60>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002b94:	6813      	ldr	r3, [r2, #0]
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	6013      	str	r3, [r2, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8002b9c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002ba0:	2b01      	cmp	r3, #1
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002ba2:	f04f 0304 	mov.w	r3, #4
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8002ba6:	bf0c      	ite	eq
 8002ba8:	6c42      	ldreq	r2, [r0, #68]	; 0x44
 8002baa:	2201      	movne	r2, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002bac:	6482      	str	r2, [r0, #72]	; 0x48
 8002bae:	e7df      	b.n	8002b70 <HAL_DFSDM_FilterRegularStart+0x34>

08002bb0 <HAL_DFSDM_FilterGetRegularValue>:
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8002bb0:	6803      	ldr	r3, [r0, #0]
 8002bb2:	69d8      	ldr	r0, [r3, #28]
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8002bb4:	f000 0307 	and.w	r3, r0, #7
}
 8002bb8:	1200      	asrs	r0, r0, #8
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8002bba:	600b      	str	r3, [r1, #0]
}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <HAL_DFSDM_FilterErrorCallback>:
{
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop

08002bc4 <HAL_DFSDM_FilterPollForRegConversion>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002bc4:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d003      	beq.n	8002bd4 <HAL_DFSDM_FilterPollForRegConversion+0x10>
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d001      	beq.n	8002bd4 <HAL_DFSDM_FilterPollForRegConversion+0x10>
    return HAL_ERROR;
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	4770      	bx	lr
{
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();  
 8002bda:	f7ff fdb3 	bl	8002744 <HAL_GetTick>
 8002bde:	4606      	mov	r6, r0
 8002be0:	1c63      	adds	r3, r4, #1
 8002be2:	682a      	ldr	r2, [r5, #0]
 8002be4:	d114      	bne.n	8002c10 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002be6:	6893      	ldr	r3, [r2, #8]
 8002be8:	0798      	lsls	r0, r3, #30
 8002bea:	d5fc      	bpl.n	8002be6 <HAL_DFSDM_FilterPollForRegConversion+0x22>
    if((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 8002bec:	6893      	ldr	r3, [r2, #8]
 8002bee:	071b      	lsls	r3, r3, #28
 8002bf0:	d419      	bmi.n	8002c26 <HAL_DFSDM_FilterPollForRegConversion+0x62>
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002bf2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002bf4:	b953      	cbnz	r3, 8002c0c <HAL_DFSDM_FilterPollForRegConversion+0x48>
 8002bf6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8002bf8:	b940      	cbnz	r0, 8002c0c <HAL_DFSDM_FilterPollForRegConversion+0x48>
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8002bfa:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	bf14      	ite	ne
 8002c02:	2303      	movne	r3, #3
 8002c04:	2301      	moveq	r3, #1
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002c06:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_OK;
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002c10:	6893      	ldr	r3, [r2, #8]
 8002c12:	0799      	lsls	r1, r3, #30
 8002c14:	d4ea      	bmi.n	8002bec <HAL_DFSDM_FilterPollForRegConversion+0x28>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002c16:	b124      	cbz	r4, 8002c22 <HAL_DFSDM_FilterPollForRegConversion+0x5e>
 8002c18:	f7ff fd94 	bl	8002744 <HAL_GetTick>
 8002c1c:	1b80      	subs	r0, r0, r6
 8002c1e:	4284      	cmp	r4, r0
 8002c20:	d2de      	bcs.n	8002be0 <HAL_DFSDM_FilterPollForRegConversion+0x1c>
          return HAL_TIMEOUT;
 8002c22:	2003      	movs	r0, #3
 8002c24:	bd70      	pop	{r4, r5, r6, pc}
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8002c26:	2301      	movs	r3, #1
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002c28:	4628      	mov	r0, r5
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8002c2a:	652b      	str	r3, [r5, #80]	; 0x50
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002c2c:	f7ff ffc8 	bl	8002bc0 <HAL_DFSDM_FilterErrorCallback>
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	2208      	movs	r2, #8
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	e7dc      	b.n	8002bf2 <HAL_DFSDM_FilterPollForRegConversion+0x2e>

08002c38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7ff fd82 	bl	8002744 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c40:	2c00      	cmp	r4, #0
 8002c42:	d076      	beq.n	8002d32 <HAL_DMA_Init+0xfa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c44:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c46:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c4c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002c50:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8002c52:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c5c:	e005      	b.n	8002c6a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c5e:	f7ff fd71 	bl	8002744 <HAL_GetTick>
 8002c62:	1b40      	subs	r0, r0, r5
 8002c64:	2805      	cmp	r0, #5
 8002c66:	d83e      	bhi.n	8002ce6 <HAL_DMA_Init+0xae>
 8002c68:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	07d1      	lsls	r1, r2, #31
 8002c6e:	d4f6      	bmi.n	8002c5e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c70:	68a1      	ldr	r1, [r4, #8]
 8002c72:	6862      	ldr	r2, [r4, #4]
 8002c74:	68e0      	ldr	r0, [r4, #12]
 8002c76:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c78:	6921      	ldr	r1, [r4, #16]
 8002c7a:	6965      	ldr	r5, [r4, #20]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7c:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7e:	69a6      	ldr	r6, [r4, #24]
 8002c80:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c82:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c84:	4f37      	ldr	r7, [pc, #220]	; (8002d64 <HAL_DMA_Init+0x12c>)
  tmp = hdma->Instance->CR;
 8002c86:	6819      	ldr	r1, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c88:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c8c:	400f      	ands	r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8e:	6a21      	ldr	r1, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c90:	4332      	orrs	r2, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c92:	2d04      	cmp	r5, #4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c94:	ea42 0200 	orr.w	r2, r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c98:	ea42 0201 	orr.w	r2, r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c9c:	ea42 0207 	orr.w	r2, r2, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca0:	d028      	beq.n	8002cf4 <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ca4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ca6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002caa:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	482e      	ldr	r0, [pc, #184]	; (8002d68 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cb0:	492e      	ldr	r1, [pc, #184]	; (8002d6c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cb2:	3a10      	subs	r2, #16
  hdma->Instance->FCR = tmp;
 8002cb4:	615d      	str	r5, [r3, #20]
  hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cb8:	fba0 0202 	umull	r0, r2, r0, r2
 8002cbc:	0912      	lsrs	r2, r2, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cbe:	5c88      	ldrb	r0, [r1, r2]
  
  if (stream_number > 3U)
 8002cc0:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cc2:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <HAL_DMA_Init+0x138>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc4:	f04f 0100 	mov.w	r1, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cc8:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cca:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cce:	f04f 033f 	mov.w	r3, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cd2:	bf88      	it	hi
 8002cd4:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd6:	4083      	lsls	r3, r0
  return HAL_OK;
 8002cd8:	4608      	mov	r0, r1
 8002cda:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cdc:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cde:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8002ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce8:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8002cea:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cec:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cf4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002cf6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmp |= hdma->Init.FIFOThreshold;
 8002cf8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cfa:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8002cfc:	f047 0504 	orr.w	r5, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d00:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8002d02:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002d04:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d06:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8002d0a:	4315      	orrs	r5, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d0cd      	beq.n	8002cac <HAL_DMA_Init+0x74>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d10:	b18e      	cbz	r6, 8002d36 <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d12:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002d16:	d018      	beq.n	8002d4a <HAL_DMA_Init+0x112>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d18:	2f02      	cmp	r7, #2
 8002d1a:	d903      	bls.n	8002d24 <HAL_DMA_Init+0xec>
 8002d1c:	2f03      	cmp	r7, #3
 8002d1e:	d1c5      	bne.n	8002cac <HAL_DMA_Init+0x74>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d20:	01c2      	lsls	r2, r0, #7
 8002d22:	d5c3      	bpl.n	8002cac <HAL_DMA_Init+0x74>
        hdma->State = HAL_DMA_STATE_READY;
 8002d24:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d26:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8002d28:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d2a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002d32:	2001      	movs	r0, #1
 8002d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8002d36:	2f01      	cmp	r7, #1
 8002d38:	d003      	beq.n	8002d42 <HAL_DMA_Init+0x10a>
 8002d3a:	d3f1      	bcc.n	8002d20 <HAL_DMA_Init+0xe8>
 8002d3c:	2f02      	cmp	r7, #2
 8002d3e:	d1b5      	bne.n	8002cac <HAL_DMA_Init+0x74>
 8002d40:	e7ee      	b.n	8002d20 <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d42:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002d46:	d1b1      	bne.n	8002cac <HAL_DMA_Init+0x74>
 8002d48:	e7ec      	b.n	8002d24 <HAL_DMA_Init+0xec>
    switch (tmp)
 8002d4a:	2f03      	cmp	r7, #3
 8002d4c:	d8ae      	bhi.n	8002cac <HAL_DMA_Init+0x74>
 8002d4e:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <HAL_DMA_Init+0x11c>)
 8002d50:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8002d54:	08002d25 	.word	0x08002d25
 8002d58:	08002d21 	.word	0x08002d21
 8002d5c:	08002d25 	.word	0x08002d25
 8002d60:	08002d43 	.word	0x08002d43
 8002d64:	e010803f 	.word	0xe010803f
 8002d68:	aaaaaaab 	.word	0xaaaaaaab
 8002d6c:	08008074 	.word	0x08008074
 8002d70:	fffffc00 	.word	0xfffffc00

08002d74 <HAL_DMA_Start_IT>:
{
 8002d74:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8002d76:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002d7a:	2c01      	cmp	r4, #1
 8002d7c:	d00e      	beq.n	8002d9c <HAL_DMA_Start_IT+0x28>
 8002d7e:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d80:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d84:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d86:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8002d88:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d8c:	d00a      	beq.n	8002da4 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8002d8e:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 8002d92:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	bcf0      	pop	{r4, r5, r6, r7}
 8002d9a:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002d9c:	2302      	movs	r3, #2
}
 8002d9e:	bcf0      	pop	{r4, r5, r6, r7}
 8002da0:	4618      	mov	r0, r3
 8002da2:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002da4:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da6:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da8:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002daa:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dae:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db0:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002db2:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db4:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002db6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002dba:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002dbc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dbe:	d019      	beq.n	8002df4 <HAL_DMA_Start_IT+0x80>
    hdma->Instance->PAR = SrcAddress;
 8002dc0:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dc2:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc4:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002dc6:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8002dc8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dca:	408b      	lsls	r3, r1
 8002dcc:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	f043 0316 	orr.w	r3, r3, #22
 8002dd4:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002dd6:	6963      	ldr	r3, [r4, #20]
 8002dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ddc:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002dde:	b11a      	cbz	r2, 8002de8 <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	f043 0308 	orr.w	r3, r3, #8
 8002de6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002de8:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	6022      	str	r2, [r4, #0]
 8002df2:	e7d0      	b.n	8002d96 <HAL_DMA_Start_IT+0x22>
    hdma->Instance->PAR = DstAddress;
 8002df4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002df6:	60e1      	str	r1, [r4, #12]
 8002df8:	e7e4      	b.n	8002dc4 <HAL_DMA_Start_IT+0x50>
 8002dfa:	bf00      	nop

08002dfc <HAL_DMA_IRQHandler>:
{
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	4604      	mov	r4, r0
 8002e00:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8002e02:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e04:	2208      	movs	r2, #8
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e06:	6da7      	ldr	r7, [r4, #88]	; 0x58
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  __IO uint32_t count = 0;
 8002e0a:	9001      	str	r0, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0c:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8002e0e:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002e10:	4960      	ldr	r1, [pc, #384]	; (8002f94 <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e12:	4215      	tst	r5, r2
  uint32_t timeout = SystemCoreClock / 9600;
 8002e14:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e16:	d003      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e18:	6821      	ldr	r1, [r4, #0]
 8002e1a:	6808      	ldr	r0, [r1, #0]
 8002e1c:	0740      	lsls	r0, r0, #29
 8002e1e:	d476      	bmi.n	8002f0e <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e20:	4a5d      	ldr	r2, [pc, #372]	; (8002f98 <HAL_DMA_IRQHandler+0x19c>)
 8002e22:	409a      	lsls	r2, r3
 8002e24:	4215      	tst	r5, r2
 8002e26:	d003      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e28:	6821      	ldr	r1, [r4, #0]
 8002e2a:	6949      	ldr	r1, [r1, #20]
 8002e2c:	0608      	lsls	r0, r1, #24
 8002e2e:	d468      	bmi.n	8002f02 <HAL_DMA_IRQHandler+0x106>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e30:	4a5a      	ldr	r2, [pc, #360]	; (8002f9c <HAL_DMA_IRQHandler+0x1a0>)
 8002e32:	409a      	lsls	r2, r3
 8002e34:	4215      	tst	r5, r2
 8002e36:	d003      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e38:	6821      	ldr	r1, [r4, #0]
 8002e3a:	6809      	ldr	r1, [r1, #0]
 8002e3c:	0789      	lsls	r1, r1, #30
 8002e3e:	d45a      	bmi.n	8002ef6 <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	2210      	movs	r2, #16
 8002e42:	409a      	lsls	r2, r3
 8002e44:	4215      	tst	r5, r2
 8002e46:	d003      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e48:	6821      	ldr	r1, [r4, #0]
 8002e4a:	6808      	ldr	r0, [r1, #0]
 8002e4c:	0700      	lsls	r0, r0, #28
 8002e4e:	d43f      	bmi.n	8002ed0 <HAL_DMA_IRQHandler+0xd4>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e50:	2220      	movs	r2, #32
 8002e52:	409a      	lsls	r2, r3
 8002e54:	4215      	tst	r5, r2
 8002e56:	d003      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	6808      	ldr	r0, [r1, #0]
 8002e5c:	06c0      	lsls	r0, r0, #27
 8002e5e:	d425      	bmi.n	8002eac <HAL_DMA_IRQHandler+0xb0>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e62:	b30b      	cbz	r3, 8002ea8 <HAL_DMA_IRQHandler+0xac>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e66:	07da      	lsls	r2, r3, #31
 8002e68:	d51a      	bpl.n	8002ea0 <HAL_DMA_IRQHandler+0xa4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e6a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8002e6c:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002e6e:	4a4c      	ldr	r2, [pc, #304]	; (8002fa0 <HAL_DMA_IRQHandler+0x1a4>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8002e74:	fba2 3206 	umull	r3, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 8002e78:	680b      	ldr	r3, [r1, #0]
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8002e7e:	0a92      	lsrs	r2, r2, #10
      __HAL_DMA_DISABLE(hdma);
 8002e80:	600b      	str	r3, [r1, #0]
 8002e82:	e002      	b.n	8002e8a <HAL_DMA_IRQHandler+0x8e>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e84:	680b      	ldr	r3, [r1, #0]
 8002e86:	07db      	lsls	r3, r3, #31
 8002e88:	d504      	bpl.n	8002e94 <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 8002e8a:	9b01      	ldr	r3, [sp, #4]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	d2f7      	bcs.n	8002e84 <HAL_DMA_IRQHandler+0x88>
      __HAL_UNLOCK(hdma);
 8002e94:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002e96:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8002e98:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002ea0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002ea2:	b10b      	cbz	r3, 8002ea8 <HAL_DMA_IRQHandler+0xac>
      hdma->XferErrorCallback(hdma);
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	4798      	blx	r3
}
 8002ea8:	b003      	add	sp, #12
 8002eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eac:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eae:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002eb2:	2a05      	cmp	r2, #5
 8002eb4:	d03b      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eb6:	680b      	ldr	r3, [r1, #0]
 8002eb8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ebc:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ebe:	d054      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ec0:	0319      	lsls	r1, r3, #12
 8002ec2:	d55f      	bpl.n	8002f84 <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 8002ec4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0ca      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 8002eca:	4620      	mov	r0, r4
 8002ecc:	4798      	blx	r3
 8002ece:	e7c7      	b.n	8002e60 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ed0:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed2:	680a      	ldr	r2, [r1, #0]
 8002ed4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed8:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eda:	d122      	bne.n	8002f22 <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002edc:	05d2      	lsls	r2, r2, #23
 8002ede:	d403      	bmi.n	8002ee8 <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee0:	680a      	ldr	r2, [r1, #0]
 8002ee2:	f022 0208 	bic.w	r2, r2, #8
 8002ee6:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002ee8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002eea:	2a00      	cmp	r2, #0
 8002eec:	d0b0      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4790      	blx	r2
 8002ef2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ef4:	e7ac      	b.n	8002e50 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ef6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ef8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002efa:	f042 0204 	orr.w	r2, r2, #4
 8002efe:	6562      	str	r2, [r4, #84]	; 0x54
 8002f00:	e79e      	b.n	8002e40 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f02:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f04:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f06:	f042 0202 	orr.w	r2, r2, #2
 8002f0a:	6562      	str	r2, [r4, #84]	; 0x54
 8002f0c:	e790      	b.n	8002e30 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f0e:	6808      	ldr	r0, [r1, #0]
 8002f10:	f020 0004 	bic.w	r0, r0, #4
 8002f14:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f16:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f18:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	6562      	str	r2, [r4, #84]	; 0x54
 8002f20:	e77e      	b.n	8002e20 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f22:	0311      	lsls	r1, r2, #12
 8002f24:	d5e0      	bpl.n	8002ee8 <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	d1e0      	bne.n	8002eee <HAL_DMA_IRQHandler+0xf2>
 8002f2c:	e790      	b.n	8002e50 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f2e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f30:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f32:	f022 0216 	bic.w	r2, r2, #22
 8002f36:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f38:	694a      	ldr	r2, [r1, #20]
 8002f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3e:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f40:	b320      	cbz	r0, 8002f8c <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f42:	680a      	ldr	r2, [r1, #0]
 8002f44:	f022 0208 	bic.w	r2, r2, #8
 8002f48:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f4a:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8002f4c:	2500      	movs	r5, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	2001      	movs	r0, #1
        if(hdma->XferAbortCallback != NULL)
 8002f50:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002f58:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002f5c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002f60:	2900      	cmp	r1, #0
 8002f62:	d0a1      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 8002f64:	4620      	mov	r0, r4
 8002f66:	4788      	blx	r1
 8002f68:	e79e      	b.n	8002ea8 <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f6a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002f6e:	d1a9      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f70:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002f72:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f74:	f022 0210 	bic.w	r2, r2, #16
 8002f78:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8002f7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8002f82:	e79f      	b.n	8002ec4 <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 8002f84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d19f      	bne.n	8002eca <HAL_DMA_IRQHandler+0xce>
 8002f8a:	e769      	b.n	8002e60 <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f8c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002f8e:	2a00      	cmp	r2, #0
 8002f90:	d1d7      	bne.n	8002f42 <HAL_DMA_IRQHandler+0x146>
 8002f92:	e7da      	b.n	8002f4a <HAL_DMA_IRQHandler+0x14e>
 8002f94:	20000010 	.word	0x20000010
 8002f98:	00800001 	.word	0x00800001
 8002f9c:	00800004 	.word	0x00800004
 8002fa0:	1b4e81b5 	.word	0x1b4e81b5

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa8:	f8d1 c000 	ldr.w	ip, [r1]
 8002fac:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fae:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb0:	f8df 822c 	ldr.w	r8, [pc, #556]	; 80031e0 <HAL_GPIO_Init+0x23c>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb4:	f8df e22c 	ldr.w	lr, [pc, #556]	; 80031e4 <HAL_GPIO_Init+0x240>
 8002fb8:	e003      	b.n	8002fc2 <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fba:	3501      	adds	r5, #1
 8002fbc:	2d10      	cmp	r5, #16
 8002fbe:	f000 80bf 	beq.w	8003140 <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc6:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d1f5      	bne.n	8002fba <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fce:	684e      	ldr	r6, [r1, #4]
 8002fd0:	f026 0910 	bic.w	r9, r6, #16
 8002fd4:	f1b9 0f02 	cmp.w	r9, #2
 8002fd8:	f040 80b5 	bne.w	8003146 <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 8002fdc:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fe0:	f005 0a07 	and.w	sl, r5, #7
 8002fe4:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fe8:	690c      	ldr	r4, [r1, #16]
 8002fea:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002ff2:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ff6:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ffa:	fa04 f40a 	lsl.w	r4, r4, sl
 8002ffe:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003002:	ea27 070b 	bic.w	r7, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003006:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800300a:	433c      	orrs	r4, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800300c:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003010:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3] = temp;
 8003014:	f8c9 4020 	str.w	r4, [r9, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003018:	ea6f 040b 	mvn.w	r4, fp
      temp = GPIOx->MODER;
 800301c:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003020:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003024:	ea04 0909 	and.w	r9, r4, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003028:	ea47 0709 	orr.w	r7, r7, r9
      GPIOx->MODER = temp;
 800302c:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 800302e:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003030:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003034:	ea07 0b04 	and.w	fp, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8003038:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800303a:	fa09 f905 	lsl.w	r9, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800303e:	fa07 f70a 	lsl.w	r7, r7, sl
 8003042:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8003046:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003048:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800304a:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800304e:	ea49 0303 	orr.w	r3, r9, r3
        GPIOx->OTYPER = temp;
 8003052:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8003054:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003056:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003058:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800305a:	fa03 f30a 	lsl.w	r3, r3, sl
 800305e:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8003060:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003062:	00f3      	lsls	r3, r6, #3
 8003064:	d5a9      	bpl.n	8002fba <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 800306a:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800306e:	f005 0303 	and.w	r3, r5, #3
 8003072:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800307a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800307e:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003080:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
 8003084:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8003088:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800308c:	fa09 f903 	lsl.w	r9, r9, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003090:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8003094:	9401      	str	r4, [sp, #4]
 8003096:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003098:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800309a:	ea24 0a09 	bic.w	sl, r4, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800309e:	4c4b      	ldr	r4, [pc, #300]	; (80031cc <HAL_GPIO_Init+0x228>)
 80030a0:	42a0      	cmp	r0, r4
 80030a2:	d069      	beq.n	8003178 <HAL_GPIO_Init+0x1d4>
 80030a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030a8:	42a0      	cmp	r0, r4
 80030aa:	d067      	beq.n	800317c <HAL_GPIO_Init+0x1d8>
 80030ac:	4c48      	ldr	r4, [pc, #288]	; (80031d0 <HAL_GPIO_Init+0x22c>)
 80030ae:	42a0      	cmp	r0, r4
 80030b0:	d069      	beq.n	8003186 <HAL_GPIO_Init+0x1e2>
 80030b2:	4c48      	ldr	r4, [pc, #288]	; (80031d4 <HAL_GPIO_Init+0x230>)
 80030b4:	42a0      	cmp	r0, r4
 80030b6:	d06b      	beq.n	8003190 <HAL_GPIO_Init+0x1ec>
 80030b8:	4c47      	ldr	r4, [pc, #284]	; (80031d8 <HAL_GPIO_Init+0x234>)
 80030ba:	42a0      	cmp	r0, r4
 80030bc:	d06d      	beq.n	800319a <HAL_GPIO_Init+0x1f6>
 80030be:	4c47      	ldr	r4, [pc, #284]	; (80031dc <HAL_GPIO_Init+0x238>)
 80030c0:	42a0      	cmp	r0, r4
 80030c2:	d06f      	beq.n	80031a4 <HAL_GPIO_Init+0x200>
 80030c4:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80031e8 <HAL_GPIO_Init+0x244>
 80030c8:	4548      	cmp	r0, r9
 80030ca:	d070      	beq.n	80031ae <HAL_GPIO_Init+0x20a>
 80030cc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80031ec <HAL_GPIO_Init+0x248>
 80030d0:	4548      	cmp	r0, r9
 80030d2:	d071      	beq.n	80031b8 <HAL_GPIO_Init+0x214>
 80030d4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80031f0 <HAL_GPIO_Init+0x24c>
 80030d8:	4548      	cmp	r0, r9
 80030da:	d072      	beq.n	80031c2 <HAL_GPIO_Init+0x21e>
 80030dc:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80031f4 <HAL_GPIO_Init+0x250>
 80030e0:	4548      	cmp	r0, r9
 80030e2:	bf0c      	ite	eq
 80030e4:	f04f 0909 	moveq.w	r9, #9
 80030e8:	f04f 090a 	movne.w	r9, #10
 80030ec:	fa09 f303 	lsl.w	r3, r9, r3
 80030f0:	ea43 030a 	orr.w	r3, r3, sl
        temp &= ~((uint32_t)iocurrent);
 80030f4:	43d4      	mvns	r4, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 80030f6:	3501      	adds	r5, #1
        SYSCFG->EXTICR[position >> 2] = temp;
 80030f8:	60bb      	str	r3, [r7, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030fa:	03f7      	lsls	r7, r6, #15
        temp = EXTI->IMR;
 80030fc:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8003100:	bf54      	ite	pl
 8003102:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8003104:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003106:	03b7      	lsls	r7, r6, #14
        EXTI->IMR = temp;
 8003108:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 800310c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8003110:	bf54      	ite	pl
 8003112:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8003114:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003116:	02f7      	lsls	r7, r6, #11
        EXTI->EMR = temp;
 8003118:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 800311c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8003120:	bf54      	ite	pl
 8003122:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8003124:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003126:	02b6      	lsls	r6, r6, #10
        EXTI->RTSR = temp;
 8003128:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 800312c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8003130:	bf54      	ite	pl
 8003132:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8003134:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8003136:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8003138:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800313c:	f47f af41 	bne.w	8002fc2 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8003140:	b003      	add	sp, #12
 8003142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003146:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800314a:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 800314c:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003150:	f109 39ff 	add.w	r9, r9, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003154:	ea06 0704 	and.w	r7, r6, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003158:	fa04 f40a 	lsl.w	r4, r4, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800315c:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003160:	ea6f 0404 	mvn.w	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003164:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003168:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800316c:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 8003170:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003172:	f63f af6f 	bhi.w	8003054 <HAL_GPIO_Init+0xb0>
 8003176:	e75a      	b.n	800302e <HAL_GPIO_Init+0x8a>
 8003178:	2300      	movs	r3, #0
 800317a:	e7b9      	b.n	80030f0 <HAL_GPIO_Init+0x14c>
 800317c:	f04f 0901 	mov.w	r9, #1
 8003180:	fa09 f303 	lsl.w	r3, r9, r3
 8003184:	e7b4      	b.n	80030f0 <HAL_GPIO_Init+0x14c>
 8003186:	f04f 0902 	mov.w	r9, #2
 800318a:	fa09 f303 	lsl.w	r3, r9, r3
 800318e:	e7af      	b.n	80030f0 <HAL_GPIO_Init+0x14c>
 8003190:	f04f 0903 	mov.w	r9, #3
 8003194:	fa09 f303 	lsl.w	r3, r9, r3
 8003198:	e7aa      	b.n	80030f0 <HAL_GPIO_Init+0x14c>
 800319a:	f04f 0904 	mov.w	r9, #4
 800319e:	fa09 f303 	lsl.w	r3, r9, r3
 80031a2:	e7a5      	b.n	80030f0 <HAL_GPIO_Init+0x14c>
 80031a4:	f04f 0905 	mov.w	r9, #5
 80031a8:	fa09 f303 	lsl.w	r3, r9, r3
 80031ac:	e7a0      	b.n	80030f0 <HAL_GPIO_Init+0x14c>
 80031ae:	f04f 0906 	mov.w	r9, #6
 80031b2:	fa09 f303 	lsl.w	r3, r9, r3
 80031b6:	e79b      	b.n	80030f0 <HAL_GPIO_Init+0x14c>
 80031b8:	f04f 0907 	mov.w	r9, #7
 80031bc:	fa09 f303 	lsl.w	r3, r9, r3
 80031c0:	e796      	b.n	80030f0 <HAL_GPIO_Init+0x14c>
 80031c2:	f04f 0908 	mov.w	r9, #8
 80031c6:	fa09 f303 	lsl.w	r3, r9, r3
 80031ca:	e791      	b.n	80030f0 <HAL_GPIO_Init+0x14c>
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40020800 	.word	0x40020800
 80031d4:	40020c00 	.word	0x40020c00
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40021400 	.word	0x40021400
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40013c00 	.word	0x40013c00
 80031e8:	40021800 	.word	0x40021800
 80031ec:	40021c00 	.word	0x40021c00
 80031f0:	40022000 	.word	0x40022000
 80031f4:	40022400 	.word	0x40022400

080031f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f8:	b902      	cbnz	r2, 80031fc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031fa:	0409      	lsls	r1, r1, #16
 80031fc:	6181      	str	r1, [r0, #24]
 80031fe:	4770      	bx	lr

08003200 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003200:	6943      	ldr	r3, [r0, #20]
 8003202:	4059      	eors	r1, r3
 8003204:	6141      	str	r1, [r0, #20]
 8003206:	4770      	bx	lr

08003208 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003208:	2800      	cmp	r0, #0
 800320a:	d04f      	beq.n	80032ac <HAL_I2C_Init+0xa4>
{
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800320e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003212:	4604      	mov	r4, r0
 8003214:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003218:	2b00      	cmp	r3, #0
 800321a:	d03e      	beq.n	800329a <HAL_I2C_Init+0x92>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800321c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800321e:	2124      	movs	r1, #36	; 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003220:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003222:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003226:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003228:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800322c:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800322e:	f021 0101 	bic.w	r1, r1, #1
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003232:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8003234:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003236:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323e:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003240:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003242:	d02f      	beq.n	80032a4 <HAL_I2C_Init+0x9c>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003244:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003248:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800324a:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800324c:	d021      	beq.n	8003292 <HAL_I2C_Init+0x8a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800324e:	685e      	ldr	r6, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003252:	4d17      	ldr	r5, [pc, #92]	; (80032b0 <HAL_I2C_Init+0xa8>)
  hi2c->State = HAL_I2C_STATE_READY;
 8003254:	f04f 0e20 	mov.w	lr, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003258:	6922      	ldr	r2, [r4, #16]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 800325a:	4608      	mov	r0, r1
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800325c:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800325e:	6966      	ldr	r6, [r4, #20]
 8003260:	69a7      	ldr	r7, [r4, #24]
 8003262:	4332      	orrs	r2, r6
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003264:	605d      	str	r5, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003266:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003268:	68de      	ldr	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800326a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800326e:	6a27      	ldr	r7, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003270:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003274:	433d      	orrs	r5, r7
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003276:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003278:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800327a:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003286:	f884 e041 	strb.w	lr, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800328a:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  return HAL_OK;
 8003290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	e7d9      	b.n	800324e <HAL_I2C_Init+0x46>
    hi2c->Lock = HAL_UNLOCKED;
 800329a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800329e:	f7fe fcb9 	bl	8001c14 <HAL_I2C_MspInit>
 80032a2:	e7bb      	b.n	800321c <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	e7d0      	b.n	800324e <HAL_I2C_Init+0x46>
    return HAL_ERROR;
 80032ac:	2001      	movs	r0, #1
 80032ae:	4770      	bx	lr
 80032b0:	02008000 	.word	0x02008000

080032b4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80032b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d001      	beq.n	80032c2 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80032be:	2002      	movs	r0, #2
 80032c0:	4770      	bx	lr
 80032c2:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 80032c4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80032c8:	2801      	cmp	r0, #1
 80032ca:	d0f8      	beq.n	80032be <HAL_I2CEx_ConfigAnalogFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032cc:	2024      	movs	r0, #36	; 0x24
{
 80032ce:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 80032d0:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80032d2:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032d4:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80032d8:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 80032da:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 80032dc:	f025 0501 	bic.w	r5, r5, #1
 80032e0:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032e2:	6825      	ldr	r5, [r4, #0]
 80032e4:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80032e8:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80032ea:	6825      	ldr	r5, [r4, #0]
 80032ec:	4329      	orrs	r1, r5
 80032ee:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 80032f0:	6821      	ldr	r1, [r4, #0]
 80032f2:	f041 0101 	orr.w	r1, r1, #1
 80032f6:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80032f8:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80032fc:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003300:	bc70      	pop	{r4, r5, r6}
 8003302:	4770      	bx	lr

08003304 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003304:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b20      	cmp	r3, #32
 800330c:	d001      	beq.n	8003312 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800330e:	2002      	movs	r0, #2
 8003310:	4770      	bx	lr
 8003312:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003314:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003318:	2801      	cmp	r0, #1
 800331a:	d0f8      	beq.n	800330e <HAL_I2CEx_ConfigDigitalFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800331c:	2024      	movs	r0, #36	; 0x24
{
 800331e:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 8003320:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003322:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003324:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003328:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 800332a:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 800332c:	f025 0501 	bic.w	r5, r5, #1
 8003330:	6025      	str	r5, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 8003332:	6825      	ldr	r5, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003334:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003338:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800333c:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 800333e:	6821      	ldr	r1, [r4, #0]
 8003340:	f041 0101 	orr.w	r1, r1, #1
 8003344:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003346:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800334a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 800334e:	bc70      	pop	{r4, r5, r6}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop

08003354 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t i = 0;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003354:	2800      	cmp	r0, #0
 8003356:	f000 8213 	beq.w	8003780 <HAL_PCD_Init+0x42c>
{
 800335a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800335e:	f04f 0803 	mov.w	r8, #3
 8003362:	4604      	mov	r4, r0
{
 8003364:	b08b      	sub	sp, #44	; 0x2c

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003366:	4606      	mov	r6, r0
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003368:	f880 83b9 	strb.w	r8, [r0, #953]	; 0x3b9

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 800336c:	2501      	movs	r5, #1
  HAL_PCD_MspInit(hpcd);
 800336e:	f7ff f95d 	bl	800262c <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	f002 f96c 	bl	8005650 <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003378:	f856 eb10 	ldr.w	lr, [r6], #16
 800337c:	466f      	mov	r7, sp
   hpcd->IN_ep[i].num = i;
 800337e:	f04f 0a04 	mov.w	sl, #4
 8003382:	f04f 0b02 	mov.w	fp, #2
 8003386:	f04f 0905 	mov.w	r9, #5
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800338a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800338c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800338e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003390:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003392:	1d22      	adds	r2, r4, #4
 8003394:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003398:	e887 0003 	stmia.w	r7, {r0, r1}
 800339c:	4670      	mov	r0, lr
   hpcd->IN_ep[i].num = i;
 800339e:	f04f 0709 	mov.w	r7, #9
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80033a2:	ca0e      	ldmia	r2, {r1, r2, r3}
 80033a4:	f002 f8f8 	bl	8005598 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80033a8:	2100      	movs	r1, #0
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	f002 f958 	bl	8005660 <USB_SetCurrentMode>
   hpcd->IN_ep[i].num = i;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f04f 0107 	mov.w	r1, #7
 80033b6:	2006      	movs	r0, #6
 80033b8:	2208      	movs	r2, #8
 80033ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033be:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b

   hpcd->Instance->DIEPTXF[i] = 0;
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80033c2:	f104 0c10 	add.w	ip, r4, #16
   hpcd->IN_ep[i].maxpacket =  0;
 80033c6:	6423      	str	r3, [r4, #64]	; 0x40
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80033c8:	46ee      	mov	lr, sp
   hpcd->IN_ep[i].xfer_buff = 0;
 80033ca:	6463      	str	r3, [r4, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0;
 80033cc:	64e3      	str	r3, [r4, #76]	; 0x4c
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ce:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
   hpcd->IN_ep[i].maxpacket =  0;
 80033d2:	65e3      	str	r3, [r4, #92]	; 0x5c
   hpcd->IN_ep[i].xfer_buff = 0;
 80033d4:	6623      	str	r3, [r4, #96]	; 0x60
   hpcd->IN_ep[i].xfer_len = 0;
 80033d6:	66a3      	str	r3, [r4, #104]	; 0x68
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033d8:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
   hpcd->IN_ep[i].maxpacket =  0;
 80033dc:	67a3      	str	r3, [r4, #120]	; 0x78
   hpcd->IN_ep[i].xfer_buff = 0;
 80033de:	67e3      	str	r3, [r4, #124]	; 0x7c
   hpcd->IN_ep[i].xfer_len = 0;
 80033e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033e4:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
   hpcd->IN_ep[i].maxpacket =  0;
 80033e8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   hpcd->IN_ep[i].xfer_buff = 0;
 80033ec:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
   hpcd->IN_ep[i].xfer_len = 0;
 80033f0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033f4:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
   hpcd->IN_ep[i].maxpacket =  0;
 80033f8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   hpcd->IN_ep[i].xfer_buff = 0;
 80033fc:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   hpcd->IN_ep[i].xfer_len = 0;
 8003400:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   hpcd->IN_ep[i].num = i;
 8003404:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   hpcd->IN_ep[i].is_in = 1;
 8003408:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 800340c:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
   hpcd->IN_ep[i].num = i;
 8003410:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
   hpcd->IN_ep[i].is_in = 1;
 8003414:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
 8003418:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
 800341c:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
 8003420:	f884 50c5 	strb.w	r5, [r4, #197]	; 0xc5
   hpcd->IN_ep[i].num = i;
 8003424:	f884 b070 	strb.w	fp, [r4, #112]	; 0x70
 8003428:	f884 a0a8 	strb.w	sl, [r4, #168]	; 0xa8
 800342c:	f884 90c4 	strb.w	r9, [r4, #196]	; 0xc4
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003430:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
   hpcd->IN_ep[i].num = i;
 8003434:	f884 10fc 	strb.w	r1, [r4, #252]	; 0xfc
 8003438:	f04f 010b 	mov.w	r1, #11
 800343c:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
 8003440:	f04f 070a 	mov.w	r7, #10
   hpcd->IN_ep[i].maxpacket =  0;
 8003444:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
   hpcd->IN_ep[i].xfer_buff = 0;
 8003448:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
   hpcd->IN_ep[i].xfer_len = 0;
 800344c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003450:	f884 30e3 	strb.w	r3, [r4, #227]	; 0xe3
   hpcd->IN_ep[i].maxpacket =  0;
 8003454:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
   hpcd->IN_ep[i].xfer_buff = 0;
 8003458:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   hpcd->IN_ep[i].xfer_len = 0;
 800345c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003460:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   hpcd->IN_ep[i].maxpacket =  0;
 8003464:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   hpcd->IN_ep[i].xfer_buff = 0;
 8003468:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   hpcd->IN_ep[i].xfer_len = 0;
 800346c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003470:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
   hpcd->IN_ep[i].maxpacket =  0;
 8003474:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   hpcd->IN_ep[i].xfer_buff = 0;
 8003478:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   hpcd->IN_ep[i].xfer_len = 0;
 800347c:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003480:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
   hpcd->IN_ep[i].maxpacket =  0;
 8003484:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
   hpcd->IN_ep[i].xfer_buff = 0;
 8003488:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   hpcd->IN_ep[i].xfer_len = 0;
 800348c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003490:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
   hpcd->IN_ep[i].maxpacket =  0;
 8003494:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   hpcd->IN_ep[i].xfer_buff = 0;
 8003498:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
   hpcd->IN_ep[i].num = i;
 800349c:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
 80034a0:	f884 2118 	strb.w	r2, [r4, #280]	; 0x118
 80034a4:	f884 7150 	strb.w	r7, [r4, #336]	; 0x150
   hpcd->IN_ep[i].is_in = 1;
 80034a8:	f884 50e1 	strb.w	r5, [r4, #225]	; 0xe1
 80034ac:	f884 50fd 	strb.w	r5, [r4, #253]	; 0xfd
 80034b0:	f884 5119 	strb.w	r5, [r4, #281]	; 0x119
 80034b4:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 80034b8:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
   hpcd->IN_ep[i].xfer_len = 0;
 80034bc:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
   hpcd->IN_ep[i].num = i;
 80034c0:	f884 116c 	strb.w	r1, [r4, #364]	; 0x16c
 80034c4:	f04f 010c 	mov.w	r1, #12
 80034c8:	6827      	ldr	r7, [r4, #0]
 80034ca:	f884 1188 	strb.w	r1, [r4, #392]	; 0x188
 80034ce:	f04f 010d 	mov.w	r1, #13
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034d2:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
   hpcd->IN_ep[i].num = i;
 80034d6:	f884 11a4 	strb.w	r1, [r4, #420]	; 0x1a4
 80034da:	f04f 010e 	mov.w	r1, #14
   hpcd->IN_ep[i].maxpacket =  0;
 80034de:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
   hpcd->IN_ep[i].num = i;
 80034e2:	f884 11c0 	strb.w	r1, [r4, #448]	; 0x1c0
   hpcd->OUT_ep[i].num = i;
 80034e6:	f04f 0107 	mov.w	r1, #7
   hpcd->IN_ep[i].xfer_buff = 0;
 80034ea:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
   hpcd->IN_ep[i].xfer_len = 0;
 80034ee:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034f2:	f884 318b 	strb.w	r3, [r4, #395]	; 0x18b
   hpcd->IN_ep[i].maxpacket =  0;
 80034f6:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
   hpcd->IN_ep[i].xfer_buff = 0;
 80034fa:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
   hpcd->IN_ep[i].xfer_len = 0;
 80034fe:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003502:	f884 31a7 	strb.w	r3, [r4, #423]	; 0x1a7
   hpcd->IN_ep[i].maxpacket =  0;
 8003506:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
   hpcd->IN_ep[i].xfer_buff = 0;
 800350a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
   hpcd->IN_ep[i].xfer_len = 0;
 800350e:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003512:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
   hpcd->IN_ep[i].maxpacket =  0;
 8003516:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   hpcd->IN_ep[i].xfer_buff = 0;
 800351a:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
   hpcd->IN_ep[i].xfer_len = 0;
 800351e:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   hpcd->OUT_ep[i].is_in = 0;
 8003522:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
   hpcd->OUT_ep[i].num = i;
 8003526:	f884 31f8 	strb.w	r3, [r4, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 800352a:	87e3      	strh	r3, [r4, #62]	; 0x3e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800352c:	f884 31fb 	strb.w	r3, [r4, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 8003530:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003534:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0;
 8003538:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
   hpcd->IN_ep[i].is_in = 1;
 800353c:	f884 516d 	strb.w	r5, [r4, #365]	; 0x16d
 8003540:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
 8003544:	f884 51a5 	strb.w	r5, [r4, #421]	; 0x1a5
 8003548:	f884 51c1 	strb.w	r5, [r4, #449]	; 0x1c1
   hpcd->Instance->DIEPTXF[i] = 0;
 800354c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   hpcd->OUT_ep[i].is_in = 0;
 8003550:	f884 3215 	strb.w	r3, [r4, #533]	; 0x215
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003554:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
   hpcd->OUT_ep[i].maxpacket = 0;
 8003558:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
   hpcd->OUT_ep[i].xfer_buff = 0;
 800355c:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
   hpcd->OUT_ep[i].xfer_len = 0;
 8003560:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
   hpcd->OUT_ep[i].num = i;
 8003564:	f884 5214 	strb.w	r5, [r4, #532]	; 0x214
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003568:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
   hpcd->Instance->DIEPTXF[i] = 0;
 800356c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   hpcd->OUT_ep[i].is_in = 0;
 8003570:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003574:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
   hpcd->OUT_ep[i].maxpacket = 0;
 8003578:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
   hpcd->OUT_ep[i].xfer_buff = 0;
 800357c:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
   hpcd->OUT_ep[i].xfer_len = 0;
 8003580:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
   hpcd->OUT_ep[i].num = i;
 8003584:	f884 b230 	strb.w	fp, [r4, #560]	; 0x230
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003588:	f8a4 b076 	strh.w	fp, [r4, #118]	; 0x76
   hpcd->Instance->DIEPTXF[i] = 0;
 800358c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   hpcd->OUT_ep[i].is_in = 0;
 8003590:	f884 324d 	strb.w	r3, [r4, #589]	; 0x24d
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003594:	f884 324f 	strb.w	r3, [r4, #591]	; 0x24f
   hpcd->OUT_ep[i].maxpacket = 0;
 8003598:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
   hpcd->OUT_ep[i].xfer_buff = 0;
 800359c:	f8c4 3258 	str.w	r3, [r4, #600]	; 0x258
   hpcd->OUT_ep[i].xfer_len = 0;
 80035a0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
   hpcd->OUT_ep[i].num = i;
 80035a4:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
   hpcd->IN_ep[i].tx_fifo_num = i;
 80035a8:	f8a4 8092 	strh.w	r8, [r4, #146]	; 0x92
   hpcd->Instance->DIEPTXF[i] = 0;
 80035ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   hpcd->OUT_ep[i].is_in = 0;
 80035b0:	f884 3269 	strb.w	r3, [r4, #617]	; 0x269
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035b4:	f884 326b 	strb.w	r3, [r4, #619]	; 0x26b
   hpcd->OUT_ep[i].maxpacket = 0;
 80035b8:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
   hpcd->OUT_ep[i].xfer_buff = 0;
 80035bc:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
   hpcd->OUT_ep[i].xfer_len = 0;
 80035c0:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
   hpcd->OUT_ep[i].num = i;
 80035c4:	f884 a268 	strb.w	sl, [r4, #616]	; 0x268
   hpcd->IN_ep[i].tx_fifo_num = i;
 80035c8:	f8a4 a0ae 	strh.w	sl, [r4, #174]	; 0xae
   hpcd->Instance->DIEPTXF[i] = 0;
 80035cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   hpcd->OUT_ep[i].is_in = 0;
 80035d0:	f884 3285 	strb.w	r3, [r4, #645]	; 0x285
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035d4:	f884 3287 	strb.w	r3, [r4, #647]	; 0x287
   hpcd->OUT_ep[i].maxpacket = 0;
 80035d8:	f8c4 328c 	str.w	r3, [r4, #652]	; 0x28c
   hpcd->OUT_ep[i].xfer_buff = 0;
 80035dc:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
   hpcd->OUT_ep[i].xfer_len = 0;
 80035e0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
   hpcd->OUT_ep[i].num = i;
 80035e4:	f884 9284 	strb.w	r9, [r4, #644]	; 0x284
   hpcd->IN_ep[i].tx_fifo_num = i;
 80035e8:	f8a4 90ca 	strh.w	r9, [r4, #202]	; 0xca
   hpcd->Instance->DIEPTXF[i] = 0;
 80035ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   hpcd->OUT_ep[i].is_in = 0;
 80035f0:	f884 32a1 	strb.w	r3, [r4, #673]	; 0x2a1
   hpcd->OUT_ep[i].num = i;
 80035f4:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
   hpcd->IN_ep[i].tx_fifo_num = i;
 80035f8:	f8a4 00e6 	strh.w	r0, [r4, #230]	; 0xe6
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035fc:	f884 32a3 	strb.w	r3, [r4, #675]	; 0x2a3
   hpcd->OUT_ep[i].maxpacket = 0;
 8003600:	f8c4 32a8 	str.w	r3, [r4, #680]	; 0x2a8
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003604:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
   hpcd->OUT_ep[i].xfer_len = 0;
 8003608:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
   hpcd->Instance->DIEPTXF[i] = 0;
 800360c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
   hpcd->OUT_ep[i].num = i;
 8003610:	f884 12bc 	strb.w	r1, [r4, #700]	; 0x2bc
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003614:	f04f 0107 	mov.w	r1, #7
   hpcd->OUT_ep[i].is_in = 0;
 8003618:	f884 32bd 	strb.w	r3, [r4, #701]	; 0x2bd
   hpcd->IN_ep[i].tx_fifo_num = i;
 800361c:	f8a4 1102 	strh.w	r1, [r4, #258]	; 0x102
   hpcd->OUT_ep[i].num = i;
 8003620:	f04f 0109 	mov.w	r1, #9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003624:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
   hpcd->OUT_ep[i].maxpacket = 0;
 8003628:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   hpcd->OUT_ep[i].xfer_buff = 0;
 800362c:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
   hpcd->OUT_ep[i].xfer_len = 0;
 8003630:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
   hpcd->Instance->DIEPTXF[i] = 0;
 8003634:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   hpcd->OUT_ep[i].is_in = 0;
 8003638:	f884 32d9 	strb.w	r3, [r4, #729]	; 0x2d9
   hpcd->OUT_ep[i].num = i;
 800363c:	f884 22d8 	strb.w	r2, [r4, #728]	; 0x2d8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003640:	f8a4 211e 	strh.w	r2, [r4, #286]	; 0x11e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003644:	f884 32db 	strb.w	r3, [r4, #731]	; 0x2db
   hpcd->OUT_ep[i].maxpacket = 0;
 8003648:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
   hpcd->OUT_ep[i].xfer_buff = 0;
 800364c:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
   hpcd->OUT_ep[i].xfer_len = 0;
 8003650:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
   hpcd->Instance->DIEPTXF[i] = 0;
 8003654:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
   hpcd->OUT_ep[i].is_in = 0;
 8003658:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
   hpcd->OUT_ep[i].num = i;
 800365c:	f884 12f4 	strb.w	r1, [r4, #756]	; 0x2f4
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003660:	f04f 0109 	mov.w	r1, #9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003664:	f884 32f7 	strb.w	r3, [r4, #759]	; 0x2f7
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003668:	f8a4 113a 	strh.w	r1, [r4, #314]	; 0x13a
   hpcd->OUT_ep[i].num = i;
 800366c:	f04f 010a 	mov.w	r1, #10
   hpcd->OUT_ep[i].maxpacket = 0;
 8003670:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003674:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
   hpcd->OUT_ep[i].xfer_len = 0;
 8003678:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   hpcd->Instance->DIEPTXF[i] = 0;
 800367c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   hpcd->OUT_ep[i].num = i;
 8003680:	f884 1310 	strb.w	r1, [r4, #784]	; 0x310
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003684:	f04f 010a 	mov.w	r1, #10
   hpcd->OUT_ep[i].is_in = 0;
 8003688:	f884 3311 	strb.w	r3, [r4, #785]	; 0x311
   hpcd->IN_ep[i].tx_fifo_num = i;
 800368c:	f8a4 1156 	strh.w	r1, [r4, #342]	; 0x156
   hpcd->OUT_ep[i].num = i;
 8003690:	f04f 010b 	mov.w	r1, #11
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003694:	f884 3313 	strb.w	r3, [r4, #787]	; 0x313
   hpcd->OUT_ep[i].maxpacket = 0;
 8003698:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
   hpcd->OUT_ep[i].xfer_buff = 0;
 800369c:	f8c4 331c 	str.w	r3, [r4, #796]	; 0x31c
   hpcd->OUT_ep[i].xfer_len = 0;
 80036a0:	f8c4 3324 	str.w	r3, [r4, #804]	; 0x324
   hpcd->Instance->DIEPTXF[i] = 0;
 80036a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   hpcd->OUT_ep[i].num = i;
 80036a8:	f884 132c 	strb.w	r1, [r4, #812]	; 0x32c
   hpcd->IN_ep[i].tx_fifo_num = i;
 80036ac:	f04f 010b 	mov.w	r1, #11
   hpcd->OUT_ep[i].is_in = 0;
 80036b0:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
   hpcd->IN_ep[i].tx_fifo_num = i;
 80036b4:	f8a4 1172 	strh.w	r1, [r4, #370]	; 0x172
   hpcd->OUT_ep[i].num = i;
 80036b8:	f04f 010c 	mov.w	r1, #12
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036bc:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
   hpcd->OUT_ep[i].maxpacket = 0;
 80036c0:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
   hpcd->OUT_ep[i].xfer_buff = 0;
 80036c4:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
   hpcd->OUT_ep[i].xfer_len = 0;
 80036c8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
   hpcd->Instance->DIEPTXF[i] = 0;
 80036cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   hpcd->OUT_ep[i].num = i;
 80036d0:	f884 1348 	strb.w	r1, [r4, #840]	; 0x348
   hpcd->IN_ep[i].tx_fifo_num = i;
 80036d4:	f04f 010c 	mov.w	r1, #12
   hpcd->OUT_ep[i].is_in = 0;
 80036d8:	f884 3349 	strb.w	r3, [r4, #841]	; 0x349
   hpcd->IN_ep[i].tx_fifo_num = i;
 80036dc:	f8a4 118e 	strh.w	r1, [r4, #398]	; 0x18e
   hpcd->OUT_ep[i].num = i;
 80036e0:	f04f 010d 	mov.w	r1, #13
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036e4:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
   hpcd->OUT_ep[i].maxpacket = 0;
 80036e8:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
   hpcd->OUT_ep[i].xfer_buff = 0;
 80036ec:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
   hpcd->OUT_ep[i].xfer_len = 0;
 80036f0:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   hpcd->Instance->DIEPTXF[i] = 0;
 80036f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   hpcd->OUT_ep[i].num = i;
 80036f8:	f884 1364 	strb.w	r1, [r4, #868]	; 0x364
   hpcd->IN_ep[i].tx_fifo_num = i;
 80036fc:	f04f 010d 	mov.w	r1, #13
   hpcd->OUT_ep[i].is_in = 0;
 8003700:	f884 3365 	strb.w	r3, [r4, #869]	; 0x365
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003704:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
   hpcd->OUT_ep[i].num = i;
 8003708:	f04f 010e 	mov.w	r1, #14
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800370c:	f884 3367 	strb.w	r3, [r4, #871]	; 0x367
   hpcd->OUT_ep[i].maxpacket = 0;
 8003710:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003714:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
   hpcd->OUT_ep[i].xfer_len = 0;
 8003718:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
   hpcd->Instance->DIEPTXF[i] = 0;
 800371c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   hpcd->OUT_ep[i].num = i;
 8003720:	f884 1380 	strb.w	r1, [r4, #896]	; 0x380
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003724:	f04f 010e 	mov.w	r1, #14
   hpcd->OUT_ep[i].is_in = 0;
 8003728:	f884 3381 	strb.w	r3, [r4, #897]	; 0x381
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800372c:	f884 3383 	strb.w	r3, [r4, #899]	; 0x383
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003730:	f8a4 11c6 	strh.w	r1, [r4, #454]	; 0x1c6
   hpcd->OUT_ep[i].maxpacket = 0;
 8003734:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003738:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
   hpcd->OUT_ep[i].xfer_len = 0;
 800373c:	f8c4 3394 	str.w	r3, [r4, #916]	; 0x394
   hpcd->Instance->DIEPTXF[i] = 0;
 8003740:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8003744:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003748:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800374c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003750:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003754:	eb04 020a 	add.w	r2, r4, sl
 8003758:	e896 0003 	ldmia.w	r6, {r0, r1}
 800375c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8003760:	ca0e      	ldmia	r2, {r1, r2, r3}
 8003762:	4638      	mov	r0, r7
 8003764:	f001 ff96 	bl	8005694 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8003768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 hpcd->State= HAL_PCD_STATE_READY;
 800376a:	f884 53b9 	strb.w	r5, [r4, #953]	; 0x3b9
 if (hpcd->Init.lpm_enable ==1)
 800376e:	42ab      	cmp	r3, r5
 8003770:	d008      	beq.n	8003784 <HAL_PCD_Init+0x430>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	f002 f866 	bl	8005844 <USB_DevDisconnect>
 return HAL_OK;
 8003778:	2000      	movs	r0, #0
}
 800377a:	b00b      	add	sp, #44	; 0x2c
 800377c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8003780:	2001      	movs	r0, #1
 8003782:	4770      	bx	lr
   HAL_PCDEx_ActivateLPM(hpcd);
 8003784:	4620      	mov	r0, r4
 8003786:	f000 f801 	bl	800378c <HAL_PCDEx_ActivateLPM>
 800378a:	e7f2      	b.n	8003772 <HAL_PCD_Init+0x41e>

0800378c <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800378c:	6803      	ldr	r3, [r0, #0]
  
  hpcd->lpm_active = ENABLE;
 800378e:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003790:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <HAL_PCDEx_ActivateLPM+0x28>)
{
 8003792:	b430      	push	{r4, r5}
  hpcd->lpm_active = ENABLE;
 8003794:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
{
 8003798:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800379a:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 800379c:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800379e:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 80037a2:	f884 53ec 	strb.w	r5, [r4, #1004]	; 0x3ec
  
  return HAL_OK;  
}
 80037a6:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037a8:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037aa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037ac:	430a      	orrs	r2, r1
}
 80037ae:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
}
 80037b2:	4770      	bx	lr
 80037b4:	10000003 	.word	0x10000003

080037b8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80037be:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 80037c2:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80037c4:	6411      	str	r1, [r2, #64]	; 0x40
{
 80037c6:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 80037c8:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037ca:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 80037cc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80037d0:	9201      	str	r2, [sp, #4]
 80037d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037da:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80037dc:	f7fe ffb2 	bl	8002744 <HAL_GetTick>
 80037e0:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037e2:	e005      	b.n	80037f0 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037e4:	f7fe ffae 	bl	8002744 <HAL_GetTick>
 80037e8:	1b40      	subs	r0, r0, r5
 80037ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80037ee:	d817      	bhi.n	8003820 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	03da      	lsls	r2, r3, #15
 80037f4:	d5f6      	bpl.n	80037e4 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037f6:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037f8:	4d0c      	ldr	r5, [pc, #48]	; (800382c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fe:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003800:	f7fe ffa0 	bl	8002744 <HAL_GetTick>
 8003804:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003806:	e005      	b.n	8003814 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003808:	f7fe ff9c 	bl	8002744 <HAL_GetTick>
 800380c:	1b00      	subs	r0, r0, r4
 800380e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003812:	d805      	bhi.n	8003820 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003814:	686b      	ldr	r3, [r5, #4]
 8003816:	039b      	lsls	r3, r3, #14
 8003818:	d5f6      	bpl.n	8003808 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800381a:	2000      	movs	r0, #0
}
 800381c:	b003      	add	sp, #12
 800381e:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003820:	2003      	movs	r0, #3
}
 8003822:	b003      	add	sp, #12
 8003824:	bd30      	pop	{r4, r5, pc}
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	40007000 	.word	0x40007000

08003830 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003830:	2800      	cmp	r0, #0
 8003832:	f000 81d0 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x3a6>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003836:	6803      	ldr	r3, [r0, #0]
{
 8003838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383c:	07dd      	lsls	r5, r3, #31
{
 800383e:	b082      	sub	sp, #8
 8003840:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	d530      	bpl.n	80038a6 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003844:	49aa      	ldr	r1, [pc, #680]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 8003846:	688a      	ldr	r2, [r1, #8]
 8003848:	f002 020c 	and.w	r2, r2, #12
 800384c:	2a04      	cmp	r2, #4
 800384e:	f000 8119 	beq.w	8003a84 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003852:	688a      	ldr	r2, [r1, #8]
 8003854:	f002 020c 	and.w	r2, r2, #12
 8003858:	2a08      	cmp	r2, #8
 800385a:	f000 810f 	beq.w	8003a7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385e:	6863      	ldr	r3, [r4, #4]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	f000 8152 	beq.w	8003b0c <HAL_RCC_OscConfig+0x2dc>
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80db 	beq.w	8003a24 <HAL_RCC_OscConfig+0x1f4>
 800386e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003872:	4b9f      	ldr	r3, [pc, #636]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f000 81a6 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x396>
 800387a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003886:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fe ff5c 	bl	8002744 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388c:	4d98      	ldr	r5, [pc, #608]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 800388e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003890:	e005      	b.n	800389e <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003892:	f7fe ff57 	bl	8002744 <HAL_GetTick>
 8003896:	1b80      	subs	r0, r0, r6
 8003898:	2864      	cmp	r0, #100	; 0x64
 800389a:	f200 80eb 	bhi.w	8003a74 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	682b      	ldr	r3, [r5, #0]
 80038a0:	039a      	lsls	r2, r3, #14
 80038a2:	d5f6      	bpl.n	8003892 <HAL_RCC_OscConfig+0x62>
 80038a4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a6:	079f      	lsls	r7, r3, #30
 80038a8:	d529      	bpl.n	80038fe <HAL_RCC_OscConfig+0xce>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038aa:	4a91      	ldr	r2, [pc, #580]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 80038ac:	6891      	ldr	r1, [r2, #8]
 80038ae:	f011 0f0c 	tst.w	r1, #12
 80038b2:	f000 8082 	beq.w	80039ba <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	6891      	ldr	r1, [r2, #8]
 80038b8:	f001 010c 	and.w	r1, r1, #12
 80038bc:	2908      	cmp	r1, #8
 80038be:	d079      	beq.n	80039b4 <HAL_RCC_OscConfig+0x184>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c0:	68e3      	ldr	r3, [r4, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8109 	beq.w	8003ada <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c8:	4b89      	ldr	r3, [pc, #548]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 80038ca:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038d4:	f7fe ff36 	bl	8002744 <HAL_GetTick>
 80038d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038da:	e005      	b.n	80038e8 <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038dc:	f7fe ff32 	bl	8002744 <HAL_GetTick>
 80038e0:	1b80      	subs	r0, r0, r6
 80038e2:	2802      	cmp	r0, #2
 80038e4:	f200 80c6 	bhi.w	8003a74 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	0798      	lsls	r0, r3, #30
 80038ec:	d5f6      	bpl.n	80038dc <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	682b      	ldr	r3, [r5, #0]
 80038f0:	6922      	ldr	r2, [r4, #16]
 80038f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038f6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80038fa:	602b      	str	r3, [r5, #0]
 80038fc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fe:	071a      	lsls	r2, r3, #28
 8003900:	d41f      	bmi.n	8003942 <HAL_RCC_OscConfig+0x112>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003902:	075d      	lsls	r5, r3, #29
 8003904:	d536      	bpl.n	8003974 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003906:	4b7a      	ldr	r3, [pc, #488]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 8003908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390a:	00d0      	lsls	r0, r2, #3
 800390c:	d573      	bpl.n	80039f6 <HAL_RCC_OscConfig+0x1c6>
  FlagStatus pwrclkchanged = RESET;
 800390e:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003910:	4b78      	ldr	r3, [pc, #480]	; (8003af4 <HAL_RCC_OscConfig+0x2c4>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	05d1      	lsls	r1, r2, #23
 8003916:	f140 809c 	bpl.w	8003a52 <HAL_RCC_OscConfig+0x222>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391a:	68a3      	ldr	r3, [r4, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f000 80fb 	beq.w	8003b18 <HAL_RCC_OscConfig+0x2e8>
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80b8 	beq.w	8003a98 <HAL_RCC_OscConfig+0x268>
 8003928:	2b05      	cmp	r3, #5
 800392a:	4b71      	ldr	r3, [pc, #452]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 800392c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800392e:	f000 810c 	beq.w	8003b4a <HAL_RCC_OscConfig+0x31a>
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	671a      	str	r2, [r3, #112]	; 0x70
 8003938:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	671a      	str	r2, [r3, #112]	; 0x70
 8003940:	e0ef      	b.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003942:	6963      	ldr	r3, [r4, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d043      	beq.n	80039d0 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 8003948:	4b69      	ldr	r3, [pc, #420]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 800394a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003954:	f7fe fef6 	bl	8002744 <HAL_GetTick>
 8003958:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395a:	e005      	b.n	8003968 <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395c:	f7fe fef2 	bl	8002744 <HAL_GetTick>
 8003960:	1b80      	subs	r0, r0, r6
 8003962:	2802      	cmp	r0, #2
 8003964:	f200 8086 	bhi.w	8003a74 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003968:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800396a:	079b      	lsls	r3, r3, #30
 800396c:	d5f6      	bpl.n	800395c <HAL_RCC_OscConfig+0x12c>
 800396e:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003970:	075d      	lsls	r5, r3, #29
 8003972:	d4c8      	bmi.n	8003906 <HAL_RCC_OscConfig+0xd6>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003974:	69a2      	ldr	r2, [r4, #24]
 8003976:	b1ca      	cbz	r2, 80039ac <HAL_RCC_OscConfig+0x17c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003978:	4b5d      	ldr	r3, [pc, #372]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	f001 010c 	and.w	r1, r1, #12
 8003980:	2908      	cmp	r1, #8
 8003982:	d021      	beq.n	80039c8 <HAL_RCC_OscConfig+0x198>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003984:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003988:	f000 80e7 	beq.w	8003b5a <HAL_RCC_OscConfig+0x32a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003990:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8003992:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003994:	f7fe fed6 	bl	8002744 <HAL_GetTick>
 8003998:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	e004      	b.n	80039a6 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399c:	f7fe fed2 	bl	8002744 <HAL_GetTick>
 80039a0:	1b40      	subs	r0, r0, r5
 80039a2:	2802      	cmp	r0, #2
 80039a4:	d866      	bhi.n	8003a74 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	d4f7      	bmi.n	800399c <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80039ac:	2000      	movs	r0, #0
}
 80039ae:	b002      	add	sp, #8
 80039b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b4:	6852      	ldr	r2, [r2, #4]
 80039b6:	0256      	lsls	r6, r2, #9
 80039b8:	d482      	bmi.n	80038c0 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ba:	4a4d      	ldr	r2, [pc, #308]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	0795      	lsls	r5, r2, #30
 80039c0:	d524      	bpl.n	8003a0c <HAL_RCC_OscConfig+0x1dc>
 80039c2:	68e2      	ldr	r2, [r4, #12]
 80039c4:	2a01      	cmp	r2, #1
 80039c6:	d021      	beq.n	8003a0c <HAL_RCC_OscConfig+0x1dc>
    return HAL_ERROR;
 80039c8:	2001      	movs	r0, #1
}
 80039ca:	b002      	add	sp, #8
 80039cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80039d0:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 80039d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80039dc:	f7fe feb2 	bl	8002744 <HAL_GetTick>
 80039e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e2:	e004      	b.n	80039ee <HAL_RCC_OscConfig+0x1be>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fe feae 	bl	8002744 <HAL_GetTick>
 80039e8:	1b80      	subs	r0, r0, r6
 80039ea:	2802      	cmp	r0, #2
 80039ec:	d842      	bhi.n	8003a74 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039f0:	079f      	lsls	r7, r3, #30
 80039f2:	d4f7      	bmi.n	80039e4 <HAL_RCC_OscConfig+0x1b4>
 80039f4:	e7bb      	b.n	800396e <HAL_RCC_OscConfig+0x13e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80039f8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	9b01      	ldr	r3, [sp, #4]
 8003a0a:	e781      	b.n	8003910 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0c:	4938      	ldr	r1, [pc, #224]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 8003a0e:	6920      	ldr	r0, [r4, #16]
 8003a10:	680a      	ldr	r2, [r1, #0]
 8003a12:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003a16:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003a1a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1c:	071a      	lsls	r2, r3, #28
 8003a1e:	f57f af70 	bpl.w	8003902 <HAL_RCC_OscConfig+0xd2>
 8003a22:	e78e      	b.n	8003942 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a24:	4b32      	ldr	r3, [pc, #200]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 8003a26:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a28:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a38:	f7fe fe84 	bl	8002744 <HAL_GetTick>
 8003a3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	e004      	b.n	8003a4a <HAL_RCC_OscConfig+0x21a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe fe80 	bl	8002744 <HAL_GetTick>
 8003a44:	1b80      	subs	r0, r0, r6
 8003a46:	2864      	cmp	r0, #100	; 0x64
 8003a48:	d814      	bhi.n	8003a74 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	682b      	ldr	r3, [r5, #0]
 8003a4c:	039b      	lsls	r3, r3, #14
 8003a4e:	d4f7      	bmi.n	8003a40 <HAL_RCC_OscConfig+0x210>
 8003a50:	e728      	b.n	80038a4 <HAL_RCC_OscConfig+0x74>
      PWR->CR1 |= PWR_CR1_DBP;
 8003a52:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a54:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8003a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003a5c:	f7fe fe72 	bl	8002744 <HAL_GetTick>
 8003a60:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a62:	6833      	ldr	r3, [r6, #0]
 8003a64:	05da      	lsls	r2, r3, #23
 8003a66:	f53f af58 	bmi.w	800391a <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a6a:	f7fe fe6b 	bl	8002744 <HAL_GetTick>
 8003a6e:	1bc0      	subs	r0, r0, r7
 8003a70:	2864      	cmp	r0, #100	; 0x64
 8003a72:	d9f6      	bls.n	8003a62 <HAL_RCC_OscConfig+0x232>
            return HAL_TIMEOUT;
 8003a74:	2003      	movs	r0, #3
}
 8003a76:	b002      	add	sp, #8
 8003a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7c:	684a      	ldr	r2, [r1, #4]
 8003a7e:	0250      	lsls	r0, r2, #9
 8003a80:	f57f aeed 	bpl.w	800385e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	0391      	lsls	r1, r2, #14
 8003a8a:	f57f af0c 	bpl.w	80038a6 <HAL_RCC_OscConfig+0x76>
 8003a8e:	6862      	ldr	r2, [r4, #4]
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	f47f af08 	bne.w	80038a6 <HAL_RCC_OscConfig+0x76>
 8003a96:	e797      	b.n	80039c8 <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa0:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	671a      	str	r2, [r3, #112]	; 0x70
 8003aa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aaa:	f022 0204 	bic.w	r2, r2, #4
 8003aae:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003ab0:	f7fe fe48 	bl	8002744 <HAL_GetTick>
 8003ab4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab6:	e004      	b.n	8003ac2 <HAL_RCC_OscConfig+0x292>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fe fe44 	bl	8002744 <HAL_GetTick>
 8003abc:	1bc0      	subs	r0, r0, r7
 8003abe:	4540      	cmp	r0, r8
 8003ac0:	d8d8      	bhi.n	8003a74 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003ac4:	0798      	lsls	r0, r3, #30
 8003ac6:	d4f7      	bmi.n	8003ab8 <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 8003ac8:	2d00      	cmp	r5, #0
 8003aca:	f43f af53 	beq.w	8003974 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ace:	4a08      	ldr	r2, [pc, #32]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 8003ad0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad8:	e74c      	b.n	8003974 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_OscConfig+0x2c0>)
 8003adc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ae6:	f7fe fe2d 	bl	8002744 <HAL_GetTick>
 8003aea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aec:	e009      	b.n	8003b02 <HAL_RCC_OscConfig+0x2d2>
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af8:	f7fe fe24 	bl	8002744 <HAL_GetTick>
 8003afc:	1b80      	subs	r0, r0, r6
 8003afe:	2802      	cmp	r0, #2
 8003b00:	d8b8      	bhi.n	8003a74 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	0799      	lsls	r1, r3, #30
 8003b06:	d4f7      	bmi.n	8003af8 <HAL_RCC_OscConfig+0x2c8>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	e6f8      	b.n	80038fe <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0c:	4a33      	ldr	r2, [pc, #204]	; (8003bdc <HAL_RCC_OscConfig+0x3ac>)
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e6b7      	b.n	8003888 <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	4a30      	ldr	r2, [pc, #192]	; (8003bdc <HAL_RCC_OscConfig+0x3ac>)
 8003b1a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003b22:	f7fe fe0f 	bl	8002744 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b26:	4e2d      	ldr	r6, [pc, #180]	; (8003bdc <HAL_RCC_OscConfig+0x3ac>)
      tickstart = HAL_GetTick();
 8003b28:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2e:	e005      	b.n	8003b3c <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7fe fe08 	bl	8002744 <HAL_GetTick>
 8003b34:	eba0 0008 	sub.w	r0, r0, r8
 8003b38:	42b8      	cmp	r0, r7
 8003b3a:	d89b      	bhi.n	8003a74 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003b3e:	079b      	lsls	r3, r3, #30
 8003b40:	d5f6      	bpl.n	8003b30 <HAL_RCC_OscConfig+0x300>
    if(pwrclkchanged == SET)
 8003b42:	2d00      	cmp	r5, #0
 8003b44:	f43f af16 	beq.w	8003974 <HAL_RCC_OscConfig+0x144>
 8003b48:	e7c1      	b.n	8003ace <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4a:	f042 0204 	orr.w	r2, r2, #4
 8003b4e:	671a      	str	r2, [r3, #112]	; 0x70
 8003b50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	671a      	str	r2, [r3, #112]	; 0x70
 8003b58:	e7e3      	b.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 8003b5a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8003b60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b62:	f7fe fdef 	bl	8002744 <HAL_GetTick>
 8003b66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b68:	e005      	b.n	8003b76 <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe fdeb 	bl	8002744 <HAL_GetTick>
 8003b6e:	1b80      	subs	r0, r0, r6
 8003b70:	2802      	cmp	r0, #2
 8003b72:	f63f af7f 	bhi.w	8003a74 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	682b      	ldr	r3, [r5, #0]
 8003b78:	0199      	lsls	r1, r3, #6
 8003b7a:	d4f6      	bmi.n	8003b6a <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b7c:	6a22      	ldr	r2, [r4, #32]
 8003b7e:	69e3      	ldr	r3, [r4, #28]
 8003b80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b82:	4313      	orrs	r3, r2
 8003b84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003b86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b88:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003b8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003b8e:	0852      	lsrs	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	4c12      	ldr	r4, [pc, #72]	; (8003bdc <HAL_RCC_OscConfig+0x3ac>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b92:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003b96:	3a01      	subs	r2, #1
 8003b98:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003b9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ba0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ba2:	682b      	ldr	r3, [r5, #0]
 8003ba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003baa:	f7fe fdcb 	bl	8002744 <HAL_GetTick>
 8003bae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb0:	e005      	b.n	8003bbe <HAL_RCC_OscConfig+0x38e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fe fdc7 	bl	8002744 <HAL_GetTick>
 8003bb6:	1b40      	subs	r0, r0, r5
 8003bb8:	2802      	cmp	r0, #2
 8003bba:	f63f af5b 	bhi.w	8003a74 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	019a      	lsls	r2, r3, #6
 8003bc2:	d5f6      	bpl.n	8003bb2 <HAL_RCC_OscConfig+0x382>
 8003bc4:	e6f2      	b.n	80039ac <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e658      	b.n	8003888 <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 8003bd6:	2001      	movs	r0, #1
}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800

08003be0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003be0:	b178      	cbz	r0, 8003c02 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be2:	4a53      	ldr	r2, [pc, #332]	; (8003d30 <HAL_RCC_ClockConfig+0x150>)
 8003be4:	6813      	ldr	r3, [r2, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	428b      	cmp	r3, r1
 8003bec:	d20b      	bcs.n	8003c06 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	6813      	ldr	r3, [r2, #0]
 8003bf0:	f023 030f 	bic.w	r3, r3, #15
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf8:	6813      	ldr	r3, [r2, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	4299      	cmp	r1, r3
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8003c02:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8003c04:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c06:	6803      	ldr	r3, [r0, #0]
 8003c08:	079a      	lsls	r2, r3, #30
{
 8003c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c0e:	d506      	bpl.n	8003c1e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4c48      	ldr	r4, [pc, #288]	; (8003d34 <HAL_RCC_ClockConfig+0x154>)
 8003c12:	6885      	ldr	r5, [r0, #8]
 8003c14:	68a2      	ldr	r2, [r4, #8]
 8003c16:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c1a:	432a      	orrs	r2, r5
 8003c1c:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1e:	07db      	lsls	r3, r3, #31
 8003c20:	4604      	mov	r4, r0
 8003c22:	460d      	mov	r5, r1
 8003c24:	d521      	bpl.n	8003c6a <HAL_RCC_ClockConfig+0x8a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c28:	4b42      	ldr	r3, [pc, #264]	; (8003d34 <HAL_RCC_ClockConfig+0x154>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2e:	d07b      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x148>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c30:	2a02      	cmp	r2, #2
 8003c32:	d071      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	0798      	lsls	r0, r3, #30
 8003c36:	d528      	bpl.n	8003c8a <HAL_RCC_ClockConfig+0xaa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c38:	493e      	ldr	r1, [pc, #248]	; (8003d34 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3e:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c40:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003c4a:	f7fe fd7b 	bl	8002744 <HAL_GetTick>
 8003c4e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c50:	e004      	b.n	8003c5c <HAL_RCC_ClockConfig+0x7c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c52:	f7fe fd77 	bl	8002744 <HAL_GetTick>
 8003c56:	1bc0      	subs	r0, r0, r7
 8003c58:	4540      	cmp	r0, r8
 8003c5a:	d862      	bhi.n	8003d22 <HAL_RCC_ClockConfig+0x142>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5c:	68b3      	ldr	r3, [r6, #8]
 8003c5e:	6862      	ldr	r2, [r4, #4]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c68:	d1f3      	bne.n	8003c52 <HAL_RCC_ClockConfig+0x72>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c6a:	4a31      	ldr	r2, [pc, #196]	; (8003d30 <HAL_RCC_ClockConfig+0x150>)
 8003c6c:	6813      	ldr	r3, [r2, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	429d      	cmp	r5, r3
 8003c74:	d20c      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	f023 030f 	bic.w	r3, r3, #15
 8003c7c:	432b      	orrs	r3, r5
 8003c7e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c80:	6813      	ldr	r3, [r2, #0]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	429d      	cmp	r5, r3
 8003c88:	d002      	beq.n	8003c90 <HAL_RCC_ClockConfig+0xb0>
    return HAL_ERROR;
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	0759      	lsls	r1, r3, #29
 8003c94:	d506      	bpl.n	8003ca4 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c96:	4927      	ldr	r1, [pc, #156]	; (8003d34 <HAL_RCC_ClockConfig+0x154>)
 8003c98:	68e0      	ldr	r0, [r4, #12]
 8003c9a:	688a      	ldr	r2, [r1, #8]
 8003c9c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003ca0:	4302      	orrs	r2, r0
 8003ca2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca4:	071a      	lsls	r2, r3, #28
 8003ca6:	d507      	bpl.n	8003cb8 <HAL_RCC_ClockConfig+0xd8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ca8:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <HAL_RCC_ClockConfig+0x154>)
 8003caa:	6921      	ldr	r1, [r4, #16]
 8003cac:	6893      	ldr	r3, [r2, #8]
 8003cae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003cb2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003cb6:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb8:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <HAL_RCC_ClockConfig+0x154>)
 8003cba:	6893      	ldr	r3, [r2, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d027      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x134>
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d12a      	bne.n	8003d1e <HAL_RCC_ClockConfig+0x13e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc8:	6851      	ldr	r1, [r2, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cca:	6850      	ldr	r0, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ccc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003cd0:	6852      	ldr	r2, [r2, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cd2:	0243      	lsls	r3, r0, #9
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003cd4:	f3c2 1288 	ubfx	r2, r2, #6, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003cd8:	bf4c      	ite	mi
 8003cda:	4b17      	ldrmi	r3, [pc, #92]	; (8003d38 <HAL_RCC_ClockConfig+0x158>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003cdc:	4b17      	ldrpl	r3, [pc, #92]	; (8003d3c <HAL_RCC_ClockConfig+0x15c>)
 8003cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ce2:	fb03 f302 	mul.w	r3, r3, r2
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003ce6:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <HAL_RCC_ClockConfig+0x154>)
 8003ce8:	6852      	ldr	r2, [r2, #4]
 8003cea:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8003cee:	3201      	adds	r2, #1
 8003cf0:	0052      	lsls	r2, r2, #1
      
      sysclockfreq = pllvco/pllp;
 8003cf2:	fbb3 f3f2 	udiv	r3, r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cf6:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <HAL_RCC_ClockConfig+0x154>)
  HAL_InitTick (TICK_INT_PRIORITY);
 8003cf8:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cfa:	4c11      	ldr	r4, [pc, #68]	; (8003d40 <HAL_RCC_ClockConfig+0x160>)
 8003cfc:	6892      	ldr	r2, [r2, #8]
 8003cfe:	4911      	ldr	r1, [pc, #68]	; (8003d44 <HAL_RCC_ClockConfig+0x164>)
 8003d00:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003d04:	5ca2      	ldrb	r2, [r4, r2]
 8003d06:	40d3      	lsrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d0a:	f7fe f919 	bl	8001f40 <HAL_InitTick>
  return HAL_OK;
 8003d0e:	2000      	movs	r0, #0
 8003d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <HAL_RCC_ClockConfig+0x158>)
 8003d16:	e7ee      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x116>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d18:	019e      	lsls	r6, r3, #6
 8003d1a:	d48d      	bmi.n	8003c38 <HAL_RCC_ClockConfig+0x58>
 8003d1c:	e7b5      	b.n	8003c8a <HAL_RCC_ClockConfig+0xaa>
      sysclockfreq = HSI_VALUE;
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_RCC_ClockConfig+0x15c>)
 8003d20:	e7e9      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x116>
        return HAL_TIMEOUT;
 8003d22:	2003      	movs	r0, #3
}
 8003d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d28:	039f      	lsls	r7, r3, #14
 8003d2a:	d485      	bmi.n	8003c38 <HAL_RCC_ClockConfig+0x58>
 8003d2c:	e7ad      	b.n	8003c8a <HAL_RCC_ClockConfig+0xaa>
 8003d2e:	bf00      	nop
 8003d30:	40023c00 	.word	0x40023c00
 8003d34:	40023800 	.word	0x40023800
 8003d38:	007a1200 	.word	0x007a1200
 8003d3c:	00f42400 	.word	0x00f42400
 8003d40:	0800805c 	.word	0x0800805c
 8003d44:	20000010 	.word	0x20000010

08003d48 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d48:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x48>)
 8003d4a:	6893      	ldr	r3, [r2, #8]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d01b      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x44>
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d117      	bne.n	8003d88 <HAL_RCC_GetSysClockFreq+0x40>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d58:	6853      	ldr	r3, [r2, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d5a:	6851      	ldr	r1, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003d60:	6852      	ldr	r2, [r2, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d62:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003d64:	bf4c      	ite	mi
 8003d66:	480b      	ldrmi	r0, [pc, #44]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x4c>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003d68:	480b      	ldrpl	r0, [pc, #44]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x50>)
 8003d6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d6e:	f3c2 1388 	ubfx	r3, r2, #6, #9
 8003d72:	fb00 f003 	mul.w	r0, r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x48>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003d82:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d86:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 8003d88:	4803      	ldr	r0, [pc, #12]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003d8a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003d8c:	4801      	ldr	r0, [pc, #4]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003d8e:	4770      	bx	lr
 8003d90:	40023800 	.word	0x40023800
 8003d94:	007a1200 	.word	0x007a1200
 8003d98:	00f42400 	.word	0x00f42400

08003d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003d9c:	4b01      	ldr	r3, [pc, #4]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000010 	.word	0x20000010

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x14>)
 8003daa:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003dac:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003dae:	4905      	ldr	r1, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003db4:	6808      	ldr	r0, [r1, #0]
 8003db6:	5cd3      	ldrb	r3, [r2, r3]
}
 8003db8:	40d8      	lsrs	r0, r3
 8003dba:	4770      	bx	lr
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	0800806c 	.word	0x0800806c
 8003dc4:	20000010 	.word	0x20000010

08003dc8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x14>)
 8003dca:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003dce:	4905      	ldr	r1, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dd0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003dd4:	6808      	ldr	r0, [r1, #0]
 8003dd6:	5cd3      	ldrb	r3, [r2, r3]
} 
 8003dd8:	40d8      	lsrs	r0, r3
 8003dda:	4770      	bx	lr
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	0800806c 	.word	0x0800806c
 8003de4:	20000010 	.word	0x20000010

08003de8 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dea:	220f      	movs	r2, #15
 8003dec:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	f002 0203 	and.w	r2, r2, #3
 8003df4:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003dfc:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003e04:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	08db      	lsrs	r3, r3, #3
{
 8003e0a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e0c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003e10:	4c05      	ldr	r4, [pc, #20]	; (8003e28 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e12:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003e14:	6823      	ldr	r3, [r4, #0]
}
 8003e16:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	600b      	str	r3, [r1, #0]
}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40023c00 	.word	0x40023c00

08003e2c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e2c:	6803      	ldr	r3, [r0, #0]
{
 8003e2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e32:	f013 0501 	ands.w	r5, r3, #1
{
 8003e36:	b083      	sub	sp, #12
 8003e38:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e3a:	d00b      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e3c:	4a9d      	ldr	r2, [pc, #628]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e3e:	6891      	ldr	r1, [r2, #8]
 8003e40:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003e44:	6091      	str	r1, [r2, #8]
 8003e46:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8003e48:	6891      	ldr	r1, [r2, #8]
 8003e4a:	4329      	orrs	r1, r5
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e4c:	fab5 f585 	clz	r5, r5
 8003e50:	096d      	lsrs	r5, r5, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e52:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e54:	f413 2600 	ands.w	r6, r3, #524288	; 0x80000
 8003e58:	d010      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e5a:	4996      	ldr	r1, [pc, #600]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e5c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8003e5e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e62:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e66:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003e6a:	ea42 0206 	orr.w	r2, r2, r6
 8003e6e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e72:	f000 81c0 	beq.w	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e76:	fab6 f686 	clz	r6, r6
 8003e7a:	0976      	lsrs	r6, r6, #5
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e7c:	02d9      	lsls	r1, r3, #11
 8003e7e:	d510      	bpl.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e80:	488c      	ldr	r0, [pc, #560]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e84:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e88:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e8c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003e90:	ea42 0201 	orr.w	r2, r2, r1
 8003e94:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e98:	f000 81ab 	beq.w	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8003e9c:	2900      	cmp	r1, #0
 8003e9e:	bf08      	it	eq
 8003ea0:	2601      	moveq	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8003ea2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003ea6:	bf18      	it	ne
 8003ea8:	2501      	movne	r5, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eaa:	069a      	lsls	r2, r3, #26
 8003eac:	f100 815a 	bmi.w	8004164 <HAL_RCCEx_PeriphCLKConfig+0x338>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eb0:	06da      	lsls	r2, r3, #27
 8003eb2:	d50c      	bpl.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eb4:	4a7f      	ldr	r2, [pc, #508]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003eb6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003eba:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003ebe:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003ec2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003ec6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003ec8:	4301      	orrs	r1, r0
 8003eca:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ece:	045f      	lsls	r7, r3, #17
 8003ed0:	d508      	bpl.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ed2:	4978      	ldr	r1, [pc, #480]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ed4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003ed6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003eda:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003ede:	4302      	orrs	r2, r0
 8003ee0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee4:	0418      	lsls	r0, r3, #16
 8003ee6:	d508      	bpl.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ee8:	4972      	ldr	r1, [pc, #456]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003eea:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003eec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ef0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003ef4:	4302      	orrs	r2, r0
 8003ef6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003efa:	03d9      	lsls	r1, r3, #15
 8003efc:	d508      	bpl.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003efe:	496d      	ldr	r1, [pc, #436]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f00:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003f02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f06:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003f0a:	4302      	orrs	r2, r0
 8003f0c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f10:	039a      	lsls	r2, r3, #14
 8003f12:	d508      	bpl.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f14:	4967      	ldr	r1, [pc, #412]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f16:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003f18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f1c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003f20:	4302      	orrs	r2, r0
 8003f22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f26:	065f      	lsls	r7, r3, #25
 8003f28:	d508      	bpl.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f2a:	4962      	ldr	r1, [pc, #392]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f2c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003f2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f32:	f022 0203 	bic.w	r2, r2, #3
 8003f36:	4302      	orrs	r2, r0
 8003f38:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f3c:	0618      	lsls	r0, r3, #24
 8003f3e:	d508      	bpl.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f40:	495c      	ldr	r1, [pc, #368]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f42:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003f44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f48:	f022 020c 	bic.w	r2, r2, #12
 8003f4c:	4302      	orrs	r2, r0
 8003f4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f52:	05d9      	lsls	r1, r3, #23
 8003f54:	d508      	bpl.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f56:	4957      	ldr	r1, [pc, #348]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f58:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003f5a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f5e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003f62:	4302      	orrs	r2, r0
 8003f64:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f68:	059a      	lsls	r2, r3, #22
 8003f6a:	d508      	bpl.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f6c:	4951      	ldr	r1, [pc, #324]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f6e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003f70:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f74:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f78:	4302      	orrs	r2, r0
 8003f7a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f7e:	055f      	lsls	r7, r3, #21
 8003f80:	d508      	bpl.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f82:	494c      	ldr	r1, [pc, #304]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f86:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f8e:	4302      	orrs	r2, r0
 8003f90:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f94:	0518      	lsls	r0, r3, #20
 8003f96:	d508      	bpl.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f98:	4946      	ldr	r1, [pc, #280]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003fa0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fa4:	4302      	orrs	r2, r0
 8003fa6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003faa:	04d9      	lsls	r1, r3, #19
 8003fac:	d508      	bpl.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003fae:	4941      	ldr	r1, [pc, #260]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003fb0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003fb2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003fb6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003fba:	4302      	orrs	r2, r0
 8003fbc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fc0:	049a      	lsls	r2, r3, #18
 8003fc2:	d508      	bpl.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fc4:	493b      	ldr	r1, [pc, #236]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003fc6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003fc8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003fcc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003fd0:	4302      	orrs	r2, r0
 8003fd2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fd6:	025f      	lsls	r7, r3, #9
 8003fd8:	d508      	bpl.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fda:	4936      	ldr	r1, [pc, #216]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003fdc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003fde:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003fe2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003fe6:	4302      	orrs	r2, r0
 8003fe8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fec:	0298      	lsls	r0, r3, #10
 8003fee:	d50c      	bpl.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ff0:	4930      	ldr	r1, [pc, #192]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ff2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003ff4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8003ff8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ffc:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8004000:	bf08      	it	eq
 8004002:	2601      	moveq	r6, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004004:	4302      	orrs	r2, r0
 8004006:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800400a:	0359      	lsls	r1, r3, #13
 800400c:	d508      	bpl.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800400e:	4929      	ldr	r1, [pc, #164]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004010:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004012:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004016:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800401a:	4302      	orrs	r2, r0
 800401c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004020:	021a      	lsls	r2, r3, #8
 8004022:	d509      	bpl.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004024:	4923      	ldr	r1, [pc, #140]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004026:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800402a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800402e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004032:	4302      	orrs	r2, r0
 8004034:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004038:	015f      	lsls	r7, r3, #5
 800403a:	d509      	bpl.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800403c:	491d      	ldr	r1, [pc, #116]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800403e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004042:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004046:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800404a:	4302      	orrs	r2, r0
 800404c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004050:	0118      	lsls	r0, r3, #4
 8004052:	d509      	bpl.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004054:	4917      	ldr	r1, [pc, #92]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004056:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800405a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800405e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004062:	4302      	orrs	r2, r0
 8004064:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004068:	00d9      	lsls	r1, r3, #3
 800406a:	d40b      	bmi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x258>
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800406c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004070:	d016      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004072:	07ea      	lsls	r2, r5, #31
 8004074:	d414      	bmi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004076:	2e01      	cmp	r6, #1
 8004078:	f000 80c0 	beq.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800407c:	2000      	movs	r0, #0
}
 800407e:	b003      	add	sp, #12
 8004080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004084:	490b      	ldr	r1, [pc, #44]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800408a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800408e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8004092:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004096:	ea42 0200 	orr.w	r2, r2, r0
 800409a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800409e:	d1e8      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_PLLI2S_DISABLE();  
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80040a2:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040a4:	461d      	mov	r5, r3
    __HAL_RCC_PLLI2S_DISABLE();  
 80040a6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80040aa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80040ac:	f7fe fb4a 	bl	8002744 <HAL_GetTick>
 80040b0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040b2:	e006      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80040b4:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040b8:	f7fe fb44 	bl	8002744 <HAL_GetTick>
 80040bc:	1bc0      	subs	r0, r0, r7
 80040be:	2864      	cmp	r0, #100	; 0x64
 80040c0:	d84c      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x330>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040c2:	682b      	ldr	r3, [r5, #0]
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	d4f7      	bmi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	07df      	lsls	r7, r3, #31
 80040cc:	d503      	bpl.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80040ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	f000 80e1 	beq.w	8004298 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040d6:	031d      	lsls	r5, r3, #12
 80040d8:	d504      	bpl.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80040da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80040dc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80040e0:	f000 8105 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80040e4:	02d8      	lsls	r0, r3, #11
 80040e6:	d504      	bpl.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80040e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040ea:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80040ee:	f000 80fe 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040f2:	01d9      	lsls	r1, r3, #7
 80040f4:	d511      	bpl.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040f6:	4d9a      	ldr	r5, [pc, #616]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040f8:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040fa:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040fe:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004102:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004106:	6921      	ldr	r1, [r4, #16]
 8004108:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800410c:	433a      	orrs	r2, r7
 800410e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004112:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004116:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800411a:	019a      	lsls	r2, r3, #6
 800411c:	d50d      	bpl.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	6862      	ldr	r2, [r4, #4]
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	68e0      	ldr	r0, [r4, #12]
 8004126:	68a1      	ldr	r1, [r4, #8]
 8004128:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800412c:	4a8c      	ldr	r2, [pc, #560]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800412e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004132:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004136:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800413a:	4b89      	ldr	r3, [pc, #548]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800413c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800413e:	461d      	mov	r5, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8004140:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004144:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004146:	f7fe fafd 	bl	8002744 <HAL_GetTick>
 800414a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	d491      	bmi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004152:	f7fe faf7 	bl	8002744 <HAL_GetTick>
 8004156:	1bc0      	subs	r0, r0, r7
 8004158:	2864      	cmp	r0, #100	; 0x64
 800415a:	d9f7      	bls.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x320>
        return HAL_TIMEOUT;
 800415c:	2003      	movs	r0, #3
}
 800415e:	b003      	add	sp, #12
 8004160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004164:	4a7e      	ldr	r2, [pc, #504]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 8004166:	4b7f      	ldr	r3, [pc, #508]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004168:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800416a:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800416c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004170:	6411      	str	r1, [r2, #64]	; 0x40
 8004172:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004174:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004178:	9201      	str	r2, [sp, #4]
 800417a:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004182:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004184:	f7fe fade 	bl	8002744 <HAL_GetTick>
 8004188:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800418a:	e005      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x36c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418c:	f7fe fada 	bl	8002744 <HAL_GetTick>
 8004190:	eba0 0008 	sub.w	r0, r0, r8
 8004194:	2864      	cmp	r0, #100	; 0x64
 8004196:	d8e1      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	05db      	lsls	r3, r3, #23
 800419c:	d5f6      	bpl.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x360>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800419e:	4a70      	ldr	r2, [pc, #448]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041a2:	6f11      	ldr	r1, [r2, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041a4:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80041a8:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 80041ac:	d010      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80041ae:	4281      	cmp	r1, r0
 80041b0:	d00e      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b2:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80041b4:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ba:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 80041be:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041c0:	6f17      	ldr	r7, [r2, #112]	; 0x70
 80041c2:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 80041c6:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80041c8:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041ca:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80041cc:	07cf      	lsls	r7, r1, #31
 80041ce:	d479      	bmi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d0:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80041d4:	f000 80a7 	beq.w	8004326 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80041d8:	4961      	ldr	r1, [pc, #388]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80041da:	688a      	ldr	r2, [r1, #8]
 80041dc:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80041e0:	608a      	str	r2, [r1, #8]
 80041e2:	4a5f      	ldr	r2, [pc, #380]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80041e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80041ea:	430b      	orrs	r3, r1
 80041ec:	6713      	str	r3, [r2, #112]	; 0x70
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	e65e      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1; 
 80041f2:	2501      	movs	r5, #1
 80041f4:	e655      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 80041f6:	2600      	movs	r6, #0
      plli2sused = 1; 
 80041f8:	2501      	movs	r5, #1
 80041fa:	e63f      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE(); 
 80041fc:	4b58      	ldr	r3, [pc, #352]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80041fe:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004200:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE(); 
 8004202:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004206:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004208:	f7fe fa9c 	bl	8002744 <HAL_GetTick>
 800420c:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800420e:	e004      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004210:	f7fe fa98 	bl	8002744 <HAL_GetTick>
 8004214:	1b80      	subs	r0, r0, r6
 8004216:	2864      	cmp	r0, #100	; 0x64
 8004218:	d8a0      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x330>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800421a:	682b      	ldr	r3, [r5, #0]
 800421c:	009f      	lsls	r7, r3, #2
 800421e:	d4f7      	bmi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004220:	6822      	ldr	r2, [r4, #0]
 8004222:	0310      	lsls	r0, r2, #12
 8004224:	d44a      	bmi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x490>
 8004226:	02d1      	lsls	r1, r2, #11
 8004228:	d51d      	bpl.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800422a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800422c:	b9db      	cbnz	r3, 8004266 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800422e:	494c      	ldr	r1, [pc, #304]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004230:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004232:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004236:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800423a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800423e:	69a0      	ldr	r0, [r4, #24]
 8004240:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8004244:	4333      	orrs	r3, r6
 8004246:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800424a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004252:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8004256:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004258:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800425c:	3801      	subs	r0, #1
 800425e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004262:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004266:	0292      	lsls	r2, r2, #10
 8004268:	d503      	bpl.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800426a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800426c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004270:	d062      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    __HAL_RCC_PLLSAI_ENABLE();
 8004272:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004274:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004276:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8004278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800427c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800427e:	f7fe fa61 	bl	8002744 <HAL_GetTick>
 8004282:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	f53f aef8 	bmi.w	800407c <HAL_RCCEx_PeriphCLKConfig+0x250>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800428c:	f7fe fa5a 	bl	8002744 <HAL_GetTick>
 8004290:	1b40      	subs	r0, r0, r5
 8004292:	2864      	cmp	r0, #100	; 0x64
 8004294:	d9f6      	bls.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004296:	e761      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x330>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004298:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800429c:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042a0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80042a4:	6860      	ldr	r0, [r4, #4]
 80042a6:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 80042aa:	68a1      	ldr	r1, [r4, #8]
 80042ac:	433a      	orrs	r2, r7
 80042ae:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80042b2:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80042b6:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 80042ba:	e70c      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0b5      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x402>
 80042c2:	e7b0      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c4:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80042ca:	f7fe fa3b 	bl	8002744 <HAL_GetTick>
 80042ce:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	e006      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe fa37 	bl	8002744 <HAL_GetTick>
 80042d6:	eba0 0009 	sub.w	r0, r0, r9
 80042da:	4540      	cmp	r0, r8
 80042dc:	f63f af3e 	bhi.w	800415c <HAL_RCCEx_PeriphCLKConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e2:	0799      	lsls	r1, r3, #30
 80042e4:	d5f5      	bpl.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80042e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042e8:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80042ec:	e770      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042ee:	4d1c      	ldr	r5, [pc, #112]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042f0:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042f2:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042f6:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042fa:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80042fe:	68e1      	ldr	r1, [r4, #12]
 8004300:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8004304:	433a      	orrs	r2, r7
 8004306:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800430a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800430e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8004312:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8004316:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004318:	f021 011f 	bic.w	r1, r1, #31
 800431c:	3a01      	subs	r2, #1
 800431e:	430a      	orrs	r2, r1
 8004320:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8004324:	e6e5      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004326:	480e      	ldr	r0, [pc, #56]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004328:	490f      	ldr	r1, [pc, #60]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800432a:	6882      	ldr	r2, [r0, #8]
 800432c:	4019      	ands	r1, r3
 800432e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004332:	430a      	orrs	r2, r1
 8004334:	6082      	str	r2, [r0, #8]
 8004336:	e754      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004338:	4a09      	ldr	r2, [pc, #36]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800433a:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800433c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004340:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004344:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004348:	6a20      	ldr	r0, [r4, #32]
 800434a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800434e:	430b      	orrs	r3, r1
 8004350:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004354:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800435c:	e789      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	40007000 	.word	0x40007000
 8004368:	0ffffcff 	.word	0x0ffffcff

0800436c <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800436c:	2800      	cmp	r0, #0
 800436e:	d05d      	beq.n	800442c <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004370:	2200      	movs	r2, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004372:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
{
 8004376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800437a:	6282      	str	r2, [r0, #40]	; 0x28
 800437c:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800437e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004382:	2b00      	cmp	r3, #0
 8004384:	d04d      	beq.n	8004422 <HAL_SPI_Init+0xb6>

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004386:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004388:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800438a:	6822      	ldr	r2, [r4, #0]
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800438c:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 8004390:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004394:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 8004398:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800439a:	bf94      	ite	ls
 800439c:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 80043a0:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 80043a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80043aa:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043ac:	d135      	bne.n	800441a <HAL_SPI_Init+0xae>
 80043ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80043b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80043b2:	b92b      	cbnz	r3, 80043c0 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b4:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80043b8:	bf8c      	ite	hi
 80043ba:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80043bc:	2301      	movls	r3, #1
 80043be:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80043c0:	68a1      	ldr	r1, [r4, #8]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043c2:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80043c6:	6863      	ldr	r3, [r4, #4]
 80043c8:	6920      	ldr	r0, [r4, #16]
 80043ca:	430b      	orrs	r3, r1
 80043cc:	6961      	ldr	r1, [r4, #20]
 80043ce:	4303      	orrs	r3, r0
 80043d0:	69a0      	ldr	r0, [r4, #24]
 80043d2:	430b      	orrs	r3, r1
 80043d4:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80043d6:	ea4f 4e10 	mov.w	lr, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80043da:	f400 7c00 	and.w	ip, r0, #512	; 0x200
 80043de:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80043e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80043e2:	f00e 0e04 	and.w	lr, lr, #4
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 80043e6:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80043e8:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80043ea:	6a21      	ldr	r1, [r4, #32]
 80043ec:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80043ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043f0:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80043f2:	ea43 030c 	orr.w	r3, r3, ip
  hspi->State     = HAL_SPI_STATE_READY;
 80043f6:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80043fa:	ea47 070e 	orr.w	r7, r7, lr
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80043fe:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004400:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004402:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004404:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004406:	69d3      	ldr	r3, [r2, #28]
 8004408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800440c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800440e:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004412:	f884 c05d 	strb.w	ip, [r4, #93]	; 0x5d
  return HAL_OK;
 8004416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800441a:	2300      	movs	r3, #0
 800441c:	461e      	mov	r6, r3
 800441e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004420:	e7c6      	b.n	80043b0 <HAL_SPI_Init+0x44>
    hspi->Lock = HAL_UNLOCKED;
 8004422:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004426:	f7fd fd29 	bl	8001e7c <HAL_SPI_MspInit>
 800442a:	e7ac      	b.n	8004386 <HAL_SPI_Init+0x1a>
    return HAL_ERROR;
 800442c:	2001      	movs	r0, #1
 800442e:	4770      	bx	lr

08004430 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004430:	2800      	cmp	r0, #0
 8004432:	f000 808d 	beq.w	8004550 <HAL_TIM_Base_Init+0x120>
{ 
 8004436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8004438:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800443c:	4604      	mov	r4, r0
 800443e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004442:	2b00      	cmp	r3, #0
 8004444:	d077      	beq.n	8004536 <HAL_TIM_Base_Init+0x106>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004446:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004448:	2302      	movs	r3, #2
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800444a:	4943      	ldr	r1, [pc, #268]	; (8004558 <HAL_TIM_Base_Init+0x128>)
 800444c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;
 8004450:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004454:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8004458:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800445a:	fab1 f181 	clz	r1, r1
 800445e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8004462:	d047      	beq.n	80044f4 <HAL_TIM_Base_Init+0xc4>
 8004464:	2900      	cmp	r1, #0
 8004466:	d145      	bne.n	80044f4 <HAL_TIM_Base_Init+0xc4>
 8004468:	483c      	ldr	r0, [pc, #240]	; (800455c <HAL_TIM_Base_Init+0x12c>)
 800446a:	4282      	cmp	r2, r0
 800446c:	d068      	beq.n	8004540 <HAL_TIM_Base_Init+0x110>
 800446e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004472:	4282      	cmp	r2, r0
 8004474:	d064      	beq.n	8004540 <HAL_TIM_Base_Init+0x110>
 8004476:	4d3a      	ldr	r5, [pc, #232]	; (8004560 <HAL_TIM_Base_Init+0x130>)
 8004478:	4e3a      	ldr	r6, [pc, #232]	; (8004564 <HAL_TIM_Base_Init+0x134>)
 800447a:	1b50      	subs	r0, r2, r5
 800447c:	42aa      	cmp	r2, r5
 800447e:	bf18      	it	ne
 8004480:	42b2      	cmpne	r2, r6
 8004482:	fab0 f080 	clz	r0, r0
 8004486:	ea4f 1050 	mov.w	r0, r0, lsr #5
 800448a:	d15f      	bne.n	800454c <HAL_TIM_Base_Init+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800448c:	4d36      	ldr	r5, [pc, #216]	; (8004568 <HAL_TIM_Base_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004492:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004494:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 8004496:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800449a:	d034      	beq.n	8004506 <HAL_TIM_Base_Init+0xd6>
 800449c:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 80044a0:	42aa      	cmp	r2, r5
 80044a2:	d030      	beq.n	8004506 <HAL_TIM_Base_Init+0xd6>
 80044a4:	4d2f      	ldr	r5, [pc, #188]	; (8004564 <HAL_TIM_Base_Init+0x134>)
 80044a6:	42aa      	cmp	r2, r5
 80044a8:	bf14      	ite	ne
 80044aa:	4605      	movne	r5, r0
 80044ac:	f040 0501 	orreq.w	r5, r0, #1
 80044b0:	bb4d      	cbnz	r5, 8004506 <HAL_TIM_Base_Init+0xd6>
 80044b2:	482e      	ldr	r0, [pc, #184]	; (800456c <HAL_TIM_Base_Init+0x13c>)
 80044b4:	4e2e      	ldr	r6, [pc, #184]	; (8004570 <HAL_TIM_Base_Init+0x140>)
 80044b6:	4282      	cmp	r2, r0
 80044b8:	bf18      	it	ne
 80044ba:	42b2      	cmpne	r2, r6
 80044bc:	bf0c      	ite	eq
 80044be:	2001      	moveq	r0, #1
 80044c0:	2000      	movne	r0, #0
 80044c2:	d047      	beq.n	8004554 <HAL_TIM_Base_Init+0x124>
 80044c4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80044c8:	4d2a      	ldr	r5, [pc, #168]	; (8004574 <HAL_TIM_Base_Init+0x144>)
 80044ca:	42aa      	cmp	r2, r5
 80044cc:	bf18      	it	ne
 80044ce:	42b2      	cmpne	r2, r6
 80044d0:	d019      	beq.n	8004506 <HAL_TIM_Base_Init+0xd6>
 80044d2:	4829      	ldr	r0, [pc, #164]	; (8004578 <HAL_TIM_Base_Init+0x148>)
 80044d4:	4282      	cmp	r2, r0
 80044d6:	d03d      	beq.n	8004554 <HAL_TIM_Base_Init+0x124>
 80044d8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80044dc:	4282      	cmp	r2, r0
 80044de:	d039      	beq.n	8004554 <HAL_TIM_Base_Init+0x124>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e0:	69a1      	ldr	r1, [r4, #24]
 80044e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e8:	430b      	orrs	r3, r1
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80044ea:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80044ec:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ee:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80044f0:	6291      	str	r1, [r2, #40]	; 0x28
 80044f2:	e017      	b.n	8004524 <HAL_TIM_Base_Init+0xf4>
 80044f4:	481a      	ldr	r0, [pc, #104]	; (8004560 <HAL_TIM_Base_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044fa:	68a5      	ldr	r5, [r4, #8]
 80044fc:	1a10      	subs	r0, r2, r0
 80044fe:	432b      	orrs	r3, r5
 8004500:	fab0 f080 	clz	r0, r0
 8004504:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800450c:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450e:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004512:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004518:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800451a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800451c:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800451e:	6296      	str	r6, [r2, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004520:	b931      	cbnz	r1, 8004530 <HAL_TIM_Base_Init+0x100>
 8004522:	b928      	cbnz	r0, 8004530 <HAL_TIM_Base_Init+0x100>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004524:	2301      	movs	r3, #1
  return HAL_OK;
 8004526:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004528:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 800452a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8004530:	6963      	ldr	r3, [r4, #20]
 8004532:	6313      	str	r3, [r2, #48]	; 0x30
 8004534:	e7f6      	b.n	8004524 <HAL_TIM_Base_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;
 8004536:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800453a:	f7fd febd 	bl	80022b8 <HAL_TIM_Base_MspInit>
 800453e:	e782      	b.n	8004446 <HAL_TIM_Base_Init+0x16>
 8004540:	4807      	ldr	r0, [pc, #28]	; (8004560 <HAL_TIM_Base_Init+0x130>)
 8004542:	1a10      	subs	r0, r2, r0
 8004544:	fab0 f080 	clz	r0, r0
 8004548:	0940      	lsrs	r0, r0, #5
 800454a:	e79f      	b.n	800448c <HAL_TIM_Base_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800454c:	4608      	mov	r0, r1
 800454e:	e7a9      	b.n	80044a4 <HAL_TIM_Base_Init+0x74>
    return HAL_ERROR;
 8004550:	2001      	movs	r0, #1
 8004552:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004554:	2000      	movs	r0, #0
 8004556:	e7d6      	b.n	8004506 <HAL_TIM_Base_Init+0xd6>
 8004558:	40010000 	.word	0x40010000
 800455c:	40000400 	.word	0x40000400
 8004560:	40010400 	.word	0x40010400
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40000800 	.word	0x40000800
 800456c:	40014400 	.word	0x40014400
 8004570:	40014000 	.word	0x40014000
 8004574:	40001800 	.word	0x40001800
 8004578:	40001c00 	.word	0x40001c00

0800457c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800457c:	6803      	ldr	r3, [r0, #0]
}
 800457e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop

08004594 <HAL_TIM_PWM_MspInit>:
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop

08004598 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8004598:	2800      	cmp	r0, #0
 800459a:	f000 808d 	beq.w	80046b8 <HAL_TIM_PWM_Init+0x120>
{
 800459e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80045a0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80045a4:	4604      	mov	r4, r0
 80045a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d077      	beq.n	800469e <HAL_TIM_PWM_Init+0x106>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80045ae:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;  
 80045b0:	2302      	movs	r3, #2
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80045b2:	4943      	ldr	r1, [pc, #268]	; (80046c0 <HAL_TIM_PWM_Init+0x128>)
 80045b4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;  
 80045b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80045bc:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 80045c0:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80045c2:	fab1 f181 	clz	r1, r1
 80045c6:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80045ca:	d047      	beq.n	800465c <HAL_TIM_PWM_Init+0xc4>
 80045cc:	2900      	cmp	r1, #0
 80045ce:	d145      	bne.n	800465c <HAL_TIM_PWM_Init+0xc4>
 80045d0:	483c      	ldr	r0, [pc, #240]	; (80046c4 <HAL_TIM_PWM_Init+0x12c>)
 80045d2:	4282      	cmp	r2, r0
 80045d4:	d068      	beq.n	80046a8 <HAL_TIM_PWM_Init+0x110>
 80045d6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80045da:	4282      	cmp	r2, r0
 80045dc:	d064      	beq.n	80046a8 <HAL_TIM_PWM_Init+0x110>
 80045de:	4d3a      	ldr	r5, [pc, #232]	; (80046c8 <HAL_TIM_PWM_Init+0x130>)
 80045e0:	4e3a      	ldr	r6, [pc, #232]	; (80046cc <HAL_TIM_PWM_Init+0x134>)
 80045e2:	1b50      	subs	r0, r2, r5
 80045e4:	42aa      	cmp	r2, r5
 80045e6:	bf18      	it	ne
 80045e8:	42b2      	cmpne	r2, r6
 80045ea:	fab0 f080 	clz	r0, r0
 80045ee:	ea4f 1050 	mov.w	r0, r0, lsr #5
 80045f2:	d15f      	bne.n	80046b4 <HAL_TIM_PWM_Init+0x11c>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80045f4:	4d36      	ldr	r5, [pc, #216]	; (80046d0 <HAL_TIM_PWM_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045fa:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80045fc:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 80045fe:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004602:	d034      	beq.n	800466e <HAL_TIM_PWM_Init+0xd6>
 8004604:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 8004608:	42aa      	cmp	r2, r5
 800460a:	d030      	beq.n	800466e <HAL_TIM_PWM_Init+0xd6>
 800460c:	4d2f      	ldr	r5, [pc, #188]	; (80046cc <HAL_TIM_PWM_Init+0x134>)
 800460e:	42aa      	cmp	r2, r5
 8004610:	bf14      	ite	ne
 8004612:	4605      	movne	r5, r0
 8004614:	f040 0501 	orreq.w	r5, r0, #1
 8004618:	bb4d      	cbnz	r5, 800466e <HAL_TIM_PWM_Init+0xd6>
 800461a:	482e      	ldr	r0, [pc, #184]	; (80046d4 <HAL_TIM_PWM_Init+0x13c>)
 800461c:	4e2e      	ldr	r6, [pc, #184]	; (80046d8 <HAL_TIM_PWM_Init+0x140>)
 800461e:	4282      	cmp	r2, r0
 8004620:	bf18      	it	ne
 8004622:	42b2      	cmpne	r2, r6
 8004624:	bf0c      	ite	eq
 8004626:	2001      	moveq	r0, #1
 8004628:	2000      	movne	r0, #0
 800462a:	d047      	beq.n	80046bc <HAL_TIM_PWM_Init+0x124>
 800462c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004630:	4d2a      	ldr	r5, [pc, #168]	; (80046dc <HAL_TIM_PWM_Init+0x144>)
 8004632:	42aa      	cmp	r2, r5
 8004634:	bf18      	it	ne
 8004636:	42b2      	cmpne	r2, r6
 8004638:	d019      	beq.n	800466e <HAL_TIM_PWM_Init+0xd6>
 800463a:	4829      	ldr	r0, [pc, #164]	; (80046e0 <HAL_TIM_PWM_Init+0x148>)
 800463c:	4282      	cmp	r2, r0
 800463e:	d03d      	beq.n	80046bc <HAL_TIM_PWM_Init+0x124>
 8004640:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004644:	4282      	cmp	r2, r0
 8004646:	d039      	beq.n	80046bc <HAL_TIM_PWM_Init+0x124>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004648:	69a1      	ldr	r1, [r4, #24]
 800464a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004650:	430b      	orrs	r3, r1
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004652:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004654:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004656:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004658:	6291      	str	r1, [r2, #40]	; 0x28
 800465a:	e017      	b.n	800468c <HAL_TIM_PWM_Init+0xf4>
 800465c:	481a      	ldr	r0, [pc, #104]	; (80046c8 <HAL_TIM_PWM_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004662:	68a5      	ldr	r5, [r4, #8]
 8004664:	1a10      	subs	r0, r2, r0
 8004666:	432b      	orrs	r3, r5
 8004668:	fab0 f080 	clz	r0, r0
 800466c:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004674:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004676:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004678:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800467a:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004680:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004682:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004684:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004686:	6296      	str	r6, [r2, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004688:	b931      	cbnz	r1, 8004698 <HAL_TIM_PWM_Init+0x100>
 800468a:	b928      	cbnz	r0, 8004698 <HAL_TIM_PWM_Init+0x100>
  TIMx->EGR = TIM_EGR_UG;
 800468c:	2301      	movs	r3, #1
  return HAL_OK;
 800468e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004690:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 8004692:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8004698:	6963      	ldr	r3, [r4, #20]
 800469a:	6313      	str	r3, [r2, #48]	; 0x30
 800469c:	e7f6      	b.n	800468c <HAL_TIM_PWM_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;  
 800469e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80046a2:	f7ff ff77 	bl	8004594 <HAL_TIM_PWM_MspInit>
 80046a6:	e782      	b.n	80045ae <HAL_TIM_PWM_Init+0x16>
 80046a8:	4807      	ldr	r0, [pc, #28]	; (80046c8 <HAL_TIM_PWM_Init+0x130>)
 80046aa:	1a10      	subs	r0, r2, r0
 80046ac:	fab0 f080 	clz	r0, r0
 80046b0:	0940      	lsrs	r0, r0, #5
 80046b2:	e79f      	b.n	80045f4 <HAL_TIM_PWM_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80046b4:	4608      	mov	r0, r1
 80046b6:	e7a9      	b.n	800460c <HAL_TIM_PWM_Init+0x74>
    return HAL_ERROR;
 80046b8:	2001      	movs	r0, #1
 80046ba:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80046bc:	2000      	movs	r0, #0
 80046be:	e7d6      	b.n	800466e <HAL_TIM_PWM_Init+0xd6>
 80046c0:	40010000 	.word	0x40010000
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40010400 	.word	0x40010400
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014000 	.word	0x40014000
 80046dc:	40001800 	.word	0x40001800
 80046e0:	40001c00 	.word	0x40001c00

080046e4 <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046e4:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80046e6:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046e8:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80046ea:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80046ee:	ea20 0001 	bic.w	r0, r0, r1
{
 80046f2:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 80046f4:	6218      	str	r0, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80046f6:	4c0b      	ldr	r4, [pc, #44]	; (8004724 <HAL_TIM_PWM_Start+0x40>)

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80046f8:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80046fa:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80046fc:	ea41 0102 	orr.w	r1, r1, r2
 8004700:	6219      	str	r1, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8004702:	d00a      	beq.n	800471a <HAL_TIM_PWM_Start+0x36>
 8004704:	4a08      	ldr	r2, [pc, #32]	; (8004728 <HAL_TIM_PWM_Start+0x44>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <HAL_TIM_PWM_Start+0x36>
  __HAL_TIM_ENABLE(htim);
 800470a:	681a      	ldr	r2, [r3, #0]
} 
 800470c:	2000      	movs	r0, #0
 800470e:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_TIM_ENABLE(htim);
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]
} 
 8004718:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 800471a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004720:	645a      	str	r2, [r3, #68]	; 0x44
 8004722:	e7f2      	b.n	800470a <HAL_TIM_PWM_Start+0x26>
 8004724:	40010000 	.word	0x40010000
 8004728:	40010400 	.word	0x40010400

0800472c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800472c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d03f      	beq.n	80047b4 <HAL_TIM_ConfigClockSource+0x88>
  tmpsmcr = htim->Instance->SMCR;
 8004734:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004736:	4a5e      	ldr	r2, [pc, #376]	; (80048b0 <HAL_TIM_ConfigClockSource+0x184>)
{
 8004738:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800473a:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 800473c:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800473e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  switch (sClockSourceConfig->ClockSource)
 8004742:	680c      	ldr	r4, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004744:	689e      	ldr	r6, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004746:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8004748:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474c:	ea02 0206 	and.w	r2, r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8004750:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004752:	d076      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x116>
 8004754:	d918      	bls.n	8004788 <HAL_TIM_ConfigClockSource+0x5c>
 8004756:	2c70      	cmp	r4, #112	; 0x70
 8004758:	d061      	beq.n	800481e <HAL_TIM_ConfigClockSource+0xf2>
 800475a:	d92e      	bls.n	80047ba <HAL_TIM_ConfigClockSource+0x8e>
 800475c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004760:	d058      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0xe8>
 8004762:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8004766:	d11c      	bne.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004768:	688a      	ldr	r2, [r1, #8]
 800476a:	684d      	ldr	r5, [r1, #4]
 800476c:	68cc      	ldr	r4, [r1, #12]
 800476e:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 8004770:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004772:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004776:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800477a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800477c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004784:	609a      	str	r2, [r3, #8]
    break;
 8004786:	e00c      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8004788:	2c10      	cmp	r4, #16
 800478a:	d033      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0xc8>
 800478c:	d939      	bls.n	8004802 <HAL_TIM_ConfigClockSource+0xd6>
 800478e:	2c20      	cmp	r4, #32
 8004790:	d06f      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x146>
 8004792:	2c30      	cmp	r4, #48	; 0x30
 8004794:	d105      	bne.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 8004796:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004798:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800479c:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 80047a0:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80047a2:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80047a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80047aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80047ae:	4610      	mov	r0, r2
 80047b0:	bcf0      	pop	{r4, r5, r6, r7}
 80047b2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80047b4:	2302      	movs	r3, #2
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80047ba:	2c50      	cmp	r4, #80	; 0x50
 80047bc:	d060      	beq.n	8004880 <HAL_TIM_ConfigClockSource+0x154>
 80047be:	2c60      	cmp	r4, #96	; 0x60
 80047c0:	d1ef      	bne.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c2:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80047c4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c6:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80047ca:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047cc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ce:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80047d0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 80047da:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 80047de:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80047e2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e4:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80047e6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80047e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80047ec:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 80047f0:	609a      	str	r2, [r3, #8]
 80047f2:	e7d6      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 80047f4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80047f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80047fa:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	e7cf      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8004802:	2c00      	cmp	r4, #0
 8004804:	d1cd      	bne.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 8004806:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004808:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800480c:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8004810:	609a      	str	r2, [r3, #8]
 8004812:	e7c6      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004814:	6899      	ldr	r1, [r3, #8]
 8004816:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <HAL_TIM_ConfigClockSource+0x188>)
 8004818:	400a      	ands	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
    break;
 800481c:	e7c1      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800481e:	684c      	ldr	r4, [r1, #4]
 8004820:	688a      	ldr	r2, [r1, #8]
 8004822:	68cd      	ldr	r5, [r1, #12]
 8004824:	4322      	orrs	r2, r4
  tmpsmcr = TIMx->SMCR;
 8004826:	689c      	ldr	r4, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004828:	4923      	ldr	r1, [pc, #140]	; (80048b8 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800482a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800482e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004832:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8004834:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004836:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004838:	4011      	ands	r1, r2
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800483a:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800483e:	6099      	str	r1, [r3, #8]
    break;
 8004840:	e7af      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 8004842:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004844:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004846:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004848:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800484c:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004850:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8004852:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004854:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8004856:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004858:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800485c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004862:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8004864:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004866:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800486a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	e797      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 8004872:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004874:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004878:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 800487c:	609a      	str	r2, [r3, #8]
 800487e:	e790      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 8004880:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004882:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004884:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004886:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488a:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800488e:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8004890:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8004894:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004896:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800489a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800489e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a0:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80048a2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80048a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80048a8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 80048ac:	609a      	str	r2, [r3, #8]
 80048ae:	e778      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x76>
 80048b0:	fffe0088 	.word	0xfffe0088
 80048b4:	fffefff8 	.word	0xfffefff8
 80048b8:	fffeff88 	.word	0xfffeff88

080048bc <HAL_TIM_OC_DelayElapsedCallback>:
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop

080048c0 <HAL_TIM_IC_CaptureCallback>:
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop

080048c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop

080048c8 <HAL_TIM_TriggerCallback>:
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop

080048cc <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048cc:	6803      	ldr	r3, [r0, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	0791      	lsls	r1, r2, #30
{
 80048d2:	b510      	push	{r4, lr}
 80048d4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048d6:	d502      	bpl.n	80048de <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	0792      	lsls	r2, r2, #30
 80048dc:	d465      	bmi.n	80049aa <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	0752      	lsls	r2, r2, #29
 80048e2:	d502      	bpl.n	80048ea <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	0750      	lsls	r0, r2, #29
 80048e8:	d44c      	bmi.n	8004984 <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	0711      	lsls	r1, r2, #28
 80048ee:	d502      	bpl.n	80048f6 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	0712      	lsls	r2, r2, #28
 80048f4:	d434      	bmi.n	8004960 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	06d0      	lsls	r0, r2, #27
 80048fa:	d502      	bpl.n	8004902 <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	06d1      	lsls	r1, r2, #27
 8004900:	d41e      	bmi.n	8004940 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	07d2      	lsls	r2, r2, #31
 8004906:	d502      	bpl.n	800490e <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	07d0      	lsls	r0, r2, #31
 800490c:	d46b      	bmi.n	80049e6 <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	0611      	lsls	r1, r2, #24
 8004912:	d502      	bpl.n	800491a <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	0612      	lsls	r2, r2, #24
 8004918:	d46d      	bmi.n	80049f6 <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	05d0      	lsls	r0, r2, #23
 800491e:	d502      	bpl.n	8004926 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	0611      	lsls	r1, r2, #24
 8004924:	d46f      	bmi.n	8004a06 <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	0652      	lsls	r2, r2, #25
 800492a:	d502      	bpl.n	8004932 <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	0650      	lsls	r0, r2, #25
 8004930:	d451      	bmi.n	80049d6 <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	0691      	lsls	r1, r2, #26
 8004936:	d502      	bpl.n	800493e <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	0692      	lsls	r2, r2, #26
 800493c:	d443      	bmi.n	80049c6 <HAL_TIM_IRQHandler+0xfa>
 800493e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004940:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004944:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8004946:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004948:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800494a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800494c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800494e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004952:	d06c      	beq.n	8004a2e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8004954:	f7ff ffb4 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004958:	2200      	movs	r2, #0
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	7722      	strb	r2, [r4, #28]
 800495e:	e7d0      	b.n	8004902 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004960:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004964:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8004966:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004968:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800496a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800496e:	079b      	lsls	r3, r3, #30
 8004970:	d15a      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	f7ff ffa3 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004976:	4620      	mov	r0, r4
 8004978:	f7ff ffa4 	bl	80048c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497c:	2200      	movs	r2, #0
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	7722      	strb	r2, [r4, #28]
 8004982:	e7b8      	b.n	80048f6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004984:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004988:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800498a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800498c:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800498e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004990:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004992:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004996:	d144      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004998:	f7ff ff90 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff ff91 	bl	80048c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	2200      	movs	r2, #0
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	7722      	strb	r2, [r4, #28]
 80049a8:	e79f      	b.n	80048ea <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049aa:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ae:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049b0:	6119      	str	r1, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80049b2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b4:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80049b6:	0799      	lsls	r1, r3, #30
 80049b8:	d02d      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	f7ff ff81 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	2200      	movs	r2, #0
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	7722      	strb	r2, [r4, #28]
 80049c4:	e78b      	b.n	80048de <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049c6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80049ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049cc:	611a      	str	r2, [r3, #16]
}
 80049ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80049d2:	f000 b989 	b.w	8004ce8 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80049da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80049de:	f7ff ff73 	bl	80048c8 <HAL_TIM_TriggerCallback>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	e7a5      	b.n	8004932 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ee:	f7fd fa0d 	bl	8001e0c <HAL_TIM_PeriodElapsedCallback>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	e78b      	b.n	800490e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80049fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80049fe:	f000 f975 	bl	8004cec <HAL_TIMEx_BreakCallback>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	e789      	b.n	800491a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a06:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004a0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004a0e:	f000 f96d 	bl	8004cec <HAL_TIMEx_BreakCallback>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	e787      	b.n	8004926 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	f7ff ff51 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f7ff ff52 	bl	80048c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a20:	e7cd      	b.n	80049be <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	f7ff ff4d 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
 8004a26:	e7bc      	b.n	80049a2 <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a28:	f7ff ff4a 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
 8004a2c:	e7a6      	b.n	800497c <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2e:	f7ff ff45 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a32:	4620      	mov	r0, r4
 8004a34:	f7ff ff46 	bl	80048c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a38:	e78e      	b.n	8004958 <HAL_TIM_IRQHandler+0x8c>
 8004a3a:	bf00      	nop

08004a3c <TIM_OC1_SetConfig>:
{
 8004a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3e:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 8004a40:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a42:	f024 0401 	bic.w	r4, r4, #1
  tmpccmrx |= OC_Config->OCMode;
 8004a46:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a48:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4a:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004a4c:	4d13      	ldr	r5, [pc, #76]	; (8004a9c <TIM_OC1_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8004a4e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004a50:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004a52:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 8004a54:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004a58:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a5c:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= OC_Config->OCPolarity;
 8004a60:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 8004a64:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004a68:	d009      	beq.n	8004a7e <TIM_OC1_SetConfig+0x42>
 8004a6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a6e:	42a8      	cmp	r0, r5
 8004a70:	d005      	beq.n	8004a7e <TIM_OC1_SetConfig+0x42>
  TIMx->CCR1 = OC_Config->Pulse;
 8004a72:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a74:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004a76:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004a78:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8004a7a:	6203      	str	r3, [r0, #32]
 8004a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a7e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004a82:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a84:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a86:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a8a:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004a8c:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a8e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a90:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a94:	432c      	orrs	r4, r5
 8004a96:	e7ec      	b.n	8004a72 <TIM_OC1_SetConfig+0x36>
 8004a98:	fffeff8c 	.word	0xfffeff8c
 8004a9c:	40010000 	.word	0x40010000

08004aa0 <TIM_OC2_SetConfig>:
{
 8004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa2:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4);
 8004aa4:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa6:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004aaa:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aac:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aae:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004ab0:	4d14      	ldr	r5, [pc, #80]	; (8004b04 <TIM_OC2_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 8004ab2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004ab4:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004ab6:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 8004ab8:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004abc:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ac0:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 4);
 8004ac4:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004ac8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004acc:	d009      	beq.n	8004ae2 <TIM_OC2_SetConfig+0x42>
 8004ace:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ad2:	42a8      	cmp	r0, r5
 8004ad4:	d005      	beq.n	8004ae2 <TIM_OC2_SetConfig+0x42>
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004ad8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004ada:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004adc:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004ade:	6203      	str	r3, [r0, #32]
 8004ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8004ae6:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004ae8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aea:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004aee:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8004af0:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004af4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004afa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004afe:	e7ea      	b.n	8004ad6 <TIM_OC2_SetConfig+0x36>
 8004b00:	feff8cff 	.word	0xfeff8cff
 8004b04:	40010000 	.word	0x40010000

08004b08 <TIM_OC3_SetConfig>:
{
 8004b08:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8);
 8004b0c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 8004b12:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004b14:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b16:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004b18:	4d14      	ldr	r5, [pc, #80]	; (8004b6c <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 8004b1a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004b1c:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004b1e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 8004b20:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004b28:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 8);
 8004b2c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004b30:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004b34:	d009      	beq.n	8004b4a <TIM_OC3_SetConfig+0x42>
 8004b36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b3a:	42a8      	cmp	r0, r5
 8004b3c:	d005      	beq.n	8004b4a <TIM_OC3_SetConfig+0x42>
  TIMx->CCR3 = OC_Config->Pulse;
 8004b3e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b40:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004b42:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004b44:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004b46:	6203      	str	r3, [r0, #32]
 8004b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004b4e:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8004b50:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b52:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004b56:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004b58:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004b5c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004b62:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8004b66:	e7ea      	b.n	8004b3e <TIM_OC3_SetConfig+0x36>
 8004b68:	fffeff8c 	.word	0xfffeff8c
 8004b6c:	40010000 	.word	0x40010000

08004b70 <TIM_OC4_SetConfig>:
{
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b72:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12);
 8004b74:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b76:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004b7a:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b7c:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b7e:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004b80:	4d10      	ldr	r5, [pc, #64]	; (8004bc4 <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 8004b82:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004b84:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004b86:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 8004b88:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004b8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b90:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 12);
 8004b94:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004b98:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004b9c:	d009      	beq.n	8004bb2 <TIM_OC4_SetConfig+0x42>
 8004b9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ba2:	42a8      	cmp	r0, r5
 8004ba4:	d005      	beq.n	8004bb2 <TIM_OC4_SetConfig+0x42>
  TIMx->CCR4 = OC_Config->Pulse;
 8004ba6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004ba8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004baa:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004bac:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004bae:	6203      	str	r3, [r0, #32]
 8004bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bb2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8004bb6:	694d      	ldr	r5, [r1, #20]
 8004bb8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004bbc:	e7f3      	b.n	8004ba6 <TIM_OC4_SetConfig+0x36>
 8004bbe:	bf00      	nop
 8004bc0:	feff8cff 	.word	0xfeff8cff
 8004bc4:	40010000 	.word	0x40010000

08004bc8 <HAL_TIMEx_PWMN_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004bc8:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8004bca:	2204      	movs	r2, #4
} 
 8004bcc:	2000      	movs	r0, #0
  tmp = TIM_CCER_CC1NE << Channel;
 8004bce:	fa02 f101 	lsl.w	r1, r2, r1
{
 8004bd2:	b410      	push	{r4}

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8004bd4:	6a1c      	ldr	r4, [r3, #32]
 8004bd6:	ea24 0401 	bic.w	r4, r4, r1
 8004bda:	621c      	str	r4, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8004bdc:	6a1a      	ldr	r2, [r3, #32]
} 
 8004bde:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8004be2:	4311      	orrs	r1, r2
 8004be4:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8004be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004be8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bec:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
} 
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004bf8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
{
 8004bfe:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8004c00:	d01f      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  tmpcr2 = htim->Instance->CR2;
 8004c02:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c04:	4d11      	ldr	r5, [pc, #68]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 8004c06:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c08:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8004c0a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c0c:	d014      	beq.n	8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004c0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c12:	42aa      	cmp	r2, r5
 8004c14:	d010      	beq.n	8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c16:	680d      	ldr	r5, [r1, #0]
  __HAL_UNLOCK(htim);
 8004c18:	2600      	movs	r6, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c1a:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004c1c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c24:	4321      	orrs	r1, r4
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c26:	432b      	orrs	r3, r5
  return HAL_OK;
 8004c28:	4635      	mov	r5, r6
  htim->Instance->CR2 = tmpcr2;
 8004c2a:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8004c2c:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8004c2e:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
} 
 8004c32:	4628      	mov	r0, r5
 8004c34:	bc70      	pop	{r4, r5, r6}
 8004c36:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c3c:	684d      	ldr	r5, [r1, #4]
 8004c3e:	432b      	orrs	r3, r5
 8004c40:	e7e9      	b.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
  __HAL_LOCK(htim);
 8004c42:	2502      	movs	r5, #2
} 
 8004c44:	4628      	mov	r0, r5
 8004c46:	bc70      	pop	{r4, r5, r6}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40010000 	.word	0x40010000

08004c50 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8004c50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d040      	beq.n	8004cda <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c58:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c5a:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
{
 8004c60:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c62:	688d      	ldr	r5, [r1, #8]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	2402      	movs	r4, #2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c66:	680f      	ldr	r7, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c68:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c6a:	690e      	ldr	r6, [r1, #16]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c74:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c76:	6805      	ldr	r5, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004c7a:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c80:	433b      	orrs	r3, r7
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c82:	4f17      	ldr	r7, [pc, #92]	; (8004ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c88:	42bd      	cmp	r5, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c8a:	ea43 0306 	orr.w	r3, r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c8e:	694e      	ldr	r6, [r1, #20]
 8004c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c94:	ea43 0306 	orr.w	r3, r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c9c:	ea43 0304 	orr.w	r3, r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004ca0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004ca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
 8004caa:	4a0e      	ldr	r2, [pc, #56]	; (8004ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8004cac:	4295      	cmp	r5, r2
 8004cae:	d006      	beq.n	8004cbe <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
  __HAL_UNLOCK(htim);
 8004cb0:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 8004cb2:	646b      	str	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004cb4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8004cb8:	4610      	mov	r0, r2
 8004cba:	bcf0      	pop	{r4, r5, r6, r7}
 8004cbc:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004cbe:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004cc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004cc4:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004cc6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cca:	6a0a      	ldr	r2, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cd2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	e7ea      	b.n	8004cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8004cda:	2302      	movs	r3, #2
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	4770      	bx	lr
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	40010400 	.word	0x40010400

08004ce8 <HAL_TIMEx_CommutationCallback>:
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop

08004cec <HAL_TIMEx_BreakCallback>:
{
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop

08004cf0 <HAL_TIM_PWM_ConfigChannel>:
{
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004cf2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d030      	beq.n	8004d5c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8004cfa:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8004d02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004d06:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  switch (Channel)
 8004d0a:	2a14      	cmp	r2, #20
 8004d0c:	d81e      	bhi.n	8004d4c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8004d0e:	e8df f002 	tbb	[pc, r2]
 8004d12:	1d56      	.short	0x1d56
 8004d14:	1d681d1d 	.word	0x1d681d1d
 8004d18:	1d7b1d1d 	.word	0x1d7b1d1d
 8004d1c:	1d0b1d1d 	.word	0x1d0b1d1d
 8004d20:	1d8d1d1d 	.word	0x1d8d1d1d
 8004d24:	1d1d      	.short	0x1d1d
 8004d26:	27          	.byte	0x27
 8004d27:	00          	.byte	0x00
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d28:	4629      	mov	r1, r5
 8004d2a:	6800      	ldr	r0, [r0, #0]
 8004d2c:	f7ff ff20 	bl	8004b70 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d30:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004d32:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d34:	69d9      	ldr	r1, [r3, #28]
 8004d36:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004d3a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d3c:	69d9      	ldr	r1, [r3, #28]
 8004d3e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004d42:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004d44:	69da      	ldr	r2, [r3, #28]
 8004d46:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004d4a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004d4c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004d4e:	2201      	movs	r2, #1
  return HAL_OK;
 8004d50:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8004d52:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004d56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8004d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8004d5c:	2002      	movs	r0, #2
}
 8004d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d60:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8004d62:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d64:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004d66:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d68:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d6c:	494c      	ldr	r1, [pc, #304]	; (8004ea0 <HAL_TIM_PWM_ConfigChannel+0x1b0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d6e:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004d70:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8004d72:	6858      	ldr	r0, [r3, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d74:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 8004d78:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20);
 8004d7c:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004d80:	4e48      	ldr	r6, [pc, #288]	; (8004ea4 <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d82:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004d86:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004d88:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8c:	f000 8081 	beq.w	8004e92 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8004d90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d94:	42b3      	cmp	r3, r6
 8004d96:	d07c      	beq.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x1a2>
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d98:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004d9a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004d9c:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004d9e:	65de      	str	r6, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004da0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004da2:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004da4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004da6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004daa:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dae:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004db2:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004db6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004dbc:	e7c6      	b.n	8004d4c <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	6800      	ldr	r0, [r0, #0]
 8004dc2:	f7ff fe3b 	bl	8004a3c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dc6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dca:	6999      	ldr	r1, [r3, #24]
 8004dcc:	f041 0108 	orr.w	r1, r1, #8
 8004dd0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dd2:	6999      	ldr	r1, [r3, #24]
 8004dd4:	f021 0104 	bic.w	r1, r1, #4
 8004dd8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	4302      	orrs	r2, r0
 8004dde:	619a      	str	r2, [r3, #24]
    break;
 8004de0:	e7b4      	b.n	8004d4c <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004de2:	4629      	mov	r1, r5
 8004de4:	6800      	ldr	r0, [r0, #0]
 8004de6:	f7ff fe5b 	bl	8004aa0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dea:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004dec:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dee:	6999      	ldr	r1, [r3, #24]
 8004df0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004df4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df6:	6999      	ldr	r1, [r3, #24]
 8004df8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004dfc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004e04:	619a      	str	r2, [r3, #24]
    break;
 8004e06:	e7a1      	b.n	8004d4c <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e08:	4629      	mov	r1, r5
 8004e0a:	6800      	ldr	r0, [r0, #0]
 8004e0c:	f7ff fe7c 	bl	8004b08 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e10:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8004e12:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e14:	69d9      	ldr	r1, [r3, #28]
 8004e16:	f041 0108 	orr.w	r1, r1, #8
 8004e1a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e1c:	69d9      	ldr	r1, [r3, #28]
 8004e1e:	f021 0104 	bic.w	r1, r1, #4
 8004e22:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	4302      	orrs	r2, r0
 8004e28:	61da      	str	r2, [r3, #28]
    break;
 8004e2a:	e78f      	b.n	8004d4c <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e2c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16);
 8004e2e:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e30:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004e32:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e34:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e38:	491b      	ldr	r1, [pc, #108]	; (8004ea8 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e3a:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004e3c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8004e3e:	6858      	ldr	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 8004e40:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 8004e44:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16);
 8004e48:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	4e15      	ldr	r6, [pc, #84]	; (8004ea4 <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e4e:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004e52:	42b3      	cmp	r3, r6
  tmpccmrx |= OC_Config->OCMode;
 8004e54:	ea41 0107 	orr.w	r1, r1, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004e58:	d015      	beq.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x196>
 8004e5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004e5e:	42b3      	cmp	r3, r6
 8004e60:	d011      	beq.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CCR5 = OC_Config->Pulse;
 8004e62:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004e64:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004e66:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004e68:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 8004e6a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004e6e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e70:	f041 0108 	orr.w	r1, r1, #8
 8004e74:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e76:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e78:	f021 0104 	bic.w	r1, r1, #4
 8004e7c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004e7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e80:	4302      	orrs	r2, r0
 8004e82:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004e84:	e762      	b.n	8004d4c <HAL_TIM_PWM_ConfigChannel+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e86:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8004e8a:	696e      	ldr	r6, [r5, #20]
 8004e8c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8004e90:	e7e7      	b.n	8004e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e92:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8004e96:	696e      	ldr	r6, [r5, #20]
 8004e98:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004e9c:	e77c      	b.n	8004d98 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8004e9e:	bf00      	nop
 8004ea0:	feff8fff 	.word	0xfeff8fff
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	fffeff8f 	.word	0xfffeff8f

08004eac <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb0:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004eb2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8004eb6:	b082      	sub	sp, #8
  if(huart->gState == HAL_UART_STATE_READY)
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d003      	beq.n	8004ec4 <HAL_UART_Transmit+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2002      	movs	r0, #2
  }
}
 8004ebe:	b002      	add	sp, #8
 8004ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec4:	4688      	mov	r8, r1
    if((pData == NULL ) || (Size == 0U))
 8004ec6:	b391      	cbz	r1, 8004f2e <HAL_UART_Transmit+0x82>
 8004ec8:	fab2 f382 	clz	r3, r2
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	bb73      	cbnz	r3, 8004f2e <HAL_UART_Transmit+0x82>
    __HAL_LOCK(huart);
 8004ed0:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	2901      	cmp	r1, #1
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_UART_Transmit+0x10>
 8004eda:	2001      	movs	r0, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004edc:	2121      	movs	r1, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ede:	66eb      	str	r3, [r5, #108]	; 0x6c
    __HAL_LOCK(huart);
 8004ee0:	f885 0068 	strb.w	r0, [r5, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee4:	f885 1069 	strb.w	r1, [r5, #105]	; 0x69
 8004ee8:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8004eea:	f7fd fc2b 	bl	8002744 <HAL_GetTick>
    huart->TxXferSize = Size;
 8004eee:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	682c      	ldr	r4, [r5, #0]
    huart->TxXferSize = Size;
 8004ef4:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ef8:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8004efc:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	b303      	cbz	r3, 8004f46 <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 8004f04:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
 8004f10:	1c72      	adds	r2, r6, #1
 8004f12:	d125      	bne.n	8004f60 <HAL_UART_Transmit+0xb4>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f14:	69e2      	ldr	r2, [r4, #28]
 8004f16:	0613      	lsls	r3, r2, #24
 8004f18:	d5fc      	bpl.n	8004f14 <HAL_UART_Transmit+0x68>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1a:	68ab      	ldr	r3, [r5, #8]
 8004f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f20:	d03a      	beq.n	8004f98 <HAL_UART_Transmit+0xec>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004f22:	f898 3000 	ldrb.w	r3, [r8]
 8004f26:	f108 0801 	add.w	r8, r8, #1
 8004f2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f2c:	e7e6      	b.n	8004efc <HAL_UART_Transmit+0x50>
      return  HAL_ERROR;
 8004f2e:	2001      	movs	r0, #1
 8004f30:	e7c5      	b.n	8004ebe <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f32:	69e3      	ldr	r3, [r4, #28]
 8004f34:	065b      	lsls	r3, r3, #25
 8004f36:	d40b      	bmi.n	8004f50 <HAL_UART_Transmit+0xa4>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004f38:	b1e6      	cbz	r6, 8004f74 <HAL_UART_Transmit+0xc8>
 8004f3a:	f7fd fc03 	bl	8002744 <HAL_GetTick>
 8004f3e:	1bc0      	subs	r0, r0, r7
 8004f40:	682c      	ldr	r4, [r5, #0]
 8004f42:	4286      	cmp	r6, r0
 8004f44:	d916      	bls.n	8004f74 <HAL_UART_Transmit+0xc8>
 8004f46:	1c71      	adds	r1, r6, #1
 8004f48:	d1f3      	bne.n	8004f32 <HAL_UART_Transmit+0x86>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4a:	69e3      	ldr	r3, [r4, #28]
 8004f4c:	065a      	lsls	r2, r3, #25
 8004f4e:	d5fc      	bpl.n	8004f4a <HAL_UART_Transmit+0x9e>
    __HAL_UNLOCK(huart);
 8004f50:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_READY;
 8004f52:	2220      	movs	r2, #32
    return HAL_OK;
 8004f54:	4618      	mov	r0, r3
    __HAL_UNLOCK(huart);
 8004f56:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8004f5a:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
    return HAL_OK;
 8004f5e:	e7ae      	b.n	8004ebe <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f60:	69e3      	ldr	r3, [r4, #28]
 8004f62:	0618      	lsls	r0, r3, #24
 8004f64:	d4d9      	bmi.n	8004f1a <HAL_UART_Transmit+0x6e>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004f66:	b12e      	cbz	r6, 8004f74 <HAL_UART_Transmit+0xc8>
 8004f68:	f7fd fbec 	bl	8002744 <HAL_GetTick>
 8004f6c:	1bc0      	subs	r0, r0, r7
 8004f6e:	682c      	ldr	r4, [r5, #0]
 8004f70:	4286      	cmp	r6, r0
 8004f72:	d8cd      	bhi.n	8004f10 <HAL_UART_Transmit+0x64>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f74:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

        huart->gState = HAL_UART_STATE_READY;
 8004f76:	2220      	movs	r2, #32
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f78:	2100      	movs	r1, #0
      return HAL_TIMEOUT;
 8004f7a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f80:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004f8a:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8004f8e:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004f92:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
 8004f96:	e792      	b.n	8004ebe <HAL_UART_Transmit+0x12>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f98:	692b      	ldr	r3, [r5, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1c1      	bne.n	8004f22 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004f9e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa6:	62a3      	str	r3, [r4, #40]	; 0x28
        pData += 2;
 8004fa8:	e7a8      	b.n	8004efc <HAL_UART_Transmit+0x50>
 8004faa:	bf00      	nop

08004fac <HAL_UART_Receive_DMA>:
{
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8004fae:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 8004fb2:	2c20      	cmp	r4, #32
 8004fb4:	d001      	beq.n	8004fba <HAL_UART_Receive_DMA+0xe>
    return HAL_BUSY;
 8004fb6:	2002      	movs	r0, #2
}
 8004fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 8004fba:	2900      	cmp	r1, #0
 8004fbc:	d035      	beq.n	800502a <HAL_UART_Receive_DMA+0x7e>
 8004fbe:	fab2 f482 	clz	r4, r2
 8004fc2:	0964      	lsrs	r4, r4, #5
 8004fc4:	2c00      	cmp	r4, #0
 8004fc6:	d130      	bne.n	800502a <HAL_UART_Receive_DMA+0x7e>
    __HAL_LOCK(huart);
 8004fc8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d0f2      	beq.n	8004fb6 <HAL_UART_Receive_DMA+0xa>
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	4616      	mov	r6, r2
 8004fd4:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fd6:	2122      	movs	r1, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fd8:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_LOCK(huart);
 8004fda:	f04f 0e01 	mov.w	lr, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fde:	66c4      	str	r4, [r0, #108]	; 0x6c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004fe0:	4633      	mov	r3, r6
    huart->pRxBuffPtr = pData;
 8004fe2:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8004fe4:	f8a0 6058 	strh.w	r6, [r0, #88]	; 0x58
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004fe8:	4638      	mov	r0, r7
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fea:	f885 106a 	strb.w	r1, [r5, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fee:	4e10      	ldr	r6, [pc, #64]	; (8005030 <HAL_UART_Receive_DMA+0x84>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ff0:	4910      	ldr	r1, [pc, #64]	; (8005034 <HAL_UART_Receive_DMA+0x88>)
    __HAL_LOCK(huart);
 8004ff2:	f885 e068 	strb.w	lr, [r5, #104]	; 0x68
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ff6:	63fe      	str	r6, [r7, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ff8:	6439      	str	r1, [r7, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ffa:	4e0f      	ldr	r6, [pc, #60]	; (8005038 <HAL_UART_Receive_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004ffc:	6829      	ldr	r1, [r5, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8004ffe:	653c      	str	r4, [r7, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005000:	64fe      	str	r6, [r7, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8005002:	3124      	adds	r1, #36	; 0x24
 8005004:	f7fd feb6 	bl	8002d74 <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005008:	682b      	ldr	r3, [r5, #0]
    __HAL_UNLOCK(huart);
 800500a:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
    return HAL_OK;
 800500e:	4620      	mov	r0, r4
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005016:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005026:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8005028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800502a:	2001      	movs	r0, #1
 800502c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800502e:	bf00      	nop
 8005030:	080050b1 	.word	0x080050b1
 8005034:	080050ed 	.word	0x080050ed
 8005038:	080050f9 	.word	0x080050f9

0800503c <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 800503c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8005040:	2b01      	cmp	r3, #1
 8005042:	d016      	beq.n	8005072 <HAL_UART_DMAResume+0x36>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8005044:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  __HAL_LOCK(huart);
 8005048:	2201      	movs	r2, #1
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800504a:	2b21      	cmp	r3, #33	; 0x21
  __HAL_LOCK(huart);
 800504c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005050:	6803      	ldr	r3, [r0, #0]
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8005052:	d023      	beq.n	800509c <HAL_UART_DMAResume+0x60>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005054:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8005058:	2a22      	cmp	r2, #34	; 0x22
 800505a:	d00c      	beq.n	8005076 <HAL_UART_DMAResume+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	f010 0001 	ands.w	r0, r0, #1
 8005062:	d104      	bne.n	800506e <HAL_UART_DMAResume+0x32>
    __HAL_UART_ENABLE(huart);
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	4770      	bx	lr
  return HAL_OK;
 800506e:	2000      	movs	r0, #0
}
 8005070:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005072:	2002      	movs	r0, #2
 8005074:	4770      	bx	lr
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8005076:	2208      	movs	r2, #8
 8005078:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005080:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005090:	609a      	str	r2, [r3, #8]
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	f010 0001 	ands.w	r0, r0, #1
 8005098:	d0e4      	beq.n	8005064 <HAL_UART_DMAResume+0x28>
 800509a:	e7e8      	b.n	800506e <HAL_UART_DMAResume+0x32>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050a2:	609a      	str	r2, [r3, #8]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a4:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 80050a8:	2a22      	cmp	r2, #34	; 0x22
 80050aa:	d1d7      	bne.n	800505c <HAL_UART_DMAResume+0x20>
 80050ac:	e7e3      	b.n	8005076 <HAL_UART_DMAResume+0x3a>
 80050ae:	bf00      	nop

080050b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback
  * @param hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* DMA Normal mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050b2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80050bc:	d111      	bne.n	80050e2 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050be:	6802      	ldr	r2, [r0, #0]
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

	/* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050c0:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 80050c2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c6:	6813      	ldr	r3, [r2, #0]
 80050c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050cc:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	6893      	ldr	r3, [r2, #8]
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050d6:	6893      	ldr	r3, [r2, #8]
 80050d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050dc:	6093      	str	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 80050de:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
  }
  HAL_UART_RxCpltCallback(huart);
 80050e2:	f7fb fb81 	bl	80007e8 <HAL_UART_RxCpltCallback>
 80050e6:	bd08      	pop	{r3, pc}

080050e8 <HAL_UART_RxHalfCpltCallback>:
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop

080050ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback
  * @param hdma : DMA handle
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050ec:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 80050ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80050f0:	f7ff fffa 	bl	80050e8 <HAL_UART_RxHalfCpltCallback>
 80050f4:	bd08      	pop	{r3, pc}
 80050f6:	bf00      	nop

080050f8 <UART_DMAError>:
  * @brief DMA UART communication error callback
  * @param hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0U;
 80050fa:	2200      	movs	r2, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80050fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005102:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005106:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800510a:	2a21      	cmp	r2, #33	; 0x21
 800510c:	d01b      	beq.n	8005146 <UART_DMAError+0x4e>
  {
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800510e:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8005112:	2a22      	cmp	r2, #34	; 0x22
 8005114:	d007      	beq.n	8005126 <UART_DMAError+0x2e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
  {
    UART_EndRxTransfer(huart);
  }
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8005116:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8005118:	4618      	mov	r0, r3
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 800511a:	f042 0210 	orr.w	r2, r2, #16
 800511e:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8005120:	f7fb fb5c 	bl	80007dc <HAL_UART_ErrorCallback>
 8005124:	bd08      	pop	{r3, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	6891      	ldr	r1, [r2, #8]
 800512a:	0649      	lsls	r1, r1, #25
 800512c:	d5f3      	bpl.n	8005116 <UART_DMAError+0x1e>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800512e:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005130:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005132:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8005136:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005138:	6891      	ldr	r1, [r2, #8]
 800513a:	f021 0101 	bic.w	r1, r1, #1
 800513e:	6091      	str	r1, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8005140:	f883 006a 	strb.w	r0, [r3, #106]	; 0x6a
 8005144:	e7e7      	b.n	8005116 <UART_DMAError+0x1e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	6891      	ldr	r1, [r2, #8]
 800514a:	0608      	lsls	r0, r1, #24
 800514c:	d5df      	bpl.n	800510e <UART_DMAError+0x16>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800514e:	6811      	ldr	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005150:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005152:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005156:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005158:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
 800515c:	e7d7      	b.n	800510e <UART_DMAError+0x16>
 800515e:	bf00      	nop

08005160 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005160:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005162:	07da      	lsls	r2, r3, #31
{
 8005164:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005166:	d506      	bpl.n	8005176 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005168:	6801      	ldr	r1, [r0, #0]
 800516a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800516c:	684a      	ldr	r2, [r1, #4]
 800516e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005172:	4322      	orrs	r2, r4
 8005174:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005176:	079c      	lsls	r4, r3, #30
 8005178:	d506      	bpl.n	8005188 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800517a:	6801      	ldr	r1, [r0, #0]
 800517c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800517e:	684a      	ldr	r2, [r1, #4]
 8005180:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005184:	4322      	orrs	r2, r4
 8005186:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005188:	0759      	lsls	r1, r3, #29
 800518a:	d506      	bpl.n	800519a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800518c:	6801      	ldr	r1, [r0, #0]
 800518e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005190:	684a      	ldr	r2, [r1, #4]
 8005192:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005196:	4322      	orrs	r2, r4
 8005198:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800519a:	071a      	lsls	r2, r3, #28
 800519c:	d506      	bpl.n	80051ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800519e:	6801      	ldr	r1, [r0, #0]
 80051a0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80051a2:	684a      	ldr	r2, [r1, #4]
 80051a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a8:	4322      	orrs	r2, r4
 80051aa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051ac:	06dc      	lsls	r4, r3, #27
 80051ae:	d506      	bpl.n	80051be <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051b0:	6801      	ldr	r1, [r0, #0]
 80051b2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80051b4:	688a      	ldr	r2, [r1, #8]
 80051b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051ba:	4322      	orrs	r2, r4
 80051bc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051be:	0699      	lsls	r1, r3, #26
 80051c0:	d506      	bpl.n	80051d0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051c2:	6801      	ldr	r1, [r0, #0]
 80051c4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80051c6:	688a      	ldr	r2, [r1, #8]
 80051c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051cc:	4322      	orrs	r2, r4
 80051ce:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051d0:	065a      	lsls	r2, r3, #25
 80051d2:	d50a      	bpl.n	80051ea <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051d4:	6801      	ldr	r1, [r0, #0]
 80051d6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80051d8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051da:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80051e2:	ea42 0204 	orr.w	r2, r2, r4
 80051e6:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051e8:	d00b      	beq.n	8005202 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	d506      	bpl.n	80051fc <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ee:	6802      	ldr	r2, [r0, #0]
 80051f0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80051f2:	6853      	ldr	r3, [r2, #4]
 80051f4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6053      	str	r3, [r2, #4]
  }
}
 80051fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005200:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005202:	684a      	ldr	r2, [r1, #4]
 8005204:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005206:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800520a:	4322      	orrs	r2, r4
 800520c:	604a      	str	r2, [r1, #4]
 800520e:	e7ec      	b.n	80051ea <UART_AdvFeatureConfig+0x8a>

08005210 <HAL_UART_Init>:
  if(huart == NULL)
 8005210:	2800      	cmp	r0, #0
 8005212:	f000 81be 	beq.w	8005592 <HAL_UART_Init+0x382>
{
 8005216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8005218:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800521c:	4604      	mov	r4, r0
 800521e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005222:	2b00      	cmp	r3, #0
 8005224:	d047      	beq.n	80052b6 <HAL_UART_Init+0xa6>
  __HAL_UART_DISABLE(huart);
 8005226:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005228:	2224      	movs	r2, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800522a:	6921      	ldr	r1, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005230:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8005232:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005234:	430b      	orrs	r3, r1
 8005236:	6961      	ldr	r1, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8005238:	f022 0201 	bic.w	r2, r2, #1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800523c:	48b8      	ldr	r0, [pc, #736]	; (8005520 <HAL_UART_Init+0x310>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800523e:	430b      	orrs	r3, r1
 8005240:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8005242:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005244:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005246:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005248:	68e7      	ldr	r7, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800524a:	4010      	ands	r0, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800524c:	6a26      	ldr	r6, [r4, #32]
 800524e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005250:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005252:	48b4      	ldr	r0, [pc, #720]	; (8005524 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005254:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005256:	602b      	str	r3, [r5, #0]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005258:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800525a:	686b      	ldr	r3, [r5, #4]
 800525c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005260:	ea43 0307 	orr.w	r3, r3, r7
 8005264:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005266:	68ab      	ldr	r3, [r5, #8]
 8005268:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800526c:	ea42 0203 	orr.w	r2, r2, r3
 8005270:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005272:	f000 8094 	beq.w	800539e <HAL_UART_Init+0x18e>
 8005276:	4bac      	ldr	r3, [pc, #688]	; (8005528 <HAL_UART_Init+0x318>)
 8005278:	429d      	cmp	r5, r3
 800527a:	f000 80a4 	beq.w	80053c6 <HAL_UART_Init+0x1b6>
 800527e:	4bab      	ldr	r3, [pc, #684]	; (800552c <HAL_UART_Init+0x31c>)
 8005280:	429d      	cmp	r5, r3
 8005282:	f000 80a9 	beq.w	80053d8 <HAL_UART_Init+0x1c8>
 8005286:	4baa      	ldr	r3, [pc, #680]	; (8005530 <HAL_UART_Init+0x320>)
 8005288:	429d      	cmp	r5, r3
 800528a:	d019      	beq.n	80052c0 <HAL_UART_Init+0xb0>
 800528c:	4ba9      	ldr	r3, [pc, #676]	; (8005534 <HAL_UART_Init+0x324>)
 800528e:	429d      	cmp	r5, r3
 8005290:	d027      	beq.n	80052e2 <HAL_UART_Init+0xd2>
 8005292:	4ba9      	ldr	r3, [pc, #676]	; (8005538 <HAL_UART_Init+0x328>)
 8005294:	429d      	cmp	r5, r3
 8005296:	f000 80c8 	beq.w	800542a <HAL_UART_Init+0x21a>
 800529a:	4ba8      	ldr	r3, [pc, #672]	; (800553c <HAL_UART_Init+0x32c>)
 800529c:	429d      	cmp	r5, r3
 800529e:	f000 80b5 	beq.w	800540c <HAL_UART_Init+0x1fc>
 80052a2:	4ba7      	ldr	r3, [pc, #668]	; (8005540 <HAL_UART_Init+0x330>)
 80052a4:	429d      	cmp	r5, r3
 80052a6:	f000 8159 	beq.w	800555c <HAL_UART_Init+0x34c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052aa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80052ae:	f000 8168 	beq.w	8005582 <HAL_UART_Init+0x372>
    return HAL_ERROR;
 80052b2:	2001      	movs	r0, #1
 80052b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80052b6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80052ba:	f7fd f8c1 	bl	8002440 <HAL_UART_MspInit>
 80052be:	e7b2      	b.n	8005226 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052c0:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	f000 80a6 	beq.w	800541e <HAL_UART_Init+0x20e>
 80052d2:	d912      	bls.n	80052fa <HAL_UART_Init+0xea>
 80052d4:	2b80      	cmp	r3, #128	; 0x80
 80052d6:	f000 8103 	beq.w	80054e0 <HAL_UART_Init+0x2d0>
 80052da:	2bc0      	cmp	r3, #192	; 0xc0
 80052dc:	f000 808a 	beq.w	80053f4 <HAL_UART_Init+0x1e4>
 80052e0:	e7e3      	b.n	80052aa <HAL_UART_Init+0x9a>
 80052e2:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f2:	f000 8094 	beq.w	800541e <HAL_UART_Init+0x20e>
 80052f6:	f200 80e6 	bhi.w	80054c6 <HAL_UART_Init+0x2b6>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1d5      	bne.n	80052aa <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005302:	f000 80e7 	beq.w	80054d4 <HAL_UART_Init+0x2c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005306:	f7fe fd4f 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800530a:	6862      	ldr	r2, [r4, #4]
 800530c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005310:	fbb3 f3f2 	udiv	r3, r3, r2
 8005314:	b29b      	uxth	r3, r3
 8005316:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800531a:	2b00      	cmp	r3, #0
 800531c:	d13b      	bne.n	8005396 <HAL_UART_Init+0x186>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531e:	6823      	ldr	r3, [r4, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005320:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005328:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005330:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533a:	66e1      	str	r1, [r4, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800533c:	f7fd fa02 	bl	8002744 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005340:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005342:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	0712      	lsls	r2, r2, #28
 8005348:	d409      	bmi.n	800535e <HAL_UART_Init+0x14e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800534a:	2220      	movs	r2, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800534c:	2300      	movs	r3, #0
  huart->gState= HAL_UART_STATE_READY;
 800534e:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69

  return HAL_OK;
 8005352:	4618      	mov	r0, r3
  huart->RxState= HAL_UART_STATE_READY;
 8005354:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8005358:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800535c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800535e:	4f79      	ldr	r7, [pc, #484]	; (8005544 <HAL_UART_Init+0x334>)
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005360:	69dd      	ldr	r5, [r3, #28]
 8005362:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8005366:	d1f0      	bne.n	800534a <HAL_UART_Init+0x13a>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8005368:	f7fd f9ec 	bl	8002744 <HAL_GetTick>
 800536c:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800536e:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8005370:	42b8      	cmp	r0, r7
 8005372:	d9f5      	bls.n	8005360 <HAL_UART_Init+0x150>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005374:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8005376:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8005378:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800537a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800537e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	f022 0201 	bic.w	r2, r2, #1
 8005386:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005388:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800538c:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8005390:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 8005394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UART_AdvFeatureConfig(huart);
 8005396:	4620      	mov	r0, r4
 8005398:	f7ff fee2 	bl	8005160 <UART_AdvFeatureConfig>
 800539c:	e7bf      	b.n	800531e <HAL_UART_Init+0x10e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800539e:	4b6a      	ldr	r3, [pc, #424]	; (8005548 <HAL_UART_Init+0x338>)
 80053a0:	4a6a      	ldr	r2, [pc, #424]	; (800554c <HAL_UART_Init+0x33c>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80053b0:	d159      	bne.n	8005466 <HAL_UART_Init+0x256>
    switch (clocksource)
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	f200 80e5 	bhi.w	8005582 <HAL_UART_Init+0x372>
 80053b8:	e8df f003 	tbb	[pc, r3]
 80053bc:	e395748c 	.word	0xe395748c
 80053c0:	e3e3e38f 	.word	0xe3e3e38f
 80053c4:	9d          	.byte	0x9d
 80053c5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80053ca:	4a61      	ldr	r2, [pc, #388]	; (8005550 <HAL_UART_Init+0x340>)
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d0:	f003 030c 	and.w	r3, r3, #12
 80053d4:	5cd3      	ldrb	r3, [r2, r3]
 80053d6:	e7e9      	b.n	80053ac <HAL_UART_Init+0x19c>
 80053d8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d01a      	beq.n	800541e <HAL_UART_Init+0x20e>
 80053e8:	d987      	bls.n	80052fa <HAL_UART_Init+0xea>
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d078      	beq.n	80054e0 <HAL_UART_Init+0x2d0>
 80053ee:	2b30      	cmp	r3, #48	; 0x30
 80053f0:	f47f af5b 	bne.w	80052aa <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80053f8:	d07d      	beq.n	80054f6 <HAL_UART_Init+0x2e6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80053fa:	6862      	ldr	r2, [r4, #4]
 80053fc:	0853      	lsrs	r3, r2, #1
 80053fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005402:	fbb3 f3f2 	udiv	r3, r3, r2
 8005406:	b29b      	uxth	r3, r3
 8005408:	60eb      	str	r3, [r5, #12]
 800540a:	e785      	b.n	8005318 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800540c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005414:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541c:	d116      	bne.n	800544c <HAL_UART_Init+0x23c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800541e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005422:	d05a      	beq.n	80054da <HAL_UART_Init+0x2ca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005424:	f7fe fc90 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8005428:	e76f      	b.n	800530a <HAL_UART_Init+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800542a:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543a:	d0f0      	beq.n	800541e <HAL_UART_Init+0x20e>
 800543c:	d92c      	bls.n	8005498 <HAL_UART_Init+0x288>
 800543e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005442:	d04d      	beq.n	80054e0 <HAL_UART_Init+0x2d0>
 8005444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005448:	d0d4      	beq.n	80053f4 <HAL_UART_Init+0x1e4>
 800544a:	e72e      	b.n	80052aa <HAL_UART_Init+0x9a>
 800544c:	f240 809d 	bls.w	800558a <HAL_UART_Init+0x37a>
 8005450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005454:	d044      	beq.n	80054e0 <HAL_UART_Init+0x2d0>
 8005456:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800545a:	d0cb      	beq.n	80053f4 <HAL_UART_Init+0x1e4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800545c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005460:	f000 808f 	beq.w	8005582 <HAL_UART_Init+0x372>
 8005464:	2310      	movs	r3, #16
    switch (clocksource)
 8005466:	2b08      	cmp	r3, #8
 8005468:	f63f af23 	bhi.w	80052b2 <HAL_UART_Init+0xa2>
 800546c:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <HAL_UART_Init+0x264>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	08005307 	.word	0x08005307
 8005478:	08005507 	.word	0x08005507
 800547c:	0800550d 	.word	0x0800550d
 8005480:	080052b3 	.word	0x080052b3
 8005484:	08005425 	.word	0x08005425
 8005488:	080052b3 	.word	0x080052b3
 800548c:	080052b3 	.word	0x080052b3
 8005490:	080052b3 	.word	0x080052b3
 8005494:	080053fb 	.word	0x080053fb
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005498:	2b00      	cmp	r3, #0
 800549a:	f47f af06 	bne.w	80052aa <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800549e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80054a2:	d130      	bne.n	8005506 <HAL_UART_Init+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80054a4:	f7fe fc90 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80054a8:	6862      	ldr	r2, [r4, #4]
 80054aa:	6825      	ldr	r5, [r4, #0]
 80054ac:	0853      	lsrs	r3, r2, #1
 80054ae:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80054b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80054b6:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 80054b8:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054bc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60eb      	str	r3, [r5, #12]
 80054c4:	e728      	b.n	8005318 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ca:	d009      	beq.n	80054e0 <HAL_UART_Init+0x2d0>
 80054cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d0:	d090      	beq.n	80053f4 <HAL_UART_Init+0x1e4>
 80054d2:	e6ea      	b.n	80052aa <HAL_UART_Init+0x9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80054d4:	f7fe fc68 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 80054d8:	e7e6      	b.n	80054a8 <HAL_UART_Init+0x298>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80054da:	f7fe fc35 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 80054de:	e7e3      	b.n	80054a8 <HAL_UART_Init+0x298>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80054e4:	d112      	bne.n	800550c <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80054e6:	6862      	ldr	r2, [r4, #4]
 80054e8:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <HAL_UART_Init+0x344>)
 80054ea:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80054ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	e7e0      	b.n	80054b8 <HAL_UART_Init+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80054f6:	6862      	ldr	r2, [r4, #4]
 80054f8:	0853      	lsrs	r3, r2, #1
 80054fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80054fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005502:	b29b      	uxth	r3, r3
 8005504:	e7d8      	b.n	80054b8 <HAL_UART_Init+0x2a8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005506:	f7fe fc5f 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 800550a:	e6fe      	b.n	800530a <HAL_UART_Init+0xfa>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800550c:	6862      	ldr	r2, [r4, #4]
 800550e:	4b12      	ldr	r3, [pc, #72]	; (8005558 <HAL_UART_Init+0x348>)
 8005510:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005514:	fbb3 f3f2 	udiv	r3, r3, r2
 8005518:	b29b      	uxth	r3, r3
 800551a:	60eb      	str	r3, [r5, #12]
 800551c:	e6fc      	b.n	8005318 <HAL_UART_Init+0x108>
 800551e:	bf00      	nop
 8005520:	efff69f3 	.word	0xefff69f3
 8005524:	40011000 	.word	0x40011000
 8005528:	40004400 	.word	0x40004400
 800552c:	40004800 	.word	0x40004800
 8005530:	40004c00 	.word	0x40004c00
 8005534:	40005000 	.word	0x40005000
 8005538:	40011400 	.word	0x40011400
 800553c:	40007800 	.word	0x40007800
 8005540:	40007c00 	.word	0x40007c00
 8005544:	01fffffe 	.word	0x01fffffe
 8005548:	40023800 	.word	0x40023800
 800554c:	0800807c 	.word	0x0800807c
 8005550:	08008080 	.word	0x08008080
 8005554:	01e84800 	.word	0x01e84800
 8005558:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 800555c:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8005560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800556c:	f43f af57 	beq.w	800541e <HAL_UART_Init+0x20e>
 8005570:	d90b      	bls.n	800558a <HAL_UART_Init+0x37a>
 8005572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005576:	d0b3      	beq.n	80054e0 <HAL_UART_Init+0x2d0>
 8005578:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800557c:	f43f af3a 	beq.w	80053f4 <HAL_UART_Init+0x1e4>
 8005580:	e76c      	b.n	800545c <HAL_UART_Init+0x24c>
    huart->Instance->BRR = brrtemp;
 8005582:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005584:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8005586:	60eb      	str	r3, [r5, #12]
 8005588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800558a:	2b00      	cmp	r3, #0
 800558c:	f43f aeb7 	beq.w	80052fe <HAL_UART_Init+0xee>
 8005590:	e764      	b.n	800545c <HAL_UART_Init+0x24c>
    return HAL_ERROR;
 8005592:	2001      	movs	r0, #1
}
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop

08005598 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005598:	b084      	sub	sp, #16
 800559a:	b430      	push	{r4, r5}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800559c:	9d08      	ldr	r5, [sp, #32]
{
 800559e:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055a0:	2d01      	cmp	r5, #1
{
 80055a2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055a6:	d027      	beq.n	80055f8 <USB_CoreInit+0x60>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055a8:	68c2      	ldr	r2, [r0, #12]
 80055aa:	4b27      	ldr	r3, [pc, #156]	; (8005648 <USB_CoreInit+0xb0>)
 80055ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b0:	60c2      	str	r2, [r0, #12]
 80055b2:	e001      	b.n	80055b8 <USB_CoreInit+0x20>
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 80055b4:	3b01      	subs	r3, #1
 80055b6:	d00d      	beq.n	80055d4 <USB_CoreInit+0x3c>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 80055b8:	6902      	ldr	r2, [r0, #16]
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	dafa      	bge.n	80055b4 <USB_CoreInit+0x1c>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055be:	6902      	ldr	r2, [r0, #16]
 80055c0:	4b21      	ldr	r3, [pc, #132]	; (8005648 <USB_CoreInit+0xb0>)
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	6102      	str	r2, [r0, #16]
 80055c8:	e001      	b.n	80055ce <USB_CoreInit+0x36>

  do
  {
    if (++count > 200000)
 80055ca:	3b01      	subs	r3, #1
 80055cc:	d002      	beq.n	80055d4 <USB_CoreInit+0x3c>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055ce:	6902      	ldr	r2, [r0, #16]
 80055d0:	07d2      	lsls	r2, r2, #31
 80055d2:	d4fa      	bmi.n	80055ca <USB_CoreInit+0x32>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80055d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055d8:	6383      	str	r3, [r0, #56]	; 0x38
  if(cfg.dma_enable == ENABLE)
 80055da:	9b06      	ldr	r3, [sp, #24]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d107      	bne.n	80055f0 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055e0:	6883      	ldr	r3, [r0, #8]
 80055e2:	f043 0306 	orr.w	r3, r3, #6
 80055e6:	6083      	str	r3, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055e8:	6883      	ldr	r3, [r0, #8]
 80055ea:	f043 0320 	orr.w	r3, r3, #32
 80055ee:	6083      	str	r3, [r0, #8]
}
 80055f0:	2000      	movs	r0, #0
 80055f2:	bc30      	pop	{r4, r5}
 80055f4:	b004      	add	sp, #16
 80055f6:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055fa:	4b14      	ldr	r3, [pc, #80]	; (800564c <USB_CoreInit+0xb4>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if(cfg.use_external_vbus == 1)
 8005600:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005602:	6382      	str	r2, [r0, #56]	; 0x38
    if(cfg.use_external_vbus == 1)
 8005604:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005606:	68c2      	ldr	r2, [r0, #12]
 8005608:	ea03 0302 	and.w	r3, r3, r2
 800560c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800560e:	68c3      	ldr	r3, [r0, #12]
 8005610:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005614:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 8005616:	d012      	beq.n	800563e <USB_CoreInit+0xa6>
{
 8005618:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <USB_CoreInit+0xb0>)
 800561a:	e001      	b.n	8005620 <USB_CoreInit+0x88>
    if (++count > 200000)
 800561c:	3b01      	subs	r3, #1
 800561e:	d0dc      	beq.n	80055da <USB_CoreInit+0x42>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8005620:	6902      	ldr	r2, [r0, #16]
 8005622:	2a00      	cmp	r2, #0
 8005624:	dafa      	bge.n	800561c <USB_CoreInit+0x84>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005626:	6902      	ldr	r2, [r0, #16]
 8005628:	4b07      	ldr	r3, [pc, #28]	; (8005648 <USB_CoreInit+0xb0>)
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	6102      	str	r2, [r0, #16]
 8005630:	e001      	b.n	8005636 <USB_CoreInit+0x9e>
    if (++count > 200000)
 8005632:	3b01      	subs	r3, #1
 8005634:	d0d1      	beq.n	80055da <USB_CoreInit+0x42>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005636:	6902      	ldr	r2, [r0, #16]
 8005638:	07d1      	lsls	r1, r2, #31
 800563a:	d4fa      	bmi.n	8005632 <USB_CoreInit+0x9a>
 800563c:	e7cd      	b.n	80055da <USB_CoreInit+0x42>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800563e:	68c3      	ldr	r3, [r0, #12]
 8005640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005644:	60c3      	str	r3, [r0, #12]
 8005646:	e7e7      	b.n	8005618 <USB_CoreInit+0x80>
 8005648:	00030d40 	.word	0x00030d40
 800564c:	ffbdffbf 	.word	0xffbdffbf

08005650 <USB_DisableGlobalInt>:
{
 8005650:	4602      	mov	r2, r0
}
 8005652:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005654:	6893      	ldr	r3, [r2, #8]
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	6093      	str	r3, [r2, #8]
}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop

08005660 <USB_SetCurrentMode>:
{
 8005660:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005662:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8005664:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005666:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800566a:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 800566c:	d009      	beq.n	8005682 <USB_SetCurrentMode+0x22>
  else if ( mode == USB_OTG_DEVICE_MODE)
 800566e:	b919      	cbnz	r1, 8005678 <USB_SetCurrentMode+0x18>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005670:	68c3      	ldr	r3, [r0, #12]
 8005672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005676:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 8005678:	2032      	movs	r0, #50	; 0x32
 800567a:	f7fd f869 	bl	8002750 <HAL_Delay>
}
 800567e:	2000      	movs	r0, #0
 8005680:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005682:	68c3      	ldr	r3, [r0, #12]
 8005684:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005688:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 800568a:	2032      	movs	r0, #50	; 0x32
 800568c:	f7fd f860 	bl	8002750 <HAL_Delay>
}
 8005690:	2000      	movs	r0, #0
 8005692:	bd08      	pop	{r3, pc}

08005694 <USB_DevInit>:
{
 8005694:	b084      	sub	sp, #16
 8005696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800569a:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800569c:	af07      	add	r7, sp, #28
 800569e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056a0:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
 80056a4:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80056a8:	6386      	str	r6, [r0, #56]	; 0x38
{
 80056aa:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 80056ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80056b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  if (cfg.vbus_sensing_enable == 0)
 80056b2:	b95c      	cbnz	r4, 80056cc <USB_DevInit+0x38>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80056b4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80056b6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80056ba:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056bc:	6802      	ldr	r2, [r0, #0]
 80056be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c2:	6002      	str	r2, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80056c4:	6802      	ldr	r2, [r0, #0]
 80056c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056ca:	6002      	str	r2, [r0, #0]
  USBx_PCGCCTL = 0;
 80056cc:	2200      	movs	r2, #0
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80056ce:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056d0:	f500 6600 	add.w	r6, r0, #2048	; 0x800
  USBx_PCGCCTL = 0;
 80056d4:	f8c0 2e00 	str.w	r2, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056d8:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
 80056dc:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80056e0:	f000 8094 	beq.w	800580c <USB_DevInit+0x178>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 80056e4:	2b03      	cmp	r3, #3
  USBx_DEVICE->DCFG |= speed;
 80056e6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 80056ea:	f000 8099 	beq.w	8005820 <USB_DevInit+0x18c>
  USBx_DEVICE->DCFG |= speed;
 80056ee:	f043 0303 	orr.w	r3, r3, #3
 80056f2:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 80056f6:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80056fa:	4b4d      	ldr	r3, [pc, #308]	; (8005830 <USB_DevInit+0x19c>)
 80056fc:	6102      	str	r2, [r0, #16]
 80056fe:	e001      	b.n	8005704 <USB_DevInit+0x70>
    if (++count > 200000)
 8005700:	3b01      	subs	r3, #1
 8005702:	d002      	beq.n	800570a <USB_DevInit+0x76>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005704:	6902      	ldr	r2, [r0, #16]
 8005706:	0695      	lsls	r5, r2, #26
 8005708:	d4fa      	bmi.n	8005700 <USB_DevInit+0x6c>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800570a:	2210      	movs	r2, #16
 800570c:	4b48      	ldr	r3, [pc, #288]	; (8005830 <USB_DevInit+0x19c>)
 800570e:	6102      	str	r2, [r0, #16]
 8005710:	e001      	b.n	8005716 <USB_DevInit+0x82>
    if (++count > 200000)
 8005712:	3b01      	subs	r3, #1
 8005714:	d002      	beq.n	800571c <USB_DevInit+0x88>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005716:	6902      	ldr	r2, [r0, #16]
 8005718:	06d2      	lsls	r2, r2, #27
 800571a:	d4fa      	bmi.n	8005712 <USB_DevInit+0x7e>
  USBx_DEVICE->DIEPMSK = 0;
 800571c:	2200      	movs	r2, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800571e:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 8005722:	6132      	str	r2, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0;
 8005724:	6172      	str	r2, [r6, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8005726:	61b3      	str	r3, [r6, #24]
  USBx_DEVICE->DAINTMSK = 0;
 8005728:	61f2      	str	r2, [r6, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800572a:	b381      	cbz	r1, 800578e <USB_DevInit+0xfa>
 800572c:	f500 6310 	add.w	r3, r0, #2304	; 0x900
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8005730:	f04f 0cff 	mov.w	ip, #255	; 0xff
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8005734:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0;
 8005738:	4615      	mov	r5, r2
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800573a:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800573c:	3201      	adds	r2, #1
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800573e:	2f00      	cmp	r7, #0
 8005740:	db4d      	blt.n	80057de <USB_DevInit+0x14a>
  for (i = 0; i < cfg.dev_endpoints; i++)
 8005742:	428a      	cmp	r2, r1
      USBx_INEP(i)->DIEPCTL = 0;
 8005744:	601d      	str	r5, [r3, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 8005746:	611d      	str	r5, [r3, #16]
 8005748:	f103 0320 	add.w	r3, r3, #32
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800574c:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8005750:	d1f3      	bne.n	800573a <USB_DevInit+0xa6>
 8005752:	2200      	movs	r2, #0
 8005754:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8005758:	f04f 0cff 	mov.w	ip, #255	; 0xff
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800575c:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
      USBx_OUTEP(i)->DOEPCTL = 0;
 8005760:	4615      	mov	r5, r2
 8005762:	e007      	b.n	8005774 <USB_DevInit+0xe0>
  for (i = 0; i < cfg.dev_endpoints; i++)
 8005764:	428a      	cmp	r2, r1
      USBx_OUTEP(i)->DOEPCTL = 0;
 8005766:	601d      	str	r5, [r3, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8005768:	611d      	str	r5, [r3, #16]
 800576a:	f103 0320 	add.w	r3, r3, #32
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 800576e:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8005772:	d00c      	beq.n	800578e <USB_DevInit+0xfa>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005774:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8005776:	3201      	adds	r2, #1
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005778:	2f00      	cmp	r7, #0
 800577a:	daf3      	bge.n	8005764 <USB_DevInit+0xd0>
  for (i = 0; i < cfg.dev_endpoints; i++)
 800577c:	428a      	cmp	r2, r1
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800577e:	f8c3 8000 	str.w	r8, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8005782:	611d      	str	r5, [r3, #16]
 8005784:	f103 0320 	add.w	r3, r3, #32
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8005788:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800578c:	d1f2      	bne.n	8005774 <USB_DevInit+0xe0>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800578e:	6933      	ldr	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8005790:	f1be 0f01 	cmp.w	lr, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005798:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 800579a:	d02a      	beq.n	80057f2 <USB_DevInit+0x15e>
  USBx->GINTMSK = 0;
 800579c:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFF;
 800579e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0;
 80057a2:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 80057a4:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == DISABLE)
 80057a6:	f1be 0f00 	cmp.w	lr, #0
 80057aa:	d103      	bne.n	80057b4 <USB_DevInit+0x120>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057ac:	6983      	ldr	r3, [r0, #24]
 80057ae:	f043 0310 	orr.w	r3, r3, #16
 80057b2:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80057b4:	6981      	ldr	r1, [r0, #24]
 80057b6:	4b1f      	ldr	r3, [pc, #124]	; (8005834 <USB_DevInit+0x1a0>)
  if(cfg.Sof_enable)
 80057b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6183      	str	r3, [r0, #24]
  if(cfg.Sof_enable)
 80057be:	b11a      	cbz	r2, 80057c8 <USB_DevInit+0x134>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057c0:	6983      	ldr	r3, [r0, #24]
 80057c2:	f043 0308 	orr.w	r3, r3, #8
 80057c6:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 80057c8:	2c01      	cmp	r4, #1
 80057ca:	d103      	bne.n	80057d4 <USB_DevInit+0x140>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057cc:	6982      	ldr	r2, [r0, #24]
 80057ce:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <USB_DevInit+0x1a4>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	6183      	str	r3, [r0, #24]
}
 80057d4:	2000      	movs	r0, #0
 80057d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057da:	b004      	add	sp, #16
 80057dc:	4770      	bx	lr
  for (i = 0; i < cfg.dev_endpoints; i++)
 80057de:	4291      	cmp	r1, r2
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80057e0:	f8c3 8000 	str.w	r8, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0;
 80057e4:	611d      	str	r5, [r3, #16]
 80057e6:	f103 0320 	add.w	r3, r3, #32
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80057ea:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80057ee:	d1a4      	bne.n	800573a <USB_DevInit+0xa6>
 80057f0:	e7af      	b.n	8005752 <USB_DevInit+0xbe>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80057f2:	4d12      	ldr	r5, [pc, #72]	; (800583c <USB_DevInit+0x1a8>)
  USBx->GINTMSK = 0;
 80057f4:	2100      	movs	r1, #0
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80057f6:	4b12      	ldr	r3, [pc, #72]	; (8005840 <USB_DevInit+0x1ac>)
  USBx->GINTSTS = 0xBFFFFFFF;
 80057f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80057fc:	6335      	str	r5, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80057fe:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8005800:	432b      	orrs	r3, r5
 8005802:	6333      	str	r3, [r6, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 8005804:	6b33      	ldr	r3, [r6, #48]	; 0x30
  USBx->GINTMSK = 0;
 8005806:	6181      	str	r1, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 8005808:	6142      	str	r2, [r0, #20]
 800580a:	e7d3      	b.n	80057b4 <USB_DevInit+0x120>
  USBx_DEVICE->DCFG |= speed;
 800580c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8005810:	2f00      	cmp	r7, #0
 8005812:	f43f af6e 	beq.w	80056f2 <USB_DevInit+0x5e>
  USBx_DEVICE->DCFG |= speed;
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 800581e:	e76a      	b.n	80056f6 <USB_DevInit+0x62>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8005820:	2f00      	cmp	r7, #0
 8005822:	f43f af66 	beq.w	80056f2 <USB_DevInit+0x5e>
  USBx_DEVICE->DCFG |= speed;
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 800582e:	e762      	b.n	80056f6 <USB_DevInit+0x62>
 8005830:	00030d40 	.word	0x00030d40
 8005834:	803c3800 	.word	0x803c3800
 8005838:	40000004 	.word	0x40000004
 800583c:	00800100 	.word	0x00800100
 8005840:	00010003 	.word	0x00010003

08005844 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8005844:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3);
 8005848:	2003      	movs	r0, #3
{
 800584a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 800584c:	6853      	ldr	r3, [r2, #4]
 800584e:	f043 0302 	orr.w	r3, r3, #2
 8005852:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8005854:	f7fc ff7c 	bl	8002750 <HAL_Delay>
}
 8005858:	2000      	movs	r0, #0
 800585a:	bd08      	pop	{r3, pc}

0800585c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800585c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800585e:	f001 f8c9 	bl	80069f4 <vTaskStartScheduler>
  
  return osOK;
}
 8005862:	2000      	movs	r0, #0
 8005864:	bd08      	pop	{r3, pc}
 8005866:	bf00      	nop

08005868 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005868:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800586a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800586e:	b085      	sub	sp, #20
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8005874:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005876:	ad03      	add	r5, sp, #12
 8005878:	6811      	ldr	r1, [r2, #0]
    fpriority += (priority - osPriorityIdle);
 800587a:	bf14      	ite	ne
 800587c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800587e:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005880:	8a12      	ldrh	r2, [r2, #16]
 8005882:	6840      	ldr	r0, [r0, #4]
 8005884:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005888:	f000 ff84 	bl	8006794 <xTaskCreate>
 800588c:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800588e:	bf0c      	ite	eq
 8005890:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8005892:	2000      	movne	r0, #0
}
 8005894:	b005      	add	sp, #20
 8005896:	bd30      	pop	{r4, r5, pc}

08005898 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005898:	2800      	cmp	r0, #0
 800589a:	bf08      	it	eq
 800589c:	2001      	moveq	r0, #1
{
 800589e:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80058a0:	f001 fa30 	bl	8006d04 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80058a4:	2000      	movs	r0, #0
 80058a6:	bd08      	pop	{r3, pc}

080058a8 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80058a8:	2001      	movs	r0, #1
 80058aa:	f000 bd1f 	b.w	80062ec <xQueueCreateMutex>
 80058ae:	bf00      	nop

080058b0 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80058b0:	2200      	movs	r2, #0
 80058b2:	c803      	ldmia	r0, {r0, r1}
 80058b4:	f000 bb76 	b.w	8005fa4 <xQueueGenericCreate>

080058b8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80058b8:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80058ba:	f001 fbd3 	bl	8007064 <xTaskGetSchedulerState>
 80058be:	2801      	cmp	r0, #1
 80058c0:	d003      	beq.n	80058ca <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80058c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80058c6:	f000 ba25 	b.w	8005d14 <xPortSysTickHandler>
 80058ca:	bd08      	pop	{r3, pc}

080058cc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058cc:	4b11      	ldr	r3, [pc, #68]	; (8005914 <prvInsertBlockIntoFreeList+0x48>)
{
 80058ce:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4282      	cmp	r2, r0
 80058d4:	d201      	bcs.n	80058da <prvInsertBlockIntoFreeList+0xe>
 80058d6:	4613      	mov	r3, r2
 80058d8:	e7fa      	b.n	80058d0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058da:	685c      	ldr	r4, [r3, #4]
 80058dc:	1919      	adds	r1, r3, r4
 80058de:	4288      	cmp	r0, r1
 80058e0:	d103      	bne.n	80058ea <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058e2:	6841      	ldr	r1, [r0, #4]
 80058e4:	4618      	mov	r0, r3
 80058e6:	4421      	add	r1, r4
 80058e8:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058ea:	6844      	ldr	r4, [r0, #4]
 80058ec:	1901      	adds	r1, r0, r4
 80058ee:	428a      	cmp	r2, r1
 80058f0:	d109      	bne.n	8005906 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058f2:	4909      	ldr	r1, [pc, #36]	; (8005918 <prvInsertBlockIntoFreeList+0x4c>)
 80058f4:	6809      	ldr	r1, [r1, #0]
 80058f6:	428a      	cmp	r2, r1
 80058f8:	d005      	beq.n	8005906 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058fa:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058fc:	6815      	ldr	r5, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058fe:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005900:	6005      	str	r5, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005902:	6041      	str	r1, [r0, #4]
 8005904:	e000      	b.n	8005908 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005906:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005908:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800590a:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800590c:	bf18      	it	ne
 800590e:	6018      	strne	r0, [r3, #0]
}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20003c8c 	.word	0x20003c8c
 8005918:	2000007c 	.word	0x2000007c

0800591c <pvPortMalloc>:
{
 800591c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8005920:	4e47      	ldr	r6, [pc, #284]	; (8005a40 <pvPortMalloc+0x124>)
{
 8005922:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005924:	f001 f8a6 	bl	8006a74 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005928:	6833      	ldr	r3, [r6, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d05e      	beq.n	80059ec <pvPortMalloc+0xd0>
 800592e:	4a45      	ldr	r2, [pc, #276]	; (8005a44 <pvPortMalloc+0x128>)
 8005930:	6816      	ldr	r6, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005932:	4234      	tst	r4, r6
 8005934:	d154      	bne.n	80059e0 <pvPortMalloc+0xc4>
			if( xWantedSize > 0 )
 8005936:	2c00      	cmp	r4, #0
 8005938:	d052      	beq.n	80059e0 <pvPortMalloc+0xc4>
				xWantedSize += xHeapStructSize;
 800593a:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800593e:	0750      	lsls	r0, r2, #29
 8005940:	d002      	beq.n	8005948 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005942:	f022 0207 	bic.w	r2, r2, #7
 8005946:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005948:	2a00      	cmp	r2, #0
 800594a:	d049      	beq.n	80059e0 <pvPortMalloc+0xc4>
 800594c:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005a54 <pvPortMalloc+0x138>
 8005950:	f8d8 5000 	ldr.w	r5, [r8]
 8005954:	42aa      	cmp	r2, r5
 8005956:	d843      	bhi.n	80059e0 <pvPortMalloc+0xc4>
				pxBlock = xStart.pxNextFreeBlock;
 8005958:	483b      	ldr	r0, [pc, #236]	; (8005a48 <pvPortMalloc+0x12c>)
 800595a:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800595c:	e006      	b.n	800596c <pvPortMalloc+0x50>
 800595e:	f8d4 e000 	ldr.w	lr, [r4]
 8005962:	f1be 0f00 	cmp.w	lr, #0
 8005966:	d004      	beq.n	8005972 <pvPortMalloc+0x56>
 8005968:	4620      	mov	r0, r4
 800596a:	4674      	mov	r4, lr
 800596c:	6861      	ldr	r1, [r4, #4]
 800596e:	428a      	cmp	r2, r1
 8005970:	d8f5      	bhi.n	800595e <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8005972:	429c      	cmp	r4, r3
 8005974:	d034      	beq.n	80059e0 <pvPortMalloc+0xc4>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005976:	1a8b      	subs	r3, r1, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005978:	6827      	ldr	r7, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800597a:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800597c:	6007      	str	r7, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800597e:	d912      	bls.n	80059a6 <pvPortMalloc+0x8a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005980:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005982:	0741      	lsls	r1, r0, #29
 8005984:	d00a      	beq.n	800599c <pvPortMalloc+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	b672      	cpsid	i
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	b662      	cpsie	i
 800599a:	e7fe      	b.n	800599a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800599c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800599e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059a0:	f7ff ff94 	bl	80058cc <prvInsertBlockIntoFreeList>
 80059a4:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059a6:	4a29      	ldr	r2, [pc, #164]	; (8005a4c <pvPortMalloc+0x130>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059a8:	1a6d      	subs	r5, r5, r1
					pxBlock->pxNextFreeBlock = NULL;
 80059aa:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059ac:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059ae:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059b0:	f8c8 5000 	str.w	r5, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059b4:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 80059b6:	6023      	str	r3, [r4, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059b8:	6061      	str	r1, [r4, #4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059ba:	bf38      	it	cc
 80059bc:	6015      	strcc	r5, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059be:	f104 0508 	add.w	r5, r4, #8
	( void ) xTaskResumeAll();
 80059c2:	f001 f90f 	bl	8006be4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c6:	076b      	lsls	r3, r5, #29
 80059c8:	d00d      	beq.n	80059e6 <pvPortMalloc+0xca>
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	b672      	cpsid	i
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	b662      	cpsie	i
 80059de:	e7fe      	b.n	80059de <pvPortMalloc+0xc2>
	( void ) xTaskResumeAll();
 80059e0:	2500      	movs	r5, #0
 80059e2:	f001 f8ff 	bl	8006be4 <xTaskResumeAll>
}
 80059e6:	4628      	mov	r0, r5
 80059e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 80059ec:	4918      	ldr	r1, [pc, #96]	; (8005a50 <pvPortMalloc+0x134>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059ee:	074d      	lsls	r5, r1, #29
 80059f0:	d023      	beq.n	8005a3a <pvPortMalloc+0x11e>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059f2:	1dca      	adds	r2, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059f4:	f501 5370 	add.w	r3, r1, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059f8:	f022 0107 	bic.w	r1, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059fc:	1a5b      	subs	r3, r3, r1
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059fe:	440b      	add	r3, r1
	xStart.xBlockSize = ( size_t ) 0;
 8005a00:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a02:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a06:	4f10      	ldr	r7, [pc, #64]	; (8005a48 <pvPortMalloc+0x12c>)
	uxAddress -= xHeapStructSize;
 8005a08:	3b08      	subs	r3, #8
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a0a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8005a4c <pvPortMalloc+0x130>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a0e:	f8df c044 	ldr.w	ip, [pc, #68]	; 8005a54 <pvPortMalloc+0x138>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a12:	f023 0307 	bic.w	r3, r3, #7
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a16:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8005a44 <pvPortMalloc+0x128>
	xStart.xBlockSize = ( size_t ) 0;
 8005a1a:	6078      	str	r0, [r7, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a1c:	1a5a      	subs	r2, r3, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a1e:	6039      	str	r1, [r7, #0]
	pxEnd->xBlockSize = 0;
 8005a20:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a22:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8005a24:	6033      	str	r3, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a26:	462e      	mov	r6, r5
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a28:	f8c8 2000 	str.w	r2, [r8]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a2c:	f8cc 2000 	str.w	r2, [ip]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a30:	f8ce 5000 	str.w	r5, [lr]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a34:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a36:	600b      	str	r3, [r1, #0]
 8005a38:	e77b      	b.n	8005932 <pvPortMalloc+0x16>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a3e:	e7de      	b.n	80059fe <pvPortMalloc+0xe2>
 8005a40:	2000007c 	.word	0x2000007c
 8005a44:	20003c80 	.word	0x20003c80
 8005a48:	20003c8c 	.word	0x20003c8c
 8005a4c:	20003c88 	.word	0x20003c88
 8005a50:	20000080 	.word	0x20000080
 8005a54:	20003c84 	.word	0x20003c84

08005a58 <vPortFree>:
	if( pv != NULL )
 8005a58:	b1f0      	cbz	r0, 8005a98 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a5a:	4a1b      	ldr	r2, [pc, #108]	; (8005ac8 <vPortFree+0x70>)
 8005a5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005a60:	6812      	ldr	r2, [r2, #0]
 8005a62:	4213      	tst	r3, r2
 8005a64:	d10a      	bne.n	8005a7c <vPortFree+0x24>
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	b672      	cpsid	i
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	b662      	cpsie	i
 8005a7a:	e7fe      	b.n	8005a7a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a7c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005a80:	b159      	cbz	r1, 8005a9a <vPortFree+0x42>
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	b672      	cpsid	i
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	b662      	cpsie	i
 8005a96:	e7fe      	b.n	8005a96 <vPortFree+0x3e>
 8005a98:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a9a:	ea23 0302 	bic.w	r3, r3, r2
{
 8005a9e:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005aa0:	f840 3c04 	str.w	r3, [r0, #-4]
 8005aa4:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8005aa6:	f000 ffe5 	bl	8006a74 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005aaa:	4a08      	ldr	r2, [pc, #32]	; (8005acc <vPortFree+0x74>)
 8005aac:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ab0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ab4:	6811      	ldr	r1, [r2, #0]
 8005ab6:	440b      	add	r3, r1
 8005ab8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005aba:	f7ff ff07 	bl	80058cc <prvInsertBlockIntoFreeList>
}
 8005abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005ac2:	f001 b88f 	b.w	8006be4 <xTaskResumeAll>
 8005ac6:	bf00      	nop
 8005ac8:	20003c80 	.word	0x20003c80
 8005acc:	20003c84 	.word	0x20003c84

08005ad0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ad4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ad8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ada:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005adc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ade:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ae0:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop

08005ae8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	6103      	str	r3, [r0, #16]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop

08005af0 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005af0:	e890 000c 	ldmia.w	r0, {r2, r3}
{
 8005af4:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005af6:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8005af8:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8005afa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005afc:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005afe:	689c      	ldr	r4, [r3, #8]
 8005b00:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b02:	6099      	str	r1, [r3, #8]
}
 8005b04:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b08:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005b0a:	6002      	str	r2, [r0, #0]
}
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop

08005b10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b10:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b12:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b14:	1c6b      	adds	r3, r5, #1
 8005b16:	d011      	beq.n	8005b3c <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b18:	f100 0208 	add.w	r2, r0, #8
 8005b1c:	e000      	b.n	8005b20 <vListInsert+0x10>
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6853      	ldr	r3, [r2, #4]
 8005b22:	681c      	ldr	r4, [r3, #0]
 8005b24:	42a5      	cmp	r5, r4
 8005b26:	d2fa      	bcs.n	8005b1e <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005b28:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b2a:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005b2c:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b2e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b30:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b32:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b34:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005b36:	6004      	str	r4, [r0, #0]
}
 8005b38:	bc30      	pop	{r4, r5}
 8005b3a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b3c:	6902      	ldr	r2, [r0, #16]
 8005b3e:	6853      	ldr	r3, [r2, #4]
 8005b40:	e7f2      	b.n	8005b28 <vListInsert+0x18>
 8005b42:	bf00      	nop

08005b44 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005b44:	6902      	ldr	r2, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b46:	6843      	ldr	r3, [r0, #4]
 8005b48:	6881      	ldr	r1, [r0, #8]
{
 8005b4a:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b4c:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b4e:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b50:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8005b52:	42a0      	cmp	r0, r4

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8005b54:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b58:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )--;
 8005b5a:	6813      	ldr	r3, [r2, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b5c:	bf08      	it	eq
 8005b5e:	6051      	streq	r1, [r2, #4]
	pxItemToRemove->pvContainer = NULL;
 8005b60:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8005b62:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 8005b64:	6101      	str	r1, [r0, #16]
}
 8005b66:	4618      	mov	r0, r3
	( pxList->uxNumberOfItems )--;
 8005b68:	6013      	str	r3, [r2, #0]
}
 8005b6a:	4770      	bx	lr

08005b6c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <prvTaskExitError+0x34>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	d00a      	beq.n	8005b8a <prvTaskExitError+0x1e>
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	b672      	cpsid	i
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	b662      	cpsie	i
 8005b88:	e7fe      	b.n	8005b88 <prvTaskExitError+0x1c>
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	b672      	cpsid	i
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	b662      	cpsie	i
 8005b9e:	e7fe      	b.n	8005b9e <prvTaskExitError+0x32>
 8005ba0:	20000014 	.word	0x20000014

08005ba4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ba4:	4806      	ldr	r0, [pc, #24]	; (8005bc0 <prvPortStartFirstTask+0x1c>)
 8005ba6:	6800      	ldr	r0, [r0, #0]
 8005ba8:	6800      	ldr	r0, [r0, #0]
 8005baa:	f380 8808 	msr	MSP, r0
 8005bae:	b662      	cpsie	i
 8005bb0:	b661      	cpsie	f
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	df00      	svc	0
 8005bbc:	bf00      	nop
 8005bbe:	0000      	.short	0x0000
 8005bc0:	e000ed08 	.word	0xe000ed08

08005bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bd4 <vPortEnableVFP+0x10>
 8005bc8:	6801      	ldr	r1, [r0, #0]
 8005bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bce:	6001      	str	r1, [r0, #0]
 8005bd0:	4770      	bx	lr
 8005bd2:	0000      	.short	0x0000
 8005bd4:	e000ed88 	.word	0xe000ed88

08005bd8 <pxPortInitialiseStack>:
{
 8005bd8:	b470      	push	{r4, r5, r6}
 8005bda:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bdc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005be0:	4d08      	ldr	r5, [pc, #32]	; (8005c04 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005be2:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005be6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bea:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005bee:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bf0:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bf2:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bf6:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005bfa:	f843 4c24 	str.w	r4, [r3, #-36]
}
 8005bfe:	bc70      	pop	{r4, r5, r6}
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	08005b6d 	.word	0x08005b6d
	...

08005c10 <SVC_Handler>:
	__asm volatile (
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <pxCurrentTCBConst2>)
 8005c12:	6819      	ldr	r1, [r3, #0]
 8005c14:	6808      	ldr	r0, [r1, #0]
 8005c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1a:	f380 8809 	msr	PSP, r0
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	4770      	bx	lr
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst2>:
 8005c30:	20003c9c 	.word	0x20003c9c

08005c34 <vPortEnterCritical>:
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	b672      	cpsid	i
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	b662      	cpsie	i
	uxCriticalNesting++;
 8005c48:	4a0b      	ldr	r2, [pc, #44]	; (8005c78 <vPortEnterCritical+0x44>)
 8005c4a:	6813      	ldr	r3, [r2, #0]
 8005c4c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005c4e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005c52:	d000      	beq.n	8005c56 <vPortEnterCritical+0x22>
 8005c54:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <vPortEnterCritical+0x48>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c5e:	d0f9      	beq.n	8005c54 <vPortEnterCritical+0x20>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	b672      	cpsid	i
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	b662      	cpsie	i
 8005c74:	e7fe      	b.n	8005c74 <vPortEnterCritical+0x40>
 8005c76:	bf00      	nop
 8005c78:	20000014 	.word	0x20000014
 8005c7c:	e000ed04 	.word	0xe000ed04

08005c80 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005c80:	4a09      	ldr	r2, [pc, #36]	; (8005ca8 <vPortExitCritical+0x28>)
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	b953      	cbnz	r3, 8005c9c <vPortExitCritical+0x1c>
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	b672      	cpsid	i
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	b662      	cpsie	i
 8005c9a:	e7fe      	b.n	8005c9a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ca0:	b90b      	cbnz	r3, 8005ca6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	4770      	bx	lr
 8005ca8:	20000014 	.word	0x20000014
 8005cac:	00000000 	.word	0x00000000

08005cb0 <PendSV_Handler>:
	__asm volatile
 8005cb0:	f3ef 8009 	mrs	r0, PSP
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <pxCurrentTCBConst>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	f01e 0f10 	tst.w	lr, #16
 8005cc0:	bf08      	it	eq
 8005cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cca:	6010      	str	r0, [r2, #0]
 8005ccc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cd4:	b672      	cpsid	i
 8005cd6:	f380 8811 	msr	BASEPRI, r0
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	b662      	cpsie	i
 8005ce4:	f001 f87e 	bl	8006de4 <vTaskSwitchContext>
 8005ce8:	f04f 0000 	mov.w	r0, #0
 8005cec:	f380 8811 	msr	BASEPRI, r0
 8005cf0:	bc08      	pop	{r3}
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	6808      	ldr	r0, [r1, #0]
 8005cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfa:	f01e 0f10 	tst.w	lr, #16
 8005cfe:	bf08      	it	eq
 8005d00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d04:	f380 8809 	msr	PSP, r0
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop

08005d10 <pxCurrentTCBConst>:
 8005d10:	20003c9c 	.word	0x20003c9c

08005d14 <xPortSysTickHandler>:
{
 8005d14:	b508      	push	{r3, lr}
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	b672      	cpsid	i
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8005d2a:	f000 feab 	bl	8006a84 <xTaskIncrementTick>
 8005d2e:	b118      	cbz	r0, 8005d38 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d30:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <xPortSysTickHandler+0x2c>)
 8005d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d36:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	bd08      	pop	{r3, pc}
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d46:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d48:	4a06      	ldr	r2, [pc, #24]	; (8005d64 <vPortSetupTimerInterrupt+0x20>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4806      	ldr	r0, [pc, #24]	; (8005d68 <vPortSetupTimerInterrupt+0x24>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d52:	4a06      	ldr	r2, [pc, #24]	; (8005d6c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d54:	099b      	lsrs	r3, r3, #6
 8005d56:	3b01      	subs	r3, #1
 8005d58:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d5a:	6011      	str	r1, [r2, #0]
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	20000010 	.word	0x20000010
 8005d64:	10624dd3 	.word	0x10624dd3
 8005d68:	e000e014 	.word	0xe000e014
 8005d6c:	e000e010 	.word	0xe000e010

08005d70 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d70:	4b23      	ldr	r3, [pc, #140]	; (8005e00 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d72:	2207      	movs	r2, #7
 8005d74:	4823      	ldr	r0, [pc, #140]	; (8005e04 <xPortStartScheduler+0x94>)
{
 8005d76:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d78:	7819      	ldrb	r1, [r3, #0]
{
 8005d7a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d7c:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d7e:	4c22      	ldr	r4, [pc, #136]	; (8005e08 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d80:	b2c9      	uxtb	r1, r1
 8005d82:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d84:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d86:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d88:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d90:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d94:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d98:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d9c:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d9e:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005da0:	d50d      	bpl.n	8005dbe <xPortStartScheduler+0x4e>
 8005da2:	2206      	movs	r2, #6
 8005da4:	e000      	b.n	8005da8 <xPortStartScheduler+0x38>
 8005da6:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005da8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005dac:	1e51      	subs	r1, r2, #1
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005db6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005dba:	061b      	lsls	r3, r3, #24
 8005dbc:	d4f3      	bmi.n	8005da6 <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dbe:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dc0:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dc2:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <xPortStartScheduler+0x9c>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dc4:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dc6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dca:	4c0d      	ldr	r4, [pc, #52]	; (8005e00 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dcc:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dce:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005dd6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005dde:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005de0:	f7ff ffb0 	bl	8005d44 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005de4:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <xPortStartScheduler+0xa0>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8005dea:	f7ff feeb 	bl	8005bc4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <xPortStartScheduler+0xa4>)
 8005df0:	6813      	ldr	r3, [r2, #0]
 8005df2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005df6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005df8:	f7ff fed4 	bl	8005ba4 <prvPortStartFirstTask>
	prvTaskExitError();
 8005dfc:	f7ff feb6 	bl	8005b6c <prvTaskExitError>
 8005e00:	e000e400 	.word	0xe000e400
 8005e04:	20003c98 	.word	0x20003c98
 8005e08:	20003c94 	.word	0x20003c94
 8005e0c:	e000ed20 	.word	0xe000ed20
 8005e10:	20000014 	.word	0x20000014
 8005e14:	e000ef34 	.word	0xe000ef34

08005e18 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8005e18:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e1c:	2b0f      	cmp	r3, #15
 8005e1e:	d910      	bls.n	8005e42 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e20:	4912      	ldr	r1, [pc, #72]	; (8005e6c <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e22:	4a13      	ldr	r2, [pc, #76]	; (8005e70 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e24:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d90a      	bls.n	8005e42 <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	b672      	cpsid	i
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	b662      	cpsie	i
 8005e40:	e7fe      	b.n	8005e40 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <vPortValidateInterruptPriority+0x5c>)
 8005e44:	4a0c      	ldr	r2, [pc, #48]	; (8005e78 <vPortValidateInterruptPriority+0x60>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d90a      	bls.n	8005e68 <vPortValidateInterruptPriority+0x50>
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	b672      	cpsid	i
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	b662      	cpsie	i
 8005e66:	e7fe      	b.n	8005e66 <vPortValidateInterruptPriority+0x4e>
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	e000e3f0 	.word	0xe000e3f0
 8005e70:	20003c94 	.word	0x20003c94
 8005e74:	e000ed0c 	.word	0xe000ed0c
 8005e78:	20003c98 	.word	0x20003c98

08005e7c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e80:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8005e82:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e84:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e86:	b932      	cbnz	r2, 8005e96 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e88:	6805      	ldr	r5, [r0, #0]
 8005e8a:	bb3d      	cbnz	r5, 8005edc <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005e8c:	6840      	ldr	r0, [r0, #4]
 8005e8e:	f001 f947 	bl	8007120 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005e92:	6065      	str	r5, [r4, #4]
 8005e94:	e025      	b.n	8005ee2 <prvCopyDataToQueue+0x66>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e96:	b96d      	cbnz	r5, 8005eb4 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005e98:	6880      	ldr	r0, [r0, #8]
 8005e9a:	f001 ffcd 	bl	8007e38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005e9e:	68a3      	ldr	r3, [r4, #8]
 8005ea0:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ea2:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ea4:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ea6:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ea8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eaa:	d317      	bcc.n	8005edc <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eac:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 8005eae:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eb0:	60a3      	str	r3, [r4, #8]
 8005eb2:	e016      	b.n	8005ee2 <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb4:	68c0      	ldr	r0, [r0, #12]
 8005eb6:	f001 ffbf 	bl	8007e38 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ebc:	68e2      	ldr	r2, [r4, #12]
 8005ebe:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ec0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ec2:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ec4:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ec6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ec8:	d202      	bcs.n	8005ed0 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005eca:	6862      	ldr	r2, [r4, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ed0:	2d02      	cmp	r5, #2
 8005ed2:	d103      	bne.n	8005edc <prvCopyDataToQueue+0x60>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ed4:	b126      	cbz	r6, 8005ee0 <prvCopyDataToQueue+0x64>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ed6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e002      	b.n	8005ee2 <prvCopyDataToQueue+0x66>
 8005edc:	2000      	movs	r0, #0
 8005ede:	e000      	b.n	8005ee2 <prvCopyDataToQueue+0x66>
 8005ee0:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005ee2:	3601      	adds	r6, #1
 8005ee4:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}

08005ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ee8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8005eea:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eec:	b172      	cbz	r2, 8005f0c <prvCopyDataFromQueue+0x24>
 8005eee:	4608      	mov	r0, r1
{
 8005ef0:	b410      	push	{r4}
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ef2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ef4:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ef6:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ef8:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005efa:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005efc:	d301      	bcc.n	8005f02 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005efe:	6819      	ldr	r1, [r3, #0]
 8005f00:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005f02:	68d9      	ldr	r1, [r3, #12]
	}
}
 8005f04:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005f08:	f001 bf96 	b.w	8007e38 <memcpy>
 8005f0c:	4770      	bx	lr
	...

08005f10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f14:	f7ff fe8e 	bl	8005c34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f18:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005f1c:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f1e:	2c00      	cmp	r4, #0
 8005f20:	dd16      	ble.n	8005f50 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f24:	b1a3      	cbz	r3, 8005f50 <prvUnlockQueue+0x40>
 8005f26:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005f2a:	e005      	b.n	8005f38 <prvUnlockQueue+0x28>
 8005f2c:	3c01      	subs	r4, #1
 8005f2e:	b2e3      	uxtb	r3, r4
 8005f30:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f32:	b16b      	cbz	r3, 8005f50 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f36:	b15b      	cbz	r3, 8005f50 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f000 ffe5 	bl	8006f08 <xTaskRemoveFromEventList>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d0f4      	beq.n	8005f2c <prvUnlockQueue+0x1c>
 8005f42:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f44:	f001 f888 	bl	8007058 <vTaskMissedYield>
 8005f48:	b2e3      	uxtb	r3, r4
 8005f4a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f1      	bne.n	8005f34 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f50:	23ff      	movs	r3, #255	; 0xff
 8005f52:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f56:	f7ff fe93 	bl	8005c80 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f5a:	f7ff fe6b 	bl	8005c34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f5e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005f62:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f64:	2c00      	cmp	r4, #0
 8005f66:	dd16      	ble.n	8005f96 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f68:	692b      	ldr	r3, [r5, #16]
 8005f6a:	b1a3      	cbz	r3, 8005f96 <prvUnlockQueue+0x86>
 8005f6c:	f105 0610 	add.w	r6, r5, #16
 8005f70:	e005      	b.n	8005f7e <prvUnlockQueue+0x6e>
 8005f72:	3c01      	subs	r4, #1
 8005f74:	b2e3      	uxtb	r3, r4
 8005f76:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f78:	b16b      	cbz	r3, 8005f96 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f7a:	692b      	ldr	r3, [r5, #16]
 8005f7c:	b15b      	cbz	r3, 8005f96 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f000 ffc2 	bl	8006f08 <xTaskRemoveFromEventList>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d0f4      	beq.n	8005f72 <prvUnlockQueue+0x62>
 8005f88:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 8005f8a:	f001 f865 	bl	8007058 <vTaskMissedYield>
 8005f8e:	b2e3      	uxtb	r3, r4
 8005f90:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f1      	bne.n	8005f7a <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f96:	23ff      	movs	r3, #255	; 0xff
 8005f98:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8005f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005fa0:	f7ff be6e 	b.w	8005c80 <vPortExitCritical>

08005fa4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fa4:	b950      	cbnz	r0, 8005fbc <xQueueGenericCreate+0x18>
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	b672      	cpsid	i
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	b662      	cpsie	i
 8005fba:	e7fe      	b.n	8005fba <xQueueGenericCreate+0x16>
	{
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc0:	fb01 f000 	mul.w	r0, r1, r0
 8005fc4:	460d      	mov	r5, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005fc6:	3048      	adds	r0, #72	; 0x48
 8005fc8:	f7ff fca8 	bl	800591c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005fcc:	4604      	mov	r4, r0
 8005fce:	b318      	cbz	r0, 8006018 <xQueueGenericCreate+0x74>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005fd0:	b325      	cbz	r5, 800601c <xQueueGenericCreate+0x78>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005fd2:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8005fd6:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005fd8:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fda:	2600      	movs	r6, #0
	pxNewQueue->uxItemSize = uxItemSize;
 8005fdc:	6425      	str	r5, [r4, #64]	; 0x40
		pxQueue->cRxLock = queueUNLOCKED;
 8005fde:	25ff      	movs	r5, #255	; 0xff
	taskENTER_CRITICAL();
 8005fe0:	f7ff fe28 	bl	8005c34 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005fe4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005fe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fe8:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ff2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005ff4:	1a59      	subs	r1, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ff6:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ff8:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005ffa:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ffc:	6063      	str	r3, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ffe:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006002:	60e2      	str	r2, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8006004:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006008:	f7ff fd62 	bl	8005ad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800600c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006010:	f7ff fd5e 	bl	8005ad0 <vListInitialise>
	taskEXIT_CRITICAL();
 8006014:	f7ff fe34 	bl	8005c80 <vPortExitCritical>
	}
 8006018:	4620      	mov	r0, r4
 800601a:	bd70      	pop	{r4, r5, r6, pc}
	if( uxItemSize == ( UBaseType_t ) 0 )
 800601c:	4603      	mov	r3, r0
 800601e:	e7da      	b.n	8005fd6 <xQueueGenericCreate+0x32>

08006020 <xQueueGenericSend>:
{
 8006020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006024:	b085      	sub	sp, #20
 8006026:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006028:	2800      	cmp	r0, #0
 800602a:	f000 810a 	beq.w	8006242 <xQueueGenericSend+0x222>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800602e:	2900      	cmp	r1, #0
 8006030:	f000 814b 	beq.w	80062ca <xQueueGenericSend+0x2aa>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006034:	2b02      	cmp	r3, #2
 8006036:	f000 8139 	beq.w	80062ac <xQueueGenericSend+0x28c>
 800603a:	4604      	mov	r4, r0
 800603c:	461f      	mov	r7, r3
 800603e:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006040:	f001 f810 	bl	8007064 <xTaskGetSchedulerState>
 8006044:	b918      	cbnz	r0, 800604e <xQueueGenericSend+0x2e>
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f040 8124 	bne.w	8006296 <xQueueGenericSend+0x276>
		taskENTER_CRITICAL();
 800604e:	f7ff fdf1 	bl	8005c34 <vPortEnterCritical>
 8006052:	f1a7 0602 	sub.w	r6, r7, #2
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006056:	6ba2      	ldr	r2, [r4, #56]	; 0x38
{
 8006058:	2500      	movs	r5, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800605a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800605c:	fab6 f686 	clz	r6, r6
		prvLockQueue( pxQueue );
 8006060:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006062:	429a      	cmp	r2, r3
 8006064:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8006068:	d378      	bcc.n	800615c <xQueueGenericSend+0x13c>
 800606a:	2e00      	cmp	r6, #0
 800606c:	d176      	bne.n	800615c <xQueueGenericSend+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8104 	beq.w	800627e <xQueueGenericSend+0x25e>
				else if( xEntryTimeSet == pdFALSE )
 8006076:	2d00      	cmp	r5, #0
 8006078:	f000 80fd 	beq.w	8006276 <xQueueGenericSend+0x256>
		taskEXIT_CRITICAL();
 800607c:	f7ff fe00 	bl	8005c80 <vPortExitCritical>
		vTaskSuspendAll();
 8006080:	f000 fcf8 	bl	8006a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006084:	f7ff fdd6 	bl	8005c34 <vPortEnterCritical>
 8006088:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800608c:	2bff      	cmp	r3, #255	; 0xff
 800608e:	f000 80ef 	beq.w	8006270 <xQueueGenericSend+0x250>
 8006092:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006096:	2bff      	cmp	r3, #255	; 0xff
 8006098:	f000 80e7 	beq.w	800626a <xQueueGenericSend+0x24a>
 800609c:	f7ff fdf0 	bl	8005c80 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060a0:	a901      	add	r1, sp, #4
 80060a2:	a802      	add	r0, sp, #8
 80060a4:	f000 ff90 	bl	8006fc8 <xTaskCheckForTimeOut>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	f040 80d5 	bne.w	8006258 <xQueueGenericSend+0x238>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060ae:	f7ff fdc1 	bl	8005c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d066      	beq.n	8006188 <xQueueGenericSend+0x168>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80060ba:	f7ff fde1 	bl	8005c80 <vPortExitCritical>
	taskENTER_CRITICAL();
 80060be:	f7ff fdb9 	bl	8005c34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80060c2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80060c6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060c8:	2d00      	cmp	r5, #0
 80060ca:	dd16      	ble.n	80060fa <xQueueGenericSend+0xda>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ce:	b1a3      	cbz	r3, 80060fa <xQueueGenericSend+0xda>
 80060d0:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 80060d4:	e005      	b.n	80060e2 <xQueueGenericSend+0xc2>
 80060d6:	3d01      	subs	r5, #1
 80060d8:	b2eb      	uxtb	r3, r5
 80060da:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060dc:	b16b      	cbz	r3, 80060fa <xQueueGenericSend+0xda>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e0:	b15b      	cbz	r3, 80060fa <xQueueGenericSend+0xda>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060e2:	4658      	mov	r0, fp
 80060e4:	f000 ff10 	bl	8006f08 <xTaskRemoveFromEventList>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d0f4      	beq.n	80060d6 <xQueueGenericSend+0xb6>
 80060ec:	3d01      	subs	r5, #1
						vTaskMissedYield();
 80060ee:	f000 ffb3 	bl	8007058 <vTaskMissedYield>
 80060f2:	b2eb      	uxtb	r3, r5
 80060f4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f1      	bne.n	80060de <xQueueGenericSend+0xbe>
		pxQueue->cTxLock = queueUNLOCKED;
 80060fa:	23ff      	movs	r3, #255	; 0xff
 80060fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006100:	f7ff fdbe 	bl	8005c80 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006104:	f7ff fd96 	bl	8005c34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006108:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800610c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800610e:	2d00      	cmp	r5, #0
 8006110:	dd16      	ble.n	8006140 <xQueueGenericSend+0x120>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	b1a3      	cbz	r3, 8006140 <xQueueGenericSend+0x120>
 8006116:	f104 0b10 	add.w	fp, r4, #16
 800611a:	e005      	b.n	8006128 <xQueueGenericSend+0x108>
 800611c:	3d01      	subs	r5, #1
 800611e:	b2eb      	uxtb	r3, r5
 8006120:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006122:	b16b      	cbz	r3, 8006140 <xQueueGenericSend+0x120>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	b15b      	cbz	r3, 8006140 <xQueueGenericSend+0x120>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006128:	4658      	mov	r0, fp
 800612a:	f000 feed 	bl	8006f08 <xTaskRemoveFromEventList>
 800612e:	2800      	cmp	r0, #0
 8006130:	d0f4      	beq.n	800611c <xQueueGenericSend+0xfc>
 8006132:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8006134:	f000 ff90 	bl	8007058 <vTaskMissedYield>
 8006138:	b2eb      	uxtb	r3, r5
 800613a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1f1      	bne.n	8006124 <xQueueGenericSend+0x104>
		pxQueue->cRxLock = queueUNLOCKED;
 8006140:	23ff      	movs	r3, #255	; 0xff
 8006142:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006146:	f7ff fd9b 	bl	8005c80 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800614a:	f000 fd4b 	bl	8006be4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800614e:	f7ff fd71 	bl	8005c34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006152:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006154:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006156:	2501      	movs	r5, #1
 8006158:	429a      	cmp	r2, r3
 800615a:	d286      	bcs.n	800606a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800615c:	463a      	mov	r2, r7
 800615e:	4641      	mov	r1, r8
 8006160:	4620      	mov	r0, r4
 8006162:	f7ff fe8b 	bl	8005e7c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	f040 808c 	bne.w	8006286 <xQueueGenericSend+0x266>
					else if( xYieldRequired != pdFALSE )
 800616e:	b138      	cbz	r0, 8006180 <xQueueGenericSend+0x160>
						queueYIELD_IF_USING_PREEMPTION();
 8006170:	4b5d      	ldr	r3, [pc, #372]	; (80062e8 <xQueueGenericSend+0x2c8>)
 8006172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006180:	f7ff fd7e 	bl	8005c80 <vPortExitCritical>
				return pdPASS;
 8006184:	2001      	movs	r0, #1
 8006186:	e06d      	b.n	8006264 <xQueueGenericSend+0x244>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006188:	f104 0b10 	add.w	fp, r4, #16
	taskEXIT_CRITICAL();
 800618c:	f7ff fd78 	bl	8005c80 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006190:	9901      	ldr	r1, [sp, #4]
 8006192:	4658      	mov	r0, fp
 8006194:	f000 fe64 	bl	8006e60 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8006198:	f7ff fd4c 	bl	8005c34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800619c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80061a0:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061a4:	f1ba 0f00 	cmp.w	sl, #0
 80061a8:	dd1a      	ble.n	80061e0 <xQueueGenericSend+0x1c0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061ac:	b1c2      	cbz	r2, 80061e0 <xQueueGenericSend+0x1c0>
 80061ae:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80061b2:	e007      	b.n	80061c4 <xQueueGenericSend+0x1a4>
 80061b4:	f10a 33ff 	add.w	r3, sl, #4294967295
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061be:	b17b      	cbz	r3, 80061e0 <xQueueGenericSend+0x1c0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061c2:	b16a      	cbz	r2, 80061e0 <xQueueGenericSend+0x1c0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c4:	4628      	mov	r0, r5
 80061c6:	f000 fe9f 	bl	8006f08 <xTaskRemoveFromEventList>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d0f2      	beq.n	80061b4 <xQueueGenericSend+0x194>
						vTaskMissedYield();
 80061ce:	f000 ff43 	bl	8007058 <vTaskMissedYield>
 80061d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1ef      	bne.n	80061c0 <xQueueGenericSend+0x1a0>
		pxQueue->cTxLock = queueUNLOCKED;
 80061e0:	23ff      	movs	r3, #255	; 0xff
 80061e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80061e6:	f7ff fd4b 	bl	8005c80 <vPortExitCritical>
	taskENTER_CRITICAL();
 80061ea:	f7ff fd23 	bl	8005c34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80061ee:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80061f2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061f4:	2d00      	cmp	r5, #0
 80061f6:	dc04      	bgt.n	8006202 <xQueueGenericSend+0x1e2>
 80061f8:	e011      	b.n	800621e <xQueueGenericSend+0x1fe>
 80061fa:	3d01      	subs	r5, #1
 80061fc:	b2eb      	uxtb	r3, r5
 80061fe:	b25d      	sxtb	r5, r3
 8006200:	b16b      	cbz	r3, 800621e <xQueueGenericSend+0x1fe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	b15b      	cbz	r3, 800621e <xQueueGenericSend+0x1fe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006206:	4658      	mov	r0, fp
 8006208:	f000 fe7e 	bl	8006f08 <xTaskRemoveFromEventList>
 800620c:	2800      	cmp	r0, #0
 800620e:	d0f4      	beq.n	80061fa <xQueueGenericSend+0x1da>
 8006210:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8006212:	f000 ff21 	bl	8007058 <vTaskMissedYield>
 8006216:	b2eb      	uxtb	r3, r5
 8006218:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f1      	bne.n	8006202 <xQueueGenericSend+0x1e2>
		pxQueue->cRxLock = queueUNLOCKED;
 800621e:	23ff      	movs	r3, #255	; 0xff
 8006220:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006224:	f7ff fd2c 	bl	8005c80 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8006228:	f000 fcdc 	bl	8006be4 <xTaskResumeAll>
 800622c:	2800      	cmp	r0, #0
 800622e:	d18e      	bne.n	800614e <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8006230:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006234:	4a2c      	ldr	r2, [pc, #176]	; (80062e8 <xQueueGenericSend+0x2c8>)
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	e785      	b.n	800614e <xQueueGenericSend+0x12e>
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	b672      	cpsid	i
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	b662      	cpsie	i
 8006256:	e7fe      	b.n	8006256 <xQueueGenericSend+0x236>
			prvUnlockQueue( pxQueue );
 8006258:	4620      	mov	r0, r4
 800625a:	f7ff fe59 	bl	8005f10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800625e:	f000 fcc1 	bl	8006be4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006262:	2000      	movs	r0, #0
}
 8006264:	b005      	add	sp, #20
 8006266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		prvLockQueue( pxQueue );
 800626a:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800626e:	e715      	b.n	800609c <xQueueGenericSend+0x7c>
 8006270:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8006274:	e70d      	b.n	8006092 <xQueueGenericSend+0x72>
					vTaskSetTimeOutState( &xTimeOut );
 8006276:	a802      	add	r0, sp, #8
 8006278:	f000 fe8e 	bl	8006f98 <vTaskSetTimeOutState>
 800627c:	e6fe      	b.n	800607c <xQueueGenericSend+0x5c>
					taskEXIT_CRITICAL();
 800627e:	f7ff fcff 	bl	8005c80 <vPortExitCritical>
					return errQUEUE_FULL;
 8006282:	4630      	mov	r0, r6
 8006284:	e7ee      	b.n	8006264 <xQueueGenericSend+0x244>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006286:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800628a:	f000 fe3d 	bl	8006f08 <xTaskRemoveFromEventList>
 800628e:	2800      	cmp	r0, #0
 8006290:	f47f af6e 	bne.w	8006170 <xQueueGenericSend+0x150>
 8006294:	e774      	b.n	8006180 <xQueueGenericSend+0x160>
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	b672      	cpsid	i
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	b662      	cpsie	i
 80062aa:	e7fe      	b.n	80062aa <xQueueGenericSend+0x28a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80062ae:	2a01      	cmp	r2, #1
 80062b0:	f43f aec3 	beq.w	800603a <xQueueGenericSend+0x1a>
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	b672      	cpsid	i
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	b662      	cpsie	i
 80062c8:	e7fe      	b.n	80062c8 <xQueueGenericSend+0x2a8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80062cc:	2a00      	cmp	r2, #0
 80062ce:	f43f aeb1 	beq.w	8006034 <xQueueGenericSend+0x14>
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	b672      	cpsid	i
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	b662      	cpsie	i
 80062e6:	e7fe      	b.n	80062e6 <xQueueGenericSend+0x2c6>
 80062e8:	e000ed04 	.word	0xe000ed04

080062ec <xQueueCreateMutex>:
	{
 80062ec:	b570      	push	{r4, r5, r6, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80062ee:	2048      	movs	r0, #72	; 0x48
 80062f0:	f7ff fb14 	bl	800591c <pvPortMalloc>
		if( pxNewQueue != NULL )
 80062f4:	4604      	mov	r4, r0
 80062f6:	b350      	cbz	r0, 800634e <xQueueCreateMutex+0x62>
	pxNewQueue->uxItemSize = uxItemSize;
 80062f8:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 80062fa:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062fc:	6020      	str	r0, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
 80062fe:	26ff      	movs	r6, #255	; 0xff
	pxNewQueue->uxLength = uxQueueLength;
 8006300:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006302:	6405      	str	r5, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
 8006304:	f7ff fc96 	bl	8005c34 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006308:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800630a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800630c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	fb02 f201 	mul.w	r2, r2, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006316:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006318:	1a51      	subs	r1, r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800631a:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800631c:	63a5      	str	r5, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800631e:	440b      	add	r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006320:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8006322:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006326:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8006328:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800632c:	f7ff fbd0 	bl	8005ad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006330:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006334:	f7ff fbcc 	bl	8005ad0 <vListInitialise>
	taskEXIT_CRITICAL();
 8006338:	f7ff fca2 	bl	8005c80 <vPortExitCritical>
			pxNewQueue->pxMutexHolder = NULL;
 800633c:	6065      	str	r5, [r4, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800633e:	6025      	str	r5, [r4, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006340:	462b      	mov	r3, r5
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006342:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006344:	462a      	mov	r2, r5
 8006346:	4629      	mov	r1, r5
 8006348:	4620      	mov	r0, r4
 800634a:	f7ff fe69 	bl	8006020 <xQueueGenericSend>
	}
 800634e:	4620      	mov	r0, r4
 8006350:	bd70      	pop	{r4, r5, r6, pc}
 8006352:	bf00      	nop

08006354 <xQueueGenericSendFromISR>:
{
 8006354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006358:	b318      	cbz	r0, 80063a2 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800635a:	2900      	cmp	r1, #0
 800635c:	d04a      	beq.n	80063f4 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800635e:	2b02      	cmp	r3, #2
 8006360:	d03a      	beq.n	80063d8 <xQueueGenericSendFromISR+0x84>
 8006362:	4604      	mov	r4, r0
 8006364:	461f      	mov	r7, r3
 8006366:	4690      	mov	r8, r2
 8006368:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800636a:	f7ff fd55 	bl	8005e18 <vPortValidateInterruptPriority>
	__asm volatile
 800636e:	f3ef 8611 	mrs	r6, BASEPRI
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	b672      	cpsid	i
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006386:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006388:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800638a:	429a      	cmp	r2, r3
 800638c:	d314      	bcc.n	80063b8 <xQueueGenericSendFromISR+0x64>
 800638e:	f1a7 0002 	sub.w	r0, r7, #2
 8006392:	fab0 f080 	clz	r0, r0
 8006396:	0940      	lsrs	r0, r0, #5
 8006398:	b970      	cbnz	r0, 80063b8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800639a:	f386 8811 	msr	BASEPRI, r6
}
 800639e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	b672      	cpsid	i
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	b662      	cpsie	i
 80063b6:	e7fe      	b.n	80063b6 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 80063b8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063bc:	463a      	mov	r2, r7
 80063be:	4649      	mov	r1, r9
 80063c0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80063c2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063c4:	f7ff fd5a 	bl	8005e7c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80063c8:	1c6b      	adds	r3, r5, #1
 80063ca:	d021      	beq.n	8006410 <xQueueGenericSendFromISR+0xbc>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063cc:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 80063ce:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063d0:	b25b      	sxtb	r3, r3
 80063d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063d6:	e7e0      	b.n	800639a <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063d8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80063da:	2c01      	cmp	r4, #1
 80063dc:	d0c1      	beq.n	8006362 <xQueueGenericSendFromISR+0xe>
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	b672      	cpsid	i
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	b662      	cpsie	i
 80063f2:	e7fe      	b.n	80063f2 <xQueueGenericSendFromISR+0x9e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063f4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80063f6:	2c00      	cmp	r4, #0
 80063f8:	d0b1      	beq.n	800635e <xQueueGenericSendFromISR+0xa>
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	b672      	cpsid	i
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	b662      	cpsie	i
 800640e:	e7fe      	b.n	800640e <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006412:	b90b      	cbnz	r3, 8006418 <xQueueGenericSendFromISR+0xc4>
			xReturn = pdPASS;
 8006414:	2001      	movs	r0, #1
 8006416:	e7c0      	b.n	800639a <xQueueGenericSendFromISR+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006418:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800641c:	f000 fd74 	bl	8006f08 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8006420:	2800      	cmp	r0, #0
 8006422:	d0f7      	beq.n	8006414 <xQueueGenericSendFromISR+0xc0>
 8006424:	f1b8 0f00 	cmp.w	r8, #0
 8006428:	d0f4      	beq.n	8006414 <xQueueGenericSendFromISR+0xc0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800642a:	2001      	movs	r0, #1
 800642c:	f8c8 0000 	str.w	r0, [r8]
 8006430:	e7b3      	b.n	800639a <xQueueGenericSendFromISR+0x46>
 8006432:	bf00      	nop

08006434 <xQueueGenericReceive>:
{
 8006434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800643c:	2800      	cmp	r0, #0
 800643e:	f000 811e 	beq.w	800667e <xQueueGenericReceive+0x24a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006442:	2900      	cmp	r1, #0
 8006444:	f000 814f 	beq.w	80066e6 <xQueueGenericReceive+0x2b2>
 8006448:	4604      	mov	r4, r0
 800644a:	461f      	mov	r7, r3
 800644c:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800644e:	f000 fe09 	bl	8007064 <xTaskGetSchedulerState>
 8006452:	b960      	cbnz	r0, 800646e <xQueueGenericReceive+0x3a>
 8006454:	9d01      	ldr	r5, [sp, #4]
 8006456:	b15d      	cbz	r5, 8006470 <xQueueGenericReceive+0x3c>
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	b672      	cpsid	i
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	b662      	cpsie	i
 800646c:	e7fe      	b.n	800646c <xQueueGenericReceive+0x38>
 800646e:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
 8006470:	f7ff fbe0 	bl	8005c34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006474:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8006478:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800647c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8006704 <xQueueGenericReceive+0x2d0>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006480:	f1ba 0f00 	cmp.w	sl, #0
 8006484:	f040 808a 	bne.w	800659c <xQueueGenericReceive+0x168>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006488:	9b01      	ldr	r3, [sp, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 810a 	beq.w	80066a4 <xQueueGenericReceive+0x270>
				else if( xEntryTimeSet == pdFALSE )
 8006490:	b915      	cbnz	r5, 8006498 <xQueueGenericReceive+0x64>
					vTaskSetTimeOutState( &xTimeOut );
 8006492:	a802      	add	r0, sp, #8
 8006494:	f000 fd80 	bl	8006f98 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8006498:	f7ff fbf2 	bl	8005c80 <vPortExitCritical>
		vTaskSuspendAll();
 800649c:	f000 faea 	bl	8006a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064a0:	f7ff fbc8 	bl	8005c34 <vPortEnterCritical>
 80064a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80064a8:	2bff      	cmp	r3, #255	; 0xff
 80064aa:	d101      	bne.n	80064b0 <xQueueGenericReceive+0x7c>
 80064ac:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80064b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80064b4:	2bff      	cmp	r3, #255	; 0xff
 80064b6:	d101      	bne.n	80064bc <xQueueGenericReceive+0x88>
 80064b8:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80064bc:	f7ff fbe0 	bl	8005c80 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064c0:	a901      	add	r1, sp, #4
 80064c2:	a802      	add	r0, sp, #8
 80064c4:	f000 fd80 	bl	8006fc8 <xTaskCheckForTimeOut>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	f040 8088 	bne.w	80065de <xQueueGenericReceive+0x1aa>
	taskENTER_CRITICAL();
 80064ce:	f7ff fbb1 	bl	8005c34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d179      	bne.n	80065cc <xQueueGenericReceive+0x198>
	taskEXIT_CRITICAL();
 80064d8:	f7ff fbd2 	bl	8005c80 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 80d8 	beq.w	8006694 <xQueueGenericReceive+0x260>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064e4:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 80064e8:	9901      	ldr	r1, [sp, #4]
 80064ea:	4650      	mov	r0, sl
 80064ec:	f000 fcb8 	bl	8006e60 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80064f0:	f7ff fba0 	bl	8005c34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80064f4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80064f8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	dc04      	bgt.n	8006508 <xQueueGenericReceive+0xd4>
 80064fe:	e011      	b.n	8006524 <xQueueGenericReceive+0xf0>
 8006500:	3d01      	subs	r5, #1
 8006502:	b2eb      	uxtb	r3, r5
 8006504:	b25d      	sxtb	r5, r3
 8006506:	b16b      	cbz	r3, 8006524 <xQueueGenericReceive+0xf0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800650a:	b15b      	cbz	r3, 8006524 <xQueueGenericReceive+0xf0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800650c:	4650      	mov	r0, sl
 800650e:	f000 fcfb 	bl	8006f08 <xTaskRemoveFromEventList>
 8006512:	2800      	cmp	r0, #0
 8006514:	d0f4      	beq.n	8006500 <xQueueGenericReceive+0xcc>
 8006516:	3d01      	subs	r5, #1
						vTaskMissedYield();
 8006518:	f000 fd9e 	bl	8007058 <vTaskMissedYield>
 800651c:	b2eb      	uxtb	r3, r5
 800651e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f1      	bne.n	8006508 <xQueueGenericReceive+0xd4>
		pxQueue->cTxLock = queueUNLOCKED;
 8006524:	23ff      	movs	r3, #255	; 0xff
 8006526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800652a:	f7ff fba9 	bl	8005c80 <vPortExitCritical>
	taskENTER_CRITICAL();
 800652e:	f7ff fb81 	bl	8005c34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006532:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8006536:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006538:	2d00      	cmp	r5, #0
 800653a:	dd16      	ble.n	800656a <xQueueGenericReceive+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	b1a3      	cbz	r3, 800656a <xQueueGenericReceive+0x136>
 8006540:	f104 0a10 	add.w	sl, r4, #16
 8006544:	e005      	b.n	8006552 <xQueueGenericReceive+0x11e>
 8006546:	3d01      	subs	r5, #1
 8006548:	b2eb      	uxtb	r3, r5
 800654a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800654c:	b16b      	cbz	r3, 800656a <xQueueGenericReceive+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	b15b      	cbz	r3, 800656a <xQueueGenericReceive+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006552:	4650      	mov	r0, sl
 8006554:	f000 fcd8 	bl	8006f08 <xTaskRemoveFromEventList>
 8006558:	2800      	cmp	r0, #0
 800655a:	d0f4      	beq.n	8006546 <xQueueGenericReceive+0x112>
 800655c:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800655e:	f000 fd7b 	bl	8007058 <vTaskMissedYield>
 8006562:	b2eb      	uxtb	r3, r5
 8006564:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1f1      	bne.n	800654e <xQueueGenericReceive+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 800656a:	23ff      	movs	r3, #255	; 0xff
 800656c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006570:	f7ff fb86 	bl	8005c80 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8006574:	f000 fb36 	bl	8006be4 <xTaskResumeAll>
 8006578:	b938      	cbnz	r0, 800658a <xQueueGenericReceive+0x156>
					portYIELD_WITHIN_API();
 800657a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800657e:	f8c9 3000 	str.w	r3, [r9]
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800658c:	f7ff fb52 	bl	8005c34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006590:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006594:	f1ba 0f00 	cmp.w	sl, #0
 8006598:	f43f af76 	beq.w	8006488 <xQueueGenericReceive+0x54>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800659c:	4631      	mov	r1, r6
 800659e:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80065a0:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065a2:	f7ff fca1 	bl	8005ee8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80065a6:	2f00      	cmp	r7, #0
 80065a8:	f040 8082 	bne.w	80066b0 <xQueueGenericReceive+0x27c>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80065ac:	f10a 33ff 	add.w	r3, sl, #4294967295
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065b0:	6822      	ldr	r2, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80065b2:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065b4:	b912      	cbnz	r2, 80065bc <xQueueGenericReceive+0x188>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80065b6:	f000 fe11 	bl	80071dc <pvTaskIncrementMutexHeldCount>
 80065ba:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065bc:	6923      	ldr	r3, [r4, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f040 808a 	bne.w	80066d8 <xQueueGenericReceive+0x2a4>
				taskEXIT_CRITICAL();
 80065c4:	f7ff fb5c 	bl	8005c80 <vPortExitCritical>
				return pdPASS;
 80065c8:	2001      	movs	r0, #1
 80065ca:	e06e      	b.n	80066aa <xQueueGenericReceive+0x276>
	taskEXIT_CRITICAL();
 80065cc:	f7ff fb58 	bl	8005c80 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80065d0:	4620      	mov	r0, r4
 80065d2:	f7ff fc9d 	bl	8005f10 <prvUnlockQueue>
 80065d6:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 80065d8:	f000 fb04 	bl	8006be4 <xTaskResumeAll>
 80065dc:	e7d6      	b.n	800658c <xQueueGenericReceive+0x158>
	taskENTER_CRITICAL();
 80065de:	f7ff fb29 	bl	8005c34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80065e2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80065e6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065e8:	2d00      	cmp	r5, #0
 80065ea:	dd16      	ble.n	800661a <xQueueGenericReceive+0x1e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ee:	b1a3      	cbz	r3, 800661a <xQueueGenericReceive+0x1e6>
 80065f0:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 80065f4:	e005      	b.n	8006602 <xQueueGenericReceive+0x1ce>
 80065f6:	3d01      	subs	r5, #1
 80065f8:	b2eb      	uxtb	r3, r5
 80065fa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065fc:	b16b      	cbz	r3, 800661a <xQueueGenericReceive+0x1e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006600:	b15b      	cbz	r3, 800661a <xQueueGenericReceive+0x1e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006602:	4650      	mov	r0, sl
 8006604:	f000 fc80 	bl	8006f08 <xTaskRemoveFromEventList>
 8006608:	2800      	cmp	r0, #0
 800660a:	d0f4      	beq.n	80065f6 <xQueueGenericReceive+0x1c2>
 800660c:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800660e:	f000 fd23 	bl	8007058 <vTaskMissedYield>
 8006612:	b2eb      	uxtb	r3, r5
 8006614:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1f1      	bne.n	80065fe <xQueueGenericReceive+0x1ca>
		pxQueue->cTxLock = queueUNLOCKED;
 800661a:	23ff      	movs	r3, #255	; 0xff
 800661c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006620:	f7ff fb2e 	bl	8005c80 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006624:	f7ff fb06 	bl	8005c34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006628:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800662c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800662e:	2d00      	cmp	r5, #0
 8006630:	dd16      	ble.n	8006660 <xQueueGenericReceive+0x22c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	b1a3      	cbz	r3, 8006660 <xQueueGenericReceive+0x22c>
 8006636:	f104 0a10 	add.w	sl, r4, #16
 800663a:	e005      	b.n	8006648 <xQueueGenericReceive+0x214>
 800663c:	3d01      	subs	r5, #1
 800663e:	b2eb      	uxtb	r3, r5
 8006640:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006642:	b16b      	cbz	r3, 8006660 <xQueueGenericReceive+0x22c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006644:	6923      	ldr	r3, [r4, #16]
 8006646:	b15b      	cbz	r3, 8006660 <xQueueGenericReceive+0x22c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006648:	4650      	mov	r0, sl
 800664a:	f000 fc5d 	bl	8006f08 <xTaskRemoveFromEventList>
 800664e:	2800      	cmp	r0, #0
 8006650:	d0f4      	beq.n	800663c <xQueueGenericReceive+0x208>
 8006652:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8006654:	f000 fd00 	bl	8007058 <vTaskMissedYield>
 8006658:	b2eb      	uxtb	r3, r5
 800665a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1f1      	bne.n	8006644 <xQueueGenericReceive+0x210>
		pxQueue->cRxLock = queueUNLOCKED;
 8006660:	23ff      	movs	r3, #255	; 0xff
 8006662:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006666:	f7ff fb0b 	bl	8005c80 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800666a:	f000 fabb 	bl	8006be4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800666e:	f7ff fae1 	bl	8005c34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006674:	b1b3      	cbz	r3, 80066a4 <xQueueGenericReceive+0x270>
	taskEXIT_CRITICAL();
 8006676:	f7ff fb03 	bl	8005c80 <vPortExitCritical>
 800667a:	2501      	movs	r5, #1
 800667c:	e786      	b.n	800658c <xQueueGenericReceive+0x158>
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	b672      	cpsid	i
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	b662      	cpsie	i
 8006692:	e7fe      	b.n	8006692 <xQueueGenericReceive+0x25e>
						taskENTER_CRITICAL();
 8006694:	f7ff face 	bl	8005c34 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006698:	6860      	ldr	r0, [r4, #4]
 800669a:	f000 fcf3 	bl	8007084 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800669e:	f7ff faef 	bl	8005c80 <vPortExitCritical>
 80066a2:	e71f      	b.n	80064e4 <xQueueGenericReceive+0xb0>
					taskEXIT_CRITICAL();
 80066a4:	f7ff faec 	bl	8005c80 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80066a8:	2000      	movs	r0, #0
}
 80066aa:	b004      	add	sp, #16
 80066ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80066b2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d085      	beq.n	80065c4 <xQueueGenericReceive+0x190>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80066bc:	f000 fc24 	bl	8006f08 <xTaskRemoveFromEventList>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	f43f af7f 	beq.w	80065c4 <xQueueGenericReceive+0x190>
							queueYIELD_IF_USING_PREEMPTION();
 80066c6:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <xQueueGenericReceive+0x2d0>)
 80066c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	e775      	b.n	80065c4 <xQueueGenericReceive+0x190>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d8:	f104 0010 	add.w	r0, r4, #16
 80066dc:	f000 fc14 	bl	8006f08 <xTaskRemoveFromEventList>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d1f0      	bne.n	80066c6 <xQueueGenericReceive+0x292>
 80066e4:	e76e      	b.n	80065c4 <xQueueGenericReceive+0x190>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80066e8:	2a00      	cmp	r2, #0
 80066ea:	f43f aead 	beq.w	8006448 <xQueueGenericReceive+0x14>
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	b672      	cpsid	i
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	b662      	cpsie	i
 8006702:	e7fe      	b.n	8006702 <xQueueGenericReceive+0x2ce>
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800670a:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800670c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800670e:	4d1b      	ldr	r5, [pc, #108]	; (800677c <prvAddCurrentTaskToDelayedList+0x74>)
{
 8006710:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8006712:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006714:	6828      	ldr	r0, [r5, #0]
 8006716:	3004      	adds	r0, #4
 8006718:	f7ff fa14 	bl	8005b44 <uxListRemove>
 800671c:	b940      	cbnz	r0, 8006730 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	2201      	movs	r2, #1
 8006722:	4917      	ldr	r1, [pc, #92]	; (8006780 <prvAddCurrentTaskToDelayedList+0x78>)
 8006724:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006726:	680b      	ldr	r3, [r1, #0]
 8006728:	4082      	lsls	r2, r0
 800672a:	ea23 0302 	bic.w	r3, r3, r2
 800672e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006730:	1c63      	adds	r3, r4, #1
 8006732:	d100      	bne.n	8006736 <prvAddCurrentTaskToDelayedList+0x2e>
 8006734:	b9c7      	cbnz	r7, 8006768 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006736:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006738:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 800673a:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800673c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800673e:	d80b      	bhi.n	8006758 <prvAddCurrentTaskToDelayedList+0x50>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006740:	4b10      	ldr	r3, [pc, #64]	; (8006784 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	6829      	ldr	r1, [r5, #0]
 8006746:	3104      	adds	r1, #4
 8006748:	f7ff f9e2 	bl	8005b10 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800674c:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <prvAddCurrentTaskToDelayedList+0x80>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	4294      	cmp	r4, r2
 8006752:	d200      	bcs.n	8006756 <prvAddCurrentTaskToDelayedList+0x4e>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8006754:	601c      	str	r4, [r3, #0]
 8006756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006758:	4b0c      	ldr	r3, [pc, #48]	; (800678c <prvAddCurrentTaskToDelayedList+0x84>)
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800675e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006762:	3104      	adds	r1, #4
 8006764:	f7ff b9d4 	b.w	8005b10 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006768:	6829      	ldr	r1, [r5, #0]
 800676a:	4809      	ldr	r0, [pc, #36]	; (8006790 <prvAddCurrentTaskToDelayedList+0x88>)
 800676c:	3104      	adds	r1, #4
}
 800676e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006772:	f7ff b9bd 	b.w	8005af0 <vListInsertEnd>
 8006776:	bf00      	nop
 8006778:	20003dc0 	.word	0x20003dc0
 800677c:	20003c9c 	.word	0x20003c9c
 8006780:	20003d48 	.word	0x20003d48
 8006784:	20003ca0 	.word	0x20003ca0
 8006788:	20003d78 	.word	0x20003d78
 800678c:	20003ca4 	.word	0x20003ca4
 8006790:	20003d98 	.word	0x20003d98

08006794 <xTaskCreate>:
	{
 8006794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006798:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800679c:	4680      	mov	r8, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a2:	4650      	mov	r0, sl
	{
 80067a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a6:	f7ff f8b9 	bl	800591c <pvPortMalloc>
			if( pxStack != NULL )
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f000 80cc 	beq.w	8006948 <xTaskCreate+0x1b4>
 80067b0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80067b2:	2054      	movs	r0, #84	; 0x54
 80067b4:	f7ff f8b2 	bl	800591c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80067b8:	4604      	mov	r4, r0
 80067ba:	2800      	cmp	r0, #0
 80067bc:	f000 80d1 	beq.w	8006962 <xTaskCreate+0x1ce>
					pxNewTCB->pxStack = pxStack;
 80067c0:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80067c2:	f1aa 0a04 	sub.w	sl, sl, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067c6:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80067c8:	4456      	add	r6, sl
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067ca:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80067ce:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80067d0:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d047      	beq.n	8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067d8:	786b      	ldrb	r3, [r5, #1]
 80067da:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 80067de:	786b      	ldrb	r3, [r5, #1]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d041      	beq.n	8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067e4:	78ab      	ldrb	r3, [r5, #2]
 80067e6:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 80067ea:	78ab      	ldrb	r3, [r5, #2]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d03b      	beq.n	8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067f0:	78eb      	ldrb	r3, [r5, #3]
 80067f2:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 80067f6:	78eb      	ldrb	r3, [r5, #3]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d035      	beq.n	8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067fc:	792b      	ldrb	r3, [r5, #4]
 80067fe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8006802:	792b      	ldrb	r3, [r5, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02f      	beq.n	8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006808:	796b      	ldrb	r3, [r5, #5]
 800680a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 800680e:	796b      	ldrb	r3, [r5, #5]
 8006810:	b353      	cbz	r3, 8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006812:	79ab      	ldrb	r3, [r5, #6]
 8006814:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 8006818:	79ab      	ldrb	r3, [r5, #6]
 800681a:	b32b      	cbz	r3, 8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800681c:	79eb      	ldrb	r3, [r5, #7]
 800681e:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8006822:	79eb      	ldrb	r3, [r5, #7]
 8006824:	b303      	cbz	r3, 8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006826:	7a2b      	ldrb	r3, [r5, #8]
 8006828:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800682c:	7a2b      	ldrb	r3, [r5, #8]
 800682e:	b1db      	cbz	r3, 8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006830:	7a6b      	ldrb	r3, [r5, #9]
 8006832:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8006836:	7a6b      	ldrb	r3, [r5, #9]
 8006838:	b1b3      	cbz	r3, 8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800683a:	7aab      	ldrb	r3, [r5, #10]
 800683c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8006840:	7aab      	ldrb	r3, [r5, #10]
 8006842:	b18b      	cbz	r3, 8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006844:	7aeb      	ldrb	r3, [r5, #11]
 8006846:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800684a:	7aeb      	ldrb	r3, [r5, #11]
 800684c:	b163      	cbz	r3, 8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800684e:	7b2b      	ldrb	r3, [r5, #12]
 8006850:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8006854:	7b2b      	ldrb	r3, [r5, #12]
 8006856:	b13b      	cbz	r3, 8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006858:	7b6b      	ldrb	r3, [r5, #13]
 800685a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800685e:	7b6b      	ldrb	r3, [r5, #13]
 8006860:	b113      	cbz	r3, 8006868 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006862:	7bab      	ldrb	r3, [r5, #14]
 8006864:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8006868:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800686a:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800686e:	f104 0a04 	add.w	sl, r4, #4
 8006872:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006874:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006878:	4650      	mov	r0, sl
		pxNewTCB->uxMutexesHeld = 0;
 800687a:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800687e:	bf28      	it	cs
 8006880:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8006882:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006884:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006886:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800688a:	f7ff f92d 	bl	8005ae8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800688e:	f104 0018 	add.w	r0, r4, #24
 8006892:	f7ff f929 	bl	8005ae8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006896:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800689a:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689c:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800689e:	4641      	mov	r1, r8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068a0:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068a4:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068a6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068a8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068aa:	f7ff f995 	bl	8005bd8 <pxPortInitialiseStack>
 80068ae:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80068b0:	b107      	cbz	r7, 80068b4 <xTaskCreate+0x120>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068b2:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 80068b4:	f7ff f9be 	bl	8005c34 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80068b8:	4a40      	ldr	r2, [pc, #256]	; (80069bc <xTaskCreate+0x228>)
		if( pxCurrentTCB == NULL )
 80068ba:	4e41      	ldr	r6, [pc, #260]	; (80069c0 <xTaskCreate+0x22c>)
		uxCurrentNumberOfTasks++;
 80068bc:	6813      	ldr	r3, [r2, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068c2:	6833      	ldr	r3, [r6, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d043      	beq.n	8006950 <xTaskCreate+0x1bc>
			if( xSchedulerRunning == pdFALSE )
 80068c8:	4f3e      	ldr	r7, [pc, #248]	; (80069c4 <xTaskCreate+0x230>)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	b383      	cbz	r3, 8006930 <xTaskCreate+0x19c>
 80068ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068d0:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80069e4 <xTaskCreate+0x250>
		uxTaskNumber++;
 80068d4:	f8df c110 	ldr.w	ip, [pc, #272]	; 80069e8 <xTaskCreate+0x254>
		prvAddTaskToReadyList( pxNewTCB );
 80068d8:	f04f 0b01 	mov.w	fp, #1
 80068dc:	f8df e10c 	ldr.w	lr, [pc, #268]	; 80069ec <xTaskCreate+0x258>
 80068e0:	4651      	mov	r1, sl
		uxTaskNumber++;
 80068e2:	f8dc 5000 	ldr.w	r5, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 80068e6:	fa0b f203 	lsl.w	r2, fp, r3
 80068ea:	f8de 0000 	ldr.w	r0, [lr]
 80068ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 80068f2:	eb05 090b 	add.w	r9, r5, fp
		prvAddTaskToReadyList( pxNewTCB );
 80068f6:	4302      	orrs	r2, r0
 80068f8:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 80068fc:	f8cc 9000 	str.w	r9, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8006900:	f8ce 2000 	str.w	r2, [lr]
 8006904:	f7ff f8f4 	bl	8005af0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006908:	f7ff f9ba 	bl	8005c80 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	b1c3      	cbz	r3, 8006942 <xTaskCreate+0x1ae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006910:	6832      	ldr	r2, [r6, #0]
 8006912:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006914:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006916:	429a      	cmp	r2, r3
 8006918:	d213      	bcs.n	8006942 <xTaskCreate+0x1ae>
			taskYIELD_IF_USING_PREEMPTION();
 800691a:	4b2b      	ldr	r3, [pc, #172]	; (80069c8 <xTaskCreate+0x234>)
 800691c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800692a:	4658      	mov	r0, fp
 800692c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006930:	6832      	ldr	r2, [r6, #0]
 8006932:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006934:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006936:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80069e4 <xTaskCreate+0x250>
 800693a:	429a      	cmp	r2, r3
 800693c:	d8ca      	bhi.n	80068d4 <xTaskCreate+0x140>
					pxCurrentTCB = pxNewTCB;
 800693e:	6034      	str	r4, [r6, #0]
 8006940:	e7c8      	b.n	80068d4 <xTaskCreate+0x140>
			xReturn = pdPASS;
 8006942:	4658      	mov	r0, fp
	}
 8006944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 8006950:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006952:	6813      	ldr	r3, [r2, #0]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d00b      	beq.n	8006970 <xTaskCreate+0x1dc>
 8006958:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800695a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80069e4 <xTaskCreate+0x250>
 800695e:	4f19      	ldr	r7, [pc, #100]	; (80069c4 <xTaskCreate+0x230>)
 8006960:	e7b8      	b.n	80068d4 <xTaskCreate+0x140>
					vPortFree( pxStack );
 8006962:	4630      	mov	r0, r6
 8006964:	f7ff f878 	bl	8005a58 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006970:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80069e4 <xTaskCreate+0x250>
 8006974:	4645      	mov	r5, r8
 8006976:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800697a:	4628      	mov	r0, r5
 800697c:	3514      	adds	r5, #20
 800697e:	f7ff f8a7 	bl	8005ad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006982:	42bd      	cmp	r5, r7
 8006984:	d1f9      	bne.n	800697a <xTaskCreate+0x1e6>
	vListInitialise( &xDelayedTaskList1 );
 8006986:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80069f0 <xTaskCreate+0x25c>
	vListInitialise( &xDelayedTaskList2 );
 800698a:	4d10      	ldr	r5, [pc, #64]	; (80069cc <xTaskCreate+0x238>)
	vListInitialise( &xDelayedTaskList1 );
 800698c:	4648      	mov	r0, r9
 800698e:	4f0d      	ldr	r7, [pc, #52]	; (80069c4 <xTaskCreate+0x230>)
 8006990:	f7ff f89e 	bl	8005ad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006994:	4628      	mov	r0, r5
 8006996:	f7ff f89b 	bl	8005ad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800699a:	480d      	ldr	r0, [pc, #52]	; (80069d0 <xTaskCreate+0x23c>)
 800699c:	f7ff f898 	bl	8005ad0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80069a0:	480c      	ldr	r0, [pc, #48]	; (80069d4 <xTaskCreate+0x240>)
 80069a2:	f7ff f895 	bl	8005ad0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80069a6:	480c      	ldr	r0, [pc, #48]	; (80069d8 <xTaskCreate+0x244>)
 80069a8:	f7ff f892 	bl	8005ad0 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <xTaskCreate+0x248>)
	pxDelayedTaskList = &xDelayedTaskList1;
 80069ae:	4a0c      	ldr	r2, [pc, #48]	; (80069e0 <xTaskCreate+0x24c>)
 80069b0:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069b4:	601d      	str	r5, [r3, #0]
 80069b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069b8:	e78c      	b.n	80068d4 <xTaskCreate+0x140>
 80069ba:	bf00      	nop
 80069bc:	20003d34 	.word	0x20003d34
 80069c0:	20003c9c 	.word	0x20003c9c
 80069c4:	20003d94 	.word	0x20003d94
 80069c8:	e000ed04 	.word	0xe000ed04
 80069cc:	20003d60 	.word	0x20003d60
 80069d0:	20003d80 	.word	0x20003d80
 80069d4:	20003dac 	.word	0x20003dac
 80069d8:	20003d98 	.word	0x20003d98
 80069dc:	20003ca4 	.word	0x20003ca4
 80069e0:	20003ca0 	.word	0x20003ca0
 80069e4:	20003ca8 	.word	0x20003ca8
 80069e8:	20003d44 	.word	0x20003d44
 80069ec:	20003d48 	.word	0x20003d48
 80069f0:	20003d4c 	.word	0x20003d4c

080069f4 <vTaskStartScheduler>:
{
 80069f4:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80069f6:	4b19      	ldr	r3, [pc, #100]	; (8006a5c <vTaskStartScheduler+0x68>)
{
 80069f8:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80069fa:	2400      	movs	r4, #0
 80069fc:	2280      	movs	r2, #128	; 0x80
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	4917      	ldr	r1, [pc, #92]	; (8006a60 <vTaskStartScheduler+0x6c>)
 8006a02:	4623      	mov	r3, r4
 8006a04:	9400      	str	r4, [sp, #0]
 8006a06:	4817      	ldr	r0, [pc, #92]	; (8006a64 <vTaskStartScheduler+0x70>)
 8006a08:	f7ff fec4 	bl	8006794 <xTaskCreate>
	if( xReturn == pdPASS )
 8006a0c:	2801      	cmp	r0, #1
 8006a0e:	d00e      	beq.n	8006a2e <vTaskStartScheduler+0x3a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a10:	3001      	adds	r0, #1
 8006a12:	d001      	beq.n	8006a18 <vTaskStartScheduler+0x24>
}
 8006a14:	b003      	add	sp, #12
 8006a16:	bd30      	pop	{r4, r5, pc}
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	b672      	cpsid	i
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	b662      	cpsie	i
 8006a2c:	e7fe      	b.n	8006a2c <vTaskStartScheduler+0x38>
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	b672      	cpsid	i
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a42:	4909      	ldr	r1, [pc, #36]	; (8006a68 <vTaskStartScheduler+0x74>)
 8006a44:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8006a48:	4a08      	ldr	r2, [pc, #32]	; (8006a6c <vTaskStartScheduler+0x78>)
		xTickCount = ( TickType_t ) 0U;
 8006a4a:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <vTaskStartScheduler+0x7c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a4c:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8006a4e:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a50:	601c      	str	r4, [r3, #0]
}
 8006a52:	b003      	add	sp, #12
 8006a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006a58:	f7ff b98a 	b.w	8005d70 <xPortStartScheduler>
 8006a5c:	20003d74 	.word	0x20003d74
 8006a60:	08008090 	.word	0x08008090
 8006a64:	08006d55 	.word	0x08006d55
 8006a68:	20003d78 	.word	0x20003d78
 8006a6c:	20003d94 	.word	0x20003d94
 8006a70:	20003dc0 	.word	0x20003dc0

08006a74 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006a74:	4a02      	ldr	r2, [pc, #8]	; (8006a80 <vTaskSuspendAll+0xc>)
 8006a76:	6813      	ldr	r3, [r2, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	20003d40 	.word	0x20003d40

08006a84 <xTaskIncrementTick>:
{
 8006a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a88:	4b4b      	ldr	r3, [pc, #300]	; (8006bb8 <xTaskIncrementTick+0x134>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d153      	bne.n	8006b38 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8006a90:	4b4a      	ldr	r3, [pc, #296]	; (8006bbc <xTaskIncrementTick+0x138>)
 8006a92:	681e      	ldr	r6, [r3, #0]
 8006a94:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006a96:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8006a98:	2e00      	cmp	r6, #0
 8006a9a:	d05a      	beq.n	8006b52 <xTaskIncrementTick+0xce>
 8006a9c:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8006bdc <xTaskIncrementTick+0x158>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006aa0:	f8db 2000 	ldr.w	r2, [fp]
 8006aa4:	2400      	movs	r4, #0
 8006aa6:	4296      	cmp	r6, r2
 8006aa8:	d362      	bcc.n	8006b70 <xTaskIncrementTick+0xec>
 8006aaa:	4d45      	ldr	r5, [pc, #276]	; (8006bc0 <xTaskIncrementTick+0x13c>)
 8006aac:	4f45      	ldr	r7, [pc, #276]	; (8006bc4 <xTaskIncrementTick+0x140>)
 8006aae:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8006be0 <xTaskIncrementTick+0x15c>
 8006ab2:	e02e      	b.n	8006b12 <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ab4:	682a      	ldr	r2, [r5, #0]
 8006ab6:	68d2      	ldr	r2, [r2, #12]
 8006ab8:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006abc:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ac0:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8006ac4:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ac6:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8006ac8:	d36b      	bcc.n	8006ba2 <xTaskIncrementTick+0x11e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aca:	f7ff f83b 	bl	8005b44 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ace:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ad2:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ad6:	b109      	cbz	r1, 8006adc <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ad8:	f7ff f834 	bl	8005b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006adc:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	4b39      	ldr	r3, [pc, #228]	; (8006bc8 <xTaskIncrementTick+0x144>)
 8006ae4:	4651      	mov	r1, sl
 8006ae6:	fa02 fe00 	lsl.w	lr, r2, r0
 8006aea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006af4:	ea4e 0e03 	orr.w	lr, lr, r3
 8006af8:	4b33      	ldr	r3, [pc, #204]	; (8006bc8 <xTaskIncrementTick+0x144>)
 8006afa:	f8c3 e000 	str.w	lr, [r3]
 8006afe:	f7fe fff7 	bl	8005af0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b02:	f8d8 0000 	ldr.w	r0, [r8]
 8006b06:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8006b0a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006b0c:	4291      	cmp	r1, r2
 8006b0e:	bf28      	it	cs
 8006b10:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b12:	682a      	ldr	r2, [r5, #0]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	2a00      	cmp	r2, #0
 8006b18:	d1cc      	bne.n	8006ab4 <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1e:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b22:	f8d8 3000 	ldr.w	r3, [r8]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b2c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	bf28      	it	cs
 8006b34:	2401      	movcs	r4, #1
 8006b36:	e004      	b.n	8006b42 <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 8006b38:	4a24      	ldr	r2, [pc, #144]	; (8006bcc <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 8006b3a:	2400      	movs	r4, #0
		++uxPendedTicks;
 8006b3c:	6813      	ldr	r3, [r2, #0]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8006b42:	4b23      	ldr	r3, [pc, #140]	; (8006bd0 <xTaskIncrementTick+0x14c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bf18      	it	ne
 8006b4a:	2401      	movne	r4, #1
}
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006b52:	4d1b      	ldr	r5, [pc, #108]	; (8006bc0 <xTaskIncrementTick+0x13c>)
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	b173      	cbz	r3, 8006b78 <xTaskIncrementTick+0xf4>
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	b672      	cpsid	i
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	b662      	cpsie	i
 8006b6e:	e7fe      	b.n	8006b6e <xTaskIncrementTick+0xea>
 8006b70:	4f14      	ldr	r7, [pc, #80]	; (8006bc4 <xTaskIncrementTick+0x140>)
 8006b72:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006be0 <xTaskIncrementTick+0x15c>
 8006b76:	e7d4      	b.n	8006b22 <xTaskIncrementTick+0x9e>
 8006b78:	4b16      	ldr	r3, [pc, #88]	; (8006bd4 <xTaskIncrementTick+0x150>)
 8006b7a:	6829      	ldr	r1, [r5, #0]
 8006b7c:	4a16      	ldr	r2, [pc, #88]	; (8006bd8 <xTaskIncrementTick+0x154>)
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	6028      	str	r0, [r5, #0]
 8006b82:	6019      	str	r1, [r3, #0]
 8006b84:	6813      	ldr	r3, [r2, #0]
 8006b86:	3301      	adds	r3, #1
 8006b88:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b8a:	682b      	ldr	r3, [r5, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	b15b      	cbz	r3, 8006ba8 <xTaskIncrementTick+0x124>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b90:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b92:	f8df b048 	ldr.w	fp, [pc, #72]	; 8006bdc <xTaskIncrementTick+0x158>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b96:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b98:	68d2      	ldr	r2, [r2, #12]
 8006b9a:	6852      	ldr	r2, [r2, #4]
 8006b9c:	f8cb 2000 	str.w	r2, [fp]
 8006ba0:	e77e      	b.n	8006aa0 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 8006ba2:	f8cb 1000 	str.w	r1, [fp]
						break;
 8006ba6:	e7bc      	b.n	8006b22 <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ba8:	f8df b030 	ldr.w	fp, [pc, #48]	; 8006bdc <xTaskIncrementTick+0x158>
 8006bac:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb0:	f8cb 2000 	str.w	r2, [fp]
 8006bb4:	e774      	b.n	8006aa0 <xTaskIncrementTick+0x1c>
 8006bb6:	bf00      	nop
 8006bb8:	20003d40 	.word	0x20003d40
 8006bbc:	20003dc0 	.word	0x20003dc0
 8006bc0:	20003ca0 	.word	0x20003ca0
 8006bc4:	20003ca8 	.word	0x20003ca8
 8006bc8:	20003d48 	.word	0x20003d48
 8006bcc:	20003d3c 	.word	0x20003d3c
 8006bd0:	20003dc4 	.word	0x20003dc4
 8006bd4:	20003ca4 	.word	0x20003ca4
 8006bd8:	20003d7c 	.word	0x20003d7c
 8006bdc:	20003d78 	.word	0x20003d78
 8006be0:	20003c9c 	.word	0x20003c9c

08006be4 <xTaskResumeAll>:
{
 8006be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8006be8:	4c3b      	ldr	r4, [pc, #236]	; (8006cd8 <xTaskResumeAll+0xf4>)
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	b953      	cbnz	r3, 8006c04 <xTaskResumeAll+0x20>
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	b672      	cpsid	i
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	b662      	cpsie	i
 8006c02:	e7fe      	b.n	8006c02 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8006c04:	f7ff f816 	bl	8005c34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c0e:	6824      	ldr	r4, [r4, #0]
 8006c10:	2c00      	cmp	r4, #0
 8006c12:	d153      	bne.n	8006cbc <xTaskResumeAll+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c14:	4b31      	ldr	r3, [pc, #196]	; (8006cdc <xTaskResumeAll+0xf8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d04f      	beq.n	8006cbc <xTaskResumeAll+0xd8>
 8006c1c:	4d30      	ldr	r5, [pc, #192]	; (8006ce0 <xTaskResumeAll+0xfc>)
 8006c1e:	4f31      	ldr	r7, [pc, #196]	; (8006ce4 <xTaskResumeAll+0x100>)
					prvAddTaskToReadyList( pxTCB );
 8006c20:	4e31      	ldr	r6, [pc, #196]	; (8006ce8 <xTaskResumeAll+0x104>)
 8006c22:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8006cfc <xTaskResumeAll+0x118>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c26:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8006d00 <xTaskResumeAll+0x11c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c2a:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 8006c2c:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c30:	b323      	cbz	r3, 8006c7c <xTaskResumeAll+0x98>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c36:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c3a:	f104 0018 	add.w	r0, r4, #24
 8006c3e:	f7fe ff81 	bl	8005b44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c42:	4650      	mov	r0, sl
 8006c44:	f7fe ff7e 	bl	8005b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006c4a:	6832      	ldr	r2, [r6, #0]
 8006c4c:	4651      	mov	r1, sl
 8006c4e:	fa08 f300 	lsl.w	r3, r8, r0
 8006c52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c56:	4313      	orrs	r3, r2
 8006c58:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8006c5c:	6033      	str	r3, [r6, #0]
 8006c5e:	f7fe ff47 	bl	8005af0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c62:	f8db 3000 	ldr.w	r3, [fp]
 8006c66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d3dd      	bcc.n	8006c2a <xTaskResumeAll+0x46>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c6e:	683b      	ldr	r3, [r7, #0]
						xYieldPending = pdTRUE;
 8006c70:	f8c5 8000 	str.w	r8, [r5]
					prvAddTaskToReadyList( pxTCB );
 8006c74:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1da      	bne.n	8006c32 <xTaskResumeAll+0x4e>
				if( pxTCB != NULL )
 8006c7c:	b13c      	cbz	r4, 8006c8e <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c7e:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <xTaskResumeAll+0x108>)
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	6812      	ldr	r2, [r2, #0]
 8006c84:	bb02      	cbnz	r2, 8006cc8 <xTaskResumeAll+0xe4>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c86:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <xTaskResumeAll+0x10c>)
 8006c88:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8c:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c8e:	4e19      	ldr	r6, [pc, #100]	; (8006cf4 <xTaskResumeAll+0x110>)
 8006c90:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c92:	b13c      	cbz	r4, 8006ca4 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 8006c94:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006c96:	f7ff fef5 	bl	8006a84 <xTaskIncrementTick>
 8006c9a:	b100      	cbz	r0, 8006c9e <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8006c9c:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c9e:	3c01      	subs	r4, #1
 8006ca0:	d1f9      	bne.n	8006c96 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8006ca2:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b14b      	cbz	r3, 8006cbc <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 8006ca8:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <xTaskResumeAll+0x114>)
 8006caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006cb8:	2401      	movs	r4, #1
 8006cba:	e000      	b.n	8006cbe <xTaskResumeAll+0xda>
BaseType_t xAlreadyYielded = pdFALSE;
 8006cbc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006cbe:	f7fe ffdf 	bl	8005c80 <vPortExitCritical>
}
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006cc8:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cca:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <xTaskResumeAll+0x10c>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ccc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cce:	68d2      	ldr	r2, [r2, #12]
 8006cd0:	6852      	ldr	r2, [r2, #4]
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e7db      	b.n	8006c8e <xTaskResumeAll+0xaa>
 8006cd6:	bf00      	nop
 8006cd8:	20003d40 	.word	0x20003d40
 8006cdc:	20003d34 	.word	0x20003d34
 8006ce0:	20003dc4 	.word	0x20003dc4
 8006ce4:	20003d80 	.word	0x20003d80
 8006ce8:	20003d48 	.word	0x20003d48
 8006cec:	20003ca0 	.word	0x20003ca0
 8006cf0:	20003d78 	.word	0x20003d78
 8006cf4:	20003d3c 	.word	0x20003d3c
 8006cf8:	e000ed04 	.word	0xe000ed04
 8006cfc:	20003ca8 	.word	0x20003ca8
 8006d00:	20003c9c 	.word	0x20003c9c

08006d04 <vTaskDelay>:
	{
 8006d04:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d06:	b168      	cbz	r0, 8006d24 <vTaskDelay+0x20>
			configASSERT( uxSchedulerSuspended == 0 );
 8006d08:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <vTaskDelay+0x48>)
 8006d0a:	6819      	ldr	r1, [r3, #0]
 8006d0c:	b199      	cbz	r1, 8006d36 <vTaskDelay+0x32>
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	b672      	cpsid	i
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	b662      	cpsie	i
 8006d22:	e7fe      	b.n	8006d22 <vTaskDelay+0x1e>
			portYIELD_WITHIN_API();
 8006d24:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <vTaskDelay+0x4c>)
 8006d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	3201      	adds	r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d3c:	f7ff fce4 	bl	8006708 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006d40:	f7ff ff50 	bl	8006be4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d0ed      	beq.n	8006d24 <vTaskDelay+0x20>
 8006d48:	bd08      	pop	{r3, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20003d40 	.word	0x20003d40
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <prvIdleTask>:
{
 8006d54:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8006d58:	4c1c      	ldr	r4, [pc, #112]	; (8006dcc <prvIdleTask+0x78>)
				taskYIELD();
 8006d5a:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8006d5e:	4e1c      	ldr	r6, [pc, #112]	; (8006dd0 <prvIdleTask+0x7c>)
 8006d60:	4d1c      	ldr	r5, [pc, #112]	; (8006dd4 <prvIdleTask+0x80>)
 8006d62:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8006ddc <prvIdleTask+0x88>
 8006d66:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006de0 <prvIdleTask+0x8c>
 8006d6a:	e006      	b.n	8006d7a <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 8006d6c:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006d6e:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 8006d70:	3301      	adds	r3, #1
 8006d72:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 8006d74:	f7ff ff36 	bl	8006be4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8006d78:	b96f      	cbnz	r7, 8006d96 <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d7a:	682b      	ldr	r3, [r5, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f5      	bne.n	8006d6c <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d80:	f8d8 3000 	ldr.w	r3, [r8]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d9f8      	bls.n	8006d7a <prvIdleTask+0x26>
				taskYIELD();
 8006d88:	f8c9 a000 	str.w	sl, [r9]
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	e7f1      	b.n	8006d7a <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 8006d96:	f7fe ff4d 	bl	8005c34 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d9a:	68f3      	ldr	r3, [r6, #12]
 8006d9c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006da0:	f10b 0004 	add.w	r0, fp, #4
 8006da4:	f7fe fece 	bl	8005b44 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006da8:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <prvIdleTask+0x84>)
 8006daa:	4a0b      	ldr	r2, [pc, #44]	; (8006dd8 <prvIdleTask+0x84>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 8006db8:	f7fe ff62 	bl	8005c80 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8006dbc:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 8006dc0:	f7fe fe4a 	bl	8005a58 <vPortFree>
			vPortFree( pxTCB );
 8006dc4:	4658      	mov	r0, fp
 8006dc6:	f7fe fe47 	bl	8005a58 <vPortFree>
 8006dca:	e7d6      	b.n	8006d7a <prvIdleTask+0x26>
 8006dcc:	20003d40 	.word	0x20003d40
 8006dd0:	20003dac 	.word	0x20003dac
 8006dd4:	20003d38 	.word	0x20003d38
 8006dd8:	20003d34 	.word	0x20003d34
 8006ddc:	20003ca8 	.word	0x20003ca8
 8006de0:	e000ed04 	.word	0xe000ed04

08006de4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006de4:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <vTaskSwitchContext+0x68>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	bb2b      	cbnz	r3, 8006e36 <vTaskSwitchContext+0x52>
		xYieldPending = pdFALSE;
 8006dea:	4919      	ldr	r1, [pc, #100]	; (8006e50 <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006dec:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 8006dee:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006df0:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006df2:	fab3 f383 	clz	r3, r3
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <vTaskSwitchContext+0x74>)
 8006dfa:	f1c3 031f 	rsb	r3, r3, #31
 8006dfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	58d0      	ldr	r0, [r2, r3]
 8006e06:	18d1      	adds	r1, r2, r3
 8006e08:	b950      	cbnz	r0, 8006e20 <vTaskSwitchContext+0x3c>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	b672      	cpsid	i
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	b662      	cpsie	i
 8006e1e:	e7fe      	b.n	8006e1e <vTaskSwitchContext+0x3a>
 8006e20:	3308      	adds	r3, #8
 8006e22:	6848      	ldr	r0, [r1, #4]
 8006e24:	441a      	add	r2, r3
 8006e26:	6843      	ldr	r3, [r0, #4]
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	604b      	str	r3, [r1, #4]
 8006e2c:	d007      	beq.n	8006e3e <vTaskSwitchContext+0x5a>
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <vTaskSwitchContext+0x78>)
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8006e36:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <vTaskSwitchContext+0x6c>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	604b      	str	r3, [r1, #4]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <vTaskSwitchContext+0x78>)
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20003d40 	.word	0x20003d40
 8006e50:	20003dc4 	.word	0x20003dc4
 8006e54:	20003d48 	.word	0x20003d48
 8006e58:	20003ca8 	.word	0x20003ca8
 8006e5c:	20003c9c 	.word	0x20003c9c

08006e60 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006e60:	b348      	cbz	r0, 8006eb6 <vTaskPlaceOnEventList+0x56>
{
 8006e62:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e64:	4d21      	ldr	r5, [pc, #132]	; (8006eec <vTaskPlaceOnEventList+0x8c>)
 8006e66:	460c      	mov	r4, r1
 8006e68:	6829      	ldr	r1, [r5, #0]
 8006e6a:	3118      	adds	r1, #24
 8006e6c:	f7fe fe50 	bl	8005b10 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8006e70:	4b1f      	ldr	r3, [pc, #124]	; (8006ef0 <vTaskPlaceOnEventList+0x90>)
 8006e72:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e74:	6828      	ldr	r0, [r5, #0]
 8006e76:	3004      	adds	r0, #4
 8006e78:	f7fe fe64 	bl	8005b44 <uxListRemove>
 8006e7c:	b940      	cbnz	r0, 8006e90 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e7e:	682b      	ldr	r3, [r5, #0]
 8006e80:	2201      	movs	r2, #1
 8006e82:	491c      	ldr	r1, [pc, #112]	; (8006ef4 <vTaskPlaceOnEventList+0x94>)
 8006e84:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e86:	680b      	ldr	r3, [r1, #0]
 8006e88:	4082      	lsls	r2, r0
 8006e8a:	ea23 0302 	bic.w	r3, r3, r2
 8006e8e:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e90:	1c63      	adds	r3, r4, #1
 8006e92:	d01b      	beq.n	8006ecc <vTaskPlaceOnEventList+0x6c>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e94:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e96:	682b      	ldr	r3, [r5, #0]
			if( xTimeToWake < xConstTickCount )
 8006e98:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e9a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e9c:	d81d      	bhi.n	8006eda <vTaskPlaceOnEventList+0x7a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e9e:	4b16      	ldr	r3, [pc, #88]	; (8006ef8 <vTaskPlaceOnEventList+0x98>)
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	6829      	ldr	r1, [r5, #0]
 8006ea4:	3104      	adds	r1, #4
 8006ea6:	f7fe fe33 	bl	8005b10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006eaa:	4b14      	ldr	r3, [pc, #80]	; (8006efc <vTaskPlaceOnEventList+0x9c>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4294      	cmp	r4, r2
 8006eb0:	d200      	bcs.n	8006eb4 <vTaskPlaceOnEventList+0x54>
					xNextTaskUnblockTime = xTimeToWake;
 8006eb2:	601c      	str	r4, [r3, #0]
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	b672      	cpsid	i
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	b662      	cpsie	i
 8006eca:	e7fe      	b.n	8006eca <vTaskPlaceOnEventList+0x6a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ecc:	6829      	ldr	r1, [r5, #0]
 8006ece:	480c      	ldr	r0, [pc, #48]	; (8006f00 <vTaskPlaceOnEventList+0xa0>)
 8006ed0:	3104      	adds	r1, #4
}
 8006ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ed6:	f7fe be0b 	b.w	8005af0 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eda:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <vTaskPlaceOnEventList+0xa4>)
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	6829      	ldr	r1, [r5, #0]
}
 8006ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee4:	3104      	adds	r1, #4
 8006ee6:	f7fe be13 	b.w	8005b10 <vListInsert>
 8006eea:	bf00      	nop
 8006eec:	20003c9c 	.word	0x20003c9c
 8006ef0:	20003dc0 	.word	0x20003dc0
 8006ef4:	20003d48 	.word	0x20003d48
 8006ef8:	20003ca0 	.word	0x20003ca0
 8006efc:	20003d78 	.word	0x20003d78
 8006f00:	20003d98 	.word	0x20003d98
 8006f04:	20003ca4 	.word	0x20003ca4

08006f08 <xTaskRemoveFromEventList>:
{
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006f0a:	68c3      	ldr	r3, [r0, #12]
 8006f0c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006f0e:	b324      	cbz	r4, 8006f5a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f10:	f104 0518 	add.w	r5, r4, #24
 8006f14:	4628      	mov	r0, r5
 8006f16:	f7fe fe15 	bl	8005b44 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f1a:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <xTaskRemoveFromEventList+0x78>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	bb4b      	cbnz	r3, 8006f74 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f20:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f22:	4d18      	ldr	r5, [pc, #96]	; (8006f84 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f24:	4630      	mov	r0, r6
 8006f26:	f7fe fe0d 	bl	8005b44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4816      	ldr	r0, [pc, #88]	; (8006f88 <xTaskRemoveFromEventList+0x80>)
 8006f30:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8006f34:	4631      	mov	r1, r6
 8006f36:	4093      	lsls	r3, r2
 8006f38:	682a      	ldr	r2, [r5, #0]
 8006f3a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	f7fe fdd5 	bl	8005af0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f46:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <xTaskRemoveFromEventList+0x84>)
 8006f48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d90e      	bls.n	8006f70 <xTaskRemoveFromEventList+0x68>
		xYieldPending = pdTRUE;
 8006f52:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <xTaskRemoveFromEventList+0x88>)
 8006f54:	2001      	movs	r0, #1
 8006f56:	6018      	str	r0, [r3, #0]
 8006f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	b672      	cpsid	i
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	b662      	cpsie	i
 8006f6e:	e7fe      	b.n	8006f6e <xTaskRemoveFromEventList+0x66>
		xReturn = pdFALSE;
 8006f70:	2000      	movs	r0, #0
}
 8006f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f74:	4629      	mov	r1, r5
 8006f76:	4807      	ldr	r0, [pc, #28]	; (8006f94 <xTaskRemoveFromEventList+0x8c>)
 8006f78:	f7fe fdba 	bl	8005af0 <vListInsertEnd>
 8006f7c:	e7e3      	b.n	8006f46 <xTaskRemoveFromEventList+0x3e>
 8006f7e:	bf00      	nop
 8006f80:	20003d40 	.word	0x20003d40
 8006f84:	20003d48 	.word	0x20003d48
 8006f88:	20003ca8 	.word	0x20003ca8
 8006f8c:	20003c9c 	.word	0x20003c9c
 8006f90:	20003dc4 	.word	0x20003dc4
 8006f94:	20003d80 	.word	0x20003d80

08006f98 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8006f98:	b130      	cbz	r0, 8006fa8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f9a:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <vTaskSetTimeOutState+0x28>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <vTaskSetTimeOutState+0x2c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f9e:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	e880 000c 	stmia.w	r0, {r2, r3}
 8006fa6:	4770      	bx	lr
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	b672      	cpsid	i
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	b662      	cpsie	i
 8006fbc:	e7fe      	b.n	8006fbc <vTaskSetTimeOutState+0x24>
 8006fbe:	bf00      	nop
 8006fc0:	20003d7c 	.word	0x20003d7c
 8006fc4:	20003dc0 	.word	0x20003dc0

08006fc8 <xTaskCheckForTimeOut>:
{
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d030      	beq.n	8007030 <xTaskCheckForTimeOut+0x68>
	configASSERT( pxTicksToWait );
 8006fce:	b321      	cbz	r1, 800701a <xTaskCheckForTimeOut+0x52>
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006fd4:	f7fe fe2e 	bl	8005c34 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006fd8:	481d      	ldr	r0, [pc, #116]	; (8007050 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8006fda:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8006fdc:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	d031      	beq.n	8007046 <xTaskCheckForTimeOut+0x7e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fe2:	4e1c      	ldr	r6, [pc, #112]	; (8007054 <xTaskCheckForTimeOut+0x8c>)
 8006fe4:	6827      	ldr	r7, [r4, #0]
 8006fe6:	6832      	ldr	r2, [r6, #0]
 8006fe8:	4297      	cmp	r7, r2
 8006fea:	6862      	ldr	r2, [r4, #4]
 8006fec:	d006      	beq.n	8006ffc <xTaskCheckForTimeOut+0x34>
 8006fee:	4291      	cmp	r1, r2
 8006ff0:	d304      	bcc.n	8006ffc <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 8006ff2:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 8006ff4:	f7fe fe44 	bl	8005c80 <vPortExitCritical>
}
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ffc:	1a8f      	subs	r7, r1, r2
 8006ffe:	42bb      	cmp	r3, r7
 8007000:	d9f7      	bls.n	8006ff2 <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007002:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007004:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007006:	6801      	ldr	r1, [r0, #0]
			xReturn = pdFALSE;
 8007008:	2600      	movs	r6, #0
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800700a:	4413      	add	r3, r2
 800700c:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800700e:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007010:	6061      	str	r1, [r4, #4]
	taskEXIT_CRITICAL();
 8007012:	f7fe fe35 	bl	8005c80 <vPortExitCritical>
}
 8007016:	4630      	mov	r0, r6
 8007018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	b672      	cpsid	i
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	b662      	cpsie	i
 800702e:	e7fe      	b.n	800702e <xTaskCheckForTimeOut+0x66>
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	b672      	cpsid	i
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	b662      	cpsie	i
 8007044:	e7fe      	b.n	8007044 <xTaskCheckForTimeOut+0x7c>
				xReturn = pdFALSE;
 8007046:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 8007048:	f7fe fe1a 	bl	8005c80 <vPortExitCritical>
}
 800704c:	4630      	mov	r0, r6
 800704e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007050:	20003dc0 	.word	0x20003dc0
 8007054:	20003d7c 	.word	0x20003d7c

08007058 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007058:	4b01      	ldr	r3, [pc, #4]	; (8007060 <vTaskMissedYield+0x8>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	4770      	bx	lr
 8007060:	20003dc4 	.word	0x20003dc4

08007064 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007064:	4b05      	ldr	r3, [pc, #20]	; (800707c <xTaskGetSchedulerState+0x18>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	b133      	cbz	r3, 8007078 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <xTaskGetSchedulerState+0x1c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8007070:	bf0c      	ite	eq
 8007072:	2002      	moveq	r0, #2
 8007074:	2000      	movne	r0, #0
 8007076:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007078:	2001      	movs	r0, #1
	}
 800707a:	4770      	bx	lr
 800707c:	20003d94 	.word	0x20003d94
 8007080:	20003d40 	.word	0x20003d40

08007084 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8007084:	2800      	cmp	r0, #0
 8007086:	d042      	beq.n	800710e <vTaskPriorityInherit+0x8a>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007088:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	{
 800708a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800708e:	4c21      	ldr	r4, [pc, #132]	; (8007114 <vTaskPriorityInherit+0x90>)
 8007090:	6822      	ldr	r2, [r4, #0]
 8007092:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007094:	4293      	cmp	r3, r2
 8007096:	d212      	bcs.n	80070be <vTaskPriorityInherit+0x3a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007098:	6982      	ldr	r2, [r0, #24]
 800709a:	2a00      	cmp	r2, #0
 800709c:	db04      	blt.n	80070a8 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80070a2:	f1c2 0207 	rsb	r2, r2, #7
 80070a6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80070a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80070ac:	4d1a      	ldr	r5, [pc, #104]	; (8007118 <vTaskPriorityInherit+0x94>)
 80070ae:	6942      	ldr	r2, [r0, #20]
 80070b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d004      	beq.n	80070c2 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	62c3      	str	r3, [r0, #44]	; 0x2c
 80070be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c2:	f100 0804 	add.w	r8, r0, #4
 80070c6:	4607      	mov	r7, r0
 80070c8:	4640      	mov	r0, r8
 80070ca:	f7fe fd3b 	bl	8005b44 <uxListRemove>
 80070ce:	b9f8      	cbnz	r0, 8007110 <vTaskPriorityInherit+0x8c>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	4e12      	ldr	r6, [pc, #72]	; (800711c <vTaskPriorityInherit+0x98>)
 80070d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80070d8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80070dc:	b932      	cbnz	r2, 80070ec <vTaskPriorityInherit+0x68>
 80070de:	2101      	movs	r1, #1
 80070e0:	6832      	ldr	r2, [r6, #0]
 80070e2:	fa01 f303 	lsl.w	r3, r1, r3
 80070e6:	ea22 0303 	bic.w	r3, r2, r3
 80070ea:	6033      	str	r3, [r6, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070ec:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 80070ee:	2301      	movs	r3, #1
 80070f0:	6834      	ldr	r4, [r6, #0]
 80070f2:	4641      	mov	r1, r8
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80070f6:	4093      	lsls	r3, r2
 80070f8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070fc:	62fa      	str	r2, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80070fe:	4323      	orrs	r3, r4
 8007100:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8007104:	6033      	str	r3, [r6, #0]
	}
 8007106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 800710a:	f7fe bcf1 	b.w	8005af0 <vListInsertEnd>
 800710e:	4770      	bx	lr
 8007110:	4e02      	ldr	r6, [pc, #8]	; (800711c <vTaskPriorityInherit+0x98>)
 8007112:	e7eb      	b.n	80070ec <vTaskPriorityInherit+0x68>
 8007114:	20003c9c 	.word	0x20003c9c
 8007118:	20003ca8 	.word	0x20003ca8
 800711c:	20003d48 	.word	0x20003d48

08007120 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007120:	2800      	cmp	r0, #0
 8007122:	d041      	beq.n	80071a8 <xTaskPriorityDisinherit+0x88>
	{
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8007126:	4b2a      	ldr	r3, [pc, #168]	; (80071d0 <xTaskPriorityDisinherit+0xb0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4298      	cmp	r0, r3
 800712c:	d00a      	beq.n	8007144 <xTaskPriorityDisinherit+0x24>
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	b672      	cpsid	i
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	b662      	cpsie	i
 8007142:	e7fe      	b.n	8007142 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007144:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007146:	b953      	cbnz	r3, 800715e <xTaskPriorityDisinherit+0x3e>
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	b672      	cpsid	i
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	b662      	cpsie	i
 800715c:	e7fe      	b.n	800715c <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800715e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8007160:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007162:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8007164:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007166:	4291      	cmp	r1, r2
 8007168:	d030      	beq.n	80071cc <xTaskPriorityDisinherit+0xac>
 800716a:	bb7b      	cbnz	r3, 80071cc <xTaskPriorityDisinherit+0xac>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800716c:	1d07      	adds	r7, r0, #4
 800716e:	4604      	mov	r4, r0
 8007170:	4638      	mov	r0, r7
 8007172:	f7fe fce7 	bl	8005b44 <uxListRemove>
 8007176:	b1c8      	cbz	r0, 80071ac <xTaskPriorityDisinherit+0x8c>
 8007178:	4816      	ldr	r0, [pc, #88]	; (80071d4 <xTaskPriorityDisinherit+0xb4>)
 800717a:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800717c:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 800717e:	2501      	movs	r5, #1
 8007180:	f8d2 e000 	ldr.w	lr, [r2]
 8007184:	4639      	mov	r1, r7
 8007186:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800718a:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800718e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007190:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007194:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007198:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800719a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800719e:	6016      	str	r6, [r2, #0]
 80071a0:	f7fe fca6 	bl	8005af0 <vListInsertEnd>
					xReturn = pdTRUE;
 80071a4:	4628      	mov	r0, r5
	}
 80071a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 80071a8:	2000      	movs	r0, #0
	}
 80071aa:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80071ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071ae:	4809      	ldr	r0, [pc, #36]	; (80071d4 <xTaskPriorityDisinherit+0xb4>)
 80071b0:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80071b4:	4a08      	ldr	r2, [pc, #32]	; (80071d8 <xTaskPriorityDisinherit+0xb8>)
 80071b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1de      	bne.n	800717c <xTaskPriorityDisinherit+0x5c>
 80071be:	2501      	movs	r5, #1
 80071c0:	6813      	ldr	r3, [r2, #0]
 80071c2:	40b5      	lsls	r5, r6
 80071c4:	ea23 0305 	bic.w	r3, r3, r5
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e7d7      	b.n	800717c <xTaskPriorityDisinherit+0x5c>
	BaseType_t xReturn = pdFALSE;
 80071cc:	2000      	movs	r0, #0
 80071ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d0:	20003c9c 	.word	0x20003c9c
 80071d4:	20003ca8 	.word	0x20003ca8
 80071d8:	20003d48 	.word	0x20003d48

080071dc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <pvTaskIncrementMutexHeldCount+0x14>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	b11a      	cbz	r2, 80071ea <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80071e2:	6819      	ldr	r1, [r3, #0]
 80071e4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80071e6:	3201      	adds	r2, #1
 80071e8:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80071ea:	6818      	ldr	r0, [r3, #0]
	}
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20003c9c 	.word	0x20003c9c
 80071f4:	00000000 	.word	0x00000000

080071f8 <cos>:
 80071f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071fa:	eeb0 7b40 	vmov.f64	d7, d0
 80071fe:	ee17 3a90 	vmov	r3, s15
 8007202:	4a19      	ldr	r2, [pc, #100]	; (8007268 <cos+0x70>)
 8007204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007208:	4293      	cmp	r3, r2
 800720a:	dc04      	bgt.n	8007216 <cos+0x1e>
 800720c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8007260 <cos+0x68>
 8007210:	f000 f9aa 	bl	8007568 <__kernel_cos>
 8007214:	e004      	b.n	8007220 <cos+0x28>
 8007216:	4a15      	ldr	r2, [pc, #84]	; (800726c <cos+0x74>)
 8007218:	4293      	cmp	r3, r2
 800721a:	dd04      	ble.n	8007226 <cos+0x2e>
 800721c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8007220:	b005      	add	sp, #20
 8007222:	f85d fb04 	ldr.w	pc, [sp], #4
 8007226:	4668      	mov	r0, sp
 8007228:	f000 f85e 	bl	80072e8 <__ieee754_rem_pio2>
 800722c:	f000 0003 	and.w	r0, r0, #3
 8007230:	2801      	cmp	r0, #1
 8007232:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007236:	ed9d 0b00 	vldr	d0, [sp]
 800723a:	d007      	beq.n	800724c <cos+0x54>
 800723c:	2802      	cmp	r0, #2
 800723e:	d00a      	beq.n	8007256 <cos+0x5e>
 8007240:	2800      	cmp	r0, #0
 8007242:	d0e5      	beq.n	8007210 <cos+0x18>
 8007244:	2001      	movs	r0, #1
 8007246:	f000 fc6f 	bl	8007b28 <__kernel_sin>
 800724a:	e7e9      	b.n	8007220 <cos+0x28>
 800724c:	f000 fc6c 	bl	8007b28 <__kernel_sin>
 8007250:	eeb1 0b40 	vneg.f64	d0, d0
 8007254:	e7e4      	b.n	8007220 <cos+0x28>
 8007256:	f000 f987 	bl	8007568 <__kernel_cos>
 800725a:	e7f9      	b.n	8007250 <cos+0x58>
 800725c:	f3af 8000 	nop.w
	...
 8007268:	3fe921fb 	.word	0x3fe921fb
 800726c:	7fefffff 	.word	0x7fefffff

08007270 <sin>:
 8007270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007272:	eeb0 7b40 	vmov.f64	d7, d0
 8007276:	ee17 3a90 	vmov	r3, s15
 800727a:	4a19      	ldr	r2, [pc, #100]	; (80072e0 <sin+0x70>)
 800727c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007280:	4293      	cmp	r3, r2
 8007282:	dc05      	bgt.n	8007290 <sin+0x20>
 8007284:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80072d8 <sin+0x68>
 8007288:	2000      	movs	r0, #0
 800728a:	f000 fc4d 	bl	8007b28 <__kernel_sin>
 800728e:	e004      	b.n	800729a <sin+0x2a>
 8007290:	4a14      	ldr	r2, [pc, #80]	; (80072e4 <sin+0x74>)
 8007292:	4293      	cmp	r3, r2
 8007294:	dd04      	ble.n	80072a0 <sin+0x30>
 8007296:	ee30 0b40 	vsub.f64	d0, d0, d0
 800729a:	b005      	add	sp, #20
 800729c:	f85d fb04 	ldr.w	pc, [sp], #4
 80072a0:	4668      	mov	r0, sp
 80072a2:	f000 f821 	bl	80072e8 <__ieee754_rem_pio2>
 80072a6:	f000 0003 	and.w	r0, r0, #3
 80072aa:	2801      	cmp	r0, #1
 80072ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072b0:	ed9d 0b00 	vldr	d0, [sp]
 80072b4:	d004      	beq.n	80072c0 <sin+0x50>
 80072b6:	2802      	cmp	r0, #2
 80072b8:	d005      	beq.n	80072c6 <sin+0x56>
 80072ba:	b950      	cbnz	r0, 80072d2 <sin+0x62>
 80072bc:	2001      	movs	r0, #1
 80072be:	e7e4      	b.n	800728a <sin+0x1a>
 80072c0:	f000 f952 	bl	8007568 <__kernel_cos>
 80072c4:	e7e9      	b.n	800729a <sin+0x2a>
 80072c6:	2001      	movs	r0, #1
 80072c8:	f000 fc2e 	bl	8007b28 <__kernel_sin>
 80072cc:	eeb1 0b40 	vneg.f64	d0, d0
 80072d0:	e7e3      	b.n	800729a <sin+0x2a>
 80072d2:	f000 f949 	bl	8007568 <__kernel_cos>
 80072d6:	e7f9      	b.n	80072cc <sin+0x5c>
	...
 80072e0:	3fe921fb 	.word	0x3fe921fb
 80072e4:	7fefffff 	.word	0x7fefffff

080072e8 <__ieee754_rem_pio2>:
 80072e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ea:	eeb0 7b40 	vmov.f64	d7, d0
 80072ee:	ee17 5a90 	vmov	r5, s15
 80072f2:	4b97      	ldr	r3, [pc, #604]	; (8007550 <__ieee754_rem_pio2+0x268>)
 80072f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80072f8:	429e      	cmp	r6, r3
 80072fa:	b089      	sub	sp, #36	; 0x24
 80072fc:	4604      	mov	r4, r0
 80072fe:	dc07      	bgt.n	8007310 <__ieee754_rem_pio2+0x28>
 8007300:	2200      	movs	r2, #0
 8007302:	2300      	movs	r3, #0
 8007304:	ed84 0b00 	vstr	d0, [r4]
 8007308:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800730c:	2000      	movs	r0, #0
 800730e:	e01b      	b.n	8007348 <__ieee754_rem_pio2+0x60>
 8007310:	4b90      	ldr	r3, [pc, #576]	; (8007554 <__ieee754_rem_pio2+0x26c>)
 8007312:	429e      	cmp	r6, r3
 8007314:	dc3b      	bgt.n	800738e <__ieee754_rem_pio2+0xa6>
 8007316:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800731a:	2d00      	cmp	r5, #0
 800731c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8007510 <__ieee754_rem_pio2+0x228>
 8007320:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8007324:	dd19      	ble.n	800735a <__ieee754_rem_pio2+0x72>
 8007326:	ee30 7b46 	vsub.f64	d7, d0, d6
 800732a:	429e      	cmp	r6, r3
 800732c:	d00e      	beq.n	800734c <__ieee754_rem_pio2+0x64>
 800732e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8007518 <__ieee754_rem_pio2+0x230>
 8007332:	ee37 5b46 	vsub.f64	d5, d7, d6
 8007336:	ee37 7b45 	vsub.f64	d7, d7, d5
 800733a:	ed84 5b00 	vstr	d5, [r4]
 800733e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007342:	ed84 7b02 	vstr	d7, [r4, #8]
 8007346:	2001      	movs	r0, #1
 8007348:	b009      	add	sp, #36	; 0x24
 800734a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8007520 <__ieee754_rem_pio2+0x238>
 8007350:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007354:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8007528 <__ieee754_rem_pio2+0x240>
 8007358:	e7eb      	b.n	8007332 <__ieee754_rem_pio2+0x4a>
 800735a:	429e      	cmp	r6, r3
 800735c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8007360:	d00e      	beq.n	8007380 <__ieee754_rem_pio2+0x98>
 8007362:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8007518 <__ieee754_rem_pio2+0x230>
 8007366:	ee37 5b06 	vadd.f64	d5, d7, d6
 800736a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800736e:	ed84 5b00 	vstr	d5, [r4]
 8007372:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007376:	f04f 30ff 	mov.w	r0, #4294967295
 800737a:	ed84 7b02 	vstr	d7, [r4, #8]
 800737e:	e7e3      	b.n	8007348 <__ieee754_rem_pio2+0x60>
 8007380:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8007520 <__ieee754_rem_pio2+0x238>
 8007384:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007388:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8007528 <__ieee754_rem_pio2+0x240>
 800738c:	e7eb      	b.n	8007366 <__ieee754_rem_pio2+0x7e>
 800738e:	4b72      	ldr	r3, [pc, #456]	; (8007558 <__ieee754_rem_pio2+0x270>)
 8007390:	429e      	cmp	r6, r3
 8007392:	dc6e      	bgt.n	8007472 <__ieee754_rem_pio2+0x18a>
 8007394:	f000 fc20 	bl	8007bd8 <fabs>
 8007398:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800739c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8007530 <__ieee754_rem_pio2+0x248>
 80073a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80073a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80073a8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80073ac:	ee17 0a90 	vmov	r0, s15
 80073b0:	eeb1 5b44 	vneg.f64	d5, d4
 80073b4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8007510 <__ieee754_rem_pio2+0x228>
 80073b8:	eea5 0b07 	vfma.f64	d0, d5, d7
 80073bc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8007518 <__ieee754_rem_pio2+0x230>
 80073c0:	281f      	cmp	r0, #31
 80073c2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80073c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80073ca:	dc1b      	bgt.n	8007404 <__ieee754_rem_pio2+0x11c>
 80073cc:	1e42      	subs	r2, r0, #1
 80073ce:	4b63      	ldr	r3, [pc, #396]	; (800755c <__ieee754_rem_pio2+0x274>)
 80073d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d4:	429e      	cmp	r6, r3
 80073d6:	d015      	beq.n	8007404 <__ieee754_rem_pio2+0x11c>
 80073d8:	ed84 6b00 	vstr	d6, [r4]
 80073dc:	ed94 6b00 	vldr	d6, [r4]
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80073e6:	ee30 7b47 	vsub.f64	d7, d0, d7
 80073ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80073ee:	daab      	bge.n	8007348 <__ieee754_rem_pio2+0x60>
 80073f0:	eeb1 6b46 	vneg.f64	d6, d6
 80073f4:	ed84 6b00 	vstr	d6, [r4]
 80073f8:	eeb1 7b47 	vneg.f64	d7, d7
 80073fc:	4240      	negs	r0, r0
 80073fe:	ed84 7b02 	vstr	d7, [r4, #8]
 8007402:	e7a1      	b.n	8007348 <__ieee754_rem_pio2+0x60>
 8007404:	ee16 3a90 	vmov	r3, s13
 8007408:	1536      	asrs	r6, r6, #20
 800740a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800740e:	1af3      	subs	r3, r6, r3
 8007410:	2b10      	cmp	r3, #16
 8007412:	ed84 6b00 	vstr	d6, [r4]
 8007416:	dde1      	ble.n	80073dc <__ieee754_rem_pio2+0xf4>
 8007418:	eeb0 6b40 	vmov.f64	d6, d0
 800741c:	ed9f 3b40 	vldr	d3, [pc, #256]	; 8007520 <__ieee754_rem_pio2+0x238>
 8007420:	eea5 6b03 	vfma.f64	d6, d5, d3
 8007424:	ee30 7b46 	vsub.f64	d7, d0, d6
 8007428:	eea5 7b03 	vfma.f64	d7, d5, d3
 800742c:	ed9f 3b3e 	vldr	d3, [pc, #248]	; 8007528 <__ieee754_rem_pio2+0x240>
 8007430:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8007434:	ee36 3b47 	vsub.f64	d3, d6, d7
 8007438:	ee13 3a90 	vmov	r3, s7
 800743c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007440:	1af6      	subs	r6, r6, r3
 8007442:	2e31      	cmp	r6, #49	; 0x31
 8007444:	ed84 3b00 	vstr	d3, [r4]
 8007448:	dd10      	ble.n	800746c <__ieee754_rem_pio2+0x184>
 800744a:	eeb0 0b46 	vmov.f64	d0, d6
 800744e:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8007538 <__ieee754_rem_pio2+0x250>
 8007452:	eea5 0b03 	vfma.f64	d0, d5, d3
 8007456:	ee36 7b40 	vsub.f64	d7, d6, d0
 800745a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8007540 <__ieee754_rem_pio2+0x258>
 800745e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8007462:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8007466:	ee30 6b47 	vsub.f64	d6, d0, d7
 800746a:	e7b5      	b.n	80073d8 <__ieee754_rem_pio2+0xf0>
 800746c:	eeb0 0b46 	vmov.f64	d0, d6
 8007470:	e7b4      	b.n	80073dc <__ieee754_rem_pio2+0xf4>
 8007472:	4b3b      	ldr	r3, [pc, #236]	; (8007560 <__ieee754_rem_pio2+0x278>)
 8007474:	429e      	cmp	r6, r3
 8007476:	dd06      	ble.n	8007486 <__ieee754_rem_pio2+0x19e>
 8007478:	ee30 7b40 	vsub.f64	d7, d0, d0
 800747c:	ed80 7b02 	vstr	d7, [r0, #8]
 8007480:	ed80 7b00 	vstr	d7, [r0]
 8007484:	e742      	b.n	800730c <__ieee754_rem_pio2+0x24>
 8007486:	ee10 3a10 	vmov	r3, s0
 800748a:	1532      	asrs	r2, r6, #20
 800748c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8007490:	4618      	mov	r0, r3
 8007492:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8007496:	ec41 0b17 	vmov	d7, r0, r1
 800749a:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800749e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8007548 <__ieee754_rem_pio2+0x260>
 80074a2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80074a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074aa:	ed8d 6b02 	vstr	d6, [sp, #8]
 80074ae:	ee27 7b05 	vmul.f64	d7, d7, d5
 80074b2:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80074b6:	a908      	add	r1, sp, #32
 80074b8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80074bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074c0:	ed8d 6b04 	vstr	d6, [sp, #16]
 80074c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80074c8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80074cc:	2303      	movs	r3, #3
 80074ce:	ed31 7b02 	vldmdb	r1!, {d7}
 80074d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074da:	f103 30ff 	add.w	r0, r3, #4294967295
 80074de:	d013      	beq.n	8007508 <__ieee754_rem_pio2+0x220>
 80074e0:	4920      	ldr	r1, [pc, #128]	; (8007564 <__ieee754_rem_pio2+0x27c>)
 80074e2:	9101      	str	r1, [sp, #4]
 80074e4:	2102      	movs	r1, #2
 80074e6:	9100      	str	r1, [sp, #0]
 80074e8:	a802      	add	r0, sp, #8
 80074ea:	4621      	mov	r1, r4
 80074ec:	f000 f8a8 	bl	8007640 <__kernel_rem_pio2>
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	f6bf af29 	bge.w	8007348 <__ieee754_rem_pio2+0x60>
 80074f6:	ed94 7b00 	vldr	d7, [r4]
 80074fa:	eeb1 7b47 	vneg.f64	d7, d7
 80074fe:	ed84 7b00 	vstr	d7, [r4]
 8007502:	ed94 7b02 	vldr	d7, [r4, #8]
 8007506:	e777      	b.n	80073f8 <__ieee754_rem_pio2+0x110>
 8007508:	4603      	mov	r3, r0
 800750a:	e7e0      	b.n	80074ce <__ieee754_rem_pio2+0x1e6>
 800750c:	f3af 8000 	nop.w
 8007510:	54400000 	.word	0x54400000
 8007514:	3ff921fb 	.word	0x3ff921fb
 8007518:	1a626331 	.word	0x1a626331
 800751c:	3dd0b461 	.word	0x3dd0b461
 8007520:	1a600000 	.word	0x1a600000
 8007524:	3dd0b461 	.word	0x3dd0b461
 8007528:	2e037073 	.word	0x2e037073
 800752c:	3ba3198a 	.word	0x3ba3198a
 8007530:	6dc9c883 	.word	0x6dc9c883
 8007534:	3fe45f30 	.word	0x3fe45f30
 8007538:	2e000000 	.word	0x2e000000
 800753c:	3ba3198a 	.word	0x3ba3198a
 8007540:	252049c1 	.word	0x252049c1
 8007544:	397b839a 	.word	0x397b839a
 8007548:	00000000 	.word	0x00000000
 800754c:	41700000 	.word	0x41700000
 8007550:	3fe921fb 	.word	0x3fe921fb
 8007554:	4002d97b 	.word	0x4002d97b
 8007558:	413921fb 	.word	0x413921fb
 800755c:	08008098 	.word	0x08008098
 8007560:	7fefffff 	.word	0x7fefffff
 8007564:	08008118 	.word	0x08008118

08007568 <__kernel_cos>:
 8007568:	ee10 1a90 	vmov	r1, s1
 800756c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007574:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8007578:	da05      	bge.n	8007586 <__kernel_cos+0x1e>
 800757a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800757e:	ee17 3a90 	vmov	r3, s15
 8007582:	2b00      	cmp	r3, #0
 8007584:	d03d      	beq.n	8007602 <__kernel_cos+0x9a>
 8007586:	ee20 6b00 	vmul.f64	d6, d0, d0
 800758a:	ee20 1b01 	vmul.f64	d1, d0, d1
 800758e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8007608 <__kernel_cos+0xa0>
 8007592:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007596:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8007610 <__kernel_cos+0xa8>
 800759a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800759e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8007618 <__kernel_cos+0xb0>
 80075a2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80075a6:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8007620 <__kernel_cos+0xb8>
 80075aa:	eea6 4b07 	vfma.f64	d4, d6, d7
 80075ae:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8007628 <__kernel_cos+0xc0>
 80075b2:	4b21      	ldr	r3, [pc, #132]	; (8007638 <__kernel_cos+0xd0>)
 80075b4:	eea6 7b04 	vfma.f64	d7, d6, d4
 80075b8:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8007630 <__kernel_cos+0xc8>
 80075bc:	4299      	cmp	r1, r3
 80075be:	eea6 4b07 	vfma.f64	d4, d6, d7
 80075c2:	ee24 4b06 	vmul.f64	d4, d4, d6
 80075c6:	dc06      	bgt.n	80075d6 <__kernel_cos+0x6e>
 80075c8:	ee96 1b04 	vfnms.f64	d1, d6, d4
 80075cc:	ee96 1b03 	vfnms.f64	d1, d6, d3
 80075d0:	ee35 0b41 	vsub.f64	d0, d5, d1
 80075d4:	4770      	bx	lr
 80075d6:	4b19      	ldr	r3, [pc, #100]	; (800763c <__kernel_cos+0xd4>)
 80075d8:	4299      	cmp	r1, r3
 80075da:	dc0f      	bgt.n	80075fc <__kernel_cos+0x94>
 80075dc:	2200      	movs	r2, #0
 80075de:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80075e2:	ec43 2b17 	vmov	d7, r2, r3
 80075e6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80075ea:	ee96 1b04 	vfnms.f64	d1, d6, d4
 80075ee:	ee96 7b03 	vfnms.f64	d7, d6, d3
 80075f2:	ee37 0b41 	vsub.f64	d0, d7, d1
 80075f6:	ee35 0b40 	vsub.f64	d0, d5, d0
 80075fa:	4770      	bx	lr
 80075fc:	eeb5 7b02 	vmov.f64	d7, #82	; 0x3e900000  0.2812500
 8007600:	e7f1      	b.n	80075e6 <__kernel_cos+0x7e>
 8007602:	eeb0 0b45 	vmov.f64	d0, d5
 8007606:	4770      	bx	lr
 8007608:	be8838d4 	.word	0xbe8838d4
 800760c:	bda8fae9 	.word	0xbda8fae9
 8007610:	bdb4b1c4 	.word	0xbdb4b1c4
 8007614:	3e21ee9e 	.word	0x3e21ee9e
 8007618:	809c52ad 	.word	0x809c52ad
 800761c:	be927e4f 	.word	0xbe927e4f
 8007620:	19cb1590 	.word	0x19cb1590
 8007624:	3efa01a0 	.word	0x3efa01a0
 8007628:	16c15177 	.word	0x16c15177
 800762c:	bf56c16c 	.word	0xbf56c16c
 8007630:	5555554c 	.word	0x5555554c
 8007634:	3fa55555 	.word	0x3fa55555
 8007638:	3fd33332 	.word	0x3fd33332
 800763c:	3fe90000 	.word	0x3fe90000

08007640 <__kernel_rem_pio2>:
 8007640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	ed2d 8b06 	vpush	{d8-d10}
 8007648:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800764c:	468b      	mov	fp, r1
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8007652:	4bcf      	ldr	r3, [pc, #828]	; (8007990 <__kernel_rem_pio2+0x350>)
 8007654:	9002      	str	r0, [sp, #8]
 8007656:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 800765a:	9b01      	ldr	r3, [sp, #4]
 800765c:	9ca3      	ldr	r4, [sp, #652]	; 0x28c
 800765e:	3b01      	subs	r3, #1
 8007660:	1ed0      	subs	r0, r2, #3
 8007662:	2518      	movs	r5, #24
 8007664:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8007978 <__kernel_rem_pio2+0x338>
 8007668:	fb90 f0f5 	sdiv	r0, r0, r5
 800766c:	f06f 0517 	mvn.w	r5, #23
 8007670:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007674:	fb00 5505 	mla	r5, r0, r5, r5
 8007678:	1ac7      	subs	r7, r0, r3
 800767a:	4415      	add	r5, r2
 800767c:	eb0a 0e03 	add.w	lr, sl, r3
 8007680:	ae1a      	add	r6, sp, #104	; 0x68
 8007682:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
 8007686:	2200      	movs	r2, #0
 8007688:	4572      	cmp	r2, lr
 800768a:	dd0f      	ble.n	80076ac <__kernel_rem_pio2+0x6c>
 800768c:	f50d 7ed4 	add.w	lr, sp, #424	; 0x1a8
 8007690:	2600      	movs	r6, #0
 8007692:	4556      	cmp	r6, sl
 8007694:	dc27      	bgt.n	80076e6 <__kernel_rem_pio2+0xa6>
 8007696:	9a01      	ldr	r2, [sp, #4]
 8007698:	9f02      	ldr	r7, [sp, #8]
 800769a:	4432      	add	r2, r6
 800769c:	a91a      	add	r1, sp, #104	; 0x68
 800769e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80076a2:	ed9f 7bb5 	vldr	d7, [pc, #724]	; 8007978 <__kernel_rem_pio2+0x338>
 80076a6:	f04f 0c00 	mov.w	ip, #0
 80076aa:	e016      	b.n	80076da <__kernel_rem_pio2+0x9a>
 80076ac:	42d7      	cmn	r7, r2
 80076ae:	d409      	bmi.n	80076c4 <__kernel_rem_pio2+0x84>
 80076b0:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80076b4:	ee07 1a90 	vmov	s15, r1
 80076b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80076bc:	eca6 7b02 	vstmia	r6!, {d7}
 80076c0:	3201      	adds	r2, #1
 80076c2:	e7e1      	b.n	8007688 <__kernel_rem_pio2+0x48>
 80076c4:	eeb0 7b46 	vmov.f64	d7, d6
 80076c8:	e7f8      	b.n	80076bc <__kernel_rem_pio2+0x7c>
 80076ca:	ecb7 5b02 	vldmia	r7!, {d5}
 80076ce:	ed32 6b02 	vldmdb	r2!, {d6}
 80076d2:	f10c 0c01 	add.w	ip, ip, #1
 80076d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80076da:	459c      	cmp	ip, r3
 80076dc:	ddf5      	ble.n	80076ca <__kernel_rem_pio2+0x8a>
 80076de:	ecae 7b02 	vstmia	lr!, {d7}
 80076e2:	3601      	adds	r6, #1
 80076e4:	e7d5      	b.n	8007692 <__kernel_rem_pio2+0x52>
 80076e6:	aa06      	add	r2, sp, #24
 80076e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80076ec:	ed9f 9ba4 	vldr	d9, [pc, #656]	; 8007980 <__kernel_rem_pio2+0x340>
 80076f0:	ed9f aba5 	vldr	d10, [pc, #660]	; 8007988 <__kernel_rem_pio2+0x348>
 80076f4:	9204      	str	r2, [sp, #16]
 80076f6:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80076fa:	9203      	str	r2, [sp, #12]
 80076fc:	4657      	mov	r7, sl
 80076fe:	aa92      	add	r2, sp, #584	; 0x248
 8007700:	f107 5800 	add.w	r8, r7, #536870912	; 0x20000000
 8007704:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8007708:	f108 38ff 	add.w	r8, r8, #4294967295
 800770c:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8007710:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8007714:	aa92      	add	r2, sp, #584	; 0x248
 8007716:	eb02 0008 	add.w	r0, r2, r8
 800771a:	3898      	subs	r0, #152	; 0x98
 800771c:	2200      	movs	r2, #0
 800771e:	1abc      	subs	r4, r7, r2
 8007720:	2c00      	cmp	r4, #0
 8007722:	dc4c      	bgt.n	80077be <__kernel_rem_pio2+0x17e>
 8007724:	4628      	mov	r0, r5
 8007726:	9305      	str	r3, [sp, #20]
 8007728:	f000 fad6 	bl	8007cd8 <scalbn>
 800772c:	eeb0 8b40 	vmov.f64	d8, d0
 8007730:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8007734:	ee28 0b00 	vmul.f64	d0, d8, d0
 8007738:	f000 fa56 	bl	8007be8 <floor>
 800773c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8007740:	eea0 8b47 	vfms.f64	d8, d0, d7
 8007744:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8007748:	2d00      	cmp	r5, #0
 800774a:	ee17 9a90 	vmov	r9, s15
 800774e:	9b05      	ldr	r3, [sp, #20]
 8007750:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007754:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007758:	dd46      	ble.n	80077e8 <__kernel_rem_pio2+0x1a8>
 800775a:	1e78      	subs	r0, r7, #1
 800775c:	aa06      	add	r2, sp, #24
 800775e:	f1c5 0418 	rsb	r4, r5, #24
 8007762:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8007766:	fa46 f204 	asr.w	r2, r6, r4
 800776a:	4491      	add	r9, r2
 800776c:	40a2      	lsls	r2, r4
 800776e:	1ab6      	subs	r6, r6, r2
 8007770:	aa06      	add	r2, sp, #24
 8007772:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8007776:	f1c5 0217 	rsb	r2, r5, #23
 800777a:	4116      	asrs	r6, r2
 800777c:	2e00      	cmp	r6, #0
 800777e:	dd42      	ble.n	8007806 <__kernel_rem_pio2+0x1c6>
 8007780:	2400      	movs	r4, #0
 8007782:	f109 0901 	add.w	r9, r9, #1
 8007786:	4620      	mov	r0, r4
 8007788:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800778c:	42a7      	cmp	r7, r4
 800778e:	dc75      	bgt.n	800787c <__kernel_rem_pio2+0x23c>
 8007790:	2d00      	cmp	r5, #0
 8007792:	dd05      	ble.n	80077a0 <__kernel_rem_pio2+0x160>
 8007794:	2d01      	cmp	r5, #1
 8007796:	f000 8086 	beq.w	80078a6 <__kernel_rem_pio2+0x266>
 800779a:	2d02      	cmp	r5, #2
 800779c:	f000 808d 	beq.w	80078ba <__kernel_rem_pio2+0x27a>
 80077a0:	2e02      	cmp	r6, #2
 80077a2:	d130      	bne.n	8007806 <__kernel_rem_pio2+0x1c6>
 80077a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80077a8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80077ac:	b358      	cbz	r0, 8007806 <__kernel_rem_pio2+0x1c6>
 80077ae:	4628      	mov	r0, r5
 80077b0:	9305      	str	r3, [sp, #20]
 80077b2:	f000 fa91 	bl	8007cd8 <scalbn>
 80077b6:	9b05      	ldr	r3, [sp, #20]
 80077b8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80077bc:	e023      	b.n	8007806 <__kernel_rem_pio2+0x1c6>
 80077be:	ee20 7b09 	vmul.f64	d7, d0, d9
 80077c2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80077c6:	ac06      	add	r4, sp, #24
 80077c8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80077cc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80077d0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80077d4:	ee10 1a10 	vmov	r1, s0
 80077d8:	ed30 0b02 	vldmdb	r0!, {d0}
 80077dc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80077e0:	ee37 0b00 	vadd.f64	d0, d7, d0
 80077e4:	3201      	adds	r2, #1
 80077e6:	e79a      	b.n	800771e <__kernel_rem_pio2+0xde>
 80077e8:	d105      	bne.n	80077f6 <__kernel_rem_pio2+0x1b6>
 80077ea:	1e7a      	subs	r2, r7, #1
 80077ec:	a906      	add	r1, sp, #24
 80077ee:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80077f2:	15f6      	asrs	r6, r6, #23
 80077f4:	e7c2      	b.n	800777c <__kernel_rem_pio2+0x13c>
 80077f6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80077fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80077fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007802:	da39      	bge.n	8007878 <__kernel_rem_pio2+0x238>
 8007804:	2600      	movs	r6, #0
 8007806:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800780a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780e:	f040 808e 	bne.w	800792e <__kernel_rem_pio2+0x2ee>
 8007812:	1e7c      	subs	r4, r7, #1
 8007814:	4620      	mov	r0, r4
 8007816:	2200      	movs	r2, #0
 8007818:	4550      	cmp	r0, sl
 800781a:	da55      	bge.n	80078c8 <__kernel_rem_pio2+0x288>
 800781c:	2a00      	cmp	r2, #0
 800781e:	d164      	bne.n	80078ea <__kernel_rem_pio2+0x2aa>
 8007820:	2401      	movs	r4, #1
 8007822:	f06f 0003 	mvn.w	r0, #3
 8007826:	fb00 f204 	mul.w	r2, r0, r4
 800782a:	9904      	ldr	r1, [sp, #16]
 800782c:	588a      	ldr	r2, [r1, r2]
 800782e:	2a00      	cmp	r2, #0
 8007830:	d050      	beq.n	80078d4 <__kernel_rem_pio2+0x294>
 8007832:	aa92      	add	r2, sp, #584	; 0x248
 8007834:	4490      	add	r8, r2
 8007836:	9a01      	ldr	r2, [sp, #4]
 8007838:	a91a      	add	r1, sp, #104	; 0x68
 800783a:	443a      	add	r2, r7
 800783c:	1c78      	adds	r0, r7, #1
 800783e:	f1a8 0890 	sub.w	r8, r8, #144	; 0x90
 8007842:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007846:	4427      	add	r7, r4
 8007848:	42b8      	cmp	r0, r7
 800784a:	f73f af58 	bgt.w	80076fe <__kernel_rem_pio2+0xbe>
 800784e:	9903      	ldr	r1, [sp, #12]
 8007850:	9e02      	ldr	r6, [sp, #8]
 8007852:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007856:	9105      	str	r1, [sp, #20]
 8007858:	ee07 1a90 	vmov	s15, r1
 800785c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007860:	2400      	movs	r4, #0
 8007862:	eca2 7b02 	vstmia	r2!, {d7}
 8007866:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8007978 <__kernel_rem_pio2+0x338>
 800786a:	4696      	mov	lr, r2
 800786c:	429c      	cmp	r4, r3
 800786e:	dd33      	ble.n	80078d8 <__kernel_rem_pio2+0x298>
 8007870:	eca8 7b02 	vstmia	r8!, {d7}
 8007874:	3001      	adds	r0, #1
 8007876:	e7e7      	b.n	8007848 <__kernel_rem_pio2+0x208>
 8007878:	2602      	movs	r6, #2
 800787a:	e781      	b.n	8007780 <__kernel_rem_pio2+0x140>
 800787c:	aa06      	add	r2, sp, #24
 800787e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007882:	b948      	cbnz	r0, 8007898 <__kernel_rem_pio2+0x258>
 8007884:	b12a      	cbz	r2, 8007892 <__kernel_rem_pio2+0x252>
 8007886:	a906      	add	r1, sp, #24
 8007888:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800788c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8007890:	2201      	movs	r2, #1
 8007892:	3401      	adds	r4, #1
 8007894:	4610      	mov	r0, r2
 8007896:	e779      	b.n	800778c <__kernel_rem_pio2+0x14c>
 8007898:	a906      	add	r1, sp, #24
 800789a:	ebae 0202 	sub.w	r2, lr, r2
 800789e:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80078a2:	4602      	mov	r2, r0
 80078a4:	e7f5      	b.n	8007892 <__kernel_rem_pio2+0x252>
 80078a6:	1e7c      	subs	r4, r7, #1
 80078a8:	aa06      	add	r2, sp, #24
 80078aa:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80078ae:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80078b2:	a906      	add	r1, sp, #24
 80078b4:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80078b8:	e772      	b.n	80077a0 <__kernel_rem_pio2+0x160>
 80078ba:	1e7c      	subs	r4, r7, #1
 80078bc:	aa06      	add	r2, sp, #24
 80078be:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80078c2:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80078c6:	e7f4      	b.n	80078b2 <__kernel_rem_pio2+0x272>
 80078c8:	a906      	add	r1, sp, #24
 80078ca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80078ce:	3801      	subs	r0, #1
 80078d0:	430a      	orrs	r2, r1
 80078d2:	e7a1      	b.n	8007818 <__kernel_rem_pio2+0x1d8>
 80078d4:	3401      	adds	r4, #1
 80078d6:	e7a6      	b.n	8007826 <__kernel_rem_pio2+0x1e6>
 80078d8:	ecb6 5b02 	vldmia	r6!, {d5}
 80078dc:	ed3e 6b02 	vldmdb	lr!, {d6}
 80078e0:	3401      	adds	r4, #1
 80078e2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80078e6:	e7c1      	b.n	800786c <__kernel_rem_pio2+0x22c>
 80078e8:	3c01      	subs	r4, #1
 80078ea:	ab06      	add	r3, sp, #24
 80078ec:	3d18      	subs	r5, #24
 80078ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0f8      	beq.n	80078e8 <__kernel_rem_pio2+0x2a8>
 80078f6:	4628      	mov	r0, r5
 80078f8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80078fc:	f000 f9ec 	bl	8007cd8 <scalbn>
 8007900:	00e3      	lsls	r3, r4, #3
 8007902:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8007980 <__kernel_rem_pio2+0x340>
 8007906:	aa6a      	add	r2, sp, #424	; 0x1a8
 8007908:	3308      	adds	r3, #8
 800790a:	18d0      	adds	r0, r2, r3
 800790c:	4622      	mov	r2, r4
 800790e:	2a00      	cmp	r2, #0
 8007910:	da4b      	bge.n	80079aa <__kernel_rem_pio2+0x36a>
 8007912:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 8007916:	2200      	movs	r2, #0
 8007918:	4677      	mov	r7, lr
 800791a:	1aa5      	subs	r5, r4, r2
 800791c:	d464      	bmi.n	80079e8 <__kernel_rem_pio2+0x3a8>
 800791e:	a86a      	add	r0, sp, #424	; 0x1a8
 8007920:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8007924:	491b      	ldr	r1, [pc, #108]	; (8007994 <__kernel_rem_pio2+0x354>)
 8007926:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007978 <__kernel_rem_pio2+0x338>
 800792a:	2000      	movs	r0, #0
 800792c:	e054      	b.n	80079d8 <__kernel_rem_pio2+0x398>
 800792e:	4268      	negs	r0, r5
 8007930:	eeb0 0b48 	vmov.f64	d0, d8
 8007934:	f000 f9d0 	bl	8007cd8 <scalbn>
 8007938:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8007988 <__kernel_rem_pio2+0x348>
 800793c:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8007940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007944:	db28      	blt.n	8007998 <__kernel_rem_pio2+0x358>
 8007946:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8007980 <__kernel_rem_pio2+0x340>
 800794a:	ee20 7b07 	vmul.f64	d7, d0, d7
 800794e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007952:	aa06      	add	r2, sp, #24
 8007954:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8007958:	eea5 0b46 	vfms.f64	d0, d5, d6
 800795c:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007960:	1c7c      	adds	r4, r7, #1
 8007962:	ee10 3a10 	vmov	r3, s0
 8007966:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800796a:	ee17 3a10 	vmov	r3, s14
 800796e:	3518      	adds	r5, #24
 8007970:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007974:	e7bf      	b.n	80078f6 <__kernel_rem_pio2+0x2b6>
 8007976:	bf00      	nop
	...
 8007984:	3e700000 	.word	0x3e700000
 8007988:	00000000 	.word	0x00000000
 800798c:	41700000 	.word	0x41700000
 8007990:	08008260 	.word	0x08008260
 8007994:	08008220 	.word	0x08008220
 8007998:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800799c:	aa06      	add	r2, sp, #24
 800799e:	ee10 3a10 	vmov	r3, s0
 80079a2:	463c      	mov	r4, r7
 80079a4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80079a8:	e7a5      	b.n	80078f6 <__kernel_rem_pio2+0x2b6>
 80079aa:	a906      	add	r1, sp, #24
 80079ac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80079b0:	9101      	str	r1, [sp, #4]
 80079b2:	ee07 1a90 	vmov	s15, r1
 80079b6:	3a01      	subs	r2, #1
 80079b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80079bc:	ee27 7b00 	vmul.f64	d7, d7, d0
 80079c0:	ee20 0b06 	vmul.f64	d0, d0, d6
 80079c4:	ed20 7b02 	vstmdb	r0!, {d7}
 80079c8:	e7a1      	b.n	800790e <__kernel_rem_pio2+0x2ce>
 80079ca:	ecb1 5b02 	vldmia	r1!, {d5}
 80079ce:	ecb5 6b02 	vldmia	r5!, {d6}
 80079d2:	3001      	adds	r0, #1
 80079d4:	eea5 7b06 	vfma.f64	d7, d5, d6
 80079d8:	4550      	cmp	r0, sl
 80079da:	dc01      	bgt.n	80079e0 <__kernel_rem_pio2+0x3a0>
 80079dc:	4290      	cmp	r0, r2
 80079de:	ddf4      	ble.n	80079ca <__kernel_rem_pio2+0x38a>
 80079e0:	ecae 7b02 	vstmia	lr!, {d7}
 80079e4:	3201      	adds	r2, #1
 80079e6:	e798      	b.n	800791a <__kernel_rem_pio2+0x2da>
 80079e8:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80079ea:	2a03      	cmp	r2, #3
 80079ec:	d843      	bhi.n	8007a76 <__kernel_rem_pio2+0x436>
 80079ee:	e8df f002 	tbb	[pc, r2]
 80079f2:	1d37      	.short	0x1d37
 80079f4:	021d      	.short	0x021d
 80079f6:	aa42      	add	r2, sp, #264	; 0x108
 80079f8:	4413      	add	r3, r2
 80079fa:	461a      	mov	r2, r3
 80079fc:	4620      	mov	r0, r4
 80079fe:	2800      	cmp	r0, #0
 8007a00:	dc56      	bgt.n	8007ab0 <__kernel_rem_pio2+0x470>
 8007a02:	461a      	mov	r2, r3
 8007a04:	4620      	mov	r0, r4
 8007a06:	2801      	cmp	r0, #1
 8007a08:	dc62      	bgt.n	8007ad0 <__kernel_rem_pio2+0x490>
 8007a0a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8007b20 <__kernel_rem_pio2+0x4e0>
 8007a0e:	2c01      	cmp	r4, #1
 8007a10:	dc6e      	bgt.n	8007af0 <__kernel_rem_pio2+0x4b0>
 8007a12:	2e00      	cmp	r6, #0
 8007a14:	d172      	bne.n	8007afc <__kernel_rem_pio2+0x4bc>
 8007a16:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 8007a1a:	e9cb 2300 	strd	r2, r3, [fp]
 8007a1e:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 8007a22:	e9cb 2302 	strd	r2, r3, [fp, #8]
 8007a26:	ed8b 7b04 	vstr	d7, [fp, #16]
 8007a2a:	e024      	b.n	8007a76 <__kernel_rem_pio2+0x436>
 8007a2c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007b20 <__kernel_rem_pio2+0x4e0>
 8007a30:	aa42      	add	r2, sp, #264	; 0x108
 8007a32:	4413      	add	r3, r2
 8007a34:	4622      	mov	r2, r4
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	da2b      	bge.n	8007a92 <__kernel_rem_pio2+0x452>
 8007a3a:	b386      	cbz	r6, 8007a9e <__kernel_rem_pio2+0x45e>
 8007a3c:	eeb1 7b46 	vneg.f64	d7, d6
 8007a40:	ed8b 7b00 	vstr	d7, [fp]
 8007a44:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8007a48:	aa44      	add	r2, sp, #272	; 0x110
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007a50:	429c      	cmp	r4, r3
 8007a52:	da27      	bge.n	8007aa4 <__kernel_rem_pio2+0x464>
 8007a54:	b10e      	cbz	r6, 8007a5a <__kernel_rem_pio2+0x41a>
 8007a56:	eeb1 7b47 	vneg.f64	d7, d7
 8007a5a:	ed8b 7b02 	vstr	d7, [fp, #8]
 8007a5e:	e00a      	b.n	8007a76 <__kernel_rem_pio2+0x436>
 8007a60:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007b20 <__kernel_rem_pio2+0x4e0>
 8007a64:	aa42      	add	r2, sp, #264	; 0x108
 8007a66:	4413      	add	r3, r2
 8007a68:	2c00      	cmp	r4, #0
 8007a6a:	da0c      	bge.n	8007a86 <__kernel_rem_pio2+0x446>
 8007a6c:	b10e      	cbz	r6, 8007a72 <__kernel_rem_pio2+0x432>
 8007a6e:	eeb1 7b47 	vneg.f64	d7, d7
 8007a72:	ed8b 7b00 	vstr	d7, [fp]
 8007a76:	f009 0007 	and.w	r0, r9, #7
 8007a7a:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8007a7e:	ecbd 8b06 	vpop	{d8-d10}
 8007a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a86:	ed33 6b02 	vldmdb	r3!, {d6}
 8007a8a:	3c01      	subs	r4, #1
 8007a8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007a90:	e7ea      	b.n	8007a68 <__kernel_rem_pio2+0x428>
 8007a92:	ed33 7b02 	vldmdb	r3!, {d7}
 8007a96:	3a01      	subs	r2, #1
 8007a98:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007a9c:	e7cb      	b.n	8007a36 <__kernel_rem_pio2+0x3f6>
 8007a9e:	eeb0 7b46 	vmov.f64	d7, d6
 8007aa2:	e7cd      	b.n	8007a40 <__kernel_rem_pio2+0x400>
 8007aa4:	ecb2 6b02 	vldmia	r2!, {d6}
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007aae:	e7cf      	b.n	8007a50 <__kernel_rem_pio2+0x410>
 8007ab0:	ed12 5b02 	vldr	d5, [r2, #-8]
 8007ab4:	ed12 7b04 	vldr	d7, [r2, #-16]
 8007ab8:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007abc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007ac0:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007ac4:	ed22 7b02 	vstmdb	r2!, {d7}
 8007ac8:	3801      	subs	r0, #1
 8007aca:	ed02 6b02 	vstr	d6, [r2, #-8]
 8007ace:	e796      	b.n	80079fe <__kernel_rem_pio2+0x3be>
 8007ad0:	ed12 5b02 	vldr	d5, [r2, #-8]
 8007ad4:	ed12 7b04 	vldr	d7, [r2, #-16]
 8007ad8:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007adc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007ae0:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007ae4:	ed22 7b02 	vstmdb	r2!, {d7}
 8007ae8:	3801      	subs	r0, #1
 8007aea:	ed02 6b02 	vstr	d6, [r2, #-8]
 8007aee:	e78a      	b.n	8007a06 <__kernel_rem_pio2+0x3c6>
 8007af0:	ed33 6b02 	vldmdb	r3!, {d6}
 8007af4:	3c01      	subs	r4, #1
 8007af6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007afa:	e788      	b.n	8007a0e <__kernel_rem_pio2+0x3ce>
 8007afc:	ed97 6b00 	vldr	d6, [r7]
 8007b00:	eeb1 7b47 	vneg.f64	d7, d7
 8007b04:	eeb1 6b46 	vneg.f64	d6, d6
 8007b08:	ed8b 6b00 	vstr	d6, [fp]
 8007b0c:	ed97 6b02 	vldr	d6, [r7, #8]
 8007b10:	eeb1 6b46 	vneg.f64	d6, d6
 8007b14:	ed8b 6b02 	vstr	d6, [fp, #8]
 8007b18:	e785      	b.n	8007a26 <__kernel_rem_pio2+0x3e6>
 8007b1a:	bf00      	nop
 8007b1c:	f3af 8000 	nop.w
	...

08007b28 <__kernel_sin>:
 8007b28:	ee10 3a90 	vmov	r3, s1
 8007b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b30:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007b34:	da04      	bge.n	8007b40 <__kernel_sin+0x18>
 8007b36:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8007b3a:	ee17 3a90 	vmov	r3, s15
 8007b3e:	b35b      	cbz	r3, 8007b98 <__kernel_sin+0x70>
 8007b40:	ee20 6b00 	vmul.f64	d6, d0, d0
 8007b44:	ee20 5b06 	vmul.f64	d5, d0, d6
 8007b48:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8007ba0 <__kernel_sin+0x78>
 8007b4c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007ba8 <__kernel_sin+0x80>
 8007b50:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007b54:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007bb0 <__kernel_sin+0x88>
 8007b58:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007b5c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007bb8 <__kernel_sin+0x90>
 8007b60:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007b64:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007bc0 <__kernel_sin+0x98>
 8007b68:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007b6c:	b930      	cbnz	r0, 8007b7c <__kernel_sin+0x54>
 8007b6e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007bc8 <__kernel_sin+0xa0>
 8007b72:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007b76:	eea5 0b04 	vfma.f64	d0, d5, d4
 8007b7a:	4770      	bx	lr
 8007b7c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8007b80:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007b84:	eea1 7b04 	vfma.f64	d7, d1, d4
 8007b88:	ee96 1b07 	vfnms.f64	d1, d6, d7
 8007b8c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007bd0 <__kernel_sin+0xa8>
 8007b90:	eea5 1b07 	vfma.f64	d1, d5, d7
 8007b94:	ee30 0b41 	vsub.f64	d0, d0, d1
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w
 8007ba0:	5acfd57c 	.word	0x5acfd57c
 8007ba4:	3de5d93a 	.word	0x3de5d93a
 8007ba8:	8a2b9ceb 	.word	0x8a2b9ceb
 8007bac:	be5ae5e6 	.word	0xbe5ae5e6
 8007bb0:	57b1fe7d 	.word	0x57b1fe7d
 8007bb4:	3ec71de3 	.word	0x3ec71de3
 8007bb8:	19c161d5 	.word	0x19c161d5
 8007bbc:	bf2a01a0 	.word	0xbf2a01a0
 8007bc0:	1110f8a6 	.word	0x1110f8a6
 8007bc4:	3f811111 	.word	0x3f811111
 8007bc8:	55555549 	.word	0x55555549
 8007bcc:	bfc55555 	.word	0xbfc55555
 8007bd0:	55555549 	.word	0x55555549
 8007bd4:	3fc55555 	.word	0x3fc55555

08007bd8 <fabs>:
 8007bd8:	ec53 2b10 	vmov	r2, r3, d0
 8007bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007be0:	ec43 2b10 	vmov	d0, r2, r3
 8007be4:	4770      	bx	lr
	...

08007be8 <floor>:
 8007be8:	ee10 1a90 	vmov	r1, s1
 8007bec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bf0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8007bf4:	2b13      	cmp	r3, #19
 8007bf6:	b530      	push	{r4, r5, lr}
 8007bf8:	ee10 0a10 	vmov	r0, s0
 8007bfc:	ee10 5a10 	vmov	r5, s0
 8007c00:	dc33      	bgt.n	8007c6a <floor+0x82>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	da17      	bge.n	8007c36 <floor+0x4e>
 8007c06:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007cc8 <floor+0xe0>
 8007c0a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007c0e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c16:	dd09      	ble.n	8007c2c <floor+0x44>
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	da50      	bge.n	8007cbe <floor+0xd6>
 8007c1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c20:	432b      	orrs	r3, r5
 8007c22:	4b2b      	ldr	r3, [pc, #172]	; (8007cd0 <floor+0xe8>)
 8007c24:	f04f 0000 	mov.w	r0, #0
 8007c28:	bf18      	it	ne
 8007c2a:	4619      	movne	r1, r3
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4602      	mov	r2, r0
 8007c30:	ec43 2b10 	vmov	d0, r2, r3
 8007c34:	bd30      	pop	{r4, r5, pc}
 8007c36:	4a27      	ldr	r2, [pc, #156]	; (8007cd4 <floor+0xec>)
 8007c38:	411a      	asrs	r2, r3
 8007c3a:	ea01 0402 	and.w	r4, r1, r2
 8007c3e:	432c      	orrs	r4, r5
 8007c40:	d0f8      	beq.n	8007c34 <floor+0x4c>
 8007c42:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007cc8 <floor+0xe0>
 8007c46:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007c4a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c52:	ddeb      	ble.n	8007c2c <floor+0x44>
 8007c54:	2900      	cmp	r1, #0
 8007c56:	bfbe      	ittt	lt
 8007c58:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8007c5c:	fa40 f303 	asrlt.w	r3, r0, r3
 8007c60:	18c9      	addlt	r1, r1, r3
 8007c62:	ea21 0102 	bic.w	r1, r1, r2
 8007c66:	2000      	movs	r0, #0
 8007c68:	e7e0      	b.n	8007c2c <floor+0x44>
 8007c6a:	2b33      	cmp	r3, #51	; 0x33
 8007c6c:	dd05      	ble.n	8007c7a <floor+0x92>
 8007c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c72:	d1df      	bne.n	8007c34 <floor+0x4c>
 8007c74:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007c78:	bd30      	pop	{r4, r5, pc}
 8007c7a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8007c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c82:	40e2      	lsrs	r2, r4
 8007c84:	4215      	tst	r5, r2
 8007c86:	d0d5      	beq.n	8007c34 <floor+0x4c>
 8007c88:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007cc8 <floor+0xe0>
 8007c8c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007c90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c98:	ddc8      	ble.n	8007c2c <floor+0x44>
 8007c9a:	2900      	cmp	r1, #0
 8007c9c:	da02      	bge.n	8007ca4 <floor+0xbc>
 8007c9e:	2b14      	cmp	r3, #20
 8007ca0:	d103      	bne.n	8007caa <floor+0xc2>
 8007ca2:	3101      	adds	r1, #1
 8007ca4:	ea20 0002 	bic.w	r0, r0, r2
 8007ca8:	e7c0      	b.n	8007c2c <floor+0x44>
 8007caa:	2401      	movs	r4, #1
 8007cac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007cb0:	fa04 f303 	lsl.w	r3, r4, r3
 8007cb4:	4418      	add	r0, r3
 8007cb6:	4285      	cmp	r5, r0
 8007cb8:	bf88      	it	hi
 8007cba:	1909      	addhi	r1, r1, r4
 8007cbc:	e7f2      	b.n	8007ca4 <floor+0xbc>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	e7b3      	b.n	8007c2c <floor+0x44>
 8007cc4:	f3af 8000 	nop.w
 8007cc8:	8800759c 	.word	0x8800759c
 8007ccc:	7e37e43c 	.word	0x7e37e43c
 8007cd0:	bff00000 	.word	0xbff00000
 8007cd4:	000fffff 	.word	0x000fffff

08007cd8 <scalbn>:
 8007cd8:	b500      	push	{lr}
 8007cda:	ed2d 8b02 	vpush	{d8}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	ed8d 0b00 	vstr	d0, [sp]
 8007ce4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8007ce8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007cec:	b9a2      	cbnz	r2, 8007d18 <scalbn+0x40>
 8007cee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	d03a      	beq.n	8007d6c <scalbn+0x94>
 8007cf6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007db0 <scalbn+0xd8>
 8007cfa:	4a35      	ldr	r2, [pc, #212]	; (8007dd0 <scalbn+0xf8>)
 8007cfc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007d00:	4290      	cmp	r0, r2
 8007d02:	ed8d 7b00 	vstr	d7, [sp]
 8007d06:	9b01      	ldr	r3, [sp, #4]
 8007d08:	da11      	bge.n	8007d2e <scalbn+0x56>
 8007d0a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8007db8 <scalbn+0xe0>
 8007d0e:	ed9d 6b00 	vldr	d6, [sp]
 8007d12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d16:	e007      	b.n	8007d28 <scalbn+0x50>
 8007d18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007d1c:	428a      	cmp	r2, r1
 8007d1e:	d109      	bne.n	8007d34 <scalbn+0x5c>
 8007d20:	ed9d 7b00 	vldr	d7, [sp]
 8007d24:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007d28:	ed8d 7b00 	vstr	d7, [sp]
 8007d2c:	e01e      	b.n	8007d6c <scalbn+0x94>
 8007d2e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007d32:	3a36      	subs	r2, #54	; 0x36
 8007d34:	4402      	add	r2, r0
 8007d36:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007d3a:	428a      	cmp	r2, r1
 8007d3c:	dd0a      	ble.n	8007d54 <scalbn+0x7c>
 8007d3e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8007dc0 <scalbn+0xe8>
 8007d42:	eeb0 0b48 	vmov.f64	d0, d8
 8007d46:	ed9d 1b00 	vldr	d1, [sp]
 8007d4a:	f000 f843 	bl	8007dd4 <copysign>
 8007d4e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8007d52:	e7e9      	b.n	8007d28 <scalbn+0x50>
 8007d54:	2a00      	cmp	r2, #0
 8007d56:	dd10      	ble.n	8007d7a <scalbn+0xa2>
 8007d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d64:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d68:	e9cd 0100 	strd	r0, r1, [sp]
 8007d6c:	ed9d 0b00 	vldr	d0, [sp]
 8007d70:	b003      	add	sp, #12
 8007d72:	ecbd 8b02 	vpop	{d8}
 8007d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d7a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d7e:	da06      	bge.n	8007d8e <scalbn+0xb6>
 8007d80:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d84:	4298      	cmp	r0, r3
 8007d86:	dcda      	bgt.n	8007d3e <scalbn+0x66>
 8007d88:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8007db8 <scalbn+0xe0>
 8007d8c:	e7d9      	b.n	8007d42 <scalbn+0x6a>
 8007d8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d96:	3236      	adds	r2, #54	; 0x36
 8007d98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d9c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007da0:	ec41 0b17 	vmov	d7, r0, r1
 8007da4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8007dc8 <scalbn+0xf0>
 8007da8:	e7b3      	b.n	8007d12 <scalbn+0x3a>
 8007daa:	bf00      	nop
 8007dac:	f3af 8000 	nop.w
 8007db0:	00000000 	.word	0x00000000
 8007db4:	43500000 	.word	0x43500000
 8007db8:	c2f8f359 	.word	0xc2f8f359
 8007dbc:	01a56e1f 	.word	0x01a56e1f
 8007dc0:	8800759c 	.word	0x8800759c
 8007dc4:	7e37e43c 	.word	0x7e37e43c
 8007dc8:	00000000 	.word	0x00000000
 8007dcc:	3c900000 	.word	0x3c900000
 8007dd0:	ffff3cb0 	.word	0xffff3cb0

08007dd4 <copysign>:
 8007dd4:	ec53 2b10 	vmov	r2, r3, d0
 8007dd8:	ee11 0a90 	vmov	r0, s3
 8007ddc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007de4:	ea41 0300 	orr.w	r3, r1, r0
 8007de8:	ec43 2b10 	vmov	d0, r2, r3
 8007dec:	4770      	bx	lr
	...

08007df0 <__libc_init_array>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	4e0d      	ldr	r6, [pc, #52]	; (8007e28 <__libc_init_array+0x38>)
 8007df4:	4c0d      	ldr	r4, [pc, #52]	; (8007e2c <__libc_init_array+0x3c>)
 8007df6:	1ba4      	subs	r4, r4, r6
 8007df8:	10a4      	asrs	r4, r4, #2
 8007dfa:	2500      	movs	r5, #0
 8007dfc:	42a5      	cmp	r5, r4
 8007dfe:	d109      	bne.n	8007e14 <__libc_init_array+0x24>
 8007e00:	4e0b      	ldr	r6, [pc, #44]	; (8007e30 <__libc_init_array+0x40>)
 8007e02:	4c0c      	ldr	r4, [pc, #48]	; (8007e34 <__libc_init_array+0x44>)
 8007e04:	f000 f82c 	bl	8007e60 <_init>
 8007e08:	1ba4      	subs	r4, r4, r6
 8007e0a:	10a4      	asrs	r4, r4, #2
 8007e0c:	2500      	movs	r5, #0
 8007e0e:	42a5      	cmp	r5, r4
 8007e10:	d105      	bne.n	8007e1e <__libc_init_array+0x2e>
 8007e12:	bd70      	pop	{r4, r5, r6, pc}
 8007e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e18:	4798      	blx	r3
 8007e1a:	3501      	adds	r5, #1
 8007e1c:	e7ee      	b.n	8007dfc <__libc_init_array+0xc>
 8007e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e22:	4798      	blx	r3
 8007e24:	3501      	adds	r5, #1
 8007e26:	e7f2      	b.n	8007e0e <__libc_init_array+0x1e>
 8007e28:	08008270 	.word	0x08008270
 8007e2c:	08008270 	.word	0x08008270
 8007e30:	08008270 	.word	0x08008270
 8007e34:	08008274 	.word	0x08008274

08007e38 <memcpy>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	1e43      	subs	r3, r0, #1
 8007e3c:	440a      	add	r2, r1
 8007e3e:	4291      	cmp	r1, r2
 8007e40:	d100      	bne.n	8007e44 <memcpy+0xc>
 8007e42:	bd10      	pop	{r4, pc}
 8007e44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e4c:	e7f7      	b.n	8007e3e <memcpy+0x6>

08007e4e <memset>:
 8007e4e:	4402      	add	r2, r0
 8007e50:	4603      	mov	r3, r0
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d100      	bne.n	8007e58 <memset+0xa>
 8007e56:	4770      	bx	lr
 8007e58:	f803 1b01 	strb.w	r1, [r3], #1
 8007e5c:	e7f9      	b.n	8007e52 <memset+0x4>
	...

08007e60 <_init>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	bf00      	nop
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr

08007e6c <_fini>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	bf00      	nop
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr
