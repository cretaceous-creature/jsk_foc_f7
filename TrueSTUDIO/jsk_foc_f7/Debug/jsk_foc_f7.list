
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08004f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004700  20000008  08004f90  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004708  08004f90  00024708  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000f00d  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00039609  00000000  00000000  0002f043  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006a8d  00000000  00000000  0006864c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000018c8  00000000  00000000  0006f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001f58  00000000  00000000  000709a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013142  00000000  00000000  00072900  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00009345  00000000  00000000  00085a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0008ed87  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004994  00000000  00000000  0008ee04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000008 	.word	0x20000008
 800021c:	00000000 	.word	0x00000000
 8000220:	08004d94 	.word	0x08004d94

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000000c 	.word	0x2000000c
 800023c:	08004d94 	.word	0x08004d94

08000240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
  ldr  r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800025e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800026a:	f001 f8e1 	bl	8001430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f004 fd59 	bl	8004d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000272:	f000 fce7 	bl	8000c44 <main>
  bx  lr    
 8000276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000278:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800027c:	08004f88 	.word	0x08004f88
  ldr  r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000284:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000288:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800028c:	20004708 	.word	0x20004708

08000290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC_IRQHandler>
	...

08000294 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000294:	b570      	push	{r4, r5, r6, lr}

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000296:	4839      	ldr	r0, [pc, #228]	; (800037c <MX_DFSDM1_Init+0xe8>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000298:	2400      	movs	r4, #0
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 800029a:	2501      	movs	r5, #1
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800029c:	4b38      	ldr	r3, [pc, #224]	; (8000380 <MX_DFSDM1_Init+0xec>)
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800029e:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 80002a2:	7204      	strb	r4, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 80002a4:	7244      	strb	r4, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80002a6:	61c6      	str	r6, [r0, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 80002a8:	6205      	str	r5, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80002aa:	6245      	str	r5, [r0, #36]	; 0x24
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80002ac:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80002b0:	f001 fa24 	bl	80016fc <HAL_DFSDM_FilterInit>

  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80002b4:	4833      	ldr	r0, [pc, #204]	; (8000384 <MX_DFSDM1_Init+0xf0>)
 80002b6:	4b34      	ldr	r3, [pc, #208]	; (8000388 <MX_DFSDM1_Init+0xf4>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter1.Init.RegularParam.FastMode = DISABLE;
 80002b8:	7204      	strb	r4, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 80002ba:	7244      	strb	r4, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80002bc:	61c6      	str	r6, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 1;
 80002be:	6205      	str	r5, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80002c0:	6245      	str	r5, [r0, #36]	; 0x24
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80002c2:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80002c6:	f001 fa19 	bl	80016fc <HAL_DFSDM_FilterInit>

  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80002ca:	4830      	ldr	r0, [pc, #192]	; (800038c <MX_DFSDM1_Init+0xf8>)
 80002cc:	4b30      	ldr	r3, [pc, #192]	; (8000390 <MX_DFSDM1_Init+0xfc>)
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80002ce:	7104      	strb	r4, [r0, #4]
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80002d0:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80002d2:	2302      	movs	r3, #2
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80002d4:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80002d6:	60c3      	str	r3, [r0, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80002d8:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80002da:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80002dc:	6184      	str	r4, [r0, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80002de:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80002e0:	6204      	str	r4, [r0, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80002e2:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80002e4:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80002e6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80002e8:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80002ea:	f001 f993 	bl	8001614 <HAL_DFSDM_ChannelInit>
 80002ee:	b118      	cbz	r0, 80002f8 <MX_DFSDM1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80002f0:	2169      	movs	r1, #105	; 0x69
 80002f2:	4828      	ldr	r0, [pc, #160]	; (8000394 <MX_DFSDM1_Init+0x100>)
 80002f4:	f000 fd14 	bl	8000d20 <_Error_Handler>
  }

  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80002f8:	4827      	ldr	r0, [pc, #156]	; (8000398 <MX_DFSDM1_Init+0x104>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 80002fa:	2202      	movs	r2, #2
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80002fc:	4b27      	ldr	r3, [pc, #156]	; (800039c <MX_DFSDM1_Init+0x108>)
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 80002fe:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000300:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000304:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 8000306:	2300      	movs	r3, #0
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000308:	6242      	str	r2, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 800030a:	2201      	movs	r2, #1
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 800030c:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800030e:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000310:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000312:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000314:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000316:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000318:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 800031a:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 800031c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 800031e:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8000320:	f001 f978 	bl	8001614 <HAL_DFSDM_ChannelInit>
 8000324:	b118      	cbz	r0, 800032e <MX_DFSDM1_Init+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000326:	217b      	movs	r1, #123	; 0x7b
 8000328:	481a      	ldr	r0, [pc, #104]	; (8000394 <MX_DFSDM1_Init+0x100>)
 800032a:	f000 fcf9 	bl	8000d20 <_Error_Handler>
  }

  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <MX_DFSDM1_Init+0x10c>)
  hdfsdm1_channel7.Init.OutputClock.Activation = DISABLE;
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 8000330:	2202      	movs	r2, #2
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 8000332:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <MX_DFSDM1_Init+0x110>)
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 8000334:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000336:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 800033a:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel7.Init.OutputClock.Activation = DISABLE;
 800033c:	2300      	movs	r3, #0
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800033e:	6242      	str	r2, [r0, #36]	; 0x24
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 8000340:	2201      	movs	r2, #1
  hdfsdm1_channel7.Init.OutputClock.Activation = DISABLE;
 8000342:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000344:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000346:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000348:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800034a:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800034c:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800034e:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 8000350:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel7.Init.Offset = 0;
 8000352:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel7.Init.RightBitShift = 0x00;
 8000354:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel7) != HAL_OK)
 8000356:	f001 f95d 	bl	8001614 <HAL_DFSDM_ChannelInit>
 800035a:	b118      	cbz	r0, 8000364 <MX_DFSDM1_Init+0xd0>
  {
    _Error_Handler(__FILE__, __LINE__);
 800035c:	218d      	movs	r1, #141	; 0x8d
 800035e:	480d      	ldr	r0, [pc, #52]	; (8000394 <MX_DFSDM1_Init+0x100>)
 8000360:	f000 fcde 	bl	8000d20 <_Error_Handler>
  }

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 8000364:	2201      	movs	r2, #1
 8000366:	4910      	ldr	r1, [pc, #64]	; (80003a8 <MX_DFSDM1_Init+0x114>)
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_DFSDM1_Init+0xe8>)
 800036a:	f001 fa39 	bl	80017e0 <HAL_DFSDM_FilterConfigRegChannel>

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_7, DFSDM_CONTINUOUS_CONV_ON);
 800036e:	2201      	movs	r2, #1
 8000370:	490e      	ldr	r1, [pc, #56]	; (80003ac <MX_DFSDM1_Init+0x118>)
 8000372:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_DFSDM1_Init+0xf0>)

}
 8000374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_7, DFSDM_CONTINUOUS_CONV_ON);
 8000378:	f001 ba32 	b.w	80017e0 <HAL_DFSDM_FilterConfigRegChannel>
 800037c:	20003d9c 	.word	0x20003d9c
 8000380:	40017500 	.word	0x40017500
 8000384:	20003ee8 	.word	0x20003ee8
 8000388:	40017580 	.word	0x40017580
 800038c:	20003f3c 	.word	0x20003f3c
 8000390:	40017400 	.word	0x40017400
 8000394:	08004e78 	.word	0x08004e78
 8000398:	20003df0 	.word	0x20003df0
 800039c:	40017460 	.word	0x40017460
 80003a0:	20003f74 	.word	0x20003f74
 80003a4:	400174e0 	.word	0x400174e0
 80003a8:	00030008 	.word	0x00030008
 80003ac:	00070080 	.word	0x00070080

080003b0 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80003b0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 80003b2:	4c43      	ldr	r4, [pc, #268]	; (80004c0 <HAL_DFSDM_FilterMspInit+0x110>)
{
 80003b4:	b087      	sub	sp, #28
 80003b6:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 80003b8:	6823      	ldr	r3, [r4, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d12a      	bne.n	8000414 <HAL_DFSDM_FilterMspInit+0x64>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80003be:	4a41      	ldr	r2, [pc, #260]	; (80004c4 <HAL_DFSDM_FilterMspInit+0x114>)
 80003c0:	6813      	ldr	r3, [r2, #0]
 80003c2:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80003c4:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80003c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80003c8:	d109      	bne.n	80003de <HAL_DFSDM_FilterMspInit+0x2e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80003ca:	4b3f      	ldr	r3, [pc, #252]	; (80004c8 <HAL_DFSDM_FilterMspInit+0x118>)
 80003cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80003ce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80003d2:	645a      	str	r2, [r3, #68]	; 0x44
 80003d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	9b00      	ldr	r3, [sp, #0]
    PD0     ------> DFSDM1_DATIN7
    PD1     ------> DFSDM1_CKIN7
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80003de:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e2:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003e4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80003e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80003e8:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003ea:	4838      	ldr	r0, [pc, #224]	; (80004cc <HAL_DFSDM_FilterMspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80003ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ee:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003f4:	f001 fb64 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80003f8:	231b      	movs	r3, #27
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003fa:	a901      	add	r1, sp, #4
 80003fc:	4834      	ldr	r0, [pc, #208]	; (80004d0 <HAL_DFSDM_FilterMspInit+0x120>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80003fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000400:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000402:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000404:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800040a:	f001 fb59 	bl	8001ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800040e:	6823      	ldr	r3, [r4, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000414:	682a      	ldr	r2, [r5, #0]
 8000416:	4b2f      	ldr	r3, [pc, #188]	; (80004d4 <HAL_DFSDM_FilterMspInit+0x124>)
 8000418:	429a      	cmp	r2, r3
 800041a:	d125      	bne.n	8000468 <HAL_DFSDM_FilterMspInit+0xb8>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800041c:	4c2e      	ldr	r4, [pc, #184]	; (80004d8 <HAL_DFSDM_FilterMspInit+0x128>)
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800041e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000422:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000426:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800042c:	3310      	adds	r3, #16
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800042e:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000430:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000436:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000438:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800043c:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800043e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000442:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000444:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000446:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000448:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800044c:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800044e:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000450:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000452:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000454:	f001 f9f8 	bl	8001848 <HAL_DMA_Init>
 8000458:	b118      	cbz	r0, 8000462 <HAL_DFSDM_FilterMspInit+0xb2>
    {
      _Error_Handler(__FILE__, __LINE__);
 800045a:	21d4      	movs	r1, #212	; 0xd4
 800045c:	481f      	ldr	r0, [pc, #124]	; (80004dc <HAL_DFSDM_FilterMspInit+0x12c>)
 800045e:	f000 fc5f 	bl	8000d20 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000462:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000464:	62ac      	str	r4, [r5, #40]	; 0x28
 8000466:	63a5      	str	r5, [r4, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000468:	682a      	ldr	r2, [r5, #0]
 800046a:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <HAL_DFSDM_FilterMspInit+0x130>)
 800046c:	429a      	cmp	r2, r3
 800046e:	d125      	bne.n	80004bc <HAL_DFSDM_FilterMspInit+0x10c>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8000470:	4c1c      	ldr	r4, [pc, #112]	; (80004e4 <HAL_DFSDM_FilterMspInit+0x134>)
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000472:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8000476:	f503 436e 	add.w	r3, r3, #60928	; 0xee00
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 800047a:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800047c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8000480:	33a8      	adds	r3, #168	; 0xa8
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000482:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000484:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 800048a:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 800048c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000490:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000492:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000496:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000498:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800049a:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800049c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004a0:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004a2:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80004a4:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80004a6:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80004a8:	f001 f9ce 	bl	8001848 <HAL_DMA_Init>
 80004ac:	b118      	cbz	r0, 80004b6 <HAL_DFSDM_FilterMspInit+0x106>
    {
      _Error_Handler(__FILE__, __LINE__);
 80004ae:	21eb      	movs	r1, #235	; 0xeb
 80004b0:	480a      	ldr	r0, [pc, #40]	; (80004dc <HAL_DFSDM_FilterMspInit+0x12c>)
 80004b2:	f000 fc35 	bl	8000d20 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 80004b6:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 80004b8:	62ac      	str	r4, [r5, #40]	; 0x28
 80004ba:	63a5      	str	r5, [r4, #56]	; 0x38
  }

}
 80004bc:	b007      	add	sp, #28
 80004be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c0:	20000024 	.word	0x20000024
 80004c4:	20000028 	.word	0x20000028
 80004c8:	40023800 	.word	0x40023800
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40020c00 	.word	0x40020c00
 80004d4:	40017500 	.word	0x40017500
 80004d8:	20003e88 	.word	0x20003e88
 80004dc:	08004e78 	.word	0x08004e78
 80004e0:	40017580 	.word	0x40017580
 80004e4:	20003e28 	.word	0x20003e28

080004e8 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80004e8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 80004ea:	4c19      	ldr	r4, [pc, #100]	; (8000550 <HAL_DFSDM_ChannelMspInit+0x68>)
{
 80004ec:	b086      	sub	sp, #24
  if(DFSDM1_Init == 0)
 80004ee:	6823      	ldr	r3, [r4, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d12a      	bne.n	800054a <HAL_DFSDM_ChannelMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80004f4:	4a17      	ldr	r2, [pc, #92]	; (8000554 <HAL_DFSDM_ChannelMspInit+0x6c>)
 80004f6:	6813      	ldr	r3, [r2, #0]
 80004f8:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80004fa:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80004fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80004fe:	d109      	bne.n	8000514 <HAL_DFSDM_ChannelMspInit+0x2c>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_DFSDM_ChannelMspInit+0x70>)
 8000502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000504:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000508:	645a      	str	r2, [r3, #68]	; 0x44
 800050a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800050c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	9b00      	ldr	r3, [sp, #0]
    PD0     ------> DFSDM1_DATIN7
    PD1     ------> DFSDM1_CKIN7
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000514:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000518:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800051a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800051c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800051e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000520:	480e      	ldr	r0, [pc, #56]	; (800055c <HAL_DFSDM_ChannelMspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000522:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000524:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800052a:	f001 fac9 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800052e:	231b      	movs	r3, #27
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000530:	a901      	add	r1, sp, #4
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <HAL_DFSDM_ChannelMspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000534:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000536:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800053a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000540:	f001 fabe 	bl	8001ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	6023      	str	r3, [r4, #0]
  }
}
 800054a:	b006      	add	sp, #24
 800054c:	bd70      	pop	{r4, r5, r6, pc}
 800054e:	bf00      	nop
 8000550:	20000024 	.word	0x20000024
 8000554:	20000028 	.word	0x20000028
 8000558:	40023800 	.word	0x40023800
 800055c:	40021000 	.word	0x40021000
 8000560:	40020c00 	.word	0x40020c00

08000564 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_DMA_Init+0x3c>)
{
 8000566:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000568:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800056a:	2105      	movs	r1, #5
 800056c:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800056e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000572:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000574:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000580:	f000 ffb6 	bl	80014f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000584:	2038      	movs	r0, #56	; 0x38
 8000586:	f000 ffeb 	bl	8001560 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2105      	movs	r1, #5
 800058e:	2039      	movs	r0, #57	; 0x39
 8000590:	f000 ffae 	bl	80014f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000594:	2039      	movs	r0, #57	; 0x39
 8000596:	f000 ffe3 	bl	8001560 <HAL_NVIC_EnableIRQ>

}
 800059a:	b003      	add	sp, #12
 800059c:	f85d fb04 	ldr.w	pc, [sp], #4
 80005a0:	40023800 	.word	0x40023800

080005a4 <StartenchallTask>:
 80005a4:	b508      	push	{r3, lr}
 80005a6:	2001      	movs	r0, #1
 80005a8:	f003 fa11 	bl	80039ce <osDelay>
 80005ac:	e7fb      	b.n	80005a6 <StartenchallTask+0x2>
	...

080005b0 <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	b0a9      	sub	sp, #164	; 0xa4
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of buzzerMutex */
  osMutexDef(buzzerMutex);
 80005b4:	2500      	movs	r5, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of enchallTask */
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 80005b6:	4c3e      	ldr	r4, [pc, #248]	; (80006b0 <MX_FREERTOS_Init+0x100>)
  osMutexDef(buzzerMutex);
 80005b8:	a828      	add	r0, sp, #160	; 0xa0
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 80005ba:	ae05      	add	r6, sp, #20
 80005bc:	4627      	mov	r7, r4
  osMutexDef(buzzerMutex);
 80005be:	f840 5da0 	str.w	r5, [r0, #-160]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 80005c2:	f003 fa0c 	bl	80039de <osMutexCreate>
 80005c6:	4b3b      	ldr	r3, [pc, #236]	; (80006b4 <MX_FREERTOS_Init+0x104>)
 80005c8:	6018      	str	r0, [r3, #0]
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 80005ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80005cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80005ce:	683b      	ldr	r3, [r7, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80005d0:	4629      	mov	r1, r5
 80005d2:	a805      	add	r0, sp, #20

  /* definition and creation of shuntTask */
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 80005d4:	f104 0714 	add.w	r7, r4, #20
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 80005d8:	6033      	str	r3, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80005da:	f003 f9e0 	bl	800399e <osThreadCreate>
 80005de:	4b36      	ldr	r3, [pc, #216]	; (80006b8 <MX_FREERTOS_Init+0x108>)
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 80005e0:	ae0a      	add	r6, sp, #40	; 0x28
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80005e2:	6018      	str	r0, [r3, #0]
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 80005e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80005e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80005e8:	683b      	ldr	r3, [r7, #0]
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 80005ea:	4629      	mov	r1, r5
 80005ec:	a80a      	add	r0, sp, #40	; 0x28

  /* definition and creation of ledblueTask */
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 80005ee:	f104 0728 	add.w	r7, r4, #40	; 0x28
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 80005f2:	6033      	str	r3, [r6, #0]
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 80005f4:	f003 f9d3 	bl	800399e <osThreadCreate>
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <MX_FREERTOS_Init+0x10c>)
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 80005fa:	ae0f      	add	r6, sp, #60	; 0x3c
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 80005fc:	6018      	str	r0, [r3, #0]
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 80005fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000600:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000602:	683b      	ldr	r3, [r7, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000604:	4629      	mov	r1, r5
 8000606:	a80f      	add	r0, sp, #60	; 0x3c

  /* definition and creation of ledgreenTask */
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000608:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 800060c:	6033      	str	r3, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 800060e:	f003 f9c6 	bl	800399e <osThreadCreate>
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_FREERTOS_Init+0x110>)
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000614:	ae14      	add	r6, sp, #80	; 0x50
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000616:	6018      	str	r0, [r3, #0]
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000618:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800061a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800061c:	683b      	ldr	r3, [r7, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 800061e:	4629      	mov	r1, r5
 8000620:	a814      	add	r0, sp, #80	; 0x50

  /* definition and creation of iwdgTask */
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000622:	f104 0750 	add.w	r7, r4, #80	; 0x50
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000626:	6033      	str	r3, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000628:	f003 f9b9 	bl	800399e <osThreadCreate>
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <MX_FREERTOS_Init+0x114>)
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 800062e:	ae19      	add	r6, sp, #100	; 0x64
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000630:	6018      	str	r0, [r3, #0]
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000632:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000634:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000636:	683b      	ldr	r3, [r7, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000638:	4629      	mov	r1, r5
 800063a:	a819      	add	r0, sp, #100	; 0x64

  /* definition and creation of buzzertoneTask */
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 800063c:	f104 0764 	add.w	r7, r4, #100	; 0x64
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000640:	6033      	str	r3, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000642:	f003 f9ac 	bl	800399e <osThreadCreate>
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_FREERTOS_Init+0x118>)
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000648:	ae1e      	add	r6, sp, #120	; 0x78
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 800064a:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 800064c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800064e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000650:	683b      	ldr	r3, [r7, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000652:	4629      	mov	r1, r5
 8000654:	a81e      	add	r0, sp, #120	; 0x78

  /* definition and creation of buzzerrythmTask */
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000656:	f104 0778 	add.w	r7, r4, #120	; 0x78
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 800065a:	6033      	str	r3, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 800065c:	f003 f99f 	bl	800399e <osThreadCreate>
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_FREERTOS_Init+0x11c>)
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000662:	ae23      	add	r6, sp, #140	; 0x8c
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000664:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000666:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000668:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800066a:	683b      	ldr	r3, [r7, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 800066c:	4629      	mov	r1, r5
 800066e:	a823      	add	r0, sp, #140	; 0x8c
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000670:	6033      	str	r3, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000672:	f003 f994 	bl	800399e <osThreadCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of buzzerQueue */
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000676:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_FREERTOS_Init+0x120>)
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);

  /* definition and creation of rythmQueue */
  osMessageQDef(rythmQueue, 32, uint16_t);
 800067c:	3494      	adds	r4, #148	; 0x94
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 800067e:	6018      	str	r0, [r3, #0]
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000680:	ab01      	add	r3, sp, #4
 8000682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000686:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 800068a:	4629      	mov	r1, r5
 800068c:	4618      	mov	r0, r3
 800068e:	f003 f9a9 	bl	80039e4 <osMessageCreate>
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_FREERTOS_Init+0x124>)
 8000694:	6018      	str	r0, [r3, #0]
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000696:	ab03      	add	r3, sp, #12
 8000698:	e894 0003 	ldmia.w	r4, {r0, r1}
 800069c:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 80006a0:	4629      	mov	r1, r5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 f99e 	bl	80039e4 <osMessageCreate>
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_FREERTOS_Init+0x128>)
 80006aa:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
}
 80006ac:	b029      	add	sp, #164	; 0xa4
 80006ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b0:	08004dac 	.word	0x08004dac
 80006b4:	20003fc0 	.word	0x20003fc0
 80006b8:	20003fbc 	.word	0x20003fbc
 80006bc:	20003fb0 	.word	0x20003fb0
 80006c0:	20003fc8 	.word	0x20003fc8
 80006c4:	20003fc4 	.word	0x20003fc4
 80006c8:	20003fcc 	.word	0x20003fcc
 80006cc:	20003fac 	.word	0x20003fac
 80006d0:	20003fd0 	.word	0x20003fd0
 80006d4:	20003fb4 	.word	0x20003fb4
 80006d8:	20003fb8 	.word	0x20003fb8

080006dc <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 80006de:	210c      	movs	r1, #12
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e2:	f042 0210 	orr.w	r2, r2, #16
{
 80006e6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e8:	631a      	str	r2, [r3, #48]	; 0x30
{
 80006ea:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 80006ee:	4d2a      	ldr	r5, [pc, #168]	; (8000798 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f0:	f002 0210 	and.w	r2, r2, #16

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 80006f4:	4c29      	ldr	r4, [pc, #164]	; (800079c <MX_GPIO_Init+0xc0>)
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 80006f6:	4628      	mov	r0, r5
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f8:	9201      	str	r2, [sp, #4]
 80006fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000702:	631a      	str	r2, [r3, #48]	; 0x30
 8000704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000706:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800070a:	9202      	str	r2, [sp, #8]
 800070c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000710:	f042 0204 	orr.w	r2, r2, #4
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
 8000716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000718:	f002 0204 	and.w	r2, r2, #4
 800071c:	9203      	str	r2, [sp, #12]
 800071e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000722:	f042 0201 	orr.w	r2, r2, #1
 8000726:	631a      	str	r2, [r3, #48]	; 0x30
 8000728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800072a:	f002 0201 	and.w	r2, r2, #1
 800072e:	9204      	str	r2, [sp, #16]
 8000730:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000734:	f042 0202 	orr.w	r2, r2, #2
 8000738:	631a      	str	r2, [r3, #48]	; 0x30
 800073a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800073c:	f002 0202 	and.w	r2, r2, #2
 8000740:	9205      	str	r2, [sp, #20]
 8000742:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000746:	f042 0208 	orr.w	r2, r2, #8
 800074a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000750:	f003 0308 	and.w	r3, r3, #8
 8000754:	9306      	str	r3, [sp, #24]
 8000756:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000758:	f001 fa9c 	bl	8001c94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	4620      	mov	r0, r4
 8000760:	2140      	movs	r1, #64	; 0x40
 8000762:	f001 fa97 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000766:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000768:	a907      	add	r1, sp, #28
 800076a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 800076c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800076e:	2311      	movs	r3, #17
 8000770:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000778:	f001 f9a2 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 800077c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 800077e:	a907      	add	r1, sp, #28
 8000780:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000782:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000788:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800078a:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 800078c:	f001 f998 	bl	8001ac0 <HAL_GPIO_Init>

}
 8000790:	b00d      	add	sp, #52	; 0x34
 8000792:	bd30      	pop	{r4, r5, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40021000 	.word	0x40021000
 800079c:	40020400 	.word	0x40020400

080007a0 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80007a0:	b508      	push	{r3, lr}

  hi2c4.Instance = I2C4;
 80007a2:	4815      	ldr	r0, [pc, #84]	; (80007f8 <MX_I2C4_Init+0x58>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a4:	2201      	movs	r2, #1
  hi2c4.Init.Timing = 0x20404768;
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_I2C4_Init+0x5c>)
 80007a8:	4915      	ldr	r1, [pc, #84]	; (8000800 <MX_I2C4_Init+0x60>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007aa:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.Timing = 0x20404768;
 80007ac:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c4.Init.OwnAddress1 = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	6083      	str	r3, [r0, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80007b6:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b8:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ba:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007bc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80007be:	f001 fa72 	bl	8001ca6 <HAL_I2C_Init>
 80007c2:	b118      	cbz	r0, 80007cc <MX_I2C4_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80007c4:	214c      	movs	r1, #76	; 0x4c
 80007c6:	480f      	ldr	r0, [pc, #60]	; (8000804 <MX_I2C4_Init+0x64>)
 80007c8:	f000 faaa 	bl	8000d20 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	480a      	ldr	r0, [pc, #40]	; (80007f8 <MX_I2C4_Init+0x58>)
 80007d0:	f001 faba 	bl	8001d48 <HAL_I2CEx_ConfigAnalogFilter>
 80007d4:	b118      	cbz	r0, 80007de <MX_I2C4_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80007d6:	2153      	movs	r1, #83	; 0x53
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <MX_I2C4_Init+0x64>)
 80007da:	f000 faa1 	bl	8000d20 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_I2C4_Init+0x58>)
 80007e2:	f001 fad7 	bl	8001d94 <HAL_I2CEx_ConfigDigitalFilter>
 80007e6:	b128      	cbz	r0, 80007f4 <MX_I2C4_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 80007e8:	215a      	movs	r1, #90	; 0x5a
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_I2C4_Init+0x64>)
  }

}
 80007ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80007f0:	f000 ba96 	b.w	8000d20 <_Error_Handler>
 80007f4:	bd08      	pop	{r3, pc}
 80007f6:	bf00      	nop
 80007f8:	20003fd4 	.word	0x20003fd4
 80007fc:	20404768 	.word	0x20404768
 8000800:	40006000 	.word	0x40006000
 8000804:	08004ee4 	.word	0x08004ee4

08000808 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000808:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C4)
 800080a:	6802      	ldr	r2, [r0, #0]
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_I2C_MspInit+0x44>)
 800080e:	429a      	cmp	r2, r3
 8000810:	d119      	bne.n	8000846 <HAL_I2C_MspInit+0x3e>
  
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000812:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000818:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081a:	2312      	movs	r3, #18
 800081c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081e:	2301      	movs	r3, #1
 8000820:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000826:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000828:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800082c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082e:	f001 f947 	bl	8001ac0 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_I2C_MspInit+0x4c>)
 8000834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000836:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800083a:	641a      	str	r2, [r3, #64]	; 0x40
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000846:	b007      	add	sp, #28
 8000848:	f85d fb04 	ldr.w	pc, [sp], #4
 800084c:	40006000 	.word	0x40006000
 8000850:	40020c00 	.word	0x40020c00
 8000854:	40023800 	.word	0x40023800

08000858 <StartledblueTask>:
/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000858:	4c05      	ldr	r4, [pc, #20]	; (8000870 <StartledblueTask+0x18>)
{
 800085a:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 800085c:	4620      	mov	r0, r4
 800085e:	2104      	movs	r1, #4
 8000860:	f001 fa1d 	bl	8001c9e <HAL_GPIO_TogglePin>
		osDelay(500);
 8000864:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000868:	f003 f8b1 	bl	80039ce <osDelay>
 800086c:	e7f6      	b.n	800085c <StartledblueTask+0x4>
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <StartledgreenTask>:
/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000874:	4c05      	ldr	r4, [pc, #20]	; (800088c <StartledgreenTask+0x18>)
{
 8000876:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000878:	4620      	mov	r0, r4
 800087a:	2108      	movs	r1, #8
 800087c:	f001 fa0f 	bl	8001c9e <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000884:	f003 f8a3 	bl	80039ce <osDelay>
 8000888:	e7f6      	b.n	8000878 <StartledgreenTask+0x4>
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 8000890:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 8000892:	2032      	movs	r0, #50	; 0x32
 8000894:	f003 f89b 	bl	80039ce <osDelay>
 8000898:	e7fb      	b.n	8000892 <StartiwdgTask+0x2>
	...

0800089c <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 80008a0:	f240 36f3 	movw	r6, #1011	; 0x3f3
 80008a4:	22c8      	movs	r2, #200	; 0xc8
 80008a6:	2100      	movs	r1, #0
 80008a8:	a802      	add	r0, sp, #8
 80008aa:	f240 35f5 	movw	r5, #1013	; 0x3f5
 80008ae:	f004 fa68 	bl	8004d82 <memset>
 80008b2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80008b6:	f240 76db 	movw	r6, #2011	; 0x7db
 80008ba:	f240 71dd 	movw	r1, #2013	; 0x7dd
 80008be:	f240 72df 	movw	r2, #2015	; 0x7df
 80008c2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008c6:	f8ad 6020 	strh.w	r6, [sp, #32]
 80008ca:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
 80008ce:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80008d2:	f240 34f7 	movw	r4, #1015	; 0x3f7
 80008d6:	f8ad 100a 	strh.w	r1, [sp, #10]
 80008da:	f240 77dc 	movw	r7, #2012	; 0x7dc
 80008de:	f8ad 200c 	strh.w	r2, [sp, #12]
 80008e2:	f8ad 2012 	strh.w	r2, [sp, #18]
 80008e6:	f8ad 0014 	strh.w	r0, [sp, #20]
 80008ea:	f8ad 1018 	strh.w	r1, [sp, #24]
 80008ee:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80008f2:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80008f6:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 80008fa:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80008fe:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8000902:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8000906:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800090a:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 800090e:	f240 71e5 	movw	r1, #2021	; 0x7e5
 8000912:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8000916:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800091a:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800091e:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8000922:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8000926:	f8ad 5008 	strh.w	r5, [sp, #8]
 800092a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800092e:	f8ad 4010 	strh.w	r4, [sp, #16]
 8000932:	f8ad 5016 	strh.w	r5, [sp, #22]
 8000936:	f8ad 301c 	strh.w	r3, [sp, #28]
 800093a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800093e:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 8000942:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 8000946:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
 800094a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 800094e:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 8000952:	f8ad 701a 	strh.w	r7, [sp, #26]
 8000956:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 800095a:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 800095e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8000962:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8000966:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 800096a:	f240 33ff 	movw	r3, #1023	; 0x3ff
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
	for(;;)
	{
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 800096e:	4c29      	ldr	r4, [pc, #164]	; (8000a14 <StartbuzzerrythmTask+0x178>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000970:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8000974:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8000978:	4625      	mov	r5, r4
		{
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 800097a:	4e27      	ldr	r6, [pc, #156]	; (8000a18 <StartbuzzerrythmTask+0x17c>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 800097c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8000980:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000984:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8000988:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 800098c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8000990:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 8000994:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 8000998:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 800099c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80009a0:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 80009a4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 80009a8:	f44f 637b 	mov.w	r3, #4016	; 0xfb0
 80009ac:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 80009b0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	volatile uint16_t i = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8ad 3006 	strh.w	r3, [sp, #6]
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 80009ba:	2300      	movs	r3, #0
 80009bc:	6820      	ldr	r0, [r4, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	f003 fc55 	bl	8004270 <xQueueGenericReceive>
 80009c6:	2801      	cmp	r0, #1
 80009c8:	d11d      	bne.n	8000a06 <StartbuzzerrythmTask+0x16a>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 80009ca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80009ce:	2300      	movs	r3, #0
 80009d0:	a802      	add	r0, sp, #8
 80009d2:	b289      	uxth	r1, r1
 80009d4:	461a      	mov	r2, r3
 80009d6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80009da:	6830      	ldr	r0, [r6, #0]
 80009dc:	f003 fb78 	bl	80040d0 <xQueueGenericSend>
 80009e0:	2801      	cmp	r0, #1
 80009e2:	d10a      	bne.n	80009fa <StartbuzzerrythmTask+0x15e>
			{
				i=i==SONGLENGTH-1?0:i+1;
 80009e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	2b31      	cmp	r3, #49	; 0x31
 80009ec:	d00f      	beq.n	8000a0e <StartbuzzerrythmTask+0x172>
 80009ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80009f2:	3301      	adds	r3, #1
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	f8ad 3006 	strh.w	r3, [sp, #6]
			}
			xSemaphoreGive(buzzerMutexHandle);
 80009fa:	2300      	movs	r3, #0
 80009fc:	6828      	ldr	r0, [r5, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4619      	mov	r1, r3
 8000a02:	f003 fb65 	bl	80040d0 <xQueueGenericSend>
		}
		osDelay(10);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f002 ffe1 	bl	80039ce <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000a0c:	e7d5      	b.n	80009ba <StartbuzzerrythmTask+0x11e>
				i=i==SONGLENGTH-1?0:i+1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e7f1      	b.n	80009f6 <StartbuzzerrythmTask+0x15a>
 8000a12:	bf00      	nop
 8000a14:	20003fc0 	.word	0x20003fc0
 8000a18:	20003fb4 	.word	0x20003fb4
 8000a1c:	00000000 	.word	0x00000000

08000a20 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 8000a20:	b570      	push	{r4, r5, r6, lr}
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000a22:	4c4b      	ldr	r4, [pc, #300]	; (8000b50 <StartbuzzertoneTask+0x130>)
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 8000a24:	2600      	movs	r6, #0
{
 8000a26:	ed2d 8b02 	vpush	{d8}
 8000a2a:	b090      	sub	sp, #64	; 0x40
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a2e:	ad09      	add	r5, sp, #36	; 0x24
	volatile float tonefreq = 0, time = 0;;
 8000a30:	9602      	str	r6, [sp, #8]
 8000a32:	9603      	str	r6, [sp, #12]
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a36:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000a3a:	340c      	adds	r4, #12
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000a3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a42:	ad04      	add	r5, sp, #16
 8000a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a46:	6823      	ldr	r3, [r4, #0]
				if(black)
					tonefreq = tonetable_black[black-1] * num *2 ;
				else
					tonefreq = tonetable_white[white-1] * num *2;
				//ring
				SetbuzzerFreq(tonefreq);
 8000a48:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 8000b48 <StartbuzzertoneTask+0x128>
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000a4c:	602b      	str	r3, [r5, #0]
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 8000a4e:	4d41      	ldr	r5, [pc, #260]	; (8000b54 <StartbuzzertoneTask+0x134>)
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 8000a50:	4841      	ldr	r0, [pc, #260]	; (8000b58 <StartbuzzertoneTask+0x138>)
 8000a52:	220a      	movs	r2, #10
 8000a54:	2300      	movs	r3, #0
 8000a56:	f10d 0106 	add.w	r1, sp, #6
 8000a5a:	6800      	ldr	r0, [r0, #0]
 8000a5c:	f003 fc08 	bl	8004270 <xQueueGenericReceive>
 8000a60:	2801      	cmp	r0, #1
 8000a62:	4602      	mov	r2, r0
 8000a64:	4c3d      	ldr	r4, [pc, #244]	; (8000b5c <StartbuzzertoneTask+0x13c>)
 8000a66:	d168      	bne.n	8000b3a <StartbuzzertoneTask+0x11a>
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 8000a68:	2300      	movs	r3, #0
 8000a6a:	6828      	ldr	r0, [r5, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f003 fbff 	bl	8004270 <xQueueGenericReceive>
			time = tonedata/1000;
 8000a72:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb1 f2f3 	udiv	r2, r1, r3
 8000a7e:	b290      	uxth	r0, r2
			black = (tonedata%1000)/100;
 8000a80:	fb03 1212 	mls	r2, r3, r2, r1
			time = tonedata/1000;
 8000a84:	ee07 0a90 	vmov	s15, r0
			black = (tonedata%1000)/100;
 8000a88:	b292      	uxth	r2, r2
			time = tonedata/1000;
 8000a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8e:	edcd 7a03 	vstr	s15, [sp, #12]
			if((tonedata%1000) != 0)
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d04c      	beq.n	8000b30 <StartbuzzertoneTask+0x110>
			black = (tonedata%1000)/100;
 8000a96:	2064      	movs	r0, #100	; 0x64
			num = (tonedata%100)/10;
 8000a98:	fbb1 f3f0 	udiv	r3, r1, r0
 8000a9c:	fb00 1313 	mls	r3, r0, r3, r1
			black = (tonedata%1000)/100;
 8000aa0:	fbb2 f2f0 	udiv	r2, r2, r0
			num = (tonedata%100)/10;
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	200a      	movs	r0, #10
 8000aa8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if(black)
 8000ab4:	b38a      	cbz	r2, 8000b1a <StartbuzzertoneTask+0xfa>
					tonefreq = tonetable_black[black-1] * num *2 ;
 8000ab6:	ab10      	add	r3, sp, #64	; 0x40
 8000ab8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000abc:	ed12 7a0d 	vldr	s14, [r2, #-52]	; 0xffffffcc
					tonefreq = tonetable_white[white-1] * num *2;
 8000ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
				SetbuzzerFreq(tonefreq);
 8000ac4:	6823      	ldr	r3, [r4, #0]
 8000ac6:	2200      	movs	r2, #0
					tonefreq = tonetable_white[white-1] * num *2;
 8000ac8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000acc:	edcd 7a02 	vstr	s15, [sp, #8]
				SetbuzzerFreq(tonefreq);
 8000ad0:	ed9d 6a02 	vldr	s12, [sp, #8]
 8000ad4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000ad8:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000adc:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8000ae0:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 8000ae4:	635a      	str	r2, [r3, #52]	; 0x34
			else
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
 8000ae6:	eddd 7a03 	vldr	s15, [sp, #12]
 8000aea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af2:	d00b      	beq.n	8000b0c <StartbuzzertoneTask+0xec>
				osDelay(500/time); //time is used to shorter the sound..
 8000af4:	ed9d 7a03 	vldr	s14, [sp, #12]
 8000af8:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000b60 <StartbuzzertoneTask+0x140>
 8000afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b04:	ee17 0a90 	vmov	r0, s15
 8000b08:	f002 ff61 	bl	80039ce <osDelay>
			xSemaphoreGive(buzzerMutexHandle);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	6828      	ldr	r0, [r5, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4619      	mov	r1, r3
 8000b14:	f003 fadc 	bl	80040d0 <xQueueGenericSend>
 8000b18:	e79a      	b.n	8000a50 <StartbuzzertoneTask+0x30>
			white  = tonedata%10;
 8000b1a:	fbb1 f3f0 	udiv	r3, r1, r0
 8000b1e:	fb00 1313 	mls	r3, r0, r3, r1
					tonefreq = tonetable_white[white-1] * num *2;
 8000b22:	aa10      	add	r2, sp, #64	; 0x40
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000b2a:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8000b2e:	e7c7      	b.n	8000ac0 <StartbuzzertoneTask+0xa0>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	635a      	str	r2, [r3, #52]	; 0x34
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 8000b36:	9602      	str	r6, [sp, #8]
 8000b38:	e7d5      	b.n	8000ae6 <StartbuzzertoneTask+0xc6>
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
 8000b42:	e785      	b.n	8000a50 <StartbuzzertoneTask+0x30>
 8000b44:	f3af 8000 	nop.w
 8000b48:	00000000 	.word	0x00000000
 8000b4c:	412e8480 	.word	0x412e8480
 8000b50:	08004e48 	.word	0x08004e48
 8000b54:	20003fc0 	.word	0x20003fc0
 8000b58:	20003fb4 	.word	0x20003fb4
 8000b5c:	20004104 	.word	0x20004104
 8000b60:	43fa0000 	.word	0x43fa0000

08000b64 <StartshuntTask>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void StartshuntTask(void const * argument)
{
 8000b64:	b508      	push	{r3, lr}
  for(;;)
  {
    osDelay(1);
 8000b66:	2001      	movs	r0, #1
 8000b68:	f002 ff31 	bl	80039ce <osDelay>
 8000b6c:	e7fb      	b.n	8000b66 <StartshuntTask+0x2>
	...

08000b70 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <SystemClock_Config+0xc8>)
 8000b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	641a      	str	r2, [r3, #64]	; 0x40
{
 8000b7c:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b80:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b82:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2701      	movs	r7, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <SystemClock_Config+0xcc>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9c:	9707      	str	r7, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba2:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ba4:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bae:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb6:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000bba:	23d8      	movs	r3, #216	; 0xd8
 8000bbc:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbe:	f001 f9c9 	bl	8001f54 <HAL_RCC_OscConfig>
 8000bc2:	b100      	cbz	r0, 8000bc6 <SystemClock_Config+0x56>
 8000bc4:	e7fe      	b.n	8000bc4 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bc6:	f001 f98d 	bl	8001ee4 <HAL_PWREx_EnableOverDrive>
 8000bca:	b100      	cbz	r0, 8000bce <SystemClock_Config+0x5e>
 8000bcc:	e7fe      	b.n	8000bcc <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd2:	260f      	movs	r6, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bd6:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bd8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bde:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000be6:	f001 fb73 	bl	80022d0 <HAL_RCC_ClockConfig>
 8000bea:	b100      	cbz	r0, 8000bee <SystemClock_Config+0x7e>
 8000bec:	e7fe      	b.n	8000bec <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <SystemClock_Config+0xd0>)
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000bf0:	9030      	str	r0, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000bf2:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000bf4:	2310      	movs	r3, #16
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000bf6:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000bfa:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000bfc:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000bfe:	9725      	str	r7, [sp, #148]	; 0x94
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000c00:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8000c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c06:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c08:	f001 fc36 	bl	8002478 <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	4605      	mov	r5, r0
 8000c0e:	b100      	cbz	r0, 8000c12 <SystemClock_Config+0xa2>
 8000c10:	e7fe      	b.n	8000c10 <SystemClock_Config+0xa0>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c12:	f001 fbed 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c1e:	f000 fcab 	bl	8001578 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c22:	4620      	mov	r0, r4
 8000c24:	f000 fcbe 	bl	80015a4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000c28:	462a      	mov	r2, r5
 8000c2a:	4631      	mov	r1, r6
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 fc5e 	bl	80014f0 <HAL_NVIC_SetPriority>
}
 8000c34:	b039      	add	sp, #228	; 0xe4
 8000c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40007000 	.word	0x40007000
 8000c40:	08022340 	.word	0x08022340

08000c44 <main>:
{
 8000c44:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c4a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <main+0xc0>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c56:	695a      	ldr	r2, [r3, #20]
 8000c58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c5c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c62:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8000c66:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c6a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c72:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c76:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c7a:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000c7e:	07a5      	lsls	r5, r4, #30
 8000c80:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c82:	ea02 0e06 	and.w	lr, r2, r6
 8000c86:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c88:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c8a:	ea4e 0700 	orr.w	r7, lr, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8000c8e:	3901      	subs	r1, #1
 8000c90:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c94:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 8000c98:	1c4f      	adds	r7, r1, #1
 8000c9a:	d1f6      	bne.n	8000c8a <main+0x46>
 8000c9c:	3a20      	subs	r2, #32
    } while(sets--);
 8000c9e:	f112 0f20 	cmn.w	r2, #32
 8000ca2:	d1ee      	bne.n	8000c82 <main+0x3e>
 8000ca4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ca8:	695a      	ldr	r2, [r3, #20]
 8000caa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000cae:	615a      	str	r2, [r3, #20]
 8000cb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cb4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000cb8:	f000 fbe0 	bl	800147c <HAL_Init>
  SystemClock_Config();
 8000cbc:	f7ff ff58 	bl	8000b70 <SystemClock_Config>
  MX_GPIO_Init();
 8000cc0:	f7ff fd0c 	bl	80006dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc4:	f7ff fc4e 	bl	8000564 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000cc8:	f7ff fae4 	bl	8000294 <MX_DFSDM1_Init>
  MX_I2C4_Init();
 8000ccc:	f7ff fd68 	bl	80007a0 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000cd0:	f000 f828 	bl	8000d24 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000cd4:	f000 f964 	bl	8000fa0 <MX_TIM1_Init>
  MX_UART4_Init();
 8000cd8:	f000 fa3c 	bl	8001154 <MX_UART4_Init>
  MX_UART8_Init();
 8000cdc:	f000 fa5c 	bl	8001198 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000ce0:	f000 fa7c 	bl	80011dc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ce4:	f000 fa9c 	bl	8001220 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000ce8:	f000 fb38 	bl	800135c <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8000cec:	f000 f9e0 	bl	80010b0 <MX_TIM2_Init>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <main+0xc4>)
 8000cf4:	f002 f982 	bl	8002ffc <HAL_TIM_PWM_Start>
  MX_FREERTOS_Init();
 8000cf8:	f7ff fc5a 	bl	80005b0 <MX_FREERTOS_Init>
  osKernelStart();
 8000cfc:	f002 fe4a 	bl	8003994 <osKernelStart>
 8000d00:	e7fe      	b.n	8000d00 <main+0xbc>
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	20004104 	.word	0x20004104

08000d0c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000d0c:	6802      	ldr	r2, [r0, #0]
 8000d0e:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d101      	bne.n	8000d18 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000d14:	f000 bbbe 	b.w	8001494 <HAL_IncTick>
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40000800 	.word	0x40000800

08000d20 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000d20:	e7fe      	b.n	8000d20 <_Error_Handler>
	...

08000d24 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8000d24:	4812      	ldr	r0, [pc, #72]	; (8000d70 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2a:	4912      	ldr	r1, [pc, #72]	; (8000d74 <MX_SPI1_Init+0x50>)
{
 8000d2c:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d32:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d34:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d38:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d3c:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3e:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d40:	2230      	movs	r2, #48	; 0x30
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d42:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d44:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d46:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d48:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000d4a:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d50:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d52:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d54:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8000d56:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d58:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d5a:	f001 fe1b 	bl	8002994 <HAL_SPI_Init>
 8000d5e:	b128      	cbz	r0, 8000d6c <MX_SPI1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d60:	2151      	movs	r1, #81	; 0x51
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_SPI1_Init+0x54>)
  }

}
 8000d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000d68:	f7ff bfda 	b.w	8000d20 <_Error_Handler>
 8000d6c:	bd08      	pop	{r3, pc}
 8000d6e:	bf00      	nop
 8000d70:	20004020 	.word	0x20004020
 8000d74:	40013000 	.word	0x40013000
 8000d78:	08004ef7 	.word	0x08004ef7

08000d7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8000d7c:	6802      	ldr	r2, [r0, #0]
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_SPI_MspInit+0x58>)
 8000d80:	429a      	cmp	r2, r3
{
 8000d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d84:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI1)
 8000d86:	d122      	bne.n	8000dce <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d88:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d94:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d96:	a901      	add	r1, sp, #4
 8000d98:	480f      	ldr	r0, [pc, #60]	; (8000dd8 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d9e:	645a      	str	r2, [r3, #68]	; 0x44
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000db0:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000db4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	f000 fe83 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000dba:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	a901      	add	r1, sp, #4
 8000dbe:	4807      	ldr	r0, [pc, #28]	; (8000ddc <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000dc0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f000 fe79 	bl	8001ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dce:	b007      	add	sp, #28
 8000dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40013000 	.word	0x40013000
 8000dd8:	40020c00 	.word	0x40020c00
 8000ddc:	40020400 	.word	0x40020400

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 fb72 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f06f 000b 	mvn.w	r0, #11
 8000dee:	4611      	mov	r1, r2
 8000df0:	f000 fb7e 	bl	80014f0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f06f 000a 	mvn.w	r0, #10
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	f000 fb78 	bl	80014f0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f06f 0009 	mvn.w	r0, #9
 8000e06:	4611      	mov	r1, r2
 8000e08:	f000 fb72 	bl	80014f0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f06f 0004 	mvn.w	r0, #4
 8000e12:	4611      	mov	r1, r2
 8000e14:	f000 fb6c 	bl	80014f0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f06f 0003 	mvn.w	r0, #3
 8000e1e:	4611      	mov	r1, r2
 8000e20:	f000 fb66 	bl	80014f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	210f      	movs	r1, #15
 8000e28:	f06f 0001 	mvn.w	r0, #1
 8000e2c:	f000 fb60 	bl	80014f0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000e3c:	f000 bb58 	b.w	80014f0 <HAL_NVIC_SetPriority>

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000e42:	4601      	mov	r1, r0
{
 8000e44:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000e46:	2200      	movs	r2, #0
 8000e48:	201e      	movs	r0, #30
 8000e4a:	f000 fb51 	bl	80014f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000e4e:	201e      	movs	r0, #30
 8000e50:	f000 fb86 	bl	8001560 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e56:	a901      	add	r1, sp, #4
 8000e58:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000e5c:	4c13      	ldr	r4, [pc, #76]	; (8000eac <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e5e:	f042 0204 	orr.w	r2, r2, #4
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6e:	f001 fae5 	bl	800243c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e72:	f001 fac3 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e78:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 8000e7a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000e7c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000e80:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_InitTick+0x74>)
 8000e84:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e88:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8000e8a:	2300      	movs	r3, #0
  htim4.Init.Prescaler = uwPrescalerValue;
 8000e8c:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000e8e:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8000e90:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000e94:	f001 ff1e 	bl	8002cd4 <HAL_TIM_Base_Init>
 8000e98:	b920      	cbnz	r0, 8000ea4 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f001 fdf2 	bl	8002a84 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000ea0:	b008      	add	sp, #32
 8000ea2:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	e7fb      	b.n	8000ea0 <HAL_InitTick+0x60>
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	20004084 	.word	0x20004084
 8000eb0:	40000800 	.word	0x40000800
 8000eb4:	000f4240 	.word	0x000f4240

08000eb8 <NMI_Handler>:
 8000eb8:	4770      	bx	lr

08000eba <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler>

08000ebc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler>

08000ebe <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler>

08000ec0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler>

08000ec2 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8000ec4:	f002 bd92 	b.w	80039ec <osSystickHandler>

08000ec8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ec8:	4801      	ldr	r0, [pc, #4]	; (8000ed0 <TIM4_IRQHandler+0x8>)
 8000eca:	f001 bdeb 	b.w	8002aa4 <HAL_TIM_IRQHandler>
 8000ece:	bf00      	nop
 8000ed0:	20004084 	.word	0x20004084

08000ed4 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8000ed4:	4801      	ldr	r0, [pc, #4]	; (8000edc <DMA2_Stream0_IRQHandler+0x8>)
 8000ed6:	f000 bd35 	b.w	8001944 <HAL_DMA_IRQHandler>
 8000eda:	bf00      	nop
 8000edc:	20003e88 	.word	0x20003e88

08000ee0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8000ee0:	4801      	ldr	r0, [pc, #4]	; (8000ee8 <DMA2_Stream1_IRQHandler+0x8>)
 8000ee2:	f000 bd2f 	b.w	8001944 <HAL_DMA_IRQHandler>
 8000ee6:	bf00      	nop
 8000ee8:	20003e28 	.word	0x20003e28

08000eec <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8000eec:	6803      	ldr	r3, [r0, #0]
{
 8000eee:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_TIM_Base_MspInit+0x40>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10b      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_TIM_Base_MspInit+0x44>)
 8000ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000efa:	f042 0201 	orr.w	r2, r2, #1
 8000efe:	645a      	str	r2, [r3, #68]	; 0x44
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f0a:	b002      	add	sp, #8
 8000f0c:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 8000f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f12:	d1fa      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f14:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8000f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1a:	f042 0201 	orr.w	r2, r2, #1
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	9b01      	ldr	r3, [sp, #4]
}
 8000f2a:	e7ee      	b.n	8000f0a <HAL_TIM_Base_MspInit+0x1e>
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8000f34:	6803      	ldr	r3, [r0, #0]
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_TIM_MspPostInit+0x60>)
 8000f38:	4293      	cmp	r3, r2
{
 8000f3a:	b570      	push	{r4, r5, r6, lr}
 8000f3c:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 8000f3e:	d119      	bne.n	8000f74 <HAL_TIM_MspPostInit+0x40>
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f42:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f46:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	a901      	add	r1, sp, #4
 8000f4a:	4813      	ldr	r0, [pc, #76]	; (8000f98 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f4c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f54:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f000 fdb3 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8000f5a:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5e:	a901      	add	r1, sp, #4
 8000f60:	480e      	ldr	r0, [pc, #56]	; (8000f9c <HAL_TIM_MspPostInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8000f62:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f6a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f000 fda8 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f70:	b006      	add	sp, #24
 8000f72:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM2)
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d1fa      	bne.n	8000f70 <HAL_TIM_MspPostInit+0x3c>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	a901      	add	r1, sp, #4
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f90:	9305      	str	r3, [sp, #20]
 8000f92:	e7eb      	b.n	8000f6c <HAL_TIM_MspPostInit+0x38>
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <MX_TIM1_Init>:
  htim1.Instance = TIM1;
 8000fa0:	4840      	ldr	r0, [pc, #256]	; (80010a4 <MX_TIM1_Init+0x104>)
  htim1.Init.Prescaler = 1;
 8000fa2:	2301      	movs	r3, #1
  htim1.Init.Period = 1000;
 8000fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim1.Init.Prescaler = 1;
 8000fa8:	493f      	ldr	r1, [pc, #252]	; (80010a8 <MX_TIM1_Init+0x108>)
{
 8000faa:	b500      	push	{lr}
  htim1.Init.Prescaler = 1;
 8000fac:	e880 000a 	stmia.w	r0, {r1, r3}
  htim1.Init.Period = 1000;
 8000fb0:	60c2      	str	r2, [r0, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	2300      	movs	r3, #0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8000fb8:	b09b      	sub	sp, #108	; 0x6c
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	6083      	str	r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000fbc:	6102      	str	r2, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fbe:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc2:	f001 fe87 	bl	8002cd4 <HAL_TIM_Base_Init>
 8000fc6:	b118      	cbz	r0, 8000fd0 <MX_TIM1_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8000fc8:	214d      	movs	r1, #77	; 0x4d
 8000fca:	4838      	ldr	r0, [pc, #224]	; (80010ac <MX_TIM1_Init+0x10c>)
 8000fcc:	f7ff fea8 	bl	8000d20 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd0:	a91a      	add	r1, sp, #104	; 0x68
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd6:	4833      	ldr	r0, [pc, #204]	; (80010a4 <MX_TIM1_Init+0x104>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd8:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fdc:	f001 ff74 	bl	8002ec8 <HAL_TIM_ConfigClockSource>
 8000fe0:	b118      	cbz	r0, 8000fea <MX_TIM1_Init+0x4a>
    _Error_Handler(__FILE__, __LINE__);
 8000fe2:	2153      	movs	r1, #83	; 0x53
 8000fe4:	4831      	ldr	r0, [pc, #196]	; (80010ac <MX_TIM1_Init+0x10c>)
 8000fe6:	f7ff fe9b 	bl	8000d20 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fea:	482e      	ldr	r0, [pc, #184]	; (80010a4 <MX_TIM1_Init+0x104>)
 8000fec:	f001 fe8c 	bl	8002d08 <HAL_TIM_PWM_Init>
 8000ff0:	b118      	cbz	r0, 8000ffa <MX_TIM1_Init+0x5a>
    _Error_Handler(__FILE__, __LINE__);
 8000ff2:	2158      	movs	r1, #88	; 0x58
 8000ff4:	482d      	ldr	r0, [pc, #180]	; (80010ac <MX_TIM1_Init+0x10c>)
 8000ff6:	f7ff fe93 	bl	8000d20 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffc:	a901      	add	r1, sp, #4
 8000ffe:	4829      	ldr	r0, [pc, #164]	; (80010a4 <MX_TIM1_Init+0x104>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001002:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001006:	f002 f863 	bl	80030d0 <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	b118      	cbz	r0, 8001014 <MX_TIM1_Init+0x74>
    _Error_Handler(__FILE__, __LINE__);
 800100c:	2160      	movs	r1, #96	; 0x60
 800100e:	4827      	ldr	r0, [pc, #156]	; (80010ac <MX_TIM1_Init+0x10c>)
 8001010:	f7ff fe86 	bl	8000d20 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8001014:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001016:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001018:	a908      	add	r1, sp, #32
 800101a:	4822      	ldr	r0, [pc, #136]	; (80010a4 <MX_TIM1_Init+0x104>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800101c:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 800101e:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001020:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001022:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001024:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001026:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001028:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102a:	f002 f8bd 	bl	80031a8 <HAL_TIM_PWM_ConfigChannel>
 800102e:	b118      	cbz	r0, 8001038 <MX_TIM1_Init+0x98>
    _Error_Handler(__FILE__, __LINE__);
 8001030:	216c      	movs	r1, #108	; 0x6c
 8001032:	481e      	ldr	r0, [pc, #120]	; (80010ac <MX_TIM1_Init+0x10c>)
 8001034:	f7ff fe74 	bl	8000d20 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001038:	2204      	movs	r2, #4
 800103a:	a908      	add	r1, sp, #32
 800103c:	4819      	ldr	r0, [pc, #100]	; (80010a4 <MX_TIM1_Init+0x104>)
 800103e:	f002 f8b3 	bl	80031a8 <HAL_TIM_PWM_ConfigChannel>
 8001042:	b118      	cbz	r0, 800104c <MX_TIM1_Init+0xac>
    _Error_Handler(__FILE__, __LINE__);
 8001044:	2171      	movs	r1, #113	; 0x71
 8001046:	4819      	ldr	r0, [pc, #100]	; (80010ac <MX_TIM1_Init+0x10c>)
 8001048:	f7ff fe6a 	bl	8000d20 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800104c:	2208      	movs	r2, #8
 800104e:	a908      	add	r1, sp, #32
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <MX_TIM1_Init+0x104>)
 8001052:	f002 f8a9 	bl	80031a8 <HAL_TIM_PWM_ConfigChannel>
 8001056:	b118      	cbz	r0, 8001060 <MX_TIM1_Init+0xc0>
    _Error_Handler(__FILE__, __LINE__);
 8001058:	2176      	movs	r1, #118	; 0x76
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <MX_TIM1_Init+0x10c>)
 800105c:	f7ff fe60 	bl	8000d20 <_Error_Handler>
  sBreakDeadTimeConfig.DeadTime = 2;
 8001060:	2202      	movs	r2, #2
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001062:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001064:	a90f      	add	r1, sp, #60	; 0x3c
 8001066:	480f      	ldr	r0, [pc, #60]	; (80010a4 <MX_TIM1_Init+0x104>)
  sBreakDeadTimeConfig.DeadTime = 2;
 8001068:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800106a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800106e:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001070:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001072:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001074:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001076:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.BreakFilter = 0;
 800107c:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800107e:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001080:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001086:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001088:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800108a:	f002 f847 	bl	800311c <HAL_TIMEx_ConfigBreakDeadTime>
 800108e:	b118      	cbz	r0, 8001098 <MX_TIM1_Init+0xf8>
    _Error_Handler(__FILE__, __LINE__);
 8001090:	2186      	movs	r1, #134	; 0x86
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_TIM1_Init+0x10c>)
 8001094:	f7ff fe44 	bl	8000d20 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <MX_TIM1_Init+0x104>)
 800109a:	f7ff ff4b 	bl	8000f34 <HAL_TIM_MspPostInit>
}
 800109e:	b01b      	add	sp, #108	; 0x6c
 80010a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80010a4:	200040c4 	.word	0x200040c4
 80010a8:	40010000 	.word	0x40010000
 80010ac:	08004f0a 	.word	0x08004f0a

080010b0 <MX_TIM2_Init>:
  htim2.Instance = TIM2;
 80010b0:	4826      	ldr	r0, [pc, #152]	; (800114c <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 107;
 80010b2:	236b      	movs	r3, #107	; 0x6b
 80010b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 50000;
 80010b8:	f24c 3250 	movw	r2, #50000	; 0xc350
{
 80010bc:	b500      	push	{lr}
  htim2.Init.Prescaler = 107;
 80010be:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	2300      	movs	r3, #0
{
 80010c4:	b08f      	sub	sp, #60	; 0x3c
  htim2.Init.Period = 50000;
 80010c6:	60c2      	str	r2, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d0:	f001 fe00 	bl	8002cd4 <HAL_TIM_Base_Init>
 80010d4:	b118      	cbz	r0, 80010de <MX_TIM2_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 80010d6:	219b      	movs	r1, #155	; 0x9b
 80010d8:	481d      	ldr	r0, [pc, #116]	; (8001150 <MX_TIM2_Init+0xa0>)
 80010da:	f7ff fe21 	bl	8000d20 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010de:	a90e      	add	r1, sp, #56	; 0x38
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e4:	4819      	ldr	r0, [pc, #100]	; (800114c <MX_TIM2_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ea:	f001 feed 	bl	8002ec8 <HAL_TIM_ConfigClockSource>
 80010ee:	b118      	cbz	r0, 80010f8 <MX_TIM2_Init+0x48>
    _Error_Handler(__FILE__, __LINE__);
 80010f0:	21a1      	movs	r1, #161	; 0xa1
 80010f2:	4817      	ldr	r0, [pc, #92]	; (8001150 <MX_TIM2_Init+0xa0>)
 80010f4:	f7ff fe14 	bl	8000d20 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f8:	4814      	ldr	r0, [pc, #80]	; (800114c <MX_TIM2_Init+0x9c>)
 80010fa:	f001 fe05 	bl	8002d08 <HAL_TIM_PWM_Init>
 80010fe:	b118      	cbz	r0, 8001108 <MX_TIM2_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 8001100:	21a6      	movs	r1, #166	; 0xa6
 8001102:	4813      	ldr	r0, [pc, #76]	; (8001150 <MX_TIM2_Init+0xa0>)
 8001104:	f7ff fe0c 	bl	8000d20 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110a:	4669      	mov	r1, sp
 800110c:	480f      	ldr	r0, [pc, #60]	; (800114c <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001112:	f001 ffdd 	bl	80030d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	b118      	cbz	r0, 8001120 <MX_TIM2_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
 8001118:	21ad      	movs	r1, #173	; 0xad
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_TIM2_Init+0xa0>)
 800111c:	f7ff fe00 	bl	8000d20 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8001120:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001122:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001124:	a907      	add	r1, sp, #28
 8001126:	4809      	ldr	r0, [pc, #36]	; (800114c <MX_TIM2_Init+0x9c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001128:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800112a:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112c:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112e:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001130:	f002 f83a 	bl	80031a8 <HAL_TIM_PWM_ConfigChannel>
 8001134:	b118      	cbz	r0, 800113e <MX_TIM2_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 8001136:	21b6      	movs	r1, #182	; 0xb6
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_TIM2_Init+0xa0>)
 800113a:	f7ff fdf1 	bl	8000d20 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <MX_TIM2_Init+0x9c>)
 8001140:	f7ff fef8 	bl	8000f34 <HAL_TIM_MspPostInit>
}
 8001144:	b00f      	add	sp, #60	; 0x3c
 8001146:	f85d fb04 	ldr.w	pc, [sp], #4
 800114a:	bf00      	nop
 800114c:	20004104 	.word	0x20004104
 8001150:	08004f0a 	.word	0x08004f0a

08001154 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001154:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8001156:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_UART4_Init+0x38>)
  huart4.Init.BaudRate = 115200;
 8001158:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_UART4_Init+0x3c>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 800115e:	220c      	movs	r2, #12
  huart4.Init.BaudRate = 115200;
 8001160:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001164:	2300      	movs	r3, #0
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001166:	6142      	str	r2, [r0, #20]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001168:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800116a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800116c:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001172:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001174:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001176:	f002 fa8e 	bl	8003696 <HAL_UART_Init>
 800117a:	b128      	cbz	r0, 8001188 <MX_UART4_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800117c:	2150      	movs	r1, #80	; 0x50
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_UART4_Init+0x40>)
  }

}
 8001180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001184:	f7ff bdcc 	b.w	8000d20 <_Error_Handler>
 8001188:	bd08      	pop	{r3, pc}
 800118a:	bf00      	nop
 800118c:	20004294 	.word	0x20004294
 8001190:	40004c00 	.word	0x40004c00
 8001194:	08004f1d 	.word	0x08004f1d

08001198 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001198:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_UART8_Init+0x38>)
  huart8.Init.BaudRate = 115200;
  huart8.Init.WordLength = UART_WORDLENGTH_7B;
 800119c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <MX_UART8_Init+0x3c>)
 80011a2:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 80011a6:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart8.Init.StopBits = UART_STOPBITS_1;
 80011aa:	2300      	movs	r3, #0
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 80011ac:	220c      	movs	r2, #12
  huart8.Init.StopBits = UART_STOPBITS_1;
 80011ae:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80011b0:	6103      	str	r3, [r0, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80011b2:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b4:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b6:	61c3      	str	r3, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b8:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ba:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80011bc:	f002 fa6b 	bl	8003696 <HAL_UART_Init>
 80011c0:	b128      	cbz	r0, 80011ce <MX_UART8_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80011c2:	2164      	movs	r1, #100	; 0x64
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_UART8_Init+0x40>)
  }

}
 80011c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80011ca:	f7ff bda9 	b.w	8000d20 <_Error_Handler>
 80011ce:	bd08      	pop	{r3, pc}
 80011d0:	20004224 	.word	0x20004224
 80011d4:	40007c00 	.word	0x40007c00
 80011d8:	08004f1d 	.word	0x08004f1d

080011dc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011dc:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80011e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011e4:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <MX_USART1_UART_Init+0x3c>)
 80011e6:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 80011ea:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ee:	2300      	movs	r3, #0
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f6:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f8:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fa:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fc:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fe:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001200:	f002 fa49 	bl	8003696 <HAL_UART_Init>
 8001204:	b128      	cbz	r0, 8001212 <MX_USART1_UART_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001206:	2179      	movs	r1, #121	; 0x79
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_USART1_UART_Init+0x40>)
  }

}
 800120a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800120e:	f7ff bd87 	b.w	8000d20 <_Error_Handler>
 8001212:	bd08      	pop	{r3, pc}
 8001214:	200041b4 	.word	0x200041b4
 8001218:	40011000 	.word	0x40011000
 800121c:	08004f1d 	.word	0x08004f1d

08001220 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001220:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_7B;
 8001224:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <MX_USART3_UART_Init+0x3c>)
 800122a:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 800122e:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001232:	2300      	movs	r3, #0
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001234:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001236:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001238:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800123a:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123c:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800123e:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001240:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001242:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001244:	f002 fa27 	bl	8003696 <HAL_UART_Init>
 8001248:	b128      	cbz	r0, 8001256 <MX_USART3_UART_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 800124a:	218e      	movs	r1, #142	; 0x8e
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_USART3_UART_Init+0x40>)
  }

}
 800124e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001252:	f7ff bd65 	b.w	8000d20 <_Error_Handler>
 8001256:	bd08      	pop	{r3, pc}
 8001258:	20004144 	.word	0x20004144
 800125c:	40004800 	.word	0x40004800
 8001260:	08004f1d 	.word	0x08004f1d

08001264 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8001264:	6803      	ldr	r3, [r0, #0]
 8001266:	4a35      	ldr	r2, [pc, #212]	; (800133c <HAL_UART_MspInit+0xd8>)
 8001268:	4293      	cmp	r3, r2
{
 800126a:	b500      	push	{lr}
 800126c:	b08b      	sub	sp, #44	; 0x2c
  if(uartHandle->Instance==UART4)
 800126e:	d115      	bne.n	800129c <HAL_UART_MspInit+0x38>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001270:	4b33      	ldr	r3, [pc, #204]	; (8001340 <HAL_UART_MspInit+0xdc>)
 8001272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001274:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2202      	movs	r2, #2
    __HAL_RCC_UART4_CLK_ENABLE();
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001280:	2201      	movs	r2, #1
    __HAL_RCC_UART4_CLK_ENABLE();
 8001282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001286:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART4_CLK_ENABLE();
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800128c:	2303      	movs	r3, #3
 800128e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001292:	2308      	movs	r3, #8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001294:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	a905      	add	r1, sp, #20
 8001298:	482a      	ldr	r0, [pc, #168]	; (8001344 <HAL_UART_MspInit+0xe0>)
 800129a:	e017      	b.n	80012cc <HAL_UART_MspInit+0x68>
  else if(uartHandle->Instance==UART8)
 800129c:	4a2a      	ldr	r2, [pc, #168]	; (8001348 <HAL_UART_MspInit+0xe4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d119      	bne.n	80012d6 <HAL_UART_MspInit+0x72>
    __HAL_RCC_UART8_CLK_ENABLE();
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_UART_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a4:	a905      	add	r1, sp, #20
 80012a6:	4829      	ldr	r0, [pc, #164]	; (800134c <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 80012a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2202      	movs	r2, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b6:	2201      	movs	r2, #1
    __HAL_RCC_UART8_CLK_ENABLE();
 80012b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012bc:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART8_CLK_ENABLE();
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012c2:	2303      	movs	r3, #3
 80012c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012cc:	f000 fbf8 	bl	8001ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012d0:	b00b      	add	sp, #44	; 0x2c
 80012d2:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(uartHandle->Instance==USART1)
 80012d6:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d114      	bne.n	8001306 <HAL_UART_MspInit+0xa2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_UART_MspInit+0xdc>)
 80012de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012e0:	f042 0210 	orr.w	r2, r2, #16
 80012e4:	645a      	str	r2, [r3, #68]	; 0x44
 80012e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	9303      	str	r3, [sp, #12]
 80012ee:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012f4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001302:	2307      	movs	r3, #7
 8001304:	e7c6      	b.n	8001294 <HAL_UART_MspInit+0x30>
  else if(uartHandle->Instance==USART3)
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <HAL_UART_MspInit+0xf0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d1e1      	bne.n	80012d0 <HAL_UART_MspInit+0x6c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_UART_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	a905      	add	r1, sp, #20
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001314:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001320:	9304      	str	r3, [sp, #16]
 8001322:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001324:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001328:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001336:	2307      	movs	r3, #7
 8001338:	9309      	str	r3, [sp, #36]	; 0x24
 800133a:	e7c7      	b.n	80012cc <HAL_UART_MspInit+0x68>
 800133c:	40004c00 	.word	0x40004c00
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000
 8001348:	40007c00 	.word	0x40007c00
 800134c:	40021000 	.word	0x40021000
 8001350:	40011000 	.word	0x40011000
 8001354:	40004800 	.word	0x40004800
 8001358:	40020c00 	.word	0x40020c00

0800135c <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 800135c:	b508      	push	{r3, lr}

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_USB_OTG_HS_PCD_Init+0x38>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001360:	2309      	movs	r3, #9
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <MX_USB_OTG_HS_PCD_Init+0x3c>)
 8001364:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001368:	2300      	movs	r3, #0
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800136a:	2201      	movs	r2, #1
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800136c:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 800136e:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001370:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001372:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001374:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001376:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001378:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800137a:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800137c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800137e:	f000 fd2e 	bl	8001dde <HAL_PCD_Init>
 8001382:	b128      	cbz	r0, 8001390 <MX_USB_OTG_HS_PCD_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001384:	214f      	movs	r1, #79	; 0x4f
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USB_OTG_HS_PCD_Init+0x40>)
  }

}
 8001388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800138c:	f7ff bcc8 	b.w	8000d20 <_Error_Handler>
 8001390:	bd08      	pop	{r3, pc}
 8001392:	bf00      	nop
 8001394:	20004304 	.word	0x20004304
 8001398:	40040000 	.word	0x40040000
 800139c:	08004f32 	.word	0x08004f32

080013a0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 80013a0:	6802      	ldr	r2, [r0, #0]
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_PCD_MspInit+0x7c>)
 80013a4:	429a      	cmp	r2, r3
{
 80013a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a8:	b089      	sub	sp, #36	; 0x24
  if(pcdHandle->Instance==USB_OTG_HS)
 80013aa:	d135      	bne.n	8001418 <HAL_PCD_MspInit+0x78>
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80013ac:	230d      	movs	r3, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013b4:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	a903      	add	r1, sp, #12
 80013b8:	4819      	ldr	r0, [pc, #100]	; (8001420 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80013ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013c2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c4:	f000 fb7c 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80013c8:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	a903      	add	r1, sp, #12
 80013cc:	4815      	ldr	r0, [pc, #84]	; (8001424 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80013ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013d6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f000 fb72 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80013dc:	f643 4323 	movw	r3, #15395	; 0x3c23
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	a903      	add	r1, sp, #12
 80013e2:	4811      	ldr	r0, [pc, #68]	; (8001428 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80013e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013ec:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f000 fb67 	bl	8001ac0 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_PCD_MspInit+0x8c>)
 80013f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80013fa:	631a      	str	r2, [r3, #48]	; 0x30
 80013fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013fe:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001402:	9201      	str	r2, [sp, #4]
 8001404:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001408:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800140c:	631a      	str	r2, [r3, #48]	; 0x30
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001418:	b009      	add	sp, #36	; 0x24
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141c:	40040000 	.word	0x40040000
 8001420:	40020800 	.word	0x40020800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40023800 	.word	0x40023800

08001430 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001430:	490f      	ldr	r1, [pc, #60]	; (8001470 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001432:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <SystemInit+0x44>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f042 0201 	orr.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800144a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001452:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001456:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <SystemInit+0x48>)
 800145a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001462:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001464:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001466:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800146a:	608b      	str	r3, [r1, #8]
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	40023800 	.word	0x40023800
 8001478:	24003010 	.word	0x24003010

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 f824 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fcdb 	bl	8000e40 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800148a:	f7ff fca9 	bl	8000de0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800148e:	2000      	movs	r0, #0
 8001490:	bd08      	pop	{r3, pc}
	...

08001494 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001494:	4a02      	ldr	r2, [pc, #8]	; (80014a0 <HAL_IncTick+0xc>)
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20004704 	.word	0x20004704

080014a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014a4:	4b01      	ldr	r3, [pc, #4]	; (80014ac <HAL_GetTick+0x8>)
 80014a6:	6818      	ldr	r0, [r3, #0]
}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20004704 	.word	0x20004704

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80014b0:	b513      	push	{r0, r1, r4, lr}
 80014b2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80014b4:	f7ff fff6 	bl	80014a4 <HAL_GetTick>
 80014b8:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80014ba:	f7ff fff3 	bl	80014a4 <HAL_GetTick>
 80014be:	9b01      	ldr	r3, [sp, #4]
 80014c0:	1b00      	subs	r0, r0, r4
 80014c2:	4298      	cmp	r0, r3
 80014c4:	d3f9      	bcc.n	80014ba <HAL_Delay+0xa>
  {
  }
}
 80014c6:	b002      	add	sp, #8
 80014c8:	bd10      	pop	{r4, pc}
	...

080014cc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014ce:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	0c1b      	lsrs	r3, r3, #16
 80014de:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80014e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80014e8:	60d3      	str	r3, [r2, #12]
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b530      	push	{r4, r5, lr}
 80014f4:	68dc      	ldr	r4, [r3, #12]
 80014f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	2b04      	cmp	r3, #4
 8001502:	bf28      	it	cs
 8001504:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150c:	bf8c      	ite	hi
 800150e:	3c03      	subhi	r4, #3
 8001510:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001512:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 8001516:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f103 33ff 	add.w	r3, r3, #4294967295
 800151c:	ea01 0103 	and.w	r1, r1, r3
 8001520:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	fa05 f404 	lsl.w	r4, r5, r4
 8001528:	f104 34ff 	add.w	r4, r4, #4294967295
 800152c:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	ea42 0201 	orr.w	r2, r2, r1
 8001534:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8001538:	da05      	bge.n	8001546 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	f000 000f 	and.w	r0, r0, #15
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_NVIC_SetPriority+0x6c>)
 8001542:	541a      	strb	r2, [r3, r0]
 8001544:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001550:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8001554:	bd30      	pop	{r4, r5, pc}
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00
 800155c:	e000ed14 	.word	0xe000ed14

08001560 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001560:	0942      	lsrs	r2, r0, #5
 8001562:	2301      	movs	r3, #1
 8001564:	f000 001f 	and.w	r0, r0, #31
 8001568:	fa03 f000 	lsl.w	r0, r3, r0
 800156c:	4b01      	ldr	r3, [pc, #4]	; (8001574 <HAL_NVIC_EnableIRQ+0x14>)
 800156e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100

08001578 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	3801      	subs	r0, #1
 800157a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800157e:	d20a      	bcs.n	8001596 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	21f0      	movs	r1, #240	; 0xf0
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80015a6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	bf0c      	ite	eq
 80015ac:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80015b0:	f022 0204 	bicne.w	r2, r2, #4
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	4770      	bx	lr
 80015b8:	e000e010 	.word	0xe000e010

080015bc <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <DFSDM_GetChannelFromInstance+0x54>)
 80015be:	4298      	cmp	r0, r3
 80015c0:	d017      	beq.n	80015f2 <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 80015c2:	3320      	adds	r3, #32
 80015c4:	4298      	cmp	r0, r3
 80015c6:	d016      	beq.n	80015f6 <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 80015c8:	3320      	adds	r3, #32
 80015ca:	4298      	cmp	r0, r3
 80015cc:	d015      	beq.n	80015fa <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 80015ce:	3320      	adds	r3, #32
 80015d0:	4298      	cmp	r0, r3
 80015d2:	d014      	beq.n	80015fe <DFSDM_GetChannelFromInstance+0x42>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 80015d4:	3320      	adds	r3, #32
 80015d6:	4298      	cmp	r0, r3
 80015d8:	d013      	beq.n	8001602 <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 80015da:	3320      	adds	r3, #32
 80015dc:	4298      	cmp	r0, r3
 80015de:	d012      	beq.n	8001606 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 80015e0:	3320      	adds	r3, #32
 80015e2:	4298      	cmp	r0, r3
 80015e4:	d011      	beq.n	800160a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
  {
    channel = 7;
 80015e6:	3320      	adds	r3, #32
 80015e8:	4298      	cmp	r0, r3
 80015ea:	bf14      	ite	ne
 80015ec:	20ff      	movne	r0, #255	; 0xff
 80015ee:	2007      	moveq	r0, #7
 80015f0:	4770      	bx	lr
    channel = 0;
 80015f2:	2000      	movs	r0, #0
 80015f4:	4770      	bx	lr
    channel = 1;
 80015f6:	2001      	movs	r0, #1
 80015f8:	4770      	bx	lr
    channel = 2;
 80015fa:	2002      	movs	r0, #2
 80015fc:	4770      	bx	lr
    channel = 3;
 80015fe:	2003      	movs	r0, #3
 8001600:	4770      	bx	lr
    channel = 4;
 8001602:	2004      	movs	r0, #4
 8001604:	4770      	bx	lr
    channel = 5;
 8001606:	2005      	movs	r0, #5
 8001608:	4770      	bx	lr
    channel = 6;
 800160a:	2006      	movs	r0, #6
  }

  return channel;
}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40017400 	.word	0x40017400

08001614 <HAL_DFSDM_ChannelInit>:
{
 8001614:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 8001616:	4604      	mov	r4, r0
 8001618:	2800      	cmp	r0, #0
 800161a:	d067      	beq.n	80016ec <HAL_DFSDM_ChannelInit+0xd8>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800161c:	4d34      	ldr	r5, [pc, #208]	; (80016f0 <HAL_DFSDM_ChannelInit+0xdc>)
 800161e:	6800      	ldr	r0, [r0, #0]
 8001620:	f7ff ffcc 	bl	80015bc <DFSDM_GetChannelFromInstance>
 8001624:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d15f      	bne.n	80016ec <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800162c:	4620      	mov	r0, r4
 800162e:	f7fe ff5b 	bl	80004e8 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_DFSDM_ChannelInit+0xe0>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	3201      	adds	r2, #1
 8001638:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d119      	bne.n	8001674 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_DFSDM_ChannelInit+0xe4>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001648:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68a1      	ldr	r1, [r4, #8]
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001658:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800165a:	7922      	ldrb	r2, [r4, #4]
 800165c:	2a01      	cmp	r2, #1
 800165e:	d105      	bne.n	800166c <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8001660:	68e1      	ldr	r1, [r4, #12]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	3901      	subs	r1, #1
 8001666:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800166a:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001672:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001674:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001676:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001678:	6803      	ldr	r3, [r0, #0]
 800167a:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 800167e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001680:	6923      	ldr	r3, [r4, #16]
 8001682:	6802      	ldr	r2, [r0, #0]
 8001684:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001686:	69a1      	ldr	r1, [r4, #24]
 8001688:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800168a:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800168c:	4313      	orrs	r3, r2
 800168e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001690:	6803      	ldr	r3, [r0, #0]
 8001692:	f023 030f 	bic.w	r3, r3, #15
 8001696:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001698:	69e3      	ldr	r3, [r4, #28]
 800169a:	6802      	ldr	r2, [r0, #0]
 800169c:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800169e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80016a0:	4313      	orrs	r3, r2
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80016a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80016a4:	6003      	str	r3, [r0, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80016a6:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80016a8:	6883      	ldr	r3, [r0, #8]
 80016aa:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 80016ae:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80016b0:	6883      	ldr	r3, [r0, #8]
 80016b2:	430b      	orrs	r3, r1
 80016b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80016b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80016ba:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80016bc:	6843      	ldr	r3, [r0, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80016c4:	6843      	ldr	r3, [r0, #4]
 80016c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016d0:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80016d2:	6803      	ldr	r3, [r0, #0]
 80016d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d8:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80016da:	2301      	movs	r3, #1
 80016dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80016e0:	f7ff ff6c 	bl	80015bc <DFSDM_GetChannelFromInstance>
 80016e4:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 80016e8:	2000      	movs	r0, #0
 80016ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016ec:	2001      	movs	r0, #1
}
 80016ee:	bd38      	pop	{r3, r4, r5, pc}
 80016f0:	2000002c 	.word	0x2000002c
 80016f4:	2000004c 	.word	0x2000004c
 80016f8:	40017400 	.word	0x40017400

080016fc <HAL_DFSDM_FilterInit>:
{
 80016fc:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_filter == NULL)
 80016fe:	4604      	mov	r4, r0
 8001700:	2800      	cmp	r0, #0
 8001702:	d069      	beq.n	80017d8 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001704:	6802      	ldr	r2, [r0, #0]
 8001706:	4b35      	ldr	r3, [pc, #212]	; (80017dc <HAL_DFSDM_FilterInit+0xe0>)
 8001708:	429a      	cmp	r2, r3
 800170a:	d105      	bne.n	8001718 <HAL_DFSDM_FilterInit+0x1c>
 800170c:	6840      	ldr	r0, [r0, #4]
 800170e:	2801      	cmp	r0, #1
 8001710:	d063      	beq.n	80017da <HAL_DFSDM_FilterInit+0xde>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001712:	68e0      	ldr	r0, [r4, #12]
 8001714:	2801      	cmp	r0, #1
 8001716:	d060      	beq.n	80017da <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001718:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800171a:	2201      	movs	r2, #1
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800171c:	4620      	mov	r0, r4
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800171e:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001720:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001722:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001724:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001726:	f7fe fe43 	bl	80003b0 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001732:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001734:	7a22      	ldrb	r2, [r4, #8]
 8001736:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	bf0c      	ite	eq
 800173c:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001740:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8001744:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001746:	7a62      	ldrb	r2, [r4, #9]
 8001748:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	bf0c      	ite	eq
 800174e:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001752:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8001756:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001758:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800175a:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800175c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001760:	2d02      	cmp	r5, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001762:	f022 0208 	bic.w	r2, r2, #8
 8001766:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001768:	d103      	bne.n	8001772 <HAL_DFSDM_FilterInit+0x76>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	6961      	ldr	r1, [r4, #20]
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001772:	7c20      	ldrb	r0, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001774:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001776:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001778:	bf0c      	ite	eq
 800177a:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800177e:	f022 0210 	bicne.w	r2, r2, #16
 8001782:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001784:	7c62      	ldrb	r2, [r4, #17]
 8001786:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	bf0c      	ite	eq
 800178c:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001790:	f022 0220 	bicne.w	r2, r2, #32
 8001794:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 800179c:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80017a0:	615a      	str	r2, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80017a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017a4:	6959      	ldr	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80017a6:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017a8:	430a      	orrs	r2, r1
 80017aa:	69e1      	ldr	r1, [r4, #28]
 80017ac:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80017ae:	6a21      	ldr	r1, [r4, #32]
 80017b0:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80017b6:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80017b8:	6862      	ldr	r2, [r4, #4]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80017ba:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80017be:	2000      	movs	r0, #0
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80017c0:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80017c2:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80017c4:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80017c6:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 80017d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
}
 80017da:	bd38      	pop	{r3, r4, r5, pc}
 80017dc:	40017500 	.word	0x40017500

080017e0 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 80017e0:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2bfd      	cmp	r3, #253	; 0xfd
{
 80017ea:	b510      	push	{r4, lr}
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 80017ec:	d813      	bhi.n	8001816 <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80017ee:	6803      	ldr	r3, [r0, #0]
 80017f0:	0209      	lsls	r1, r1, #8
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80017f2:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80017f4:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80017f6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80017fa:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80017fe:	bf08      	it	eq
 8001800:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001804:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001808:	601c      	str	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800180a:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800180c:	4321      	orrs	r1, r4
 800180e:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001810:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8001812:	2000      	movs	r0, #0
 8001814:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001816:	2001      	movs	r0, #1
}
 8001818:	bd10      	pop	{r4, pc}
	...

0800181c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800181c:	6803      	ldr	r3, [r0, #0]
 800181e:	2118      	movs	r1, #24
 8001820:	b2da      	uxtb	r2, r3
 8001822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001826:	3a10      	subs	r2, #16
 8001828:	f023 0303 	bic.w	r3, r3, #3
 800182c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001832:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001834:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001836:	bf88      	it	hi
 8001838:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800183a:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800183c:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800183e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	08004f61 	.word	0x08004f61

08001848 <HAL_DMA_Init>:
{
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff fe2a 	bl	80014a4 <HAL_GetTick>
 8001850:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001852:	2c00      	cmp	r4, #0
 8001854:	d071      	beq.n	800193a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001856:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8001858:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800185a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800185e:	2302      	movs	r3, #2
 8001860:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001864:	6813      	ldr	r3, [r2, #0]
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186c:	6821      	ldr	r1, [r4, #0]
 800186e:	680b      	ldr	r3, [r1, #0]
 8001870:	07d8      	lsls	r0, r3, #31
 8001872:	d43c      	bmi.n	80018ee <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001874:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001876:	4d32      	ldr	r5, [pc, #200]	; (8001940 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001878:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800187a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800187c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187e:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001880:	4313      	orrs	r3, r2
 8001882:	68e2      	ldr	r2, [r4, #12]
 8001884:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001886:	6922      	ldr	r2, [r4, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	6962      	ldr	r2, [r4, #20]
 800188c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	69e2      	ldr	r2, [r4, #28]
 8001890:	4303      	orrs	r3, r0
 8001892:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	6a22      	ldr	r2, [r4, #32]
 8001896:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001898:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800189a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a0:	bf01      	itttt	eq
 80018a2:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80018a4:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80018a6:	4335      	orreq	r5, r6
 80018a8:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018aa:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80018ac:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80018ae:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018b0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80018b4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018b8:	d10b      	bne.n	80018d2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80018ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018bc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80018be:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018c0:	b13d      	cbz	r5, 80018d2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018c2:	b9f8      	cbnz	r0, 8001904 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80018c4:	2a01      	cmp	r2, #1
 80018c6:	d02d      	beq.n	8001924 <HAL_DMA_Init+0xdc>
 80018c8:	d301      	bcc.n	80018ce <HAL_DMA_Init+0x86>
 80018ca:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018cc:	d101      	bne.n	80018d2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ce:	01ea      	lsls	r2, r5, #7
 80018d0:	d42b      	bmi.n	800192a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80018d2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff ffa1 	bl	800181c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80018dc:	233f      	movs	r3, #63	; 0x3f
 80018de:	4093      	lsls	r3, r2
 80018e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80018e4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80018e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80018ec:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ee:	f7ff fdd9 	bl	80014a4 <HAL_GetTick>
 80018f2:	1b40      	subs	r0, r0, r5
 80018f4:	2805      	cmp	r0, #5
 80018f6:	d9b9      	bls.n	800186c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f8:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fa:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018fc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80018fe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001902:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001904:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001908:	d113      	bne.n	8001932 <HAL_DMA_Init+0xea>
    switch (tmp)
 800190a:	2a03      	cmp	r2, #3
 800190c:	d8e1      	bhi.n	80018d2 <HAL_DMA_Init+0x8a>
 800190e:	a001      	add	r0, pc, #4	; (adr r0, 8001914 <HAL_DMA_Init+0xcc>)
 8001910:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001914:	0800192b 	.word	0x0800192b
 8001918:	080018cf 	.word	0x080018cf
 800191c:	0800192b 	.word	0x0800192b
 8001920:	08001925 	.word	0x08001925
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001924:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001928:	d1d3      	bne.n	80018d2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800192a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800192c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800192e:	6563      	str	r3, [r4, #84]	; 0x54
 8001930:	e7e5      	b.n	80018fe <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001932:	2a02      	cmp	r2, #2
 8001934:	d9f9      	bls.n	800192a <HAL_DMA_Init+0xe2>
 8001936:	2a03      	cmp	r2, #3
 8001938:	e7c8      	b.n	80018cc <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
 800193c:	bd70      	pop	{r4, r5, r6, pc}
 800193e:	bf00      	nop
 8001940:	e010803f 	.word	0xe010803f

08001944 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8001944:	2300      	movs	r3, #0
{
 8001946:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001948:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800194a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_DMA_IRQHandler+0x170>)
{
 800194e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001950:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8001952:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001954:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001956:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001958:	409a      	lsls	r2, r3
 800195a:	4216      	tst	r6, r2
 800195c:	d00c      	beq.n	8001978 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800195e:	6801      	ldr	r1, [r0, #0]
 8001960:	6808      	ldr	r0, [r1, #0]
 8001962:	0740      	lsls	r0, r0, #29
 8001964:	d508      	bpl.n	8001978 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001966:	6808      	ldr	r0, [r1, #0]
 8001968:	f020 0004 	bic.w	r0, r0, #4
 800196c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800196e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001970:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001978:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <HAL_DMA_IRQHandler+0x174>)
 800197a:	409a      	lsls	r2, r3
 800197c:	4216      	tst	r6, r2
 800197e:	d008      	beq.n	8001992 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001980:	6821      	ldr	r1, [r4, #0]
 8001982:	6949      	ldr	r1, [r1, #20]
 8001984:	0609      	lsls	r1, r1, #24
 8001986:	d504      	bpl.n	8001992 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001988:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800198a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800198c:	f042 0202 	orr.w	r2, r2, #2
 8001990:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001992:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <HAL_DMA_IRQHandler+0x178>)
 8001994:	409a      	lsls	r2, r3
 8001996:	4216      	tst	r6, r2
 8001998:	d008      	beq.n	80019ac <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800199a:	6821      	ldr	r1, [r4, #0]
 800199c:	6809      	ldr	r1, [r1, #0]
 800199e:	0788      	lsls	r0, r1, #30
 80019a0:	d504      	bpl.n	80019ac <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019a2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019a6:	f042 0204 	orr.w	r2, r2, #4
 80019aa:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019ac:	2210      	movs	r2, #16
 80019ae:	409a      	lsls	r2, r3
 80019b0:	4216      	tst	r6, r2
 80019b2:	d010      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	0709      	lsls	r1, r1, #28
 80019ba:	d50c      	bpl.n	80019d6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019bc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	0350      	lsls	r0, r2, #13
 80019c2:	d535      	bpl.n	8001a30 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0319      	lsls	r1, r3, #12
 80019c8:	d401      	bmi.n	80019ce <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80019ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019cc:	e000      	b.n	80019d0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80019d0:	b10b      	cbz	r3, 80019d6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80019d2:	4620      	mov	r0, r4
 80019d4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80019d8:	2220      	movs	r2, #32
 80019da:	408a      	lsls	r2, r1
 80019dc:	4216      	tst	r6, r2
 80019de:	d038      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	06c6      	lsls	r6, r0, #27
 80019e6:	d534      	bpl.n	8001a52 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019e8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019ea:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80019ee:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019f2:	d125      	bne.n	8001a40 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f4:	f022 0216 	bic.w	r2, r2, #22
 80019f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a00:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a04:	b90a      	cbnz	r2, 8001a0a <HAL_DMA_IRQHandler+0xc6>
 8001a06:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001a08:	b11a      	cbz	r2, 8001a12 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	f022 0208 	bic.w	r2, r2, #8
 8001a10:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a12:	233f      	movs	r3, #63	; 0x3f
 8001a14:	408b      	lsls	r3, r1
 8001a16:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001a24:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001a26:	b10b      	cbz	r3, 8001a2c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4798      	blx	r3
}
 8001a2c:	b003      	add	sp, #12
 8001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	05d2      	lsls	r2, r2, #23
 8001a34:	d4c9      	bmi.n	80019ca <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	f022 0208 	bic.w	r2, r2, #8
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e7c4      	b.n	80019ca <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a40:	0350      	lsls	r0, r2, #13
 8001a42:	d528      	bpl.n	8001a96 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0319      	lsls	r1, r3, #12
 8001a48:	d432      	bmi.n	8001ab0 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001a4c:	b10b      	cbz	r3, 8001a52 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0e9      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a5a:	07da      	lsls	r2, r3, #31
 8001a5c:	d519      	bpl.n	8001a92 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a5e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001a60:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a62:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a6e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001a72:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001a76:	9b01      	ldr	r3, [sp, #4]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	429f      	cmp	r7, r3
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	d302      	bcc.n	8001a86 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	07db      	lsls	r3, r3, #31
 8001a84:	d4f7      	bmi.n	8001a76 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8001a86:	2300      	movs	r3, #0
 8001a88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001a92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a94:	e7c7      	b.n	8001a26 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001a9c:	d108      	bne.n	8001ab0 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	f021 0110 	bic.w	r1, r1, #16
 8001aa4:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001aa8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001aac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001ab0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ab2:	e7cb      	b.n	8001a4c <HAL_DMA_IRQHandler+0x108>
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	00800001 	.word	0x00800001
 8001abc:	00800004 	.word	0x00800004

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac4:	680b      	ldr	r3, [r1, #0]
{
 8001ac6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001c8c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001acc:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ace:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad0:	4a6c      	ldr	r2, [pc, #432]	; (8001c84 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ad2:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001c90 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8001ad6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ada:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8001adc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001ae4:	45b6      	cmp	lr, r6
 8001ae6:	f040 80b3 	bne.w	8001c50 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aea:	684c      	ldr	r4, [r1, #4]
 8001aec:	f024 0710 	bic.w	r7, r4, #16
 8001af0:	2f02      	cmp	r7, #2
 8001af2:	d116      	bne.n	8001b22 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001af4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001af8:	f003 0b07 	and.w	fp, r3, #7
 8001afc:	f04f 0c0f 	mov.w	ip, #15
 8001b00:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001b04:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001b08:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b0c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001b10:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b14:	690d      	ldr	r5, [r1, #16]
 8001b16:	fa05 f50b 	lsl.w	r5, r5, fp
 8001b1a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001b1e:	f8ca 5020 	str.w	r5, [sl, #32]
 8001b22:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b26:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001b28:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b2c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b30:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b34:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b36:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b3a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b3c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b3e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b42:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8001b46:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4a:	d811      	bhi.n	8001b70 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001b4c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b4e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b52:	68cf      	ldr	r7, [r1, #12]
 8001b54:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001b58:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001b5c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b5e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b64:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001b68:	409f      	lsls	r7, r3
 8001b6a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001b6e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001b70:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b72:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b74:	688f      	ldr	r7, [r1, #8]
 8001b76:	fa07 f70a 	lsl.w	r7, r7, sl
 8001b7a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001b7c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b7e:	00e5      	lsls	r5, r4, #3
 8001b80:	d566      	bpl.n	8001c50 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001b86:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b8a:	f003 0e03 	and.w	lr, r3, #3
 8001b8e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8001b96:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b9a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8001ba2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001ba6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001baa:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8001bae:	9503      	str	r5, [sp, #12]
 8001bb0:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bb2:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8001bb6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bba:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bbe:	4d32      	ldr	r5, [pc, #200]	; (8001c88 <HAL_GPIO_Init+0x1c8>)
 8001bc0:	42a8      	cmp	r0, r5
 8001bc2:	d04c      	beq.n	8001c5e <HAL_GPIO_Init+0x19e>
 8001bc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bc8:	42a8      	cmp	r0, r5
 8001bca:	d04a      	beq.n	8001c62 <HAL_GPIO_Init+0x1a2>
 8001bcc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bd0:	42a8      	cmp	r0, r5
 8001bd2:	d048      	beq.n	8001c66 <HAL_GPIO_Init+0x1a6>
 8001bd4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bd8:	42a8      	cmp	r0, r5
 8001bda:	d046      	beq.n	8001c6a <HAL_GPIO_Init+0x1aa>
 8001bdc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001be0:	42a8      	cmp	r0, r5
 8001be2:	d044      	beq.n	8001c6e <HAL_GPIO_Init+0x1ae>
 8001be4:	4548      	cmp	r0, r9
 8001be6:	d044      	beq.n	8001c72 <HAL_GPIO_Init+0x1b2>
 8001be8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001bec:	42a8      	cmp	r0, r5
 8001bee:	d042      	beq.n	8001c76 <HAL_GPIO_Init+0x1b6>
 8001bf0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bf4:	42a8      	cmp	r0, r5
 8001bf6:	d040      	beq.n	8001c7a <HAL_GPIO_Init+0x1ba>
 8001bf8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bfc:	42a8      	cmp	r0, r5
 8001bfe:	d03e      	beq.n	8001c7e <HAL_GPIO_Init+0x1be>
 8001c00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c04:	42a8      	cmp	r0, r5
 8001c06:	bf14      	ite	ne
 8001c08:	250a      	movne	r5, #10
 8001c0a:	2509      	moveq	r5, #9
 8001c0c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c10:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c14:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c18:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8001c1e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	bf0c      	ite	eq
 8001c22:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001c24:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c26:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8001c2a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001c2c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	bf0c      	ite	eq
 8001c30:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001c32:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c34:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001c38:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001c3a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	bf0c      	ite	eq
 8001c3e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001c40:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c42:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001c44:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001c46:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	bf54      	ite	pl
 8001c4a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001c4c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001c4e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c50:	3301      	adds	r3, #1
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	f47f af3f 	bne.w	8001ad6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001c58:	b005      	add	sp, #20
 8001c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c5e:	2500      	movs	r5, #0
 8001c60:	e7d4      	b.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c62:	2501      	movs	r5, #1
 8001c64:	e7d2      	b.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c66:	2502      	movs	r5, #2
 8001c68:	e7d0      	b.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c6a:	2503      	movs	r5, #3
 8001c6c:	e7ce      	b.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c6e:	2504      	movs	r5, #4
 8001c70:	e7cc      	b.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c72:	2505      	movs	r5, #5
 8001c74:	e7ca      	b.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c76:	2506      	movs	r5, #6
 8001c78:	e7c8      	b.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c7a:	2507      	movs	r5, #7
 8001c7c:	e7c6      	b.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c7e:	2508      	movs	r5, #8
 8001c80:	e7c4      	b.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c82:	bf00      	nop
 8001c84:	40013c00 	.word	0x40013c00
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40021400 	.word	0x40021400

08001c94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c94:	b10a      	cbz	r2, 8001c9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c96:	6181      	str	r1, [r0, #24]
 8001c98:	4770      	bx	lr
 8001c9a:	0409      	lsls	r1, r1, #16
 8001c9c:	e7fb      	b.n	8001c96 <HAL_GPIO_WritePin+0x2>

08001c9e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001c9e:	6943      	ldr	r3, [r0, #20]
 8001ca0:	4059      	eors	r1, r3
 8001ca2:	6141      	str	r1, [r0, #20]
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca6:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001ca8:	4604      	mov	r4, r0
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d04a      	beq.n	8001d44 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001cae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cb6:	b91b      	cbnz	r3, 8001cc0 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cbc:	f7fe fda4 	bl	8000808 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc2:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc8:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cd4:	6862      	ldr	r2, [r4, #4]
 8001cd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cda:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce6:	d124      	bne.n	8001d32 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cec:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cee:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf0:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001cf2:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cf4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cfc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d04:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d06:	6922      	ldr	r2, [r4, #16]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	69a1      	ldr	r1, [r4, #24]
 8001d0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d10:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d12:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d14:	69e2      	ldr	r2, [r4, #28]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	f042 0201 	orr.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001d22:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d24:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d2a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001d30:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d36:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d38:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d3a:	d1d8      	bne.n	8001cee <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	e7d4      	b.n	8001cee <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
}
 8001d46:	bd10      	pop	{r4, pc}

08001d48 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d48:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	2a20      	cmp	r2, #32
{
 8001d50:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d52:	d11d      	bne.n	8001d90 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d019      	beq.n	8001d90 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d5c:	2324      	movs	r3, #36	; 0x24
 8001d5e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d62:	6803      	ldr	r3, [r0, #0]
 8001d64:	681c      	ldr	r4, [r3, #0]
 8001d66:	f024 0401 	bic.w	r4, r4, #1
 8001d6a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d6c:	681c      	ldr	r4, [r3, #0]
 8001d6e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001d72:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d74:	681c      	ldr	r4, [r3, #0]
 8001d76:	4321      	orrs	r1, r4
 8001d78:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	f041 0101 	orr.w	r1, r1, #1
 8001d80:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d82:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001d84:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001d88:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2002      	movs	r0, #2
  }
}
 8001d92:	bd10      	pop	{r4, pc}

08001d94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d94:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d96:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001d9a:	b2e4      	uxtb	r4, r4
 8001d9c:	2c20      	cmp	r4, #32
 8001d9e:	d11c      	bne.n	8001dda <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d018      	beq.n	8001dda <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001da8:	2324      	movs	r3, #36	; 0x24
 8001daa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dae:	6803      	ldr	r3, [r0, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001db8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dba:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dbe:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dc2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dcc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001dd2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001dda:	2002      	movs	r0, #2
  }
}
 8001ddc:	bd10      	pop	{r4, pc}

08001dde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dde:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001de0:	4606      	mov	r6, r0
{
 8001de2:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d067      	beq.n	8001eb8 <HAL_PCD_Init+0xda>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de8:	2303      	movs	r3, #3

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8001dea:	4634      	mov	r4, r6

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001dec:	466d      	mov	r5, sp
 8001dee:	1d37      	adds	r7, r6, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001df0:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8001df4:	f7ff fad4 	bl	80013a0 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8001df8:	f854 0b10 	ldr.w	r0, [r4], #16
 8001dfc:	f001 fcd1 	bl	80037a2 <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e0c:	f106 0410 	add.w	r4, r6, #16
 8001e10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e14:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001e18:	6830      	ldr	r0, [r6, #0]

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8001e1a:	2501      	movs	r5, #1
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001e1c:	f001 fc86 	bl	800372c <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001e20:	2100      	movs	r1, #0
 8001e22:	6830      	ldr	r0, [r6, #0]
 8001e24:	f001 fcc3 	bl	80037ae <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001e2c:	4632      	mov	r2, r6
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e2e:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8001e30:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8001e34:	321c      	adds	r2, #28
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001e36:	8451      	strh	r1, [r2, #34]	; 0x22
 for (i = 0; i < 15 ; i++)
 8001e38:	3101      	adds	r1, #1
   hpcd->IN_ep[i].is_in = 1;
 8001e3a:	7755      	strb	r5, [r2, #29]
 for (i = 0; i < 15 ; i++)
 8001e3c:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e3e:	77d0      	strb	r0, [r2, #31]
   hpcd->IN_ep[i].maxpacket =  0;
 8001e40:	6250      	str	r0, [r2, #36]	; 0x24
   hpcd->IN_ep[i].xfer_buff = 0;
 8001e42:	6290      	str	r0, [r2, #40]	; 0x28
   hpcd->IN_ep[i].xfer_len = 0;
 8001e44:	6310      	str	r0, [r2, #48]	; 0x30
 for (i = 0; i < 15 ; i++)
 8001e46:	d1f3      	bne.n	8001e30 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0;
   hpcd->OUT_ep[i].xfer_buff = 0;
   hpcd->OUT_ep[i].xfer_len = 0;

   hpcd->Instance->DIEPTXF[i] = 0;
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0;
 8001e4e:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 8001e50:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->Instance->DIEPTXF[i] = 0;
 8001e54:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 for (i = 0; i < 15 ; i++)
 8001e5a:	3201      	adds	r2, #1
   hpcd->Instance->DIEPTXF[i] = 0;
 8001e5c:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->OUT_ep[i].is_in = 0;
 8001e60:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
 for (i = 0; i < 15 ; i++)
 8001e64:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e66:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 8001e6a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 8001e6e:	f103 031c 	add.w	r3, r3, #28
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001e72:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0;
 8001e76:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   hpcd->Instance->DIEPTXF[i] = 0;
 8001e7a:	6041      	str	r1, [r0, #4]
 for (i = 0; i < 15 ; i++)
 8001e7c:	d1e8      	bne.n	8001e50 <HAL_PCD_Init+0x72>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	466d      	mov	r5, sp
 8001e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e90:	4670      	mov	r0, lr
 8001e92:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001e96:	f001 fccb 	bl	8003830 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8001ea0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d102      	bne.n	8001eac <HAL_PCD_Init+0xce>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8001ea6:	4630      	mov	r0, r6
 8001ea8:	f000 f808 	bl	8001ebc <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 8001eac:	6830      	ldr	r0, [r6, #0]
 8001eae:	f001 fd65 	bl	800397c <USB_DevDisconnect>
 return HAL_OK;
 8001eb2:	2000      	movs	r0, #0
}
 8001eb4:	b00b      	add	sp, #44	; 0x2c
 8001eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001eb8:	2001      	movs	r0, #1
 8001eba:	e7fb      	b.n	8001eb4 <HAL_PCD_Init+0xd6>

08001ebc <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 8001ebc:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001ebe:	6802      	ldr	r2, [r0, #0]
{
 8001ec0:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 8001ec2:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ecc:	6993      	ldr	r3, [r2, #24]
 8001ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ed2:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ed4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eda:	f043 0303 	orr.w	r3, r3, #3
 8001ede:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001eea:	4c19      	ldr	r4, [pc, #100]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f04:	f7ff face 	bl	80014a4 <HAL_GetTick>
 8001f08:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f0a:	6863      	ldr	r3, [r4, #4]
 8001f0c:	03da      	lsls	r2, r3, #15
 8001f0e:	d50c      	bpl.n	8001f2a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f16:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f18:	f7ff fac4 	bl	80014a4 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f1c:	4c0c      	ldr	r4, [pc, #48]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8001f1e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f20:	6863      	ldr	r3, [r4, #4]
 8001f22:	039b      	lsls	r3, r3, #14
 8001f24:	d50a      	bpl.n	8001f3c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001f26:	2000      	movs	r0, #0
 8001f28:	e006      	b.n	8001f38 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f2a:	f7ff fabb 	bl	80014a4 <HAL_GetTick>
 8001f2e:	1b40      	subs	r0, r0, r5
 8001f30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f34:	d9e9      	bls.n	8001f0a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001f36:	2003      	movs	r0, #3
}
 8001f38:	b003      	add	sp, #12
 8001f3a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f3c:	f7ff fab2 	bl	80014a4 <HAL_GetTick>
 8001f40:	1b40      	subs	r0, r0, r5
 8001f42:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f46:	d9eb      	bls.n	8001f20 <HAL_PWREx_EnableOverDrive+0x3c>
 8001f48:	e7f5      	b.n	8001f36 <HAL_PWREx_EnableOverDrive+0x52>
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f58:	4604      	mov	r4, r0
 8001f5a:	b918      	cbnz	r0, 8001f64 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001f5c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001f5e:	b002      	add	sp, #8
 8001f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f64:	6803      	ldr	r3, [r0, #0]
 8001f66:	07d8      	lsls	r0, r3, #31
 8001f68:	d410      	bmi.n	8001f8c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	0799      	lsls	r1, r3, #30
 8001f6e:	d45e      	bmi.n	800202e <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f70:	6823      	ldr	r3, [r4, #0]
 8001f72:	0719      	lsls	r1, r3, #28
 8001f74:	f100 80a3 	bmi.w	80020be <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	075a      	lsls	r2, r3, #29
 8001f7c:	f100 80c4 	bmi.w	8002108 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f80:	69a2      	ldr	r2, [r4, #24]
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	f040 812e 	bne.w	80021e4 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001f88:	2000      	movs	r0, #0
 8001f8a:	e7e8      	b.n	8001f5e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f8c:	4b93      	ldr	r3, [pc, #588]	; (80021dc <HAL_RCC_OscConfig+0x288>)
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	f002 020c 	and.w	r2, r2, #12
 8001f94:	2a04      	cmp	r2, #4
 8001f96:	d007      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	f002 020c 	and.w	r2, r2, #12
 8001f9e:	2a08      	cmp	r2, #8
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x64>
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	025a      	lsls	r2, r3, #9
 8001fa6:	d507      	bpl.n	8001fb8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	4b8c      	ldr	r3, [pc, #560]	; (80021dc <HAL_RCC_OscConfig+0x288>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	039b      	lsls	r3, r3, #14
 8001fae:	d5dc      	bpl.n	8001f6a <HAL_RCC_OscConfig+0x16>
 8001fb0:	6863      	ldr	r3, [r4, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1d9      	bne.n	8001f6a <HAL_RCC_OscConfig+0x16>
 8001fb6:	e7d1      	b.n	8001f5c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb8:	6863      	ldr	r3, [r4, #4]
 8001fba:	4d88      	ldr	r5, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x288>)
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc0:	d111      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x92>
 8001fc2:	682b      	ldr	r3, [r5, #0]
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fca:	f7ff fa6b 	bl	80014a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4d83      	ldr	r5, [pc, #524]	; (80021dc <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001fd0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	682b      	ldr	r3, [r5, #0]
 8001fd4:	039f      	lsls	r7, r3, #14
 8001fd6:	d4c8      	bmi.n	8001f6a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff fa64 	bl	80014a4 <HAL_GetTick>
 8001fdc:	1b80      	subs	r0, r0, r6
 8001fde:	2864      	cmp	r0, #100	; 0x64
 8001fe0:	d9f7      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001fe2:	2003      	movs	r0, #3
 8001fe4:	e7bb      	b.n	8001f5e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe6:	b99b      	cbnz	r3, 8002010 <HAL_RCC_OscConfig+0xbc>
 8001fe8:	682b      	ldr	r3, [r5, #0]
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fee:	602b      	str	r3, [r5, #0]
 8001ff0:	682b      	ldr	r3, [r5, #0]
 8001ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fa54 	bl	80014a4 <HAL_GetTick>
 8001ffc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	682b      	ldr	r3, [r5, #0]
 8002000:	0398      	lsls	r0, r3, #14
 8002002:	d5b2      	bpl.n	8001f6a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002004:	f7ff fa4e 	bl	80014a4 <HAL_GetTick>
 8002008:	1b80      	subs	r0, r0, r6
 800200a:	2864      	cmp	r0, #100	; 0x64
 800200c:	d9f7      	bls.n	8001ffe <HAL_RCC_OscConfig+0xaa>
 800200e:	e7e8      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002014:	682b      	ldr	r3, [r5, #0]
 8002016:	d103      	bne.n	8002020 <HAL_RCC_OscConfig+0xcc>
 8002018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201c:	602b      	str	r3, [r5, #0]
 800201e:	e7d0      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6e>
 8002020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002024:	602b      	str	r3, [r5, #0]
 8002026:	682b      	ldr	r3, [r5, #0]
 8002028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202c:	e7cc      	b.n	8001fc8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202e:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <HAL_RCC_OscConfig+0x288>)
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	f012 0f0c 	tst.w	r2, #12
 8002036:	d007      	beq.n	8002048 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	f002 020c 	and.w	r2, r2, #12
 800203e:	2a08      	cmp	r2, #8
 8002040:	d111      	bne.n	8002066 <HAL_RCC_OscConfig+0x112>
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	0259      	lsls	r1, r3, #9
 8002046:	d40e      	bmi.n	8002066 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002048:	4b64      	ldr	r3, [pc, #400]	; (80021dc <HAL_RCC_OscConfig+0x288>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	0792      	lsls	r2, r2, #30
 800204e:	d502      	bpl.n	8002056 <HAL_RCC_OscConfig+0x102>
 8002050:	68e2      	ldr	r2, [r4, #12]
 8002052:	2a01      	cmp	r2, #1
 8002054:	d182      	bne.n	8001f5c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	6921      	ldr	r1, [r4, #16]
 800205a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800205e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002062:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002064:	e784      	b.n	8001f70 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002066:	68e3      	ldr	r3, [r4, #12]
 8002068:	4d5c      	ldr	r5, [pc, #368]	; (80021dc <HAL_RCC_OscConfig+0x288>)
 800206a:	b1bb      	cbz	r3, 800209c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800206c:	682b      	ldr	r3, [r5, #0]
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002074:	f7ff fa16 	bl	80014a4 <HAL_GetTick>
 8002078:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207a:	682b      	ldr	r3, [r5, #0]
 800207c:	079f      	lsls	r7, r3, #30
 800207e:	d507      	bpl.n	8002090 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	682b      	ldr	r3, [r5, #0]
 8002082:	6922      	ldr	r2, [r4, #16]
 8002084:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002088:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800208c:	602b      	str	r3, [r5, #0]
 800208e:	e76f      	b.n	8001f70 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002090:	f7ff fa08 	bl	80014a4 <HAL_GetTick>
 8002094:	1b80      	subs	r0, r0, r6
 8002096:	2802      	cmp	r0, #2
 8002098:	d9ef      	bls.n	800207a <HAL_RCC_OscConfig+0x126>
 800209a:	e7a2      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800209c:	682b      	ldr	r3, [r5, #0]
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020a4:	f7ff f9fe 	bl	80014a4 <HAL_GetTick>
 80020a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	682b      	ldr	r3, [r5, #0]
 80020ac:	0798      	lsls	r0, r3, #30
 80020ae:	f57f af5f 	bpl.w	8001f70 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b2:	f7ff f9f7 	bl	80014a4 <HAL_GetTick>
 80020b6:	1b80      	subs	r0, r0, r6
 80020b8:	2802      	cmp	r0, #2
 80020ba:	d9f6      	bls.n	80020aa <HAL_RCC_OscConfig+0x156>
 80020bc:	e791      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020be:	6963      	ldr	r3, [r4, #20]
 80020c0:	4d46      	ldr	r5, [pc, #280]	; (80021dc <HAL_RCC_OscConfig+0x288>)
 80020c2:	b183      	cbz	r3, 80020e6 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80020c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80020cc:	f7ff f9ea 	bl	80014a4 <HAL_GetTick>
 80020d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80020d4:	079b      	lsls	r3, r3, #30
 80020d6:	f53f af4f 	bmi.w	8001f78 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020da:	f7ff f9e3 	bl	80014a4 <HAL_GetTick>
 80020de:	1b80      	subs	r0, r0, r6
 80020e0:	2802      	cmp	r0, #2
 80020e2:	d9f6      	bls.n	80020d2 <HAL_RCC_OscConfig+0x17e>
 80020e4:	e77d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80020e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80020ee:	f7ff f9d9 	bl	80014a4 <HAL_GetTick>
 80020f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80020f6:	079f      	lsls	r7, r3, #30
 80020f8:	f57f af3e 	bpl.w	8001f78 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff f9d2 	bl	80014a4 <HAL_GetTick>
 8002100:	1b80      	subs	r0, r0, r6
 8002102:	2802      	cmp	r0, #2
 8002104:	d9f6      	bls.n	80020f4 <HAL_RCC_OscConfig+0x1a0>
 8002106:	e76c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002108:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_RCC_OscConfig+0x288>)
 800210a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210c:	00d0      	lsls	r0, r2, #3
 800210e:	d427      	bmi.n	8002160 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002112:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002124:	4d2e      	ldr	r5, [pc, #184]	; (80021e0 <HAL_RCC_OscConfig+0x28c>)
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	05d9      	lsls	r1, r3, #23
 800212a:	d51b      	bpl.n	8002164 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	68a3      	ldr	r3, [r4, #8]
 800212e:	4d2b      	ldr	r5, [pc, #172]	; (80021dc <HAL_RCC_OscConfig+0x288>)
 8002130:	2b01      	cmp	r3, #1
 8002132:	d127      	bne.n	8002184 <HAL_RCC_OscConfig+0x230>
 8002134:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002140:	f7ff f9b0 	bl	80014a4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	4f25      	ldr	r7, [pc, #148]	; (80021dc <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8002146:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800214a:	079b      	lsls	r3, r3, #30
 800214c:	d53f      	bpl.n	80021ce <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800214e:	2e00      	cmp	r6, #0
 8002150:	f43f af16 	beq.w	8001f80 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4a21      	ldr	r2, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x288>)
 8002156:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	e70f      	b.n	8001f80 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8002160:	2600      	movs	r6, #0
 8002162:	e7df      	b.n	8002124 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800216c:	f7ff f99a 	bl	80014a4 <HAL_GetTick>
 8002170:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002172:	682b      	ldr	r3, [r5, #0]
 8002174:	05da      	lsls	r2, r3, #23
 8002176:	d4d9      	bmi.n	800212c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002178:	f7ff f994 	bl	80014a4 <HAL_GetTick>
 800217c:	1bc0      	subs	r0, r0, r7
 800217e:	2864      	cmp	r0, #100	; 0x64
 8002180:	d9f7      	bls.n	8002172 <HAL_RCC_OscConfig+0x21e>
 8002182:	e72e      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	b9ab      	cbnz	r3, 80021b2 <HAL_RCC_OscConfig+0x25e>
 8002186:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	672b      	str	r3, [r5, #112]	; 0x70
 8002192:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800219a:	f7ff f983 	bl	80014a4 <HAL_GetTick>
 800219e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80021a2:	0798      	lsls	r0, r3, #30
 80021a4:	d5d3      	bpl.n	800214e <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff f97d 	bl	80014a4 <HAL_GetTick>
 80021aa:	1bc0      	subs	r0, r0, r7
 80021ac:	4540      	cmp	r0, r8
 80021ae:	d9f7      	bls.n	80021a0 <HAL_RCC_OscConfig+0x24c>
 80021b0:	e717      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80021b6:	d103      	bne.n	80021c0 <HAL_RCC_OscConfig+0x26c>
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	672b      	str	r3, [r5, #112]	; 0x70
 80021be:	e7b9      	b.n	8002134 <HAL_RCC_OscConfig+0x1e0>
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	672b      	str	r3, [r5, #112]	; 0x70
 80021c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	e7b5      	b.n	800213a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7ff f969 	bl	80014a4 <HAL_GetTick>
 80021d2:	eba0 0008 	sub.w	r0, r0, r8
 80021d6:	42a8      	cmp	r0, r5
 80021d8:	d9b6      	bls.n	8002148 <HAL_RCC_OscConfig+0x1f4>
 80021da:	e702      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	4d24      	ldr	r5, [pc, #144]	; (8002278 <HAL_RCC_OscConfig+0x324>)
 80021e6:	68ab      	ldr	r3, [r5, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	f43f aeb5 	beq.w	8001f5c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80021f2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80021f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fa:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	d12f      	bne.n	800225e <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80021fe:	f7ff f951 	bl	80014a4 <HAL_GetTick>
 8002202:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	0199      	lsls	r1, r3, #6
 8002208:	d423      	bmi.n	8002252 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220a:	6a22      	ldr	r2, [r4, #32]
 800220c:	69e3      	ldr	r3, [r4, #28]
 800220e:	4313      	orrs	r3, r2
 8002210:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002212:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002216:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002218:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800221c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800221e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002222:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002224:	4c14      	ldr	r4, [pc, #80]	; (8002278 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002226:	0852      	lsrs	r2, r2, #1
 8002228:	3a01      	subs	r2, #1
 800222a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800222e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002236:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002238:	f7ff f934 	bl	80014a4 <HAL_GetTick>
 800223c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	019a      	lsls	r2, r3, #6
 8002242:	f53f aea1 	bmi.w	8001f88 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff f92d 	bl	80014a4 <HAL_GetTick>
 800224a:	1b40      	subs	r0, r0, r5
 800224c:	2802      	cmp	r0, #2
 800224e:	d9f6      	bls.n	800223e <HAL_RCC_OscConfig+0x2ea>
 8002250:	e6c7      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002252:	f7ff f927 	bl	80014a4 <HAL_GetTick>
 8002256:	1b80      	subs	r0, r0, r6
 8002258:	2802      	cmp	r0, #2
 800225a:	d9d3      	bls.n	8002204 <HAL_RCC_OscConfig+0x2b0>
 800225c:	e6c1      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800225e:	f7ff f921 	bl	80014a4 <HAL_GetTick>
 8002262:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002264:	682b      	ldr	r3, [r5, #0]
 8002266:	019b      	lsls	r3, r3, #6
 8002268:	f57f ae8e 	bpl.w	8001f88 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff f91a 	bl	80014a4 <HAL_GetTick>
 8002270:	1b00      	subs	r0, r0, r4
 8002272:	2802      	cmp	r0, #2
 8002274:	d9f6      	bls.n	8002264 <HAL_RCC_OscConfig+0x310>
 8002276:	e6b4      	b.n	8001fe2 <HAL_RCC_OscConfig+0x8e>
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x48>)
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	f002 020c 	and.w	r2, r2, #12
 8002284:	2a04      	cmp	r2, #4
 8002286:	d003      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x14>
 8002288:	2a08      	cmp	r2, #8
 800228a:	d003      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	480e      	ldr	r0, [pc, #56]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x4c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800228e:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002290:	480e      	ldr	r0, [pc, #56]	; (80022cc <HAL_RCC_GetSysClockFreq+0x50>)
 8002292:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002294:	685a      	ldr	r2, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002296:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002298:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 800229c:	685b      	ldr	r3, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800229e:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 80022a0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80022a4:	bf4c      	ite	mi
 80022a6:	4809      	ldrmi	r0, [pc, #36]	; (80022cc <HAL_RCC_GetSysClockFreq+0x50>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 80022a8:	4807      	ldrpl	r0, [pc, #28]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x4c>)
 80022aa:	fbb0 f0f2 	udiv	r0, r0, r2
 80022ae:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x48>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80022b8:	3301      	adds	r3, #1
 80022ba:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80022bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200

080022d0 <HAL_RCC_ClockConfig>:
{
 80022d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022d4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80022d6:	4604      	mov	r4, r0
 80022d8:	b910      	cbnz	r0, 80022e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
 80022dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4a3f      	ldr	r2, [pc, #252]	; (80023e0 <HAL_RCC_ClockConfig+0x110>)
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	428b      	cmp	r3, r1
 80022ea:	d328      	bcc.n	800233e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	6822      	ldr	r2, [r4, #0]
 80022ee:	0796      	lsls	r6, r2, #30
 80022f0:	d430      	bmi.n	8002354 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f2:	07d0      	lsls	r0, r2, #31
 80022f4:	d436      	bmi.n	8002364 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f6:	4a3a      	ldr	r2, [pc, #232]	; (80023e0 <HAL_RCC_ClockConfig+0x110>)
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	429d      	cmp	r5, r3
 8002300:	d35a      	bcc.n	80023b8 <HAL_RCC_ClockConfig+0xe8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002302:	6822      	ldr	r2, [r4, #0]
 8002304:	0751      	lsls	r1, r2, #29
 8002306:	d462      	bmi.n	80023ce <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	0713      	lsls	r3, r2, #28
 800230a:	d507      	bpl.n	800231c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800230c:	4a35      	ldr	r2, [pc, #212]	; (80023e4 <HAL_RCC_ClockConfig+0x114>)
 800230e:	6921      	ldr	r1, [r4, #16]
 8002310:	6893      	ldr	r3, [r2, #8]
 8002312:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002316:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800231a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800231c:	f7ff ffae 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_RCC_ClockConfig+0x114>)
 8002322:	4a31      	ldr	r2, [pc, #196]	; (80023e8 <HAL_RCC_ClockConfig+0x118>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	40d8      	lsrs	r0, r3
 800232e:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <HAL_RCC_ClockConfig+0x11c>)
 8002330:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe fd84 	bl	8000e40 <HAL_InitTick>
  return HAL_OK;
 8002338:	2000      	movs	r0, #0
 800233a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	6813      	ldr	r3, [r2, #0]
 8002340:	f023 030f 	bic.w	r3, r3, #15
 8002344:	430b      	orrs	r3, r1
 8002346:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002348:	6813      	ldr	r3, [r2, #0]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4299      	cmp	r1, r3
 8002350:	d1c3      	bne.n	80022da <HAL_RCC_ClockConfig+0xa>
 8002352:	e7cb      	b.n	80022ec <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4923      	ldr	r1, [pc, #140]	; (80023e4 <HAL_RCC_ClockConfig+0x114>)
 8002356:	68a0      	ldr	r0, [r4, #8]
 8002358:	688b      	ldr	r3, [r1, #8]
 800235a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800235e:	4303      	orrs	r3, r0
 8002360:	608b      	str	r3, [r1, #8]
 8002362:	e7c6      	b.n	80022f2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002364:	6861      	ldr	r1, [r4, #4]
 8002366:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <HAL_RCC_ClockConfig+0x114>)
 8002368:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236c:	d11c      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002372:	d0b2      	beq.n	80022da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002374:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002376:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	4e1a      	ldr	r6, [pc, #104]	; (80023e4 <HAL_RCC_ClockConfig+0x114>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237c:	f022 0203 	bic.w	r2, r2, #3
 8002380:	430a      	orrs	r2, r1
 8002382:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002384:	f7ff f88e 	bl	80014a4 <HAL_GetTick>
 8002388:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	68b3      	ldr	r3, [r6, #8]
 800238c:	6862      	ldr	r2, [r4, #4]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002396:	d0ae      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002398:	f7ff f884 	bl	80014a4 <HAL_GetTick>
 800239c:	1bc0      	subs	r0, r0, r7
 800239e:	4540      	cmp	r0, r8
 80023a0:	d9f3      	bls.n	800238a <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 80023a2:	2003      	movs	r0, #3
}
 80023a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a8:	2902      	cmp	r1, #2
 80023aa:	d102      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ac:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80023b0:	e7df      	b.n	8002372 <HAL_RCC_ClockConfig+0xa2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	f012 0f02 	tst.w	r2, #2
 80023b6:	e7dc      	b.n	8002372 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b8:	6813      	ldr	r3, [r2, #0]
 80023ba:	f023 030f 	bic.w	r3, r3, #15
 80023be:	432b      	orrs	r3, r5
 80023c0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	6813      	ldr	r3, [r2, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	429d      	cmp	r5, r3
 80023ca:	d186      	bne.n	80022da <HAL_RCC_ClockConfig+0xa>
 80023cc:	e799      	b.n	8002302 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ce:	4905      	ldr	r1, [pc, #20]	; (80023e4 <HAL_RCC_ClockConfig+0x114>)
 80023d0:	68e0      	ldr	r0, [r4, #12]
 80023d2:	688b      	ldr	r3, [r1, #8]
 80023d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80023d8:	4303      	orrs	r3, r0
 80023da:	608b      	str	r3, [r1, #8]
 80023dc:	e794      	b.n	8002308 <HAL_RCC_ClockConfig+0x38>
 80023de:	bf00      	nop
 80023e0:	40023c00 	.word	0x40023c00
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08004f49 	.word	0x08004f49
 80023ec:	20000000 	.word	0x20000000

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80023f0:	4b01      	ldr	r3, [pc, #4]	; (80023f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000

080023fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x14>)
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	4a03      	ldr	r2, [pc, #12]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800240a:	6810      	ldr	r0, [r2, #0]
}
 800240c:	40d8      	lsrs	r0, r3
 800240e:	4770      	bx	lr
 8002410:	40023800 	.word	0x40023800
 8002414:	08004f59 	.word	0x08004f59
 8002418:	20000000 	.word	0x20000000

0800241c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x14>)
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	4a03      	ldr	r2, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800242a:	6810      	ldr	r0, [r2, #0]
} 
 800242c:	40d8      	lsrs	r0, r3
 800242e:	4770      	bx	lr
 8002430:	40023800 	.word	0x40023800
 8002434:	08004f59 	.word	0x08004f59
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800243c:	230f      	movs	r3, #15
 800243e:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_GetClockConfig+0x34>)
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	f002 0203 	and.w	r2, r2, #3
 8002448:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002450:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002458:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	08db      	lsrs	r3, r3, #3
 800245e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002462:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCC_GetClockConfig+0x38>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	600b      	str	r3, [r1, #0]
 800246e:	4770      	bx	lr
 8002470:	40023800 	.word	0x40023800
 8002474:	40023c00 	.word	0x40023c00

08002478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800247c:	6802      	ldr	r2, [r0, #0]
{
 800247e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002480:	f012 0601 	ands.w	r6, r2, #1
 8002484:	d00b      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002486:	4bb8      	ldr	r3, [pc, #736]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800248e:	6099      	str	r1, [r3, #8]
 8002490:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002496:	fab6 f686 	clz	r6, r6
 800249a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800249c:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800249e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80024a2:	d012      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a4:	49b0      	ldr	r1, [pc, #704]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024a6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80024a8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024ac:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 80024b4:	bf08      	it	eq
 80024b6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024b8:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024bc:	bf16      	itet	ne
 80024be:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80024c2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024c4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024ca:	02d7      	lsls	r7, r2, #11
 80024cc:	d510      	bpl.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ce:	48a6      	ldr	r0, [pc, #664]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80024d2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024d6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024de:	ea43 0301 	orr.w	r3, r3, r1
 80024e2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024e6:	f000 8189 	beq.w	80027fc <HAL_RCCEx_PeriphCLKConfig+0x384>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 80024ea:	2900      	cmp	r1, #0
 80024ec:	bf08      	it	eq
 80024ee:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 80024f0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80024f4:	bf18      	it	ne
 80024f6:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024f8:	0690      	lsls	r0, r2, #26
 80024fa:	d531      	bpl.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	4b9a      	ldr	r3, [pc, #616]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024fe:	4f9b      	ldr	r7, [pc, #620]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002502:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251a:	f7fe ffc3 	bl	80014a4 <HAL_GetTick>
 800251e:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	05d9      	lsls	r1, r3, #23
 8002524:	f140 816c 	bpl.w	8002800 <HAL_RCCEx_PeriphCLKConfig+0x388>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002528:	4f8f      	ldr	r7, [pc, #572]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800252a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002530:	f040 8171 	bne.w	8002816 <HAL_RCCEx_PeriphCLKConfig+0x39e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002534:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002536:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800253a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800253e:	4a8a      	ldr	r2, [pc, #552]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002540:	f040 818f 	bne.w	8002862 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002544:	6891      	ldr	r1, [r2, #8]
 8002546:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800254a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800254e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002552:	4301      	orrs	r1, r0
 8002554:	6091      	str	r1, [r2, #8]
 8002556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800255c:	430b      	orrs	r3, r1
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	06df      	lsls	r7, r3, #27
 8002564:	d50c      	bpl.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002566:	4a80      	ldr	r2, [pc, #512]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002568:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800256c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002570:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002574:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002578:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800257a:	4301      	orrs	r1, r0
 800257c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002580:	0458      	lsls	r0, r3, #17
 8002582:	d508      	bpl.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002584:	4978      	ldr	r1, [pc, #480]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002586:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002588:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800258c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002590:	4302      	orrs	r2, r0
 8002592:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002596:	0419      	lsls	r1, r3, #16
 8002598:	d508      	bpl.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800259a:	4973      	ldr	r1, [pc, #460]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800259c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800259e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025a2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80025a6:	4302      	orrs	r2, r0
 80025a8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ac:	03da      	lsls	r2, r3, #15
 80025ae:	d508      	bpl.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025b0:	496d      	ldr	r1, [pc, #436]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025b2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80025b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80025bc:	4302      	orrs	r2, r0
 80025be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025c2:	039f      	lsls	r7, r3, #14
 80025c4:	d508      	bpl.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025c6:	4968      	ldr	r1, [pc, #416]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025c8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80025ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025ce:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80025d2:	4302      	orrs	r2, r0
 80025d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d8:	0658      	lsls	r0, r3, #25
 80025da:	d508      	bpl.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025dc:	4962      	ldr	r1, [pc, #392]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80025e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025e4:	f022 0203 	bic.w	r2, r2, #3
 80025e8:	4302      	orrs	r2, r0
 80025ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ee:	0619      	lsls	r1, r3, #24
 80025f0:	d508      	bpl.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f2:	495d      	ldr	r1, [pc, #372]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80025f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025fa:	f022 020c 	bic.w	r2, r2, #12
 80025fe:	4302      	orrs	r2, r0
 8002600:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002604:	05da      	lsls	r2, r3, #23
 8002606:	d508      	bpl.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002608:	4957      	ldr	r1, [pc, #348]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800260a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800260c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002610:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002614:	4302      	orrs	r2, r0
 8002616:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800261a:	059f      	lsls	r7, r3, #22
 800261c:	d508      	bpl.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800261e:	4952      	ldr	r1, [pc, #328]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002620:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002622:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002626:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800262a:	4302      	orrs	r2, r0
 800262c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002630:	0558      	lsls	r0, r3, #21
 8002632:	d508      	bpl.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002634:	494c      	ldr	r1, [pc, #304]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002636:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002638:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800263c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002640:	4302      	orrs	r2, r0
 8002642:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002646:	0519      	lsls	r1, r3, #20
 8002648:	d508      	bpl.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800264a:	4947      	ldr	r1, [pc, #284]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800264c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800264e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002652:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002656:	4302      	orrs	r2, r0
 8002658:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800265c:	04da      	lsls	r2, r3, #19
 800265e:	d508      	bpl.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002660:	4941      	ldr	r1, [pc, #260]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002662:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002664:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002668:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800266c:	4302      	orrs	r2, r0
 800266e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002672:	049f      	lsls	r7, r3, #18
 8002674:	d508      	bpl.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002676:	493c      	ldr	r1, [pc, #240]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002678:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800267a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800267e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002682:	4302      	orrs	r2, r0
 8002684:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002688:	0258      	lsls	r0, r3, #9
 800268a:	d508      	bpl.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800268c:	4936      	ldr	r1, [pc, #216]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800268e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002690:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002694:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002698:	4302      	orrs	r2, r0
 800269a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800269e:	0299      	lsls	r1, r3, #10
 80026a0:	d50c      	bpl.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026a2:	4831      	ldr	r0, [pc, #196]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026a4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80026a6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80026aa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026ae:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 80026b2:	bf08      	it	eq
 80026b4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026b6:	430a      	orrs	r2, r1
 80026b8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026bc:	035a      	lsls	r2, r3, #13
 80026be:	d508      	bpl.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026c0:	4929      	ldr	r1, [pc, #164]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026c2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80026c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80026c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026cc:	4302      	orrs	r2, r0
 80026ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026d2:	021f      	lsls	r7, r3, #8
 80026d4:	d509      	bpl.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026d6:	4924      	ldr	r1, [pc, #144]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026d8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80026dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80026e0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80026e4:	4302      	orrs	r2, r0
 80026e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80026ea:	0158      	lsls	r0, r3, #5
 80026ec:	d509      	bpl.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80026ee:	491e      	ldr	r1, [pc, #120]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026f0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80026f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80026f8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80026fc:	4302      	orrs	r2, r0
 80026fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002702:	0119      	lsls	r1, r3, #4
 8002704:	d509      	bpl.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002706:	4918      	ldr	r1, [pc, #96]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002708:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800270c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002710:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002714:	4302      	orrs	r2, r0
 8002716:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800271a:	00da      	lsls	r2, r3, #3
 800271c:	d509      	bpl.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800271e:	4912      	ldr	r1, [pc, #72]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002720:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002724:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002728:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800272c:	4302      	orrs	r2, r0
 800272e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002732:	2e01      	cmp	r6, #1
 8002734:	f000 8099 	beq.w	800286a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800273c:	f000 8095 	beq.w	800286a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002740:	2d01      	cmp	r5, #1
 8002742:	d159      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8002744:	4d08      	ldr	r5, [pc, #32]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002746:	682b      	ldr	r3, [r5, #0]
 8002748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274c:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274e:	f7fe fea9 	bl	80014a4 <HAL_GetTick>
 8002752:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	009f      	lsls	r7, r3, #2
 8002758:	f100 810b 	bmi.w	8002972 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800275c:	6821      	ldr	r1, [r4, #0]
 800275e:	030d      	lsls	r5, r1, #12
 8002760:	d506      	bpl.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002762:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002764:	b143      	cbz	r3, 8002778 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002766:	e003      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002768:	40023800 	.word	0x40023800
 800276c:	40007000 	.word	0x40007000
 8002770:	02c8      	lsls	r0, r1, #11
 8002772:	d51d      	bpl.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002774:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002776:	b9db      	cbnz	r3, 80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002778:	4a85      	ldr	r2, [pc, #532]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 800277a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800277e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002782:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002786:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800278a:	4303      	orrs	r3, r0
 800278c:	6960      	ldr	r0, [r4, #20]
 800278e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002792:	69a0      	ldr	r0, [r4, #24]
 8002794:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800279c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80027a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80027a2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80027a6:	3801      	subs	r0, #1
 80027a8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80027ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027b0:	028a      	lsls	r2, r1, #10
 80027b2:	d515      	bpl.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80027b4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80027b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ba:	d111      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027bc:	4a74      	ldr	r2, [pc, #464]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 80027be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027c2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027c6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80027ca:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80027ce:	430b      	orrs	r3, r1
 80027d0:	6961      	ldr	r1, [r4, #20]
 80027d2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80027d6:	6a21      	ldr	r1, [r4, #32]
 80027d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80027dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027e0:	4c6b      	ldr	r4, [pc, #428]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ea:	f7fe fe5b 	bl	80014a4 <HAL_GetTick>
 80027ee:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	f140 80c4 	bpl.w	8002980 <HAL_RCCEx_PeriphCLKConfig+0x508>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80027f8:	2000      	movs	r0, #0
 80027fa:	e009      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x398>
      plli2sused = 1; 
 80027fc:	2601      	movs	r6, #1
 80027fe:	e677      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002800:	f7fe fe50 	bl	80014a4 <HAL_GetTick>
 8002804:	eba0 0008 	sub.w	r0, r0, r8
 8002808:	2864      	cmp	r0, #100	; 0x64
 800280a:	f67f ae89 	bls.w	8002520 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800280e:	2003      	movs	r0, #3
}
 8002810:	b003      	add	sp, #12
 8002812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002816:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002818:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800281c:	4293      	cmp	r3, r2
 800281e:	f43f ae89 	beq.w	8002534 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002824:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800282a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800282e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002830:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002832:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002836:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002838:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800283a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800283c:	07da      	lsls	r2, r3, #31
 800283e:	f57f ae79 	bpl.w	8002534 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002842:	f7fe fe2f 	bl	80014a4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800284a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800284e:	079b      	lsls	r3, r3, #30
 8002850:	f53f ae70 	bmi.w	8002534 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe fe26 	bl	80014a4 <HAL_GetTick>
 8002858:	eba0 0008 	sub.w	r0, r0, r8
 800285c:	4548      	cmp	r0, r9
 800285e:	d9f5      	bls.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8002860:	e7d5      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x396>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002862:	6891      	ldr	r1, [r2, #8]
 8002864:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002868:	e674      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 800286a:	4e49      	ldr	r6, [pc, #292]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 800286c:	6833      	ldr	r3, [r6, #0]
 800286e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002872:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002874:	f7fe fe16 	bl	80014a4 <HAL_GetTick>
 8002878:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800287a:	6833      	ldr	r3, [r6, #0]
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	d472      	bmi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	07d7      	lsls	r7, r2, #31
 8002884:	d512      	bpl.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002888:	b983      	cbnz	r3, 80028ac <HAL_RCCEx_PeriphCLKConfig+0x434>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800288a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800288e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002892:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002896:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800289a:	430b      	orrs	r3, r1
 800289c:	6861      	ldr	r1, [r4, #4]
 800289e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80028a2:	68a1      	ldr	r1, [r4, #8]
 80028a4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80028a8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028ac:	0316      	lsls	r6, r2, #12
 80028ae:	d503      	bpl.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80028b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028b6:	d005      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80028b8:	02d0      	lsls	r0, r2, #11
 80028ba:	d51e      	bpl.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x482>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80028bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c2:	d11a      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028c4:	4932      	ldr	r1, [pc, #200]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 80028c6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028ca:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80028ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80028d6:	4303      	orrs	r3, r0
 80028d8:	6860      	ldr	r0, [r4, #4]
 80028da:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80028de:	68e0      	ldr	r0, [r4, #12]
 80028e0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80028e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80028e8:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80028ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028ee:	f020 001f 	bic.w	r0, r0, #31
 80028f2:	3b01      	subs	r3, #1
 80028f4:	4303      	orrs	r3, r0
 80028f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028fa:	01d1      	lsls	r1, r2, #7
 80028fc:	d511      	bpl.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028fe:	4924      	ldr	r1, [pc, #144]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002900:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002904:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002908:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800290c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002910:	4303      	orrs	r3, r0
 8002912:	6860      	ldr	r0, [r4, #4]
 8002914:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002918:	6920      	ldr	r0, [r4, #16]
 800291a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800291e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002922:	0192      	lsls	r2, r2, #6
 8002924:	d50d      	bpl.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002926:	6923      	ldr	r3, [r4, #16]
 8002928:	6862      	ldr	r2, [r4, #4]
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002930:	68e2      	ldr	r2, [r4, #12]
 8002932:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002936:	68a2      	ldr	r2, [r4, #8]
 8002938:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 800293e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002942:	4e13      	ldr	r6, [pc, #76]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002944:	6833      	ldr	r3, [r6, #0]
 8002946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800294a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800294c:	f7fe fdaa 	bl	80014a4 <HAL_GetTick>
 8002950:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002952:	6833      	ldr	r3, [r6, #0]
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	f53f aef3 	bmi.w	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800295a:	f7fe fda3 	bl	80014a4 <HAL_GetTick>
 800295e:	1bc0      	subs	r0, r0, r7
 8002960:	2864      	cmp	r0, #100	; 0x64
 8002962:	d9f6      	bls.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002964:	e753      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002966:	f7fe fd9d 	bl	80014a4 <HAL_GetTick>
 800296a:	1bc0      	subs	r0, r0, r7
 800296c:	2864      	cmp	r0, #100	; 0x64
 800296e:	d984      	bls.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x402>
 8002970:	e74d      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002972:	f7fe fd97 	bl	80014a4 <HAL_GetTick>
 8002976:	1b80      	subs	r0, r0, r6
 8002978:	2864      	cmp	r0, #100	; 0x64
 800297a:	f67f aeeb 	bls.w	8002754 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800297e:	e746      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002980:	f7fe fd90 	bl	80014a4 <HAL_GetTick>
 8002984:	1b40      	subs	r0, r0, r5
 8002986:	2864      	cmp	r0, #100	; 0x64
 8002988:	f67f af32 	bls.w	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800298c:	e73f      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x396>
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002994:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002996:	4604      	mov	r4, r0
 8002998:	2800      	cmp	r0, #0
 800299a:	d04e      	beq.n	8002a3a <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029a0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80029a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029a8:	b91b      	cbnz	r3, 80029b2 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029aa:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029ae:	f7fe f9e5 	bl	8000d7c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029b2:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b4:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b6:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80029b8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80029bc:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029be:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80029c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c6:	600b      	str	r3, [r1, #0]
 80029c8:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029cc:	d932      	bls.n	8002a34 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029ce:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029d0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d4:	bf18      	it	ne
 80029d6:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80029d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029da:	b92b      	cbnz	r3, 80029e8 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029dc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80029e0:	bf8c      	ite	hi
 80029e2:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80029e4:	2301      	movls	r3, #1
 80029e6:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80029e8:	68a6      	ldr	r6, [r4, #8]
 80029ea:	6863      	ldr	r3, [r4, #4]
 80029ec:	69a5      	ldr	r5, [r4, #24]
 80029ee:	4333      	orrs	r3, r6
 80029f0:	6926      	ldr	r6, [r4, #16]
 80029f2:	4333      	orrs	r3, r6
 80029f4:	6966      	ldr	r6, [r4, #20]
 80029f6:	4333      	orrs	r3, r6
 80029f8:	69e6      	ldr	r6, [r4, #28]
 80029fa:	4333      	orrs	r3, r6
 80029fc:	6a26      	ldr	r6, [r4, #32]
 80029fe:	4333      	orrs	r3, r6
 8002a00:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a02:	4333      	orrs	r3, r6
 8002a04:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a08:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002a0a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a0c:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002a10:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a14:	431a      	orrs	r2, r3
 8002a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	432a      	orrs	r2, r5
 8002a1c:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a1e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a20:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a22:	69cb      	ldr	r3, [r1, #28]
 8002a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a28:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002a2a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a2c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a2e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a38:	e7cc      	b.n	80029d4 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002a3a:	2001      	movs	r0, #1
}
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}

08002a3e <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a3e:	6a03      	ldr	r3, [r0, #32]
{
 8002a40:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a42:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a44:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a48:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8002a4c:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a4e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002a50:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a52:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002a56:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a5a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a5c:	6203      	str	r3, [r0, #32]
 8002a5e:	bd10      	pop	{r4, pc}

08002a60 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a60:	6a03      	ldr	r3, [r0, #32]
 8002a62:	f023 0310 	bic.w	r3, r3, #16
{
 8002a66:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a68:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002a6c:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a6e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002a76:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8002a7a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a7e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a80:	6203      	str	r3, [r0, #32]
 8002a82:	bd10      	pop	{r4, pc}

08002a84 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a84:	6803      	ldr	r3, [r0, #0]
}
 8002a86:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIM_PWM_MspInit>:
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIM_OC_DelayElapsedCallback>:
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIM_IC_CaptureCallback>:
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIM_TriggerCallback>:
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa4:	6803      	ldr	r3, [r0, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	0791      	lsls	r1, r2, #30
{
 8002aaa:	b510      	push	{r4, lr}
 8002aac:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aae:	d50f      	bpl.n	8002ad0 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	0792      	lsls	r2, r2, #30
 8002ab4:	d50c      	bpl.n	8002ad0 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab6:	f06f 0202 	mvn.w	r2, #2
 8002aba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002abc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002abe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002ac2:	0799      	lsls	r1, r3, #30
 8002ac4:	f000 8085 	beq.w	8002bd2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002ac8:	f7ff ffe9 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002acc:	2300      	movs	r3, #0
 8002ace:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	0752      	lsls	r2, r2, #29
 8002ad6:	d510      	bpl.n	8002afa <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	0750      	lsls	r0, r2, #29
 8002adc:	d50d      	bpl.n	8002afa <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ade:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002ae8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aea:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002aec:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002af0:	d075      	beq.n	8002bde <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	f7ff ffd4 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af6:	2300      	movs	r3, #0
 8002af8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	0711      	lsls	r1, r2, #28
 8002b00:	d50f      	bpl.n	8002b22 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	0712      	lsls	r2, r2, #28
 8002b06:	d50c      	bpl.n	8002b22 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b08:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b10:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002b12:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b14:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002b16:	079b      	lsls	r3, r3, #30
 8002b18:	d067      	beq.n	8002bea <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	f7ff ffc0 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	06d0      	lsls	r0, r2, #27
 8002b28:	d510      	bpl.n	8002b4c <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	06d1      	lsls	r1, r2, #27
 8002b2e:	d50d      	bpl.n	8002b4c <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b30:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8002b34:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b38:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002b3a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002b3e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002b42:	d058      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b44:	f7ff ffab 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	07d2      	lsls	r2, r2, #31
 8002b52:	d508      	bpl.n	8002b66 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	07d0      	lsls	r0, r2, #31
 8002b58:	d505      	bpl.n	8002b66 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b60:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b62:	f7fe f8d3 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	0611      	lsls	r1, r2, #24
 8002b6c:	d508      	bpl.n	8002b80 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	0612      	lsls	r2, r2, #24
 8002b72:	d505      	bpl.n	8002b80 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002b78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b7a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b7c:	f000 fb13 	bl	80031a6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	05d0      	lsls	r0, r2, #23
 8002b86:	d508      	bpl.n	8002b9a <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	0611      	lsls	r1, r2, #24
 8002b8c:	d505      	bpl.n	8002b9a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002b92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b94:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b96:	f000 fb06 	bl	80031a6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	0652      	lsls	r2, r2, #25
 8002ba0:	d508      	bpl.n	8002bb4 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	0650      	lsls	r0, r2, #25
 8002ba6:	d505      	bpl.n	8002bb4 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002bac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002bb0:	f7ff ff77 	bl	8002aa2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	0691      	lsls	r1, r2, #26
 8002bba:	d522      	bpl.n	8002c02 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	0692      	lsls	r2, r2, #26
 8002bc0:	d51f      	bpl.n	8002c02 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bc2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002bc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bc8:	611a      	str	r2, [r3, #16]
}
 8002bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002bce:	f000 bae9 	b.w	80031a4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	f7ff ff63 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f7ff ff62 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bdc:	e776      	b.n	8002acc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	f7ff ff5d 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7ff ff5c 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002be8:	e785      	b.n	8002af6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	f7ff ff57 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f7ff ff56 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bf4:	e793      	b.n	8002b1e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	f7ff ff51 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7ff ff50 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c00:	e7a2      	b.n	8002b48 <HAL_TIM_IRQHandler+0xa4>
 8002c02:	bd10      	pop	{r4, pc}

08002c04 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002c04:	4a30      	ldr	r2, [pc, #192]	; (8002cc8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002c06:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002c08:	4290      	cmp	r0, r2
 8002c0a:	d012      	beq.n	8002c32 <TIM_Base_SetConfig+0x2e>
 8002c0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c10:	d00f      	beq.n	8002c32 <TIM_Base_SetConfig+0x2e>
 8002c12:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002c16:	4290      	cmp	r0, r2
 8002c18:	d00b      	beq.n	8002c32 <TIM_Base_SetConfig+0x2e>
 8002c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c1e:	4290      	cmp	r0, r2
 8002c20:	d007      	beq.n	8002c32 <TIM_Base_SetConfig+0x2e>
 8002c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c26:	4290      	cmp	r0, r2
 8002c28:	d003      	beq.n	8002c32 <TIM_Base_SetConfig+0x2e>
 8002c2a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002c2e:	4290      	cmp	r0, r2
 8002c30:	d11d      	bne.n	8002c6e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002c32:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c38:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002c3a:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <TIM_Base_SetConfig+0xc4>)
 8002c3c:	4290      	cmp	r0, r2
 8002c3e:	d104      	bne.n	8002c4a <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c44:	68ca      	ldr	r2, [r1, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	e028      	b.n	8002c9c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002c4a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c4e:	d0f7      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
 8002c50:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <TIM_Base_SetConfig+0xc8>)
 8002c52:	4290      	cmp	r0, r2
 8002c54:	d0f4      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
 8002c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c5a:	4290      	cmp	r0, r2
 8002c5c:	d0f0      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
 8002c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c62:	4290      	cmp	r0, r2
 8002c64:	d0ec      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
 8002c66:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002c6a:	4290      	cmp	r0, r2
 8002c6c:	d0e8      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
 8002c6e:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <TIM_Base_SetConfig+0xcc>)
 8002c70:	4290      	cmp	r0, r2
 8002c72:	d0e5      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
 8002c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c78:	4290      	cmp	r0, r2
 8002c7a:	d0e1      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
 8002c7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c80:	4290      	cmp	r0, r2
 8002c82:	d0dd      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
 8002c84:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002c88:	4290      	cmp	r0, r2
 8002c8a:	d0d9      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
 8002c8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c90:	4290      	cmp	r0, r2
 8002c92:	d0d5      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
 8002c94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c98:	4290      	cmp	r0, r2
 8002c9a:	d0d1      	beq.n	8002c40 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c9c:	694a      	ldr	r2, [r1, #20]
 8002c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002ca4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca6:	688b      	ldr	r3, [r1, #8]
 8002ca8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002caa:	680b      	ldr	r3, [r1, #0]
 8002cac:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <TIM_Base_SetConfig+0xc4>)
 8002cb0:	4298      	cmp	r0, r3
 8002cb2:	d006      	beq.n	8002cc2 <TIM_Base_SetConfig+0xbe>
 8002cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb8:	4298      	cmp	r0, r3
 8002cba:	d002      	beq.n	8002cc2 <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	6143      	str	r3, [r0, #20]
}
 8002cc0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc2:	690b      	ldr	r3, [r1, #16]
 8002cc4:	6303      	str	r3, [r0, #48]	; 0x30
 8002cc6:	e7f9      	b.n	8002cbc <TIM_Base_SetConfig+0xb8>
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40000400 	.word	0x40000400
 8002cd0:	40014000 	.word	0x40014000

08002cd4 <HAL_TIM_Base_Init>:
{ 
 8002cd4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	b1a0      	cbz	r0, 8002d04 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002cda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ce2:	b91b      	cbnz	r3, 8002cec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002ce4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ce8:	f7fe f900 	bl	8000eec <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002cec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002cee:	6820      	ldr	r0, [r4, #0]
 8002cf0:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002cf6:	f7ff ff85 	bl	8002c04 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002cfa:	2301      	movs	r3, #1
  return HAL_OK;
 8002cfc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002cfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d04:	2001      	movs	r0, #1
}
 8002d06:	bd10      	pop	{r4, pc}

08002d08 <HAL_TIM_PWM_Init>:
{
 8002d08:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	b1a0      	cbz	r0, 8002d38 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d16:	b91b      	cbnz	r3, 8002d20 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;  
 8002d18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002d1c:	f7ff febd 	bl	8002a9a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002d20:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 8002d26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002d2a:	f7ff ff6b 	bl	8002c04 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002d2e:	2301      	movs	r3, #1
  return HAL_OK;
 8002d30:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002d32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d38:	2001      	movs	r0, #1
}  
 8002d3a:	bd10      	pop	{r4, pc}

08002d3c <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3c:	6a03      	ldr	r3, [r0, #32]
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
{
 8002d42:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d44:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002d46:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002d48:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002d4a:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8002d4c:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8002d50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d52:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002d56:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002d5a:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8002d5c:	688d      	ldr	r5, [r1, #8]
 8002d5e:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002d60:	4d0c      	ldr	r5, [pc, #48]	; (8002d94 <TIM_OC1_SetConfig+0x58>)
 8002d62:	42a8      	cmp	r0, r5
 8002d64:	d009      	beq.n	8002d7a <TIM_OC1_SetConfig+0x3e>
 8002d66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d6a:	42a8      	cmp	r0, r5
 8002d6c:	d005      	beq.n	8002d7a <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8002d6e:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8002d70:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002d72:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002d74:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8002d76:	6203      	str	r3, [r0, #32]
} 
 8002d78:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8002d7a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d7c:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d80:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8002d86:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d88:	694d      	ldr	r5, [r1, #20]
 8002d8a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d90:	432a      	orrs	r2, r5
 8002d92:	e7ec      	b.n	8002d6e <TIM_OC1_SetConfig+0x32>
 8002d94:	40010000 	.word	0x40010000

08002d98 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d98:	6a03      	ldr	r3, [r0, #32]
 8002d9a:	f023 0310 	bic.w	r3, r3, #16
{
 8002d9e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002da2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002da4:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002da6:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002da8:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002dac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dae:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8002db2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002db6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002dba:	688d      	ldr	r5, [r1, #8]
 8002dbc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002dc0:	4d0d      	ldr	r5, [pc, #52]	; (8002df8 <TIM_OC2_SetConfig+0x60>)
 8002dc2:	42a8      	cmp	r0, r5
 8002dc4:	d009      	beq.n	8002dda <TIM_OC2_SetConfig+0x42>
 8002dc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002dca:	42a8      	cmp	r0, r5
 8002dcc:	d005      	beq.n	8002dda <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8002dce:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002dd0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002dd2:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002dd4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002dd6:	6203      	str	r3, [r0, #32]
}
 8002dd8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002dda:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002de0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002de2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002de6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002dea:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002dec:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002df2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8002df6:	e7ea      	b.n	8002dce <TIM_OC2_SetConfig+0x36>
 8002df8:	40010000 	.word	0x40010000

08002dfc <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dfc:	6a03      	ldr	r3, [r0, #32]
 8002dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8002e02:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e04:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002e06:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002e08:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002e0a:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8002e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8002e10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002e12:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002e16:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002e1a:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002e1c:	688d      	ldr	r5, [r1, #8]
 8002e1e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002e22:	4d0e      	ldr	r5, [pc, #56]	; (8002e5c <TIM_OC3_SetConfig+0x60>)
 8002e24:	42a8      	cmp	r0, r5
 8002e26:	d009      	beq.n	8002e3c <TIM_OC3_SetConfig+0x40>
 8002e28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e2c:	42a8      	cmp	r0, r5
 8002e2e:	d005      	beq.n	8002e3c <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8002e30:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8002e32:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002e34:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002e36:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002e38:	6203      	str	r3, [r0, #32]
}
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002e3c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002e42:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e44:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002e48:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002e4c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002e4e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002e54:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002e58:	e7ea      	b.n	8002e30 <TIM_OC3_SetConfig+0x34>
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000

08002e60 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e60:	6a03      	ldr	r3, [r0, #32]
 8002e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8002e66:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e68:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002e6a:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002e6c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002e6e:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002e70:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002e74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002e7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002e82:	688d      	ldr	r5, [r1, #8]
 8002e84:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002e88:	4d09      	ldr	r5, [pc, #36]	; (8002eb0 <TIM_OC4_SetConfig+0x50>)
 8002e8a:	42a8      	cmp	r0, r5
 8002e8c:	d009      	beq.n	8002ea2 <TIM_OC4_SetConfig+0x42>
 8002e8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e92:	42a8      	cmp	r0, r5
 8002e94:	d005      	beq.n	8002ea2 <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8002e96:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002e98:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002e9a:	684b      	ldr	r3, [r1, #4]
 8002e9c:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002e9e:	6204      	str	r4, [r0, #32]
}
 8002ea0:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ea2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002ea6:	694d      	ldr	r5, [r1, #20]
 8002ea8:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002eac:	e7f3      	b.n	8002e96 <TIM_OC4_SetConfig+0x36>
 8002eae:	bf00      	nop
 8002eb0:	40010000 	.word	0x40010000

08002eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb4:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002eb6:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8002eb8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002eba:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ebe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ec2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec4:	6083      	str	r3, [r0, #8]
 8002ec6:	bd10      	pop	{r4, pc}

08002ec8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002ec8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
{
 8002ece:	b510      	push	{r4, lr}
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002ed6:	d018      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002edc:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8002ede:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002ee0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002ee4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee6:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <HAL_TIM_ConfigClockSource+0x118>)
 8002ee8:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002eea:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002eec:	680b      	ldr	r3, [r1, #0]
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d059      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0xde>
 8002ef2:	d815      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x58>
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d067      	beq.n	8002fc8 <HAL_TIM_ConfigClockSource+0x100>
 8002ef8:	d808      	bhi.n	8002f0c <HAL_TIM_ConfigClockSource+0x44>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d05e      	beq.n	8002fbc <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8002efe:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002f00:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f06:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002f0a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d061      	beq.n	8002fd4 <HAL_TIM_ConfigClockSource+0x10c>
 8002f10:	2b30      	cmp	r3, #48	; 0x30
 8002f12:	d1f4      	bne.n	8002efe <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8002f14:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002f1a:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002f1e:	e026      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8002f20:	2b70      	cmp	r3, #112	; 0x70
 8002f22:	d026      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0xaa>
 8002f24:	d80e      	bhi.n	8002f44 <HAL_TIM_ConfigClockSource+0x7c>
 8002f26:	2b50      	cmp	r3, #80	; 0x50
 8002f28:	d032      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0xc8>
 8002f2a:	2b60      	cmp	r3, #96	; 0x60
 8002f2c:	d1e7      	bne.n	8002efe <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002f2e:	68ca      	ldr	r2, [r1, #12]
 8002f30:	6849      	ldr	r1, [r1, #4]
 8002f32:	f7ff fd95 	bl	8002a60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f36:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002f38:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002f3e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002f42:	e023      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8002f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f48:	d00c      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x9c>
 8002f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4e:	d1d6      	bne.n	8002efe <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8002f50:	68cb      	ldr	r3, [r1, #12]
 8002f52:	684a      	ldr	r2, [r1, #4]
 8002f54:	6889      	ldr	r1, [r1, #8]
 8002f56:	f7ff ffad 	bl	8002eb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f5a:	6822      	ldr	r2, [r4, #0]
 8002f5c:	6893      	ldr	r3, [r2, #8]
 8002f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f62:	e013      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002f64:	6883      	ldr	r3, [r0, #8]
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6a:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8002f6e:	6083      	str	r3, [r0, #8]
 8002f70:	e7c5      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8002f72:	68cb      	ldr	r3, [r1, #12]
 8002f74:	684a      	ldr	r2, [r1, #4]
 8002f76:	6889      	ldr	r1, [r1, #8]
 8002f78:	f7ff ff9c 	bl	8002eb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f7c:	6822      	ldr	r2, [r4, #0]
 8002f7e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f8c:	6093      	str	r3, [r2, #8]
    break;
 8002f8e:	e7b6      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002f90:	68ca      	ldr	r2, [r1, #12]
 8002f92:	6849      	ldr	r1, [r1, #4]
 8002f94:	f7ff fd53 	bl	8002a3e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f98:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002f9a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002fa0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002fa4:	e7f2      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002fa6:	68ca      	ldr	r2, [r1, #12]
 8002fa8:	6849      	ldr	r1, [r1, #4]
 8002faa:	f7ff fd48 	bl	8002a3e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fae:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002fb0:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002fb6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002fba:	e7e7      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8002fbc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002fc2:	f043 0307 	orr.w	r3, r3, #7
 8002fc6:	e7d2      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8002fc8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002fce:	f043 0317 	orr.w	r3, r3, #23
 8002fd2:	e7cc      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8002fd4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002fda:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8002fde:	e7c6      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0xa6>
 8002fe0:	fffe0088 	.word	0xfffe0088

08002fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fe4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002fe6:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fe8:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002fea:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 8002fec:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002fee:	ea23 0304 	bic.w	r3, r3, r4
 8002ff2:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002ff4:	6a03      	ldr	r3, [r0, #32]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	6202      	str	r2, [r0, #32]
 8002ffa:	bd10      	pop	{r4, pc}

08002ffc <HAL_TIM_PWM_Start>:
{
 8002ffc:	b510      	push	{r4, lr}
 8002ffe:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003000:	2201      	movs	r2, #1
 8003002:	6800      	ldr	r0, [r0, #0]
 8003004:	f7ff ffee 	bl	8002fe4 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	4a08      	ldr	r2, [pc, #32]	; (800302c <HAL_TIM_PWM_Start+0x30>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <HAL_TIM_PWM_Start+0x1c>
 8003010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003014:	4293      	cmp	r3, r2
 8003016:	d103      	bne.n	8003020 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8003018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800301a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800301e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003020:	681a      	ldr	r2, [r3, #0]
} 
 8003022:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
} 
 800302a:	bd10      	pop	{r4, pc}
 800302c:	40010000 	.word	0x40010000

08003030 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003030:	6a03      	ldr	r3, [r0, #32]
 8003032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8003036:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003038:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800303c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800303e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003040:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8003044:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800304e:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003050:	688d      	ldr	r5, [r1, #8]
 8003052:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003056:	4d09      	ldr	r5, [pc, #36]	; (800307c <TIM_OC5_SetConfig+0x4c>)
 8003058:	42a8      	cmp	r0, r5
 800305a:	d003      	beq.n	8003064 <TIM_OC5_SetConfig+0x34>
 800305c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003060:	42a8      	cmp	r0, r5
 8003062:	d104      	bne.n	800306e <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003064:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8003068:	694d      	ldr	r5, [r1, #20]
 800306a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003070:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003072:	684b      	ldr	r3, [r1, #4]
 8003074:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003076:	6202      	str	r2, [r0, #32]
 8003078:	bd30      	pop	{r4, r5, pc}
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000

08003080 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003080:	6a03      	ldr	r3, [r0, #32]
 8003082:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8003086:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003088:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800308c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800308e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003090:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003094:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 800309e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80030a2:	688d      	ldr	r5, [r1, #8]
 80030a4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80030a8:	4d08      	ldr	r5, [pc, #32]	; (80030cc <TIM_OC6_SetConfig+0x4c>)
 80030aa:	42a8      	cmp	r0, r5
 80030ac:	d003      	beq.n	80030b6 <TIM_OC6_SetConfig+0x36>
 80030ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030b2:	42a8      	cmp	r0, r5
 80030b4:	d104      	bne.n	80030c0 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030b6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80030ba:	694d      	ldr	r5, [r1, #20]
 80030bc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030c2:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030c4:	684b      	ldr	r3, [r1, #4]
 80030c6:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80030c8:	6202      	str	r2, [r0, #32]
 80030ca:	bd30      	pop	{r4, r5, pc}
 80030cc:	40010000 	.word	0x40010000

080030d0 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80030d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
{
 80030d6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80030d8:	d01c      	beq.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 80030da:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030dc:	4d0e      	ldr	r5, [pc, #56]	; (8003118 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 80030de:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030e0:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80030e2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030e4:	d003      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80030e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030ea:	42aa      	cmp	r2, r5
 80030ec:	d103      	bne.n	80030f6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030f2:	684d      	ldr	r5, [r1, #4]
 80030f4:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030fc:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80030fe:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003102:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003104:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 8003106:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 8003108:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800310a:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 800310c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003110:	4618      	mov	r0, r3
 8003112:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8003114:	2002      	movs	r0, #2
} 
 8003116:	bd30      	pop	{r4, r5, pc}
 8003118:	40010000 	.word	0x40010000

0800311c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800311c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	f04f 0302 	mov.w	r3, #2
{
 8003126:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003128:	d038      	beq.n	800319c <HAL_TIMEx_ConfigBreakDeadTime+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800312a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800312e:	68cb      	ldr	r3, [r1, #12]
 8003130:	688a      	ldr	r2, [r1, #8]
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003136:	4c1a      	ldr	r4, [pc, #104]	; (80031a0 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003138:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800313a:	684a      	ldr	r2, [r1, #4]
 800313c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003140:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003142:	680a      	ldr	r2, [r1, #0]
 8003144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003148:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800314a:	690a      	ldr	r2, [r1, #16]
 800314c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003150:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003152:	694a      	ldr	r2, [r1, #20]
 8003154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003158:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800315a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800315c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003160:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8003162:	698a      	ldr	r2, [r1, #24]
 8003164:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800316c:	6802      	ldr	r2, [r0, #0]
 800316e:	42a2      	cmp	r2, r4
 8003170:	d003      	beq.n	800317a <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8003172:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003176:	42a2      	cmp	r2, r4
 8003178:	d10c      	bne.n	8003194 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800317a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800317c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003180:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003184:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003186:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800318c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800318e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003192:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003196:	2300      	movs	r3, #0
 8003198:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800319c:	4618      	mov	r0, r3
}
 800319e:	bd10      	pop	{r4, pc}
 80031a0:	40010000 	.word	0x40010000

080031a4 <HAL_TIMEx_CommutationCallback>:
 80031a4:	4770      	bx	lr

080031a6 <HAL_TIMEx_BreakCallback>:
{
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_PWM_ConfigChannel>:
{
 80031a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80031aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80031ae:	4604      	mov	r4, r0
 80031b0:	460d      	mov	r5, r1
 80031b2:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d010      	beq.n	80031da <HAL_TIM_PWM_ConfigChannel+0x32>
 80031b8:	2301      	movs	r3, #1
  switch (Channel)
 80031ba:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80031c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80031c4:	d043      	beq.n	800324e <HAL_TIM_PWM_ConfigChannel+0xa6>
 80031c6:	d809      	bhi.n	80031dc <HAL_TIM_PWM_ConfigChannel+0x34>
 80031c8:	b1fa      	cbz	r2, 800320a <HAL_TIM_PWM_ConfigChannel+0x62>
 80031ca:	2a04      	cmp	r2, #4
 80031cc:	d02e      	beq.n	800322c <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 80031ce:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80031d0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031d6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80031da:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80031dc:	2a10      	cmp	r2, #16
 80031de:	d047      	beq.n	8003270 <HAL_TIM_PWM_ConfigChannel+0xc8>
 80031e0:	2a14      	cmp	r2, #20
 80031e2:	d056      	beq.n	8003292 <HAL_TIM_PWM_ConfigChannel+0xea>
 80031e4:	2a0c      	cmp	r2, #12
 80031e6:	d1f2      	bne.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031e8:	6820      	ldr	r0, [r4, #0]
 80031ea:	f7ff fe39 	bl	8002e60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80031f0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003208:	e030      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800320a:	6820      	ldr	r0, [r4, #0]
 800320c:	f7ff fd96 	bl	8002d3c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003210:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003212:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	f022 0204 	bic.w	r2, r2, #4
 8003222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003228:	619a      	str	r2, [r3, #24]
    break;
 800322a:	e7d0      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800322c:	6820      	ldr	r0, [r4, #0]
 800322e:	f7ff fdb3 	bl	8002d98 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003232:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003234:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003244:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800324c:	e7ec      	b.n	8003228 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	f7ff fdd4 	bl	8002dfc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003254:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003256:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	f042 0208 	orr.w	r2, r2, #8
 800325e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800326c:	61da      	str	r2, [r3, #28]
    break;
 800326e:	e7ae      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	f7ff fedd 	bl	8003030 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003276:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003278:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800327a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800327c:	f042 0208 	orr.w	r2, r2, #8
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003282:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003284:	f022 0204 	bic.w	r2, r2, #4
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800328a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800328c:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8003290:	e79d      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003292:	6820      	ldr	r0, [r4, #0]
 8003294:	f7ff fef4 	bl	8003080 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003298:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800329a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800329c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800329e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80032ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032b2:	e7ec      	b.n	800328e <HAL_TIM_PWM_ConfigChannel+0xe6>

080032b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b8:	9d06      	ldr	r5, [sp, #24]
 80032ba:	4604      	mov	r4, r0
 80032bc:	460f      	mov	r7, r1
 80032be:	4616      	mov	r6, r2
 80032c0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	6821      	ldr	r1, [r4, #0]
 80032c4:	69ca      	ldr	r2, [r1, #28]
 80032c6:	ea37 0302 	bics.w	r3, r7, r2
 80032ca:	bf0c      	ite	eq
 80032cc:	2201      	moveq	r2, #1
 80032ce:	2200      	movne	r2, #0
 80032d0:	42b2      	cmp	r2, r6
 80032d2:	d002      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80032d4:	2000      	movs	r0, #0
}
 80032d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80032da:	1c6b      	adds	r3, r5, #1
 80032dc:	d0f2      	beq.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80032de:	b99d      	cbnz	r5, 8003308 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e0:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80032e2:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032ea:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80032f4:	2320      	movs	r3, #32
 80032f6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80032fa:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80032fe:	2300      	movs	r3, #0
 8003300:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8003304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8003308:	f7fe f8cc 	bl	80014a4 <HAL_GetTick>
 800330c:	eba0 0008 	sub.w	r0, r0, r8
 8003310:	4285      	cmp	r5, r0
 8003312:	d8d6      	bhi.n	80032c2 <UART_WaitOnFlagUntilTimeout+0xe>
 8003314:	e7e4      	b.n	80032e0 <UART_WaitOnFlagUntilTimeout+0x2c>
	...

08003318 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800331c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800331e:	69c3      	ldr	r3, [r0, #28]
 8003320:	6921      	ldr	r1, [r4, #16]
 8003322:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003324:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003326:	430a      	orrs	r2, r1
 8003328:	6961      	ldr	r1, [r4, #20]
 800332a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800332c:	4993      	ldr	r1, [pc, #588]	; (800357c <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800332e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003330:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003332:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003334:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003336:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003338:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800333a:	686a      	ldr	r2, [r5, #4]
 800333c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003340:	430a      	orrs	r2, r1
 8003342:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003344:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003346:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003348:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800334a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800334e:	430a      	orrs	r2, r1
 8003350:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003352:	4a8b      	ldr	r2, [pc, #556]	; (8003580 <UART_SetConfig+0x268>)
 8003354:	4295      	cmp	r5, r2
 8003356:	d119      	bne.n	800338c <UART_SetConfig+0x74>
 8003358:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800335c:	4989      	ldr	r1, [pc, #548]	; (8003584 <UART_SetConfig+0x26c>)
 800335e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003362:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336a:	5c8a      	ldrb	r2, [r1, r2]
 800336c:	f040 80b3 	bne.w	80034d6 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8003370:	2a08      	cmp	r2, #8
 8003372:	f200 80ad 	bhi.w	80034d0 <UART_SetConfig+0x1b8>
 8003376:	e8df f012 	tbh	[pc, r2, lsl #1]
 800337a:	0026      	.short	0x0026
 800337c:	00e9007b 	.word	0x00e9007b
 8003380:	00f500ab 	.word	0x00f500ab
 8003384:	00ab00ab 	.word	0x00ab00ab
 8003388:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 800338c:	4a7e      	ldr	r2, [pc, #504]	; (8003588 <UART_SetConfig+0x270>)
 800338e:	4295      	cmp	r5, r2
 8003390:	d107      	bne.n	80033a2 <UART_SetConfig+0x8a>
 8003392:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003396:	497d      	ldr	r1, [pc, #500]	; (800358c <UART_SetConfig+0x274>)
 8003398:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800339c:	f002 020c 	and.w	r2, r2, #12
 80033a0:	e7e1      	b.n	8003366 <UART_SetConfig+0x4e>
 80033a2:	4a7b      	ldr	r2, [pc, #492]	; (8003590 <UART_SetConfig+0x278>)
 80033a4:	4295      	cmp	r5, r2
 80033a6:	d12b      	bne.n	8003400 <UART_SetConfig+0xe8>
 80033a8:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80033ac:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80033b0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80033b4:	2a10      	cmp	r2, #16
 80033b6:	f000 80d2 	beq.w	800355e <UART_SetConfig+0x246>
 80033ba:	d816      	bhi.n	80033ea <UART_SetConfig+0xd2>
 80033bc:	b9da      	cbnz	r2, 80033f6 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c2:	f040 809f 	bne.w	8003504 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80033c6:	f7ff f819 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80033ca:	6861      	ldr	r1, [r4, #4]
 80033cc:	084a      	lsrs	r2, r1, #1
 80033ce:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80033d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033d6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80033d8:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80033da:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033de:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80033e2:	6821      	ldr	r1, [r4, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60cb      	str	r3, [r1, #12]
 80033e8:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ea:	2a20      	cmp	r2, #32
 80033ec:	f000 80ab 	beq.w	8003546 <UART_SetConfig+0x22e>
 80033f0:	2a30      	cmp	r2, #48	; 0x30
 80033f2:	f000 80ba 	beq.w	800356a <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fa:	d069      	beq.n	80034d0 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80033fc:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003400:	4a64      	ldr	r2, [pc, #400]	; (8003594 <UART_SetConfig+0x27c>)
 8003402:	4295      	cmp	r5, r2
 8003404:	d10e      	bne.n	8003424 <UART_SetConfig+0x10c>
 8003406:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 800340a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800340e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003412:	2a40      	cmp	r2, #64	; 0x40
 8003414:	f000 80a3 	beq.w	800355e <UART_SetConfig+0x246>
 8003418:	d9d0      	bls.n	80033bc <UART_SetConfig+0xa4>
 800341a:	2a80      	cmp	r2, #128	; 0x80
 800341c:	f000 8093 	beq.w	8003546 <UART_SetConfig+0x22e>
 8003420:	2ac0      	cmp	r2, #192	; 0xc0
 8003422:	e7e6      	b.n	80033f2 <UART_SetConfig+0xda>
 8003424:	4a5c      	ldr	r2, [pc, #368]	; (8003598 <UART_SetConfig+0x280>)
 8003426:	4295      	cmp	r5, r2
 8003428:	d110      	bne.n	800344c <UART_SetConfig+0x134>
 800342a:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 800342e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003432:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003436:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800343a:	f000 8090 	beq.w	800355e <UART_SetConfig+0x246>
 800343e:	d9bd      	bls.n	80033bc <UART_SetConfig+0xa4>
 8003440:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003444:	d07f      	beq.n	8003546 <UART_SetConfig+0x22e>
 8003446:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800344a:	e7d2      	b.n	80033f2 <UART_SetConfig+0xda>
 800344c:	4a53      	ldr	r2, [pc, #332]	; (800359c <UART_SetConfig+0x284>)
 800344e:	4295      	cmp	r5, r2
 8003450:	d117      	bne.n	8003482 <UART_SetConfig+0x16a>
 8003452:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8003456:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800345a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800345e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003462:	d07c      	beq.n	800355e <UART_SetConfig+0x246>
 8003464:	d807      	bhi.n	8003476 <UART_SetConfig+0x15e>
 8003466:	2a00      	cmp	r2, #0
 8003468:	d1c5      	bne.n	80033f6 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346e:	d154      	bne.n	800351a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003470:	f7fe ffd4 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 8003474:	e7a9      	b.n	80033ca <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003476:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800347a:	d064      	beq.n	8003546 <UART_SetConfig+0x22e>
 800347c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003480:	e7b7      	b.n	80033f2 <UART_SetConfig+0xda>
 8003482:	4a47      	ldr	r2, [pc, #284]	; (80035a0 <UART_SetConfig+0x288>)
 8003484:	4295      	cmp	r5, r2
 8003486:	d10f      	bne.n	80034a8 <UART_SetConfig+0x190>
 8003488:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800348c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003490:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003494:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003498:	d061      	beq.n	800355e <UART_SetConfig+0x246>
 800349a:	d98f      	bls.n	80033bc <UART_SetConfig+0xa4>
 800349c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80034a0:	d051      	beq.n	8003546 <UART_SetConfig+0x22e>
 80034a2:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80034a6:	e7a4      	b.n	80033f2 <UART_SetConfig+0xda>
 80034a8:	4a3e      	ldr	r2, [pc, #248]	; (80035a4 <UART_SetConfig+0x28c>)
 80034aa:	4295      	cmp	r5, r2
 80034ac:	d1a3      	bne.n	80033f6 <UART_SetConfig+0xde>
 80034ae:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80034b2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80034b6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80034ba:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80034be:	d04e      	beq.n	800355e <UART_SetConfig+0x246>
 80034c0:	f67f af7c 	bls.w	80033bc <UART_SetConfig+0xa4>
 80034c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80034c8:	d03d      	beq.n	8003546 <UART_SetConfig+0x22e>
 80034ca:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80034ce:	e790      	b.n	80033f2 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 80034d0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e781      	b.n	80033da <UART_SetConfig+0xc2>
    switch (clocksource)
 80034d6:	2a08      	cmp	r2, #8
 80034d8:	d890      	bhi.n	80033fc <UART_SetConfig+0xe4>
 80034da:	a301      	add	r3, pc, #4	; (adr r3, 80034e0 <UART_SetConfig+0x1c8>)
 80034dc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80034e0:	08003505 	.word	0x08003505
 80034e4:	0800351b 	.word	0x0800351b
 80034e8:	08003521 	.word	0x08003521
 80034ec:	080033fd 	.word	0x080033fd
 80034f0:	08003537 	.word	0x08003537
 80034f4:	080033fd 	.word	0x080033fd
 80034f8:	080033fd 	.word	0x080033fd
 80034fc:	080033fd 	.word	0x080033fd
 8003500:	0800353d 	.word	0x0800353d
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003504:	f7fe ff7a 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003508:	6863      	ldr	r3, [r4, #4]
 800350a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800350e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003512:	b280      	uxth	r0, r0
 8003514:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003516:	2000      	movs	r0, #0
      break;
 8003518:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800351a:	f7fe ff7f 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 800351e:	e7f3      	b.n	8003508 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003520:	6862      	ldr	r2, [r4, #4]
 8003522:	0853      	lsrs	r3, r2, #1
 8003524:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003528:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800352c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	60eb      	str	r3, [r5, #12]
 8003534:	e7ef      	b.n	8003516 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003536:	f7fe fea1 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800353a:	e7e5      	b.n	8003508 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800353c:	6862      	ldr	r2, [r4, #4]
 800353e:	0853      	lsrs	r3, r2, #1
 8003540:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003544:	e7f2      	b.n	800352c <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354a:	d1e9      	bne.n	8003520 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800354c:	6860      	ldr	r0, [r4, #4]
 800354e:	0843      	lsrs	r3, r0, #1
 8003550:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003554:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003558:	fbb3 f3f0 	udiv	r3, r3, r0
 800355c:	e73b      	b.n	80033d6 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003562:	d1e8      	bne.n	8003536 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003564:	f7fe fe8a 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8003568:	e72f      	b.n	80033ca <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356e:	d1e5      	bne.n	800353c <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003570:	6860      	ldr	r0, [r4, #4]
 8003572:	0843      	lsrs	r3, r0, #1
 8003574:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003578:	e7ee      	b.n	8003558 <UART_SetConfig+0x240>
 800357a:	bf00      	nop
 800357c:	efff69f3 	.word	0xefff69f3
 8003580:	40011000 	.word	0x40011000
 8003584:	08004f69 	.word	0x08004f69
 8003588:	40004400 	.word	0x40004400
 800358c:	08004f6d 	.word	0x08004f6d
 8003590:	40004800 	.word	0x40004800
 8003594:	40004c00 	.word	0x40004c00
 8003598:	40005000 	.word	0x40005000
 800359c:	40011400 	.word	0x40011400
 80035a0:	40007800 	.word	0x40007800
 80035a4:	40007c00 	.word	0x40007c00

080035a8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035aa:	07da      	lsls	r2, r3, #31
{
 80035ac:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035ae:	d506      	bpl.n	80035be <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035b0:	6801      	ldr	r1, [r0, #0]
 80035b2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80035b4:	684a      	ldr	r2, [r1, #4]
 80035b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80035ba:	4322      	orrs	r2, r4
 80035bc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035be:	079c      	lsls	r4, r3, #30
 80035c0:	d506      	bpl.n	80035d0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035c2:	6801      	ldr	r1, [r0, #0]
 80035c4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80035c6:	684a      	ldr	r2, [r1, #4]
 80035c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035cc:	4322      	orrs	r2, r4
 80035ce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d0:	0759      	lsls	r1, r3, #29
 80035d2:	d506      	bpl.n	80035e2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035d4:	6801      	ldr	r1, [r0, #0]
 80035d6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80035d8:	684a      	ldr	r2, [r1, #4]
 80035da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035de:	4322      	orrs	r2, r4
 80035e0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035e2:	071a      	lsls	r2, r3, #28
 80035e4:	d506      	bpl.n	80035f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e6:	6801      	ldr	r1, [r0, #0]
 80035e8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80035ea:	684a      	ldr	r2, [r1, #4]
 80035ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f0:	4322      	orrs	r2, r4
 80035f2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f4:	06dc      	lsls	r4, r3, #27
 80035f6:	d506      	bpl.n	8003606 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035f8:	6801      	ldr	r1, [r0, #0]
 80035fa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80035fc:	688a      	ldr	r2, [r1, #8]
 80035fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003602:	4322      	orrs	r2, r4
 8003604:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003606:	0699      	lsls	r1, r3, #26
 8003608:	d506      	bpl.n	8003618 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800360a:	6801      	ldr	r1, [r0, #0]
 800360c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800360e:	688a      	ldr	r2, [r1, #8]
 8003610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003614:	4322      	orrs	r2, r4
 8003616:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003618:	065a      	lsls	r2, r3, #25
 800361a:	d510      	bpl.n	800363e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800361c:	6801      	ldr	r1, [r0, #0]
 800361e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003620:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003622:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003626:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800362a:	ea42 0204 	orr.w	r2, r2, r4
 800362e:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003630:	d105      	bne.n	800363e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003632:	684a      	ldr	r2, [r1, #4]
 8003634:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003636:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800363a:	4322      	orrs	r2, r4
 800363c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800363e:	061b      	lsls	r3, r3, #24
 8003640:	d506      	bpl.n	8003650 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003642:	6802      	ldr	r2, [r0, #0]
 8003644:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003646:	6853      	ldr	r3, [r2, #4]
 8003648:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800364c:	430b      	orrs	r3, r1
 800364e:	6053      	str	r3, [r2, #4]
 8003650:	bd10      	pop	{r4, pc}

08003652 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003652:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003654:	2500      	movs	r5, #0
{
 8003656:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003658:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800365a:	f7fd ff23 	bl	80014a4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800365e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003660:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	0712      	lsls	r2, r2, #28
 8003666:	d409      	bmi.n	800367c <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8003668:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800366a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800366c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8003670:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8003674:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8003678:	b003      	add	sp, #12
 800367a:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003680:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003684:	4620      	mov	r0, r4
 8003686:	9200      	str	r2, [sp, #0]
 8003688:	462a      	mov	r2, r5
 800368a:	f7ff fe13 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 800368e:	2800      	cmp	r0, #0
 8003690:	d0ea      	beq.n	8003668 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003692:	2003      	movs	r0, #3
 8003694:	e7f0      	b.n	8003678 <UART_CheckIdleState+0x26>

08003696 <HAL_UART_Init>:
{
 8003696:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003698:	4604      	mov	r4, r0
 800369a:	b360      	cbz	r0, 80036f6 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800369c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80036a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036a4:	b91b      	cbnz	r3, 80036ae <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80036a6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80036aa:	f7fd fddb 	bl	8001264 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80036ae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80036b0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036b2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80036b4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80036b8:	6813      	ldr	r3, [r2, #0]
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036c0:	f7ff fe2a 	bl	8003318 <UART_SetConfig>
 80036c4:	2801      	cmp	r0, #1
 80036c6:	d016      	beq.n	80036f6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ca:	b113      	cbz	r3, 80036d2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff ff6b 	bl	80035a8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80036d4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
}
 80036ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80036f0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80036f2:	f7ff bfae 	b.w	8003652 <UART_CheckIdleState>
}
 80036f6:	2001      	movs	r0, #1
 80036f8:	bd10      	pop	{r4, pc}
	...

080036fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 80036fe:	3b01      	subs	r3, #1
 8003700:	d101      	bne.n	8003706 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003702:	2003      	movs	r0, #3
 8003704:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8003706:	6902      	ldr	r2, [r0, #16]
 8003708:	2a00      	cmp	r2, #0
 800370a:	daf8      	bge.n	80036fe <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800370c:	6903      	ldr	r3, [r0, #16]
 800370e:	4a06      	ldr	r2, [pc, #24]	; (8003728 <USB_CoreReset+0x2c>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 8003716:	3a01      	subs	r2, #1
 8003718:	d0f3      	beq.n	8003702 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800371a:	6903      	ldr	r3, [r0, #16]
 800371c:	f013 0301 	ands.w	r3, r3, #1
 8003720:	d1f9      	bne.n	8003716 <USB_CoreReset+0x1a>

  return HAL_OK;
 8003722:	4618      	mov	r0, r3
}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	00030d41 	.word	0x00030d41

0800372c <USB_CoreInit>:
{
 800372c:	b084      	sub	sp, #16
 800372e:	b538      	push	{r3, r4, r5, lr}
 8003730:	ad05      	add	r5, sp, #20
 8003732:	4604      	mov	r4, r0
 8003734:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800373a:	2b01      	cmp	r3, #1
 800373c:	d127      	bne.n	800378e <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800373e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003744:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003746:	68c3      	ldr	r3, [r0, #12]
 8003748:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800374c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003750:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003752:	68c3      	ldr	r3, [r0, #12]
 8003754:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003758:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 800375a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800375c:	2b01      	cmp	r3, #1
 800375e:	d103      	bne.n	8003768 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003760:	68c3      	ldr	r3, [r0, #12]
 8003762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003766:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff ffc7 	bl	80036fc <USB_CoreReset>
  if(cfg.dma_enable == ENABLE)
 800376e:	9b08      	ldr	r3, [sp, #32]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003774:	68a3      	ldr	r3, [r4, #8]
 8003776:	f043 0306 	orr.w	r3, r3, #6
 800377a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800377c:	68a3      	ldr	r3, [r4, #8]
 800377e:	f043 0320 	orr.w	r3, r3, #32
 8003782:	60a3      	str	r3, [r4, #8]
}
 8003784:	2000      	movs	r0, #0
 8003786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800378a:	b004      	add	sp, #16
 800378c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800378e:	68c3      	ldr	r3, [r0, #12]
 8003790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003794:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003796:	f7ff ffb1 	bl	80036fc <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800379a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800379e:	63a3      	str	r3, [r4, #56]	; 0x38
 80037a0:	e7e5      	b.n	800376e <USB_CoreInit+0x42>

080037a2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037a2:	6883      	ldr	r3, [r0, #8]
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	6083      	str	r3, [r0, #8]
}
 80037aa:	2000      	movs	r0, #0
 80037ac:	4770      	bx	lr

080037ae <USB_SetCurrentMode>:
{
 80037ae:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037b0:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80037b2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037b8:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80037ba:	d108      	bne.n	80037ce <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037bc:	68c3      	ldr	r3, [r0, #12]
 80037be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037c2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 80037c4:	2032      	movs	r0, #50	; 0x32
 80037c6:	f7fd fe73 	bl	80014b0 <HAL_Delay>
}
 80037ca:	2000      	movs	r0, #0
 80037cc:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 80037ce:	2900      	cmp	r1, #0
 80037d0:	d1f8      	bne.n	80037c4 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037d2:	68c3      	ldr	r3, [r0, #12]
 80037d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037d8:	e7f3      	b.n	80037c2 <USB_SetCurrentMode+0x14>
	...

080037dc <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 80037dc:	0189      	lsls	r1, r1, #6
 80037de:	4a07      	ldr	r2, [pc, #28]	; (80037fc <USB_FlushTxFifo+0x20>)
 80037e0:	f041 0120 	orr.w	r1, r1, #32
 80037e4:	6101      	str	r1, [r0, #16]
    if (++count > 200000)
 80037e6:	3a01      	subs	r2, #1
 80037e8:	d005      	beq.n	80037f6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80037ea:	6903      	ldr	r3, [r0, #16]
 80037ec:	f013 0320 	ands.w	r3, r3, #32
 80037f0:	d1f9      	bne.n	80037e6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80037f2:	4618      	mov	r0, r3
 80037f4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80037f6:	2003      	movs	r0, #3
}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	00030d41 	.word	0x00030d41

08003800 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003800:	2310      	movs	r3, #16
 8003802:	4a06      	ldr	r2, [pc, #24]	; (800381c <USB_FlushRxFifo+0x1c>)
 8003804:	6103      	str	r3, [r0, #16]
    if (++count > 200000)
 8003806:	3a01      	subs	r2, #1
 8003808:	d005      	beq.n	8003816 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800380a:	6903      	ldr	r3, [r0, #16]
 800380c:	f013 0310 	ands.w	r3, r3, #16
 8003810:	d1f9      	bne.n	8003806 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003812:	4618      	mov	r0, r3
 8003814:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003816:	2003      	movs	r0, #3
}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	00030d41 	.word	0x00030d41

08003820 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003820:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003824:	4319      	orrs	r1, r3
 8003826:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800382a:	2000      	movs	r0, #0
 800382c:	4770      	bx	lr
	...

08003830 <USB_DevInit>:
{
 8003830:	b084      	sub	sp, #16
 8003832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003836:	4604      	mov	r4, r0
 8003838:	a807      	add	r0, sp, #28
 800383a:	4688      	mov	r8, r1
 800383c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003842:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8003844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800384a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800384c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800384e:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0)
 8003850:	b95e      	cbnz	r6, 800386a <USB_DevInit+0x3a>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8003852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003854:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003858:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003860:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003868:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0;
 800386a:	2300      	movs	r3, #0
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800386c:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800386e:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0;
 8003872:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003876:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800387a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800387e:	d158      	bne.n	8003932 <USB_DevInit+0x102>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8003880:	2a00      	cmp	r2, #0
 8003882:	d154      	bne.n	800392e <USB_DevInit+0xfe>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8003884:	2100      	movs	r1, #0
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8003886:	4620      	mov	r0, r4
 8003888:	f7ff ffca 	bl	8003820 <USB_SetDevSpeed>
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800388c:	2110      	movs	r1, #16
 800388e:	4620      	mov	r0, r4
 8003890:	f7ff ffa4 	bl	80037dc <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003894:	4620      	mov	r0, r4
 8003896:	f7ff ffb3 	bl	8003800 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0;
 800389a:	2300      	movs	r3, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80038a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DIEPMSK = 0;
 80038a4:	612b      	str	r3, [r5, #16]
 80038a6:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0;
 80038a8:	616b      	str	r3, [r5, #20]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80038aa:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80038ae:	61aa      	str	r2, [r5, #24]
 80038b0:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DAINTMSK = 0;
 80038b4:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80038b6:	4543      	cmp	r3, r8
 80038b8:	d13f      	bne.n	800393a <USB_DevInit+0x10a>
 80038ba:	2100      	movs	r1, #0
 80038bc:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80038c0:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80038c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80038c8:	4608      	mov	r0, r1
  for (i = 0; i < cfg.dev_endpoints; i++)
 80038ca:	428b      	cmp	r3, r1
 80038cc:	d143      	bne.n	8003956 <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038ce:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 80038d0:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d6:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 80038d8:	d108      	bne.n	80038ec <USB_DevInit+0xbc>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80038da:	4b26      	ldr	r3, [pc, #152]	; (8003974 <USB_DevInit+0x144>)
 80038dc:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80038de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	f043 0303 	orr.w	r3, r3, #3
 80038e8:	632b      	str	r3, [r5, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 80038ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 80038f0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80038f4:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == DISABLE)
 80038f6:	b91f      	cbnz	r7, 8003900 <USB_DevInit+0xd0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038f8:	69a3      	ldr	r3, [r4, #24]
 80038fa:	f043 0310 	orr.w	r3, r3, #16
 80038fe:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8003900:	69a2      	ldr	r2, [r4, #24]
 8003902:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <USB_DevInit+0x148>)
 8003904:	4313      	orrs	r3, r2
 8003906:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable)
 8003908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800390a:	b11b      	cbz	r3, 8003914 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800390c:	69a3      	ldr	r3, [r4, #24]
 800390e:	f043 0308 	orr.w	r3, r3, #8
 8003912:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 8003914:	2e01      	cmp	r6, #1
 8003916:	d105      	bne.n	8003924 <USB_DevInit+0xf4>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003918:	69a3      	ldr	r3, [r4, #24]
 800391a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	61a3      	str	r3, [r4, #24]
}
 8003924:	2000      	movs	r0, #0
 8003926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800392a:	b004      	add	sp, #16
 800392c:	4770      	bx	lr
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800392e:	2101      	movs	r1, #1
 8003930:	e7a9      	b.n	8003886 <USB_DevInit+0x56>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 8003932:	2903      	cmp	r1, #3
 8003934:	d0a4      	beq.n	8003880 <USB_DevInit+0x50>
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8003936:	2103      	movs	r1, #3
 8003938:	e7a5      	b.n	8003886 <USB_DevInit+0x56>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800393a:	f8d2 c000 	ldr.w	ip, [r2]
 800393e:	f1bc 0f00 	cmp.w	ip, #0
 8003942:	da06      	bge.n	8003952 <USB_DevInit+0x122>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8003944:	6010      	str	r0, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 8003946:	6111      	str	r1, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003948:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800394a:	f8c2 e008 	str.w	lr, [r2, #8]
 800394e:	3220      	adds	r2, #32
 8003950:	e7b1      	b.n	80038b6 <USB_DevInit+0x86>
      USBx_INEP(i)->DIEPCTL = 0;
 8003952:	6011      	str	r1, [r2, #0]
 8003954:	e7f7      	b.n	8003946 <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003956:	f8d2 8000 	ldr.w	r8, [r2]
 800395a:	f1b8 0f00 	cmp.w	r8, #0
 800395e:	da07      	bge.n	8003970 <USB_DevInit+0x140>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003960:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8003964:	6110      	str	r0, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003966:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8003968:	f8c2 c008 	str.w	ip, [r2, #8]
 800396c:	3220      	adds	r2, #32
 800396e:	e7ac      	b.n	80038ca <USB_DevInit+0x9a>
      USBx_OUTEP(i)->DOEPCTL = 0;
 8003970:	6010      	str	r0, [r2, #0]
 8003972:	e7f7      	b.n	8003964 <USB_DevInit+0x134>
 8003974:	00800100 	.word	0x00800100
 8003978:	803c3800 	.word	0x803c3800

0800397c <USB_DevDisconnect>:
{
 800397c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 800397e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003982:	f043 0302 	orr.w	r3, r3, #2
 8003986:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 800398a:	2003      	movs	r0, #3
 800398c:	f7fd fd90 	bl	80014b0 <HAL_Delay>
}
 8003990:	2000      	movs	r0, #0
 8003992:	bd08      	pop	{r3, pc}

08003994 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003994:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003996:	f000 fe69 	bl	800466c <vTaskStartScheduler>
  
  return osOK;
}
 800399a:	2000      	movs	r0, #0
 800399c:	bd08      	pop	{r3, pc}

0800399e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800399e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039a0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80039a4:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039a6:	8a02      	ldrh	r2, [r0, #16]
{
 80039a8:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 80039aa:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039ac:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 80039b0:	bf14      	ite	ne
 80039b2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80039b4:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039b6:	a803      	add	r0, sp, #12
 80039b8:	9400      	str	r4, [sp, #0]
 80039ba:	9001      	str	r0, [sp, #4]
 80039bc:	4628      	mov	r0, r5
 80039be:	f000 fd85 	bl	80044cc <xTaskCreate>
 80039c2:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80039c4:	bf0c      	ite	eq
 80039c6:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80039c8:	2000      	movne	r0, #0
}
 80039ca:	b005      	add	sp, #20
 80039cc:	bd30      	pop	{r4, r5, pc}

080039ce <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039ce:	2800      	cmp	r0, #0
 80039d0:	bf08      	it	eq
 80039d2:	2001      	moveq	r0, #1
{
 80039d4:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039d6:	f000 ff9f 	bl	8004918 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039da:	2000      	movs	r0, #0
 80039dc:	bd08      	pop	{r3, pc}

080039de <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80039de:	2001      	movs	r0, #1
 80039e0:	f000 bc34 	b.w	800424c <xQueueCreateMutex>

080039e4 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80039e4:	2200      	movs	r2, #0
 80039e6:	c803      	ldmia	r0, {r0, r1}
 80039e8:	f000 bb4e 	b.w	8004088 <xQueueGenericCreate>

080039ec <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80039ec:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80039ee:	f001 f8e3 	bl	8004bb8 <xTaskGetSchedulerState>
 80039f2:	2801      	cmp	r0, #1
 80039f4:	d003      	beq.n	80039fe <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80039f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80039fa:	f000 ba03 	b.w	8003e04 <xPortSysTickHandler>
 80039fe:	bd08      	pop	{r3, pc}

08003a00 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <prvInsertBlockIntoFreeList+0x40>)
{
 8003a02:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4282      	cmp	r2, r0
 8003a08:	d318      	bcc.n	8003a3c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a0a:	685c      	ldr	r4, [r3, #4]
 8003a0c:	1919      	adds	r1, r3, r4
 8003a0e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a10:	bf01      	itttt	eq
 8003a12:	6841      	ldreq	r1, [r0, #4]
 8003a14:	4618      	moveq	r0, r3
 8003a16:	1909      	addeq	r1, r1, r4
 8003a18:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a1a:	6844      	ldr	r4, [r0, #4]
 8003a1c:	1901      	adds	r1, r0, r4
 8003a1e:	428a      	cmp	r2, r1
 8003a20:	d107      	bne.n	8003a32 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a22:	4908      	ldr	r1, [pc, #32]	; (8003a44 <prvInsertBlockIntoFreeList+0x44>)
 8003a24:	6809      	ldr	r1, [r1, #0]
 8003a26:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a28:	bf1f      	itttt	ne
 8003a2a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a2c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a2e:	1909      	addne	r1, r1, r4
 8003a30:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a32:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a34:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a36:	bf18      	it	ne
 8003a38:	6018      	strne	r0, [r3, #0]
 8003a3a:	bd10      	pop	{r4, pc}
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	e7e1      	b.n	8003a04 <prvInsertBlockIntoFreeList+0x4>
 8003a40:	20003c60 	.word	0x20003c60
 8003a44:	20000050 	.word	0x20000050

08003a48 <pvPortMalloc>:
{
 8003a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003a4e:	f000 fe4d 	bl	80046ec <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003a52:	4940      	ldr	r1, [pc, #256]	; (8003b54 <pvPortMalloc+0x10c>)
 8003a54:	4d40      	ldr	r5, [pc, #256]	; (8003b58 <pvPortMalloc+0x110>)
 8003a56:	680b      	ldr	r3, [r1, #0]
 8003a58:	bb0b      	cbnz	r3, 8003a9e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003a5a:	4a40      	ldr	r2, [pc, #256]	; (8003b5c <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a5c:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a5e:	4e40      	ldr	r6, [pc, #256]	; (8003b60 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a60:	bf1b      	ittet	ne
 8003a62:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a64:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a68:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a6c:	f020 0007 	bicne.w	r0, r0, #7
 8003a70:	bf1c      	itt	ne
 8003a72:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a74:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8003a76:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a78:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a7a:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a7c:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8003a7e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a80:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8003a84:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003a86:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a88:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8003a8a:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a8c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a8e:	4b35      	ldr	r3, [pc, #212]	; (8003b64 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a90:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a92:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a94:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <pvPortMalloc+0x120>)
 8003a96:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a9c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a9e:	682f      	ldr	r7, [r5, #0]
 8003aa0:	4227      	tst	r7, r4
 8003aa2:	d116      	bne.n	8003ad2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8003aa4:	2c00      	cmp	r4, #0
 8003aa6:	d042      	beq.n	8003b2e <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8003aa8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003aac:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003aae:	bf1c      	itt	ne
 8003ab0:	f023 0307 	bicne.w	r3, r3, #7
 8003ab4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ab6:	b163      	cbz	r3, 8003ad2 <pvPortMalloc+0x8a>
 8003ab8:	4a2b      	ldr	r2, [pc, #172]	; (8003b68 <pvPortMalloc+0x120>)
 8003aba:	6816      	ldr	r6, [r2, #0]
 8003abc:	4690      	mov	r8, r2
 8003abe:	42b3      	cmp	r3, r6
 8003ac0:	d807      	bhi.n	8003ad2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8003ac2:	4a27      	ldr	r2, [pc, #156]	; (8003b60 <pvPortMalloc+0x118>)
 8003ac4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ac6:	6868      	ldr	r0, [r5, #4]
 8003ac8:	4283      	cmp	r3, r0
 8003aca:	d804      	bhi.n	8003ad6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003acc:	6809      	ldr	r1, [r1, #0]
 8003ace:	428d      	cmp	r5, r1
 8003ad0:	d107      	bne.n	8003ae2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8003ad2:	2400      	movs	r4, #0
 8003ad4:	e02b      	b.n	8003b2e <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ad6:	682c      	ldr	r4, [r5, #0]
 8003ad8:	2c00      	cmp	r4, #0
 8003ada:	d0f7      	beq.n	8003acc <pvPortMalloc+0x84>
 8003adc:	462a      	mov	r2, r5
 8003ade:	4625      	mov	r5, r4
 8003ae0:	e7f1      	b.n	8003ac6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ae2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ae4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ae6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ae8:	1ac2      	subs	r2, r0, r3
 8003aea:	2a10      	cmp	r2, #16
 8003aec:	d911      	bls.n	8003b12 <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003aee:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003af0:	0741      	lsls	r1, r0, #29
 8003af2:	d00a      	beq.n	8003b0a <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	b672      	cpsid	i
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	b662      	cpsie	i
 8003b08:	e7fe      	b.n	8003b08 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b0a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b0c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b0e:	f7ff ff77 	bl	8003a00 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b12:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b14:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b16:	4913      	ldr	r1, [pc, #76]	; (8003b64 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b18:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b1a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b1c:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8003b1e:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b20:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b24:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b26:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b28:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b2a:	bf38      	it	cc
 8003b2c:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8003b2e:	f000 fe79 	bl	8004824 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b32:	0763      	lsls	r3, r4, #29
 8003b34:	d00a      	beq.n	8003b4c <pvPortMalloc+0x104>
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	b672      	cpsid	i
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	b662      	cpsie	i
 8003b4a:	e7fe      	b.n	8003b4a <pvPortMalloc+0x102>
}
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b52:	bf00      	nop
 8003b54:	20000050 	.word	0x20000050
 8003b58:	20003c54 	.word	0x20003c54
 8003b5c:	20000054 	.word	0x20000054
 8003b60:	20003c60 	.word	0x20003c60
 8003b64:	20003c5c 	.word	0x20003c5c
 8003b68:	20003c58 	.word	0x20003c58

08003b6c <vPortFree>:
{
 8003b6c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003b6e:	4604      	mov	r4, r0
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d032      	beq.n	8003bda <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b74:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <vPortFree+0x70>)
 8003b76:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	4213      	tst	r3, r2
 8003b7e:	d10a      	bne.n	8003b96 <vPortFree+0x2a>
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	b672      	cpsid	i
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	b662      	cpsie	i
 8003b94:	e7fe      	b.n	8003b94 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b96:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003b9a:	b151      	cbz	r1, 8003bb2 <vPortFree+0x46>
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	b672      	cpsid	i
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	b662      	cpsie	i
 8003bb0:	e7fe      	b.n	8003bb0 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003bb2:	ea23 0302 	bic.w	r3, r3, r2
 8003bb6:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003bba:	f000 fd97 	bl	80046ec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <vPortFree+0x74>)
 8003bc0:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003bc4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003bc8:	6811      	ldr	r1, [r2, #0]
 8003bca:	440b      	add	r3, r1
 8003bcc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003bce:	f7ff ff17 	bl	8003a00 <prvInsertBlockIntoFreeList>
}
 8003bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003bd6:	f000 be25 	b.w	8004824 <xTaskResumeAll>
 8003bda:	bd10      	pop	{r4, pc}
 8003bdc:	20003c54 	.word	0x20003c54
 8003be0:	20003c58 	.word	0x20003c58

08003be4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003be4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bec:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bee:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bf0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bf2:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bf4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bf6:	6003      	str	r3, [r0, #0]
 8003bf8:	4770      	bx	lr

08003bfa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6103      	str	r3, [r0, #16]
 8003bfe:	4770      	bx	lr

08003c00 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c00:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c02:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003c04:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c06:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c0c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003c0e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c10:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003c12:	3301      	adds	r3, #1
 8003c14:	6003      	str	r3, [r0, #0]
 8003c16:	4770      	bx	lr

08003c18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c18:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c1a:	1c53      	adds	r3, r2, #1
{
 8003c1c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8003c1e:	d10a      	bne.n	8003c36 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c20:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c26:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c28:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c2a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003c2c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c2e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003c30:	3301      	adds	r3, #1
 8003c32:	6003      	str	r3, [r0, #0]
 8003c34:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c36:	f100 0308 	add.w	r3, r0, #8
 8003c3a:	685c      	ldr	r4, [r3, #4]
 8003c3c:	6825      	ldr	r5, [r4, #0]
 8003c3e:	42aa      	cmp	r2, r5
 8003c40:	d3ef      	bcc.n	8003c22 <vListInsert+0xa>
 8003c42:	4623      	mov	r3, r4
 8003c44:	e7f9      	b.n	8003c3a <vListInsert+0x22>

08003c46 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c46:	6841      	ldr	r1, [r0, #4]
 8003c48:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c4a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c4c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c4e:	6882      	ldr	r2, [r0, #8]
 8003c50:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c56:	bf08      	it	eq
 8003c58:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	3801      	subs	r0, #1
 8003c62:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003c64:	4770      	bx	lr
	...

08003c68 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <prvTaskExitError+0x34>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	d00a      	beq.n	8003c86 <prvTaskExitError+0x1e>
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	b672      	cpsid	i
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	b662      	cpsie	i
 8003c84:	e7fe      	b.n	8003c84 <prvTaskExitError+0x1c>
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	b672      	cpsid	i
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	b662      	cpsie	i
 8003c9a:	e7fe      	b.n	8003c9a <prvTaskExitError+0x32>
 8003c9c:	20000004 	.word	0x20000004

08003ca0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ca0:	4806      	ldr	r0, [pc, #24]	; (8003cbc <prvPortStartFirstTask+0x1c>)
 8003ca2:	6800      	ldr	r0, [r0, #0]
 8003ca4:	6800      	ldr	r0, [r0, #0]
 8003ca6:	f380 8808 	msr	MSP, r0
 8003caa:	b662      	cpsie	i
 8003cac:	b661      	cpsie	f
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	df00      	svc	0
 8003cb8:	bf00      	nop
 8003cba:	0000      	.short	0x0000
 8003cbc:	e000ed08 	.word	0xe000ed08

08003cc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003cc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003cd0 <vPortEnableVFP+0x10>
 8003cc4:	6801      	ldr	r1, [r0, #0]
 8003cc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003cca:	6001      	str	r1, [r0, #0]
 8003ccc:	4770      	bx	lr
 8003cce:	0000      	.short	0x0000
 8003cd0:	e000ed88 	.word	0xe000ed88

08003cd4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cd8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003cdc:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8003ce0:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ce2:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ce6:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ce8:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003cea:	f06f 0302 	mvn.w	r3, #2
 8003cee:	6203      	str	r3, [r0, #32]
}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	08003c69 	.word	0x08003c69
	...

08003d00 <SVC_Handler>:
	__asm volatile (
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <pxCurrentTCBConst2>)
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	6808      	ldr	r0, [r1, #0]
 8003d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0a:	f380 8809 	msr	PSP, r0
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f380 8811 	msr	BASEPRI, r0
 8003d1a:	4770      	bx	lr
 8003d1c:	f3af 8000 	nop.w

08003d20 <pxCurrentTCBConst2>:
 8003d20:	20003c70 	.word	0x20003c70

08003d24 <vPortEnterCritical>:
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	b672      	cpsid	i
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	b662      	cpsie	i
	uxCriticalNesting++;
 8003d38:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <vPortEnterCritical+0x44>)
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003d3e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003d42:	d10f      	bne.n	8003d64 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <vPortEnterCritical+0x48>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003d4c:	d00a      	beq.n	8003d64 <vPortEnterCritical+0x40>
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	b672      	cpsid	i
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	b662      	cpsie	i
 8003d62:	e7fe      	b.n	8003d62 <vPortEnterCritical+0x3e>
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000004 	.word	0x20000004
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003d70:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <vPortExitCritical+0x28>)
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	b953      	cbnz	r3, 8003d8c <vPortExitCritical+0x1c>
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	b672      	cpsid	i
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	b662      	cpsie	i
 8003d8a:	e7fe      	b.n	8003d8a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d90:	b90b      	cbnz	r3, 8003d96 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	4770      	bx	lr
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	00000000 	.word	0x00000000

08003da0 <PendSV_Handler>:
	__asm volatile
 8003da0:	f3ef 8009 	mrs	r0, PSP
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <pxCurrentTCBConst>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	f01e 0f10 	tst.w	lr, #16
 8003db0:	bf08      	it	eq
 8003db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dba:	6010      	str	r0, [r2, #0]
 8003dbc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003dc4:	b672      	cpsid	i
 8003dc6:	f380 8811 	msr	BASEPRI, r0
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	b662      	cpsie	i
 8003dd4:	f000 fe00 	bl	80049d8 <vTaskSwitchContext>
 8003dd8:	f04f 0000 	mov.w	r0, #0
 8003ddc:	f380 8811 	msr	BASEPRI, r0
 8003de0:	bc08      	pop	{r3}
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	6808      	ldr	r0, [r1, #0]
 8003de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dea:	f01e 0f10 	tst.w	lr, #16
 8003dee:	bf08      	it	eq
 8003df0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003df4:	f380 8809 	msr	PSP, r0
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop

08003e00 <pxCurrentTCBConst>:
 8003e00:	20003c70 	.word	0x20003c70

08003e04 <xPortSysTickHandler>:
{
 8003e04:	b508      	push	{r3, lr}
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	b672      	cpsid	i
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8003e1a:	f000 fc6f 	bl	80046fc <xTaskIncrementTick>
 8003e1e:	b118      	cbz	r0, 8003e28 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e24:	4b02      	ldr	r3, [pc, #8]	; (8003e30 <xPortSysTickHandler+0x2c>)
 8003e26:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	bd08      	pop	{r3, pc}
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <vPortSetupTimerInterrupt+0x1c>)
 8003e36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <vPortSetupTimerInterrupt+0x20>)
 8003e42:	3b01      	subs	r3, #1
 8003e44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e46:	2207      	movs	r2, #7
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <vPortSetupTimerInterrupt+0x24>)
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000000 	.word	0x20000000
 8003e54:	e000e014 	.word	0xe000e014
 8003e58:	e000e010 	.word	0xe000e010

08003e5c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e5c:	4b23      	ldr	r3, [pc, #140]	; (8003eec <xPortStartScheduler+0x90>)
{
 8003e5e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e60:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e62:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e68:	22ff      	movs	r2, #255	; 0xff
 8003e6a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e6c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e6e:	4a20      	ldr	r2, [pc, #128]	; (8003ef0 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e76:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003e7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e7e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e80:	2207      	movs	r2, #7
 8003e82:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <xPortStartScheduler+0x98>)
 8003e84:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e86:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003e8a:	1e54      	subs	r4, r2, #1
 8003e8c:	0600      	lsls	r0, r0, #24
 8003e8e:	d423      	bmi.n	8003ed8 <xPortStartScheduler+0x7c>
 8003e90:	b101      	cbz	r1, 8003e94 <xPortStartScheduler+0x38>
 8003e92:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e98:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003e9c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e9e:	9b01      	ldr	r3, [sp, #4]
 8003ea0:	4a12      	ldr	r2, [pc, #72]	; (8003eec <xPortStartScheduler+0x90>)
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <xPortStartScheduler+0x9c>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003eae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003eb6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003eb8:	f7ff ffbc 	bl	8003e34 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <xPortStartScheduler+0xa0>)
 8003ec0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8003ec2:	f7ff fefd 	bl	8003cc0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <xPortStartScheduler+0xa4>)
 8003ec8:	6813      	ldr	r3, [r2, #0]
 8003eca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ece:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003ed0:	f7ff fee6 	bl	8003ca0 <prvPortStartFirstTask>
	prvTaskExitError();
 8003ed4:	f7ff fec8 	bl	8003c68 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ed8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003edc:	2101      	movs	r1, #1
 8003ede:	0052      	lsls	r2, r2, #1
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	f88d 2003 	strb.w	r2, [sp, #3]
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	e7cd      	b.n	8003e86 <xPortStartScheduler+0x2a>
 8003eea:	bf00      	nop
 8003eec:	e000e400 	.word	0xe000e400
 8003ef0:	20003c68 	.word	0x20003c68
 8003ef4:	20003c6c 	.word	0x20003c6c
 8003ef8:	e000ed20 	.word	0xe000ed20
 8003efc:	20000004 	.word	0x20000004
 8003f00:	e000ef34 	.word	0xe000ef34

08003f04 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f08:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003f0a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f0c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f0e:	b942      	cbnz	r2, 8003f22 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f10:	6805      	ldr	r5, [r0, #0]
 8003f12:	b99d      	cbnz	r5, 8003f3c <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f14:	6840      	ldr	r0, [r0, #4]
 8003f16:	f000 fea5 	bl	8004c64 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003f1a:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003f1c:	3601      	adds	r6, #1
 8003f1e:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003f22:	b96d      	cbnz	r5, 8003f40 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f24:	6880      	ldr	r0, [r0, #8]
 8003f26:	f000 ff21 	bl	8004d6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f2a:	68a3      	ldr	r3, [r4, #8]
 8003f2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f2e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f30:	6862      	ldr	r2, [r4, #4]
 8003f32:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f34:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f36:	d301      	bcc.n	8003f3c <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	e7ed      	b.n	8003f1c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f40:	68c0      	ldr	r0, [r0, #12]
 8003f42:	f000 ff13 	bl	8004d6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f48:	68e2      	ldr	r2, [r4, #12]
 8003f4a:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f4c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f4e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f50:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f52:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003f54:	bf3e      	ittt	cc
 8003f56:	6862      	ldrcc	r2, [r4, #4]
 8003f58:	189b      	addcc	r3, r3, r2
 8003f5a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003f5c:	2d02      	cmp	r5, #2
 8003f5e:	d1ed      	bne.n	8003f3c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f60:	b10e      	cbz	r6, 8003f66 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8003f62:	3e01      	subs	r6, #1
 8003f64:	e7ea      	b.n	8003f3c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8003f66:	4630      	mov	r0, r6
 8003f68:	e7d8      	b.n	8003f1c <prvCopyDataToQueue+0x18>

08003f6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003f70:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f72:	b162      	cbz	r2, 8003f8e <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f74:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f76:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f78:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f7a:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f7c:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8003f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003f82:	bf24      	itt	cs
 8003f84:	6819      	ldrcs	r1, [r3, #0]
 8003f86:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003f88:	68d9      	ldr	r1, [r3, #12]
 8003f8a:	f000 beef 	b.w	8004d6c <memcpy>
}
 8003f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f98:	f7ff fec4 	bl	8003d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f9c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fa0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003fa4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	dc14      	bgt.n	8003fd4 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003faa:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fac:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8003fb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003fb4:	f7ff fedc 	bl	8003d70 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003fb8:	f7ff feb4 	bl	8003d24 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003fbc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003fc0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	dc12      	bgt.n	8003fec <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fc6:	23ff      	movs	r3, #255	; 0xff
 8003fc8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8003fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003fd0:	f7ff bece 	b.w	8003d70 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0e7      	beq.n	8003faa <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fda:	4630      	mov	r0, r6
 8003fdc:	f000 fd54 	bl	8004a88 <xTaskRemoveFromEventList>
 8003fe0:	b108      	cbz	r0, 8003fe6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003fe2:	f000 fde3 	bl	8004bac <vTaskMissedYield>
 8003fe6:	3d01      	subs	r5, #1
 8003fe8:	b26d      	sxtb	r5, r5
 8003fea:	e7dc      	b.n	8003fa6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0e9      	beq.n	8003fc6 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f000 fd48 	bl	8004a88 <xTaskRemoveFromEventList>
 8003ff8:	b108      	cbz	r0, 8003ffe <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003ffa:	f000 fdd7 	bl	8004bac <vTaskMissedYield>
 8003ffe:	3d01      	subs	r5, #1
 8004000:	b26d      	sxtb	r5, r5
 8004002:	e7de      	b.n	8003fc2 <prvUnlockQueue+0x2e>

08004004 <xQueueGenericReset>:
{
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004008:	4604      	mov	r4, r0
 800400a:	b950      	cbnz	r0, 8004022 <xQueueGenericReset+0x1e>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	b672      	cpsid	i
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	b662      	cpsie	i
 8004020:	e7fe      	b.n	8004020 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8004022:	f7ff fe7f 	bl	8003d24 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004026:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800402e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004030:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004032:	1a1b      	subs	r3, r3, r0
 8004034:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004036:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004038:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800403a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800403c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800403e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004040:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004044:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004048:	b995      	cbnz	r5, 8004070 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	b163      	cbz	r3, 8004068 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800404e:	f104 0010 	add.w	r0, r4, #16
 8004052:	f000 fd19 	bl	8004a88 <xTaskRemoveFromEventList>
 8004056:	b138      	cbz	r0, 8004068 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8004058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405c:	4b09      	ldr	r3, [pc, #36]	; (8004084 <xQueueGenericReset+0x80>)
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004068:	f7ff fe82 	bl	8003d70 <vPortExitCritical>
}
 800406c:	2001      	movs	r0, #1
 800406e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004070:	f104 0010 	add.w	r0, r4, #16
 8004074:	f7ff fdb6 	bl	8003be4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004078:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800407c:	f7ff fdb2 	bl	8003be4 <vListInitialise>
 8004080:	e7f2      	b.n	8004068 <xQueueGenericReset+0x64>
 8004082:	bf00      	nop
 8004084:	e000ed04 	.word	0xe000ed04

08004088 <xQueueGenericCreate>:
	{
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800408c:	4606      	mov	r6, r0
 800408e:	b950      	cbnz	r0, 80040a6 <xQueueGenericCreate+0x1e>
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	b672      	cpsid	i
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	b662      	cpsie	i
 80040a4:	e7fe      	b.n	80040a4 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a6:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80040a8:	3048      	adds	r0, #72	; 0x48
 80040aa:	f7ff fccd 	bl	8003a48 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80040ae:	4604      	mov	r4, r0
 80040b0:	b138      	cbz	r0, 80040c2 <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80040b2:	b945      	cbnz	r5, 80040c6 <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040b4:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80040b6:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040b8:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 80040ba:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040bc:	4620      	mov	r0, r4
 80040be:	f7ff ffa1 	bl	8004004 <xQueueGenericReset>
	}
 80040c2:	4620      	mov	r0, r4
 80040c4:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80040c6:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040ca:	6003      	str	r3, [r0, #0]
 80040cc:	e7f3      	b.n	80040b6 <xQueueGenericCreate+0x2e>
	...

080040d0 <xQueueGenericSend>:
{
 80040d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d4:	4689      	mov	r9, r1
 80040d6:	9201      	str	r2, [sp, #4]
 80040d8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80040da:	4604      	mov	r4, r0
 80040dc:	b950      	cbnz	r0, 80040f4 <xQueueGenericSend+0x24>
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	b672      	cpsid	i
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	b662      	cpsie	i
 80040f2:	e7fe      	b.n	80040f2 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040f4:	2900      	cmp	r1, #0
 80040f6:	f040 808c 	bne.w	8004212 <xQueueGenericSend+0x142>
 80040fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8088 	beq.w	8004212 <xQueueGenericSend+0x142>
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	b672      	cpsid	i
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	b662      	cpsie	i
 8004116:	e7fe      	b.n	8004116 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004118:	9e01      	ldr	r6, [sp, #4]
 800411a:	2e00      	cmp	r6, #0
 800411c:	f000 8084 	beq.w	8004228 <xQueueGenericSend+0x158>
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	b672      	cpsid	i
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	b662      	cpsie	i
 8004134:	e7fe      	b.n	8004134 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004136:	9d01      	ldr	r5, [sp, #4]
 8004138:	b91d      	cbnz	r5, 8004142 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 800413a:	f7ff fe19 	bl	8003d70 <vPortExitCritical>
			return errQUEUE_FULL;
 800413e:	2000      	movs	r0, #0
 8004140:	e058      	b.n	80041f4 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8004142:	b916      	cbnz	r6, 800414a <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 8004144:	a802      	add	r0, sp, #8
 8004146:	f000 fce3 	bl	8004b10 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800414a:	f7ff fe11 	bl	8003d70 <vPortExitCritical>
		vTaskSuspendAll();
 800414e:	f000 facd 	bl	80046ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004152:	f7ff fde7 	bl	8003d24 <vPortEnterCritical>
 8004156:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800415a:	2bff      	cmp	r3, #255	; 0xff
 800415c:	d101      	bne.n	8004162 <xQueueGenericSend+0x92>
 800415e:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8004162:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004166:	2bff      	cmp	r3, #255	; 0xff
 8004168:	d101      	bne.n	800416e <xQueueGenericSend+0x9e>
 800416a:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800416e:	f7ff fdff 	bl	8003d70 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004172:	a901      	add	r1, sp, #4
 8004174:	a802      	add	r0, sp, #8
 8004176:	f000 fcdb 	bl	8004b30 <xTaskCheckForTimeOut>
 800417a:	2800      	cmp	r0, #0
 800417c:	d143      	bne.n	8004206 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800417e:	f7ff fdd1 	bl	8003d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004182:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004184:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004186:	f7ff fdf3 	bl	8003d70 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800418a:	42ae      	cmp	r6, r5
 800418c:	d135      	bne.n	80041fa <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800418e:	9901      	ldr	r1, [sp, #4]
 8004190:	f104 0010 	add.w	r0, r4, #16
 8004194:	f000 fc5c 	bl	8004a50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004198:	4620      	mov	r0, r4
 800419a:	f7ff fefb 	bl	8003f94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800419e:	f000 fb41 	bl	8004824 <xTaskResumeAll>
 80041a2:	b938      	cbnz	r0, 80041b4 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 80041a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80041a8:	f8ca 3000 	str.w	r3, [sl]
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80041b6:	f7ff fdb5 	bl	8003d24 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041be:	429a      	cmp	r2, r3
 80041c0:	d301      	bcc.n	80041c6 <xQueueGenericSend+0xf6>
 80041c2:	2f02      	cmp	r7, #2
 80041c4:	d1b7      	bne.n	8004136 <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041c6:	463a      	mov	r2, r7
 80041c8:	4649      	mov	r1, r9
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff fe9a 	bl	8003f04 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041d2:	b11b      	cbz	r3, 80041dc <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041d8:	f000 fc56 	bl	8004a88 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80041dc:	b138      	cbz	r0, 80041ee <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 80041de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e2:	4b19      	ldr	r3, [pc, #100]	; (8004248 <xQueueGenericSend+0x178>)
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80041ee:	f7ff fdbf 	bl	8003d70 <vPortExitCritical>
				return pdPASS;
 80041f2:	2001      	movs	r0, #1
}
 80041f4:	b004      	add	sp, #16
 80041f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80041fa:	4620      	mov	r0, r4
 80041fc:	f7ff feca 	bl	8003f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004200:	f000 fb10 	bl	8004824 <xTaskResumeAll>
 8004204:	e7d6      	b.n	80041b4 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8004206:	4620      	mov	r0, r4
 8004208:	f7ff fec4 	bl	8003f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800420c:	f000 fb0a 	bl	8004824 <xTaskResumeAll>
 8004210:	e795      	b.n	800413e <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004212:	2f02      	cmp	r7, #2
 8004214:	d102      	bne.n	800421c <xQueueGenericSend+0x14c>
 8004216:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004218:	2b01      	cmp	r3, #1
 800421a:	d10a      	bne.n	8004232 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800421c:	f000 fccc 	bl	8004bb8 <xTaskGetSchedulerState>
 8004220:	2800      	cmp	r0, #0
 8004222:	f43f af79 	beq.w	8004118 <xQueueGenericSend+0x48>
 8004226:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004228:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800422c:	f8df a018 	ldr.w	sl, [pc, #24]	; 8004248 <xQueueGenericSend+0x178>
 8004230:	e7c1      	b.n	80041b6 <xQueueGenericSend+0xe6>
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	b672      	cpsid	i
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	b662      	cpsie	i
 8004246:	e7fe      	b.n	8004246 <xQueueGenericSend+0x176>
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <xQueueCreateMutex>:
	{
 800424c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800424e:	4602      	mov	r2, r0
 8004250:	2100      	movs	r1, #0
 8004252:	2001      	movs	r0, #1
 8004254:	f7ff ff18 	bl	8004088 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8004258:	4604      	mov	r4, r0
 800425a:	b138      	cbz	r0, 800426c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004260:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004262:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004264:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004266:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004268:	f7ff ff32 	bl	80040d0 <xQueueGenericSend>
	}
 800426c:	4620      	mov	r0, r4
 800426e:	bd10      	pop	{r4, pc}

08004270 <xQueueGenericReceive>:
{
 8004270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004274:	4688      	mov	r8, r1
 8004276:	9201      	str	r2, [sp, #4]
 8004278:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 800427a:	4604      	mov	r4, r0
 800427c:	b950      	cbnz	r0, 8004294 <xQueueGenericReceive+0x24>
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	b672      	cpsid	i
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	b662      	cpsie	i
 8004292:	e7fe      	b.n	8004292 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004294:	2900      	cmp	r1, #0
 8004296:	f040 80a9 	bne.w	80043ec <xQueueGenericReceive+0x17c>
 800429a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80a5 	beq.w	80043ec <xQueueGenericReceive+0x17c>
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	b672      	cpsid	i
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	b662      	cpsie	i
 80042b6:	e7fe      	b.n	80042b6 <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042b8:	9e01      	ldr	r6, [sp, #4]
 80042ba:	2e00      	cmp	r6, #0
 80042bc:	f000 809c 	beq.w	80043f8 <xQueueGenericReceive+0x188>
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	b672      	cpsid	i
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	b662      	cpsie	i
 80042d4:	e7fe      	b.n	80042d4 <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80042d8:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d06d      	beq.n	80043ba <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042e2:	e05f      	b.n	80043a4 <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 80042e4:	9d01      	ldr	r5, [sp, #4]
 80042e6:	b91d      	cbnz	r5, 80042f0 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 80042e8:	f7ff fd42 	bl	8003d70 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80042ec:	4628      	mov	r0, r5
 80042ee:	e067      	b.n	80043c0 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 80042f0:	b916      	cbnz	r6, 80042f8 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 80042f2:	a802      	add	r0, sp, #8
 80042f4:	f000 fc0c 	bl	8004b10 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80042f8:	f7ff fd3a 	bl	8003d70 <vPortExitCritical>
		vTaskSuspendAll();
 80042fc:	f000 f9f6 	bl	80046ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004300:	f7ff fd10 	bl	8003d24 <vPortEnterCritical>
 8004304:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004308:	2bff      	cmp	r3, #255	; 0xff
 800430a:	d101      	bne.n	8004310 <xQueueGenericReceive+0xa0>
 800430c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004310:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004314:	2bff      	cmp	r3, #255	; 0xff
 8004316:	d101      	bne.n	800431c <xQueueGenericReceive+0xac>
 8004318:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800431c:	f7ff fd28 	bl	8003d70 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004320:	a901      	add	r1, sp, #4
 8004322:	a802      	add	r0, sp, #8
 8004324:	f000 fc04 	bl	8004b30 <xTaskCheckForTimeOut>
 8004328:	2800      	cmp	r0, #0
 800432a:	d152      	bne.n	80043d2 <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 800432c:	f7ff fcfa 	bl	8003d24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004330:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004332:	f7ff fd1d 	bl	8003d70 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004336:	2d00      	cmp	r5, #0
 8004338:	d145      	bne.n	80043c6 <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	b933      	cbnz	r3, 800434c <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 800433e:	f7ff fcf1 	bl	8003d24 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004342:	6860      	ldr	r0, [r4, #4]
 8004344:	f000 fc48 	bl	8004bd8 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8004348:	f7ff fd12 	bl	8003d70 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800434c:	9901      	ldr	r1, [sp, #4]
 800434e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004352:	f000 fb7d 	bl	8004a50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004356:	4620      	mov	r0, r4
 8004358:	f7ff fe1c 	bl	8003f94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800435c:	f000 fa62 	bl	8004824 <xTaskResumeAll>
 8004360:	b938      	cbnz	r0, 8004372 <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 8004362:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004366:	f8ca 3000 	str.w	r3, [sl]
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004374:	f7ff fcd6 	bl	8003d24 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004378:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800437a:	2d00      	cmp	r5, #0
 800437c:	d0b2      	beq.n	80042e4 <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800437e:	4641      	mov	r1, r8
 8004380:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004382:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004384:	f7ff fdf1 	bl	8003f6a <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8004388:	f1b9 0f00 	cmp.w	r9, #0
 800438c:	d1a3      	bne.n	80042d6 <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800438e:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004390:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004392:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004394:	b913      	cbnz	r3, 800439c <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004396:	f000 fcb9 	bl	8004d0c <pvTaskIncrementMutexHeldCount>
 800439a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800439c:	6923      	ldr	r3, [r4, #16]
 800439e:	b163      	cbz	r3, 80043ba <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a0:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043a4:	f000 fb70 	bl	8004a88 <xTaskRemoveFromEventList>
 80043a8:	b138      	cbz	r0, 80043ba <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 80043aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <xQueueGenericReceive+0x190>)
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80043ba:	f7ff fcd9 	bl	8003d70 <vPortExitCritical>
				return pdPASS;
 80043be:	2001      	movs	r0, #1
}
 80043c0:	b004      	add	sp, #16
 80043c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7ff fde4 	bl	8003f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043cc:	f000 fa2a 	bl	8004824 <xTaskResumeAll>
 80043d0:	e7cf      	b.n	8004372 <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 80043d2:	4620      	mov	r0, r4
 80043d4:	f7ff fdde 	bl	8003f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043d8:	f000 fa24 	bl	8004824 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80043dc:	f7ff fca2 	bl	8003d24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043e0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80043e2:	f7ff fcc5 	bl	8003d70 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043e6:	2d00      	cmp	r5, #0
 80043e8:	d1c3      	bne.n	8004372 <xQueueGenericReceive+0x102>
 80043ea:	e77f      	b.n	80042ec <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ec:	f000 fbe4 	bl	8004bb8 <xTaskGetSchedulerState>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	f43f af61 	beq.w	80042b8 <xQueueGenericReceive+0x48>
 80043f6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80043f8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80043fa:	f8df a004 	ldr.w	sl, [pc, #4]	; 8004400 <xQueueGenericReceive+0x190>
 80043fe:	e7b9      	b.n	8004374 <xQueueGenericReceive+0x104>
 8004400:	e000ed04 	.word	0xe000ed04

08004404 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004404:	4a06      	ldr	r2, [pc, #24]	; (8004420 <prvResetNextTaskUnblockTime+0x1c>)
 8004406:	6813      	ldr	r3, [r2, #0]
 8004408:	6819      	ldr	r1, [r3, #0]
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <prvResetNextTaskUnblockTime+0x20>)
 800440c:	b919      	cbnz	r1, 8004416 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800440e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800441a:	68d2      	ldr	r2, [r2, #12]
 800441c:	6852      	ldr	r2, [r2, #4]
 800441e:	e7f8      	b.n	8004412 <prvResetNextTaskUnblockTime+0xe>
 8004420:	20003c74 	.word	0x20003c74
 8004424:	20003d4c 	.word	0x20003d4c

08004428 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800442a:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800442c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800442e:	4e1b      	ldr	r6, [pc, #108]	; (800449c <prvAddCurrentTaskToDelayedList+0x74>)
{
 8004430:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8004432:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004434:	6830      	ldr	r0, [r6, #0]
 8004436:	3004      	adds	r0, #4
 8004438:	f7ff fc05 	bl	8003c46 <uxListRemove>
 800443c:	4633      	mov	r3, r6
 800443e:	b940      	cbnz	r0, 8004452 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004440:	6831      	ldr	r1, [r6, #0]
 8004442:	2001      	movs	r0, #1
 8004444:	4e16      	ldr	r6, [pc, #88]	; (80044a0 <prvAddCurrentTaskToDelayedList+0x78>)
 8004446:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004448:	6832      	ldr	r2, [r6, #0]
 800444a:	4088      	lsls	r0, r1
 800444c:	ea22 0200 	bic.w	r2, r2, r0
 8004450:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004452:	1c62      	adds	r2, r4, #1
 8004454:	d107      	bne.n	8004466 <prvAddCurrentTaskToDelayedList+0x3e>
 8004456:	b137      	cbz	r7, 8004466 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	4812      	ldr	r0, [pc, #72]	; (80044a4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800445c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800445e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004462:	f7ff bbcd 	b.w	8003c00 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004466:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004468:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800446a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800446c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800446e:	d907      	bls.n	8004480 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <prvAddCurrentTaskToDelayedList+0x80>)
 8004472:	6810      	ldr	r0, [r2, #0]
 8004474:	6819      	ldr	r1, [r3, #0]
}
 8004476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800447a:	3104      	adds	r1, #4
 800447c:	f7ff bbcc 	b.w	8003c18 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004480:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <prvAddCurrentTaskToDelayedList+0x84>)
 8004482:	6810      	ldr	r0, [r2, #0]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	3104      	adds	r1, #4
 8004488:	f7ff fbc6 	bl	8003c18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800448c:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <prvAddCurrentTaskToDelayedList+0x88>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4294      	cmp	r4, r2
 8004492:	d200      	bcs.n	8004496 <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8004494:	601c      	str	r4, [r3, #0]
 8004496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004498:	20003d94 	.word	0x20003d94
 800449c:	20003c70 	.word	0x20003c70
 80044a0:	20003d1c 	.word	0x20003d1c
 80044a4:	20003d6c 	.word	0x20003d6c
 80044a8:	20003c78 	.word	0x20003c78
 80044ac:	20003c74 	.word	0x20003c74
 80044b0:	20003d4c 	.word	0x20003d4c

080044b4 <prvTaskIsTaskSuspended.part.0>:
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	b672      	cpsid	i
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	b662      	cpsie	i
 80044c8:	e7fe      	b.n	80044c8 <prvTaskIsTaskSuspended.part.0+0x14>
	...

080044cc <xTaskCreate>:
	{
 80044cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d0:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80044d4:	4680      	mov	r8, r0
 80044d6:	460f      	mov	r7, r1
 80044d8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044da:	4650      	mov	r0, sl
	{
 80044dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044de:	f7ff fab3 	bl	8003a48 <pvPortMalloc>
			if( pxStack != NULL )
 80044e2:	4605      	mov	r5, r0
 80044e4:	2800      	cmp	r0, #0
 80044e6:	f000 8096 	beq.w	8004616 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80044ea:	2054      	movs	r0, #84	; 0x54
 80044ec:	f7ff faac 	bl	8003a48 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80044f0:	4604      	mov	r4, r0
 80044f2:	2800      	cmp	r0, #0
 80044f4:	f000 808c 	beq.w	8004610 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044f8:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80044fc:	6305      	str	r5, [r0, #48]	; 0x30
 80044fe:	1e7b      	subs	r3, r7, #1
 8004500:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004504:	4455      	add	r5, sl
 8004506:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004508:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800450c:	7859      	ldrb	r1, [r3, #1]
 800450e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004512:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004516:	b109      	cbz	r1, 800451c <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004518:	42bb      	cmp	r3, r7
 800451a:	d1f7      	bne.n	800450c <xTaskCreate+0x40>
 800451c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800451e:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004522:	1d27      	adds	r7, r4, #4
 8004524:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004526:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800452a:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 800452c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8004530:	bf28      	it	cs
 8004532:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004534:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004536:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004538:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800453c:	f7ff fb5d 	bl	8003bfa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004540:	f104 0018 	add.w	r0, r4, #24
 8004544:	f7ff fb59 	bl	8003bfa <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004548:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800454c:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800454e:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004550:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004552:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004554:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004556:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004558:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800455c:	f7ff fbba 	bl	8003cd4 <pxPortInitialiseStack>
 8004560:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004562:	b106      	cbz	r6, 8004566 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004564:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8004566:	f7ff fbdd 	bl	8003d24 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800456a:	4b32      	ldr	r3, [pc, #200]	; (8004634 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 800456c:	4e32      	ldr	r6, [pc, #200]	; (8004638 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004664 <xTaskCreate+0x198>
 8004574:	3201      	adds	r2, #1
 8004576:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004578:	6835      	ldr	r5, [r6, #0]
 800457a:	2d00      	cmp	r5, #0
 800457c:	d14e      	bne.n	800461c <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800457e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d11d      	bne.n	80045c2 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004586:	eb08 0005 	add.w	r0, r8, r5
 800458a:	3514      	adds	r5, #20
 800458c:	f7ff fb2a 	bl	8003be4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004590:	2d8c      	cmp	r5, #140	; 0x8c
 8004592:	d1f8      	bne.n	8004586 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8004594:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004668 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8004598:	4d28      	ldr	r5, [pc, #160]	; (800463c <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800459a:	4648      	mov	r0, r9
 800459c:	f7ff fb22 	bl	8003be4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045a0:	4628      	mov	r0, r5
 80045a2:	f7ff fb1f 	bl	8003be4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045a6:	4826      	ldr	r0, [pc, #152]	; (8004640 <xTaskCreate+0x174>)
 80045a8:	f7ff fb1c 	bl	8003be4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80045ac:	4825      	ldr	r0, [pc, #148]	; (8004644 <xTaskCreate+0x178>)
 80045ae:	f7ff fb19 	bl	8003be4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80045b2:	4825      	ldr	r0, [pc, #148]	; (8004648 <xTaskCreate+0x17c>)
 80045b4:	f7ff fb16 	bl	8003be4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <xTaskCreate+0x180>)
 80045ba:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <xTaskCreate+0x184>)
 80045c0:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80045c2:	4a24      	ldr	r2, [pc, #144]	; (8004654 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80045c4:	2501      	movs	r5, #1
 80045c6:	4924      	ldr	r1, [pc, #144]	; (8004658 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80045c8:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80045ca:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80045cc:	3301      	adds	r3, #1
 80045ce:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80045d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80045d2:	fa05 f302 	lsl.w	r3, r5, r2
 80045d6:	4303      	orrs	r3, r0
 80045d8:	2014      	movs	r0, #20
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	4639      	mov	r1, r7
 80045de:	fb00 8002 	mla	r0, r0, r2, r8
 80045e2:	f7ff fb0d 	bl	8003c00 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80045e6:	f7ff fbc3 	bl	8003d70 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80045ea:	4b1c      	ldr	r3, [pc, #112]	; (800465c <xTaskCreate+0x190>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	b163      	cbz	r3, 800460a <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045f0:	6833      	ldr	r3, [r6, #0]
 80045f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d207      	bcs.n	800460a <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	4b18      	ldr	r3, [pc, #96]	; (8004660 <xTaskCreate+0x194>)
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	f3bf 8f6f 	isb	sy
	}
 800460a:	4628      	mov	r0, r5
 800460c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8004610:	4628      	mov	r0, r5
 8004612:	f7ff faab 	bl	8003b6c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004616:	f04f 35ff 	mov.w	r5, #4294967295
 800461a:	e7f6      	b.n	800460a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <xTaskCreate+0x190>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1ce      	bne.n	80045c2 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004624:	6833      	ldr	r3, [r6, #0]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800462a:	429a      	cmp	r2, r3
 800462c:	d8c9      	bhi.n	80045c2 <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 800462e:	6034      	str	r4, [r6, #0]
 8004630:	e7c7      	b.n	80045c2 <xTaskCreate+0xf6>
 8004632:	bf00      	nop
 8004634:	20003d08 	.word	0x20003d08
 8004638:	20003c70 	.word	0x20003c70
 800463c:	20003d34 	.word	0x20003d34
 8004640:	20003d54 	.word	0x20003d54
 8004644:	20003d80 	.word	0x20003d80
 8004648:	20003d6c 	.word	0x20003d6c
 800464c:	20003c74 	.word	0x20003c74
 8004650:	20003c78 	.word	0x20003c78
 8004654:	20003d18 	.word	0x20003d18
 8004658:	20003d1c 	.word	0x20003d1c
 800465c:	20003d68 	.word	0x20003d68
 8004660:	e000ed04 	.word	0xe000ed04
 8004664:	20003c7c 	.word	0x20003c7c
 8004668:	20003d20 	.word	0x20003d20

0800466c <vTaskStartScheduler>:
{
 800466c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800466e:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <vTaskStartScheduler+0x68>)
 8004670:	2400      	movs	r4, #0
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	4918      	ldr	r1, [pc, #96]	; (80046d8 <vTaskStartScheduler+0x6c>)
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	4623      	mov	r3, r4
 800467a:	9400      	str	r4, [sp, #0]
 800467c:	4817      	ldr	r0, [pc, #92]	; (80046dc <vTaskStartScheduler+0x70>)
 800467e:	f7ff ff25 	bl	80044cc <xTaskCreate>
	if( xReturn == pdPASS )
 8004682:	2801      	cmp	r0, #1
 8004684:	d116      	bne.n	80046b4 <vTaskStartScheduler+0x48>
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	b672      	cpsid	i
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800469a:	f04f 32ff 	mov.w	r2, #4294967295
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <vTaskStartScheduler+0x74>)
 80046a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <vTaskStartScheduler+0x78>)
 80046a4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <vTaskStartScheduler+0x7c>)
 80046a8:	601c      	str	r4, [r3, #0]
}
 80046aa:	b002      	add	sp, #8
 80046ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80046b0:	f7ff bbd4 	b.w	8003e5c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046b4:	3001      	adds	r0, #1
 80046b6:	d10a      	bne.n	80046ce <vTaskStartScheduler+0x62>
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	b672      	cpsid	i
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	b662      	cpsie	i
 80046cc:	e7fe      	b.n	80046cc <vTaskStartScheduler+0x60>
}
 80046ce:	b002      	add	sp, #8
 80046d0:	bd10      	pop	{r4, pc}
 80046d2:	bf00      	nop
 80046d4:	20003d48 	.word	0x20003d48
 80046d8:	08004f7a 	.word	0x08004f7a
 80046dc:	08004965 	.word	0x08004965
 80046e0:	20003d4c 	.word	0x20003d4c
 80046e4:	20003d68 	.word	0x20003d68
 80046e8:	20003d94 	.word	0x20003d94

080046ec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80046ec:	4a02      	ldr	r2, [pc, #8]	; (80046f8 <vTaskSuspendAll+0xc>)
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20003d14 	.word	0x20003d14

080046fc <xTaskIncrementTick>:
{
 80046fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004700:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <xTaskIncrementTick+0xfc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d155      	bne.n	80047b4 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8004708:	4b3c      	ldr	r3, [pc, #240]	; (80047fc <xTaskIncrementTick+0x100>)
 800470a:	681c      	ldr	r4, [r3, #0]
 800470c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800470e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004710:	b9cc      	cbnz	r4, 8004746 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8004712:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <xTaskIncrementTick+0x104>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	b152      	cbz	r2, 8004730 <xTaskIncrementTick+0x34>
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	b672      	cpsid	i
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	b662      	cpsie	i
 800472e:	e7fe      	b.n	800472e <xTaskIncrementTick+0x32>
 8004730:	4a34      	ldr	r2, [pc, #208]	; (8004804 <xTaskIncrementTick+0x108>)
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	6810      	ldr	r0, [r2, #0]
 8004736:	6018      	str	r0, [r3, #0]
 8004738:	6011      	str	r1, [r2, #0]
 800473a:	4a33      	ldr	r2, [pc, #204]	; (8004808 <xTaskIncrementTick+0x10c>)
 800473c:	6813      	ldr	r3, [r2, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	f7ff fe5f 	bl	8004404 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004746:	4d31      	ldr	r5, [pc, #196]	; (800480c <xTaskIncrementTick+0x110>)
 8004748:	f04f 0b00 	mov.w	fp, #0
 800474c:	4f30      	ldr	r7, [pc, #192]	; (8004810 <xTaskIncrementTick+0x114>)
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	429c      	cmp	r4, r3
 8004752:	d33e      	bcc.n	80047d2 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004754:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004800 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8004758:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004820 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800475c:	f8d8 2000 	ldr.w	r2, [r8]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	bb72      	cbnz	r2, 80047c2 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004764:	f04f 32ff 	mov.w	r2, #4294967295
 8004768:	602a      	str	r2, [r5, #0]
					break;
 800476a:	e032      	b.n	80047d2 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800476c:	f106 0a04 	add.w	sl, r6, #4
 8004770:	4650      	mov	r0, sl
 8004772:	f7ff fa68 	bl	8003c46 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004776:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004778:	b119      	cbz	r1, 8004782 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800477a:	f106 0018 	add.w	r0, r6, #24
 800477e:	f7ff fa62 	bl	8003c46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004782:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004784:	2201      	movs	r2, #1
 8004786:	f8d9 3000 	ldr.w	r3, [r9]
 800478a:	f04f 0e14 	mov.w	lr, #20
 800478e:	fa02 f100 	lsl.w	r1, r2, r0
 8004792:	4319      	orrs	r1, r3
 8004794:	4b1f      	ldr	r3, [pc, #124]	; (8004814 <xTaskIncrementTick+0x118>)
 8004796:	f8c9 1000 	str.w	r1, [r9]
 800479a:	4651      	mov	r1, sl
 800479c:	fb0e 3000 	mla	r0, lr, r0, r3
 80047a0:	f7ff fa2e 	bl	8003c00 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047a4:	6838      	ldr	r0, [r7, #0]
 80047a6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80047a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80047aa:	4291      	cmp	r1, r2
 80047ac:	bf28      	it	cs
 80047ae:	f04f 0b01 	movcs.w	fp, #1
 80047b2:	e7d3      	b.n	800475c <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80047b6:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80047ba:	6813      	ldr	r3, [r2, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e011      	b.n	80047e6 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047c2:	f8d8 2000 	ldr.w	r2, [r8]
 80047c6:	68d2      	ldr	r2, [r2, #12]
 80047c8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047ca:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80047cc:	428c      	cmp	r4, r1
 80047ce:	d2cd      	bcs.n	800476c <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 80047d0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <xTaskIncrementTick+0x118>)
 80047d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047d8:	2214      	movs	r2, #20
 80047da:	434a      	muls	r2, r1
 80047dc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80047de:	2a02      	cmp	r2, #2
 80047e0:	bf28      	it	cs
 80047e2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80047e6:	4a0d      	ldr	r2, [pc, #52]	; (800481c <xTaskIncrementTick+0x120>)
 80047e8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80047ea:	2a00      	cmp	r2, #0
 80047ec:	bf18      	it	ne
 80047ee:	f04f 0b01 	movne.w	fp, #1
}
 80047f2:	4658      	mov	r0, fp
 80047f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f8:	20003d14 	.word	0x20003d14
 80047fc:	20003d94 	.word	0x20003d94
 8004800:	20003c74 	.word	0x20003c74
 8004804:	20003c78 	.word	0x20003c78
 8004808:	20003d50 	.word	0x20003d50
 800480c:	20003d4c 	.word	0x20003d4c
 8004810:	20003c70 	.word	0x20003c70
 8004814:	20003c7c 	.word	0x20003c7c
 8004818:	20003d10 	.word	0x20003d10
 800481c:	20003d98 	.word	0x20003d98
 8004820:	20003d1c 	.word	0x20003d1c

08004824 <xTaskResumeAll>:
{
 8004824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004828:	4c32      	ldr	r4, [pc, #200]	; (80048f4 <xTaskResumeAll+0xd0>)
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	b953      	cbnz	r3, 8004844 <xTaskResumeAll+0x20>
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	b672      	cpsid	i
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	b662      	cpsie	i
 8004842:	e7fe      	b.n	8004842 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8004844:	f7ff fa6e 	bl	8003d24 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	3b01      	subs	r3, #1
 800484c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800484e:	6824      	ldr	r4, [r4, #0]
 8004850:	b12c      	cbz	r4, 800485e <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8004852:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004854:	f7ff fa8c 	bl	8003d70 <vPortExitCritical>
}
 8004858:	4620      	mov	r0, r4
 800485a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <xTaskResumeAll+0xd4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f5      	beq.n	8004852 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004866:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004910 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 800486a:	4f24      	ldr	r7, [pc, #144]	; (80048fc <xTaskResumeAll+0xd8>)
 800486c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004914 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004870:	f8d9 3000 	ldr.w	r3, [r9]
 8004874:	b9e3      	cbnz	r3, 80048b0 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8004876:	b10c      	cbz	r4, 800487c <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8004878:	f7ff fdc4 	bl	8004404 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800487c:	4d20      	ldr	r5, [pc, #128]	; (8004900 <xTaskResumeAll+0xdc>)
 800487e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004880:	b144      	cbz	r4, 8004894 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8004882:	4e20      	ldr	r6, [pc, #128]	; (8004904 <xTaskResumeAll+0xe0>)
 8004884:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004886:	f7ff ff39 	bl	80046fc <xTaskIncrementTick>
 800488a:	b100      	cbz	r0, 800488e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 800488c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800488e:	3c01      	subs	r4, #1
 8004890:	d1f9      	bne.n	8004886 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8004892:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004894:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <xTaskResumeAll+0xe0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0da      	beq.n	8004852 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800489c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a0:	4b19      	ldr	r3, [pc, #100]	; (8004908 <xTaskResumeAll+0xe4>)
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80048ac:	2401      	movs	r4, #1
 80048ae:	e7d1      	b.n	8004854 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048b0:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80048b4:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048b6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b8:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048ba:	f104 0018 	add.w	r0, r4, #24
 80048be:	f7ff f9c2 	bl	8003c46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff f9bf 	bl	8003c46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80048ca:	6839      	ldr	r1, [r7, #0]
 80048cc:	2014      	movs	r0, #20
 80048ce:	fa05 f302 	lsl.w	r3, r5, r2
 80048d2:	fb00 8002 	mla	r0, r0, r2, r8
 80048d6:	430b      	orrs	r3, r1
 80048d8:	4631      	mov	r1, r6
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	f7ff f990 	bl	8003c00 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <xTaskResumeAll+0xe8>)
 80048e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d3c1      	bcc.n	8004870 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <xTaskResumeAll+0xe0>)
 80048ee:	601d      	str	r5, [r3, #0]
 80048f0:	e7be      	b.n	8004870 <xTaskResumeAll+0x4c>
 80048f2:	bf00      	nop
 80048f4:	20003d14 	.word	0x20003d14
 80048f8:	20003d08 	.word	0x20003d08
 80048fc:	20003d1c 	.word	0x20003d1c
 8004900:	20003d10 	.word	0x20003d10
 8004904:	20003d98 	.word	0x20003d98
 8004908:	e000ed04 	.word	0xe000ed04
 800490c:	20003c70 	.word	0x20003c70
 8004910:	20003d54 	.word	0x20003d54
 8004914:	20003c7c 	.word	0x20003c7c

08004918 <vTaskDelay>:
	{
 8004918:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800491a:	b940      	cbnz	r0, 800492e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800491c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004920:	4b0e      	ldr	r3, [pc, #56]	; (800495c <vTaskDelay+0x44>)
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <vTaskDelay+0x48>)
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	b151      	cbz	r1, 800494a <vTaskDelay+0x32>
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	b672      	cpsid	i
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	b662      	cpsie	i
 8004948:	e7fe      	b.n	8004948 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800494a:	f7ff fecf 	bl	80046ec <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800494e:	f7ff fd6b 	bl	8004428 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004952:	f7ff ff67 	bl	8004824 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004956:	2800      	cmp	r0, #0
 8004958:	d0e0      	beq.n	800491c <vTaskDelay+0x4>
 800495a:	bd08      	pop	{r3, pc}
 800495c:	e000ed04 	.word	0xe000ed04
 8004960:	20003d14 	.word	0x20003d14

08004964 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004964:	4e17      	ldr	r6, [pc, #92]	; (80049c4 <prvIdleTask+0x60>)
{
 8004966:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004968:	4c17      	ldr	r4, [pc, #92]	; (80049c8 <prvIdleTask+0x64>)
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	b963      	cbnz	r3, 8004988 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <prvIdleTask+0x68>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d9f8      	bls.n	8004968 <prvIdleTask+0x4>
				taskYIELD();
 8004976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <prvIdleTask+0x6c>)
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	e7ef      	b.n	8004968 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8004988:	f7ff feb0 	bl	80046ec <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800498c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800498e:	f7ff ff49 	bl	8004824 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8004992:	2d00      	cmp	r5, #0
 8004994:	d0e9      	beq.n	800496a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8004996:	f7ff f9c5 	bl	8003d24 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800499a:	68f3      	ldr	r3, [r6, #12]
 800499c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800499e:	1d28      	adds	r0, r5, #4
 80049a0:	f7ff f951 	bl	8003c46 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80049a4:	4a0b      	ldr	r2, [pc, #44]	; (80049d4 <prvIdleTask+0x70>)
 80049a6:	6813      	ldr	r3, [r2, #0]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80049b2:	f7ff f9dd 	bl	8003d70 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80049b6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80049b8:	f7ff f8d8 	bl	8003b6c <vPortFree>
			vPortFree( pxTCB );
 80049bc:	4628      	mov	r0, r5
 80049be:	f7ff f8d5 	bl	8003b6c <vPortFree>
 80049c2:	e7d2      	b.n	800496a <prvIdleTask+0x6>
 80049c4:	20003d80 	.word	0x20003d80
 80049c8:	20003d0c 	.word	0x20003d0c
 80049cc:	20003c7c 	.word	0x20003c7c
 80049d0:	e000ed04 	.word	0xe000ed04
 80049d4:	20003d08 	.word	0x20003d08

080049d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049d8:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <vTaskSwitchContext+0x64>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b18      	ldr	r3, [pc, #96]	; (8004a40 <vTaskSwitchContext+0x68>)
{
 80049de:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049e0:	b112      	cbz	r2, 80049e8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80049e2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80049e8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049ea:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <vTaskSwitchContext+0x6c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80049ee:	fab3 f383 	clz	r3, r3
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2214      	movs	r2, #20
 80049f6:	4914      	ldr	r1, [pc, #80]	; (8004a48 <vTaskSwitchContext+0x70>)
 80049f8:	f1c3 031f 	rsb	r3, r3, #31
 80049fc:	435a      	muls	r2, r3
 80049fe:	588c      	ldr	r4, [r1, r2]
 8004a00:	1888      	adds	r0, r1, r2
 8004a02:	b954      	cbnz	r4, 8004a1a <vTaskSwitchContext+0x42>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	b672      	cpsid	i
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	b662      	cpsie	i
 8004a18:	e7fe      	b.n	8004a18 <vTaskSwitchContext+0x40>
 8004a1a:	6844      	ldr	r4, [r0, #4]
 8004a1c:	3208      	adds	r2, #8
 8004a1e:	6864      	ldr	r4, [r4, #4]
 8004a20:	440a      	add	r2, r1
 8004a22:	4294      	cmp	r4, r2
 8004a24:	6044      	str	r4, [r0, #4]
 8004a26:	bf04      	itt	eq
 8004a28:	6862      	ldreq	r2, [r4, #4]
 8004a2a:	6042      	streq	r2, [r0, #4]
 8004a2c:	2214      	movs	r2, #20
 8004a2e:	fb02 1303 	mla	r3, r2, r3, r1
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <vTaskSwitchContext+0x74>)
 8004a38:	e7d4      	b.n	80049e4 <vTaskSwitchContext+0xc>
 8004a3a:	bf00      	nop
 8004a3c:	20003d14 	.word	0x20003d14
 8004a40:	20003d98 	.word	0x20003d98
 8004a44:	20003d1c 	.word	0x20003d1c
 8004a48:	20003c7c 	.word	0x20003c7c
 8004a4c:	20003c70 	.word	0x20003c70

08004a50 <vTaskPlaceOnEventList>:
{
 8004a50:	b510      	push	{r4, lr}
 8004a52:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004a54:	b950      	cbnz	r0, 8004a6c <vTaskPlaceOnEventList+0x1c>
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	b672      	cpsid	i
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	b662      	cpsie	i
 8004a6a:	e7fe      	b.n	8004a6a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <vTaskPlaceOnEventList+0x34>)
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	3118      	adds	r1, #24
 8004a72:	f7ff f8d1 	bl	8003c18 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a76:	4620      	mov	r0, r4
 8004a78:	2101      	movs	r1, #1
}
 8004a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a7e:	f7ff bcd3 	b.w	8004428 <prvAddCurrentTaskToDelayedList>
 8004a82:	bf00      	nop
 8004a84:	20003c70 	.word	0x20003c70

08004a88 <xTaskRemoveFromEventList>:
{
 8004a88:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004a8a:	68c3      	ldr	r3, [r0, #12]
 8004a8c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004a8e:	b954      	cbnz	r4, 8004aa6 <xTaskRemoveFromEventList+0x1e>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	b672      	cpsid	i
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	b662      	cpsie	i
 8004aa4:	e7fe      	b.n	8004aa4 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004aa6:	f104 0518 	add.w	r5, r4, #24
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f7ff f8cb 	bl	8003c46 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <xTaskRemoveFromEventList+0x70>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	b9db      	cbnz	r3, 8004aee <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ab6:	1d25      	adds	r5, r4, #4
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f7ff f8c4 	bl	8003c46 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004abe:	490f      	ldr	r1, [pc, #60]	; (8004afc <xTaskRemoveFromEventList+0x74>)
 8004ac0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	6808      	ldr	r0, [r1, #0]
 8004ac6:	4093      	lsls	r3, r2
 8004ac8:	4303      	orrs	r3, r0
 8004aca:	2014      	movs	r0, #20
 8004acc:	600b      	str	r3, [r1, #0]
 8004ace:	4629      	mov	r1, r5
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <xTaskRemoveFromEventList+0x78>)
 8004ad2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ad6:	f7ff f893 	bl	8003c00 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <xTaskRemoveFromEventList+0x7c>)
 8004adc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d906      	bls.n	8004af4 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <xTaskRemoveFromEventList+0x80>)
 8004aea:	6018      	str	r0, [r3, #0]
 8004aec:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004aee:	4629      	mov	r1, r5
 8004af0:	4806      	ldr	r0, [pc, #24]	; (8004b0c <xTaskRemoveFromEventList+0x84>)
 8004af2:	e7f0      	b.n	8004ad6 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8004af4:	2000      	movs	r0, #0
}
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	20003d14 	.word	0x20003d14
 8004afc:	20003d1c 	.word	0x20003d1c
 8004b00:	20003c7c 	.word	0x20003c7c
 8004b04:	20003c70 	.word	0x20003c70
 8004b08:	20003d98 	.word	0x20003d98
 8004b0c:	20003d54 	.word	0x20003d54

08004b10 <vTaskSetTimeOutState>:
{
 8004b10:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8004b12:	b908      	cbnz	r0, 8004b18 <vTaskSetTimeOutState+0x8>
 8004b14:	f7ff fcce 	bl	80044b4 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <vTaskSetTimeOutState+0x18>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b1e:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <vTaskSetTimeOutState+0x1c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6043      	str	r3, [r0, #4]
 8004b24:	bd08      	pop	{r3, pc}
 8004b26:	bf00      	nop
 8004b28:	20003d50 	.word	0x20003d50
 8004b2c:	20003d94 	.word	0x20003d94

08004b30 <xTaskCheckForTimeOut>:
{
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8004b34:	4604      	mov	r4, r0
 8004b36:	b950      	cbnz	r0, 8004b4e <xTaskCheckForTimeOut+0x1e>
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	b672      	cpsid	i
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	b662      	cpsie	i
 8004b4c:	e7fe      	b.n	8004b4c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8004b4e:	b951      	cbnz	r1, 8004b66 <xTaskCheckForTimeOut+0x36>
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	b672      	cpsid	i
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	b662      	cpsie	i
 8004b64:	e7fe      	b.n	8004b64 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8004b66:	f7ff f8dd 	bl	8003d24 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <xTaskCheckForTimeOut+0x74>)
 8004b6c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	d010      	beq.n	8004b96 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b74:	4a0c      	ldr	r2, [pc, #48]	; (8004ba8 <xTaskCheckForTimeOut+0x78>)
 8004b76:	6820      	ldr	r0, [r4, #0]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	4290      	cmp	r0, r2
 8004b7c:	6862      	ldr	r2, [r4, #4]
 8004b7e:	d001      	beq.n	8004b84 <xTaskCheckForTimeOut+0x54>
 8004b80:	4291      	cmp	r1, r2
 8004b82:	d20d      	bcs.n	8004ba0 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b84:	1a88      	subs	r0, r1, r2
 8004b86:	4283      	cmp	r3, r0
 8004b88:	d90a      	bls.n	8004ba0 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004b8a:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 8004b8c:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004b8e:	4413      	add	r3, r2
 8004b90:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004b92:	f7ff ffbd 	bl	8004b10 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8004b96:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004b98:	f7ff f8ea 	bl	8003d70 <vPortExitCritical>
}
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8004ba0:	2401      	movs	r4, #1
 8004ba2:	e7f9      	b.n	8004b98 <xTaskCheckForTimeOut+0x68>
 8004ba4:	20003d94 	.word	0x20003d94
 8004ba8:	20003d50 	.word	0x20003d50

08004bac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004bac:	2201      	movs	r2, #1
 8004bae:	4b01      	ldr	r3, [pc, #4]	; (8004bb4 <vTaskMissedYield+0x8>)
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	4770      	bx	lr
 8004bb4:	20003d98 	.word	0x20003d98

08004bb8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <xTaskGetSchedulerState+0x18>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	b133      	cbz	r3, 8004bcc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <xTaskGetSchedulerState+0x1c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2002      	moveq	r0, #2
 8004bc8:	2000      	movne	r0, #0
 8004bca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bcc:	2001      	movs	r0, #1
	}
 8004bce:	4770      	bx	lr
 8004bd0:	20003d68 	.word	0x20003d68
 8004bd4:	20003d14 	.word	0x20003d14

08004bd8 <vTaskPriorityInherit>:
	{
 8004bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8004bdc:	4604      	mov	r4, r0
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d038      	beq.n	8004c54 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004be2:	4d1d      	ldr	r5, [pc, #116]	; (8004c58 <vTaskPriorityInherit+0x80>)
 8004be4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004be6:	682a      	ldr	r2, [r5, #0]
 8004be8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d232      	bcs.n	8004c54 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bee:	6982      	ldr	r2, [r0, #24]
 8004bf0:	2a00      	cmp	r2, #0
 8004bf2:	db04      	blt.n	8004bfe <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf4:	682a      	ldr	r2, [r5, #0]
 8004bf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bf8:	f1c2 0207 	rsb	r2, r2, #7
 8004bfc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004bfe:	4e17      	ldr	r6, [pc, #92]	; (8004c5c <vTaskPriorityInherit+0x84>)
 8004c00:	2714      	movs	r7, #20
 8004c02:	6962      	ldr	r2, [r4, #20]
 8004c04:	fb07 6303 	mla	r3, r7, r3, r6
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d120      	bne.n	8004c4e <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c0c:	f104 0804 	add.w	r8, r4, #4
 8004c10:	4640      	mov	r0, r8
 8004c12:	f7ff f818 	bl	8003c46 <uxListRemove>
 8004c16:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <vTaskPriorityInherit+0x88>)
 8004c18:	b948      	cbnz	r0, 8004c2e <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004c1c:	4347      	muls	r7, r0
 8004c1e:	59f3      	ldr	r3, [r6, r7]
 8004c20:	b92b      	cbnz	r3, 8004c2e <vTaskPriorityInherit+0x56>
 8004c22:	2101      	movs	r1, #1
 8004c24:	6813      	ldr	r3, [r2, #0]
 8004c26:	4081      	lsls	r1, r0
 8004c28:	ea23 0301 	bic.w	r3, r3, r1
 8004c2c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c2e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8004c30:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004c34:	2301      	movs	r3, #1
 8004c36:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c38:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	2314      	movs	r3, #20
 8004c42:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8004c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8004c4a:	f7fe bfd9 	b.w	8003c00 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c58:	20003c70 	.word	0x20003c70
 8004c5c:	20003c7c 	.word	0x20003c7c
 8004c60:	20003d1c 	.word	0x20003d1c

08004c64 <xTaskPriorityDisinherit>:
	{
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004c66:	4604      	mov	r4, r0
 8004c68:	b908      	cbnz	r0, 8004c6e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004c6e:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <xTaskPriorityDisinherit+0x9c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4298      	cmp	r0, r3
 8004c74:	d00a      	beq.n	8004c8c <xTaskPriorityDisinherit+0x28>
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	b672      	cpsid	i
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	b662      	cpsie	i
 8004c8a:	e7fe      	b.n	8004c8a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c8c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004c8e:	b953      	cbnz	r3, 8004ca6 <xTaskPriorityDisinherit+0x42>
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	b672      	cpsid	i
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	b662      	cpsie	i
 8004ca4:	e7fe      	b.n	8004ca4 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ca6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8004ca8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004caa:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8004cac:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cae:	4291      	cmp	r1, r2
 8004cb0:	d0db      	beq.n	8004c6a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1d9      	bne.n	8004c6a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cb6:	1d05      	adds	r5, r0, #4
 8004cb8:	4e12      	ldr	r6, [pc, #72]	; (8004d04 <xTaskPriorityDisinherit+0xa0>)
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f7fe ffc3 	bl	8003c46 <uxListRemove>
 8004cc0:	4a11      	ldr	r2, [pc, #68]	; (8004d08 <xTaskPriorityDisinherit+0xa4>)
 8004cc2:	b950      	cbnz	r0, 8004cda <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004cc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004cc6:	2114      	movs	r1, #20
 8004cc8:	4379      	muls	r1, r7
 8004cca:	5873      	ldr	r3, [r6, r1]
 8004ccc:	b92b      	cbnz	r3, 8004cda <xTaskPriorityDisinherit+0x76>
 8004cce:	2001      	movs	r0, #1
 8004cd0:	6813      	ldr	r3, [r2, #0]
 8004cd2:	40b8      	lsls	r0, r7
 8004cd4:	ea23 0300 	bic.w	r3, r3, r0
 8004cd8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cda:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cdc:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ce0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ce4:	2401      	movs	r4, #1
 8004ce6:	6811      	ldr	r1, [r2, #0]
 8004ce8:	fa04 f003 	lsl.w	r0, r4, r3
 8004cec:	4308      	orrs	r0, r1
 8004cee:	4629      	mov	r1, r5
 8004cf0:	6010      	str	r0, [r2, #0]
 8004cf2:	2014      	movs	r0, #20
 8004cf4:	fb00 6003 	mla	r0, r0, r3, r6
 8004cf8:	f7fe ff82 	bl	8003c00 <vListInsertEnd>
					xReturn = pdTRUE;
 8004cfc:	4620      	mov	r0, r4
	}
 8004cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d00:	20003c70 	.word	0x20003c70
 8004d04:	20003c7c 	.word	0x20003c7c
 8004d08:	20003d1c 	.word	0x20003d1c

08004d0c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <pvTaskIncrementMutexHeldCount+0x14>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	b11a      	cbz	r2, 8004d1a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004d12:	6819      	ldr	r1, [r3, #0]
 8004d14:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8004d16:	3201      	adds	r2, #1
 8004d18:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8004d1a:	6818      	ldr	r0, [r3, #0]
	}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20003c70 	.word	0x20003c70

08004d24 <__libc_init_array>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	4e0d      	ldr	r6, [pc, #52]	; (8004d5c <__libc_init_array+0x38>)
 8004d28:	4c0d      	ldr	r4, [pc, #52]	; (8004d60 <__libc_init_array+0x3c>)
 8004d2a:	1ba4      	subs	r4, r4, r6
 8004d2c:	10a4      	asrs	r4, r4, #2
 8004d2e:	2500      	movs	r5, #0
 8004d30:	42a5      	cmp	r5, r4
 8004d32:	d109      	bne.n	8004d48 <__libc_init_array+0x24>
 8004d34:	4e0b      	ldr	r6, [pc, #44]	; (8004d64 <__libc_init_array+0x40>)
 8004d36:	4c0c      	ldr	r4, [pc, #48]	; (8004d68 <__libc_init_array+0x44>)
 8004d38:	f000 f82c 	bl	8004d94 <_init>
 8004d3c:	1ba4      	subs	r4, r4, r6
 8004d3e:	10a4      	asrs	r4, r4, #2
 8004d40:	2500      	movs	r5, #0
 8004d42:	42a5      	cmp	r5, r4
 8004d44:	d105      	bne.n	8004d52 <__libc_init_array+0x2e>
 8004d46:	bd70      	pop	{r4, r5, r6, pc}
 8004d48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d4c:	4798      	blx	r3
 8004d4e:	3501      	adds	r5, #1
 8004d50:	e7ee      	b.n	8004d30 <__libc_init_array+0xc>
 8004d52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d56:	4798      	blx	r3
 8004d58:	3501      	adds	r5, #1
 8004d5a:	e7f2      	b.n	8004d42 <__libc_init_array+0x1e>
 8004d5c:	08004f80 	.word	0x08004f80
 8004d60:	08004f80 	.word	0x08004f80
 8004d64:	08004f80 	.word	0x08004f80
 8004d68:	08004f84 	.word	0x08004f84

08004d6c <memcpy>:
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	1e43      	subs	r3, r0, #1
 8004d70:	440a      	add	r2, r1
 8004d72:	4291      	cmp	r1, r2
 8004d74:	d100      	bne.n	8004d78 <memcpy+0xc>
 8004d76:	bd10      	pop	{r4, pc}
 8004d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d80:	e7f7      	b.n	8004d72 <memcpy+0x6>

08004d82 <memset>:
 8004d82:	4402      	add	r2, r0
 8004d84:	4603      	mov	r3, r0
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d100      	bne.n	8004d8c <memset+0xa>
 8004d8a:	4770      	bx	lr
 8004d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d90:	e7f9      	b.n	8004d86 <memset+0x4>
	...

08004d94 <_init>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	bf00      	nop
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr

08004da0 <_fini>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr
