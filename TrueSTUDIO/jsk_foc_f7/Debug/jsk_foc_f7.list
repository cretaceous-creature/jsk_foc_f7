
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080056a0  080056a0  000156a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08005888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004778  20000008  08005890  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004780  08005890  00024780  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000fc03  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003dc9f  00000000  00000000  0002fc39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007039  00000000  00000000  0006d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001938  00000000  00000000  00074918  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002018  00000000  00000000  00076250  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001326a  00000000  00000000  00078268  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000094db  00000000  00000000  0008b4d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000949ad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004a58  00000000  00000000  00094a2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000008 	.word	0x20000008
 800021c:	00000000 	.word	0x00000000
 8000220:	08005688 	.word	0x08005688

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000000c 	.word	0x2000000c
 800023c:	08005688 	.word	0x08005688

08000240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
  ldr  r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800025e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800026a:	f001 f9ff 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f005 f9d3 	bl	8005618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000272:	f000 fdbb 	bl	8000dec <main>
  bx  lr    
 8000276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000278:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800027c:	08005888 	.word	0x08005888
  ldr  r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000284:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000288:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800028c:	20004780 	.word	0x20004780

08000290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC_IRQHandler>
	...

08000294 <HAL_UART_ErrorCallback>:
extern osMessageQId enchallQueueHandle;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	//error...
	_Error_Handler("omg",11);
 8000294:	210b      	movs	r1, #11
 8000296:	4801      	ldr	r0, [pc, #4]	; (800029c <HAL_UART_ErrorCallback+0x8>)
 8000298:	f000 be12 	b.w	8000ec0 <_Error_Handler>
 800029c:	08005774 	.word	0x08005774

080002a0 <HAL_UART_RxCpltCallback>:
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(huart->Instance==huart4.Instance) //not necessary to check..
 80002a2:	4b27      	ldr	r3, [pc, #156]	; (8000340 <HAL_UART_RxCpltCallback+0xa0>)
 80002a4:	6802      	ldr	r2, [r0, #0]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d147      	bne.n	800033c <HAL_UART_RxCpltCallback+0x9c>
	{
		for(int i=0; i<5; i++)
		{
			if(enchall_buff[i] == TXHEADER)
 80002ac:	4f25      	ldr	r7, [pc, #148]	; (8000344 <HAL_UART_RxCpltCallback+0xa4>)
 80002ae:	2401      	movs	r4, #1
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
				{
					//then we can obtain the correct bytes...
					enchall.mseq_out = enchall_buff[s]&0x01;
 80002b0:	4d25      	ldr	r5, [pc, #148]	; (8000348 <HAL_UART_RxCpltCallback+0xa8>)
 80002b2:	463e      	mov	r6, r7
			if(enchall_buff[i] == TXHEADER)
 80002b4:	19e3      	adds	r3, r4, r7
 80002b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80002ba:	2bf8      	cmp	r3, #248	; 0xf8
 80002bc:	d136      	bne.n	800032c <HAL_UART_RxCpltCallback+0x8c>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002be:	2c05      	cmp	r4, #5
 80002c0:	d005      	beq.n	80002ce <HAL_UART_RxCpltCallback+0x2e>
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002c2:	2c04      	cmp	r4, #4
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002c4:	b2e2      	uxtb	r2, r4
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002c6:	d103      	bne.n	80002d0 <HAL_UART_RxCpltCallback+0x30>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002c8:	4622      	mov	r2, r4
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002ca:	2300      	movs	r3, #0
 80002cc:	e002      	b.n	80002d4 <HAL_UART_RxCpltCallback+0x34>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002ce:	2200      	movs	r2, #0
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002d0:	1c53      	adds	r3, r2, #1
 80002d2:	b2db      	uxtb	r3, r3
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 80002d4:	5cb2      	ldrb	r2, [r6, r2]
 80002d6:	0611      	lsls	r1, r2, #24
 80002d8:	d528      	bpl.n	800032c <HAL_UART_RxCpltCallback+0x8c>
 80002da:	5cf1      	ldrb	r1, [r6, r3]
 80002dc:	f011 0f60 	tst.w	r1, #96	; 0x60
 80002e0:	d024      	beq.n	800032c <HAL_UART_RxCpltCallback+0x8c>
					enchall.mseq_out = enchall_buff[s]&0x01;
 80002e2:	f002 0001 	and.w	r0, r2, #1
					enchall.auxbit_in = (enchall_buff[s]&0x02)>>1;
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
					enchall.calc_tag = (enchall_buff[s]&0x60)>>5; // 0110|0000
					//next byte
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 80002e6:	f001 011f 	and.w	r1, r1, #31
					//next two bytes
					uint8_t b1 = t==4?0:t+1;
 80002ea:	2b04      	cmp	r3, #4
					enchall.mseq_out = enchall_buff[s]&0x01;
 80002ec:	7028      	strb	r0, [r5, #0]
					enchall.auxbit_in = (enchall_buff[s]&0x02)>>1;
 80002ee:	f3c2 0040 	ubfx	r0, r2, #1, #1
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 80002f2:	7129      	strb	r1, [r5, #4]
					enchall.auxbit_in = (enchall_buff[s]&0x02)>>1;
 80002f4:	7068      	strb	r0, [r5, #1]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 80002f6:	f3c2 0082 	ubfx	r0, r2, #2, #3
					enchall.calc_tag = (enchall_buff[s]&0x60)>>5; // 0110|0000
 80002fa:	f3c2 1241 	ubfx	r2, r2, #5, #2
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 80002fe:	70a8      	strb	r0, [r5, #2]
					enchall.calc_tag = (enchall_buff[s]&0x60)>>5; // 0110|0000
 8000300:	70ea      	strb	r2, [r5, #3]
					uint8_t b1 = t==4?0:t+1;
 8000302:	d005      	beq.n	8000310 <HAL_UART_RxCpltCallback+0x70>
 8000304:	3301      	adds	r3, #1
 8000306:	b2db      	uxtb	r3, r3
					uint8_t b2 = b1==4?0:b1+1;
 8000308:	2b04      	cmp	r3, #4
 800030a:	d102      	bne.n	8000312 <HAL_UART_RxCpltCallback+0x72>
 800030c:	2200      	movs	r2, #0
 800030e:	e002      	b.n	8000316 <HAL_UART_RxCpltCallback+0x76>
					uint8_t b1 = t==4?0:t+1;
 8000310:	2300      	movs	r3, #0
					uint8_t b2 = b1==4?0:b1+1;
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	b2d2      	uxtb	r2, r2
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000316:	5cf3      	ldrb	r3, [r6, r3]
					enchall.enc_low = enchall_buff[b2]&0xff;
					xQueueSendFromISR(enchallQueueHandle,&enchall,0);
 8000318:	4629      	mov	r1, r5
 800031a:	480c      	ldr	r0, [pc, #48]	; (800034c <HAL_UART_RxCpltCallback+0xac>)
					enchall.enc_high = enchall_buff[b1]&0xff;
 800031c:	716b      	strb	r3, [r5, #5]
					enchall.enc_low = enchall_buff[b2]&0xff;
 800031e:	5cb3      	ldrb	r3, [r6, r2]
					xQueueSendFromISR(enchallQueueHandle,&enchall,0);
 8000320:	6800      	ldr	r0, [r0, #0]
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000322:	71ab      	strb	r3, [r5, #6]
					xQueueSendFromISR(enchallQueueHandle,&enchall,0);
 8000324:	2300      	movs	r3, #0
 8000326:	461a      	mov	r2, r3
 8000328:	f004 fb5c 	bl	80049e4 <xQueueGenericSendFromISR>
 800032c:	3401      	adds	r4, #1
		for(int i=0; i<5; i++)
 800032e:	2c06      	cmp	r4, #6
 8000330:	d1c0      	bne.n	80002b4 <HAL_UART_RxCpltCallback+0x14>
				}
			}
		}
		//continue DMA
		HAL_UART_DMAResume(&huart4);
 8000332:	4803      	ldr	r0, [pc, #12]	; (8000340 <HAL_UART_RxCpltCallback+0xa0>)
	}
}
 8000334:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_UART_DMAResume(&huart4);
 8000338:	f003 b982 	b.w	8003640 <HAL_UART_DMAResume>
 800033c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800033e:	bf00      	nop
 8000340:	2000430c 	.word	0x2000430c
 8000344:	20003da4 	.word	0x20003da4
 8000348:	20000024 	.word	0x20000024
 800034c:	20003fd4 	.word	0x20003fd4

08000350 <StartledblueTask>:
/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000350:	4c05      	ldr	r4, [pc, #20]	; (8000368 <StartledblueTask+0x18>)
{
 8000352:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000354:	4620      	mov	r0, r4
 8000356:	2104      	movs	r1, #4
 8000358:	f001 fe15 	bl	8001f86 <HAL_GPIO_TogglePin>
		osDelay(500);
 800035c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000360:	f003 febf 	bl	80040e2 <osDelay>
 8000364:	e7f6      	b.n	8000354 <StartledblueTask+0x4>
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <StartledgreenTask>:
/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 800036c:	4c05      	ldr	r4, [pc, #20]	; (8000384 <StartledgreenTask+0x18>)
{
 800036e:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000370:	4620      	mov	r0, r4
 8000372:	2108      	movs	r1, #8
 8000374:	f001 fe07 	bl	8001f86 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037c:	f003 feb1 	bl	80040e2 <osDelay>
 8000380:	e7f6      	b.n	8000370 <StartledgreenTask+0x4>
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 8000388:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 800038a:	2032      	movs	r0, #50	; 0x32
 800038c:	f003 fea9 	bl	80040e2 <osDelay>
 8000390:	e7fb      	b.n	800038a <StartiwdgTask+0x2>
	...

08000394 <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000398:	f240 36f3 	movw	r6, #1011	; 0x3f3
 800039c:	22c8      	movs	r2, #200	; 0xc8
 800039e:	2100      	movs	r1, #0
 80003a0:	a802      	add	r0, sp, #8
 80003a2:	f240 35f5 	movw	r5, #1013	; 0x3f5
 80003a6:	f005 f966 	bl	8005676 <memset>
 80003aa:	f8ad 601e 	strh.w	r6, [sp, #30]
 80003ae:	f240 76db 	movw	r6, #2011	; 0x7db
 80003b2:	f240 71dd 	movw	r1, #2013	; 0x7dd
 80003b6:	f240 72df 	movw	r2, #2015	; 0x7df
 80003ba:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80003be:	f8ad 6020 	strh.w	r6, [sp, #32]
 80003c2:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
 80003c6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80003ca:	f240 34f7 	movw	r4, #1015	; 0x3f7
 80003ce:	f8ad 100a 	strh.w	r1, [sp, #10]
 80003d2:	f240 77dc 	movw	r7, #2012	; 0x7dc
 80003d6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80003da:	f8ad 2012 	strh.w	r2, [sp, #18]
 80003de:	f8ad 0014 	strh.w	r0, [sp, #20]
 80003e2:	f8ad 1018 	strh.w	r1, [sp, #24]
 80003e6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80003ea:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80003ee:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 80003f2:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80003f6:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80003fa:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80003fe:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000402:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 8000406:	f240 71e5 	movw	r1, #2021	; 0x7e5
 800040a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800040e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8000412:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8000416:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 800041a:	f240 70e6 	movw	r0, #2022	; 0x7e6
 800041e:	f8ad 5008 	strh.w	r5, [sp, #8]
 8000422:	f8ad 300e 	strh.w	r3, [sp, #14]
 8000426:	f8ad 4010 	strh.w	r4, [sp, #16]
 800042a:	f8ad 5016 	strh.w	r5, [sp, #22]
 800042e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000432:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8000436:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 800043a:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 800043e:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
 8000442:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8000446:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 800044a:	f8ad 701a 	strh.w	r7, [sp, #26]
 800044e:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 8000452:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8000456:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 800045a:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800045e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8000462:	f240 33ff 	movw	r3, #1023	; 0x3ff
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
	for(;;)
	{
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000466:	4c29      	ldr	r4, [pc, #164]	; (800050c <StartbuzzerrythmTask+0x178>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000468:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800046c:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8000470:	4625      	mov	r5, r4
		{
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 8000472:	4e27      	ldr	r6, [pc, #156]	; (8000510 <StartbuzzerrythmTask+0x17c>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000474:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8000478:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800047c:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8000480:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 8000484:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8000488:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 800048c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 8000490:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8000494:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000498:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 800049c:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 80004a0:	f44f 637b 	mov.w	r3, #4016	; 0xfb0
 80004a4:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 80004a8:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	volatile uint16_t i = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	f8ad 3006 	strh.w	r3, [sp, #6]
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 80004b2:	2300      	movs	r3, #0
 80004b4:	6820      	ldr	r0, [r4, #0]
 80004b6:	461a      	mov	r2, r3
 80004b8:	4619      	mov	r1, r3
 80004ba:	f004 fafd 	bl	8004ab8 <xQueueGenericReceive>
 80004be:	2801      	cmp	r0, #1
 80004c0:	d11d      	bne.n	80004fe <StartbuzzerrythmTask+0x16a>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 80004c2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80004c6:	2300      	movs	r3, #0
 80004c8:	a802      	add	r0, sp, #8
 80004ca:	b289      	uxth	r1, r1
 80004cc:	461a      	mov	r2, r3
 80004ce:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80004d2:	6830      	ldr	r0, [r6, #0]
 80004d4:	f004 f9b6 	bl	8004844 <xQueueGenericSend>
 80004d8:	2801      	cmp	r0, #1
 80004da:	d10a      	bne.n	80004f2 <StartbuzzerrythmTask+0x15e>
			{
				i=i==SONGLENGTH-1?0:i+1;
 80004dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	2b31      	cmp	r3, #49	; 0x31
 80004e4:	d00f      	beq.n	8000506 <StartbuzzerrythmTask+0x172>
 80004e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80004ea:	3301      	adds	r3, #1
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	f8ad 3006 	strh.w	r3, [sp, #6]
			}
			xSemaphoreGive(buzzerMutexHandle);
 80004f2:	2300      	movs	r3, #0
 80004f4:	6828      	ldr	r0, [r5, #0]
 80004f6:	461a      	mov	r2, r3
 80004f8:	4619      	mov	r1, r3
 80004fa:	f004 f9a3 	bl	8004844 <xQueueGenericSend>
		}
		osDelay(10);
 80004fe:	200a      	movs	r0, #10
 8000500:	f003 fdef 	bl	80040e2 <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000504:	e7d5      	b.n	80004b2 <StartbuzzerrythmTask+0x11e>
				i=i==SONGLENGTH-1?0:i+1;
 8000506:	2300      	movs	r3, #0
 8000508:	e7f1      	b.n	80004ee <StartbuzzerrythmTask+0x15a>
 800050a:	bf00      	nop
 800050c:	20003fd0 	.word	0x20003fd0
 8000510:	20003fc4 	.word	0x20003fc4
 8000514:	00000000 	.word	0x00000000

08000518 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 8000518:	b570      	push	{r4, r5, r6, lr}
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800051a:	4c4b      	ldr	r4, [pc, #300]	; (8000648 <StartbuzzertoneTask+0x130>)
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 800051c:	2600      	movs	r6, #0
{
 800051e:	ed2d 8b02 	vpush	{d8}
 8000522:	b090      	sub	sp, #64	; 0x40
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000526:	ad09      	add	r5, sp, #36	; 0x24
	volatile float tonefreq = 0, time = 0;;
 8000528:	9602      	str	r6, [sp, #8]
 800052a:	9603      	str	r6, [sp, #12]
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800052c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800052e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000532:	340c      	adds	r4, #12
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000534:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800053a:	ad04      	add	r5, sp, #16
 800053c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800053e:	6823      	ldr	r3, [r4, #0]
				if(black)
					tonefreq = tonetable_black[black-1] * num *2 ;
				else
					tonefreq = tonetable_white[white-1] * num *2;
				//ring
				SetbuzzerFreq(tonefreq);
 8000540:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 8000640 <StartbuzzertoneTask+0x128>
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000544:	602b      	str	r3, [r5, #0]
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 8000546:	4d41      	ldr	r5, [pc, #260]	; (800064c <StartbuzzertoneTask+0x134>)
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 8000548:	4841      	ldr	r0, [pc, #260]	; (8000650 <StartbuzzertoneTask+0x138>)
 800054a:	220a      	movs	r2, #10
 800054c:	2300      	movs	r3, #0
 800054e:	f10d 0106 	add.w	r1, sp, #6
 8000552:	6800      	ldr	r0, [r0, #0]
 8000554:	f004 fab0 	bl	8004ab8 <xQueueGenericReceive>
 8000558:	2801      	cmp	r0, #1
 800055a:	4602      	mov	r2, r0
 800055c:	4c3d      	ldr	r4, [pc, #244]	; (8000654 <StartbuzzertoneTask+0x13c>)
 800055e:	d168      	bne.n	8000632 <StartbuzzertoneTask+0x11a>
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 8000560:	2300      	movs	r3, #0
 8000562:	6828      	ldr	r0, [r5, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f004 faa7 	bl	8004ab8 <xQueueGenericReceive>
			time = tonedata/1000;
 800056a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	fbb1 f2f3 	udiv	r2, r1, r3
 8000576:	b290      	uxth	r0, r2
			black = (tonedata%1000)/100;
 8000578:	fb03 1212 	mls	r2, r3, r2, r1
			time = tonedata/1000;
 800057c:	ee07 0a90 	vmov	s15, r0
			black = (tonedata%1000)/100;
 8000580:	b292      	uxth	r2, r2
			time = tonedata/1000;
 8000582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000586:	edcd 7a03 	vstr	s15, [sp, #12]
			if((tonedata%1000) != 0)
 800058a:	2a00      	cmp	r2, #0
 800058c:	d04c      	beq.n	8000628 <StartbuzzertoneTask+0x110>
			black = (tonedata%1000)/100;
 800058e:	2064      	movs	r0, #100	; 0x64
			num = (tonedata%100)/10;
 8000590:	fbb1 f3f0 	udiv	r3, r1, r0
 8000594:	fb00 1313 	mls	r3, r0, r3, r1
			black = (tonedata%1000)/100;
 8000598:	fbb2 f2f0 	udiv	r2, r2, r0
			num = (tonedata%100)/10;
 800059c:	b29b      	uxth	r3, r3
 800059e:	200a      	movs	r0, #10
 80005a0:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a4:	ee07 3a90 	vmov	s15, r3
 80005a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if(black)
 80005ac:	b38a      	cbz	r2, 8000612 <StartbuzzertoneTask+0xfa>
					tonefreq = tonetable_black[black-1] * num *2 ;
 80005ae:	ab10      	add	r3, sp, #64	; 0x40
 80005b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80005b4:	ed12 7a0d 	vldr	s14, [r2, #-52]	; 0xffffffcc
					tonefreq = tonetable_white[white-1] * num *2;
 80005b8:	ee67 7a87 	vmul.f32	s15, s15, s14
				SetbuzzerFreq(tonefreq);
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	2200      	movs	r2, #0
					tonefreq = tonetable_white[white-1] * num *2;
 80005c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005c4:	edcd 7a02 	vstr	s15, [sp, #8]
				SetbuzzerFreq(tonefreq);
 80005c8:	ed9d 6a02 	vldr	s12, [sp, #8]
 80005cc:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80005d0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80005d4:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80005d8:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
			else
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
 80005de:	eddd 7a03 	vldr	s15, [sp, #12]
 80005e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80005e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ea:	d00b      	beq.n	8000604 <StartbuzzertoneTask+0xec>
				osDelay(500/time); //time is used to shorter the sound..
 80005ec:	ed9d 7a03 	vldr	s14, [sp, #12]
 80005f0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000658 <StartbuzzertoneTask+0x140>
 80005f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005fc:	ee17 0a90 	vmov	r0, s15
 8000600:	f003 fd6f 	bl	80040e2 <osDelay>
			xSemaphoreGive(buzzerMutexHandle);
 8000604:	2300      	movs	r3, #0
 8000606:	6828      	ldr	r0, [r5, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4619      	mov	r1, r3
 800060c:	f004 f91a 	bl	8004844 <xQueueGenericSend>
 8000610:	e79a      	b.n	8000548 <StartbuzzertoneTask+0x30>
			white  = tonedata%10;
 8000612:	fbb1 f3f0 	udiv	r3, r1, r0
 8000616:	fb00 1313 	mls	r3, r0, r3, r1
					tonefreq = tonetable_white[white-1] * num *2;
 800061a:	aa10      	add	r2, sp, #64	; 0x40
 800061c:	b29b      	uxth	r3, r3
 800061e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000622:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8000626:	e7c7      	b.n	80005b8 <StartbuzzertoneTask+0xa0>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000628:	6823      	ldr	r3, [r4, #0]
 800062a:	635a      	str	r2, [r3, #52]	; 0x34
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 800062e:	9602      	str	r6, [sp, #8]
 8000630:	e7d5      	b.n	80005de <StartbuzzertoneTask+0xc6>
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	635a      	str	r2, [r3, #52]	; 0x34
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
 800063a:	e785      	b.n	8000548 <StartbuzzertoneTask+0x30>
 800063c:	f3af 8000 	nop.w
 8000640:	00000000 	.word	0x00000000
 8000644:	412e8480 	.word	0x412e8480
 8000648:	080056a0 	.word	0x080056a0
 800064c:	20003fd0 	.word	0x20003fd0
 8000650:	20003fc4 	.word	0x20003fc4
 8000654:	2000411c 	.word	0x2000411c
 8000658:	43fa0000 	.word	0x43fa0000

0800065c <SystemInitialization>:

//databuff
extern uint8_t enchall_buff[5];

void SystemInitialization(void)
{
 800065c:	b508      	push	{r3, lr}
  //start tim2 for BUZZER
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800065e:	2100      	movs	r1, #0
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <SystemInitialization+0x18>)
 8000662:	f002 fe3f 	bl	80032e4 <HAL_TIM_PWM_Start>
  //register the call back of uart4 transmit..
  //HAL_DMA_RegisterCallback(&hdma_uart4_rx,HAL_DMA_XFER_CPLT_CB_ID, UART4_DMA2_Cplt_Callback);
  HAL_UART_Receive_DMA(&huart4,enchall_buff,5);
 8000666:	2205      	movs	r2, #5
 8000668:	4903      	ldr	r1, [pc, #12]	; (8000678 <SystemInitialization+0x1c>)
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <SystemInitialization+0x20>)
}
 800066c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_Receive_DMA(&huart4,enchall_buff,5);
 8000670:	f002 bfa2 	b.w	80035b8 <HAL_UART_Receive_DMA>
 8000674:	2000411c 	.word	0x2000411c
 8000678:	20003da4 	.word	0x20003da4
 800067c:	2000430c 	.word	0x2000430c

08000680 <StartenchallTask>:
#include "main.h"
extern osMessageQId enchallQueueHandle;


void StartenchallTask(void const * argument)
{
 8000680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		  datatosend[3] = encdata.calc_tag + 0x30; //2bits
		  datatosend[4] = encdata.enc_counter/10 + 0x30; //msb unit
		  datatosend[5] = encdata.enc_counter%10 + 0x30; //lsb unit
		  datatosend[6] = '\r';
		  datatosend[7] = '\n';
		  HAL_UART_Transmit(&huart1,datatosend,8,1);
 8000682:	4d1d      	ldr	r5, [pc, #116]	; (80006f8 <StartenchallTask+0x78>)
	  if(xQueueReceiveFromISR(enchallQueueHandle,&encdata,0)==pdPASS)
 8000684:	4c1d      	ldr	r4, [pc, #116]	; (80006fc <StartenchallTask+0x7c>)
 8000686:	2200      	movs	r2, #0
 8000688:	4669      	mov	r1, sp
 800068a:	6820      	ldr	r0, [r4, #0]
 800068c:	f004 fade 	bl	8004c4c <xQueueReceiveFromISR>
 8000690:	2801      	cmp	r0, #1
 8000692:	4603      	mov	r3, r0
 8000694:	d12c      	bne.n	80006f0 <StartenchallTask+0x70>
		  datatosend[0] = encdata.mseq_out + 0x30;//1bit
 8000696:	f89d 2000 	ldrb.w	r2, [sp]
		  datatosend[4] = encdata.enc_counter/10 + 0x30; //msb unit
 800069a:	210a      	movs	r1, #10
 800069c:	f89d 0004 	ldrb.w	r0, [sp, #4]
		  datatosend[0] = encdata.mseq_out + 0x30;//1bit
 80006a0:	3230      	adds	r2, #48	; 0x30
		  datatosend[7] = '\n';
 80006a2:	f88d 100f 	strb.w	r1, [sp, #15]
		  datatosend[0] = encdata.mseq_out + 0x30;//1bit
 80006a6:	f88d 2008 	strb.w	r2, [sp, #8]
		  datatosend[1] = encdata.auxbit_in + 0x30;//1bit
 80006aa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80006ae:	3230      	adds	r2, #48	; 0x30
 80006b0:	f88d 2009 	strb.w	r2, [sp, #9]
		  datatosend[2] = encdata.hole_in + 0x30; //3bits
 80006b4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80006b8:	3230      	adds	r2, #48	; 0x30
 80006ba:	f88d 200a 	strb.w	r2, [sp, #10]
		  datatosend[3] = encdata.calc_tag + 0x30; //2bits
 80006be:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80006c2:	3230      	adds	r2, #48	; 0x30
 80006c4:	f88d 200b 	strb.w	r2, [sp, #11]
		  datatosend[4] = encdata.enc_counter/10 + 0x30; //msb unit
 80006c8:	fbb0 f2f1 	udiv	r2, r0, r1
 80006cc:	f102 0630 	add.w	r6, r2, #48	; 0x30
		  datatosend[5] = encdata.enc_counter%10 + 0x30; //lsb unit
 80006d0:	fb01 0212 	mls	r2, r1, r2, r0
		  HAL_UART_Transmit(&huart1,datatosend,8,1);
 80006d4:	4628      	mov	r0, r5
		  datatosend[5] = encdata.enc_counter%10 + 0x30; //lsb unit
 80006d6:	3230      	adds	r2, #48	; 0x30
		  datatosend[4] = encdata.enc_counter/10 + 0x30; //msb unit
 80006d8:	f88d 600c 	strb.w	r6, [sp, #12]
		  datatosend[5] = encdata.enc_counter%10 + 0x30; //lsb unit
 80006dc:	f88d 200d 	strb.w	r2, [sp, #13]
		  datatosend[6] = '\r';
 80006e0:	220d      	movs	r2, #13
 80006e2:	f88d 200e 	strb.w	r2, [sp, #14]
		  HAL_UART_Transmit(&huart1,datatosend,8,1);
 80006e6:	2208      	movs	r2, #8
 80006e8:	eb0d 0102 	add.w	r1, sp, r2
 80006ec:	f003 f808 	bl	8003700 <HAL_UART_Transmit>
	  }
	  //every 5 mini
	  osDelay(100);
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f003 fcf6 	bl	80040e2 <osDelay>
  {
 80006f6:	e7c6      	b.n	8000686 <StartenchallTask+0x6>
 80006f8:	2000422c 	.word	0x2000422c
 80006fc:	20003fd4 	.word	0x20003fd4

08000700 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000700:	b570      	push	{r4, r5, r6, lr}

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000702:	4839      	ldr	r0, [pc, #228]	; (80007e8 <MX_DFSDM1_Init+0xe8>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000704:	2400      	movs	r4, #0
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 8000706:	2501      	movs	r5, #1
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000708:	4b38      	ldr	r3, [pc, #224]	; (80007ec <MX_DFSDM1_Init+0xec>)
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800070a:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 800070e:	7204      	strb	r4, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8000710:	7244      	strb	r4, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000712:	61c6      	str	r6, [r0, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 8000714:	6205      	str	r5, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000716:	6245      	str	r5, [r0, #36]	; 0x24
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000718:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 800071c:	f001 f912 	bl	8001944 <HAL_DFSDM_FilterInit>

  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000720:	4833      	ldr	r0, [pc, #204]	; (80007f0 <MX_DFSDM1_Init+0xf0>)
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <MX_DFSDM1_Init+0xf4>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter1.Init.RegularParam.FastMode = DISABLE;
 8000724:	7204      	strb	r4, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 8000726:	7244      	strb	r4, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000728:	61c6      	str	r6, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 1;
 800072a:	6205      	str	r5, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 800072c:	6245      	str	r5, [r0, #36]	; 0x24
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800072e:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 8000732:	f001 f907 	bl	8001944 <HAL_DFSDM_FilterInit>

  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000736:	4830      	ldr	r0, [pc, #192]	; (80007f8 <MX_DFSDM1_Init+0xf8>)
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <MX_DFSDM1_Init+0xfc>)
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 800073a:	7104      	strb	r4, [r0, #4]
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800073c:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800073e:	2302      	movs	r3, #2
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000740:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000742:	60c3      	str	r3, [r0, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000744:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000746:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000748:	6184      	str	r4, [r0, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800074a:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800074c:	6204      	str	r4, [r0, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800074e:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000750:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000752:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000754:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000756:	f001 f881 	bl	800185c <HAL_DFSDM_ChannelInit>
 800075a:	b118      	cbz	r0, 8000764 <MX_DFSDM1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 800075c:	2169      	movs	r1, #105	; 0x69
 800075e:	4828      	ldr	r0, [pc, #160]	; (8000800 <MX_DFSDM1_Init+0x100>)
 8000760:	f000 fbae 	bl	8000ec0 <_Error_Handler>
  }

  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000764:	4827      	ldr	r0, [pc, #156]	; (8000804 <MX_DFSDM1_Init+0x104>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 8000766:	2202      	movs	r2, #2
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_DFSDM1_Init+0x108>)
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 800076a:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800076c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000770:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 8000772:	2300      	movs	r3, #0
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000774:	6242      	str	r2, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000776:	2201      	movs	r2, #1
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 8000778:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800077a:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800077c:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800077e:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000780:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000782:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000784:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000786:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 8000788:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 800078a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 800078c:	f001 f866 	bl	800185c <HAL_DFSDM_ChannelInit>
 8000790:	b118      	cbz	r0, 800079a <MX_DFSDM1_Init+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000792:	217b      	movs	r1, #123	; 0x7b
 8000794:	481a      	ldr	r0, [pc, #104]	; (8000800 <MX_DFSDM1_Init+0x100>)
 8000796:	f000 fb93 	bl	8000ec0 <_Error_Handler>
  }

  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 800079a:	481c      	ldr	r0, [pc, #112]	; (800080c <MX_DFSDM1_Init+0x10c>)
  hdfsdm1_channel7.Init.OutputClock.Activation = DISABLE;
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 800079c:	2202      	movs	r2, #2
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_DFSDM1_Init+0x110>)
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 80007a0:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80007a2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 80007a6:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel7.Init.OutputClock.Activation = DISABLE;
 80007a8:	2300      	movs	r3, #0
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80007aa:	6242      	str	r2, [r0, #36]	; 0x24
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 80007ac:	2201      	movs	r2, #1
  hdfsdm1_channel7.Init.OutputClock.Activation = DISABLE;
 80007ae:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007b0:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007b2:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007b4:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007b6:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007b8:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80007ba:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 80007bc:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel7.Init.Offset = 0;
 80007be:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel7.Init.RightBitShift = 0x00;
 80007c0:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel7) != HAL_OK)
 80007c2:	f001 f84b 	bl	800185c <HAL_DFSDM_ChannelInit>
 80007c6:	b118      	cbz	r0, 80007d0 <MX_DFSDM1_Init+0xd0>
  {
    _Error_Handler(__FILE__, __LINE__);
 80007c8:	218d      	movs	r1, #141	; 0x8d
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_DFSDM1_Init+0x100>)
 80007cc:	f000 fb78 	bl	8000ec0 <_Error_Handler>
  }

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 80007d0:	2201      	movs	r2, #1
 80007d2:	4910      	ldr	r1, [pc, #64]	; (8000814 <MX_DFSDM1_Init+0x114>)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_DFSDM1_Init+0xe8>)
 80007d6:	f001 f927 	bl	8001a28 <HAL_DFSDM_FilterConfigRegChannel>

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_7, DFSDM_CONTINUOUS_CONV_ON);
 80007da:	2201      	movs	r2, #1
 80007dc:	490e      	ldr	r1, [pc, #56]	; (8000818 <MX_DFSDM1_Init+0x118>)
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_DFSDM1_Init+0xf0>)

}
 80007e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_7, DFSDM_CONTINUOUS_CONV_ON);
 80007e4:	f001 b920 	b.w	8001a28 <HAL_DFSDM_FilterConfigRegChannel>
 80007e8:	20003dac 	.word	0x20003dac
 80007ec:	40017500 	.word	0x40017500
 80007f0:	20003ef8 	.word	0x20003ef8
 80007f4:	40017580 	.word	0x40017580
 80007f8:	20003f4c 	.word	0x20003f4c
 80007fc:	40017400 	.word	0x40017400
 8000800:	08005778 	.word	0x08005778
 8000804:	20003e00 	.word	0x20003e00
 8000808:	40017460 	.word	0x40017460
 800080c:	20003f84 	.word	0x20003f84
 8000810:	400174e0 	.word	0x400174e0
 8000814:	00030008 	.word	0x00030008
 8000818:	00070080 	.word	0x00070080

0800081c <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 800081e:	4c43      	ldr	r4, [pc, #268]	; (800092c <HAL_DFSDM_FilterMspInit+0x110>)
{
 8000820:	b087      	sub	sp, #28
 8000822:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d12a      	bne.n	8000880 <HAL_DFSDM_FilterMspInit+0x64>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800082a:	4a41      	ldr	r2, [pc, #260]	; (8000930 <HAL_DFSDM_FilterMspInit+0x114>)
 800082c:	6813      	ldr	r3, [r2, #0]
 800082e:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000830:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000832:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000834:	d109      	bne.n	800084a <HAL_DFSDM_FilterMspInit+0x2e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000836:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <HAL_DFSDM_FilterMspInit+0x118>)
 8000838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800083a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800083e:	645a      	str	r2, [r3, #68]	; 0x44
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	9b00      	ldr	r3, [sp, #0]
    PD0     ------> DFSDM1_DATIN7
    PD1     ------> DFSDM1_CKIN7
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800084a:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000850:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000852:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000854:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000856:	4838      	ldr	r0, [pc, #224]	; (8000938 <HAL_DFSDM_FilterMspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000858:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000860:	f001 faa2 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000864:	231b      	movs	r3, #27
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000866:	a901      	add	r1, sp, #4
 8000868:	4834      	ldr	r0, [pc, #208]	; (800093c <HAL_DFSDM_FilterMspInit+0x120>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800086a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800086c:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000870:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000876:	f001 fa97 	bl	8001da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000880:	682a      	ldr	r2, [r5, #0]
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <HAL_DFSDM_FilterMspInit+0x124>)
 8000884:	429a      	cmp	r2, r3
 8000886:	d125      	bne.n	80008d4 <HAL_DFSDM_FilterMspInit+0xb8>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000888:	4c2e      	ldr	r4, [pc, #184]	; (8000944 <HAL_DFSDM_FilterMspInit+0x128>)
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800088a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800088e:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000898:	3310      	adds	r3, #16
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800089a:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089c:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800089e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80008a2:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80008a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a8:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80008aa:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80008ae:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b0:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80008b2:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b8:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ba:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008bc:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008be:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80008c0:	f001 f8e6 	bl	8001a90 <HAL_DMA_Init>
 80008c4:	b118      	cbz	r0, 80008ce <HAL_DFSDM_FilterMspInit+0xb2>
    {
      _Error_Handler(__FILE__, __LINE__);
 80008c6:	21d4      	movs	r1, #212	; 0xd4
 80008c8:	481f      	ldr	r0, [pc, #124]	; (8000948 <HAL_DFSDM_FilterMspInit+0x12c>)
 80008ca:	f000 faf9 	bl	8000ec0 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80008ce:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80008d0:	62ac      	str	r4, [r5, #40]	; 0x28
 80008d2:	63a5      	str	r5, [r4, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 80008d4:	682a      	ldr	r2, [r5, #0]
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <HAL_DFSDM_FilterMspInit+0x130>)
 80008d8:	429a      	cmp	r2, r3
 80008da:	d125      	bne.n	8000928 <HAL_DFSDM_FilterMspInit+0x10c>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80008dc:	4c1c      	ldr	r4, [pc, #112]	; (8000950 <HAL_DFSDM_FilterMspInit+0x134>)
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80008de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80008e2:	f503 436e 	add.w	r3, r3, #60928	; 0xee00
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80008e6:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80008ec:	33a8      	adds	r3, #168	; 0xa8
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80008ee:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008f0:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80008f6:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80008f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008fc:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80008fe:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000902:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000904:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000906:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000908:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800090c:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 800090e:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000910:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000912:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000914:	f001 f8bc 	bl	8001a90 <HAL_DMA_Init>
 8000918:	b118      	cbz	r0, 8000922 <HAL_DFSDM_FilterMspInit+0x106>
    {
      _Error_Handler(__FILE__, __LINE__);
 800091a:	21eb      	movs	r1, #235	; 0xeb
 800091c:	480a      	ldr	r0, [pc, #40]	; (8000948 <HAL_DFSDM_FilterMspInit+0x12c>)
 800091e:	f000 facf 	bl	8000ec0 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000922:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000924:	62ac      	str	r4, [r5, #40]	; 0x28
 8000926:	63a5      	str	r5, [r4, #56]	; 0x38
  }

}
 8000928:	b007      	add	sp, #28
 800092a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092c:	2000002c 	.word	0x2000002c
 8000930:	20000030 	.word	0x20000030
 8000934:	40023800 	.word	0x40023800
 8000938:	40021000 	.word	0x40021000
 800093c:	40020c00 	.word	0x40020c00
 8000940:	40017500 	.word	0x40017500
 8000944:	20003e98 	.word	0x20003e98
 8000948:	08005778 	.word	0x08005778
 800094c:	40017580 	.word	0x40017580
 8000950:	20003e38 	.word	0x20003e38

08000954 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000954:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 8000956:	4c19      	ldr	r4, [pc, #100]	; (80009bc <HAL_DFSDM_ChannelMspInit+0x68>)
{
 8000958:	b086      	sub	sp, #24
  if(DFSDM1_Init == 0)
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d12a      	bne.n	80009b6 <HAL_DFSDM_ChannelMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000960:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8000962:	6813      	ldr	r3, [r2, #0]
 8000964:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000966:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000968:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800096a:	d109      	bne.n	8000980 <HAL_DFSDM_ChannelMspInit+0x2c>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_DFSDM_ChannelMspInit+0x70>)
 800096e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000970:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000974:	645a      	str	r2, [r3, #68]	; 0x44
 8000976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	9b00      	ldr	r3, [sp, #0]
    PD0     ------> DFSDM1_DATIN7
    PD1     ------> DFSDM1_CKIN7
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000980:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000986:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000988:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800098a:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098c:	480e      	ldr	r0, [pc, #56]	; (80009c8 <HAL_DFSDM_ChannelMspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800098e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000996:	f001 fa07 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800099a:	231b      	movs	r3, #27
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	a901      	add	r1, sp, #4
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <HAL_DFSDM_ChannelMspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80009a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009a2:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ac:	f001 f9fc 	bl	8001da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	6023      	str	r3, [r4, #0]
  }
}
 80009b6:	b006      	add	sp, #24
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
 80009ba:	bf00      	nop
 80009bc:	2000002c 	.word	0x2000002c
 80009c0:	20000030 	.word	0x20000030
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020c00 	.word	0x40020c00

080009d0 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_DMA_Init+0x60>)
{
 80009d2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80009d6:	2105      	movs	r1, #5
 80009d8:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009da:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
 80009e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009e2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80009e6:	9200      	str	r2, [sp, #0]
 80009e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009ec:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80009f0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80009f2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80009fe:	f000 fe9b 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a02:	200d      	movs	r0, #13
 8000a04:	f000 fed0 	bl	80017a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2105      	movs	r1, #5
 8000a0c:	2038      	movs	r0, #56	; 0x38
 8000a0e:	f000 fe93 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a12:	2038      	movs	r0, #56	; 0x38
 8000a14:	f000 fec8 	bl	80017a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2105      	movs	r1, #5
 8000a1c:	2039      	movs	r0, #57	; 0x39
 8000a1e:	f000 fe8b 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a22:	2039      	movs	r0, #57	; 0x39
 8000a24:	f000 fec0 	bl	80017a8 <HAL_NVIC_EnableIRQ>

}
 8000a28:	b003      	add	sp, #12
 8000a2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <StartshuntTask>:
  /* USER CODE END StartenchallTask */
}

/* StartshuntTask function */
__weak void StartshuntTask(void const * argument)
{
 8000a34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartshuntTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(5);
 8000a36:	2005      	movs	r0, #5
 8000a38:	f003 fb53 	bl	80040e2 <osDelay>
 8000a3c:	e7fb      	b.n	8000a36 <StartshuntTask+0x2>
	...

08000a40 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a42:	b0ad      	sub	sp, #180	; 0xb4
  osMutexDef(buzzerMutex);
 8000a44:	2500      	movs	r5, #0
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000a46:	4c48      	ldr	r4, [pc, #288]	; (8000b68 <MX_FREERTOS_Init+0x128>)
  osMutexDef(buzzerMutex);
 8000a48:	a82c      	add	r0, sp, #176	; 0xb0
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000a4a:	ae09      	add	r6, sp, #36	; 0x24
 8000a4c:	4627      	mov	r7, r4
  osMutexDef(buzzerMutex);
 8000a4e:	f840 5dac 	str.w	r5, [r0, #-172]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 8000a52:	f003 fb4e 	bl	80040f2 <osMutexCreate>
 8000a56:	4b45      	ldr	r3, [pc, #276]	; (8000b6c <MX_FREERTOS_Init+0x12c>)
 8000a58:	6018      	str	r0, [r3, #0]
  osMutexDef(encdataMutex);
 8000a5a:	a82c      	add	r0, sp, #176	; 0xb0
 8000a5c:	f840 5da8 	str.w	r5, [r0, #-168]!
  encdataMutexHandle = osMutexCreate(osMutex(encdataMutex));
 8000a60:	f003 fb47 	bl	80040f2 <osMutexCreate>
 8000a64:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <MX_FREERTOS_Init+0x130>)
 8000a66:	6018      	str	r0, [r3, #0]
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000a68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a6c:	683b      	ldr	r3, [r7, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000a6e:	4629      	mov	r1, r5
 8000a70:	a809      	add	r0, sp, #36	; 0x24
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000a72:	f104 0714 	add.w	r7, r4, #20
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000a76:	6033      	str	r3, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000a78:	f003 fb1b 	bl	80040b2 <osThreadCreate>
 8000a7c:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <MX_FREERTOS_Init+0x134>)
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000a7e:	ae0e      	add	r6, sp, #56	; 0x38
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000a80:	6018      	str	r0, [r3, #0]
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000a82:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a86:	683b      	ldr	r3, [r7, #0]
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 8000a88:	4629      	mov	r1, r5
 8000a8a:	a80e      	add	r0, sp, #56	; 0x38
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000a8c:	f104 0728 	add.w	r7, r4, #40	; 0x28
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000a90:	6033      	str	r3, [r6, #0]
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 8000a92:	f003 fb0e 	bl	80040b2 <osThreadCreate>
 8000a96:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <MX_FREERTOS_Init+0x138>)
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000a98:	ae13      	add	r6, sp, #76	; 0x4c
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 8000a9a:	6018      	str	r0, [r3, #0]
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000a9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a9e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000aa0:	683b      	ldr	r3, [r7, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000aa2:	4629      	mov	r1, r5
 8000aa4:	a813      	add	r0, sp, #76	; 0x4c
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000aa6:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000aaa:	6033      	str	r3, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000aac:	f003 fb01 	bl	80040b2 <osThreadCreate>
 8000ab0:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <MX_FREERTOS_Init+0x13c>)
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000ab2:	ae18      	add	r6, sp, #96	; 0x60
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000ab4:	6018      	str	r0, [r3, #0]
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000ab6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000ab8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000aba:	683b      	ldr	r3, [r7, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000abc:	4629      	mov	r1, r5
 8000abe:	a818      	add	r0, sp, #96	; 0x60
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000ac0:	f104 0750 	add.w	r7, r4, #80	; 0x50
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000ac4:	6033      	str	r3, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000ac6:	f003 faf4 	bl	80040b2 <osThreadCreate>
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <MX_FREERTOS_Init+0x140>)
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000acc:	ae1d      	add	r6, sp, #116	; 0x74
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000ace:	6018      	str	r0, [r3, #0]
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000ad0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000ad2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ad4:	683b      	ldr	r3, [r7, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	a81d      	add	r0, sp, #116	; 0x74
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000ada:	f104 0764 	add.w	r7, r4, #100	; 0x64
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000ade:	6033      	str	r3, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000ae0:	f003 fae7 	bl	80040b2 <osThreadCreate>
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <MX_FREERTOS_Init+0x144>)
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000ae6:	ae22      	add	r6, sp, #136	; 0x88
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000ae8:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000aea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000aec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000aee:	683b      	ldr	r3, [r7, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000af0:	4629      	mov	r1, r5
 8000af2:	a822      	add	r0, sp, #136	; 0x88
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000af4:	f104 0778 	add.w	r7, r4, #120	; 0x78
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000af8:	6033      	str	r3, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000afa:	f003 fada 	bl	80040b2 <osThreadCreate>
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <MX_FREERTOS_Init+0x148>)
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000b00:	ae27      	add	r6, sp, #156	; 0x9c
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000b02:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000b04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000b06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b08:	683b      	ldr	r3, [r7, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000b0a:	4629      	mov	r1, r5
 8000b0c:	a827      	add	r0, sp, #156	; 0x9c
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000b0e:	6033      	str	r3, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000b10:	f003 facf 	bl	80040b2 <osThreadCreate>
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000b14:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_FREERTOS_Init+0x14c>)
 8000b1a:	6018      	str	r0, [r3, #0]
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000b1c:	ab03      	add	r3, sp, #12
 8000b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b22:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000b26:	4629      	mov	r1, r5
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 fae5 	bl	80040f8 <osMessageCreate>
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000b2e:	f104 0294 	add.w	r2, r4, #148	; 0x94
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_FREERTOS_Init+0x150>)
  osMessageQDef(enchallQueue, 1, ENCHD);
 8000b34:	349c      	adds	r4, #156	; 0x9c
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000b36:	6018      	str	r0, [r3, #0]
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000b38:	ab05      	add	r3, sp, #20
 8000b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b3e:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8000b42:	4629      	mov	r1, r5
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 fad7 	bl	80040f8 <osMessageCreate>
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_FREERTOS_Init+0x154>)
 8000b4c:	6018      	str	r0, [r3, #0]
  osMessageQDef(enchallQueue, 1, ENCHD);
 8000b4e:	ab07      	add	r3, sp, #28
 8000b50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b54:	e883 0003 	stmia.w	r3, {r0, r1}
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 8000b58:	4629      	mov	r1, r5
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 facc 	bl	80040f8 <osMessageCreate>
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <MX_FREERTOS_Init+0x158>)
 8000b62:	6018      	str	r0, [r3, #0]
}
 8000b64:	b02d      	add	sp, #180	; 0xb4
 8000b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b68:	080056d0 	.word	0x080056d0
 8000b6c:	20003fd0 	.word	0x20003fd0
 8000b70:	20003fd8 	.word	0x20003fd8
 8000b74:	20003fcc 	.word	0x20003fcc
 8000b78:	20003fc0 	.word	0x20003fc0
 8000b7c:	20003fe0 	.word	0x20003fe0
 8000b80:	20003fdc 	.word	0x20003fdc
 8000b84:	20003fe4 	.word	0x20003fe4
 8000b88:	20003fbc 	.word	0x20003fbc
 8000b8c:	20003fe8 	.word	0x20003fe8
 8000b90:	20003fc4 	.word	0x20003fc4
 8000b94:	20003fc8 	.word	0x20003fc8
 8000b98:	20003fd4 	.word	0x20003fd4

08000b9c <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000b9e:	210c      	movs	r1, #12
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba2:	f042 0210 	orr.w	r2, r2, #16
{
 8000ba6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba8:	631a      	str	r2, [r3, #48]	; 0x30
{
 8000baa:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000bae:	4d2a      	ldr	r5, [pc, #168]	; (8000c58 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb0:	f002 0210 	and.w	r2, r2, #16

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8000bb4:	4c29      	ldr	r4, [pc, #164]	; (8000c5c <MX_GPIO_Init+0xc0>)
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000bb6:	4628      	mov	r0, r5
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb8:	9201      	str	r2, [sp, #4]
 8000bba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8000bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000bca:	9202      	str	r2, [sp, #8]
 8000bcc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bd0:	f042 0204 	orr.w	r2, r2, #4
 8000bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bd8:	f002 0204 	and.w	r2, r2, #4
 8000bdc:	9203      	str	r2, [sp, #12]
 8000bde:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000be2:	f042 0201 	orr.w	r2, r2, #1
 8000be6:	631a      	str	r2, [r3, #48]	; 0x30
 8000be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bea:	f002 0201 	and.w	r2, r2, #1
 8000bee:	9204      	str	r2, [sp, #16]
 8000bf0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bf4:	f042 0202 	orr.w	r2, r2, #2
 8000bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8000bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bfc:	f002 0202 	and.w	r2, r2, #2
 8000c00:	9205      	str	r2, [sp, #20]
 8000c02:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c06:	f042 0208 	orr.w	r2, r2, #8
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	f003 0308 	and.w	r3, r3, #8
 8000c14:	9306      	str	r3, [sp, #24]
 8000c16:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000c18:	f001 f9b0 	bl	8001f7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4620      	mov	r0, r4
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	f001 f9ab 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000c26:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c28:	a907      	add	r1, sp, #28
 8000c2a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000c2c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c2e:	2311      	movs	r3, #17
 8000c30:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c38:	f001 f8b6 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000c3c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	a907      	add	r1, sp, #28
 8000c40:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000c42:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c48:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c4a:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f001 f8ac 	bl	8001da8 <HAL_GPIO_Init>

}
 8000c50:	b00d      	add	sp, #52	; 0x34
 8000c52:	bd30      	pop	{r4, r5, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40020400 	.word	0x40020400

08000c60 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000c60:	b508      	push	{r3, lr}

  hi2c4.Instance = I2C4;
 8000c62:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <MX_I2C4_Init+0x58>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c64:	2201      	movs	r2, #1
  hi2c4.Init.Timing = 0x20404768;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_I2C4_Init+0x5c>)
 8000c68:	4915      	ldr	r1, [pc, #84]	; (8000cc0 <MX_I2C4_Init+0x60>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6a:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.Timing = 0x20404768;
 8000c6c:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c4.Init.OwnAddress1 = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	6083      	str	r3, [r0, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c74:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c76:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c78:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7a:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c7c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c7e:	f001 f986 	bl	8001f8e <HAL_I2C_Init>
 8000c82:	b118      	cbz	r0, 8000c8c <MX_I2C4_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c84:	214c      	movs	r1, #76	; 0x4c
 8000c86:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <MX_I2C4_Init+0x64>)
 8000c88:	f000 f91a 	bl	8000ec0 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <MX_I2C4_Init+0x58>)
 8000c90:	f001 f9ce 	bl	8002030 <HAL_I2CEx_ConfigAnalogFilter>
 8000c94:	b118      	cbz	r0, 8000c9e <MX_I2C4_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c96:	2153      	movs	r1, #83	; 0x53
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <MX_I2C4_Init+0x64>)
 8000c9a:	f000 f911 	bl	8000ec0 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_I2C4_Init+0x58>)
 8000ca2:	f001 f9eb 	bl	800207c <HAL_I2CEx_ConfigDigitalFilter>
 8000ca6:	b128      	cbz	r0, 8000cb4 <MX_I2C4_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ca8:	215a      	movs	r1, #90	; 0x5a
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <MX_I2C4_Init+0x64>)
  }

}
 8000cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000cb0:	f000 b906 	b.w	8000ec0 <_Error_Handler>
 8000cb4:	bd08      	pop	{r3, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20003fec 	.word	0x20003fec
 8000cbc:	20404768 	.word	0x20404768
 8000cc0:	40006000 	.word	0x40006000
 8000cc4:	080057e4 	.word	0x080057e4

08000cc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C4)
 8000cca:	6802      	ldr	r2, [r0, #0]
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_I2C_MspInit+0x44>)
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d119      	bne.n	8000d06 <HAL_I2C_MspInit+0x3e>
  
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cd2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cd8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cda:	2312      	movs	r3, #18
 8000cdc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000ce6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce8:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f001 f85b 	bl	8001da8 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_I2C_MspInit+0x4c>)
 8000cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000cfa:	641a      	str	r2, [r3, #64]	; 0x40
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000d06:	b007      	add	sp, #28
 8000d08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d0c:	40006000 	.word	0x40006000
 8000d10:	40020c00 	.word	0x40020c00
 8000d14:	40023800 	.word	0x40023800

08000d18 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d18:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <SystemClock_Config+0xc8>)
 8000d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
{
 8000d24:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d28:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d2a:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d2c:	2701      	movs	r7, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <SystemClock_Config+0xcc>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d44:	9707      	str	r7, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d4c:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d56:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d58:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d5e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d60:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d62:	23d8      	movs	r3, #216	; 0xd8
 8000d64:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f001 fa69 	bl	800223c <HAL_RCC_OscConfig>
 8000d6a:	b100      	cbz	r0, 8000d6e <SystemClock_Config+0x56>
 8000d6c:	e7fe      	b.n	8000d6c <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d6e:	f001 fa2d 	bl	80021cc <HAL_PWREx_EnableOverDrive>
 8000d72:	b100      	cbz	r0, 8000d76 <SystemClock_Config+0x5e>
 8000d74:	e7fe      	b.n	8000d74 <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	260f      	movs	r6, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d7e:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d80:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d86:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d88:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8a:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d8c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d8e:	f001 fc13 	bl	80025b8 <HAL_RCC_ClockConfig>
 8000d92:	b100      	cbz	r0, 8000d96 <SystemClock_Config+0x7e>
 8000d94:	e7fe      	b.n	8000d94 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <SystemClock_Config+0xd0>)
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000d98:	9030      	str	r0, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000d9a:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000d9c:	2310      	movs	r3, #16
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d9e:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da0:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000da2:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000da4:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000da6:	9725      	str	r7, [sp, #148]	; 0x94
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000da8:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8000daa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dae:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db0:	f001 fcd6 	bl	8002760 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4605      	mov	r5, r0
 8000db6:	b100      	cbz	r0, 8000dba <SystemClock_Config+0xa2>
 8000db8:	e7fe      	b.n	8000db8 <SystemClock_Config+0xa0>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000dba:	f001 fc8d 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dc6:	f000 fcfb 	bl	80017c0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f000 fd0e 	bl	80017ec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000dd0:	462a      	mov	r2, r5
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 fcae 	bl	8001738 <HAL_NVIC_SetPriority>
}
 8000ddc:	b039      	add	sp, #228	; 0xe4
 8000dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40007000 	.word	0x40007000
 8000de8:	08022340 	.word	0x08022340

08000dec <main>:
{
 8000dec:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000df2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <main+0xbc>)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000dfe:	695a      	ldr	r2, [r3, #20]
 8000e00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e04:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e0a:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8000e0e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e12:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e16:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e1a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e1e:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e22:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000e26:	07a5      	lsls	r5, r4, #30
 8000e28:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e2a:	ea02 0e06 	and.w	lr, r2, r6
 8000e2e:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e30:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e32:	ea4e 0700 	orr.w	r7, lr, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8000e36:	3901      	subs	r1, #1
 8000e38:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e3c:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 8000e40:	1c4f      	adds	r7, r1, #1
 8000e42:	d1f6      	bne.n	8000e32 <main+0x46>
 8000e44:	3a20      	subs	r2, #32
    } while(sets--);
 8000e46:	f112 0f20 	cmn.w	r2, #32
 8000e4a:	d1ee      	bne.n	8000e2a <main+0x3e>
 8000e4c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e5c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000e60:	f000 fc2a 	bl	80016b8 <HAL_Init>
  SystemClock_Config();
 8000e64:	f7ff ff58 	bl	8000d18 <SystemClock_Config>
  MX_GPIO_Init();
 8000e68:	f7ff fe98 	bl	8000b9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e6c:	f7ff fdb0 	bl	80009d0 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000e70:	f7ff fc46 	bl	8000700 <MX_DFSDM1_Init>
  MX_I2C4_Init();
 8000e74:	f7ff fef4 	bl	8000c60 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000e78:	f000 f824 	bl	8000ec4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e7c:	f000 f96c 	bl	8001158 <MX_TIM1_Init>
  MX_UART4_Init();
 8000e80:	f000 fa42 	bl	8001308 <MX_UART4_Init>
  MX_UART8_Init();
 8000e84:	f000 fa68 	bl	8001358 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000e88:	f000 fa8c 	bl	80013a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e8c:	f000 fab0 	bl	80013f0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000e90:	f000 fb82 	bl	8001598 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8000e94:	f000 f9e6 	bl	8001264 <MX_TIM2_Init>
  SystemInitialization();
 8000e98:	f7ff fbe0 	bl	800065c <SystemInitialization>
  MX_FREERTOS_Init();
 8000e9c:	f7ff fdd0 	bl	8000a40 <MX_FREERTOS_Init>
  osKernelStart();
 8000ea0:	f003 f902 	bl	80040a8 <osKernelStart>
 8000ea4:	e7fe      	b.n	8000ea4 <main+0xb8>
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000eac:	6802      	ldr	r2, [r0, #0]
 8000eae:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d101      	bne.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000eb4:	f000 bc12 	b.w	80016dc <HAL_IncTick>
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40000800 	.word	0x40000800

08000ec0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000ec0:	e7fe      	b.n	8000ec0 <_Error_Handler>
	...

08000ec4 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eca:	4912      	ldr	r1, [pc, #72]	; (8000f14 <MX_SPI1_Init+0x50>)
{
 8000ecc:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ece:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed2:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed8:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000edc:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ee0:	2230      	movs	r2, #48	; 0x30
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee6:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ee8:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000eea:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eec:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eee:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ef2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ef4:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8000ef6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ef8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000efa:	f001 febf 	bl	8002c7c <HAL_SPI_Init>
 8000efe:	b128      	cbz	r0, 8000f0c <MX_SPI1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f00:	2151      	movs	r1, #81	; 0x51
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_SPI1_Init+0x54>)
  }

}
 8000f04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000f08:	f7ff bfda 	b.w	8000ec0 <_Error_Handler>
 8000f0c:	bd08      	pop	{r3, pc}
 8000f0e:	bf00      	nop
 8000f10:	20004038 	.word	0x20004038
 8000f14:	40013000 	.word	0x40013000
 8000f18:	080057f7 	.word	0x080057f7

08000f1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8000f1c:	6802      	ldr	r2, [r0, #0]
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_SPI_MspInit+0x58>)
 8000f20:	429a      	cmp	r2, r3
{
 8000f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f24:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI1)
 8000f26:	d122      	bne.n	8000f6e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f28:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f34:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	a901      	add	r1, sp, #4
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f3e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f50:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f52:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f54:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f56:	f000 ff27 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000f5a:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	a901      	add	r1, sp, #4
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000f60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f68:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f000 ff1d 	bl	8001da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f6e:	b007      	add	sp, #28
 8000f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40013000 	.word	0x40013000
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	40020400 	.word	0x40020400

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f82:	2003      	movs	r0, #3
 8000f84:	f000 fbc6 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f06f 000b 	mvn.w	r0, #11
 8000f8e:	4611      	mov	r1, r2
 8000f90:	f000 fbd2 	bl	8001738 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f06f 000a 	mvn.w	r0, #10
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	f000 fbcc 	bl	8001738 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f06f 0009 	mvn.w	r0, #9
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	f000 fbc6 	bl	8001738 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f06f 0004 	mvn.w	r0, #4
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	f000 fbc0 	bl	8001738 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f06f 0003 	mvn.w	r0, #3
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	f000 fbba 	bl	8001738 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f06f 0001 	mvn.w	r0, #1
 8000fcc:	f000 fbb4 	bl	8001738 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000fdc:	f000 bbac 	b.w	8001738 <HAL_NVIC_SetPriority>

08000fe0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000fe2:	4601      	mov	r1, r0
{
 8000fe4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	201e      	movs	r0, #30
 8000fea:	f000 fba5 	bl	8001738 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000fee:	201e      	movs	r0, #30
 8000ff0:	f000 fbda 	bl	80017a8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff6:	a901      	add	r1, sp, #4
 8000ff8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ffc:	4c13      	ldr	r4, [pc, #76]	; (800104c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ffe:	f042 0204 	orr.w	r2, r2, #4
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800100e:	f001 fb89 	bl	8002724 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001012:	f001 fb67 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001018:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 800101a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800101c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001020:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_InitTick+0x74>)
 8001024:	fbb0 f0f3 	udiv	r0, r0, r3
 8001028:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 800102a:	2300      	movs	r3, #0
  htim4.Init.Prescaler = uwPrescalerValue;
 800102c:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800102e:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8001030:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001034:	f001 ffc2 	bl	8002fbc <HAL_TIM_Base_Init>
 8001038:	b920      	cbnz	r0, 8001044 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800103a:	4620      	mov	r0, r4
 800103c:	f001 fe96 	bl	8002d6c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001040:	b008      	add	sp, #32
 8001042:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001044:	2001      	movs	r0, #1
 8001046:	e7fb      	b.n	8001040 <HAL_InitTick+0x60>
 8001048:	40023800 	.word	0x40023800
 800104c:	2000409c 	.word	0x2000409c
 8001050:	40000800 	.word	0x40000800
 8001054:	000f4240 	.word	0x000f4240

08001058 <NMI_Handler>:
 8001058:	4770      	bx	lr

0800105a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800105a:	e7fe      	b.n	800105a <HardFault_Handler>

0800105c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800105c:	e7fe      	b.n	800105c <MemManage_Handler>

0800105e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800105e:	e7fe      	b.n	800105e <BusFault_Handler>

08001060 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler>

08001062 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001064:	f003 b84c 	b.w	8004100 <osSystickHandler>

08001068 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001068:	4801      	ldr	r0, [pc, #4]	; (8001070 <DMA1_Stream2_IRQHandler+0x8>)
 800106a:	f000 bddf 	b.w	8001c2c <HAL_DMA_IRQHandler>
 800106e:	bf00      	nop
 8001070:	2000415c 	.word	0x2000415c

08001074 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001074:	4801      	ldr	r0, [pc, #4]	; (800107c <TIM4_IRQHandler+0x8>)
 8001076:	f001 be89 	b.w	8002d8c <HAL_TIM_IRQHandler>
 800107a:	bf00      	nop
 800107c:	2000409c 	.word	0x2000409c

08001080 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001080:	4801      	ldr	r0, [pc, #4]	; (8001088 <UART4_IRQHandler+0x8>)
 8001082:	f002 bc1b 	b.w	80038bc <HAL_UART_IRQHandler>
 8001086:	bf00      	nop
 8001088:	2000430c 	.word	0x2000430c

0800108c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800108c:	4801      	ldr	r0, [pc, #4]	; (8001094 <DMA2_Stream0_IRQHandler+0x8>)
 800108e:	f000 bdcd 	b.w	8001c2c <HAL_DMA_IRQHandler>
 8001092:	bf00      	nop
 8001094:	20003e98 	.word	0x20003e98

08001098 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001098:	4801      	ldr	r0, [pc, #4]	; (80010a0 <DMA2_Stream1_IRQHandler+0x8>)
 800109a:	f000 bdc7 	b.w	8001c2c <HAL_DMA_IRQHandler>
 800109e:	bf00      	nop
 80010a0:	20003e38 	.word	0x20003e38

080010a4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80010a4:	6803      	ldr	r3, [r0, #0]
{
 80010a6:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_TIM_Base_MspInit+0x40>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d10b      	bne.n	80010c6 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_TIM_Base_MspInit+0x44>)
 80010b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	645a      	str	r2, [r3, #68]	; 0x44
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010c2:	b002      	add	sp, #8
 80010c4:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 80010c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ca:	d1fa      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010cc:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80010d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	9b01      	ldr	r3, [sp, #4]
}
 80010e2:	e7ee      	b.n	80010c2 <HAL_TIM_Base_MspInit+0x1e>
 80010e4:	40010000 	.word	0x40010000
 80010e8:	40023800 	.word	0x40023800

080010ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80010ec:	6803      	ldr	r3, [r0, #0]
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_TIM_MspPostInit+0x60>)
 80010f0:	4293      	cmp	r3, r2
{
 80010f2:	b570      	push	{r4, r5, r6, lr}
 80010f4:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 80010f6:	d119      	bne.n	800112c <HAL_TIM_MspPostInit+0x40>
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010fa:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010fe:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	a901      	add	r1, sp, #4
 8001102:	4813      	ldr	r0, [pc, #76]	; (8001150 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001104:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800110c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f000 fe4b 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8001112:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001116:	a901      	add	r1, sp, #4
 8001118:	480e      	ldr	r0, [pc, #56]	; (8001154 <HAL_TIM_MspPostInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 800111a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001122:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f000 fe40 	bl	8001da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001128:	b006      	add	sp, #24
 800112a:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM2)
 800112c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001130:	d1fa      	bne.n	8001128 <HAL_TIM_MspPostInit+0x3c>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	a901      	add	r1, sp, #4
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800113a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001144:	2301      	movs	r3, #1
 8001146:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001148:	9305      	str	r3, [sp, #20]
 800114a:	e7eb      	b.n	8001124 <HAL_TIM_MspPostInit+0x38>
 800114c:	40010000 	.word	0x40010000
 8001150:	40020000 	.word	0x40020000
 8001154:	40021000 	.word	0x40021000

08001158 <MX_TIM1_Init>:
  htim1.Instance = TIM1;
 8001158:	483f      	ldr	r0, [pc, #252]	; (8001258 <MX_TIM1_Init+0x100>)
  htim1.Init.Period = 10000;
 800115a:	f242 7210 	movw	r2, #10000	; 0x2710
  htim1.Instance = TIM1;
 800115e:	4b3f      	ldr	r3, [pc, #252]	; (800125c <MX_TIM1_Init+0x104>)
{
 8001160:	b500      	push	{lr}
  htim1.Instance = TIM1;
 8001162:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001164:	2300      	movs	r3, #0
{
 8001166:	b09b      	sub	sp, #108	; 0x6c
  htim1.Init.Period = 10000;
 8001168:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = 0;
 800116a:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	6083      	str	r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001170:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001174:	f001 ff22 	bl	8002fbc <HAL_TIM_Base_Init>
 8001178:	b118      	cbz	r0, 8001182 <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 800117a:	214d      	movs	r1, #77	; 0x4d
 800117c:	4838      	ldr	r0, [pc, #224]	; (8001260 <MX_TIM1_Init+0x108>)
 800117e:	f7ff fe9f 	bl	8000ec0 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	a91a      	add	r1, sp, #104	; 0x68
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001188:	4833      	ldr	r0, [pc, #204]	; (8001258 <MX_TIM1_Init+0x100>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118a:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800118e:	f002 f80f 	bl	80031b0 <HAL_TIM_ConfigClockSource>
 8001192:	b118      	cbz	r0, 800119c <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8001194:	2153      	movs	r1, #83	; 0x53
 8001196:	4832      	ldr	r0, [pc, #200]	; (8001260 <MX_TIM1_Init+0x108>)
 8001198:	f7ff fe92 	bl	8000ec0 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800119c:	482e      	ldr	r0, [pc, #184]	; (8001258 <MX_TIM1_Init+0x100>)
 800119e:	f001 ff27 	bl	8002ff0 <HAL_TIM_PWM_Init>
 80011a2:	b118      	cbz	r0, 80011ac <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 80011a4:	2158      	movs	r1, #88	; 0x58
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <MX_TIM1_Init+0x108>)
 80011a8:	f7ff fe8a 	bl	8000ec0 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ac:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ae:	a901      	add	r1, sp, #4
 80011b0:	4829      	ldr	r0, [pc, #164]	; (8001258 <MX_TIM1_Init+0x100>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011b4:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011b8:	f002 f8fe 	bl	80033b8 <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	b118      	cbz	r0, 80011c6 <MX_TIM1_Init+0x6e>
    _Error_Handler(__FILE__, __LINE__);
 80011be:	2160      	movs	r1, #96	; 0x60
 80011c0:	4827      	ldr	r0, [pc, #156]	; (8001260 <MX_TIM1_Init+0x108>)
 80011c2:	f7ff fe7d 	bl	8000ec0 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80011c6:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011c8:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ca:	a908      	add	r1, sp, #32
 80011cc:	4822      	ldr	r0, [pc, #136]	; (8001258 <MX_TIM1_Init+0x100>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011ce:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 80011d0:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d2:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011d4:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d6:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d8:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011da:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011dc:	f002 f958 	bl	8003490 <HAL_TIM_PWM_ConfigChannel>
 80011e0:	b118      	cbz	r0, 80011ea <MX_TIM1_Init+0x92>
    _Error_Handler(__FILE__, __LINE__);
 80011e2:	216c      	movs	r1, #108	; 0x6c
 80011e4:	481e      	ldr	r0, [pc, #120]	; (8001260 <MX_TIM1_Init+0x108>)
 80011e6:	f7ff fe6b 	bl	8000ec0 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ea:	2204      	movs	r2, #4
 80011ec:	a908      	add	r1, sp, #32
 80011ee:	481a      	ldr	r0, [pc, #104]	; (8001258 <MX_TIM1_Init+0x100>)
 80011f0:	f002 f94e 	bl	8003490 <HAL_TIM_PWM_ConfigChannel>
 80011f4:	b118      	cbz	r0, 80011fe <MX_TIM1_Init+0xa6>
    _Error_Handler(__FILE__, __LINE__);
 80011f6:	2171      	movs	r1, #113	; 0x71
 80011f8:	4819      	ldr	r0, [pc, #100]	; (8001260 <MX_TIM1_Init+0x108>)
 80011fa:	f7ff fe61 	bl	8000ec0 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011fe:	2208      	movs	r2, #8
 8001200:	a908      	add	r1, sp, #32
 8001202:	4815      	ldr	r0, [pc, #84]	; (8001258 <MX_TIM1_Init+0x100>)
 8001204:	f002 f944 	bl	8003490 <HAL_TIM_PWM_ConfigChannel>
 8001208:	b118      	cbz	r0, 8001212 <MX_TIM1_Init+0xba>
    _Error_Handler(__FILE__, __LINE__);
 800120a:	2176      	movs	r1, #118	; 0x76
 800120c:	4814      	ldr	r0, [pc, #80]	; (8001260 <MX_TIM1_Init+0x108>)
 800120e:	f7ff fe57 	bl	8000ec0 <_Error_Handler>
  sBreakDeadTimeConfig.DeadTime = 2;
 8001212:	2202      	movs	r2, #2
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001214:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001216:	a90f      	add	r1, sp, #60	; 0x3c
 8001218:	480f      	ldr	r0, [pc, #60]	; (8001258 <MX_TIM1_Init+0x100>)
  sBreakDeadTimeConfig.DeadTime = 2;
 800121a:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001220:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001222:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001224:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001226:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001228:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800122a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.BreakFilter = 0;
 800122e:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001230:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001232:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001234:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001238:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800123a:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800123c:	f002 f8e2 	bl	8003404 <HAL_TIMEx_ConfigBreakDeadTime>
 8001240:	b118      	cbz	r0, 800124a <MX_TIM1_Init+0xf2>
    _Error_Handler(__FILE__, __LINE__);
 8001242:	2186      	movs	r1, #134	; 0x86
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_TIM1_Init+0x108>)
 8001246:	f7ff fe3b 	bl	8000ec0 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <MX_TIM1_Init+0x100>)
 800124c:	f7ff ff4e 	bl	80010ec <HAL_TIM_MspPostInit>
}
 8001250:	b01b      	add	sp, #108	; 0x6c
 8001252:	f85d fb04 	ldr.w	pc, [sp], #4
 8001256:	bf00      	nop
 8001258:	200040dc 	.word	0x200040dc
 800125c:	40010000 	.word	0x40010000
 8001260:	0800580a 	.word	0x0800580a

08001264 <MX_TIM2_Init>:
  htim2.Instance = TIM2;
 8001264:	4826      	ldr	r0, [pc, #152]	; (8001300 <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 107;
 8001266:	236b      	movs	r3, #107	; 0x6b
 8001268:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 50000;
 800126c:	f24c 3250 	movw	r2, #50000	; 0xc350
{
 8001270:	b500      	push	{lr}
  htim2.Init.Prescaler = 107;
 8001272:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	2300      	movs	r3, #0
{
 8001278:	b08f      	sub	sp, #60	; 0x3c
  htim2.Init.Period = 50000;
 800127a:	60c2      	str	r2, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001284:	f001 fe9a 	bl	8002fbc <HAL_TIM_Base_Init>
 8001288:	b118      	cbz	r0, 8001292 <MX_TIM2_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 800128a:	219b      	movs	r1, #155	; 0x9b
 800128c:	481d      	ldr	r0, [pc, #116]	; (8001304 <MX_TIM2_Init+0xa0>)
 800128e:	f7ff fe17 	bl	8000ec0 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001292:	a90e      	add	r1, sp, #56	; 0x38
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001298:	4819      	ldr	r0, [pc, #100]	; (8001300 <MX_TIM2_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129a:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800129e:	f001 ff87 	bl	80031b0 <HAL_TIM_ConfigClockSource>
 80012a2:	b118      	cbz	r0, 80012ac <MX_TIM2_Init+0x48>
    _Error_Handler(__FILE__, __LINE__);
 80012a4:	21a1      	movs	r1, #161	; 0xa1
 80012a6:	4817      	ldr	r0, [pc, #92]	; (8001304 <MX_TIM2_Init+0xa0>)
 80012a8:	f7ff fe0a 	bl	8000ec0 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012ac:	4814      	ldr	r0, [pc, #80]	; (8001300 <MX_TIM2_Init+0x9c>)
 80012ae:	f001 fe9f 	bl	8002ff0 <HAL_TIM_PWM_Init>
 80012b2:	b118      	cbz	r0, 80012bc <MX_TIM2_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 80012b4:	21a6      	movs	r1, #166	; 0xa6
 80012b6:	4813      	ldr	r0, [pc, #76]	; (8001304 <MX_TIM2_Init+0xa0>)
 80012b8:	f7ff fe02 	bl	8000ec0 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012bc:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012be:	4669      	mov	r1, sp
 80012c0:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c6:	f002 f877 	bl	80033b8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	b118      	cbz	r0, 80012d4 <MX_TIM2_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
 80012cc:	21ad      	movs	r1, #173	; 0xad
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_TIM2_Init+0xa0>)
 80012d0:	f7ff fdf6 	bl	8000ec0 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80012d4:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d8:	a907      	add	r1, sp, #28
 80012da:	4809      	ldr	r0, [pc, #36]	; (8001300 <MX_TIM2_Init+0x9c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012dc:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80012de:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e4:	f002 f8d4 	bl	8003490 <HAL_TIM_PWM_ConfigChannel>
 80012e8:	b118      	cbz	r0, 80012f2 <MX_TIM2_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 80012ea:	21b6      	movs	r1, #182	; 0xb6
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_TIM2_Init+0xa0>)
 80012ee:	f7ff fde7 	bl	8000ec0 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_TIM2_Init+0x9c>)
 80012f4:	f7ff fefa 	bl	80010ec <HAL_TIM_MspPostInit>
}
 80012f8:	b00f      	add	sp, #60	; 0x3c
 80012fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80012fe:	bf00      	nop
 8001300:	2000411c 	.word	0x2000411c
 8001304:	0800580a 	.word	0x0800580a

08001308 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001308:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 800130a:	480f      	ldr	r0, [pc, #60]	; (8001348 <MX_UART4_Init+0x40>)
  huart4.Init.BaudRate = 8000000;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_RX;
 800130c:	2204      	movs	r2, #4
  huart4.Init.BaudRate = 8000000;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_UART4_Init+0x44>)
 8001310:	f8df e040 	ldr.w	lr, [pc, #64]	; 8001354 <MX_UART4_Init+0x4c>
  huart4.Init.Mode = UART_MODE_RX;
 8001314:	6142      	str	r2, [r0, #20]
  huart4.Init.BaudRate = 8000000;
 8001316:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	2300      	movs	r3, #0
 800131c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800131e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001320:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001326:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001328:	2310      	movs	r3, #16
 800132a:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001332:	f002 fd3a 	bl	8003daa <HAL_UART_Init>
 8001336:	b128      	cbz	r0, 8001344 <MX_UART4_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001338:	2153      	movs	r1, #83	; 0x53
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_UART4_Init+0x48>)
  }

}
 800133c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001340:	f7ff bdbe 	b.w	8000ec0 <_Error_Handler>
 8001344:	bd08      	pop	{r3, pc}
 8001346:	bf00      	nop
 8001348:	2000430c 	.word	0x2000430c
 800134c:	40004c00 	.word	0x40004c00
 8001350:	0800581d 	.word	0x0800581d
 8001354:	007a1200 	.word	0x007a1200

08001358 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001358:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <MX_UART8_Init+0x3c>)
  huart8.Init.BaudRate = 26666666;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 800135c:	220c      	movs	r2, #12
  huart8.Init.BaudRate = 26666666;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_UART8_Init+0x40>)
 8001360:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80013a0 <MX_UART8_Init+0x48>
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001364:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 8001366:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart8.Init.BaudRate = 26666666;
 800136a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	2300      	movs	r3, #0
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 8001370:	61c2      	str	r2, [r0, #28]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001374:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001376:	6103      	str	r3, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001378:	6183      	str	r3, [r0, #24]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800137e:	f002 fd14 	bl	8003daa <HAL_UART_Init>
 8001382:	b128      	cbz	r0, 8001390 <MX_UART8_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001384:	2167      	movs	r1, #103	; 0x67
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_UART8_Init+0x44>)
  }

}
 8001388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800138c:	f7ff bd98 	b.w	8000ec0 <_Error_Handler>
 8001390:	bd08      	pop	{r3, pc}
 8001392:	bf00      	nop
 8001394:	2000429c 	.word	0x2000429c
 8001398:	40007c00 	.word	0x40007c00
 800139c:	0800581d 	.word	0x0800581d
 80013a0:	0196e6aa 	.word	0x0196e6aa

080013a4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013a4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80013a6:	480f      	ldr	r0, [pc, #60]	; (80013e4 <MX_USART1_UART_Init+0x40>)
  huart1.Init.BaudRate = 921600;
 80013a8:	f44f 2e61 	mov.w	lr, #921600	; 0xe1000
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART1_UART_Init+0x44>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ae:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 921600;
 80013b0:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b6:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013bc:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80013c4:	2310      	movs	r3, #16
 80013c6:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ce:	f002 fcec 	bl	8003daa <HAL_UART_Init>
 80013d2:	b128      	cbz	r0, 80013e0 <MX_USART1_UART_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80013d4:	217d      	movs	r1, #125	; 0x7d
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART1_UART_Init+0x48>)
  }

}
 80013d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80013dc:	f7ff bd70 	b.w	8000ec0 <_Error_Handler>
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop
 80013e4:	2000422c 	.word	0x2000422c
 80013e8:	40011000 	.word	0x40011000
 80013ec:	0800581d 	.word	0x0800581d

080013f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013f0:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80013f2:	480e      	ldr	r0, [pc, #56]	; (800142c <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 26666666;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013f4:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 26666666;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART3_UART_Init+0x40>)
 80013f8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8001438 <MX_USART3_UART_Init+0x48>
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013fc:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80013fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart3.Init.BaudRate = 26666666;
 8001402:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	2300      	movs	r3, #0
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8001408:	61c2      	str	r2, [r0, #28]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800140c:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800140e:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001410:	6183      	str	r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001414:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001416:	f002 fcc8 	bl	8003daa <HAL_UART_Init>
 800141a:	b128      	cbz	r0, 8001428 <MX_USART3_UART_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 800141c:	2192      	movs	r1, #146	; 0x92
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_USART3_UART_Init+0x44>)
  }

}
 8001420:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001424:	f7ff bd4c 	b.w	8000ec0 <_Error_Handler>
 8001428:	bd08      	pop	{r3, pc}
 800142a:	bf00      	nop
 800142c:	200041bc 	.word	0x200041bc
 8001430:	40004800 	.word	0x40004800
 8001434:	0800581d 	.word	0x0800581d
 8001438:	0196e6aa 	.word	0x0196e6aa

0800143c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 800143c:	6803      	ldr	r3, [r0, #0]
 800143e:	4a4b      	ldr	r2, [pc, #300]	; (800156c <HAL_UART_MspInit+0x130>)
 8001440:	4293      	cmp	r3, r2
{
 8001442:	b530      	push	{r4, r5, lr}
 8001444:	4605      	mov	r5, r0
 8001446:	b08b      	sub	sp, #44	; 0x2c
  if(uartHandle->Instance==UART4)
 8001448:	d13f      	bne.n	80014ca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800144a:	4b49      	ldr	r3, [pc, #292]	; (8001570 <HAL_UART_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	a905      	add	r1, sp, #20
 800144e:	4849      	ldr	r0, [pc, #292]	; (8001574 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001450:	6c1a      	ldr	r2, [r3, #64]	; 0x40

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001452:	4c49      	ldr	r4, [pc, #292]	; (8001578 <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001454:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2202      	movs	r2, #2
    __HAL_RCC_UART4_CLK_ENABLE();
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2201      	movs	r2, #1
    __HAL_RCC_UART4_CLK_ENABLE();
 8001462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART4_CLK_ENABLE();
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800146c:	2303      	movs	r3, #3
 800146e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001472:	2308      	movs	r3, #8
 8001474:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f000 fc97 	bl	8001da8 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800147a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800147e:	483f      	ldr	r0, [pc, #252]	; (800157c <HAL_UART_MspInit+0x140>)
 8001480:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001484:	6122      	str	r2, [r4, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001486:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800148a:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800148e:	61e2      	str	r2, [r4, #28]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001490:	2300      	movs	r3, #0
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001492:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001496:	4620      	mov	r0, r4
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001498:	60a3      	str	r3, [r4, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800149a:	60e3      	str	r3, [r4, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149c:	6163      	str	r3, [r4, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149e:	61a3      	str	r3, [r4, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80014a0:	6222      	str	r2, [r4, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a2:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80014a4:	f000 faf4 	bl	8001a90 <HAL_DMA_Init>
 80014a8:	b118      	cbz	r0, 80014b2 <HAL_UART_MspInit+0x76>
    {
      _Error_Handler(__FILE__, __LINE__);
 80014aa:	21bc      	movs	r1, #188	; 0xbc
 80014ac:	4834      	ldr	r0, [pc, #208]	; (8001580 <HAL_UART_MspInit+0x144>)
 80014ae:	f7ff fd07 	bl	8000ec0 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80014b2:	2034      	movs	r0, #52	; 0x34
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80014b4:	666c      	str	r4, [r5, #100]	; 0x64
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80014ba:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80014bc:	f000 f93c 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014c0:	2034      	movs	r0, #52	; 0x34
 80014c2:	f000 f971 	bl	80017a8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014c6:	b00b      	add	sp, #44	; 0x2c
 80014c8:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==UART8)
 80014ca:	4a2e      	ldr	r2, [pc, #184]	; (8001584 <HAL_UART_MspInit+0x148>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d117      	bne.n	8001500 <HAL_UART_MspInit+0xc4>
    __HAL_RCC_UART8_CLK_ENABLE();
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	a905      	add	r1, sp, #20
 80014d4:	482c      	ldr	r0, [pc, #176]	; (8001588 <HAL_UART_MspInit+0x14c>)
    __HAL_RCC_UART8_CLK_ENABLE();
 80014d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2202      	movs	r2, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e4:	2201      	movs	r2, #1
    __HAL_RCC_UART8_CLK_ENABLE();
 80014e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ea:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART8_CLK_ENABLE();
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014f0:	2303      	movs	r3, #3
 80014f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80014f6:	2308      	movs	r3, #8
 80014f8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fa:	f000 fc55 	bl	8001da8 <HAL_GPIO_Init>
}
 80014fe:	e7e2      	b.n	80014c6 <HAL_UART_MspInit+0x8a>
  else if(uartHandle->Instance==USART1)
 8001500:	4a22      	ldr	r2, [pc, #136]	; (800158c <HAL_UART_MspInit+0x150>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d117      	bne.n	8001536 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	a905      	add	r1, sp, #20
 800150a:	481a      	ldr	r0, [pc, #104]	; (8001574 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800150c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800150e:	f042 0210 	orr.w	r2, r2, #16
 8001512:	645a      	str	r2, [r3, #68]	; 0x44
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	9303      	str	r3, [sp, #12]
 800151c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800151e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001522:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001528:	2301      	movs	r3, #1
 800152a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001530:	2307      	movs	r3, #7
 8001532:	9309      	str	r3, [sp, #36]	; 0x24
 8001534:	e7e1      	b.n	80014fa <HAL_UART_MspInit+0xbe>
  else if(uartHandle->Instance==USART3)
 8001536:	4a16      	ldr	r2, [pc, #88]	; (8001590 <HAL_UART_MspInit+0x154>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d1c4      	bne.n	80014c6 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800153e:	a905      	add	r1, sp, #20
 8001540:	4814      	ldr	r0, [pc, #80]	; (8001594 <HAL_UART_MspInit+0x158>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001544:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001550:	9304      	str	r3, [sp, #16]
 8001552:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001554:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001558:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155e:	2301      	movs	r3, #1
 8001560:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001566:	2307      	movs	r3, #7
 8001568:	9309      	str	r3, [sp, #36]	; 0x24
 800156a:	e7c6      	b.n	80014fa <HAL_UART_MspInit+0xbe>
 800156c:	40004c00 	.word	0x40004c00
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000
 8001578:	2000415c 	.word	0x2000415c
 800157c:	40026040 	.word	0x40026040
 8001580:	0800581d 	.word	0x0800581d
 8001584:	40007c00 	.word	0x40007c00
 8001588:	40021000 	.word	0x40021000
 800158c:	40011000 	.word	0x40011000
 8001590:	40004800 	.word	0x40004800
 8001594:	40020c00 	.word	0x40020c00

08001598 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8001598:	b508      	push	{r3, lr}

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_USB_OTG_HS_PCD_Init+0x38>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800159c:	2309      	movs	r3, #9
 800159e:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <MX_USB_OTG_HS_PCD_Init+0x3c>)
 80015a0:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80015a4:	2300      	movs	r3, #0
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80015a6:	2201      	movs	r2, #1
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80015a8:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 80015aa:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80015ac:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80015ae:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80015b0:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80015b2:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80015b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80015b6:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80015b8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80015ba:	f000 fd84 	bl	80020c6 <HAL_PCD_Init>
 80015be:	b128      	cbz	r0, 80015cc <MX_USB_OTG_HS_PCD_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80015c0:	214f      	movs	r1, #79	; 0x4f
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USB_OTG_HS_PCD_Init+0x40>)
  }

}
 80015c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80015c8:	f7ff bc7a 	b.w	8000ec0 <_Error_Handler>
 80015cc:	bd08      	pop	{r3, pc}
 80015ce:	bf00      	nop
 80015d0:	2000437c 	.word	0x2000437c
 80015d4:	40040000 	.word	0x40040000
 80015d8:	08005832 	.word	0x08005832

080015dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 80015dc:	6802      	ldr	r2, [r0, #0]
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_PCD_MspInit+0x7c>)
 80015e0:	429a      	cmp	r2, r3
{
 80015e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e4:	b089      	sub	sp, #36	; 0x24
  if(pcdHandle->Instance==USB_OTG_HS)
 80015e6:	d135      	bne.n	8001654 <HAL_PCD_MspInit+0x78>
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80015e8:	230d      	movs	r3, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015f0:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	a903      	add	r1, sp, #12
 80015f4:	4819      	ldr	r0, [pc, #100]	; (800165c <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80015f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015fe:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	f000 fbd2 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001604:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	a903      	add	r1, sp, #12
 8001608:	4815      	ldr	r0, [pc, #84]	; (8001660 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800160a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001612:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f000 fbc8 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8001618:	f643 4323 	movw	r3, #15395	; 0x3c23
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	a903      	add	r1, sp, #12
 800161e:	4811      	ldr	r0, [pc, #68]	; (8001664 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8001620:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001628:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f000 fbbd 	bl	8001da8 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_PCD_MspInit+0x8c>)
 8001630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001632:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
 8001638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800163a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800163e:	9201      	str	r2, [sp, #4]
 8001640:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001644:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001654:	b009      	add	sp, #36	; 0x24
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001658:	40040000 	.word	0x40040000
 800165c:	40020800 	.word	0x40020800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400
 8001668:	40023800 	.word	0x40023800

0800166c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800166c:	490f      	ldr	r1, [pc, #60]	; (80016ac <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800166e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <SystemInit+0x44>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001686:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800168e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001692:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <SystemInit+0x48>)
 8001696:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800169e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016a0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016a6:	608b      	str	r3, [r1, #8]
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00
 80016b0:	40023800 	.word	0x40023800
 80016b4:	24003010 	.word	0x24003010

080016b8 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_Init+0x20>)
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ba:	2003      	movs	r0, #3
{
 80016bc:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c6:	f000 f825 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fc88 	bl	8000fe0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fc56 	bl	8000f80 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80016d4:	2000      	movs	r0, #0
 80016d6:	bd08      	pop	{r3, pc}
 80016d8:	40023c00 	.word	0x40023c00

080016dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80016dc:	4a02      	ldr	r2, [pc, #8]	; (80016e8 <HAL_IncTick+0xc>)
 80016de:	6813      	ldr	r3, [r2, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2000477c 	.word	0x2000477c

080016ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016ec:	4b01      	ldr	r3, [pc, #4]	; (80016f4 <HAL_GetTick+0x8>)
 80016ee:	6818      	ldr	r0, [r3, #0]
}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2000477c 	.word	0x2000477c

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80016f8:	b513      	push	{r0, r1, r4, lr}
 80016fa:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80016fc:	f7ff fff6 	bl	80016ec <HAL_GetTick>
 8001700:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001702:	f7ff fff3 	bl	80016ec <HAL_GetTick>
 8001706:	9b01      	ldr	r3, [sp, #4]
 8001708:	1b00      	subs	r0, r0, r4
 800170a:	4298      	cmp	r0, r3
 800170c:	d3f9      	bcc.n	8001702 <HAL_Delay+0xa>
  {
  }
}
 800170e:	b002      	add	sp, #8
 8001710:	bd10      	pop	{r4, pc}
	...

08001714 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001716:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800171a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	0c1b      	lsrs	r3, r3, #16
 8001726:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800172a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800172e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001730:	60d3      	str	r3, [r2, #12]
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b530      	push	{r4, r5, lr}
 800173c:	68dc      	ldr	r4, [r3, #12]
 800173e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001742:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	2b04      	cmp	r3, #4
 800174a:	bf28      	it	cs
 800174c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001754:	bf8c      	ite	hi
 8001756:	3c03      	subhi	r4, #3
 8001758:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800175e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f103 33ff 	add.w	r3, r3, #4294967295
 8001764:	ea01 0103 	and.w	r1, r1, r3
 8001768:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	fa05 f404 	lsl.w	r4, r5, r4
 8001770:	f104 34ff 	add.w	r4, r4, #4294967295
 8001774:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	ea42 0201 	orr.w	r2, r2, r1
 800177c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8001780:	da05      	bge.n	800178e <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	f000 000f 	and.w	r0, r0, #15
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_NVIC_SetPriority+0x6c>)
 800178a:	541a      	strb	r2, [r3, r0]
 800178c:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001798:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800179c:	bd30      	pop	{r4, r5, pc}
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	e000ed14 	.word	0xe000ed14

080017a8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017a8:	0942      	lsrs	r2, r0, #5
 80017aa:	2301      	movs	r3, #1
 80017ac:	f000 001f 	and.w	r0, r0, #31
 80017b0:	fa03 f000 	lsl.w	r0, r3, r0
 80017b4:	4b01      	ldr	r3, [pc, #4]	; (80017bc <HAL_NVIC_EnableIRQ+0x14>)
 80017b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	3801      	subs	r0, #1
 80017c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017c6:	d20a      	bcs.n	80017de <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	21f0      	movs	r1, #240	; 0xf0
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e010 	.word	0xe000e010
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80017ee:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	bf0c      	ite	eq
 80017f4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80017f8:	f022 0204 	bicne.w	r2, r2, #4
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	4770      	bx	lr
 8001800:	e000e010 	.word	0xe000e010

08001804 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <DFSDM_GetChannelFromInstance+0x54>)
 8001806:	4298      	cmp	r0, r3
 8001808:	d017      	beq.n	800183a <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 800180a:	3320      	adds	r3, #32
 800180c:	4298      	cmp	r0, r3
 800180e:	d016      	beq.n	800183e <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 8001810:	3320      	adds	r3, #32
 8001812:	4298      	cmp	r0, r3
 8001814:	d015      	beq.n	8001842 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 8001816:	3320      	adds	r3, #32
 8001818:	4298      	cmp	r0, r3
 800181a:	d014      	beq.n	8001846 <DFSDM_GetChannelFromInstance+0x42>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 800181c:	3320      	adds	r3, #32
 800181e:	4298      	cmp	r0, r3
 8001820:	d013      	beq.n	800184a <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 8001822:	3320      	adds	r3, #32
 8001824:	4298      	cmp	r0, r3
 8001826:	d012      	beq.n	800184e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 8001828:	3320      	adds	r3, #32
 800182a:	4298      	cmp	r0, r3
 800182c:	d011      	beq.n	8001852 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
  {
    channel = 7;
 800182e:	3320      	adds	r3, #32
 8001830:	4298      	cmp	r0, r3
 8001832:	bf14      	ite	ne
 8001834:	20ff      	movne	r0, #255	; 0xff
 8001836:	2007      	moveq	r0, #7
 8001838:	4770      	bx	lr
    channel = 0;
 800183a:	2000      	movs	r0, #0
 800183c:	4770      	bx	lr
    channel = 1;
 800183e:	2001      	movs	r0, #1
 8001840:	4770      	bx	lr
    channel = 2;
 8001842:	2002      	movs	r0, #2
 8001844:	4770      	bx	lr
    channel = 3;
 8001846:	2003      	movs	r0, #3
 8001848:	4770      	bx	lr
    channel = 4;
 800184a:	2004      	movs	r0, #4
 800184c:	4770      	bx	lr
    channel = 5;
 800184e:	2005      	movs	r0, #5
 8001850:	4770      	bx	lr
    channel = 6;
 8001852:	2006      	movs	r0, #6
  }

  return channel;
}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40017400 	.word	0x40017400

0800185c <HAL_DFSDM_ChannelInit>:
{
 800185c:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 800185e:	4604      	mov	r4, r0
 8001860:	2800      	cmp	r0, #0
 8001862:	d067      	beq.n	8001934 <HAL_DFSDM_ChannelInit+0xd8>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001864:	4d34      	ldr	r5, [pc, #208]	; (8001938 <HAL_DFSDM_ChannelInit+0xdc>)
 8001866:	6800      	ldr	r0, [r0, #0]
 8001868:	f7ff ffcc 	bl	8001804 <DFSDM_GetChannelFromInstance>
 800186c:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d15f      	bne.n	8001934 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff f86d 	bl	8000954 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_DFSDM_ChannelInit+0xe0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	3201      	adds	r2, #1
 8001880:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d119      	bne.n	80018bc <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_DFSDM_ChannelInit+0xe4>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001890:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68a1      	ldr	r1, [r4, #8]
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80018a0:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018a2:	7922      	ldrb	r2, [r4, #4]
 80018a4:	2a01      	cmp	r2, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 80018a8:	68e1      	ldr	r1, [r4, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	3901      	subs	r1, #1
 80018ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80018b2:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018ba:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80018bc:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80018be:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80018c0:	6803      	ldr	r3, [r0, #0]
 80018c2:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 80018c6:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80018c8:	6923      	ldr	r3, [r4, #16]
 80018ca:	6802      	ldr	r2, [r0, #0]
 80018cc:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80018ce:	69a1      	ldr	r1, [r4, #24]
 80018d0:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80018d2:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80018d4:	4313      	orrs	r3, r2
 80018d6:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80018d8:	6803      	ldr	r3, [r0, #0]
 80018da:	f023 030f 	bic.w	r3, r3, #15
 80018de:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80018e0:	69e3      	ldr	r3, [r4, #28]
 80018e2:	6802      	ldr	r2, [r0, #0]
 80018e4:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80018e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80018e8:	4313      	orrs	r3, r2
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80018ec:	6003      	str	r3, [r0, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018ee:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80018f0:	6883      	ldr	r3, [r0, #8]
 80018f2:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 80018f6:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80018f8:	6883      	ldr	r3, [r0, #8]
 80018fa:	430b      	orrs	r3, r1
 80018fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001900:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001902:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001904:	6843      	ldr	r3, [r0, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800190c:	6843      	ldr	r3, [r0, #4]
 800190e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001912:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001914:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001918:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800191a:	6803      	ldr	r3, [r0, #0]
 800191c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001920:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001922:	2301      	movs	r3, #1
 8001924:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001928:	f7ff ff6c 	bl	8001804 <DFSDM_GetChannelFromInstance>
 800192c:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8001930:	2000      	movs	r0, #0
 8001932:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001934:	2001      	movs	r0, #1
}
 8001936:	bd38      	pop	{r3, r4, r5, pc}
 8001938:	20000034 	.word	0x20000034
 800193c:	20000054 	.word	0x20000054
 8001940:	40017400 	.word	0x40017400

08001944 <HAL_DFSDM_FilterInit>:
{
 8001944:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_filter == NULL)
 8001946:	4604      	mov	r4, r0
 8001948:	2800      	cmp	r0, #0
 800194a:	d069      	beq.n	8001a20 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800194c:	6802      	ldr	r2, [r0, #0]
 800194e:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <HAL_DFSDM_FilterInit+0xe0>)
 8001950:	429a      	cmp	r2, r3
 8001952:	d105      	bne.n	8001960 <HAL_DFSDM_FilterInit+0x1c>
 8001954:	6840      	ldr	r0, [r0, #4]
 8001956:	2801      	cmp	r0, #1
 8001958:	d063      	beq.n	8001a22 <HAL_DFSDM_FilterInit+0xde>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 800195a:	68e0      	ldr	r0, [r4, #12]
 800195c:	2801      	cmp	r0, #1
 800195e:	d060      	beq.n	8001a22 <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001960:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001962:	2201      	movs	r2, #1
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001964:	4620      	mov	r0, r4
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001966:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001968:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800196a:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800196c:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800196e:	f7fe ff55 	bl	800081c <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800197a:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800197c:	7a22      	ldrb	r2, [r4, #8]
 800197e:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	bf0c      	ite	eq
 8001984:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001988:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 800198c:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800198e:	7a62      	ldrb	r2, [r4, #9]
 8001990:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	bf0c      	ite	eq
 8001996:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800199a:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 800199e:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80019a0:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80019a2:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80019a4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80019a8:	2d02      	cmp	r5, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80019aa:	f022 0208 	bic.w	r2, r2, #8
 80019ae:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80019b0:	d103      	bne.n	80019ba <HAL_DFSDM_FilterInit+0x76>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	6961      	ldr	r1, [r4, #20]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80019ba:	7c20      	ldrb	r0, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80019bc:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80019be:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80019c0:	bf0c      	ite	eq
 80019c2:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80019c6:	f022 0210 	bicne.w	r2, r2, #16
 80019ca:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80019cc:	7c62      	ldrb	r2, [r4, #17]
 80019ce:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	bf0c      	ite	eq
 80019d4:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80019d8:	f022 0220 	bicne.w	r2, r2, #32
 80019dc:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 80019e4:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80019e8:	615a      	str	r2, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80019ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80019ec:	6959      	ldr	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80019ee:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80019f0:	430a      	orrs	r2, r1
 80019f2:	69e1      	ldr	r1, [r4, #28]
 80019f4:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80019f6:	6a21      	ldr	r1, [r4, #32]
 80019f8:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80019fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80019fe:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001a00:	6862      	ldr	r2, [r4, #4]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001a02:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001a06:	2000      	movs	r0, #0
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001a08:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001a0a:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001a0c:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001a0e:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8001a1e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
}
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
 8001a24:	40017500 	.word	0x40017500

08001a28 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001a28:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2bfd      	cmp	r3, #253	; 0xfd
{
 8001a32:	b510      	push	{r4, lr}
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001a34:	d813      	bhi.n	8001a5e <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001a36:	6803      	ldr	r3, [r0, #0]
 8001a38:	0209      	lsls	r1, r1, #8
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001a3a:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001a3c:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001a3e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001a42:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001a46:	bf08      	it	eq
 8001a48:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001a4c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001a50:	601c      	str	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001a52:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001a54:	4321      	orrs	r1, r4
 8001a56:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001a58:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001a5e:	2001      	movs	r0, #1
}
 8001a60:	bd10      	pop	{r4, pc}
	...

08001a64 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a64:	6803      	ldr	r3, [r0, #0]
 8001a66:	2118      	movs	r1, #24
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a6e:	3a10      	subs	r2, #16
 8001a70:	f023 0303 	bic.w	r3, r3, #3
 8001a74:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a78:	4904      	ldr	r1, [pc, #16]	; (8001a8c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001a7a:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a7c:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a7e:	bf88      	it	hi
 8001a80:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a82:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a84:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001a86:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	08005861 	.word	0x08005861

08001a90 <HAL_DMA_Init>:
{
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff fe2a 	bl	80016ec <HAL_GetTick>
 8001a98:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d071      	beq.n	8001b82 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001a9e:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8001aa0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001aa2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001aac:	6813      	ldr	r3, [r2, #0]
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab4:	6821      	ldr	r1, [r4, #0]
 8001ab6:	680b      	ldr	r3, [r1, #0]
 8001ab8:	07d8      	lsls	r0, r3, #31
 8001aba:	d43c      	bmi.n	8001b36 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001abc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001abe:	4d32      	ldr	r5, [pc, #200]	; (8001b88 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac0:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ac2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac4:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac6:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	68e2      	ldr	r2, [r4, #12]
 8001acc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ace:	6922      	ldr	r2, [r4, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	6962      	ldr	r2, [r4, #20]
 8001ad4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad6:	69e2      	ldr	r2, [r4, #28]
 8001ad8:	4303      	orrs	r3, r0
 8001ada:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001adc:	6a22      	ldr	r2, [r4, #32]
 8001ade:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ae2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ae8:	bf01      	itttt	eq
 8001aea:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001aec:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001aee:	4335      	orreq	r5, r6
 8001af0:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af2:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001af4:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001af6:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001afc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b00:	d10b      	bne.n	8001b1a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001b02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b04:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001b06:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b08:	b13d      	cbz	r5, 8001b1a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b0a:	b9f8      	cbnz	r0, 8001b4c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001b0c:	2a01      	cmp	r2, #1
 8001b0e:	d02d      	beq.n	8001b6c <HAL_DMA_Init+0xdc>
 8001b10:	d301      	bcc.n	8001b16 <HAL_DMA_Init+0x86>
 8001b12:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b14:	d101      	bne.n	8001b1a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b16:	01ea      	lsls	r2, r5, #7
 8001b18:	d42b      	bmi.n	8001b72 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001b1a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff ffa1 	bl	8001a64 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b24:	233f      	movs	r3, #63	; 0x3f
 8001b26:	4093      	lsls	r3, r2
 8001b28:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001b30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b36:	f7ff fdd9 	bl	80016ec <HAL_GetTick>
 8001b3a:	1b40      	subs	r0, r0, r5
 8001b3c:	2805      	cmp	r0, #5
 8001b3e:	d9b9      	bls.n	8001ab4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b40:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b42:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b44:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001b46:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b4c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001b50:	d113      	bne.n	8001b7a <HAL_DMA_Init+0xea>
    switch (tmp)
 8001b52:	2a03      	cmp	r2, #3
 8001b54:	d8e1      	bhi.n	8001b1a <HAL_DMA_Init+0x8a>
 8001b56:	a001      	add	r0, pc, #4	; (adr r0, 8001b5c <HAL_DMA_Init+0xcc>)
 8001b58:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001b5c:	08001b73 	.word	0x08001b73
 8001b60:	08001b17 	.word	0x08001b17
 8001b64:	08001b73 	.word	0x08001b73
 8001b68:	08001b6d 	.word	0x08001b6d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b6c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001b70:	d1d3      	bne.n	8001b1a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b72:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001b74:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b76:	6563      	str	r3, [r4, #84]	; 0x54
 8001b78:	e7e5      	b.n	8001b46 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001b7a:	2a02      	cmp	r2, #2
 8001b7c:	d9f9      	bls.n	8001b72 <HAL_DMA_Init+0xe2>
 8001b7e:	2a03      	cmp	r2, #3
 8001b80:	e7c8      	b.n	8001b14 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001b82:	2001      	movs	r0, #1
 8001b84:	bd70      	pop	{r4, r5, r6, pc}
 8001b86:	bf00      	nop
 8001b88:	e010803f 	.word	0xe010803f

08001b8c <HAL_DMA_Start_IT>:
{
 8001b8c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001b8e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001b92:	2c01      	cmp	r4, #1
 8001b94:	d035      	beq.n	8001c02 <HAL_DMA_Start_IT+0x76>
 8001b96:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b98:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001b9a:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8001b9c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ba0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001ba4:	2c01      	cmp	r4, #1
 8001ba6:	f04f 0402 	mov.w	r4, #2
 8001baa:	d128      	bne.n	8001bfe <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bb0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb2:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bb4:	6825      	ldr	r5, [r4, #0]
 8001bb6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001bba:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001bbc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bbe:	6883      	ldr	r3, [r0, #8]
 8001bc0:	2b40      	cmp	r3, #64	; 0x40
 8001bc2:	d119      	bne.n	8001bf8 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8001bc4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001bc6:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001bca:	233f      	movs	r3, #63	; 0x3f
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	f043 0316 	orr.w	r3, r3, #22
 8001bd6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001bd8:	6963      	ldr	r3, [r4, #20]
 8001bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bde:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001be0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001be2:	b11b      	cbz	r3, 8001bec <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001bec:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bee:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6023      	str	r3, [r4, #0]
 8001bf6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8001bf8:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bfa:	60e2      	str	r2, [r4, #12]
 8001bfc:	e7e4      	b.n	8001bc8 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8001bfe:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001c02:	2002      	movs	r0, #2
}
 8001c04:	bd70      	pop	{r4, r5, r6, pc}

08001c06 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c06:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d003      	beq.n	8001c16 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001c12:	2001      	movs	r0, #1
 8001c14:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001c16:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c18:	2305      	movs	r3, #5
 8001c1a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8001c1e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8001c2c:	2300      	movs	r3, #0
{
 8001c2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001c30:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c32:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_DMA_IRQHandler+0x170>)
{
 8001c36:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c38:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8001c3a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001c3e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c40:	409a      	lsls	r2, r3
 8001c42:	4216      	tst	r6, r2
 8001c44:	d00c      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c46:	6801      	ldr	r1, [r0, #0]
 8001c48:	6808      	ldr	r0, [r1, #0]
 8001c4a:	0740      	lsls	r0, r0, #29
 8001c4c:	d508      	bpl.n	8001c60 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c4e:	6808      	ldr	r0, [r1, #0]
 8001c50:	f020 0004 	bic.w	r0, r0, #4
 8001c54:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c56:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c58:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c60:	4a4f      	ldr	r2, [pc, #316]	; (8001da0 <HAL_DMA_IRQHandler+0x174>)
 8001c62:	409a      	lsls	r2, r3
 8001c64:	4216      	tst	r6, r2
 8001c66:	d008      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c68:	6821      	ldr	r1, [r4, #0]
 8001c6a:	6949      	ldr	r1, [r1, #20]
 8001c6c:	0609      	lsls	r1, r1, #24
 8001c6e:	d504      	bpl.n	8001c7a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c70:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c72:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001c74:	f042 0202 	orr.w	r2, r2, #2
 8001c78:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7a:	4a4a      	ldr	r2, [pc, #296]	; (8001da4 <HAL_DMA_IRQHandler+0x178>)
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	4216      	tst	r6, r2
 8001c80:	d008      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c82:	6821      	ldr	r1, [r4, #0]
 8001c84:	6809      	ldr	r1, [r1, #0]
 8001c86:	0788      	lsls	r0, r1, #30
 8001c88:	d504      	bpl.n	8001c94 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c8a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001c8e:	f042 0204 	orr.w	r2, r2, #4
 8001c92:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c94:	2210      	movs	r2, #16
 8001c96:	409a      	lsls	r2, r3
 8001c98:	4216      	tst	r6, r2
 8001c9a:	d010      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	0709      	lsls	r1, r1, #28
 8001ca2:	d50c      	bpl.n	8001cbe <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ca4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	0350      	lsls	r0, r2, #13
 8001caa:	d535      	bpl.n	8001d18 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0319      	lsls	r1, r3, #12
 8001cb0:	d401      	bmi.n	8001cb6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cb4:	e000      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb8:	b10b      	cbz	r3, 8001cbe <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001cba:	4620      	mov	r0, r4
 8001cbc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	408a      	lsls	r2, r1
 8001cc4:	4216      	tst	r6, r2
 8001cc6:	d038      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	06c6      	lsls	r6, r0, #27
 8001cce:	d534      	bpl.n	8001d3a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cd0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cd2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001cd6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cd8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cda:	d125      	bne.n	8001d28 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cdc:	f022 0216 	bic.w	r2, r2, #22
 8001ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ce8:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001cec:	b90a      	cbnz	r2, 8001cf2 <HAL_DMA_IRQHandler+0xc6>
 8001cee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cf0:	b11a      	cbz	r2, 8001cfa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	f022 0208 	bic.w	r2, r2, #8
 8001cf8:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfa:	233f      	movs	r3, #63	; 0x3f
 8001cfc:	408b      	lsls	r3, r1
 8001cfe:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001d00:	2300      	movs	r3, #0
 8001d02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001d0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001d0e:	b10b      	cbz	r3, 8001d14 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001d10:	4620      	mov	r0, r4
 8001d12:	4798      	blx	r3
}
 8001d14:	b003      	add	sp, #12
 8001d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	05d2      	lsls	r2, r2, #23
 8001d1c:	d4c9      	bmi.n	8001cb2 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f022 0208 	bic.w	r2, r2, #8
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e7c4      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d28:	0350      	lsls	r0, r2, #13
 8001d2a:	d528      	bpl.n	8001d7e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0319      	lsls	r1, r3, #12
 8001d30:	d432      	bmi.n	8001d98 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001d32:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001d34:	b10b      	cbz	r3, 8001d3a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001d36:	4620      	mov	r0, r4
 8001d38:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0e9      	beq.n	8001d14 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d42:	07da      	lsls	r2, r3, #31
 8001d44:	d519      	bpl.n	8001d7a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d46:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001d48:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d4a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d56:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001d5a:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001d5e:	9b01      	ldr	r3, [sp, #4]
 8001d60:	3301      	adds	r3, #1
 8001d62:	429f      	cmp	r7, r3
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	d302      	bcc.n	8001d6e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d68:	6813      	ldr	r3, [r2, #0]
 8001d6a:	07db      	lsls	r3, r3, #31
 8001d6c:	d4f7      	bmi.n	8001d5e <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001d74:	2301      	movs	r3, #1
 8001d76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001d7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001d7c:	e7c7      	b.n	8001d0e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001d84:	d108      	bne.n	8001d98 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d86:	6819      	ldr	r1, [r3, #0]
 8001d88:	f021 0110 	bic.w	r1, r1, #16
 8001d8c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001d90:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001d94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001d98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d9a:	e7cb      	b.n	8001d34 <HAL_DMA_IRQHandler+0x108>
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	00800001 	.word	0x00800001
 8001da4:	00800004 	.word	0x00800004

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dac:	680b      	ldr	r3, [r1, #0]
{
 8001dae:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001f74 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db4:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001db6:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db8:	4a6c      	ldr	r2, [pc, #432]	; (8001f6c <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dba:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001f78 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8001dbe:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc2:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8001dc4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001dcc:	45b6      	cmp	lr, r6
 8001dce:	f040 80b3 	bne.w	8001f38 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd2:	684c      	ldr	r4, [r1, #4]
 8001dd4:	f024 0710 	bic.w	r7, r4, #16
 8001dd8:	2f02      	cmp	r7, #2
 8001dda:	d116      	bne.n	8001e0a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001ddc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001de0:	f003 0b07 	and.w	fp, r3, #7
 8001de4:	f04f 0c0f 	mov.w	ip, #15
 8001de8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001dec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001df0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001df4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001df8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dfc:	690d      	ldr	r5, [r1, #16]
 8001dfe:	fa05 f50b 	lsl.w	r5, r5, fp
 8001e02:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001e06:	f8ca 5020 	str.w	r5, [sl, #32]
 8001e0a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e0e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001e10:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e14:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e18:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e1c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e1e:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e22:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e24:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e26:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e2a:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8001e2e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e32:	d811      	bhi.n	8001e58 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001e34:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e36:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e3a:	68cf      	ldr	r7, [r1, #12]
 8001e3c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001e40:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001e44:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e46:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e48:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e4c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001e50:	409f      	lsls	r7, r3
 8001e52:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001e56:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001e58:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e5a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e5c:	688f      	ldr	r7, [r1, #8]
 8001e5e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001e62:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001e64:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e66:	00e5      	lsls	r5, r4, #3
 8001e68:	d566      	bpl.n	8001f38 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001e6e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e72:	f003 0e03 	and.w	lr, r3, #3
 8001e76:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8001e7e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e82:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8001e8a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001e8e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001e92:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8001e96:	9503      	str	r5, [sp, #12]
 8001e98:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e9a:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8001e9e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ea2:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ea6:	4d32      	ldr	r5, [pc, #200]	; (8001f70 <HAL_GPIO_Init+0x1c8>)
 8001ea8:	42a8      	cmp	r0, r5
 8001eaa:	d04c      	beq.n	8001f46 <HAL_GPIO_Init+0x19e>
 8001eac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eb0:	42a8      	cmp	r0, r5
 8001eb2:	d04a      	beq.n	8001f4a <HAL_GPIO_Init+0x1a2>
 8001eb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eb8:	42a8      	cmp	r0, r5
 8001eba:	d048      	beq.n	8001f4e <HAL_GPIO_Init+0x1a6>
 8001ebc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ec0:	42a8      	cmp	r0, r5
 8001ec2:	d046      	beq.n	8001f52 <HAL_GPIO_Init+0x1aa>
 8001ec4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ec8:	42a8      	cmp	r0, r5
 8001eca:	d044      	beq.n	8001f56 <HAL_GPIO_Init+0x1ae>
 8001ecc:	4548      	cmp	r0, r9
 8001ece:	d044      	beq.n	8001f5a <HAL_GPIO_Init+0x1b2>
 8001ed0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ed4:	42a8      	cmp	r0, r5
 8001ed6:	d042      	beq.n	8001f5e <HAL_GPIO_Init+0x1b6>
 8001ed8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001edc:	42a8      	cmp	r0, r5
 8001ede:	d040      	beq.n	8001f62 <HAL_GPIO_Init+0x1ba>
 8001ee0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ee4:	42a8      	cmp	r0, r5
 8001ee6:	d03e      	beq.n	8001f66 <HAL_GPIO_Init+0x1be>
 8001ee8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eec:	42a8      	cmp	r0, r5
 8001eee:	bf14      	ite	ne
 8001ef0:	250a      	movne	r5, #10
 8001ef2:	2509      	moveq	r5, #9
 8001ef4:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001efc:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f00:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8001f06:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	bf0c      	ite	eq
 8001f0a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001f0c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8001f12:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001f14:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	bf0c      	ite	eq
 8001f18:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001f1a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001f20:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001f22:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	bf0c      	ite	eq
 8001f26:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001f28:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f2a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001f2c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001f2e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	bf54      	ite	pl
 8001f32:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001f34:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001f36:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f38:	3301      	adds	r3, #1
 8001f3a:	2b10      	cmp	r3, #16
 8001f3c:	f47f af3f 	bne.w	8001dbe <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001f40:	b005      	add	sp, #20
 8001f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f46:	2500      	movs	r5, #0
 8001f48:	e7d4      	b.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001f4a:	2501      	movs	r5, #1
 8001f4c:	e7d2      	b.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001f4e:	2502      	movs	r5, #2
 8001f50:	e7d0      	b.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001f52:	2503      	movs	r5, #3
 8001f54:	e7ce      	b.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001f56:	2504      	movs	r5, #4
 8001f58:	e7cc      	b.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001f5a:	2505      	movs	r5, #5
 8001f5c:	e7ca      	b.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001f5e:	2506      	movs	r5, #6
 8001f60:	e7c8      	b.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001f62:	2507      	movs	r5, #7
 8001f64:	e7c6      	b.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001f66:	2508      	movs	r5, #8
 8001f68:	e7c4      	b.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001f6a:	bf00      	nop
 8001f6c:	40013c00 	.word	0x40013c00
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40021400 	.word	0x40021400

08001f7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	b10a      	cbz	r2, 8001f82 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f7e:	6181      	str	r1, [r0, #24]
 8001f80:	4770      	bx	lr
 8001f82:	0409      	lsls	r1, r1, #16
 8001f84:	e7fb      	b.n	8001f7e <HAL_GPIO_WritePin+0x2>

08001f86 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001f86:	6943      	ldr	r3, [r0, #20]
 8001f88:	4059      	eors	r1, r3
 8001f8a:	6141      	str	r1, [r0, #20]
 8001f8c:	4770      	bx	lr

08001f8e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f8e:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001f90:	4604      	mov	r4, r0
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d04a      	beq.n	800202c <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001f96:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f9e:	b91b      	cbnz	r3, 8001fa8 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fa4:	f7fe fe90 	bl	8000cc8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa8:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001faa:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb0:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fbc:	6862      	ldr	r2, [r4, #4]
 8001fbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fce:	d124      	bne.n	800201a <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fd4:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fd6:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001fda:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fdc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001fe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fe4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fec:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001fee:	6922      	ldr	r2, [r4, #16]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	69a1      	ldr	r1, [r4, #24]
 8001ff4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ff8:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ffa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ffc:	69e2      	ldr	r2, [r4, #28]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800200a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800200e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002012:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8002018:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800201a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800201e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002020:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002022:	d1d8      	bne.n	8001fd6 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e7d4      	b.n	8001fd6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800202c:	2001      	movs	r0, #1
}
 800202e:	bd10      	pop	{r4, pc}

08002030 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002030:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	2a20      	cmp	r2, #32
{
 8002038:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800203a:	d11d      	bne.n	8002078 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002040:	2b01      	cmp	r3, #1
 8002042:	d019      	beq.n	8002078 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002044:	2324      	movs	r3, #36	; 0x24
 8002046:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800204a:	6803      	ldr	r3, [r0, #0]
 800204c:	681c      	ldr	r4, [r3, #0]
 800204e:	f024 0401 	bic.w	r4, r4, #1
 8002052:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002054:	681c      	ldr	r4, [r3, #0]
 8002056:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800205a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800205c:	681c      	ldr	r4, [r3, #0]
 800205e:	4321      	orrs	r1, r4
 8002060:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	f041 0101 	orr.w	r1, r1, #1
 8002068:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800206c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002070:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002074:	4618      	mov	r0, r3
 8002076:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002078:	2002      	movs	r0, #2
  }
}
 800207a:	bd10      	pop	{r4, pc}

0800207c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800207c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800207e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002082:	b2e4      	uxtb	r4, r4
 8002084:	2c20      	cmp	r4, #32
 8002086:	d11c      	bne.n	80020c2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002088:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800208c:	2b01      	cmp	r3, #1
 800208e:	d018      	beq.n	80020c2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002090:	2324      	movs	r3, #36	; 0x24
 8002092:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002096:	6803      	ldr	r3, [r0, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020a0:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020a2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020a6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020aa:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80020ba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80020be:	4618      	mov	r0, r3
 80020c0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80020c2:	2002      	movs	r0, #2
  }
}
 80020c4:	bd10      	pop	{r4, pc}

080020c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80020c8:	4606      	mov	r6, r0
{
 80020ca:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d067      	beq.n	80021a0 <HAL_PCD_Init+0xda>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020d0:	2303      	movs	r3, #3

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 80020d2:	4634      	mov	r4, r6

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80020d4:	466d      	mov	r5, sp
 80020d6:	1d37      	adds	r7, r6, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80020d8:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 80020dc:	f7ff fa7e 	bl	80015dc <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 80020e0:	f854 0b10 	ldr.w	r0, [r4], #16
 80020e4:	f001 fee7 	bl	8003eb6 <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f4:	f106 0410 	add.w	r4, r6, #16
 80020f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020fc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002100:	6830      	ldr	r0, [r6, #0]

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8002102:	2501      	movs	r5, #1
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002104:	f001 fe9c 	bl	8003e40 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8002108:	2100      	movs	r1, #0
 800210a:	6830      	ldr	r0, [r6, #0]
 800210c:	f001 fed9 	bl	8003ec2 <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 8002110:	2100      	movs	r1, #0
 8002112:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8002114:	4632      	mov	r2, r6
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002116:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8002118:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 800211c:	321c      	adds	r2, #28
   hpcd->IN_ep[i].tx_fifo_num = i;
 800211e:	8451      	strh	r1, [r2, #34]	; 0x22
 for (i = 0; i < 15 ; i++)
 8002120:	3101      	adds	r1, #1
   hpcd->IN_ep[i].is_in = 1;
 8002122:	7755      	strb	r5, [r2, #29]
 for (i = 0; i < 15 ; i++)
 8002124:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002126:	77d0      	strb	r0, [r2, #31]
   hpcd->IN_ep[i].maxpacket =  0;
 8002128:	6250      	str	r0, [r2, #36]	; 0x24
   hpcd->IN_ep[i].xfer_buff = 0;
 800212a:	6290      	str	r0, [r2, #40]	; 0x28
   hpcd->IN_ep[i].xfer_len = 0;
 800212c:	6310      	str	r0, [r2, #48]	; 0x30
 for (i = 0; i < 15 ; i++)
 800212e:	d1f3      	bne.n	8002118 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0;
   hpcd->OUT_ep[i].xfer_buff = 0;
   hpcd->OUT_ep[i].xfer_len = 0;

   hpcd->Instance->DIEPTXF[i] = 0;
 8002130:	2200      	movs	r2, #0
 8002132:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0;
 8002136:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 8002138:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->Instance->DIEPTXF[i] = 0;
 800213c:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->IN_ep[i].tx_fifo_num = i;
 8002140:	87da      	strh	r2, [r3, #62]	; 0x3e
 for (i = 0; i < 15 ; i++)
 8002142:	3201      	adds	r2, #1
   hpcd->Instance->DIEPTXF[i] = 0;
 8002144:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->OUT_ep[i].is_in = 0;
 8002148:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
 for (i = 0; i < 15 ; i++)
 800214c:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800214e:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 8002152:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 8002156:	f103 031c 	add.w	r3, r3, #28
   hpcd->OUT_ep[i].xfer_buff = 0;
 800215a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0;
 800215e:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   hpcd->Instance->DIEPTXF[i] = 0;
 8002162:	6041      	str	r1, [r0, #4]
 for (i = 0; i < 15 ; i++)
 8002164:	d1e8      	bne.n	8002138 <HAL_PCD_Init+0x72>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8002166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002168:	466d      	mov	r5, sp
 800216a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002170:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002174:	e885 0003 	stmia.w	r5, {r0, r1}
 8002178:	4670      	mov	r0, lr
 800217a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800217e:	f001 fee1 	bl	8003f44 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 8002182:	2301      	movs	r3, #1
 8002184:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8002188:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800218a:	2b01      	cmp	r3, #1
 800218c:	d102      	bne.n	8002194 <HAL_PCD_Init+0xce>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 800218e:	4630      	mov	r0, r6
 8002190:	f000 f808 	bl	80021a4 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 8002194:	6830      	ldr	r0, [r6, #0]
 8002196:	f001 ff7b 	bl	8004090 <USB_DevDisconnect>
 return HAL_OK;
 800219a:	2000      	movs	r0, #0
}
 800219c:	b00b      	add	sp, #44	; 0x2c
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80021a0:	2001      	movs	r0, #1
 80021a2:	e7fb      	b.n	800219c <HAL_PCD_Init+0xd6>

080021a4 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 80021a4:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80021a6:	6802      	ldr	r2, [r0, #0]
{
 80021a8:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 80021aa:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 80021ae:	2000      	movs	r0, #0
 80021b0:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021b4:	6993      	ldr	r3, [r2, #24]
 80021b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021ba:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80021be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c2:	f043 0303 	orr.w	r3, r3, #3
 80021c6:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80021ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021d2:	4c19      	ldr	r4, [pc, #100]	; (8002238 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ea:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ec:	f7ff fa7e 	bl	80016ec <HAL_GetTick>
 80021f0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021f2:	6863      	ldr	r3, [r4, #4]
 80021f4:	03da      	lsls	r2, r3, #15
 80021f6:	d50c      	bpl.n	8002212 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fe:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002200:	f7ff fa74 	bl	80016ec <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002204:	4c0c      	ldr	r4, [pc, #48]	; (8002238 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8002206:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002208:	6863      	ldr	r3, [r4, #4]
 800220a:	039b      	lsls	r3, r3, #14
 800220c:	d50a      	bpl.n	8002224 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800220e:	2000      	movs	r0, #0
 8002210:	e006      	b.n	8002220 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002212:	f7ff fa6b 	bl	80016ec <HAL_GetTick>
 8002216:	1b40      	subs	r0, r0, r5
 8002218:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800221c:	d9e9      	bls.n	80021f2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800221e:	2003      	movs	r0, #3
}
 8002220:	b003      	add	sp, #12
 8002222:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002224:	f7ff fa62 	bl	80016ec <HAL_GetTick>
 8002228:	1b40      	subs	r0, r0, r5
 800222a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800222e:	d9eb      	bls.n	8002208 <HAL_PWREx_EnableOverDrive+0x3c>
 8002230:	e7f5      	b.n	800221e <HAL_PWREx_EnableOverDrive+0x52>
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000

0800223c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002240:	4604      	mov	r4, r0
 8002242:	b918      	cbnz	r0, 800224c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002244:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002246:	b002      	add	sp, #8
 8002248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224c:	6803      	ldr	r3, [r0, #0]
 800224e:	07d8      	lsls	r0, r3, #31
 8002250:	d410      	bmi.n	8002274 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	0799      	lsls	r1, r3, #30
 8002256:	d45e      	bmi.n	8002316 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	0719      	lsls	r1, r3, #28
 800225c:	f100 80a3 	bmi.w	80023a6 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	075a      	lsls	r2, r3, #29
 8002264:	f100 80c4 	bmi.w	80023f0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002268:	69a2      	ldr	r2, [r4, #24]
 800226a:	2a00      	cmp	r2, #0
 800226c:	f040 812e 	bne.w	80024cc <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8002270:	2000      	movs	r0, #0
 8002272:	e7e8      	b.n	8002246 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002274:	4b93      	ldr	r3, [pc, #588]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	f002 020c 	and.w	r2, r2, #12
 800227c:	2a04      	cmp	r2, #4
 800227e:	d007      	beq.n	8002290 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	f002 020c 	and.w	r2, r2, #12
 8002286:	2a08      	cmp	r2, #8
 8002288:	d10a      	bne.n	80022a0 <HAL_RCC_OscConfig+0x64>
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	025a      	lsls	r2, r3, #9
 800228e:	d507      	bpl.n	80022a0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	4b8c      	ldr	r3, [pc, #560]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	039b      	lsls	r3, r3, #14
 8002296:	d5dc      	bpl.n	8002252 <HAL_RCC_OscConfig+0x16>
 8002298:	6863      	ldr	r3, [r4, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1d9      	bne.n	8002252 <HAL_RCC_OscConfig+0x16>
 800229e:	e7d1      	b.n	8002244 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a0:	6863      	ldr	r3, [r4, #4]
 80022a2:	4d88      	ldr	r5, [pc, #544]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d111      	bne.n	80022ce <HAL_RCC_OscConfig+0x92>
 80022aa:	682b      	ldr	r3, [r5, #0]
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022b2:	f7ff fa1b 	bl	80016ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4d83      	ldr	r5, [pc, #524]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80022b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	039f      	lsls	r7, r3, #14
 80022be:	d4c8      	bmi.n	8002252 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fa14 	bl	80016ec <HAL_GetTick>
 80022c4:	1b80      	subs	r0, r0, r6
 80022c6:	2864      	cmp	r0, #100	; 0x64
 80022c8:	d9f7      	bls.n	80022ba <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80022ca:	2003      	movs	r0, #3
 80022cc:	e7bb      	b.n	8002246 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ce:	b99b      	cbnz	r3, 80022f8 <HAL_RCC_OscConfig+0xbc>
 80022d0:	682b      	ldr	r3, [r5, #0]
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d6:	602b      	str	r3, [r5, #0]
 80022d8:	682b      	ldr	r3, [r5, #0]
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022e0:	f7ff fa04 	bl	80016ec <HAL_GetTick>
 80022e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	682b      	ldr	r3, [r5, #0]
 80022e8:	0398      	lsls	r0, r3, #14
 80022ea:	d5b2      	bpl.n	8002252 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff f9fe 	bl	80016ec <HAL_GetTick>
 80022f0:	1b80      	subs	r0, r0, r6
 80022f2:	2864      	cmp	r0, #100	; 0x64
 80022f4:	d9f7      	bls.n	80022e6 <HAL_RCC_OscConfig+0xaa>
 80022f6:	e7e8      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	d103      	bne.n	8002308 <HAL_RCC_OscConfig+0xcc>
 8002300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002304:	602b      	str	r3, [r5, #0]
 8002306:	e7d0      	b.n	80022aa <HAL_RCC_OscConfig+0x6e>
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	602b      	str	r3, [r5, #0]
 800230e:	682b      	ldr	r3, [r5, #0]
 8002310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002314:	e7cc      	b.n	80022b0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002316:	4b6b      	ldr	r3, [pc, #428]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	f012 0f0c 	tst.w	r2, #12
 800231e:	d007      	beq.n	8002330 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	f002 020c 	and.w	r2, r2, #12
 8002326:	2a08      	cmp	r2, #8
 8002328:	d111      	bne.n	800234e <HAL_RCC_OscConfig+0x112>
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0259      	lsls	r1, r3, #9
 800232e:	d40e      	bmi.n	800234e <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002330:	4b64      	ldr	r3, [pc, #400]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	0792      	lsls	r2, r2, #30
 8002336:	d502      	bpl.n	800233e <HAL_RCC_OscConfig+0x102>
 8002338:	68e2      	ldr	r2, [r4, #12]
 800233a:	2a01      	cmp	r2, #1
 800233c:	d182      	bne.n	8002244 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	6921      	ldr	r1, [r4, #16]
 8002342:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002346:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800234a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234c:	e784      	b.n	8002258 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800234e:	68e3      	ldr	r3, [r4, #12]
 8002350:	4d5c      	ldr	r5, [pc, #368]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002352:	b1bb      	cbz	r3, 8002384 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800235c:	f7ff f9c6 	bl	80016ec <HAL_GetTick>
 8002360:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002362:	682b      	ldr	r3, [r5, #0]
 8002364:	079f      	lsls	r7, r3, #30
 8002366:	d507      	bpl.n	8002378 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	6922      	ldr	r2, [r4, #16]
 800236c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002370:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002374:	602b      	str	r3, [r5, #0]
 8002376:	e76f      	b.n	8002258 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002378:	f7ff f9b8 	bl	80016ec <HAL_GetTick>
 800237c:	1b80      	subs	r0, r0, r6
 800237e:	2802      	cmp	r0, #2
 8002380:	d9ef      	bls.n	8002362 <HAL_RCC_OscConfig+0x126>
 8002382:	e7a2      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002384:	682b      	ldr	r3, [r5, #0]
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800238c:	f7ff f9ae 	bl	80016ec <HAL_GetTick>
 8002390:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	682b      	ldr	r3, [r5, #0]
 8002394:	0798      	lsls	r0, r3, #30
 8002396:	f57f af5f 	bpl.w	8002258 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff f9a7 	bl	80016ec <HAL_GetTick>
 800239e:	1b80      	subs	r0, r0, r6
 80023a0:	2802      	cmp	r0, #2
 80023a2:	d9f6      	bls.n	8002392 <HAL_RCC_OscConfig+0x156>
 80023a4:	e791      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023a6:	6963      	ldr	r3, [r4, #20]
 80023a8:	4d46      	ldr	r5, [pc, #280]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
 80023aa:	b183      	cbz	r3, 80023ce <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80023ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80023b4:	f7ff f99a 	bl	80016ec <HAL_GetTick>
 80023b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80023bc:	079b      	lsls	r3, r3, #30
 80023be:	f53f af4f 	bmi.w	8002260 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c2:	f7ff f993 	bl	80016ec <HAL_GetTick>
 80023c6:	1b80      	subs	r0, r0, r6
 80023c8:	2802      	cmp	r0, #2
 80023ca:	d9f6      	bls.n	80023ba <HAL_RCC_OscConfig+0x17e>
 80023cc:	e77d      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80023ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80023d6:	f7ff f989 	bl	80016ec <HAL_GetTick>
 80023da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80023de:	079f      	lsls	r7, r3, #30
 80023e0:	f57f af3e 	bpl.w	8002260 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e4:	f7ff f982 	bl	80016ec <HAL_GetTick>
 80023e8:	1b80      	subs	r0, r0, r6
 80023ea:	2802      	cmp	r0, #2
 80023ec:	d9f6      	bls.n	80023dc <HAL_RCC_OscConfig+0x1a0>
 80023ee:	e76c      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f0:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
 80023f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f4:	00d0      	lsls	r0, r2, #3
 80023f6:	d427      	bmi.n	8002448 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80023fa:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240c:	4d2e      	ldr	r5, [pc, #184]	; (80024c8 <HAL_RCC_OscConfig+0x28c>)
 800240e:	682b      	ldr	r3, [r5, #0]
 8002410:	05d9      	lsls	r1, r3, #23
 8002412:	d51b      	bpl.n	800244c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002414:	68a3      	ldr	r3, [r4, #8]
 8002416:	4d2b      	ldr	r5, [pc, #172]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
 8002418:	2b01      	cmp	r3, #1
 800241a:	d127      	bne.n	800246c <HAL_RCC_OscConfig+0x230>
 800241c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002428:	f7ff f960 	bl	80016ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	4f25      	ldr	r7, [pc, #148]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800242e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002432:	079b      	lsls	r3, r3, #30
 8002434:	d53f      	bpl.n	80024b6 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8002436:	2e00      	cmp	r6, #0
 8002438:	f43f af16 	beq.w	8002268 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <HAL_RCC_OscConfig+0x288>)
 800243e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	e70f      	b.n	8002268 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8002448:	2600      	movs	r6, #0
 800244a:	e7df      	b.n	800240c <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800244c:	682b      	ldr	r3, [r5, #0]
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002454:	f7ff f94a 	bl	80016ec <HAL_GetTick>
 8002458:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245a:	682b      	ldr	r3, [r5, #0]
 800245c:	05da      	lsls	r2, r3, #23
 800245e:	d4d9      	bmi.n	8002414 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002460:	f7ff f944 	bl	80016ec <HAL_GetTick>
 8002464:	1bc0      	subs	r0, r0, r7
 8002466:	2864      	cmp	r0, #100	; 0x64
 8002468:	d9f7      	bls.n	800245a <HAL_RCC_OscConfig+0x21e>
 800246a:	e72e      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246c:	b9ab      	cbnz	r3, 800249a <HAL_RCC_OscConfig+0x25e>
 800246e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	672b      	str	r3, [r5, #112]	; 0x70
 800247a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002482:	f7ff f933 	bl	80016ec <HAL_GetTick>
 8002486:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800248a:	0798      	lsls	r0, r3, #30
 800248c:	d5d3      	bpl.n	8002436 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7ff f92d 	bl	80016ec <HAL_GetTick>
 8002492:	1bc0      	subs	r0, r0, r7
 8002494:	4540      	cmp	r0, r8
 8002496:	d9f7      	bls.n	8002488 <HAL_RCC_OscConfig+0x24c>
 8002498:	e717      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249a:	2b05      	cmp	r3, #5
 800249c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800249e:	d103      	bne.n	80024a8 <HAL_RCC_OscConfig+0x26c>
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	672b      	str	r3, [r5, #112]	; 0x70
 80024a6:	e7b9      	b.n	800241c <HAL_RCC_OscConfig+0x1e0>
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	672b      	str	r3, [r5, #112]	; 0x70
 80024ae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	e7b5      	b.n	8002422 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7ff f919 	bl	80016ec <HAL_GetTick>
 80024ba:	eba0 0008 	sub.w	r0, r0, r8
 80024be:	42a8      	cmp	r0, r5
 80024c0:	d9b6      	bls.n	8002430 <HAL_RCC_OscConfig+0x1f4>
 80024c2:	e702      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024cc:	4d24      	ldr	r5, [pc, #144]	; (8002560 <HAL_RCC_OscConfig+0x324>)
 80024ce:	68ab      	ldr	r3, [r5, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	f43f aeb5 	beq.w	8002244 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80024da:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024dc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80024de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e4:	d12f      	bne.n	8002546 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80024e6:	f7ff f901 	bl	80016ec <HAL_GetTick>
 80024ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	0199      	lsls	r1, r3, #6
 80024f0:	d423      	bmi.n	800253a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f2:	6a22      	ldr	r2, [r4, #32]
 80024f4:	69e3      	ldr	r3, [r4, #28]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024fa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002500:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002504:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002506:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800250a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250c:	4c14      	ldr	r4, [pc, #80]	; (8002560 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800250e:	0852      	lsrs	r2, r2, #1
 8002510:	3a01      	subs	r2, #1
 8002512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002516:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002520:	f7ff f8e4 	bl	80016ec <HAL_GetTick>
 8002524:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	019a      	lsls	r2, r3, #6
 800252a:	f53f aea1 	bmi.w	8002270 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252e:	f7ff f8dd 	bl	80016ec <HAL_GetTick>
 8002532:	1b40      	subs	r0, r0, r5
 8002534:	2802      	cmp	r0, #2
 8002536:	d9f6      	bls.n	8002526 <HAL_RCC_OscConfig+0x2ea>
 8002538:	e6c7      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253a:	f7ff f8d7 	bl	80016ec <HAL_GetTick>
 800253e:	1b80      	subs	r0, r0, r6
 8002540:	2802      	cmp	r0, #2
 8002542:	d9d3      	bls.n	80024ec <HAL_RCC_OscConfig+0x2b0>
 8002544:	e6c1      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8002546:	f7ff f8d1 	bl	80016ec <HAL_GetTick>
 800254a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	019b      	lsls	r3, r3, #6
 8002550:	f57f ae8e 	bpl.w	8002270 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002554:	f7ff f8ca 	bl	80016ec <HAL_GetTick>
 8002558:	1b00      	subs	r0, r0, r4
 800255a:	2802      	cmp	r0, #2
 800255c:	d9f6      	bls.n	800254c <HAL_RCC_OscConfig+0x310>
 800255e:	e6b4      	b.n	80022ca <HAL_RCC_OscConfig+0x8e>
 8002560:	40023800 	.word	0x40023800

08002564 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_RCC_GetSysClockFreq+0x48>)
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	f002 020c 	and.w	r2, r2, #12
 800256c:	2a04      	cmp	r2, #4
 800256e:	d003      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x14>
 8002570:	2a08      	cmp	r2, #8
 8002572:	d003      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002574:	480e      	ldr	r0, [pc, #56]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x4c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002576:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002578:	480e      	ldr	r0, [pc, #56]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x50>)
 800257a:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	685a      	ldr	r2, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800257e:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002580:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8002584:	685b      	ldr	r3, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002586:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8002588:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800258c:	bf4c      	ite	mi
 800258e:	4809      	ldrmi	r0, [pc, #36]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x50>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8002590:	4807      	ldrpl	r0, [pc, #28]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x4c>)
 8002592:	fbb0 f0f2 	udiv	r0, r0, r2
 8002596:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <HAL_RCC_GetSysClockFreq+0x48>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80025a0:	3301      	adds	r3, #1
 80025a2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80025a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
 80025b0:	00f42400 	.word	0x00f42400
 80025b4:	007a1200 	.word	0x007a1200

080025b8 <HAL_RCC_ClockConfig>:
{
 80025b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80025be:	4604      	mov	r4, r0
 80025c0:	b910      	cbnz	r0, 80025c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80025c2:	2001      	movs	r0, #1
 80025c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4a3f      	ldr	r2, [pc, #252]	; (80026c8 <HAL_RCC_ClockConfig+0x110>)
 80025ca:	6813      	ldr	r3, [r2, #0]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	428b      	cmp	r3, r1
 80025d2:	d328      	bcc.n	8002626 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d4:	6822      	ldr	r2, [r4, #0]
 80025d6:	0796      	lsls	r6, r2, #30
 80025d8:	d430      	bmi.n	800263c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025da:	07d0      	lsls	r0, r2, #31
 80025dc:	d436      	bmi.n	800264c <HAL_RCC_ClockConfig+0x94>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025de:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <HAL_RCC_ClockConfig+0x110>)
 80025e0:	6813      	ldr	r3, [r2, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	429d      	cmp	r5, r3
 80025e8:	d35a      	bcc.n	80026a0 <HAL_RCC_ClockConfig+0xe8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ea:	6822      	ldr	r2, [r4, #0]
 80025ec:	0751      	lsls	r1, r2, #29
 80025ee:	d462      	bmi.n	80026b6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	0713      	lsls	r3, r2, #28
 80025f2:	d507      	bpl.n	8002604 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f4:	4a35      	ldr	r2, [pc, #212]	; (80026cc <HAL_RCC_ClockConfig+0x114>)
 80025f6:	6921      	ldr	r1, [r4, #16]
 80025f8:	6893      	ldr	r3, [r2, #8]
 80025fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002602:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002604:	f7ff ffae 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8002608:	4b30      	ldr	r3, [pc, #192]	; (80026cc <HAL_RCC_ClockConfig+0x114>)
 800260a:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <HAL_RCC_ClockConfig+0x118>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	40d8      	lsrs	r0, r3
 8002616:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <HAL_RCC_ClockConfig+0x11c>)
 8002618:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fce0 	bl	8000fe0 <HAL_InitTick>
  return HAL_OK;
 8002620:	2000      	movs	r0, #0
 8002622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	6813      	ldr	r3, [r2, #0]
 8002628:	f023 030f 	bic.w	r3, r3, #15
 800262c:	430b      	orrs	r3, r1
 800262e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002630:	6813      	ldr	r3, [r2, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	4299      	cmp	r1, r3
 8002638:	d1c3      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xa>
 800263a:	e7cb      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4923      	ldr	r1, [pc, #140]	; (80026cc <HAL_RCC_ClockConfig+0x114>)
 800263e:	68a0      	ldr	r0, [r4, #8]
 8002640:	688b      	ldr	r3, [r1, #8]
 8002642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002646:	4303      	orrs	r3, r0
 8002648:	608b      	str	r3, [r1, #8]
 800264a:	e7c6      	b.n	80025da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264c:	6861      	ldr	r1, [r4, #4]
 800264e:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <HAL_RCC_ClockConfig+0x114>)
 8002650:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002654:	d11c      	bne.n	8002690 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	d0b2      	beq.n	80025c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4e1a      	ldr	r6, [pc, #104]	; (80026cc <HAL_RCC_ClockConfig+0x114>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002664:	f022 0203 	bic.w	r2, r2, #3
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800266c:	f7ff f83e 	bl	80016ec <HAL_GetTick>
 8002670:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	68b3      	ldr	r3, [r6, #8]
 8002674:	6862      	ldr	r2, [r4, #4]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800267e:	d0ae      	beq.n	80025de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7ff f834 	bl	80016ec <HAL_GetTick>
 8002684:	1bc0      	subs	r0, r0, r7
 8002686:	4540      	cmp	r0, r8
 8002688:	d9f3      	bls.n	8002672 <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 800268a:	2003      	movs	r0, #3
}
 800268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002690:	2902      	cmp	r1, #2
 8002692:	d102      	bne.n	800269a <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002694:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002698:	e7df      	b.n	800265a <HAL_RCC_ClockConfig+0xa2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	f012 0f02 	tst.w	r2, #2
 800269e:	e7dc      	b.n	800265a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a0:	6813      	ldr	r3, [r2, #0]
 80026a2:	f023 030f 	bic.w	r3, r3, #15
 80026a6:	432b      	orrs	r3, r5
 80026a8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	6813      	ldr	r3, [r2, #0]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	429d      	cmp	r5, r3
 80026b2:	d186      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xa>
 80026b4:	e799      	b.n	80025ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b6:	4905      	ldr	r1, [pc, #20]	; (80026cc <HAL_RCC_ClockConfig+0x114>)
 80026b8:	68e0      	ldr	r0, [r4, #12]
 80026ba:	688b      	ldr	r3, [r1, #8]
 80026bc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80026c0:	4303      	orrs	r3, r0
 80026c2:	608b      	str	r3, [r1, #8]
 80026c4:	e794      	b.n	80025f0 <HAL_RCC_ClockConfig+0x38>
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08005849 	.word	0x08005849
 80026d4:	20000000 	.word	0x20000000

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026d8:	4b01      	ldr	r3, [pc, #4]	; (80026e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000000 	.word	0x20000000

080026e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	4a03      	ldr	r2, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026f2:	6810      	ldr	r0, [r2, #0]
}
 80026f4:	40d8      	lsrs	r0, r3
 80026f6:	4770      	bx	lr
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08005859 	.word	0x08005859
 8002700:	20000000 	.word	0x20000000

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	4a03      	ldr	r2, [pc, #12]	; (8002720 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002712:	6810      	ldr	r0, [r2, #0]
} 
 8002714:	40d8      	lsrs	r0, r3
 8002716:	4770      	bx	lr
 8002718:	40023800 	.word	0x40023800
 800271c:	08005859 	.word	0x08005859
 8002720:	20000000 	.word	0x20000000

08002724 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002724:	230f      	movs	r3, #15
 8002726:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_GetClockConfig+0x34>)
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	f002 0203 	and.w	r2, r2, #3
 8002730:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002738:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002740:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	08db      	lsrs	r3, r3, #3
 8002746:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800274a:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_RCC_GetClockConfig+0x38>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	600b      	str	r3, [r1, #0]
 8002756:	4770      	bx	lr
 8002758:	40023800 	.word	0x40023800
 800275c:	40023c00 	.word	0x40023c00

08002760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002764:	6802      	ldr	r2, [r0, #0]
{
 8002766:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002768:	f012 0601 	ands.w	r6, r2, #1
 800276c:	d00b      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800276e:	4bb8      	ldr	r3, [pc, #736]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002770:	6899      	ldr	r1, [r3, #8]
 8002772:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002776:	6099      	str	r1, [r3, #8]
 8002778:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800277a:	6899      	ldr	r1, [r3, #8]
 800277c:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800277e:	fab6 f686 	clz	r6, r6
 8002782:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002784:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002786:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800278a:	d012      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800278c:	49b0      	ldr	r1, [pc, #704]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800278e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002790:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002794:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002798:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 800279c:	bf08      	it	eq
 800279e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027a0:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027a4:	bf16      	itet	ne
 80027a6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80027aa:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027ac:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027b2:	02d7      	lsls	r7, r2, #11
 80027b4:	d510      	bpl.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027b6:	48a6      	ldr	r0, [pc, #664]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80027ba:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027be:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027c6:	ea43 0301 	orr.w	r3, r3, r1
 80027ca:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027ce:	f000 8189 	beq.w	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x384>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 80027d2:	2900      	cmp	r1, #0
 80027d4:	bf08      	it	eq
 80027d6:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 80027d8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80027dc:	bf18      	it	ne
 80027de:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027e0:	0690      	lsls	r0, r2, #26
 80027e2:	d531      	bpl.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b9a      	ldr	r3, [pc, #616]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027e6:	4f9b      	ldr	r7, [pc, #620]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002802:	f7fe ff73 	bl	80016ec <HAL_GetTick>
 8002806:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	05d9      	lsls	r1, r3, #23
 800280c:	f140 816c 	bpl.w	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x388>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002810:	4f8f      	ldr	r7, [pc, #572]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002812:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002814:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002818:	f040 8171 	bne.w	8002afe <HAL_RCCEx_PeriphCLKConfig+0x39e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800281c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800281e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002822:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002826:	4a8a      	ldr	r2, [pc, #552]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002828:	f040 818f 	bne.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800282c:	6891      	ldr	r1, [r2, #8]
 800282e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002832:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002836:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800283a:	4301      	orrs	r1, r0
 800283c:	6091      	str	r1, [r2, #8]
 800283e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002842:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002844:	430b      	orrs	r3, r1
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	06df      	lsls	r7, r3, #27
 800284c:	d50c      	bpl.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800284e:	4a80      	ldr	r2, [pc, #512]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002850:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002854:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002858:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800285c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002860:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002862:	4301      	orrs	r1, r0
 8002864:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002868:	0458      	lsls	r0, r3, #17
 800286a:	d508      	bpl.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800286c:	4978      	ldr	r1, [pc, #480]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800286e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002870:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002874:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002878:	4302      	orrs	r2, r0
 800287a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800287e:	0419      	lsls	r1, r3, #16
 8002880:	d508      	bpl.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002882:	4973      	ldr	r1, [pc, #460]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002884:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002886:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800288a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800288e:	4302      	orrs	r2, r0
 8002890:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002894:	03da      	lsls	r2, r3, #15
 8002896:	d508      	bpl.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002898:	496d      	ldr	r1, [pc, #436]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800289a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800289c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028a0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80028a4:	4302      	orrs	r2, r0
 80028a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028aa:	039f      	lsls	r7, r3, #14
 80028ac:	d508      	bpl.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028ae:	4968      	ldr	r1, [pc, #416]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028b0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80028b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028b6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80028ba:	4302      	orrs	r2, r0
 80028bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c0:	0658      	lsls	r0, r3, #25
 80028c2:	d508      	bpl.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c4:	4962      	ldr	r1, [pc, #392]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80028c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028cc:	f022 0203 	bic.w	r2, r2, #3
 80028d0:	4302      	orrs	r2, r0
 80028d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d6:	0619      	lsls	r1, r3, #24
 80028d8:	d508      	bpl.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028da:	495d      	ldr	r1, [pc, #372]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80028de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028e2:	f022 020c 	bic.w	r2, r2, #12
 80028e6:	4302      	orrs	r2, r0
 80028e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ec:	05da      	lsls	r2, r3, #23
 80028ee:	d508      	bpl.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028f0:	4957      	ldr	r1, [pc, #348]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80028f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028f8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80028fc:	4302      	orrs	r2, r0
 80028fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002902:	059f      	lsls	r7, r3, #22
 8002904:	d508      	bpl.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002906:	4952      	ldr	r1, [pc, #328]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002908:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800290a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800290e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002912:	4302      	orrs	r2, r0
 8002914:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002918:	0558      	lsls	r0, r3, #21
 800291a:	d508      	bpl.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800291c:	494c      	ldr	r1, [pc, #304]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800291e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002920:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002924:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002928:	4302      	orrs	r2, r0
 800292a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800292e:	0519      	lsls	r1, r3, #20
 8002930:	d508      	bpl.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002932:	4947      	ldr	r1, [pc, #284]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002936:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800293a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800293e:	4302      	orrs	r2, r0
 8002940:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002944:	04da      	lsls	r2, r3, #19
 8002946:	d508      	bpl.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002948:	4941      	ldr	r1, [pc, #260]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800294a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800294c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002950:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002954:	4302      	orrs	r2, r0
 8002956:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800295a:	049f      	lsls	r7, r3, #18
 800295c:	d508      	bpl.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800295e:	493c      	ldr	r1, [pc, #240]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002960:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002962:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002966:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800296a:	4302      	orrs	r2, r0
 800296c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002970:	0258      	lsls	r0, r3, #9
 8002972:	d508      	bpl.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002974:	4936      	ldr	r1, [pc, #216]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002976:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002978:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800297c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002980:	4302      	orrs	r2, r0
 8002982:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002986:	0299      	lsls	r1, r3, #10
 8002988:	d50c      	bpl.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800298a:	4831      	ldr	r0, [pc, #196]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800298c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800298e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8002992:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002996:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 800299a:	bf08      	it	eq
 800299c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800299e:	430a      	orrs	r2, r1
 80029a0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029a4:	035a      	lsls	r2, r3, #13
 80029a6:	d508      	bpl.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029a8:	4929      	ldr	r1, [pc, #164]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029aa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80029ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029b4:	4302      	orrs	r2, r0
 80029b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029ba:	021f      	lsls	r7, r3, #8
 80029bc:	d509      	bpl.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029be:	4924      	ldr	r1, [pc, #144]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029c0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80029c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029c8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80029cc:	4302      	orrs	r2, r0
 80029ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80029d2:	0158      	lsls	r0, r3, #5
 80029d4:	d509      	bpl.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80029d6:	491e      	ldr	r1, [pc, #120]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80029dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029e0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80029e4:	4302      	orrs	r2, r0
 80029e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029ea:	0119      	lsls	r1, r3, #4
 80029ec:	d509      	bpl.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029ee:	4918      	ldr	r1, [pc, #96]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80029f4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80029f8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80029fc:	4302      	orrs	r2, r0
 80029fe:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a02:	00da      	lsls	r2, r3, #3
 8002a04:	d509      	bpl.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a06:	4912      	ldr	r1, [pc, #72]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a08:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002a0c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002a10:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002a14:	4302      	orrs	r2, r0
 8002a16:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002a1a:	2e01      	cmp	r6, #1
 8002a1c:	f000 8099 	beq.w	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a24:	f000 8095 	beq.w	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a28:	2d01      	cmp	r5, #1
 8002a2a:	d159      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8002a2c:	4d08      	ldr	r5, [pc, #32]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a2e:	682b      	ldr	r3, [r5, #0]
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a34:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a36:	f7fe fe59 	bl	80016ec <HAL_GetTick>
 8002a3a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	009f      	lsls	r7, r3, #2
 8002a40:	f100 810b 	bmi.w	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a44:	6821      	ldr	r1, [r4, #0]
 8002a46:	030d      	lsls	r5, r1, #12
 8002a48:	d506      	bpl.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002a4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a4c:	b143      	cbz	r3, 8002a60 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002a4e:	e003      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40007000 	.word	0x40007000
 8002a58:	02c8      	lsls	r0, r1, #11
 8002a5a:	d51d      	bpl.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a5e:	b9db      	cbnz	r3, 8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a60:	4a85      	ldr	r2, [pc, #532]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002a62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a66:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a6e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002a72:	4303      	orrs	r3, r0
 8002a74:	6960      	ldr	r0, [r4, #20]
 8002a76:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a7a:	69a0      	ldr	r0, [r4, #24]
 8002a7c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a84:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002a88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a8a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002a8e:	3801      	subs	r0, #1
 8002a90:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002a94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a98:	028a      	lsls	r2, r1, #10
 8002a9a:	d515      	bpl.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002a9c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa2:	d111      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aa4:	4a74      	ldr	r2, [pc, #464]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002aa6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002aaa:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002aae:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002ab2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	6961      	ldr	r1, [r4, #20]
 8002aba:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002abe:	6a21      	ldr	r1, [r4, #32]
 8002ac0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ac8:	4c6b      	ldr	r4, [pc, #428]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fe0b 	bl	80016ec <HAL_GetTick>
 8002ad6:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	f140 80c4 	bpl.w	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x508>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	e009      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x398>
      plli2sused = 1; 
 8002ae4:	2601      	movs	r6, #1
 8002ae6:	e677      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae8:	f7fe fe00 	bl	80016ec <HAL_GetTick>
 8002aec:	eba0 0008 	sub.w	r0, r0, r8
 8002af0:	2864      	cmp	r0, #100	; 0x64
 8002af2:	f67f ae89 	bls.w	8002808 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002af6:	2003      	movs	r0, #3
}
 8002af8:	b003      	add	sp, #12
 8002afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002afe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b00:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002b04:	4293      	cmp	r3, r2
 8002b06:	f43f ae89 	beq.w	800281c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b16:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b1e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002b20:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b24:	07da      	lsls	r2, r3, #31
 8002b26:	f57f ae79 	bpl.w	800281c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fddf 	bl	80016ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002b32:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b36:	079b      	lsls	r3, r3, #30
 8002b38:	f53f ae70 	bmi.w	800281c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fdd6 	bl	80016ec <HAL_GetTick>
 8002b40:	eba0 0008 	sub.w	r0, r0, r8
 8002b44:	4548      	cmp	r0, r9
 8002b46:	d9f5      	bls.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8002b48:	e7d5      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4a:	6891      	ldr	r1, [r2, #8]
 8002b4c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002b50:	e674      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 8002b52:	4e49      	ldr	r6, [pc, #292]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002b54:	6833      	ldr	r3, [r6, #0]
 8002b56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b5a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fdc6 	bl	80016ec <HAL_GetTick>
 8002b60:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b62:	6833      	ldr	r3, [r6, #0]
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	d472      	bmi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b68:	6822      	ldr	r2, [r4, #0]
 8002b6a:	07d7      	lsls	r7, r2, #31
 8002b6c:	d512      	bpl.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b70:	b983      	cbnz	r3, 8002b94 <HAL_RCCEx_PeriphCLKConfig+0x434>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b72:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b76:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b7e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6861      	ldr	r1, [r4, #4]
 8002b86:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002b8a:	68a1      	ldr	r1, [r4, #8]
 8002b8c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002b90:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b94:	0316      	lsls	r6, r2, #12
 8002b96:	d503      	bpl.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b9e:	d005      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8002ba0:	02d0      	lsls	r0, r2, #11
 8002ba2:	d51e      	bpl.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x482>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8002ba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002baa:	d11a      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bac:	4932      	ldr	r1, [pc, #200]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002bae:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bb2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002bbe:	4303      	orrs	r3, r0
 8002bc0:	6860      	ldr	r0, [r4, #4]
 8002bc2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002bc6:	68e0      	ldr	r0, [r4, #12]
 8002bc8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002bd0:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bd6:	f020 001f 	bic.w	r0, r0, #31
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	4303      	orrs	r3, r0
 8002bde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be2:	01d1      	lsls	r1, r2, #7
 8002be4:	d511      	bpl.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002be6:	4924      	ldr	r1, [pc, #144]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002be8:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bec:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bf0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002bf4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002bf8:	4303      	orrs	r3, r0
 8002bfa:	6860      	ldr	r0, [r4, #4]
 8002bfc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002c00:	6920      	ldr	r0, [r4, #16]
 8002c02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002c06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c0a:	0192      	lsls	r2, r2, #6
 8002c0c:	d50d      	bpl.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c0e:	6923      	ldr	r3, [r4, #16]
 8002c10:	6862      	ldr	r2, [r4, #4]
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c18:	68e2      	ldr	r2, [r4, #12]
 8002c1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c1e:	68a2      	ldr	r2, [r4, #8]
 8002c20:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002c26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002c2a:	4e13      	ldr	r6, [pc, #76]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002c2c:	6833      	ldr	r3, [r6, #0]
 8002c2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c32:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002c34:	f7fe fd5a 	bl	80016ec <HAL_GetTick>
 8002c38:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c3a:	6833      	ldr	r3, [r6, #0]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	f53f aef3 	bmi.w	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c42:	f7fe fd53 	bl	80016ec <HAL_GetTick>
 8002c46:	1bc0      	subs	r0, r0, r7
 8002c48:	2864      	cmp	r0, #100	; 0x64
 8002c4a:	d9f6      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002c4c:	e753      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c4e:	f7fe fd4d 	bl	80016ec <HAL_GetTick>
 8002c52:	1bc0      	subs	r0, r0, r7
 8002c54:	2864      	cmp	r0, #100	; 0x64
 8002c56:	d984      	bls.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x402>
 8002c58:	e74d      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c5a:	f7fe fd47 	bl	80016ec <HAL_GetTick>
 8002c5e:	1b80      	subs	r0, r0, r6
 8002c60:	2864      	cmp	r0, #100	; 0x64
 8002c62:	f67f aeeb 	bls.w	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002c66:	e746      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c68:	f7fe fd40 	bl	80016ec <HAL_GetTick>
 8002c6c:	1b40      	subs	r0, r0, r5
 8002c6e:	2864      	cmp	r0, #100	; 0x64
 8002c70:	f67f af32 	bls.w	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002c74:	e73f      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c7c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c7e:	4604      	mov	r4, r0
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d04e      	beq.n	8002d22 <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c88:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002c8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c90:	b91b      	cbnz	r3, 8002c9a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c92:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c96:	f7fe f941 	bl	8000f1c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c9a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c9c:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c9e:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002ca4:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ca6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cae:	600b      	str	r3, [r1, #0]
 8002cb0:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cb4:	d932      	bls.n	8002d1c <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cb6:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cb8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cbc:	bf18      	it	ne
 8002cbe:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002cc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002cc2:	b92b      	cbnz	r3, 8002cd0 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cc4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002cc8:	bf8c      	ite	hi
 8002cca:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002ccc:	2301      	movls	r3, #1
 8002cce:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002cd0:	68a6      	ldr	r6, [r4, #8]
 8002cd2:	6863      	ldr	r3, [r4, #4]
 8002cd4:	69a5      	ldr	r5, [r4, #24]
 8002cd6:	4333      	orrs	r3, r6
 8002cd8:	6926      	ldr	r6, [r4, #16]
 8002cda:	4333      	orrs	r3, r6
 8002cdc:	6966      	ldr	r6, [r4, #20]
 8002cde:	4333      	orrs	r3, r6
 8002ce0:	69e6      	ldr	r6, [r4, #28]
 8002ce2:	4333      	orrs	r3, r6
 8002ce4:	6a26      	ldr	r6, [r4, #32]
 8002ce6:	4333      	orrs	r3, r6
 8002ce8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002cea:	4333      	orrs	r3, r6
 8002cec:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002cf0:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002cf2:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002cf4:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002cf8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d00:	431a      	orrs	r2, r3
 8002d02:	432a      	orrs	r2, r5
 8002d04:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d06:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002d08:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d0a:	69cb      	ldr	r3, [r1, #28]
 8002d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d10:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002d12:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d14:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d16:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d20:	e7cc      	b.n	8002cbc <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002d22:	2001      	movs	r0, #1
}
 8002d24:	bd70      	pop	{r4, r5, r6, pc}

08002d26 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d26:	6a03      	ldr	r3, [r0, #32]
{
 8002d28:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d2a:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d2c:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d30:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8002d34:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d36:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002d38:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d3a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002d3e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d42:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d44:	6203      	str	r3, [r0, #32]
 8002d46:	bd10      	pop	{r4, pc}

08002d48 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d48:	6a03      	ldr	r3, [r0, #32]
 8002d4a:	f023 0310 	bic.w	r3, r3, #16
{
 8002d4e:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d50:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d52:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002d54:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d56:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002d5e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8002d62:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d66:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d68:	6203      	str	r3, [r0, #32]
 8002d6a:	bd10      	pop	{r4, pc}

08002d6c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d6c:	6803      	ldr	r3, [r0, #0]
}
 8002d6e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
}
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIM_PWM_MspInit>:
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIM_OC_DelayElapsedCallback>:
 8002d84:	4770      	bx	lr

08002d86 <HAL_TIM_IC_CaptureCallback>:
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002d88:	4770      	bx	lr

08002d8a <HAL_TIM_TriggerCallback>:
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d8c:	6803      	ldr	r3, [r0, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	0791      	lsls	r1, r2, #30
{
 8002d92:	b510      	push	{r4, lr}
 8002d94:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d96:	d50f      	bpl.n	8002db8 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	0792      	lsls	r2, r2, #30
 8002d9c:	d50c      	bpl.n	8002db8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d9e:	f06f 0202 	mvn.w	r2, #2
 8002da2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da4:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002da6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da8:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002daa:	0799      	lsls	r1, r3, #30
 8002dac:	f000 8085 	beq.w	8002eba <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002db0:	f7ff ffe9 	bl	8002d86 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db4:	2300      	movs	r3, #0
 8002db6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	0752      	lsls	r2, r2, #29
 8002dbe:	d510      	bpl.n	8002de2 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	0750      	lsls	r0, r2, #29
 8002dc4:	d50d      	bpl.n	8002de2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dc6:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dce:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002dd0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dd2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002dd4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002dd8:	d075      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	f7ff ffd4 	bl	8002d86 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	2300      	movs	r3, #0
 8002de0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	0711      	lsls	r1, r2, #28
 8002de8:	d50f      	bpl.n	8002e0a <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	0712      	lsls	r2, r2, #28
 8002dee:	d50c      	bpl.n	8002e0a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002df0:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002df4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002dfa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dfc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002dfe:	079b      	lsls	r3, r3, #30
 8002e00:	d067      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	f7ff ffc0 	bl	8002d86 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	2300      	movs	r3, #0
 8002e08:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	06d0      	lsls	r0, r2, #27
 8002e10:	d510      	bpl.n	8002e34 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	06d1      	lsls	r1, r2, #27
 8002e16:	d50d      	bpl.n	8002e34 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e18:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e20:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002e22:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e24:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002e26:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002e2a:	d058      	beq.n	8002ede <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2c:	f7ff ffab 	bl	8002d86 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e30:	2300      	movs	r3, #0
 8002e32:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	07d2      	lsls	r2, r2, #31
 8002e3a:	d508      	bpl.n	8002e4e <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	07d0      	lsls	r0, r2, #31
 8002e40:	d505      	bpl.n	8002e4e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e42:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e46:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e48:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e4a:	f7fe f82f 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	0611      	lsls	r1, r2, #24
 8002e54:	d508      	bpl.n	8002e68 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	0612      	lsls	r2, r2, #24
 8002e5a:	d505      	bpl.n	8002e68 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002e60:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e64:	f000 fb13 	bl	800348e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	05d0      	lsls	r0, r2, #23
 8002e6e:	d508      	bpl.n	8002e82 <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	0611      	lsls	r1, r2, #24
 8002e74:	d505      	bpl.n	8002e82 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e76:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002e7a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e7c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e7e:	f000 fb06 	bl	800348e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	0652      	lsls	r2, r2, #25
 8002e88:	d508      	bpl.n	8002e9c <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	0650      	lsls	r0, r2, #25
 8002e8e:	d505      	bpl.n	8002e9c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002e94:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e96:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002e98:	f7ff ff77 	bl	8002d8a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	0691      	lsls	r1, r2, #26
 8002ea2:	d522      	bpl.n	8002eea <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	0692      	lsls	r2, r2, #26
 8002ea8:	d51f      	bpl.n	8002eea <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eaa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002eae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eb0:	611a      	str	r2, [r3, #16]
}
 8002eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002eb6:	f000 bae9 	b.w	800348c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	f7ff ff63 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7ff ff62 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ec4:	e776      	b.n	8002db4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	f7ff ff5d 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7ff ff5c 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ed0:	e785      	b.n	8002dde <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	f7ff ff57 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f7ff ff56 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
 8002edc:	e793      	b.n	8002e06 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	f7ff ff51 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f7ff ff50 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ee8:	e7a2      	b.n	8002e30 <HAL_TIM_IRQHandler+0xa4>
 8002eea:	bd10      	pop	{r4, pc}

08002eec <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002eec:	4a30      	ldr	r2, [pc, #192]	; (8002fb0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002eee:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002ef0:	4290      	cmp	r0, r2
 8002ef2:	d012      	beq.n	8002f1a <TIM_Base_SetConfig+0x2e>
 8002ef4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ef8:	d00f      	beq.n	8002f1a <TIM_Base_SetConfig+0x2e>
 8002efa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002efe:	4290      	cmp	r0, r2
 8002f00:	d00b      	beq.n	8002f1a <TIM_Base_SetConfig+0x2e>
 8002f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f06:	4290      	cmp	r0, r2
 8002f08:	d007      	beq.n	8002f1a <TIM_Base_SetConfig+0x2e>
 8002f0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f0e:	4290      	cmp	r0, r2
 8002f10:	d003      	beq.n	8002f1a <TIM_Base_SetConfig+0x2e>
 8002f12:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f16:	4290      	cmp	r0, r2
 8002f18:	d11d      	bne.n	8002f56 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002f1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f20:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002f22:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <TIM_Base_SetConfig+0xc4>)
 8002f24:	4290      	cmp	r0, r2
 8002f26:	d104      	bne.n	8002f32 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2c:	68ca      	ldr	r2, [r1, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	e028      	b.n	8002f84 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002f32:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f36:	d0f7      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
 8002f38:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <TIM_Base_SetConfig+0xc8>)
 8002f3a:	4290      	cmp	r0, r2
 8002f3c:	d0f4      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
 8002f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f42:	4290      	cmp	r0, r2
 8002f44:	d0f0      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
 8002f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f4a:	4290      	cmp	r0, r2
 8002f4c:	d0ec      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
 8002f4e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f52:	4290      	cmp	r0, r2
 8002f54:	d0e8      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <TIM_Base_SetConfig+0xcc>)
 8002f58:	4290      	cmp	r0, r2
 8002f5a:	d0e5      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
 8002f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f60:	4290      	cmp	r0, r2
 8002f62:	d0e1      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
 8002f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f68:	4290      	cmp	r0, r2
 8002f6a:	d0dd      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
 8002f6c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002f70:	4290      	cmp	r0, r2
 8002f72:	d0d9      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
 8002f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f78:	4290      	cmp	r0, r2
 8002f7a:	d0d5      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
 8002f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f80:	4290      	cmp	r0, r2
 8002f82:	d0d1      	beq.n	8002f28 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f84:	694a      	ldr	r2, [r1, #20]
 8002f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f8a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002f8c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f8e:	688b      	ldr	r3, [r1, #8]
 8002f90:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002f92:	680b      	ldr	r3, [r1, #0]
 8002f94:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <TIM_Base_SetConfig+0xc4>)
 8002f98:	4298      	cmp	r0, r3
 8002f9a:	d006      	beq.n	8002faa <TIM_Base_SetConfig+0xbe>
 8002f9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fa0:	4298      	cmp	r0, r3
 8002fa2:	d002      	beq.n	8002faa <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	6143      	str	r3, [r0, #20]
}
 8002fa8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002faa:	690b      	ldr	r3, [r1, #16]
 8002fac:	6303      	str	r3, [r0, #48]	; 0x30
 8002fae:	e7f9      	b.n	8002fa4 <TIM_Base_SetConfig+0xb8>
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40014000 	.word	0x40014000

08002fbc <HAL_TIM_Base_Init>:
{ 
 8002fbc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	b1a0      	cbz	r0, 8002fec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002fc2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fca:	b91b      	cbnz	r3, 8002fd4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002fcc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002fd0:	f7fe f868 	bl	80010a4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002fd4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002fd6:	6820      	ldr	r0, [r4, #0]
 8002fd8:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002fda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002fde:	f7ff ff85 	bl	8002eec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002fe2:	2301      	movs	r3, #1
  return HAL_OK;
 8002fe4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002fe6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002fea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002fec:	2001      	movs	r0, #1
}
 8002fee:	bd10      	pop	{r4, pc}

08002ff0 <HAL_TIM_PWM_Init>:
{
 8002ff0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	b1a0      	cbz	r0, 8003020 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ffa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ffe:	b91b      	cbnz	r3, 8003008 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;  
 8003000:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003004:	f7ff febd 	bl	8002d82 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8003008:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800300a:	6820      	ldr	r0, [r4, #0]
 800300c:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 800300e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003012:	f7ff ff6b 	bl	8002eec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003016:	2301      	movs	r3, #1
  return HAL_OK;
 8003018:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800301a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800301e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003020:	2001      	movs	r0, #1
}  
 8003022:	bd10      	pop	{r4, pc}

08003024 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003024:	6a03      	ldr	r3, [r0, #32]
 8003026:	f023 0301 	bic.w	r3, r3, #1
{
 800302a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800302c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800302e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003030:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003032:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003034:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8003038:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800303a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800303e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003042:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8003044:	688d      	ldr	r5, [r1, #8]
 8003046:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003048:	4d0c      	ldr	r5, [pc, #48]	; (800307c <TIM_OC1_SetConfig+0x58>)
 800304a:	42a8      	cmp	r0, r5
 800304c:	d009      	beq.n	8003062 <TIM_OC1_SetConfig+0x3e>
 800304e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003052:	42a8      	cmp	r0, r5
 8003054:	d005      	beq.n	8003062 <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8003056:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8003058:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800305a:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800305c:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 800305e:	6203      	str	r3, [r0, #32]
} 
 8003060:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8003062:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003064:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8003068:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800306a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800306e:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003070:	694d      	ldr	r5, [r1, #20]
 8003072:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003074:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003078:	432a      	orrs	r2, r5
 800307a:	e7ec      	b.n	8003056 <TIM_OC1_SetConfig+0x32>
 800307c:	40010000 	.word	0x40010000

08003080 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003080:	6a03      	ldr	r3, [r0, #32]
 8003082:	f023 0310 	bic.w	r3, r3, #16
{
 8003086:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003088:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800308a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800308c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800308e:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003090:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003094:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003096:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800309a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 800309e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 80030a2:	688d      	ldr	r5, [r1, #8]
 80030a4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80030a8:	4d0d      	ldr	r5, [pc, #52]	; (80030e0 <TIM_OC2_SetConfig+0x60>)
 80030aa:	42a8      	cmp	r0, r5
 80030ac:	d009      	beq.n	80030c2 <TIM_OC2_SetConfig+0x42>
 80030ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030b2:	42a8      	cmp	r0, r5
 80030b4:	d005      	beq.n	80030c2 <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 80030b6:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80030b8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80030ba:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80030bc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80030be:	6203      	str	r3, [r0, #32]
}
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80030c2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80030c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80030c8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80030ce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80030d2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80030d4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80030d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80030da:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80030de:	e7ea      	b.n	80030b6 <TIM_OC2_SetConfig+0x36>
 80030e0:	40010000 	.word	0x40010000

080030e4 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030e4:	6a03      	ldr	r3, [r0, #32]
 80030e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80030ea:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ec:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80030ee:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80030f0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80030f2:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80030f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 80030f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80030fa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80030fe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003102:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8003104:	688d      	ldr	r5, [r1, #8]
 8003106:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800310a:	4d0e      	ldr	r5, [pc, #56]	; (8003144 <TIM_OC3_SetConfig+0x60>)
 800310c:	42a8      	cmp	r0, r5
 800310e:	d009      	beq.n	8003124 <TIM_OC3_SetConfig+0x40>
 8003110:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003114:	42a8      	cmp	r0, r5
 8003116:	d005      	beq.n	8003124 <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8003118:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 800311a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800311c:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800311e:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003120:	6203      	str	r3, [r0, #32]
}
 8003122:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003124:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800312a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800312c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003130:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8003134:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003136:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800313c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003140:	e7ea      	b.n	8003118 <TIM_OC3_SetConfig+0x34>
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000

08003148 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003148:	6a03      	ldr	r3, [r0, #32]
 800314a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800314e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003150:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003152:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003154:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003156:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003158:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 800315c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800315e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003162:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003166:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 800316a:	688d      	ldr	r5, [r1, #8]
 800316c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003170:	4d09      	ldr	r5, [pc, #36]	; (8003198 <TIM_OC4_SetConfig+0x50>)
 8003172:	42a8      	cmp	r0, r5
 8003174:	d009      	beq.n	800318a <TIM_OC4_SetConfig+0x42>
 8003176:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800317a:	42a8      	cmp	r0, r5
 800317c:	d005      	beq.n	800318a <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 800317e:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003180:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003182:	684b      	ldr	r3, [r1, #4]
 8003184:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003186:	6204      	str	r4, [r0, #32]
}
 8003188:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 800318a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800318e:	694d      	ldr	r5, [r1, #20]
 8003190:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8003194:	e7f3      	b.n	800317e <TIM_OC4_SetConfig+0x36>
 8003196:	bf00      	nop
 8003198:	40010000 	.word	0x40010000

0800319c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800319c:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800319e:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80031a0:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80031a2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80031aa:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ac:	6083      	str	r3, [r0, #8]
 80031ae:	bd10      	pop	{r4, pc}

080031b0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80031b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
{
 80031b6:	b510      	push	{r4, lr}
 80031b8:	4604      	mov	r4, r0
 80031ba:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80031be:	d018      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80031c4:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80031c6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80031c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80031cc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ce:	4b3e      	ldr	r3, [pc, #248]	; (80032c8 <HAL_TIM_ConfigClockSource+0x118>)
 80031d0:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80031d2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80031d4:	680b      	ldr	r3, [r1, #0]
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d059      	beq.n	800328e <HAL_TIM_ConfigClockSource+0xde>
 80031da:	d815      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x58>
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d067      	beq.n	80032b0 <HAL_TIM_ConfigClockSource+0x100>
 80031e0:	d808      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x44>
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d05e      	beq.n	80032a4 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 80031e6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80031e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031ee:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80031f2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d061      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0x10c>
 80031f8:	2b30      	cmp	r3, #48	; 0x30
 80031fa:	d1f4      	bne.n	80031e6 <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 80031fc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003202:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8003206:	e026      	b.n	8003256 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8003208:	2b70      	cmp	r3, #112	; 0x70
 800320a:	d026      	beq.n	800325a <HAL_TIM_ConfigClockSource+0xaa>
 800320c:	d80e      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x7c>
 800320e:	2b50      	cmp	r3, #80	; 0x50
 8003210:	d032      	beq.n	8003278 <HAL_TIM_ConfigClockSource+0xc8>
 8003212:	2b60      	cmp	r3, #96	; 0x60
 8003214:	d1e7      	bne.n	80031e6 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003216:	68ca      	ldr	r2, [r1, #12]
 8003218:	6849      	ldr	r1, [r1, #4]
 800321a:	f7ff fd95 	bl	8002d48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800321e:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003220:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003226:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800322a:	e023      	b.n	8003274 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003230:	d00c      	beq.n	800324c <HAL_TIM_ConfigClockSource+0x9c>
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003236:	d1d6      	bne.n	80031e6 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8003238:	68cb      	ldr	r3, [r1, #12]
 800323a:	684a      	ldr	r2, [r1, #4]
 800323c:	6889      	ldr	r1, [r1, #8]
 800323e:	f7ff ffad 	bl	800319c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003242:	6822      	ldr	r2, [r4, #0]
 8003244:	6893      	ldr	r3, [r2, #8]
 8003246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800324a:	e013      	b.n	8003274 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800324c:	6883      	ldr	r3, [r0, #8]
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8003256:	6083      	str	r3, [r0, #8]
 8003258:	e7c5      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 800325a:	68cb      	ldr	r3, [r1, #12]
 800325c:	684a      	ldr	r2, [r1, #4]
 800325e:	6889      	ldr	r1, [r1, #8]
 8003260:	f7ff ff9c 	bl	800319c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003264:	6822      	ldr	r2, [r4, #0]
 8003266:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003274:	6093      	str	r3, [r2, #8]
    break;
 8003276:	e7b6      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003278:	68ca      	ldr	r2, [r1, #12]
 800327a:	6849      	ldr	r1, [r1, #4]
 800327c:	f7ff fd53 	bl	8002d26 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003280:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003282:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003288:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 800328c:	e7f2      	b.n	8003274 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800328e:	68ca      	ldr	r2, [r1, #12]
 8003290:	6849      	ldr	r1, [r1, #4]
 8003292:	f7ff fd48 	bl	8002d26 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003296:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003298:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800329e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80032a2:	e7e7      	b.n	8003274 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 80032a4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80032aa:	f043 0307 	orr.w	r3, r3, #7
 80032ae:	e7d2      	b.n	8003256 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80032b0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80032b6:	f043 0317 	orr.w	r3, r3, #23
 80032ba:	e7cc      	b.n	8003256 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80032bc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80032c2:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80032c6:	e7c6      	b.n	8003256 <HAL_TIM_ConfigClockSource+0xa6>
 80032c8:	fffe0088 	.word	0xfffe0088

080032cc <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032cc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80032ce:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032d0:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80032d2:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 80032d4:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80032d6:	ea23 0304 	bic.w	r3, r3, r4
 80032da:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80032dc:	6a03      	ldr	r3, [r0, #32]
 80032de:	431a      	orrs	r2, r3
 80032e0:	6202      	str	r2, [r0, #32]
 80032e2:	bd10      	pop	{r4, pc}

080032e4 <HAL_TIM_PWM_Start>:
{
 80032e4:	b510      	push	{r4, lr}
 80032e6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032e8:	2201      	movs	r2, #1
 80032ea:	6800      	ldr	r0, [r0, #0]
 80032ec:	f7ff ffee 	bl	80032cc <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <HAL_TIM_PWM_Start+0x30>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <HAL_TIM_PWM_Start+0x1c>
 80032f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d103      	bne.n	8003308 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8003300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003306:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003308:	681a      	ldr	r2, [r3, #0]
} 
 800330a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
} 
 8003312:	bd10      	pop	{r4, pc}
 8003314:	40010000 	.word	0x40010000

08003318 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003318:	6a03      	ldr	r3, [r0, #32]
 800331a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800331e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003320:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003322:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003324:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003326:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003328:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800332c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800332e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8003336:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003338:	688d      	ldr	r5, [r1, #8]
 800333a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800333e:	4d09      	ldr	r5, [pc, #36]	; (8003364 <TIM_OC5_SetConfig+0x4c>)
 8003340:	42a8      	cmp	r0, r5
 8003342:	d003      	beq.n	800334c <TIM_OC5_SetConfig+0x34>
 8003344:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003348:	42a8      	cmp	r0, r5
 800334a:	d104      	bne.n	8003356 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800334c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8003350:	694d      	ldr	r5, [r1, #20]
 8003352:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003356:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003358:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800335a:	684b      	ldr	r3, [r1, #4]
 800335c:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800335e:	6202      	str	r2, [r0, #32]
 8003360:	bd30      	pop	{r4, r5, pc}
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000

08003368 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003368:	6a03      	ldr	r3, [r0, #32]
 800336a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800336e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003370:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003374:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003376:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003378:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 800337c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800337e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003386:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800338a:	688d      	ldr	r5, [r1, #8]
 800338c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003390:	4d08      	ldr	r5, [pc, #32]	; (80033b4 <TIM_OC6_SetConfig+0x4c>)
 8003392:	42a8      	cmp	r0, r5
 8003394:	d003      	beq.n	800339e <TIM_OC6_SetConfig+0x36>
 8003396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800339a:	42a8      	cmp	r0, r5
 800339c:	d104      	bne.n	80033a8 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800339e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80033a2:	694d      	ldr	r5, [r1, #20]
 80033a4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033aa:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033ac:	684b      	ldr	r3, [r1, #4]
 80033ae:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80033b0:	6202      	str	r2, [r0, #32]
 80033b2:	bd30      	pop	{r4, r5, pc}
 80033b4:	40010000 	.word	0x40010000

080033b8 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80033b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
{
 80033be:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80033c0:	d01c      	beq.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 80033c2:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033c4:	4d0e      	ldr	r5, [pc, #56]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 80033c6:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033c8:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80033ca:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033cc:	d003      	beq.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80033ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80033d2:	42aa      	cmp	r2, r5
 80033d4:	d103      	bne.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033da:	684d      	ldr	r5, [r1, #4]
 80033dc:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033de:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80033e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e4:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033e6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ea:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ec:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 80033ee:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 80033f0:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80033f2:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80033f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80033fc:	2002      	movs	r0, #2
} 
 80033fe:	bd30      	pop	{r4, r5, pc}
 8003400:	40010000 	.word	0x40010000

08003404 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8003404:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	f04f 0302 	mov.w	r3, #2
{
 800340e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003410:	d038      	beq.n	8003484 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8003412:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003416:	68cb      	ldr	r3, [r1, #12]
 8003418:	688a      	ldr	r2, [r1, #8]
 800341a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800341e:	4c1a      	ldr	r4, [pc, #104]	; (8003488 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003420:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003422:	684a      	ldr	r2, [r1, #4]
 8003424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003428:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800342a:	680a      	ldr	r2, [r1, #0]
 800342c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003430:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003432:	690a      	ldr	r2, [r1, #16]
 8003434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003438:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800343a:	694a      	ldr	r2, [r1, #20]
 800343c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003440:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003442:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003444:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003448:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800344a:	698a      	ldr	r2, [r1, #24]
 800344c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003454:	6802      	ldr	r2, [r0, #0]
 8003456:	42a2      	cmp	r2, r4
 8003458:	d003      	beq.n	8003462 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 800345a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800345e:	42a2      	cmp	r2, r4
 8003460:	d10c      	bne.n	800347c <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8003462:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003464:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003468:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800346c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800346e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003474:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003476:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800347a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800347c:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800347e:	2300      	movs	r3, #0
 8003480:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003484:	4618      	mov	r0, r3
}
 8003486:	bd10      	pop	{r4, pc}
 8003488:	40010000 	.word	0x40010000

0800348c <HAL_TIMEx_CommutationCallback>:
 800348c:	4770      	bx	lr

0800348e <HAL_TIMEx_BreakCallback>:
{
 800348e:	4770      	bx	lr

08003490 <HAL_TIM_PWM_ConfigChannel>:
{
 8003490:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003492:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003496:	4604      	mov	r4, r0
 8003498:	460d      	mov	r5, r1
 800349a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800349c:	2b01      	cmp	r3, #1
 800349e:	d010      	beq.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80034a0:	2301      	movs	r3, #1
  switch (Channel)
 80034a2:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80034a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80034ac:	d043      	beq.n	8003536 <HAL_TIM_PWM_ConfigChannel+0xa6>
 80034ae:	d809      	bhi.n	80034c4 <HAL_TIM_PWM_ConfigChannel+0x34>
 80034b0:	b1fa      	cbz	r2, 80034f2 <HAL_TIM_PWM_ConfigChannel+0x62>
 80034b2:	2a04      	cmp	r2, #4
 80034b4:	d02e      	beq.n	8003514 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 80034b6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80034b8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80034ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80034be:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80034c4:	2a10      	cmp	r2, #16
 80034c6:	d047      	beq.n	8003558 <HAL_TIM_PWM_ConfigChannel+0xc8>
 80034c8:	2a14      	cmp	r2, #20
 80034ca:	d056      	beq.n	800357a <HAL_TIM_PWM_ConfigChannel+0xea>
 80034cc:	2a0c      	cmp	r2, #12
 80034ce:	d1f2      	bne.n	80034b6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034d0:	6820      	ldr	r0, [r4, #0]
 80034d2:	f7ff fe39 	bl	8003148 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034d6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80034d8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80034f0:	e030      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	f7ff fd96 	bl	8003024 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034f8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034fa:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	f042 0208 	orr.w	r2, r2, #8
 8003502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	f022 0204 	bic.w	r2, r2, #4
 800350a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003510:	619a      	str	r2, [r3, #24]
    break;
 8003512:	e7d0      	b.n	80034b6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003514:	6820      	ldr	r0, [r4, #0]
 8003516:	f7ff fdb3 	bl	8003080 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800351a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800351c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003524:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800352e:	699a      	ldr	r2, [r3, #24]
 8003530:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003534:	e7ec      	b.n	8003510 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003536:	6820      	ldr	r0, [r4, #0]
 8003538:	f7ff fdd4 	bl	80030e4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800353c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800353e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	f042 0208 	orr.w	r2, r2, #8
 8003546:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	f022 0204 	bic.w	r2, r2, #4
 800354e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003554:	61da      	str	r2, [r3, #28]
    break;
 8003556:	e7ae      	b.n	80034b6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003558:	6820      	ldr	r0, [r4, #0]
 800355a:	f7ff fedd 	bl	8003318 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800355e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003560:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003562:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003564:	f042 0208 	orr.w	r2, r2, #8
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800356a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800356c:	f022 0204 	bic.w	r2, r2, #4
 8003570:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003572:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003574:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8003578:	e79d      	b.n	80034b6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800357a:	6820      	ldr	r0, [r4, #0]
 800357c:	f7ff fef4 	bl	8003368 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003580:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003582:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800358c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800358e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003596:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800359a:	e7ec      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0xe6>

0800359c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359c:	6803      	ldr	r3, [r0, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035a4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ae:	2320      	movs	r3, #32
 80035b0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80035b4:	4770      	bx	lr
	...

080035b8 <HAL_UART_Receive_DMA>:
{
 80035b8:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80035ba:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 80035be:	2a20      	cmp	r2, #32
{
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 80035c4:	d133      	bne.n	800362e <HAL_UART_Receive_DMA+0x76>
    if((pData == NULL ) || (Size == 0U))
 80035c6:	2900      	cmp	r1, #0
 80035c8:	d02f      	beq.n	800362a <HAL_UART_Receive_DMA+0x72>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d02d      	beq.n	800362a <HAL_UART_Receive_DMA+0x72>
    __HAL_LOCK(huart);
 80035ce:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 80035d2:	2a01      	cmp	r2, #1
 80035d4:	d02b      	beq.n	800362e <HAL_UART_Receive_DMA+0x76>
 80035d6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d8:	2500      	movs	r5, #0
    huart->pRxBuffPtr = pData;
 80035da:	6541      	str	r1, [r0, #84]	; 0x54
    __HAL_LOCK(huart);
 80035dc:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035e0:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e2:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxXferSize = Size;
 80035e4:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035e8:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80035ec:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80035ee:	4a11      	ldr	r2, [pc, #68]	; (8003634 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80035f0:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80035f2:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80035f4:	4a10      	ldr	r2, [pc, #64]	; (8003638 <HAL_UART_Receive_DMA+0x80>)
    huart->hdmarx->XferAbortCallback = NULL;
 80035f6:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80035f8:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_UART_Receive_DMA+0x84>)
 80035fc:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80035fe:	460a      	mov	r2, r1
 8003600:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8003604:	f7fe fac2 	bl	8001b8c <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003608:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800360a:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    return HAL_OK;
 800360e:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003616:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003626:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8003628:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800362a:	2001      	movs	r0, #1
 800362c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800362e:	2002      	movs	r0, #2
}
 8003630:	bd70      	pop	{r4, r5, r6, pc}
 8003632:	bf00      	nop
 8003634:	080037b5 	.word	0x080037b5
 8003638:	0800385f 	.word	0x0800385f
 800363c:	08003869 	.word	0x08003869

08003640 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8003640:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003644:	2b01      	cmp	r3, #1
 8003646:	d026      	beq.n	8003696 <HAL_UART_DMAResume+0x56>
 8003648:	2301      	movs	r3, #1
 800364a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800364e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003652:	2b21      	cmp	r3, #33	; 0x21
 8003654:	6803      	ldr	r3, [r0, #0]
 8003656:	d103      	bne.n	8003660 <HAL_UART_DMAResume+0x20>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800365e:	609a      	str	r2, [r3, #8]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003660:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8003664:	2a22      	cmp	r2, #34	; 0x22
 8003666:	d10d      	bne.n	8003684 <HAL_UART_DMAResume+0x44>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003668:	2208      	movs	r2, #8
 800366a:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003672:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003682:	609a      	str	r2, [r3, #8]
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	f010 0001 	ands.w	r0, r0, #1
 800368a:	d106      	bne.n	800369a <HAL_UART_DMAResume+0x5a>
    __HAL_UART_ENABLE(huart);
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003696:	2002      	movs	r0, #2
 8003698:	4770      	bx	lr
  return HAL_OK;
 800369a:	2000      	movs	r0, #0
}
 800369c:	4770      	bx	lr

0800369e <UART_WaitOnFlagUntilTimeout>:
{
 800369e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a2:	9d06      	ldr	r5, [sp, #24]
 80036a4:	4604      	mov	r4, r0
 80036a6:	460f      	mov	r7, r1
 80036a8:	4616      	mov	r6, r2
 80036aa:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ac:	6821      	ldr	r1, [r4, #0]
 80036ae:	69ca      	ldr	r2, [r1, #28]
 80036b0:	ea37 0302 	bics.w	r3, r7, r2
 80036b4:	bf0c      	ite	eq
 80036b6:	2201      	moveq	r2, #1
 80036b8:	2200      	movne	r2, #0
 80036ba:	42b2      	cmp	r2, r6
 80036bc:	d002      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80036be:	2000      	movs	r0, #0
}
 80036c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80036c4:	1c6b      	adds	r3, r5, #1
 80036c6:	d0f2      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80036c8:	b99d      	cbnz	r5, 80036f2 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ca:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80036cc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80036de:	2320      	movs	r3, #32
 80036e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80036e4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80036e8:	2300      	movs	r3, #0
 80036ea:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80036ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80036f2:	f7fd fffb 	bl	80016ec <HAL_GetTick>
 80036f6:	eba0 0008 	sub.w	r0, r0, r8
 80036fa:	4285      	cmp	r5, r0
 80036fc:	d8d6      	bhi.n	80036ac <UART_WaitOnFlagUntilTimeout+0xe>
 80036fe:	e7e4      	b.n	80036ca <UART_WaitOnFlagUntilTimeout+0x2c>

08003700 <HAL_UART_Transmit>:
{
 8003700:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003704:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003706:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 800370a:	4604      	mov	r4, r0
 800370c:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 800370e:	2b20      	cmp	r3, #32
{
 8003710:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003712:	d14c      	bne.n	80037ae <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8003714:	2900      	cmp	r1, #0
 8003716:	d048      	beq.n	80037aa <HAL_UART_Transmit+0xaa>
 8003718:	2a00      	cmp	r2, #0
 800371a:	d046      	beq.n	80037aa <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800371c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003720:	2b01      	cmp	r3, #1
 8003722:	d044      	beq.n	80037ae <HAL_UART_Transmit+0xae>
 8003724:	2301      	movs	r3, #1
 8003726:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	2300      	movs	r3, #0
 800372c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800372e:	2321      	movs	r3, #33	; 0x21
 8003730:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8003734:	f7fd ffda 	bl	80016ec <HAL_GetTick>
 8003738:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800373a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800373e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003742:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003746:	b292      	uxth	r2, r2
 8003748:	b962      	cbnz	r2, 8003764 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	9700      	str	r7, [sp, #0]
 800374c:	4633      	mov	r3, r6
 800374e:	2140      	movs	r1, #64	; 0x40
 8003750:	4620      	mov	r0, r4
 8003752:	f7ff ffa4 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 8003756:	b998      	cbnz	r0, 8003780 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8003758:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800375a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800375e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8003762:	e00e      	b.n	8003782 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8003764:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003768:	2200      	movs	r2, #0
 800376a:	9700      	str	r7, [sp, #0]
 800376c:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 800376e:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003770:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8003772:	b29b      	uxth	r3, r3
 8003774:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003778:	4633      	mov	r3, r6
 800377a:	f7ff ff90 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 800377e:	b118      	cbz	r0, 8003788 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8003780:	2003      	movs	r0, #3
}
 8003782:	b002      	add	sp, #8
 8003784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003788:	68a3      	ldr	r3, [r4, #8]
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003790:	d107      	bne.n	80037a2 <HAL_UART_Transmit+0xa2>
 8003792:	6923      	ldr	r3, [r4, #16]
 8003794:	b92b      	cbnz	r3, 80037a2 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003796:	f835 3b02 	ldrh.w	r3, [r5], #2
 800379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379e:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80037a0:	e7cf      	b.n	8003742 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80037a2:	782b      	ldrb	r3, [r5, #0]
 80037a4:	3501      	adds	r5, #1
 80037a6:	6293      	str	r3, [r2, #40]	; 0x28
 80037a8:	e7cb      	b.n	8003742 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80037aa:	2001      	movs	r0, #1
 80037ac:	e7e9      	b.n	8003782 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80037ae:	2002      	movs	r0, #2
 80037b0:	e7e7      	b.n	8003782 <HAL_UART_Transmit+0x82>

080037b2 <HAL_UART_TxCpltCallback>:
 80037b2:	4770      	bx	lr

080037b4 <UART_DMAReceiveCplt>:
{
 80037b4:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80037b6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037b8:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80037c0:	d111      	bne.n	80037e6 <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 80037c2:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037c6:	6813      	ldr	r3, [r2, #0]
 80037c8:	6819      	ldr	r1, [r3, #0]
 80037ca:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80037ce:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	f021 0101 	bic.w	r1, r1, #1
 80037d6:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80037de:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 80037e0:	2320      	movs	r3, #32
 80037e2:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
  HAL_UART_RxCpltCallback(huart);
 80037e6:	4610      	mov	r0, r2
 80037e8:	f7fc fd5a 	bl	80002a0 <HAL_UART_RxCpltCallback>
 80037ec:	bd08      	pop	{r3, pc}

080037ee <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ee:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80037f2:	6802      	ldr	r2, [r0, #0]
 80037f4:	2b22      	cmp	r3, #34	; 0x22
{
 80037f6:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037f8:	d12a      	bne.n	8003850 <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037fa:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 80037fc:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003804:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003806:	d11d      	bne.n	8003844 <UART_Receive_IT+0x56>
 8003808:	6904      	ldr	r4, [r0, #16]
 800380a:	b9dc      	cbnz	r4, 8003844 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800380c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800380e:	4011      	ands	r1, r2
 8003810:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8003814:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8003816:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 800381a:	3c01      	subs	r4, #1
 800381c:	b2a4      	uxth	r4, r4
 800381e:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8003822:	b96c      	cbnz	r4, 8003840 <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003824:	6803      	ldr	r3, [r0, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800382c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003836:	2320      	movs	r3, #32
 8003838:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 800383c:	f7fc fd30 	bl	80002a0 <HAL_UART_RxCpltCallback>
    return HAL_OK;
 8003840:	2000      	movs	r0, #0
}
 8003842:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003846:	1c5c      	adds	r4, r3, #1
 8003848:	4011      	ands	r1, r2
 800384a:	6544      	str	r4, [r0, #84]	; 0x54
 800384c:	7019      	strb	r1, [r3, #0]
 800384e:	e7e2      	b.n	8003816 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003850:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 8003852:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003854:	f043 0308 	orr.w	r3, r3, #8
 8003858:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 800385a:	bd10      	pop	{r4, pc}

0800385c <HAL_UART_RxHalfCpltCallback>:
 800385c:	4770      	bx	lr

0800385e <UART_DMARxHalfCplt>:
{
 800385e:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8003860:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003862:	f7ff fffb 	bl	800385c <HAL_UART_RxHalfCpltCallback>
 8003866:	bd08      	pop	{r3, pc}

08003868 <UART_DMAError>:
{
 8003868:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800386a:	6b81      	ldr	r1, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003872:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003876:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 800387a:	2b21      	cmp	r3, #33	; 0x21
 800387c:	d10a      	bne.n	8003894 <UART_DMAError+0x2c>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800387e:	680b      	ldr	r3, [r1, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	0612      	lsls	r2, r2, #24
 8003884:	d506      	bpl.n	8003894 <UART_DMAError+0x2c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800388c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800388e:	2320      	movs	r3, #32
 8003890:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003894:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 8003898:	2b22      	cmp	r3, #34	; 0x22
 800389a:	d106      	bne.n	80038aa <UART_DMAError+0x42>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800389c:	680b      	ldr	r3, [r1, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	065b      	lsls	r3, r3, #25
 80038a2:	d502      	bpl.n	80038aa <UART_DMAError+0x42>
    UART_EndRxTransfer(huart);
 80038a4:	4608      	mov	r0, r1
 80038a6:	f7ff fe79 	bl	800359c <UART_EndRxTransfer>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 80038aa:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80038ac:	4608      	mov	r0, r1
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 80038ae:	f043 0310 	orr.w	r3, r3, #16
 80038b2:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80038b4:	f7fc fcee 	bl	8000294 <HAL_UART_ErrorCallback>
 80038b8:	bd08      	pop	{r3, pc}
	...

080038bc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038bc:	6803      	ldr	r3, [r0, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038c0:	6819      	ldr	r1, [r3, #0]
{
 80038c2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80038c4:	0716      	lsls	r6, r2, #28
{
 80038c6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038c8:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 80038ca:	d107      	bne.n	80038dc <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038cc:	0695      	lsls	r5, r2, #26
 80038ce:	d563      	bpl.n	8003998 <HAL_UART_IRQHandler+0xdc>
 80038d0:	068e      	lsls	r6, r1, #26
 80038d2:	d561      	bpl.n	8003998 <HAL_UART_IRQHandler+0xdc>
}
 80038d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80038d8:	f7ff bf89 	b.w	80037ee <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80038dc:	f015 0001 	ands.w	r0, r5, #1
 80038e0:	d102      	bne.n	80038e8 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80038e2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80038e6:	d057      	beq.n	8003998 <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038e8:	07d5      	lsls	r5, r2, #31
 80038ea:	d507      	bpl.n	80038fc <HAL_UART_IRQHandler+0x40>
 80038ec:	05ce      	lsls	r6, r1, #23
 80038ee:	d505      	bpl.n	80038fc <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80038f0:	2501      	movs	r5, #1
 80038f2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038f4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80038f6:	f045 0501 	orr.w	r5, r5, #1
 80038fa:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038fc:	0795      	lsls	r5, r2, #30
 80038fe:	d506      	bpl.n	800390e <HAL_UART_IRQHandler+0x52>
 8003900:	b128      	cbz	r0, 800390e <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003902:	2502      	movs	r5, #2
 8003904:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003906:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003908:	f045 0504 	orr.w	r5, r5, #4
 800390c:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800390e:	0756      	lsls	r6, r2, #29
 8003910:	d506      	bpl.n	8003920 <HAL_UART_IRQHandler+0x64>
 8003912:	b128      	cbz	r0, 8003920 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003914:	2504      	movs	r5, #4
 8003916:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003918:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800391a:	f045 0502 	orr.w	r5, r5, #2
 800391e:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003920:	0715      	lsls	r5, r2, #28
 8003922:	d507      	bpl.n	8003934 <HAL_UART_IRQHandler+0x78>
 8003924:	068e      	lsls	r6, r1, #26
 8003926:	d400      	bmi.n	800392a <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003928:	b120      	cbz	r0, 8003934 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800392a:	2008      	movs	r0, #8
 800392c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800392e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003930:	4303      	orrs	r3, r0
 8003932:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003934:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d06a      	beq.n	8003a10 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393a:	0695      	lsls	r5, r2, #26
 800393c:	d504      	bpl.n	8003948 <HAL_UART_IRQHandler+0x8c>
 800393e:	0688      	lsls	r0, r1, #26
 8003940:	d502      	bpl.n	8003948 <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8003942:	4620      	mov	r0, r4
 8003944:	f7ff ff53 	bl	80037ee <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003948:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 800394a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800394c:	0719      	lsls	r1, r3, #28
 800394e:	d404      	bmi.n	800395a <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003954:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003958:	d01a      	beq.n	8003990 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 800395a:	f7ff fe1f 	bl	800359c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	0652      	lsls	r2, r2, #25
 8003964:	d510      	bpl.n	8003988 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003966:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003968:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800396a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396e:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003970:	b150      	cbz	r0, 8003988 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003972:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_UART_IRQHandler+0x158>)
 8003974:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003976:	f7fe f946 	bl	8001c06 <HAL_DMA_Abort_IT>
 800397a:	2800      	cmp	r0, #0
 800397c:	d048      	beq.n	8003a10 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800397e:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8003980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003984:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003986:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003988:	4620      	mov	r0, r4
 800398a:	f7fc fc83 	bl	8000294 <HAL_UART_ErrorCallback>
 800398e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003990:	f7fc fc80 	bl	8000294 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003996:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003998:	0616      	lsls	r6, r2, #24
 800399a:	d52b      	bpl.n	80039f4 <HAL_UART_IRQHandler+0x138>
 800399c:	060d      	lsls	r5, r1, #24
 800399e:	d529      	bpl.n	80039f4 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039a0:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80039a4:	2a21      	cmp	r2, #33	; 0x21
 80039a6:	d133      	bne.n	8003a10 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 80039a8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80039ac:	b292      	uxth	r2, r2
 80039ae:	b942      	cbnz	r2, 80039c2 <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039b6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c2:	68a2      	ldr	r2, [r4, #8]
 80039c4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80039c8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80039ca:	d10e      	bne.n	80039ea <HAL_UART_IRQHandler+0x12e>
 80039cc:	6921      	ldr	r1, [r4, #16]
 80039ce:	b961      	cbnz	r1, 80039ea <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80039d0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80039d4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80039d8:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80039da:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 80039dc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80039e8:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80039ea:	1c51      	adds	r1, r2, #1
 80039ec:	64e1      	str	r1, [r4, #76]	; 0x4c
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
 80039f2:	e7f3      	b.n	80039dc <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039f4:	0650      	lsls	r0, r2, #25
 80039f6:	d50b      	bpl.n	8003a10 <HAL_UART_IRQHandler+0x154>
 80039f8:	064a      	lsls	r2, r1, #25
 80039fa:	d509      	bpl.n	8003a10 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039fc:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80039fe:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a04:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003a06:	2320      	movs	r3, #32
 8003a08:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8003a0c:	f7ff fed1 	bl	80037b2 <HAL_UART_TxCpltCallback>
 8003a10:	bd70      	pop	{r4, r5, r6, pc}
 8003a12:	bf00      	nop
 8003a14:	08003a19 	.word	0x08003a19

08003a18 <UART_DMAAbortOnError>:
{
 8003a18:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003a1a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a22:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003a26:	f7fc fc35 	bl	8000294 <HAL_UART_ErrorCallback>
 8003a2a:	bd08      	pop	{r3, pc}

08003a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003a30:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a32:	69c3      	ldr	r3, [r0, #28]
 8003a34:	6921      	ldr	r1, [r4, #16]
 8003a36:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003a38:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	6961      	ldr	r1, [r4, #20]
 8003a3e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003a40:	4993      	ldr	r1, [pc, #588]	; (8003c90 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a42:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003a44:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003a46:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003a48:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a4a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003a4c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a4e:	686a      	ldr	r2, [r5, #4]
 8003a50:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003a54:	430a      	orrs	r2, r1
 8003a56:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003a58:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003a5a:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003a5c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003a5e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003a62:	430a      	orrs	r2, r1
 8003a64:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a66:	4a8b      	ldr	r2, [pc, #556]	; (8003c94 <UART_SetConfig+0x268>)
 8003a68:	4295      	cmp	r5, r2
 8003a6a:	d119      	bne.n	8003aa0 <UART_SetConfig+0x74>
 8003a6c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003a70:	4989      	ldr	r1, [pc, #548]	; (8003c98 <UART_SetConfig+0x26c>)
 8003a72:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003a76:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7e:	5c8a      	ldrb	r2, [r1, r2]
 8003a80:	f040 80b3 	bne.w	8003bea <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8003a84:	2a08      	cmp	r2, #8
 8003a86:	f200 80ad 	bhi.w	8003be4 <UART_SetConfig+0x1b8>
 8003a8a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003a8e:	0026      	.short	0x0026
 8003a90:	00e9007b 	.word	0x00e9007b
 8003a94:	00f500ab 	.word	0x00f500ab
 8003a98:	00ab00ab 	.word	0x00ab00ab
 8003a9c:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aa0:	4a7e      	ldr	r2, [pc, #504]	; (8003c9c <UART_SetConfig+0x270>)
 8003aa2:	4295      	cmp	r5, r2
 8003aa4:	d107      	bne.n	8003ab6 <UART_SetConfig+0x8a>
 8003aa6:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003aaa:	497d      	ldr	r1, [pc, #500]	; (8003ca0 <UART_SetConfig+0x274>)
 8003aac:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003ab0:	f002 020c 	and.w	r2, r2, #12
 8003ab4:	e7e1      	b.n	8003a7a <UART_SetConfig+0x4e>
 8003ab6:	4a7b      	ldr	r2, [pc, #492]	; (8003ca4 <UART_SetConfig+0x278>)
 8003ab8:	4295      	cmp	r5, r2
 8003aba:	d12b      	bne.n	8003b14 <UART_SetConfig+0xe8>
 8003abc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8003ac0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003ac4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003ac8:	2a10      	cmp	r2, #16
 8003aca:	f000 80d2 	beq.w	8003c72 <UART_SetConfig+0x246>
 8003ace:	d816      	bhi.n	8003afe <UART_SetConfig+0xd2>
 8003ad0:	b9da      	cbnz	r2, 8003b0a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad6:	f040 809f 	bne.w	8003c18 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003ada:	f7fe fe03 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003ade:	6861      	ldr	r1, [r4, #4]
 8003ae0:	084a      	lsrs	r2, r1, #1
 8003ae2:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aea:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aec:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003aee:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003af2:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8003af6:	6821      	ldr	r1, [r4, #0]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60cb      	str	r3, [r1, #12]
 8003afc:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003afe:	2a20      	cmp	r2, #32
 8003b00:	f000 80ab 	beq.w	8003c5a <UART_SetConfig+0x22e>
 8003b04:	2a30      	cmp	r2, #48	; 0x30
 8003b06:	f000 80ba 	beq.w	8003c7e <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0e:	d069      	beq.n	8003be4 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003b10:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b14:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <UART_SetConfig+0x27c>)
 8003b16:	4295      	cmp	r5, r2
 8003b18:	d10e      	bne.n	8003b38 <UART_SetConfig+0x10c>
 8003b1a:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8003b1e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003b22:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003b26:	2a40      	cmp	r2, #64	; 0x40
 8003b28:	f000 80a3 	beq.w	8003c72 <UART_SetConfig+0x246>
 8003b2c:	d9d0      	bls.n	8003ad0 <UART_SetConfig+0xa4>
 8003b2e:	2a80      	cmp	r2, #128	; 0x80
 8003b30:	f000 8093 	beq.w	8003c5a <UART_SetConfig+0x22e>
 8003b34:	2ac0      	cmp	r2, #192	; 0xc0
 8003b36:	e7e6      	b.n	8003b06 <UART_SetConfig+0xda>
 8003b38:	4a5c      	ldr	r2, [pc, #368]	; (8003cac <UART_SetConfig+0x280>)
 8003b3a:	4295      	cmp	r5, r2
 8003b3c:	d110      	bne.n	8003b60 <UART_SetConfig+0x134>
 8003b3e:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8003b42:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003b46:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003b4a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003b4e:	f000 8090 	beq.w	8003c72 <UART_SetConfig+0x246>
 8003b52:	d9bd      	bls.n	8003ad0 <UART_SetConfig+0xa4>
 8003b54:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003b58:	d07f      	beq.n	8003c5a <UART_SetConfig+0x22e>
 8003b5a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003b5e:	e7d2      	b.n	8003b06 <UART_SetConfig+0xda>
 8003b60:	4a53      	ldr	r2, [pc, #332]	; (8003cb0 <UART_SetConfig+0x284>)
 8003b62:	4295      	cmp	r5, r2
 8003b64:	d117      	bne.n	8003b96 <UART_SetConfig+0x16a>
 8003b66:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8003b6a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003b6e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003b72:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003b76:	d07c      	beq.n	8003c72 <UART_SetConfig+0x246>
 8003b78:	d807      	bhi.n	8003b8a <UART_SetConfig+0x15e>
 8003b7a:	2a00      	cmp	r2, #0
 8003b7c:	d1c5      	bne.n	8003b0a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	d154      	bne.n	8003c2e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003b84:	f7fe fdbe 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8003b88:	e7a9      	b.n	8003ade <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b8a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003b8e:	d064      	beq.n	8003c5a <UART_SetConfig+0x22e>
 8003b90:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003b94:	e7b7      	b.n	8003b06 <UART_SetConfig+0xda>
 8003b96:	4a47      	ldr	r2, [pc, #284]	; (8003cb4 <UART_SetConfig+0x288>)
 8003b98:	4295      	cmp	r5, r2
 8003b9a:	d10f      	bne.n	8003bbc <UART_SetConfig+0x190>
 8003b9c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003ba0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003ba4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003ba8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003bac:	d061      	beq.n	8003c72 <UART_SetConfig+0x246>
 8003bae:	d98f      	bls.n	8003ad0 <UART_SetConfig+0xa4>
 8003bb0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003bb4:	d051      	beq.n	8003c5a <UART_SetConfig+0x22e>
 8003bb6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003bba:	e7a4      	b.n	8003b06 <UART_SetConfig+0xda>
 8003bbc:	4a3e      	ldr	r2, [pc, #248]	; (8003cb8 <UART_SetConfig+0x28c>)
 8003bbe:	4295      	cmp	r5, r2
 8003bc0:	d1a3      	bne.n	8003b0a <UART_SetConfig+0xde>
 8003bc2:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8003bc6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003bca:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003bce:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003bd2:	d04e      	beq.n	8003c72 <UART_SetConfig+0x246>
 8003bd4:	f67f af7c 	bls.w	8003ad0 <UART_SetConfig+0xa4>
 8003bd8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003bdc:	d03d      	beq.n	8003c5a <UART_SetConfig+0x22e>
 8003bde:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8003be2:	e790      	b.n	8003b06 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8003be4:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e781      	b.n	8003aee <UART_SetConfig+0xc2>
    switch (clocksource)
 8003bea:	2a08      	cmp	r2, #8
 8003bec:	d890      	bhi.n	8003b10 <UART_SetConfig+0xe4>
 8003bee:	a301      	add	r3, pc, #4	; (adr r3, 8003bf4 <UART_SetConfig+0x1c8>)
 8003bf0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c35 	.word	0x08003c35
 8003c00:	08003b11 	.word	0x08003b11
 8003c04:	08003c4b 	.word	0x08003c4b
 8003c08:	08003b11 	.word	0x08003b11
 8003c0c:	08003b11 	.word	0x08003b11
 8003c10:	08003b11 	.word	0x08003b11
 8003c14:	08003c51 	.word	0x08003c51
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003c18:	f7fe fd64 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c1c:	6863      	ldr	r3, [r4, #4]
 8003c1e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003c22:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c26:	b280      	uxth	r0, r0
 8003c28:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c2a:	2000      	movs	r0, #0
      break;
 8003c2c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003c2e:	f7fe fd69 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8003c32:	e7f3      	b.n	8003c1c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003c34:	6862      	ldr	r2, [r4, #4]
 8003c36:	0853      	lsrs	r3, r2, #1
 8003c38:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003c3c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	60eb      	str	r3, [r5, #12]
 8003c48:	e7ef      	b.n	8003c2a <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c4a:	f7fe fc8b 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8003c4e:	e7e5      	b.n	8003c1c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003c50:	6862      	ldr	r2, [r4, #4]
 8003c52:	0853      	lsrs	r3, r2, #1
 8003c54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003c58:	e7f2      	b.n	8003c40 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5e:	d1e9      	bne.n	8003c34 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c60:	6860      	ldr	r0, [r4, #4]
 8003c62:	0843      	lsrs	r3, r0, #1
 8003c64:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003c68:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c6c:	fbb3 f3f0 	udiv	r3, r3, r0
 8003c70:	e73b      	b.n	8003aea <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c76:	d1e8      	bne.n	8003c4a <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c78:	f7fe fc74 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8003c7c:	e72f      	b.n	8003ade <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c82:	d1e5      	bne.n	8003c50 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c84:	6860      	ldr	r0, [r4, #4]
 8003c86:	0843      	lsrs	r3, r0, #1
 8003c88:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003c8c:	e7ee      	b.n	8003c6c <UART_SetConfig+0x240>
 8003c8e:	bf00      	nop
 8003c90:	efff69f3 	.word	0xefff69f3
 8003c94:	40011000 	.word	0x40011000
 8003c98:	08005869 	.word	0x08005869
 8003c9c:	40004400 	.word	0x40004400
 8003ca0:	0800586d 	.word	0x0800586d
 8003ca4:	40004800 	.word	0x40004800
 8003ca8:	40004c00 	.word	0x40004c00
 8003cac:	40005000 	.word	0x40005000
 8003cb0:	40011400 	.word	0x40011400
 8003cb4:	40007800 	.word	0x40007800
 8003cb8:	40007c00 	.word	0x40007c00

08003cbc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003cbe:	07da      	lsls	r2, r3, #31
{
 8003cc0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc2:	d506      	bpl.n	8003cd2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cc4:	6801      	ldr	r1, [r0, #0]
 8003cc6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003cc8:	684a      	ldr	r2, [r1, #4]
 8003cca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003cce:	4322      	orrs	r2, r4
 8003cd0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cd2:	079c      	lsls	r4, r3, #30
 8003cd4:	d506      	bpl.n	8003ce4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd6:	6801      	ldr	r1, [r0, #0]
 8003cd8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003cda:	684a      	ldr	r2, [r1, #4]
 8003cdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ce0:	4322      	orrs	r2, r4
 8003ce2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce4:	0759      	lsls	r1, r3, #29
 8003ce6:	d506      	bpl.n	8003cf6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce8:	6801      	ldr	r1, [r0, #0]
 8003cea:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003cec:	684a      	ldr	r2, [r1, #4]
 8003cee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cf2:	4322      	orrs	r2, r4
 8003cf4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cf6:	071a      	lsls	r2, r3, #28
 8003cf8:	d506      	bpl.n	8003d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cfa:	6801      	ldr	r1, [r0, #0]
 8003cfc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003cfe:	684a      	ldr	r2, [r1, #4]
 8003d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d04:	4322      	orrs	r2, r4
 8003d06:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d08:	06dc      	lsls	r4, r3, #27
 8003d0a:	d506      	bpl.n	8003d1a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d0c:	6801      	ldr	r1, [r0, #0]
 8003d0e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003d10:	688a      	ldr	r2, [r1, #8]
 8003d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d16:	4322      	orrs	r2, r4
 8003d18:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d1a:	0699      	lsls	r1, r3, #26
 8003d1c:	d506      	bpl.n	8003d2c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d1e:	6801      	ldr	r1, [r0, #0]
 8003d20:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003d22:	688a      	ldr	r2, [r1, #8]
 8003d24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d28:	4322      	orrs	r2, r4
 8003d2a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2c:	065a      	lsls	r2, r3, #25
 8003d2e:	d510      	bpl.n	8003d52 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d30:	6801      	ldr	r1, [r0, #0]
 8003d32:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003d34:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d36:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d3a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003d3e:	ea42 0204 	orr.w	r2, r2, r4
 8003d42:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d44:	d105      	bne.n	8003d52 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d46:	684a      	ldr	r2, [r1, #4]
 8003d48:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003d4a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003d4e:	4322      	orrs	r2, r4
 8003d50:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	d506      	bpl.n	8003d64 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d56:	6802      	ldr	r2, [r0, #0]
 8003d58:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003d5a:	6853      	ldr	r3, [r2, #4]
 8003d5c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6053      	str	r3, [r2, #4]
 8003d64:	bd10      	pop	{r4, pc}

08003d66 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d66:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	2500      	movs	r5, #0
{
 8003d6a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d6e:	f7fd fcbd 	bl	80016ec <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d72:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003d74:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	0712      	lsls	r2, r2, #28
 8003d7a:	d409      	bmi.n	8003d90 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8003d7c:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d7e:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003d80:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8003d84:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8003d88:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8003d8c:	b003      	add	sp, #12
 8003d8e:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d90:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003d94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d98:	4620      	mov	r0, r4
 8003d9a:	9200      	str	r2, [sp, #0]
 8003d9c:	462a      	mov	r2, r5
 8003d9e:	f7ff fc7e 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d0ea      	beq.n	8003d7c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003da6:	2003      	movs	r0, #3
 8003da8:	e7f0      	b.n	8003d8c <UART_CheckIdleState+0x26>

08003daa <HAL_UART_Init>:
{
 8003daa:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003dac:	4604      	mov	r4, r0
 8003dae:	b360      	cbz	r0, 8003e0a <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003db0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003db4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003db8:	b91b      	cbnz	r3, 8003dc2 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003dba:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8003dbe:	f7fd fb3d 	bl	800143c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003dc2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003dc4:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dc6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003dc8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003dcc:	6813      	ldr	r3, [r2, #0]
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dd4:	f7ff fe2a 	bl	8003a2c <UART_SetConfig>
 8003dd8:	2801      	cmp	r0, #1
 8003dda:	d016      	beq.n	8003e0a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dde:	b113      	cbz	r3, 8003de6 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7ff ff6b 	bl	8003cbc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003de8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003df0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003df8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
}
 8003e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003e04:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003e06:	f7ff bfae 	b.w	8003d66 <UART_CheckIdleState>
}
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	bd10      	pop	{r4, pc}
	...

08003e10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8003e12:	3b01      	subs	r3, #1
 8003e14:	d101      	bne.n	8003e1a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003e16:	2003      	movs	r0, #3
 8003e18:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8003e1a:	6902      	ldr	r2, [r0, #16]
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	daf8      	bge.n	8003e12 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e20:	6903      	ldr	r3, [r0, #16]
 8003e22:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <USB_CoreReset+0x2c>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 8003e2a:	3a01      	subs	r2, #1
 8003e2c:	d0f3      	beq.n	8003e16 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e2e:	6903      	ldr	r3, [r0, #16]
 8003e30:	f013 0301 	ands.w	r3, r3, #1
 8003e34:	d1f9      	bne.n	8003e2a <USB_CoreReset+0x1a>

  return HAL_OK;
 8003e36:	4618      	mov	r0, r3
}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	00030d41 	.word	0x00030d41

08003e40 <USB_CoreInit>:
{
 8003e40:	b084      	sub	sp, #16
 8003e42:	b538      	push	{r3, r4, r5, lr}
 8003e44:	ad05      	add	r5, sp, #20
 8003e46:	4604      	mov	r4, r0
 8003e48:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d127      	bne.n	8003ea2 <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e58:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e5a:	68c3      	ldr	r3, [r0, #12]
 8003e5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e64:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e66:	68c3      	ldr	r3, [r0, #12]
 8003e68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e6c:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 8003e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d103      	bne.n	8003e7c <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e74:	68c3      	ldr	r3, [r0, #12]
 8003e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e7a:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f7ff ffc7 	bl	8003e10 <USB_CoreReset>
  if(cfg.dma_enable == ENABLE)
 8003e82:	9b08      	ldr	r3, [sp, #32]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e88:	68a3      	ldr	r3, [r4, #8]
 8003e8a:	f043 0306 	orr.w	r3, r3, #6
 8003e8e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e90:	68a3      	ldr	r3, [r4, #8]
 8003e92:	f043 0320 	orr.w	r3, r3, #32
 8003e96:	60a3      	str	r3, [r4, #8]
}
 8003e98:	2000      	movs	r0, #0
 8003e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e9e:	b004      	add	sp, #16
 8003ea0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ea2:	68c3      	ldr	r3, [r0, #12]
 8003ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea8:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003eaa:	f7ff ffb1 	bl	8003e10 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8003eb4:	e7e5      	b.n	8003e82 <USB_CoreInit+0x42>

08003eb6 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003eb6:	6883      	ldr	r3, [r0, #8]
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6083      	str	r3, [r0, #8]
}
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	4770      	bx	lr

08003ec2 <USB_SetCurrentMode>:
{
 8003ec2:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ec4:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8003ec6:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ec8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ecc:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8003ece:	d108      	bne.n	8003ee2 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ed0:	68c3      	ldr	r3, [r0, #12]
 8003ed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ed6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 8003ed8:	2032      	movs	r0, #50	; 0x32
 8003eda:	f7fd fc0d 	bl	80016f8 <HAL_Delay>
}
 8003ede:	2000      	movs	r0, #0
 8003ee0:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8003ee2:	2900      	cmp	r1, #0
 8003ee4:	d1f8      	bne.n	8003ed8 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ee6:	68c3      	ldr	r3, [r0, #12]
 8003ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eec:	e7f3      	b.n	8003ed6 <USB_SetCurrentMode+0x14>
	...

08003ef0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8003ef0:	0189      	lsls	r1, r1, #6
 8003ef2:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <USB_FlushTxFifo+0x20>)
 8003ef4:	f041 0120 	orr.w	r1, r1, #32
 8003ef8:	6101      	str	r1, [r0, #16]
    if (++count > 200000)
 8003efa:	3a01      	subs	r2, #1
 8003efc:	d005      	beq.n	8003f0a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003efe:	6903      	ldr	r3, [r0, #16]
 8003f00:	f013 0320 	ands.w	r3, r3, #32
 8003f04:	d1f9      	bne.n	8003efa <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003f06:	4618      	mov	r0, r3
 8003f08:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003f0a:	2003      	movs	r0, #3
}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	00030d41 	.word	0x00030d41

08003f14 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f14:	2310      	movs	r3, #16
 8003f16:	4a06      	ldr	r2, [pc, #24]	; (8003f30 <USB_FlushRxFifo+0x1c>)
 8003f18:	6103      	str	r3, [r0, #16]
    if (++count > 200000)
 8003f1a:	3a01      	subs	r2, #1
 8003f1c:	d005      	beq.n	8003f2a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f1e:	6903      	ldr	r3, [r0, #16]
 8003f20:	f013 0310 	ands.w	r3, r3, #16
 8003f24:	d1f9      	bne.n	8003f1a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003f26:	4618      	mov	r0, r3
 8003f28:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003f2a:	2003      	movs	r0, #3
}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	00030d41 	.word	0x00030d41

08003f34 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003f34:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003f38:	4319      	orrs	r1, r3
 8003f3a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003f3e:	2000      	movs	r0, #0
 8003f40:	4770      	bx	lr
	...

08003f44 <USB_DevInit>:
{
 8003f44:	b084      	sub	sp, #16
 8003f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	a807      	add	r0, sp, #28
 8003f4e:	4688      	mov	r8, r1
 8003f50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f56:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8003f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f5e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003f60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f62:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0)
 8003f64:	b95e      	cbnz	r6, 8003f7e <USB_DevInit+0x3a>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8003f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f6c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f74:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0;
 8003f7e:	2300      	movs	r3, #0
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003f80:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f82:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0;
 8003f86:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f8a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003f8e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003f92:	d158      	bne.n	8004046 <USB_DevInit+0x102>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d154      	bne.n	8004042 <USB_DevInit+0xfe>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8003f98:	2100      	movs	r1, #0
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f7ff ffca 	bl	8003f34 <USB_SetDevSpeed>
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8003fa0:	2110      	movs	r1, #16
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f7ff ffa4 	bl	8003ef0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f7ff ffb3 	bl	8003f14 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0;
 8003fae:	2300      	movs	r3, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8003fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DIEPMSK = 0;
 8003fb8:	612b      	str	r3, [r5, #16]
 8003fba:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0;
 8003fbc:	616b      	str	r3, [r5, #20]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8003fbe:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8003fc2:	61aa      	str	r2, [r5, #24]
 8003fc4:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DAINTMSK = 0;
 8003fc8:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003fca:	4543      	cmp	r3, r8
 8003fcc:	d13f      	bne.n	800404e <USB_DevInit+0x10a>
 8003fce:	2100      	movs	r1, #0
 8003fd0:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003fd4:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8003fd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003fdc:	4608      	mov	r0, r1
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003fde:	428b      	cmp	r3, r1
 8003fe0:	d143      	bne.n	800406a <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fe2:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 8003fe4:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fea:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 8003fec:	d108      	bne.n	8004000 <USB_DevInit+0xbc>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8003fee:	4b26      	ldr	r3, [pc, #152]	; (8004088 <USB_DevInit+0x144>)
 8003ff0:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8003ff2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	f043 0303 	orr.w	r3, r3, #3
 8003ffc:	632b      	str	r3, [r5, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 8003ffe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 8004004:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004008:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == DISABLE)
 800400a:	b91f      	cbnz	r7, 8004014 <USB_DevInit+0xd0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800400c:	69a3      	ldr	r3, [r4, #24]
 800400e:	f043 0310 	orr.w	r3, r3, #16
 8004012:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8004014:	69a2      	ldr	r2, [r4, #24]
 8004016:	4b1d      	ldr	r3, [pc, #116]	; (800408c <USB_DevInit+0x148>)
 8004018:	4313      	orrs	r3, r2
 800401a:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable)
 800401c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800401e:	b11b      	cbz	r3, 8004028 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004020:	69a3      	ldr	r3, [r4, #24]
 8004022:	f043 0308 	orr.w	r3, r3, #8
 8004026:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 8004028:	2e01      	cmp	r6, #1
 800402a:	d105      	bne.n	8004038 <USB_DevInit+0xf4>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800402c:	69a3      	ldr	r3, [r4, #24]
 800402e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004032:	f043 0304 	orr.w	r3, r3, #4
 8004036:	61a3      	str	r3, [r4, #24]
}
 8004038:	2000      	movs	r0, #0
 800403a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800403e:	b004      	add	sp, #16
 8004040:	4770      	bx	lr
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8004042:	2101      	movs	r1, #1
 8004044:	e7a9      	b.n	8003f9a <USB_DevInit+0x56>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 8004046:	2903      	cmp	r1, #3
 8004048:	d0a4      	beq.n	8003f94 <USB_DevInit+0x50>
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800404a:	2103      	movs	r1, #3
 800404c:	e7a5      	b.n	8003f9a <USB_DevInit+0x56>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800404e:	f8d2 c000 	ldr.w	ip, [r2]
 8004052:	f1bc 0f00 	cmp.w	ip, #0
 8004056:	da06      	bge.n	8004066 <USB_DevInit+0x122>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8004058:	6010      	str	r0, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 800405a:	6111      	str	r1, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800405c:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800405e:	f8c2 e008 	str.w	lr, [r2, #8]
 8004062:	3220      	adds	r2, #32
 8004064:	e7b1      	b.n	8003fca <USB_DevInit+0x86>
      USBx_INEP(i)->DIEPCTL = 0;
 8004066:	6011      	str	r1, [r2, #0]
 8004068:	e7f7      	b.n	800405a <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800406a:	f8d2 8000 	ldr.w	r8, [r2]
 800406e:	f1b8 0f00 	cmp.w	r8, #0
 8004072:	da07      	bge.n	8004084 <USB_DevInit+0x140>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8004074:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8004078:	6110      	str	r0, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800407a:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 800407c:	f8c2 c008 	str.w	ip, [r2, #8]
 8004080:	3220      	adds	r2, #32
 8004082:	e7ac      	b.n	8003fde <USB_DevInit+0x9a>
      USBx_OUTEP(i)->DOEPCTL = 0;
 8004084:	6010      	str	r0, [r2, #0]
 8004086:	e7f7      	b.n	8004078 <USB_DevInit+0x134>
 8004088:	00800100 	.word	0x00800100
 800408c:	803c3800 	.word	0x803c3800

08004090 <USB_DevDisconnect>:
{
 8004090:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004092:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004096:	f043 0302 	orr.w	r3, r3, #2
 800409a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 800409e:	2003      	movs	r0, #3
 80040a0:	f7fd fb2a 	bl	80016f8 <HAL_Delay>
}
 80040a4:	2000      	movs	r0, #0
 80040a6:	bd08      	pop	{r3, pc}

080040a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040a8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80040aa:	f000 ff59 	bl	8004f60 <vTaskStartScheduler>
  
  return osOK;
}
 80040ae:	2000      	movs	r0, #0
 80040b0:	bd08      	pop	{r3, pc}

080040b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040b2:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040b4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80040b8:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040ba:	8a02      	ldrh	r2, [r0, #16]
{
 80040bc:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 80040be:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040c0:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 80040c4:	bf14      	ite	ne
 80040c6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80040c8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040ca:	a803      	add	r0, sp, #12
 80040cc:	9400      	str	r4, [sp, #0]
 80040ce:	9001      	str	r0, [sp, #4]
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 fe75 	bl	8004dc0 <xTaskCreate>
 80040d6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80040d8:	bf0c      	ite	eq
 80040da:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80040dc:	2000      	movne	r0, #0
}
 80040de:	b005      	add	sp, #20
 80040e0:	bd30      	pop	{r4, r5, pc}

080040e2 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80040e2:	2800      	cmp	r0, #0
 80040e4:	bf08      	it	eq
 80040e6:	2001      	moveq	r0, #1
{
 80040e8:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80040ea:	f001 f88f 	bl	800520c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80040ee:	2000      	movs	r0, #0
 80040f0:	bd08      	pop	{r3, pc}

080040f2 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80040f2:	2001      	movs	r0, #1
 80040f4:	f000 bc64 	b.w	80049c0 <xQueueCreateMutex>

080040f8 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80040f8:	2200      	movs	r2, #0
 80040fa:	c803      	ldmia	r0, {r0, r1}
 80040fc:	f000 bb7e 	b.w	80047fc <xQueueGenericCreate>

08004100 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004100:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004102:	f001 f9d3 	bl	80054ac <xTaskGetSchedulerState>
 8004106:	2801      	cmp	r0, #1
 8004108:	d003      	beq.n	8004112 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800410a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800410e:	f000 ba01 	b.w	8004514 <xPortSysTickHandler>
 8004112:	bd08      	pop	{r3, pc}

08004114 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <prvInsertBlockIntoFreeList+0x40>)
{
 8004116:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4282      	cmp	r2, r0
 800411c:	d318      	bcc.n	8004150 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800411e:	685c      	ldr	r4, [r3, #4]
 8004120:	1919      	adds	r1, r3, r4
 8004122:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004124:	bf01      	itttt	eq
 8004126:	6841      	ldreq	r1, [r0, #4]
 8004128:	4618      	moveq	r0, r3
 800412a:	1909      	addeq	r1, r1, r4
 800412c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800412e:	6844      	ldr	r4, [r0, #4]
 8004130:	1901      	adds	r1, r0, r4
 8004132:	428a      	cmp	r2, r1
 8004134:	d107      	bne.n	8004146 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004136:	4908      	ldr	r1, [pc, #32]	; (8004158 <prvInsertBlockIntoFreeList+0x44>)
 8004138:	6809      	ldr	r1, [r1, #0]
 800413a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800413c:	bf1f      	itttt	ne
 800413e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004140:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004142:	1909      	addne	r1, r1, r4
 8004144:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004146:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004148:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800414a:	bf18      	it	ne
 800414c:	6018      	strne	r0, [r3, #0]
 800414e:	bd10      	pop	{r4, pc}
 8004150:	4613      	mov	r3, r2
 8004152:	e7e1      	b.n	8004118 <prvInsertBlockIntoFreeList+0x4>
 8004154:	20003c68 	.word	0x20003c68
 8004158:	20000058 	.word	0x20000058

0800415c <pvPortMalloc>:
{
 800415c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004160:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004162:	f000 ff3d 	bl	8004fe0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004166:	4940      	ldr	r1, [pc, #256]	; (8004268 <pvPortMalloc+0x10c>)
 8004168:	4d40      	ldr	r5, [pc, #256]	; (800426c <pvPortMalloc+0x110>)
 800416a:	680b      	ldr	r3, [r1, #0]
 800416c:	bb0b      	cbnz	r3, 80041b2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800416e:	4a40      	ldr	r2, [pc, #256]	; (8004270 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004170:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004172:	4e40      	ldr	r6, [pc, #256]	; (8004274 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004174:	bf1b      	ittet	ne
 8004176:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004178:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800417c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004180:	f020 0007 	bicne.w	r0, r0, #7
 8004184:	bf1c      	itt	ne
 8004186:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004188:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800418a:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800418c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800418e:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004190:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8004192:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004194:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8004198:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800419a:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800419c:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800419e:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041a0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041a2:	4b35      	ldr	r3, [pc, #212]	; (8004278 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041a4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041a6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041a8:	4b34      	ldr	r3, [pc, #208]	; (800427c <pvPortMalloc+0x120>)
 80041aa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041b0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041b2:	682f      	ldr	r7, [r5, #0]
 80041b4:	4227      	tst	r7, r4
 80041b6:	d116      	bne.n	80041e6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80041b8:	2c00      	cmp	r4, #0
 80041ba:	d042      	beq.n	8004242 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 80041bc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041c0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041c2:	bf1c      	itt	ne
 80041c4:	f023 0307 	bicne.w	r3, r3, #7
 80041c8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041ca:	b163      	cbz	r3, 80041e6 <pvPortMalloc+0x8a>
 80041cc:	4a2b      	ldr	r2, [pc, #172]	; (800427c <pvPortMalloc+0x120>)
 80041ce:	6816      	ldr	r6, [r2, #0]
 80041d0:	4690      	mov	r8, r2
 80041d2:	42b3      	cmp	r3, r6
 80041d4:	d807      	bhi.n	80041e6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80041d6:	4a27      	ldr	r2, [pc, #156]	; (8004274 <pvPortMalloc+0x118>)
 80041d8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041da:	6868      	ldr	r0, [r5, #4]
 80041dc:	4283      	cmp	r3, r0
 80041de:	d804      	bhi.n	80041ea <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80041e0:	6809      	ldr	r1, [r1, #0]
 80041e2:	428d      	cmp	r5, r1
 80041e4:	d107      	bne.n	80041f6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80041e6:	2400      	movs	r4, #0
 80041e8:	e02b      	b.n	8004242 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041ea:	682c      	ldr	r4, [r5, #0]
 80041ec:	2c00      	cmp	r4, #0
 80041ee:	d0f7      	beq.n	80041e0 <pvPortMalloc+0x84>
 80041f0:	462a      	mov	r2, r5
 80041f2:	4625      	mov	r5, r4
 80041f4:	e7f1      	b.n	80041da <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041f6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041f8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041fa:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041fc:	1ac2      	subs	r2, r0, r3
 80041fe:	2a10      	cmp	r2, #16
 8004200:	d911      	bls.n	8004226 <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004202:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004204:	0741      	lsls	r1, r0, #29
 8004206:	d00a      	beq.n	800421e <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	b672      	cpsid	i
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	b662      	cpsie	i
 800421c:	e7fe      	b.n	800421c <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800421e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004220:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004222:	f7ff ff77 	bl	8004114 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004226:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004228:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800422a:	4913      	ldr	r1, [pc, #76]	; (8004278 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800422c:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800422e:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004230:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8004232:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004234:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004238:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800423a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800423c:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800423e:	bf38      	it	cc
 8004240:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8004242:	f000 ff69 	bl	8005118 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004246:	0763      	lsls	r3, r4, #29
 8004248:	d00a      	beq.n	8004260 <pvPortMalloc+0x104>
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	b672      	cpsid	i
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	b662      	cpsie	i
 800425e:	e7fe      	b.n	800425e <pvPortMalloc+0x102>
}
 8004260:	4620      	mov	r0, r4
 8004262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004266:	bf00      	nop
 8004268:	20000058 	.word	0x20000058
 800426c:	20003c5c 	.word	0x20003c5c
 8004270:	2000005c 	.word	0x2000005c
 8004274:	20003c68 	.word	0x20003c68
 8004278:	20003c64 	.word	0x20003c64
 800427c:	20003c60 	.word	0x20003c60

08004280 <vPortFree>:
{
 8004280:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004282:	4604      	mov	r4, r0
 8004284:	2800      	cmp	r0, #0
 8004286:	d032      	beq.n	80042ee <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004288:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <vPortFree+0x70>)
 800428a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	4213      	tst	r3, r2
 8004292:	d10a      	bne.n	80042aa <vPortFree+0x2a>
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	b672      	cpsid	i
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	b662      	cpsie	i
 80042a8:	e7fe      	b.n	80042a8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042aa:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80042ae:	b151      	cbz	r1, 80042c6 <vPortFree+0x46>
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	b672      	cpsid	i
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	b662      	cpsie	i
 80042c4:	e7fe      	b.n	80042c4 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042c6:	ea23 0302 	bic.w	r3, r3, r2
 80042ca:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80042ce:	f000 fe87 	bl	8004fe0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042d2:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <vPortFree+0x74>)
 80042d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042d8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042dc:	6811      	ldr	r1, [r2, #0]
 80042de:	440b      	add	r3, r1
 80042e0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042e2:	f7ff ff17 	bl	8004114 <prvInsertBlockIntoFreeList>
}
 80042e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80042ea:	f000 bf15 	b.w	8005118 <xTaskResumeAll>
 80042ee:	bd10      	pop	{r4, pc}
 80042f0:	20003c5c 	.word	0x20003c5c
 80042f4:	20003c60 	.word	0x20003c60

080042f8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042fc:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004300:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004302:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004304:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004306:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004308:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800430a:	6003      	str	r3, [r0, #0]
 800430c:	4770      	bx	lr

0800430e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	6103      	str	r3, [r0, #16]
 8004312:	4770      	bx	lr

08004314 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004314:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004316:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004318:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800431a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004320:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004322:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004324:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004326:	3301      	adds	r3, #1
 8004328:	6003      	str	r3, [r0, #0]
 800432a:	4770      	bx	lr

0800432c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800432c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800432e:	1c53      	adds	r3, r2, #1
{
 8004330:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8004332:	d10a      	bne.n	800434a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004334:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800433a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800433c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800433e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004340:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004342:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004344:	3301      	adds	r3, #1
 8004346:	6003      	str	r3, [r0, #0]
 8004348:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434a:	f100 0308 	add.w	r3, r0, #8
 800434e:	685c      	ldr	r4, [r3, #4]
 8004350:	6825      	ldr	r5, [r4, #0]
 8004352:	42aa      	cmp	r2, r5
 8004354:	d3ef      	bcc.n	8004336 <vListInsert+0xa>
 8004356:	4623      	mov	r3, r4
 8004358:	e7f9      	b.n	800434e <vListInsert+0x22>

0800435a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800435a:	6841      	ldr	r1, [r0, #4]
 800435c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800435e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004360:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004362:	6882      	ldr	r2, [r0, #8]
 8004364:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004366:	6859      	ldr	r1, [r3, #4]
 8004368:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800436a:	bf08      	it	eq
 800436c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800436e:	2200      	movs	r2, #0
 8004370:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	3801      	subs	r0, #1
 8004376:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8004378:	4770      	bx	lr
	...

0800437c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <prvTaskExitError+0x34>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	d00a      	beq.n	800439a <prvTaskExitError+0x1e>
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	b672      	cpsid	i
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	b662      	cpsie	i
 8004398:	e7fe      	b.n	8004398 <prvTaskExitError+0x1c>
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	b672      	cpsid	i
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	b662      	cpsie	i
 80043ae:	e7fe      	b.n	80043ae <prvTaskExitError+0x32>
 80043b0:	20000004 	.word	0x20000004

080043b4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80043b4:	4806      	ldr	r0, [pc, #24]	; (80043d0 <prvPortStartFirstTask+0x1c>)
 80043b6:	6800      	ldr	r0, [r0, #0]
 80043b8:	6800      	ldr	r0, [r0, #0]
 80043ba:	f380 8808 	msr	MSP, r0
 80043be:	b662      	cpsie	i
 80043c0:	b661      	cpsie	f
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	df00      	svc	0
 80043cc:	bf00      	nop
 80043ce:	0000      	.short	0x0000
 80043d0:	e000ed08 	.word	0xe000ed08

080043d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043e4 <vPortEnableVFP+0x10>
 80043d8:	6801      	ldr	r1, [r0, #0]
 80043da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043de:	6001      	str	r1, [r0, #0]
 80043e0:	4770      	bx	lr
 80043e2:	0000      	.short	0x0000
 80043e4:	e000ed88 	.word	0xe000ed88

080043e8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043ec:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043f0:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80043f4:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043f6:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043fa:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043fc:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80043fe:	f06f 0302 	mvn.w	r3, #2
 8004402:	6203      	str	r3, [r0, #32]
}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	0800437d 	.word	0x0800437d
 800440c:	00000000 	.word	0x00000000

08004410 <SVC_Handler>:
	__asm volatile (
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <pxCurrentTCBConst2>)
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	6808      	ldr	r0, [r1, #0]
 8004416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	f380 8809 	msr	PSP, r0
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f380 8811 	msr	BASEPRI, r0
 800442a:	4770      	bx	lr
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst2>:
 8004430:	20003c78 	.word	0x20003c78

08004434 <vPortEnterCritical>:
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	b672      	cpsid	i
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	b662      	cpsie	i
	uxCriticalNesting++;
 8004448:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <vPortEnterCritical+0x44>)
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800444e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004450:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004452:	d10f      	bne.n	8004474 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <vPortEnterCritical+0x48>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f013 0fff 	tst.w	r3, #255	; 0xff
 800445c:	d00a      	beq.n	8004474 <vPortEnterCritical+0x40>
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	b672      	cpsid	i
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	b662      	cpsie	i
 8004472:	e7fe      	b.n	8004472 <vPortEnterCritical+0x3e>
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000004 	.word	0x20000004
 800447c:	e000ed04 	.word	0xe000ed04

08004480 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004480:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <vPortExitCritical+0x28>)
 8004482:	6813      	ldr	r3, [r2, #0]
 8004484:	b953      	cbnz	r3, 800449c <vPortExitCritical+0x1c>
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	b672      	cpsid	i
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	b662      	cpsie	i
 800449a:	e7fe      	b.n	800449a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800449c:	3b01      	subs	r3, #1
 800449e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044a0:	b90b      	cbnz	r3, 80044a6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	4770      	bx	lr
 80044a8:	20000004 	.word	0x20000004
 80044ac:	00000000 	.word	0x00000000

080044b0 <PendSV_Handler>:
	__asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f01e 0f10 	tst.w	lr, #16
 80044c0:	bf08      	it	eq
 80044c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	6010      	str	r0, [r2, #0]
 80044cc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80044d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044d4:	b672      	cpsid	i
 80044d6:	f380 8811 	msr	BASEPRI, r0
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	b662      	cpsie	i
 80044e4:	f000 fef2 	bl	80052cc <vTaskSwitchContext>
 80044e8:	f04f 0000 	mov.w	r0, #0
 80044ec:	f380 8811 	msr	BASEPRI, r0
 80044f0:	bc08      	pop	{r3}
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	6808      	ldr	r0, [r1, #0]
 80044f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	f01e 0f10 	tst.w	lr, #16
 80044fe:	bf08      	it	eq
 8004500:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004504:	f380 8809 	msr	PSP, r0
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop

08004510 <pxCurrentTCBConst>:
 8004510:	20003c78 	.word	0x20003c78

08004514 <xPortSysTickHandler>:
{
 8004514:	b508      	push	{r3, lr}
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	b672      	cpsid	i
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800452a:	f000 fd61 	bl	8004ff0 <xTaskIncrementTick>
 800452e:	b118      	cbz	r0, 8004538 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <xPortSysTickHandler+0x2c>)
 8004536:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004538:	2300      	movs	r3, #0
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	bd08      	pop	{r3, pc}
 8004540:	e000ed04 	.word	0xe000ed04

08004544 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <vPortSetupTimerInterrupt+0x1c>)
 8004546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004550:	4a04      	ldr	r2, [pc, #16]	; (8004564 <vPortSetupTimerInterrupt+0x20>)
 8004552:	3b01      	subs	r3, #1
 8004554:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004556:	2207      	movs	r2, #7
 8004558:	4b03      	ldr	r3, [pc, #12]	; (8004568 <vPortSetupTimerInterrupt+0x24>)
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000000 	.word	0x20000000
 8004564:	e000e014 	.word	0xe000e014
 8004568:	e000e010 	.word	0xe000e010

0800456c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800456c:	4b23      	ldr	r3, [pc, #140]	; (80045fc <xPortStartScheduler+0x90>)
{
 800456e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004570:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004572:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004578:	22ff      	movs	r2, #255	; 0xff
 800457a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800457c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800457e:	4a20      	ldr	r2, [pc, #128]	; (8004600 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004586:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800458a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800458e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004590:	2207      	movs	r2, #7
 8004592:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <xPortStartScheduler+0x98>)
 8004594:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004596:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800459a:	1e54      	subs	r4, r2, #1
 800459c:	0600      	lsls	r0, r0, #24
 800459e:	d423      	bmi.n	80045e8 <xPortStartScheduler+0x7c>
 80045a0:	b101      	cbz	r1, 80045a4 <xPortStartScheduler+0x38>
 80045a2:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045a8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80045ac:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045ae:	9b01      	ldr	r3, [sp, #4]
 80045b0:	4a12      	ldr	r2, [pc, #72]	; (80045fc <xPortStartScheduler+0x90>)
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <xPortStartScheduler+0x9c>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80045be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80045c6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80045c8:	f7ff ffbc 	bl	8004544 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80045cc:	2200      	movs	r2, #0
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <xPortStartScheduler+0xa0>)
 80045d0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80045d2:	f7ff feff 	bl	80043d4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045d6:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <xPortStartScheduler+0xa4>)
 80045d8:	6813      	ldr	r3, [r2, #0]
 80045da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045de:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80045e0:	f7ff fee8 	bl	80043b4 <prvPortStartFirstTask>
	prvTaskExitError();
 80045e4:	f7ff feca 	bl	800437c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80045ec:	2101      	movs	r1, #1
 80045ee:	0052      	lsls	r2, r2, #1
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	f88d 2003 	strb.w	r2, [sp, #3]
 80045f6:	4622      	mov	r2, r4
 80045f8:	e7cd      	b.n	8004596 <xPortStartScheduler+0x2a>
 80045fa:	bf00      	nop
 80045fc:	e000e400 	.word	0xe000e400
 8004600:	20003c70 	.word	0x20003c70
 8004604:	20003c74 	.word	0x20003c74
 8004608:	e000ed20 	.word	0xe000ed20
 800460c:	20000004 	.word	0x20000004
 8004610:	e000ef34 	.word	0xe000ef34

08004614 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004614:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004618:	2b0f      	cmp	r3, #15
 800461a:	d910      	bls.n	800463e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800461c:	4a12      	ldr	r2, [pc, #72]	; (8004668 <vPortValidateInterruptPriority+0x54>)
 800461e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004620:	4a12      	ldr	r2, [pc, #72]	; (800466c <vPortValidateInterruptPriority+0x58>)
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d90a      	bls.n	800463e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	b672      	cpsid	i
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	b662      	cpsie	i
 800463c:	e7fe      	b.n	800463c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <vPortValidateInterruptPriority+0x5c>)
 8004640:	4a0c      	ldr	r2, [pc, #48]	; (8004674 <vPortValidateInterruptPriority+0x60>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800464a:	4293      	cmp	r3, r2
 800464c:	d90a      	bls.n	8004664 <vPortValidateInterruptPriority+0x50>
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	b672      	cpsid	i
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	b662      	cpsie	i
 8004662:	e7fe      	b.n	8004662 <vPortValidateInterruptPriority+0x4e>
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e000e3f0 	.word	0xe000e3f0
 800466c:	20003c70 	.word	0x20003c70
 8004670:	e000ed0c 	.word	0xe000ed0c
 8004674:	20003c74 	.word	0x20003c74

08004678 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800467c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800467e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004680:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004682:	b942      	cbnz	r2, 8004696 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004684:	6805      	ldr	r5, [r0, #0]
 8004686:	b99d      	cbnz	r5, 80046b0 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004688:	6840      	ldr	r0, [r0, #4]
 800468a:	f000 ff65 	bl	8005558 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800468e:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004690:	3601      	adds	r6, #1
 8004692:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8004694:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004696:	b96d      	cbnz	r5, 80046b4 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004698:	6880      	ldr	r0, [r0, #8]
 800469a:	f000 ffe1 	bl	8005660 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800469e:	68a3      	ldr	r3, [r4, #8]
 80046a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80046a2:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046a4:	6862      	ldr	r2, [r4, #4]
 80046a6:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80046a8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046aa:	d301      	bcc.n	80046b0 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80046b0:	2000      	movs	r0, #0
 80046b2:	e7ed      	b.n	8004690 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b4:	68c0      	ldr	r0, [r0, #12]
 80046b6:	f000 ffd3 	bl	8005660 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046bc:	68e2      	ldr	r2, [r4, #12]
 80046be:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046c0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046c2:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046c4:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046c6:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80046c8:	bf3e      	ittt	cc
 80046ca:	6862      	ldrcc	r2, [r4, #4]
 80046cc:	189b      	addcc	r3, r3, r2
 80046ce:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80046d0:	2d02      	cmp	r5, #2
 80046d2:	d1ed      	bne.n	80046b0 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d4:	b10e      	cbz	r6, 80046da <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80046d6:	3e01      	subs	r6, #1
 80046d8:	e7ea      	b.n	80046b0 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80046da:	4630      	mov	r0, r6
 80046dc:	e7d8      	b.n	8004690 <prvCopyDataToQueue+0x18>

080046de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046de:	4603      	mov	r3, r0
 80046e0:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80046e4:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046e6:	b162      	cbz	r2, 8004702 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80046e8:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046ea:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80046ec:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046ee:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80046f0:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 80046f2:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80046f6:	bf24      	itt	cs
 80046f8:	6819      	ldrcs	r1, [r3, #0]
 80046fa:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80046fc:	68d9      	ldr	r1, [r3, #12]
 80046fe:	f000 bfaf 	b.w	8005660 <memcpy>
}
 8004702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004706:	4770      	bx	lr

08004708 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800470c:	f7ff fe92 	bl	8004434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004710:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004714:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004718:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800471a:	2d00      	cmp	r5, #0
 800471c:	dc14      	bgt.n	8004748 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800471e:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004720:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8004724:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004728:	f7ff feaa 	bl	8004480 <vPortExitCritical>
	taskENTER_CRITICAL();
 800472c:	f7ff fe82 	bl	8004434 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004730:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8004734:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004736:	2d00      	cmp	r5, #0
 8004738:	dc12      	bgt.n	8004760 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800473a:	23ff      	movs	r3, #255	; 0xff
 800473c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8004740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004744:	f7ff be9c 	b.w	8004480 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0e7      	beq.n	800471e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800474e:	4630      	mov	r0, r6
 8004750:	f000 fe14 	bl	800537c <xTaskRemoveFromEventList>
 8004754:	b108      	cbz	r0, 800475a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004756:	f000 fea3 	bl	80054a0 <vTaskMissedYield>
 800475a:	3d01      	subs	r5, #1
 800475c:	b26d      	sxtb	r5, r5
 800475e:	e7dc      	b.n	800471a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004760:	6923      	ldr	r3, [r4, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0e9      	beq.n	800473a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004766:	4630      	mov	r0, r6
 8004768:	f000 fe08 	bl	800537c <xTaskRemoveFromEventList>
 800476c:	b108      	cbz	r0, 8004772 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800476e:	f000 fe97 	bl	80054a0 <vTaskMissedYield>
 8004772:	3d01      	subs	r5, #1
 8004774:	b26d      	sxtb	r5, r5
 8004776:	e7de      	b.n	8004736 <prvUnlockQueue+0x2e>

08004778 <xQueueGenericReset>:
{
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800477c:	4604      	mov	r4, r0
 800477e:	b950      	cbnz	r0, 8004796 <xQueueGenericReset+0x1e>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	b672      	cpsid	i
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	b662      	cpsie	i
 8004794:	e7fe      	b.n	8004794 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8004796:	f7ff fe4d 	bl	8004434 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800479a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800479c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047a2:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047a4:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047a6:	1a1b      	subs	r3, r3, r0
 80047a8:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047aa:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047ac:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047ae:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047b0:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047b2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80047b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80047bc:	b995      	cbnz	r5, 80047e4 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047be:	6923      	ldr	r3, [r4, #16]
 80047c0:	b163      	cbz	r3, 80047dc <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c2:	f104 0010 	add.w	r0, r4, #16
 80047c6:	f000 fdd9 	bl	800537c <xTaskRemoveFromEventList>
 80047ca:	b138      	cbz	r0, 80047dc <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <xQueueGenericReset+0x80>)
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80047dc:	f7ff fe50 	bl	8004480 <vPortExitCritical>
}
 80047e0:	2001      	movs	r0, #1
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047e4:	f104 0010 	add.w	r0, r4, #16
 80047e8:	f7ff fd86 	bl	80042f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047f0:	f7ff fd82 	bl	80042f8 <vListInitialise>
 80047f4:	e7f2      	b.n	80047dc <xQueueGenericReset+0x64>
 80047f6:	bf00      	nop
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <xQueueGenericCreate>:
	{
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004800:	4606      	mov	r6, r0
 8004802:	b950      	cbnz	r0, 800481a <xQueueGenericCreate+0x1e>
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	b672      	cpsid	i
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	b662      	cpsie	i
 8004818:	e7fe      	b.n	8004818 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800481a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800481c:	3048      	adds	r0, #72	; 0x48
 800481e:	f7ff fc9d 	bl	800415c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004822:	4604      	mov	r4, r0
 8004824:	b138      	cbz	r0, 8004836 <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004826:	b945      	cbnz	r5, 800483a <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004828:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800482a:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800482c:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800482e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004830:	4620      	mov	r0, r4
 8004832:	f7ff ffa1 	bl	8004778 <xQueueGenericReset>
	}
 8004836:	4620      	mov	r0, r4
 8004838:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800483a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800483e:	6003      	str	r3, [r0, #0]
 8004840:	e7f3      	b.n	800482a <xQueueGenericCreate+0x2e>
	...

08004844 <xQueueGenericSend>:
{
 8004844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004848:	4689      	mov	r9, r1
 800484a:	9201      	str	r2, [sp, #4]
 800484c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800484e:	4604      	mov	r4, r0
 8004850:	b950      	cbnz	r0, 8004868 <xQueueGenericSend+0x24>
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	b672      	cpsid	i
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	b662      	cpsie	i
 8004866:	e7fe      	b.n	8004866 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004868:	2900      	cmp	r1, #0
 800486a:	f040 808c 	bne.w	8004986 <xQueueGenericSend+0x142>
 800486e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8088 	beq.w	8004986 <xQueueGenericSend+0x142>
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	b672      	cpsid	i
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	b662      	cpsie	i
 800488a:	e7fe      	b.n	800488a <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800488c:	9e01      	ldr	r6, [sp, #4]
 800488e:	2e00      	cmp	r6, #0
 8004890:	f000 8084 	beq.w	800499c <xQueueGenericSend+0x158>
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	b672      	cpsid	i
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	b662      	cpsie	i
 80048a8:	e7fe      	b.n	80048a8 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 80048aa:	9d01      	ldr	r5, [sp, #4]
 80048ac:	b91d      	cbnz	r5, 80048b6 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 80048ae:	f7ff fde7 	bl	8004480 <vPortExitCritical>
			return errQUEUE_FULL;
 80048b2:	2000      	movs	r0, #0
 80048b4:	e058      	b.n	8004968 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 80048b6:	b916      	cbnz	r6, 80048be <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 80048b8:	a802      	add	r0, sp, #8
 80048ba:	f000 fda3 	bl	8005404 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80048be:	f7ff fddf 	bl	8004480 <vPortExitCritical>
		vTaskSuspendAll();
 80048c2:	f000 fb8d 	bl	8004fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048c6:	f7ff fdb5 	bl	8004434 <vPortEnterCritical>
 80048ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80048ce:	2bff      	cmp	r3, #255	; 0xff
 80048d0:	d101      	bne.n	80048d6 <xQueueGenericSend+0x92>
 80048d2:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80048d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80048da:	2bff      	cmp	r3, #255	; 0xff
 80048dc:	d101      	bne.n	80048e2 <xQueueGenericSend+0x9e>
 80048de:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80048e2:	f7ff fdcd 	bl	8004480 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048e6:	a901      	add	r1, sp, #4
 80048e8:	a802      	add	r0, sp, #8
 80048ea:	f000 fd9b 	bl	8005424 <xTaskCheckForTimeOut>
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d143      	bne.n	800497a <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048f2:	f7ff fd9f 	bl	8004434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048f6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80048f8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80048fa:	f7ff fdc1 	bl	8004480 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048fe:	42ae      	cmp	r6, r5
 8004900:	d135      	bne.n	800496e <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004902:	9901      	ldr	r1, [sp, #4]
 8004904:	f104 0010 	add.w	r0, r4, #16
 8004908:	f000 fd1c 	bl	8005344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff fefb 	bl	8004708 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004912:	f000 fc01 	bl	8005118 <xTaskResumeAll>
 8004916:	b938      	cbnz	r0, 8004928 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8004918:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800491c:	f8ca 3000 	str.w	r3, [sl]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800492a:	f7ff fd83 	bl	8004434 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800492e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004930:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004932:	429a      	cmp	r2, r3
 8004934:	d301      	bcc.n	800493a <xQueueGenericSend+0xf6>
 8004936:	2f02      	cmp	r7, #2
 8004938:	d1b7      	bne.n	80048aa <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800493a:	463a      	mov	r2, r7
 800493c:	4649      	mov	r1, r9
 800493e:	4620      	mov	r0, r4
 8004940:	f7ff fe9a 	bl	8004678 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004946:	b11b      	cbz	r3, 8004950 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004948:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800494c:	f000 fd16 	bl	800537c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004950:	b138      	cbz	r0, 8004962 <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8004952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004956:	4b19      	ldr	r3, [pc, #100]	; (80049bc <xQueueGenericSend+0x178>)
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004962:	f7ff fd8d 	bl	8004480 <vPortExitCritical>
				return pdPASS;
 8004966:	2001      	movs	r0, #1
}
 8004968:	b004      	add	sp, #16
 800496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800496e:	4620      	mov	r0, r4
 8004970:	f7ff feca 	bl	8004708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004974:	f000 fbd0 	bl	8005118 <xTaskResumeAll>
 8004978:	e7d6      	b.n	8004928 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 800497a:	4620      	mov	r0, r4
 800497c:	f7ff fec4 	bl	8004708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004980:	f000 fbca 	bl	8005118 <xTaskResumeAll>
 8004984:	e795      	b.n	80048b2 <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004986:	2f02      	cmp	r7, #2
 8004988:	d102      	bne.n	8004990 <xQueueGenericSend+0x14c>
 800498a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10a      	bne.n	80049a6 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004990:	f000 fd8c 	bl	80054ac <xTaskGetSchedulerState>
 8004994:	2800      	cmp	r0, #0
 8004996:	f43f af79 	beq.w	800488c <xQueueGenericSend+0x48>
 800499a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800499c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80049a0:	f8df a018 	ldr.w	sl, [pc, #24]	; 80049bc <xQueueGenericSend+0x178>
 80049a4:	e7c1      	b.n	800492a <xQueueGenericSend+0xe6>
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	b672      	cpsid	i
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	b662      	cpsie	i
 80049ba:	e7fe      	b.n	80049ba <xQueueGenericSend+0x176>
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <xQueueCreateMutex>:
	{
 80049c0:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80049c2:	4602      	mov	r2, r0
 80049c4:	2100      	movs	r1, #0
 80049c6:	2001      	movs	r0, #1
 80049c8:	f7ff ff18 	bl	80047fc <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 80049cc:	4604      	mov	r4, r0
 80049ce:	b138      	cbz	r0, 80049e0 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80049d4:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80049d6:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80049d8:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80049da:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80049dc:	f7ff ff32 	bl	8004844 <xQueueGenericSend>
	}
 80049e0:	4620      	mov	r0, r4
 80049e2:	bd10      	pop	{r4, pc}

080049e4 <xQueueGenericSendFromISR>:
{
 80049e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049e8:	4688      	mov	r8, r1
 80049ea:	4691      	mov	r9, r2
 80049ec:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80049ee:	4604      	mov	r4, r0
 80049f0:	b950      	cbnz	r0, 8004a08 <xQueueGenericSendFromISR+0x24>
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	b672      	cpsid	i
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	b662      	cpsie	i
 8004a06:	e7fe      	b.n	8004a06 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a08:	bb19      	cbnz	r1, 8004a52 <xQueueGenericSendFromISR+0x6e>
 8004a0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004a0c:	b30b      	cbz	r3, 8004a52 <xQueueGenericSendFromISR+0x6e>
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	b672      	cpsid	i
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	b662      	cpsie	i
 8004a22:	e7fe      	b.n	8004a22 <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a28:	f000 fca8 	bl	800537c <xTaskRemoveFromEventList>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d036      	beq.n	8004a9e <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8004a30:	f1b9 0f00 	cmp.w	r9, #0
 8004a34:	d033      	beq.n	8004a9e <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a36:	2001      	movs	r0, #1
 8004a38:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004a3c:	f386 8811 	msr	BASEPRI, r6
}
 8004a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a44:	3501      	adds	r5, #1
 8004a46:	b26d      	sxtb	r5, r5
 8004a48:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004a4c:	e027      	b.n	8004a9e <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8004a4e:	2000      	movs	r0, #0
 8004a50:	e7f4      	b.n	8004a3c <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a52:	2f02      	cmp	r7, #2
 8004a54:	d102      	bne.n	8004a5c <xQueueGenericSendFromISR+0x78>
 8004a56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d122      	bne.n	8004aa2 <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a5c:	f7ff fdda 	bl	8004614 <vPortValidateInterruptPriority>
	__asm volatile
 8004a60:	f3ef 8611 	mrs	r6, BASEPRI
 8004a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a68:	b672      	cpsid	i
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d301      	bcc.n	8004a84 <xQueueGenericSendFromISR+0xa0>
 8004a80:	2f02      	cmp	r7, #2
 8004a82:	d1e4      	bne.n	8004a4e <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a84:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a88:	463a      	mov	r2, r7
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a8e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a90:	f7ff fdf2 	bl	8004678 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004a94:	1c6b      	adds	r3, r5, #1
 8004a96:	d1d5      	bne.n	8004a44 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1c2      	bne.n	8004a24 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	e7cc      	b.n	8004a3c <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	b672      	cpsid	i
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	b662      	cpsie	i
 8004ab6:	e7fe      	b.n	8004ab6 <xQueueGenericSendFromISR+0xd2>

08004ab8 <xQueueGenericReceive>:
{
 8004ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	4688      	mov	r8, r1
 8004abe:	9201      	str	r2, [sp, #4]
 8004ac0:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	b950      	cbnz	r0, 8004adc <xQueueGenericReceive+0x24>
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	b672      	cpsid	i
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	b662      	cpsie	i
 8004ada:	e7fe      	b.n	8004ada <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004adc:	2900      	cmp	r1, #0
 8004ade:	f040 80a9 	bne.w	8004c34 <xQueueGenericReceive+0x17c>
 8004ae2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80a5 	beq.w	8004c34 <xQueueGenericReceive+0x17c>
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	b672      	cpsid	i
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	b662      	cpsie	i
 8004afe:	e7fe      	b.n	8004afe <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b00:	9e01      	ldr	r6, [sp, #4]
 8004b02:	2e00      	cmp	r6, #0
 8004b04:	f000 809c 	beq.w	8004c40 <xQueueGenericReceive+0x188>
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	b672      	cpsid	i
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	b662      	cpsie	i
 8004b1c:	e7fe      	b.n	8004b1c <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004b20:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d06d      	beq.n	8004c02 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b2a:	e05f      	b.n	8004bec <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b2c:	9d01      	ldr	r5, [sp, #4]
 8004b2e:	b91d      	cbnz	r5, 8004b38 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 8004b30:	f7ff fca6 	bl	8004480 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004b34:	4628      	mov	r0, r5
 8004b36:	e067      	b.n	8004c08 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 8004b38:	b916      	cbnz	r6, 8004b40 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 8004b3a:	a802      	add	r0, sp, #8
 8004b3c:	f000 fc62 	bl	8005404 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004b40:	f7ff fc9e 	bl	8004480 <vPortExitCritical>
		vTaskSuspendAll();
 8004b44:	f000 fa4c 	bl	8004fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b48:	f7ff fc74 	bl	8004434 <vPortEnterCritical>
 8004b4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004b50:	2bff      	cmp	r3, #255	; 0xff
 8004b52:	d101      	bne.n	8004b58 <xQueueGenericReceive+0xa0>
 8004b54:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004b58:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004b5c:	2bff      	cmp	r3, #255	; 0xff
 8004b5e:	d101      	bne.n	8004b64 <xQueueGenericReceive+0xac>
 8004b60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b64:	f7ff fc8c 	bl	8004480 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b68:	a901      	add	r1, sp, #4
 8004b6a:	a802      	add	r0, sp, #8
 8004b6c:	f000 fc5a 	bl	8005424 <xTaskCheckForTimeOut>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d152      	bne.n	8004c1a <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 8004b74:	f7ff fc5e 	bl	8004434 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b78:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004b7a:	f7ff fc81 	bl	8004480 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b7e:	2d00      	cmp	r5, #0
 8004b80:	d145      	bne.n	8004c0e <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	b933      	cbnz	r3, 8004b94 <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 8004b86:	f7ff fc55 	bl	8004434 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004b8a:	6860      	ldr	r0, [r4, #4]
 8004b8c:	f000 fc9e 	bl	80054cc <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8004b90:	f7ff fc76 	bl	8004480 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b94:	9901      	ldr	r1, [sp, #4]
 8004b96:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b9a:	f000 fbd3 	bl	8005344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f7ff fdb2 	bl	8004708 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ba4:	f000 fab8 	bl	8005118 <xTaskResumeAll>
 8004ba8:	b938      	cbnz	r0, 8004bba <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 8004baa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004bae:	f8ca 3000 	str.w	r3, [sl]
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004bbc:	f7ff fc3a 	bl	8004434 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bc2:	2d00      	cmp	r5, #0
 8004bc4:	d0b2      	beq.n	8004b2c <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004bca:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bcc:	f7ff fd87 	bl	80046de <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8004bd0:	f1b9 0f00 	cmp.w	r9, #0
 8004bd4:	d1a3      	bne.n	8004b1e <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004bd6:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bd8:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004bda:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bdc:	b913      	cbnz	r3, 8004be4 <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004bde:	f000 fd0f 	bl	8005600 <pvTaskIncrementMutexHeldCount>
 8004be2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be4:	6923      	ldr	r3, [r4, #16]
 8004be6:	b163      	cbz	r3, 8004c02 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004be8:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bec:	f000 fbc6 	bl	800537c <xTaskRemoveFromEventList>
 8004bf0:	b138      	cbz	r0, 8004c02 <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <xQueueGenericReceive+0x190>)
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004c02:	f7ff fc3d 	bl	8004480 <vPortExitCritical>
				return pdPASS;
 8004c06:	2001      	movs	r0, #1
}
 8004c08:	b004      	add	sp, #16
 8004c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f7ff fd7a 	bl	8004708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c14:	f000 fa80 	bl	8005118 <xTaskResumeAll>
 8004c18:	e7cf      	b.n	8004bba <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f7ff fd74 	bl	8004708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c20:	f000 fa7a 	bl	8005118 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004c24:	f7ff fc06 	bl	8004434 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c28:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004c2a:	f7ff fc29 	bl	8004480 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	d1c3      	bne.n	8004bba <xQueueGenericReceive+0x102>
 8004c32:	e77f      	b.n	8004b34 <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c34:	f000 fc3a 	bl	80054ac <xTaskGetSchedulerState>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f43f af61 	beq.w	8004b00 <xQueueGenericReceive+0x48>
 8004c3e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004c40:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8004c42:	f8df a004 	ldr.w	sl, [pc, #4]	; 8004c48 <xQueueGenericReceive+0x190>
 8004c46:	e7b9      	b.n	8004bbc <xQueueGenericReceive+0x104>
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <xQueueReceiveFromISR>:
{
 8004c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c50:	4689      	mov	r9, r1
 8004c52:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8004c54:	4605      	mov	r5, r0
 8004c56:	b950      	cbnz	r0, 8004c6e <xQueueReceiveFromISR+0x22>
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	b672      	cpsid	i
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	b662      	cpsie	i
 8004c6c:	e7fe      	b.n	8004c6c <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c6e:	bb81      	cbnz	r1, 8004cd2 <xQueueReceiveFromISR+0x86>
 8004c70:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c72:	b373      	cbz	r3, 8004cd2 <xQueueReceiveFromISR+0x86>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	b672      	cpsid	i
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	b662      	cpsie	i
 8004c88:	e7fe      	b.n	8004c88 <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c8a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c8e:	4649      	mov	r1, r9
 8004c90:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004c92:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c94:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c96:	f7ff fd22 	bl	80046de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004c9a:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004c9c:	1c73      	adds	r3, r6, #1
 8004c9e:	d113      	bne.n	8004cc8 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ca0:	692b      	ldr	r3, [r5, #16]
 8004ca2:	b90b      	cbnz	r3, 8004ca8 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	e00b      	b.n	8004cc0 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca8:	f105 0010 	add.w	r0, r5, #16
 8004cac:	f000 fb66 	bl	800537c <xTaskRemoveFromEventList>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d0f7      	beq.n	8004ca4 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 8004cb4:	f1b8 0f00 	cmp.w	r8, #0
 8004cb8:	d0f4      	beq.n	8004ca4 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004cba:	2001      	movs	r0, #1
 8004cbc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8004cc0:	f387 8811 	msr	BASEPRI, r7
}
 8004cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004cc8:	3601      	adds	r6, #1
 8004cca:	b276      	sxtb	r6, r6
 8004ccc:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8004cd0:	e7e8      	b.n	8004ca4 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cd2:	f7ff fc9f 	bl	8004614 <vPortValidateInterruptPriority>
	__asm volatile
 8004cd6:	f3ef 8711 	mrs	r7, BASEPRI
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	b672      	cpsid	i
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cee:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cf0:	2c00      	cmp	r4, #0
 8004cf2:	d1ca      	bne.n	8004c8a <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	e7e3      	b.n	8004cc0 <xQueueReceiveFromISR+0x74>

08004cf8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf8:	4a06      	ldr	r2, [pc, #24]	; (8004d14 <prvResetNextTaskUnblockTime+0x1c>)
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <prvResetNextTaskUnblockTime+0x20>)
 8004d00:	b919      	cbnz	r1, 8004d0a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d02:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d0e:	68d2      	ldr	r2, [r2, #12]
 8004d10:	6852      	ldr	r2, [r2, #4]
 8004d12:	e7f8      	b.n	8004d06 <prvResetNextTaskUnblockTime+0xe>
 8004d14:	20003c7c 	.word	0x20003c7c
 8004d18:	20003d54 	.word	0x20003d54

08004d1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <prvAddCurrentTaskToDelayedList+0x70>)
{
 8004d20:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d22:	4e1b      	ldr	r6, [pc, #108]	; (8004d90 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8004d24:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8004d26:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d28:	6830      	ldr	r0, [r6, #0]
 8004d2a:	3004      	adds	r0, #4
 8004d2c:	f7ff fb15 	bl	800435a <uxListRemove>
 8004d30:	4633      	mov	r3, r6
 8004d32:	b940      	cbnz	r0, 8004d46 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004d34:	6831      	ldr	r1, [r6, #0]
 8004d36:	2001      	movs	r0, #1
 8004d38:	4e16      	ldr	r6, [pc, #88]	; (8004d94 <prvAddCurrentTaskToDelayedList+0x78>)
 8004d3a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004d3c:	6832      	ldr	r2, [r6, #0]
 8004d3e:	4088      	lsls	r0, r1
 8004d40:	ea22 0200 	bic.w	r2, r2, r0
 8004d44:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d46:	1c62      	adds	r2, r4, #1
 8004d48:	d107      	bne.n	8004d5a <prvAddCurrentTaskToDelayedList+0x3e>
 8004d4a:	b137      	cbz	r7, 8004d5a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d4c:	6819      	ldr	r1, [r3, #0]
 8004d4e:	4812      	ldr	r0, [pc, #72]	; (8004d98 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004d50:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d56:	f7ff badd 	b.w	8004314 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d5a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d5c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8004d5e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d60:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8004d62:	d907      	bls.n	8004d74 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d64:	4a0d      	ldr	r2, [pc, #52]	; (8004d9c <prvAddCurrentTaskToDelayedList+0x80>)
 8004d66:	6810      	ldr	r0, [r2, #0]
 8004d68:	6819      	ldr	r1, [r3, #0]
}
 8004d6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d6e:	3104      	adds	r1, #4
 8004d70:	f7ff badc 	b.w	800432c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d74:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <prvAddCurrentTaskToDelayedList+0x84>)
 8004d76:	6810      	ldr	r0, [r2, #0]
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	3104      	adds	r1, #4
 8004d7c:	f7ff fad6 	bl	800432c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <prvAddCurrentTaskToDelayedList+0x88>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4294      	cmp	r4, r2
 8004d86:	d200      	bcs.n	8004d8a <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8004d88:	601c      	str	r4, [r3, #0]
 8004d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8c:	20003d9c 	.word	0x20003d9c
 8004d90:	20003c78 	.word	0x20003c78
 8004d94:	20003d24 	.word	0x20003d24
 8004d98:	20003d74 	.word	0x20003d74
 8004d9c:	20003c80 	.word	0x20003c80
 8004da0:	20003c7c 	.word	0x20003c7c
 8004da4:	20003d54 	.word	0x20003d54

08004da8 <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	b672      	cpsid	i
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	b662      	cpsie	i
 8004dbc:	e7fe      	b.n	8004dbc <prvTaskIsTaskSuspended.part.0+0x14>
	...

08004dc0 <xTaskCreate>:
	{
 8004dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8004dc8:	4680      	mov	r8, r0
 8004dca:	460f      	mov	r7, r1
 8004dcc:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dce:	4650      	mov	r0, sl
	{
 8004dd0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd2:	f7ff f9c3 	bl	800415c <pvPortMalloc>
			if( pxStack != NULL )
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f000 8096 	beq.w	8004f0a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004dde:	2054      	movs	r0, #84	; 0x54
 8004de0:	f7ff f9bc 	bl	800415c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004de4:	4604      	mov	r4, r0
 8004de6:	2800      	cmp	r0, #0
 8004de8:	f000 808c 	beq.w	8004f04 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004dec:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8004df0:	6305      	str	r5, [r0, #48]	; 0x30
 8004df2:	1e7b      	subs	r3, r7, #1
 8004df4:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004df8:	4455      	add	r5, sl
 8004dfa:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004dfc:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e00:	7859      	ldrb	r1, [r3, #1]
 8004e02:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004e06:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004e0a:	b109      	cbz	r1, 8004e10 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e0c:	42bb      	cmp	r3, r7
 8004e0e:	d1f7      	bne.n	8004e00 <xTaskCreate+0x40>
 8004e10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e12:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e16:	1d27      	adds	r7, r4, #4
 8004e18:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e1a:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e1e:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8004e20:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8004e24:	bf28      	it	cs
 8004e26:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004e28:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004e2a:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e2c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e30:	f7ff fa6d 	bl	800430e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e34:	f104 0018 	add.w	r0, r4, #24
 8004e38:	f7ff fa69 	bl	800430e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004e3c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e40:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e42:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e44:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e46:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e48:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e4a:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e4c:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e50:	f7ff faca 	bl	80043e8 <pxPortInitialiseStack>
 8004e54:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004e56:	b106      	cbz	r6, 8004e5a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e58:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8004e5a:	f7ff faeb 	bl	8004434 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004e5e:	4b32      	ldr	r3, [pc, #200]	; (8004f28 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8004e60:	4e32      	ldr	r6, [pc, #200]	; (8004f2c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004f58 <xTaskCreate+0x198>
 8004e68:	3201      	adds	r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004e6c:	6835      	ldr	r5, [r6, #0]
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	d14e      	bne.n	8004f10 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8004e72:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d11d      	bne.n	8004eb6 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e7a:	eb08 0005 	add.w	r0, r8, r5
 8004e7e:	3514      	adds	r5, #20
 8004e80:	f7ff fa3a 	bl	80042f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e84:	2d8c      	cmp	r5, #140	; 0x8c
 8004e86:	d1f8      	bne.n	8004e7a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8004e88:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004f5c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8004e8c:	4d28      	ldr	r5, [pc, #160]	; (8004f30 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8004e8e:	4648      	mov	r0, r9
 8004e90:	f7ff fa32 	bl	80042f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e94:	4628      	mov	r0, r5
 8004e96:	f7ff fa2f 	bl	80042f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e9a:	4826      	ldr	r0, [pc, #152]	; (8004f34 <xTaskCreate+0x174>)
 8004e9c:	f7ff fa2c 	bl	80042f8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004ea0:	4825      	ldr	r0, [pc, #148]	; (8004f38 <xTaskCreate+0x178>)
 8004ea2:	f7ff fa29 	bl	80042f8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004ea6:	4825      	ldr	r0, [pc, #148]	; (8004f3c <xTaskCreate+0x17c>)
 8004ea8:	f7ff fa26 	bl	80042f8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eac:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <xTaskCreate+0x180>)
 8004eae:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004eb2:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <xTaskCreate+0x184>)
 8004eb4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8004eb6:	4a24      	ldr	r2, [pc, #144]	; (8004f48 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8004eb8:	2501      	movs	r5, #1
 8004eba:	4924      	ldr	r1, [pc, #144]	; (8004f4c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8004ebc:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004ebe:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004ec4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ec6:	fa05 f302 	lsl.w	r3, r5, r2
 8004eca:	4303      	orrs	r3, r0
 8004ecc:	2014      	movs	r0, #20
 8004ece:	600b      	str	r3, [r1, #0]
 8004ed0:	4639      	mov	r1, r7
 8004ed2:	fb00 8002 	mla	r0, r0, r2, r8
 8004ed6:	f7ff fa1d 	bl	8004314 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004eda:	f7ff fad1 	bl	8004480 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004ede:	4b1c      	ldr	r3, [pc, #112]	; (8004f50 <xTaskCreate+0x190>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	b163      	cbz	r3, 8004efe <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ee4:	6833      	ldr	r3, [r6, #0]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d207      	bcs.n	8004efe <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <xTaskCreate+0x194>)
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	f3bf 8f6f 	isb	sy
	}
 8004efe:	4628      	mov	r0, r5
 8004f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8004f04:	4628      	mov	r0, r5
 8004f06:	f7ff f9bb 	bl	8004280 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f0a:	f04f 35ff 	mov.w	r5, #4294967295
 8004f0e:	e7f6      	b.n	8004efe <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <xTaskCreate+0x190>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1ce      	bne.n	8004eb6 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f18:	6833      	ldr	r3, [r6, #0]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d8c9      	bhi.n	8004eb6 <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 8004f22:	6034      	str	r4, [r6, #0]
 8004f24:	e7c7      	b.n	8004eb6 <xTaskCreate+0xf6>
 8004f26:	bf00      	nop
 8004f28:	20003d10 	.word	0x20003d10
 8004f2c:	20003c78 	.word	0x20003c78
 8004f30:	20003d3c 	.word	0x20003d3c
 8004f34:	20003d5c 	.word	0x20003d5c
 8004f38:	20003d88 	.word	0x20003d88
 8004f3c:	20003d74 	.word	0x20003d74
 8004f40:	20003c7c 	.word	0x20003c7c
 8004f44:	20003c80 	.word	0x20003c80
 8004f48:	20003d20 	.word	0x20003d20
 8004f4c:	20003d24 	.word	0x20003d24
 8004f50:	20003d70 	.word	0x20003d70
 8004f54:	e000ed04 	.word	0xe000ed04
 8004f58:	20003c84 	.word	0x20003c84
 8004f5c:	20003d28 	.word	0x20003d28

08004f60 <vTaskStartScheduler>:
{
 8004f60:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8004f62:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <vTaskStartScheduler+0x68>)
 8004f64:	2400      	movs	r4, #0
 8004f66:	2280      	movs	r2, #128	; 0x80
 8004f68:	4918      	ldr	r1, [pc, #96]	; (8004fcc <vTaskStartScheduler+0x6c>)
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	9400      	str	r4, [sp, #0]
 8004f70:	4817      	ldr	r0, [pc, #92]	; (8004fd0 <vTaskStartScheduler+0x70>)
 8004f72:	f7ff ff25 	bl	8004dc0 <xTaskCreate>
	if( xReturn == pdPASS )
 8004f76:	2801      	cmp	r0, #1
 8004f78:	d116      	bne.n	8004fa8 <vTaskStartScheduler+0x48>
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	b672      	cpsid	i
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f92:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <vTaskStartScheduler+0x74>)
 8004f94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f96:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <vTaskStartScheduler+0x78>)
 8004f98:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <vTaskStartScheduler+0x7c>)
 8004f9c:	601c      	str	r4, [r3, #0]
}
 8004f9e:	b002      	add	sp, #8
 8004fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004fa4:	f7ff bae2 	b.w	800456c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d10a      	bne.n	8004fc2 <vTaskStartScheduler+0x62>
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	b672      	cpsid	i
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	b662      	cpsie	i
 8004fc0:	e7fe      	b.n	8004fc0 <vTaskStartScheduler+0x60>
}
 8004fc2:	b002      	add	sp, #8
 8004fc4:	bd10      	pop	{r4, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20003d50 	.word	0x20003d50
 8004fcc:	0800587a 	.word	0x0800587a
 8004fd0:	08005259 	.word	0x08005259
 8004fd4:	20003d54 	.word	0x20003d54
 8004fd8:	20003d70 	.word	0x20003d70
 8004fdc:	20003d9c 	.word	0x20003d9c

08004fe0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004fe0:	4a02      	ldr	r2, [pc, #8]	; (8004fec <vTaskSuspendAll+0xc>)
 8004fe2:	6813      	ldr	r3, [r2, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20003d1c 	.word	0x20003d1c

08004ff0 <xTaskIncrementTick>:
{
 8004ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff4:	4b3d      	ldr	r3, [pc, #244]	; (80050ec <xTaskIncrementTick+0xfc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d155      	bne.n	80050a8 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8004ffc:	4b3c      	ldr	r3, [pc, #240]	; (80050f0 <xTaskIncrementTick+0x100>)
 8004ffe:	681c      	ldr	r4, [r3, #0]
 8005000:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8005002:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8005004:	b9cc      	cbnz	r4, 800503a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8005006:	4b3b      	ldr	r3, [pc, #236]	; (80050f4 <xTaskIncrementTick+0x104>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	b152      	cbz	r2, 8005024 <xTaskIncrementTick+0x34>
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	b672      	cpsid	i
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	b662      	cpsie	i
 8005022:	e7fe      	b.n	8005022 <xTaskIncrementTick+0x32>
 8005024:	4a34      	ldr	r2, [pc, #208]	; (80050f8 <xTaskIncrementTick+0x108>)
 8005026:	6819      	ldr	r1, [r3, #0]
 8005028:	6810      	ldr	r0, [r2, #0]
 800502a:	6018      	str	r0, [r3, #0]
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	4a33      	ldr	r2, [pc, #204]	; (80050fc <xTaskIncrementTick+0x10c>)
 8005030:	6813      	ldr	r3, [r2, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	f7ff fe5f 	bl	8004cf8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800503a:	4d31      	ldr	r5, [pc, #196]	; (8005100 <xTaskIncrementTick+0x110>)
 800503c:	f04f 0b00 	mov.w	fp, #0
 8005040:	4f30      	ldr	r7, [pc, #192]	; (8005104 <xTaskIncrementTick+0x114>)
 8005042:	682b      	ldr	r3, [r5, #0]
 8005044:	429c      	cmp	r4, r3
 8005046:	d33e      	bcc.n	80050c6 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005048:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80050f4 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 800504c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005114 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005050:	f8d8 2000 	ldr.w	r2, [r8]
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	bb72      	cbnz	r2, 80050b6 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005058:	f04f 32ff 	mov.w	r2, #4294967295
 800505c:	602a      	str	r2, [r5, #0]
					break;
 800505e:	e032      	b.n	80050c6 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005060:	f106 0a04 	add.w	sl, r6, #4
 8005064:	4650      	mov	r0, sl
 8005066:	f7ff f978 	bl	800435a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800506a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800506c:	b119      	cbz	r1, 8005076 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800506e:	f106 0018 	add.w	r0, r6, #24
 8005072:	f7ff f972 	bl	800435a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005076:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8005078:	2201      	movs	r2, #1
 800507a:	f8d9 3000 	ldr.w	r3, [r9]
 800507e:	f04f 0e14 	mov.w	lr, #20
 8005082:	fa02 f100 	lsl.w	r1, r2, r0
 8005086:	4319      	orrs	r1, r3
 8005088:	4b1f      	ldr	r3, [pc, #124]	; (8005108 <xTaskIncrementTick+0x118>)
 800508a:	f8c9 1000 	str.w	r1, [r9]
 800508e:	4651      	mov	r1, sl
 8005090:	fb0e 3000 	mla	r0, lr, r0, r3
 8005094:	f7ff f93e 	bl	8004314 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005098:	6838      	ldr	r0, [r7, #0]
 800509a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800509c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800509e:	4291      	cmp	r1, r2
 80050a0:	bf28      	it	cs
 80050a2:	f04f 0b01 	movcs.w	fp, #1
 80050a6:	e7d3      	b.n	8005050 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 80050a8:	4a18      	ldr	r2, [pc, #96]	; (800510c <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80050aa:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80050ae:	6813      	ldr	r3, [r2, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	e011      	b.n	80050da <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050b6:	f8d8 2000 	ldr.w	r2, [r8]
 80050ba:	68d2      	ldr	r2, [r2, #12]
 80050bc:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050be:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80050c0:	428c      	cmp	r4, r1
 80050c2:	d2cd      	bcs.n	8005060 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 80050c4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <xTaskIncrementTick+0x118>)
 80050ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80050cc:	2214      	movs	r2, #20
 80050ce:	434a      	muls	r2, r1
 80050d0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80050d2:	2a02      	cmp	r2, #2
 80050d4:	bf28      	it	cs
 80050d6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80050da:	4a0d      	ldr	r2, [pc, #52]	; (8005110 <xTaskIncrementTick+0x120>)
 80050dc:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80050de:	2a00      	cmp	r2, #0
 80050e0:	bf18      	it	ne
 80050e2:	f04f 0b01 	movne.w	fp, #1
}
 80050e6:	4658      	mov	r0, fp
 80050e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ec:	20003d1c 	.word	0x20003d1c
 80050f0:	20003d9c 	.word	0x20003d9c
 80050f4:	20003c7c 	.word	0x20003c7c
 80050f8:	20003c80 	.word	0x20003c80
 80050fc:	20003d58 	.word	0x20003d58
 8005100:	20003d54 	.word	0x20003d54
 8005104:	20003c78 	.word	0x20003c78
 8005108:	20003c84 	.word	0x20003c84
 800510c:	20003d18 	.word	0x20003d18
 8005110:	20003da0 	.word	0x20003da0
 8005114:	20003d24 	.word	0x20003d24

08005118 <xTaskResumeAll>:
{
 8005118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800511c:	4c32      	ldr	r4, [pc, #200]	; (80051e8 <xTaskResumeAll+0xd0>)
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	b953      	cbnz	r3, 8005138 <xTaskResumeAll+0x20>
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	b672      	cpsid	i
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	b662      	cpsie	i
 8005136:	e7fe      	b.n	8005136 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8005138:	f7ff f97c 	bl	8004434 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	3b01      	subs	r3, #1
 8005140:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005142:	6824      	ldr	r4, [r4, #0]
 8005144:	b12c      	cbz	r4, 8005152 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8005146:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005148:	f7ff f99a 	bl	8004480 <vPortExitCritical>
}
 800514c:	4620      	mov	r0, r4
 800514e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005152:	4b26      	ldr	r3, [pc, #152]	; (80051ec <xTaskResumeAll+0xd4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f5      	beq.n	8005146 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800515a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005204 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 800515e:	4f24      	ldr	r7, [pc, #144]	; (80051f0 <xTaskResumeAll+0xd8>)
 8005160:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8005208 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005164:	f8d9 3000 	ldr.w	r3, [r9]
 8005168:	b9e3      	cbnz	r3, 80051a4 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800516a:	b10c      	cbz	r4, 8005170 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 800516c:	f7ff fdc4 	bl	8004cf8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005170:	4d20      	ldr	r5, [pc, #128]	; (80051f4 <xTaskResumeAll+0xdc>)
 8005172:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005174:	b144      	cbz	r4, 8005188 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8005176:	4e20      	ldr	r6, [pc, #128]	; (80051f8 <xTaskResumeAll+0xe0>)
 8005178:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800517a:	f7ff ff39 	bl	8004ff0 <xTaskIncrementTick>
 800517e:	b100      	cbz	r0, 8005182 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8005180:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005182:	3c01      	subs	r4, #1
 8005184:	d1f9      	bne.n	800517a <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8005186:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8005188:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <xTaskResumeAll+0xe0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0da      	beq.n	8005146 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8005190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <xTaskResumeAll+0xe4>)
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80051a0:	2401      	movs	r4, #1
 80051a2:	e7d1      	b.n	8005148 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80051a4:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80051a8:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80051aa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051ac:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051ae:	f104 0018 	add.w	r0, r4, #24
 80051b2:	f7ff f8d2 	bl	800435a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051b6:	4630      	mov	r0, r6
 80051b8:	f7ff f8cf 	bl	800435a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051be:	6839      	ldr	r1, [r7, #0]
 80051c0:	2014      	movs	r0, #20
 80051c2:	fa05 f302 	lsl.w	r3, r5, r2
 80051c6:	fb00 8002 	mla	r0, r0, r2, r8
 80051ca:	430b      	orrs	r3, r1
 80051cc:	4631      	mov	r1, r6
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	f7ff f8a0 	bl	8004314 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051d4:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <xTaskResumeAll+0xe8>)
 80051d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	429a      	cmp	r2, r3
 80051de:	d3c1      	bcc.n	8005164 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <xTaskResumeAll+0xe0>)
 80051e2:	601d      	str	r5, [r3, #0]
 80051e4:	e7be      	b.n	8005164 <xTaskResumeAll+0x4c>
 80051e6:	bf00      	nop
 80051e8:	20003d1c 	.word	0x20003d1c
 80051ec:	20003d10 	.word	0x20003d10
 80051f0:	20003d24 	.word	0x20003d24
 80051f4:	20003d18 	.word	0x20003d18
 80051f8:	20003da0 	.word	0x20003da0
 80051fc:	e000ed04 	.word	0xe000ed04
 8005200:	20003c78 	.word	0x20003c78
 8005204:	20003d5c 	.word	0x20003d5c
 8005208:	20003c84 	.word	0x20003c84

0800520c <vTaskDelay>:
	{
 800520c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800520e:	b940      	cbnz	r0, 8005222 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8005210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005214:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <vTaskDelay+0x44>)
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <vTaskDelay+0x48>)
 8005224:	6819      	ldr	r1, [r3, #0]
 8005226:	b151      	cbz	r1, 800523e <vTaskDelay+0x32>
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	b672      	cpsid	i
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	b662      	cpsie	i
 800523c:	e7fe      	b.n	800523c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800523e:	f7ff fecf 	bl	8004fe0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005242:	f7ff fd6b 	bl	8004d1c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005246:	f7ff ff67 	bl	8005118 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800524a:	2800      	cmp	r0, #0
 800524c:	d0e0      	beq.n	8005210 <vTaskDelay+0x4>
 800524e:	bd08      	pop	{r3, pc}
 8005250:	e000ed04 	.word	0xe000ed04
 8005254:	20003d1c 	.word	0x20003d1c

08005258 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005258:	4e17      	ldr	r6, [pc, #92]	; (80052b8 <prvIdleTask+0x60>)
{
 800525a:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800525c:	4c17      	ldr	r4, [pc, #92]	; (80052bc <prvIdleTask+0x64>)
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	b963      	cbnz	r3, 800527c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005262:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <prvIdleTask+0x68>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d9f8      	bls.n	800525c <prvIdleTask+0x4>
				taskYIELD();
 800526a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526e:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <prvIdleTask+0x6c>)
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	e7ef      	b.n	800525c <prvIdleTask+0x4>
			vTaskSuspendAll();
 800527c:	f7ff feb0 	bl	8004fe0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005280:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8005282:	f7ff ff49 	bl	8005118 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8005286:	2d00      	cmp	r5, #0
 8005288:	d0e9      	beq.n	800525e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800528a:	f7ff f8d3 	bl	8004434 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800528e:	68f3      	ldr	r3, [r6, #12]
 8005290:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005292:	1d28      	adds	r0, r5, #4
 8005294:	f7ff f861 	bl	800435a <uxListRemove>
					--uxCurrentNumberOfTasks;
 8005298:	4a0b      	ldr	r2, [pc, #44]	; (80052c8 <prvIdleTask+0x70>)
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	3b01      	subs	r3, #1
 800529e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80052a6:	f7ff f8eb 	bl	8004480 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80052aa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80052ac:	f7fe ffe8 	bl	8004280 <vPortFree>
			vPortFree( pxTCB );
 80052b0:	4628      	mov	r0, r5
 80052b2:	f7fe ffe5 	bl	8004280 <vPortFree>
 80052b6:	e7d2      	b.n	800525e <prvIdleTask+0x6>
 80052b8:	20003d88 	.word	0x20003d88
 80052bc:	20003d14 	.word	0x20003d14
 80052c0:	20003c84 	.word	0x20003c84
 80052c4:	e000ed04 	.word	0xe000ed04
 80052c8:	20003d10 	.word	0x20003d10

080052cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052cc:	4b18      	ldr	r3, [pc, #96]	; (8005330 <vTaskSwitchContext+0x64>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b18      	ldr	r3, [pc, #96]	; (8005334 <vTaskSwitchContext+0x68>)
{
 80052d2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052d4:	b112      	cbz	r2, 80052dc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80052d6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80052dc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80052de:	4b16      	ldr	r3, [pc, #88]	; (8005338 <vTaskSwitchContext+0x6c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80052e2:	fab3 f383 	clz	r3, r3
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2214      	movs	r2, #20
 80052ea:	4914      	ldr	r1, [pc, #80]	; (800533c <vTaskSwitchContext+0x70>)
 80052ec:	f1c3 031f 	rsb	r3, r3, #31
 80052f0:	435a      	muls	r2, r3
 80052f2:	588c      	ldr	r4, [r1, r2]
 80052f4:	1888      	adds	r0, r1, r2
 80052f6:	b954      	cbnz	r4, 800530e <vTaskSwitchContext+0x42>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	b672      	cpsid	i
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	b662      	cpsie	i
 800530c:	e7fe      	b.n	800530c <vTaskSwitchContext+0x40>
 800530e:	6844      	ldr	r4, [r0, #4]
 8005310:	3208      	adds	r2, #8
 8005312:	6864      	ldr	r4, [r4, #4]
 8005314:	440a      	add	r2, r1
 8005316:	4294      	cmp	r4, r2
 8005318:	6044      	str	r4, [r0, #4]
 800531a:	bf04      	itt	eq
 800531c:	6862      	ldreq	r2, [r4, #4]
 800531e:	6042      	streq	r2, [r0, #4]
 8005320:	2214      	movs	r2, #20
 8005322:	fb02 1303 	mla	r3, r2, r3, r1
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	4b05      	ldr	r3, [pc, #20]	; (8005340 <vTaskSwitchContext+0x74>)
 800532c:	e7d4      	b.n	80052d8 <vTaskSwitchContext+0xc>
 800532e:	bf00      	nop
 8005330:	20003d1c 	.word	0x20003d1c
 8005334:	20003da0 	.word	0x20003da0
 8005338:	20003d24 	.word	0x20003d24
 800533c:	20003c84 	.word	0x20003c84
 8005340:	20003c78 	.word	0x20003c78

08005344 <vTaskPlaceOnEventList>:
{
 8005344:	b510      	push	{r4, lr}
 8005346:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005348:	b950      	cbnz	r0, 8005360 <vTaskPlaceOnEventList+0x1c>
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	b672      	cpsid	i
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	b662      	cpsie	i
 800535e:	e7fe      	b.n	800535e <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <vTaskPlaceOnEventList+0x34>)
 8005362:	6819      	ldr	r1, [r3, #0]
 8005364:	3118      	adds	r1, #24
 8005366:	f7fe ffe1 	bl	800432c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800536a:	4620      	mov	r0, r4
 800536c:	2101      	movs	r1, #1
}
 800536e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005372:	f7ff bcd3 	b.w	8004d1c <prvAddCurrentTaskToDelayedList>
 8005376:	bf00      	nop
 8005378:	20003c78 	.word	0x20003c78

0800537c <xTaskRemoveFromEventList>:
{
 800537c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800537e:	68c3      	ldr	r3, [r0, #12]
 8005380:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005382:	b954      	cbnz	r4, 800539a <xTaskRemoveFromEventList+0x1e>
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	b672      	cpsid	i
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	b662      	cpsie	i
 8005398:	e7fe      	b.n	8005398 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800539a:	f104 0518 	add.w	r5, r4, #24
 800539e:	4628      	mov	r0, r5
 80053a0:	f7fe ffdb 	bl	800435a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <xTaskRemoveFromEventList+0x70>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	b9db      	cbnz	r3, 80053e2 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053aa:	1d25      	adds	r5, r4, #4
 80053ac:	4628      	mov	r0, r5
 80053ae:	f7fe ffd4 	bl	800435a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053b2:	490f      	ldr	r1, [pc, #60]	; (80053f0 <xTaskRemoveFromEventList+0x74>)
 80053b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053b6:	2301      	movs	r3, #1
 80053b8:	6808      	ldr	r0, [r1, #0]
 80053ba:	4093      	lsls	r3, r2
 80053bc:	4303      	orrs	r3, r0
 80053be:	2014      	movs	r0, #20
 80053c0:	600b      	str	r3, [r1, #0]
 80053c2:	4629      	mov	r1, r5
 80053c4:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <xTaskRemoveFromEventList+0x78>)
 80053c6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053ca:	f7fe ffa3 	bl	8004314 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <xTaskRemoveFromEventList+0x7c>)
 80053d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d906      	bls.n	80053e8 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 80053da:	2001      	movs	r0, #1
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <xTaskRemoveFromEventList+0x80>)
 80053de:	6018      	str	r0, [r3, #0]
 80053e0:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053e2:	4629      	mov	r1, r5
 80053e4:	4806      	ldr	r0, [pc, #24]	; (8005400 <xTaskRemoveFromEventList+0x84>)
 80053e6:	e7f0      	b.n	80053ca <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 80053e8:	2000      	movs	r0, #0
}
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20003d1c 	.word	0x20003d1c
 80053f0:	20003d24 	.word	0x20003d24
 80053f4:	20003c84 	.word	0x20003c84
 80053f8:	20003c78 	.word	0x20003c78
 80053fc:	20003da0 	.word	0x20003da0
 8005400:	20003d5c 	.word	0x20003d5c

08005404 <vTaskSetTimeOutState>:
{
 8005404:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8005406:	b908      	cbnz	r0, 800540c <vTaskSetTimeOutState+0x8>
 8005408:	f7ff fcce 	bl	8004da8 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800540c:	4b03      	ldr	r3, [pc, #12]	; (800541c <vTaskSetTimeOutState+0x18>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005412:	4b03      	ldr	r3, [pc, #12]	; (8005420 <vTaskSetTimeOutState+0x1c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6043      	str	r3, [r0, #4]
 8005418:	bd08      	pop	{r3, pc}
 800541a:	bf00      	nop
 800541c:	20003d58 	.word	0x20003d58
 8005420:	20003d9c 	.word	0x20003d9c

08005424 <xTaskCheckForTimeOut>:
{
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8005428:	4604      	mov	r4, r0
 800542a:	b950      	cbnz	r0, 8005442 <xTaskCheckForTimeOut+0x1e>
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	b672      	cpsid	i
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	b662      	cpsie	i
 8005440:	e7fe      	b.n	8005440 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8005442:	b951      	cbnz	r1, 800545a <xTaskCheckForTimeOut+0x36>
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	b672      	cpsid	i
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	b662      	cpsie	i
 8005458:	e7fe      	b.n	8005458 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800545a:	f7fe ffeb 	bl	8004434 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800545e:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <xTaskCheckForTimeOut+0x74>)
 8005460:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005462:	682b      	ldr	r3, [r5, #0]
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	d010      	beq.n	800548a <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005468:	4a0c      	ldr	r2, [pc, #48]	; (800549c <xTaskCheckForTimeOut+0x78>)
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	4290      	cmp	r0, r2
 8005470:	6862      	ldr	r2, [r4, #4]
 8005472:	d001      	beq.n	8005478 <xTaskCheckForTimeOut+0x54>
 8005474:	4291      	cmp	r1, r2
 8005476:	d20d      	bcs.n	8005494 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005478:	1a88      	subs	r0, r1, r2
 800547a:	4283      	cmp	r3, r0
 800547c:	d90a      	bls.n	8005494 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800547e:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 8005480:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8005482:	4413      	add	r3, r2
 8005484:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8005486:	f7ff ffbd 	bl	8005404 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800548a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800548c:	f7fe fff8 	bl	8004480 <vPortExitCritical>
}
 8005490:	4620      	mov	r0, r4
 8005492:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8005494:	2401      	movs	r4, #1
 8005496:	e7f9      	b.n	800548c <xTaskCheckForTimeOut+0x68>
 8005498:	20003d9c 	.word	0x20003d9c
 800549c:	20003d58 	.word	0x20003d58

080054a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80054a0:	2201      	movs	r2, #1
 80054a2:	4b01      	ldr	r3, [pc, #4]	; (80054a8 <vTaskMissedYield+0x8>)
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	4770      	bx	lr
 80054a8:	20003da0 	.word	0x20003da0

080054ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <xTaskGetSchedulerState+0x18>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	b133      	cbz	r3, 80054c0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <xTaskGetSchedulerState+0x1c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80054b8:	bf0c      	ite	eq
 80054ba:	2002      	moveq	r0, #2
 80054bc:	2000      	movne	r0, #0
 80054be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054c0:	2001      	movs	r0, #1
	}
 80054c2:	4770      	bx	lr
 80054c4:	20003d70 	.word	0x20003d70
 80054c8:	20003d1c 	.word	0x20003d1c

080054cc <vTaskPriorityInherit>:
	{
 80054cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80054d0:	4604      	mov	r4, r0
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d038      	beq.n	8005548 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80054d6:	4d1d      	ldr	r5, [pc, #116]	; (800554c <vTaskPriorityInherit+0x80>)
 80054d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80054da:	682a      	ldr	r2, [r5, #0]
 80054dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054de:	4293      	cmp	r3, r2
 80054e0:	d232      	bcs.n	8005548 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054e2:	6982      	ldr	r2, [r0, #24]
 80054e4:	2a00      	cmp	r2, #0
 80054e6:	db04      	blt.n	80054f2 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e8:	682a      	ldr	r2, [r5, #0]
 80054ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054ec:	f1c2 0207 	rsb	r2, r2, #7
 80054f0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80054f2:	4e17      	ldr	r6, [pc, #92]	; (8005550 <vTaskPriorityInherit+0x84>)
 80054f4:	2714      	movs	r7, #20
 80054f6:	6962      	ldr	r2, [r4, #20]
 80054f8:	fb07 6303 	mla	r3, r7, r3, r6
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d120      	bne.n	8005542 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005500:	f104 0804 	add.w	r8, r4, #4
 8005504:	4640      	mov	r0, r8
 8005506:	f7fe ff28 	bl	800435a <uxListRemove>
 800550a:	4a12      	ldr	r2, [pc, #72]	; (8005554 <vTaskPriorityInherit+0x88>)
 800550c:	b948      	cbnz	r0, 8005522 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800550e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005510:	4347      	muls	r7, r0
 8005512:	59f3      	ldr	r3, [r6, r7]
 8005514:	b92b      	cbnz	r3, 8005522 <vTaskPriorityInherit+0x56>
 8005516:	2101      	movs	r1, #1
 8005518:	6813      	ldr	r3, [r2, #0]
 800551a:	4081      	lsls	r1, r0
 800551c:	ea23 0301 	bic.w	r3, r3, r1
 8005520:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005522:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8005524:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005526:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005528:	2301      	movs	r3, #1
 800552a:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800552c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800552e:	430b      	orrs	r3, r1
 8005530:	4641      	mov	r1, r8
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	2314      	movs	r3, #20
 8005536:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800553a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 800553e:	f7fe bee9 	b.w	8004314 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800554c:	20003c78 	.word	0x20003c78
 8005550:	20003c84 	.word	0x20003c84
 8005554:	20003d24 	.word	0x20003d24

08005558 <xTaskPriorityDisinherit>:
	{
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800555a:	4604      	mov	r4, r0
 800555c:	b908      	cbnz	r0, 8005562 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800555e:	2000      	movs	r0, #0
 8005560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005562:	4b24      	ldr	r3, [pc, #144]	; (80055f4 <xTaskPriorityDisinherit+0x9c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4298      	cmp	r0, r3
 8005568:	d00a      	beq.n	8005580 <xTaskPriorityDisinherit+0x28>
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	b672      	cpsid	i
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	b662      	cpsie	i
 800557e:	e7fe      	b.n	800557e <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8005580:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005582:	b953      	cbnz	r3, 800559a <xTaskPriorityDisinherit+0x42>
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	b672      	cpsid	i
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	b662      	cpsie	i
 8005598:	e7fe      	b.n	8005598 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800559a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800559c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800559e:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80055a0:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055a2:	4291      	cmp	r1, r2
 80055a4:	d0db      	beq.n	800555e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1d9      	bne.n	800555e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055aa:	1d05      	adds	r5, r0, #4
 80055ac:	4e12      	ldr	r6, [pc, #72]	; (80055f8 <xTaskPriorityDisinherit+0xa0>)
 80055ae:	4628      	mov	r0, r5
 80055b0:	f7fe fed3 	bl	800435a <uxListRemove>
 80055b4:	4a11      	ldr	r2, [pc, #68]	; (80055fc <xTaskPriorityDisinherit+0xa4>)
 80055b6:	b950      	cbnz	r0, 80055ce <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80055b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055ba:	2114      	movs	r1, #20
 80055bc:	4379      	muls	r1, r7
 80055be:	5873      	ldr	r3, [r6, r1]
 80055c0:	b92b      	cbnz	r3, 80055ce <xTaskPriorityDisinherit+0x76>
 80055c2:	2001      	movs	r0, #1
 80055c4:	6813      	ldr	r3, [r2, #0]
 80055c6:	40b8      	lsls	r0, r7
 80055c8:	ea23 0300 	bic.w	r3, r3, r0
 80055cc:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d0:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055d4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d6:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80055d8:	2401      	movs	r4, #1
 80055da:	6811      	ldr	r1, [r2, #0]
 80055dc:	fa04 f003 	lsl.w	r0, r4, r3
 80055e0:	4308      	orrs	r0, r1
 80055e2:	4629      	mov	r1, r5
 80055e4:	6010      	str	r0, [r2, #0]
 80055e6:	2014      	movs	r0, #20
 80055e8:	fb00 6003 	mla	r0, r0, r3, r6
 80055ec:	f7fe fe92 	bl	8004314 <vListInsertEnd>
					xReturn = pdTRUE;
 80055f0:	4620      	mov	r0, r4
	}
 80055f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f4:	20003c78 	.word	0x20003c78
 80055f8:	20003c84 	.word	0x20003c84
 80055fc:	20003d24 	.word	0x20003d24

08005600 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <pvTaskIncrementMutexHeldCount+0x14>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	b11a      	cbz	r2, 800560e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005606:	6819      	ldr	r1, [r3, #0]
 8005608:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800560a:	3201      	adds	r2, #1
 800560c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800560e:	6818      	ldr	r0, [r3, #0]
	}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20003c78 	.word	0x20003c78

08005618 <__libc_init_array>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	4e0d      	ldr	r6, [pc, #52]	; (8005650 <__libc_init_array+0x38>)
 800561c:	4c0d      	ldr	r4, [pc, #52]	; (8005654 <__libc_init_array+0x3c>)
 800561e:	1ba4      	subs	r4, r4, r6
 8005620:	10a4      	asrs	r4, r4, #2
 8005622:	2500      	movs	r5, #0
 8005624:	42a5      	cmp	r5, r4
 8005626:	d109      	bne.n	800563c <__libc_init_array+0x24>
 8005628:	4e0b      	ldr	r6, [pc, #44]	; (8005658 <__libc_init_array+0x40>)
 800562a:	4c0c      	ldr	r4, [pc, #48]	; (800565c <__libc_init_array+0x44>)
 800562c:	f000 f82c 	bl	8005688 <_init>
 8005630:	1ba4      	subs	r4, r4, r6
 8005632:	10a4      	asrs	r4, r4, #2
 8005634:	2500      	movs	r5, #0
 8005636:	42a5      	cmp	r5, r4
 8005638:	d105      	bne.n	8005646 <__libc_init_array+0x2e>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005640:	4798      	blx	r3
 8005642:	3501      	adds	r5, #1
 8005644:	e7ee      	b.n	8005624 <__libc_init_array+0xc>
 8005646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800564a:	4798      	blx	r3
 800564c:	3501      	adds	r5, #1
 800564e:	e7f2      	b.n	8005636 <__libc_init_array+0x1e>
 8005650:	08005880 	.word	0x08005880
 8005654:	08005880 	.word	0x08005880
 8005658:	08005880 	.word	0x08005880
 800565c:	08005884 	.word	0x08005884

08005660 <memcpy>:
 8005660:	b510      	push	{r4, lr}
 8005662:	1e43      	subs	r3, r0, #1
 8005664:	440a      	add	r2, r1
 8005666:	4291      	cmp	r1, r2
 8005668:	d100      	bne.n	800566c <memcpy+0xc>
 800566a:	bd10      	pop	{r4, pc}
 800566c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005670:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005674:	e7f7      	b.n	8005666 <memcpy+0x6>

08005676 <memset>:
 8005676:	4402      	add	r2, r0
 8005678:	4603      	mov	r3, r0
 800567a:	4293      	cmp	r3, r2
 800567c:	d100      	bne.n	8005680 <memset+0xa>
 800567e:	4770      	bx	lr
 8005680:	f803 1b01 	strb.w	r1, [r3], #1
 8005684:	e7f9      	b.n	800567a <memset+0x4>
	...

08005688 <_init>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	bf00      	nop
 800568c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568e:	bc08      	pop	{r3}
 8005690:	469e      	mov	lr, r3
 8005692:	4770      	bx	lr

08005694 <_fini>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	bf00      	nop
 8005698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569a:	bc08      	pop	{r3}
 800569c:	469e      	mov	lr, r3
 800569e:	4770      	bx	lr
