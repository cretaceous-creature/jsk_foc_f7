
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000575c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08005b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004748  20000008  08005b60  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004750  08005b60  00024750  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000fcee  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003e9e2  00000000  00000000  0002fd24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000703f  00000000  00000000  0006e706  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001940  00000000  00000000  00075748  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002020  00000000  00000000  00077088  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001328b  00000000  00000000  000790a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000094e2  00000000  00000000  0008c333  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00095815  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004a70  00000000  00000000  00095894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000008 	.word	0x20000008
 800021c:	00000000 	.word	0x00000000
 8000220:	08005944 	.word	0x08005944

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000000c 	.word	0x2000000c
 800023c:	08005944 	.word	0x08005944

08000240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
  ldr  r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800025e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800026a:	f001 fa6d 	bl	8001748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f005 fb31 	bl	80058d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000272:	f000 fe23 	bl	8000ebc <main>
  bx  lr    
 8000276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000278:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800027c:	08005b58 	.word	0x08005b58
  ldr  r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000284:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000288:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800028c:	20004750 	.word	0x20004750

08000290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC_IRQHandler>
	...

08000294 <HAL_UART_ErrorCallback>:
 * UART4 error handler
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	//error...
	_Error_Handler("isrSensors.c, uart error",41);
 8000294:	2129      	movs	r1, #41	; 0x29
 8000296:	4801      	ldr	r0, [pc, #4]	; (800029c <HAL_UART_ErrorCallback+0x8>)
 8000298:	f000 be7a 	b.w	8000f90 <_Error_Handler>
 800029c:	08005a30 	.word	0x08005a30

080002a0 <HAL_UART_RxCpltCallback>:
 * obtain hall sensor, encoder, etc data from intelligent board.
 * data updating rate <10us  ~100khz
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance==huart4.Instance) //not necessary to check..
 80002a0:	4b3e      	ldr	r3, [pc, #248]	; (800039c <HAL_UART_RxCpltCallback+0xfc>)
 80002a2:	6802      	ldr	r2, [r0, #0]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
{
 80002a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if(huart->Instance==huart4.Instance) //not necessary to check..
 80002ac:	d173      	bne.n	8000396 <HAL_UART_RxCpltCallback+0xf6>
	{
		for(int i=0; i<5; i++)
		{
			if(enchall_buff[i] == TXHEADER)
 80002ae:	4e3c      	ldr	r6, [pc, #240]	; (80003a0 <HAL_UART_RxCpltCallback+0x100>)
 80002b0:	2401      	movs	r4, #1
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
							HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter1,0) == HAL_OK)
					{
						data1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
						data2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
						HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80002b2:	4f3c      	ldr	r7, [pc, #240]	; (80003a4 <HAL_UART_RxCpltCallback+0x104>)
 80002b4:	4635      	mov	r5, r6
			if(enchall_buff[i] == TXHEADER)
 80002b6:	19a3      	adds	r3, r4, r6
 80002b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80002bc:	2bf8      	cmp	r3, #248	; 0xf8
 80002be:	d164      	bne.n	800038a <HAL_UART_RxCpltCallback+0xea>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002c0:	2c05      	cmp	r4, #5
 80002c2:	d005      	beq.n	80002d0 <HAL_UART_RxCpltCallback+0x30>
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002c4:	2c04      	cmp	r4, #4
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002c6:	b2e2      	uxtb	r2, r4
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002c8:	d103      	bne.n	80002d2 <HAL_UART_RxCpltCallback+0x32>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002ca:	4622      	mov	r2, r4
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002cc:	2300      	movs	r3, #0
 80002ce:	e002      	b.n	80002d6 <HAL_UART_RxCpltCallback+0x36>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80002d0:	2200      	movs	r2, #0
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80002d2:	1c53      	adds	r3, r2, #1
 80002d4:	b2db      	uxtb	r3, r3
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 80002d6:	5ca9      	ldrb	r1, [r5, r2]
 80002d8:	060a      	lsls	r2, r1, #24
 80002da:	d556      	bpl.n	800038a <HAL_UART_RxCpltCallback+0xea>
 80002dc:	5ce8      	ldrb	r0, [r5, r3]
 80002de:	f010 0f60 	tst.w	r0, #96	; 0x60
 80002e2:	d052      	beq.n	800038a <HAL_UART_RxCpltCallback+0xea>
					enchall.mseq_out = enchall_buff[s]&0x01;
 80002e4:	4a30      	ldr	r2, [pc, #192]	; (80003a8 <HAL_UART_RxCpltCallback+0x108>)
 80002e6:	f001 0e01 	and.w	lr, r1, #1
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 80002ea:	f000 001f 	and.w	r0, r0, #31
					uint8_t b1 = t==4?0:t+1;
 80002ee:	2b04      	cmp	r3, #4
					enchall.mseq_out = enchall_buff[s]&0x01;
 80002f0:	f882 e000 	strb.w	lr, [r2]
					enchall.auxbit_in = (enchall_buff[s]&0x02)>>1;
 80002f4:	f3c1 0e40 	ubfx	lr, r1, #1, #1
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 80002f8:	7110      	strb	r0, [r2, #4]
					enchall.auxbit_in = (enchall_buff[s]&0x02)>>1;
 80002fa:	f882 e001 	strb.w	lr, [r2, #1]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 80002fe:	f3c1 0e82 	ubfx	lr, r1, #2, #3
					enchall.calc_tag = (enchall_buff[s]&0x60)>>5; // 0110|0000
 8000302:	f3c1 1141 	ubfx	r1, r1, #5, #2
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 8000306:	f882 e002 	strb.w	lr, [r2, #2]
					enchall.calc_tag = (enchall_buff[s]&0x60)>>5; // 0110|0000
 800030a:	70d1      	strb	r1, [r2, #3]
					uint8_t b1 = t==4?0:t+1;
 800030c:	d005      	beq.n	800031a <HAL_UART_RxCpltCallback+0x7a>
 800030e:	3301      	adds	r3, #1
 8000310:	b2db      	uxtb	r3, r3
					uint8_t b2 = b1==4?0:b1+1;
 8000312:	2b04      	cmp	r3, #4
 8000314:	d102      	bne.n	800031c <HAL_UART_RxCpltCallback+0x7c>
 8000316:	2100      	movs	r1, #0
 8000318:	e002      	b.n	8000320 <HAL_UART_RxCpltCallback+0x80>
					uint8_t b1 = t==4?0:t+1;
 800031a:	2300      	movs	r3, #0
					uint8_t b2 = b1==4?0:b1+1;
 800031c:	1c59      	adds	r1, r3, #1
 800031e:	b2c9      	uxtb	r1, r1
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000320:	5ceb      	ldrb	r3, [r5, r3]
					if(xSemaphoreTakeFromISR(encdataMutexHandle,0)==pdPASS)
 8000322:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80003c0 <HAL_UART_RxCpltCallback+0x120>
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000326:	7153      	strb	r3, [r2, #5]
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000328:	5c6b      	ldrb	r3, [r5, r1]
					if(xSemaphoreTakeFromISR(encdataMutexHandle,0)==pdPASS)
 800032a:	f8d8 0000 	ldr.w	r0, [r8]
					enchall.enc_low = enchall_buff[b2]&0xff;
 800032e:	7193      	strb	r3, [r2, #6]
					if(xSemaphoreTakeFromISR(encdataMutexHandle,0)==pdPASS)
 8000330:	2200      	movs	r2, #0
 8000332:	4611      	mov	r1, r2
 8000334:	f004 fde8 	bl	8004f08 <xQueueReceiveFromISR>
 8000338:	2801      	cmp	r0, #1
 800033a:	d10b      	bne.n	8000354 <HAL_UART_RxCpltCallback+0xb4>
						xQueueSendFromISR(enchallQueueHandle,&enchall,0);
 800033c:	2300      	movs	r3, #0
 800033e:	481b      	ldr	r0, [pc, #108]	; (80003ac <HAL_UART_RxCpltCallback+0x10c>)
 8000340:	4919      	ldr	r1, [pc, #100]	; (80003a8 <HAL_UART_RxCpltCallback+0x108>)
 8000342:	461a      	mov	r2, r3
 8000344:	6800      	ldr	r0, [r0, #0]
 8000346:	f004 fc4d 	bl	8004be4 <xQueueGenericSendFromISR>
						xSemaphoreGiveFromISR(encdataMutexHandle,0);
 800034a:	2100      	movs	r1, #0
 800034c:	f8d8 0000 	ldr.w	r0, [r8]
 8000350:	f004 fcb2 	bl	8004cb8 <xQueueGiveFromISR>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 8000354:	2100      	movs	r1, #0
 8000356:	4816      	ldr	r0, [pc, #88]	; (80003b0 <HAL_UART_RxCpltCallback+0x110>)
 8000358:	f001 fc32 	bl	8001bc0 <HAL_DFSDM_FilterPollForRegConversion>
 800035c:	4601      	mov	r1, r0
 800035e:	b990      	cbnz	r0, 8000386 <HAL_UART_RxCpltCallback+0xe6>
							HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter1,0) == HAL_OK)
 8000360:	4814      	ldr	r0, [pc, #80]	; (80003b4 <HAL_UART_RxCpltCallback+0x114>)
 8000362:	f001 fc2d 	bl	8001bc0 <HAL_DFSDM_FilterPollForRegConversion>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 8000366:	b970      	cbnz	r0, 8000386 <HAL_UART_RxCpltCallback+0xe6>
						data1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000368:	4913      	ldr	r1, [pc, #76]	; (80003b8 <HAL_UART_RxCpltCallback+0x118>)
 800036a:	4811      	ldr	r0, [pc, #68]	; (80003b0 <HAL_UART_RxCpltCallback+0x110>)
 800036c:	f001 fc20 	bl	8001bb0 <HAL_DFSDM_FilterGetRegularValue>
						data2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 8000370:	4912      	ldr	r1, [pc, #72]	; (80003bc <HAL_UART_RxCpltCallback+0x11c>)
						data1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000372:	9000      	str	r0, [sp, #0]
						data2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 8000374:	480f      	ldr	r0, [pc, #60]	; (80003b4 <HAL_UART_RxCpltCallback+0x114>)
 8000376:	f001 fc1b 	bl	8001bb0 <HAL_DFSDM_FilterGetRegularValue>
						HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 800037a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
						data2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 800037e:	9001      	str	r0, [sp, #4]
						HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 8000380:	4638      	mov	r0, r7
 8000382:	f001 fee4 	bl	800214e <HAL_GPIO_TogglePin>
					}
					b2= data1 + data2;
 8000386:	9b00      	ldr	r3, [sp, #0]
 8000388:	9b01      	ldr	r3, [sp, #4]
 800038a:	3401      	adds	r4, #1
		for(int i=0; i<5; i++)
 800038c:	2c06      	cmp	r4, #6
 800038e:	d192      	bne.n	80002b6 <HAL_UART_RxCpltCallback+0x16>
				}
			}
		}
		//continue DMA
		HAL_UART_DMAResume(&huart4);
 8000390:	4802      	ldr	r0, [pc, #8]	; (800039c <HAL_UART_RxCpltCallback+0xfc>)
 8000392:	f003 fa57 	bl	8003844 <HAL_UART_DMAResume>
	}
}
 8000396:	b002      	add	sp, #8
 8000398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800039c:	200042dc 	.word	0x200042dc
 80003a0:	20003da8 	.word	0x20003da8
 80003a4:	40020800 	.word	0x40020800
 80003a8:	20000024 	.word	0x20000024
 80003ac:	20003fa4 	.word	0x20003fa4
 80003b0:	20003db4 	.word	0x20003db4
 80003b4:	20003f00 	.word	0x20003f00
 80003b8:	20003f54 	.word	0x20003f54
 80003bc:	20003e08 	.word	0x20003e08
 80003c0:	20003fa8 	.word	0x20003fa8

080003c4 <StartledblueTask>:
/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 80003c4:	4c05      	ldr	r4, [pc, #20]	; (80003dc <StartledblueTask+0x18>)
{
 80003c6:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 80003c8:	4620      	mov	r0, r4
 80003ca:	2104      	movs	r1, #4
 80003cc:	f001 febf 	bl	800214e <HAL_GPIO_TogglePin>
		osDelay(500);
 80003d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d4:	f003 ff87 	bl	80042e6 <osDelay>
 80003d8:	e7f6      	b.n	80003c8 <StartledblueTask+0x4>
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <StartledgreenTask>:
/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 80003e0:	4c05      	ldr	r4, [pc, #20]	; (80003f8 <StartledgreenTask+0x18>)
{
 80003e2:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 80003e4:	4620      	mov	r0, r4
 80003e6:	2108      	movs	r1, #8
 80003e8:	f001 feb1 	bl	800214e <HAL_GPIO_TogglePin>
		osDelay(1000);
 80003ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f0:	f003 ff79 	bl	80042e6 <osDelay>
 80003f4:	e7f6      	b.n	80003e4 <StartledgreenTask+0x4>
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000

080003fc <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 80003fc:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 80003fe:	2032      	movs	r0, #50	; 0x32
 8000400:	f003 ff71 	bl	80042e6 <osDelay>
 8000404:	e7fb      	b.n	80003fe <StartiwdgTask+0x2>
	...

08000408 <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 800040c:	f240 36f3 	movw	r6, #1011	; 0x3f3
 8000410:	22c8      	movs	r2, #200	; 0xc8
 8000412:	2100      	movs	r1, #0
 8000414:	a802      	add	r0, sp, #8
 8000416:	f240 35f5 	movw	r5, #1013	; 0x3f5
 800041a:	f005 fa8a 	bl	8005932 <memset>
 800041e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8000422:	f240 76db 	movw	r6, #2011	; 0x7db
 8000426:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800042a:	f240 72df 	movw	r2, #2015	; 0x7df
 800042e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000432:	f8ad 6020 	strh.w	r6, [sp, #32]
 8000436:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
 800043a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800043e:	f240 34f7 	movw	r4, #1015	; 0x3f7
 8000442:	f8ad 100a 	strh.w	r1, [sp, #10]
 8000446:	f240 77dc 	movw	r7, #2012	; 0x7dc
 800044a:	f8ad 200c 	strh.w	r2, [sp, #12]
 800044e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8000452:	f8ad 0014 	strh.w	r0, [sp, #20]
 8000456:	f8ad 1018 	strh.w	r1, [sp, #24]
 800045a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800045e:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8000462:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8000466:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800046a:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800046e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8000472:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000476:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 800047a:	f240 71e5 	movw	r1, #2021	; 0x7e5
 800047e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8000482:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8000486:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800048a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 800048e:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8000492:	f8ad 5008 	strh.w	r5, [sp, #8]
 8000496:	f8ad 300e 	strh.w	r3, [sp, #14]
 800049a:	f8ad 4010 	strh.w	r4, [sp, #16]
 800049e:	f8ad 5016 	strh.w	r5, [sp, #22]
 80004a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80004a6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80004aa:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 80004ae:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 80004b2:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
 80004b6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 80004ba:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 80004be:	f8ad 701a 	strh.w	r7, [sp, #26]
 80004c2:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 80004c6:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80004ca:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 80004ce:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 80004d2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80004d6:	f240 33ff 	movw	r3, #1023	; 0x3ff
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
	for(;;)
	{
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 80004da:	4c29      	ldr	r4, [pc, #164]	; (8000580 <StartbuzzerrythmTask+0x178>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 80004dc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80004e0:	f240 73e7 	movw	r3, #2023	; 0x7e7
 80004e4:	4625      	mov	r5, r4
		{
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 80004e6:	4e27      	ldr	r6, [pc, #156]	; (8000584 <StartbuzzerrythmTask+0x17c>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 80004e8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 80004ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004f0:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80004f4:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 80004f8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80004fc:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 8000500:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 8000504:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8000508:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800050c:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 8000510:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 8000514:	f44f 637b 	mov.w	r3, #4016	; 0xfb0
 8000518:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 800051c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	volatile uint16_t i = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	f8ad 3006 	strh.w	r3, [sp, #6]
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000526:	2300      	movs	r3, #0
 8000528:	6820      	ldr	r0, [r4, #0]
 800052a:	461a      	mov	r2, r3
 800052c:	4619      	mov	r1, r3
 800052e:	f004 fc21 	bl	8004d74 <xQueueGenericReceive>
 8000532:	2801      	cmp	r0, #1
 8000534:	d11d      	bne.n	8000572 <StartbuzzerrythmTask+0x16a>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 8000536:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800053a:	2300      	movs	r3, #0
 800053c:	a802      	add	r0, sp, #8
 800053e:	b289      	uxth	r1, r1
 8000540:	461a      	mov	r2, r3
 8000542:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8000546:	6830      	ldr	r0, [r6, #0]
 8000548:	f004 fa7c 	bl	8004a44 <xQueueGenericSend>
 800054c:	2801      	cmp	r0, #1
 800054e:	d10a      	bne.n	8000566 <StartbuzzerrythmTask+0x15e>
			{
				i=i==SONGLENGTH-1?0:i+1;
 8000550:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000554:	b29b      	uxth	r3, r3
 8000556:	2b31      	cmp	r3, #49	; 0x31
 8000558:	d00f      	beq.n	800057a <StartbuzzerrythmTask+0x172>
 800055a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800055e:	3301      	adds	r3, #1
 8000560:	b29b      	uxth	r3, r3
 8000562:	f8ad 3006 	strh.w	r3, [sp, #6]
			}
			xSemaphoreGive(buzzerMutexHandle);
 8000566:	2300      	movs	r3, #0
 8000568:	6828      	ldr	r0, [r5, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	4619      	mov	r1, r3
 800056e:	f004 fa69 	bl	8004a44 <xQueueGenericSend>
		}
		osDelay(10);
 8000572:	200a      	movs	r0, #10
 8000574:	f003 feb7 	bl	80042e6 <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000578:	e7d5      	b.n	8000526 <StartbuzzerrythmTask+0x11e>
				i=i==SONGLENGTH-1?0:i+1;
 800057a:	2300      	movs	r3, #0
 800057c:	e7f1      	b.n	8000562 <StartbuzzerrythmTask+0x15a>
 800057e:	bf00      	nop
 8000580:	20003fa0 	.word	0x20003fa0
 8000584:	20003f94 	.word	0x20003f94

08000588 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 8000588:	b570      	push	{r4, r5, r6, lr}
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800058a:	4c4b      	ldr	r4, [pc, #300]	; (80006b8 <StartbuzzertoneTask+0x130>)
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 800058c:	2600      	movs	r6, #0
{
 800058e:	ed2d 8b02 	vpush	{d8}
 8000592:	b090      	sub	sp, #64	; 0x40
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000596:	ad09      	add	r5, sp, #36	; 0x24
	volatile float tonefreq = 0, time = 0;;
 8000598:	9602      	str	r6, [sp, #8]
 800059a:	9603      	str	r6, [sp, #12]
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800059c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800059e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 80005a2:	340c      	adds	r4, #12
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 80005a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 80005a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005aa:	ad04      	add	r5, sp, #16
 80005ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ae:	6823      	ldr	r3, [r4, #0]
				if(black)
					tonefreq = tonetable_black[black-1] * num *2 ;
				else
					tonefreq = tonetable_white[white-1] * num *2;
				//ring
				SetbuzzerFreq(tonefreq);
 80005b0:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 80006b0 <StartbuzzertoneTask+0x128>
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 80005b4:	602b      	str	r3, [r5, #0]
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 80005b6:	4d41      	ldr	r5, [pc, #260]	; (80006bc <StartbuzzertoneTask+0x134>)
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 80005b8:	4841      	ldr	r0, [pc, #260]	; (80006c0 <StartbuzzertoneTask+0x138>)
 80005ba:	220a      	movs	r2, #10
 80005bc:	2300      	movs	r3, #0
 80005be:	f10d 0106 	add.w	r1, sp, #6
 80005c2:	6800      	ldr	r0, [r0, #0]
 80005c4:	f004 fbd6 	bl	8004d74 <xQueueGenericReceive>
 80005c8:	2801      	cmp	r0, #1
 80005ca:	4602      	mov	r2, r0
 80005cc:	4c3d      	ldr	r4, [pc, #244]	; (80006c4 <StartbuzzertoneTask+0x13c>)
 80005ce:	d168      	bne.n	80006a2 <StartbuzzertoneTask+0x11a>
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 80005d0:	2300      	movs	r3, #0
 80005d2:	6828      	ldr	r0, [r5, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f004 fbcd 	bl	8004d74 <xQueueGenericReceive>
			time = tonedata/1000;
 80005da:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	fbb1 f2f3 	udiv	r2, r1, r3
 80005e6:	b290      	uxth	r0, r2
			black = (tonedata%1000)/100;
 80005e8:	fb03 1212 	mls	r2, r3, r2, r1
			time = tonedata/1000;
 80005ec:	ee07 0a90 	vmov	s15, r0
			black = (tonedata%1000)/100;
 80005f0:	b292      	uxth	r2, r2
			time = tonedata/1000;
 80005f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f6:	edcd 7a03 	vstr	s15, [sp, #12]
			if((tonedata%1000) != 0)
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	d04c      	beq.n	8000698 <StartbuzzertoneTask+0x110>
			black = (tonedata%1000)/100;
 80005fe:	2064      	movs	r0, #100	; 0x64
			num = (tonedata%100)/10;
 8000600:	fbb1 f3f0 	udiv	r3, r1, r0
 8000604:	fb00 1313 	mls	r3, r0, r3, r1
			black = (tonedata%1000)/100;
 8000608:	fbb2 f2f0 	udiv	r2, r2, r0
			num = (tonedata%100)/10;
 800060c:	b29b      	uxth	r3, r3
 800060e:	200a      	movs	r0, #10
 8000610:	fbb3 f3f0 	udiv	r3, r3, r0
 8000614:	ee07 3a90 	vmov	s15, r3
 8000618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if(black)
 800061c:	b38a      	cbz	r2, 8000682 <StartbuzzertoneTask+0xfa>
					tonefreq = tonetable_black[black-1] * num *2 ;
 800061e:	ab10      	add	r3, sp, #64	; 0x40
 8000620:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000624:	ed12 7a0d 	vldr	s14, [r2, #-52]	; 0xffffffcc
					tonefreq = tonetable_white[white-1] * num *2;
 8000628:	ee67 7a87 	vmul.f32	s15, s15, s14
				SetbuzzerFreq(tonefreq);
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	2200      	movs	r2, #0
					tonefreq = tonetable_white[white-1] * num *2;
 8000630:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000634:	edcd 7a02 	vstr	s15, [sp, #8]
				SetbuzzerFreq(tonefreq);
 8000638:	ed9d 6a02 	vldr	s12, [sp, #8]
 800063c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000640:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000644:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8000648:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
			else
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
 800064e:	eddd 7a03 	vldr	s15, [sp, #12]
 8000652:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065a:	d00b      	beq.n	8000674 <StartbuzzertoneTask+0xec>
				osDelay(500/time); //time is used to shorter the sound..
 800065c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8000660:	eddf 6a19 	vldr	s13, [pc, #100]	; 80006c8 <StartbuzzertoneTask+0x140>
 8000664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800066c:	ee17 0a90 	vmov	r0, s15
 8000670:	f003 fe39 	bl	80042e6 <osDelay>
			xSemaphoreGive(buzzerMutexHandle);
 8000674:	2300      	movs	r3, #0
 8000676:	6828      	ldr	r0, [r5, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4619      	mov	r1, r3
 800067c:	f004 f9e2 	bl	8004a44 <xQueueGenericSend>
 8000680:	e79a      	b.n	80005b8 <StartbuzzertoneTask+0x30>
			white  = tonedata%10;
 8000682:	fbb1 f3f0 	udiv	r3, r1, r0
 8000686:	fb00 1313 	mls	r3, r0, r3, r1
					tonefreq = tonetable_white[white-1] * num *2;
 800068a:	aa10      	add	r2, sp, #64	; 0x40
 800068c:	b29b      	uxth	r3, r3
 800068e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000692:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8000696:	e7c7      	b.n	8000628 <StartbuzzertoneTask+0xa0>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000698:	6823      	ldr	r3, [r4, #0]
 800069a:	635a      	str	r2, [r3, #52]	; 0x34
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 800069e:	9602      	str	r6, [sp, #8]
 80006a0:	e7d5      	b.n	800064e <StartbuzzertoneTask+0xc6>
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 80006a2:	6823      	ldr	r3, [r4, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
 80006aa:	e785      	b.n	80005b8 <StartbuzzertoneTask+0x30>
 80006ac:	f3af 8000 	nop.w
 80006b0:	00000000 	.word	0x00000000
 80006b4:	412e8480 	.word	0x412e8480
 80006b8:	0800595c 	.word	0x0800595c
 80006bc:	20003fa0 	.word	0x20003fa0
 80006c0:	20003f94 	.word	0x20003f94
 80006c4:	200040ec 	.word	0x200040ec
 80006c8:	43fa0000 	.word	0x43fa0000

080006cc <SystemInitialization>:
extern uint8_t enchall_buff[5];
extern int32_t cur_u;
extern int32_t cur_v;

void SystemInitialization(void)
{
 80006cc:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);

	/*
	 * tim1 pwm initialization
	 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80006ce:	4c15      	ldr	r4, [pc, #84]	; (8000724 <SystemInitialization+0x58>)
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80006d0:	2100      	movs	r1, #0
 80006d2:	4815      	ldr	r0, [pc, #84]	; (8000728 <SystemInitialization+0x5c>)
 80006d4:	f002 feea 	bl	80034ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80006d8:	2100      	movs	r1, #0
 80006da:	4620      	mov	r0, r4
 80006dc:	f002 fee6 	bl	80034ac <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80006e0:	2100      	movs	r1, #0
 80006e2:	4620      	mov	r0, r4
 80006e4:	f002 ff58 	bl	8003598 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80006e8:	2104      	movs	r1, #4
 80006ea:	4620      	mov	r0, r4
 80006ec:	f002 fede 	bl	80034ac <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80006f0:	2104      	movs	r1, #4
 80006f2:	4620      	mov	r0, r4
 80006f4:	f002 ff50 	bl	8003598 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80006f8:	2108      	movs	r1, #8
 80006fa:	4620      	mov	r0, r4
 80006fc:	f002 fed6 	bl	80034ac <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8000700:	2108      	movs	r1, #8
 8000702:	4620      	mov	r0, r4
 8000704:	f002 ff48 	bl	8003598 <HAL_TIMEx_PWMN_Start>

	/*
	 * register the call back of uart4 transmit..
	 */
	//HAL_DMA_RegisterCallback(&hdma_uart4_rx,HAL_DMA_XFER_CPLTUART4_DMA2_Cplt_Callback);
	HAL_UART_Receive_DMA(&huart4,enchall_buff,5);
 8000708:	2205      	movs	r2, #5
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <SystemInitialization+0x60>)
 800070c:	4808      	ldr	r0, [pc, #32]	; (8000730 <SystemInitialization+0x64>)
 800070e:	f003 f855 	bl	80037bc <HAL_UART_Receive_DMA>

	/*
	 * DFSDM initial
	 */
	//polling mode
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0);
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <SystemInitialization+0x68>)
 8000714:	f001 fa3f 	bl	8001b96 <HAL_DFSDM_FilterRegularStart>
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <SystemInitialization+0x6c>)
	//DMA mode
//	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,&cur_u,1);
//	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,&cur_v,1);
}
 800071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 800071e:	f001 ba3a 	b.w	8001b96 <HAL_DFSDM_FilterRegularStart>
 8000722:	bf00      	nop
 8000724:	200040ac 	.word	0x200040ac
 8000728:	200040ec 	.word	0x200040ec
 800072c:	20003da8 	.word	0x20003da8
 8000730:	200042dc 	.word	0x200042dc
 8000734:	20003db4 	.word	0x20003db4
 8000738:	20003f00 	.word	0x20003f00

0800073c <StartenchallTask>:
#include "main.h"
extern osMessageQId enchallQueueHandle;
extern osMutexId encdataMutexHandle;

void StartenchallTask(void const * argument)
{
 800073c:	b58f      	push	{r0, r1, r2, r3, r7, lr}
  for(;;)
  {
	  ENCHD encdata;
	  uint8_t datatosend[8];
	  if(xQueueReceiveFromISR(enchallQueueHandle,&encdata,0)==pdPASS)
 800073e:	4e24      	ldr	r6, [pc, #144]	; (80007d0 <StartenchallTask+0x94>)
	  {
		  xSemaphoreTake(encdataMutexHandle,0);
 8000740:	4c24      	ldr	r4, [pc, #144]	; (80007d4 <StartenchallTask+0x98>)
//		  volatile int32_t data1,data2;
//		  if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK)
//			  data1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,&hdfsdm1_channel0);
//		  if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter1,0) == HAL_OK)
//			  data2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,&hdfsdm1_channel3);
		  HAL_UART_Transmit(&huart1,datatosend,8,1);
 8000742:	4f25      	ldr	r7, [pc, #148]	; (80007d8 <StartenchallTask+0x9c>)
	  if(xQueueReceiveFromISR(enchallQueueHandle,&encdata,0)==pdPASS)
 8000744:	2200      	movs	r2, #0
 8000746:	4669      	mov	r1, sp
 8000748:	6830      	ldr	r0, [r6, #0]
 800074a:	f004 fbdd 	bl	8004f08 <xQueueReceiveFromISR>
 800074e:	2801      	cmp	r0, #1
 8000750:	4605      	mov	r5, r0
 8000752:	d139      	bne.n	80007c8 <StartenchallTask+0x8c>
		  xSemaphoreTake(encdataMutexHandle,0);
 8000754:	2300      	movs	r3, #0
 8000756:	6820      	ldr	r0, [r4, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4619      	mov	r1, r3
 800075c:	f004 fb0a 	bl	8004d74 <xQueueGenericReceive>
		  datatosend[0] = encdata.mseq_out + 0x30;//1bit
 8000760:	f89d 3000 	ldrb.w	r3, [sp]
		  datatosend[4] = encdata.enc_counter/10 + 0x30; //msb unit
 8000764:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000768:	220a      	movs	r2, #10
		  datatosend[0] = encdata.mseq_out + 0x30;//1bit
 800076a:	3330      	adds	r3, #48	; 0x30
		  datatosend[7] = '\n';
 800076c:	f88d 200f 	strb.w	r2, [sp, #15]
		  datatosend[0] = encdata.mseq_out + 0x30;//1bit
 8000770:	f88d 3008 	strb.w	r3, [sp, #8]
		  datatosend[1] = encdata.auxbit_in + 0x30;//1bit
 8000774:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000778:	3330      	adds	r3, #48	; 0x30
 800077a:	f88d 3009 	strb.w	r3, [sp, #9]
		  datatosend[2] = encdata.hole_in + 0x30; //3bits
 800077e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000782:	3330      	adds	r3, #48	; 0x30
 8000784:	f88d 300a 	strb.w	r3, [sp, #10]
		  datatosend[3] = encdata.calc_tag + 0x30; //2bits
 8000788:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800078c:	3330      	adds	r3, #48	; 0x30
 800078e:	f88d 300b 	strb.w	r3, [sp, #11]
		  datatosend[4] = encdata.enc_counter/10 + 0x30; //msb unit
 8000792:	fbb1 f3f2 	udiv	r3, r1, r2
 8000796:	f103 0030 	add.w	r0, r3, #48	; 0x30
		  datatosend[5] = encdata.enc_counter%10 + 0x30; //lsb unit
 800079a:	fb02 1313 	mls	r3, r2, r3, r1
		  HAL_UART_Transmit(&huart1,datatosend,8,1);
 800079e:	2208      	movs	r2, #8
		  datatosend[5] = encdata.enc_counter%10 + 0x30; //lsb unit
 80007a0:	3330      	adds	r3, #48	; 0x30
		  datatosend[4] = encdata.enc_counter/10 + 0x30; //msb unit
 80007a2:	f88d 000c 	strb.w	r0, [sp, #12]
		  HAL_UART_Transmit(&huart1,datatosend,8,1);
 80007a6:	eb0d 0102 	add.w	r1, sp, r2
 80007aa:	4638      	mov	r0, r7
		  datatosend[5] = encdata.enc_counter%10 + 0x30; //lsb unit
 80007ac:	f88d 300d 	strb.w	r3, [sp, #13]
		  datatosend[6] = '\r';
 80007b0:	230d      	movs	r3, #13
 80007b2:	f88d 300e 	strb.w	r3, [sp, #14]
		  HAL_UART_Transmit(&huart1,datatosend,8,1);
 80007b6:	462b      	mov	r3, r5
 80007b8:	f003 f8a4 	bl	8003904 <HAL_UART_Transmit>
		  xSemaphoreGive(encdataMutexHandle);
 80007bc:	2300      	movs	r3, #0
 80007be:	6820      	ldr	r0, [r4, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4619      	mov	r1, r3
 80007c4:	f004 f93e 	bl	8004a44 <xQueueGenericSend>
	  }
	  //every 5 mini
	  osDelay(100);
 80007c8:	2064      	movs	r0, #100	; 0x64
 80007ca:	f003 fd8c 	bl	80042e6 <osDelay>
  {
 80007ce:	e7b9      	b.n	8000744 <StartenchallTask+0x8>
 80007d0:	20003fa4 	.word	0x20003fa4
 80007d4:	20003fa8 	.word	0x20003fa8
 80007d8:	200041fc 	.word	0x200041fc

080007dc <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80007dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80007e0:	482e      	ldr	r0, [pc, #184]	; (800089c <MX_DFSDM1_Init+0xc0>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007e2:	2400      	movs	r4, #0
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80007e4:	2501      	movs	r5, #1
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_DFSDM1_Init+0xc4>)
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 80007e8:	2602      	movs	r6, #2
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80007ea:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 80007ee:	2740      	movs	r7, #64	; 0x40
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80007f0:	7205      	strb	r5, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80007f2:	7245      	strb	r5, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80007f4:	f8c0 801c 	str.w	r8, [r0, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 80007f8:	6207      	str	r7, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 80007fa:	6246      	str	r6, [r0, #36]	; 0x24
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007fc:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000800:	f001 f93a 	bl	8001a78 <HAL_DFSDM_FilterInit>

  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000804:	4827      	ldr	r0, [pc, #156]	; (80008a4 <MX_DFSDM1_Init+0xc8>)
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_DFSDM1_Init+0xcc>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000808:	7205      	strb	r5, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 800080a:	7245      	strb	r5, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800080c:	f8c0 801c 	str.w	r8, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 8000810:	6207      	str	r7, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
 8000812:	6246      	str	r6, [r0, #36]	; 0x24
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000814:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 8000818:	f001 f92e 	bl	8001a78 <HAL_DFSDM_FilterInit>

  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800081c:	4823      	ldr	r0, [pc, #140]	; (80008ac <MX_DFSDM1_Init+0xd0>)
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_DFSDM1_Init+0xd4>)
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000820:	7104      	strb	r4, [r0, #4]
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000822:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000824:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000828:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800082a:	60c6      	str	r6, [r0, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800082c:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800082e:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000830:	6184      	str	r4, [r0, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000832:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000834:	6204      	str	r4, [r0, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000836:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000838:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800083a:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800083c:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800083e:	f001 f8a7 	bl	8001990 <HAL_DFSDM_ChannelInit>
 8000842:	b118      	cbz	r0, 800084c <MX_DFSDM1_Init+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000844:	2168      	movs	r1, #104	; 0x68
 8000846:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_DFSDM1_Init+0xd8>)
 8000848:	f000 fba2 	bl	8000f90 <_Error_Handler>
  }

  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 800084c:	481a      	ldr	r0, [pc, #104]	; (80008b8 <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 800084e:	2202      	movs	r2, #2
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_DFSDM1_Init+0xe0>)
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 8000852:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000854:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000858:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 800085a:	2300      	movs	r3, #0
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800085c:	6242      	str	r2, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 800085e:	2201      	movs	r2, #1
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 8000860:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000862:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000864:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000866:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000868:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800086a:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800086c:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 800086e:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 8000870:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 8000872:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8000874:	f001 f88c 	bl	8001990 <HAL_DFSDM_ChannelInit>
 8000878:	b118      	cbz	r0, 8000882 <MX_DFSDM1_Init+0xa6>
  {
    _Error_Handler(__FILE__, __LINE__);
 800087a:	217a      	movs	r1, #122	; 0x7a
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_DFSDM1_Init+0xd8>)
 800087e:	f000 fb87 	bl	8000f90 <_Error_Handler>
  }

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 8000882:	2201      	movs	r2, #1
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_DFSDM1_Init+0xc0>)
 8000886:	4611      	mov	r1, r2
 8000888:	f001 f968 	bl	8001b5c <HAL_DFSDM_FilterConfigRegChannel>

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 800088c:	2201      	movs	r2, #1
 800088e:	490c      	ldr	r1, [pc, #48]	; (80008c0 <MX_DFSDM1_Init+0xe4>)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_DFSDM1_Init+0xc8>)

}
 8000892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 8000896:	f001 b961 	b.w	8001b5c <HAL_DFSDM_FilterConfigRegChannel>
 800089a:	bf00      	nop
 800089c:	20003db4 	.word	0x20003db4
 80008a0:	40017500 	.word	0x40017500
 80008a4:	20003f00 	.word	0x20003f00
 80008a8:	40017580 	.word	0x40017580
 80008ac:	20003f54 	.word	0x20003f54
 80008b0:	40017400 	.word	0x40017400
 80008b4:	08005a49 	.word	0x08005a49
 80008b8:	20003e08 	.word	0x20003e08
 80008bc:	40017460 	.word	0x40017460
 80008c0:	00030008 	.word	0x00030008

080008c4 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 80008c6:	4c43      	ldr	r4, [pc, #268]	; (80009d4 <HAL_DFSDM_FilterMspInit+0x110>)
{
 80008c8:	b087      	sub	sp, #28
 80008ca:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d12a      	bne.n	8000928 <HAL_DFSDM_FilterMspInit+0x64>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80008d2:	4a41      	ldr	r2, [pc, #260]	; (80009d8 <HAL_DFSDM_FilterMspInit+0x114>)
 80008d4:	6813      	ldr	r3, [r2, #0]
 80008d6:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80008d8:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80008da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80008dc:	d109      	bne.n	80008f2 <HAL_DFSDM_FilterMspInit+0x2e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80008de:	4b3f      	ldr	r3, [pc, #252]	; (80009dc <HAL_DFSDM_FilterMspInit+0x118>)
 80008e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80008e6:	645a      	str	r2, [r3, #68]	; 0x44
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	9b00      	ldr	r3, [sp, #0]
    PE4     ------> DFSDM1_DATIN3
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008f2:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80008fc:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008fe:	4838      	ldr	r0, [pc, #224]	; (80009e0 <HAL_DFSDM_FilterMspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000900:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000908:	f001 fb32 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800090c:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090e:	a901      	add	r1, sp, #4
 8000910:	4834      	ldr	r0, [pc, #208]	; (80009e4 <HAL_DFSDM_FilterMspInit+0x120>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000912:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000914:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000918:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091e:	f001 fb27 	bl	8001f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000922:	6823      	ldr	r3, [r4, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000928:	682a      	ldr	r2, [r5, #0]
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <HAL_DFSDM_FilterMspInit+0x124>)
 800092c:	429a      	cmp	r2, r3
 800092e:	d125      	bne.n	800097c <HAL_DFSDM_FilterMspInit+0xb8>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000930:	4c2e      	ldr	r4, [pc, #184]	; (80009ec <HAL_DFSDM_FilterMspInit+0x128>)
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000932:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000936:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800093a:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800093c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000940:	3310      	adds	r3, #16
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000942:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000944:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800094a:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800094c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000950:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000952:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000956:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000958:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800095a:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 800095c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000960:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000962:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000964:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000966:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000968:	f001 f976 	bl	8001c58 <HAL_DMA_Init>
 800096c:	b118      	cbz	r0, 8000976 <HAL_DFSDM_FilterMspInit+0xb2>
    {
      _Error_Handler(__FILE__, __LINE__);
 800096e:	21bf      	movs	r1, #191	; 0xbf
 8000970:	481f      	ldr	r0, [pc, #124]	; (80009f0 <HAL_DFSDM_FilterMspInit+0x12c>)
 8000972:	f000 fb0d 	bl	8000f90 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000976:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000978:	62ac      	str	r4, [r5, #40]	; 0x28
 800097a:	63a5      	str	r5, [r4, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 800097c:	682a      	ldr	r2, [r5, #0]
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <HAL_DFSDM_FilterMspInit+0x130>)
 8000980:	429a      	cmp	r2, r3
 8000982:	d125      	bne.n	80009d0 <HAL_DFSDM_FilterMspInit+0x10c>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8000984:	4c1c      	ldr	r4, [pc, #112]	; (80009f8 <HAL_DFSDM_FilterMspInit+0x134>)
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000986:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 800098a:	f503 436e 	add.w	r3, r3, #60928	; 0xee00
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 800098e:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8000994:	33a8      	adds	r3, #168	; 0xa8
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000996:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000998:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800099a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 800099e:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80009a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009a4:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80009a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80009aa:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ac:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80009ae:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009b4:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b6:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009b8:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009ba:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80009bc:	f001 f94c 	bl	8001c58 <HAL_DMA_Init>
 80009c0:	b118      	cbz	r0, 80009ca <HAL_DFSDM_FilterMspInit+0x106>
    {
      _Error_Handler(__FILE__, __LINE__);
 80009c2:	21d6      	movs	r1, #214	; 0xd6
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <HAL_DFSDM_FilterMspInit+0x12c>)
 80009c6:	f000 fae3 	bl	8000f90 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 80009ca:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 80009cc:	62ac      	str	r4, [r5, #40]	; 0x28
 80009ce:	63a5      	str	r5, [r4, #56]	; 0x38
  }

}
 80009d0:	b007      	add	sp, #28
 80009d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d4:	2000002c 	.word	0x2000002c
 80009d8:	20000030 	.word	0x20000030
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	40017500 	.word	0x40017500
 80009ec:	20003ea0 	.word	0x20003ea0
 80009f0:	08005a49 	.word	0x08005a49
 80009f4:	40017580 	.word	0x40017580
 80009f8:	20003e40 	.word	0x20003e40

080009fc <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80009fc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 80009fe:	4c19      	ldr	r4, [pc, #100]	; (8000a64 <HAL_DFSDM_ChannelMspInit+0x68>)
{
 8000a00:	b086      	sub	sp, #24
  if(DFSDM1_Init == 0)
 8000a02:	6823      	ldr	r3, [r4, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d12a      	bne.n	8000a5e <HAL_DFSDM_ChannelMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8000a0a:	6813      	ldr	r3, [r2, #0]
 8000a0c:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a0e:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a12:	d109      	bne.n	8000a28 <HAL_DFSDM_ChannelMspInit+0x2c>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_DFSDM_ChannelMspInit+0x70>)
 8000a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a18:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a1c:	645a      	str	r2, [r3, #68]	; 0x44
 8000a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	9b00      	ldr	r3, [sp, #0]
    PE4     ------> DFSDM1_DATIN3
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a28:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a30:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000a32:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a34:	480e      	ldr	r0, [pc, #56]	; (8000a70 <HAL_DFSDM_ChannelMspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000a36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3e:	f001 fa97 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a42:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a44:	a901      	add	r1, sp, #4
 8000a46:	480b      	ldr	r0, [pc, #44]	; (8000a74 <HAL_DFSDM_ChannelMspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a48:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000a4a:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000a4e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	f001 fa8c 	bl	8001f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	6023      	str	r3, [r4, #0]
  }
}
 8000a5e:	b006      	add	sp, #24
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	bf00      	nop
 8000a64:	2000002c 	.word	0x2000002c
 8000a68:	20000030 	.word	0x20000030
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_DMA_Init+0x60>)
{
 8000a7a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000a7e:	2105      	movs	r1, #5
 8000a80:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a82:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000a86:	631a      	str	r2, [r3, #48]	; 0x30
 8000a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000a8e:	9200      	str	r2, [sp, #0]
 8000a90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a94:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000a98:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000a9a:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000aa6:	f000 feb5 	bl	8001814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000aaa:	200d      	movs	r0, #13
 8000aac:	f000 feea 	bl	8001884 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	2038      	movs	r0, #56	; 0x38
 8000ab6:	f000 fead 	bl	8001814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aba:	2038      	movs	r0, #56	; 0x38
 8000abc:	f000 fee2 	bl	8001884 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2105      	movs	r1, #5
 8000ac4:	2039      	movs	r0, #57	; 0x39
 8000ac6:	f000 fea5 	bl	8001814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000aca:	2039      	movs	r0, #57	; 0x39
 8000acc:	f000 feda 	bl	8001884 <HAL_NVIC_EnableIRQ>

}
 8000ad0:	b003      	add	sp, #12
 8000ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <StartshuntTask>:
  /* USER CODE END StartenchallTask */
}

/* StartshuntTask function */
__weak void StartshuntTask(void const * argument)
{
 8000adc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartshuntTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(5);
 8000ade:	2005      	movs	r0, #5
 8000ae0:	f003 fc01 	bl	80042e6 <osDelay>
 8000ae4:	e7fb      	b.n	8000ade <StartshuntTask+0x2>
	...

08000ae8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aea:	b0ad      	sub	sp, #180	; 0xb4
  osMutexDef(buzzerMutex);
 8000aec:	2500      	movs	r5, #0
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000aee:	4c48      	ldr	r4, [pc, #288]	; (8000c10 <MX_FREERTOS_Init+0x128>)
  osMutexDef(buzzerMutex);
 8000af0:	a82c      	add	r0, sp, #176	; 0xb0
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000af2:	ae09      	add	r6, sp, #36	; 0x24
 8000af4:	4627      	mov	r7, r4
  osMutexDef(buzzerMutex);
 8000af6:	f840 5dac 	str.w	r5, [r0, #-172]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 8000afa:	f003 fbfc 	bl	80042f6 <osMutexCreate>
 8000afe:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <MX_FREERTOS_Init+0x12c>)
 8000b00:	6018      	str	r0, [r3, #0]
  osMutexDef(encdataMutex);
 8000b02:	a82c      	add	r0, sp, #176	; 0xb0
 8000b04:	f840 5da8 	str.w	r5, [r0, #-168]!
  encdataMutexHandle = osMutexCreate(osMutex(encdataMutex));
 8000b08:	f003 fbf5 	bl	80042f6 <osMutexCreate>
 8000b0c:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <MX_FREERTOS_Init+0x130>)
 8000b0e:	6018      	str	r0, [r3, #0]
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000b10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000b12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b14:	683b      	ldr	r3, [r7, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000b16:	4629      	mov	r1, r5
 8000b18:	a809      	add	r0, sp, #36	; 0x24
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000b1a:	f104 0714 	add.w	r7, r4, #20
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000b1e:	6033      	str	r3, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000b20:	f003 fbc9 	bl	80042b6 <osThreadCreate>
 8000b24:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <MX_FREERTOS_Init+0x134>)
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000b26:	ae0e      	add	r6, sp, #56	; 0x38
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000b28:	6018      	str	r0, [r3, #0]
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000b2a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000b2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b2e:	683b      	ldr	r3, [r7, #0]
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 8000b30:	4629      	mov	r1, r5
 8000b32:	a80e      	add	r0, sp, #56	; 0x38
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000b34:	f104 0728 	add.w	r7, r4, #40	; 0x28
  osThreadDef(shuntTask, StartshuntTask, osPriorityBelowNormal, 0, 128);
 8000b38:	6033      	str	r3, [r6, #0]
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 8000b3a:	f003 fbbc 	bl	80042b6 <osThreadCreate>
 8000b3e:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <MX_FREERTOS_Init+0x138>)
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000b40:	ae13      	add	r6, sp, #76	; 0x4c
  shuntTaskHandle = osThreadCreate(osThread(shuntTask), NULL);
 8000b42:	6018      	str	r0, [r3, #0]
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000b44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000b46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b48:	683b      	ldr	r3, [r7, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000b4a:	4629      	mov	r1, r5
 8000b4c:	a813      	add	r0, sp, #76	; 0x4c
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000b4e:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000b52:	6033      	str	r3, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000b54:	f003 fbaf 	bl	80042b6 <osThreadCreate>
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <MX_FREERTOS_Init+0x13c>)
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000b5a:	ae18      	add	r6, sp, #96	; 0x60
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000b5c:	6018      	str	r0, [r3, #0]
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000b5e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000b60:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b62:	683b      	ldr	r3, [r7, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000b64:	4629      	mov	r1, r5
 8000b66:	a818      	add	r0, sp, #96	; 0x60
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000b68:	f104 0750 	add.w	r7, r4, #80	; 0x50
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000b6c:	6033      	str	r3, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000b6e:	f003 fba2 	bl	80042b6 <osThreadCreate>
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <MX_FREERTOS_Init+0x140>)
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000b74:	ae1d      	add	r6, sp, #116	; 0x74
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000b76:	6018      	str	r0, [r3, #0]
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000b78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000b7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b7c:	683b      	ldr	r3, [r7, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000b7e:	4629      	mov	r1, r5
 8000b80:	a81d      	add	r0, sp, #116	; 0x74
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000b82:	f104 0764 	add.w	r7, r4, #100	; 0x64
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000b86:	6033      	str	r3, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000b88:	f003 fb95 	bl	80042b6 <osThreadCreate>
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <MX_FREERTOS_Init+0x144>)
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000b8e:	ae22      	add	r6, sp, #136	; 0x88
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000b90:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000b92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000b94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b96:	683b      	ldr	r3, [r7, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000b98:	4629      	mov	r1, r5
 8000b9a:	a822      	add	r0, sp, #136	; 0x88
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000b9c:	f104 0778 	add.w	r7, r4, #120	; 0x78
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000ba0:	6033      	str	r3, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000ba2:	f003 fb88 	bl	80042b6 <osThreadCreate>
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_FREERTOS_Init+0x148>)
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000ba8:	ae27      	add	r6, sp, #156	; 0x9c
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000baa:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000bac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000bae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bb0:	683b      	ldr	r3, [r7, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000bb2:	4629      	mov	r1, r5
 8000bb4:	a827      	add	r0, sp, #156	; 0x9c
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000bb6:	6033      	str	r3, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000bb8:	f003 fb7d 	bl	80042b6 <osThreadCreate>
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000bbc:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_FREERTOS_Init+0x14c>)
 8000bc2:	6018      	str	r0, [r3, #0]
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000bc4:	ab03      	add	r3, sp, #12
 8000bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bca:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000bce:	4629      	mov	r1, r5
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 fb93 	bl	80042fc <osMessageCreate>
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000bd6:	f104 0294 	add.w	r2, r4, #148	; 0x94
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_FREERTOS_Init+0x150>)
  osMessageQDef(enchallQueue, 1, ENCHD);
 8000bdc:	349c      	adds	r4, #156	; 0x9c
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000bde:	6018      	str	r0, [r3, #0]
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000be0:	ab05      	add	r3, sp, #20
 8000be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be6:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8000bea:	4629      	mov	r1, r5
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 fb85 	bl	80042fc <osMessageCreate>
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_FREERTOS_Init+0x154>)
 8000bf4:	6018      	str	r0, [r3, #0]
  osMessageQDef(enchallQueue, 1, ENCHD);
 8000bf6:	ab07      	add	r3, sp, #28
 8000bf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bfc:	e883 0003 	stmia.w	r3, {r0, r1}
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 8000c00:	4629      	mov	r1, r5
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 fb7a 	bl	80042fc <osMessageCreate>
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_FREERTOS_Init+0x158>)
 8000c0a:	6018      	str	r0, [r3, #0]
}
 8000c0c:	b02d      	add	sp, #180	; 0xb4
 8000c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c10:	0800598c 	.word	0x0800598c
 8000c14:	20003fa0 	.word	0x20003fa0
 8000c18:	20003fa8 	.word	0x20003fa8
 8000c1c:	20003f9c 	.word	0x20003f9c
 8000c20:	20003f90 	.word	0x20003f90
 8000c24:	20003fb0 	.word	0x20003fb0
 8000c28:	20003fac 	.word	0x20003fac
 8000c2c:	20003fb4 	.word	0x20003fb4
 8000c30:	20003f8c 	.word	0x20003f8c
 8000c34:	20003fb8 	.word	0x20003fb8
 8000c38:	20003f94 	.word	0x20003f94
 8000c3c:	20003f98 	.word	0x20003f98
 8000c40:	20003fa4 	.word	0x20003fa4

08000c44 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c44:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000c46:	210c      	movs	r1, #12
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c4a:	f042 0210 	orr.w	r2, r2, #16
{
 8000c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30
{
 8000c52:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000c58:	4c32      	ldr	r4, [pc, #200]	; (8000d24 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5a:	f002 0210 	and.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c5e:	4f32      	ldr	r7, [pc, #200]	; (8000d28 <MX_GPIO_Init+0xe4>)
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000c60:	4620      	mov	r0, r4
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8000c62:	4e32      	ldr	r6, [pc, #200]	; (8000d2c <MX_GPIO_Init+0xe8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c64:	9201      	str	r2, [sp, #4]
 8000c66:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c72:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000c76:	9202      	str	r2, [sp, #8]
 8000c78:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c7c:	f042 0204 	orr.w	r2, r2, #4
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
 8000c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c84:	f002 0204 	and.w	r2, r2, #4
 8000c88:	9203      	str	r2, [sp, #12]
 8000c8a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c8e:	f042 0201 	orr.w	r2, r2, #1
 8000c92:	631a      	str	r2, [r3, #48]	; 0x30
 8000c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c96:	f002 0201 	and.w	r2, r2, #1
 8000c9a:	9204      	str	r2, [sp, #16]
 8000c9c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ca0:	f042 0202 	orr.w	r2, r2, #2
 8000ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ca8:	f002 0202 	and.w	r2, r2, #2
 8000cac:	9205      	str	r2, [sp, #20]
 8000cae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cb2:	f042 0208 	orr.w	r2, r2, #8
 8000cb6:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	9306      	str	r3, [sp, #24]
 8000cc2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000cc4:	f001 fa3e 	bl	8002144 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cc8:	4638      	mov	r0, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd0:	f001 fa38 	bl	8002144 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	2140      	movs	r1, #64	; 0x40
 8000cda:	f001 fa33 	bl	8002144 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000cde:	230c      	movs	r3, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce0:	a907      	add	r1, sp, #28
 8000ce2:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000ce4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ce6:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	9509      	str	r5, [sp, #36]	; 0x24

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cec:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf0:	f001 f93e 	bl	8001f70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	a907      	add	r1, sp, #28
 8000cfa:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cfe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d00:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d04:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f001 f933 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000d0a:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	a907      	add	r1, sp, #28
 8000d0e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000d12:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d14:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d16:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f001 f92a 	bl	8001f70 <HAL_GPIO_Init>

}
 8000d1c:	b00d      	add	sp, #52	; 0x34
 8000d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000d30:	b508      	push	{r3, lr}

  hi2c4.Instance = I2C4;
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <MX_I2C4_Init+0x58>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d34:	2201      	movs	r2, #1
  hi2c4.Init.Timing = 0x20404768;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_I2C4_Init+0x5c>)
 8000d38:	4915      	ldr	r1, [pc, #84]	; (8000d90 <MX_I2C4_Init+0x60>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3a:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.Timing = 0x20404768;
 8000d3c:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c4.Init.OwnAddress1 = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	6083      	str	r3, [r0, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d44:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d46:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d48:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4a:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d4e:	f001 fa02 	bl	8002156 <HAL_I2C_Init>
 8000d52:	b118      	cbz	r0, 8000d5c <MX_I2C4_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d54:	214c      	movs	r1, #76	; 0x4c
 8000d56:	480f      	ldr	r0, [pc, #60]	; (8000d94 <MX_I2C4_Init+0x64>)
 8000d58:	f000 f91a 	bl	8000f90 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	480a      	ldr	r0, [pc, #40]	; (8000d88 <MX_I2C4_Init+0x58>)
 8000d60:	f001 fa4a 	bl	80021f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d64:	b118      	cbz	r0, 8000d6e <MX_I2C4_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d66:	2153      	movs	r1, #83	; 0x53
 8000d68:	480a      	ldr	r0, [pc, #40]	; (8000d94 <MX_I2C4_Init+0x64>)
 8000d6a:	f000 f911 	bl	8000f90 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_I2C4_Init+0x58>)
 8000d72:	f001 fa67 	bl	8002244 <HAL_I2CEx_ConfigDigitalFilter>
 8000d76:	b128      	cbz	r0, 8000d84 <MX_I2C4_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d78:	215a      	movs	r1, #90	; 0x5a
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_I2C4_Init+0x64>)
  }

}
 8000d7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000d80:	f000 b906 	b.w	8000f90 <_Error_Handler>
 8000d84:	bd08      	pop	{r3, pc}
 8000d86:	bf00      	nop
 8000d88:	20003fbc 	.word	0x20003fbc
 8000d8c:	20404768 	.word	0x20404768
 8000d90:	40006000 	.word	0x40006000
 8000d94:	08005ab5 	.word	0x08005ab5

08000d98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C4)
 8000d9a:	6802      	ldr	r2, [r0, #0]
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_I2C_MspInit+0x44>)
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d119      	bne.n	8000dd6 <HAL_I2C_MspInit+0x3e>
  
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000da2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000da8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000daa:	2312      	movs	r3, #18
 8000dac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000db6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db8:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000dbc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbe:	f001 f8d7 	bl	8001f70 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_I2C_MspInit+0x4c>)
 8000dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000dca:	641a      	str	r2, [r3, #64]	; 0x40
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000dd6:	b007      	add	sp, #28
 8000dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ddc:	40006000 	.word	0x40006000
 8000de0:	40020c00 	.word	0x40020c00
 8000de4:	40023800 	.word	0x40023800

08000de8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <SystemClock_Config+0xc8>)
 8000dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
{
 8000df4:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df8:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dfa:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dfc:	2701      	movs	r7, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e02:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e14:	9707      	str	r7, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e1c:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e26:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e28:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e2e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e30:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e32:	23d8      	movs	r3, #216	; 0xd8
 8000e34:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	f001 fae5 	bl	8002404 <HAL_RCC_OscConfig>
 8000e3a:	b100      	cbz	r0, 8000e3e <SystemClock_Config+0x56>
 8000e3c:	e7fe      	b.n	8000e3c <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e3e:	f001 faa9 	bl	8002394 <HAL_PWREx_EnableOverDrive>
 8000e42:	b100      	cbz	r0, 8000e46 <SystemClock_Config+0x5e>
 8000e44:	e7fe      	b.n	8000e44 <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	260f      	movs	r6, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e4e:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e50:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e56:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e58:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e5c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e5e:	f001 fc8f 	bl	8002780 <HAL_RCC_ClockConfig>
 8000e62:	b100      	cbz	r0, 8000e66 <SystemClock_Config+0x7e>
 8000e64:	e7fe      	b.n	8000e64 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <SystemClock_Config+0xd0>)
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000e68:	9030      	str	r0, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000e6a:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000e6c:	2310      	movs	r3, #16
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e6e:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e70:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000e72:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000e74:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000e76:	9725      	str	r7, [sp, #148]	; 0x94
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000e78:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8000e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e7e:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e80:	f001 fd52 	bl	8002928 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4605      	mov	r5, r0
 8000e86:	b100      	cbz	r0, 8000e8a <SystemClock_Config+0xa2>
 8000e88:	e7fe      	b.n	8000e88 <SystemClock_Config+0xa0>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e8a:	f001 fd09 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e96:	f000 fd01 	bl	800189c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f000 fd14 	bl	80018c8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000ea0:	462a      	mov	r2, r5
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 fcb4 	bl	8001814 <HAL_NVIC_SetPriority>
}
 8000eac:	b039      	add	sp, #228	; 0xe4
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000
 8000eb8:	08022340 	.word	0x08022340

08000ebc <main>:
{
 8000ebc:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ec2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <main+0xbc>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ece:	695a      	ldr	r2, [r3, #20]
 8000ed0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ed4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eda:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8000ede:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ee6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000eea:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000eee:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ef2:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000ef6:	07a5      	lsls	r5, r4, #30
 8000ef8:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000efa:	ea02 0e06 	and.w	lr, r2, r6
 8000efe:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f00:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f02:	ea4e 0700 	orr.w	r7, lr, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8000f06:	3901      	subs	r1, #1
 8000f08:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f0c:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 8000f10:	1c4f      	adds	r7, r1, #1
 8000f12:	d1f6      	bne.n	8000f02 <main+0x46>
 8000f14:	3a20      	subs	r2, #32
    } while(sets--);
 8000f16:	f112 0f20 	cmn.w	r2, #32
 8000f1a:	d1ee      	bne.n	8000efa <main+0x3e>
 8000f1c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f20:	695a      	ldr	r2, [r3, #20]
 8000f22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f2c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f30:	f000 fc30 	bl	8001794 <HAL_Init>
  SystemClock_Config();
 8000f34:	f7ff ff58 	bl	8000de8 <SystemClock_Config>
  MX_GPIO_Init();
 8000f38:	f7ff fe84 	bl	8000c44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3c:	f7ff fd9c 	bl	8000a78 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000f40:	f7ff fc4c 	bl	80007dc <MX_DFSDM1_Init>
  MX_I2C4_Init();
 8000f44:	f7ff fef4 	bl	8000d30 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000f48:	f000 f824 	bl	8000f94 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f4c:	f000 f96c 	bl	8001228 <MX_TIM1_Init>
  MX_UART4_Init();
 8000f50:	f000 fa46 	bl	80013e0 <MX_UART4_Init>
  MX_UART8_Init();
 8000f54:	f000 fa6e 	bl	8001434 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000f58:	f000 fa92 	bl	8001480 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f5c:	f000 fab6 	bl	80014cc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000f60:	f000 fb88 	bl	8001674 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8000f64:	f000 f9ea 	bl	800133c <MX_TIM2_Init>
  SystemInitialization();
 8000f68:	f7ff fbb0 	bl	80006cc <SystemInitialization>
  MX_FREERTOS_Init();
 8000f6c:	f7ff fdbc 	bl	8000ae8 <MX_FREERTOS_Init>
  osKernelStart();
 8000f70:	f003 f99c 	bl	80042ac <osKernelStart>
 8000f74:	e7fe      	b.n	8000f74 <main+0xb8>
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000f7c:	6802      	ldr	r2, [r0, #0]
 8000f7e:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d101      	bne.n	8000f88 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f84:	f000 bc18 	b.w	80017b8 <HAL_IncTick>
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40000800 	.word	0x40000800

08000f90 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000f90:	e7fe      	b.n	8000f90 <_Error_Handler>
	...

08000f94 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4912      	ldr	r1, [pc, #72]	; (8000fe4 <MX_SPI1_Init+0x50>)
{
 8000f9c:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa2:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fa8:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fac:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fae:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000fb0:	2230      	movs	r2, #48	; 0x30
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb2:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb6:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000fb8:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000fba:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fbc:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fbe:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fc2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc4:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8000fc6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fca:	f001 ff3b 	bl	8002e44 <HAL_SPI_Init>
 8000fce:	b128      	cbz	r0, 8000fdc <MX_SPI1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000fd0:	2151      	movs	r1, #81	; 0x51
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_SPI1_Init+0x54>)
  }

}
 8000fd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000fd8:	f7ff bfda 	b.w	8000f90 <_Error_Handler>
 8000fdc:	bd08      	pop	{r3, pc}
 8000fde:	bf00      	nop
 8000fe0:	20004008 	.word	0x20004008
 8000fe4:	40013000 	.word	0x40013000
 8000fe8:	08005ac8 	.word	0x08005ac8

08000fec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8000fec:	6802      	ldr	r2, [r0, #0]
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_SPI_MspInit+0x58>)
 8000ff0:	429a      	cmp	r2, r3
{
 8000ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff4:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI1)
 8000ff6:	d122      	bne.n	800103e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff8:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001004:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001006:	a901      	add	r1, sp, #4
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800100a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800100e:	645a      	str	r2, [r3, #68]	; 0x44
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001020:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001022:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001024:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001026:	f000 ffa3 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800102a:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	a901      	add	r1, sp, #4
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001030:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001038:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f000 ff99 	bl	8001f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800103e:	b007      	add	sp, #28
 8001040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001042:	bf00      	nop
 8001044:	40013000 	.word	0x40013000
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40020400 	.word	0x40020400

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 fbcc 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	f06f 000b 	mvn.w	r0, #11
 800105e:	4611      	mov	r1, r2
 8001060:	f000 fbd8 	bl	8001814 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	f06f 000a 	mvn.w	r0, #10
 800106a:	4611      	mov	r1, r2
 800106c:	f000 fbd2 	bl	8001814 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	f06f 0009 	mvn.w	r0, #9
 8001076:	4611      	mov	r1, r2
 8001078:	f000 fbcc 	bl	8001814 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	f06f 0004 	mvn.w	r0, #4
 8001082:	4611      	mov	r1, r2
 8001084:	f000 fbc6 	bl	8001814 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	f06f 0003 	mvn.w	r0, #3
 800108e:	4611      	mov	r1, r2
 8001090:	f000 fbc0 	bl	8001814 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	210f      	movs	r1, #15
 8001098:	f06f 0001 	mvn.w	r0, #1
 800109c:	f000 fbba 	bl	8001814 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80010ac:	f000 bbb2 	b.w	8001814 <HAL_NVIC_SetPriority>

080010b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80010b2:	4601      	mov	r1, r0
{
 80010b4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80010b6:	2200      	movs	r2, #0
 80010b8:	201e      	movs	r0, #30
 80010ba:	f000 fbab 	bl	8001814 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80010be:	201e      	movs	r0, #30
 80010c0:	f000 fbe0 	bl	8001884 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c6:	a901      	add	r1, sp, #4
 80010c8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 80010ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80010cc:	4c13      	ldr	r4, [pc, #76]	; (800111c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 80010ce:	f042 0204 	orr.w	r2, r2, #4
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010de:	f001 fc05 	bl	80028ec <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010e2:	f001 fbe3 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010e8:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 80010ea:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80010ec:	f240 33e7 	movw	r3, #999	; 0x3e7
 80010f0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_InitTick+0x74>)
 80010f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80010f8:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 80010fa:	2300      	movs	r3, #0
  htim4.Init.Prescaler = uwPrescalerValue;
 80010fc:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80010fe:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8001100:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001102:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001104:	f002 f83e 	bl	8003184 <HAL_TIM_Base_Init>
 8001108:	b920      	cbnz	r0, 8001114 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800110a:	4620      	mov	r0, r4
 800110c:	f001 ff12 	bl	8002f34 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001110:	b008      	add	sp, #32
 8001112:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
 8001116:	e7fb      	b.n	8001110 <HAL_InitTick+0x60>
 8001118:	40023800 	.word	0x40023800
 800111c:	2000406c 	.word	0x2000406c
 8001120:	40000800 	.word	0x40000800
 8001124:	000f4240 	.word	0x000f4240

08001128 <NMI_Handler>:
 8001128:	4770      	bx	lr

0800112a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800112a:	e7fe      	b.n	800112a <HardFault_Handler>

0800112c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800112c:	e7fe      	b.n	800112c <MemManage_Handler>

0800112e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800112e:	e7fe      	b.n	800112e <BusFault_Handler>

08001130 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler>

08001132 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001132:	4770      	bx	lr

08001134 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001134:	f003 b8e6 	b.w	8004304 <osSystickHandler>

08001138 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001138:	4801      	ldr	r0, [pc, #4]	; (8001140 <DMA1_Stream2_IRQHandler+0x8>)
 800113a:	f000 be5b 	b.w	8001df4 <HAL_DMA_IRQHandler>
 800113e:	bf00      	nop
 8001140:	2000412c 	.word	0x2000412c

08001144 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001144:	4801      	ldr	r0, [pc, #4]	; (800114c <TIM4_IRQHandler+0x8>)
 8001146:	f001 bf05 	b.w	8002f54 <HAL_TIM_IRQHandler>
 800114a:	bf00      	nop
 800114c:	2000406c 	.word	0x2000406c

08001150 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001150:	4801      	ldr	r0, [pc, #4]	; (8001158 <UART4_IRQHandler+0x8>)
 8001152:	f002 bcb5 	b.w	8003ac0 <HAL_UART_IRQHandler>
 8001156:	bf00      	nop
 8001158:	200042dc 	.word	0x200042dc

0800115c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800115c:	4801      	ldr	r0, [pc, #4]	; (8001164 <DMA2_Stream0_IRQHandler+0x8>)
 800115e:	f000 be49 	b.w	8001df4 <HAL_DMA_IRQHandler>
 8001162:	bf00      	nop
 8001164:	20003ea0 	.word	0x20003ea0

08001168 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001168:	4801      	ldr	r0, [pc, #4]	; (8001170 <DMA2_Stream1_IRQHandler+0x8>)
 800116a:	f000 be43 	b.w	8001df4 <HAL_DMA_IRQHandler>
 800116e:	bf00      	nop
 8001170:	20003e40 	.word	0x20003e40

08001174 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8001174:	6803      	ldr	r3, [r0, #0]
{
 8001176:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_TIM_Base_MspInit+0x40>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d10b      	bne.n	8001196 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_TIM_Base_MspInit+0x44>)
 8001180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	645a      	str	r2, [r3, #68]	; 0x44
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001192:	b002      	add	sp, #8
 8001194:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 8001196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800119a:	d1fa      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80011a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a2:	f042 0201 	orr.w	r2, r2, #1
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	9b01      	ldr	r3, [sp, #4]
}
 80011b2:	e7ee      	b.n	8001192 <HAL_TIM_Base_MspInit+0x1e>
 80011b4:	40010000 	.word	0x40010000
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80011bc:	6803      	ldr	r3, [r0, #0]
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_TIM_MspPostInit+0x60>)
 80011c0:	4293      	cmp	r3, r2
{
 80011c2:	b570      	push	{r4, r5, r6, lr}
 80011c4:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 80011c6:	d119      	bne.n	80011fc <HAL_TIM_MspPostInit+0x40>
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011ca:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011ce:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	a901      	add	r1, sp, #4
 80011d2:	4813      	ldr	r0, [pc, #76]	; (8001220 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011dc:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f000 fec7 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80011e2:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e6:	a901      	add	r1, sp, #4
 80011e8:	480e      	ldr	r0, [pc, #56]	; (8001224 <HAL_TIM_MspPostInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80011ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011f2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f000 febc 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011f8:	b006      	add	sp, #24
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM2)
 80011fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001200:	d1fa      	bne.n	80011f8 <HAL_TIM_MspPostInit+0x3c>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	a901      	add	r1, sp, #4
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800120a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001214:	2301      	movs	r3, #1
 8001216:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001218:	9305      	str	r3, [sp, #20]
 800121a:	e7eb      	b.n	80011f4 <HAL_TIM_MspPostInit+0x38>
 800121c:	40010000 	.word	0x40010000
 8001220:	40020000 	.word	0x40020000
 8001224:	40021000 	.word	0x40021000

08001228 <MX_TIM1_Init>:
  htim1.Instance = TIM1;
 8001228:	4841      	ldr	r0, [pc, #260]	; (8001330 <MX_TIM1_Init+0x108>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800122a:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 800122c:	4b41      	ldr	r3, [pc, #260]	; (8001334 <MX_TIM1_Init+0x10c>)
{
 800122e:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 8001230:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001232:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001234:	6082      	str	r2, [r0, #8]
  htim1.Init.Period = 21600;
 8001236:	f245 4260 	movw	r2, #21600	; 0x5460
{
 800123a:	b09a      	sub	sp, #104	; 0x68
  htim1.Init.Prescaler = 0;
 800123c:	6043      	str	r3, [r0, #4]
  htim1.Init.Period = 21600;
 800123e:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001242:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001246:	f001 ff9d 	bl	8003184 <HAL_TIM_Base_Init>
 800124a:	b118      	cbz	r0, 8001254 <MX_TIM1_Init+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 800124c:	214d      	movs	r1, #77	; 0x4d
 800124e:	483a      	ldr	r0, [pc, #232]	; (8001338 <MX_TIM1_Init+0x110>)
 8001250:	f7ff fe9e 	bl	8000f90 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	a91a      	add	r1, sp, #104	; 0x68
 8001256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800125a:	4835      	ldr	r0, [pc, #212]	; (8001330 <MX_TIM1_Init+0x108>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125c:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001260:	f002 f88a 	bl	8003378 <HAL_TIM_ConfigClockSource>
 8001264:	b118      	cbz	r0, 800126e <MX_TIM1_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 8001266:	2153      	movs	r1, #83	; 0x53
 8001268:	4833      	ldr	r0, [pc, #204]	; (8001338 <MX_TIM1_Init+0x110>)
 800126a:	f7ff fe91 	bl	8000f90 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800126e:	4830      	ldr	r0, [pc, #192]	; (8001330 <MX_TIM1_Init+0x108>)
 8001270:	f001 ffa2 	bl	80031b8 <HAL_TIM_PWM_Init>
 8001274:	b118      	cbz	r0, 800127e <MX_TIM1_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 8001276:	2158      	movs	r1, #88	; 0x58
 8001278:	482f      	ldr	r0, [pc, #188]	; (8001338 <MX_TIM1_Init+0x110>)
 800127a:	f7ff fe89 	bl	8000f90 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001280:	a901      	add	r1, sp, #4
 8001282:	482b      	ldr	r0, [pc, #172]	; (8001330 <MX_TIM1_Init+0x108>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001286:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128a:	f002 f997 	bl	80035bc <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	b118      	cbz	r0, 8001298 <MX_TIM1_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
 8001290:	2160      	movs	r1, #96	; 0x60
 8001292:	4829      	ldr	r0, [pc, #164]	; (8001338 <MX_TIM1_Init+0x110>)
 8001294:	f7ff fe7c 	bl	8000f90 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001298:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129a:	2400      	movs	r4, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129c:	a908      	add	r1, sp, #32
 800129e:	4824      	ldr	r0, [pc, #144]	; (8001330 <MX_TIM1_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a0:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 5800;
 80012a2:	f241 63a8 	movw	r3, #5800	; 0x16a8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a6:	4622      	mov	r2, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a8:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.Pulse = 5800;
 80012aa:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ac:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ae:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b0:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b2:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b4:	f002 f9ee 	bl	8003694 <HAL_TIM_PWM_ConfigChannel>
 80012b8:	b118      	cbz	r0, 80012c2 <MX_TIM1_Init+0x9a>
    _Error_Handler(__FILE__, __LINE__);
 80012ba:	216c      	movs	r1, #108	; 0x6c
 80012bc:	481e      	ldr	r0, [pc, #120]	; (8001338 <MX_TIM1_Init+0x110>)
 80012be:	f7ff fe67 	bl	8000f90 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c2:	2204      	movs	r2, #4
 80012c4:	a908      	add	r1, sp, #32
 80012c6:	481a      	ldr	r0, [pc, #104]	; (8001330 <MX_TIM1_Init+0x108>)
  sConfigOC.Pulse = 0;
 80012c8:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ca:	f002 f9e3 	bl	8003694 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	b118      	cbz	r0, 80012d8 <MX_TIM1_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 80012d0:	2172      	movs	r1, #114	; 0x72
 80012d2:	4819      	ldr	r0, [pc, #100]	; (8001338 <MX_TIM1_Init+0x110>)
 80012d4:	f7ff fe5c 	bl	8000f90 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d8:	2208      	movs	r2, #8
 80012da:	a908      	add	r1, sp, #32
 80012dc:	4814      	ldr	r0, [pc, #80]	; (8001330 <MX_TIM1_Init+0x108>)
 80012de:	f002 f9d9 	bl	8003694 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	b118      	cbz	r0, 80012ec <MX_TIM1_Init+0xc4>
    _Error_Handler(__FILE__, __LINE__);
 80012e4:	2177      	movs	r1, #119	; 0x77
 80012e6:	4814      	ldr	r0, [pc, #80]	; (8001338 <MX_TIM1_Init+0x110>)
 80012e8:	f7ff fe52 	bl	8000f90 <_Error_Handler>
  sBreakDeadTimeConfig.DeadTime = 2;
 80012ec:	2202      	movs	r2, #2
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ee:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012f0:	a90f      	add	r1, sp, #60	; 0x3c
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <MX_TIM1_Init+0x108>)
  sBreakDeadTimeConfig.DeadTime = 2;
 80012f4:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012fa:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012fc:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012fe:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001300:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001302:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001308:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800130a:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 800130c:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800130e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001312:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001314:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001316:	f002 f977 	bl	8003608 <HAL_TIMEx_ConfigBreakDeadTime>
 800131a:	b118      	cbz	r0, 8001324 <MX_TIM1_Init+0xfc>
    _Error_Handler(__FILE__, __LINE__);
 800131c:	2187      	movs	r1, #135	; 0x87
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <MX_TIM1_Init+0x110>)
 8001320:	f7ff fe36 	bl	8000f90 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <MX_TIM1_Init+0x108>)
 8001326:	f7ff ff49 	bl	80011bc <HAL_TIM_MspPostInit>
}
 800132a:	b01a      	add	sp, #104	; 0x68
 800132c:	bd10      	pop	{r4, pc}
 800132e:	bf00      	nop
 8001330:	200040ac 	.word	0x200040ac
 8001334:	40010000 	.word	0x40010000
 8001338:	08005adb 	.word	0x08005adb

0800133c <MX_TIM2_Init>:
  htim2.Instance = TIM2;
 800133c:	4826      	ldr	r0, [pc, #152]	; (80013d8 <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 107;
 800133e:	236b      	movs	r3, #107	; 0x6b
 8001340:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 50000;
 8001344:	f24c 3250 	movw	r2, #50000	; 0xc350
{
 8001348:	b500      	push	{lr}
  htim2.Init.Prescaler = 107;
 800134a:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	2300      	movs	r3, #0
{
 8001350:	b08f      	sub	sp, #60	; 0x3c
  htim2.Init.Period = 50000;
 8001352:	60c2      	str	r2, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800135c:	f001 ff12 	bl	8003184 <HAL_TIM_Base_Init>
 8001360:	b118      	cbz	r0, 800136a <MX_TIM2_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 8001362:	219c      	movs	r1, #156	; 0x9c
 8001364:	481d      	ldr	r0, [pc, #116]	; (80013dc <MX_TIM2_Init+0xa0>)
 8001366:	f7ff fe13 	bl	8000f90 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136a:	a90e      	add	r1, sp, #56	; 0x38
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001370:	4819      	ldr	r0, [pc, #100]	; (80013d8 <MX_TIM2_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001376:	f001 ffff 	bl	8003378 <HAL_TIM_ConfigClockSource>
 800137a:	b118      	cbz	r0, 8001384 <MX_TIM2_Init+0x48>
    _Error_Handler(__FILE__, __LINE__);
 800137c:	21a2      	movs	r1, #162	; 0xa2
 800137e:	4817      	ldr	r0, [pc, #92]	; (80013dc <MX_TIM2_Init+0xa0>)
 8001380:	f7ff fe06 	bl	8000f90 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001384:	4814      	ldr	r0, [pc, #80]	; (80013d8 <MX_TIM2_Init+0x9c>)
 8001386:	f001 ff17 	bl	80031b8 <HAL_TIM_PWM_Init>
 800138a:	b118      	cbz	r0, 8001394 <MX_TIM2_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 800138c:	21a7      	movs	r1, #167	; 0xa7
 800138e:	4813      	ldr	r0, [pc, #76]	; (80013dc <MX_TIM2_Init+0xa0>)
 8001390:	f7ff fdfe 	bl	8000f90 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001396:	4669      	mov	r1, sp
 8001398:	480f      	ldr	r0, [pc, #60]	; (80013d8 <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139e:	f002 f90d 	bl	80035bc <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	b118      	cbz	r0, 80013ac <MX_TIM2_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
 80013a4:	21ae      	movs	r1, #174	; 0xae
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_TIM2_Init+0xa0>)
 80013a8:	f7ff fdf2 	bl	8000f90 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80013ac:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ae:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b0:	a907      	add	r1, sp, #28
 80013b2:	4809      	ldr	r0, [pc, #36]	; (80013d8 <MX_TIM2_Init+0x9c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b4:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80013b6:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b8:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ba:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013bc:	f002 f96a 	bl	8003694 <HAL_TIM_PWM_ConfigChannel>
 80013c0:	b118      	cbz	r0, 80013ca <MX_TIM2_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 80013c2:	21b7      	movs	r1, #183	; 0xb7
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_TIM2_Init+0xa0>)
 80013c6:	f7ff fde3 	bl	8000f90 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80013ca:	4803      	ldr	r0, [pc, #12]	; (80013d8 <MX_TIM2_Init+0x9c>)
 80013cc:	f7ff fef6 	bl	80011bc <HAL_TIM_MspPostInit>
}
 80013d0:	b00f      	add	sp, #60	; 0x3c
 80013d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80013d6:	bf00      	nop
 80013d8:	200040ec 	.word	0x200040ec
 80013dc:	08005adb 	.word	0x08005adb

080013e0 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80013e0:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 80013e2:	4810      	ldr	r0, [pc, #64]	; (8001424 <MX_UART4_Init+0x44>)
  huart4.Init.BaudRate = 8000000;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_RX;
 80013e4:	2204      	movs	r2, #4
  huart4.Init.BaudRate = 8000000;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_UART4_Init+0x48>)
 80013e8:	f8df e044 	ldr.w	lr, [pc, #68]	; 8001430 <MX_UART4_Init+0x50>
  huart4.Init.Mode = UART_MODE_RX;
 80013ec:	6142      	str	r2, [r0, #20]
  huart4.Init.BaudRate = 8000000;
 80013ee:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	2300      	movs	r3, #0
 80013f4:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013f6:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013f8:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fe:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_MSBFIRST_INIT;
 8001400:	2390      	movs	r3, #144	; 0x90
 8001402:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	6383      	str	r3, [r0, #56]	; 0x38
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 800140a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800140e:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001410:	f002 fdcd 	bl	8003fae <HAL_UART_Init>
 8001414:	b128      	cbz	r0, 8001422 <MX_UART4_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001416:	2154      	movs	r1, #84	; 0x54
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_UART4_Init+0x4c>)
  }

}
 800141a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800141e:	f7ff bdb7 	b.w	8000f90 <_Error_Handler>
 8001422:	bd08      	pop	{r3, pc}
 8001424:	200042dc 	.word	0x200042dc
 8001428:	40004c00 	.word	0x40004c00
 800142c:	08005aee 	.word	0x08005aee
 8001430:	007a1200 	.word	0x007a1200

08001434 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001434:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 8001436:	480e      	ldr	r0, [pc, #56]	; (8001470 <MX_UART8_Init+0x3c>)
  huart8.Init.BaudRate = 26666666;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001438:	220c      	movs	r2, #12
  huart8.Init.BaudRate = 26666666;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_UART8_Init+0x40>)
 800143c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800147c <MX_UART8_Init+0x48>
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001440:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 8001442:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart8.Init.BaudRate = 26666666;
 8001446:	e880 4008 	stmia.w	r0, {r3, lr}
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	2300      	movs	r3, #0
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 800144c:	61c2      	str	r2, [r0, #28]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001450:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001452:	6103      	str	r3, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001454:	6183      	str	r3, [r0, #24]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001456:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001458:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800145a:	f002 fda8 	bl	8003fae <HAL_UART_Init>
 800145e:	b128      	cbz	r0, 800146c <MX_UART8_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001460:	2168      	movs	r1, #104	; 0x68
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_UART8_Init+0x44>)
  }

}
 8001464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001468:	f7ff bd92 	b.w	8000f90 <_Error_Handler>
 800146c:	bd08      	pop	{r3, pc}
 800146e:	bf00      	nop
 8001470:	2000426c 	.word	0x2000426c
 8001474:	40007c00 	.word	0x40007c00
 8001478:	08005aee 	.word	0x08005aee
 800147c:	0196e6aa 	.word	0x0196e6aa

08001480 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001480:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001482:	480f      	ldr	r0, [pc, #60]	; (80014c0 <MX_USART1_UART_Init+0x40>)
  huart1.Init.BaudRate = 921600;
 8001484:	f44f 2e61 	mov.w	lr, #921600	; 0xe1000
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_USART1_UART_Init+0x44>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800148a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 921600;
 800148c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001490:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001492:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001494:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001496:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001498:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80014a0:	2310      	movs	r3, #16
 80014a2:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014aa:	f002 fd80 	bl	8003fae <HAL_UART_Init>
 80014ae:	b128      	cbz	r0, 80014bc <MX_USART1_UART_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014b0:	217e      	movs	r1, #126	; 0x7e
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART1_UART_Init+0x48>)
  }

}
 80014b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80014b8:	f7ff bd6a 	b.w	8000f90 <_Error_Handler>
 80014bc:	bd08      	pop	{r3, pc}
 80014be:	bf00      	nop
 80014c0:	200041fc 	.word	0x200041fc
 80014c4:	40011000 	.word	0x40011000
 80014c8:	08005aee 	.word	0x08005aee

080014cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014cc:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80014ce:	480e      	ldr	r0, [pc, #56]	; (8001508 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 26666666;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014d0:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 26666666;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART3_UART_Init+0x40>)
 80014d4:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8001514 <MX_USART3_UART_Init+0x48>
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014d8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80014da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart3.Init.BaudRate = 26666666;
 80014de:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	2300      	movs	r3, #0
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80014e4:	61c2      	str	r2, [r0, #28]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014e8:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ea:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ec:	6183      	str	r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ee:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014f2:	f002 fd5c 	bl	8003fae <HAL_UART_Init>
 80014f6:	b128      	cbz	r0, 8001504 <MX_USART3_UART_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014f8:	2193      	movs	r1, #147	; 0x93
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART3_UART_Init+0x44>)
  }

}
 80014fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001500:	f7ff bd46 	b.w	8000f90 <_Error_Handler>
 8001504:	bd08      	pop	{r3, pc}
 8001506:	bf00      	nop
 8001508:	2000418c 	.word	0x2000418c
 800150c:	40004800 	.word	0x40004800
 8001510:	08005aee 	.word	0x08005aee
 8001514:	0196e6aa 	.word	0x0196e6aa

08001518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8001518:	6803      	ldr	r3, [r0, #0]
 800151a:	4a4b      	ldr	r2, [pc, #300]	; (8001648 <HAL_UART_MspInit+0x130>)
 800151c:	4293      	cmp	r3, r2
{
 800151e:	b530      	push	{r4, r5, lr}
 8001520:	4605      	mov	r5, r0
 8001522:	b08b      	sub	sp, #44	; 0x2c
  if(uartHandle->Instance==UART4)
 8001524:	d13f      	bne.n	80015a6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_UART_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	a905      	add	r1, sp, #20
 800152a:	4849      	ldr	r0, [pc, #292]	; (8001650 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800152c:	6c1a      	ldr	r2, [r3, #64]	; 0x40

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800152e:	4c49      	ldr	r4, [pc, #292]	; (8001654 <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001530:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2202      	movs	r2, #2
    __HAL_RCC_UART4_CLK_ENABLE();
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153c:	2201      	movs	r2, #1
    __HAL_RCC_UART4_CLK_ENABLE();
 800153e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001542:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART4_CLK_ENABLE();
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001548:	2303      	movs	r3, #3
 800154a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800154e:	2308      	movs	r3, #8
 8001550:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f000 fd0d 	bl	8001f70 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001556:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800155a:	483f      	ldr	r0, [pc, #252]	; (8001658 <HAL_UART_MspInit+0x140>)
 800155c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001560:	6122      	str	r2, [r4, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001562:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001566:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800156a:	61e2      	str	r2, [r4, #28]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156c:	2300      	movs	r3, #0
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800156e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001572:	4620      	mov	r0, r4
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001574:	60a3      	str	r3, [r4, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001576:	60e3      	str	r3, [r4, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001578:	6163      	str	r3, [r4, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157a:	61a3      	str	r3, [r4, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800157c:	6222      	str	r2, [r4, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001580:	f000 fb6a 	bl	8001c58 <HAL_DMA_Init>
 8001584:	b118      	cbz	r0, 800158e <HAL_UART_MspInit+0x76>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001586:	21bd      	movs	r1, #189	; 0xbd
 8001588:	4834      	ldr	r0, [pc, #208]	; (800165c <HAL_UART_MspInit+0x144>)
 800158a:	f7ff fd01 	bl	8000f90 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800158e:	2034      	movs	r0, #52	; 0x34
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001590:	666c      	str	r4, [r5, #100]	; 0x64
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2105      	movs	r1, #5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001596:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001598:	f000 f93c 	bl	8001814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800159c:	2034      	movs	r0, #52	; 0x34
 800159e:	f000 f971 	bl	8001884 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015a2:	b00b      	add	sp, #44	; 0x2c
 80015a4:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==UART8)
 80015a6:	4a2e      	ldr	r2, [pc, #184]	; (8001660 <HAL_UART_MspInit+0x148>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d117      	bne.n	80015dc <HAL_UART_MspInit+0xc4>
    __HAL_RCC_UART8_CLK_ENABLE();
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ae:	a905      	add	r1, sp, #20
 80015b0:	482c      	ldr	r0, [pc, #176]	; (8001664 <HAL_UART_MspInit+0x14c>)
    __HAL_RCC_UART8_CLK_ENABLE();
 80015b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2202      	movs	r2, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c0:	2201      	movs	r2, #1
    __HAL_RCC_UART8_CLK_ENABLE();
 80015c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c6:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART8_CLK_ENABLE();
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015cc:	2303      	movs	r3, #3
 80015ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80015d2:	2308      	movs	r3, #8
 80015d4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d6:	f000 fccb 	bl	8001f70 <HAL_GPIO_Init>
}
 80015da:	e7e2      	b.n	80015a2 <HAL_UART_MspInit+0x8a>
  else if(uartHandle->Instance==USART1)
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <HAL_UART_MspInit+0x150>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d117      	bne.n	8001612 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	a905      	add	r1, sp, #20
 80015e6:	481a      	ldr	r0, [pc, #104]	; (8001650 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015ea:	f042 0210 	orr.w	r2, r2, #16
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	9303      	str	r3, [sp, #12]
 80015f8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001604:	2301      	movs	r3, #1
 8001606:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800160c:	2307      	movs	r3, #7
 800160e:	9309      	str	r3, [sp, #36]	; 0x24
 8001610:	e7e1      	b.n	80015d6 <HAL_UART_MspInit+0xbe>
  else if(uartHandle->Instance==USART3)
 8001612:	4a16      	ldr	r2, [pc, #88]	; (800166c <HAL_UART_MspInit+0x154>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d1c4      	bne.n	80015a2 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161a:	a905      	add	r1, sp, #20
 800161c:	4814      	ldr	r0, [pc, #80]	; (8001670 <HAL_UART_MspInit+0x158>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800161e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001620:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001624:	641a      	str	r2, [r3, #64]	; 0x40
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800162c:	9304      	str	r3, [sp, #16]
 800162e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001630:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001634:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001642:	2307      	movs	r3, #7
 8001644:	9309      	str	r3, [sp, #36]	; 0x24
 8001646:	e7c6      	b.n	80015d6 <HAL_UART_MspInit+0xbe>
 8001648:	40004c00 	.word	0x40004c00
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	2000412c 	.word	0x2000412c
 8001658:	40026040 	.word	0x40026040
 800165c:	08005aee 	.word	0x08005aee
 8001660:	40007c00 	.word	0x40007c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40011000 	.word	0x40011000
 800166c:	40004800 	.word	0x40004800
 8001670:	40020c00 	.word	0x40020c00

08001674 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8001674:	b508      	push	{r3, lr}

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_USB_OTG_HS_PCD_Init+0x38>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001678:	2309      	movs	r3, #9
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <MX_USB_OTG_HS_PCD_Init+0x3c>)
 800167c:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001680:	2300      	movs	r3, #0
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001682:	2201      	movs	r2, #1
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001684:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 8001686:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001688:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800168a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800168c:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800168e:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001690:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001692:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001694:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001696:	f000 fdfa 	bl	800228e <HAL_PCD_Init>
 800169a:	b128      	cbz	r0, 80016a8 <MX_USB_OTG_HS_PCD_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800169c:	214f      	movs	r1, #79	; 0x4f
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_USB_OTG_HS_PCD_Init+0x40>)
  }

}
 80016a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80016a4:	f7ff bc74 	b.w	8000f90 <_Error_Handler>
 80016a8:	bd08      	pop	{r3, pc}
 80016aa:	bf00      	nop
 80016ac:	2000434c 	.word	0x2000434c
 80016b0:	40040000 	.word	0x40040000
 80016b4:	08005b03 	.word	0x08005b03

080016b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 80016b8:	6802      	ldr	r2, [r0, #0]
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_PCD_MspInit+0x7c>)
 80016bc:	429a      	cmp	r2, r3
{
 80016be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c0:	b089      	sub	sp, #36	; 0x24
  if(pcdHandle->Instance==USB_OTG_HS)
 80016c2:	d135      	bne.n	8001730 <HAL_PCD_MspInit+0x78>
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80016c4:	230d      	movs	r3, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016cc:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ce:	a903      	add	r1, sp, #12
 80016d0:	4819      	ldr	r0, [pc, #100]	; (8001738 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80016d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016da:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016dc:	f000 fc48 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80016e0:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	a903      	add	r1, sp, #12
 80016e4:	4815      	ldr	r0, [pc, #84]	; (800173c <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80016e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016ee:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f000 fc3e 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80016f4:	f643 4323 	movw	r3, #15395	; 0x3c23
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	a903      	add	r1, sp, #12
 80016fa:	4811      	ldr	r0, [pc, #68]	; (8001740 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80016fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001704:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f000 fc33 	bl	8001f70 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_PCD_MspInit+0x8c>)
 800170c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800170e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
 8001714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001716:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800171a:	9201      	str	r2, [sp, #4]
 800171c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800171e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001720:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001730:	b009      	add	sp, #36	; 0x24
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001734:	40040000 	.word	0x40040000
 8001738:	40020800 	.word	0x40020800
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	40023800 	.word	0x40023800

08001748 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001748:	490f      	ldr	r1, [pc, #60]	; (8001788 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800174a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800174c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <SystemInit+0x44>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	f042 0201 	orr.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001762:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800176a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800176e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <SystemInit+0x48>)
 8001772:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800177a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800177c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800177e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001782:	608b      	str	r3, [r1, #8]
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00
 800178c:	40023800 	.word	0x40023800
 8001790:	24003010 	.word	0x24003010

08001794 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_Init+0x20>)
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001796:	2003      	movs	r0, #3
{
 8001798:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800179a:	6813      	ldr	r3, [r2, #0]
 800179c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a2:	f000 f825 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fc82 	bl	80010b0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fc50 	bl	8001050 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80017b0:	2000      	movs	r0, #0
 80017b2:	bd08      	pop	{r3, pc}
 80017b4:	40023c00 	.word	0x40023c00

080017b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80017b8:	4a02      	ldr	r2, [pc, #8]	; (80017c4 <HAL_IncTick+0xc>)
 80017ba:	6813      	ldr	r3, [r2, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2000474c 	.word	0x2000474c

080017c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017c8:	4b01      	ldr	r3, [pc, #4]	; (80017d0 <HAL_GetTick+0x8>)
 80017ca:	6818      	ldr	r0, [r3, #0]
}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000474c 	.word	0x2000474c

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80017d4:	b513      	push	{r0, r1, r4, lr}
 80017d6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80017d8:	f7ff fff6 	bl	80017c8 <HAL_GetTick>
 80017dc:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80017de:	f7ff fff3 	bl	80017c8 <HAL_GetTick>
 80017e2:	9b01      	ldr	r3, [sp, #4]
 80017e4:	1b00      	subs	r0, r0, r4
 80017e6:	4298      	cmp	r0, r3
 80017e8:	d3f9      	bcc.n	80017de <HAL_Delay+0xa>
  {
  }
}
 80017ea:	b002      	add	sp, #8
 80017ec:	bd10      	pop	{r4, pc}
	...

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017f2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017fe:	041b      	lsls	r3, r3, #16
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800180a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800180c:	60d3      	str	r3, [r2, #12]
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001816:	b530      	push	{r4, r5, lr}
 8001818:	68dc      	ldr	r4, [r3, #12]
 800181a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800181e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	2b04      	cmp	r3, #4
 8001826:	bf28      	it	cs
 8001828:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001830:	bf8c      	ite	hi
 8001832:	3c03      	subhi	r4, #3
 8001834:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001836:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800183a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001840:	ea01 0103 	and.w	r1, r1, r3
 8001844:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	fa05 f404 	lsl.w	r4, r5, r4
 800184c:	f104 34ff 	add.w	r4, r4, #4294967295
 8001850:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	ea42 0201 	orr.w	r2, r2, r1
 8001858:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800185c:	da05      	bge.n	800186a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	f000 000f 	and.w	r0, r0, #15
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_NVIC_SetPriority+0x6c>)
 8001866:	541a      	strb	r2, [r3, r0]
 8001868:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001874:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8001878:	bd30      	pop	{r4, r5, pc}
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00
 8001880:	e000ed14 	.word	0xe000ed14

08001884 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001884:	0942      	lsrs	r2, r0, #5
 8001886:	2301      	movs	r3, #1
 8001888:	f000 001f 	and.w	r0, r0, #31
 800188c:	fa03 f000 	lsl.w	r0, r3, r0
 8001890:	4b01      	ldr	r3, [pc, #4]	; (8001898 <HAL_NVIC_EnableIRQ+0x14>)
 8001892:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100

0800189c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	3801      	subs	r0, #1
 800189e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018a2:	d20a      	bcs.n	80018ba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	21f0      	movs	r1, #240	; 0xf0
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e010 	.word	0xe000e010
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80018ca:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	bf0c      	ite	eq
 80018d0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80018d4:	f022 0204 	bicne.w	r2, r2, #4
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	4770      	bx	lr
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80018e0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 80018e8:	b93a      	cbnz	r2, 80018fa <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80018f0:	601a      	str	r2, [r3, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80018f2:	2901      	cmp	r1, #1
 80018f4:	d11c      	bne.n	8001930 <DFSDM_RegConvStart+0x50>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e01b      	b.n	8001932 <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80018fa:	681a      	ldr	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80018fc:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800190a:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001914:	d1ed      	bne.n	80018f2 <DFSDM_RegConvStart+0x12>
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001916:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001918:	b91a      	cbnz	r2, 8001922 <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f042 0202 	orr.w	r2, r2, #2
 8001920:	601a      	str	r2, [r3, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8001922:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001926:	2b01      	cmp	r3, #1
 8001928:	bf0c      	ite	eq
 800192a:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 800192c:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800192e:	6483      	str	r3, [r0, #72]	; 0x48
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001930:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001932:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8001936:	4770      	bx	lr

08001938 <DFSDM_GetChannelFromInstance>:
  if(Instance == DFSDM1_Channel0)
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <DFSDM_GetChannelFromInstance+0x54>)
 800193a:	4298      	cmp	r0, r3
 800193c:	d017      	beq.n	800196e <DFSDM_GetChannelFromInstance+0x36>
  else if(Instance == DFSDM1_Channel1)
 800193e:	3320      	adds	r3, #32
 8001940:	4298      	cmp	r0, r3
 8001942:	d016      	beq.n	8001972 <DFSDM_GetChannelFromInstance+0x3a>
  else if(Instance == DFSDM1_Channel2)
 8001944:	3320      	adds	r3, #32
 8001946:	4298      	cmp	r0, r3
 8001948:	d015      	beq.n	8001976 <DFSDM_GetChannelFromInstance+0x3e>
  else if(Instance == DFSDM1_Channel3)
 800194a:	3320      	adds	r3, #32
 800194c:	4298      	cmp	r0, r3
 800194e:	d014      	beq.n	800197a <DFSDM_GetChannelFromInstance+0x42>
  else if(Instance == DFSDM1_Channel4)
 8001950:	3320      	adds	r3, #32
 8001952:	4298      	cmp	r0, r3
 8001954:	d013      	beq.n	800197e <DFSDM_GetChannelFromInstance+0x46>
  else if(Instance == DFSDM1_Channel5)
 8001956:	3320      	adds	r3, #32
 8001958:	4298      	cmp	r0, r3
 800195a:	d012      	beq.n	8001982 <DFSDM_GetChannelFromInstance+0x4a>
  else if(Instance == DFSDM1_Channel6)
 800195c:	3320      	adds	r3, #32
 800195e:	4298      	cmp	r0, r3
 8001960:	d011      	beq.n	8001986 <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 8001962:	3320      	adds	r3, #32
 8001964:	4298      	cmp	r0, r3
 8001966:	bf14      	ite	ne
 8001968:	20ff      	movne	r0, #255	; 0xff
 800196a:	2007      	moveq	r0, #7
 800196c:	4770      	bx	lr
    channel = 0;
 800196e:	2000      	movs	r0, #0
 8001970:	4770      	bx	lr
    channel = 1;
 8001972:	2001      	movs	r0, #1
 8001974:	4770      	bx	lr
    channel = 2;
 8001976:	2002      	movs	r0, #2
 8001978:	4770      	bx	lr
    channel = 3;
 800197a:	2003      	movs	r0, #3
 800197c:	4770      	bx	lr
    channel = 4;
 800197e:	2004      	movs	r0, #4
 8001980:	4770      	bx	lr
    channel = 5;
 8001982:	2005      	movs	r0, #5
 8001984:	4770      	bx	lr
    channel = 6;
 8001986:	2006      	movs	r0, #6
}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40017400 	.word	0x40017400

08001990 <HAL_DFSDM_ChannelInit>:
{
 8001990:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 8001992:	4604      	mov	r4, r0
 8001994:	2800      	cmp	r0, #0
 8001996:	d067      	beq.n	8001a68 <HAL_DFSDM_ChannelInit+0xd8>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001998:	4d34      	ldr	r5, [pc, #208]	; (8001a6c <HAL_DFSDM_ChannelInit+0xdc>)
 800199a:	6800      	ldr	r0, [r0, #0]
 800199c:	f7ff ffcc 	bl	8001938 <DFSDM_GetChannelFromInstance>
 80019a0:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d15f      	bne.n	8001a68 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff f827 	bl	80009fc <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_DFSDM_ChannelInit+0xe0>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	3201      	adds	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d119      	bne.n	80019f0 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_DFSDM_ChannelInit+0xe4>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80019c4:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68a1      	ldr	r1, [r4, #8]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80019d4:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80019d6:	7922      	ldrb	r2, [r4, #4]
 80019d8:	2a01      	cmp	r2, #1
 80019da:	d105      	bne.n	80019e8 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 80019dc:	68e1      	ldr	r1, [r4, #12]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	3901      	subs	r1, #1
 80019e2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80019e6:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019ee:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80019f0:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80019f2:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80019f4:	6803      	ldr	r3, [r0, #0]
 80019f6:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 80019fa:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80019fc:	6923      	ldr	r3, [r4, #16]
 80019fe:	6802      	ldr	r2, [r0, #0]
 8001a00:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001a02:	69a1      	ldr	r1, [r4, #24]
 8001a04:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001a06:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a0c:	6803      	ldr	r3, [r0, #0]
 8001a0e:	f023 030f 	bic.w	r3, r3, #15
 8001a12:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001a14:	69e3      	ldr	r3, [r4, #28]
 8001a16:	6802      	ldr	r2, [r0, #0]
 8001a18:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001a1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001a1c:	4313      	orrs	r3, r2
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001a20:	6003      	str	r3, [r0, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a22:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a24:	6883      	ldr	r3, [r0, #8]
 8001a26:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8001a2a:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001a2c:	6883      	ldr	r3, [r0, #8]
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001a34:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001a36:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a38:	6843      	ldr	r3, [r0, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001a40:	6843      	ldr	r3, [r0, #4]
 8001a42:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a4c:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001a4e:	6803      	ldr	r3, [r0, #0]
 8001a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a54:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001a5c:	f7ff ff6c 	bl	8001938 <DFSDM_GetChannelFromInstance>
 8001a60:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8001a64:	2000      	movs	r0, #0
 8001a66:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a68:	2001      	movs	r0, #1
}
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
 8001a6c:	20000034 	.word	0x20000034
 8001a70:	20000054 	.word	0x20000054
 8001a74:	40017400 	.word	0x40017400

08001a78 <HAL_DFSDM_FilterInit>:
{
 8001a78:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_filter == NULL)
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	d069      	beq.n	8001b54 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001a80:	6802      	ldr	r2, [r0, #0]
 8001a82:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <HAL_DFSDM_FilterInit+0xe0>)
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d105      	bne.n	8001a94 <HAL_DFSDM_FilterInit+0x1c>
 8001a88:	6840      	ldr	r0, [r0, #4]
 8001a8a:	2801      	cmp	r0, #1
 8001a8c:	d063      	beq.n	8001b56 <HAL_DFSDM_FilterInit+0xde>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001a8e:	68e0      	ldr	r0, [r4, #12]
 8001a90:	2801      	cmp	r0, #1
 8001a92:	d060      	beq.n	8001b56 <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001a94:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001a96:	2201      	movs	r2, #1
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001a98:	4620      	mov	r0, r4
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001a9a:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001a9c:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001a9e:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001aa0:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001aa2:	f7fe ff0f 	bl	80008c4 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001aae:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001ab0:	7a22      	ldrb	r2, [r4, #8]
 8001ab2:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	bf0c      	ite	eq
 8001ab8:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001abc:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8001ac0:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001ac2:	7a62      	ldrb	r2, [r4, #9]
 8001ac4:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	bf0c      	ite	eq
 8001aca:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001ace:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8001ad2:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001ad4:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001ad6:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001ad8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001adc:	2d02      	cmp	r5, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001ade:	f022 0208 	bic.w	r2, r2, #8
 8001ae2:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001ae4:	d103      	bne.n	8001aee <HAL_DFSDM_FilterInit+0x76>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	6961      	ldr	r1, [r4, #20]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001aee:	7c20      	ldrb	r0, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001af0:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001af2:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001af4:	bf0c      	ite	eq
 8001af6:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001afa:	f022 0210 	bicne.w	r2, r2, #16
 8001afe:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001b00:	7c62      	ldrb	r2, [r4, #17]
 8001b02:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	bf0c      	ite	eq
 8001b08:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001b0c:	f022 0220 	bicne.w	r2, r2, #32
 8001b10:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8001b18:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001b1c:	615a      	str	r2, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8001b1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b20:	6959      	ldr	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8001b22:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b24:	430a      	orrs	r2, r1
 8001b26:	69e1      	ldr	r1, [r4, #28]
 8001b28:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8001b2a:	6a21      	ldr	r1, [r4, #32]
 8001b2c:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b32:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001b34:	6862      	ldr	r2, [r4, #4]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001b36:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001b3a:	2000      	movs	r0, #0
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001b3c:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001b3e:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001b40:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001b42:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8001b52:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001b54:	2001      	movs	r0, #1
}
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
 8001b58:	40017500 	.word	0x40017500

08001b5c <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001b5c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2bfd      	cmp	r3, #253	; 0xfd
{
 8001b66:	b510      	push	{r4, lr}
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001b68:	d813      	bhi.n	8001b92 <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001b6a:	6803      	ldr	r3, [r0, #0]
 8001b6c:	0209      	lsls	r1, r1, #8
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001b6e:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001b70:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001b72:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001b76:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001b7a:	bf08      	it	eq
 8001b7c:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001b80:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001b84:	601c      	str	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001b86:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001b88:	4321      	orrs	r1, r4
 8001b8a:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001b8c:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8001b8e:	2000      	movs	r0, #0
 8001b90:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001b92:	2001      	movs	r0, #1
}
 8001b94:	bd10      	pop	{r4, pc}

08001b96 <HAL_DFSDM_FilterRegularStart>:
{
 8001b96:	b508      	push	{r3, lr}
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001b98:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001b9c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d103      	bne.n	8001bac <HAL_DFSDM_FilterRegularStart+0x16>
    DFSDM_RegConvStart(hdfsdm_filter);
 8001ba4:	f7ff fe9c 	bl	80018e0 <DFSDM_RegConvStart>
  HAL_StatusTypeDef status = HAL_OK;
 8001ba8:	2000      	movs	r0, #0
    DFSDM_RegConvStart(hdfsdm_filter);
 8001baa:	bd08      	pop	{r3, pc}
    status = HAL_ERROR;
 8001bac:	2001      	movs	r0, #1
}
 8001bae:	bd08      	pop	{r3, pc}

08001bb0 <HAL_DFSDM_FilterGetRegularValue>:
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8001bb0:	6803      	ldr	r3, [r0, #0]
 8001bb2:	69d8      	ldr	r0, [r3, #28]
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8001bb4:	f000 0307 	and.w	r3, r0, #7
}
 8001bb8:	1200      	asrs	r0, r0, #8
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8001bba:	600b      	str	r3, [r1, #0]
}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_DFSDM_FilterErrorCallback>:
{
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_DFSDM_FilterPollForRegConversion>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001bc0:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001bc4:	2b02      	cmp	r3, #2
{
 8001bc6:	b570      	push	{r4, r5, r6, lr}
 8001bc8:	4604      	mov	r4, r0
 8001bca:	460d      	mov	r5, r1
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001bcc:	d001      	beq.n	8001bd2 <HAL_DFSDM_FilterPollForRegConversion+0x12>
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d12a      	bne.n	8001c28 <HAL_DFSDM_FilterPollForRegConversion+0x68>
    tickstart = HAL_GetTick();  
 8001bd2:	f7ff fdf9 	bl	80017c8 <HAL_GetTick>
 8001bd6:	4606      	mov	r6, r0
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	0792      	lsls	r2, r2, #30
 8001bde:	d518      	bpl.n	8001c12 <HAL_DFSDM_FilterPollForRegConversion+0x52>
    if((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	071b      	lsls	r3, r3, #28
 8001be4:	d507      	bpl.n	8001bf6 <HAL_DFSDM_FilterPollForRegConversion+0x36>
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001be6:	2301      	movs	r3, #1
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001be8:	4620      	mov	r0, r4
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001bea:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001bec:	f7ff ffe7 	bl	8001bbe <HAL_DFSDM_FilterErrorCallback>
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	60da      	str	r2, [r3, #12]
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001bf6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001bf8:	b948      	cbnz	r0, 8001c0e <HAL_DFSDM_FilterPollForRegConversion+0x4e>
 8001bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bfc:	b943      	cbnz	r3, 8001c10 <HAL_DFSDM_FilterPollForRegConversion+0x50>
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001bfe:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8001c02:	2a02      	cmp	r2, #2
 8001c04:	bf0c      	ite	eq
 8001c06:	2201      	moveq	r2, #1
 8001c08:	2203      	movne	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001c0a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    return HAL_OK;
 8001c0e:	2000      	movs	r0, #0
}
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001c12:	1c69      	adds	r1, r5, #1
 8001c14:	d0e1      	beq.n	8001bda <HAL_DFSDM_FilterPollForRegConversion+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001c16:	b90d      	cbnz	r5, 8001c1c <HAL_DFSDM_FilterPollForRegConversion+0x5c>
          return HAL_TIMEOUT;
 8001c18:	2003      	movs	r0, #3
 8001c1a:	bd70      	pop	{r4, r5, r6, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001c1c:	f7ff fdd4 	bl	80017c8 <HAL_GetTick>
 8001c20:	1b80      	subs	r0, r0, r6
 8001c22:	4285      	cmp	r5, r0
 8001c24:	d2d8      	bcs.n	8001bd8 <HAL_DFSDM_FilterPollForRegConversion+0x18>
 8001c26:	e7f7      	b.n	8001c18 <HAL_DFSDM_FilterPollForRegConversion+0x58>
    return HAL_ERROR;
 8001c28:	2001      	movs	r0, #1
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}

08001c2c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c2c:	6803      	ldr	r3, [r0, #0]
 8001c2e:	2118      	movs	r1, #24
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c36:	3a10      	subs	r2, #16
 8001c38:	f023 0303 	bic.w	r3, r3, #3
 8001c3c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c40:	4904      	ldr	r1, [pc, #16]	; (8001c54 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001c42:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c44:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c46:	bf88      	it	hi
 8001c48:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c4a:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c4c:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001c4e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	08005b32 	.word	0x08005b32

08001c58 <HAL_DMA_Init>:
{
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff fdb4 	bl	80017c8 <HAL_GetTick>
 8001c60:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001c62:	2c00      	cmp	r4, #0
 8001c64:	d071      	beq.n	8001d4a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001c66:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8001c68:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001c6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001c74:	6813      	ldr	r3, [r2, #0]
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7c:	6821      	ldr	r1, [r4, #0]
 8001c7e:	680b      	ldr	r3, [r1, #0]
 8001c80:	07d8      	lsls	r0, r3, #31
 8001c82:	d43c      	bmi.n	8001cfe <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001c84:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c86:	4d32      	ldr	r5, [pc, #200]	; (8001d50 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c88:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c8a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8e:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c90:	4313      	orrs	r3, r2
 8001c92:	68e2      	ldr	r2, [r4, #12]
 8001c94:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c96:	6922      	ldr	r2, [r4, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	6962      	ldr	r2, [r4, #20]
 8001c9c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9e:	69e2      	ldr	r2, [r4, #28]
 8001ca0:	4303      	orrs	r3, r0
 8001ca2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca4:	6a22      	ldr	r2, [r4, #32]
 8001ca6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001caa:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cac:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cb0:	bf01      	itttt	eq
 8001cb2:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001cb4:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001cb6:	4335      	orreq	r5, r6
 8001cb8:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cba:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001cbc:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001cbe:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001cc4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001cca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ccc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001cce:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd0:	b13d      	cbz	r5, 8001ce2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cd2:	b9f8      	cbnz	r0, 8001d14 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001cd4:	2a01      	cmp	r2, #1
 8001cd6:	d02d      	beq.n	8001d34 <HAL_DMA_Init+0xdc>
 8001cd8:	d301      	bcc.n	8001cde <HAL_DMA_Init+0x86>
 8001cda:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cdc:	d101      	bne.n	8001ce2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cde:	01ea      	lsls	r2, r5, #7
 8001ce0:	d42b      	bmi.n	8001d3a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001ce2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff ffa1 	bl	8001c2c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cec:	233f      	movs	r3, #63	; 0x3f
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001cf4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001cf8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001cfc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cfe:	f7ff fd63 	bl	80017c8 <HAL_GetTick>
 8001d02:	1b40      	subs	r0, r0, r5
 8001d04:	2805      	cmp	r0, #5
 8001d06:	d9b9      	bls.n	8001c7c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d08:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d0a:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d0c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001d12:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d14:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001d18:	d113      	bne.n	8001d42 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001d1a:	2a03      	cmp	r2, #3
 8001d1c:	d8e1      	bhi.n	8001ce2 <HAL_DMA_Init+0x8a>
 8001d1e:	a001      	add	r0, pc, #4	; (adr r0, 8001d24 <HAL_DMA_Init+0xcc>)
 8001d20:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001d24:	08001d3b 	.word	0x08001d3b
 8001d28:	08001cdf 	.word	0x08001cdf
 8001d2c:	08001d3b 	.word	0x08001d3b
 8001d30:	08001d35 	.word	0x08001d35
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d34:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001d38:	d1d3      	bne.n	8001ce2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d3a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001d3c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d3e:	6563      	str	r3, [r4, #84]	; 0x54
 8001d40:	e7e5      	b.n	8001d0e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001d42:	2a02      	cmp	r2, #2
 8001d44:	d9f9      	bls.n	8001d3a <HAL_DMA_Init+0xe2>
 8001d46:	2a03      	cmp	r2, #3
 8001d48:	e7c8      	b.n	8001cdc <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	bd70      	pop	{r4, r5, r6, pc}
 8001d4e:	bf00      	nop
 8001d50:	e010803f 	.word	0xe010803f

08001d54 <HAL_DMA_Start_IT>:
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001d56:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001d5a:	2c01      	cmp	r4, #1
 8001d5c:	d035      	beq.n	8001dca <HAL_DMA_Start_IT+0x76>
 8001d5e:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d60:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001d62:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8001d64:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d68:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001d6c:	2c01      	cmp	r4, #1
 8001d6e:	f04f 0402 	mov.w	r4, #2
 8001d72:	d128      	bne.n	8001dc6 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d74:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d78:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d7c:	6825      	ldr	r5, [r4, #0]
 8001d7e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001d82:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001d84:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d86:	6883      	ldr	r3, [r0, #8]
 8001d88:	2b40      	cmp	r3, #64	; 0x40
 8001d8a:	d119      	bne.n	8001dc0 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8001d8c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001d8e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d90:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d92:	233f      	movs	r3, #63	; 0x3f
 8001d94:	4093      	lsls	r3, r2
 8001d96:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	f043 0316 	orr.w	r3, r3, #22
 8001d9e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001da0:	6963      	ldr	r3, [r4, #20]
 8001da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001da8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001daa:	b11b      	cbz	r3, 8001db4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001db4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001db6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6023      	str	r3, [r4, #0]
 8001dbe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8001dc0:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dc2:	60e2      	str	r2, [r4, #12]
 8001dc4:	e7e4      	b.n	8001d90 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8001dc6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001dca:	2002      	movs	r0, #2
}
 8001dcc:	bd70      	pop	{r4, r5, r6, pc}

08001dce <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dce:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d003      	beq.n	8001dde <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001dda:	2001      	movs	r0, #1
 8001ddc:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001dde:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001de0:	2305      	movs	r3, #5
 8001de2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8001de6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001de8:	6813      	ldr	r3, [r2, #0]
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8001df4:	2300      	movs	r3, #0
{
 8001df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001df8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfa:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_DMA_IRQHandler+0x170>)
{
 8001dfe:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e00:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8001e02:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e04:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001e06:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	4216      	tst	r6, r2
 8001e0c:	d00c      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e0e:	6801      	ldr	r1, [r0, #0]
 8001e10:	6808      	ldr	r0, [r1, #0]
 8001e12:	0740      	lsls	r0, r0, #29
 8001e14:	d508      	bpl.n	8001e28 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e16:	6808      	ldr	r0, [r1, #0]
 8001e18:	f020 0004 	bic.w	r0, r0, #4
 8001e1c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e1e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e20:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	4a4f      	ldr	r2, [pc, #316]	; (8001f68 <HAL_DMA_IRQHandler+0x174>)
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	4216      	tst	r6, r2
 8001e2e:	d008      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e30:	6821      	ldr	r1, [r4, #0]
 8001e32:	6949      	ldr	r1, [r1, #20]
 8001e34:	0609      	lsls	r1, r1, #24
 8001e36:	d504      	bpl.n	8001e42 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e38:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e3c:	f042 0202 	orr.w	r2, r2, #2
 8001e40:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e42:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <HAL_DMA_IRQHandler+0x178>)
 8001e44:	409a      	lsls	r2, r3
 8001e46:	4216      	tst	r6, r2
 8001e48:	d008      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e4a:	6821      	ldr	r1, [r4, #0]
 8001e4c:	6809      	ldr	r1, [r1, #0]
 8001e4e:	0788      	lsls	r0, r1, #30
 8001e50:	d504      	bpl.n	8001e5c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e52:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e54:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e56:	f042 0204 	orr.w	r2, r2, #4
 8001e5a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	4216      	tst	r6, r2
 8001e62:	d010      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	0709      	lsls	r1, r1, #28
 8001e6a:	d50c      	bpl.n	8001e86 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e6c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	0350      	lsls	r0, r2, #13
 8001e72:	d535      	bpl.n	8001ee0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0319      	lsls	r1, r3, #12
 8001e78:	d401      	bmi.n	8001e7e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e7c:	e000      	b.n	8001e80 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001e80:	b10b      	cbz	r3, 8001e86 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001e82:	4620      	mov	r0, r4
 8001e84:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e86:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001e88:	2220      	movs	r2, #32
 8001e8a:	408a      	lsls	r2, r1
 8001e8c:	4216      	tst	r6, r2
 8001e8e:	d038      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	06c6      	lsls	r6, r0, #27
 8001e96:	d534      	bpl.n	8001f02 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e98:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e9a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001e9e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ea2:	d125      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea4:	f022 0216 	bic.w	r2, r2, #22
 8001ea8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001eb4:	b90a      	cbnz	r2, 8001eba <HAL_DMA_IRQHandler+0xc6>
 8001eb6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001eb8:	b11a      	cbz	r2, 8001ec2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f022 0208 	bic.w	r2, r2, #8
 8001ec0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec2:	233f      	movs	r3, #63	; 0x3f
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001ed4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001ed6:	b10b      	cbz	r3, 8001edc <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4798      	blx	r3
}
 8001edc:	b003      	add	sp, #12
 8001ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	05d2      	lsls	r2, r2, #23
 8001ee4:	d4c9      	bmi.n	8001e7a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	f022 0208 	bic.w	r2, r2, #8
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e7c4      	b.n	8001e7a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef0:	0350      	lsls	r0, r2, #13
 8001ef2:	d528      	bpl.n	8001f46 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0319      	lsls	r1, r3, #12
 8001ef8:	d432      	bmi.n	8001f60 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001efa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001efc:	b10b      	cbz	r3, 8001f02 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001efe:	4620      	mov	r0, r4
 8001f00:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0e9      	beq.n	8001edc <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f0a:	07da      	lsls	r2, r3, #31
 8001f0c:	d519      	bpl.n	8001f42 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f0e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001f10:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f1e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001f22:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001f26:	9b01      	ldr	r3, [sp, #4]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	429f      	cmp	r7, r3
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	d302      	bcc.n	8001f36 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f30:	6813      	ldr	r3, [r2, #0]
 8001f32:	07db      	lsls	r3, r3, #31
 8001f34:	d4f7      	bmi.n	8001f26 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8001f36:	2300      	movs	r3, #0
 8001f38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001f42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f44:	e7c7      	b.n	8001ed6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001f4c:	d108      	bne.n	8001f60 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f4e:	6819      	ldr	r1, [r3, #0]
 8001f50:	f021 0110 	bic.w	r1, r1, #16
 8001f54:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001f56:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001f58:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001f5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001f60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f62:	e7cb      	b.n	8001efc <HAL_DMA_IRQHandler+0x108>
 8001f64:	20000000 	.word	0x20000000
 8001f68:	00800001 	.word	0x00800001
 8001f6c:	00800004 	.word	0x00800004

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f74:	680b      	ldr	r3, [r1, #0]
{
 8001f76:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800213c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f7c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f7e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f80:	4a6c      	ldr	r2, [pc, #432]	; (8002134 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f82:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002140 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8001f86:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8001f8c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f90:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001f94:	45b6      	cmp	lr, r6
 8001f96:	f040 80b3 	bne.w	8002100 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9a:	684c      	ldr	r4, [r1, #4]
 8001f9c:	f024 0710 	bic.w	r7, r4, #16
 8001fa0:	2f02      	cmp	r7, #2
 8001fa2:	d116      	bne.n	8001fd2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001fa4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fa8:	f003 0b07 	and.w	fp, r3, #7
 8001fac:	f04f 0c0f 	mov.w	ip, #15
 8001fb0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001fb4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001fb8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fbc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001fc0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fc4:	690d      	ldr	r5, [r1, #16]
 8001fc6:	fa05 f50b 	lsl.w	r5, r5, fp
 8001fca:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001fce:	f8ca 5020 	str.w	r5, [sl, #32]
 8001fd2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fd6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001fd8:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fdc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fe0:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fe4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fe6:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fea:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fec:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fee:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ff2:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8001ff6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ffa:	d811      	bhi.n	8002020 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001ffc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ffe:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002002:	68cf      	ldr	r7, [r1, #12]
 8002004:	fa07 fc0a 	lsl.w	ip, r7, sl
 8002008:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800200c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800200e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002010:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002014:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002018:	409f      	lsls	r7, r3
 800201a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800201e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002020:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002022:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002024:	688f      	ldr	r7, [r1, #8]
 8002026:	fa07 f70a 	lsl.w	r7, r7, sl
 800202a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800202c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800202e:	00e5      	lsls	r5, r4, #3
 8002030:	d566      	bpl.n	8002100 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002036:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800203a:	f003 0e03 	and.w	lr, r3, #3
 800203e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8002046:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800204a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8002052:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002056:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800205a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800205e:	9503      	str	r5, [sp, #12]
 8002060:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002062:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8002066:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800206a:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800206e:	4d32      	ldr	r5, [pc, #200]	; (8002138 <HAL_GPIO_Init+0x1c8>)
 8002070:	42a8      	cmp	r0, r5
 8002072:	d04c      	beq.n	800210e <HAL_GPIO_Init+0x19e>
 8002074:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002078:	42a8      	cmp	r0, r5
 800207a:	d04a      	beq.n	8002112 <HAL_GPIO_Init+0x1a2>
 800207c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002080:	42a8      	cmp	r0, r5
 8002082:	d048      	beq.n	8002116 <HAL_GPIO_Init+0x1a6>
 8002084:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002088:	42a8      	cmp	r0, r5
 800208a:	d046      	beq.n	800211a <HAL_GPIO_Init+0x1aa>
 800208c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002090:	42a8      	cmp	r0, r5
 8002092:	d044      	beq.n	800211e <HAL_GPIO_Init+0x1ae>
 8002094:	4548      	cmp	r0, r9
 8002096:	d044      	beq.n	8002122 <HAL_GPIO_Init+0x1b2>
 8002098:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800209c:	42a8      	cmp	r0, r5
 800209e:	d042      	beq.n	8002126 <HAL_GPIO_Init+0x1b6>
 80020a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020a4:	42a8      	cmp	r0, r5
 80020a6:	d040      	beq.n	800212a <HAL_GPIO_Init+0x1ba>
 80020a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020ac:	42a8      	cmp	r0, r5
 80020ae:	d03e      	beq.n	800212e <HAL_GPIO_Init+0x1be>
 80020b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020b4:	42a8      	cmp	r0, r5
 80020b6:	bf14      	ite	ne
 80020b8:	250a      	movne	r5, #10
 80020ba:	2509      	moveq	r5, #9
 80020bc:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020c4:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80020c8:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 80020ce:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	bf0c      	ite	eq
 80020d2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80020d4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80020da:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80020dc:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80020de:	bf0c      	ite	eq
 80020e0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80020e2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80020e8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80020ea:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	bf0c      	ite	eq
 80020ee:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80020f0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f2:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80020f4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80020f6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	bf54      	ite	pl
 80020fa:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80020fc:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80020fe:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002100:	3301      	adds	r3, #1
 8002102:	2b10      	cmp	r3, #16
 8002104:	f47f af3f 	bne.w	8001f86 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8002108:	b005      	add	sp, #20
 800210a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800210e:	2500      	movs	r5, #0
 8002110:	e7d4      	b.n	80020bc <HAL_GPIO_Init+0x14c>
 8002112:	2501      	movs	r5, #1
 8002114:	e7d2      	b.n	80020bc <HAL_GPIO_Init+0x14c>
 8002116:	2502      	movs	r5, #2
 8002118:	e7d0      	b.n	80020bc <HAL_GPIO_Init+0x14c>
 800211a:	2503      	movs	r5, #3
 800211c:	e7ce      	b.n	80020bc <HAL_GPIO_Init+0x14c>
 800211e:	2504      	movs	r5, #4
 8002120:	e7cc      	b.n	80020bc <HAL_GPIO_Init+0x14c>
 8002122:	2505      	movs	r5, #5
 8002124:	e7ca      	b.n	80020bc <HAL_GPIO_Init+0x14c>
 8002126:	2506      	movs	r5, #6
 8002128:	e7c8      	b.n	80020bc <HAL_GPIO_Init+0x14c>
 800212a:	2507      	movs	r5, #7
 800212c:	e7c6      	b.n	80020bc <HAL_GPIO_Init+0x14c>
 800212e:	2508      	movs	r5, #8
 8002130:	e7c4      	b.n	80020bc <HAL_GPIO_Init+0x14c>
 8002132:	bf00      	nop
 8002134:	40013c00 	.word	0x40013c00
 8002138:	40020000 	.word	0x40020000
 800213c:	40023800 	.word	0x40023800
 8002140:	40021400 	.word	0x40021400

08002144 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002144:	b10a      	cbz	r2, 800214a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002146:	6181      	str	r1, [r0, #24]
 8002148:	4770      	bx	lr
 800214a:	0409      	lsls	r1, r1, #16
 800214c:	e7fb      	b.n	8002146 <HAL_GPIO_WritePin+0x2>

0800214e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800214e:	6943      	ldr	r3, [r0, #20]
 8002150:	4059      	eors	r1, r3
 8002152:	6141      	str	r1, [r0, #20]
 8002154:	4770      	bx	lr

08002156 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002156:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002158:	4604      	mov	r4, r0
 800215a:	2800      	cmp	r0, #0
 800215c:	d04a      	beq.n	80021f4 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800215e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002162:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002166:	b91b      	cbnz	r3, 8002170 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002168:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800216c:	f7fe fe14 	bl	8000d98 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002170:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002172:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002174:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002178:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002184:	6862      	ldr	r2, [r4, #4]
 8002186:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800218a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002196:	d124      	bne.n	80021e2 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002198:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800219c:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800219e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a0:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021a2:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021a4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80021a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ac:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021b6:	6922      	ldr	r2, [r4, #16]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	69a1      	ldr	r1, [r4, #24]
 80021bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021c0:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021c2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021c4:	69e2      	ldr	r2, [r4, #28]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021da:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 80021e0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021e6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e8:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021ea:	d1d8      	bne.n	800219e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	e7d4      	b.n	800219e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80021f4:	2001      	movs	r0, #1
}
 80021f6:	bd10      	pop	{r4, pc}

080021f8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80021f8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	2a20      	cmp	r2, #32
{
 8002200:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002202:	d11d      	bne.n	8002240 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002204:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002208:	2b01      	cmp	r3, #1
 800220a:	d019      	beq.n	8002240 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800220c:	2324      	movs	r3, #36	; 0x24
 800220e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002212:	6803      	ldr	r3, [r0, #0]
 8002214:	681c      	ldr	r4, [r3, #0]
 8002216:	f024 0401 	bic.w	r4, r4, #1
 800221a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800221c:	681c      	ldr	r4, [r3, #0]
 800221e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002222:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002224:	681c      	ldr	r4, [r3, #0]
 8002226:	4321      	orrs	r1, r4
 8002228:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	f041 0101 	orr.w	r1, r1, #1
 8002230:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002232:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002234:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002238:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800223c:	4618      	mov	r0, r3
 800223e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002240:	2002      	movs	r0, #2
  }
}
 8002242:	bd10      	pop	{r4, pc}

08002244 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002244:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002246:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800224a:	b2e4      	uxtb	r4, r4
 800224c:	2c20      	cmp	r4, #32
 800224e:	d11c      	bne.n	800228a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002250:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002254:	2b01      	cmp	r3, #1
 8002256:	d018      	beq.n	800228a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002258:	2324      	movs	r3, #36	; 0x24
 800225a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800225e:	6803      	ldr	r3, [r0, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002268:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800226a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800226e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002272:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800227e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002282:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002286:	4618      	mov	r0, r3
 8002288:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800228a:	2002      	movs	r0, #2
  }
}
 800228c:	bd10      	pop	{r4, pc}

0800228e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800228e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002290:	4606      	mov	r6, r0
{
 8002292:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8002294:	2800      	cmp	r0, #0
 8002296:	d067      	beq.n	8002368 <HAL_PCD_Init+0xda>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002298:	2303      	movs	r3, #3

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800229a:	4634      	mov	r4, r6

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800229c:	466d      	mov	r5, sp
 800229e:	1d37      	adds	r7, r6, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80022a0:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 80022a4:	f7ff fa08 	bl	80016b8 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 80022a8:	f854 0b10 	ldr.w	r0, [r4], #16
 80022ac:	f001 ff05 	bl	80040ba <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80022b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022bc:	f106 0410 	add.w	r4, r6, #16
 80022c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022c4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80022c8:	6830      	ldr	r0, [r6, #0]

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 80022ca:	2501      	movs	r5, #1
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80022cc:	f001 feba 	bl	8004044 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80022d0:	2100      	movs	r1, #0
 80022d2:	6830      	ldr	r0, [r6, #0]
 80022d4:	f001 fef7 	bl	80040c6 <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 80022d8:	2100      	movs	r1, #0
 80022da:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80022dc:	4632      	mov	r2, r6
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022de:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 80022e0:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 80022e4:	321c      	adds	r2, #28
   hpcd->IN_ep[i].tx_fifo_num = i;
 80022e6:	8451      	strh	r1, [r2, #34]	; 0x22
 for (i = 0; i < 15 ; i++)
 80022e8:	3101      	adds	r1, #1
   hpcd->IN_ep[i].is_in = 1;
 80022ea:	7755      	strb	r5, [r2, #29]
 for (i = 0; i < 15 ; i++)
 80022ec:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ee:	77d0      	strb	r0, [r2, #31]
   hpcd->IN_ep[i].maxpacket =  0;
 80022f0:	6250      	str	r0, [r2, #36]	; 0x24
   hpcd->IN_ep[i].xfer_buff = 0;
 80022f2:	6290      	str	r0, [r2, #40]	; 0x28
   hpcd->IN_ep[i].xfer_len = 0;
 80022f4:	6310      	str	r0, [r2, #48]	; 0x30
 for (i = 0; i < 15 ; i++)
 80022f6:	d1f3      	bne.n	80022e0 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0;
   hpcd->OUT_ep[i].xfer_buff = 0;
   hpcd->OUT_ep[i].xfer_len = 0;

   hpcd->Instance->DIEPTXF[i] = 0;
 80022f8:	2200      	movs	r2, #0
 80022fa:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0;
 80022fe:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 8002300:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->Instance->DIEPTXF[i] = 0;
 8002304:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->IN_ep[i].tx_fifo_num = i;
 8002308:	87da      	strh	r2, [r3, #62]	; 0x3e
 for (i = 0; i < 15 ; i++)
 800230a:	3201      	adds	r2, #1
   hpcd->Instance->DIEPTXF[i] = 0;
 800230c:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->OUT_ep[i].is_in = 0;
 8002310:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
 for (i = 0; i < 15 ; i++)
 8002314:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002316:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 800231a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 800231e:	f103 031c 	add.w	r3, r3, #28
   hpcd->OUT_ep[i].xfer_buff = 0;
 8002322:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0;
 8002326:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   hpcd->Instance->DIEPTXF[i] = 0;
 800232a:	6041      	str	r1, [r0, #4]
 for (i = 0; i < 15 ; i++)
 800232c:	d1e8      	bne.n	8002300 <HAL_PCD_Init+0x72>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 800232e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002330:	466d      	mov	r5, sp
 8002332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002338:	e894 0003 	ldmia.w	r4, {r0, r1}
 800233c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002340:	4670      	mov	r0, lr
 8002342:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002346:	f001 feff 	bl	8004148 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 800234a:	2301      	movs	r3, #1
 800234c:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8002350:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_PCD_Init+0xce>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8002356:	4630      	mov	r0, r6
 8002358:	f000 f808 	bl	800236c <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 800235c:	6830      	ldr	r0, [r6, #0]
 800235e:	f001 ff99 	bl	8004294 <USB_DevDisconnect>
 return HAL_OK;
 8002362:	2000      	movs	r0, #0
}
 8002364:	b00b      	add	sp, #44	; 0x2c
 8002366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002368:	2001      	movs	r0, #1
 800236a:	e7fb      	b.n	8002364 <HAL_PCD_Init+0xd6>

0800236c <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 800236c:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800236e:	6802      	ldr	r2, [r0, #0]
{
 8002370:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 8002372:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8002376:	2000      	movs	r0, #0
 8002378:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800237c:	6993      	ldr	r3, [r2, #24]
 800237e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002382:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002384:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238a:	f043 0303 	orr.w	r3, r3, #3
 800238e:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 8002390:	4770      	bx	lr
	...

08002394 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002396:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800239a:	4c19      	ldr	r4, [pc, #100]	; (8002400 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b4:	f7ff fa08 	bl	80017c8 <HAL_GetTick>
 80023b8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023ba:	6863      	ldr	r3, [r4, #4]
 80023bc:	03da      	lsls	r2, r3, #15
 80023be:	d50c      	bpl.n	80023da <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c8:	f7ff f9fe 	bl	80017c8 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023cc:	4c0c      	ldr	r4, [pc, #48]	; (8002400 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80023ce:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023d0:	6863      	ldr	r3, [r4, #4]
 80023d2:	039b      	lsls	r3, r3, #14
 80023d4:	d50a      	bpl.n	80023ec <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80023d6:	2000      	movs	r0, #0
 80023d8:	e006      	b.n	80023e8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023da:	f7ff f9f5 	bl	80017c8 <HAL_GetTick>
 80023de:	1b40      	subs	r0, r0, r5
 80023e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80023e4:	d9e9      	bls.n	80023ba <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80023e6:	2003      	movs	r0, #3
}
 80023e8:	b003      	add	sp, #12
 80023ea:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023ec:	f7ff f9ec 	bl	80017c8 <HAL_GetTick>
 80023f0:	1b40      	subs	r0, r0, r5
 80023f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80023f6:	d9eb      	bls.n	80023d0 <HAL_PWREx_EnableOverDrive+0x3c>
 80023f8:	e7f5      	b.n	80023e6 <HAL_PWREx_EnableOverDrive+0x52>
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000

08002404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002404:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002408:	4604      	mov	r4, r0
 800240a:	b918      	cbnz	r0, 8002414 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800240c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800240e:	b002      	add	sp, #8
 8002410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002414:	6803      	ldr	r3, [r0, #0]
 8002416:	07d8      	lsls	r0, r3, #31
 8002418:	d410      	bmi.n	800243c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	0799      	lsls	r1, r3, #30
 800241e:	d45e      	bmi.n	80024de <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	0719      	lsls	r1, r3, #28
 8002424:	f100 80a3 	bmi.w	800256e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	075a      	lsls	r2, r3, #29
 800242c:	f100 80c4 	bmi.w	80025b8 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002430:	69a2      	ldr	r2, [r4, #24]
 8002432:	2a00      	cmp	r2, #0
 8002434:	f040 812e 	bne.w	8002694 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8002438:	2000      	movs	r0, #0
 800243a:	e7e8      	b.n	800240e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800243c:	4b93      	ldr	r3, [pc, #588]	; (800268c <HAL_RCC_OscConfig+0x288>)
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	f002 020c 	and.w	r2, r2, #12
 8002444:	2a04      	cmp	r2, #4
 8002446:	d007      	beq.n	8002458 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	f002 020c 	and.w	r2, r2, #12
 800244e:	2a08      	cmp	r2, #8
 8002450:	d10a      	bne.n	8002468 <HAL_RCC_OscConfig+0x64>
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	025a      	lsls	r2, r3, #9
 8002456:	d507      	bpl.n	8002468 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b8c      	ldr	r3, [pc, #560]	; (800268c <HAL_RCC_OscConfig+0x288>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	039b      	lsls	r3, r3, #14
 800245e:	d5dc      	bpl.n	800241a <HAL_RCC_OscConfig+0x16>
 8002460:	6863      	ldr	r3, [r4, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1d9      	bne.n	800241a <HAL_RCC_OscConfig+0x16>
 8002466:	e7d1      	b.n	800240c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002468:	6863      	ldr	r3, [r4, #4]
 800246a:	4d88      	ldr	r5, [pc, #544]	; (800268c <HAL_RCC_OscConfig+0x288>)
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d111      	bne.n	8002496 <HAL_RCC_OscConfig+0x92>
 8002472:	682b      	ldr	r3, [r5, #0]
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800247a:	f7ff f9a5 	bl	80017c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4d83      	ldr	r5, [pc, #524]	; (800268c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8002480:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	682b      	ldr	r3, [r5, #0]
 8002484:	039f      	lsls	r7, r3, #14
 8002486:	d4c8      	bmi.n	800241a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff f99e 	bl	80017c8 <HAL_GetTick>
 800248c:	1b80      	subs	r0, r0, r6
 800248e:	2864      	cmp	r0, #100	; 0x64
 8002490:	d9f7      	bls.n	8002482 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002492:	2003      	movs	r0, #3
 8002494:	e7bb      	b.n	800240e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002496:	b99b      	cbnz	r3, 80024c0 <HAL_RCC_OscConfig+0xbc>
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	602b      	str	r3, [r5, #0]
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024a8:	f7ff f98e 	bl	80017c8 <HAL_GetTick>
 80024ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	682b      	ldr	r3, [r5, #0]
 80024b0:	0398      	lsls	r0, r3, #14
 80024b2:	d5b2      	bpl.n	800241a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff f988 	bl	80017c8 <HAL_GetTick>
 80024b8:	1b80      	subs	r0, r0, r6
 80024ba:	2864      	cmp	r0, #100	; 0x64
 80024bc:	d9f7      	bls.n	80024ae <HAL_RCC_OscConfig+0xaa>
 80024be:	e7e8      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	d103      	bne.n	80024d0 <HAL_RCC_OscConfig+0xcc>
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024cc:	602b      	str	r3, [r5, #0]
 80024ce:	e7d0      	b.n	8002472 <HAL_RCC_OscConfig+0x6e>
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	602b      	str	r3, [r5, #0]
 80024d6:	682b      	ldr	r3, [r5, #0]
 80024d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024dc:	e7cc      	b.n	8002478 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024de:	4b6b      	ldr	r3, [pc, #428]	; (800268c <HAL_RCC_OscConfig+0x288>)
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	f012 0f0c 	tst.w	r2, #12
 80024e6:	d007      	beq.n	80024f8 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	f002 020c 	and.w	r2, r2, #12
 80024ee:	2a08      	cmp	r2, #8
 80024f0:	d111      	bne.n	8002516 <HAL_RCC_OscConfig+0x112>
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	0259      	lsls	r1, r3, #9
 80024f6:	d40e      	bmi.n	8002516 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <HAL_RCC_OscConfig+0x288>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	0792      	lsls	r2, r2, #30
 80024fe:	d502      	bpl.n	8002506 <HAL_RCC_OscConfig+0x102>
 8002500:	68e2      	ldr	r2, [r4, #12]
 8002502:	2a01      	cmp	r2, #1
 8002504:	d182      	bne.n	800240c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	6921      	ldr	r1, [r4, #16]
 800250a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800250e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002512:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002514:	e784      	b.n	8002420 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002516:	68e3      	ldr	r3, [r4, #12]
 8002518:	4d5c      	ldr	r5, [pc, #368]	; (800268c <HAL_RCC_OscConfig+0x288>)
 800251a:	b1bb      	cbz	r3, 800254c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800251c:	682b      	ldr	r3, [r5, #0]
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002524:	f7ff f950 	bl	80017c8 <HAL_GetTick>
 8002528:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	682b      	ldr	r3, [r5, #0]
 800252c:	079f      	lsls	r7, r3, #30
 800252e:	d507      	bpl.n	8002540 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	682b      	ldr	r3, [r5, #0]
 8002532:	6922      	ldr	r2, [r4, #16]
 8002534:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002538:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800253c:	602b      	str	r3, [r5, #0]
 800253e:	e76f      	b.n	8002420 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002540:	f7ff f942 	bl	80017c8 <HAL_GetTick>
 8002544:	1b80      	subs	r0, r0, r6
 8002546:	2802      	cmp	r0, #2
 8002548:	d9ef      	bls.n	800252a <HAL_RCC_OscConfig+0x126>
 800254a:	e7a2      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002554:	f7ff f938 	bl	80017c8 <HAL_GetTick>
 8002558:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	0798      	lsls	r0, r3, #30
 800255e:	f57f af5f 	bpl.w	8002420 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002562:	f7ff f931 	bl	80017c8 <HAL_GetTick>
 8002566:	1b80      	subs	r0, r0, r6
 8002568:	2802      	cmp	r0, #2
 800256a:	d9f6      	bls.n	800255a <HAL_RCC_OscConfig+0x156>
 800256c:	e791      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800256e:	6963      	ldr	r3, [r4, #20]
 8002570:	4d46      	ldr	r5, [pc, #280]	; (800268c <HAL_RCC_OscConfig+0x288>)
 8002572:	b183      	cbz	r3, 8002596 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8002574:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800257c:	f7ff f924 	bl	80017c8 <HAL_GetTick>
 8002580:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002584:	079b      	lsls	r3, r3, #30
 8002586:	f53f af4f 	bmi.w	8002428 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258a:	f7ff f91d 	bl	80017c8 <HAL_GetTick>
 800258e:	1b80      	subs	r0, r0, r6
 8002590:	2802      	cmp	r0, #2
 8002592:	d9f6      	bls.n	8002582 <HAL_RCC_OscConfig+0x17e>
 8002594:	e77d      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002596:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800259e:	f7ff f913 	bl	80017c8 <HAL_GetTick>
 80025a2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025a6:	079f      	lsls	r7, r3, #30
 80025a8:	f57f af3e 	bpl.w	8002428 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ac:	f7ff f90c 	bl	80017c8 <HAL_GetTick>
 80025b0:	1b80      	subs	r0, r0, r6
 80025b2:	2802      	cmp	r0, #2
 80025b4:	d9f6      	bls.n	80025a4 <HAL_RCC_OscConfig+0x1a0>
 80025b6:	e76c      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b8:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_OscConfig+0x288>)
 80025ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025bc:	00d0      	lsls	r0, r2, #3
 80025be:	d427      	bmi.n	8002610 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80025c2:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d4:	4d2e      	ldr	r5, [pc, #184]	; (8002690 <HAL_RCC_OscConfig+0x28c>)
 80025d6:	682b      	ldr	r3, [r5, #0]
 80025d8:	05d9      	lsls	r1, r3, #23
 80025da:	d51b      	bpl.n	8002614 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025dc:	68a3      	ldr	r3, [r4, #8]
 80025de:	4d2b      	ldr	r5, [pc, #172]	; (800268c <HAL_RCC_OscConfig+0x288>)
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d127      	bne.n	8002634 <HAL_RCC_OscConfig+0x230>
 80025e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025f0:	f7ff f8ea 	bl	80017c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	4f25      	ldr	r7, [pc, #148]	; (800268c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80025f6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025fa:	079b      	lsls	r3, r3, #30
 80025fc:	d53f      	bpl.n	800267e <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80025fe:	2e00      	cmp	r6, #0
 8002600:	f43f af16 	beq.w	8002430 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002604:	4a21      	ldr	r2, [pc, #132]	; (800268c <HAL_RCC_OscConfig+0x288>)
 8002606:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	e70f      	b.n	8002430 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8002610:	2600      	movs	r6, #0
 8002612:	e7df      	b.n	80025d4 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800261c:	f7ff f8d4 	bl	80017c8 <HAL_GetTick>
 8002620:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002622:	682b      	ldr	r3, [r5, #0]
 8002624:	05da      	lsls	r2, r3, #23
 8002626:	d4d9      	bmi.n	80025dc <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7ff f8ce 	bl	80017c8 <HAL_GetTick>
 800262c:	1bc0      	subs	r0, r0, r7
 800262e:	2864      	cmp	r0, #100	; 0x64
 8002630:	d9f7      	bls.n	8002622 <HAL_RCC_OscConfig+0x21e>
 8002632:	e72e      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002634:	b9ab      	cbnz	r3, 8002662 <HAL_RCC_OscConfig+0x25e>
 8002636:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	672b      	str	r3, [r5, #112]	; 0x70
 8002642:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800264a:	f7ff f8bd 	bl	80017c8 <HAL_GetTick>
 800264e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002650:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002652:	0798      	lsls	r0, r3, #30
 8002654:	d5d3      	bpl.n	80025fe <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7ff f8b7 	bl	80017c8 <HAL_GetTick>
 800265a:	1bc0      	subs	r0, r0, r7
 800265c:	4540      	cmp	r0, r8
 800265e:	d9f7      	bls.n	8002650 <HAL_RCC_OscConfig+0x24c>
 8002660:	e717      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002662:	2b05      	cmp	r3, #5
 8002664:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002666:	d103      	bne.n	8002670 <HAL_RCC_OscConfig+0x26c>
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	672b      	str	r3, [r5, #112]	; 0x70
 800266e:	e7b9      	b.n	80025e4 <HAL_RCC_OscConfig+0x1e0>
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	672b      	str	r3, [r5, #112]	; 0x70
 8002676:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	e7b5      	b.n	80025ea <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7ff f8a3 	bl	80017c8 <HAL_GetTick>
 8002682:	eba0 0008 	sub.w	r0, r0, r8
 8002686:	42a8      	cmp	r0, r5
 8002688:	d9b6      	bls.n	80025f8 <HAL_RCC_OscConfig+0x1f4>
 800268a:	e702      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
 800268c:	40023800 	.word	0x40023800
 8002690:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002694:	4d24      	ldr	r5, [pc, #144]	; (8002728 <HAL_RCC_OscConfig+0x324>)
 8002696:	68ab      	ldr	r3, [r5, #8]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	f43f aeb5 	beq.w	800240c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80026a2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80026a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026aa:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ac:	d12f      	bne.n	800270e <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80026ae:	f7ff f88b 	bl	80017c8 <HAL_GetTick>
 80026b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b4:	682b      	ldr	r3, [r5, #0]
 80026b6:	0199      	lsls	r1, r3, #6
 80026b8:	d423      	bmi.n	8002702 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ba:	6a22      	ldr	r2, [r4, #32]
 80026bc:	69e3      	ldr	r3, [r4, #28]
 80026be:	4313      	orrs	r3, r2
 80026c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026c2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80026c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80026cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80026ce:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80026d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d4:	4c14      	ldr	r4, [pc, #80]	; (8002728 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d6:	0852      	lsrs	r2, r2, #1
 80026d8:	3a01      	subs	r2, #1
 80026da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80026de:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80026e0:	682b      	ldr	r3, [r5, #0]
 80026e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026e8:	f7ff f86e 	bl	80017c8 <HAL_GetTick>
 80026ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	019a      	lsls	r2, r3, #6
 80026f2:	f53f aea1 	bmi.w	8002438 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7ff f867 	bl	80017c8 <HAL_GetTick>
 80026fa:	1b40      	subs	r0, r0, r5
 80026fc:	2802      	cmp	r0, #2
 80026fe:	d9f6      	bls.n	80026ee <HAL_RCC_OscConfig+0x2ea>
 8002700:	e6c7      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7ff f861 	bl	80017c8 <HAL_GetTick>
 8002706:	1b80      	subs	r0, r0, r6
 8002708:	2802      	cmp	r0, #2
 800270a:	d9d3      	bls.n	80026b4 <HAL_RCC_OscConfig+0x2b0>
 800270c:	e6c1      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800270e:	f7ff f85b 	bl	80017c8 <HAL_GetTick>
 8002712:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	019b      	lsls	r3, r3, #6
 8002718:	f57f ae8e 	bpl.w	8002438 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271c:	f7ff f854 	bl	80017c8 <HAL_GetTick>
 8002720:	1b00      	subs	r0, r0, r4
 8002722:	2802      	cmp	r0, #2
 8002724:	d9f6      	bls.n	8002714 <HAL_RCC_OscConfig+0x310>
 8002726:	e6b4      	b.n	8002492 <HAL_RCC_OscConfig+0x8e>
 8002728:	40023800 	.word	0x40023800

0800272c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_RCC_GetSysClockFreq+0x48>)
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	f002 020c 	and.w	r2, r2, #12
 8002734:	2a04      	cmp	r2, #4
 8002736:	d003      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x14>
 8002738:	2a08      	cmp	r2, #8
 800273a:	d003      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800273c:	480e      	ldr	r0, [pc, #56]	; (8002778 <HAL_RCC_GetSysClockFreq+0x4c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800273e:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002740:	480e      	ldr	r0, [pc, #56]	; (800277c <HAL_RCC_GetSysClockFreq+0x50>)
 8002742:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002744:	685a      	ldr	r2, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002746:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002748:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 800274c:	685b      	ldr	r3, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800274e:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8002750:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002754:	bf4c      	ite	mi
 8002756:	4809      	ldrmi	r0, [pc, #36]	; (800277c <HAL_RCC_GetSysClockFreq+0x50>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8002758:	4807      	ldrpl	r0, [pc, #28]	; (8002778 <HAL_RCC_GetSysClockFreq+0x4c>)
 800275a:	fbb0 f0f2 	udiv	r0, r0, r2
 800275e:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_RCC_GetSysClockFreq+0x48>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002768:	3301      	adds	r3, #1
 800276a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800276c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	00f42400 	.word	0x00f42400
 800277c:	007a1200 	.word	0x007a1200

08002780 <HAL_RCC_ClockConfig>:
{
 8002780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002784:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002786:	4604      	mov	r4, r0
 8002788:	b910      	cbnz	r0, 8002790 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
 800278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4a3f      	ldr	r2, [pc, #252]	; (8002890 <HAL_RCC_ClockConfig+0x110>)
 8002792:	6813      	ldr	r3, [r2, #0]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	428b      	cmp	r3, r1
 800279a:	d328      	bcc.n	80027ee <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	0796      	lsls	r6, r2, #30
 80027a0:	d430      	bmi.n	8002804 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	07d0      	lsls	r0, r2, #31
 80027a4:	d436      	bmi.n	8002814 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a6:	4a3a      	ldr	r2, [pc, #232]	; (8002890 <HAL_RCC_ClockConfig+0x110>)
 80027a8:	6813      	ldr	r3, [r2, #0]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	429d      	cmp	r5, r3
 80027b0:	d35a      	bcc.n	8002868 <HAL_RCC_ClockConfig+0xe8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b2:	6822      	ldr	r2, [r4, #0]
 80027b4:	0751      	lsls	r1, r2, #29
 80027b6:	d462      	bmi.n	800287e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b8:	0713      	lsls	r3, r2, #28
 80027ba:	d507      	bpl.n	80027cc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027bc:	4a35      	ldr	r2, [pc, #212]	; (8002894 <HAL_RCC_ClockConfig+0x114>)
 80027be:	6921      	ldr	r1, [r4, #16]
 80027c0:	6893      	ldr	r3, [r2, #8]
 80027c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80027c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027cc:	f7ff ffae 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_RCC_ClockConfig+0x114>)
 80027d2:	4a31      	ldr	r2, [pc, #196]	; (8002898 <HAL_RCC_ClockConfig+0x118>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	40d8      	lsrs	r0, r3
 80027de:	4b2f      	ldr	r3, [pc, #188]	; (800289c <HAL_RCC_ClockConfig+0x11c>)
 80027e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7fe fc64 	bl	80010b0 <HAL_InitTick>
  return HAL_OK;
 80027e8:	2000      	movs	r0, #0
 80027ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	6813      	ldr	r3, [r2, #0]
 80027f0:	f023 030f 	bic.w	r3, r3, #15
 80027f4:	430b      	orrs	r3, r1
 80027f6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	4299      	cmp	r1, r3
 8002800:	d1c3      	bne.n	800278a <HAL_RCC_ClockConfig+0xa>
 8002802:	e7cb      	b.n	800279c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4923      	ldr	r1, [pc, #140]	; (8002894 <HAL_RCC_ClockConfig+0x114>)
 8002806:	68a0      	ldr	r0, [r4, #8]
 8002808:	688b      	ldr	r3, [r1, #8]
 800280a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800280e:	4303      	orrs	r3, r0
 8002810:	608b      	str	r3, [r1, #8]
 8002812:	e7c6      	b.n	80027a2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002814:	6861      	ldr	r1, [r4, #4]
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <HAL_RCC_ClockConfig+0x114>)
 8002818:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281c:	d11c      	bne.n	8002858 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	d0b2      	beq.n	800278a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002824:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002826:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	4e1a      	ldr	r6, [pc, #104]	; (8002894 <HAL_RCC_ClockConfig+0x114>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282c:	f022 0203 	bic.w	r2, r2, #3
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002834:	f7fe ffc8 	bl	80017c8 <HAL_GetTick>
 8002838:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	68b3      	ldr	r3, [r6, #8]
 800283c:	6862      	ldr	r2, [r4, #4]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002846:	d0ae      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7fe ffbe 	bl	80017c8 <HAL_GetTick>
 800284c:	1bc0      	subs	r0, r0, r7
 800284e:	4540      	cmp	r0, r8
 8002850:	d9f3      	bls.n	800283a <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 8002852:	2003      	movs	r0, #3
}
 8002854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002858:	2902      	cmp	r1, #2
 800285a:	d102      	bne.n	8002862 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002860:	e7df      	b.n	8002822 <HAL_RCC_ClockConfig+0xa2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	f012 0f02 	tst.w	r2, #2
 8002866:	e7dc      	b.n	8002822 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002868:	6813      	ldr	r3, [r2, #0]
 800286a:	f023 030f 	bic.w	r3, r3, #15
 800286e:	432b      	orrs	r3, r5
 8002870:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	429d      	cmp	r5, r3
 800287a:	d186      	bne.n	800278a <HAL_RCC_ClockConfig+0xa>
 800287c:	e799      	b.n	80027b2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287e:	4905      	ldr	r1, [pc, #20]	; (8002894 <HAL_RCC_ClockConfig+0x114>)
 8002880:	68e0      	ldr	r0, [r4, #12]
 8002882:	688b      	ldr	r3, [r1, #8]
 8002884:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002888:	4303      	orrs	r3, r0
 800288a:	608b      	str	r3, [r1, #8]
 800288c:	e794      	b.n	80027b8 <HAL_RCC_ClockConfig+0x38>
 800288e:	bf00      	nop
 8002890:	40023c00 	.word	0x40023c00
 8002894:	40023800 	.word	0x40023800
 8002898:	08005b1a 	.word	0x08005b1a
 800289c:	20000000 	.word	0x20000000

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80028a0:	4b01      	ldr	r3, [pc, #4]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80028ae:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80028ba:	6810      	ldr	r0, [r2, #0]
}
 80028bc:	40d8      	lsrs	r0, r3
 80028be:	4770      	bx	lr
 80028c0:	40023800 	.word	0x40023800
 80028c4:	08005b2a 	.word	0x08005b2a
 80028c8:	20000000 	.word	0x20000000

080028cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80028ce:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	4a03      	ldr	r2, [pc, #12]	; (80028e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80028da:	6810      	ldr	r0, [r2, #0]
} 
 80028dc:	40d8      	lsrs	r0, r3
 80028de:	4770      	bx	lr
 80028e0:	40023800 	.word	0x40023800
 80028e4:	08005b2a 	.word	0x08005b2a
 80028e8:	20000000 	.word	0x20000000

080028ec <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028ec:	230f      	movs	r3, #15
 80028ee:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_GetClockConfig+0x34>)
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	f002 0203 	and.w	r2, r2, #3
 80028f8:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002900:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002908:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	08db      	lsrs	r3, r3, #3
 800290e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002912:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_GetClockConfig+0x38>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	600b      	str	r3, [r1, #0]
 800291e:	4770      	bx	lr
 8002920:	40023800 	.word	0x40023800
 8002924:	40023c00 	.word	0x40023c00

08002928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800292c:	6802      	ldr	r2, [r0, #0]
{
 800292e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002930:	f012 0601 	ands.w	r6, r2, #1
 8002934:	d00b      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002936:	4bb8      	ldr	r3, [pc, #736]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002938:	6899      	ldr	r1, [r3, #8]
 800293a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800293e:	6099      	str	r1, [r3, #8]
 8002940:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002942:	6899      	ldr	r1, [r3, #8]
 8002944:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002946:	fab6 f686 	clz	r6, r6
 800294a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800294c:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800294e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8002952:	d012      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002954:	49b0      	ldr	r1, [pc, #704]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002956:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002958:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800295c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002960:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8002964:	bf08      	it	eq
 8002966:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002968:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800296c:	bf16      	itet	ne
 800296e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8002972:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002974:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002976:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800297a:	02d7      	lsls	r7, r2, #11
 800297c:	d510      	bpl.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800297e:	48a6      	ldr	r0, [pc, #664]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002980:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002982:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002986:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800298a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800298e:	ea43 0301 	orr.w	r3, r3, r1
 8002992:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002996:	f000 8189 	beq.w	8002cac <HAL_RCCEx_PeriphCLKConfig+0x384>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 800299a:	2900      	cmp	r1, #0
 800299c:	bf08      	it	eq
 800299e:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 80029a0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80029a4:	bf18      	it	ne
 80029a6:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029a8:	0690      	lsls	r0, r2, #26
 80029aa:	d531      	bpl.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029ac:	4b9a      	ldr	r3, [pc, #616]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029ae:	4f9b      	ldr	r7, [pc, #620]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ca:	f7fe fefd 	bl	80017c8 <HAL_GetTick>
 80029ce:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	05d9      	lsls	r1, r3, #23
 80029d4:	f140 816c 	bpl.w	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x388>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029d8:	4f8f      	ldr	r7, [pc, #572]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029da:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029dc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80029e0:	f040 8171 	bne.w	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029e6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80029ea:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80029ee:	4a8a      	ldr	r2, [pc, #552]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029f0:	f040 818f 	bne.w	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80029f4:	6891      	ldr	r1, [r2, #8]
 80029f6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80029fa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80029fe:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002a02:	4301      	orrs	r1, r0
 8002a04:	6091      	str	r1, [r2, #8]
 8002a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	06df      	lsls	r7, r3, #27
 8002a14:	d50c      	bpl.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a16:	4a80      	ldr	r2, [pc, #512]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a18:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002a1c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002a20:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002a24:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002a28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a2a:	4301      	orrs	r1, r0
 8002a2c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a30:	0458      	lsls	r0, r3, #17
 8002a32:	d508      	bpl.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a34:	4978      	ldr	r1, [pc, #480]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a36:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002a38:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a3c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002a40:	4302      	orrs	r2, r0
 8002a42:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a46:	0419      	lsls	r1, r3, #16
 8002a48:	d508      	bpl.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a4a:	4973      	ldr	r1, [pc, #460]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a4c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002a4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a52:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002a56:	4302      	orrs	r2, r0
 8002a58:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a5c:	03da      	lsls	r2, r3, #15
 8002a5e:	d508      	bpl.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a60:	496d      	ldr	r1, [pc, #436]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a62:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002a64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a68:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002a6c:	4302      	orrs	r2, r0
 8002a6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a72:	039f      	lsls	r7, r3, #14
 8002a74:	d508      	bpl.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a76:	4968      	ldr	r1, [pc, #416]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a78:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002a7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a7e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002a82:	4302      	orrs	r2, r0
 8002a84:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a88:	0658      	lsls	r0, r3, #25
 8002a8a:	d508      	bpl.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a8c:	4962      	ldr	r1, [pc, #392]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a8e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002a90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a94:	f022 0203 	bic.w	r2, r2, #3
 8002a98:	4302      	orrs	r2, r0
 8002a9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a9e:	0619      	lsls	r1, r3, #24
 8002aa0:	d508      	bpl.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aa2:	495d      	ldr	r1, [pc, #372]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002aa4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002aa6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002aaa:	f022 020c 	bic.w	r2, r2, #12
 8002aae:	4302      	orrs	r2, r0
 8002ab0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ab4:	05da      	lsls	r2, r3, #23
 8002ab6:	d508      	bpl.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ab8:	4957      	ldr	r1, [pc, #348]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002aba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002abc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ac0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002ac4:	4302      	orrs	r2, r0
 8002ac6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aca:	059f      	lsls	r7, r3, #22
 8002acc:	d508      	bpl.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ace:	4952      	ldr	r1, [pc, #328]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ad0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002ad2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ad6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ada:	4302      	orrs	r2, r0
 8002adc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ae0:	0558      	lsls	r0, r3, #21
 8002ae2:	d508      	bpl.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ae4:	494c      	ldr	r1, [pc, #304]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ae6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ae8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002aec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002af0:	4302      	orrs	r2, r0
 8002af2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002af6:	0519      	lsls	r1, r3, #20
 8002af8:	d508      	bpl.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002afa:	4947      	ldr	r1, [pc, #284]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002afe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b02:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b06:	4302      	orrs	r2, r0
 8002b08:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b0c:	04da      	lsls	r2, r3, #19
 8002b0e:	d508      	bpl.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b10:	4941      	ldr	r1, [pc, #260]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b12:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002b14:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b18:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b1c:	4302      	orrs	r2, r0
 8002b1e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b22:	049f      	lsls	r7, r3, #18
 8002b24:	d508      	bpl.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b26:	493c      	ldr	r1, [pc, #240]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b28:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002b2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b2e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b32:	4302      	orrs	r2, r0
 8002b34:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b38:	0258      	lsls	r0, r3, #9
 8002b3a:	d508      	bpl.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b3c:	4936      	ldr	r1, [pc, #216]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b3e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002b40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b44:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002b48:	4302      	orrs	r2, r0
 8002b4a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b4e:	0299      	lsls	r1, r3, #10
 8002b50:	d50c      	bpl.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b52:	4831      	ldr	r0, [pc, #196]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b54:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002b56:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8002b5a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b5e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8002b62:	bf08      	it	eq
 8002b64:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b66:	430a      	orrs	r2, r1
 8002b68:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b6c:	035a      	lsls	r2, r3, #13
 8002b6e:	d508      	bpl.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b70:	4929      	ldr	r1, [pc, #164]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b72:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002b74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b7c:	4302      	orrs	r2, r0
 8002b7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b82:	021f      	lsls	r7, r3, #8
 8002b84:	d509      	bpl.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b86:	4924      	ldr	r1, [pc, #144]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b88:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002b8c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b90:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002b94:	4302      	orrs	r2, r0
 8002b96:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b9a:	0158      	lsls	r0, r3, #5
 8002b9c:	d509      	bpl.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b9e:	491e      	ldr	r1, [pc, #120]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ba0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002ba4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ba8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002bac:	4302      	orrs	r2, r0
 8002bae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bb2:	0119      	lsls	r1, r3, #4
 8002bb4:	d509      	bpl.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bb6:	4918      	ldr	r1, [pc, #96]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bb8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8002bbc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002bc0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002bc4:	4302      	orrs	r2, r0
 8002bc6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002bca:	00da      	lsls	r2, r3, #3
 8002bcc:	d509      	bpl.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bce:	4912      	ldr	r1, [pc, #72]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bd0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002bd4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002bd8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002bdc:	4302      	orrs	r2, r0
 8002bde:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002be2:	2e01      	cmp	r6, #1
 8002be4:	f000 8099 	beq.w	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002be8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bec:	f000 8095 	beq.w	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bf0:	2d01      	cmp	r5, #1
 8002bf2:	d159      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8002bf4:	4d08      	ldr	r5, [pc, #32]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bf6:	682b      	ldr	r3, [r5, #0]
 8002bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfe:	f7fe fde3 	bl	80017c8 <HAL_GetTick>
 8002c02:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	009f      	lsls	r7, r3, #2
 8002c08:	f100 810b 	bmi.w	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c0c:	6821      	ldr	r1, [r4, #0]
 8002c0e:	030d      	lsls	r5, r1, #12
 8002c10:	d506      	bpl.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c14:	b143      	cbz	r3, 8002c28 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002c16:	e003      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	02c8      	lsls	r0, r1, #11
 8002c22:	d51d      	bpl.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c26:	b9db      	cbnz	r3, 8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c28:	4a85      	ldr	r2, [pc, #532]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002c2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c2e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c36:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002c3a:	4303      	orrs	r3, r0
 8002c3c:	6960      	ldr	r0, [r4, #20]
 8002c3e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002c42:	69a0      	ldr	r0, [r4, #24]
 8002c44:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c4c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002c50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002c52:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002c56:	3801      	subs	r0, #1
 8002c58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002c5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c60:	028a      	lsls	r2, r1, #10
 8002c62:	d515      	bpl.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002c64:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c6c:	4a74      	ldr	r2, [pc, #464]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002c6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c72:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c76:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002c7a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	6961      	ldr	r1, [r4, #20]
 8002c82:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002c86:	6a21      	ldr	r1, [r4, #32]
 8002c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c90:	4c6b      	ldr	r4, [pc, #428]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9a:	f7fe fd95 	bl	80017c8 <HAL_GetTick>
 8002c9e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	f140 80c4 	bpl.w	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x508>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002ca8:	2000      	movs	r0, #0
 8002caa:	e009      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
      plli2sused = 1; 
 8002cac:	2601      	movs	r6, #1
 8002cae:	e677      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb0:	f7fe fd8a 	bl	80017c8 <HAL_GetTick>
 8002cb4:	eba0 0008 	sub.w	r0, r0, r8
 8002cb8:	2864      	cmp	r0, #100	; 0x64
 8002cba:	f67f ae89 	bls.w	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002cbe:	2003      	movs	r0, #3
}
 8002cc0:	b003      	add	sp, #12
 8002cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002cc8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	f43f ae89 	beq.w	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cde:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ce2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ce6:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002ce8:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cec:	07da      	lsls	r2, r3, #31
 8002cee:	f57f ae79 	bpl.w	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002cf2:	f7fe fd69 	bl	80017c8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002cfa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cfe:	079b      	lsls	r3, r3, #30
 8002d00:	f53f ae70 	bmi.w	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe fd60 	bl	80017c8 <HAL_GetTick>
 8002d08:	eba0 0008 	sub.w	r0, r0, r8
 8002d0c:	4548      	cmp	r0, r9
 8002d0e:	d9f5      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8002d10:	e7d5      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x396>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d12:	6891      	ldr	r1, [r2, #8]
 8002d14:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002d18:	e674      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 8002d1a:	4e49      	ldr	r6, [pc, #292]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002d1c:	6833      	ldr	r3, [r6, #0]
 8002d1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d22:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002d24:	f7fe fd50 	bl	80017c8 <HAL_GetTick>
 8002d28:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d2a:	6833      	ldr	r3, [r6, #0]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	d472      	bmi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	07d7      	lsls	r7, r2, #31
 8002d34:	d512      	bpl.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d38:	b983      	cbnz	r3, 8002d5c <HAL_RCCEx_PeriphCLKConfig+0x434>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d3a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d3e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d46:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	6861      	ldr	r1, [r4, #4]
 8002d4e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002d52:	68a1      	ldr	r1, [r4, #8]
 8002d54:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002d58:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d5c:	0316      	lsls	r6, r2, #12
 8002d5e:	d503      	bpl.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002d60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d66:	d005      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8002d68:	02d0      	lsls	r0, r2, #11
 8002d6a:	d51e      	bpl.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x482>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8002d6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d72:	d11a      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d74:	4932      	ldr	r1, [pc, #200]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002d76:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d7a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d82:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002d86:	4303      	orrs	r3, r0
 8002d88:	6860      	ldr	r0, [r4, #4]
 8002d8a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002d8e:	68e0      	ldr	r0, [r4, #12]
 8002d90:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002d94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002d98:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d9e:	f020 001f 	bic.w	r0, r0, #31
 8002da2:	3b01      	subs	r3, #1
 8002da4:	4303      	orrs	r3, r0
 8002da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002daa:	01d1      	lsls	r1, r2, #7
 8002dac:	d511      	bpl.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dae:	4924      	ldr	r1, [pc, #144]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002db0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002db4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002db8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002dbc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	6860      	ldr	r0, [r4, #4]
 8002dc4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002dc8:	6920      	ldr	r0, [r4, #16]
 8002dca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002dce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dd2:	0192      	lsls	r2, r2, #6
 8002dd4:	d50d      	bpl.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dd6:	6923      	ldr	r3, [r4, #16]
 8002dd8:	6862      	ldr	r2, [r4, #4]
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002de0:	68e2      	ldr	r2, [r4, #12]
 8002de2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002de6:	68a2      	ldr	r2, [r4, #8]
 8002de8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002dee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002df2:	4e13      	ldr	r6, [pc, #76]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002df4:	6833      	ldr	r3, [r6, #0]
 8002df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dfa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fce4 	bl	80017c8 <HAL_GetTick>
 8002e00:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e02:	6833      	ldr	r3, [r6, #0]
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	f53f aef3 	bmi.w	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e0a:	f7fe fcdd 	bl	80017c8 <HAL_GetTick>
 8002e0e:	1bc0      	subs	r0, r0, r7
 8002e10:	2864      	cmp	r0, #100	; 0x64
 8002e12:	d9f6      	bls.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e14:	e753      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e16:	f7fe fcd7 	bl	80017c8 <HAL_GetTick>
 8002e1a:	1bc0      	subs	r0, r0, r7
 8002e1c:	2864      	cmp	r0, #100	; 0x64
 8002e1e:	d984      	bls.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x402>
 8002e20:	e74d      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e22:	f7fe fcd1 	bl	80017c8 <HAL_GetTick>
 8002e26:	1b80      	subs	r0, r0, r6
 8002e28:	2864      	cmp	r0, #100	; 0x64
 8002e2a:	f67f aeeb 	bls.w	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002e2e:	e746      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e30:	f7fe fcca 	bl	80017c8 <HAL_GetTick>
 8002e34:	1b40      	subs	r0, r0, r5
 8002e36:	2864      	cmp	r0, #100	; 0x64
 8002e38:	f67f af32 	bls.w	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002e3c:	e73f      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x396>
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800

08002e44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e44:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e46:	4604      	mov	r4, r0
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d04e      	beq.n	8002eea <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e50:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002e54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e58:	b91b      	cbnz	r3, 8002e62 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e5a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e5e:	f7fe f8c5 	bl	8000fec <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e62:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e64:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e66:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e68:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002e6c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e6e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e76:	600b      	str	r3, [r1, #0]
 8002e78:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e7c:	d932      	bls.n	8002ee4 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e7e:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e80:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e84:	bf18      	it	ne
 8002e86:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002e88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e8a:	b92b      	cbnz	r3, 8002e98 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e8c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002e90:	bf8c      	ite	hi
 8002e92:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002e94:	2301      	movls	r3, #1
 8002e96:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002e98:	68a6      	ldr	r6, [r4, #8]
 8002e9a:	6863      	ldr	r3, [r4, #4]
 8002e9c:	69a5      	ldr	r5, [r4, #24]
 8002e9e:	4333      	orrs	r3, r6
 8002ea0:	6926      	ldr	r6, [r4, #16]
 8002ea2:	4333      	orrs	r3, r6
 8002ea4:	6966      	ldr	r6, [r4, #20]
 8002ea6:	4333      	orrs	r3, r6
 8002ea8:	69e6      	ldr	r6, [r4, #28]
 8002eaa:	4333      	orrs	r3, r6
 8002eac:	6a26      	ldr	r6, [r4, #32]
 8002eae:	4333      	orrs	r3, r6
 8002eb0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002eb2:	4333      	orrs	r3, r6
 8002eb4:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002eb8:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002eba:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002ebc:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002ec0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	432a      	orrs	r2, r5
 8002ecc:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ece:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002ed0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ed2:	69cb      	ldr	r3, [r1, #28]
 8002ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ed8:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002eda:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002edc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ede:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ee4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ee8:	e7cc      	b.n	8002e84 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
}
 8002eec:	bd70      	pop	{r4, r5, r6, pc}

08002eee <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eee:	6a03      	ldr	r3, [r0, #32]
{
 8002ef0:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef2:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef4:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef8:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8002efc:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002f00:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f02:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002f06:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f0a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f0c:	6203      	str	r3, [r0, #32]
 8002f0e:	bd10      	pop	{r4, pc}

08002f10 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f10:	6a03      	ldr	r3, [r0, #32]
 8002f12:	f023 0310 	bic.w	r3, r3, #16
{
 8002f16:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f18:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002f1c:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f1e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002f26:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8002f2a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f2e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f30:	6203      	str	r3, [r0, #32]
 8002f32:	bd10      	pop	{r4, pc}

08002f34 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f34:	6803      	ldr	r3, [r0, #0]
}
 8002f36:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
}
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIM_PWM_MspInit>:
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_OC_DelayElapsedCallback>:
 8002f4c:	4770      	bx	lr

08002f4e <HAL_TIM_IC_CaptureCallback>:
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002f50:	4770      	bx	lr

08002f52 <HAL_TIM_TriggerCallback>:
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f54:	6803      	ldr	r3, [r0, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	0791      	lsls	r1, r2, #30
{
 8002f5a:	b510      	push	{r4, lr}
 8002f5c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f5e:	d50f      	bpl.n	8002f80 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	0792      	lsls	r2, r2, #30
 8002f64:	d50c      	bpl.n	8002f80 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f66:	f06f 0202 	mvn.w	r2, #2
 8002f6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002f6e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f70:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002f72:	0799      	lsls	r1, r3, #30
 8002f74:	f000 8085 	beq.w	8003082 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002f78:	f7ff ffe9 	bl	8002f4e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	0752      	lsls	r2, r2, #29
 8002f86:	d510      	bpl.n	8002faa <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	0750      	lsls	r0, r2, #29
 8002f8c:	d50d      	bpl.n	8002faa <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f8e:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f96:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002f98:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f9a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002f9c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002fa0:	d075      	beq.n	800308e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	f7ff ffd4 	bl	8002f4e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	0711      	lsls	r1, r2, #28
 8002fb0:	d50f      	bpl.n	8002fd2 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	0712      	lsls	r2, r2, #28
 8002fb6:	d50c      	bpl.n	8002fd2 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fb8:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc0:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002fc2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002fc6:	079b      	lsls	r3, r3, #30
 8002fc8:	d067      	beq.n	800309a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	f7ff ffc0 	bl	8002f4e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	06d0      	lsls	r0, r2, #27
 8002fd8:	d510      	bpl.n	8002ffc <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	06d1      	lsls	r1, r2, #27
 8002fde:	d50d      	bpl.n	8002ffc <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe0:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe8:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002fea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fec:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002fee:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002ff2:	d058      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff4:	f7ff ffab 	bl	8002f4e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	07d2      	lsls	r2, r2, #31
 8003002:	d508      	bpl.n	8003016 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	07d0      	lsls	r0, r2, #31
 8003008:	d505      	bpl.n	8003016 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800300a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800300e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003010:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003012:	f7fd ffb3 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	0611      	lsls	r1, r2, #24
 800301c:	d508      	bpl.n	8003030 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	0612      	lsls	r2, r2, #24
 8003022:	d505      	bpl.n	8003030 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003024:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003028:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800302a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800302c:	f000 fb31 	bl	8003692 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	05d0      	lsls	r0, r2, #23
 8003036:	d508      	bpl.n	800304a <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	0611      	lsls	r1, r2, #24
 800303c:	d505      	bpl.n	800304a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800303e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003042:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003044:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003046:	f000 fb24 	bl	8003692 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	0652      	lsls	r2, r2, #25
 8003050:	d508      	bpl.n	8003064 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	0650      	lsls	r0, r2, #25
 8003056:	d505      	bpl.n	8003064 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003058:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800305c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800305e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003060:	f7ff ff77 	bl	8002f52 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	0691      	lsls	r1, r2, #26
 800306a:	d522      	bpl.n	80030b2 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	0692      	lsls	r2, r2, #26
 8003070:	d51f      	bpl.n	80030b2 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003072:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003076:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003078:	611a      	str	r2, [r3, #16]
}
 800307a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800307e:	f000 bb07 	b.w	8003690 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	f7ff ff63 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff ff62 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
 800308c:	e776      	b.n	8002f7c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	f7ff ff5d 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003092:	4620      	mov	r0, r4
 8003094:	f7ff ff5c 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
 8003098:	e785      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	f7ff ff57 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800309e:	4620      	mov	r0, r4
 80030a0:	f7ff ff56 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
 80030a4:	e793      	b.n	8002fce <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	f7ff ff51 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7ff ff50 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
 80030b0:	e7a2      	b.n	8002ff8 <HAL_TIM_IRQHandler+0xa4>
 80030b2:	bd10      	pop	{r4, pc}

080030b4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80030b4:	4a30      	ldr	r2, [pc, #192]	; (8003178 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80030b6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80030b8:	4290      	cmp	r0, r2
 80030ba:	d012      	beq.n	80030e2 <TIM_Base_SetConfig+0x2e>
 80030bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030c0:	d00f      	beq.n	80030e2 <TIM_Base_SetConfig+0x2e>
 80030c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80030c6:	4290      	cmp	r0, r2
 80030c8:	d00b      	beq.n	80030e2 <TIM_Base_SetConfig+0x2e>
 80030ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030ce:	4290      	cmp	r0, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0x2e>
 80030d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030d6:	4290      	cmp	r0, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0x2e>
 80030da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80030de:	4290      	cmp	r0, r2
 80030e0:	d11d      	bne.n	800311e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80030e2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030e8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80030ea:	4a23      	ldr	r2, [pc, #140]	; (8003178 <TIM_Base_SetConfig+0xc4>)
 80030ec:	4290      	cmp	r0, r2
 80030ee:	d104      	bne.n	80030fa <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 80030f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030f4:	68ca      	ldr	r2, [r1, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	e028      	b.n	800314c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80030fa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030fe:	d0f7      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
 8003100:	4a1e      	ldr	r2, [pc, #120]	; (800317c <TIM_Base_SetConfig+0xc8>)
 8003102:	4290      	cmp	r0, r2
 8003104:	d0f4      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
 8003106:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800310a:	4290      	cmp	r0, r2
 800310c:	d0f0      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
 800310e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003112:	4290      	cmp	r0, r2
 8003114:	d0ec      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
 8003116:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800311a:	4290      	cmp	r0, r2
 800311c:	d0e8      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
 800311e:	4a18      	ldr	r2, [pc, #96]	; (8003180 <TIM_Base_SetConfig+0xcc>)
 8003120:	4290      	cmp	r0, r2
 8003122:	d0e5      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
 8003124:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003128:	4290      	cmp	r0, r2
 800312a:	d0e1      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
 800312c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003130:	4290      	cmp	r0, r2
 8003132:	d0dd      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
 8003134:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003138:	4290      	cmp	r0, r2
 800313a:	d0d9      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
 800313c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003140:	4290      	cmp	r0, r2
 8003142:	d0d5      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
 8003144:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003148:	4290      	cmp	r0, r2
 800314a:	d0d1      	beq.n	80030f0 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800314c:	694a      	ldr	r2, [r1, #20]
 800314e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003152:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003154:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003156:	688b      	ldr	r3, [r1, #8]
 8003158:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800315a:	680b      	ldr	r3, [r1, #0]
 800315c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <TIM_Base_SetConfig+0xc4>)
 8003160:	4298      	cmp	r0, r3
 8003162:	d006      	beq.n	8003172 <TIM_Base_SetConfig+0xbe>
 8003164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003168:	4298      	cmp	r0, r3
 800316a:	d002      	beq.n	8003172 <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 800316c:	2301      	movs	r3, #1
 800316e:	6143      	str	r3, [r0, #20]
}
 8003170:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003172:	690b      	ldr	r3, [r1, #16]
 8003174:	6303      	str	r3, [r0, #48]	; 0x30
 8003176:	e7f9      	b.n	800316c <TIM_Base_SetConfig+0xb8>
 8003178:	40010000 	.word	0x40010000
 800317c:	40000400 	.word	0x40000400
 8003180:	40014000 	.word	0x40014000

08003184 <HAL_TIM_Base_Init>:
{ 
 8003184:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003186:	4604      	mov	r4, r0
 8003188:	b1a0      	cbz	r0, 80031b4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800318a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800318e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003192:	b91b      	cbnz	r3, 800319c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003194:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003198:	f7fd ffec 	bl	8001174 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800319c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800319e:	6820      	ldr	r0, [r4, #0]
 80031a0:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 80031a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80031a6:	f7ff ff85 	bl	80030b4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80031aa:	2301      	movs	r3, #1
  return HAL_OK;
 80031ac:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80031ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80031b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80031b4:	2001      	movs	r0, #1
}
 80031b6:	bd10      	pop	{r4, pc}

080031b8 <HAL_TIM_PWM_Init>:
{
 80031b8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80031ba:	4604      	mov	r4, r0
 80031bc:	b1a0      	cbz	r0, 80031e8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80031be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031c6:	b91b      	cbnz	r3, 80031d0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;  
 80031c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80031cc:	f7ff febd 	bl	8002f4a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80031d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 80031d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80031da:	f7ff ff6b 	bl	80030b4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80031de:	2301      	movs	r3, #1
  return HAL_OK;
 80031e0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80031e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80031e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80031e8:	2001      	movs	r0, #1
}  
 80031ea:	bd10      	pop	{r4, pc}

080031ec <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ec:	6a03      	ldr	r3, [r0, #32]
 80031ee:	f023 0301 	bic.w	r3, r3, #1
{
 80031f2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80031f6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80031f8:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80031fa:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80031fc:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8003200:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003202:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003206:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800320a:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 800320c:	688d      	ldr	r5, [r1, #8]
 800320e:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003210:	4d0c      	ldr	r5, [pc, #48]	; (8003244 <TIM_OC1_SetConfig+0x58>)
 8003212:	42a8      	cmp	r0, r5
 8003214:	d009      	beq.n	800322a <TIM_OC1_SetConfig+0x3e>
 8003216:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800321a:	42a8      	cmp	r0, r5
 800321c:	d005      	beq.n	800322a <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800321e:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8003220:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003222:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003224:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8003226:	6203      	str	r3, [r0, #32]
} 
 8003228:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800322a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800322c:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8003230:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003232:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8003236:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003238:	694d      	ldr	r5, [r1, #20]
 800323a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800323c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003240:	432a      	orrs	r2, r5
 8003242:	e7ec      	b.n	800321e <TIM_OC1_SetConfig+0x32>
 8003244:	40010000 	.word	0x40010000

08003248 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003248:	6a03      	ldr	r3, [r0, #32]
 800324a:	f023 0310 	bic.w	r3, r3, #16
{
 800324e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003250:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003252:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003254:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003256:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003258:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 800325c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800325e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003262:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003266:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 800326a:	688d      	ldr	r5, [r1, #8]
 800326c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003270:	4d0d      	ldr	r5, [pc, #52]	; (80032a8 <TIM_OC2_SetConfig+0x60>)
 8003272:	42a8      	cmp	r0, r5
 8003274:	d009      	beq.n	800328a <TIM_OC2_SetConfig+0x42>
 8003276:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800327a:	42a8      	cmp	r0, r5
 800327c:	d005      	beq.n	800328a <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 800327e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003280:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003282:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003284:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003286:	6203      	str	r3, [r0, #32]
}
 8003288:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800328a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800328c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003290:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003292:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003296:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800329a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800329c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800329e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80032a2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80032a6:	e7ea      	b.n	800327e <TIM_OC2_SetConfig+0x36>
 80032a8:	40010000 	.word	0x40010000

080032ac <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ac:	6a03      	ldr	r3, [r0, #32]
 80032ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80032b2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032b4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80032b6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80032b8:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80032ba:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80032bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 80032c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80032c2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80032c6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80032ca:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 80032cc:	688d      	ldr	r5, [r1, #8]
 80032ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80032d2:	4d0e      	ldr	r5, [pc, #56]	; (800330c <TIM_OC3_SetConfig+0x60>)
 80032d4:	42a8      	cmp	r0, r5
 80032d6:	d009      	beq.n	80032ec <TIM_OC3_SetConfig+0x40>
 80032d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032dc:	42a8      	cmp	r0, r5
 80032de:	d005      	beq.n	80032ec <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 80032e0:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 80032e2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80032e4:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80032e6:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80032e8:	6203      	str	r3, [r0, #32]
}
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80032ec:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80032f2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032f4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80032f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80032fc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80032fe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003304:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003308:	e7ea      	b.n	80032e0 <TIM_OC3_SetConfig+0x34>
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000

08003310 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003310:	6a03      	ldr	r3, [r0, #32]
 8003312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8003316:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003318:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800331a:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800331c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800331e:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003320:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003324:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 800332e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003332:	688d      	ldr	r5, [r1, #8]
 8003334:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003338:	4d09      	ldr	r5, [pc, #36]	; (8003360 <TIM_OC4_SetConfig+0x50>)
 800333a:	42a8      	cmp	r0, r5
 800333c:	d009      	beq.n	8003352 <TIM_OC4_SetConfig+0x42>
 800333e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003342:	42a8      	cmp	r0, r5
 8003344:	d005      	beq.n	8003352 <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8003346:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003348:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800334a:	684b      	ldr	r3, [r1, #4]
 800334c:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800334e:	6204      	str	r4, [r0, #32]
}
 8003350:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003352:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003356:	694d      	ldr	r5, [r1, #20]
 8003358:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800335c:	e7f3      	b.n	8003346 <TIM_OC4_SetConfig+0x36>
 800335e:	bf00      	nop
 8003360:	40010000 	.word	0x40010000

08003364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003364:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003366:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8003368:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800336a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800336e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003372:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003374:	6083      	str	r3, [r0, #8]
 8003376:	bd10      	pop	{r4, pc}

08003378 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003378:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800337c:	2b01      	cmp	r3, #1
{
 800337e:	b510      	push	{r4, lr}
 8003380:	4604      	mov	r4, r0
 8003382:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003386:	d018      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800338c:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 800338e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003390:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003394:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003396:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <HAL_TIM_ConfigClockSource+0x118>)
 8003398:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800339a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800339c:	680b      	ldr	r3, [r1, #0]
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d059      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0xde>
 80033a2:	d815      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x58>
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d067      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0x100>
 80033a8:	d808      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x44>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d05e      	beq.n	800346c <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 80033ae:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80033b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80033b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80033b6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80033ba:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d061      	beq.n	8003484 <HAL_TIM_ConfigClockSource+0x10c>
 80033c0:	2b30      	cmp	r3, #48	; 0x30
 80033c2:	d1f4      	bne.n	80033ae <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 80033c4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80033ca:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80033ce:	e026      	b.n	800341e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 80033d0:	2b70      	cmp	r3, #112	; 0x70
 80033d2:	d026      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0xaa>
 80033d4:	d80e      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x7c>
 80033d6:	2b50      	cmp	r3, #80	; 0x50
 80033d8:	d032      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0xc8>
 80033da:	2b60      	cmp	r3, #96	; 0x60
 80033dc:	d1e7      	bne.n	80033ae <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80033de:	68ca      	ldr	r2, [r1, #12]
 80033e0:	6849      	ldr	r1, [r1, #4]
 80033e2:	f7ff fd95 	bl	8002f10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e6:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80033e8:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80033ee:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80033f2:	e023      	b.n	800343c <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f8:	d00c      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0x9c>
 80033fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fe:	d1d6      	bne.n	80033ae <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8003400:	68cb      	ldr	r3, [r1, #12]
 8003402:	684a      	ldr	r2, [r1, #4]
 8003404:	6889      	ldr	r1, [r1, #8]
 8003406:	f7ff ffad 	bl	8003364 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800340a:	6822      	ldr	r2, [r4, #0]
 800340c:	6893      	ldr	r3, [r2, #8]
 800340e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003412:	e013      	b.n	800343c <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003414:	6883      	ldr	r3, [r0, #8]
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800341e:	6083      	str	r3, [r0, #8]
 8003420:	e7c5      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8003422:	68cb      	ldr	r3, [r1, #12]
 8003424:	684a      	ldr	r2, [r1, #4]
 8003426:	6889      	ldr	r1, [r1, #8]
 8003428:	f7ff ff9c 	bl	8003364 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800342c:	6822      	ldr	r2, [r4, #0]
 800342e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003434:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800343c:	6093      	str	r3, [r2, #8]
    break;
 800343e:	e7b6      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003440:	68ca      	ldr	r2, [r1, #12]
 8003442:	6849      	ldr	r1, [r1, #4]
 8003444:	f7ff fd53 	bl	8002eee <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003448:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800344a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800344c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003450:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8003454:	e7f2      	b.n	800343c <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003456:	68ca      	ldr	r2, [r1, #12]
 8003458:	6849      	ldr	r1, [r1, #4]
 800345a:	f7ff fd48 	bl	8002eee <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800345e:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003460:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003466:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800346a:	e7e7      	b.n	800343c <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 800346c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003472:	f043 0307 	orr.w	r3, r3, #7
 8003476:	e7d2      	b.n	800341e <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8003478:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800347e:	f043 0317 	orr.w	r3, r3, #23
 8003482:	e7cc      	b.n	800341e <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8003484:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800348a:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800348e:	e7c6      	b.n	800341e <HAL_TIM_ConfigClockSource+0xa6>
 8003490:	fffe0088 	.word	0xfffe0088

08003494 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003494:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003496:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003498:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800349a:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 800349c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800349e:	ea23 0304 	bic.w	r3, r3, r4
 80034a2:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80034a4:	6a03      	ldr	r3, [r0, #32]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	6202      	str	r2, [r0, #32]
 80034aa:	bd10      	pop	{r4, pc}

080034ac <HAL_TIM_PWM_Start>:
{
 80034ac:	b510      	push	{r4, lr}
 80034ae:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034b0:	2201      	movs	r2, #1
 80034b2:	6800      	ldr	r0, [r0, #0]
 80034b4:	f7ff ffee 	bl	8003494 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	4a08      	ldr	r2, [pc, #32]	; (80034dc <HAL_TIM_PWM_Start+0x30>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <HAL_TIM_PWM_Start+0x1c>
 80034c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d103      	bne.n	80034d0 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80034c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80034d0:	681a      	ldr	r2, [r3, #0]
} 
 80034d2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
} 
 80034da:	bd10      	pop	{r4, pc}
 80034dc:	40010000 	.word	0x40010000

080034e0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80034e0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 80034e2:	2404      	movs	r4, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 80034e4:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80034e6:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1NE << Channel;
 80034e8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80034ea:	ea23 0304 	bic.w	r3, r3, r4
 80034ee:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80034f0:	6a03      	ldr	r3, [r0, #32]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	6202      	str	r2, [r0, #32]
 80034f6:	bd10      	pop	{r4, pc}

080034f8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034f8:	6a03      	ldr	r3, [r0, #32]
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80034fe:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003500:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003504:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003506:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003508:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800350c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8003516:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003518:	688d      	ldr	r5, [r1, #8]
 800351a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800351e:	4d09      	ldr	r5, [pc, #36]	; (8003544 <TIM_OC5_SetConfig+0x4c>)
 8003520:	42a8      	cmp	r0, r5
 8003522:	d003      	beq.n	800352c <TIM_OC5_SetConfig+0x34>
 8003524:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003528:	42a8      	cmp	r0, r5
 800352a:	d104      	bne.n	8003536 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800352c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8003530:	694d      	ldr	r5, [r1, #20]
 8003532:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003536:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003538:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800353a:	684b      	ldr	r3, [r1, #4]
 800353c:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800353e:	6202      	str	r2, [r0, #32]
 8003540:	bd30      	pop	{r4, r5, pc}
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000

08003548 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003548:	6a03      	ldr	r3, [r0, #32]
 800354a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800354e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003550:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003554:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003556:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003558:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 800355c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800355e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003566:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800356a:	688d      	ldr	r5, [r1, #8]
 800356c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003570:	4d08      	ldr	r5, [pc, #32]	; (8003594 <TIM_OC6_SetConfig+0x4c>)
 8003572:	42a8      	cmp	r0, r5
 8003574:	d003      	beq.n	800357e <TIM_OC6_SetConfig+0x36>
 8003576:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800357a:	42a8      	cmp	r0, r5
 800357c:	d104      	bne.n	8003588 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800357e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8003582:	694d      	ldr	r5, [r1, #20]
 8003584:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003588:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800358a:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800358c:	684b      	ldr	r3, [r1, #4]
 800358e:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003590:	6202      	str	r2, [r0, #32]
 8003592:	bd30      	pop	{r4, r5, pc}
 8003594:	40010000 	.word	0x40010000

08003598 <HAL_TIMEx_PWMN_Start>:
{
 8003598:	b510      	push	{r4, lr}
 800359a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800359c:	2204      	movs	r2, #4
 800359e:	6800      	ldr	r0, [r0, #0]
 80035a0:	f7ff ff9e 	bl	80034e0 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80035a4:	6823      	ldr	r3, [r4, #0]
} 
 80035a6:	2000      	movs	r0, #0
  __HAL_TIM_MOE_ENABLE(htim);
 80035a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
} 
 80035b8:	bd10      	pop	{r4, pc}
	...

080035bc <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80035bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
{
 80035c2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80035c4:	d01c      	beq.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 80035c6:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035c8:	4d0e      	ldr	r5, [pc, #56]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 80035ca:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035cc:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80035ce:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035d0:	d003      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80035d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035d6:	42aa      	cmp	r2, r5
 80035d8:	d103      	bne.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035de:	684d      	ldr	r5, [r1, #4]
 80035e0:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035e2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80035e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e8:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80035ea:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ee:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035f0:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 80035f2:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 80035f4:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80035f6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80035f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8003600:	2002      	movs	r0, #2
} 
 8003602:	bd30      	pop	{r4, r5, pc}
 8003604:	40010000 	.word	0x40010000

08003608 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8003608:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	f04f 0302 	mov.w	r3, #2
{
 8003612:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003614:	d038      	beq.n	8003688 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8003616:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800361a:	68cb      	ldr	r3, [r1, #12]
 800361c:	688a      	ldr	r2, [r1, #8]
 800361e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003622:	4c1a      	ldr	r4, [pc, #104]	; (800368c <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003624:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003626:	684a      	ldr	r2, [r1, #4]
 8003628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800362c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800362e:	680a      	ldr	r2, [r1, #0]
 8003630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003634:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003636:	690a      	ldr	r2, [r1, #16]
 8003638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800363c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800363e:	694a      	ldr	r2, [r1, #20]
 8003640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003644:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003646:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800364c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800364e:	698a      	ldr	r2, [r1, #24]
 8003650:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003658:	6802      	ldr	r2, [r0, #0]
 800365a:	42a2      	cmp	r2, r4
 800365c:	d003      	beq.n	8003666 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 800365e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003662:	42a2      	cmp	r2, r4
 8003664:	d10c      	bne.n	8003680 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8003666:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003668:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800366c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003670:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003672:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003674:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003678:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800367a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800367e:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003680:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003682:	2300      	movs	r3, #0
 8003684:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003688:	4618      	mov	r0, r3
}
 800368a:	bd10      	pop	{r4, pc}
 800368c:	40010000 	.word	0x40010000

08003690 <HAL_TIMEx_CommutationCallback>:
 8003690:	4770      	bx	lr

08003692 <HAL_TIMEx_BreakCallback>:
{
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_PWM_ConfigChannel>:
{
 8003694:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003696:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800369a:	4604      	mov	r4, r0
 800369c:	460d      	mov	r5, r1
 800369e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d010      	beq.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80036a4:	2301      	movs	r3, #1
  switch (Channel)
 80036a6:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80036ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80036b0:	d043      	beq.n	800373a <HAL_TIM_PWM_ConfigChannel+0xa6>
 80036b2:	d809      	bhi.n	80036c8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80036b4:	b1fa      	cbz	r2, 80036f6 <HAL_TIM_PWM_ConfigChannel+0x62>
 80036b6:	2a04      	cmp	r2, #4
 80036b8:	d02e      	beq.n	8003718 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 80036ba:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80036bc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80036be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80036c2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80036c6:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80036c8:	2a10      	cmp	r2, #16
 80036ca:	d047      	beq.n	800375c <HAL_TIM_PWM_ConfigChannel+0xc8>
 80036cc:	2a14      	cmp	r2, #20
 80036ce:	d056      	beq.n	800377e <HAL_TIM_PWM_ConfigChannel+0xea>
 80036d0:	2a0c      	cmp	r2, #12
 80036d2:	d1f2      	bne.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	f7ff fe1b 	bl	8003310 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80036dc:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036f4:	e030      	b.n	8003758 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	f7ff fd78 	bl	80031ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036fe:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	f042 0208 	orr.w	r2, r2, #8
 8003706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	f022 0204 	bic.w	r2, r2, #4
 800370e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003714:	619a      	str	r2, [r3, #24]
    break;
 8003716:	e7d0      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003718:	6820      	ldr	r0, [r4, #0]
 800371a:	f7ff fd95 	bl	8003248 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800371e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003720:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003728:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003732:	699a      	ldr	r2, [r3, #24]
 8003734:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003738:	e7ec      	b.n	8003714 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800373a:	6820      	ldr	r0, [r4, #0]
 800373c:	f7ff fdb6 	bl	80032ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003740:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003742:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	f042 0208 	orr.w	r2, r2, #8
 800374a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003758:	61da      	str	r2, [r3, #28]
    break;
 800375a:	e7ae      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800375c:	6820      	ldr	r0, [r4, #0]
 800375e:	f7ff fecb 	bl	80034f8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003762:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003764:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003766:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003768:	f042 0208 	orr.w	r2, r2, #8
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800376e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003770:	f022 0204 	bic.w	r2, r2, #4
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003776:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003778:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800377c:	e79d      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800377e:	6820      	ldr	r0, [r4, #0]
 8003780:	f7ff fee2 	bl	8003548 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003784:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003786:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800378a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800379a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800379e:	e7ec      	b.n	800377a <HAL_TIM_PWM_ConfigChannel+0xe6>

080037a0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a0:	6803      	ldr	r3, [r0, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037a8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b2:	2320      	movs	r3, #32
 80037b4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_UART_Receive_DMA>:
{
 80037bc:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80037be:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 80037c2:	2a20      	cmp	r2, #32
{
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 80037c8:	d133      	bne.n	8003832 <HAL_UART_Receive_DMA+0x76>
    if((pData == NULL ) || (Size == 0U))
 80037ca:	2900      	cmp	r1, #0
 80037cc:	d02f      	beq.n	800382e <HAL_UART_Receive_DMA+0x72>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d02d      	beq.n	800382e <HAL_UART_Receive_DMA+0x72>
    __HAL_LOCK(huart);
 80037d2:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 80037d6:	2a01      	cmp	r2, #1
 80037d8:	d02b      	beq.n	8003832 <HAL_UART_Receive_DMA+0x76>
 80037da:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037dc:	2500      	movs	r5, #0
    huart->pRxBuffPtr = pData;
 80037de:	6541      	str	r1, [r0, #84]	; 0x54
    __HAL_LOCK(huart);
 80037e0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e4:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e6:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxXferSize = Size;
 80037e8:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ec:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037f0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80037f2:	4a11      	ldr	r2, [pc, #68]	; (8003838 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80037f4:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037f6:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037f8:	4a10      	ldr	r2, [pc, #64]	; (800383c <HAL_UART_Receive_DMA+0x80>)
    huart->hdmarx->XferAbortCallback = NULL;
 80037fa:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037fc:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037fe:	4a10      	ldr	r2, [pc, #64]	; (8003840 <HAL_UART_Receive_DMA+0x84>)
 8003800:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8003802:	460a      	mov	r2, r1
 8003804:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8003808:	f7fe faa4 	bl	8001d54 <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800380c:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800380e:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    return HAL_OK;
 8003812:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800382a:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 800382c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800382e:	2001      	movs	r0, #1
 8003830:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003832:	2002      	movs	r0, #2
}
 8003834:	bd70      	pop	{r4, r5, r6, pc}
 8003836:	bf00      	nop
 8003838:	080039b9 	.word	0x080039b9
 800383c:	08003a63 	.word	0x08003a63
 8003840:	08003a6d 	.word	0x08003a6d

08003844 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8003844:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003848:	2b01      	cmp	r3, #1
 800384a:	d026      	beq.n	800389a <HAL_UART_DMAResume+0x56>
 800384c:	2301      	movs	r3, #1
 800384e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003852:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003856:	2b21      	cmp	r3, #33	; 0x21
 8003858:	6803      	ldr	r3, [r0, #0]
 800385a:	d103      	bne.n	8003864 <HAL_UART_DMAResume+0x20>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003862:	609a      	str	r2, [r3, #8]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003864:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8003868:	2a22      	cmp	r2, #34	; 0x22
 800386a:	d10d      	bne.n	8003888 <HAL_UART_DMAResume+0x44>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800386c:	2208      	movs	r2, #8
 800386e:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003876:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003886:	609a      	str	r2, [r3, #8]
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	f010 0001 	ands.w	r0, r0, #1
 800388e:	d106      	bne.n	800389e <HAL_UART_DMAResume+0x5a>
    __HAL_UART_ENABLE(huart);
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	4770      	bx	lr
  __HAL_LOCK(huart);
 800389a:	2002      	movs	r0, #2
 800389c:	4770      	bx	lr
  return HAL_OK;
 800389e:	2000      	movs	r0, #0
}
 80038a0:	4770      	bx	lr

080038a2 <UART_WaitOnFlagUntilTimeout>:
{
 80038a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a6:	9d06      	ldr	r5, [sp, #24]
 80038a8:	4604      	mov	r4, r0
 80038aa:	460f      	mov	r7, r1
 80038ac:	4616      	mov	r6, r2
 80038ae:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b0:	6821      	ldr	r1, [r4, #0]
 80038b2:	69ca      	ldr	r2, [r1, #28]
 80038b4:	ea37 0302 	bics.w	r3, r7, r2
 80038b8:	bf0c      	ite	eq
 80038ba:	2201      	moveq	r2, #1
 80038bc:	2200      	movne	r2, #0
 80038be:	42b2      	cmp	r2, r6
 80038c0:	d002      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80038c2:	2000      	movs	r0, #0
}
 80038c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80038c8:	1c6b      	adds	r3, r5, #1
 80038ca:	d0f2      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80038cc:	b99d      	cbnz	r5, 80038f6 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ce:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80038d0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80038e2:	2320      	movs	r3, #32
 80038e4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80038e8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80038ec:	2300      	movs	r3, #0
 80038ee:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80038f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80038f6:	f7fd ff67 	bl	80017c8 <HAL_GetTick>
 80038fa:	eba0 0008 	sub.w	r0, r0, r8
 80038fe:	4285      	cmp	r5, r0
 8003900:	d8d6      	bhi.n	80038b0 <UART_WaitOnFlagUntilTimeout+0xe>
 8003902:	e7e4      	b.n	80038ce <UART_WaitOnFlagUntilTimeout+0x2c>

08003904 <HAL_UART_Transmit>:
{
 8003904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003908:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800390a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 800390e:	4604      	mov	r4, r0
 8003910:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 8003912:	2b20      	cmp	r3, #32
{
 8003914:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003916:	d14c      	bne.n	80039b2 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8003918:	2900      	cmp	r1, #0
 800391a:	d048      	beq.n	80039ae <HAL_UART_Transmit+0xaa>
 800391c:	2a00      	cmp	r2, #0
 800391e:	d046      	beq.n	80039ae <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8003920:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003924:	2b01      	cmp	r3, #1
 8003926:	d044      	beq.n	80039b2 <HAL_UART_Transmit+0xae>
 8003928:	2301      	movs	r3, #1
 800392a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392e:	2300      	movs	r3, #0
 8003930:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003932:	2321      	movs	r3, #33	; 0x21
 8003934:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8003938:	f7fd ff46 	bl	80017c8 <HAL_GetTick>
 800393c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800393e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8003942:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003946:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800394a:	b292      	uxth	r2, r2
 800394c:	b962      	cbnz	r2, 8003968 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800394e:	9700      	str	r7, [sp, #0]
 8003950:	4633      	mov	r3, r6
 8003952:	2140      	movs	r1, #64	; 0x40
 8003954:	4620      	mov	r0, r4
 8003956:	f7ff ffa4 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 800395a:	b998      	cbnz	r0, 8003984 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800395c:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800395e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8003962:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8003966:	e00e      	b.n	8003986 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8003968:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396c:	2200      	movs	r2, #0
 800396e:	9700      	str	r7, [sp, #0]
 8003970:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8003972:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003974:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8003976:	b29b      	uxth	r3, r3
 8003978:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397c:	4633      	mov	r3, r6
 800397e:	f7ff ff90 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003982:	b118      	cbz	r0, 800398c <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8003984:	2003      	movs	r0, #3
}
 8003986:	b002      	add	sp, #8
 8003988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68a3      	ldr	r3, [r4, #8]
 800398e:	6822      	ldr	r2, [r4, #0]
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003994:	d107      	bne.n	80039a6 <HAL_UART_Transmit+0xa2>
 8003996:	6923      	ldr	r3, [r4, #16]
 8003998:	b92b      	cbnz	r3, 80039a6 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800399a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800399e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a2:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80039a4:	e7cf      	b.n	8003946 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80039a6:	782b      	ldrb	r3, [r5, #0]
 80039a8:	3501      	adds	r5, #1
 80039aa:	6293      	str	r3, [r2, #40]	; 0x28
 80039ac:	e7cb      	b.n	8003946 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80039ae:	2001      	movs	r0, #1
 80039b0:	e7e9      	b.n	8003986 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80039b2:	2002      	movs	r0, #2
 80039b4:	e7e7      	b.n	8003986 <HAL_UART_Transmit+0x82>

080039b6 <HAL_UART_TxCpltCallback>:
 80039b6:	4770      	bx	lr

080039b8 <UART_DMAReceiveCplt>:
{
 80039b8:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80039ba:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80039c4:	d111      	bne.n	80039ea <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 80039c6:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ca:	6813      	ldr	r3, [r2, #0]
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80039d2:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d4:	6899      	ldr	r1, [r3, #8]
 80039d6:	f021 0101 	bic.w	r1, r1, #1
 80039da:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039dc:	6899      	ldr	r1, [r3, #8]
 80039de:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80039e2:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 80039e4:	2320      	movs	r3, #32
 80039e6:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
  HAL_UART_RxCpltCallback(huart);
 80039ea:	4610      	mov	r0, r2
 80039ec:	f7fc fc58 	bl	80002a0 <HAL_UART_RxCpltCallback>
 80039f0:	bd08      	pop	{r3, pc}

080039f2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039f2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80039f6:	6802      	ldr	r2, [r0, #0]
 80039f8:	2b22      	cmp	r3, #34	; 0x22
{
 80039fa:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039fc:	d12a      	bne.n	8003a54 <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039fe:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8003a00:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a08:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a0a:	d11d      	bne.n	8003a48 <UART_Receive_IT+0x56>
 8003a0c:	6904      	ldr	r4, [r0, #16]
 8003a0e:	b9dc      	cbnz	r4, 8003a48 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a12:	4011      	ands	r1, r2
 8003a14:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8003a18:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8003a1a:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8003a1e:	3c01      	subs	r4, #1
 8003a20:	b2a4      	uxth	r4, r4
 8003a22:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8003a26:	b96c      	cbnz	r4, 8003a44 <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a28:	6803      	ldr	r3, [r0, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a30:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	2320      	movs	r3, #32
 8003a3c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8003a40:	f7fc fc2e 	bl	80002a0 <HAL_UART_RxCpltCallback>
    return HAL_OK;
 8003a44:	2000      	movs	r0, #0
}
 8003a46:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a4a:	1c5c      	adds	r4, r3, #1
 8003a4c:	4011      	ands	r1, r2
 8003a4e:	6544      	str	r4, [r0, #84]	; 0x54
 8003a50:	7019      	strb	r1, [r3, #0]
 8003a52:	e7e2      	b.n	8003a1a <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a54:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 8003a56:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 8003a5e:	bd10      	pop	{r4, pc}

08003a60 <HAL_UART_RxHalfCpltCallback>:
 8003a60:	4770      	bx	lr

08003a62 <UART_DMARxHalfCplt>:
{
 8003a62:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8003a64:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003a66:	f7ff fffb 	bl	8003a60 <HAL_UART_RxHalfCpltCallback>
 8003a6a:	bd08      	pop	{r3, pc}

08003a6c <UART_DMAError>:
{
 8003a6c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a6e:	6b81      	ldr	r1, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a76:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a7a:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 8003a7e:	2b21      	cmp	r3, #33	; 0x21
 8003a80:	d10a      	bne.n	8003a98 <UART_DMAError+0x2c>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8003a82:	680b      	ldr	r3, [r1, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	0612      	lsls	r2, r2, #24
 8003a88:	d506      	bpl.n	8003a98 <UART_DMAError+0x2c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003a90:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003a92:	2320      	movs	r3, #32
 8003a94:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a98:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 8003a9c:	2b22      	cmp	r3, #34	; 0x22
 8003a9e:	d106      	bne.n	8003aae <UART_DMAError+0x42>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8003aa0:	680b      	ldr	r3, [r1, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	065b      	lsls	r3, r3, #25
 8003aa6:	d502      	bpl.n	8003aae <UART_DMAError+0x42>
    UART_EndRxTransfer(huart);
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	f7ff fe79 	bl	80037a0 <UART_EndRxTransfer>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8003aae:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003ab0:	4608      	mov	r0, r1
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8003ab2:	f043 0310 	orr.w	r3, r3, #16
 8003ab6:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003ab8:	f7fc fbec 	bl	8000294 <HAL_UART_ErrorCallback>
 8003abc:	bd08      	pop	{r3, pc}
	...

08003ac0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ac0:	6803      	ldr	r3, [r0, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ac4:	6819      	ldr	r1, [r3, #0]
{
 8003ac6:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003ac8:	0716      	lsls	r6, r2, #28
{
 8003aca:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003acc:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8003ace:	d107      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ad0:	0695      	lsls	r5, r2, #26
 8003ad2:	d563      	bpl.n	8003b9c <HAL_UART_IRQHandler+0xdc>
 8003ad4:	068e      	lsls	r6, r1, #26
 8003ad6:	d561      	bpl.n	8003b9c <HAL_UART_IRQHandler+0xdc>
}
 8003ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003adc:	f7ff bf89 	b.w	80039f2 <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003ae0:	f015 0001 	ands.w	r0, r5, #1
 8003ae4:	d102      	bne.n	8003aec <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003ae6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003aea:	d057      	beq.n	8003b9c <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aec:	07d5      	lsls	r5, r2, #31
 8003aee:	d507      	bpl.n	8003b00 <HAL_UART_IRQHandler+0x40>
 8003af0:	05ce      	lsls	r6, r1, #23
 8003af2:	d505      	bpl.n	8003b00 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003af4:	2501      	movs	r5, #1
 8003af6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003afa:	f045 0501 	orr.w	r5, r5, #1
 8003afe:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b00:	0795      	lsls	r5, r2, #30
 8003b02:	d506      	bpl.n	8003b12 <HAL_UART_IRQHandler+0x52>
 8003b04:	b128      	cbz	r0, 8003b12 <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003b06:	2502      	movs	r5, #2
 8003b08:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b0a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003b0c:	f045 0504 	orr.w	r5, r5, #4
 8003b10:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b12:	0756      	lsls	r6, r2, #29
 8003b14:	d506      	bpl.n	8003b24 <HAL_UART_IRQHandler+0x64>
 8003b16:	b128      	cbz	r0, 8003b24 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003b18:	2504      	movs	r5, #4
 8003b1a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b1c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003b1e:	f045 0502 	orr.w	r5, r5, #2
 8003b22:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003b24:	0715      	lsls	r5, r2, #28
 8003b26:	d507      	bpl.n	8003b38 <HAL_UART_IRQHandler+0x78>
 8003b28:	068e      	lsls	r6, r1, #26
 8003b2a:	d400      	bmi.n	8003b2e <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b2c:	b120      	cbz	r0, 8003b38 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003b2e:	2008      	movs	r0, #8
 8003b30:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003b34:	4303      	orrs	r3, r0
 8003b36:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d06a      	beq.n	8003c14 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b3e:	0695      	lsls	r5, r2, #26
 8003b40:	d504      	bpl.n	8003b4c <HAL_UART_IRQHandler+0x8c>
 8003b42:	0688      	lsls	r0, r1, #26
 8003b44:	d502      	bpl.n	8003b4c <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8003b46:	4620      	mov	r0, r4
 8003b48:	f7ff ff53 	bl	80039f2 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003b4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8003b4e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003b50:	0719      	lsls	r1, r3, #28
 8003b52:	d404      	bmi.n	8003b5e <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003b58:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003b5c:	d01a      	beq.n	8003b94 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 8003b5e:	f7ff fe1f 	bl	80037a0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	0652      	lsls	r2, r2, #25
 8003b68:	d510      	bpl.n	8003b8c <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6a:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003b6c:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b72:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003b74:	b150      	cbz	r0, 8003b8c <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b76:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_UART_IRQHandler+0x158>)
 8003b78:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b7a:	f7fe f928 	bl	8001dce <HAL_DMA_Abort_IT>
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d048      	beq.n	8003c14 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b82:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8003b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b88:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003b8a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7fc fb81 	bl	8000294 <HAL_UART_ErrorCallback>
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003b94:	f7fc fb7e 	bl	8000294 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b98:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b9c:	0616      	lsls	r6, r2, #24
 8003b9e:	d52b      	bpl.n	8003bf8 <HAL_UART_IRQHandler+0x138>
 8003ba0:	060d      	lsls	r5, r1, #24
 8003ba2:	d529      	bpl.n	8003bf8 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ba4:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8003ba8:	2a21      	cmp	r2, #33	; 0x21
 8003baa:	d133      	bne.n	8003c14 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 8003bac:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003bb0:	b292      	uxth	r2, r2
 8003bb2:	b942      	cbnz	r2, 8003bc6 <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bba:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc6:	68a2      	ldr	r2, [r4, #8]
 8003bc8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003bcc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003bce:	d10e      	bne.n	8003bee <HAL_UART_IRQHandler+0x12e>
 8003bd0:	6921      	ldr	r1, [r4, #16]
 8003bd2:	b961      	cbnz	r1, 8003bee <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003bd4:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003bd8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003bdc:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003bde:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 8003be0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003bee:	1c51      	adds	r1, r2, #1
 8003bf0:	64e1      	str	r1, [r4, #76]	; 0x4c
 8003bf2:	7812      	ldrb	r2, [r2, #0]
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf6:	e7f3      	b.n	8003be0 <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bf8:	0650      	lsls	r0, r2, #25
 8003bfa:	d50b      	bpl.n	8003c14 <HAL_UART_IRQHandler+0x154>
 8003bfc:	064a      	lsls	r2, r1, #25
 8003bfe:	d509      	bpl.n	8003c14 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c00:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8003c02:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c08:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8003c10:	f7ff fed1 	bl	80039b6 <HAL_UART_TxCpltCallback>
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	bf00      	nop
 8003c18:	08003c1d 	.word	0x08003c1d

08003c1c <UART_DMAAbortOnError>:
{
 8003c1c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003c1e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c26:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003c2a:	f7fc fb33 	bl	8000294 <HAL_UART_ErrorCallback>
 8003c2e:	bd08      	pop	{r3, pc}

08003c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c34:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c36:	69c3      	ldr	r3, [r0, #28]
 8003c38:	6921      	ldr	r1, [r4, #16]
 8003c3a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c3c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	6961      	ldr	r1, [r4, #20]
 8003c42:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c44:	4993      	ldr	r1, [pc, #588]	; (8003e94 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c46:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c48:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003c4a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c4c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c50:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c52:	686a      	ldr	r2, [r5, #4]
 8003c54:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003c5c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003c5e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003c60:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003c62:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003c66:	430a      	orrs	r2, r1
 8003c68:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c6a:	4a8b      	ldr	r2, [pc, #556]	; (8003e98 <UART_SetConfig+0x268>)
 8003c6c:	4295      	cmp	r5, r2
 8003c6e:	d119      	bne.n	8003ca4 <UART_SetConfig+0x74>
 8003c70:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003c74:	4989      	ldr	r1, [pc, #548]	; (8003e9c <UART_SetConfig+0x26c>)
 8003c76:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003c7a:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c82:	5c8a      	ldrb	r2, [r1, r2]
 8003c84:	f040 80b3 	bne.w	8003dee <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8003c88:	2a08      	cmp	r2, #8
 8003c8a:	f200 80ad 	bhi.w	8003de8 <UART_SetConfig+0x1b8>
 8003c8e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003c92:	0026      	.short	0x0026
 8003c94:	00e9007b 	.word	0x00e9007b
 8003c98:	00f500ab 	.word	0x00f500ab
 8003c9c:	00ab00ab 	.word	0x00ab00ab
 8003ca0:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca4:	4a7e      	ldr	r2, [pc, #504]	; (8003ea0 <UART_SetConfig+0x270>)
 8003ca6:	4295      	cmp	r5, r2
 8003ca8:	d107      	bne.n	8003cba <UART_SetConfig+0x8a>
 8003caa:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003cae:	497d      	ldr	r1, [pc, #500]	; (8003ea4 <UART_SetConfig+0x274>)
 8003cb0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003cb4:	f002 020c 	and.w	r2, r2, #12
 8003cb8:	e7e1      	b.n	8003c7e <UART_SetConfig+0x4e>
 8003cba:	4a7b      	ldr	r2, [pc, #492]	; (8003ea8 <UART_SetConfig+0x278>)
 8003cbc:	4295      	cmp	r5, r2
 8003cbe:	d12b      	bne.n	8003d18 <UART_SetConfig+0xe8>
 8003cc0:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8003cc4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003cc8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003ccc:	2a10      	cmp	r2, #16
 8003cce:	f000 80d2 	beq.w	8003e76 <UART_SetConfig+0x246>
 8003cd2:	d816      	bhi.n	8003d02 <UART_SetConfig+0xd2>
 8003cd4:	b9da      	cbnz	r2, 8003d0e <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cda:	f040 809f 	bne.w	8003e1c <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003cde:	f7fe fde5 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003ce2:	6861      	ldr	r1, [r4, #4]
 8003ce4:	084a      	lsrs	r2, r1, #1
 8003ce6:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cf0:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003cf2:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cf6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8003cfa:	6821      	ldr	r1, [r4, #0]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60cb      	str	r3, [r1, #12]
 8003d00:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d02:	2a20      	cmp	r2, #32
 8003d04:	f000 80ab 	beq.w	8003e5e <UART_SetConfig+0x22e>
 8003d08:	2a30      	cmp	r2, #48	; 0x30
 8003d0a:	f000 80ba 	beq.w	8003e82 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d12:	d069      	beq.n	8003de8 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003d14:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d18:	4a64      	ldr	r2, [pc, #400]	; (8003eac <UART_SetConfig+0x27c>)
 8003d1a:	4295      	cmp	r5, r2
 8003d1c:	d10e      	bne.n	8003d3c <UART_SetConfig+0x10c>
 8003d1e:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8003d22:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d26:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003d2a:	2a40      	cmp	r2, #64	; 0x40
 8003d2c:	f000 80a3 	beq.w	8003e76 <UART_SetConfig+0x246>
 8003d30:	d9d0      	bls.n	8003cd4 <UART_SetConfig+0xa4>
 8003d32:	2a80      	cmp	r2, #128	; 0x80
 8003d34:	f000 8093 	beq.w	8003e5e <UART_SetConfig+0x22e>
 8003d38:	2ac0      	cmp	r2, #192	; 0xc0
 8003d3a:	e7e6      	b.n	8003d0a <UART_SetConfig+0xda>
 8003d3c:	4a5c      	ldr	r2, [pc, #368]	; (8003eb0 <UART_SetConfig+0x280>)
 8003d3e:	4295      	cmp	r5, r2
 8003d40:	d110      	bne.n	8003d64 <UART_SetConfig+0x134>
 8003d42:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8003d46:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d4a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003d4e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003d52:	f000 8090 	beq.w	8003e76 <UART_SetConfig+0x246>
 8003d56:	d9bd      	bls.n	8003cd4 <UART_SetConfig+0xa4>
 8003d58:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003d5c:	d07f      	beq.n	8003e5e <UART_SetConfig+0x22e>
 8003d5e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003d62:	e7d2      	b.n	8003d0a <UART_SetConfig+0xda>
 8003d64:	4a53      	ldr	r2, [pc, #332]	; (8003eb4 <UART_SetConfig+0x284>)
 8003d66:	4295      	cmp	r5, r2
 8003d68:	d117      	bne.n	8003d9a <UART_SetConfig+0x16a>
 8003d6a:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8003d6e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d72:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003d76:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003d7a:	d07c      	beq.n	8003e76 <UART_SetConfig+0x246>
 8003d7c:	d807      	bhi.n	8003d8e <UART_SetConfig+0x15e>
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	d1c5      	bne.n	8003d0e <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d86:	d154      	bne.n	8003e32 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d88:	f7fe fda0 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003d8c:	e7a9      	b.n	8003ce2 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d8e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003d92:	d064      	beq.n	8003e5e <UART_SetConfig+0x22e>
 8003d94:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003d98:	e7b7      	b.n	8003d0a <UART_SetConfig+0xda>
 8003d9a:	4a47      	ldr	r2, [pc, #284]	; (8003eb8 <UART_SetConfig+0x288>)
 8003d9c:	4295      	cmp	r5, r2
 8003d9e:	d10f      	bne.n	8003dc0 <UART_SetConfig+0x190>
 8003da0:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003da4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003da8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003dac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003db0:	d061      	beq.n	8003e76 <UART_SetConfig+0x246>
 8003db2:	d98f      	bls.n	8003cd4 <UART_SetConfig+0xa4>
 8003db4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003db8:	d051      	beq.n	8003e5e <UART_SetConfig+0x22e>
 8003dba:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003dbe:	e7a4      	b.n	8003d0a <UART_SetConfig+0xda>
 8003dc0:	4a3e      	ldr	r2, [pc, #248]	; (8003ebc <UART_SetConfig+0x28c>)
 8003dc2:	4295      	cmp	r5, r2
 8003dc4:	d1a3      	bne.n	8003d0e <UART_SetConfig+0xde>
 8003dc6:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8003dca:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003dce:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003dd2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003dd6:	d04e      	beq.n	8003e76 <UART_SetConfig+0x246>
 8003dd8:	f67f af7c 	bls.w	8003cd4 <UART_SetConfig+0xa4>
 8003ddc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003de0:	d03d      	beq.n	8003e5e <UART_SetConfig+0x22e>
 8003de2:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8003de6:	e790      	b.n	8003d0a <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8003de8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e781      	b.n	8003cf2 <UART_SetConfig+0xc2>
    switch (clocksource)
 8003dee:	2a08      	cmp	r2, #8
 8003df0:	d890      	bhi.n	8003d14 <UART_SetConfig+0xe4>
 8003df2:	a301      	add	r3, pc, #4	; (adr r3, 8003df8 <UART_SetConfig+0x1c8>)
 8003df4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e33 	.word	0x08003e33
 8003e00:	08003e39 	.word	0x08003e39
 8003e04:	08003d15 	.word	0x08003d15
 8003e08:	08003e4f 	.word	0x08003e4f
 8003e0c:	08003d15 	.word	0x08003d15
 8003e10:	08003d15 	.word	0x08003d15
 8003e14:	08003d15 	.word	0x08003d15
 8003e18:	08003e55 	.word	0x08003e55
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e1c:	f7fe fd46 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e20:	6863      	ldr	r3, [r4, #4]
 8003e22:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e26:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e2a:	b280      	uxth	r0, r0
 8003e2c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e2e:	2000      	movs	r0, #0
      break;
 8003e30:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e32:	f7fe fd4b 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003e36:	e7f3      	b.n	8003e20 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003e38:	6862      	ldr	r2, [r4, #4]
 8003e3a:	0853      	lsrs	r3, r2, #1
 8003e3c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003e40:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	60eb      	str	r3, [r5, #12]
 8003e4c:	e7ef      	b.n	8003e2e <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e4e:	f7fe fc6d 	bl	800272c <HAL_RCC_GetSysClockFreq>
 8003e52:	e7e5      	b.n	8003e20 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e54:	6862      	ldr	r2, [r4, #4]
 8003e56:	0853      	lsrs	r3, r2, #1
 8003e58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003e5c:	e7f2      	b.n	8003e44 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e62:	d1e9      	bne.n	8003e38 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e64:	6860      	ldr	r0, [r4, #4]
 8003e66:	0843      	lsrs	r3, r0, #1
 8003e68:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003e6c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e70:	fbb3 f3f0 	udiv	r3, r3, r0
 8003e74:	e73b      	b.n	8003cee <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7a:	d1e8      	bne.n	8003e4e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e7c:	f7fe fc56 	bl	800272c <HAL_RCC_GetSysClockFreq>
 8003e80:	e72f      	b.n	8003ce2 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e86:	d1e5      	bne.n	8003e54 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e88:	6860      	ldr	r0, [r4, #4]
 8003e8a:	0843      	lsrs	r3, r0, #1
 8003e8c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003e90:	e7ee      	b.n	8003e70 <UART_SetConfig+0x240>
 8003e92:	bf00      	nop
 8003e94:	efff69f3 	.word	0xefff69f3
 8003e98:	40011000 	.word	0x40011000
 8003e9c:	08005b3a 	.word	0x08005b3a
 8003ea0:	40004400 	.word	0x40004400
 8003ea4:	08005b3e 	.word	0x08005b3e
 8003ea8:	40004800 	.word	0x40004800
 8003eac:	40004c00 	.word	0x40004c00
 8003eb0:	40005000 	.word	0x40005000
 8003eb4:	40011400 	.word	0x40011400
 8003eb8:	40007800 	.word	0x40007800
 8003ebc:	40007c00 	.word	0x40007c00

08003ec0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ec2:	07da      	lsls	r2, r3, #31
{
 8003ec4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec6:	d506      	bpl.n	8003ed6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ec8:	6801      	ldr	r1, [r0, #0]
 8003eca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003ecc:	684a      	ldr	r2, [r1, #4]
 8003ece:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003ed2:	4322      	orrs	r2, r4
 8003ed4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ed6:	079c      	lsls	r4, r3, #30
 8003ed8:	d506      	bpl.n	8003ee8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eda:	6801      	ldr	r1, [r0, #0]
 8003edc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003ede:	684a      	ldr	r2, [r1, #4]
 8003ee0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ee4:	4322      	orrs	r2, r4
 8003ee6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ee8:	0759      	lsls	r1, r3, #29
 8003eea:	d506      	bpl.n	8003efa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eec:	6801      	ldr	r1, [r0, #0]
 8003eee:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003ef0:	684a      	ldr	r2, [r1, #4]
 8003ef2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ef6:	4322      	orrs	r2, r4
 8003ef8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003efa:	071a      	lsls	r2, r3, #28
 8003efc:	d506      	bpl.n	8003f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003efe:	6801      	ldr	r1, [r0, #0]
 8003f00:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003f02:	684a      	ldr	r2, [r1, #4]
 8003f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f08:	4322      	orrs	r2, r4
 8003f0a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f0c:	06dc      	lsls	r4, r3, #27
 8003f0e:	d506      	bpl.n	8003f1e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f10:	6801      	ldr	r1, [r0, #0]
 8003f12:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003f14:	688a      	ldr	r2, [r1, #8]
 8003f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f1a:	4322      	orrs	r2, r4
 8003f1c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f1e:	0699      	lsls	r1, r3, #26
 8003f20:	d506      	bpl.n	8003f30 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f22:	6801      	ldr	r1, [r0, #0]
 8003f24:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003f26:	688a      	ldr	r2, [r1, #8]
 8003f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f2c:	4322      	orrs	r2, r4
 8003f2e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f30:	065a      	lsls	r2, r3, #25
 8003f32:	d510      	bpl.n	8003f56 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f34:	6801      	ldr	r1, [r0, #0]
 8003f36:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003f38:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f3a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f3e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003f42:	ea42 0204 	orr.w	r2, r2, r4
 8003f46:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f48:	d105      	bne.n	8003f56 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f4a:	684a      	ldr	r2, [r1, #4]
 8003f4c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003f4e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003f52:	4322      	orrs	r2, r4
 8003f54:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	d506      	bpl.n	8003f68 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f5a:	6802      	ldr	r2, [r0, #0]
 8003f5c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003f5e:	6853      	ldr	r3, [r2, #4]
 8003f60:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6053      	str	r3, [r2, #4]
 8003f68:	bd10      	pop	{r4, pc}

08003f6a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	2500      	movs	r5, #0
{
 8003f6e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f72:	f7fd fc29 	bl	80017c8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f76:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003f78:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	0712      	lsls	r2, r2, #28
 8003f7e:	d409      	bmi.n	8003f94 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8003f80:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f82:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003f84:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8003f88:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8003f8c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8003f90:	b003      	add	sp, #12
 8003f92:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f94:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003f98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	9200      	str	r2, [sp, #0]
 8003fa0:	462a      	mov	r2, r5
 8003fa2:	f7ff fc7e 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d0ea      	beq.n	8003f80 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003faa:	2003      	movs	r0, #3
 8003fac:	e7f0      	b.n	8003f90 <UART_CheckIdleState+0x26>

08003fae <HAL_UART_Init>:
{
 8003fae:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	b360      	cbz	r0, 800400e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003fb4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003fb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fbc:	b91b      	cbnz	r3, 8003fc6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003fbe:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8003fc2:	f7fd faa9 	bl	8001518 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003fc6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003fc8:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fca:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003fcc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003fd0:	6813      	ldr	r3, [r2, #0]
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fd8:	f7ff fe2a 	bl	8003c30 <UART_SetConfig>
 8003fdc:	2801      	cmp	r0, #1
 8003fde:	d016      	beq.n	800400e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fe2:	b113      	cbz	r3, 8003fea <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f7ff ff6b 	bl	8003ec0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fea:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003fec:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ffc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
}
 8004004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004008:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800400a:	f7ff bfae 	b.w	8003f6a <UART_CheckIdleState>
}
 800400e:	2001      	movs	r0, #1
 8004010:	bd10      	pop	{r4, pc}
	...

08004014 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8004016:	3b01      	subs	r3, #1
 8004018:	d101      	bne.n	800401e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800401a:	2003      	movs	r0, #3
 800401c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800401e:	6902      	ldr	r2, [r0, #16]
 8004020:	2a00      	cmp	r2, #0
 8004022:	daf8      	bge.n	8004016 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004024:	6903      	ldr	r3, [r0, #16]
 8004026:	4a06      	ldr	r2, [pc, #24]	; (8004040 <USB_CoreReset+0x2c>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 800402e:	3a01      	subs	r2, #1
 8004030:	d0f3      	beq.n	800401a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004032:	6903      	ldr	r3, [r0, #16]
 8004034:	f013 0301 	ands.w	r3, r3, #1
 8004038:	d1f9      	bne.n	800402e <USB_CoreReset+0x1a>

  return HAL_OK;
 800403a:	4618      	mov	r0, r3
}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	00030d41 	.word	0x00030d41

08004044 <USB_CoreInit>:
{
 8004044:	b084      	sub	sp, #16
 8004046:	b538      	push	{r3, r4, r5, lr}
 8004048:	ad05      	add	r5, sp, #20
 800404a:	4604      	mov	r4, r0
 800404c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004052:	2b01      	cmp	r3, #1
 8004054:	d127      	bne.n	80040a6 <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004056:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800405e:	68c3      	ldr	r3, [r0, #12]
 8004060:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004068:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800406a:	68c3      	ldr	r3, [r0, #12]
 800406c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004070:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 8004072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004074:	2b01      	cmp	r3, #1
 8004076:	d103      	bne.n	8004080 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004078:	68c3      	ldr	r3, [r0, #12]
 800407a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800407e:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8004080:	4620      	mov	r0, r4
 8004082:	f7ff ffc7 	bl	8004014 <USB_CoreReset>
  if(cfg.dma_enable == ENABLE)
 8004086:	9b08      	ldr	r3, [sp, #32]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d107      	bne.n	800409c <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800408c:	68a3      	ldr	r3, [r4, #8]
 800408e:	f043 0306 	orr.w	r3, r3, #6
 8004092:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004094:	68a3      	ldr	r3, [r4, #8]
 8004096:	f043 0320 	orr.w	r3, r3, #32
 800409a:	60a3      	str	r3, [r4, #8]
}
 800409c:	2000      	movs	r0, #0
 800409e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040a2:	b004      	add	sp, #16
 80040a4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040a6:	68c3      	ldr	r3, [r0, #12]
 80040a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ac:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 80040ae:	f7ff ffb1 	bl	8004014 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80040b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80040b8:	e7e5      	b.n	8004086 <USB_CoreInit+0x42>

080040ba <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040ba:	6883      	ldr	r3, [r0, #8]
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6083      	str	r3, [r0, #8]
}
 80040c2:	2000      	movs	r0, #0
 80040c4:	4770      	bx	lr

080040c6 <USB_SetCurrentMode>:
{
 80040c6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040c8:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80040ca:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040d0:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80040d2:	d108      	bne.n	80040e6 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040d4:	68c3      	ldr	r3, [r0, #12]
 80040d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040da:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 80040dc:	2032      	movs	r0, #50	; 0x32
 80040de:	f7fd fb79 	bl	80017d4 <HAL_Delay>
}
 80040e2:	2000      	movs	r0, #0
 80040e4:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 80040e6:	2900      	cmp	r1, #0
 80040e8:	d1f8      	bne.n	80040dc <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040ea:	68c3      	ldr	r3, [r0, #12]
 80040ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040f0:	e7f3      	b.n	80040da <USB_SetCurrentMode+0x14>
	...

080040f4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 80040f4:	0189      	lsls	r1, r1, #6
 80040f6:	4a07      	ldr	r2, [pc, #28]	; (8004114 <USB_FlushTxFifo+0x20>)
 80040f8:	f041 0120 	orr.w	r1, r1, #32
 80040fc:	6101      	str	r1, [r0, #16]
    if (++count > 200000)
 80040fe:	3a01      	subs	r2, #1
 8004100:	d005      	beq.n	800410e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004102:	6903      	ldr	r3, [r0, #16]
 8004104:	f013 0320 	ands.w	r3, r3, #32
 8004108:	d1f9      	bne.n	80040fe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800410a:	4618      	mov	r0, r3
 800410c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800410e:	2003      	movs	r0, #3
}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	00030d41 	.word	0x00030d41

08004118 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004118:	2310      	movs	r3, #16
 800411a:	4a06      	ldr	r2, [pc, #24]	; (8004134 <USB_FlushRxFifo+0x1c>)
 800411c:	6103      	str	r3, [r0, #16]
    if (++count > 200000)
 800411e:	3a01      	subs	r2, #1
 8004120:	d005      	beq.n	800412e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004122:	6903      	ldr	r3, [r0, #16]
 8004124:	f013 0310 	ands.w	r3, r3, #16
 8004128:	d1f9      	bne.n	800411e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800412a:	4618      	mov	r0, r3
 800412c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800412e:	2003      	movs	r0, #3
}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	00030d41 	.word	0x00030d41

08004138 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004138:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800413c:	4319      	orrs	r1, r3
 800413e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004142:	2000      	movs	r0, #0
 8004144:	4770      	bx	lr
	...

08004148 <USB_DevInit>:
{
 8004148:	b084      	sub	sp, #16
 800414a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414e:	4604      	mov	r4, r0
 8004150:	a807      	add	r0, sp, #28
 8004152:	4688      	mov	r8, r1
 8004154:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004158:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800415a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800415c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004162:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004164:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004166:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0)
 8004168:	b95e      	cbnz	r6, 8004182 <USB_DevInit+0x3a>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 800416a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800416c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004170:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004178:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004180:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0;
 8004182:	2300      	movs	r3, #0
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8004184:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004186:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0;
 800418a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800418e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004192:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8004196:	d158      	bne.n	800424a <USB_DevInit+0x102>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8004198:	2a00      	cmp	r2, #0
 800419a:	d154      	bne.n	8004246 <USB_DevInit+0xfe>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 800419c:	2100      	movs	r1, #0
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800419e:	4620      	mov	r0, r4
 80041a0:	f7ff ffca 	bl	8004138 <USB_SetDevSpeed>
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80041a4:	2110      	movs	r1, #16
 80041a6:	4620      	mov	r0, r4
 80041a8:	f7ff ffa4 	bl	80040f4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7ff ffb3 	bl	8004118 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0;
 80041b2:	2300      	movs	r3, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80041b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DIEPMSK = 0;
 80041bc:	612b      	str	r3, [r5, #16]
 80041be:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0;
 80041c0:	616b      	str	r3, [r5, #20]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80041c2:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80041c6:	61aa      	str	r2, [r5, #24]
 80041c8:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DAINTMSK = 0;
 80041cc:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80041ce:	4543      	cmp	r3, r8
 80041d0:	d13f      	bne.n	8004252 <USB_DevInit+0x10a>
 80041d2:	2100      	movs	r1, #0
 80041d4:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80041d8:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80041dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80041e0:	4608      	mov	r0, r1
  for (i = 0; i < cfg.dev_endpoints; i++)
 80041e2:	428b      	cmp	r3, r1
 80041e4:	d143      	bne.n	800426e <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041e6:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 80041e8:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ee:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 80041f0:	d108      	bne.n	8004204 <USB_DevInit+0xbc>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80041f2:	4b26      	ldr	r3, [pc, #152]	; (800428c <USB_DevInit+0x144>)
 80041f4:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80041f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fc:	f043 0303 	orr.w	r3, r3, #3
 8004200:	632b      	str	r3, [r5, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 8004202:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 8004208:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800420c:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == DISABLE)
 800420e:	b91f      	cbnz	r7, 8004218 <USB_DevInit+0xd0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004210:	69a3      	ldr	r3, [r4, #24]
 8004212:	f043 0310 	orr.w	r3, r3, #16
 8004216:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8004218:	69a2      	ldr	r2, [r4, #24]
 800421a:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <USB_DevInit+0x148>)
 800421c:	4313      	orrs	r3, r2
 800421e:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable)
 8004220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004222:	b11b      	cbz	r3, 800422c <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004224:	69a3      	ldr	r3, [r4, #24]
 8004226:	f043 0308 	orr.w	r3, r3, #8
 800422a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 800422c:	2e01      	cmp	r6, #1
 800422e:	d105      	bne.n	800423c <USB_DevInit+0xf4>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004230:	69a3      	ldr	r3, [r4, #24]
 8004232:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004236:	f043 0304 	orr.w	r3, r3, #4
 800423a:	61a3      	str	r3, [r4, #24]
}
 800423c:	2000      	movs	r0, #0
 800423e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004242:	b004      	add	sp, #16
 8004244:	4770      	bx	lr
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8004246:	2101      	movs	r1, #1
 8004248:	e7a9      	b.n	800419e <USB_DevInit+0x56>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 800424a:	2903      	cmp	r1, #3
 800424c:	d0a4      	beq.n	8004198 <USB_DevInit+0x50>
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800424e:	2103      	movs	r1, #3
 8004250:	e7a5      	b.n	800419e <USB_DevInit+0x56>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004252:	f8d2 c000 	ldr.w	ip, [r2]
 8004256:	f1bc 0f00 	cmp.w	ip, #0
 800425a:	da06      	bge.n	800426a <USB_DevInit+0x122>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800425c:	6010      	str	r0, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 800425e:	6111      	str	r1, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004260:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8004262:	f8c2 e008 	str.w	lr, [r2, #8]
 8004266:	3220      	adds	r2, #32
 8004268:	e7b1      	b.n	80041ce <USB_DevInit+0x86>
      USBx_INEP(i)->DIEPCTL = 0;
 800426a:	6011      	str	r1, [r2, #0]
 800426c:	e7f7      	b.n	800425e <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800426e:	f8d2 8000 	ldr.w	r8, [r2]
 8004272:	f1b8 0f00 	cmp.w	r8, #0
 8004276:	da07      	bge.n	8004288 <USB_DevInit+0x140>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8004278:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 800427c:	6110      	str	r0, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800427e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8004280:	f8c2 c008 	str.w	ip, [r2, #8]
 8004284:	3220      	adds	r2, #32
 8004286:	e7ac      	b.n	80041e2 <USB_DevInit+0x9a>
      USBx_OUTEP(i)->DOEPCTL = 0;
 8004288:	6010      	str	r0, [r2, #0]
 800428a:	e7f7      	b.n	800427c <USB_DevInit+0x134>
 800428c:	00800100 	.word	0x00800100
 8004290:	803c3800 	.word	0x803c3800

08004294 <USB_DevDisconnect>:
{
 8004294:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004296:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800429a:	f043 0302 	orr.w	r3, r3, #2
 800429e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 80042a2:	2003      	movs	r0, #3
 80042a4:	f7fd fa96 	bl	80017d4 <HAL_Delay>
}
 80042a8:	2000      	movs	r0, #0
 80042aa:	bd08      	pop	{r3, pc}

080042ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042ac:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80042ae:	f000 ffb5 	bl	800521c <vTaskStartScheduler>
  
  return osOK;
}
 80042b2:	2000      	movs	r0, #0
 80042b4:	bd08      	pop	{r3, pc}

080042b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80042b6:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042b8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80042bc:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042be:	8a02      	ldrh	r2, [r0, #16]
{
 80042c0:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 80042c2:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042c4:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 80042c8:	bf14      	ite	ne
 80042ca:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042cc:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042ce:	a803      	add	r0, sp, #12
 80042d0:	9400      	str	r4, [sp, #0]
 80042d2:	9001      	str	r0, [sp, #4]
 80042d4:	4628      	mov	r0, r5
 80042d6:	f000 fed1 	bl	800507c <xTaskCreate>
 80042da:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042dc:	bf0c      	ite	eq
 80042de:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80042e0:	2000      	movne	r0, #0
}
 80042e2:	b005      	add	sp, #20
 80042e4:	bd30      	pop	{r4, r5, pc}

080042e6 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042e6:	2800      	cmp	r0, #0
 80042e8:	bf08      	it	eq
 80042ea:	2001      	moveq	r0, #1
{
 80042ec:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042ee:	f001 f8eb 	bl	80054c8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042f2:	2000      	movs	r0, #0
 80042f4:	bd08      	pop	{r3, pc}

080042f6 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80042f6:	2001      	movs	r0, #1
 80042f8:	f000 bc62 	b.w	8004bc0 <xQueueCreateMutex>

080042fc <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80042fc:	2200      	movs	r2, #0
 80042fe:	c803      	ldmia	r0, {r0, r1}
 8004300:	f000 bb7c 	b.w	80049fc <xQueueGenericCreate>

08004304 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004304:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004306:	f001 fa2f 	bl	8005768 <xTaskGetSchedulerState>
 800430a:	2801      	cmp	r0, #1
 800430c:	d003      	beq.n	8004316 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800430e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8004312:	f000 b9ff 	b.w	8004714 <xPortSysTickHandler>
 8004316:	bd08      	pop	{r3, pc}

08004318 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <prvInsertBlockIntoFreeList+0x40>)
{
 800431a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4282      	cmp	r2, r0
 8004320:	d318      	bcc.n	8004354 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004322:	685c      	ldr	r4, [r3, #4]
 8004324:	1919      	adds	r1, r3, r4
 8004326:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004328:	bf01      	itttt	eq
 800432a:	6841      	ldreq	r1, [r0, #4]
 800432c:	4618      	moveq	r0, r3
 800432e:	1909      	addeq	r1, r1, r4
 8004330:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004332:	6844      	ldr	r4, [r0, #4]
 8004334:	1901      	adds	r1, r0, r4
 8004336:	428a      	cmp	r2, r1
 8004338:	d107      	bne.n	800434a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800433a:	4908      	ldr	r1, [pc, #32]	; (800435c <prvInsertBlockIntoFreeList+0x44>)
 800433c:	6809      	ldr	r1, [r1, #0]
 800433e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004340:	bf1f      	itttt	ne
 8004342:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004344:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004346:	1909      	addne	r1, r1, r4
 8004348:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800434a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800434c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800434e:	bf18      	it	ne
 8004350:	6018      	strne	r0, [r3, #0]
 8004352:	bd10      	pop	{r4, pc}
 8004354:	4613      	mov	r3, r2
 8004356:	e7e1      	b.n	800431c <prvInsertBlockIntoFreeList+0x4>
 8004358:	20003c68 	.word	0x20003c68
 800435c:	20000058 	.word	0x20000058

08004360 <pvPortMalloc>:
{
 8004360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004364:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004366:	f000 ff99 	bl	800529c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800436a:	4940      	ldr	r1, [pc, #256]	; (800446c <pvPortMalloc+0x10c>)
 800436c:	4d40      	ldr	r5, [pc, #256]	; (8004470 <pvPortMalloc+0x110>)
 800436e:	680b      	ldr	r3, [r1, #0]
 8004370:	bb0b      	cbnz	r3, 80043b6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8004372:	4a40      	ldr	r2, [pc, #256]	; (8004474 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004374:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004376:	4e40      	ldr	r6, [pc, #256]	; (8004478 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004378:	bf1b      	ittet	ne
 800437a:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800437c:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004380:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004384:	f020 0007 	bicne.w	r0, r0, #7
 8004388:	bf1c      	itt	ne
 800438a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800438c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800438e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004390:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004392:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004394:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8004396:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004398:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800439c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800439e:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043a0:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80043a2:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043a4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043a6:	4b35      	ldr	r3, [pc, #212]	; (800447c <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043a8:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043aa:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043ac:	4b34      	ldr	r3, [pc, #208]	; (8004480 <pvPortMalloc+0x120>)
 80043ae:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043b4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043b6:	682f      	ldr	r7, [r5, #0]
 80043b8:	4227      	tst	r7, r4
 80043ba:	d116      	bne.n	80043ea <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80043bc:	2c00      	cmp	r4, #0
 80043be:	d042      	beq.n	8004446 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 80043c0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043c4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043c6:	bf1c      	itt	ne
 80043c8:	f023 0307 	bicne.w	r3, r3, #7
 80043cc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043ce:	b163      	cbz	r3, 80043ea <pvPortMalloc+0x8a>
 80043d0:	4a2b      	ldr	r2, [pc, #172]	; (8004480 <pvPortMalloc+0x120>)
 80043d2:	6816      	ldr	r6, [r2, #0]
 80043d4:	4690      	mov	r8, r2
 80043d6:	42b3      	cmp	r3, r6
 80043d8:	d807      	bhi.n	80043ea <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80043da:	4a27      	ldr	r2, [pc, #156]	; (8004478 <pvPortMalloc+0x118>)
 80043dc:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043de:	6868      	ldr	r0, [r5, #4]
 80043e0:	4283      	cmp	r3, r0
 80043e2:	d804      	bhi.n	80043ee <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80043e4:	6809      	ldr	r1, [r1, #0]
 80043e6:	428d      	cmp	r5, r1
 80043e8:	d107      	bne.n	80043fa <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80043ea:	2400      	movs	r4, #0
 80043ec:	e02b      	b.n	8004446 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ee:	682c      	ldr	r4, [r5, #0]
 80043f0:	2c00      	cmp	r4, #0
 80043f2:	d0f7      	beq.n	80043e4 <pvPortMalloc+0x84>
 80043f4:	462a      	mov	r2, r5
 80043f6:	4625      	mov	r5, r4
 80043f8:	e7f1      	b.n	80043de <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043fa:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043fc:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043fe:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004400:	1ac2      	subs	r2, r0, r3
 8004402:	2a10      	cmp	r2, #16
 8004404:	d911      	bls.n	800442a <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004406:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004408:	0741      	lsls	r1, r0, #29
 800440a:	d00a      	beq.n	8004422 <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	b672      	cpsid	i
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	b662      	cpsie	i
 8004420:	e7fe      	b.n	8004420 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004422:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004424:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004426:	f7ff ff77 	bl	8004318 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800442a:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800442c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800442e:	4913      	ldr	r1, [pc, #76]	; (800447c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004430:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004432:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004434:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8004436:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004438:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800443c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800443e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004440:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004442:	bf38      	it	cc
 8004444:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8004446:	f000 ffc5 	bl	80053d4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800444a:	0763      	lsls	r3, r4, #29
 800444c:	d00a      	beq.n	8004464 <pvPortMalloc+0x104>
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	b672      	cpsid	i
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	b662      	cpsie	i
 8004462:	e7fe      	b.n	8004462 <pvPortMalloc+0x102>
}
 8004464:	4620      	mov	r0, r4
 8004466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800446a:	bf00      	nop
 800446c:	20000058 	.word	0x20000058
 8004470:	20003c5c 	.word	0x20003c5c
 8004474:	2000005c 	.word	0x2000005c
 8004478:	20003c68 	.word	0x20003c68
 800447c:	20003c64 	.word	0x20003c64
 8004480:	20003c60 	.word	0x20003c60

08004484 <vPortFree>:
{
 8004484:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004486:	4604      	mov	r4, r0
 8004488:	2800      	cmp	r0, #0
 800448a:	d032      	beq.n	80044f2 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <vPortFree+0x70>)
 800448e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	4213      	tst	r3, r2
 8004496:	d10a      	bne.n	80044ae <vPortFree+0x2a>
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	b672      	cpsid	i
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	b662      	cpsie	i
 80044ac:	e7fe      	b.n	80044ac <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044ae:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80044b2:	b151      	cbz	r1, 80044ca <vPortFree+0x46>
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	b672      	cpsid	i
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	b662      	cpsie	i
 80044c8:	e7fe      	b.n	80044c8 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044ca:	ea23 0302 	bic.w	r3, r3, r2
 80044ce:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80044d2:	f000 fee3 	bl	800529c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044d6:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <vPortFree+0x74>)
 80044d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044dc:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044e0:	6811      	ldr	r1, [r2, #0]
 80044e2:	440b      	add	r3, r1
 80044e4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044e6:	f7ff ff17 	bl	8004318 <prvInsertBlockIntoFreeList>
}
 80044ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80044ee:	f000 bf71 	b.w	80053d4 <xTaskResumeAll>
 80044f2:	bd10      	pop	{r4, pc}
 80044f4:	20003c5c 	.word	0x20003c5c
 80044f8:	20003c60 	.word	0x20003c60

080044fc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044fc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004500:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004504:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004506:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004508:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800450a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800450c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800450e:	6003      	str	r3, [r0, #0]
 8004510:	4770      	bx	lr

08004512 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004512:	2300      	movs	r3, #0
 8004514:	6103      	str	r3, [r0, #16]
 8004516:	4770      	bx	lr

08004518 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004518:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800451a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800451c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800451e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004524:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004526:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004528:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800452a:	3301      	adds	r3, #1
 800452c:	6003      	str	r3, [r0, #0]
 800452e:	4770      	bx	lr

08004530 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004530:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004532:	1c53      	adds	r3, r2, #1
{
 8004534:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8004536:	d10a      	bne.n	800454e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004538:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800453e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004540:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004542:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004544:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004546:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004548:	3301      	adds	r3, #1
 800454a:	6003      	str	r3, [r0, #0]
 800454c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800454e:	f100 0308 	add.w	r3, r0, #8
 8004552:	685c      	ldr	r4, [r3, #4]
 8004554:	6825      	ldr	r5, [r4, #0]
 8004556:	42aa      	cmp	r2, r5
 8004558:	d3ef      	bcc.n	800453a <vListInsert+0xa>
 800455a:	4623      	mov	r3, r4
 800455c:	e7f9      	b.n	8004552 <vListInsert+0x22>

0800455e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800455e:	6841      	ldr	r1, [r0, #4]
 8004560:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004562:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004564:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004566:	6882      	ldr	r2, [r0, #8]
 8004568:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800456e:	bf08      	it	eq
 8004570:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004572:	2200      	movs	r2, #0
 8004574:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	3801      	subs	r0, #1
 800457a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800457c:	4770      	bx	lr
	...

08004580 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <prvTaskExitError+0x34>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	d00a      	beq.n	800459e <prvTaskExitError+0x1e>
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	b672      	cpsid	i
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	b662      	cpsie	i
 800459c:	e7fe      	b.n	800459c <prvTaskExitError+0x1c>
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	b672      	cpsid	i
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	b662      	cpsie	i
 80045b2:	e7fe      	b.n	80045b2 <prvTaskExitError+0x32>
 80045b4:	20000004 	.word	0x20000004

080045b8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80045b8:	4806      	ldr	r0, [pc, #24]	; (80045d4 <prvPortStartFirstTask+0x1c>)
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	6800      	ldr	r0, [r0, #0]
 80045be:	f380 8808 	msr	MSP, r0
 80045c2:	b662      	cpsie	i
 80045c4:	b661      	cpsie	f
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	df00      	svc	0
 80045d0:	bf00      	nop
 80045d2:	0000      	.short	0x0000
 80045d4:	e000ed08 	.word	0xe000ed08

080045d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045e8 <vPortEnableVFP+0x10>
 80045dc:	6801      	ldr	r1, [r0, #0]
 80045de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045e2:	6001      	str	r1, [r0, #0]
 80045e4:	4770      	bx	lr
 80045e6:	0000      	.short	0x0000
 80045e8:	e000ed88 	.word	0xe000ed88

080045ec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045f0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045f4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80045f8:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045fa:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045fe:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004600:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004602:	f06f 0302 	mvn.w	r3, #2
 8004606:	6203      	str	r3, [r0, #32]
}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	08004581 	.word	0x08004581

08004610 <SVC_Handler>:
	__asm volatile (
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <pxCurrentTCBConst2>)
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	6808      	ldr	r0, [r1, #0]
 8004616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461a:	f380 8809 	msr	PSP, r0
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8811 	msr	BASEPRI, r0
 800462a:	4770      	bx	lr
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst2>:
 8004630:	20003c78 	.word	0x20003c78

08004634 <vPortEnterCritical>:
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	b672      	cpsid	i
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	b662      	cpsie	i
	uxCriticalNesting++;
 8004648:	4a0b      	ldr	r2, [pc, #44]	; (8004678 <vPortEnterCritical+0x44>)
 800464a:	6813      	ldr	r3, [r2, #0]
 800464c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800464e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004652:	d10f      	bne.n	8004674 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <vPortEnterCritical+0x48>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f013 0fff 	tst.w	r3, #255	; 0xff
 800465c:	d00a      	beq.n	8004674 <vPortEnterCritical+0x40>
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	b672      	cpsid	i
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	b662      	cpsie	i
 8004672:	e7fe      	b.n	8004672 <vPortEnterCritical+0x3e>
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000004 	.word	0x20000004
 800467c:	e000ed04 	.word	0xe000ed04

08004680 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004680:	4a09      	ldr	r2, [pc, #36]	; (80046a8 <vPortExitCritical+0x28>)
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	b953      	cbnz	r3, 800469c <vPortExitCritical+0x1c>
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	b672      	cpsid	i
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	b662      	cpsie	i
 800469a:	e7fe      	b.n	800469a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800469c:	3b01      	subs	r3, #1
 800469e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046a0:	b90b      	cbnz	r3, 80046a6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	4770      	bx	lr
 80046a8:	20000004 	.word	0x20000004
 80046ac:	00000000 	.word	0x00000000

080046b0 <PendSV_Handler>:
	__asm volatile
 80046b0:	f3ef 8009 	mrs	r0, PSP
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	4b15      	ldr	r3, [pc, #84]	; (8004710 <pxCurrentTCBConst>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	f01e 0f10 	tst.w	lr, #16
 80046c0:	bf08      	it	eq
 80046c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ca:	6010      	str	r0, [r2, #0]
 80046cc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80046d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046d4:	b672      	cpsid	i
 80046d6:	f380 8811 	msr	BASEPRI, r0
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	b662      	cpsie	i
 80046e4:	f000 ff50 	bl	8005588 <vTaskSwitchContext>
 80046e8:	f04f 0000 	mov.w	r0, #0
 80046ec:	f380 8811 	msr	BASEPRI, r0
 80046f0:	bc08      	pop	{r3}
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	6808      	ldr	r0, [r1, #0]
 80046f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	f01e 0f10 	tst.w	lr, #16
 80046fe:	bf08      	it	eq
 8004700:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004704:	f380 8809 	msr	PSP, r0
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop

08004710 <pxCurrentTCBConst>:
 8004710:	20003c78 	.word	0x20003c78

08004714 <xPortSysTickHandler>:
{
 8004714:	b508      	push	{r3, lr}
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	b672      	cpsid	i
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800472a:	f000 fdbf 	bl	80052ac <xTaskIncrementTick>
 800472e:	b118      	cbz	r0, 8004738 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004734:	4b02      	ldr	r3, [pc, #8]	; (8004740 <xPortSysTickHandler+0x2c>)
 8004736:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004738:	2300      	movs	r3, #0
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	bd08      	pop	{r3, pc}
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <vPortSetupTimerInterrupt+0x1c>)
 8004746:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004750:	4a04      	ldr	r2, [pc, #16]	; (8004764 <vPortSetupTimerInterrupt+0x20>)
 8004752:	3b01      	subs	r3, #1
 8004754:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004756:	2207      	movs	r2, #7
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <vPortSetupTimerInterrupt+0x24>)
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	20000000 	.word	0x20000000
 8004764:	e000e014 	.word	0xe000e014
 8004768:	e000e010 	.word	0xe000e010

0800476c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800476c:	4b23      	ldr	r3, [pc, #140]	; (80047fc <xPortStartScheduler+0x90>)
{
 800476e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004770:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004772:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004778:	22ff      	movs	r2, #255	; 0xff
 800477a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800477c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800477e:	4a20      	ldr	r2, [pc, #128]	; (8004800 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004786:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800478a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800478e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004790:	2207      	movs	r2, #7
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <xPortStartScheduler+0x98>)
 8004794:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004796:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800479a:	1e54      	subs	r4, r2, #1
 800479c:	0600      	lsls	r0, r0, #24
 800479e:	d423      	bmi.n	80047e8 <xPortStartScheduler+0x7c>
 80047a0:	b101      	cbz	r1, 80047a4 <xPortStartScheduler+0x38>
 80047a2:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047a8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80047ac:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	4a12      	ldr	r2, [pc, #72]	; (80047fc <xPortStartScheduler+0x90>)
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047b6:	4b14      	ldr	r3, [pc, #80]	; (8004808 <xPortStartScheduler+0x9c>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80047be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80047c6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80047c8:	f7ff ffbc 	bl	8004744 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80047cc:	2200      	movs	r2, #0
 80047ce:	4b0f      	ldr	r3, [pc, #60]	; (800480c <xPortStartScheduler+0xa0>)
 80047d0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80047d2:	f7ff ff01 	bl	80045d8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047d6:	4a0e      	ldr	r2, [pc, #56]	; (8004810 <xPortStartScheduler+0xa4>)
 80047d8:	6813      	ldr	r3, [r2, #0]
 80047da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047de:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80047e0:	f7ff feea 	bl	80045b8 <prvPortStartFirstTask>
	prvTaskExitError();
 80047e4:	f7ff fecc 	bl	8004580 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80047ec:	2101      	movs	r1, #1
 80047ee:	0052      	lsls	r2, r2, #1
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	f88d 2003 	strb.w	r2, [sp, #3]
 80047f6:	4622      	mov	r2, r4
 80047f8:	e7cd      	b.n	8004796 <xPortStartScheduler+0x2a>
 80047fa:	bf00      	nop
 80047fc:	e000e400 	.word	0xe000e400
 8004800:	20003c70 	.word	0x20003c70
 8004804:	20003c74 	.word	0x20003c74
 8004808:	e000ed20 	.word	0xe000ed20
 800480c:	20000004 	.word	0x20000004
 8004810:	e000ef34 	.word	0xe000ef34

08004814 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004814:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004818:	2b0f      	cmp	r3, #15
 800481a:	d910      	bls.n	800483e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800481c:	4a12      	ldr	r2, [pc, #72]	; (8004868 <vPortValidateInterruptPriority+0x54>)
 800481e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004820:	4a12      	ldr	r2, [pc, #72]	; (800486c <vPortValidateInterruptPriority+0x58>)
 8004822:	7812      	ldrb	r2, [r2, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d90a      	bls.n	800483e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	b672      	cpsid	i
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	b662      	cpsie	i
 800483c:	e7fe      	b.n	800483c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <vPortValidateInterruptPriority+0x5c>)
 8004840:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <vPortValidateInterruptPriority+0x60>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800484a:	4293      	cmp	r3, r2
 800484c:	d90a      	bls.n	8004864 <vPortValidateInterruptPriority+0x50>
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	b672      	cpsid	i
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	b662      	cpsie	i
 8004862:	e7fe      	b.n	8004862 <vPortValidateInterruptPriority+0x4e>
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	e000e3f0 	.word	0xe000e3f0
 800486c:	20003c70 	.word	0x20003c70
 8004870:	e000ed0c 	.word	0xe000ed0c
 8004874:	20003c74 	.word	0x20003c74

08004878 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800487c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800487e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004880:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004882:	b942      	cbnz	r2, 8004896 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004884:	6805      	ldr	r5, [r0, #0]
 8004886:	b99d      	cbnz	r5, 80048b0 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004888:	6840      	ldr	r0, [r0, #4]
 800488a:	f000 ffc3 	bl	8005814 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800488e:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004890:	3601      	adds	r6, #1
 8004892:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8004894:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004896:	b96d      	cbnz	r5, 80048b4 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004898:	6880      	ldr	r0, [r0, #8]
 800489a:	f001 f83f 	bl	800591c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800489e:	68a3      	ldr	r3, [r4, #8]
 80048a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048a2:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048a4:	6862      	ldr	r2, [r4, #4]
 80048a6:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80048a8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048aa:	d301      	bcc.n	80048b0 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80048b0:	2000      	movs	r0, #0
 80048b2:	e7ed      	b.n	8004890 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b4:	68c0      	ldr	r0, [r0, #12]
 80048b6:	f001 f831 	bl	800591c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80048ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048bc:	68e2      	ldr	r2, [r4, #12]
 80048be:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048c0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80048c2:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048c4:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80048c6:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80048c8:	bf3e      	ittt	cc
 80048ca:	6862      	ldrcc	r2, [r4, #4]
 80048cc:	189b      	addcc	r3, r3, r2
 80048ce:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80048d0:	2d02      	cmp	r5, #2
 80048d2:	d1ed      	bne.n	80048b0 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048d4:	b10e      	cbz	r6, 80048da <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80048d6:	3e01      	subs	r6, #1
 80048d8:	e7ea      	b.n	80048b0 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80048da:	4630      	mov	r0, r6
 80048dc:	e7d8      	b.n	8004890 <prvCopyDataToQueue+0x18>

080048de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048de:	4603      	mov	r3, r0
 80048e0:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80048e4:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048e6:	b162      	cbz	r2, 8004902 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80048e8:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048ea:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80048ec:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048ee:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80048f0:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 80048f2:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80048f6:	bf24      	itt	cs
 80048f8:	6819      	ldrcs	r1, [r3, #0]
 80048fa:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80048fc:	68d9      	ldr	r1, [r3, #12]
 80048fe:	f001 b80d 	b.w	800591c <memcpy>
}
 8004902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004906:	4770      	bx	lr

08004908 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800490c:	f7ff fe92 	bl	8004634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004910:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004914:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004918:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800491a:	2d00      	cmp	r5, #0
 800491c:	dc14      	bgt.n	8004948 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800491e:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004920:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8004924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004928:	f7ff feaa 	bl	8004680 <vPortExitCritical>
	taskENTER_CRITICAL();
 800492c:	f7ff fe82 	bl	8004634 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004930:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8004934:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004936:	2d00      	cmp	r5, #0
 8004938:	dc12      	bgt.n	8004960 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800493a:	23ff      	movs	r3, #255	; 0xff
 800493c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8004940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004944:	f7ff be9c 	b.w	8004680 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0e7      	beq.n	800491e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800494e:	4630      	mov	r0, r6
 8004950:	f000 fe72 	bl	8005638 <xTaskRemoveFromEventList>
 8004954:	b108      	cbz	r0, 800495a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004956:	f000 ff01 	bl	800575c <vTaskMissedYield>
 800495a:	3d01      	subs	r5, #1
 800495c:	b26d      	sxtb	r5, r5
 800495e:	e7dc      	b.n	800491a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004960:	6923      	ldr	r3, [r4, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0e9      	beq.n	800493a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004966:	4630      	mov	r0, r6
 8004968:	f000 fe66 	bl	8005638 <xTaskRemoveFromEventList>
 800496c:	b108      	cbz	r0, 8004972 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800496e:	f000 fef5 	bl	800575c <vTaskMissedYield>
 8004972:	3d01      	subs	r5, #1
 8004974:	b26d      	sxtb	r5, r5
 8004976:	e7de      	b.n	8004936 <prvUnlockQueue+0x2e>

08004978 <xQueueGenericReset>:
{
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800497c:	4604      	mov	r4, r0
 800497e:	b950      	cbnz	r0, 8004996 <xQueueGenericReset+0x1e>
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	b672      	cpsid	i
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	b662      	cpsie	i
 8004994:	e7fe      	b.n	8004994 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8004996:	f7ff fe4d 	bl	8004634 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800499a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800499c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800499e:	6822      	ldr	r2, [r4, #0]
 80049a0:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049a2:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80049a4:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80049a6:	1a1b      	subs	r3, r3, r0
 80049a8:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80049aa:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049ac:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80049ae:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049b0:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049b2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80049b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80049bc:	b995      	cbnz	r5, 80049e4 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	b163      	cbz	r3, 80049dc <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049c2:	f104 0010 	add.w	r0, r4, #16
 80049c6:	f000 fe37 	bl	8005638 <xTaskRemoveFromEventList>
 80049ca:	b138      	cbz	r0, 80049dc <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80049cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <xQueueGenericReset+0x80>)
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80049dc:	f7ff fe50 	bl	8004680 <vPortExitCritical>
}
 80049e0:	2001      	movs	r0, #1
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049e4:	f104 0010 	add.w	r0, r4, #16
 80049e8:	f7ff fd88 	bl	80044fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80049f0:	f7ff fd84 	bl	80044fc <vListInitialise>
 80049f4:	e7f2      	b.n	80049dc <xQueueGenericReset+0x64>
 80049f6:	bf00      	nop
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <xQueueGenericCreate>:
	{
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a00:	4606      	mov	r6, r0
 8004a02:	b950      	cbnz	r0, 8004a1a <xQueueGenericCreate+0x1e>
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	b672      	cpsid	i
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	b662      	cpsie	i
 8004a18:	e7fe      	b.n	8004a18 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a1a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004a1c:	3048      	adds	r0, #72	; 0x48
 8004a1e:	f7ff fc9f 	bl	8004360 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004a22:	4604      	mov	r4, r0
 8004a24:	b138      	cbz	r0, 8004a36 <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a26:	b945      	cbnz	r5, 8004a3a <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a28:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004a2a:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a2c:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8004a2e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff ffa1 	bl	8004978 <xQueueGenericReset>
	}
 8004a36:	4620      	mov	r0, r4
 8004a38:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004a3a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a3e:	6003      	str	r3, [r0, #0]
 8004a40:	e7f3      	b.n	8004a2a <xQueueGenericCreate+0x2e>
	...

08004a44 <xQueueGenericSend>:
{
 8004a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	4689      	mov	r9, r1
 8004a4a:	9201      	str	r2, [sp, #4]
 8004a4c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004a4e:	4604      	mov	r4, r0
 8004a50:	b950      	cbnz	r0, 8004a68 <xQueueGenericSend+0x24>
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	b672      	cpsid	i
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	b662      	cpsie	i
 8004a66:	e7fe      	b.n	8004a66 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a68:	2900      	cmp	r1, #0
 8004a6a:	f040 808c 	bne.w	8004b86 <xQueueGenericSend+0x142>
 8004a6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8088 	beq.w	8004b86 <xQueueGenericSend+0x142>
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	b672      	cpsid	i
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	b662      	cpsie	i
 8004a8a:	e7fe      	b.n	8004a8a <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a8c:	9e01      	ldr	r6, [sp, #4]
 8004a8e:	2e00      	cmp	r6, #0
 8004a90:	f000 8084 	beq.w	8004b9c <xQueueGenericSend+0x158>
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	b672      	cpsid	i
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	b662      	cpsie	i
 8004aa8:	e7fe      	b.n	8004aa8 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aaa:	9d01      	ldr	r5, [sp, #4]
 8004aac:	b91d      	cbnz	r5, 8004ab6 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8004aae:	f7ff fde7 	bl	8004680 <vPortExitCritical>
			return errQUEUE_FULL;
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	e058      	b.n	8004b68 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8004ab6:	b916      	cbnz	r6, 8004abe <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 8004ab8:	a802      	add	r0, sp, #8
 8004aba:	f000 fe01 	bl	80056c0 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004abe:	f7ff fddf 	bl	8004680 <vPortExitCritical>
		vTaskSuspendAll();
 8004ac2:	f000 fbeb 	bl	800529c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ac6:	f7ff fdb5 	bl	8004634 <vPortEnterCritical>
 8004aca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004ace:	2bff      	cmp	r3, #255	; 0xff
 8004ad0:	d101      	bne.n	8004ad6 <xQueueGenericSend+0x92>
 8004ad2:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8004ad6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004ada:	2bff      	cmp	r3, #255	; 0xff
 8004adc:	d101      	bne.n	8004ae2 <xQueueGenericSend+0x9e>
 8004ade:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8004ae2:	f7ff fdcd 	bl	8004680 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ae6:	a901      	add	r1, sp, #4
 8004ae8:	a802      	add	r0, sp, #8
 8004aea:	f000 fdf9 	bl	80056e0 <xTaskCheckForTimeOut>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d143      	bne.n	8004b7a <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004af2:	f7ff fd9f 	bl	8004634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004af6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004af8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004afa:	f7ff fdc1 	bl	8004680 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004afe:	42ae      	cmp	r6, r5
 8004b00:	d135      	bne.n	8004b6e <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b02:	9901      	ldr	r1, [sp, #4]
 8004b04:	f104 0010 	add.w	r0, r4, #16
 8004b08:	f000 fd7a 	bl	8005600 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7ff fefb 	bl	8004908 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b12:	f000 fc5f 	bl	80053d4 <xTaskResumeAll>
 8004b16:	b938      	cbnz	r0, 8004b28 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8004b18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b1c:	f8ca 3000 	str.w	r3, [sl]
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004b2a:	f7ff fd83 	bl	8004634 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d301      	bcc.n	8004b3a <xQueueGenericSend+0xf6>
 8004b36:	2f02      	cmp	r7, #2
 8004b38:	d1b7      	bne.n	8004aaa <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b3a:	463a      	mov	r2, r7
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7ff fe9a 	bl	8004878 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b46:	b11b      	cbz	r3, 8004b50 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b4c:	f000 fd74 	bl	8005638 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004b50:	b138      	cbz	r0, 8004b62 <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8004b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b56:	4b19      	ldr	r3, [pc, #100]	; (8004bbc <xQueueGenericSend+0x178>)
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004b62:	f7ff fd8d 	bl	8004680 <vPortExitCritical>
				return pdPASS;
 8004b66:	2001      	movs	r0, #1
}
 8004b68:	b004      	add	sp, #16
 8004b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f7ff feca 	bl	8004908 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b74:	f000 fc2e 	bl	80053d4 <xTaskResumeAll>
 8004b78:	e7d6      	b.n	8004b28 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f7ff fec4 	bl	8004908 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b80:	f000 fc28 	bl	80053d4 <xTaskResumeAll>
 8004b84:	e795      	b.n	8004ab2 <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b86:	2f02      	cmp	r7, #2
 8004b88:	d102      	bne.n	8004b90 <xQueueGenericSend+0x14c>
 8004b8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d10a      	bne.n	8004ba6 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b90:	f000 fdea 	bl	8005768 <xTaskGetSchedulerState>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	f43f af79 	beq.w	8004a8c <xQueueGenericSend+0x48>
 8004b9a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004b9c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004ba0:	f8df a018 	ldr.w	sl, [pc, #24]	; 8004bbc <xQueueGenericSend+0x178>
 8004ba4:	e7c1      	b.n	8004b2a <xQueueGenericSend+0xe6>
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	b672      	cpsid	i
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	b662      	cpsie	i
 8004bba:	e7fe      	b.n	8004bba <xQueueGenericSend+0x176>
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <xQueueCreateMutex>:
	{
 8004bc0:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	f7ff ff18 	bl	80049fc <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8004bcc:	4604      	mov	r4, r0
 8004bce:	b138      	cbz	r0, 8004be0 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004bd4:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004bd6:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004bd8:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004bda:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004bdc:	f7ff ff32 	bl	8004a44 <xQueueGenericSend>
	}
 8004be0:	4620      	mov	r0, r4
 8004be2:	bd10      	pop	{r4, pc}

08004be4 <xQueueGenericSendFromISR>:
{
 8004be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be8:	4688      	mov	r8, r1
 8004bea:	4691      	mov	r9, r2
 8004bec:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004bee:	4604      	mov	r4, r0
 8004bf0:	b950      	cbnz	r0, 8004c08 <xQueueGenericSendFromISR+0x24>
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	b672      	cpsid	i
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	b662      	cpsie	i
 8004c06:	e7fe      	b.n	8004c06 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c08:	bb19      	cbnz	r1, 8004c52 <xQueueGenericSendFromISR+0x6e>
 8004c0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c0c:	b30b      	cbz	r3, 8004c52 <xQueueGenericSendFromISR+0x6e>
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	b672      	cpsid	i
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	b662      	cpsie	i
 8004c22:	e7fe      	b.n	8004c22 <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c28:	f000 fd06 	bl	8005638 <xTaskRemoveFromEventList>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d036      	beq.n	8004c9e <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8004c30:	f1b9 0f00 	cmp.w	r9, #0
 8004c34:	d033      	beq.n	8004c9e <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c36:	2001      	movs	r0, #1
 8004c38:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004c3c:	f386 8811 	msr	BASEPRI, r6
}
 8004c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c44:	3501      	adds	r5, #1
 8004c46:	b26d      	sxtb	r5, r5
 8004c48:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004c4c:	e027      	b.n	8004c9e <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e7f4      	b.n	8004c3c <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c52:	2f02      	cmp	r7, #2
 8004c54:	d102      	bne.n	8004c5c <xQueueGenericSendFromISR+0x78>
 8004c56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d122      	bne.n	8004ca2 <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c5c:	f7ff fdda 	bl	8004814 <vPortValidateInterruptPriority>
	__asm volatile
 8004c60:	f3ef 8611 	mrs	r6, BASEPRI
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	b672      	cpsid	i
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d301      	bcc.n	8004c84 <xQueueGenericSendFromISR+0xa0>
 8004c80:	2f02      	cmp	r7, #2
 8004c82:	d1e4      	bne.n	8004c4e <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c84:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c88:	463a      	mov	r2, r7
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c8e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c90:	f7ff fdf2 	bl	8004878 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004c94:	1c6b      	adds	r3, r5, #1
 8004c96:	d1d5      	bne.n	8004c44 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1c2      	bne.n	8004c24 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	e7cc      	b.n	8004c3c <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	b672      	cpsid	i
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	b662      	cpsie	i
 8004cb6:	e7fe      	b.n	8004cb6 <xQueueGenericSendFromISR+0xd2>

08004cb8 <xQueueGiveFromISR>:
{
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	b950      	cbnz	r0, 8004cd6 <xQueueGiveFromISR+0x1e>
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	b672      	cpsid	i
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	b662      	cpsie	i
 8004cd4:	e7fe      	b.n	8004cd4 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004cd6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004cd8:	b153      	cbz	r3, 8004cf0 <xQueueGiveFromISR+0x38>
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	b672      	cpsid	i
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	b662      	cpsie	i
 8004cee:	e7fe      	b.n	8004cee <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004cf0:	6803      	ldr	r3, [r0, #0]
 8004cf2:	b913      	cbnz	r3, 8004cfa <xQueueGiveFromISR+0x42>
 8004cf4:	6843      	ldr	r3, [r0, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d130      	bne.n	8004d5c <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cfa:	f7ff fd8b 	bl	8004814 <vPortValidateInterruptPriority>
	__asm volatile
 8004cfe:	f3ef 8611 	mrs	r6, BASEPRI
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	b672      	cpsid	i
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004d18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d301      	bcc.n	8004d22 <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e014      	b.n	8004d4c <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004d26:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d28:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004d2a:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	d110      	bne.n	8004d52 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d32:	b90b      	cbnz	r3, 8004d38 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8004d34:	2001      	movs	r0, #1
 8004d36:	e009      	b.n	8004d4c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d3c:	f000 fc7c 	bl	8005638 <xTaskRemoveFromEventList>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d0f7      	beq.n	8004d34 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	d0f5      	beq.n	8004d34 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d48:	2001      	movs	r0, #1
 8004d4a:	6028      	str	r0, [r5, #0]
	__asm volatile
 8004d4c:	f386 8811 	msr	BASEPRI, r6
}
 8004d50:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d52:	3301      	adds	r3, #1
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d5a:	e7eb      	b.n	8004d34 <xQueueGiveFromISR+0x7c>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	b672      	cpsid	i
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	b662      	cpsie	i
 8004d70:	e7fe      	b.n	8004d70 <xQueueGiveFromISR+0xb8>
	...

08004d74 <xQueueGenericReceive>:
{
 8004d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	4688      	mov	r8, r1
 8004d7a:	9201      	str	r2, [sp, #4]
 8004d7c:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8004d7e:	4604      	mov	r4, r0
 8004d80:	b950      	cbnz	r0, 8004d98 <xQueueGenericReceive+0x24>
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	b672      	cpsid	i
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	b662      	cpsie	i
 8004d96:	e7fe      	b.n	8004d96 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d98:	2900      	cmp	r1, #0
 8004d9a:	f040 80a9 	bne.w	8004ef0 <xQueueGenericReceive+0x17c>
 8004d9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80a5 	beq.w	8004ef0 <xQueueGenericReceive+0x17c>
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	b672      	cpsid	i
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	b662      	cpsie	i
 8004dba:	e7fe      	b.n	8004dba <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dbc:	9e01      	ldr	r6, [sp, #4]
 8004dbe:	2e00      	cmp	r6, #0
 8004dc0:	f000 809c 	beq.w	8004efc <xQueueGenericReceive+0x188>
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	b672      	cpsid	i
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	b662      	cpsie	i
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004ddc:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d06d      	beq.n	8004ebe <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004de2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004de6:	e05f      	b.n	8004ea8 <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004de8:	9d01      	ldr	r5, [sp, #4]
 8004dea:	b91d      	cbnz	r5, 8004df4 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 8004dec:	f7ff fc48 	bl	8004680 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004df0:	4628      	mov	r0, r5
 8004df2:	e067      	b.n	8004ec4 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 8004df4:	b916      	cbnz	r6, 8004dfc <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 8004df6:	a802      	add	r0, sp, #8
 8004df8:	f000 fc62 	bl	80056c0 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004dfc:	f7ff fc40 	bl	8004680 <vPortExitCritical>
		vTaskSuspendAll();
 8004e00:	f000 fa4c 	bl	800529c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e04:	f7ff fc16 	bl	8004634 <vPortEnterCritical>
 8004e08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004e0c:	2bff      	cmp	r3, #255	; 0xff
 8004e0e:	d101      	bne.n	8004e14 <xQueueGenericReceive+0xa0>
 8004e10:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004e14:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e18:	2bff      	cmp	r3, #255	; 0xff
 8004e1a:	d101      	bne.n	8004e20 <xQueueGenericReceive+0xac>
 8004e1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e20:	f7ff fc2e 	bl	8004680 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e24:	a901      	add	r1, sp, #4
 8004e26:	a802      	add	r0, sp, #8
 8004e28:	f000 fc5a 	bl	80056e0 <xTaskCheckForTimeOut>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d152      	bne.n	8004ed6 <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 8004e30:	f7ff fc00 	bl	8004634 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e34:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004e36:	f7ff fc23 	bl	8004680 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e3a:	2d00      	cmp	r5, #0
 8004e3c:	d145      	bne.n	8004eca <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	b933      	cbnz	r3, 8004e50 <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 8004e42:	f7ff fbf7 	bl	8004634 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004e46:	6860      	ldr	r0, [r4, #4]
 8004e48:	f000 fc9e 	bl	8005788 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8004e4c:	f7ff fc18 	bl	8004680 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e50:	9901      	ldr	r1, [sp, #4]
 8004e52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e56:	f000 fbd3 	bl	8005600 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f7ff fd54 	bl	8004908 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e60:	f000 fab8 	bl	80053d4 <xTaskResumeAll>
 8004e64:	b938      	cbnz	r0, 8004e76 <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 8004e66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e6a:	f8ca 3000 	str.w	r3, [sl]
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004e78:	f7ff fbdc 	bl	8004634 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e7c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e7e:	2d00      	cmp	r5, #0
 8004e80:	d0b2      	beq.n	8004de8 <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e82:	4641      	mov	r1, r8
 8004e84:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004e86:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e88:	f7ff fd29 	bl	80048de <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8004e8c:	f1b9 0f00 	cmp.w	r9, #0
 8004e90:	d1a3      	bne.n	8004dda <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004e92:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e94:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004e96:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e98:	b913      	cbnz	r3, 8004ea0 <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004e9a:	f000 fd0f 	bl	80058bc <pvTaskIncrementMutexHeldCount>
 8004e9e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	b163      	cbz	r3, 8004ebe <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ea4:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ea8:	f000 fbc6 	bl	8005638 <xTaskRemoveFromEventList>
 8004eac:	b138      	cbz	r0, 8004ebe <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <xQueueGenericReceive+0x190>)
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004ebe:	f7ff fbdf 	bl	8004680 <vPortExitCritical>
				return pdPASS;
 8004ec2:	2001      	movs	r0, #1
}
 8004ec4:	b004      	add	sp, #16
 8004ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7ff fd1c 	bl	8004908 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ed0:	f000 fa80 	bl	80053d4 <xTaskResumeAll>
 8004ed4:	e7cf      	b.n	8004e76 <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f7ff fd16 	bl	8004908 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004edc:	f000 fa7a 	bl	80053d4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004ee0:	f7ff fba8 	bl	8004634 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ee4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004ee6:	f7ff fbcb 	bl	8004680 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eea:	2d00      	cmp	r5, #0
 8004eec:	d1c3      	bne.n	8004e76 <xQueueGenericReceive+0x102>
 8004eee:	e77f      	b.n	8004df0 <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef0:	f000 fc3a 	bl	8005768 <xTaskGetSchedulerState>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	f43f af61 	beq.w	8004dbc <xQueueGenericReceive+0x48>
 8004efa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004efc:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8004efe:	f8df a004 	ldr.w	sl, [pc, #4]	; 8004f04 <xQueueGenericReceive+0x190>
 8004f02:	e7b9      	b.n	8004e78 <xQueueGenericReceive+0x104>
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <xQueueReceiveFromISR>:
{
 8004f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f0c:	4689      	mov	r9, r1
 8004f0e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8004f10:	4605      	mov	r5, r0
 8004f12:	b950      	cbnz	r0, 8004f2a <xQueueReceiveFromISR+0x22>
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	b672      	cpsid	i
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	b662      	cpsie	i
 8004f28:	e7fe      	b.n	8004f28 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f2a:	bb81      	cbnz	r1, 8004f8e <xQueueReceiveFromISR+0x86>
 8004f2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004f2e:	b373      	cbz	r3, 8004f8e <xQueueReceiveFromISR+0x86>
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	b672      	cpsid	i
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	b662      	cpsie	i
 8004f44:	e7fe      	b.n	8004f44 <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f46:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004f4e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f50:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f52:	f7ff fcc4 	bl	80048de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004f56:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004f58:	1c73      	adds	r3, r6, #1
 8004f5a:	d113      	bne.n	8004f84 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f5c:	692b      	ldr	r3, [r5, #16]
 8004f5e:	b90b      	cbnz	r3, 8004f64 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 8004f60:	2001      	movs	r0, #1
 8004f62:	e00b      	b.n	8004f7c <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f64:	f105 0010 	add.w	r0, r5, #16
 8004f68:	f000 fb66 	bl	8005638 <xTaskRemoveFromEventList>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d0f7      	beq.n	8004f60 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 8004f70:	f1b8 0f00 	cmp.w	r8, #0
 8004f74:	d0f4      	beq.n	8004f60 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f76:	2001      	movs	r0, #1
 8004f78:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8004f7c:	f387 8811 	msr	BASEPRI, r7
}
 8004f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f84:	3601      	adds	r6, #1
 8004f86:	b276      	sxtb	r6, r6
 8004f88:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8004f8c:	e7e8      	b.n	8004f60 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f8e:	f7ff fc41 	bl	8004814 <vPortValidateInterruptPriority>
	__asm volatile
 8004f92:	f3ef 8711 	mrs	r7, BASEPRI
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	b672      	cpsid	i
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004faa:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fac:	2c00      	cmp	r4, #0
 8004fae:	d1ca      	bne.n	8004f46 <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	e7e3      	b.n	8004f7c <xQueueReceiveFromISR+0x74>

08004fb4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fb4:	4a06      	ldr	r2, [pc, #24]	; (8004fd0 <prvResetNextTaskUnblockTime+0x1c>)
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <prvResetNextTaskUnblockTime+0x20>)
 8004fbc:	b919      	cbnz	r1, 8004fc6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fbe:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fca:	68d2      	ldr	r2, [r2, #12]
 8004fcc:	6852      	ldr	r2, [r2, #4]
 8004fce:	e7f8      	b.n	8004fc2 <prvResetNextTaskUnblockTime+0xe>
 8004fd0:	20003c7c 	.word	0x20003c7c
 8004fd4:	20003d54 	.word	0x20003d54

08004fd8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fda:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8004fdc:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fde:	4e1b      	ldr	r6, [pc, #108]	; (800504c <prvAddCurrentTaskToDelayedList+0x74>)
{
 8004fe0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8004fe2:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe4:	6830      	ldr	r0, [r6, #0]
 8004fe6:	3004      	adds	r0, #4
 8004fe8:	f7ff fab9 	bl	800455e <uxListRemove>
 8004fec:	4633      	mov	r3, r6
 8004fee:	b940      	cbnz	r0, 8005002 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004ff0:	6831      	ldr	r1, [r6, #0]
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	4e16      	ldr	r6, [pc, #88]	; (8005050 <prvAddCurrentTaskToDelayedList+0x78>)
 8004ff6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004ff8:	6832      	ldr	r2, [r6, #0]
 8004ffa:	4088      	lsls	r0, r1
 8004ffc:	ea22 0200 	bic.w	r2, r2, r0
 8005000:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005002:	1c62      	adds	r2, r4, #1
 8005004:	d107      	bne.n	8005016 <prvAddCurrentTaskToDelayedList+0x3e>
 8005006:	b137      	cbz	r7, 8005016 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	4812      	ldr	r0, [pc, #72]	; (8005054 <prvAddCurrentTaskToDelayedList+0x7c>)
 800500c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800500e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005012:	f7ff ba81 	b.w	8004518 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005016:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005018:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800501a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800501c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800501e:	d907      	bls.n	8005030 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005020:	4a0d      	ldr	r2, [pc, #52]	; (8005058 <prvAddCurrentTaskToDelayedList+0x80>)
 8005022:	6810      	ldr	r0, [r2, #0]
 8005024:	6819      	ldr	r1, [r3, #0]
}
 8005026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800502a:	3104      	adds	r1, #4
 800502c:	f7ff ba80 	b.w	8004530 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005030:	4a0a      	ldr	r2, [pc, #40]	; (800505c <prvAddCurrentTaskToDelayedList+0x84>)
 8005032:	6810      	ldr	r0, [r2, #0]
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	3104      	adds	r1, #4
 8005038:	f7ff fa7a 	bl	8004530 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800503c:	4b08      	ldr	r3, [pc, #32]	; (8005060 <prvAddCurrentTaskToDelayedList+0x88>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4294      	cmp	r4, r2
 8005042:	d200      	bcs.n	8005046 <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8005044:	601c      	str	r4, [r3, #0]
 8005046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005048:	20003d9c 	.word	0x20003d9c
 800504c:	20003c78 	.word	0x20003c78
 8005050:	20003d24 	.word	0x20003d24
 8005054:	20003d74 	.word	0x20003d74
 8005058:	20003c80 	.word	0x20003c80
 800505c:	20003c7c 	.word	0x20003c7c
 8005060:	20003d54 	.word	0x20003d54

08005064 <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	b672      	cpsid	i
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	b662      	cpsie	i
 8005078:	e7fe      	b.n	8005078 <prvTaskIsTaskSuspended.part.0+0x14>
	...

0800507c <xTaskCreate>:
	{
 800507c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005080:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8005084:	4680      	mov	r8, r0
 8005086:	460f      	mov	r7, r1
 8005088:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508a:	4650      	mov	r0, sl
	{
 800508c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508e:	f7ff f967 	bl	8004360 <pvPortMalloc>
			if( pxStack != NULL )
 8005092:	4605      	mov	r5, r0
 8005094:	2800      	cmp	r0, #0
 8005096:	f000 8096 	beq.w	80051c6 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800509a:	2054      	movs	r0, #84	; 0x54
 800509c:	f7ff f960 	bl	8004360 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80050a0:	4604      	mov	r4, r0
 80050a2:	2800      	cmp	r0, #0
 80050a4:	f000 808c 	beq.w	80051c0 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050a8:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80050ac:	6305      	str	r5, [r0, #48]	; 0x30
 80050ae:	1e7b      	subs	r3, r7, #1
 80050b0:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050b4:	4455      	add	r5, sl
 80050b6:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050b8:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050bc:	7859      	ldrb	r1, [r3, #1]
 80050be:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80050c2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80050c6:	b109      	cbz	r1, 80050cc <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050c8:	42bb      	cmp	r3, r7
 80050ca:	d1f7      	bne.n	80050bc <xTaskCreate+0x40>
 80050cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050ce:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050d2:	1d27      	adds	r7, r4, #4
 80050d4:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050d6:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050da:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 80050dc:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 80050e0:	bf28      	it	cs
 80050e2:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80050e4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80050e6:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050ec:	f7ff fa11 	bl	8004512 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050f0:	f104 0018 	add.w	r0, r4, #24
 80050f4:	f7ff fa0d 	bl	8004512 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80050f8:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050fc:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050fe:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005100:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005102:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005104:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005106:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005108:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800510c:	f7ff fa6e 	bl	80045ec <pxPortInitialiseStack>
 8005110:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8005112:	b106      	cbz	r6, 8005116 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005114:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8005116:	f7ff fa8d 	bl	8004634 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800511a:	4b32      	ldr	r3, [pc, #200]	; (80051e4 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 800511c:	4e32      	ldr	r6, [pc, #200]	; (80051e8 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8005214 <xTaskCreate+0x198>
 8005124:	3201      	adds	r2, #1
 8005126:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005128:	6835      	ldr	r5, [r6, #0]
 800512a:	2d00      	cmp	r5, #0
 800512c:	d14e      	bne.n	80051cc <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800512e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d11d      	bne.n	8005172 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005136:	eb08 0005 	add.w	r0, r8, r5
 800513a:	3514      	adds	r5, #20
 800513c:	f7ff f9de 	bl	80044fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005140:	2d8c      	cmp	r5, #140	; 0x8c
 8005142:	d1f8      	bne.n	8005136 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8005144:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8005218 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8005148:	4d28      	ldr	r5, [pc, #160]	; (80051ec <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800514a:	4648      	mov	r0, r9
 800514c:	f7ff f9d6 	bl	80044fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005150:	4628      	mov	r0, r5
 8005152:	f7ff f9d3 	bl	80044fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005156:	4826      	ldr	r0, [pc, #152]	; (80051f0 <xTaskCreate+0x174>)
 8005158:	f7ff f9d0 	bl	80044fc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800515c:	4825      	ldr	r0, [pc, #148]	; (80051f4 <xTaskCreate+0x178>)
 800515e:	f7ff f9cd 	bl	80044fc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005162:	4825      	ldr	r0, [pc, #148]	; (80051f8 <xTaskCreate+0x17c>)
 8005164:	f7ff f9ca 	bl	80044fc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005168:	4b24      	ldr	r3, [pc, #144]	; (80051fc <xTaskCreate+0x180>)
 800516a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <xTaskCreate+0x184>)
 8005170:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8005172:	4a24      	ldr	r2, [pc, #144]	; (8005204 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8005174:	2501      	movs	r5, #1
 8005176:	4924      	ldr	r1, [pc, #144]	; (8005208 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8005178:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800517a:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800517c:	3301      	adds	r3, #1
 800517e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005180:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005182:	fa05 f302 	lsl.w	r3, r5, r2
 8005186:	4303      	orrs	r3, r0
 8005188:	2014      	movs	r0, #20
 800518a:	600b      	str	r3, [r1, #0]
 800518c:	4639      	mov	r1, r7
 800518e:	fb00 8002 	mla	r0, r0, r2, r8
 8005192:	f7ff f9c1 	bl	8004518 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005196:	f7ff fa73 	bl	8004680 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800519a:	4b1c      	ldr	r3, [pc, #112]	; (800520c <xTaskCreate+0x190>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	b163      	cbz	r3, 80051ba <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d207      	bcs.n	80051ba <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80051aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ae:	4b18      	ldr	r3, [pc, #96]	; (8005210 <xTaskCreate+0x194>)
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
	}
 80051ba:	4628      	mov	r0, r5
 80051bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80051c0:	4628      	mov	r0, r5
 80051c2:	f7ff f95f 	bl	8004484 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051c6:	f04f 35ff 	mov.w	r5, #4294967295
 80051ca:	e7f6      	b.n	80051ba <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <xTaskCreate+0x190>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ce      	bne.n	8005172 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051d4:	6833      	ldr	r3, [r6, #0]
 80051d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051da:	429a      	cmp	r2, r3
 80051dc:	d8c9      	bhi.n	8005172 <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 80051de:	6034      	str	r4, [r6, #0]
 80051e0:	e7c7      	b.n	8005172 <xTaskCreate+0xf6>
 80051e2:	bf00      	nop
 80051e4:	20003d10 	.word	0x20003d10
 80051e8:	20003c78 	.word	0x20003c78
 80051ec:	20003d3c 	.word	0x20003d3c
 80051f0:	20003d5c 	.word	0x20003d5c
 80051f4:	20003d88 	.word	0x20003d88
 80051f8:	20003d74 	.word	0x20003d74
 80051fc:	20003c7c 	.word	0x20003c7c
 8005200:	20003c80 	.word	0x20003c80
 8005204:	20003d20 	.word	0x20003d20
 8005208:	20003d24 	.word	0x20003d24
 800520c:	20003d70 	.word	0x20003d70
 8005210:	e000ed04 	.word	0xe000ed04
 8005214:	20003c84 	.word	0x20003c84
 8005218:	20003d28 	.word	0x20003d28

0800521c <vTaskStartScheduler>:
{
 800521c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800521e:	4b19      	ldr	r3, [pc, #100]	; (8005284 <vTaskStartScheduler+0x68>)
 8005220:	2400      	movs	r4, #0
 8005222:	2280      	movs	r2, #128	; 0x80
 8005224:	4918      	ldr	r1, [pc, #96]	; (8005288 <vTaskStartScheduler+0x6c>)
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	4623      	mov	r3, r4
 800522a:	9400      	str	r4, [sp, #0]
 800522c:	4817      	ldr	r0, [pc, #92]	; (800528c <vTaskStartScheduler+0x70>)
 800522e:	f7ff ff25 	bl	800507c <xTaskCreate>
	if( xReturn == pdPASS )
 8005232:	2801      	cmp	r0, #1
 8005234:	d116      	bne.n	8005264 <vTaskStartScheduler+0x48>
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	b672      	cpsid	i
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800524a:	f04f 32ff 	mov.w	r2, #4294967295
 800524e:	4b10      	ldr	r3, [pc, #64]	; (8005290 <vTaskStartScheduler+0x74>)
 8005250:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005252:	4b10      	ldr	r3, [pc, #64]	; (8005294 <vTaskStartScheduler+0x78>)
 8005254:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <vTaskStartScheduler+0x7c>)
 8005258:	601c      	str	r4, [r3, #0]
}
 800525a:	b002      	add	sp, #8
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005260:	f7ff ba84 	b.w	800476c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005264:	3001      	adds	r0, #1
 8005266:	d10a      	bne.n	800527e <vTaskStartScheduler+0x62>
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	b672      	cpsid	i
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	b662      	cpsie	i
 800527c:	e7fe      	b.n	800527c <vTaskStartScheduler+0x60>
}
 800527e:	b002      	add	sp, #8
 8005280:	bd10      	pop	{r4, pc}
 8005282:	bf00      	nop
 8005284:	20003d50 	.word	0x20003d50
 8005288:	08005b4b 	.word	0x08005b4b
 800528c:	08005515 	.word	0x08005515
 8005290:	20003d54 	.word	0x20003d54
 8005294:	20003d70 	.word	0x20003d70
 8005298:	20003d9c 	.word	0x20003d9c

0800529c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800529c:	4a02      	ldr	r2, [pc, #8]	; (80052a8 <vTaskSuspendAll+0xc>)
 800529e:	6813      	ldr	r3, [r2, #0]
 80052a0:	3301      	adds	r3, #1
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	20003d1c 	.word	0x20003d1c

080052ac <xTaskIncrementTick>:
{
 80052ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b0:	4b3d      	ldr	r3, [pc, #244]	; (80053a8 <xTaskIncrementTick+0xfc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d155      	bne.n	8005364 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 80052b8:	4b3c      	ldr	r3, [pc, #240]	; (80053ac <xTaskIncrementTick+0x100>)
 80052ba:	681c      	ldr	r4, [r3, #0]
 80052bc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80052be:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80052c0:	b9cc      	cbnz	r4, 80052f6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80052c2:	4b3b      	ldr	r3, [pc, #236]	; (80053b0 <xTaskIncrementTick+0x104>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	b152      	cbz	r2, 80052e0 <xTaskIncrementTick+0x34>
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	b672      	cpsid	i
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	b662      	cpsie	i
 80052de:	e7fe      	b.n	80052de <xTaskIncrementTick+0x32>
 80052e0:	4a34      	ldr	r2, [pc, #208]	; (80053b4 <xTaskIncrementTick+0x108>)
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	6810      	ldr	r0, [r2, #0]
 80052e6:	6018      	str	r0, [r3, #0]
 80052e8:	6011      	str	r1, [r2, #0]
 80052ea:	4a33      	ldr	r2, [pc, #204]	; (80053b8 <xTaskIncrementTick+0x10c>)
 80052ec:	6813      	ldr	r3, [r2, #0]
 80052ee:	3301      	adds	r3, #1
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	f7ff fe5f 	bl	8004fb4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052f6:	4d31      	ldr	r5, [pc, #196]	; (80053bc <xTaskIncrementTick+0x110>)
 80052f8:	f04f 0b00 	mov.w	fp, #0
 80052fc:	4f30      	ldr	r7, [pc, #192]	; (80053c0 <xTaskIncrementTick+0x114>)
 80052fe:	682b      	ldr	r3, [r5, #0]
 8005300:	429c      	cmp	r4, r3
 8005302:	d33e      	bcc.n	8005382 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005304:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80053b0 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8005308:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80053d0 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800530c:	f8d8 2000 	ldr.w	r2, [r8]
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	bb72      	cbnz	r2, 8005372 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005314:	f04f 32ff 	mov.w	r2, #4294967295
 8005318:	602a      	str	r2, [r5, #0]
					break;
 800531a:	e032      	b.n	8005382 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800531c:	f106 0a04 	add.w	sl, r6, #4
 8005320:	4650      	mov	r0, sl
 8005322:	f7ff f91c 	bl	800455e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005326:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8005328:	b119      	cbz	r1, 8005332 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800532a:	f106 0018 	add.w	r0, r6, #24
 800532e:	f7ff f916 	bl	800455e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005332:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8005334:	2201      	movs	r2, #1
 8005336:	f8d9 3000 	ldr.w	r3, [r9]
 800533a:	f04f 0e14 	mov.w	lr, #20
 800533e:	fa02 f100 	lsl.w	r1, r2, r0
 8005342:	4319      	orrs	r1, r3
 8005344:	4b1f      	ldr	r3, [pc, #124]	; (80053c4 <xTaskIncrementTick+0x118>)
 8005346:	f8c9 1000 	str.w	r1, [r9]
 800534a:	4651      	mov	r1, sl
 800534c:	fb0e 3000 	mla	r0, lr, r0, r3
 8005350:	f7ff f8e2 	bl	8004518 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005354:	6838      	ldr	r0, [r7, #0]
 8005356:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8005358:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800535a:	4291      	cmp	r1, r2
 800535c:	bf28      	it	cs
 800535e:	f04f 0b01 	movcs.w	fp, #1
 8005362:	e7d3      	b.n	800530c <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8005364:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8005366:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800536a:	6813      	ldr	r3, [r2, #0]
 800536c:	3301      	adds	r3, #1
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	e011      	b.n	8005396 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005372:	f8d8 2000 	ldr.w	r2, [r8]
 8005376:	68d2      	ldr	r2, [r2, #12]
 8005378:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800537a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800537c:	428c      	cmp	r4, r1
 800537e:	d2cd      	bcs.n	800531c <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 8005380:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <xTaskIncrementTick+0x118>)
 8005386:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005388:	2214      	movs	r2, #20
 800538a:	434a      	muls	r2, r1
 800538c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800538e:	2a02      	cmp	r2, #2
 8005390:	bf28      	it	cs
 8005392:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8005396:	4a0d      	ldr	r2, [pc, #52]	; (80053cc <xTaskIncrementTick+0x120>)
 8005398:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800539a:	2a00      	cmp	r2, #0
 800539c:	bf18      	it	ne
 800539e:	f04f 0b01 	movne.w	fp, #1
}
 80053a2:	4658      	mov	r0, fp
 80053a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a8:	20003d1c 	.word	0x20003d1c
 80053ac:	20003d9c 	.word	0x20003d9c
 80053b0:	20003c7c 	.word	0x20003c7c
 80053b4:	20003c80 	.word	0x20003c80
 80053b8:	20003d58 	.word	0x20003d58
 80053bc:	20003d54 	.word	0x20003d54
 80053c0:	20003c78 	.word	0x20003c78
 80053c4:	20003c84 	.word	0x20003c84
 80053c8:	20003d18 	.word	0x20003d18
 80053cc:	20003da0 	.word	0x20003da0
 80053d0:	20003d24 	.word	0x20003d24

080053d4 <xTaskResumeAll>:
{
 80053d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80053d8:	4c32      	ldr	r4, [pc, #200]	; (80054a4 <xTaskResumeAll+0xd0>)
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	b953      	cbnz	r3, 80053f4 <xTaskResumeAll+0x20>
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	b672      	cpsid	i
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	b662      	cpsie	i
 80053f2:	e7fe      	b.n	80053f2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80053f4:	f7ff f91e 	bl	8004634 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053fe:	6824      	ldr	r4, [r4, #0]
 8005400:	b12c      	cbz	r4, 800540e <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8005402:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005404:	f7ff f93c 	bl	8004680 <vPortExitCritical>
}
 8005408:	4620      	mov	r0, r4
 800540a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800540e:	4b26      	ldr	r3, [pc, #152]	; (80054a8 <xTaskResumeAll+0xd4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f5      	beq.n	8005402 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005416:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80054c0 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 800541a:	4f24      	ldr	r7, [pc, #144]	; (80054ac <xTaskResumeAll+0xd8>)
 800541c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80054c4 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005420:	f8d9 3000 	ldr.w	r3, [r9]
 8005424:	b9e3      	cbnz	r3, 8005460 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8005426:	b10c      	cbz	r4, 800542c <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8005428:	f7ff fdc4 	bl	8004fb4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800542c:	4d20      	ldr	r5, [pc, #128]	; (80054b0 <xTaskResumeAll+0xdc>)
 800542e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005430:	b144      	cbz	r4, 8005444 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8005432:	4e20      	ldr	r6, [pc, #128]	; (80054b4 <xTaskResumeAll+0xe0>)
 8005434:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005436:	f7ff ff39 	bl	80052ac <xTaskIncrementTick>
 800543a:	b100      	cbz	r0, 800543e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 800543c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800543e:	3c01      	subs	r4, #1
 8005440:	d1f9      	bne.n	8005436 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8005442:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8005444:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <xTaskResumeAll+0xe0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0da      	beq.n	8005402 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800544c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005450:	4b19      	ldr	r3, [pc, #100]	; (80054b8 <xTaskResumeAll+0xe4>)
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800545c:	2401      	movs	r4, #1
 800545e:	e7d1      	b.n	8005404 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005460:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8005464:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005466:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005468:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800546a:	f104 0018 	add.w	r0, r4, #24
 800546e:	f7ff f876 	bl	800455e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005472:	4630      	mov	r0, r6
 8005474:	f7ff f873 	bl	800455e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005478:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	2014      	movs	r0, #20
 800547e:	fa05 f302 	lsl.w	r3, r5, r2
 8005482:	fb00 8002 	mla	r0, r0, r2, r8
 8005486:	430b      	orrs	r3, r1
 8005488:	4631      	mov	r1, r6
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	f7ff f844 	bl	8004518 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <xTaskResumeAll+0xe8>)
 8005492:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	429a      	cmp	r2, r3
 800549a:	d3c1      	bcc.n	8005420 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <xTaskResumeAll+0xe0>)
 800549e:	601d      	str	r5, [r3, #0]
 80054a0:	e7be      	b.n	8005420 <xTaskResumeAll+0x4c>
 80054a2:	bf00      	nop
 80054a4:	20003d1c 	.word	0x20003d1c
 80054a8:	20003d10 	.word	0x20003d10
 80054ac:	20003d24 	.word	0x20003d24
 80054b0:	20003d18 	.word	0x20003d18
 80054b4:	20003da0 	.word	0x20003da0
 80054b8:	e000ed04 	.word	0xe000ed04
 80054bc:	20003c78 	.word	0x20003c78
 80054c0:	20003d5c 	.word	0x20003d5c
 80054c4:	20003c84 	.word	0x20003c84

080054c8 <vTaskDelay>:
	{
 80054c8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054ca:	b940      	cbnz	r0, 80054de <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <vTaskDelay+0x44>)
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <vTaskDelay+0x48>)
 80054e0:	6819      	ldr	r1, [r3, #0]
 80054e2:	b151      	cbz	r1, 80054fa <vTaskDelay+0x32>
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	b672      	cpsid	i
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	b662      	cpsie	i
 80054f8:	e7fe      	b.n	80054f8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80054fa:	f7ff fecf 	bl	800529c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054fe:	f7ff fd6b 	bl	8004fd8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005502:	f7ff ff67 	bl	80053d4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005506:	2800      	cmp	r0, #0
 8005508:	d0e0      	beq.n	80054cc <vTaskDelay+0x4>
 800550a:	bd08      	pop	{r3, pc}
 800550c:	e000ed04 	.word	0xe000ed04
 8005510:	20003d1c 	.word	0x20003d1c

08005514 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005514:	4e17      	ldr	r6, [pc, #92]	; (8005574 <prvIdleTask+0x60>)
{
 8005516:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005518:	4c17      	ldr	r4, [pc, #92]	; (8005578 <prvIdleTask+0x64>)
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	b963      	cbnz	r3, 8005538 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800551e:	4b17      	ldr	r3, [pc, #92]	; (800557c <prvIdleTask+0x68>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d9f8      	bls.n	8005518 <prvIdleTask+0x4>
				taskYIELD();
 8005526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <prvIdleTask+0x6c>)
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	e7ef      	b.n	8005518 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8005538:	f7ff feb0 	bl	800529c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800553c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800553e:	f7ff ff49 	bl	80053d4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8005542:	2d00      	cmp	r5, #0
 8005544:	d0e9      	beq.n	800551a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8005546:	f7ff f875 	bl	8004634 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800554a:	68f3      	ldr	r3, [r6, #12]
 800554c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800554e:	1d28      	adds	r0, r5, #4
 8005550:	f7ff f805 	bl	800455e <uxListRemove>
					--uxCurrentNumberOfTasks;
 8005554:	4a0b      	ldr	r2, [pc, #44]	; (8005584 <prvIdleTask+0x70>)
 8005556:	6813      	ldr	r3, [r2, #0]
 8005558:	3b01      	subs	r3, #1
 800555a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	3b01      	subs	r3, #1
 8005560:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8005562:	f7ff f88d 	bl	8004680 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8005566:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005568:	f7fe ff8c 	bl	8004484 <vPortFree>
			vPortFree( pxTCB );
 800556c:	4628      	mov	r0, r5
 800556e:	f7fe ff89 	bl	8004484 <vPortFree>
 8005572:	e7d2      	b.n	800551a <prvIdleTask+0x6>
 8005574:	20003d88 	.word	0x20003d88
 8005578:	20003d14 	.word	0x20003d14
 800557c:	20003c84 	.word	0x20003c84
 8005580:	e000ed04 	.word	0xe000ed04
 8005584:	20003d10 	.word	0x20003d10

08005588 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005588:	4b18      	ldr	r3, [pc, #96]	; (80055ec <vTaskSwitchContext+0x64>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <vTaskSwitchContext+0x68>)
{
 800558e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005590:	b112      	cbz	r2, 8005598 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8005592:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8005598:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800559a:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <vTaskSwitchContext+0x6c>)
 800559c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800559e:	fab3 f383 	clz	r3, r3
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2214      	movs	r2, #20
 80055a6:	4914      	ldr	r1, [pc, #80]	; (80055f8 <vTaskSwitchContext+0x70>)
 80055a8:	f1c3 031f 	rsb	r3, r3, #31
 80055ac:	435a      	muls	r2, r3
 80055ae:	588c      	ldr	r4, [r1, r2]
 80055b0:	1888      	adds	r0, r1, r2
 80055b2:	b954      	cbnz	r4, 80055ca <vTaskSwitchContext+0x42>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	b672      	cpsid	i
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	b662      	cpsie	i
 80055c8:	e7fe      	b.n	80055c8 <vTaskSwitchContext+0x40>
 80055ca:	6844      	ldr	r4, [r0, #4]
 80055cc:	3208      	adds	r2, #8
 80055ce:	6864      	ldr	r4, [r4, #4]
 80055d0:	440a      	add	r2, r1
 80055d2:	4294      	cmp	r4, r2
 80055d4:	6044      	str	r4, [r0, #4]
 80055d6:	bf04      	itt	eq
 80055d8:	6862      	ldreq	r2, [r4, #4]
 80055da:	6042      	streq	r2, [r0, #4]
 80055dc:	2214      	movs	r2, #20
 80055de:	fb02 1303 	mla	r3, r2, r3, r1
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <vTaskSwitchContext+0x74>)
 80055e8:	e7d4      	b.n	8005594 <vTaskSwitchContext+0xc>
 80055ea:	bf00      	nop
 80055ec:	20003d1c 	.word	0x20003d1c
 80055f0:	20003da0 	.word	0x20003da0
 80055f4:	20003d24 	.word	0x20003d24
 80055f8:	20003c84 	.word	0x20003c84
 80055fc:	20003c78 	.word	0x20003c78

08005600 <vTaskPlaceOnEventList>:
{
 8005600:	b510      	push	{r4, lr}
 8005602:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005604:	b950      	cbnz	r0, 800561c <vTaskPlaceOnEventList+0x1c>
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	b672      	cpsid	i
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	b662      	cpsie	i
 800561a:	e7fe      	b.n	800561a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <vTaskPlaceOnEventList+0x34>)
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	3118      	adds	r1, #24
 8005622:	f7fe ff85 	bl	8004530 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005626:	4620      	mov	r0, r4
 8005628:	2101      	movs	r1, #1
}
 800562a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800562e:	f7ff bcd3 	b.w	8004fd8 <prvAddCurrentTaskToDelayedList>
 8005632:	bf00      	nop
 8005634:	20003c78 	.word	0x20003c78

08005638 <xTaskRemoveFromEventList>:
{
 8005638:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800563a:	68c3      	ldr	r3, [r0, #12]
 800563c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800563e:	b954      	cbnz	r4, 8005656 <xTaskRemoveFromEventList+0x1e>
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	b672      	cpsid	i
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	b662      	cpsie	i
 8005654:	e7fe      	b.n	8005654 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005656:	f104 0518 	add.w	r5, r4, #24
 800565a:	4628      	mov	r0, r5
 800565c:	f7fe ff7f 	bl	800455e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <xTaskRemoveFromEventList+0x70>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	b9db      	cbnz	r3, 800569e <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005666:	1d25      	adds	r5, r4, #4
 8005668:	4628      	mov	r0, r5
 800566a:	f7fe ff78 	bl	800455e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800566e:	490f      	ldr	r1, [pc, #60]	; (80056ac <xTaskRemoveFromEventList+0x74>)
 8005670:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005672:	2301      	movs	r3, #1
 8005674:	6808      	ldr	r0, [r1, #0]
 8005676:	4093      	lsls	r3, r2
 8005678:	4303      	orrs	r3, r0
 800567a:	2014      	movs	r0, #20
 800567c:	600b      	str	r3, [r1, #0]
 800567e:	4629      	mov	r1, r5
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <xTaskRemoveFromEventList+0x78>)
 8005682:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005686:	f7fe ff47 	bl	8004518 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800568a:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <xTaskRemoveFromEventList+0x7c>)
 800568c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	429a      	cmp	r2, r3
 8005694:	d906      	bls.n	80056a4 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8005696:	2001      	movs	r0, #1
 8005698:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <xTaskRemoveFromEventList+0x80>)
 800569a:	6018      	str	r0, [r3, #0]
 800569c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800569e:	4629      	mov	r1, r5
 80056a0:	4806      	ldr	r0, [pc, #24]	; (80056bc <xTaskRemoveFromEventList+0x84>)
 80056a2:	e7f0      	b.n	8005686 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 80056a4:	2000      	movs	r0, #0
}
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	20003d1c 	.word	0x20003d1c
 80056ac:	20003d24 	.word	0x20003d24
 80056b0:	20003c84 	.word	0x20003c84
 80056b4:	20003c78 	.word	0x20003c78
 80056b8:	20003da0 	.word	0x20003da0
 80056bc:	20003d5c 	.word	0x20003d5c

080056c0 <vTaskSetTimeOutState>:
{
 80056c0:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 80056c2:	b908      	cbnz	r0, 80056c8 <vTaskSetTimeOutState+0x8>
 80056c4:	f7ff fcce 	bl	8005064 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056c8:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <vTaskSetTimeOutState+0x18>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056ce:	4b03      	ldr	r3, [pc, #12]	; (80056dc <vTaskSetTimeOutState+0x1c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6043      	str	r3, [r0, #4]
 80056d4:	bd08      	pop	{r3, pc}
 80056d6:	bf00      	nop
 80056d8:	20003d58 	.word	0x20003d58
 80056dc:	20003d9c 	.word	0x20003d9c

080056e0 <xTaskCheckForTimeOut>:
{
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80056e4:	4604      	mov	r4, r0
 80056e6:	b950      	cbnz	r0, 80056fe <xTaskCheckForTimeOut+0x1e>
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	b672      	cpsid	i
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	b662      	cpsie	i
 80056fc:	e7fe      	b.n	80056fc <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80056fe:	b951      	cbnz	r1, 8005716 <xTaskCheckForTimeOut+0x36>
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	b672      	cpsid	i
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	b662      	cpsie	i
 8005714:	e7fe      	b.n	8005714 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8005716:	f7fe ff8d 	bl	8004634 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800571a:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <xTaskCheckForTimeOut+0x74>)
 800571c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800571e:	682b      	ldr	r3, [r5, #0]
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	d010      	beq.n	8005746 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005724:	4a0c      	ldr	r2, [pc, #48]	; (8005758 <xTaskCheckForTimeOut+0x78>)
 8005726:	6820      	ldr	r0, [r4, #0]
 8005728:	6812      	ldr	r2, [r2, #0]
 800572a:	4290      	cmp	r0, r2
 800572c:	6862      	ldr	r2, [r4, #4]
 800572e:	d001      	beq.n	8005734 <xTaskCheckForTimeOut+0x54>
 8005730:	4291      	cmp	r1, r2
 8005732:	d20d      	bcs.n	8005750 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005734:	1a88      	subs	r0, r1, r2
 8005736:	4283      	cmp	r3, r0
 8005738:	d90a      	bls.n	8005750 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800573a:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 800573c:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800573e:	4413      	add	r3, r2
 8005740:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8005742:	f7ff ffbd 	bl	80056c0 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8005746:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005748:	f7fe ff9a 	bl	8004680 <vPortExitCritical>
}
 800574c:	4620      	mov	r0, r4
 800574e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8005750:	2401      	movs	r4, #1
 8005752:	e7f9      	b.n	8005748 <xTaskCheckForTimeOut+0x68>
 8005754:	20003d9c 	.word	0x20003d9c
 8005758:	20003d58 	.word	0x20003d58

0800575c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800575c:	2201      	movs	r2, #1
 800575e:	4b01      	ldr	r3, [pc, #4]	; (8005764 <vTaskMissedYield+0x8>)
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	4770      	bx	lr
 8005764:	20003da0 	.word	0x20003da0

08005768 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <xTaskGetSchedulerState+0x18>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	b133      	cbz	r3, 800577c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <xTaskGetSchedulerState+0x1c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8005774:	bf0c      	ite	eq
 8005776:	2002      	moveq	r0, #2
 8005778:	2000      	movne	r0, #0
 800577a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800577c:	2001      	movs	r0, #1
	}
 800577e:	4770      	bx	lr
 8005780:	20003d70 	.word	0x20003d70
 8005784:	20003d1c 	.word	0x20003d1c

08005788 <vTaskPriorityInherit>:
	{
 8005788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800578c:	4604      	mov	r4, r0
 800578e:	2800      	cmp	r0, #0
 8005790:	d038      	beq.n	8005804 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005792:	4d1d      	ldr	r5, [pc, #116]	; (8005808 <vTaskPriorityInherit+0x80>)
 8005794:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005796:	682a      	ldr	r2, [r5, #0]
 8005798:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800579a:	4293      	cmp	r3, r2
 800579c:	d232      	bcs.n	8005804 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800579e:	6982      	ldr	r2, [r0, #24]
 80057a0:	2a00      	cmp	r2, #0
 80057a2:	db04      	blt.n	80057ae <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a4:	682a      	ldr	r2, [r5, #0]
 80057a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057a8:	f1c2 0207 	rsb	r2, r2, #7
 80057ac:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80057ae:	4e17      	ldr	r6, [pc, #92]	; (800580c <vTaskPriorityInherit+0x84>)
 80057b0:	2714      	movs	r7, #20
 80057b2:	6962      	ldr	r2, [r4, #20]
 80057b4:	fb07 6303 	mla	r3, r7, r3, r6
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d120      	bne.n	80057fe <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057bc:	f104 0804 	add.w	r8, r4, #4
 80057c0:	4640      	mov	r0, r8
 80057c2:	f7fe fecc 	bl	800455e <uxListRemove>
 80057c6:	4a12      	ldr	r2, [pc, #72]	; (8005810 <vTaskPriorityInherit+0x88>)
 80057c8:	b948      	cbnz	r0, 80057de <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80057ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80057cc:	4347      	muls	r7, r0
 80057ce:	59f3      	ldr	r3, [r6, r7]
 80057d0:	b92b      	cbnz	r3, 80057de <vTaskPriorityInherit+0x56>
 80057d2:	2101      	movs	r1, #1
 80057d4:	6813      	ldr	r3, [r2, #0]
 80057d6:	4081      	lsls	r1, r0
 80057d8:	ea23 0301 	bic.w	r3, r3, r1
 80057dc:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057de:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80057e0:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80057e4:	2301      	movs	r3, #1
 80057e6:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057e8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80057ea:	430b      	orrs	r3, r1
 80057ec:	4641      	mov	r1, r8
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	2314      	movs	r3, #20
 80057f2:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80057f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80057fa:	f7fe be8d 	b.w	8004518 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057fe:	682b      	ldr	r3, [r5, #0]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005808:	20003c78 	.word	0x20003c78
 800580c:	20003c84 	.word	0x20003c84
 8005810:	20003d24 	.word	0x20003d24

08005814 <xTaskPriorityDisinherit>:
	{
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005816:	4604      	mov	r4, r0
 8005818:	b908      	cbnz	r0, 800581e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800581a:	2000      	movs	r0, #0
 800581c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800581e:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <xTaskPriorityDisinherit+0x9c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4298      	cmp	r0, r3
 8005824:	d00a      	beq.n	800583c <xTaskPriorityDisinherit+0x28>
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	b672      	cpsid	i
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	b662      	cpsie	i
 800583a:	e7fe      	b.n	800583a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800583c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800583e:	b953      	cbnz	r3, 8005856 <xTaskPriorityDisinherit+0x42>
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	b672      	cpsid	i
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	b662      	cpsie	i
 8005854:	e7fe      	b.n	8005854 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005856:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005858:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800585a:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800585c:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800585e:	4291      	cmp	r1, r2
 8005860:	d0db      	beq.n	800581a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1d9      	bne.n	800581a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005866:	1d05      	adds	r5, r0, #4
 8005868:	4e12      	ldr	r6, [pc, #72]	; (80058b4 <xTaskPriorityDisinherit+0xa0>)
 800586a:	4628      	mov	r0, r5
 800586c:	f7fe fe77 	bl	800455e <uxListRemove>
 8005870:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <xTaskPriorityDisinherit+0xa4>)
 8005872:	b950      	cbnz	r0, 800588a <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005874:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005876:	2114      	movs	r1, #20
 8005878:	4379      	muls	r1, r7
 800587a:	5873      	ldr	r3, [r6, r1]
 800587c:	b92b      	cbnz	r3, 800588a <xTaskPriorityDisinherit+0x76>
 800587e:	2001      	movs	r0, #1
 8005880:	6813      	ldr	r3, [r2, #0]
 8005882:	40b8      	lsls	r0, r7
 8005884:	ea23 0300 	bic.w	r3, r3, r0
 8005888:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800588a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800588c:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005890:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005892:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005894:	2401      	movs	r4, #1
 8005896:	6811      	ldr	r1, [r2, #0]
 8005898:	fa04 f003 	lsl.w	r0, r4, r3
 800589c:	4308      	orrs	r0, r1
 800589e:	4629      	mov	r1, r5
 80058a0:	6010      	str	r0, [r2, #0]
 80058a2:	2014      	movs	r0, #20
 80058a4:	fb00 6003 	mla	r0, r0, r3, r6
 80058a8:	f7fe fe36 	bl	8004518 <vListInsertEnd>
					xReturn = pdTRUE;
 80058ac:	4620      	mov	r0, r4
	}
 80058ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058b0:	20003c78 	.word	0x20003c78
 80058b4:	20003c84 	.word	0x20003c84
 80058b8:	20003d24 	.word	0x20003d24

080058bc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <pvTaskIncrementMutexHeldCount+0x14>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	b11a      	cbz	r2, 80058ca <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80058c6:	3201      	adds	r2, #1
 80058c8:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80058ca:	6818      	ldr	r0, [r3, #0]
	}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20003c78 	.word	0x20003c78

080058d4 <__libc_init_array>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	4e0d      	ldr	r6, [pc, #52]	; (800590c <__libc_init_array+0x38>)
 80058d8:	4c0d      	ldr	r4, [pc, #52]	; (8005910 <__libc_init_array+0x3c>)
 80058da:	1ba4      	subs	r4, r4, r6
 80058dc:	10a4      	asrs	r4, r4, #2
 80058de:	2500      	movs	r5, #0
 80058e0:	42a5      	cmp	r5, r4
 80058e2:	d109      	bne.n	80058f8 <__libc_init_array+0x24>
 80058e4:	4e0b      	ldr	r6, [pc, #44]	; (8005914 <__libc_init_array+0x40>)
 80058e6:	4c0c      	ldr	r4, [pc, #48]	; (8005918 <__libc_init_array+0x44>)
 80058e8:	f000 f82c 	bl	8005944 <_init>
 80058ec:	1ba4      	subs	r4, r4, r6
 80058ee:	10a4      	asrs	r4, r4, #2
 80058f0:	2500      	movs	r5, #0
 80058f2:	42a5      	cmp	r5, r4
 80058f4:	d105      	bne.n	8005902 <__libc_init_array+0x2e>
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058fc:	4798      	blx	r3
 80058fe:	3501      	adds	r5, #1
 8005900:	e7ee      	b.n	80058e0 <__libc_init_array+0xc>
 8005902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005906:	4798      	blx	r3
 8005908:	3501      	adds	r5, #1
 800590a:	e7f2      	b.n	80058f2 <__libc_init_array+0x1e>
 800590c:	08005b50 	.word	0x08005b50
 8005910:	08005b50 	.word	0x08005b50
 8005914:	08005b50 	.word	0x08005b50
 8005918:	08005b54 	.word	0x08005b54

0800591c <memcpy>:
 800591c:	b510      	push	{r4, lr}
 800591e:	1e43      	subs	r3, r0, #1
 8005920:	440a      	add	r2, r1
 8005922:	4291      	cmp	r1, r2
 8005924:	d100      	bne.n	8005928 <memcpy+0xc>
 8005926:	bd10      	pop	{r4, pc}
 8005928:	f811 4b01 	ldrb.w	r4, [r1], #1
 800592c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005930:	e7f7      	b.n	8005922 <memcpy+0x6>

08005932 <memset>:
 8005932:	4402      	add	r2, r0
 8005934:	4603      	mov	r3, r0
 8005936:	4293      	cmp	r3, r2
 8005938:	d100      	bne.n	800593c <memset+0xa>
 800593a:	4770      	bx	lr
 800593c:	f803 1b01 	strb.w	r1, [r3], #1
 8005940:	e7f9      	b.n	8005936 <memset+0x4>
	...

08005944 <_init>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr

08005950 <_fini>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr
