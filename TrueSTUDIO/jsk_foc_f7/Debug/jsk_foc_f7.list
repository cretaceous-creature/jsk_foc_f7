
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007468  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08007668  08007668  00017668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080079c0  080079c0  000179c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080079c8  080079c8  000179c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000000  080079d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004490  20000028  080079f8  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200044b8  080079f8  000244b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_line   00011475  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0003eca7  00000000  00000000  000314cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006b61  00000000  00000000  00070172  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000015f0  00000000  00000000  00076cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004e08  00000000  00000000  000782c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c9e7  00000000  00000000  0007d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008c8b  00000000  00000000  00099ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000a2742  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004dd4  00000000  00000000  000a27c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000028 	.word	0x20000028
 800021c:	00000000 	.word	0x00000000
 8000220:	08007650 	.word	0x08007650

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000002c 	.word	0x2000002c
 800023c:	08007650 	.word	0x08007650

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b97a 	b.w	800054c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	468c      	mov	ip, r1
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	9e08      	ldr	r6, [sp, #32]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d151      	bne.n	8000324 <__udivmoddi4+0xb4>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d96d      	bls.n	8000362 <__udivmoddi4+0xf2>
 8000286:	fab2 fe82 	clz	lr, r2
 800028a:	f1be 0f00 	cmp.w	lr, #0
 800028e:	d00b      	beq.n	80002a8 <__udivmoddi4+0x38>
 8000290:	f1ce 0c20 	rsb	ip, lr, #32
 8000294:	fa01 f50e 	lsl.w	r5, r1, lr
 8000298:	fa20 fc0c 	lsr.w	ip, r0, ip
 800029c:	fa02 f70e 	lsl.w	r7, r2, lr
 80002a0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002a4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ac:	0c25      	lsrs	r5, r4, #16
 80002ae:	fbbc f8fa 	udiv	r8, ip, sl
 80002b2:	fa1f f987 	uxth.w	r9, r7
 80002b6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002be:	fb08 f309 	mul.w	r3, r8, r9
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x6c>
 80002c6:	19ed      	adds	r5, r5, r7
 80002c8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002cc:	f080 8123 	bcs.w	8000516 <__udivmoddi4+0x2a6>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	f240 8120 	bls.w	8000516 <__udivmoddi4+0x2a6>
 80002d6:	f1a8 0802 	sub.w	r8, r8, #2
 80002da:	443d      	add	r5, r7
 80002dc:	1aed      	subs	r5, r5, r3
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002e4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	fb00 f909 	mul.w	r9, r0, r9
 80002f0:	45a1      	cmp	r9, r4
 80002f2:	d909      	bls.n	8000308 <__udivmoddi4+0x98>
 80002f4:	19e4      	adds	r4, r4, r7
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	f080 810a 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 80002fe:	45a1      	cmp	r9, r4
 8000300:	f240 8107 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000304:	3802      	subs	r0, #2
 8000306:	443c      	add	r4, r7
 8000308:	eba4 0409 	sub.w	r4, r4, r9
 800030c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000310:	2100      	movs	r1, #0
 8000312:	2e00      	cmp	r6, #0
 8000314:	d061      	beq.n	80003da <__udivmoddi4+0x16a>
 8000316:	fa24 f40e 	lsr.w	r4, r4, lr
 800031a:	2300      	movs	r3, #0
 800031c:	6034      	str	r4, [r6, #0]
 800031e:	6073      	str	r3, [r6, #4]
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	428b      	cmp	r3, r1
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0xc8>
 8000328:	2e00      	cmp	r6, #0
 800032a:	d054      	beq.n	80003d6 <__udivmoddi4+0x166>
 800032c:	2100      	movs	r1, #0
 800032e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000332:	4608      	mov	r0, r1
 8000334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000338:	fab3 f183 	clz	r1, r3
 800033c:	2900      	cmp	r1, #0
 800033e:	f040 808e 	bne.w	800045e <__udivmoddi4+0x1ee>
 8000342:	42ab      	cmp	r3, r5
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xdc>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80fa 	bhi.w	8000540 <__udivmoddi4+0x2d0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb65 0503 	sbc.w	r5, r5, r3
 8000352:	2001      	movs	r0, #1
 8000354:	46ac      	mov	ip, r5
 8000356:	2e00      	cmp	r6, #0
 8000358:	d03f      	beq.n	80003da <__udivmoddi4+0x16a>
 800035a:	e886 1010 	stmia.w	r6, {r4, ip}
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	b912      	cbnz	r2, 800036a <__udivmoddi4+0xfa>
 8000364:	2701      	movs	r7, #1
 8000366:	fbb7 f7f2 	udiv	r7, r7, r2
 800036a:	fab7 fe87 	clz	lr, r7
 800036e:	f1be 0f00 	cmp.w	lr, #0
 8000372:	d134      	bne.n	80003de <__udivmoddi4+0x16e>
 8000374:	1beb      	subs	r3, r5, r7
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	2101      	movs	r1, #1
 800037e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000382:	0c25      	lsrs	r5, r4, #16
 8000384:	fb02 3318 	mls	r3, r2, r8, r3
 8000388:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038c:	fb0c f308 	mul.w	r3, ip, r8
 8000390:	42ab      	cmp	r3, r5
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x134>
 8000394:	19ed      	adds	r5, r5, r7
 8000396:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x132>
 800039c:	42ab      	cmp	r3, r5
 800039e:	f200 80d1 	bhi.w	8000544 <__udivmoddi4+0x2d4>
 80003a2:	4680      	mov	r8, r0
 80003a4:	1aed      	subs	r5, r5, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ac:	fb02 5510 	mls	r5, r2, r0, r5
 80003b0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003b4:	fb0c fc00 	mul.w	ip, ip, r0
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x15c>
 80003bc:	19e4      	adds	r4, r4, r7
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x15a>
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	f200 80b8 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 040c 	sub.w	r4, r4, ip
 80003d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003d4:	e79d      	b.n	8000312 <__udivmoddi4+0xa2>
 80003d6:	4631      	mov	r1, r6
 80003d8:	4630      	mov	r0, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	f1ce 0420 	rsb	r4, lr, #32
 80003e2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ea:	fa20 f804 	lsr.w	r8, r0, r4
 80003ee:	0c3a      	lsrs	r2, r7, #16
 80003f0:	fa25 f404 	lsr.w	r4, r5, r4
 80003f4:	ea48 0803 	orr.w	r8, r8, r3
 80003f8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003fc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000400:	fb02 4411 	mls	r4, r2, r1, r4
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800040c:	fb01 f30c 	mul.w	r3, r1, ip
 8000410:	42ab      	cmp	r3, r5
 8000412:	fa00 f40e 	lsl.w	r4, r0, lr
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x1bc>
 8000418:	19ed      	adds	r5, r5, r7
 800041a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800041e:	f080 808a 	bcs.w	8000536 <__udivmoddi4+0x2c6>
 8000422:	42ab      	cmp	r3, r5
 8000424:	f240 8087 	bls.w	8000536 <__udivmoddi4+0x2c6>
 8000428:	3902      	subs	r1, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aeb      	subs	r3, r5, r3
 800042e:	fa1f f588 	uxth.w	r5, r8
 8000432:	fbb3 f0f2 	udiv	r0, r3, r2
 8000436:	fb02 3310 	mls	r3, r2, r0, r3
 800043a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043e:	fb00 f30c 	mul.w	r3, r0, ip
 8000442:	42ab      	cmp	r3, r5
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x1e6>
 8000446:	19ed      	adds	r5, r5, r7
 8000448:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044c:	d26f      	bcs.n	800052e <__udivmoddi4+0x2be>
 800044e:	42ab      	cmp	r3, r5
 8000450:	d96d      	bls.n	800052e <__udivmoddi4+0x2be>
 8000452:	3802      	subs	r0, #2
 8000454:	443d      	add	r5, r7
 8000456:	1aeb      	subs	r3, r5, r3
 8000458:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045c:	e78f      	b.n	800037e <__udivmoddi4+0x10e>
 800045e:	f1c1 0720 	rsb	r7, r1, #32
 8000462:	fa22 f807 	lsr.w	r8, r2, r7
 8000466:	408b      	lsls	r3, r1
 8000468:	fa05 f401 	lsl.w	r4, r5, r1
 800046c:	ea48 0303 	orr.w	r3, r8, r3
 8000470:	fa20 fe07 	lsr.w	lr, r0, r7
 8000474:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000478:	40fd      	lsrs	r5, r7
 800047a:	ea4e 0e04 	orr.w	lr, lr, r4
 800047e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000482:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000486:	fb0c 5519 	mls	r5, ip, r9, r5
 800048a:	fa1f f883 	uxth.w	r8, r3
 800048e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000492:	fb09 f408 	mul.w	r4, r9, r8
 8000496:	42ac      	cmp	r4, r5
 8000498:	fa02 f201 	lsl.w	r2, r2, r1
 800049c:	fa00 fa01 	lsl.w	sl, r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x244>
 80004a2:	18ed      	adds	r5, r5, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	d243      	bcs.n	8000532 <__udivmoddi4+0x2c2>
 80004aa:	42ac      	cmp	r4, r5
 80004ac:	d941      	bls.n	8000532 <__udivmoddi4+0x2c2>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	441d      	add	r5, r3
 80004b4:	1b2d      	subs	r5, r5, r4
 80004b6:	fa1f fe8e 	uxth.w	lr, lr
 80004ba:	fbb5 f0fc 	udiv	r0, r5, ip
 80004be:	fb0c 5510 	mls	r5, ip, r0, r5
 80004c2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45a0      	cmp	r8, r4
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x26e>
 80004ce:	18e4      	adds	r4, r4, r3
 80004d0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80004d4:	d229      	bcs.n	800052a <__udivmoddi4+0x2ba>
 80004d6:	45a0      	cmp	r8, r4
 80004d8:	d927      	bls.n	800052a <__udivmoddi4+0x2ba>
 80004da:	3802      	subs	r0, #2
 80004dc:	441c      	add	r4, r3
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba4 0408 	sub.w	r4, r4, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454c      	cmp	r4, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	464d      	mov	r5, r9
 80004f0:	d315      	bcc.n	800051e <__udivmoddi4+0x2ae>
 80004f2:	d012      	beq.n	800051a <__udivmoddi4+0x2aa>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x29c>
 80004f6:	ebba 030e 	subs.w	r3, sl, lr
 80004fa:	eb64 0405 	sbc.w	r4, r4, r5
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40cb      	lsrs	r3, r1
 8000504:	431f      	orrs	r7, r3
 8000506:	40cc      	lsrs	r4, r1
 8000508:	6037      	str	r7, [r6, #0]
 800050a:	6074      	str	r4, [r6, #4]
 800050c:	2100      	movs	r1, #0
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	4618      	mov	r0, r3
 8000514:	e6f8      	b.n	8000308 <__udivmoddi4+0x98>
 8000516:	4690      	mov	r8, r2
 8000518:	e6e0      	b.n	80002dc <__udivmoddi4+0x6c>
 800051a:	45c2      	cmp	sl, r8
 800051c:	d2ea      	bcs.n	80004f4 <__udivmoddi4+0x284>
 800051e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000522:	eb69 0503 	sbc.w	r5, r9, r3
 8000526:	3801      	subs	r0, #1
 8000528:	e7e4      	b.n	80004f4 <__udivmoddi4+0x284>
 800052a:	4628      	mov	r0, r5
 800052c:	e7d7      	b.n	80004de <__udivmoddi4+0x26e>
 800052e:	4640      	mov	r0, r8
 8000530:	e791      	b.n	8000456 <__udivmoddi4+0x1e6>
 8000532:	4681      	mov	r9, r0
 8000534:	e7be      	b.n	80004b4 <__udivmoddi4+0x244>
 8000536:	4601      	mov	r1, r0
 8000538:	e778      	b.n	800042c <__udivmoddi4+0x1bc>
 800053a:	3802      	subs	r0, #2
 800053c:	443c      	add	r4, r7
 800053e:	e745      	b.n	80003cc <__udivmoddi4+0x15c>
 8000540:	4608      	mov	r0, r1
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xe6>
 8000544:	f1a8 0802 	sub.w	r8, r8, #2
 8000548:	443d      	add	r5, r7
 800054a:	e72b      	b.n	80003a4 <__udivmoddi4+0x134>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000588 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000554:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000556:	e003      	b.n	8000560 <LoopCopyDataInit>

08000558 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800055a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800055c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800055e:	3104      	adds	r1, #4

08000560 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000564:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000566:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000568:	d3f6      	bcc.n	8000558 <CopyDataInit>
  ldr  r2, =_sbss
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800056c:	e002      	b.n	8000574 <LoopFillZerobss>

0800056e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800056e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000570:	f842 3b04 	str.w	r3, [r2], #4

08000574 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000576:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000578:	d3f9      	bcc.n	800056e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800057a:	f002 f83b 	bl	80025f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057e:	f006 fa31 	bl	80069e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000582:	f001 fb4b 	bl	8001c1c <main>
  bx  lr    
 8000586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000588:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800058c:	080079d0 	.word	0x080079d0
  ldr  r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000594:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8000598:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 800059c:	200044b8 	.word	0x200044b8

080005a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC_IRQHandler>
 80005a2:	0000      	movs	r0, r0
 80005a4:	0000      	movs	r0, r0
	...

080005a8 <StartcontrolTask>:
 * Start FOC control task...
 * clark -> park -> control -> rev park -> rev clark -> PWM
 *
 */
void StartcontrolTask(void const * argument)
{
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005aa:	ed2d 8b10 	vpush	{d8-d15}
	float integra_Cd = 0;
	float integra_Cq = 0;
	float lastq = 0, lastd = 0;  //incremental control
	float vd_st = 0, vq_st = 0;
 80005ae:	eddf aae4 	vldr	s21, [pc, #912]	; 8000940 <StartcontrolTask+0x398>
{
 80005b2:	b095      	sub	sp, #84	; 0x54
 80005b4:	4ce3      	ldr	r4, [pc, #908]	; (8000944 <StartcontrolTask+0x39c>)
	float vd_st = 0, vq_st = 0;
 80005b6:	eeb0 aa6a 	vmov.f32	s20, s21
 80005ba:	4de3      	ldr	r5, [pc, #908]	; (8000948 <StartcontrolTask+0x3a0>)
	float lastq = 0, lastd = 0;  //incremental control
 80005bc:	eeb0 ba6a 	vmov.f32	s22, s21
 80005c0:	eef0 ba6a 	vmov.f32	s23, s21
				float eer_d = er_d - lastd;
				float eer_q = er_q - lastq;
				lastd = er_d; lastq = er_q;
				//get the control voltage

				float v_d = shuntdata.Kp * eer_d + shuntdata.Ki * er_d * 1e-1;
 80005c4:	ed9f 9bd0 	vldr	d9, [pc, #832]	; 8000908 <StartcontrolTask+0x360>
			//reverse clarke
			float v_a,v_b,v_c;
			RevClarkeTrans(&v_a,&v_b,&v_c,v_apha,v_beta);

			//mapping the v_a v_b v_c to the real voltage and to the max duty of 2160
			v_a *= 1e-3;  //because of 1 is 1 mv
 80005c8:	ed9f 8bd1 	vldr	d8, [pc, #836]	; 8000910 <StartcontrolTask+0x368>
		if(xQueueReceive(shuntQueueHandle,&shuntdata,2)==pdPASS)
 80005cc:	2300      	movs	r3, #0
 80005ce:	2202      	movs	r2, #2
 80005d0:	a909      	add	r1, sp, #36	; 0x24
 80005d2:	6820      	ldr	r0, [r4, #0]
 80005d4:	f005 fb26 	bl	8005c24 <xQueueGenericReceive>
 80005d8:	2801      	cmp	r0, #1
 80005da:	f040 8187 	bne.w	80008ec <StartcontrolTask+0x344>
			float c_a = ((float)shuntdata.cur_a)/1000;
 80005de:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80005e2:	4603      	mov	r3, r0
			float c_b = ((float)shuntdata.cur_b)/1000;
 80005e4:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80005e8:	2200      	movs	r2, #0
			float c_a = ((float)shuntdata.cur_a)/1000;
 80005ea:	eeb8 dae7 	vcvt.f32.s32	s26, s15
 80005ee:	eddf 7ad7 	vldr	s15, [pc, #860]	; 800094c <StartcontrolTask+0x3a4>
			float c_b = ((float)shuntdata.cur_b)/1000;
 80005f2:	eef8 dac7 	vcvt.f32.s32	s27, s14
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80005f6:	a90e      	add	r1, sp, #56	; 0x38
 80005f8:	6828      	ldr	r0, [r5, #0]
			float c_a = ((float)shuntdata.cur_a)/1000;
 80005fa:	ee2d da27 	vmul.f32	s26, s26, s15
			float c_b = ((float)shuntdata.cur_b)/1000;
 80005fe:	ee6d daa7 	vmul.f32	s27, s27, s15
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 8000602:	f005 fb0f 	bl	8005c24 <xQueueGenericReceive>
 8000606:	2801      	cmp	r0, #1
 8000608:	f040 8177 	bne.w	80008fa <StartcontrolTask+0x352>
			volatile float theta = - 8 * PI * (encdata.recon_counter + CENTERCOUNT
 800060c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
					+ shuntdata.centeroffset*10) / MAXCOUNT;
 8000610:	230a      	movs	r3, #10
 8000612:	f99d 1032 	ldrsb.w	r1, [sp, #50]	; 0x32
	*apha = 1.5 * a;
 8000616:	eeb7 ea08 	vmov.f32	s28, #120	; 0x3fc00000  1.5
			volatile float theta = - 8 * PI * (encdata.recon_counter + CENTERCOUNT
 800061a:	f602 02e8 	addw	r2, r2, #2280	; 0x8e8
					+ shuntdata.centeroffset*10) / MAXCOUNT;
 800061e:	fb13 2301 	smlabb	r3, r3, r1, r2
	*apha = 1.5 * a;
 8000622:	ee2d ea0e 	vmul.f32	s28, s26, s28
					+ shuntdata.centeroffset*10) / MAXCOUNT;
 8000626:	ee07 3a10 	vmov	s14, r3
 800062a:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8000918 <StartcontrolTask+0x370>
 800062e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000632:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000636:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			volatile float theta = - 8 * PI * (encdata.recon_counter + CENTERCOUNT
 800063a:	ed8d 7a05 	vstr	s14, [sp, #20]
			ParkTrans(c_apha,c_beta,theta,&c_d,&c_q);
 800063e:	ed9d 6a05 	vldr	s12, [sp, #20]
	*i_d = apha*cos(theta) + beta*sin(theta);
 8000642:	eeb7 fac6 	vcvt.f64.f32	d15, s12
 8000646:	eeb0 0b4f 	vmov.f64	d0, d15
 800064a:	f006 fa05 	bl	8006a58 <cos>
	*beta = sq3 * b + (sq3 * a)/2;
 800064e:	eeb7 7acd 	vcvt.f64.f32	d7, s26
 8000652:	eeb7 5aed 	vcvt.f64.f32	d5, s27
	*i_d = apha*cos(theta) + beta*sin(theta);
 8000656:	eeb0 cb40 	vmov.f64	d12, d0
 800065a:	eeb0 0b4f 	vmov.f64	d0, d15
	*beta = sq3 * b + (sq3 * a)/2;
 800065e:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8000920 <StartcontrolTask+0x378>
 8000662:	ee27 db06 	vmul.f64	d13, d7, d6
 8000666:	ed9f 7bb0 	vldr	d7, [pc, #704]	; 8000928 <StartcontrolTask+0x380>
 800066a:	eea5 db07 	vfma.f64	d13, d5, d7
	*i_d = apha*cos(theta) + beta*sin(theta);
 800066e:	f006 fa2f 	bl	8006ad0 <sin>
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 8000672:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
			float er_q = shuntdata.target_cur - c_q;
 8000676:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 800067a:	ee05 3a10 	vmov	s10, r3
 800067e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
	*i_d = apha*cos(theta) + beta*sin(theta);
 8000682:	eeb7 4ace 	vcvt.f64.f32	d4, s28
	*i_q = -apha*sin(theta) + beta*cos(theta);
 8000686:	eeb1 ea4e 	vneg.f32	s28, s28
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 800068a:	2b00      	cmp	r3, #0
 800068c:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000690:	bfb8      	it	lt
 8000692:	425b      	neglt	r3, r3
	*i_q = -apha*sin(theta) + beta*cos(theta);
 8000694:	eeb7 eace 	vcvt.f64.f32	d14, s28
	*beta = sq3 * b + (sq3 * a)/2;
 8000698:	eeb7 dbcd 	vcvt.f32.f64	s26, d13
	*i_d = apha*cos(theta) + beta*sin(theta);
 800069c:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 80006a0:	ee2d 6b00 	vmul.f64	d6, d13, d0
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80006a4:	ee2c 7b0d 	vmul.f64	d7, d12, d13
	*i_d = apha*cos(theta) + beta*sin(theta);
 80006a8:	eea4 6b0c 	vfma.f64	d6, d4, d12
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80006ac:	eea0 7b0e 	vfma.f64	d7, d0, d14
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 80006b0:	ed9f 4b9f 	vldr	d4, [pc, #636]	; 8000930 <StartcontrolTask+0x388>
	*i_d = apha*cos(theta) + beta*sin(theta);
 80006b4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 80006b8:	ee06 3a90 	vmov	s13, r3
 80006bc:	ee25 5b04 	vmul.f64	d5, d5, d4
 80006c0:	eeb8 4be6 	vcvt.f64.s32	d4, s13
			float er_d = T_ID - c_d;
 80006c4:	eef1 da46 	vneg.f32	s27, s12
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80006c8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 80006cc:	eeb4 4bc5 	vcmpe.f64	d4, d5
 80006d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d4:	f300 810e 	bgt.w	80008f4 <StartcontrolTask+0x34c>
			float er_q = shuntdata.target_cur - c_q;
 80006d8:	ee07 2a90 	vmov	s15, r2
 80006dc:	eeb8 dae7 	vcvt.f32.s32	s26, s15
 80006e0:	ee3d da47 	vsub.f32	s26, s26, s14
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 80006e4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80006e8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
				float eer_d = er_d - lastd;
 80006ec:	ee3d 7acb 	vsub.f32	s14, s27, s22
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 80006f0:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
				if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 80006f4:	eddf 4a96 	vldr	s9, [pc, #600]	; 8000950 <StartcontrolTask+0x3a8>
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 80006f8:	ee17 2a90 	vmov	r2, s15
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 80006fc:	eefd 7ac6 	vcvt.s32.f32	s15, s12
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 8000700:	fa03 f282 	sxtah	r2, r3, r2
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000704:	ee17 3a90 	vmov	r3, s15
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 8000708:	2a00      	cmp	r2, #0
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 800070a:	fa01 f383 	sxtah	r3, r1, r3
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 800070e:	bfb8      	it	lt
 8000710:	3201      	addlt	r2, #1
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000712:	2b00      	cmp	r3, #0
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 8000714:	ea4f 0262 	mov.w	r2, r2, asr #1
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000718:	bfb8      	it	lt
 800071a:	3301      	addlt	r3, #1
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 800071c:	f8ad 2018 	strh.w	r2, [sp, #24]
				float v_d = shuntdata.Kp * eer_d + shuntdata.Ki * er_d * 1e-1;
 8000720:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000724:	105b      	asrs	r3, r3, #1
				float v_d = shuntdata.Kp * eer_d + shuntdata.Ki * er_d * 1e-1;
 8000726:	ee06 2a90 	vmov	s13, r2
 800072a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 800072e:	f8ad 301a 	strh.w	r3, [sp, #26]
				float v_d = shuntdata.Kp * eer_d + shuntdata.Ki * er_d * 1e-1;
 8000732:	ee06 2a10 	vmov	s12, r2
 8000736:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800073a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800073e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000742:	ee2d 5a86 	vmul.f32	s10, s27, s12
 8000746:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800074a:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 800074e:	eea5 7b09 	vfma.f64	d7, d5, d9
 8000752:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
				if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 8000756:	ee7a 7a07 	vadd.f32	s15, s20, s14
 800075a:	eef4 7a64 	vcmp.f32	s15, s9
 800075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000762:	dd26      	ble.n	80007b2 <StartcontrolTask+0x20a>
 8000764:	ed9f 4a7b 	vldr	s8, [pc, #492]	; 8000954 <StartcontrolTask+0x3ac>
 8000768:	eef4 7a44 	vcmp.f32	s15, s8
 800076c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000770:	d51f      	bpl.n	80007b2 <StartcontrolTask+0x20a>
				float eer_q = er_q - lastq;
 8000772:	ee3d 5a6b 	vsub.f32	s10, s26, s23
				float v_q = shuntdata.Kp * eer_q + shuntdata.Ki * er_q * 1e-1;
 8000776:	ee2d 6a06 	vmul.f32	s12, s26, s12
 800077a:	ee25 5a26 	vmul.f32	s10, s10, s13
 800077e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000782:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8000786:	eea6 5b09 	vfma.f64	d5, d6, d9
 800078a:	eeb7 6bc5 	vcvt.f32.f64	s12, d5
						(vq_st + v_q)<MAXVqd && (vq_st + v_q)>-MAXVqd)
 800078e:	ee7a 7a86 	vadd.f32	s15, s21, s12
 8000792:	eef4 7a64 	vcmp.f32	s15, s9
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	dd0a      	ble.n	80007b2 <StartcontrolTask+0x20a>
 800079c:	eef4 7a44 	vcmp.f32	s15, s8
 80007a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a4:	d505      	bpl.n	80007b2 <StartcontrolTask+0x20a>
					vd_st += v_d + v_d;  //equals to Kp..
 80007a6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80007aa:	eea7 aa27 	vfma.f32	s20, s14, s15
					vq_st += v_q + v_q;
 80007ae:	eee6 aa27 	vfma.f32	s21, s12, s15
			RevParkTrans(&v_apha,&v_beta,theta,vd_st,vq_st);
 80007b2:	ed9d 7a05 	vldr	s14, [sp, #20]
	*apha = v_d*cos(theta) - v_q*sin(theta);
 80007b6:	eeb7 baea 	vcvt.f64.f32	d11, s21
 80007ba:	eeb7 caca 	vcvt.f64.f32	d12, s20
 80007be:	eeb7 fac7 	vcvt.f64.f32	d15, s14
 80007c2:	eeb0 0b4f 	vmov.f64	d0, d15
 80007c6:	f006 f947 	bl	8006a58 <cos>
 80007ca:	eeb0 eb40 	vmov.f64	d14, d0
 80007ce:	eeb0 0b4f 	vmov.f64	d0, d15
 80007d2:	f006 f97d 	bl	8006ad0 <sin>
 80007d6:	ee20 6b4b 	vnmul.f64	d6, d0, d11
	*vb = -apha/3 + beta/sq3;
 80007da:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8000958 <StartcontrolTask+0x3b0>
	*va = 2*apha/3;
 80007de:	eddf 7a5f 	vldr	s15, [pc, #380]	; 800095c <StartcontrolTask+0x3b4>
	*beta = v_d*sin(theta) + v_q*cos(theta);
 80007e2:	ee2e bb0b 	vmul.f64	d11, d14, d11
	if(v_small<-MAXDUTY) // <-2159..
 80007e6:	eddf 3a5e 	vldr	s7, [pc, #376]	; 8000960 <StartcontrolTask+0x3b8>
	*apha = v_d*cos(theta) - v_q*sin(theta);
 80007ea:	eeac 6b0e 	vfma.f64	d6, d12, d14
	*beta = v_d*sin(theta) + v_q*cos(theta);
 80007ee:	eeac bb00 	vfma.f64	d11, d12, d0
	*vb = -apha/3 + beta/sq3;
 80007f2:	ed9f 4b51 	vldr	d4, [pc, #324]	; 8000938 <StartcontrolTask+0x390>
	*apha = v_d*cos(theta) - v_q*sin(theta);
 80007f6:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	*vb = -apha/3 + beta/sq3;
 80007fa:	ee26 7a47 	vnmul.f32	s14, s12, s14
	*beta = v_d*sin(theta) + v_q*cos(theta);
 80007fe:	eeb7 bbcb 	vcvt.f32.f64	s22, d11
	*va = 2*apha/3;
 8000802:	ee26 6a27 	vmul.f32	s12, s12, s15
	*vb = -apha/3 + beta/sq3;
 8000806:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800080a:	eeb7 bacb 	vcvt.f64.f32	d11, s22
			v_a *= 1e-3;  //because of 1 is 1 mv
 800080e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	*vb = -apha/3 + beta/sq3;
 8000812:	eeb0 5b47 	vmov.f64	d5, d7
	*vc = -apha/3 - beta/sq3;
 8000816:	eeab 7b44 	vfms.f64	d7, d11, d4
	*vb = -apha/3 + beta/sq3;
 800081a:	eeab 5b04 	vfma.f64	d5, d11, d4
			v_a *= 1e-3;  //because of 1 is 1 mv
 800081e:	ee26 6b08 	vmul.f64	d6, d6, d8
	*vc = -apha/3 - beta/sq3;
 8000822:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	*vb = -apha/3 + beta/sq3;
 8000826:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
			v_b *= 1e-3;
			v_c *= 1e-3;
 800082a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
			v_a *= 1e-3;  //because of 1 is 1 mv
 800082e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			v_b *= 1e-3;
 8000832:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
			v_c *= 1e-3;
 8000836:	ee27 7b08 	vmul.f64	d7, d7, d8
			v_b *= 1e-3;
 800083a:	ee25 5b08 	vmul.f64	d5, d5, d8
			v_c *= 1e-3;
 800083e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			v_b *= 1e-3;
 8000842:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
	v_big = v_big>*v_c?v_big:*v_c;
 8000846:	fec5 7a07 	vmaxnm.f32	s15, s10, s14
 800084a:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
	*v_c -= v_big;
 800084e:	ee37 7a67 	vsub.f32	s14, s14, s15
	*v_a -= v_big;
 8000852:	ee36 6a67 	vsub.f32	s12, s12, s15
	*v_b -= v_big;
 8000856:	ee35 5a67 	vsub.f32	s10, s10, s15
	v_small = *v_a<*v_b?*v_a:*v_b;
 800085a:	fec6 7a45 	vminnm.f32	s15, s12, s10
	v_small = v_small<*v_c?v_small:*v_c;
 800085e:	fec7 7a67 	vminnm.f32	s15, s14, s15
	if(v_small<-MAXDUTY) // <-2159..
 8000862:	eef4 7ae3 	vcmpe.f32	s15, s7
 8000866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086a:	d507      	bpl.n	800087c <StartcontrolTask+0x2d4>
		*v_a *= -(MAXDUTY)/v_small;
 800086c:	eec3 6aa7 	vdiv.f32	s13, s7, s15
 8000870:	ee26 6a26 	vmul.f32	s12, s12, s13
		*v_b *= -(MAXDUTY)/v_small;
 8000874:	ee25 5a26 	vmul.f32	s10, s10, s13
		*v_c *= -(MAXDUTY)/v_small;  //then the data is proportional under maxduty
 8000878:	ee27 7a26 	vmul.f32	s14, s14, s13

			//find the bigest one.. sent the duty to 0;
			SVMDuty(&v_a,&v_b,&v_c);
			uint16_t cont_a = (uint16_t)(-v_a);
 800087c:	eeb1 6a46 	vneg.f32	s12, s12


			/******
			 * control the motor
			 */
			setMotorDuty(cont_a, cont_b, cont_c);
 8000880:	4a38      	ldr	r2, [pc, #224]	; (8000964 <StartcontrolTask+0x3bc>)
			uint16_t cont_b = (uint16_t)(-v_b);
 8000882:	eeb1 5a45 	vneg.f32	s10, s10



			//for debug view..
			conres.duty_a = cont_a;conres.duty_b = cont_b;conres.duty_c = cont_c;
			xQueueOverwrite(conresQueueHandle,&conres);
 8000886:	4b38      	ldr	r3, [pc, #224]	; (8000968 <StartcontrolTask+0x3c0>)
			uint16_t cont_c = (uint16_t)(-v_c);
 8000888:	eeb1 7a47 	vneg.f32	s14, s14
			setMotorDuty(cont_a, cont_b, cont_c);
 800088c:	f8d2 c000 	ldr.w	ip, [r2]
			uint16_t cont_a = (uint16_t)(-v_a);
 8000890:	eefc 7ac6 	vcvt.u32.f32	s15, s12
			xQueueOverwrite(conresQueueHandle,&conres);
 8000894:	a906      	add	r1, sp, #24
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	2200      	movs	r2, #0
 800089a:	2302      	movs	r3, #2
				lastd = er_d; lastq = er_q;
 800089c:	eeb0 ba6d 	vmov.f32	s22, s27
			uint16_t cont_a = (uint16_t)(-v_a);
 80008a0:	edcd 7a01 	vstr	s15, [sp, #4]
			uint16_t cont_b = (uint16_t)(-v_b);
 80008a4:	eefc 7ac5 	vcvt.u32.f32	s15, s10
			uint16_t cont_a = (uint16_t)(-v_a);
 80008a8:	f8bd e004 	ldrh.w	lr, [sp, #4]
				lastd = er_d; lastq = er_q;
 80008ac:	eef0 ba4d 	vmov.f32	s23, s26
			uint16_t cont_b = (uint16_t)(-v_b);
 80008b0:	edcd 7a02 	vstr	s15, [sp, #8]
			uint16_t cont_c = (uint16_t)(-v_c);
 80008b4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
			uint16_t cont_b = (uint16_t)(-v_b);
 80008b8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
			setMotorDuty(cont_a, cont_b, cont_c);
 80008bc:	f8cc e034 	str.w	lr, [ip, #52]	; 0x34
			uint16_t cont_c = (uint16_t)(-v_c);
 80008c0:	edcd 7a03 	vstr	s15, [sp, #12]
 80008c4:	f8bd 600c 	ldrh.w	r6, [sp, #12]
			setMotorDuty(cont_a, cont_b, cont_c);
 80008c8:	f8cc 7038 	str.w	r7, [ip, #56]	; 0x38
 80008cc:	f8cc 603c 	str.w	r6, [ip, #60]	; 0x3c
			conres.duty_a = cont_a;conres.duty_b = cont_b;conres.duty_c = cont_c;
 80008d0:	f8ad e01c 	strh.w	lr, [sp, #28]
 80008d4:	f8ad 701e 	strh.w	r7, [sp, #30]
 80008d8:	f8ad 6020 	strh.w	r6, [sp, #32]
			xQueueOverwrite(conresQueueHandle,&conres);
 80008dc:	f004 ff98 	bl	8005810 <xQueueGenericSend>
			//to test the control frequency
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80008e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e4:	4821      	ldr	r0, [pc, #132]	; (800096c <StartcontrolTask+0x3c4>)
 80008e6:	f002 fbf7 	bl	80030d8 <HAL_GPIO_TogglePin>
 80008ea:	e66f      	b.n	80005cc <StartcontrolTask+0x24>
//				shuntdata.cur_a -= 8600;
//				shuntdata.cur_b -= 18400;
//				shuntdata.cur_c = -shuntdata.cur_a - shuntdata.cur_b;
//				volatile float cc = ((float)shuntdata.cur_a)/100;
//			}
			osDelay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f004 fbd7 	bl	80050a0 <osDelay>
	{
 80008f2:	e66b      	b.n	80005cc <StartcontrolTask+0x24>
				er_q = 0 - c_q;
 80008f4:	eeb1 da47 	vneg.f32	s26, s14
 80008f8:	e6f4      	b.n	80006e4 <StartcontrolTask+0x13c>
		}
  }
}
 80008fa:	b015      	add	sp, #84	; 0x54
 80008fc:	ecbd 8b10 	vpop	{d8-d15}
 8000900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000902:	bf00      	nop
 8000904:	f3af 8000 	nop.w
 8000908:	9999999a 	.word	0x9999999a
 800090c:	3fb99999 	.word	0x3fb99999
 8000910:	d2f1a9fc 	.word	0xd2f1a9fc
 8000914:	3f50624d 	.word	0x3f50624d
 8000918:	9ad68219 	.word	0x9ad68219
 800091c:	bf6496aa 	.word	0xbf6496aa
 8000920:	1c0010c7 	.word	0x1c0010c7
 8000924:	3febb67b 	.word	0x3febb67b
 8000928:	1c0010c7 	.word	0x1c0010c7
 800092c:	3ffbb67b 	.word	0x3ffbb67b
 8000930:	66666666 	.word	0x66666666
 8000934:	404f6666 	.word	0x404f6666
 8000938:	23205b49 	.word	0x23205b49
 800093c:	3fe279a7 	.word	0x3fe279a7
 8000940:	00000000 	.word	0x00000000
 8000944:	20004078 	.word	0x20004078
 8000948:	20004068 	.word	0x20004068
 800094c:	3a83126f 	.word	0x3a83126f
 8000950:	c9742400 	.word	0xc9742400
 8000954:	49742400 	.word	0x49742400
 8000958:	3eaaaaab 	.word	0x3eaaaaab
 800095c:	3f2aaaab 	.word	0x3f2aaaab
 8000960:	c5070000 	.word	0xc5070000
 8000964:	200041b4 	.word	0x200041b4
 8000968:	20004050 	.word	0x20004050
 800096c:	40020800 	.word	0x40020800

08000970 <HAL_UART_ErrorCallback>:
 * UART4 error handler
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	//error...
	Error_Handler();
 8000970:	f001 b9be 	b.w	8001cf0 <Error_Handler>
 8000974:	0000      	movs	r0, r0
	...

08000978 <HAL_UART_RxCpltCallback>:
	 * if some other task B that has higher priority than A are being woken by the passing queue or semaphore,
	 * the xHigherPriorityTaskWoken will be set to pdTrue and we can directly perform a context switch and thus
	 * leaves the ISR and go to task B, if not so, we need to go back to task A and wait for a tick to switch to B.
	 */

	if(huart->Instance==huart4.Instance) //not necessary to check..
 8000978:	4ab1      	ldr	r2, [pc, #708]	; (8000c40 <HAL_UART_RxCpltCallback+0x2c8>)
 800097a:	6803      	ldr	r3, [r0, #0]
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	4293      	cmp	r3, r2
{
 8000980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000984:	ed2d 8b04 	vpush	{d8-d9}
 8000988:	b087      	sub	sp, #28
	if(huart->Instance==huart4.Instance) //not necessary to check..
 800098a:	d055      	beq.n	8000a38 <HAL_UART_RxCpltCallback+0xc0>
			//call a context switch if needed..
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

	//USART 1 DMA interrupt
	else if(huart->Instance==huart1.Instance)
 800098c:	4aad      	ldr	r2, [pc, #692]	; (8000c44 <HAL_UART_RxCpltCallback+0x2cc>)
 800098e:	6812      	ldr	r2, [r2, #0]
 8000990:	4293      	cmp	r3, r2
 8000992:	d004      	beq.n	800099e <HAL_UART_RxCpltCallback+0x26>
		}
		//continue DMA
		HAL_UART_DMAResume(&huart1);
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 8000994:	b007      	add	sp, #28
 8000996:	ecbd 8b04 	vpop	{d8-d9}
 800099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(order_buff[i] == TXHEADER || order_buff[i] == TXHEADER +1)
 800099e:	4baa      	ldr	r3, [pc, #680]	; (8000c48 <HAL_UART_RxCpltCallback+0x2d0>)
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	2af8      	cmp	r2, #248	; 0xf8
 80009a4:	f000 80d9 	beq.w	8000b5a <HAL_UART_RxCpltCallback+0x1e2>
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	2af9      	cmp	r2, #249	; 0xf9
 80009ac:	f000 80d5 	beq.w	8000b5a <HAL_UART_RxCpltCallback+0x1e2>
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	2af8      	cmp	r2, #248	; 0xf8
 80009b4:	f000 8131 	beq.w	8000c1a <HAL_UART_RxCpltCallback+0x2a2>
 80009b8:	785a      	ldrb	r2, [r3, #1]
 80009ba:	2af9      	cmp	r2, #249	; 0xf9
 80009bc:	f000 812d 	beq.w	8000c1a <HAL_UART_RxCpltCallback+0x2a2>
 80009c0:	789a      	ldrb	r2, [r3, #2]
 80009c2:	2af8      	cmp	r2, #248	; 0xf8
 80009c4:	f000 812b 	beq.w	8000c1e <HAL_UART_RxCpltCallback+0x2a6>
 80009c8:	789a      	ldrb	r2, [r3, #2]
 80009ca:	2af9      	cmp	r2, #249	; 0xf9
 80009cc:	f000 8127 	beq.w	8000c1e <HAL_UART_RxCpltCallback+0x2a6>
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	2af8      	cmp	r2, #248	; 0xf8
 80009d4:	f000 8125 	beq.w	8000c22 <HAL_UART_RxCpltCallback+0x2aa>
 80009d8:	78da      	ldrb	r2, [r3, #3]
 80009da:	2af9      	cmp	r2, #249	; 0xf9
 80009dc:	f000 8121 	beq.w	8000c22 <HAL_UART_RxCpltCallback+0x2aa>
 80009e0:	791a      	ldrb	r2, [r3, #4]
 80009e2:	2af8      	cmp	r2, #248	; 0xf8
 80009e4:	f000 811f 	beq.w	8000c26 <HAL_UART_RxCpltCallback+0x2ae>
 80009e8:	791a      	ldrb	r2, [r3, #4]
 80009ea:	2af9      	cmp	r2, #249	; 0xf9
 80009ec:	f000 811b 	beq.w	8000c26 <HAL_UART_RxCpltCallback+0x2ae>
 80009f0:	795a      	ldrb	r2, [r3, #5]
 80009f2:	2af8      	cmp	r2, #248	; 0xf8
 80009f4:	f000 816b 	beq.w	8000cce <HAL_UART_RxCpltCallback+0x356>
 80009f8:	795a      	ldrb	r2, [r3, #5]
 80009fa:	2af9      	cmp	r2, #249	; 0xf9
 80009fc:	f000 8167 	beq.w	8000cce <HAL_UART_RxCpltCallback+0x356>
 8000a00:	799a      	ldrb	r2, [r3, #6]
 8000a02:	2af8      	cmp	r2, #248	; 0xf8
 8000a04:	f000 81a2 	beq.w	8000d4c <HAL_UART_RxCpltCallback+0x3d4>
 8000a08:	799a      	ldrb	r2, [r3, #6]
 8000a0a:	2af9      	cmp	r2, #249	; 0xf9
 8000a0c:	f000 819e 	beq.w	8000d4c <HAL_UART_RxCpltCallback+0x3d4>
		HAL_UART_DMAResume(&huart1);
 8000a10:	488c      	ldr	r0, [pc, #560]	; (8000c44 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a12:	f004 f879 	bl	8004b08 <HAL_UART_DMAResume>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a16:	4b8d      	ldr	r3, [pc, #564]	; (8000c4c <HAL_UART_RxCpltCallback+0x2d4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0ba      	beq.n	8000994 <HAL_UART_RxCpltCallback+0x1c>
 8000a1e:	4b8c      	ldr	r3, [pc, #560]	; (8000c50 <HAL_UART_RxCpltCallback+0x2d8>)
 8000a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	f3bf 8f4f 	dsb	sy
 8000a2a:	f3bf 8f6f 	isb	sy
}
 8000a2e:	b007      	add	sp, #28
 8000a30:	ecbd 8b04 	vpop	{d8-d9}
 8000a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000a38:	ed9f 9b7d 	vldr	d9, [pc, #500]	; 8000c30 <HAL_UART_RxCpltCallback+0x2b8>
							enchall.w = (int16_t)(PI*v_all/100);
 8000a3c:	ed9f 8b7e 	vldr	d8, [pc, #504]	; 8000c38 <HAL_UART_RxCpltCallback+0x2c0>
 8000a40:	2501      	movs	r5, #1
 8000a42:	2400      	movs	r4, #0
 8000a44:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8000c78 <HAL_UART_RxCpltCallback+0x300>
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000a48:	f8df a228 	ldr.w	sl, [pc, #552]	; 8000c74 <HAL_UART_RxCpltCallback+0x2fc>
			if(enchall_buff[i] == TXHEADER)
 8000a4c:	f818 3004 	ldrb.w	r3, [r8, r4]
 8000a50:	2bf8      	cmp	r3, #248	; 0xf8
 8000a52:	d00b      	beq.n	8000a6c <HAL_UART_RxCpltCallback+0xf4>
		for(int i=0; i<UART4BYTE; i++)
 8000a54:	3401      	adds	r4, #1
 8000a56:	3501      	adds	r5, #1
 8000a58:	2c05      	cmp	r4, #5
 8000a5a:	d1f7      	bne.n	8000a4c <HAL_UART_RxCpltCallback+0xd4>
		HAL_UART_DMAResume(&huart4);
 8000a5c:	4878      	ldr	r0, [pc, #480]	; (8000c40 <HAL_UART_RxCpltCallback+0x2c8>)
 8000a5e:	f004 f853 	bl	8004b08 <HAL_UART_DMAResume>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a62:	4b7c      	ldr	r3, [pc, #496]	; (8000c54 <HAL_UART_RxCpltCallback+0x2dc>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d094      	beq.n	8000994 <HAL_UART_RxCpltCallback+0x1c>
 8000a6a:	e7d8      	b.n	8000a1e <HAL_UART_RxCpltCallback+0xa6>
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 8000a6c:	2c04      	cmp	r4, #4
 8000a6e:	f000 82a7 	beq.w	8000fc0 <HAL_UART_RxCpltCallback+0x648>
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 8000a72:	2d04      	cmp	r5, #4
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 8000a74:	b2eb      	uxtb	r3, r5
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 8000a76:	d06d      	beq.n	8000b54 <HAL_UART_RxCpltCallback+0x1dc>
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	b2d2      	uxtb	r2, r2
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 8000a7c:	f818 1003 	ldrb.w	r1, [r8, r3]
 8000a80:	060e      	lsls	r6, r1, #24
 8000a82:	d5e7      	bpl.n	8000a54 <HAL_UART_RxCpltCallback+0xdc>
 8000a84:	f818 1002 	ldrb.w	r1, [r8, r2]
 8000a88:	f011 0f60 	tst.w	r1, #96	; 0x60
 8000a8c:	d0e2      	beq.n	8000a54 <HAL_UART_RxCpltCallback+0xdc>
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000a8e:	f818 7003 	ldrb.w	r7, [r8, r3]
					uint8_t b1 = t==UART4BYTE-1?0:t+1;
 8000a92:	2a04      	cmp	r2, #4
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 8000a94:	f818 6003 	ldrb.w	r6, [r8, r3]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 8000a98:	f818 1003 	ldrb.w	r1, [r8, r3]
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000a9c:	f3c7 1780 	ubfx	r7, r7, #6, #1
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 8000aa0:	f818 0003 	ldrb.w	r0, [r8, r3]
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 8000aa4:	f3c6 1640 	ubfx	r6, r6, #5, #1
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 8000aa8:	f3c1 0382 	ubfx	r3, r1, #2, #3
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 8000aac:	f818 1002 	ldrb.w	r1, [r8, r2]
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 8000ab0:	f000 0003 	and.w	r0, r0, #3
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000ab4:	f88a 7000 	strb.w	r7, [sl]
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 8000ab8:	f001 011f 	and.w	r1, r1, #31
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 8000abc:	f88a 6001 	strb.w	r6, [sl, #1]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 8000ac0:	f88a 3002 	strb.w	r3, [sl, #2]
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 8000ac4:	f88a 0003 	strb.w	r0, [sl, #3]
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 8000ac8:	f88a 1004 	strb.w	r1, [sl, #4]
					uint8_t b1 = t==UART4BYTE-1?0:t+1;
 8000acc:	f000 810d 	beq.w	8000cea <HAL_UART_RxCpltCallback+0x372>
 8000ad0:	1c56      	adds	r6, r2, #1
 8000ad2:	b2f6      	uxtb	r6, r6
					uint8_t b2 = b1==UART4BYTE-1?0:b1+1;
 8000ad4:	2e04      	cmp	r6, #4
 8000ad6:	f000 815a 	beq.w	8000d8e <HAL_UART_RxCpltCallback+0x416>
 8000ada:	1c93      	adds	r3, r2, #2
 8000adc:	b2db      	uxtb	r3, r3
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000ade:	f818 2006 	ldrb.w	r2, [r8, r6]
					if(enchall.calc_tag == 2) //all 0
 8000ae2:	2802      	cmp	r0, #2
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000ae4:	f818 3003 	ldrb.w	r3, [r8, r3]
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000ae8:	f88a 2005 	strb.w	r2, [sl, #5]
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000aec:	f88a 3006 	strb.w	r3, [sl, #6]
					if(enchall.calc_tag == 2) //all 0
 8000af0:	f000 80ef 	beq.w	8000cd2 <HAL_UART_RxCpltCallback+0x35a>
					else if(enchall.calc_tag == 3) //all 1    except the last 5 bits... other bits are 1
 8000af4:	2803      	cmp	r0, #3
 8000af6:	f000 813d 	beq.w	8000d74 <HAL_UART_RxCpltCallback+0x3fc>
						if(enchall.enc_counter-last5bitsdata>16) //overflowed..
 8000afa:	4857      	ldr	r0, [pc, #348]	; (8000c58 <HAL_UART_RxCpltCallback+0x2e0>)
						flag = 0;
 8000afc:	2600      	movs	r6, #0
 8000afe:	4a57      	ldr	r2, [pc, #348]	; (8000c5c <HAL_UART_RxCpltCallback+0x2e4>)
						if(enchall.enc_counter-last5bitsdata>16) //overflowed..
 8000b00:	8803      	ldrh	r3, [r0, #0]
						flag = 0;
 8000b02:	7016      	strb	r6, [r2, #0]
						if(enchall.enc_counter-last5bitsdata>16) //overflowed..
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	1acb      	subs	r3, r1, r3
 8000b08:	2b10      	cmp	r3, #16
 8000b0a:	f340 8123 	ble.w	8000d54 <HAL_UART_RxCpltCallback+0x3dc>
							enchall.recon_counter = (enchall.recon_counter - 32)&0xFFE0|enchall.enc_counter;
 8000b0e:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8000b12:	b28e      	uxth	r6, r1
 8000b14:	3b20      	subs	r3, #32
 8000b16:	f023 031f 	bic.w	r3, r3, #31
 8000b1a:	430b      	orrs	r3, r1
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	f8aa 3008 	strh.w	r3, [sl, #8]
					if(fivetimecount--<=0&&cnt==lasttick)
 8000b22:	4a4f      	ldr	r2, [pc, #316]	; (8000c60 <HAL_UART_RxCpltCallback+0x2e8>)
					last5bitsdata = enchall.enc_counter;
 8000b24:	8006      	strh	r6, [r0, #0]
					if(fivetimecount--<=0&&cnt==lasttick)
 8000b26:	7811      	ldrb	r1, [r2, #0]
 8000b28:	b249      	sxtb	r1, r1
 8000b2a:	1e48      	subs	r0, r1, #1
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	b240      	sxtb	r0, r0
 8000b30:	7010      	strb	r0, [r2, #0]
 8000b32:	f340 80dd 	ble.w	8000cf0 <HAL_UART_RxCpltCallback+0x378>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 8000b36:	2100      	movs	r1, #0
 8000b38:	484a      	ldr	r0, [pc, #296]	; (8000c64 <HAL_UART_RxCpltCallback+0x2ec>)
 8000b3a:	f001 ffb3 	bl	8002aa4 <HAL_DFSDM_FilterPollForRegConversion>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	f000 809c 	beq.w	8000c7c <HAL_UART_RxCpltCallback+0x304>
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000b44:	4848      	ldr	r0, [pc, #288]	; (8000c68 <HAL_UART_RxCpltCallback+0x2f0>)
 8000b46:	2302      	movs	r3, #2
 8000b48:	4a42      	ldr	r2, [pc, #264]	; (8000c54 <HAL_UART_RxCpltCallback+0x2dc>)
 8000b4a:	4651      	mov	r1, sl
 8000b4c:	6800      	ldr	r0, [r0, #0]
 8000b4e:	f004 fff9 	bl	8005b44 <xQueueGenericSendFromISR>
 8000b52:	e77f      	b.n	8000a54 <HAL_UART_RxCpltCallback+0xdc>
 8000b54:	462b      	mov	r3, r5
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 8000b56:	2200      	movs	r2, #0
 8000b58:	e790      	b.n	8000a7c <HAL_UART_RxCpltCallback+0x104>
			if(order_buff[i] == TXHEADER || order_buff[i] == TXHEADER +1)
 8000b5a:	2400      	movs	r4, #0
				uint8_t s = i==UART1BYTE-1?0:i+1; //second byte  1xxx|xxxx
 8000b5c:	b2e1      	uxtb	r1, r4
 8000b5e:	1c4a      	adds	r2, r1, #1
				uint8_t t = s==UART1BYTE-1?0:s+1; //third byte   011x|xxxx
 8000b60:	2a06      	cmp	r2, #6
 8000b62:	d012      	beq.n	8000b8a <HAL_UART_RxCpltCallback+0x212>
 8000b64:	3102      	adds	r1, #2
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000b66:	5c98      	ldrb	r0, [r3, r2]
 8000b68:	0600      	lsls	r0, r0, #24
 8000b6a:	d410      	bmi.n	8000b8e <HAL_UART_RxCpltCallback+0x216>
				xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000b6c:	493f      	ldr	r1, [pc, #252]	; (8000c6c <HAL_UART_RxCpltCallback+0x2f4>)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	4a36      	ldr	r2, [pc, #216]	; (8000c4c <HAL_UART_RxCpltCallback+0x2d4>)
 8000b72:	6808      	ldr	r0, [r1, #0]
 8000b74:	493e      	ldr	r1, [pc, #248]	; (8000c70 <HAL_UART_RxCpltCallback+0x2f8>)
 8000b76:	f004 ffe5 	bl	8005b44 <xQueueGenericSendFromISR>
				xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000b7a:	493b      	ldr	r1, [pc, #236]	; (8000c68 <HAL_UART_RxCpltCallback+0x2f0>)
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	4a33      	ldr	r2, [pc, #204]	; (8000c4c <HAL_UART_RxCpltCallback+0x2d4>)
 8000b80:	6808      	ldr	r0, [r1, #0]
 8000b82:	493c      	ldr	r1, [pc, #240]	; (8000c74 <HAL_UART_RxCpltCallback+0x2fc>)
 8000b84:	f004 ffde 	bl	8005b44 <xQueueGenericSendFromISR>
				break;
 8000b88:	e742      	b.n	8000a10 <HAL_UART_RxCpltCallback+0x98>
				uint8_t t = s==UART1BYTE-1?0:s+1; //third byte   011x|xxxx
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	e7eb      	b.n	8000b66 <HAL_UART_RxCpltCallback+0x1ee>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000b8e:	5c58      	ldrb	r0, [r3, r1]
 8000b90:	f010 0f60 	tst.w	r0, #96	; 0x60
 8000b94:	d0ea      	beq.n	8000b6c <HAL_UART_RxCpltCallback+0x1f4>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000b96:	5c9e      	ldrb	r6, [r3, r2]
					volatile uint8_t b1 = t==UART1BYTE-1?0:t+1;
 8000b98:	2906      	cmp	r1, #6
					motorcurrent.Ki = order_buff[t] & 0x9f;
 8000b9a:	5c5d      	ldrb	r5, [r3, r1]
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000b9c:	4834      	ldr	r0, [pc, #208]	; (8000c70 <HAL_UART_RxCpltCallback+0x2f8>)
 8000b9e:	f006 067f 	and.w	r6, r6, #127	; 0x7f
					motorcurrent.Ki = order_buff[t] & 0x9f;
 8000ba2:	f005 059f 	and.w	r5, r5, #159	; 0x9f
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000ba6:	7306      	strb	r6, [r0, #12]
					motorcurrent.Ki = order_buff[t] & 0x9f;
 8000ba8:	7345      	strb	r5, [r0, #13]
					volatile uint8_t b1 = t==UART1BYTE-1?0:t+1;
 8000baa:	f000 8123 	beq.w	8000df4 <HAL_UART_RxCpltCallback+0x47c>
 8000bae:	3101      	adds	r1, #1
 8000bb0:	b2ca      	uxtb	r2, r1
 8000bb2:	f88d 200f 	strb.w	r2, [sp, #15]
					volatile uint8_t b2 = b1==UART1BYTE-1?0:b1+1;
 8000bb6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000bba:	2a06      	cmp	r2, #6
 8000bbc:	f000 8118 	beq.w	8000df0 <HAL_UART_RxCpltCallback+0x478>
 8000bc0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000bc4:	3201      	adds	r2, #1
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	f88d 2010 	strb.w	r2, [sp, #16]
					volatile uint8_t b3 = b2==UART1BYTE-1?0:b2+1;
 8000bcc:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000bd0:	2a06      	cmp	r2, #6
 8000bd2:	f000 810b 	beq.w	8000dec <HAL_UART_RxCpltCallback+0x474>
 8000bd6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000bda:	3201      	adds	r2, #1
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	f88d 2011 	strb.w	r2, [sp, #17]
					if(order_buff[i] == TXHEADER)
 8000be2:	5d1a      	ldrb	r2, [r3, r4]
 8000be4:	2af8      	cmp	r2, #248	; 0xf8
 8000be6:	f000 80dc 	beq.w	8000da2 <HAL_UART_RxCpltCallback+0x42a>
						motorcurrent.target_cur  =  *(int16_t *)(&order_buff[b1]);
 8000bea:	f89d 200f 	ldrb.w	r2, [sp, #15]
						motorcurrent.centeroffset = *(int8_t*)&order_buff[b3];
 8000bee:	f89d 1011 	ldrb.w	r1, [sp, #17]
						motorcurrent.target_cur  =  *(int16_t *)(&order_buff[b1]);
 8000bf2:	5e9a      	ldrsh	r2, [r3, r2]
						motorcurrent.centeroffset = *(int8_t*)&order_buff[b3];
 8000bf4:	5c59      	ldrb	r1, [r3, r1]
						motorcurrent.target_cur  =  *(int16_t *)(&order_buff[b1]);
 8000bf6:	8202      	strh	r2, [r0, #16]
						motorcurrent.centeroffset = *(int8_t*)&order_buff[b3];
 8000bf8:	7381      	strb	r1, [r0, #14]
					uint8_t b4 = b3==UART1BYTE-1?0:b3+1;
 8000bfa:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8000bfe:	2906      	cmp	r1, #6
 8000c00:	f000 80cd 	beq.w	8000d9e <HAL_UART_RxCpltCallback+0x426>
 8000c04:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8000c08:	3101      	adds	r1, #1
 8000c0a:	b2c9      	uxtb	r1, r1
					enchall.MAX_W = order_buff[b4];
 8000c0c:	5c59      	ldrb	r1, [r3, r1]
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_UART_RxCpltCallback+0x2fc>)
 8000c10:	7599      	strb	r1, [r3, #22]
					enchall.Kp = motorcurrent.Kp;
 8000c12:	729e      	strb	r6, [r3, #10]
					enchall.Ki = motorcurrent.Ki;
 8000c14:	72dd      	strb	r5, [r3, #11]
					enchall.target_cur = motorcurrent.target_cur;
 8000c16:	819a      	strh	r2, [r3, #12]
 8000c18:	e7a8      	b.n	8000b6c <HAL_UART_RxCpltCallback+0x1f4>
		for(int i=0; i<UART1BYTE; i++)
 8000c1a:	2401      	movs	r4, #1
 8000c1c:	e79e      	b.n	8000b5c <HAL_UART_RxCpltCallback+0x1e4>
 8000c1e:	2402      	movs	r4, #2
 8000c20:	e79c      	b.n	8000b5c <HAL_UART_RxCpltCallback+0x1e4>
 8000c22:	2403      	movs	r4, #3
 8000c24:	e79a      	b.n	8000b5c <HAL_UART_RxCpltCallback+0x1e4>
 8000c26:	2404      	movs	r4, #4
 8000c28:	e798      	b.n	8000b5c <HAL_UART_RxCpltCallback+0x1e4>
 8000c2a:	bf00      	nop
 8000c2c:	f3af 8000 	nop.w
 8000c30:	00000000 	.word	0x00000000
 8000c34:	412e8480 	.word	0x412e8480
 8000c38:	48f795a3 	.word	0x48f795a3
 8000c3c:	3fa015b5 	.word	0x3fa015b5
 8000c40:	20004444 	.word	0x20004444
 8000c44:	20004364 	.word	0x20004364
 8000c48:	20003e70 	.word	0x20003e70
 8000c4c:	200000ec 	.word	0x200000ec
 8000c50:	e000ed04 	.word	0xe000ed04
 8000c54:	200000e8 	.word	0x200000e8
 8000c58:	2000004e 	.word	0x2000004e
 8000c5c:	2000004c 	.word	0x2000004c
 8000c60:	20000018 	.word	0x20000018
 8000c64:	20003e78 	.word	0x20003e78
 8000c68:	20004068 	.word	0x20004068
 8000c6c:	20004078 	.word	0x20004078
 8000c70:	20000058 	.word	0x20000058
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20003e68 	.word	0x20003e68
							HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter1,0) == HAL_OK)
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	48b9      	ldr	r0, [pc, #740]	; (8000f64 <HAL_UART_RxCpltCallback+0x5ec>)
 8000c80:	f001 ff10 	bl	8002aa4 <HAL_DFSDM_FilterPollForRegConversion>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 8000c84:	4606      	mov	r6, r0
 8000c86:	2800      	cmp	r0, #0
 8000c88:	f47f af5c 	bne.w	8000b44 <HAL_UART_RxCpltCallback+0x1cc>
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000c8c:	4fb6      	ldr	r7, [pc, #728]	; (8000f68 <HAL_UART_RxCpltCallback+0x5f0>)
 8000c8e:	49b7      	ldr	r1, [pc, #732]	; (8000f6c <HAL_UART_RxCpltCallback+0x5f4>)
 8000c90:	48b7      	ldr	r0, [pc, #732]	; (8000f70 <HAL_UART_RxCpltCallback+0x5f8>)
 8000c92:	f001 fefd 	bl	8002a90 <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 8000c96:	49b7      	ldr	r1, [pc, #732]	; (8000f74 <HAL_UART_RxCpltCallback+0x5fc>)
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000c98:	6078      	str	r0, [r7, #4]
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 8000c9a:	48b2      	ldr	r0, [pc, #712]	; (8000f64 <HAL_UART_RxCpltCallback+0x5ec>)
 8000c9c:	f001 fef8 	bl	8002a90 <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_b -= 18400;
 8000ca0:	6879      	ldr	r1, [r7, #4]
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 8000ca2:	f242 1298 	movw	r2, #8600	; 0x2198
						motorcurrent.cur_b -= 18400;
 8000ca6:	f8df e2fc 	ldr.w	lr, [pc, #764]	; 8000fa4 <HAL_UART_RxCpltCallback+0x62c>
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000caa:	4633      	mov	r3, r6
						motorcurrent.cur_a -= 8600;
 8000cac:	4eb2      	ldr	r6, [pc, #712]	; (8000f78 <HAL_UART_RxCpltCallback+0x600>)
						motorcurrent.cur_b -= 18400;
 8000cae:	448e      	add	lr, r1
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 8000cb0:	1a12      	subs	r2, r2, r0
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000cb2:	49b2      	ldr	r1, [pc, #712]	; (8000f7c <HAL_UART_RxCpltCallback+0x604>)
						motorcurrent.cur_a -= 8600;
 8000cb4:	4406      	add	r6, r0
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 8000cb6:	eba2 020e 	sub.w	r2, r2, lr
						motorcurrent.cur_b -= 18400;
 8000cba:	f8c7 e004 	str.w	lr, [r7, #4]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000cbe:	6808      	ldr	r0, [r1, #0]
 8000cc0:	4639      	mov	r1, r7
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 8000cc2:	60ba      	str	r2, [r7, #8]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000cc4:	4aae      	ldr	r2, [pc, #696]	; (8000f80 <HAL_UART_RxCpltCallback+0x608>)
						motorcurrent.cur_a -= 8600;
 8000cc6:	603e      	str	r6, [r7, #0]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000cc8:	f004 ff3c 	bl	8005b44 <xQueueGenericSendFromISR>
 8000ccc:	e73a      	b.n	8000b44 <HAL_UART_RxCpltCallback+0x1cc>
		for(int i=0; i<UART1BYTE; i++)
 8000cce:	2405      	movs	r4, #5
 8000cd0:	e744      	b.n	8000b5c <HAL_UART_RxCpltCallback+0x1e4>
						if(flag==2)
 8000cd2:	4aac      	ldr	r2, [pc, #688]	; (8000f84 <HAL_UART_RxCpltCallback+0x60c>)
						enchall.recon_counter = enchall.enc_counter;  //only 5bit has number, other bits are 0
 8000cd4:	b28e      	uxth	r6, r1
						if(flag==2)
 8000cd6:	7813      	ldrb	r3, [r2, #0]
						enchall.recon_counter = enchall.enc_counter;  //only 5bit has number, other bits are 0
 8000cd8:	f8aa 6008 	strh.w	r6, [sl, #8]
						if(flag==2)
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d058      	beq.n	8000d92 <HAL_UART_RxCpltCallback+0x41a>
						flag = 1;
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4633      	mov	r3, r6
 8000ce4:	48a8      	ldr	r0, [pc, #672]	; (8000f88 <HAL_UART_RxCpltCallback+0x610>)
 8000ce6:	7011      	strb	r1, [r2, #0]
 8000ce8:	e71b      	b.n	8000b22 <HAL_UART_RxCpltCallback+0x1aa>
 8000cea:	2301      	movs	r3, #1
 8000cec:	2600      	movs	r6, #0
 8000cee:	e6f6      	b.n	8000ade <HAL_UART_RxCpltCallback+0x166>
					if(fivetimecount--<=0&&cnt==lasttick)
 8000cf0:	49a6      	ldr	r1, [pc, #664]	; (8000f8c <HAL_UART_RxCpltCallback+0x614>)
 8000cf2:	48a7      	ldr	r0, [pc, #668]	; (8000f90 <HAL_UART_RxCpltCallback+0x618>)
 8000cf4:	680f      	ldr	r7, [r1, #0]
 8000cf6:	6806      	ldr	r6, [r0, #0]
 8000cf8:	42b7      	cmp	r7, r6
 8000cfa:	f47f af1c 	bne.w	8000b36 <HAL_UART_RxCpltCallback+0x1be>
						cnt = (int32_t)htim3.Instance->CNT;
 8000cfe:	4ea5      	ldr	r6, [pc, #660]	; (8000f94 <HAL_UART_RxCpltCallback+0x61c>)
						cnt_e = cnt-lasttick;
 8000d00:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8000fa8 <HAL_UART_RxCpltCallback+0x630>
						cnt = (int32_t)htim3.Instance->CNT;
 8000d04:	6836      	ldr	r6, [r6, #0]
 8000d06:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8000d08:	600e      	str	r6, [r1, #0]
						cnt_e = cnt-lasttick;
 8000d0a:	680e      	ldr	r6, [r1, #0]
 8000d0c:	6807      	ldr	r7, [r0, #0]
 8000d0e:	1bf6      	subs	r6, r6, r7
 8000d10:	f8ce 6000 	str.w	r6, [lr]
						cnt_e = cnt_e<0?cnt_e+50000:cnt_e;
 8000d14:	f8de 6000 	ldr.w	r6, [lr]
 8000d18:	2e00      	cmp	r6, #0
 8000d1a:	f2c0 8117 	blt.w	8000f4c <HAL_UART_RxCpltCallback+0x5d4>
 8000d1e:	f8de 6000 	ldr.w	r6, [lr]
 8000d22:	f8ce 6000 	str.w	r6, [lr]
						if(cnt_e>390&&cnt_e<400)
 8000d26:	f8de 6000 	ldr.w	r6, [lr]
 8000d2a:	f5b6 7fc3 	cmp.w	r6, #390	; 0x186
 8000d2e:	dc69      	bgt.n	8000e04 <HAL_UART_RxCpltCallback+0x48c>
 8000d30:	f8df c278 	ldr.w	ip, [pc, #632]	; 8000fac <HAL_UART_RxCpltCallback+0x634>
						lasttick = cnt;
 8000d34:	680e      	ldr	r6, [r1, #0]
						last_recon = enchall.recon_counter;
 8000d36:	b21b      	sxth	r3, r3
						fivetimecount = 51;
 8000d38:	2133      	movs	r1, #51	; 0x33
						lasttick = cnt;
 8000d3a:	6006      	str	r6, [r0, #0]
						last_recon = enchall.recon_counter;
 8000d3c:	f8ac 3000 	strh.w	r3, [ip]
						enchall.timetick = cnt_e;
 8000d40:	f8de 3000 	ldr.w	r3, [lr]
						fivetimecount = 51;
 8000d44:	7011      	strb	r1, [r2, #0]
						enchall.timetick = cnt_e;
 8000d46:	f8ca 3010 	str.w	r3, [sl, #16]
 8000d4a:	e6f4      	b.n	8000b36 <HAL_UART_RxCpltCallback+0x1be>
		for(int i=0; i<UART1BYTE; i++)
 8000d4c:	2406      	movs	r4, #6
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2101      	movs	r1, #1
 8000d52:	e708      	b.n	8000b66 <HAL_UART_RxCpltCallback+0x1ee>
						else if(enchall.enc_counter-last5bitsdata<-16)
 8000d54:	8803      	ldrh	r3, [r0, #0]
 8000d56:	b28e      	uxth	r6, r1
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	1acb      	subs	r3, r1, r3
 8000d5c:	3310      	adds	r3, #16
							enchall.recon_counter = (enchall.recon_counter + 32)&0xFFE0|enchall.enc_counter;
 8000d5e:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8000d62:	bfb8      	it	lt
 8000d64:	3320      	addlt	r3, #32
							enchall.recon_counter = enchall.recon_counter&0xFFE0|enchall.enc_counter;
 8000d66:	f023 031f 	bic.w	r3, r3, #31
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f8aa 3008 	strh.w	r3, [sl, #8]
 8000d72:	e6d6      	b.n	8000b22 <HAL_UART_RxCpltCallback+0x1aa>
						if(flag==1)
 8000d74:	4a83      	ldr	r2, [pc, #524]	; (8000f84 <HAL_UART_RxCpltCallback+0x60c>)
						enchall.recon_counter = ALLONECOUNT + enchall.enc_counter;
 8000d76:	b28e      	uxth	r6, r1
						if(flag==1)
 8000d78:	7811      	ldrb	r1, [r2, #0]
						enchall.recon_counter = ALLONECOUNT + enchall.enc_counter;
 8000d7a:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
						if(flag==1)
 8000d7e:	2901      	cmp	r1, #1
						enchall.recon_counter = ALLONECOUNT + enchall.enc_counter;
 8000d80:	f8aa 3008 	strh.w	r3, [sl, #8]
						if(flag==1)
 8000d84:	d038      	beq.n	8000df8 <HAL_UART_RxCpltCallback+0x480>
						flag = 2;
 8000d86:	2102      	movs	r1, #2
 8000d88:	487f      	ldr	r0, [pc, #508]	; (8000f88 <HAL_UART_RxCpltCallback+0x610>)
 8000d8a:	7011      	strb	r1, [r2, #0]
 8000d8c:	e6c9      	b.n	8000b22 <HAL_UART_RxCpltCallback+0x1aa>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e6a5      	b.n	8000ade <HAL_UART_RxCpltCallback+0x166>
							enchall.z_count++;
 8000d92:	f8ba 300e 	ldrh.w	r3, [sl, #14]
 8000d96:	3301      	adds	r3, #1
 8000d98:	f8aa 300e 	strh.w	r3, [sl, #14]
 8000d9c:	e7a0      	b.n	8000ce0 <HAL_UART_RxCpltCallback+0x368>
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e734      	b.n	8000c0c <HAL_UART_RxCpltCallback+0x294>
						motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000da2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	5c9a      	ldrb	r2, [r3, r2]
 8000daa:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8000dae:	0212      	lsls	r2, r2, #8
 8000db0:	b2c9      	uxtb	r1, r1
 8000db2:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8000db6:	5c5c      	ldrb	r4, [r3, r1]
						if(order_buff[b2]&0x80) //minus
 8000db8:	f89d 1010 	ldrb.w	r1, [sp, #16]
						motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000dbc:	4322      	orrs	r2, r4
						if(order_buff[b2]&0x80) //minus
 8000dbe:	b2c9      	uxtb	r1, r1
						motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000dc0:	8202      	strh	r2, [r0, #16]
						if(order_buff[b2]&0x80) //minus
 8000dc2:	5c59      	ldrb	r1, [r3, r1]
 8000dc4:	060f      	lsls	r7, r1, #24
 8000dc6:	f100 80c7 	bmi.w	8000f58 <HAL_UART_RxCpltCallback+0x5e0>
						motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000dca:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8000dce:	b2c9      	uxtb	r1, r1
 8000dd0:	5c59      	ldrb	r1, [r3, r1]
						if(order_buff[b3]&0x80) //minus
 8000dd2:	f89d 4011 	ldrb.w	r4, [sp, #17]
						motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000dd6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
						if(order_buff[b3]&0x80) //minus
 8000dda:	b2e4      	uxtb	r4, r4
						motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000ddc:	7381      	strb	r1, [r0, #14]
						if(order_buff[b3]&0x80) //minus
 8000dde:	5d1c      	ldrb	r4, [r3, r4]
 8000de0:	0624      	lsls	r4, r4, #24
 8000de2:	f57f af0a 	bpl.w	8000bfa <HAL_UART_RxCpltCallback+0x282>
							motorcurrent.centeroffset = -motorcurrent.centeroffset;
 8000de6:	4249      	negs	r1, r1
 8000de8:	7381      	strb	r1, [r0, #14]
 8000dea:	e706      	b.n	8000bfa <HAL_UART_RxCpltCallback+0x282>
					volatile uint8_t b3 = b2==UART1BYTE-1?0:b2+1;
 8000dec:	2200      	movs	r2, #0
 8000dee:	e6f6      	b.n	8000bde <HAL_UART_RxCpltCallback+0x266>
					volatile uint8_t b2 = b1==UART1BYTE-1?0:b1+1;
 8000df0:	2200      	movs	r2, #0
 8000df2:	e6e9      	b.n	8000bc8 <HAL_UART_RxCpltCallback+0x250>
					volatile uint8_t b1 = t==UART1BYTE-1?0:t+1;
 8000df4:	2200      	movs	r2, #0
 8000df6:	e6dc      	b.n	8000bb2 <HAL_UART_RxCpltCallback+0x23a>
							enchall.z_count--;
 8000df8:	f8ba 100e 	ldrh.w	r1, [sl, #14]
 8000dfc:	3901      	subs	r1, #1
 8000dfe:	f8aa 100e 	strh.w	r1, [sl, #14]
 8000e02:	e7c0      	b.n	8000d86 <HAL_UART_RxCpltCallback+0x40e>
						if(cnt_e>390&&cnt_e<400)
 8000e04:	f8de 6000 	ldr.w	r6, [lr]
							volatile int16_t ct = enchall.recon_counter - last_recon;
 8000e08:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000fac <HAL_UART_RxCpltCallback+0x634>
						if(cnt_e>390&&cnt_e<400)
 8000e0c:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
 8000e10:	da90      	bge.n	8000d34 <HAL_UART_RxCpltCallback+0x3bc>
							volatile int16_t ct = enchall.recon_counter - last_recon;
 8000e12:	f8bc 6000 	ldrh.w	r6, [ip]
							ct = ct>5000?enchall.recon_counter-last_recon-10000:ct;
 8000e16:	f241 3788 	movw	r7, #5000	; 0x1388
							volatile int16_t ct = enchall.recon_counter - last_recon;
 8000e1a:	1b9e      	subs	r6, r3, r6
 8000e1c:	b236      	sxth	r6, r6
 8000e1e:	f8ad 6012 	strh.w	r6, [sp, #18]
							ct = ct>5000?enchall.recon_counter-last_recon-10000:ct;
 8000e22:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000e26:	b236      	sxth	r6, r6
 8000e28:	42be      	cmp	r6, r7
 8000e2a:	f340 80c5 	ble.w	8000fb8 <HAL_UART_RxCpltCallback+0x640>
 8000e2e:	f8bc 6000 	ldrh.w	r6, [ip]
 8000e32:	f5c6 4658 	rsb	r6, r6, #55296	; 0xd800
 8000e36:	36f0      	adds	r6, #240	; 0xf0
 8000e38:	441e      	add	r6, r3
 8000e3a:	b236      	sxth	r6, r6
 8000e3c:	f8ad 6012 	strh.w	r6, [sp, #18]
							ct = ct<-5000?enchall.recon_counter-last_recon+10000:ct;
 8000e40:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000e44:	4f54      	ldr	r7, [pc, #336]	; (8000f98 <HAL_UART_RxCpltCallback+0x620>)
 8000e46:	b236      	sxth	r6, r6
 8000e48:	42be      	cmp	r6, r7
 8000e4a:	f280 80b1 	bge.w	8000fb0 <HAL_UART_RxCpltCallback+0x638>
 8000e4e:	f8bc 6000 	ldrh.w	r6, [ip]
 8000e52:	f5c6 561c 	rsb	r6, r6, #9984	; 0x2700
 8000e56:	3610      	adds	r6, #16
 8000e58:	441e      	add	r6, r3
 8000e5a:	b236      	sxth	r6, r6
 8000e5c:	f8ad 6012 	strh.w	r6, [sp, #18]
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e60:	270c      	movs	r7, #12
 8000e62:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8000e66:	f8de 6000 	ldr.w	r6, [lr]
 8000e6a:	fa0f fb8b 	sxth.w	fp, fp
 8000e6e:	9601      	str	r6, [sp, #4]
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000e70:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000e74:	ed9e 5a00 	vldr	s10, [lr]
 8000e78:	fa0f f986 	sxth.w	r9, r6
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e7c:	4e47      	ldr	r6, [pc, #284]	; (8000f9c <HAL_UART_RxCpltCallback+0x624>)
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000e7e:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000e82:	ee07 9a10 	vmov	s14, r9
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e86:	f896 9000 	ldrb.w	r9, [r6]
							volatile int32_t v_all = 0;
 8000e8a:	2600      	movs	r6, #0
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000e8c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e90:	fb07 f709 	mul.w	r7, r7, r9
							volatile int32_t v_all = 0;
 8000e94:	9605      	str	r6, [sp, #20]
							v_index = v_index+1>=MAX_V_FRAME?0:v_index+1;
 8000e96:	f1b9 0f08 	cmp.w	r9, #8
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e9a:	4e41      	ldr	r6, [pc, #260]	; (8000fa0 <HAL_UART_RxCpltCallback+0x628>)
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000e9c:	ee27 7b09 	vmul.f64	d7, d7, d9
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000ea0:	f846 b007 	str.w	fp, [r6, r7]
 8000ea4:	4437      	add	r7, r6
 8000ea6:	9e01      	ldr	r6, [sp, #4]
								v_all += v_buff[i][2];
 8000ea8:	f8dd b014 	ldr.w	fp, [sp, #20]
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000eac:	607e      	str	r6, [r7, #4]
								v_all += v_buff[i][2];
 8000eae:	4e3c      	ldr	r6, [pc, #240]	; (8000fa0 <HAL_UART_RxCpltCallback+0x628>)
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000eb0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000eb4:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 8000eb8:	ed87 6a02 	vstr	s12, [r7, #8]
								v_all += v_buff[i][2];
 8000ebc:	68b7      	ldr	r7, [r6, #8]
 8000ebe:	6976      	ldr	r6, [r6, #20]
 8000ec0:	445f      	add	r7, fp
 8000ec2:	9705      	str	r7, [sp, #20]
 8000ec4:	9f05      	ldr	r7, [sp, #20]
 8000ec6:	4437      	add	r7, r6
 8000ec8:	4e35      	ldr	r6, [pc, #212]	; (8000fa0 <HAL_UART_RxCpltCallback+0x628>)
 8000eca:	9705      	str	r7, [sp, #20]
 8000ecc:	9f05      	ldr	r7, [sp, #20]
 8000ece:	6a36      	ldr	r6, [r6, #32]
 8000ed0:	4437      	add	r7, r6
 8000ed2:	4e33      	ldr	r6, [pc, #204]	; (8000fa0 <HAL_UART_RxCpltCallback+0x628>)
 8000ed4:	9705      	str	r7, [sp, #20]
 8000ed6:	9f05      	ldr	r7, [sp, #20]
 8000ed8:	6af6      	ldr	r6, [r6, #44]	; 0x2c
 8000eda:	4437      	add	r7, r6
 8000edc:	4e30      	ldr	r6, [pc, #192]	; (8000fa0 <HAL_UART_RxCpltCallback+0x628>)
 8000ede:	9705      	str	r7, [sp, #20]
 8000ee0:	9f05      	ldr	r7, [sp, #20]
 8000ee2:	6bb6      	ldr	r6, [r6, #56]	; 0x38
 8000ee4:	4437      	add	r7, r6
 8000ee6:	4e2e      	ldr	r6, [pc, #184]	; (8000fa0 <HAL_UART_RxCpltCallback+0x628>)
 8000ee8:	9705      	str	r7, [sp, #20]
 8000eea:	9f05      	ldr	r7, [sp, #20]
 8000eec:	6c76      	ldr	r6, [r6, #68]	; 0x44
 8000eee:	4437      	add	r7, r6
 8000ef0:	4e2b      	ldr	r6, [pc, #172]	; (8000fa0 <HAL_UART_RxCpltCallback+0x628>)
 8000ef2:	9705      	str	r7, [sp, #20]
 8000ef4:	6d36      	ldr	r6, [r6, #80]	; 0x50
 8000ef6:	9f05      	ldr	r7, [sp, #20]
 8000ef8:	4437      	add	r7, r6
 8000efa:	4e29      	ldr	r6, [pc, #164]	; (8000fa0 <HAL_UART_RxCpltCallback+0x628>)
 8000efc:	9705      	str	r7, [sp, #20]
 8000efe:	9f05      	ldr	r7, [sp, #20]
 8000f00:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 8000f02:	4437      	add	r7, r6
 8000f04:	4e26      	ldr	r6, [pc, #152]	; (8000fa0 <HAL_UART_RxCpltCallback+0x628>)
 8000f06:	9705      	str	r7, [sp, #20]
 8000f08:	9f05      	ldr	r7, [sp, #20]
 8000f0a:	f8d6 b068 	ldr.w	fp, [r6, #104]	; 0x68
 8000f0e:	6f76      	ldr	r6, [r6, #116]	; 0x74
 8000f10:	445f      	add	r7, fp
 8000f12:	9705      	str	r7, [sp, #20]
 8000f14:	9f05      	ldr	r7, [sp, #20]
 8000f16:	443e      	add	r6, r7
							v_all /= MAX_V_FRAME;
 8000f18:	f04f 070a 	mov.w	r7, #10
								v_all += v_buff[i][2];
 8000f1c:	9605      	str	r6, [sp, #20]
							v_all /= MAX_V_FRAME;
 8000f1e:	9e05      	ldr	r6, [sp, #20]
 8000f20:	fb96 f6f7 	sdiv	r6, r6, r7
 8000f24:	9605      	str	r6, [sp, #20]
							enchall.w = (int16_t)(PI*v_all/100);
 8000f26:	ed9d 7a05 	vldr	s14, [sp, #20]
 8000f2a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000f2e:	ee27 7b08 	vmul.f64	d7, d7, d8
 8000f32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f36:	ee17 6a90 	vmov	r6, s15
 8000f3a:	f8aa 6014 	strh.w	r6, [sl, #20]
							v_index = v_index+1>=MAX_V_FRAME?0:v_index+1;
 8000f3e:	dc0f      	bgt.n	8000f60 <HAL_UART_RxCpltCallback+0x5e8>
 8000f40:	f109 0601 	add.w	r6, r9, #1
 8000f44:	b2f6      	uxtb	r6, r6
 8000f46:	4f15      	ldr	r7, [pc, #84]	; (8000f9c <HAL_UART_RxCpltCallback+0x624>)
 8000f48:	703e      	strb	r6, [r7, #0]
 8000f4a:	e6f3      	b.n	8000d34 <HAL_UART_RxCpltCallback+0x3bc>
						cnt_e = cnt_e<0?cnt_e+50000:cnt_e;
 8000f4c:	f8de 7000 	ldr.w	r7, [lr]
 8000f50:	f24c 3650 	movw	r6, #50000	; 0xc350
 8000f54:	443e      	add	r6, r7
 8000f56:	e6e4      	b.n	8000d22 <HAL_UART_RxCpltCallback+0x3aa>
							motorcurrent.target_cur = -motorcurrent.target_cur;
 8000f58:	4252      	negs	r2, r2
 8000f5a:	b212      	sxth	r2, r2
 8000f5c:	8202      	strh	r2, [r0, #16]
 8000f5e:	e734      	b.n	8000dca <HAL_UART_RxCpltCallback+0x452>
							v_index = v_index+1>=MAX_V_FRAME?0:v_index+1;
 8000f60:	2600      	movs	r6, #0
 8000f62:	e7f0      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x5ce>
 8000f64:	20003fc4 	.word	0x20003fc4
 8000f68:	20000058 	.word	0x20000058
 8000f6c:	20004018 	.word	0x20004018
 8000f70:	20003e78 	.word	0x20003e78
 8000f74:	20003ecc 	.word	0x20003ecc
 8000f78:	ffffde68 	.word	0xffffde68
 8000f7c:	20004078 	.word	0x20004078
 8000f80:	200000e8 	.word	0x200000e8
 8000f84:	2000004c 	.word	0x2000004c
 8000f88:	2000004e 	.word	0x2000004e
 8000f8c:	20000044 	.word	0x20000044
 8000f90:	20000054 	.word	0x20000054
 8000f94:	20004174 	.word	0x20004174
 8000f98:	ffffec78 	.word	0xffffec78
 8000f9c:	200000e4 	.word	0x200000e4
 8000fa0:	2000006c 	.word	0x2000006c
 8000fa4:	ffffb820 	.word	0xffffb820
 8000fa8:	20000048 	.word	0x20000048
 8000fac:	20000050 	.word	0x20000050
							ct = ct<-5000?enchall.recon_counter-last_recon+10000:ct;
 8000fb0:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000fb4:	b236      	sxth	r6, r6
 8000fb6:	e751      	b.n	8000e5c <HAL_UART_RxCpltCallback+0x4e4>
							ct = ct>5000?enchall.recon_counter-last_recon-10000:ct;
 8000fb8:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000fbc:	b236      	sxth	r6, r6
 8000fbe:	e73d      	b.n	8000e3c <HAL_UART_RxCpltCallback+0x4c4>
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e559      	b.n	8000a78 <HAL_UART_RxCpltCallback+0x100>

08000fc4 <StartledblueTask>:
/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000fc4:	4c05      	ldr	r4, [pc, #20]	; (8000fdc <StartledblueTask+0x18>)
{
 8000fc6:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000fc8:	4620      	mov	r0, r4
 8000fca:	2104      	movs	r1, #4
 8000fcc:	f002 f884 	bl	80030d8 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000fd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd4:	f004 f864 	bl	80050a0 <osDelay>
 8000fd8:	e7f6      	b.n	8000fc8 <StartledblueTask+0x4>
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <StartledgreenTask>:
/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000fe0:	4c05      	ldr	r4, [pc, #20]	; (8000ff8 <StartledgreenTask+0x18>)
{
 8000fe2:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	f002 f876 	bl	80030d8 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff0:	f004 f856 	bl	80050a0 <osDelay>
 8000ff4:	e7f6      	b.n	8000fe4 <StartledgreenTask+0x4>
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 8000ffc:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 8000ffe:	2032      	movs	r0, #50	; 0x32
 8001000:	f004 f84e 	bl	80050a0 <osDelay>
 8001004:	e7fb      	b.n	8000ffe <StartiwdgTask+0x2>
 8001006:	bf00      	nop

08001008 <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 800100c:	22c8      	movs	r2, #200	; 0xc8
 800100e:	2100      	movs	r1, #0
 8001010:	f240 37f5 	movw	r7, #1013	; 0x3f5
 8001014:	a802      	add	r0, sp, #8
 8001016:	f240 36f7 	movw	r6, #1015	; 0x3f7
 800101a:	f005 fd12 	bl	8006a42 <memset>
 800101e:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8001022:	f240 72df 	movw	r2, #2015	; 0x7df
 8001026:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800102a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800102e:	f240 7edc 	movw	lr, #2012	; 0x7dc
 8001032:	f8ad 7008 	strh.w	r7, [sp, #8]
 8001036:	f240 38f3 	movw	r8, #1011	; 0x3f3
 800103a:	f8ad 7016 	strh.w	r7, [sp, #22]
 800103e:	f240 7cdb 	movw	ip, #2011	; 0x7db
 8001042:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
 8001046:	f44f 777d 	mov.w	r7, #1012	; 0x3f4
 800104a:	f8ad 100a 	strh.w	r1, [sp, #10]
 800104e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8001052:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8001056:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800105a:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 800105e:	f240 71e5 	movw	r1, #2021	; 0x7e5
 8001062:	f8ad 200c 	strh.w	r2, [sp, #12]
 8001066:	f8ad 2012 	strh.w	r2, [sp, #18]
 800106a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800106e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8001072:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8001076:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800107a:	f8ad 6010 	strh.w	r6, [sp, #16]
 800107e:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8001082:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
 8001086:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800108a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800108e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8001092:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8001096:	f240 70e6 	movw	r0, #2022	; 0x7e6
 800109a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800109e:	f8ad 301c 	strh.w	r3, [sp, #28]
 80010a2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80010a6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 80010aa:	f8ad e01a 	strh.w	lr, [sp, #26]
 80010ae:	f8ad e026 	strh.w	lr, [sp, #38]	; 0x26
 80010b2:	f240 3eff 	movw	lr, #1023	; 0x3ff
 80010b6:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80010ba:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
 80010be:	f240 77e7 	movw	r7, #2023	; 0x7e7
 80010c2:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 80010c6:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 80010ca:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80010ce:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 80010d2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80010d6:	f8ad c020 	strh.w	ip, [sp, #32]
 80010da:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 80010de:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80010e2:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80010e6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80010ea:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
 80010ee:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 80010f2:	f44f 617b 	mov.w	r1, #4016	; 0xfb0
 80010f6:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 80010fa:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
			1013, 2013, 2012, 8000, 1011, 2011, 4000, 1012, 2012, 2013, 8000, 1015, 2015, 2013, 1012, 1000,
			1013, 2013, 2015, 8000, 1015, 2015, 4000,
			1021, 2021, 2022, 8000, 1023, 2023, 2000,
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
 80010fe:	2200      	movs	r2, #0
 8001100:	4c1f      	ldr	r4, [pc, #124]	; (8001180 <StartbuzzerrythmTask+0x178>)
 8001102:	4d20      	ldr	r5, [pc, #128]	; (8001184 <StartbuzzerrythmTask+0x17c>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8001104:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
 8001108:	f8ad 704e 	strh.w	r7, [sp, #78]	; 0x4e
 800110c:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 8001110:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 8001114:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8001118:	f8ad 005a 	strh.w	r0, [sp, #90]	; 0x5a
 800111c:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
	volatile uint16_t i = 0;
 8001120:	f8ad 2006 	strh.w	r2, [sp, #6]
 8001124:	e002      	b.n	800112c <StartbuzzerrythmTask+0x124>
			{
				i=i==SONGLENGTH-1?0:i+1;
			}
			xSemaphoreGive(buzzerMutexHandle);
		}
		osDelay(10);
 8001126:	200a      	movs	r0, #10
 8001128:	f003 ffba 	bl	80050a0 <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 800112c:	2300      	movs	r3, #0
 800112e:	6820      	ldr	r0, [r4, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4619      	mov	r1, r3
 8001134:	f004 fd76 	bl	8005c24 <xQueueGenericReceive>
 8001138:	2801      	cmp	r0, #1
 800113a:	d1f4      	bne.n	8001126 <StartbuzzerrythmTask+0x11e>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 800113c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8001140:	2300      	movs	r3, #0
 8001142:	ae02      	add	r6, sp, #8
 8001144:	6828      	ldr	r0, [r5, #0]
 8001146:	b289      	uxth	r1, r1
 8001148:	461a      	mov	r2, r3
 800114a:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800114e:	f004 fb5f 	bl	8005810 <xQueueGenericSend>
 8001152:	2801      	cmp	r0, #1
 8001154:	d006      	beq.n	8001164 <StartbuzzerrythmTask+0x15c>
			xSemaphoreGive(buzzerMutexHandle);
 8001156:	2300      	movs	r3, #0
 8001158:	6820      	ldr	r0, [r4, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	4619      	mov	r1, r3
 800115e:	f004 fb57 	bl	8005810 <xQueueGenericSend>
 8001162:	e7e0      	b.n	8001126 <StartbuzzerrythmTask+0x11e>
				i=i==SONGLENGTH-1?0:i+1;
 8001164:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001168:	b29b      	uxth	r3, r3
 800116a:	2b31      	cmp	r3, #49	; 0x31
 800116c:	d006      	beq.n	800117c <StartbuzzerrythmTask+0x174>
 800116e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001172:	3301      	adds	r3, #1
 8001174:	b29b      	uxth	r3, r3
 8001176:	f8ad 3006 	strh.w	r3, [sp, #6]
 800117a:	e7ec      	b.n	8001156 <StartbuzzerrythmTask+0x14e>
 800117c:	2300      	movs	r3, #0
 800117e:	e7fa      	b.n	8001176 <StartbuzzerrythmTask+0x16e>
 8001180:	20004064 	.word	0x20004064
 8001184:	20004058 	.word	0x20004058

08001188 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 8001188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800118c:	4c5e      	ldr	r4, [pc, #376]	; (8001308 <StartbuzzertoneTask+0x180>)
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 800118e:	f04f 0a00 	mov.w	sl, #0
 8001192:	4d5e      	ldr	r5, [pc, #376]	; (800130c <StartbuzzertoneTask+0x184>)
			//if all is 0 then no sound...
			//like 512 should be black[5-1] = 466.16/4   la+
			//013 should be white[3-1] = 329.63/4    mi
			//023 should be 2 * white[3-1] = 329.63/2
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
			time = tonedata/1000;
 8001194:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8001320 <StartbuzzertoneTask+0x198>
			black = (tonedata%1000)/100;
 8001198:	4f5d      	ldr	r7, [pc, #372]	; (8001310 <StartbuzzertoneTask+0x188>)
			num = (tonedata%100)/10;
 800119a:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8001324 <StartbuzzertoneTask+0x19c>
{
 800119e:	ed2d 8b04 	vpush	{d8-d9}
 80011a2:	b090      	sub	sp, #64	; 0x40
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
				osDelay(500/time); //time is used to shorter the sound..
 80011a4:	ed9f 9a5b 	vldr	s18, [pc, #364]	; 8001314 <StartbuzzertoneTask+0x18c>
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 80011a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011aa:	ae09      	add	r6, sp, #36	; 0x24
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 80011ac:	f10d 0e10 	add.w	lr, sp, #16
	volatile float tonefreq = 0, time = 0;;
 80011b0:	f8cd a008 	str.w	sl, [sp, #8]
 80011b4:	f8cd a00c 	str.w	sl, [sp, #12]
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 80011b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 80011be:	340c      	adds	r4, #12
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 80011c0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 80011c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
				SetbuzzerFreq(tonefreq);
 80011c6:	ed9f 8b4e 	vldr	d8, [pc, #312]	; 8001300 <StartbuzzertoneTask+0x178>
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 80011ca:	f8d4 c000 	ldr.w	ip, [r4]
 80011ce:	4e52      	ldr	r6, [pc, #328]	; (8001318 <StartbuzzertoneTask+0x190>)
 80011d0:	4c52      	ldr	r4, [pc, #328]	; (800131c <StartbuzzertoneTask+0x194>)
 80011d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80011d6:	f8ce c000 	str.w	ip, [lr]
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 80011da:	2300      	movs	r3, #0
 80011dc:	220a      	movs	r2, #10
 80011de:	f10d 0106 	add.w	r1, sp, #6
 80011e2:	6828      	ldr	r0, [r5, #0]
 80011e4:	f004 fd1e 	bl	8005c24 <xQueueGenericReceive>
 80011e8:	2801      	cmp	r0, #1
 80011ea:	d007      	beq.n	80011fc <StartbuzzertoneTask+0x74>
			xSemaphoreGive(buzzerMutexHandle);
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	2200      	movs	r2, #0
			osDelay(10);
 80011f0:	200a      	movs	r0, #10
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
			osDelay(10);
 80011f6:	f003 ff53 	bl	80050a0 <osDelay>
 80011fa:	e7ee      	b.n	80011da <StartbuzzertoneTask+0x52>
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 80011fc:	2300      	movs	r3, #0
 80011fe:	4602      	mov	r2, r0
 8001200:	6830      	ldr	r0, [r6, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	f004 fd0e 	bl	8005c24 <xQueueGenericReceive>
			time = tonedata/1000;
 8001208:	f8bd 1006 	ldrh.w	r1, [sp, #6]
			black = (tonedata%1000)/100;
 800120c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			time = tonedata/1000;
 8001210:	fba8 0301 	umull	r0, r3, r8, r1
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	ee07 3a90 	vmov	s15, r3
			black = (tonedata%1000)/100;
 800121a:	fb02 1213 	mls	r2, r2, r3, r1
			time = tonedata/1000;
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			black = (tonedata%1000)/100;
 8001222:	b292      	uxth	r2, r2
			time = tonedata/1000;
 8001224:	edcd 7a03 	vstr	s15, [sp, #12]
			if((tonedata%1000) != 0)
 8001228:	b3c2      	cbz	r2, 800129c <StartbuzzertoneTask+0x114>
			num = (tonedata%100)/10;
 800122a:	fba7 0301 	umull	r0, r3, r7, r1
 800122e:	2064      	movs	r0, #100	; 0x64
			black = (tonedata%1000)/100;
 8001230:	fba7 e202 	umull	lr, r2, r7, r2
			num = (tonedata%100)/10;
 8001234:	095b      	lsrs	r3, r3, #5
				if(black)
 8001236:	0952      	lsrs	r2, r2, #5
			num = (tonedata%100)/10;
 8001238:	fb00 1313 	mls	r3, r0, r3, r1
 800123c:	b29b      	uxth	r3, r3
 800123e:	fba9 0303 	umull	r0, r3, r9, r3
 8001242:	ea4f 03d3 	mov.w	r3, r3, lsr #3
				if(black)
 8001246:	d040      	beq.n	80012ca <StartbuzzertoneTask+0x142>
					tonefreq = tonetable_black[black-1] * num *2 ;
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	ab10      	add	r3, sp, #64	; 0x40
 800124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001252:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001256:	ed12 7a0d 	vldr	s14, [r2, #-52]	; 0xffffffcc
 800125a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800125e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001262:	edcd 7a02 	vstr	s15, [sp, #8]
				SetbuzzerFreq(tonefreq);
 8001266:	ed9d 6a02 	vldr	s12, [sp, #8]
 800126a:	2200      	movs	r2, #0
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8001272:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001276:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 800127a:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
			if(time!=0)
 8001280:	eddd 7a03 	vldr	s15, [sp, #12]
 8001284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	d112      	bne.n	80012b4 <StartbuzzertoneTask+0x12c>
			xSemaphoreGive(buzzerMutexHandle);
 800128e:	2300      	movs	r3, #0
 8001290:	6830      	ldr	r0, [r6, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4619      	mov	r1, r3
 8001296:	f004 fabb 	bl	8005810 <xQueueGenericSend>
 800129a:	e79e      	b.n	80011da <StartbuzzertoneTask+0x52>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 80012a2:	f8cd a008 	str.w	sl, [sp, #8]
			if(time!=0)
 80012a6:	eddd 7a03 	vldr	s15, [sp, #12]
 80012aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	d0ec      	beq.n	800128e <StartbuzzertoneTask+0x106>
				osDelay(500/time); //time is used to shorter the sound..
 80012b4:	ed9d 7a03 	vldr	s14, [sp, #12]
 80012b8:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80012bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c0:	ee17 0a90 	vmov	r0, s15
 80012c4:	f003 feec 	bl	80050a0 <osDelay>
 80012c8:	e7e1      	b.n	800128e <StartbuzzertoneTask+0x106>
			white  = tonedata%10;
 80012ca:	fba9 0201 	umull	r0, r2, r9, r1
					tonefreq = tonetable_white[white-1] * num *2;
 80012ce:	ee07 3a90 	vmov	s15, r3
			white  = tonedata%10;
 80012d2:	08d3      	lsrs	r3, r2, #3
					tonefreq = tonetable_white[white-1] * num *2;
 80012d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			white  = tonedata%10;
 80012d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012dc:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
					tonefreq = tonetable_white[white-1] * num *2;
 80012e0:	ab10      	add	r3, sp, #64	; 0x40
 80012e2:	b289      	uxth	r1, r1
 80012e4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80012e8:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 80012ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012f4:	edcd 7a02 	vstr	s15, [sp, #8]
 80012f8:	e7b5      	b.n	8001266 <StartbuzzertoneTask+0xde>
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	00000000 	.word	0x00000000
 8001304:	412e8480 	.word	0x412e8480
 8001308:	08007668 	.word	0x08007668
 800130c:	20004058 	.word	0x20004058
 8001310:	51eb851f 	.word	0x51eb851f
 8001314:	43fa0000 	.word	0x43fa0000
 8001318:	20004064 	.word	0x20004064
 800131c:	200041f4 	.word	0x200041f4
 8001320:	10624dd3 	.word	0x10624dd3
 8001324:	cccccccd 	.word	0xcccccccd

08001328 <SystemInitialization>:
extern void UART4_DMA2_Cplt_Callback(DMA_HandleTypeDef *_hdma);
//int32_t cur_u;
//int32_t cur_v;

void SystemInitialization(void)
{
 8001328:	b510      	push	{r4, lr}
	/*
	 * start tim2 for BUZZER
	 */
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800132a:	2100      	movs	r1, #0
	 * thus if we consider the driver delay and blabla...
	 * we choose the dead time to be 300ns~...
	 * lookinto the tim.c file the dead time is calculated by
	 * 1/216mhz * DeadTime,  thus we choose DeadTime to be 66~
	 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800132c:	4c18      	ldr	r4, [pc, #96]	; (8001390 <SystemInitialization+0x68>)
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800132e:	4819      	ldr	r0, [pc, #100]	; (8001394 <SystemInitialization+0x6c>)
 8001330:	f002 ff3c 	bl	80041ac <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 8001334:	4818      	ldr	r0, [pc, #96]	; (8001398 <SystemInitialization+0x70>)
 8001336:	f002 fe75 	bl	8004024 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800133a:	4620      	mov	r0, r4
 800133c:	2100      	movs	r1, #0
 800133e:	f002 ff35 	bl	80041ac <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8001342:	4620      	mov	r0, r4
 8001344:	2100      	movs	r1, #0
 8001346:	f003 f9a3 	bl	8004690 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800134a:	4620      	mov	r0, r4
 800134c:	2104      	movs	r1, #4
 800134e:	f002 ff2d 	bl	80041ac <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8001352:	4620      	mov	r0, r4
 8001354:	2104      	movs	r1, #4
 8001356:	f003 f99b 	bl	8004690 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800135a:	4620      	mov	r0, r4
 800135c:	2108      	movs	r1, #8
 800135e:	f002 ff25 	bl	80041ac <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8001362:	4620      	mov	r0, r4
 8001364:	2108      	movs	r1, #8
 8001366:	f003 f993 	bl	8004690 <HAL_TIMEx_PWMN_Start>

	/*
	 * register the call back of uart4 transmit..
	 */

	HAL_UART_Receive_DMA(&huart4,enchall_buff,5);
 800136a:	2205      	movs	r2, #5
 800136c:	490b      	ldr	r1, [pc, #44]	; (800139c <SystemInitialization+0x74>)
 800136e:	480c      	ldr	r0, [pc, #48]	; (80013a0 <SystemInitialization+0x78>)
 8001370:	f003 fb82 	bl	8004a78 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1,order_buff,7);
 8001374:	2207      	movs	r2, #7
 8001376:	490b      	ldr	r1, [pc, #44]	; (80013a4 <SystemInitialization+0x7c>)
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <SystemInitialization+0x80>)
 800137a:	f003 fb7d 	bl	8004a78 <HAL_UART_Receive_DMA>
//HAL_DMA_RegisterCallback(&hdma_uart4_rx,HAL_DMA_XFER_CPLT_CB_ID,UART4_DMA2_Cplt_Callback);
	/*
	 * DFSDM initial
	 */
	//polling mode
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0);
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <SystemInitialization+0x84>)
 8001380:	f001 fb4c 	bl	8002a1c <HAL_DFSDM_FilterRegularStart>
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <SystemInitialization+0x88>)
}
 8001386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 800138a:	f001 bb47 	b.w	8002a1c <HAL_DFSDM_FilterRegularStart>
 800138e:	bf00      	nop
 8001390:	200041b4 	.word	0x200041b4
 8001394:	200041f4 	.word	0x200041f4
 8001398:	20004174 	.word	0x20004174
 800139c:	20003e68 	.word	0x20003e68
 80013a0:	20004444 	.word	0x20004444
 80013a4:	20003e70 	.word	0x20003e70
 80013a8:	20004364 	.word	0x20004364
 80013ac:	20003e78 	.word	0x20003e78
 80013b0:	20003fc4 	.word	0x20003fc4

080013b4 <StartenchallTask>:
// debug view for visualization
//#define DVIEW


void StartenchallTask(void const * argument)
{
 80013b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013b8:	4d2b      	ldr	r5, [pc, #172]	; (8001468 <StartenchallTask+0xb4>)
 80013ba:	b09e      	sub	sp, #120	; 0x78
 80013bc:	4c2b      	ldr	r4, [pc, #172]	; (800146c <StartenchallTask+0xb8>)
		  datatosend[++i] = '\r';datatosend[++i] = '\n';


#endif
		  __HAL_UNLOCK(&huart1);
		  HAL_UART_Transmit(&huart1,datatosend,i,1);
 80013be:	462f      	mov	r7, r5
 80013c0:	4e2b      	ldr	r6, [pc, #172]	; (8001470 <StartenchallTask+0xbc>)
 80013c2:	e002      	b.n	80013ca <StartenchallTask+0x16>
	  }
	  //every 100mini
#ifdef DVIEW
	  osDelay(100);
#else
	  osDelay(5);
 80013c4:	2005      	movs	r0, #5
 80013c6:	f003 fe6b 	bl	80050a0 <osDelay>
	  if(xQueuePeek(enchallQueueHandle,&encdata,0)==pdPASS)
 80013ca:	2301      	movs	r3, #1
 80013cc:	2200      	movs	r2, #0
 80013ce:	a904      	add	r1, sp, #16
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	f004 fc27 	bl	8005c24 <xQueueGenericReceive>
 80013d6:	2801      	cmp	r0, #1
 80013d8:	d1f4      	bne.n	80013c4 <StartenchallTask+0x10>
		  memcpy(&datatosend[i],&encdata.recon_counter,sizeof(encdata.recon_counter)); //uint16
 80013da:	f8bd c018 	ldrh.w	ip, [sp, #24]
		  datatosend[i] = Header1; datatosend[++i] = Header2; i+=2;
 80013de:	f04f 0a54 	mov.w	sl, #84	; 0x54
		  memcpy(&datatosend[i],&encdata.z_count,sizeof(encdata.z_count));   //int16
 80013e2:	f8bd 801e 	ldrh.w	r8, [sp, #30]
		  datatosend[i] = Header1; datatosend[++i] = Header2; i+=2;
 80013e6:	f04f 0945 	mov.w	r9, #69	; 0x45
		  memcpy(&datatosend[i],&encdata.w,sizeof(encdata.w));                 //int16
 80013ea:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 80013ee:	4603      	mov	r3, r0
 80013f0:	2200      	movs	r2, #0
 80013f2:	a901      	add	r1, sp, #4
 80013f4:	6830      	ldr	r0, [r6, #0]
		  memcpy(&datatosend[i],&encdata.recon_counter,sizeof(encdata.recon_counter)); //uint16
 80013f6:	f8ad c02d 	strh.w	ip, [sp, #45]	; 0x2d
		  datatosend[i] = Header1; datatosend[++i] = Header2; i+=2;
 80013fa:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80013fe:	f88d 9029 	strb.w	r9, [sp, #41]	; 0x29
		  memcpy(&datatosend[i],&encdata.z_count,sizeof(encdata.z_count));   //int16
 8001402:	f8ad 802b 	strh.w	r8, [sp, #43]	; 0x2b
		  memcpy(&datatosend[i],&encdata.w,sizeof(encdata.w));                 //int16
 8001406:	f8ad e02f 	strh.w	lr, [sp, #47]	; 0x2f
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 800140a:	f004 fc0b 	bl	8005c24 <xQueueGenericReceive>
 800140e:	220b      	movs	r2, #11
 8001410:	2309      	movs	r3, #9
 8001412:	2801      	cmp	r0, #1
 8001414:	f04f 000a 	mov.w	r0, #10
 8001418:	4611      	mov	r1, r2
		  i += sizeof(encdata.w);
 800141a:	469c      	mov	ip, r3
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 800141c:	d01b      	beq.n	8001456 <StartenchallTask+0xa2>
		  datatosend[i] = Tail;
 800141e:	f10d 0e78 	add.w	lr, sp, #120	; 0x78
 8001422:	f04f 084e 	mov.w	r8, #78	; 0x4e
		  datatosend[++i] = '\r';datatosend[++i] = '\n';
 8001426:	f04f 090a 	mov.w	r9, #10
		  datatosend[i] = Tail;
 800142a:	4473      	add	r3, lr
		  datatosend[++i] = '\r';datatosend[++i] = '\n';
 800142c:	4470      	add	r0, lr
 800142e:	448e      	add	lr, r1
 8001430:	210d      	movs	r1, #13
		  datatosend[i] = Tail;
 8001432:	f803 8c50 	strb.w	r8, [r3, #-80]
		  __HAL_UNLOCK(&huart1);
 8001436:	f04f 0800 	mov.w	r8, #0
		  datatosend[2] = i;
 800143a:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
		  HAL_UART_Transmit(&huart1,datatosend,i,1);
 800143e:	2301      	movs	r3, #1
		  datatosend[++i] = '\r';datatosend[++i] = '\n';
 8001440:	f800 1c50 	strb.w	r1, [r0, #-80]
		  HAL_UART_Transmit(&huart1,datatosend,i,1);
 8001444:	a90a      	add	r1, sp, #40	; 0x28
 8001446:	4638      	mov	r0, r7
		  datatosend[++i] = '\r';datatosend[++i] = '\n';
 8001448:	f80e 9c50 	strb.w	r9, [lr, #-80]
		  __HAL_UNLOCK(&huart1);
 800144c:	f885 8068 	strb.w	r8, [r5, #104]	; 0x68
		  HAL_UART_Transmit(&huart1,datatosend,i,1);
 8001450:	f003 fa92 	bl	8004978 <HAL_UART_Transmit>
 8001454:	e7b6      	b.n	80013c4 <StartenchallTask+0x10>
			  memcpy(&datatosend[i],&conresdata.feedback_cq,sizeof(conresdata.feedback_cq)); //int16
 8001456:	9901      	ldr	r1, [sp, #4]
 8001458:	220f      	movs	r2, #15
 800145a:	230d      	movs	r3, #13
 800145c:	200e      	movs	r0, #14
 800145e:	f8cd 1031 	str.w	r1, [sp, #49]	; 0x31
 8001462:	4611      	mov	r1, r2
			  i += sizeof(conresdata.feedback_cd);
 8001464:	469c      	mov	ip, r3
 8001466:	e7da      	b.n	800141e <StartenchallTask+0x6a>
 8001468:	20004364 	.word	0x20004364
 800146c:	20004068 	.word	0x20004068
 8001470:	20004050 	.word	0x20004050

08001474 <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <MX_DFSDM1_Init+0xc4>)
 8001476:	4a31      	ldr	r2, [pc, #196]	; (800153c <MX_DFSDM1_Init+0xc8>)
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8001478:	4618      	mov	r0, r3
{
 800147a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800147e:	2400      	movs	r4, #0
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001480:	2501      	movs	r5, #1
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 8001482:	2602      	movs	r6, #2
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001484:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 8001488:	f44f 7780 	mov.w	r7, #256	; 0x100
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800148c:	721d      	strb	r5, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800148e:	725d      	strb	r5, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001490:	f8c3 801c 	str.w	r8, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 8001494:	621f      	str	r7, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 8001496:	625e      	str	r6, [r3, #36]	; 0x24
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001498:	e883 0014 	stmia.w	r3, {r2, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 800149c:	f001 fa1e 	bl	80028dc <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <MX_DFSDM1_Init+0xcc>)
 80014a2:	4a28      	ldr	r2, [pc, #160]	; (8001544 <MX_DFSDM1_Init+0xd0>)
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80014a4:	4618      	mov	r0, r3
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80014a6:	f8c3 801c 	str.w	r8, [r3, #28]
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80014aa:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80014ac:	605c      	str	r4, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80014ae:	721d      	strb	r5, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80014b0:	725d      	strb	r5, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
 80014b2:	621f      	str	r7, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
 80014b4:	625e      	str	r6, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80014b6:	f001 fa11 	bl	80028dc <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <MX_DFSDM1_Init+0xd4>)
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014bc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80014c0:	4922      	ldr	r1, [pc, #136]	; (800154c <MX_DFSDM1_Init+0xd8>)
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
  hdfsdm1_channel0.Init.Offset = 0;
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80014c2:	4618      	mov	r0, r3
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80014c4:	60de      	str	r6, [r3, #12]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80014c6:	711c      	strb	r4, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80014c8:	609c      	str	r4, [r3, #8]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80014ca:	611c      	str	r4, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80014cc:	615c      	str	r4, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80014ce:	619c      	str	r4, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80014d0:	61dc      	str	r4, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80014d2:	621c      	str	r4, [r3, #32]
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80014d4:	629d      	str	r5, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80014d6:	62dc      	str	r4, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80014d8:	631c      	str	r4, [r3, #48]	; 0x30
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80014da:	6019      	str	r1, [r3, #0]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80014de:	f001 f933 	bl	8002748 <HAL_DFSDM_ChannelInit>
 80014e2:	bb28      	cbnz	r0, 8001530 <MX_DFSDM1_Init+0xbc>
  {
    Error_Handler();
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 80014e6:	2200      	movs	r2, #0
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 80014e8:	2502      	movs	r5, #2
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80014ea:	4e1a      	ldr	r6, [pc, #104]	; (8001554 <MX_DFSDM1_Init+0xe0>)
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014ec:	f44f 0440 	mov.w	r4, #12582912	; 0xc00000
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80014f0:	2101      	movs	r1, #1
  hdfsdm1_channel3.Init.Offset = 0;
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 80014f2:	4618      	mov	r0, r3
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80014f4:	601e      	str	r6, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 80014f6:	60dd      	str	r5, [r3, #12]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014f8:	625c      	str	r4, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80014fa:	6299      	str	r1, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 80014fc:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80014fe:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001500:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001502:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001504:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001506:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001508:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Offset = 0;
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 800150e:	f001 f91b 	bl	8002748 <HAL_DFSDM_ChannelInit>
 8001512:	b108      	cbz	r0, 8001518 <MX_DFSDM1_Init+0xa4>
  {
    Error_Handler();
 8001514:	f000 fbec 	bl	8001cf0 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 8001518:	2201      	movs	r2, #1
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_DFSDM1_Init+0xc4>)
 800151c:	4611      	mov	r1, r2
 800151e:	f001 fa53 	bl	80029c8 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 8001522:	2201      	movs	r2, #1
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <MX_DFSDM1_Init+0xe4>)
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_DFSDM1_Init+0xcc>)

}
 8001528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 800152c:	f001 ba4c 	b.w	80029c8 <HAL_DFSDM_FilterConfigRegChannel>
    Error_Handler();
 8001530:	f000 fbde 	bl	8001cf0 <Error_Handler>
 8001534:	e7d6      	b.n	80014e4 <MX_DFSDM1_Init+0x70>
 8001536:	bf00      	nop
 8001538:	20003e78 	.word	0x20003e78
 800153c:	40017500 	.word	0x40017500
 8001540:	20003fc4 	.word	0x20003fc4
 8001544:	40017580 	.word	0x40017580
 8001548:	20004018 	.word	0x20004018
 800154c:	40017400 	.word	0x40017400
 8001550:	20003ecc 	.word	0x20003ecc
 8001554:	40017460 	.word	0x40017460
 8001558:	00030008 	.word	0x00030008

0800155c <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 800155e:	4c50      	ldr	r4, [pc, #320]	; (80016a0 <HAL_DFSDM_FilterMspInit+0x144>)
{
 8001560:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	2300      	movs	r3, #0
{
 8001564:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 8001566:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	9304      	str	r3, [sp, #16]
 800156a:	9303      	str	r3, [sp, #12]
 800156c:	9305      	str	r3, [sp, #20]
 800156e:	9306      	str	r3, [sp, #24]
 8001570:	9307      	str	r3, [sp, #28]
  if(DFSDM1_Init == 0)
 8001572:	2a00      	cmp	r2, #0
 8001574:	d131      	bne.n	80015da <HAL_DFSDM_FilterMspInit+0x7e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001576:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <HAL_DFSDM_FilterMspInit+0x148>)
 8001578:	6813      	ldr	r3, [r2, #0]
 800157a:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800157c:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800157e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001580:	d034      	beq.n	80015ec <HAL_DFSDM_FilterMspInit+0x90>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_DFSDM_FilterMspInit+0x14c>)
    PE4     ------> DFSDM1_DATIN3
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001584:	2030      	movs	r0, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001588:	270a      	movs	r7, #10
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800158a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	f042 0210 	orr.w	r2, r2, #16
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
 8001594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001596:	f002 0210 	and.w	r2, r2, #16
 800159a:	9201      	str	r2, [sp, #4]
 800159c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	f042 0208 	orr.w	r2, r2, #8
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015a8:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ae:	483f      	ldr	r0, [pc, #252]	; (80016ac <HAL_DFSDM_FilterMspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80015b0:	9707      	str	r7, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80015b2:	2718      	movs	r7, #24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ba:	f001 fc5f 	bl	8002e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015c0:	2206      	movs	r2, #6
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c2:	a903      	add	r1, sp, #12
 80015c4:	483a      	ldr	r0, [pc, #232]	; (80016b0 <HAL_DFSDM_FilterMspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80015cc:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015ce:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d0:	f001 fc54 	bl	8002e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80015da:	682b      	ldr	r3, [r5, #0]
 80015dc:	4a35      	ldr	r2, [pc, #212]	; (80016b4 <HAL_DFSDM_FilterMspInit+0x158>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d033      	beq.n	800164a <HAL_DFSDM_FilterMspInit+0xee>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 80015e2:	4a35      	ldr	r2, [pc, #212]	; (80016b8 <HAL_DFSDM_FilterMspInit+0x15c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d00c      	beq.n	8001602 <HAL_DFSDM_FilterMspInit+0xa6>
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
  }

}
 80015e8:	b009      	add	sp, #36	; 0x24
 80015ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_DFSDM_FilterMspInit+0x14c>)
 80015ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	9b00      	ldr	r3, [sp, #0]
 8001600:	e7bf      	b.n	8001582 <HAL_DFSDM_FilterMspInit+0x26>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8001602:	f502 426e 	add.w	r2, r2, #60928	; 0xee00
 8001606:	4c2d      	ldr	r4, [pc, #180]	; (80016bc <HAL_DFSDM_FilterMspInit+0x160>)
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8001608:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 800160c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8001610:	32a8      	adds	r2, #168	; 0xa8
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001612:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001616:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800161a:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 800161e:	6022      	str	r2, [r4, #0]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001620:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8001624:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001626:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001628:	6120      	str	r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 800162a:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800162c:	6167      	str	r7, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800162e:	61a6      	str	r6, [r4, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001630:	61e1      	str	r1, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001632:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001634:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001636:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001638:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 800163a:	f001 fa6d 	bl	8002b18 <HAL_DMA_Init>
 800163e:	bb58      	cbnz	r0, 8001698 <HAL_DFSDM_FilterMspInit+0x13c>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8001640:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8001642:	62ac      	str	r4, [r5, #40]	; 0x28
 8001644:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8001646:	b009      	add	sp, #36	; 0x24
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800164a:	f502 426f 	add.w	r2, r2, #61184	; 0xef00
 800164e:	4c1c      	ldr	r4, [pc, #112]	; (80016c0 <HAL_DFSDM_FilterMspInit+0x164>)
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8001650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001654:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001658:	3210      	adds	r2, #16
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800165a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800165e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001662:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001666:	6022      	str	r2, [r4, #0]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001668:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800166c:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166e:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001670:	6120      	str	r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001672:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001674:	6167      	str	r7, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001676:	61a6      	str	r6, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001678:	61e1      	str	r1, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 800167a:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800167c:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800167e:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001680:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001682:	f001 fa49 	bl	8002b18 <HAL_DMA_Init>
 8001686:	b920      	cbnz	r0, 8001692 <HAL_DFSDM_FilterMspInit+0x136>
 8001688:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800168a:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800168c:	62ac      	str	r4, [r5, #40]	; 0x28
 800168e:	63a5      	str	r5, [r4, #56]	; 0x38
 8001690:	e7a7      	b.n	80015e2 <HAL_DFSDM_FilterMspInit+0x86>
      Error_Handler();
 8001692:	f000 fb2d 	bl	8001cf0 <Error_Handler>
 8001696:	e7f7      	b.n	8001688 <HAL_DFSDM_FilterMspInit+0x12c>
      Error_Handler();
 8001698:	f000 fb2a 	bl	8001cf0 <Error_Handler>
 800169c:	e7d0      	b.n	8001640 <HAL_DFSDM_FilterMspInit+0xe4>
 800169e:	bf00      	nop
 80016a0:	200000f0 	.word	0x200000f0
 80016a4:	200000f4 	.word	0x200000f4
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	40017500 	.word	0x40017500
 80016b8:	40017580 	.word	0x40017580
 80016bc:	20003f04 	.word	0x20003f04
 80016c0:	20003f64 	.word	0x20003f64

080016c4 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 80016c6:	4c25      	ldr	r4, [pc, #148]	; (800175c <HAL_DFSDM_ChannelMspInit+0x98>)
{
 80016c8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	2300      	movs	r3, #0
  if(DFSDM1_Init == 0)
 80016cc:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	9304      	str	r3, [sp, #16]
 80016d0:	9303      	str	r3, [sp, #12]
 80016d2:	9305      	str	r3, [sp, #20]
 80016d4:	9306      	str	r3, [sp, #24]
 80016d6:	9307      	str	r3, [sp, #28]
  if(DFSDM1_Init == 0)
 80016d8:	2a00      	cmp	r2, #0
 80016da:	d131      	bne.n	8001740 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016dc:	4a20      	ldr	r2, [pc, #128]	; (8001760 <HAL_DFSDM_ChannelMspInit+0x9c>)
 80016de:	6813      	ldr	r3, [r2, #0]
 80016e0:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016e2:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016e6:	d02d      	beq.n	8001744 <HAL_DFSDM_ChannelMspInit+0x80>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_DFSDM_ChannelMspInit+0xa0>)
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80016ec:	260a      	movs	r6, #10
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016ee:	2730      	movs	r7, #48	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f2:	a903      	add	r1, sp, #12
 80016f4:	481c      	ldr	r0, [pc, #112]	; (8001768 <HAL_DFSDM_ChannelMspInit+0xa4>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f6:	f042 0210 	orr.w	r2, r2, #16
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
 80016fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016fe:	f002 0210 	and.w	r2, r2, #16
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001708:	f042 0208 	orr.w	r2, r2, #8
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001710:	9607      	str	r6, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001712:	2618      	movs	r6, #24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001714:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001718:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001720:	f001 fbac 	bl	8002e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001726:	2206      	movs	r2, #6
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001728:	a903      	add	r1, sp, #12
 800172a:	4810      	ldr	r0, [pc, #64]	; (800176c <HAL_DFSDM_ChannelMspInit+0xa8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001732:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001734:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001736:	f001 fba1 	bl	8002e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	6023      	str	r3, [r4, #0]
  }
}
 8001740:	b009      	add	sp, #36	; 0x24
 8001742:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8001746:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001748:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800174c:	645a      	str	r2, [r3, #68]	; 0x44
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	9b00      	ldr	r3, [sp, #0]
 8001758:	e7c6      	b.n	80016e8 <HAL_DFSDM_ChannelMspInit+0x24>
 800175a:	bf00      	nop
 800175c:	200000f0 	.word	0x200000f0
 8001760:	200000f4 	.word	0x200000f4
 8001764:	40023800 	.word	0x40023800
 8001768:	40021000 	.word	0x40021000
 800176c:	40020c00 	.word	0x40020c00

08001770 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <MX_DMA_Init+0x70>)
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2105      	movs	r1, #5
 8001776:	200d      	movs	r0, #13
{
 8001778:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 800177a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 800177c:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800177e:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 8001782:	631c      	str	r4, [r3, #48]	; 0x30
 8001784:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001786:	f404 0480 	and.w	r4, r4, #4194304	; 0x400000
 800178a:	9400      	str	r4, [sp, #0]
 800178c:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800178e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001790:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8001794:	631c      	str	r4, [r3, #48]	; 0x30
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80017a0:	f000 ff8c 	bl	80026bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80017a4:	200d      	movs	r0, #13
 80017a6:	f000 ffc3 	bl	8002730 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2106      	movs	r1, #6
 80017ae:	2038      	movs	r0, #56	; 0x38
 80017b0:	f000 ff84 	bl	80026bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017b4:	2038      	movs	r0, #56	; 0x38
 80017b6:	f000 ffbb 	bl	8002730 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2106      	movs	r1, #6
 80017be:	2039      	movs	r0, #57	; 0x39
 80017c0:	f000 ff7c 	bl	80026bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017c4:	2039      	movs	r0, #57	; 0x39
 80017c6:	f000 ffb3 	bl	8002730 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2105      	movs	r1, #5
 80017ce:	203a      	movs	r0, #58	; 0x3a
 80017d0:	f000 ff74 	bl	80026bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017d4:	203a      	movs	r0, #58	; 0x3a
 80017d6:	f000 ffab 	bl	8002730 <HAL_NVIC_EnableIRQ>

}
 80017da:	b002      	add	sp, #8
 80017dc:	bd10      	pop	{r4, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e6:	b0af      	sub	sp, #188	; 0xbc
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of buzzerMutex */
  osMutexDef(buzzerMutex);
 80017e8:	2500      	movs	r5, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of enchallTask */
  osThreadDef(enchallTask, StartenchallTask, osPriorityIdle, 0, 128);
 80017ea:	4c52      	ldr	r4, [pc, #328]	; (8001934 <MX_FREERTOS_Init+0x150>)
  osMutexDef(buzzerMutex);
 80017ec:	a82e      	add	r0, sp, #184	; 0xb8
  osThreadDef(enchallTask, StartenchallTask, osPriorityIdle, 0, 128);
 80017ee:	ae0b      	add	r6, sp, #44	; 0x2c
 80017f0:	4627      	mov	r7, r4
  osMutexDef(buzzerMutex);
 80017f2:	f840 5db8 	str.w	r5, [r0, #-184]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 80017f6:	f003 fc5b 	bl	80050b0 <osMutexCreate>
 80017fa:	4b4f      	ldr	r3, [pc, #316]	; (8001938 <MX_FREERTOS_Init+0x154>)
 80017fc:	6018      	str	r0, [r3, #0]
  osThreadDef(enchallTask, StartenchallTask, osPriorityIdle, 0, 128);
 80017fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001800:	683f      	ldr	r7, [r7, #0]
 8001802:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8001804:	4629      	mov	r1, r5
 8001806:	a80b      	add	r0, sp, #44	; 0x2c
  osThreadDef(enchallTask, StartenchallTask, osPriorityIdle, 0, 128);
 8001808:	6037      	str	r7, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 800180a:	f003 fc31 	bl	8005070 <osThreadCreate>

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartcontrolTask, osPriorityIdle, 0, 128);
 800180e:	f104 0714 	add.w	r7, r4, #20
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8001812:	4b4a      	ldr	r3, [pc, #296]	; (800193c <MX_FREERTOS_Init+0x158>)
  osThreadDef(controlTask, StartcontrolTask, osPriorityIdle, 0, 128);
 8001814:	ae10      	add	r6, sp, #64	; 0x40
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8001816:	6018      	str	r0, [r3, #0]
  osThreadDef(controlTask, StartcontrolTask, osPriorityIdle, 0, 128);
 8001818:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800181a:	683f      	ldr	r7, [r7, #0]
 800181c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 800181e:	4629      	mov	r1, r5
 8001820:	a810      	add	r0, sp, #64	; 0x40
  osThreadDef(controlTask, StartcontrolTask, osPriorityIdle, 0, 128);
 8001822:	6037      	str	r7, [r6, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8001824:	f003 fc24 	bl	8005070 <osThreadCreate>

  /* definition and creation of ledblueTask */
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8001828:	f104 0728 	add.w	r7, r4, #40	; 0x28
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 800182c:	4b44      	ldr	r3, [pc, #272]	; (8001940 <MX_FREERTOS_Init+0x15c>)
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 800182e:	ae15      	add	r6, sp, #84	; 0x54
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8001830:	6018      	str	r0, [r3, #0]
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8001832:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001834:	683f      	ldr	r7, [r7, #0]
 8001836:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8001838:	4629      	mov	r1, r5
 800183a:	a815      	add	r0, sp, #84	; 0x54
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 800183c:	6037      	str	r7, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 800183e:	f003 fc17 	bl	8005070 <osThreadCreate>

  /* definition and creation of ledgreenTask */
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8001842:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <MX_FREERTOS_Init+0x160>)
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8001848:	ae1a      	add	r6, sp, #104	; 0x68
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 800184a:	6018      	str	r0, [r3, #0]
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 800184c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800184e:	683f      	ldr	r7, [r7, #0]
 8001850:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8001852:	4629      	mov	r1, r5
 8001854:	a81a      	add	r0, sp, #104	; 0x68
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8001856:	6037      	str	r7, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8001858:	f003 fc0a 	bl	8005070 <osThreadCreate>

  /* definition and creation of iwdgTask */
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 800185c:	f104 0750 	add.w	r7, r4, #80	; 0x50
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8001860:	4b39      	ldr	r3, [pc, #228]	; (8001948 <MX_FREERTOS_Init+0x164>)
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8001862:	ae1f      	add	r6, sp, #124	; 0x7c
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8001864:	6018      	str	r0, [r3, #0]
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8001866:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001868:	683f      	ldr	r7, [r7, #0]
 800186a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 800186c:	4629      	mov	r1, r5
 800186e:	a81f      	add	r0, sp, #124	; 0x7c
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8001870:	6037      	str	r7, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8001872:	f003 fbfd 	bl	8005070 <osThreadCreate>

  /* definition and creation of buzzertoneTask */
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8001876:	f104 0764 	add.w	r7, r4, #100	; 0x64
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <MX_FREERTOS_Init+0x168>)
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 800187c:	ae24      	add	r6, sp, #144	; 0x90
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 800187e:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8001880:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001882:	683f      	ldr	r7, [r7, #0]
 8001884:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8001886:	4629      	mov	r1, r5
 8001888:	a824      	add	r0, sp, #144	; 0x90
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 800188a:	6037      	str	r7, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 800188c:	f003 fbf0 	bl	8005070 <osThreadCreate>

  /* definition and creation of buzzerrythmTask */
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8001890:	f104 0778 	add.w	r7, r4, #120	; 0x78
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <MX_FREERTOS_Init+0x16c>)
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8001896:	ae29      	add	r6, sp, #164	; 0xa4
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8001898:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 800189a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800189c:	683f      	ldr	r7, [r7, #0]
 800189e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 80018a0:	4629      	mov	r1, r5
 80018a2:	a829      	add	r0, sp, #164	; 0xa4
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 80018a4:	6037      	str	r7, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 80018a6:	f003 fbe3 	bl	8005070 <osThreadCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of buzzerQueue */
  osMessageQDef(buzzerQueue, 1, uint16_t);
 80018aa:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 80018ae:	4929      	ldr	r1, [pc, #164]	; (8001954 <MX_FREERTOS_Init+0x170>)
  osMessageQDef(buzzerQueue, 1, uint16_t);
 80018b0:	ab01      	add	r3, sp, #4
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 80018b2:	6008      	str	r0, [r1, #0]
  osMessageQDef(buzzerQueue, 1, uint16_t);
 80018b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b8:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 80018bc:	4629      	mov	r1, r5
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fbfa 	bl	80050b8 <osMessageCreate>

  /* definition and creation of rythmQueue */
  osMessageQDef(rythmQueue, 32, uint16_t);
 80018c4:	f104 0294 	add.w	r2, r4, #148	; 0x94
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 80018c8:	4923      	ldr	r1, [pc, #140]	; (8001958 <MX_FREERTOS_Init+0x174>)
  osMessageQDef(rythmQueue, 32, uint16_t);
 80018ca:	ab03      	add	r3, sp, #12
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 80018cc:	6008      	str	r0, [r1, #0]
  osMessageQDef(rythmQueue, 32, uint16_t);
 80018ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d2:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 80018d6:	4629      	mov	r1, r5
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fbed 	bl	80050b8 <osMessageCreate>

  /* definition and creation of enchallQueue */
  osMessageQDef(enchallQueue, 1, ENCHD);
 80018de:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 80018e2:	491e      	ldr	r1, [pc, #120]	; (800195c <MX_FREERTOS_Init+0x178>)
  osMessageQDef(enchallQueue, 1, ENCHD);
 80018e4:	ab05      	add	r3, sp, #20
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 80018e6:	6008      	str	r0, [r1, #0]
  osMessageQDef(enchallQueue, 1, ENCHD);
 80018e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ec:	e883 0003 	stmia.w	r3, {r0, r1}
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 80018f0:	4629      	mov	r1, r5
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fbe0 	bl	80050b8 <osMessageCreate>

  /* definition and creation of shuntQueue */
  osMessageQDef(shuntQueue, 1, CURDATA);
 80018f8:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 80018fc:	4918      	ldr	r1, [pc, #96]	; (8001960 <MX_FREERTOS_Init+0x17c>)
  osMessageQDef(shuntQueue, 1, CURDATA);
 80018fe:	ab07      	add	r3, sp, #28
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);

  /* definition and creation of conresQueue */
  osMessageQDef(conresQueue, 1, CONRES);
 8001900:	34ac      	adds	r4, #172	; 0xac
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 8001902:	6008      	str	r0, [r1, #0]
  osMessageQDef(shuntQueue, 1, CURDATA);
 8001904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001908:	e883 0003 	stmia.w	r3, {r0, r1}
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 800190c:	4629      	mov	r1, r5
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fbd2 	bl	80050b8 <osMessageCreate>
 8001914:	4a13      	ldr	r2, [pc, #76]	; (8001964 <MX_FREERTOS_Init+0x180>)
  osMessageQDef(conresQueue, 1, CONRES);
 8001916:	ab09      	add	r3, sp, #36	; 0x24
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 8001918:	6010      	str	r0, [r2, #0]
  osMessageQDef(conresQueue, 1, CONRES);
 800191a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800191e:	e883 0003 	stmia.w	r3, {r0, r1}
  conresQueueHandle = osMessageCreate(osMessageQ(conresQueue), NULL);
 8001922:	4629      	mov	r1, r5
 8001924:	4618      	mov	r0, r3
 8001926:	f003 fbc7 	bl	80050b8 <osMessageCreate>
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_FREERTOS_Init+0x184>)
 800192c:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  /* USER CODE END RTOS_QUEUES */
}
 800192e:	b02f      	add	sp, #188	; 0xbc
 8001930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001932:	bf00      	nop
 8001934:	08007698 	.word	0x08007698
 8001938:	20004064 	.word	0x20004064
 800193c:	20004060 	.word	0x20004060
 8001940:	2000406c 	.word	0x2000406c
 8001944:	20004074 	.word	0x20004074
 8001948:	20004070 	.word	0x20004070
 800194c:	2000407c 	.word	0x2000407c
 8001950:	20004054 	.word	0x20004054
 8001954:	20004080 	.word	0x20004080
 8001958:	20004058 	.word	0x20004058
 800195c:	2000405c 	.word	0x2000405c
 8001960:	20004068 	.word	0x20004068
 8001964:	20004078 	.word	0x20004078
 8001968:	20004050 	.word	0x20004050

0800196c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800196c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001970:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <MX_GPIO_Init+0xfc>)
{
 8001972:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001978:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8001a74 <MX_GPIO_Init+0x108>
 800197c:	210c      	movs	r1, #12
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001980:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	9407      	str	r4, [sp, #28]
 8001984:	9409      	str	r4, [sp, #36]	; 0x24
 8001986:	940a      	str	r4, [sp, #40]	; 0x28
 8001988:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800198a:	6b18      	ldr	r0, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800198c:	4e37      	ldr	r6, [pc, #220]	; (8001a6c <MX_GPIO_Init+0x100>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800198e:	f040 0010 	orr.w	r0, r0, #16
 8001992:	6318      	str	r0, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001994:	4640      	mov	r0, r8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001998:	f007 0710 	and.w	r7, r7, #16
 800199c:	9701      	str	r7, [sp, #4]
 800199e:	9f01      	ldr	r7, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019a2:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 80019a6:	631f      	str	r7, [r3, #48]	; 0x30
 80019a8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019aa:	f007 0780 	and.w	r7, r7, #128	; 0x80
 80019ae:	9702      	str	r7, [sp, #8]
 80019b0:	9f02      	ldr	r7, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019b4:	f047 0704 	orr.w	r7, r7, #4
 80019b8:	631f      	str	r7, [r3, #48]	; 0x30
 80019ba:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019bc:	f007 0704 	and.w	r7, r7, #4
 80019c0:	9703      	str	r7, [sp, #12]
 80019c2:	9f03      	ldr	r7, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019c6:	432f      	orrs	r7, r5
 80019c8:	631f      	str	r7, [r3, #48]	; 0x30
 80019ca:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019cc:	402f      	ands	r7, r5
 80019ce:	9704      	str	r7, [sp, #16]
 80019d0:	9f04      	ldr	r7, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019d4:	f047 0702 	orr.w	r7, r7, #2
 80019d8:	631f      	str	r7, [r3, #48]	; 0x30
 80019da:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019dc:	f007 0702 	and.w	r7, r7, #2
 80019e0:	9705      	str	r7, [sp, #20]
 80019e2:	9f05      	ldr	r7, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e4:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019e6:	f047 0708 	orr.w	r7, r7, #8
 80019ea:	631f      	str	r7, [r3, #48]	; 0x30
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 80019ee:	4f20      	ldr	r7, [pc, #128]	; (8001a70 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	9306      	str	r3, [sp, #24]
 80019f6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 80019f8:	f001 fb6a 	bl	80030d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80019fc:	4622      	mov	r2, r4
 80019fe:	4630      	mov	r0, r6
 8001a00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001a04:	f001 fb64 	bl	80030d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8001a08:	4622      	mov	r2, r4
 8001a0a:	4638      	mov	r0, r7
 8001a0c:	2140      	movs	r1, #64	; 0x40
 8001a0e:	f001 fb5f 	bl	80030d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8001a12:	220c      	movs	r2, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a14:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a16:	4640      	mov	r0, r8
 8001a18:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8001a1a:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a1c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a22:	f001 fa2b 	bl	8002e7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2a:	a907      	add	r1, sp, #28
 8001a2c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a30:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a36:	f001 fa21 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a3e:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	4630      	mov	r0, r6
 8001a42:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a44:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a46:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4c:	f001 fa16 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8001a50:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8001a52:	a907      	add	r1, sp, #28
 8001a54:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a58:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a5a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8001a5c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f001 fa0d 	bl	8002e7c <HAL_GPIO_Init>

}
 8001a62:	b00c      	add	sp, #48	; 0x30
 8001a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40021000 	.word	0x40021000

08001a78 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001a78:	b538      	push	{r3, r4, r5, lr}

  hi2c4.Instance = I2C4;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_I2C4_Init+0x50>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
 8001a7c:	2200      	movs	r2, #0
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7e:	2101      	movs	r1, #1
  hi2c4.Instance = I2C4;
 8001a80:	4d12      	ldr	r5, [pc, #72]	; (8001acc <MX_I2C4_Init+0x54>)
  hi2c4.Init.Timing = 0x20404768;
 8001a82:	4c13      	ldr	r4, [pc, #76]	; (8001ad0 <MX_I2C4_Init+0x58>)
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a84:	4618      	mov	r0, r3
  hi2c4.Instance = I2C4;
 8001a86:	601d      	str	r5, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001a88:	605c      	str	r4, [r3, #4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a8a:	60d9      	str	r1, [r3, #12]
  hi2c4.Init.OwnAddress1 = 0;
 8001a8c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a8e:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001a90:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a92:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a94:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a98:	f001 fb22 	bl	80030e0 <HAL_I2C_Init>
 8001a9c:	b988      	cbnz	r0, 8001ac2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <MX_I2C4_Init+0x50>)
 8001aa2:	f001 fb73 	bl	800318c <HAL_I2CEx_ConfigAnalogFilter>
 8001aa6:	b948      	cbnz	r0, 8001abc <MX_I2C4_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <MX_I2C4_Init+0x50>)
 8001aac:	f001 fb96 	bl	80031dc <HAL_I2CEx_ConfigDigitalFilter>
 8001ab0:	b900      	cbnz	r0, 8001ab4 <MX_I2C4_Init+0x3c>
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}
  {
    Error_Handler();
  }

}
 8001ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001ab8:	f000 b91a 	b.w	8001cf0 <Error_Handler>
    Error_Handler();
 8001abc:	f000 f918 	bl	8001cf0 <Error_Handler>
 8001ac0:	e7f2      	b.n	8001aa8 <MX_I2C4_Init+0x30>
    Error_Handler();
 8001ac2:	f000 f915 	bl	8001cf0 <Error_Handler>
 8001ac6:	e7ea      	b.n	8001a9e <MX_I2C4_Init+0x26>
 8001ac8:	20004084 	.word	0x20004084
 8001acc:	40006000 	.word	0x40006000
 8001ad0:	20404768 	.word	0x20404768

08001ad4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C4)
 8001ad4:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	2300      	movs	r3, #0
  if(i2cHandle->Instance==I2C4)
 8001ad8:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_I2C_MspInit+0x68>)
{
 8001ada:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(i2cHandle->Instance==I2C4)
 8001adc:	4291      	cmp	r1, r2
{
 8001ade:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	9304      	str	r3, [sp, #16]
 8001ae2:	9303      	str	r3, [sp, #12]
 8001ae4:	9305      	str	r3, [sp, #20]
 8001ae6:	9306      	str	r3, [sp, #24]
 8001ae8:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C4)
 8001aea:	d001      	beq.n	8001af0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001aec:	b009      	add	sp, #36	; 0x24
 8001aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af0:	4c13      	ldr	r4, [pc, #76]	; (8001b40 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001af2:	f44f 5e40 	mov.w	lr, #12288	; 0x3000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001af6:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af8:	2712      	movs	r7, #18
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001afc:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b00:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b02:	f043 0308 	orr.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b06:	480f      	ldr	r0, [pc, #60]	; (8001b44 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b08:	6323      	str	r3, [r4, #48]	; 0x30
 8001b0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b0c:	f8cd e00c 	str.w	lr, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b10:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b14:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b16:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001b1e:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b20:	f001 f9ac 	bl	8002e7c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	6423      	str	r3, [r4, #64]	; 0x40
 8001b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	9b02      	ldr	r3, [sp, #8]
}
 8001b36:	b009      	add	sp, #36	; 0x24
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40006000 	.word	0x40006000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020c00 	.word	0x40020c00

08001b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4c:	2234      	movs	r2, #52	; 0x34
 8001b4e:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b50:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b52:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b54:	2501      	movs	r5, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b56:	f004 ff74 	bl	8006a42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5a:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b5c:	2290      	movs	r2, #144	; 0x90
 8001b5e:	a814      	add	r0, sp, #80	; 0x50
 8001b60:	4619      	mov	r1, r3
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b66:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b6a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	9305      	str	r3, [sp, #20]
 8001b72:	9306      	str	r3, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b74:	f004 ff65 	bl	8006a42 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	4a25      	ldr	r2, [pc, #148]	; (8001c10 <SystemClock_Config+0xc8>)
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7a:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <SystemClock_Config+0xcc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001b80:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001b84:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b86:	21d8      	movs	r1, #216	; 0xd8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b8a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001b8e:	9200      	str	r2, [sp, #0]
 8001b90:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001b98:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b9a:	2204      	movs	r2, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b9c:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b9e:	9507      	str	r5, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ba4:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba6:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bac:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bae:	970e      	str	r7, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bb0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bb2:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001bb4:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb6:	f001 fb75 	bl	80032a4 <HAL_RCC_OscConfig>
 8001bba:	b100      	cbz	r0, 8001bbe <SystemClock_Config+0x76>
 8001bbc:	e7fe      	b.n	8001bbc <SystemClock_Config+0x74>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bbe:	f001 fb35 	bl	800322c <HAL_PWREx_EnableOverDrive>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b100      	cbz	r0, 8001bc8 <SystemClock_Config+0x80>
 8001bc6:	e7fe      	b.n	8001bc6 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bcc:	270f      	movs	r7, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bce:	f44f 56a0 	mov.w	r6, #5120	; 0x1400

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001bd2:	a802      	add	r0, sp, #8
 8001bd4:	2107      	movs	r1, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bda:	9702      	str	r7, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bdc:	9605      	str	r6, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bde:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001be0:	f001 fd38 	bl	8003654 <HAL_RCC_ClockConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	b100      	cbz	r0, 8001bea <SystemClock_Config+0xa2>
 8001be8:	e7fe      	b.n	8001be8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8001bea:	4e0b      	ldr	r6, [pc, #44]	; (8001c18 <SystemClock_Config+0xd0>)
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001bec:	2410      	movs	r4, #16
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001bee:	2140      	movs	r1, #64	; 0x40
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8001bf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf4:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001bf6:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001bf8:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001bfa:	9336      	str	r3, [sp, #216]	; 0xd8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8001bfc:	9614      	str	r6, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001bfe:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001c00:	9128      	str	r1, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8001c02:	922c      	str	r2, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c04:	f001 fe66 	bl	80038d4 <HAL_RCCEx_PeriphCLKConfig>
 8001c08:	b100      	cbz	r0, 8001c0c <SystemClock_Config+0xc4>
 8001c0a:	e7fe      	b.n	8001c0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
  }
}
 8001c0c:	b039      	add	sp, #228	; 0xe4
 8001c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40007000 	.word	0x40007000
 8001c18:	08022340 	.word	0x08022340

08001c1c <main>:
{
 8001c1c:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c22:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c26:	482c      	ldr	r0, [pc, #176]	; (8001cd8 <main+0xbc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001c2e:	6943      	ldr	r3, [r0, #20]
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c3a:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8001c3e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c42:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c46:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8001c4a:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
 8001c4e:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c52:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001c56:	07b7      	lsls	r7, r6, #30
 8001c58:	015d      	lsls	r5, r3, #5
 8001c5a:	ea05 040e 	and.w	r4, r5, lr
 8001c5e:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c60:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c62:	ea44 0301 	orr.w	r3, r4, r1
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8001c66:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c68:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8001c6c:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways--);
 8001c70:	1c53      	adds	r3, r2, #1
 8001c72:	d1f6      	bne.n	8001c62 <main+0x46>
 8001c74:	3d20      	subs	r5, #32
    } while(sets--);
 8001c76:	f115 0f20 	cmn.w	r5, #32
 8001c7a:	d1ee      	bne.n	8001c5a <main+0x3e>
 8001c7c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001c80:	6943      	ldr	r3, [r0, #20]
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c86:	6143      	str	r3, [r0, #20]
 8001c88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c8c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001c90:	f000 fcd8 	bl	8002644 <HAL_Init>
  SystemClock_Config();
 8001c94:	f7ff ff58 	bl	8001b48 <SystemClock_Config>
  MX_GPIO_Init();
 8001c98:	f7ff fe68 	bl	800196c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c9c:	f7ff fd68 	bl	8001770 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8001ca0:	f7ff fbe8 	bl	8001474 <MX_DFSDM1_Init>
  MX_I2C4_Init();
 8001ca4:	f7ff fee8 	bl	8001a78 <MX_I2C4_Init>
  MX_SPI1_Init();
 8001ca8:	f000 f824 	bl	8001cf4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001cac:	f000 fa8a 	bl	80021c4 <MX_TIM1_Init>
  MX_UART4_Init();
 8001cb0:	f000 fb20 	bl	80022f4 <MX_UART4_Init>
  MX_UART8_Init();
 8001cb4:	f000 fb48 	bl	8002348 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001cb8:	f000 fb68 	bl	800238c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001cbc:	f000 fb8a 	bl	80023d4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001cc0:	f000 f910 	bl	8001ee4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cc4:	f000 f9b6 	bl	8002034 <MX_TIM3_Init>
  SystemInitialization();
 8001cc8:	f7ff fb2e 	bl	8001328 <SystemInitialization>
  MX_FREERTOS_Init();
 8001ccc:	f7ff fd8a 	bl	80017e4 <MX_FREERTOS_Init>
  osKernelStart();
 8001cd0:	f003 f9c8 	bl	8005064 <osKernelStart>
 8001cd4:	e7fe      	b.n	8001cd4 <main+0xb8>
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001cdc:	6802      	ldr	r2, [r0, #0]
 8001cde:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d000      	beq.n	8001ce6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001ce4:	4770      	bx	lr
    HAL_IncTick();
 8001ce6:	f000 bcc3 	b.w	8002670 <HAL_IncTick>
 8001cea:	bf00      	nop
 8001cec:	40000800 	.word	0x40000800

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	e7fe      	b.n	8001cf0 <Error_Handler>
 8001cf2:	bf00      	nop

08001cf4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hspi1.Instance = SPI1;
 8001cf6:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cf8:	f44f 7082 	mov.w	r0, #260	; 0x104
  hspi1.Instance = SPI1;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cfe:	f44f 67e0 	mov.w	r7, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d02:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d06:	2530      	movs	r5, #48	; 0x30
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001d08:	2407      	movs	r4, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d0a:	2108      	movs	r1, #8
  hspi1.Instance = SPI1;
 8001d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d0e:	2200      	movs	r2, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d10:	6058      	str	r0, [r3, #4]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d12:	4618      	mov	r0, r3
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d14:	60df      	str	r7, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d16:	619e      	str	r6, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d18:	61dd      	str	r5, [r3, #28]
  hspi1.Init.CRCPolynomial = 7;
 8001d1a:	62dc      	str	r4, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d1c:	6359      	str	r1, [r3, #52]	; 0x34
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d22:	615a      	str	r2, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d2c:	f002 f872 	bl	8003e14 <HAL_SPI_Init>
 8001d30:	b900      	cbnz	r0, 8001d34 <MX_SPI1_Init+0x40>
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 8001d34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8001d38:	f7ff bfda 	b.w	8001cf0 <Error_Handler>
 8001d3c:	40013000 	.word	0x40013000
 8001d40:	200040d0 	.word	0x200040d0

08001d44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001d44:	6802      	ldr	r2, [r0, #0]
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_SPI_MspInit+0x84>)
{
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(spiHandle->Instance==SPI1)
 8001d4a:	429a      	cmp	r2, r3
{
 8001d4c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	f04f 0400 	mov.w	r4, #0
 8001d52:	9404      	str	r4, [sp, #16]
 8001d54:	9403      	str	r4, [sp, #12]
 8001d56:	9405      	str	r4, [sp, #20]
 8001d58:	9406      	str	r4, [sp, #24]
 8001d5a:	9407      	str	r4, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8001d5c:	d001      	beq.n	8001d62 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d5e:	b009      	add	sp, #36	; 0x24
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d62:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d68:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d6e:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d70:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44
 8001d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d7e:	9200      	str	r2, [sp, #0]
 8001d80:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d84:	f042 0208 	orr.w	r2, r2, #8
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
 8001d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8c:	f002 0208 	and.w	r2, r2, #8
 8001d90:	9201      	str	r2, [sp, #4]
 8001d92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d96:	433a      	orrs	r2, r7
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d9c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	403b      	ands	r3, r7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da0:	480a      	ldr	r0, [pc, #40]	; (8001dcc <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da4:	9302      	str	r3, [sp, #8]
 8001da6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001daa:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dac:	f001 f866 	bl	8002e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001db0:	2318      	movs	r3, #24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db2:	a903      	add	r1, sp, #12
 8001db4:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <HAL_SPI_MspInit+0x8c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dba:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001dbe:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f001 f85c 	bl	8002e7c <HAL_GPIO_Init>
}
 8001dc4:	b009      	add	sp, #36	; 0x24
 8001dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc8:	40013000 	.word	0x40013000
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_MspInit+0x3c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	210f      	movs	r1, #15
 8001dda:	f06f 0001 	mvn.w	r0, #1
{
 8001dde:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8001de2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8001de8:	641c      	str	r4, [r3, #64]	; 0x40
 8001dea:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001dec:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8001df0:	9400      	str	r4, [sp, #0]
 8001df2:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001df6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001dfa:	645c      	str	r4, [r3, #68]	; 0x44
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e06:	f000 fc59 	bl	80026bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd10      	pop	{r4, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001e16:	4601      	mov	r1, r0
{
 8001e18:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	201e      	movs	r0, #30
 8001e1e:	f000 fc4d 	bl	80026bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001e22:	201e      	movs	r0, #30
 8001e24:	f000 fc84 	bl	8002730 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e2a:	a901      	add	r1, sp, #4
 8001e2c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e30:	4e14      	ldr	r6, [pc, #80]	; (8001e84 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e32:	f042 0204 	orr.w	r2, r2, #4
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001e36:	4c14      	ldr	r4, [pc, #80]	; (8001e88 <HAL_InitTick+0x74>)
 8001e38:	4d14      	ldr	r5, [pc, #80]	; (8001e8c <HAL_InitTick+0x78>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e46:	f001 fd23 	bl	8003890 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e4a:	f001 fd01 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8001e4e:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e50:	0043      	lsls	r3, r0, #1
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001e52:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim4.Instance = TIM4;
 8001e56:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e58:	fba6 0303 	umull	r0, r3, r6, r3
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001e5c:	4620      	mov	r0, r4
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001e5e:	60e1      	str	r1, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e60:	0c9b      	lsrs	r3, r3, #18
  htim4.Init.ClockDivision = 0;
 8001e62:	6122      	str	r2, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e64:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e66:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e68:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001e6a:	f002 f835 	bl	8003ed8 <HAL_TIM_Base_Init>
 8001e6e:	b110      	cbz	r0, 8001e76 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e70:	2001      	movs	r0, #1
}
 8001e72:	b008      	add	sp, #32
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim4);
 8001e76:	4620      	mov	r0, r4
 8001e78:	f002 f8e4 	bl	8004044 <HAL_TIM_Base_Start_IT>
}
 8001e7c:	b008      	add	sp, #32
 8001e7e:	bd70      	pop	{r4, r5, r6, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	431bde83 	.word	0x431bde83
 8001e88:	20004134 	.word	0x20004134
 8001e8c:	40000800 	.word	0x40000800

08001e90 <NMI_Handler>:
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e94:	e7fe      	b.n	8001e94 <HardFault_Handler>
 8001e96:	bf00      	nop

08001e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e98:	e7fe      	b.n	8001e98 <MemManage_Handler>
 8001e9a:	bf00      	nop

08001e9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9c:	e7fe      	b.n	8001e9c <BusFault_Handler>
 8001e9e:	bf00      	nop

08001ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea0:	e7fe      	b.n	8001ea0 <UsageFault_Handler>
 8001ea2:	bf00      	nop

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop

08001ea8 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
   HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001ea8:	4801      	ldr	r0, [pc, #4]	; (8001eb0 <DMA1_Stream2_IRQHandler+0x8>)
 8001eaa:	f000 bf17 	b.w	8002cdc <HAL_DMA_IRQHandler>
 8001eae:	bf00      	nop
 8001eb0:	20004234 	.word	0x20004234

08001eb4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001eb4:	4801      	ldr	r0, [pc, #4]	; (8001ebc <TIM4_IRQHandler+0x8>)
 8001eb6:	f002 ba6d 	b.w	8004394 <HAL_TIM_IRQHandler>
 8001eba:	bf00      	nop
 8001ebc:	20004134 	.word	0x20004134

08001ec0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001ec0:	4801      	ldr	r0, [pc, #4]	; (8001ec8 <DMA2_Stream0_IRQHandler+0x8>)
 8001ec2:	f000 bf0b 	b.w	8002cdc <HAL_DMA_IRQHandler>
 8001ec6:	bf00      	nop
 8001ec8:	20003f64 	.word	0x20003f64

08001ecc <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001ecc:	4801      	ldr	r0, [pc, #4]	; (8001ed4 <DMA2_Stream1_IRQHandler+0x8>)
 8001ece:	f000 bf05 	b.w	8002cdc <HAL_DMA_IRQHandler>
 8001ed2:	bf00      	nop
 8001ed4:	20003f04 	.word	0x20003f04

08001ed8 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ed8:	4801      	ldr	r0, [pc, #4]	; (8001ee0 <DMA2_Stream2_IRQHandler+0x8>)
 8001eda:	f000 beff 	b.w	8002cdc <HAL_DMA_IRQHandler>
 8001ede:	bf00      	nop
 8001ee0:	20004304 	.word	0x20004304

08001ee4 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 107;
 8001ee6:	206b      	movs	r0, #107	; 0x6b
  htim2.Instance = TIM2;
 8001ee8:	4c4d      	ldr	r4, [pc, #308]	; (8002020 <MX_TIM2_Init+0x13c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	2300      	movs	r3, #0
{
 8001eec:	b097      	sub	sp, #92	; 0x5c
  htim2.Instance = TIM2;
 8001eee:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 50000;
 8001ef2:	f24c 3150 	movw	r1, #50000	; 0xc350
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ef6:	2280      	movs	r2, #128	; 0x80
  htim2.Init.Prescaler = 107;
 8001ef8:	6060      	str	r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001efa:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8001efc:	6025      	str	r5, [r4, #0]
  htim2.Init.Period = 50000;
 8001efe:	60e1      	str	r1, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f00:	61a2      	str	r2, [r4, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	60a3      	str	r3, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f04:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f06:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f08:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0a:	6123      	str	r3, [r4, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0c:	9307      	str	r3, [sp, #28]
 8001f0e:	9308      	str	r3, [sp, #32]
 8001f10:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f12:	9304      	str	r3, [sp, #16]
 8001f14:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f16:	9310      	str	r3, [sp, #64]	; 0x40
 8001f18:	9311      	str	r3, [sp, #68]	; 0x44
 8001f1a:	9312      	str	r3, [sp, #72]	; 0x48
 8001f1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8001f1e:	9314      	str	r3, [sp, #80]	; 0x50
 8001f20:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f22:	f001 ffd9 	bl	8003ed8 <HAL_TIM_Base_Init>
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d13a      	bne.n	8001fa0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f2e:	a906      	add	r1, sp, #24
 8001f30:	483b      	ldr	r0, [pc, #236]	; (8002020 <MX_TIM2_Init+0x13c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f32:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f34:	f002 f95e 	bl	80041f4 <HAL_TIM_ConfigClockSource>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d12e      	bne.n	8001f9a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f3c:	4838      	ldr	r0, [pc, #224]	; (8002020 <MX_TIM2_Init+0x13c>)
 8001f3e:	f002 f88f 	bl	8004060 <HAL_TIM_PWM_Init>
 8001f42:	bb38      	cbnz	r0, 8001f94 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f44:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f46:	a903      	add	r1, sp, #12
 8001f48:	4835      	ldr	r0, [pc, #212]	; (8002020 <MX_TIM2_Init+0x13c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4a:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4c:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f4e:	f002 fbb7 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	b9e0      	cbnz	r0, 8001f8e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 8001f54:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f56:	2560      	movs	r5, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f58:	a90f      	add	r1, sp, #60	; 0x3c
 8001f5a:	4831      	ldr	r0, [pc, #196]	; (8002020 <MX_TIM2_Init+0x13c>)
 8001f5c:	461a      	mov	r2, r3
  sConfigOC.Pulse = 0;
 8001f5e:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f60:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f62:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f64:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f66:	f002 fc29 	bl	80047bc <HAL_TIM_PWM_ConfigChannel>
 8001f6a:	b108      	cbz	r0, 8001f70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f6c:	f7ff fec0 	bl	8001cf0 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8001f70:	6823      	ldr	r3, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8001f74:	4a2b      	ldr	r2, [pc, #172]	; (8002024 <MX_TIM2_Init+0x140>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	940b      	str	r4, [sp, #44]	; 0x2c
  if(timHandle->Instance==TIM1)
 8001f78:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7a:	940a      	str	r4, [sp, #40]	; 0x28
 8001f7c:	940c      	str	r4, [sp, #48]	; 0x30
 8001f7e:	940d      	str	r4, [sp, #52]	; 0x34
 8001f80:	940e      	str	r4, [sp, #56]	; 0x38
  if(timHandle->Instance==TIM1)
 8001f82:	d026      	beq.n	8001fd2 <MX_TIM2_Init+0xee>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	d00d      	beq.n	8001fa6 <MX_TIM2_Init+0xc2>
}
 8001f8a:	b017      	add	sp, #92	; 0x5c
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8001f8e:	f7ff feaf 	bl	8001cf0 <Error_Handler>
 8001f92:	e7df      	b.n	8001f54 <MX_TIM2_Init+0x70>
    Error_Handler();
 8001f94:	f7ff feac 	bl	8001cf0 <Error_Handler>
 8001f98:	e7d4      	b.n	8001f44 <MX_TIM2_Init+0x60>
    Error_Handler();
 8001f9a:	f7ff fea9 	bl	8001cf0 <Error_Handler>
 8001f9e:	e7cd      	b.n	8001f3c <MX_TIM2_Init+0x58>
    Error_Handler();
 8001fa0:	f7ff fea6 	bl	8001cf0 <Error_Handler>
 8001fa4:	e7c1      	b.n	8001f2a <MX_TIM2_Init+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001faa:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fac:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	a90a      	add	r1, sp, #40	; 0x28
 8001fb6:	481c      	ldr	r0, [pc, #112]	; (8002028 <MX_TIM2_Init+0x144>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4322      	orrs	r2, r4
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fbe:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc0:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001fc4:	940d      	str	r4, [sp, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fca:	940e      	str	r4, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f000 ff56 	bl	8002e7c <HAL_GPIO_Init>
}
 8001fd0:	e7db      	b.n	8001f8a <MX_TIM2_Init+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <MX_TIM2_Init+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fd4:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fd8:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	a90a      	add	r1, sp, #40	; 0x28
 8001fde:	4812      	ldr	r0, [pc, #72]	; (8002028 <MX_TIM2_Init+0x144>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	432a      	orrs	r2, r5
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe6:	402a      	ands	r2, r5
 8001fe8:	9200      	str	r2, [sp, #0]
 8001fea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	f042 0210 	orr.w	r2, r2, #16
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ff6:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff8:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ffe:	950e      	str	r5, [sp, #56]	; 0x38
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f000 ff3a 	bl	8002e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8002008:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200c:	a90a      	add	r1, sp, #40	; 0x28
 800200e:	4808      	ldr	r0, [pc, #32]	; (8002030 <MX_TIM2_Init+0x14c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002012:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8002018:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201a:	f000 ff2f 	bl	8002e7c <HAL_GPIO_Init>
 800201e:	e7b4      	b.n	8001f8a <MX_TIM2_Init+0xa6>
 8002020:	200041f4 	.word	0x200041f4
 8002024:	40010000 	.word	0x40010000
 8002028:	40020000 	.word	0x40020000
 800202c:	40023800 	.word	0x40023800
 8002030:	40021000 	.word	0x40021000

08002034 <MX_TIM3_Init>:
  htim3.Instance = TIM3;
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <MX_TIM3_Init+0x68>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	2300      	movs	r3, #0
  htim3.Init.Period = 50000;
 8002038:	f24c 3150 	movw	r1, #50000	; 0xc350
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800203c:	4610      	mov	r0, r2
{
 800203e:	b530      	push	{r4, r5, lr}
  htim3.Init.Prescaler = 107;
 8002040:	246b      	movs	r4, #107	; 0x6b
{
 8002042:	b089      	sub	sp, #36	; 0x24
  htim3.Instance = TIM3;
 8002044:	4d16      	ldr	r5, [pc, #88]	; (80020a0 <MX_TIM3_Init+0x6c>)
  htim3.Init.Prescaler = 107;
 8002046:	6054      	str	r4, [r2, #4]
  htim3.Instance = TIM3;
 8002048:	6015      	str	r5, [r2, #0]
  htim3.Init.Period = 50000;
 800204a:	60d1      	str	r1, [r2, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204c:	6093      	str	r3, [r2, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204e:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002050:	9301      	str	r3, [sp, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002052:	6113      	str	r3, [r2, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002054:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002056:	9305      	str	r3, [sp, #20]
 8002058:	9306      	str	r3, [sp, #24]
 800205a:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	9302      	str	r3, [sp, #8]
 800205e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002060:	f001 ff3a 	bl	8003ed8 <HAL_TIM_Base_Init>
 8002064:	b9b0      	cbnz	r0, 8002094 <MX_TIM3_Init+0x60>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800206a:	a904      	add	r1, sp, #16
 800206c:	480b      	ldr	r0, [pc, #44]	; (800209c <MX_TIM3_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002070:	f002 f8c0 	bl	80041f4 <HAL_TIM_ConfigClockSource>
 8002074:	b958      	cbnz	r0, 800208e <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002076:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002078:	a901      	add	r1, sp, #4
 800207a:	4808      	ldr	r0, [pc, #32]	; (800209c <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002080:	f002 fb1e 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002084:	b108      	cbz	r0, 800208a <MX_TIM3_Init+0x56>
    Error_Handler();
 8002086:	f7ff fe33 	bl	8001cf0 <Error_Handler>
}
 800208a:	b009      	add	sp, #36	; 0x24
 800208c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800208e:	f7ff fe2f 	bl	8001cf0 <Error_Handler>
 8002092:	e7f0      	b.n	8002076 <MX_TIM3_Init+0x42>
    Error_Handler();
 8002094:	f7ff fe2c 	bl	8001cf0 <Error_Handler>
 8002098:	e7e5      	b.n	8002066 <MX_TIM3_Init+0x32>
 800209a:	bf00      	nop
 800209c:	20004174 	.word	0x20004174
 80020a0:	40000400 	.word	0x40000400

080020a4 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 80020a4:	6803      	ldr	r3, [r0, #0]
{
 80020a6:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM1)
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_TIM_Base_MspInit+0x64>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_TIM_Base_MspInit+0x32>
  else if(tim_baseHandle->Instance==TIM2)
 80020ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b2:	d01c      	beq.n	80020ee <HAL_TIM_Base_MspInit+0x4a>
  else if(tim_baseHandle->Instance==TIM3)
 80020b4:	4a15      	ldr	r2, [pc, #84]	; (800210c <HAL_TIM_Base_MspInit+0x68>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d001      	beq.n	80020be <HAL_TIM_Base_MspInit+0x1a>
}
 80020ba:	b004      	add	sp, #16
 80020bc:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_TIM_Base_MspInit+0x6c>)
 80020c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c2:	f042 0202 	orr.w	r2, r2, #2
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	9303      	str	r3, [sp, #12]
 80020d0:	9b03      	ldr	r3, [sp, #12]
}
 80020d2:	b004      	add	sp, #16
 80020d4:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_TIM_Base_MspInit+0x6c>)
 80020d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	645a      	str	r2, [r3, #68]	; 0x44
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	9b01      	ldr	r3, [sp, #4]
}
 80020ea:	b004      	add	sp, #16
 80020ec:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ee:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80020f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	9b02      	ldr	r3, [sp, #8]
 8002104:	e7d9      	b.n	80020ba <HAL_TIM_Base_MspInit+0x16>
 8002106:	bf00      	nop
 8002108:	40010000 	.word	0x40010000
 800210c:	40000400 	.word	0x40000400
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_TIM_MspPostInit>:
  if(timHandle->Instance==TIM1)
 8002114:	6803      	ldr	r3, [r0, #0]
 8002116:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <HAL_TIM_MspPostInit+0xa0>)
{
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(timHandle->Instance==TIM1)
 800211a:	4293      	cmp	r3, r2
{
 800211c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	f04f 0400 	mov.w	r4, #0
 8002122:	9404      	str	r4, [sp, #16]
 8002124:	9403      	str	r4, [sp, #12]
 8002126:	9405      	str	r4, [sp, #20]
 8002128:	9406      	str	r4, [sp, #24]
 800212a:	9407      	str	r4, [sp, #28]
  if(timHandle->Instance==TIM1)
 800212c:	d01a      	beq.n	8002164 <HAL_TIM_MspPostInit+0x50>
  else if(timHandle->Instance==TIM2)
 800212e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002132:	d001      	beq.n	8002138 <HAL_TIM_MspPostInit+0x24>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002134:	b009      	add	sp, #36	; 0x24
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800213c:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800213e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	a903      	add	r1, sp, #12
 8002148:	481b      	ldr	r0, [pc, #108]	; (80021b8 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	4322      	orrs	r2, r4
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002150:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002156:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800215c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f000 fe8d 	bl	8002e7c <HAL_GPIO_Init>
}
 8002162:	e7e7      	b.n	8002134 <HAL_TIM_MspPostInit+0x20>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_TIM_MspPostInit+0xa8>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002166:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800216a:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	a903      	add	r1, sp, #12
 8002170:	4811      	ldr	r0, [pc, #68]	; (80021b8 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	432a      	orrs	r2, r5
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
 8002176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002178:	402a      	ands	r2, r5
 800217a:	9200      	str	r2, [sp, #0]
 800217c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800217e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002180:	f042 0210 	orr.w	r2, r2, #16
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002188:	9703      	str	r7, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800218a:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002190:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f000 fe71 	bl	8002e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 800219a:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219e:	a903      	add	r1, sp, #12
 80021a0:	4807      	ldr	r0, [pc, #28]	; (80021c0 <HAL_TIM_MspPostInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021a4:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80021aa:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ac:	f000 fe66 	bl	8002e7c <HAL_GPIO_Init>
 80021b0:	e7c0      	b.n	8002134 <HAL_TIM_MspPostInit+0x20>
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40021000 	.word	0x40021000

080021c4 <MX_TIM1_Init>:
{
 80021c4:	b570      	push	{r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c6:	2400      	movs	r4, #0
{
 80021c8:	b09a      	sub	sp, #104	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ca:	222c      	movs	r2, #44	; 0x2c
  htim1.Instance = TIM1;
 80021cc:	4d47      	ldr	r5, [pc, #284]	; (80022ec <MX_TIM1_Init+0x128>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ce:	4621      	mov	r1, r4
 80021d0:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d2:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d4:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d6:	9408      	str	r4, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d8:	9405      	str	r4, [sp, #20]
 80021da:	9406      	str	r4, [sp, #24]
 80021dc:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021de:	9402      	str	r4, [sp, #8]
 80021e0:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e2:	9409      	str	r4, [sp, #36]	; 0x24
 80021e4:	940a      	str	r4, [sp, #40]	; 0x28
 80021e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80021e8:	940c      	str	r4, [sp, #48]	; 0x30
 80021ea:	940d      	str	r4, [sp, #52]	; 0x34
 80021ec:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ee:	f004 fc28 	bl	8006a42 <memset>
  htim1.Instance = TIM1;
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <MX_TIM1_Init+0x12c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021f4:	2120      	movs	r1, #32
  htim1.Init.Period = 2160;
 80021f6:	f44f 6207 	mov.w	r2, #2160	; 0x870
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021fa:	4618      	mov	r0, r3
  htim1.Init.Prescaler = 0;
 80021fc:	605c      	str	r4, [r3, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fe:	611c      	str	r4, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002200:	615c      	str	r4, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002202:	619c      	str	r4, [r3, #24]
  htim1.Instance = TIM1;
 8002204:	601d      	str	r5, [r3, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002206:	6099      	str	r1, [r3, #8]
  htim1.Init.Period = 2160;
 8002208:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800220a:	f001 fe65 	bl	8003ed8 <HAL_TIM_Base_Init>
 800220e:	2800      	cmp	r0, #0
 8002210:	d168      	bne.n	80022e4 <MX_TIM1_Init+0x120>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002216:	a904      	add	r1, sp, #16
 8002218:	4835      	ldr	r0, [pc, #212]	; (80022f0 <MX_TIM1_Init+0x12c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800221c:	f001 ffea 	bl	80041f4 <HAL_TIM_ConfigClockSource>
 8002220:	2800      	cmp	r0, #0
 8002222:	d15c      	bne.n	80022de <MX_TIM1_Init+0x11a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002224:	4832      	ldr	r0, [pc, #200]	; (80022f0 <MX_TIM1_Init+0x12c>)
 8002226:	f001 ff1b 	bl	8004060 <HAL_TIM_PWM_Init>
 800222a:	2800      	cmp	r0, #0
 800222c:	d154      	bne.n	80022d8 <MX_TIM1_Init+0x114>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002230:	a901      	add	r1, sp, #4
 8002232:	482f      	ldr	r0, [pc, #188]	; (80022f0 <MX_TIM1_Init+0x12c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002234:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002236:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002238:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800223a:	f002 fa41 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	2800      	cmp	r0, #0
 8002240:	d147      	bne.n	80022d2 <MX_TIM1_Init+0x10e>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002242:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002244:	2560      	movs	r5, #96	; 0x60
  sConfigOC.Pulse = 580;
 8002246:	f44f 7411 	mov.w	r4, #580	; 0x244
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800224a:	a908      	add	r1, sp, #32
 800224c:	461a      	mov	r2, r3
 800224e:	4828      	ldr	r0, [pc, #160]	; (80022f0 <MX_TIM1_Init+0x12c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002250:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002252:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002254:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002256:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002258:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225a:	9508      	str	r5, [sp, #32]
  sConfigOC.Pulse = 580;
 800225c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225e:	f002 faad 	bl	80047bc <HAL_TIM_PWM_ConfigChannel>
 8002262:	2800      	cmp	r0, #0
 8002264:	d132      	bne.n	80022cc <MX_TIM1_Init+0x108>
  sConfigOC.Pulse = 0;
 8002266:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002268:	2204      	movs	r2, #4
 800226a:	a908      	add	r1, sp, #32
 800226c:	4820      	ldr	r0, [pc, #128]	; (80022f0 <MX_TIM1_Init+0x12c>)
  sConfigOC.Pulse = 0;
 800226e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002270:	f002 faa4 	bl	80047bc <HAL_TIM_PWM_ConfigChannel>
 8002274:	bb38      	cbnz	r0, 80022c6 <MX_TIM1_Init+0x102>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002276:	a908      	add	r1, sp, #32
 8002278:	2208      	movs	r2, #8
 800227a:	481d      	ldr	r0, [pc, #116]	; (80022f0 <MX_TIM1_Init+0x12c>)
 800227c:	f002 fa9e 	bl	80047bc <HAL_TIM_PWM_ConfigChannel>
 8002280:	b9f0      	cbnz	r0, 80022c0 <MX_TIM1_Init+0xfc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002282:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = 45;
 8002284:	262d      	movs	r6, #45	; 0x2d
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002286:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800228a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800228e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002292:	a90f      	add	r1, sp, #60	; 0x3c
 8002294:	4816      	ldr	r0, [pc, #88]	; (80022f0 <MX_TIM1_Init+0x12c>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002296:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002298:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800229a:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800229c:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 800229e:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022a0:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022a2:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = 45;
 80022a4:	9612      	str	r6, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022a6:	9514      	str	r5, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022a8:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80022aa:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022ac:	f002 fa34 	bl	8004718 <HAL_TIMEx_ConfigBreakDeadTime>
 80022b0:	b108      	cbz	r0, 80022b6 <MX_TIM1_Init+0xf2>
    Error_Handler();
 80022b2:	f7ff fd1d 	bl	8001cf0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80022b6:	480e      	ldr	r0, [pc, #56]	; (80022f0 <MX_TIM1_Init+0x12c>)
 80022b8:	f7ff ff2c 	bl	8002114 <HAL_TIM_MspPostInit>
}
 80022bc:	b01a      	add	sp, #104	; 0x68
 80022be:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80022c0:	f7ff fd16 	bl	8001cf0 <Error_Handler>
 80022c4:	e7dd      	b.n	8002282 <MX_TIM1_Init+0xbe>
    Error_Handler();
 80022c6:	f7ff fd13 	bl	8001cf0 <Error_Handler>
 80022ca:	e7d4      	b.n	8002276 <MX_TIM1_Init+0xb2>
    Error_Handler();
 80022cc:	f7ff fd10 	bl	8001cf0 <Error_Handler>
 80022d0:	e7c9      	b.n	8002266 <MX_TIM1_Init+0xa2>
    Error_Handler();
 80022d2:	f7ff fd0d 	bl	8001cf0 <Error_Handler>
 80022d6:	e7b4      	b.n	8002242 <MX_TIM1_Init+0x7e>
    Error_Handler();
 80022d8:	f7ff fd0a 	bl	8001cf0 <Error_Handler>
 80022dc:	e7a7      	b.n	800222e <MX_TIM1_Init+0x6a>
    Error_Handler();
 80022de:	f7ff fd07 	bl	8001cf0 <Error_Handler>
 80022e2:	e79f      	b.n	8002224 <MX_TIM1_Init+0x60>
    Error_Handler();
 80022e4:	f7ff fd04 	bl	8001cf0 <Error_Handler>
 80022e8:	e793      	b.n	8002212 <MX_TIM1_Init+0x4e>
 80022ea:	bf00      	nop
 80022ec:	40010000 	.word	0x40010000
 80022f0:	200041b4 	.word	0x200041b4

080022f4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart4.Instance = UART4;
 80022f6:	4a11      	ldr	r2, [pc, #68]	; (800233c <MX_UART4_Init+0x48>)
  huart4.Init.BaudRate = 8000000;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_RX;
 80022f8:	2704      	movs	r7, #4
  huart4.Instance = UART4;
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <MX_UART4_Init+0x4c>)
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT
 80022fc:	26b0      	movs	r6, #176	; 0xb0
  huart4.Init.BaudRate = 8000000;
 80022fe:	4811      	ldr	r0, [pc, #68]	; (8002344 <MX_UART4_Init+0x50>)
                              |UART_ADVFEATURE_MSBFIRST_INIT;
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002300:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8002304:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8002308:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  huart4.Instance = UART4;
 800230c:	601a      	str	r2, [r3, #0]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800230e:	2200      	movs	r2, #0
  huart4.Init.BaudRate = 8000000;
 8002310:	6058      	str	r0, [r3, #4]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002312:	4618      	mov	r0, r3
  huart4.Init.Mode = UART_MODE_RX;
 8002314:	615f      	str	r7, [r3, #20]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT
 8002316:	625e      	str	r6, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002318:	639d      	str	r5, [r3, #56]	; 0x38
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800231a:	63dc      	str	r4, [r3, #60]	; 0x3c
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 800231c:	6499      	str	r1, [r3, #72]	; 0x48
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800231e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002320:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002322:	611a      	str	r2, [r3, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002324:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002326:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002328:	621a      	str	r2, [r3, #32]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800232a:	f002 fcd7 	bl	8004cdc <HAL_UART_Init>
 800232e:	b900      	cbnz	r0, 8002332 <MX_UART4_Init+0x3e>
 8002330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 8002332:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002336:	f7ff bcdb 	b.w	8001cf0 <Error_Handler>
 800233a:	bf00      	nop
 800233c:	40004c00 	.word	0x40004c00
 8002340:	20004444 	.word	0x20004444
 8002344:	007a1200 	.word	0x007a1200

08002348 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{

  huart8.Instance = UART8;
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <MX_UART8_Init+0x38>)
  huart8.Init.BaudRate = 26666666;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	2200      	movs	r2, #0
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 800234c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002350:	4618      	mov	r0, r3
{
 8002352:	b570      	push	{r4, r5, r6, lr}
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002354:	240c      	movs	r4, #12
  huart8.Instance = UART8;
 8002356:	4e0b      	ldr	r6, [pc, #44]	; (8002384 <MX_UART8_Init+0x3c>)
  huart8.Init.BaudRate = 26666666;
 8002358:	4d0b      	ldr	r5, [pc, #44]	; (8002388 <MX_UART8_Init+0x40>)
  huart8.Instance = UART8;
 800235a:	601e      	str	r6, [r3, #0]
  huart8.Init.BaudRate = 26666666;
 800235c:	605d      	str	r5, [r3, #4]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800235e:	615c      	str	r4, [r3, #20]
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 8002360:	61d9      	str	r1, [r3, #28]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002364:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002366:	611a      	str	r2, [r3, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002368:	619a      	str	r2, [r3, #24]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800236a:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800236e:	f002 fcb5 	bl	8004cdc <HAL_UART_Init>
 8002372:	b900      	cbnz	r0, 8002376 <MX_UART8_Init+0x2e>
 8002374:	bd70      	pop	{r4, r5, r6, pc}
  {
    Error_Handler();
  }

}
 8002376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 800237a:	f7ff bcb9 	b.w	8001cf0 <Error_Handler>
 800237e:	bf00      	nop
 8002380:	200043d4 	.word	0x200043d4
 8002384:	40007c00 	.word	0x40007c00
 8002388:	0196e6aa 	.word	0x0196e6aa

0800238c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart1.Instance = USART1;
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <MX_USART1_UART_Init+0x3c>)
  huart1.Init.BaudRate = 1500000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002390:	2200      	movs	r2, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002392:	250c      	movs	r5, #12
  huart1.Instance = USART1;
 8002394:	4f0d      	ldr	r7, [pc, #52]	; (80023cc <MX_USART1_UART_Init+0x40>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002396:	2410      	movs	r4, #16
  huart1.Init.BaudRate = 1500000;
 8002398:	4e0d      	ldr	r6, [pc, #52]	; (80023d0 <MX_USART1_UART_Init+0x44>)
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800239a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800239e:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 80023a0:	601f      	str	r7, [r3, #0]
  huart1.Init.BaudRate = 1500000;
 80023a2:	605e      	str	r6, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a4:	615d      	str	r5, [r3, #20]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80023a6:	625c      	str	r4, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80023a8:	6399      	str	r1, [r3, #56]	; 0x38
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ae:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b4:	621a      	str	r2, [r3, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b6:	f002 fc91 	bl	8004cdc <HAL_UART_Init>
 80023ba:	b900      	cbnz	r0, 80023be <MX_USART1_UART_Init+0x32>
 80023bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 80023be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 80023c2:	f7ff bc95 	b.w	8001cf0 <Error_Handler>
 80023c6:	bf00      	nop
 80023c8:	20004364 	.word	0x20004364
 80023cc:	40011000 	.word	0x40011000
 80023d0:	0016e360 	.word	0x0016e360

080023d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 26666666;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	2200      	movs	r2, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80023d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023dc:	4618      	mov	r0, r3
{
 80023de:	b570      	push	{r4, r5, r6, lr}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023e0:	240c      	movs	r4, #12
  huart3.Instance = USART3;
 80023e2:	4e0b      	ldr	r6, [pc, #44]	; (8002410 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 26666666;
 80023e4:	4d0b      	ldr	r5, [pc, #44]	; (8002414 <MX_USART3_UART_Init+0x40>)
  huart3.Instance = USART3;
 80023e6:	601e      	str	r6, [r3, #0]
  huart3.Init.BaudRate = 26666666;
 80023e8:	605d      	str	r5, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023ea:	615c      	str	r4, [r3, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80023ec:	61d9      	str	r1, [r3, #28]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023f2:	611a      	str	r2, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f4:	619a      	str	r2, [r3, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023fa:	f002 fc6f 	bl	8004cdc <HAL_UART_Init>
 80023fe:	b900      	cbnz	r0, 8002402 <MX_USART3_UART_Init+0x2e>
 8002400:	bd70      	pop	{r4, r5, r6, pc}
  {
    Error_Handler();
  }

}
 8002402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8002406:	f7ff bc73 	b.w	8001cf0 <Error_Handler>
 800240a:	bf00      	nop
 800240c:	20004294 	.word	0x20004294
 8002410:	40004800 	.word	0x40004800
 8002414:	0196e6aa 	.word	0x0196e6aa

08002418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART4)
 8002418:	4a6a      	ldr	r2, [pc, #424]	; (80025c4 <HAL_UART_MspInit+0x1ac>)
 800241a:	6803      	ldr	r3, [r0, #0]
{
 800241c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(uartHandle->Instance==UART4)
 800241e:	4293      	cmp	r3, r2
{
 8002420:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	f04f 0400 	mov.w	r4, #0
{
 8002426:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	940a      	str	r4, [sp, #40]	; 0x28
 800242a:	9409      	str	r4, [sp, #36]	; 0x24
 800242c:	940b      	str	r4, [sp, #44]	; 0x2c
 800242e:	940c      	str	r4, [sp, #48]	; 0x30
 8002430:	940d      	str	r4, [sp, #52]	; 0x34
  if(uartHandle->Instance==UART4)
 8002432:	d02c      	beq.n	800248e <HAL_UART_MspInit+0x76>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 8002434:	4a64      	ldr	r2, [pc, #400]	; (80025c8 <HAL_UART_MspInit+0x1b0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	f000 80a4 	beq.w	8002584 <HAL_UART_MspInit+0x16c>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 800243c:	4a63      	ldr	r2, [pc, #396]	; (80025cc <HAL_UART_MspInit+0x1b4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d064      	beq.n	800250c <HAL_UART_MspInit+0xf4>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002442:	4a63      	ldr	r2, [pc, #396]	; (80025d0 <HAL_UART_MspInit+0x1b8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d001      	beq.n	800244c <HAL_UART_MspInit+0x34>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002448:	b00f      	add	sp, #60	; 0x3c
 800244a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 800244c:	4b61      	ldr	r3, [pc, #388]	; (80025d4 <HAL_UART_MspInit+0x1bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800244e:	f44f 7740 	mov.w	r7, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 8002456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002458:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800245a:	a909      	add	r1, sp, #36	; 0x24
 800245c:	485e      	ldr	r0, [pc, #376]	; (80025d8 <HAL_UART_MspInit+0x1c0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800245e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
 8002464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002466:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800246a:	9207      	str	r2, [sp, #28]
 800246c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800246e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002470:	f042 0208 	orr.w	r2, r2, #8
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002478:	9709      	str	r7, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800247a:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002482:	9308      	str	r3, [sp, #32]
 8002484:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002486:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002488:	f000 fcf8 	bl	8002e7c <HAL_GPIO_Init>
}
 800248c:	e7dc      	b.n	8002448 <HAL_UART_MspInit+0x30>
    __HAL_RCC_UART4_CLK_ENABLE();
 800248e:	4b51      	ldr	r3, [pc, #324]	; (80025d4 <HAL_UART_MspInit+0x1bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002490:	2603      	movs	r6, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	f04f 0e02 	mov.w	lr, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002496:	2708      	movs	r7, #8
    __HAL_RCC_UART4_CLK_ENABLE();
 8002498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	a909      	add	r1, sp, #36	; 0x24
 800249c:	484f      	ldr	r0, [pc, #316]	; (80025dc <HAL_UART_MspInit+0x1c4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800249e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
 80024a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80024aa:	9201      	str	r2, [sp, #4]
 80024ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024b8:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024be:	960c      	str	r6, [sp, #48]	; 0x30
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80024c0:	4e47      	ldr	r6, [pc, #284]	; (80025e0 <HAL_UART_MspInit+0x1c8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024ca:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024cc:	f000 fcd6 	bl	8002e7c <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80024d0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80024d4:	f8df e118 	ldr.w	lr, [pc, #280]	; 80025f0 <HAL_UART_MspInit+0x1d8>
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80024dc:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024e4:	4630      	mov	r0, r6
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e6:	60b4      	str	r4, [r6, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e8:	60f4      	str	r4, [r6, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ea:	6174      	str	r4, [r6, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ec:	61b4      	str	r4, [r6, #24]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ee:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80024f0:	f8c6 e000 	str.w	lr, [r6]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80024f4:	6077      	str	r7, [r6, #4]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024f6:	6131      	str	r1, [r6, #16]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80024f8:	61f2      	str	r2, [r6, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024fa:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024fc:	f000 fb0c 	bl	8002b18 <HAL_DMA_Init>
 8002500:	2800      	cmp	r0, #0
 8002502:	d13c      	bne.n	800257e <HAL_UART_MspInit+0x166>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002504:	666e      	str	r6, [r5, #100]	; 0x64
 8002506:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8002508:	b00f      	add	sp, #60	; 0x3c
 800250a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800250c:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <HAL_UART_MspInit+0x1bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800250e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	f04f 0e03 	mov.w	lr, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8002518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800251a:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_USART1_CLK_ENABLE();
 800251e:	f042 0210 	orr.w	r2, r2, #16
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
 8002524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002526:	f002 0210 	and.w	r2, r2, #16
 800252a:	9205      	str	r2, [sp, #20]
 800252c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002538:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	4827      	ldr	r0, [pc, #156]	; (80025dc <HAL_UART_MspInit+0x1c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	9306      	str	r3, [sp, #24]
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002544:	4e27      	ldr	r6, [pc, #156]	; (80025e4 <HAL_UART_MspInit+0x1cc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002548:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f000 fc95 	bl	8002e7c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002552:	4f25      	ldr	r7, [pc, #148]	; (80025e8 <HAL_UART_MspInit+0x1d0>)
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002554:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002558:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800255c:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002560:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002562:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002564:	60f4      	str	r4, [r6, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002566:	6174      	str	r4, [r6, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002568:	61b4      	str	r4, [r6, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800256a:	6234      	str	r4, [r6, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256c:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800256e:	6037      	str	r7, [r6, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002570:	6071      	str	r1, [r6, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002572:	6132      	str	r2, [r6, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002574:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002576:	f000 facf 	bl	8002b18 <HAL_DMA_Init>
 800257a:	2800      	cmp	r0, #0
 800257c:	d0c2      	beq.n	8002504 <HAL_UART_MspInit+0xec>
      Error_Handler();
 800257e:	f7ff fbb7 	bl	8001cf0 <Error_Handler>
 8002582:	e7bf      	b.n	8002504 <HAL_UART_MspInit+0xec>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_UART_MspInit+0x1bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002586:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800258a:	2508      	movs	r5, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 800258c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800258e:	a909      	add	r1, sp, #36	; 0x24
 8002590:	4816      	ldr	r0, [pc, #88]	; (80025ec <HAL_UART_MspInit+0x1d4>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8002592:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
 8002598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800259a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800259e:	9203      	str	r2, [sp, #12]
 80025a0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a4:	f042 0210 	orr.w	r2, r2, #16
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025ac:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ae:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b6:	9304      	str	r3, [sp, #16]
 80025b8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80025ba:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025bc:	f000 fc5e 	bl	8002e7c <HAL_GPIO_Init>
 80025c0:	e742      	b.n	8002448 <HAL_UART_MspInit+0x30>
 80025c2:	bf00      	nop
 80025c4:	40004c00 	.word	0x40004c00
 80025c8:	40007c00 	.word	0x40007c00
 80025cc:	40011000 	.word	0x40011000
 80025d0:	40004800 	.word	0x40004800
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40020000 	.word	0x40020000
 80025e0:	20004234 	.word	0x20004234
 80025e4:	20004304 	.word	0x20004304
 80025e8:	40026440 	.word	0x40026440
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40026040 	.word	0x40026040

080025f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f4:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025fc:	490f      	ldr	r1, [pc, #60]	; (800263c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fe:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 8002602:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002604:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8002608:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 800260a:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800260c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8002610:	4e0b      	ldr	r6, [pc, #44]	; (8002640 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 8002612:	f040 0001 	orr.w	r0, r0, #1
 8002616:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002618:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	4001      	ands	r1, r0
 800261e:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8002620:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002622:	6819      	ldr	r1, [r3, #0]
 8002624:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002628:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 800262a:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800262c:	6095      	str	r5, [r2, #8]
#endif
}
 800262e:	bc70      	pop	{r4, r5, r6}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00
 8002638:	40023800 	.word	0x40023800
 800263c:	fef6ffff 	.word	0xfef6ffff
 8002640:	24003010 	.word	0x24003010

08002644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002644:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002650:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002658:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265a:	f000 f81b 	bl	8002694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff fbd8 	bl	8001e14 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff fbb6 	bl	8001dd4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8002668:	2000      	movs	r0, #0
 800266a:	bd08      	pop	{r3, pc}
 800266c:	40023c00 	.word	0x40023c00

08002670 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002670:	4a03      	ldr	r2, [pc, #12]	; (8002680 <HAL_IncTick+0x10>)
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <HAL_IncTick+0x14>)
 8002674:	6811      	ldr	r1, [r2, #0]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	440b      	add	r3, r1
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	200044b4 	.word	0x200044b4
 8002684:	20000020 	.word	0x20000020

08002688 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002688:	4b01      	ldr	r3, [pc, #4]	; (8002690 <HAL_GetTick+0x8>)
 800268a:	6818      	ldr	r0, [r3, #0]
}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	200044b4 	.word	0x200044b4

08002694 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002694:	4907      	ldr	r1, [pc, #28]	; (80026b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002696:	0200      	lsls	r0, r0, #8
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800269a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800269c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a2:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80026a6:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80026a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026ac:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ae:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80026b0:	60c8      	str	r0, [r1, #12]
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00
 80026b8:	05fa0000 	.word	0x05fa0000

080026bc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026be:	b470      	push	{r4, r5, r6}
 80026c0:	68dc      	ldr	r4, [r3, #12]
 80026c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c6:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026cc:	2e04      	cmp	r6, #4
 80026ce:	bf28      	it	cs
 80026d0:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d919      	bls.n	800270a <HAL_NVIC_SetPriority+0x4e>
 80026d6:	3c03      	subs	r4, #3
 80026d8:	2501      	movs	r5, #1
 80026da:	40a5      	lsls	r5, r4
 80026dc:	3d01      	subs	r5, #1
 80026de:	402a      	ands	r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) < 0)
 80026e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	fa03 f306 	lsl.w	r3, r3, r6
 80026e8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80026ec:	ea01 0103 	and.w	r1, r1, r3
 80026f0:	fa01 f104 	lsl.w	r1, r1, r4
 80026f4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80026f8:	db0a      	blt.n	8002710 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	0109      	lsls	r1, r1, #4
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_NVIC_SetPriority+0x6c>)
 80026fe:	b2c9      	uxtb	r1, r1
 8002700:	4403      	add	r3, r0
 8002702:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002706:	bc70      	pop	{r4, r5, r6}
 8002708:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	2200      	movs	r2, #0
 800270c:	4614      	mov	r4, r2
 800270e:	e7e7      	b.n	80026e0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	f000 000f 	and.w	r0, r0, #15
 8002714:	0109      	lsls	r1, r1, #4
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_NVIC_SetPriority+0x70>)
 8002718:	b2c9      	uxtb	r1, r1
 800271a:	4403      	add	r3, r0
 800271c:	7619      	strb	r1, [r3, #24]
 800271e:	bc70      	pop	{r4, r5, r6}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ecfc 	.word	0xe000ecfc

08002730 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002730:	f000 011f 	and.w	r1, r0, #31
 8002734:	2301      	movs	r3, #1
 8002736:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_NVIC_EnableIRQ+0x14>)
 8002738:	0940      	lsrs	r0, r0, #5
 800273a:	408b      	lsls	r3, r1
 800273c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000e100 	.word	0xe000e100

08002748 <HAL_DFSDM_ChannelInit>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002748:	b350      	cbz	r0, 80027a0 <HAL_DFSDM_ChannelInit+0x58>
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800274a:	4a5f      	ldr	r2, [pc, #380]	; (80028c8 <HAL_DFSDM_ChannelInit+0x180>)
{
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800274e:	6803      	ldr	r3, [r0, #0]
  if(Instance == DFSDM1_Channel0)
 8002750:	4293      	cmp	r3, r2
 8002752:	d027      	beq.n	80027a4 <HAL_DFSDM_ChannelInit+0x5c>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 8002754:	3220      	adds	r2, #32
 8002756:	4293      	cmp	r3, r2
 8002758:	f000 8087 	beq.w	800286a <HAL_DFSDM_ChannelInit+0x122>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 800275c:	3220      	adds	r2, #32
 800275e:	4293      	cmp	r3, r2
 8002760:	d01a      	beq.n	8002798 <HAL_DFSDM_ChannelInit+0x50>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 8002762:	3220      	adds	r2, #32
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <HAL_DFSDM_ChannelInit+0x48>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 8002768:	3220      	adds	r2, #32
 800276a:	4293      	cmp	r3, r2
 800276c:	d016      	beq.n	800279c <HAL_DFSDM_ChannelInit+0x54>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 800276e:	3220      	adds	r2, #32
 8002770:	4293      	cmp	r3, r2
 8002772:	d07c      	beq.n	800286e <HAL_DFSDM_ChannelInit+0x126>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 8002774:	3220      	adds	r2, #32
 8002776:	4293      	cmp	r3, r2
 8002778:	d00c      	beq.n	8002794 <HAL_DFSDM_ChannelInit+0x4c>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
 800277a:	3220      	adds	r2, #32
  {
    channel = 7;
 800277c:	4293      	cmp	r3, r2
 800277e:	bf14      	ite	ne
 8002780:	23ff      	movne	r3, #255	; 0xff
 8002782:	2307      	moveq	r3, #7
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002784:	4d51      	ldr	r5, [pc, #324]	; (80028cc <HAL_DFSDM_ChannelInit+0x184>)
 8002786:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800278a:	b16b      	cbz	r3, 80027a8 <HAL_DFSDM_ChannelInit+0x60>
    return HAL_ERROR;
 800278c:	2001      	movs	r0, #1
}
 800278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    channel = 3;
 8002790:	2303      	movs	r3, #3
 8002792:	e7f7      	b.n	8002784 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 6;
 8002794:	2306      	movs	r3, #6
 8002796:	e7f5      	b.n	8002784 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 2;
 8002798:	2302      	movs	r3, #2
 800279a:	e7f3      	b.n	8002784 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 4;
 800279c:	2304      	movs	r3, #4
 800279e:	e7f1      	b.n	8002784 <HAL_DFSDM_ChannelInit+0x3c>
    return HAL_ERROR;
 80027a0:	2001      	movs	r0, #1
 80027a2:	4770      	bx	lr
    channel = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e7ed      	b.n	8002784 <HAL_DFSDM_ChannelInit+0x3c>
 80027a8:	4604      	mov	r4, r0
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80027aa:	f7fe ff8b 	bl	80016c4 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 80027ae:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <HAL_DFSDM_ChannelInit+0x188>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	3201      	adds	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d05c      	beq.n	8002876 <HAL_DFSDM_ChannelInit+0x12e>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80027bc:	6823      	ldr	r3, [r4, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027be:	2001      	movs	r0, #1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80027c0:	6966      	ldr	r6, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80027c2:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80027c4:	6922      	ldr	r2, [r4, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80027c6:	69a7      	ldr	r7, [r4, #24]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80027c8:	f421 4171 	bic.w	r1, r1, #61696	; 0xf100
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80027cc:	4332      	orrs	r2, r6
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027ce:	69e6      	ldr	r6, [r4, #28]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80027d0:	6019      	str	r1, [r3, #0]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80027d2:	433a      	orrs	r2, r7
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80027d4:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027d6:	6a27      	ldr	r7, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80027d8:	430a      	orrs	r2, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80027da:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027e0:	433e      	orrs	r6, r7
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80027e2:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80027e4:	681f      	ldr	r7, [r3, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027e6:	1e4a      	subs	r2, r1, #1
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80027e8:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80027ec:	f027 070f 	bic.w	r7, r7, #15
 80027f0:	601f      	str	r7, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027f2:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80027f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027f6:	430e      	orrs	r6, r1
 80027f8:	601e      	str	r6, [r3, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027fa:	6899      	ldr	r1, [r3, #8]
  if(Instance == DFSDM1_Channel0)
 80027fc:	4e32      	ldr	r6, [pc, #200]	; (80028c8 <HAL_DFSDM_ChannelInit+0x180>)
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027fe:	f421 015f 	bic.w	r1, r1, #14614528	; 0xdf0000
  if(Instance == DFSDM1_Channel0)
 8002802:	42b3      	cmp	r3, r6
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002804:	6099      	str	r1, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	ea41 010c 	orr.w	r1, r1, ip
 800280c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002810:	6099      	str	r1, [r3, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	f001 0107 	and.w	r1, r1, #7
 8002818:	6059      	str	r1, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	ea42 02ce 	orr.w	r2, r2, lr, lsl #3
 8002820:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002824:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800282c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800282e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(Instance == DFSDM1_Channel0)
 8002832:	d03b      	beq.n	80028ac <HAL_DFSDM_ChannelInit+0x164>
  else if(Instance == DFSDM1_Channel1)
 8002834:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <HAL_DFSDM_ChannelInit+0x18c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_DFSDM_ChannelInit+0x11a>
  else if(Instance == DFSDM1_Channel2)
 800283a:	3220      	adds	r2, #32
 800283c:	4293      	cmp	r3, r2
 800283e:	d031      	beq.n	80028a4 <HAL_DFSDM_ChannelInit+0x15c>
  else if(Instance == DFSDM1_Channel3)
 8002840:	3220      	adds	r2, #32
 8002842:	4293      	cmp	r3, r2
 8002844:	d015      	beq.n	8002872 <HAL_DFSDM_ChannelInit+0x12a>
  else if(Instance == DFSDM1_Channel4)
 8002846:	3220      	adds	r2, #32
 8002848:	4293      	cmp	r3, r2
 800284a:	d02d      	beq.n	80028a8 <HAL_DFSDM_ChannelInit+0x160>
  else if(Instance == DFSDM1_Channel5)
 800284c:	3220      	adds	r2, #32
 800284e:	4293      	cmp	r3, r2
 8002850:	d02e      	beq.n	80028b0 <HAL_DFSDM_ChannelInit+0x168>
  else if(Instance == DFSDM1_Channel6)
 8002852:	3220      	adds	r2, #32
 8002854:	4293      	cmp	r3, r2
 8002856:	d034      	beq.n	80028c2 <HAL_DFSDM_ChannelInit+0x17a>
  else if(Instance == DFSDM1_Channel7)
 8002858:	481f      	ldr	r0, [pc, #124]	; (80028d8 <HAL_DFSDM_ChannelInit+0x190>)
    channel = 7;
 800285a:	4283      	cmp	r3, r0
 800285c:	bf14      	ite	ne
 800285e:	20ff      	movne	r0, #255	; 0xff
 8002860:	2007      	moveq	r0, #7
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002862:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8002866:	2000      	movs	r0, #0
 8002868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    channel = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	e78a      	b.n	8002784 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 5;
 800286e:	2305      	movs	r3, #5
 8002870:	e788      	b.n	8002784 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 3;
 8002872:	2003      	movs	r0, #3
 8002874:	e7f5      	b.n	8002862 <HAL_DFSDM_ChannelInit+0x11a>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_DFSDM_ChannelInit+0x180>)
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002878:	7921      	ldrb	r1, [r4, #4]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800287a:	681a      	ldr	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800287c:	2901      	cmp	r1, #1
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800287e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002882:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68a0      	ldr	r0, [r4, #8]
 8002888:	ea42 0200 	orr.w	r2, r2, r0
 800288c:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002894:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002896:	d00d      	beq.n	80028b4 <HAL_DFSDM_ChannelInit+0x16c>
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <HAL_DFSDM_ChannelInit+0x180>)
 800289a:	6813      	ldr	r3, [r2, #0]
 800289c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e78b      	b.n	80027bc <HAL_DFSDM_ChannelInit+0x74>
    channel = 2;
 80028a4:	2002      	movs	r0, #2
 80028a6:	e7dc      	b.n	8002862 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 4;
 80028a8:	2004      	movs	r0, #4
 80028aa:	e7da      	b.n	8002862 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 0;
 80028ac:	2000      	movs	r0, #0
 80028ae:	e7d8      	b.n	8002862 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 5;
 80028b0:	2005      	movs	r0, #5
 80028b2:	e7d6      	b.n	8002862 <HAL_DFSDM_ChannelInit+0x11a>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 80028b4:	68e1      	ldr	r1, [r4, #12]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	3901      	subs	r1, #1
 80028ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e7ea      	b.n	8002898 <HAL_DFSDM_ChannelInit+0x150>
    channel = 6;
 80028c2:	2006      	movs	r0, #6
 80028c4:	e7cd      	b.n	8002862 <HAL_DFSDM_ChannelInit+0x11a>
 80028c6:	bf00      	nop
 80028c8:	40017400 	.word	0x40017400
 80028cc:	200000f8 	.word	0x200000f8
 80028d0:	20000118 	.word	0x20000118
 80028d4:	40017420 	.word	0x40017420
 80028d8:	400174e0 	.word	0x400174e0

080028dc <HAL_DFSDM_FilterInit>:
  if(hdfsdm_filter == NULL)
 80028dc:	2800      	cmp	r0, #0
 80028de:	d06b      	beq.n	80029b8 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80028e0:	6802      	ldr	r2, [r0, #0]
{
 80028e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80028e4:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_DFSDM_FilterInit+0xe0>)
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d059      	beq.n	800299e <HAL_DFSDM_FilterInit+0xc2>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80028ea:	2200      	movs	r2, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	4604      	mov	r4, r0
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80028f0:	6302      	str	r2, [r0, #48]	; 0x30
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80028f2:	6502      	str	r2, [r0, #80]	; 0x50
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80028f4:	6443      	str	r3, [r0, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80028f6:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80028f8:	f7fe fe30 	bl	800155c <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028fc:	6823      	ldr	r3, [r4, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80028fe:	7a21      	ldrb	r1, [r4, #8]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002900:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002902:	2901      	cmp	r1, #1
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002904:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002908:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	bf0c      	ite	eq
 800290e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002912:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8002916:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002918:	7a62      	ldrb	r2, [r4, #9]
 800291a:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	bf0c      	ite	eq
 8002920:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002924:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8002928:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800292a:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <HAL_DFSDM_FilterInit+0xe4>)
 800292c:	6819      	ldr	r1, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800292e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002932:	400a      	ands	r2, r1
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002934:	f1be 0f02 	cmp.w	lr, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002938:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800293a:	d038      	beq.n	80029ae <HAL_DFSDM_FilterInit+0xd2>
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800293c:	7c25      	ldrb	r5, [r4, #16]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800293e:	2601      	movs	r6, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002940:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002942:	2000      	movs	r0, #0
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002944:	2d01      	cmp	r5, #1
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002946:	491f      	ldr	r1, [pc, #124]	; (80029c4 <HAL_DFSDM_FilterInit+0xe8>)
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002948:	bf0c      	ite	eq
 800294a:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800294e:	f022 0210 	bicne.w	r2, r2, #16
 8002952:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002954:	7c62      	ldrb	r2, [r4, #17]
 8002956:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	bf0c      	ite	eq
 800295c:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002960:	f022 0220 	bicne.w	r2, r2, #32
 8002964:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002966:	695a      	ldr	r2, [r3, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002968:	69e7      	ldr	r7, [r4, #28]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800296a:	4011      	ands	r1, r2
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800296c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800296e:	6159      	str	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8002970:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002972:	6959      	ldr	r1, [r3, #20]
 8002974:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002976:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002978:	433a      	orrs	r2, r7
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800297a:	3901      	subs	r1, #1
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800297c:	6867      	ldr	r7, [r4, #4]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800297e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002982:	69a1      	ldr	r1, [r4, #24]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002984:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002986:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002988:	f8c4 e038 	str.w	lr, [r4, #56]	; 0x38
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800298c:	4332      	orrs	r2, r6
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800298e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002992:	6367      	str	r7, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002994:	63e1      	str	r1, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002996:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002998:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
  return HAL_OK;
 800299c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800299e:	6843      	ldr	r3, [r0, #4]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d002      	beq.n	80029aa <HAL_DFSDM_FilterInit+0xce>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80029a4:	68c3      	ldr	r3, [r0, #12]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d19f      	bne.n	80028ea <HAL_DFSDM_FilterInit+0xe>
    return HAL_ERROR;
 80029aa:	4618      	mov	r0, r3
}
 80029ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	6961      	ldr	r1, [r4, #20]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e7c1      	b.n	800293c <HAL_DFSDM_FilterInit+0x60>
    return HAL_ERROR;
 80029b8:	2001      	movs	r0, #1
 80029ba:	4770      	bx	lr
 80029bc:	40017500 	.word	0x40017500
 80029c0:	ffff80f7 	.word	0xffff80f7
 80029c4:	1c00ff00 	.word	0x1c00ff00

080029c8 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 80029c8:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2bfd      	cmp	r3, #253	; 0xfd
 80029d2:	d812      	bhi.n	80029fa <HAL_DFSDM_FilterConfigRegChannel+0x32>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_DFSDM_FilterConfigRegChannel+0x50>)
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80029d6:	2a01      	cmp	r2, #1
{
 80029d8:	b430      	push	{r4, r5}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80029da:	6804      	ldr	r4, [r0, #0]
 80029dc:	6825      	ldr	r5, [r4, #0]
 80029de:	ea03 0305 	and.w	r3, r3, r5
 80029e2:	6023      	str	r3, [r4, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80029e4:	d00b      	beq.n	80029fe <HAL_DFSDM_FilterConfigRegChannel+0x36>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80029e6:	0209      	lsls	r1, r1, #8
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80029ee:	4319      	orrs	r1, r3
 80029f0:	6021      	str	r1, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80029f2:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80029f4:	2000      	movs	r0, #0
}
 80029f6:	bc30      	pop	{r4, r5}
 80029f8:	4770      	bx	lr
    status = HAL_ERROR;
 80029fa:	2001      	movs	r0, #1
 80029fc:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80029fe:	020b      	lsls	r3, r1, #8
 8002a00:	6821      	ldr	r1, [r4, #0]
 8002a02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	6023      	str	r3, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002a0e:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2000      	movs	r0, #0
}
 8002a12:	bc30      	pop	{r4, r5}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	f8fbffff 	.word	0xf8fbffff

08002a1c <HAL_DFSDM_FilterRegularStart>:
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002a1c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002a20:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8002a24:	2a01      	cmp	r2, #1
 8002a26:	d001      	beq.n	8002a2c <HAL_DFSDM_FilterRegularStart+0x10>
    status = HAL_ERROR;
 8002a28:	2001      	movs	r0, #1
}
 8002a2a:	4770      	bx	lr
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002a2c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002a2e:	b19a      	cbz	r2, 8002a58 <HAL_DFSDM_FilterRegularStart+0x3c>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002a30:	6802      	ldr	r2, [r0, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002a32:	2b03      	cmp	r3, #3
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	f021 0101 	bic.w	r1, r1, #1
 8002a3a:	6011      	str	r1, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002a3c:	6811      	ldr	r1, [r2, #0]
 8002a3e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8002a42:	6011      	str	r1, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002a44:	6811      	ldr	r1, [r2, #0]
 8002a46:	f041 0101 	orr.w	r1, r1, #1
 8002a4a:	6011      	str	r1, [r2, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002a4c:	d010      	beq.n	8002a70 <HAL_DFSDM_FilterRegularStart+0x54>
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a4e:	2302      	movs	r3, #2
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002a50:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2000      	movs	r0, #0
 8002a56:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002a58:	6801      	ldr	r1, [r0, #0]
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a5a:	2b01      	cmp	r3, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002a5c:	680a      	ldr	r2, [r1, #0]
 8002a5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a62:	600a      	str	r2, [r1, #0]
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a64:	d0f3      	beq.n	8002a4e <HAL_DFSDM_FilterRegularStart+0x32>
 8002a66:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002a68:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	4770      	bx	lr
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002a70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a72:	b91b      	cbnz	r3, 8002a7c <HAL_DFSDM_FilterRegularStart+0x60>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	6013      	str	r3, [r2, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8002a7c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a80:	2b01      	cmp	r3, #1
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a82:	f04f 0304 	mov.w	r3, #4
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8002a86:	bf0c      	ite	eq
 8002a88:	6c42      	ldreq	r2, [r0, #68]	; 0x44
 8002a8a:	2201      	movne	r2, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002a8c:	6482      	str	r2, [r0, #72]	; 0x48
 8002a8e:	e7df      	b.n	8002a50 <HAL_DFSDM_FilterRegularStart+0x34>

08002a90 <HAL_DFSDM_FilterGetRegularValue>:
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8002a90:	6803      	ldr	r3, [r0, #0]
 8002a92:	69d8      	ldr	r0, [r3, #28]
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8002a94:	f000 0307 	and.w	r3, r0, #7
}
 8002a98:	1200      	asrs	r0, r0, #8
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8002a9a:	600b      	str	r3, [r1, #0]
}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop

08002aa0 <HAL_DFSDM_FilterErrorCallback>:
{
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop

08002aa4 <HAL_DFSDM_FilterPollForRegConversion>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002aa4:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d003      	beq.n	8002ab4 <HAL_DFSDM_FilterPollForRegConversion+0x10>
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d001      	beq.n	8002ab4 <HAL_DFSDM_FilterPollForRegConversion+0x10>
    return HAL_ERROR;
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	4770      	bx	lr
{
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();  
 8002aba:	f7ff fde5 	bl	8002688 <HAL_GetTick>
 8002abe:	4606      	mov	r6, r0
 8002ac0:	1c63      	adds	r3, r4, #1
 8002ac2:	682a      	ldr	r2, [r5, #0]
 8002ac4:	d114      	bne.n	8002af0 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002ac6:	6893      	ldr	r3, [r2, #8]
 8002ac8:	0798      	lsls	r0, r3, #30
 8002aca:	d5fc      	bpl.n	8002ac6 <HAL_DFSDM_FilterPollForRegConversion+0x22>
    if((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 8002acc:	6893      	ldr	r3, [r2, #8]
 8002ace:	071b      	lsls	r3, r3, #28
 8002ad0:	d419      	bmi.n	8002b06 <HAL_DFSDM_FilterPollForRegConversion+0x62>
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002ad2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002ad4:	b953      	cbnz	r3, 8002aec <HAL_DFSDM_FilterPollForRegConversion+0x48>
 8002ad6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8002ad8:	b940      	cbnz	r0, 8002aec <HAL_DFSDM_FilterPollForRegConversion+0x48>
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8002ada:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	bf14      	ite	ne
 8002ae2:	2303      	movne	r3, #3
 8002ae4:	2301      	moveq	r3, #1
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002ae6:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_OK;
 8002aec:	2000      	movs	r0, #0
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002af0:	6893      	ldr	r3, [r2, #8]
 8002af2:	0799      	lsls	r1, r3, #30
 8002af4:	d4ea      	bmi.n	8002acc <HAL_DFSDM_FilterPollForRegConversion+0x28>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002af6:	b124      	cbz	r4, 8002b02 <HAL_DFSDM_FilterPollForRegConversion+0x5e>
 8002af8:	f7ff fdc6 	bl	8002688 <HAL_GetTick>
 8002afc:	1b80      	subs	r0, r0, r6
 8002afe:	4284      	cmp	r4, r0
 8002b00:	d2de      	bcs.n	8002ac0 <HAL_DFSDM_FilterPollForRegConversion+0x1c>
          return HAL_TIMEOUT;
 8002b02:	2003      	movs	r0, #3
 8002b04:	bd70      	pop	{r4, r5, r6, pc}
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8002b06:	2301      	movs	r3, #1
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002b08:	4628      	mov	r0, r5
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8002b0a:	652b      	str	r3, [r5, #80]	; 0x50
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002b0c:	f7ff ffc8 	bl	8002aa0 <HAL_DFSDM_FilterErrorCallback>
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8002b10:	682b      	ldr	r3, [r5, #0]
 8002b12:	2208      	movs	r2, #8
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	e7dc      	b.n	8002ad2 <HAL_DFSDM_FilterPollForRegConversion+0x2e>

08002b18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff fdb4 	bl	8002688 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b20:	2c00      	cmp	r4, #0
 8002b22:	d076      	beq.n	8002c12 <HAL_DMA_Init+0xfa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b24:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b26:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b2c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002b30:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8002b32:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3c:	e005      	b.n	8002b4a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b3e:	f7ff fda3 	bl	8002688 <HAL_GetTick>
 8002b42:	1b40      	subs	r0, r0, r5
 8002b44:	2805      	cmp	r0, #5
 8002b46:	d83e      	bhi.n	8002bc6 <HAL_DMA_Init+0xae>
 8002b48:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	07d1      	lsls	r1, r2, #31
 8002b4e:	d4f6      	bmi.n	8002b3e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b50:	68a1      	ldr	r1, [r4, #8]
 8002b52:	6862      	ldr	r2, [r4, #4]
 8002b54:	68e0      	ldr	r0, [r4, #12]
 8002b56:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b58:	6921      	ldr	r1, [r4, #16]
 8002b5a:	6965      	ldr	r5, [r4, #20]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b5c:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5e:	69a6      	ldr	r6, [r4, #24]
 8002b60:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b62:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b64:	4f37      	ldr	r7, [pc, #220]	; (8002c44 <HAL_DMA_Init+0x12c>)
  tmp = hdma->Instance->CR;
 8002b66:	6819      	ldr	r1, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b68:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b6a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b6c:	400f      	ands	r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6e:	6a21      	ldr	r1, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b70:	4332      	orrs	r2, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b72:	2d04      	cmp	r5, #4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b74:	ea42 0200 	orr.w	r2, r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b78:	ea42 0201 	orr.w	r2, r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7c:	ea42 0207 	orr.w	r2, r2, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b80:	d028      	beq.n	8002bd4 <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b84:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b86:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b8a:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	482e      	ldr	r0, [pc, #184]	; (8002c48 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b90:	492e      	ldr	r1, [pc, #184]	; (8002c4c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b92:	3a10      	subs	r2, #16
  hdma->Instance->FCR = tmp;
 8002b94:	615d      	str	r5, [r3, #20]
  hdma->State = HAL_DMA_STATE_READY;
 8002b96:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b98:	fba0 0202 	umull	r0, r2, r0, r2
 8002b9c:	0912      	lsrs	r2, r2, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b9e:	5c88      	ldrb	r0, [r1, r2]
  
  if (stream_number > 3U)
 8002ba0:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ba2:	4a2b      	ldr	r2, [pc, #172]	; (8002c50 <HAL_DMA_Init+0x138>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba4:	f04f 0100 	mov.w	r1, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ba8:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002baa:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bae:	f04f 033f 	mov.w	r3, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bb2:	bf88      	it	hi
 8002bb4:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb6:	4083      	lsls	r3, r0
  return HAL_OK;
 8002bb8:	4608      	mov	r0, r1
 8002bba:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bbc:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bbe:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002bc0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8002bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bc8:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8002bca:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bcc:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bd4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002bd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmp |= hdma->Init.FIFOThreshold;
 8002bd8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bda:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8002bdc:	f047 0504 	orr.w	r5, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002be0:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8002be2:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002be4:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002be6:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8002bea:	4315      	orrs	r5, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d0cd      	beq.n	8002b8c <HAL_DMA_Init+0x74>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bf0:	b18e      	cbz	r6, 8002c16 <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bf2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002bf6:	d018      	beq.n	8002c2a <HAL_DMA_Init+0x112>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bf8:	2f02      	cmp	r7, #2
 8002bfa:	d903      	bls.n	8002c04 <HAL_DMA_Init+0xec>
 8002bfc:	2f03      	cmp	r7, #3
 8002bfe:	d1c5      	bne.n	8002b8c <HAL_DMA_Init+0x74>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c00:	01c2      	lsls	r2, r0, #7
 8002c02:	d5c3      	bpl.n	8002b8c <HAL_DMA_Init+0x74>
        hdma->State = HAL_DMA_STATE_READY;
 8002c04:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c06:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8002c08:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c0a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002c0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002c12:	2001      	movs	r0, #1
 8002c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8002c16:	2f01      	cmp	r7, #1
 8002c18:	d003      	beq.n	8002c22 <HAL_DMA_Init+0x10a>
 8002c1a:	d3f1      	bcc.n	8002c00 <HAL_DMA_Init+0xe8>
 8002c1c:	2f02      	cmp	r7, #2
 8002c1e:	d1b5      	bne.n	8002b8c <HAL_DMA_Init+0x74>
 8002c20:	e7ee      	b.n	8002c00 <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c22:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002c26:	d1b1      	bne.n	8002b8c <HAL_DMA_Init+0x74>
 8002c28:	e7ec      	b.n	8002c04 <HAL_DMA_Init+0xec>
    switch (tmp)
 8002c2a:	2f03      	cmp	r7, #3
 8002c2c:	d8ae      	bhi.n	8002b8c <HAL_DMA_Init+0x74>
 8002c2e:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <HAL_DMA_Init+0x11c>)
 8002c30:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8002c34:	08002c05 	.word	0x08002c05
 8002c38:	08002c01 	.word	0x08002c01
 8002c3c:	08002c05 	.word	0x08002c05
 8002c40:	08002c23 	.word	0x08002c23
 8002c44:	e010803f 	.word	0xe010803f
 8002c48:	aaaaaaab 	.word	0xaaaaaaab
 8002c4c:	080077c4 	.word	0x080077c4
 8002c50:	fffffc00 	.word	0xfffffc00

08002c54 <HAL_DMA_Start_IT>:
{
 8002c54:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8002c56:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002c5a:	2c01      	cmp	r4, #1
 8002c5c:	d00e      	beq.n	8002c7c <HAL_DMA_Start_IT+0x28>
 8002c5e:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c60:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c64:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c66:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8002c68:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c6c:	d00a      	beq.n	8002c84 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8002c6e:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 8002c72:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	bcf0      	pop	{r4, r5, r6, r7}
 8002c7a:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002c7c:	2302      	movs	r3, #2
}
 8002c7e:	bcf0      	pop	{r4, r5, r6, r7}
 8002c80:	4618      	mov	r0, r3
 8002c82:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c84:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c86:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c88:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c8a:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c8e:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c90:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c92:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c94:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c96:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002c9a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002c9c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c9e:	d019      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x80>
    hdma->Instance->PAR = SrcAddress;
 8002ca0:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ca2:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca4:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002ca6:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8002ca8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002caa:	408b      	lsls	r3, r1
 8002cac:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	f043 0316 	orr.w	r3, r3, #22
 8002cb4:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002cb6:	6963      	ldr	r3, [r4, #20]
 8002cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbc:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002cbe:	b11a      	cbz	r2, 8002cc8 <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	f043 0308 	orr.w	r3, r3, #8
 8002cc6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002cc8:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8002ccc:	f042 0201 	orr.w	r2, r2, #1
 8002cd0:	6022      	str	r2, [r4, #0]
 8002cd2:	e7d0      	b.n	8002c76 <HAL_DMA_Start_IT+0x22>
    hdma->Instance->PAR = DstAddress;
 8002cd4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002cd6:	60e1      	str	r1, [r4, #12]
 8002cd8:	e7e4      	b.n	8002ca4 <HAL_DMA_Start_IT+0x50>
 8002cda:	bf00      	nop

08002cdc <HAL_DMA_IRQHandler>:
{
 8002cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cde:	4604      	mov	r4, r0
 8002ce0:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8002ce2:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce4:	2208      	movs	r2, #8
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce6:	6da7      	ldr	r7, [r4, #88]	; 0x58
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  __IO uint32_t count = 0;
 8002cea:	9001      	str	r0, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cec:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8002cee:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cf0:	4960      	ldr	r1, [pc, #384]	; (8002e74 <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf2:	4215      	tst	r5, r2
  uint32_t timeout = SystemCoreClock / 9600;
 8002cf4:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf6:	d003      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cf8:	6821      	ldr	r1, [r4, #0]
 8002cfa:	6808      	ldr	r0, [r1, #0]
 8002cfc:	0740      	lsls	r0, r0, #29
 8002cfe:	d476      	bmi.n	8002dee <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d00:	2201      	movs	r2, #1
 8002d02:	409a      	lsls	r2, r3
 8002d04:	4215      	tst	r5, r2
 8002d06:	d003      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d08:	6821      	ldr	r1, [r4, #0]
 8002d0a:	6949      	ldr	r1, [r1, #20]
 8002d0c:	0608      	lsls	r0, r1, #24
 8002d0e:	d468      	bmi.n	8002de2 <HAL_DMA_IRQHandler+0x106>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d10:	2204      	movs	r2, #4
 8002d12:	409a      	lsls	r2, r3
 8002d14:	4215      	tst	r5, r2
 8002d16:	d003      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d18:	6821      	ldr	r1, [r4, #0]
 8002d1a:	6809      	ldr	r1, [r1, #0]
 8002d1c:	0789      	lsls	r1, r1, #30
 8002d1e:	d45a      	bmi.n	8002dd6 <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d20:	2210      	movs	r2, #16
 8002d22:	409a      	lsls	r2, r3
 8002d24:	4215      	tst	r5, r2
 8002d26:	d003      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d28:	6821      	ldr	r1, [r4, #0]
 8002d2a:	6808      	ldr	r0, [r1, #0]
 8002d2c:	0700      	lsls	r0, r0, #28
 8002d2e:	d43f      	bmi.n	8002db0 <HAL_DMA_IRQHandler+0xd4>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d30:	2220      	movs	r2, #32
 8002d32:	409a      	lsls	r2, r3
 8002d34:	4215      	tst	r5, r2
 8002d36:	d003      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d38:	6821      	ldr	r1, [r4, #0]
 8002d3a:	6808      	ldr	r0, [r1, #0]
 8002d3c:	06c0      	lsls	r0, r0, #27
 8002d3e:	d425      	bmi.n	8002d8c <HAL_DMA_IRQHandler+0xb0>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d42:	b30b      	cbz	r3, 8002d88 <HAL_DMA_IRQHandler+0xac>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d46:	07da      	lsls	r2, r3, #31
 8002d48:	d51a      	bpl.n	8002d80 <HAL_DMA_IRQHandler+0xa4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d4a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8002d4c:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d4e:	4a4a      	ldr	r2, [pc, #296]	; (8002e78 <HAL_DMA_IRQHandler+0x19c>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8002d54:	fba2 3206 	umull	r3, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 8002d58:	680b      	ldr	r3, [r1, #0]
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8002d5e:	0a92      	lsrs	r2, r2, #10
      __HAL_DMA_DISABLE(hdma);
 8002d60:	600b      	str	r3, [r1, #0]
 8002d62:	e002      	b.n	8002d6a <HAL_DMA_IRQHandler+0x8e>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d64:	680b      	ldr	r3, [r1, #0]
 8002d66:	07db      	lsls	r3, r3, #31
 8002d68:	d504      	bpl.n	8002d74 <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 8002d6a:	9b01      	ldr	r3, [sp, #4]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	d2f7      	bcs.n	8002d64 <HAL_DMA_IRQHandler+0x88>
      __HAL_UNLOCK(hdma);
 8002d74:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002d76:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8002d78:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002d80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d82:	b10b      	cbz	r3, 8002d88 <HAL_DMA_IRQHandler+0xac>
      hdma->XferErrorCallback(hdma);
 8002d84:	4620      	mov	r0, r4
 8002d86:	4798      	blx	r3
}
 8002d88:	b003      	add	sp, #12
 8002d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d8c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d8e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002d92:	2a05      	cmp	r2, #5
 8002d94:	d03b      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d96:	680b      	ldr	r3, [r1, #0]
 8002d98:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d9c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d9e:	d054      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002da0:	0319      	lsls	r1, r3, #12
 8002da2:	d55f      	bpl.n	8002e64 <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 8002da4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ca      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 8002daa:	4620      	mov	r0, r4
 8002dac:	4798      	blx	r3
 8002dae:	e7c7      	b.n	8002d40 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002db0:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002db2:	680a      	ldr	r2, [r1, #0]
 8002db4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002db8:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dba:	d122      	bne.n	8002e02 <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dbc:	05d2      	lsls	r2, r2, #23
 8002dbe:	d403      	bmi.n	8002dc8 <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dc0:	680a      	ldr	r2, [r1, #0]
 8002dc2:	f022 0208 	bic.w	r2, r2, #8
 8002dc6:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002dc8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	d0b0      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8002dce:	4620      	mov	r0, r4
 8002dd0:	4790      	blx	r2
 8002dd2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002dd4:	e7ac      	b.n	8002d30 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dd6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dd8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002dda:	f042 0204 	orr.w	r2, r2, #4
 8002dde:	6562      	str	r2, [r4, #84]	; 0x54
 8002de0:	e79e      	b.n	8002d20 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002de2:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002de4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002de6:	f042 0202 	orr.w	r2, r2, #2
 8002dea:	6562      	str	r2, [r4, #84]	; 0x54
 8002dec:	e790      	b.n	8002d10 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dee:	6808      	ldr	r0, [r1, #0]
 8002df0:	f020 0004 	bic.w	r0, r0, #4
 8002df4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002df6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	6562      	str	r2, [r4, #84]	; 0x54
 8002e00:	e77e      	b.n	8002d00 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e02:	0311      	lsls	r1, r2, #12
 8002e04:	d5e0      	bpl.n	8002dc8 <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e06:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	d1e0      	bne.n	8002dce <HAL_DMA_IRQHandler+0xf2>
 8002e0c:	e790      	b.n	8002d30 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e0e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e10:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e12:	f022 0216 	bic.w	r2, r2, #22
 8002e16:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e18:	694a      	ldr	r2, [r1, #20]
 8002e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e1e:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e20:	b320      	cbz	r0, 8002e6c <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e22:	680a      	ldr	r2, [r1, #0]
 8002e24:	f022 0208 	bic.w	r2, r2, #8
 8002e28:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2a:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8002e2c:	2500      	movs	r5, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	2001      	movs	r0, #1
        if(hdma->XferAbortCallback != NULL)
 8002e30:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002e38:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002e3c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002e40:	2900      	cmp	r1, #0
 8002e42:	d0a1      	beq.n	8002d88 <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 8002e44:	4620      	mov	r0, r4
 8002e46:	4788      	blx	r1
 8002e48:	e79e      	b.n	8002d88 <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e4a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002e4e:	d1a9      	bne.n	8002da4 <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e50:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002e52:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e54:	f022 0210 	bic.w	r2, r2, #16
 8002e58:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8002e5a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8002e62:	e79f      	b.n	8002da4 <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 8002e64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d19f      	bne.n	8002daa <HAL_DMA_IRQHandler+0xce>
 8002e6a:	e769      	b.n	8002d40 <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e6c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	d1d7      	bne.n	8002e22 <HAL_DMA_IRQHandler+0x146>
 8002e72:	e7da      	b.n	8002e2a <HAL_DMA_IRQHandler+0x14e>
 8002e74:	2000001c 	.word	0x2000001c
 8002e78:	1b4e81b5 	.word	0x1b4e81b5

08002e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e80:	f8d1 c000 	ldr.w	ip, [r1]
 8002e84:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e86:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e88:	f8df 822c 	ldr.w	r8, [pc, #556]	; 80030b8 <HAL_GPIO_Init+0x23c>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e8c:	f8df e22c 	ldr.w	lr, [pc, #556]	; 80030bc <HAL_GPIO_Init+0x240>
 8002e90:	e003      	b.n	8002e9a <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e92:	3501      	adds	r5, #1
 8002e94:	2d10      	cmp	r5, #16
 8002e96:	f000 80bf 	beq.w	8003018 <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9e:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d1f5      	bne.n	8002e92 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea6:	684e      	ldr	r6, [r1, #4]
 8002ea8:	f026 0910 	bic.w	r9, r6, #16
 8002eac:	f1b9 0f02 	cmp.w	r9, #2
 8002eb0:	f040 80b5 	bne.w	800301e <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 8002eb4:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eb8:	f005 0a07 	and.w	sl, r5, #7
 8002ebc:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ec0:	690c      	ldr	r4, [r1, #16]
 8002ec2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ec6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002eca:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ece:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ed2:	fa04 f40a 	lsl.w	r4, r4, sl
 8002ed6:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eda:	ea27 070b 	bic.w	r7, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ede:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ee2:	433c      	orrs	r4, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ee4:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ee8:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3] = temp;
 8002eec:	f8c9 4020 	str.w	r4, [r9, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ef0:	ea6f 040b 	mvn.w	r4, fp
      temp = GPIOx->MODER;
 8002ef4:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ef8:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002efc:	ea04 0909 	and.w	r9, r4, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f00:	ea47 0709 	orr.w	r7, r7, r9
      GPIOx->MODER = temp;
 8002f04:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8002f06:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f08:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f0c:	ea07 0b04 	and.w	fp, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f10:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f12:	fa09 f905 	lsl.w	r9, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f16:	fa07 f70a 	lsl.w	r7, r7, sl
 8002f1a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8002f1e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002f20:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f22:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f26:	ea49 0303 	orr.w	r3, r9, r3
        GPIOx->OTYPER = temp;
 8002f2a:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8002f2c:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f2e:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f30:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f32:	fa03 f30a 	lsl.w	r3, r3, sl
 8002f36:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8002f38:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f3a:	00f3      	lsls	r3, r6, #3
 8002f3c:	d5a9      	bpl.n	8002e92 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8002f42:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f46:	f005 0303 	and.w	r3, r5, #3
 8002f4a:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002f52:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f56:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f58:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
 8002f5c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002f60:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f64:	fa09 f903 	lsl.w	r9, r9, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f68:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8002f6c:	9401      	str	r4, [sp, #4]
 8002f6e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002f70:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f72:	ea24 0a09 	bic.w	sl, r4, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f76:	4c4b      	ldr	r4, [pc, #300]	; (80030a4 <HAL_GPIO_Init+0x228>)
 8002f78:	42a0      	cmp	r0, r4
 8002f7a:	d069      	beq.n	8003050 <HAL_GPIO_Init+0x1d4>
 8002f7c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f80:	42a0      	cmp	r0, r4
 8002f82:	d067      	beq.n	8003054 <HAL_GPIO_Init+0x1d8>
 8002f84:	4c48      	ldr	r4, [pc, #288]	; (80030a8 <HAL_GPIO_Init+0x22c>)
 8002f86:	42a0      	cmp	r0, r4
 8002f88:	d069      	beq.n	800305e <HAL_GPIO_Init+0x1e2>
 8002f8a:	4c48      	ldr	r4, [pc, #288]	; (80030ac <HAL_GPIO_Init+0x230>)
 8002f8c:	42a0      	cmp	r0, r4
 8002f8e:	d06b      	beq.n	8003068 <HAL_GPIO_Init+0x1ec>
 8002f90:	4c47      	ldr	r4, [pc, #284]	; (80030b0 <HAL_GPIO_Init+0x234>)
 8002f92:	42a0      	cmp	r0, r4
 8002f94:	d06d      	beq.n	8003072 <HAL_GPIO_Init+0x1f6>
 8002f96:	4c47      	ldr	r4, [pc, #284]	; (80030b4 <HAL_GPIO_Init+0x238>)
 8002f98:	42a0      	cmp	r0, r4
 8002f9a:	d06f      	beq.n	800307c <HAL_GPIO_Init+0x200>
 8002f9c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80030c0 <HAL_GPIO_Init+0x244>
 8002fa0:	4548      	cmp	r0, r9
 8002fa2:	d070      	beq.n	8003086 <HAL_GPIO_Init+0x20a>
 8002fa4:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80030c4 <HAL_GPIO_Init+0x248>
 8002fa8:	4548      	cmp	r0, r9
 8002faa:	d071      	beq.n	8003090 <HAL_GPIO_Init+0x214>
 8002fac:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80030c8 <HAL_GPIO_Init+0x24c>
 8002fb0:	4548      	cmp	r0, r9
 8002fb2:	d072      	beq.n	800309a <HAL_GPIO_Init+0x21e>
 8002fb4:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80030cc <HAL_GPIO_Init+0x250>
 8002fb8:	4548      	cmp	r0, r9
 8002fba:	bf0c      	ite	eq
 8002fbc:	f04f 0909 	moveq.w	r9, #9
 8002fc0:	f04f 090a 	movne.w	r9, #10
 8002fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8002fc8:	ea43 030a 	orr.w	r3, r3, sl
        temp &= ~((uint32_t)iocurrent);
 8002fcc:	43d4      	mvns	r4, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fce:	3501      	adds	r5, #1
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fd0:	60bb      	str	r3, [r7, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd2:	03f7      	lsls	r7, r6, #15
        temp = EXTI->IMR;
 8002fd4:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	bf54      	ite	pl
 8002fda:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002fdc:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fde:	03b7      	lsls	r7, r6, #14
        EXTI->IMR = temp;
 8002fe0:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 8002fe4:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8002fe8:	bf54      	ite	pl
 8002fea:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002fec:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fee:	02f7      	lsls	r7, r6, #11
        EXTI->EMR = temp;
 8002ff0:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 8002ff4:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8002ff8:	bf54      	ite	pl
 8002ffa:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002ffc:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ffe:	02b6      	lsls	r6, r6, #10
        EXTI->RTSR = temp;
 8003000:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 8003004:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8003008:	bf54      	ite	pl
 800300a:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800300c:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 800300e:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8003010:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003014:	f47f af41 	bne.w	8002e9a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8003018:	b003      	add	sp, #12
 800301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800301e:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003022:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8003024:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003028:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800302c:	ea06 0704 	and.w	r7, r6, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003030:	fa04 f40a 	lsl.w	r4, r4, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003034:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003038:	ea6f 0404 	mvn.w	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800303c:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003040:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003044:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 8003048:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800304a:	f63f af6f 	bhi.w	8002f2c <HAL_GPIO_Init+0xb0>
 800304e:	e75a      	b.n	8002f06 <HAL_GPIO_Init+0x8a>
 8003050:	2300      	movs	r3, #0
 8003052:	e7b9      	b.n	8002fc8 <HAL_GPIO_Init+0x14c>
 8003054:	f04f 0901 	mov.w	r9, #1
 8003058:	fa09 f303 	lsl.w	r3, r9, r3
 800305c:	e7b4      	b.n	8002fc8 <HAL_GPIO_Init+0x14c>
 800305e:	f04f 0902 	mov.w	r9, #2
 8003062:	fa09 f303 	lsl.w	r3, r9, r3
 8003066:	e7af      	b.n	8002fc8 <HAL_GPIO_Init+0x14c>
 8003068:	f04f 0903 	mov.w	r9, #3
 800306c:	fa09 f303 	lsl.w	r3, r9, r3
 8003070:	e7aa      	b.n	8002fc8 <HAL_GPIO_Init+0x14c>
 8003072:	f04f 0904 	mov.w	r9, #4
 8003076:	fa09 f303 	lsl.w	r3, r9, r3
 800307a:	e7a5      	b.n	8002fc8 <HAL_GPIO_Init+0x14c>
 800307c:	f04f 0905 	mov.w	r9, #5
 8003080:	fa09 f303 	lsl.w	r3, r9, r3
 8003084:	e7a0      	b.n	8002fc8 <HAL_GPIO_Init+0x14c>
 8003086:	f04f 0906 	mov.w	r9, #6
 800308a:	fa09 f303 	lsl.w	r3, r9, r3
 800308e:	e79b      	b.n	8002fc8 <HAL_GPIO_Init+0x14c>
 8003090:	f04f 0907 	mov.w	r9, #7
 8003094:	fa09 f303 	lsl.w	r3, r9, r3
 8003098:	e796      	b.n	8002fc8 <HAL_GPIO_Init+0x14c>
 800309a:	f04f 0908 	mov.w	r9, #8
 800309e:	fa09 f303 	lsl.w	r3, r9, r3
 80030a2:	e791      	b.n	8002fc8 <HAL_GPIO_Init+0x14c>
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40020800 	.word	0x40020800
 80030ac:	40020c00 	.word	0x40020c00
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40021400 	.word	0x40021400
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40013c00 	.word	0x40013c00
 80030c0:	40021800 	.word	0x40021800
 80030c4:	40021c00 	.word	0x40021c00
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40022400 	.word	0x40022400

080030d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d0:	b902      	cbnz	r2, 80030d4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030d2:	0409      	lsls	r1, r1, #16
 80030d4:	6181      	str	r1, [r0, #24]
 80030d6:	4770      	bx	lr

080030d8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80030d8:	6943      	ldr	r3, [r0, #20]
 80030da:	4059      	eors	r1, r3
 80030dc:	6141      	str	r1, [r0, #20]
 80030de:	4770      	bx	lr

080030e0 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d04f      	beq.n	8003184 <HAL_I2C_Init+0xa4>
{
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80030ea:	4604      	mov	r4, r0
 80030ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d03e      	beq.n	8003172 <HAL_I2C_Init+0x92>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f6:	2124      	movs	r1, #36	; 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030f8:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80030fe:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003100:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003104:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003106:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800310a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800310c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800310e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003116:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003118:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800311a:	d02f      	beq.n	800317c <HAL_I2C_Init+0x9c>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800311c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003120:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003122:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003124:	d021      	beq.n	800316a <HAL_I2C_Init+0x8a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003126:	685e      	ldr	r6, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003128:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800312a:	4d17      	ldr	r5, [pc, #92]	; (8003188 <HAL_I2C_Init+0xa8>)
  hi2c->State = HAL_I2C_STATE_READY;
 800312c:	f04f 0e20 	mov.w	lr, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003130:	6922      	ldr	r2, [r4, #16]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8003132:	4608      	mov	r0, r1
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003134:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003136:	6966      	ldr	r6, [r4, #20]
 8003138:	69a7      	ldr	r7, [r4, #24]
 800313a:	4332      	orrs	r2, r6
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800313c:	605d      	str	r5, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800313e:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003140:	68de      	ldr	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003142:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003146:	6a27      	ldr	r7, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003148:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800314c:	433d      	orrs	r5, r7
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800314e:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003150:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003152:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315c:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	f884 e041 	strb.w	lr, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003162:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  return HAL_OK;
 8003168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800316a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	e7d9      	b.n	8003126 <HAL_I2C_Init+0x46>
    hi2c->Lock = HAL_UNLOCKED;
 8003172:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003176:	f7fe fcad 	bl	8001ad4 <HAL_I2C_MspInit>
 800317a:	e7bb      	b.n	80030f4 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800317c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	e7d0      	b.n	8003126 <HAL_I2C_Init+0x46>
    return HAL_ERROR;
 8003184:	2001      	movs	r0, #1
 8003186:	4770      	bx	lr
 8003188:	02008000 	.word	0x02008000

0800318c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	d001      	beq.n	800319a <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003196:	2002      	movs	r0, #2
 8003198:	4770      	bx	lr
 800319a:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 800319c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80031a0:	2801      	cmp	r0, #1
 80031a2:	d0f8      	beq.n	8003196 <HAL_I2CEx_ConfigAnalogFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a4:	2024      	movs	r0, #36	; 0x24
{
 80031a6:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 80031a8:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80031aa:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ac:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80031b0:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 80031b2:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 80031b4:	f025 0501 	bic.w	r5, r5, #1
 80031b8:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031ba:	6825      	ldr	r5, [r4, #0]
 80031bc:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80031c0:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80031c2:	6825      	ldr	r5, [r4, #0]
 80031c4:	4329      	orrs	r1, r5
 80031c6:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 80031c8:	6821      	ldr	r1, [r4, #0]
 80031ca:	f041 0101 	orr.w	r1, r1, #1
 80031ce:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80031d0:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 80031d8:	bc70      	pop	{r4, r5, r6}
 80031da:	4770      	bx	lr

080031dc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d001      	beq.n	80031ea <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2002      	movs	r0, #2
 80031e8:	4770      	bx	lr
 80031ea:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 80031ec:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80031f0:	2801      	cmp	r0, #1
 80031f2:	d0f8      	beq.n	80031e6 <HAL_I2CEx_ConfigDigitalFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f4:	2024      	movs	r0, #36	; 0x24
{
 80031f6:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 80031f8:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80031fa:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031fc:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003200:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 8003202:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8003204:	f025 0501 	bic.w	r5, r5, #1
 8003208:	6025      	str	r5, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 800320a:	6825      	ldr	r5, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800320c:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003210:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8003214:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003216:	6821      	ldr	r1, [r4, #0]
 8003218:	f041 0101 	orr.w	r1, r1, #1
 800321c:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800321e:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003222:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003226:	bc70      	pop	{r4, r5, r6}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop

0800322c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003232:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8003236:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	6411      	str	r1, [r2, #64]	; 0x40
{
 800323a:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800323e:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003240:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003244:	9201      	str	r2, [sp, #4]
 8003246:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800324e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003250:	f7ff fa1a 	bl	8002688 <HAL_GetTick>
 8003254:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003256:	e005      	b.n	8003264 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003258:	f7ff fa16 	bl	8002688 <HAL_GetTick>
 800325c:	1b40      	subs	r0, r0, r5
 800325e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003262:	d817      	bhi.n	8003294 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003264:	6863      	ldr	r3, [r4, #4]
 8003266:	03da      	lsls	r2, r3, #15
 8003268:	d5f6      	bpl.n	8003258 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800326a:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800326c:	4d0c      	ldr	r5, [pc, #48]	; (80032a0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800326e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003272:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003274:	f7ff fa08 	bl	8002688 <HAL_GetTick>
 8003278:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800327a:	e005      	b.n	8003288 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800327c:	f7ff fa04 	bl	8002688 <HAL_GetTick>
 8003280:	1b00      	subs	r0, r0, r4
 8003282:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003286:	d805      	bhi.n	8003294 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003288:	686b      	ldr	r3, [r5, #4]
 800328a:	039b      	lsls	r3, r3, #14
 800328c:	d5f6      	bpl.n	800327c <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800328e:	2000      	movs	r0, #0
}
 8003290:	b003      	add	sp, #12
 8003292:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003294:	2003      	movs	r0, #3
}
 8003296:	b003      	add	sp, #12
 8003298:	bd30      	pop	{r4, r5, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	40007000 	.word	0x40007000

080032a4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a4:	2800      	cmp	r0, #0
 80032a6:	f000 81d0 	beq.w	800364a <HAL_RCC_OscConfig+0x3a6>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032aa:	6803      	ldr	r3, [r0, #0]
{
 80032ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b0:	07dd      	lsls	r5, r3, #31
{
 80032b2:	b082      	sub	sp, #8
 80032b4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b6:	d530      	bpl.n	800331a <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032b8:	49aa      	ldr	r1, [pc, #680]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 80032ba:	688a      	ldr	r2, [r1, #8]
 80032bc:	f002 020c 	and.w	r2, r2, #12
 80032c0:	2a04      	cmp	r2, #4
 80032c2:	f000 8119 	beq.w	80034f8 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	688a      	ldr	r2, [r1, #8]
 80032c8:	f002 020c 	and.w	r2, r2, #12
 80032cc:	2a08      	cmp	r2, #8
 80032ce:	f000 810f 	beq.w	80034f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	f000 8152 	beq.w	8003580 <HAL_RCC_OscConfig+0x2dc>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80db 	beq.w	8003498 <HAL_RCC_OscConfig+0x1f4>
 80032e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e6:	4b9f      	ldr	r3, [pc, #636]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	f000 81a6 	beq.w	800363a <HAL_RCC_OscConfig+0x396>
 80032ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7ff f9c4 	bl	8002688 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003300:	4d98      	ldr	r5, [pc, #608]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 8003302:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003304:	e005      	b.n	8003312 <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003306:	f7ff f9bf 	bl	8002688 <HAL_GetTick>
 800330a:	1b80      	subs	r0, r0, r6
 800330c:	2864      	cmp	r0, #100	; 0x64
 800330e:	f200 80eb 	bhi.w	80034e8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	682b      	ldr	r3, [r5, #0]
 8003314:	039a      	lsls	r2, r3, #14
 8003316:	d5f6      	bpl.n	8003306 <HAL_RCC_OscConfig+0x62>
 8003318:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331a:	079f      	lsls	r7, r3, #30
 800331c:	d529      	bpl.n	8003372 <HAL_RCC_OscConfig+0xce>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800331e:	4a91      	ldr	r2, [pc, #580]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 8003320:	6891      	ldr	r1, [r2, #8]
 8003322:	f011 0f0c 	tst.w	r1, #12
 8003326:	f000 8082 	beq.w	800342e <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332a:	6891      	ldr	r1, [r2, #8]
 800332c:	f001 010c 	and.w	r1, r1, #12
 8003330:	2908      	cmp	r1, #8
 8003332:	d079      	beq.n	8003428 <HAL_RCC_OscConfig+0x184>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003334:	68e3      	ldr	r3, [r4, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8109 	beq.w	800354e <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333c:	4b89      	ldr	r3, [pc, #548]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 800333e:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003348:	f7ff f99e 	bl	8002688 <HAL_GetTick>
 800334c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	e005      	b.n	800335c <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003350:	f7ff f99a 	bl	8002688 <HAL_GetTick>
 8003354:	1b80      	subs	r0, r0, r6
 8003356:	2802      	cmp	r0, #2
 8003358:	f200 80c6 	bhi.w	80034e8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	0798      	lsls	r0, r3, #30
 8003360:	d5f6      	bpl.n	8003350 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003362:	682b      	ldr	r3, [r5, #0]
 8003364:	6922      	ldr	r2, [r4, #16]
 8003366:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800336a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800336e:	602b      	str	r3, [r5, #0]
 8003370:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003372:	071a      	lsls	r2, r3, #28
 8003374:	d41f      	bmi.n	80033b6 <HAL_RCC_OscConfig+0x112>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003376:	075d      	lsls	r5, r3, #29
 8003378:	d536      	bpl.n	80033e8 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b7a      	ldr	r3, [pc, #488]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 800337c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337e:	00d0      	lsls	r0, r2, #3
 8003380:	d573      	bpl.n	800346a <HAL_RCC_OscConfig+0x1c6>
  FlagStatus pwrclkchanged = RESET;
 8003382:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003384:	4b78      	ldr	r3, [pc, #480]	; (8003568 <HAL_RCC_OscConfig+0x2c4>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	05d1      	lsls	r1, r2, #23
 800338a:	f140 809c 	bpl.w	80034c6 <HAL_RCC_OscConfig+0x222>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338e:	68a3      	ldr	r3, [r4, #8]
 8003390:	2b01      	cmp	r3, #1
 8003392:	f000 80fb 	beq.w	800358c <HAL_RCC_OscConfig+0x2e8>
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80b8 	beq.w	800350c <HAL_RCC_OscConfig+0x268>
 800339c:	2b05      	cmp	r3, #5
 800339e:	4b71      	ldr	r3, [pc, #452]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 80033a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033a2:	f000 810c 	beq.w	80035be <HAL_RCC_OscConfig+0x31a>
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	671a      	str	r2, [r3, #112]	; 0x70
 80033ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	671a      	str	r2, [r3, #112]	; 0x70
 80033b4:	e0ef      	b.n	8003596 <HAL_RCC_OscConfig+0x2f2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033b6:	6963      	ldr	r3, [r4, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d043      	beq.n	8003444 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 80033bc:	4b69      	ldr	r3, [pc, #420]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 80033be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c0:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80033c8:	f7ff f95e 	bl	8002688 <HAL_GetTick>
 80033cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	e005      	b.n	80033dc <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d0:	f7ff f95a 	bl	8002688 <HAL_GetTick>
 80033d4:	1b80      	subs	r0, r0, r6
 80033d6:	2802      	cmp	r0, #2
 80033d8:	f200 8086 	bhi.w	80034e8 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80033de:	079b      	lsls	r3, r3, #30
 80033e0:	d5f6      	bpl.n	80033d0 <HAL_RCC_OscConfig+0x12c>
 80033e2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	075d      	lsls	r5, r3, #29
 80033e6:	d4c8      	bmi.n	800337a <HAL_RCC_OscConfig+0xd6>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e8:	69a2      	ldr	r2, [r4, #24]
 80033ea:	b1ca      	cbz	r2, 8003420 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ec:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 80033ee:	6899      	ldr	r1, [r3, #8]
 80033f0:	f001 010c 	and.w	r1, r1, #12
 80033f4:	2908      	cmp	r1, #8
 80033f6:	d021      	beq.n	800343c <HAL_RCC_OscConfig+0x198>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f8:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fc:	f000 80e7 	beq.w	80035ce <HAL_RCC_OscConfig+0x32a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003400:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003404:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8003406:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003408:	f7ff f93e 	bl	8002688 <HAL_GetTick>
 800340c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e004      	b.n	800341a <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7ff f93a 	bl	8002688 <HAL_GetTick>
 8003414:	1b40      	subs	r0, r0, r5
 8003416:	2802      	cmp	r0, #2
 8003418:	d866      	bhi.n	80034e8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	019b      	lsls	r3, r3, #6
 800341e:	d4f7      	bmi.n	8003410 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003420:	2000      	movs	r0, #0
}
 8003422:	b002      	add	sp, #8
 8003424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003428:	6852      	ldr	r2, [r2, #4]
 800342a:	0256      	lsls	r6, r2, #9
 800342c:	d482      	bmi.n	8003334 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	4a4d      	ldr	r2, [pc, #308]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	0795      	lsls	r5, r2, #30
 8003434:	d524      	bpl.n	8003480 <HAL_RCC_OscConfig+0x1dc>
 8003436:	68e2      	ldr	r2, [r4, #12]
 8003438:	2a01      	cmp	r2, #1
 800343a:	d021      	beq.n	8003480 <HAL_RCC_OscConfig+0x1dc>
    return HAL_ERROR;
 800343c:	2001      	movs	r0, #1
}
 800343e:	b002      	add	sp, #8
 8003440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003444:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 8003446:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003450:	f7ff f91a 	bl	8002688 <HAL_GetTick>
 8003454:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003456:	e004      	b.n	8003462 <HAL_RCC_OscConfig+0x1be>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7ff f916 	bl	8002688 <HAL_GetTick>
 800345c:	1b80      	subs	r0, r0, r6
 800345e:	2802      	cmp	r0, #2
 8003460:	d842      	bhi.n	80034e8 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003462:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003464:	079f      	lsls	r7, r3, #30
 8003466:	d4f7      	bmi.n	8003458 <HAL_RCC_OscConfig+0x1b4>
 8003468:	e7bb      	b.n	80033e2 <HAL_RCC_OscConfig+0x13e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800346a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800346c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	9b01      	ldr	r3, [sp, #4]
 800347e:	e781      	b.n	8003384 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4938      	ldr	r1, [pc, #224]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 8003482:	6920      	ldr	r0, [r4, #16]
 8003484:	680a      	ldr	r2, [r1, #0]
 8003486:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800348a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800348e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003490:	071a      	lsls	r2, r3, #28
 8003492:	f57f af70 	bpl.w	8003376 <HAL_RCC_OscConfig+0xd2>
 8003496:	e78e      	b.n	80033b6 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003498:	4b32      	ldr	r3, [pc, #200]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 800349a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349c:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80034ac:	f7ff f8ec 	bl	8002688 <HAL_GetTick>
 80034b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	e004      	b.n	80034be <HAL_RCC_OscConfig+0x21a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b4:	f7ff f8e8 	bl	8002688 <HAL_GetTick>
 80034b8:	1b80      	subs	r0, r0, r6
 80034ba:	2864      	cmp	r0, #100	; 0x64
 80034bc:	d814      	bhi.n	80034e8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	039b      	lsls	r3, r3, #14
 80034c2:	d4f7      	bmi.n	80034b4 <HAL_RCC_OscConfig+0x210>
 80034c4:	e728      	b.n	8003318 <HAL_RCC_OscConfig+0x74>
      PWR->CR1 |= PWR_CR1_DBP;
 80034c6:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c8:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 80034ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80034d0:	f7ff f8da 	bl	8002688 <HAL_GetTick>
 80034d4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d6:	6833      	ldr	r3, [r6, #0]
 80034d8:	05da      	lsls	r2, r3, #23
 80034da:	f53f af58 	bmi.w	800338e <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034de:	f7ff f8d3 	bl	8002688 <HAL_GetTick>
 80034e2:	1bc0      	subs	r0, r0, r7
 80034e4:	2864      	cmp	r0, #100	; 0x64
 80034e6:	d9f6      	bls.n	80034d6 <HAL_RCC_OscConfig+0x232>
            return HAL_TIMEOUT;
 80034e8:	2003      	movs	r0, #3
}
 80034ea:	b002      	add	sp, #8
 80034ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f0:	684a      	ldr	r2, [r1, #4]
 80034f2:	0250      	lsls	r0, r2, #9
 80034f4:	f57f aeed 	bpl.w	80032d2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	0391      	lsls	r1, r2, #14
 80034fe:	f57f af0c 	bpl.w	800331a <HAL_RCC_OscConfig+0x76>
 8003502:	6862      	ldr	r2, [r4, #4]
 8003504:	2a00      	cmp	r2, #0
 8003506:	f47f af08 	bne.w	800331a <HAL_RCC_OscConfig+0x76>
 800350a:	e797      	b.n	800343c <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350c:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003514:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	671a      	str	r2, [r3, #112]	; 0x70
 800351c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003524:	f7ff f8b0 	bl	8002688 <HAL_GetTick>
 8003528:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352a:	e004      	b.n	8003536 <HAL_RCC_OscConfig+0x292>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7ff f8ac 	bl	8002688 <HAL_GetTick>
 8003530:	1bc0      	subs	r0, r0, r7
 8003532:	4540      	cmp	r0, r8
 8003534:	d8d8      	bhi.n	80034e8 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003536:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003538:	0798      	lsls	r0, r3, #30
 800353a:	d4f7      	bmi.n	800352c <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 800353c:	2d00      	cmp	r5, #0
 800353e:	f43f af53 	beq.w	80033e8 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003542:	4a08      	ldr	r2, [pc, #32]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 8003544:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354a:	6413      	str	r3, [r2, #64]	; 0x40
 800354c:	e74c      	b.n	80033e8 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_OscConfig+0x2c0>)
 8003550:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800355a:	f7ff f895 	bl	8002688 <HAL_GetTick>
 800355e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003560:	e009      	b.n	8003576 <HAL_RCC_OscConfig+0x2d2>
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356c:	f7ff f88c 	bl	8002688 <HAL_GetTick>
 8003570:	1b80      	subs	r0, r0, r6
 8003572:	2802      	cmp	r0, #2
 8003574:	d8b8      	bhi.n	80034e8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003576:	682b      	ldr	r3, [r5, #0]
 8003578:	0799      	lsls	r1, r3, #30
 800357a:	d4f7      	bmi.n	800356c <HAL_RCC_OscConfig+0x2c8>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	e6f8      	b.n	8003372 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003580:	4a33      	ldr	r2, [pc, #204]	; (8003650 <HAL_RCC_OscConfig+0x3ac>)
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e6b7      	b.n	80032fc <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358c:	4a30      	ldr	r2, [pc, #192]	; (8003650 <HAL_RCC_OscConfig+0x3ac>)
 800358e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003596:	f7ff f877 	bl	8002688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359a:	4e2d      	ldr	r6, [pc, #180]	; (8003650 <HAL_RCC_OscConfig+0x3ac>)
      tickstart = HAL_GetTick();
 800359c:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	e005      	b.n	80035b0 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7ff f870 	bl	8002688 <HAL_GetTick>
 80035a8:	eba0 0008 	sub.w	r0, r0, r8
 80035ac:	42b8      	cmp	r0, r7
 80035ae:	d89b      	bhi.n	80034e8 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80035b2:	079b      	lsls	r3, r3, #30
 80035b4:	d5f6      	bpl.n	80035a4 <HAL_RCC_OscConfig+0x300>
    if(pwrclkchanged == SET)
 80035b6:	2d00      	cmp	r5, #0
 80035b8:	f43f af16 	beq.w	80033e8 <HAL_RCC_OscConfig+0x144>
 80035bc:	e7c1      	b.n	8003542 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035be:	f042 0204 	orr.w	r2, r2, #4
 80035c2:	671a      	str	r2, [r3, #112]	; 0x70
 80035c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	671a      	str	r2, [r3, #112]	; 0x70
 80035cc:	e7e3      	b.n	8003596 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 80035ce:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80035d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035d6:	f7ff f857 	bl	8002688 <HAL_GetTick>
 80035da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035dc:	e005      	b.n	80035ea <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035de:	f7ff f853 	bl	8002688 <HAL_GetTick>
 80035e2:	1b80      	subs	r0, r0, r6
 80035e4:	2802      	cmp	r0, #2
 80035e6:	f63f af7f 	bhi.w	80034e8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	682b      	ldr	r3, [r5, #0]
 80035ec:	0199      	lsls	r1, r3, #6
 80035ee:	d4f6      	bmi.n	80035de <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f0:	6a22      	ldr	r2, [r4, #32]
 80035f2:	69e3      	ldr	r3, [r4, #28]
 80035f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80035f6:	4313      	orrs	r3, r2
 80035f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80035fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80035fc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003600:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003602:	0852      	lsrs	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003604:	4c12      	ldr	r4, [pc, #72]	; (8003650 <HAL_RCC_OscConfig+0x3ac>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003606:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800360a:	3a01      	subs	r2, #1
 800360c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003614:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003616:	682b      	ldr	r3, [r5, #0]
 8003618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800361e:	f7ff f833 	bl	8002688 <HAL_GetTick>
 8003622:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003624:	e005      	b.n	8003632 <HAL_RCC_OscConfig+0x38e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003626:	f7ff f82f 	bl	8002688 <HAL_GetTick>
 800362a:	1b40      	subs	r0, r0, r5
 800362c:	2802      	cmp	r0, #2
 800362e:	f63f af5b 	bhi.w	80034e8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	019a      	lsls	r2, r3, #6
 8003636:	d5f6      	bpl.n	8003626 <HAL_RCC_OscConfig+0x382>
 8003638:	e6f2      	b.n	8003420 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e658      	b.n	80032fc <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 800364a:	2001      	movs	r0, #1
}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800

08003654 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003654:	b178      	cbz	r0, 8003676 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003656:	4a5e      	ldr	r2, [pc, #376]	; (80037d0 <HAL_RCC_ClockConfig+0x17c>)
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	428b      	cmp	r3, r1
 8003660:	d20b      	bcs.n	800367a <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	f023 030f 	bic.w	r3, r3, #15
 8003668:	430b      	orrs	r3, r1
 800366a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366c:	6813      	ldr	r3, [r2, #0]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	4299      	cmp	r1, r3
 8003674:	d001      	beq.n	800367a <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8003676:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8003678:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367a:	6803      	ldr	r3, [r0, #0]
{
 800367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003680:	079d      	lsls	r5, r3, #30
 8003682:	d514      	bpl.n	80036ae <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	075c      	lsls	r4, r3, #29
 8003686:	d504      	bpl.n	8003692 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4c52      	ldr	r4, [pc, #328]	; (80037d4 <HAL_RCC_ClockConfig+0x180>)
 800368a:	68a2      	ldr	r2, [r4, #8]
 800368c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003690:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003692:	071a      	lsls	r2, r3, #28
 8003694:	d504      	bpl.n	80036a0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003696:	4c4f      	ldr	r4, [pc, #316]	; (80037d4 <HAL_RCC_ClockConfig+0x180>)
 8003698:	68a2      	ldr	r2, [r4, #8]
 800369a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800369e:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4c4c      	ldr	r4, [pc, #304]	; (80037d4 <HAL_RCC_ClockConfig+0x180>)
 80036a2:	6885      	ldr	r5, [r0, #8]
 80036a4:	68a2      	ldr	r2, [r4, #8]
 80036a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036aa:	432a      	orrs	r2, r5
 80036ac:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	07df      	lsls	r7, r3, #31
 80036b0:	4604      	mov	r4, r0
 80036b2:	460d      	mov	r5, r1
 80036b4:	d521      	bpl.n	80036fa <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b6:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b8:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ba:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036bc:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	d07b      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x164>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c0:	2a02      	cmp	r2, #2
 80036c2:	d071      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x154>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	0799      	lsls	r1, r3, #30
 80036c6:	d528      	bpl.n	800371a <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c8:	4942      	ldr	r1, [pc, #264]	; (80037d4 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ca:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ce:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d0:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80036da:	f7fe ffd5 	bl	8002688 <HAL_GetTick>
 80036de:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e0:	e004      	b.n	80036ec <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e2:	f7fe ffd1 	bl	8002688 <HAL_GetTick>
 80036e6:	1bc0      	subs	r0, r0, r7
 80036e8:	4540      	cmp	r0, r8
 80036ea:	d862      	bhi.n	80037b2 <HAL_RCC_ClockConfig+0x15e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ec:	68b3      	ldr	r3, [r6, #8]
 80036ee:	6862      	ldr	r2, [r4, #4]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80036f8:	d1f3      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036fa:	4a35      	ldr	r2, [pc, #212]	; (80037d0 <HAL_RCC_ClockConfig+0x17c>)
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	429d      	cmp	r5, r3
 8003704:	d20c      	bcs.n	8003720 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	f023 030f 	bic.w	r3, r3, #15
 800370c:	432b      	orrs	r3, r5
 800370e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003710:	6813      	ldr	r3, [r2, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	429d      	cmp	r5, r3
 8003718:	d002      	beq.n	8003720 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 800371a:	2001      	movs	r0, #1
 800371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	075a      	lsls	r2, r3, #29
 8003724:	d506      	bpl.n	8003734 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003726:	492b      	ldr	r1, [pc, #172]	; (80037d4 <HAL_RCC_ClockConfig+0x180>)
 8003728:	68e0      	ldr	r0, [r4, #12]
 800372a:	688a      	ldr	r2, [r1, #8]
 800372c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003730:	4302      	orrs	r2, r0
 8003732:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003734:	071b      	lsls	r3, r3, #28
 8003736:	d507      	bpl.n	8003748 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003738:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <HAL_RCC_ClockConfig+0x180>)
 800373a:	6921      	ldr	r1, [r4, #16]
 800373c:	6893      	ldr	r3, [r2, #8]
 800373e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003742:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003746:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003748:	4922      	ldr	r1, [pc, #136]	; (80037d4 <HAL_RCC_ClockConfig+0x180>)
 800374a:	688b      	ldr	r3, [r1, #8]
 800374c:	f003 030c 	and.w	r3, r3, #12
 8003750:	2b04      	cmp	r3, #4
 8003752:	d019      	beq.n	8003788 <HAL_RCC_ClockConfig+0x134>
 8003754:	2b08      	cmp	r3, #8
 8003756:	d12a      	bne.n	80037ae <HAL_RCC_ClockConfig+0x15a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003758:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800375a:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003760:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003762:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8003766:	d12a      	bne.n	80037be <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003768:	481b      	ldr	r0, [pc, #108]	; (80037d8 <HAL_RCC_ClockConfig+0x184>)
 800376a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800376e:	fba1 0100 	umull	r0, r1, r1, r0
 8003772:	f7fc fd65 	bl	8000240 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_RCC_ClockConfig+0x180>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800377e:	3301      	adds	r3, #1
 8003780:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	e000      	b.n	800378a <HAL_RCC_ClockConfig+0x136>
      sysclockfreq = HSE_VALUE;
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800378a:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <HAL_RCC_ClockConfig+0x180>)
  HAL_InitTick (TICK_INT_PRIORITY);
 800378c:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800378e:	4c14      	ldr	r4, [pc, #80]	; (80037e0 <HAL_RCC_ClockConfig+0x18c>)
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	4914      	ldr	r1, [pc, #80]	; (80037e4 <HAL_RCC_ClockConfig+0x190>)
 8003794:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003798:	5ca2      	ldrb	r2, [r4, r2]
 800379a:	40d3      	lsrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800379e:	f7fe fb39 	bl	8001e14 <HAL_InitTick>
  return HAL_OK;
 80037a2:	2000      	movs	r0, #0
 80037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a8:	0198      	lsls	r0, r3, #6
 80037aa:	d48d      	bmi.n	80036c8 <HAL_RCC_ClockConfig+0x74>
 80037ac:	e7b5      	b.n	800371a <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSI_VALUE;
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x184>)
 80037b0:	e7eb      	b.n	800378a <HAL_RCC_ClockConfig+0x136>
        return HAL_TIMEOUT;
 80037b2:	2003      	movs	r0, #3
}
 80037b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b8:	039e      	lsls	r6, r3, #14
 80037ba:	d485      	bmi.n	80036c8 <HAL_RCC_ClockConfig+0x74>
 80037bc:	e7ad      	b.n	800371a <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037be:	4807      	ldr	r0, [pc, #28]	; (80037dc <HAL_RCC_ClockConfig+0x188>)
 80037c0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80037c4:	2300      	movs	r3, #0
 80037c6:	fba1 0100 	umull	r0, r1, r1, r0
 80037ca:	f7fc fd39 	bl	8000240 <__aeabi_uldivmod>
 80037ce:	e7d2      	b.n	8003776 <HAL_RCC_ClockConfig+0x122>
 80037d0:	40023c00 	.word	0x40023c00
 80037d4:	40023800 	.word	0x40023800
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	007a1200 	.word	0x007a1200
 80037e0:	080077ac 	.word	0x080077ac
 80037e4:	2000001c 	.word	0x2000001c

080037e8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e8:	4916      	ldr	r1, [pc, #88]	; (8003844 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80037ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ec:	688b      	ldr	r3, [r1, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d01b      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x46>
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d117      	bne.n	800382a <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037fa:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037fc:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003802:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003804:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8003808:	d113      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380a:	480f      	ldr	r0, [pc, #60]	; (8003848 <HAL_RCC_GetSysClockFreq+0x60>)
 800380c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003810:	fba1 0100 	umull	r0, r1, r1, r0
 8003814:	f7fc fd14 	bl	8000240 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_GetSysClockFreq+0x5c>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003820:	3301      	adds	r3, #1
 8003822:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003824:	fbb0 f0f3 	udiv	r0, r0, r3
 8003828:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800382a:	4807      	ldr	r0, [pc, #28]	; (8003848 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800382c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800382e:	4807      	ldr	r0, [pc, #28]	; (800384c <HAL_RCC_GetSysClockFreq+0x64>)
 8003830:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003832:	4806      	ldr	r0, [pc, #24]	; (800384c <HAL_RCC_GetSysClockFreq+0x64>)
 8003834:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003838:	2300      	movs	r3, #0
 800383a:	fba1 0100 	umull	r0, r1, r1, r0
 800383e:	f7fc fcff 	bl	8000240 <__aeabi_uldivmod>
 8003842:	e7e9      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x30>
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400
 800384c:	007a1200 	.word	0x007a1200

08003850 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003852:	4a05      	ldr	r2, [pc, #20]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003854:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003856:	4905      	ldr	r1, [pc, #20]	; (800386c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003858:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800385c:	6808      	ldr	r0, [r1, #0]
 800385e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003860:	40d8      	lsrs	r0, r3
 8003862:	4770      	bx	lr
 8003864:	40023800 	.word	0x40023800
 8003868:	080077bc 	.word	0x080077bc
 800386c:	2000001c 	.word	0x2000001c

08003870 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003872:	4a05      	ldr	r2, [pc, #20]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003874:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003876:	4905      	ldr	r1, [pc, #20]	; (800388c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003878:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800387c:	6808      	ldr	r0, [r1, #0]
 800387e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003880:	40d8      	lsrs	r0, r3
 8003882:	4770      	bx	lr
 8003884:	40023800 	.word	0x40023800
 8003888:	080077bc 	.word	0x080077bc
 800388c:	2000001c 	.word	0x2000001c

08003890 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003892:	220f      	movs	r2, #15
 8003894:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	f002 0203 	and.w	r2, r2, #3
 800389c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80038a4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80038ac:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	08db      	lsrs	r3, r3, #3
{
 80038b2:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038b4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038b8:	4c05      	ldr	r4, [pc, #20]	; (80038d0 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038ba:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038bc:	6823      	ldr	r3, [r4, #0]
}
 80038be:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	600b      	str	r3, [r1, #0]
}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40023c00 	.word	0x40023c00

080038d4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038d4:	6803      	ldr	r3, [r0, #0]
{
 80038d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038da:	f013 0501 	ands.w	r5, r3, #1
{
 80038de:	b083      	sub	sp, #12
 80038e0:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038e2:	d00b      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038e4:	4a9d      	ldr	r2, [pc, #628]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80038e6:	6891      	ldr	r1, [r2, #8]
 80038e8:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80038ec:	6091      	str	r1, [r2, #8]
 80038ee:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80038f0:	6891      	ldr	r1, [r2, #8]
 80038f2:	4329      	orrs	r1, r5

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038f4:	fab5 f585 	clz	r5, r5
 80038f8:	096d      	lsrs	r5, r5, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038fa:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038fc:	f413 2600 	ands.w	r6, r3, #524288	; 0x80000
 8003900:	d010      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003902:	4996      	ldr	r1, [pc, #600]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003904:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8003906:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800390a:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800390e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003912:	ea42 0206 	orr.w	r2, r2, r6
 8003916:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800391a:	f000 81c0 	beq.w	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800391e:	fab6 f686 	clz	r6, r6
 8003922:	0976      	lsrs	r6, r6, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003924:	02d9      	lsls	r1, r3, #11
 8003926:	d510      	bpl.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003928:	488c      	ldr	r0, [pc, #560]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800392a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800392c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003930:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003934:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003938:	ea42 0201 	orr.w	r2, r2, r1
 800393c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003940:	f000 81ab 	beq.w	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003944:	2900      	cmp	r1, #0
 8003946:	bf08      	it	eq
 8003948:	2601      	moveq	r6, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800394a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800394e:	bf18      	it	ne
 8003950:	2501      	movne	r5, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003952:	069a      	lsls	r2, r3, #26
 8003954:	f100 815a 	bmi.w	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003958:	06da      	lsls	r2, r3, #27
 800395a:	d50c      	bpl.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800395c:	4a7f      	ldr	r2, [pc, #508]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800395e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003962:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003966:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800396a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800396e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003970:	4301      	orrs	r1, r0
 8003972:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003976:	045f      	lsls	r7, r3, #17
 8003978:	d508      	bpl.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397a:	4978      	ldr	r1, [pc, #480]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800397c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800397e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003982:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003986:	4302      	orrs	r2, r0
 8003988:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800398c:	0418      	lsls	r0, r3, #16
 800398e:	d508      	bpl.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003990:	4972      	ldr	r1, [pc, #456]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003992:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003994:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003998:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800399c:	4302      	orrs	r2, r0
 800399e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039a2:	03d9      	lsls	r1, r3, #15
 80039a4:	d508      	bpl.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039a6:	496d      	ldr	r1, [pc, #436]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039a8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80039aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039ae:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80039b2:	4302      	orrs	r2, r0
 80039b4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039b8:	039a      	lsls	r2, r3, #14
 80039ba:	d508      	bpl.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039bc:	4967      	ldr	r1, [pc, #412]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039be:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80039c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039c4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80039c8:	4302      	orrs	r2, r0
 80039ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ce:	065f      	lsls	r7, r3, #25
 80039d0:	d508      	bpl.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d2:	4962      	ldr	r1, [pc, #392]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80039d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039da:	f022 0203 	bic.w	r2, r2, #3
 80039de:	4302      	orrs	r2, r0
 80039e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039e4:	0618      	lsls	r0, r3, #24
 80039e6:	d508      	bpl.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e8:	495c      	ldr	r1, [pc, #368]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80039ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039f0:	f022 020c 	bic.w	r2, r2, #12
 80039f4:	4302      	orrs	r2, r0
 80039f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039fa:	05d9      	lsls	r1, r3, #23
 80039fc:	d508      	bpl.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039fe:	4957      	ldr	r1, [pc, #348]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a00:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003a02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a06:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003a0a:	4302      	orrs	r2, r0
 8003a0c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a10:	059a      	lsls	r2, r3, #22
 8003a12:	d508      	bpl.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a14:	4951      	ldr	r1, [pc, #324]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a16:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003a18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a1c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003a20:	4302      	orrs	r2, r0
 8003a22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a26:	055f      	lsls	r7, r3, #21
 8003a28:	d508      	bpl.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a2a:	494c      	ldr	r1, [pc, #304]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a36:	4302      	orrs	r2, r0
 8003a38:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a3c:	0518      	lsls	r0, r3, #20
 8003a3e:	d508      	bpl.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a40:	4946      	ldr	r1, [pc, #280]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a4c:	4302      	orrs	r2, r0
 8003a4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a52:	04d9      	lsls	r1, r3, #19
 8003a54:	d508      	bpl.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a56:	4941      	ldr	r1, [pc, #260]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a58:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003a5a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a5e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003a62:	4302      	orrs	r2, r0
 8003a64:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a68:	049a      	lsls	r2, r3, #18
 8003a6a:	d508      	bpl.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a6c:	493b      	ldr	r1, [pc, #236]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a6e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003a70:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a74:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003a78:	4302      	orrs	r2, r0
 8003a7a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a7e:	025f      	lsls	r7, r3, #9
 8003a80:	d508      	bpl.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a82:	4936      	ldr	r1, [pc, #216]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a84:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003a86:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a8a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003a8e:	4302      	orrs	r2, r0
 8003a90:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a94:	0298      	lsls	r0, r3, #10
 8003a96:	d50c      	bpl.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a98:	4930      	ldr	r1, [pc, #192]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a9a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003a9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003aa0:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003aa4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003aa8:	bf08      	it	eq
 8003aaa:	2601      	moveq	r6, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003aac:	4302      	orrs	r2, r0
 8003aae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ab2:	0359      	lsls	r1, r3, #13
 8003ab4:	d508      	bpl.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ab6:	4929      	ldr	r1, [pc, #164]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ab8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003aba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003abe:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ac2:	4302      	orrs	r2, r0
 8003ac4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ac8:	021a      	lsls	r2, r3, #8
 8003aca:	d509      	bpl.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003acc:	4923      	ldr	r1, [pc, #140]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ace:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003ad2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ad6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003ada:	4302      	orrs	r2, r0
 8003adc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ae0:	015f      	lsls	r7, r3, #5
 8003ae2:	d509      	bpl.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ae4:	491d      	ldr	r1, [pc, #116]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ae6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003aea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003aee:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003af2:	4302      	orrs	r2, r0
 8003af4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003af8:	0118      	lsls	r0, r3, #4
 8003afa:	d509      	bpl.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003afc:	4917      	ldr	r1, [pc, #92]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003afe:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003b02:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003b06:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003b0a:	4302      	orrs	r2, r0
 8003b0c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b10:	00d9      	lsls	r1, r3, #3
 8003b12:	d40b      	bmi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x258>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b18:	d016      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003b1a:	07ea      	lsls	r2, r5, #31
 8003b1c:	d414      	bmi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x274>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b1e:	2e01      	cmp	r6, #1
 8003b20:	f000 80c0 	beq.w	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003b24:	2000      	movs	r0, #0
}
 8003b26:	b003      	add	sp, #12
 8003b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b2c:	490b      	ldr	r1, [pc, #44]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b32:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003b36:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003b3a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003b3e:	ea42 0200 	orr.w	r2, r2, r0
 8003b42:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b46:	d1e8      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_PLLI2S_DISABLE();
 8003b48:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b4c:	461d      	mov	r5, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8003b4e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003b52:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003b54:	f7fe fd98 	bl	8002688 <HAL_GetTick>
 8003b58:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b5a:	e006      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003b5c:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b60:	f7fe fd92 	bl	8002688 <HAL_GetTick>
 8003b64:	1bc0      	subs	r0, r0, r7
 8003b66:	2864      	cmp	r0, #100	; 0x64
 8003b68:	d84c      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x330>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b6a:	682b      	ldr	r3, [r5, #0]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	d4f7      	bmi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	07df      	lsls	r7, r3, #31
 8003b74:	d503      	bpl.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003b76:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	f000 80e1 	beq.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b7e:	031d      	lsls	r5, r3, #12
 8003b80:	d504      	bpl.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003b82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b84:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003b88:	f000 8105 	beq.w	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b8c:	02d8      	lsls	r0, r3, #11
 8003b8e:	d504      	bpl.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b92:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003b96:	f000 80fe 	beq.w	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b9a:	01d9      	lsls	r1, r3, #7
 8003b9c:	d511      	bpl.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b9e:	4d9a      	ldr	r5, [pc, #616]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ba0:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ba2:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ba6:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003baa:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003bae:	6921      	ldr	r1, [r4, #16]
 8003bb0:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8003bb4:	433a      	orrs	r2, r7
 8003bb6:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003bba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003bbe:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bc2:	019a      	lsls	r2, r3, #6
 8003bc4:	d50d      	bpl.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bc6:	6923      	ldr	r3, [r4, #16]
 8003bc8:	6862      	ldr	r2, [r4, #4]
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	68e0      	ldr	r0, [r4, #12]
 8003bce:	68a1      	ldr	r1, [r4, #8]
 8003bd0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003bd4:	4a8c      	ldr	r2, [pc, #560]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003bd6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003bda:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003bde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003be2:	4b89      	ldr	r3, [pc, #548]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003be4:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003be6:	461d      	mov	r5, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8003be8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003bec:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003bee:	f7fe fd4b 	bl	8002688 <HAL_GetTick>
 8003bf2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	d491      	bmi.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bfa:	f7fe fd45 	bl	8002688 <HAL_GetTick>
 8003bfe:	1bc0      	subs	r0, r0, r7
 8003c00:	2864      	cmp	r0, #100	; 0x64
 8003c02:	d9f7      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x320>
        return HAL_TIMEOUT;
 8003c04:	2003      	movs	r0, #3
}
 8003c06:	b003      	add	sp, #12
 8003c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c0c:	4a7e      	ldr	r2, [pc, #504]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 8003c0e:	4b7f      	ldr	r3, [pc, #508]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c10:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c12:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c14:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003c18:	6411      	str	r1, [r2, #64]	; 0x40
 8003c1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c1c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003c20:	9201      	str	r2, [sp, #4]
 8003c22:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c2a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003c2c:	f7fe fd2c 	bl	8002688 <HAL_GetTick>
 8003c30:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c32:	e005      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c34:	f7fe fd28 	bl	8002688 <HAL_GetTick>
 8003c38:	eba0 0008 	sub.w	r0, r0, r8
 8003c3c:	2864      	cmp	r0, #100	; 0x64
 8003c3e:	d8e1      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	05db      	lsls	r3, r3, #23
 8003c44:	d5f6      	bpl.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x360>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c46:	4a70      	ldr	r2, [pc, #448]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c48:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c4a:	6f11      	ldr	r1, [r2, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c4c:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8003c50:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 8003c54:	d010      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003c56:	4281      	cmp	r1, r0
 8003c58:	d00e      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c5a:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c5c:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c5e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c62:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 8003c66:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c68:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8003c6a:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8003c6e:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003c70:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c72:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003c74:	07cf      	lsls	r7, r1, #31
 8003c76:	d479      	bmi.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x498>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c78:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8003c7c:	f000 80a7 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003c80:	4961      	ldr	r1, [pc, #388]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003c82:	688a      	ldr	r2, [r1, #8]
 8003c84:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003c88:	608a      	str	r2, [r1, #8]
 8003c8a:	4a5f      	ldr	r2, [pc, #380]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c90:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003c92:	430b      	orrs	r3, r1
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	e65e      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 8003c9a:	2501      	movs	r5, #1
 8003c9c:	e655      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 8003c9e:	2600      	movs	r6, #0
      plli2sused = 1;
 8003ca0:	2501      	movs	r5, #1
 8003ca2:	e63f      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 8003ca4:	4b58      	ldr	r3, [pc, #352]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ca8:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8003caa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003cae:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003cb0:	f7fe fcea 	bl	8002688 <HAL_GetTick>
 8003cb4:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cb8:	f7fe fce6 	bl	8002688 <HAL_GetTick>
 8003cbc:	1b80      	subs	r0, r0, r6
 8003cbe:	2864      	cmp	r0, #100	; 0x64
 8003cc0:	d8a0      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x330>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cc2:	682b      	ldr	r3, [r5, #0]
 8003cc4:	009f      	lsls	r7, r3, #2
 8003cc6:	d4f7      	bmi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cc8:	6822      	ldr	r2, [r4, #0]
 8003cca:	0310      	lsls	r0, r2, #12
 8003ccc:	d44a      	bmi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8003cce:	02d1      	lsls	r1, r2, #11
 8003cd0:	d51d      	bpl.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cd4:	b9db      	cbnz	r3, 8003d0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cd6:	494c      	ldr	r1, [pc, #304]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cd8:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cda:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cde:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce6:	69a0      	ldr	r0, [r4, #24]
 8003ce8:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8003cec:	4333      	orrs	r3, r6
 8003cee:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003cf2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cfa:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8003cfe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003d00:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003d04:	3801      	subs	r0, #1
 8003d06:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003d0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d0e:	0292      	lsls	r2, r2, #10
 8003d10:	d503      	bpl.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003d12:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003d14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d18:	d062      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    __HAL_RCC_PLLSAI_ENABLE();
 8003d1a:	4b3b      	ldr	r3, [pc, #236]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d1e:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8003d20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d24:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003d26:	f7fe fcaf 	bl	8002688 <HAL_GetTick>
 8003d2a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	f53f aef8 	bmi.w	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x250>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d34:	f7fe fca8 	bl	8002688 <HAL_GetTick>
 8003d38:	1b40      	subs	r0, r0, r5
 8003d3a:	2864      	cmp	r0, #100	; 0x64
 8003d3c:	d9f6      	bls.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003d3e:	e761      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x330>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d40:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d44:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d48:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8003d4c:	6860      	ldr	r0, [r4, #4]
 8003d4e:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8003d52:	68a1      	ldr	r1, [r4, #8]
 8003d54:	433a      	orrs	r2, r7
 8003d56:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003d5a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003d5e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 8003d62:	e70c      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0b5      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x402>
 8003d6a:	e7b0      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003d72:	f7fe fc89 	bl	8002688 <HAL_GetTick>
 8003d76:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d78:	e006      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fe fc85 	bl	8002688 <HAL_GetTick>
 8003d7e:	eba0 0009 	sub.w	r0, r0, r9
 8003d82:	4540      	cmp	r0, r8
 8003d84:	f63f af3e 	bhi.w	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d8a:	0799      	lsls	r1, r3, #30
 8003d8c:	d5f5      	bpl.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003d8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d90:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8003d94:	e770      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d96:	4d1c      	ldr	r5, [pc, #112]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d98:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d9a:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d9e:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003da2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8003da6:	68e1      	ldr	r1, [r4, #12]
 8003da8:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8003dac:	433a      	orrs	r2, r7
 8003dae:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003db2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003db6:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dba:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8003dbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003dc0:	f021 011f 	bic.w	r1, r1, #31
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8003dcc:	e6e5      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dce:	480e      	ldr	r0, [pc, #56]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003dd0:	490f      	ldr	r1, [pc, #60]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003dd2:	6882      	ldr	r2, [r0, #8]
 8003dd4:	4019      	ands	r1, r3
 8003dd6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	6082      	str	r2, [r0, #8]
 8003dde:	e754      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003de0:	4a09      	ldr	r2, [pc, #36]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003de2:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003de4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003de8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003df0:	6a20      	ldr	r0, [r4, #32]
 8003df2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003df6:	430b      	orrs	r3, r1
 8003df8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003dfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003e04:	e789      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	0ffffcff 	.word	0x0ffffcff

08003e14 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d05d      	beq.n	8003ed4 <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e18:	2200      	movs	r2, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e1a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
{
 8003e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e22:	6282      	str	r2, [r0, #40]	; 0x28
 8003e24:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d04d      	beq.n	8003eca <HAL_SPI_Init+0xb6>

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e2e:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e30:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003e32:	6822      	ldr	r2, [r4, #0]
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e34:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e38:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e3c:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 8003e40:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e42:	bf94      	ite	ls
 8003e44:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 8003e48:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003e52:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e54:	d135      	bne.n	8003ec2 <HAL_SPI_Init+0xae>
 8003e56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003e58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e5a:	b92b      	cbnz	r3, 8003e68 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e5c:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003e60:	bf8c      	ite	hi
 8003e62:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003e64:	2301      	movls	r3, #1
 8003e66:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e68:	68a1      	ldr	r1, [r4, #8]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e6a:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e6e:	6863      	ldr	r3, [r4, #4]
 8003e70:	6920      	ldr	r0, [r4, #16]
 8003e72:	430b      	orrs	r3, r1
 8003e74:	6961      	ldr	r1, [r4, #20]
 8003e76:	4303      	orrs	r3, r0
 8003e78:	69a0      	ldr	r0, [r4, #24]
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e7e:	ea4f 4e10 	mov.w	lr, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e82:	f400 7c00 	and.w	ip, r0, #512	; 0x200
 8003e86:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e8a:	f00e 0e04 	and.w	lr, lr, #4
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 8003e8e:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e90:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e92:	6a21      	ldr	r1, [r4, #32]
 8003e94:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e98:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e9a:	ea43 030c 	orr.w	r3, r3, ip
  hspi->State     = HAL_SPI_STATE_READY;
 8003e9e:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003ea2:	ea47 070e 	orr.w	r7, r7, lr
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003ea6:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003ea8:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003eaa:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003eac:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eae:	69d3      	ldr	r3, [r2, #28]
 8003eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eb4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eb6:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003eba:	f884 c05d 	strb.w	ip, [r4, #93]	; 0x5d
  return HAL_OK;
 8003ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	461e      	mov	r6, r3
 8003ec6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ec8:	e7c6      	b.n	8003e58 <HAL_SPI_Init+0x44>
    hspi->Lock = HAL_UNLOCKED;
 8003eca:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003ece:	f7fd ff39 	bl	8001d44 <HAL_SPI_MspInit>
 8003ed2:	e7ac      	b.n	8003e2e <HAL_SPI_Init+0x1a>
    return HAL_ERROR;
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	f000 808d 	beq.w	8003ff8 <HAL_TIM_Base_Init+0x120>
{ 
 8003ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003ee0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d077      	beq.n	8003fde <HAL_TIM_Base_Init+0x106>
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003eee:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003ef0:	2302      	movs	r3, #2
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003ef2:	4943      	ldr	r1, [pc, #268]	; (8004000 <HAL_TIM_Base_Init+0x128>)
 8003ef4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;
 8003ef8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003efc:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8003f00:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003f02:	fab1 f181 	clz	r1, r1
 8003f06:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8003f0a:	d047      	beq.n	8003f9c <HAL_TIM_Base_Init+0xc4>
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d145      	bne.n	8003f9c <HAL_TIM_Base_Init+0xc4>
 8003f10:	483c      	ldr	r0, [pc, #240]	; (8004004 <HAL_TIM_Base_Init+0x12c>)
 8003f12:	4282      	cmp	r2, r0
 8003f14:	d068      	beq.n	8003fe8 <HAL_TIM_Base_Init+0x110>
 8003f16:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003f1a:	4282      	cmp	r2, r0
 8003f1c:	d064      	beq.n	8003fe8 <HAL_TIM_Base_Init+0x110>
 8003f1e:	4d3a      	ldr	r5, [pc, #232]	; (8004008 <HAL_TIM_Base_Init+0x130>)
 8003f20:	4e3a      	ldr	r6, [pc, #232]	; (800400c <HAL_TIM_Base_Init+0x134>)
 8003f22:	1b50      	subs	r0, r2, r5
 8003f24:	42aa      	cmp	r2, r5
 8003f26:	bf18      	it	ne
 8003f28:	42b2      	cmpne	r2, r6
 8003f2a:	fab0 f080 	clz	r0, r0
 8003f2e:	ea4f 1050 	mov.w	r0, r0, lsr #5
 8003f32:	d15f      	bne.n	8003ff4 <HAL_TIM_Base_Init+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003f34:	4d36      	ldr	r5, [pc, #216]	; (8004010 <HAL_TIM_Base_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f3a:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003f3c:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 8003f3e:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003f42:	d034      	beq.n	8003fae <HAL_TIM_Base_Init+0xd6>
 8003f44:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 8003f48:	42aa      	cmp	r2, r5
 8003f4a:	d030      	beq.n	8003fae <HAL_TIM_Base_Init+0xd6>
 8003f4c:	4d2f      	ldr	r5, [pc, #188]	; (800400c <HAL_TIM_Base_Init+0x134>)
 8003f4e:	42aa      	cmp	r2, r5
 8003f50:	bf14      	ite	ne
 8003f52:	4605      	movne	r5, r0
 8003f54:	f040 0501 	orreq.w	r5, r0, #1
 8003f58:	bb4d      	cbnz	r5, 8003fae <HAL_TIM_Base_Init+0xd6>
 8003f5a:	482e      	ldr	r0, [pc, #184]	; (8004014 <HAL_TIM_Base_Init+0x13c>)
 8003f5c:	4e2e      	ldr	r6, [pc, #184]	; (8004018 <HAL_TIM_Base_Init+0x140>)
 8003f5e:	4282      	cmp	r2, r0
 8003f60:	bf18      	it	ne
 8003f62:	42b2      	cmpne	r2, r6
 8003f64:	bf0c      	ite	eq
 8003f66:	2001      	moveq	r0, #1
 8003f68:	2000      	movne	r0, #0
 8003f6a:	d047      	beq.n	8003ffc <HAL_TIM_Base_Init+0x124>
 8003f6c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003f70:	4d2a      	ldr	r5, [pc, #168]	; (800401c <HAL_TIM_Base_Init+0x144>)
 8003f72:	42aa      	cmp	r2, r5
 8003f74:	bf18      	it	ne
 8003f76:	42b2      	cmpne	r2, r6
 8003f78:	d019      	beq.n	8003fae <HAL_TIM_Base_Init+0xd6>
 8003f7a:	4829      	ldr	r0, [pc, #164]	; (8004020 <HAL_TIM_Base_Init+0x148>)
 8003f7c:	4282      	cmp	r2, r0
 8003f7e:	d03d      	beq.n	8003ffc <HAL_TIM_Base_Init+0x124>
 8003f80:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003f84:	4282      	cmp	r2, r0
 8003f86:	d039      	beq.n	8003ffc <HAL_TIM_Base_Init+0x124>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f88:	69a1      	ldr	r1, [r4, #24]
 8003f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f90:	430b      	orrs	r3, r1
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003f92:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003f94:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f96:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003f98:	6291      	str	r1, [r2, #40]	; 0x28
 8003f9a:	e017      	b.n	8003fcc <HAL_TIM_Base_Init+0xf4>
 8003f9c:	481a      	ldr	r0, [pc, #104]	; (8004008 <HAL_TIM_Base_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003fa2:	68a5      	ldr	r5, [r4, #8]
 8003fa4:	1a10      	subs	r0, r2, r0
 8003fa6:	432b      	orrs	r3, r5
 8003fa8:	fab0 f080 	clz	r0, r0
 8003fac:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fae:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb4:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb6:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb8:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003fba:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003fc2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc4:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003fc6:	6296      	str	r6, [r2, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003fc8:	b931      	cbnz	r1, 8003fd8 <HAL_TIM_Base_Init+0x100>
 8003fca:	b928      	cbnz	r0, 8003fd8 <HAL_TIM_Base_Init+0x100>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fcc:	2301      	movs	r3, #1
  return HAL_OK;
 8003fce:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003fd0:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 8003fd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd8:	6963      	ldr	r3, [r4, #20]
 8003fda:	6313      	str	r3, [r2, #48]	; 0x30
 8003fdc:	e7f6      	b.n	8003fcc <HAL_TIM_Base_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;
 8003fde:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003fe2:	f7fe f85f 	bl	80020a4 <HAL_TIM_Base_MspInit>
 8003fe6:	e782      	b.n	8003eee <HAL_TIM_Base_Init+0x16>
 8003fe8:	4807      	ldr	r0, [pc, #28]	; (8004008 <HAL_TIM_Base_Init+0x130>)
 8003fea:	1a10      	subs	r0, r2, r0
 8003fec:	fab0 f080 	clz	r0, r0
 8003ff0:	0940      	lsrs	r0, r0, #5
 8003ff2:	e79f      	b.n	8003f34 <HAL_TIM_Base_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	e7a9      	b.n	8003f4c <HAL_TIM_Base_Init+0x74>
    return HAL_ERROR;
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e7d6      	b.n	8003fae <HAL_TIM_Base_Init+0xd6>
 8004000:	40010000 	.word	0x40010000
 8004004:	40000400 	.word	0x40000400
 8004008:	40010400 	.word	0x40010400
 800400c:	40000c00 	.word	0x40000c00
 8004010:	40000800 	.word	0x40000800
 8004014:	40014400 	.word	0x40014400
 8004018:	40014000 	.word	0x40014000
 800401c:	40001800 	.word	0x40001800
 8004020:	40001c00 	.word	0x40001c00

08004024 <HAL_TIM_Base_Start>:
{
 8004024:	4603      	mov	r3, r0
  htim->State= HAL_TIM_STATE_BUSY;
 8004026:	2202      	movs	r2, #2
}
 8004028:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800402a:	6819      	ldr	r1, [r3, #0]
{
 800402c:	b410      	push	{r4}
  htim->State= HAL_TIM_STATE_READY;
 800402e:	2401      	movs	r4, #1
  htim->State= HAL_TIM_STATE_BUSY;
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8004034:	680a      	ldr	r2, [r1, #0]
 8004036:	4322      	orrs	r2, r4
 8004038:	600a      	str	r2, [r1, #0]
  htim->State= HAL_TIM_STATE_READY;
 800403a:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
}
 800403e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004044:	6803      	ldr	r3, [r0, #0]
}
 8004046:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
}
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop

0800405c <HAL_TIM_PWM_MspInit>:
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop

08004060 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8004060:	2800      	cmp	r0, #0
 8004062:	f000 808d 	beq.w	8004180 <HAL_TIM_PWM_Init+0x120>
{
 8004066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8004068:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800406c:	4604      	mov	r4, r0
 800406e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004072:	2b00      	cmp	r3, #0
 8004074:	d077      	beq.n	8004166 <HAL_TIM_PWM_Init+0x106>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004076:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;  
 8004078:	2302      	movs	r3, #2
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800407a:	4943      	ldr	r1, [pc, #268]	; (8004188 <HAL_TIM_PWM_Init+0x128>)
 800407c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;  
 8004080:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004084:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8004088:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800408a:	fab1 f181 	clz	r1, r1
 800408e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8004092:	d047      	beq.n	8004124 <HAL_TIM_PWM_Init+0xc4>
 8004094:	2900      	cmp	r1, #0
 8004096:	d145      	bne.n	8004124 <HAL_TIM_PWM_Init+0xc4>
 8004098:	483c      	ldr	r0, [pc, #240]	; (800418c <HAL_TIM_PWM_Init+0x12c>)
 800409a:	4282      	cmp	r2, r0
 800409c:	d068      	beq.n	8004170 <HAL_TIM_PWM_Init+0x110>
 800409e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80040a2:	4282      	cmp	r2, r0
 80040a4:	d064      	beq.n	8004170 <HAL_TIM_PWM_Init+0x110>
 80040a6:	4d3a      	ldr	r5, [pc, #232]	; (8004190 <HAL_TIM_PWM_Init+0x130>)
 80040a8:	4e3a      	ldr	r6, [pc, #232]	; (8004194 <HAL_TIM_PWM_Init+0x134>)
 80040aa:	1b50      	subs	r0, r2, r5
 80040ac:	42aa      	cmp	r2, r5
 80040ae:	bf18      	it	ne
 80040b0:	42b2      	cmpne	r2, r6
 80040b2:	fab0 f080 	clz	r0, r0
 80040b6:	ea4f 1050 	mov.w	r0, r0, lsr #5
 80040ba:	d15f      	bne.n	800417c <HAL_TIM_PWM_Init+0x11c>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80040bc:	4d36      	ldr	r5, [pc, #216]	; (8004198 <HAL_TIM_PWM_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80040c2:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80040c4:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 80040c6:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80040ca:	d034      	beq.n	8004136 <HAL_TIM_PWM_Init+0xd6>
 80040cc:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 80040d0:	42aa      	cmp	r2, r5
 80040d2:	d030      	beq.n	8004136 <HAL_TIM_PWM_Init+0xd6>
 80040d4:	4d2f      	ldr	r5, [pc, #188]	; (8004194 <HAL_TIM_PWM_Init+0x134>)
 80040d6:	42aa      	cmp	r2, r5
 80040d8:	bf14      	ite	ne
 80040da:	4605      	movne	r5, r0
 80040dc:	f040 0501 	orreq.w	r5, r0, #1
 80040e0:	bb4d      	cbnz	r5, 8004136 <HAL_TIM_PWM_Init+0xd6>
 80040e2:	482e      	ldr	r0, [pc, #184]	; (800419c <HAL_TIM_PWM_Init+0x13c>)
 80040e4:	4e2e      	ldr	r6, [pc, #184]	; (80041a0 <HAL_TIM_PWM_Init+0x140>)
 80040e6:	4282      	cmp	r2, r0
 80040e8:	bf18      	it	ne
 80040ea:	42b2      	cmpne	r2, r6
 80040ec:	bf0c      	ite	eq
 80040ee:	2001      	moveq	r0, #1
 80040f0:	2000      	movne	r0, #0
 80040f2:	d047      	beq.n	8004184 <HAL_TIM_PWM_Init+0x124>
 80040f4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80040f8:	4d2a      	ldr	r5, [pc, #168]	; (80041a4 <HAL_TIM_PWM_Init+0x144>)
 80040fa:	42aa      	cmp	r2, r5
 80040fc:	bf18      	it	ne
 80040fe:	42b2      	cmpne	r2, r6
 8004100:	d019      	beq.n	8004136 <HAL_TIM_PWM_Init+0xd6>
 8004102:	4829      	ldr	r0, [pc, #164]	; (80041a8 <HAL_TIM_PWM_Init+0x148>)
 8004104:	4282      	cmp	r2, r0
 8004106:	d03d      	beq.n	8004184 <HAL_TIM_PWM_Init+0x124>
 8004108:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800410c:	4282      	cmp	r2, r0
 800410e:	d039      	beq.n	8004184 <HAL_TIM_PWM_Init+0x124>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004110:	69a1      	ldr	r1, [r4, #24]
 8004112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004116:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	430b      	orrs	r3, r1
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800411a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800411c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800411e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004120:	6291      	str	r1, [r2, #40]	; 0x28
 8004122:	e017      	b.n	8004154 <HAL_TIM_PWM_Init+0xf4>
 8004124:	481a      	ldr	r0, [pc, #104]	; (8004190 <HAL_TIM_PWM_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800412a:	68a5      	ldr	r5, [r4, #8]
 800412c:	1a10      	subs	r0, r2, r0
 800412e:	432b      	orrs	r3, r5
 8004130:	fab0 f080 	clz	r0, r0
 8004134:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004136:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800413c:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413e:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004140:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004142:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004148:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800414a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800414c:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800414e:	6296      	str	r6, [r2, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004150:	b931      	cbnz	r1, 8004160 <HAL_TIM_PWM_Init+0x100>
 8004152:	b928      	cbnz	r0, 8004160 <HAL_TIM_PWM_Init+0x100>
  TIMx->EGR = TIM_EGR_UG;
 8004154:	2301      	movs	r3, #1
  return HAL_OK;
 8004156:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004158:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 800415a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800415e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8004160:	6963      	ldr	r3, [r4, #20]
 8004162:	6313      	str	r3, [r2, #48]	; 0x30
 8004164:	e7f6      	b.n	8004154 <HAL_TIM_PWM_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;
 8004166:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800416a:	f7ff ff77 	bl	800405c <HAL_TIM_PWM_MspInit>
 800416e:	e782      	b.n	8004076 <HAL_TIM_PWM_Init+0x16>
 8004170:	4807      	ldr	r0, [pc, #28]	; (8004190 <HAL_TIM_PWM_Init+0x130>)
 8004172:	1a10      	subs	r0, r2, r0
 8004174:	fab0 f080 	clz	r0, r0
 8004178:	0940      	lsrs	r0, r0, #5
 800417a:	e79f      	b.n	80040bc <HAL_TIM_PWM_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800417c:	4608      	mov	r0, r1
 800417e:	e7a9      	b.n	80040d4 <HAL_TIM_PWM_Init+0x74>
    return HAL_ERROR;
 8004180:	2001      	movs	r0, #1
 8004182:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004184:	2000      	movs	r0, #0
 8004186:	e7d6      	b.n	8004136 <HAL_TIM_PWM_Init+0xd6>
 8004188:	40010000 	.word	0x40010000
 800418c:	40000400 	.word	0x40000400
 8004190:	40010400 	.word	0x40010400
 8004194:	40000c00 	.word	0x40000c00
 8004198:	40000800 	.word	0x40000800
 800419c:	40014400 	.word	0x40014400
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40001800 	.word	0x40001800
 80041a8:	40001c00 	.word	0x40001c00

080041ac <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041ac:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80041ae:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041b0:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80041b2:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80041b6:	ea20 0001 	bic.w	r0, r0, r1
{
 80041ba:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 80041bc:	6218      	str	r0, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80041be:	4c0b      	ldr	r4, [pc, #44]	; (80041ec <HAL_TIM_PWM_Start+0x40>)

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80041c0:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80041c2:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80041c4:	ea41 0102 	orr.w	r1, r1, r2
 80041c8:	6219      	str	r1, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80041ca:	d00a      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x36>
 80041cc:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <HAL_TIM_PWM_Start+0x44>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x36>
  __HAL_TIM_ENABLE(htim);
 80041d2:	681a      	ldr	r2, [r3, #0]
} 
 80041d4:	2000      	movs	r0, #0
 80041d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_TIM_ENABLE(htim);
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
} 
 80041e0:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80041e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041e8:	645a      	str	r2, [r3, #68]	; 0x44
 80041ea:	e7f2      	b.n	80041d2 <HAL_TIM_PWM_Start+0x26>
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40010400 	.word	0x40010400

080041f4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80041f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d03f      	beq.n	800427c <HAL_TIM_ConfigClockSource+0x88>
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041fe:	4a5e      	ldr	r2, [pc, #376]	; (8004378 <HAL_TIM_ConfigClockSource+0x184>)
{
 8004200:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8004202:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8004204:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004206:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  switch (sClockSourceConfig->ClockSource)
 800420a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800420c:	689e      	ldr	r6, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800420e:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8004210:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004214:	ea02 0206 	and.w	r2, r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8004218:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800421a:	d076      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x116>
 800421c:	d918      	bls.n	8004250 <HAL_TIM_ConfigClockSource+0x5c>
 800421e:	2c70      	cmp	r4, #112	; 0x70
 8004220:	d061      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0xf2>
 8004222:	d92e      	bls.n	8004282 <HAL_TIM_ConfigClockSource+0x8e>
 8004224:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004228:	d058      	beq.n	80042dc <HAL_TIM_ConfigClockSource+0xe8>
 800422a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800422e:	d11c      	bne.n	800426a <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004230:	688a      	ldr	r2, [r1, #8]
 8004232:	684d      	ldr	r5, [r1, #4]
 8004234:	68cc      	ldr	r4, [r1, #12]
 8004236:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 8004238:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800423a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004242:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004244:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800424c:	609a      	str	r2, [r3, #8]
    break;
 800424e:	e00c      	b.n	800426a <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8004250:	2c10      	cmp	r4, #16
 8004252:	d033      	beq.n	80042bc <HAL_TIM_ConfigClockSource+0xc8>
 8004254:	d939      	bls.n	80042ca <HAL_TIM_ConfigClockSource+0xd6>
 8004256:	2c20      	cmp	r4, #32
 8004258:	d06f      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x146>
 800425a:	2c30      	cmp	r4, #48	; 0x30
 800425c:	d105      	bne.n	800426a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800425e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004260:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004264:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8004268:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800426a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800426c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800426e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004272:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004276:	4610      	mov	r0, r2
 8004278:	bcf0      	pop	{r4, r5, r6, r7}
 800427a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800427c:	2302      	movs	r3, #2
}
 800427e:	4618      	mov	r0, r3
 8004280:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004282:	2c50      	cmp	r4, #80	; 0x50
 8004284:	d060      	beq.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
 8004286:	2c60      	cmp	r4, #96	; 0x60
 8004288:	d1ef      	bne.n	800426a <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800428a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800428c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800428e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8004292:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004294:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004296:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004298:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800429a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800429e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 80042a2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 80042a6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80042aa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ac:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80042ae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80042b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80042b4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 80042b8:	609a      	str	r2, [r3, #8]
 80042ba:	e7d6      	b.n	800426a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 80042bc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80042be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80042c2:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	e7cf      	b.n	800426a <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 80042ca:	2c00      	cmp	r4, #0
 80042cc:	d1cd      	bne.n	800426a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 80042ce:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80042d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80042d4:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	e7c6      	b.n	800426a <HAL_TIM_ConfigClockSource+0x76>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80042dc:	6899      	ldr	r1, [r3, #8]
 80042de:	4a27      	ldr	r2, [pc, #156]	; (800437c <HAL_TIM_ConfigClockSource+0x188>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	609a      	str	r2, [r3, #8]
    break;
 80042e4:	e7c1      	b.n	800426a <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80042e6:	684c      	ldr	r4, [r1, #4]
 80042e8:	688a      	ldr	r2, [r1, #8]
 80042ea:	68cd      	ldr	r5, [r1, #12]
 80042ec:	4322      	orrs	r2, r4
  tmpsmcr = TIMx->SMCR;
 80042ee:	689c      	ldr	r4, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f0:	4923      	ldr	r1, [pc, #140]	; (8004380 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80042f2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80042fa:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80042fc:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80042fe:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004300:	4011      	ands	r1, r2
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004302:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004306:	6099      	str	r1, [r3, #8]
    break;
 8004308:	e7af      	b.n	800426a <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 800430a:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800430c:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800430e:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004310:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004314:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004318:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800431a:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800431e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004320:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8004324:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432a:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800432c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800432e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004332:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	e797      	b.n	800426a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800433a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800433c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004340:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	e790      	b.n	800426a <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 8004348:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434a:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800434c:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800434e:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004352:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004356:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8004358:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800435c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8004362:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004368:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800436a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800436c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004370:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8004374:	609a      	str	r2, [r3, #8]
 8004376:	e778      	b.n	800426a <HAL_TIM_ConfigClockSource+0x76>
 8004378:	fffe0088 	.word	0xfffe0088
 800437c:	fffefff8 	.word	0xfffefff8
 8004380:	fffeff88 	.word	0xfffeff88

08004384 <HAL_TIM_OC_DelayElapsedCallback>:
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop

08004388 <HAL_TIM_IC_CaptureCallback>:
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop

0800438c <HAL_TIM_PWM_PulseFinishedCallback>:
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop

08004390 <HAL_TIM_TriggerCallback>:
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop

08004394 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004394:	6803      	ldr	r3, [r0, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	0791      	lsls	r1, r2, #30
{
 800439a:	b510      	push	{r4, lr}
 800439c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800439e:	d502      	bpl.n	80043a6 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	0792      	lsls	r2, r2, #30
 80043a4:	d465      	bmi.n	8004472 <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	0752      	lsls	r2, r2, #29
 80043aa:	d502      	bpl.n	80043b2 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	0750      	lsls	r0, r2, #29
 80043b0:	d44c      	bmi.n	800444c <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	0711      	lsls	r1, r2, #28
 80043b6:	d502      	bpl.n	80043be <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	0712      	lsls	r2, r2, #28
 80043bc:	d434      	bmi.n	8004428 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	06d0      	lsls	r0, r2, #27
 80043c2:	d502      	bpl.n	80043ca <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	06d1      	lsls	r1, r2, #27
 80043c8:	d41e      	bmi.n	8004408 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	07d2      	lsls	r2, r2, #31
 80043ce:	d502      	bpl.n	80043d6 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	07d0      	lsls	r0, r2, #31
 80043d4:	d46b      	bmi.n	80044ae <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	0611      	lsls	r1, r2, #24
 80043da:	d502      	bpl.n	80043e2 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	0612      	lsls	r2, r2, #24
 80043e0:	d46d      	bmi.n	80044be <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	05d0      	lsls	r0, r2, #23
 80043e6:	d502      	bpl.n	80043ee <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	0611      	lsls	r1, r2, #24
 80043ec:	d46f      	bmi.n	80044ce <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	0652      	lsls	r2, r2, #25
 80043f2:	d502      	bpl.n	80043fa <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	0650      	lsls	r0, r2, #25
 80043f8:	d451      	bmi.n	800449e <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	0691      	lsls	r1, r2, #26
 80043fe:	d502      	bpl.n	8004406 <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	0692      	lsls	r2, r2, #26
 8004404:	d443      	bmi.n	800448e <HAL_TIM_IRQHandler+0xfa>
 8004406:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004408:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004410:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004412:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004414:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004416:	f413 7f40 	tst.w	r3, #768	; 0x300
 800441a:	d06c      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 800441c:	f7ff ffb4 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004420:	2200      	movs	r2, #0
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	7722      	strb	r2, [r4, #28]
 8004426:	e7d0      	b.n	80043ca <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004428:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442c:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004430:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004432:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004434:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004436:	079b      	lsls	r3, r3, #30
 8004438:	d15a      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	f7ff ffa3 	bl	8004384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443e:	4620      	mov	r0, r4
 8004440:	f7ff ffa4 	bl	800438c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004444:	2200      	movs	r2, #0
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	7722      	strb	r2, [r4, #28]
 800444a:	e7b8      	b.n	80043be <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800444c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004450:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004452:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004454:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004456:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004458:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800445a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800445e:	d144      	bne.n	80044ea <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004460:	f7ff ff90 	bl	8004384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff ff91 	bl	800438c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	2200      	movs	r2, #0
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	7722      	strb	r2, [r4, #28]
 8004470:	e79f      	b.n	80043b2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004472:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004476:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004478:	6119      	str	r1, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800447a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800447c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800447e:	0799      	lsls	r1, r3, #30
 8004480:	d02d      	beq.n	80044de <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8004482:	f7ff ff81 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004486:	2200      	movs	r2, #0
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	7722      	strb	r2, [r4, #28]
 800448c:	e78b      	b.n	80043a6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800448e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8004492:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004494:	611a      	str	r2, [r3, #16]
}
 8004496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800449a:	f000 b98b 	b.w	80047b4 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800449e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80044a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80044a6:	f7ff ff73 	bl	8004390 <HAL_TIM_TriggerCallback>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	e7a5      	b.n	80043fa <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044ae:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80044b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80044b6:	f7fd fc11 	bl	8001cdc <HAL_TIM_PeriodElapsedCallback>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	e78b      	b.n	80043d6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044be:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80044c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80044c6:	f000 f977 	bl	80047b8 <HAL_TIMEx_BreakCallback>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	e789      	b.n	80043e2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80044d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80044d6:	f000 f96f 	bl	80047b8 <HAL_TIMEx_BreakCallback>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	e787      	b.n	80043ee <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	f7ff ff51 	bl	8004384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e2:	4620      	mov	r0, r4
 80044e4:	f7ff ff52 	bl	800438c <HAL_TIM_PWM_PulseFinishedCallback>
 80044e8:	e7cd      	b.n	8004486 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	f7ff ff4d 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 80044ee:	e7bc      	b.n	800446a <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 80044f0:	f7ff ff4a 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 80044f4:	e7a6      	b.n	8004444 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	f7ff ff45 	bl	8004384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fa:	4620      	mov	r0, r4
 80044fc:	f7ff ff46 	bl	800438c <HAL_TIM_PWM_PulseFinishedCallback>
 8004500:	e78e      	b.n	8004420 <HAL_TIM_IRQHandler+0x8c>
 8004502:	bf00      	nop

08004504 <TIM_OC1_SetConfig>:
{
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004506:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 8004508:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800450a:	f024 0401 	bic.w	r4, r4, #1
  tmpccmrx |= OC_Config->OCMode;
 800450e:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004510:	4a13      	ldr	r2, [pc, #76]	; (8004560 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004512:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004514:	4d13      	ldr	r5, [pc, #76]	; (8004564 <TIM_OC1_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8004516:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004518:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800451a:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 800451c:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004520:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004524:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= OC_Config->OCPolarity;
 8004528:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 800452c:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004530:	d009      	beq.n	8004546 <TIM_OC1_SetConfig+0x42>
 8004532:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004536:	42a8      	cmp	r0, r5
 8004538:	d005      	beq.n	8004546 <TIM_OC1_SetConfig+0x42>
  TIMx->CCR1 = OC_Config->Pulse;
 800453a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800453c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800453e:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004540:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8004542:	6203      	str	r3, [r0, #32]
 8004544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8004546:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800454a:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800454c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800454e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004552:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004554:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8004556:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004558:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800455c:	432c      	orrs	r4, r5
 800455e:	e7ec      	b.n	800453a <TIM_OC1_SetConfig+0x36>
 8004560:	fffeff8c 	.word	0xfffeff8c
 8004564:	40010000 	.word	0x40010000

08004568 <TIM_OC2_SetConfig>:
{
 8004568:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800456a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4);
 800456c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800456e:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004572:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004574:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004576:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004578:	4d14      	ldr	r5, [pc, #80]	; (80045cc <TIM_OC2_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 800457a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800457c:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800457e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 8004580:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004584:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004588:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 4);
 800458c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004590:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004594:	d009      	beq.n	80045aa <TIM_OC2_SetConfig+0x42>
 8004596:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800459a:	42a8      	cmp	r0, r5
 800459c:	d005      	beq.n	80045aa <TIM_OC2_SetConfig+0x42>
  TIMx->CCR2 = OC_Config->Pulse;
 800459e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045a0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80045a2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80045a4:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80045a6:	6203      	str	r3, [r0, #32]
 80045a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 80045aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80045ae:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80045b0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80045b6:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80045b8:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80045bc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80045be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80045c2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80045c6:	e7ea      	b.n	800459e <TIM_OC2_SetConfig+0x36>
 80045c8:	feff8cff 	.word	0xfeff8cff
 80045cc:	40010000 	.word	0x40010000

080045d0 <TIM_OC3_SetConfig>:
{
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045d2:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8);
 80045d4:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045d6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 80045da:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80045dc:	4a14      	ldr	r2, [pc, #80]	; (8004630 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045de:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80045e0:	4d14      	ldr	r5, [pc, #80]	; (8004634 <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 80045e2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80045e4:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80045e6:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 80045e8:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80045ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80045f0:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 8);
 80045f4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80045f8:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80045fc:	d009      	beq.n	8004612 <TIM_OC3_SetConfig+0x42>
 80045fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004602:	42a8      	cmp	r0, r5
 8004604:	d005      	beq.n	8004612 <TIM_OC3_SetConfig+0x42>
  TIMx->CCR3 = OC_Config->Pulse;
 8004606:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004608:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800460a:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800460c:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800460e:	6203      	str	r3, [r0, #32]
 8004610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8004612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004616:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8004618:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800461a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800461e:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004620:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004624:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800462a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800462e:	e7ea      	b.n	8004606 <TIM_OC3_SetConfig+0x36>
 8004630:	fffeff8c 	.word	0xfffeff8c
 8004634:	40010000 	.word	0x40010000

08004638 <TIM_OC4_SetConfig>:
{
 8004638:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12);
 800463c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004642:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004644:	4a10      	ldr	r2, [pc, #64]	; (8004688 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004646:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004648:	4d10      	ldr	r5, [pc, #64]	; (800468c <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 800464a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800464c:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800464e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 8004650:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004658:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 12);
 800465c:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004660:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004664:	d009      	beq.n	800467a <TIM_OC4_SetConfig+0x42>
 8004666:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800466a:	42a8      	cmp	r0, r5
 800466c:	d005      	beq.n	800467a <TIM_OC4_SetConfig+0x42>
  TIMx->CCR4 = OC_Config->Pulse;
 800466e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004670:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004672:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004674:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004676:	6203      	str	r3, [r0, #32]
 8004678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 800467a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800467e:	694d      	ldr	r5, [r1, #20]
 8004680:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004684:	e7f3      	b.n	800466e <TIM_OC4_SetConfig+0x36>
 8004686:	bf00      	nop
 8004688:	feff8cff 	.word	0xfeff8cff
 800468c:	40010000 	.word	0x40010000

08004690 <HAL_TIMEx_PWMN_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004690:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8004692:	2204      	movs	r2, #4
} 
 8004694:	2000      	movs	r0, #0
  tmp = TIM_CCER_CC1NE << Channel;
 8004696:	fa02 f101 	lsl.w	r1, r2, r1
{
 800469a:	b410      	push	{r4}

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 800469c:	6a1c      	ldr	r4, [r3, #32]
 800469e:	ea24 0401 	bic.w	r4, r4, r1
 80046a2:	621c      	str	r4, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80046a4:	6a1a      	ldr	r2, [r3, #32]
} 
 80046a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80046aa:	4311      	orrs	r1, r2
 80046ac:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 80046ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
} 
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80046c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
{
 80046c6:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80046c8:	d01f      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  tmpcr2 = htim->Instance->CR2;
 80046ca:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046cc:	4d11      	ldr	r5, [pc, #68]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 80046ce:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046d0:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80046d2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046d4:	d014      	beq.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80046d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80046da:	42aa      	cmp	r2, r5
 80046dc:	d010      	beq.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046de:	680d      	ldr	r5, [r1, #0]
  __HAL_UNLOCK(htim);
 80046e0:	2600      	movs	r6, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e2:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80046e4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ec:	4321      	orrs	r1, r4
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ee:	432b      	orrs	r3, r5
  return HAL_OK;
 80046f0:	4635      	mov	r5, r6
  htim->Instance->CR2 = tmpcr2;
 80046f2:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 80046f4:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80046f6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
} 
 80046fa:	4628      	mov	r0, r5
 80046fc:	bc70      	pop	{r4, r5, r6}
 80046fe:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004700:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004704:	684d      	ldr	r5, [r1, #4]
 8004706:	432b      	orrs	r3, r5
 8004708:	e7e9      	b.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x1e>
  __HAL_LOCK(htim);
 800470a:	2502      	movs	r5, #2
} 
 800470c:	4628      	mov	r0, r5
 800470e:	bc70      	pop	{r4, r5, r6}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40010000 	.word	0x40010000

08004718 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8004718:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d041      	beq.n	80047a4 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004720:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004722:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
{
 8004728:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800472a:	688c      	ldr	r4, [r1, #8]
{
 800472c:	b082      	sub	sp, #8
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800472e:	680f      	ldr	r7, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004730:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004732:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004734:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800473a:	6805      	ldr	r5, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800473c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800473e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004744:	9201      	str	r2, [sp, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004746:	690a      	ldr	r2, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004748:	433b      	orrs	r3, r7
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800474a:	4f18      	ldr	r7, [pc, #96]	; (80047ac <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800474c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004750:	42bd      	cmp	r5, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004752:	ea43 0302 	orr.w	r3, r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004756:	9a01      	ldr	r2, [sp, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800475c:	ea43 0306 	orr.w	r3, r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004760:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004764:	ea43 0304 	orr.w	r3, r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004768:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800476c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004770:	d00a      	beq.n	8004788 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8004772:	4a0f      	ldr	r2, [pc, #60]	; (80047b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8004774:	4295      	cmp	r5, r2
 8004776:	d007      	beq.n	8004788 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  __HAL_UNLOCK(htim);
 8004778:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 800477a:	646b      	str	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800477c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8004780:	4610      	mov	r0, r2
 8004782:	b002      	add	sp, #8
 8004784:	bcf0      	pop	{r4, r5, r6, r7}
 8004786:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004788:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800478a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800478e:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004790:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004794:	6a0a      	ldr	r2, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800479c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80047a0:	4313      	orrs	r3, r2
 80047a2:	e7e9      	b.n	8004778 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 80047a4:	2302      	movs	r3, #2
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40010400 	.word	0x40010400

080047b4 <HAL_TIMEx_CommutationCallback>:
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop

080047b8 <HAL_TIMEx_BreakCallback>:
{
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop

080047bc <HAL_TIM_PWM_ConfigChannel>:
{
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80047be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d030      	beq.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80047c6:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80047ca:	2101      	movs	r1, #1
 80047cc:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80047ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80047d2:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  switch (Channel)
 80047d6:	2a14      	cmp	r2, #20
 80047d8:	d81e      	bhi.n	8004818 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80047da:	e8df f002 	tbb	[pc, r2]
 80047de:	1d56      	.short	0x1d56
 80047e0:	1d681d1d 	.word	0x1d681d1d
 80047e4:	1d7b1d1d 	.word	0x1d7b1d1d
 80047e8:	1d0b1d1d 	.word	0x1d0b1d1d
 80047ec:	1d8d1d1d 	.word	0x1d8d1d1d
 80047f0:	1d1d      	.short	0x1d1d
 80047f2:	27          	.byte	0x27
 80047f3:	00          	.byte	0x00
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047f4:	4629      	mov	r1, r5
 80047f6:	6800      	ldr	r0, [r0, #0]
 80047f8:	f7ff ff1e 	bl	8004638 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80047fe:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004800:	69d9      	ldr	r1, [r3, #28]
 8004802:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004806:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004808:	69d9      	ldr	r1, [r3, #28]
 800480a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800480e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004816:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004818:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800481a:	2201      	movs	r2, #1
  return HAL_OK;
 800481c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800481e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004822:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8004826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8004828:	2002      	movs	r0, #2
}
 800482a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800482c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800482e:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004830:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004832:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004834:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004838:	494c      	ldr	r1, [pc, #304]	; (800496c <HAL_TIM_PWM_ConfigChannel+0x1b0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800483a:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800483c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800483e:	6858      	ldr	r0, [r3, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004840:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 8004844:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20);
 8004848:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800484c:	4e48      	ldr	r6, [pc, #288]	; (8004970 <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800484e:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004852:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004854:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004858:	f000 8081 	beq.w	800495e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800485c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004860:	42b3      	cmp	r3, r6
 8004862:	d07c      	beq.n	800495e <HAL_TIM_PWM_ConfigChannel+0x1a2>
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004864:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004866:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004868:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800486a:	65de      	str	r6, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800486c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800486e:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004870:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004872:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004876:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004878:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800487a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800487e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004882:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004886:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004888:	e7c6      	b.n	8004818 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800488a:	4629      	mov	r1, r5
 800488c:	6800      	ldr	r0, [r0, #0]
 800488e:	f7ff fe39 	bl	8004504 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004892:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004894:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004896:	6999      	ldr	r1, [r3, #24]
 8004898:	f041 0108 	orr.w	r1, r1, #8
 800489c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800489e:	6999      	ldr	r1, [r3, #24]
 80048a0:	f021 0104 	bic.w	r1, r1, #4
 80048a4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	4302      	orrs	r2, r0
 80048aa:	619a      	str	r2, [r3, #24]
    break;
 80048ac:	e7b4      	b.n	8004818 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048ae:	4629      	mov	r1, r5
 80048b0:	6800      	ldr	r0, [r0, #0]
 80048b2:	f7ff fe59 	bl	8004568 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80048b8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048ba:	6999      	ldr	r1, [r3, #24]
 80048bc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80048c0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c2:	6999      	ldr	r1, [r3, #24]
 80048c4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80048c8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80048d0:	619a      	str	r2, [r3, #24]
    break;
 80048d2:	e7a1      	b.n	8004818 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048d4:	4629      	mov	r1, r5
 80048d6:	6800      	ldr	r0, [r0, #0]
 80048d8:	f7ff fe7a 	bl	80045d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048dc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80048de:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048e0:	69d9      	ldr	r1, [r3, #28]
 80048e2:	f041 0108 	orr.w	r1, r1, #8
 80048e6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048e8:	69d9      	ldr	r1, [r3, #28]
 80048ea:	f021 0104 	bic.w	r1, r1, #4
 80048ee:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	4302      	orrs	r2, r0
 80048f4:	61da      	str	r2, [r3, #28]
    break;
 80048f6:	e78f      	b.n	8004818 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048f8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16);
 80048fa:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048fc:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80048fe:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004900:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004904:	491b      	ldr	r1, [pc, #108]	; (8004974 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004906:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004908:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800490a:	6858      	ldr	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 800490c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 8004910:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16);
 8004914:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004918:	4e15      	ldr	r6, [pc, #84]	; (8004970 <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800491a:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800491e:	42b3      	cmp	r3, r6
  tmpccmrx |= OC_Config->OCMode;
 8004920:	ea41 0107 	orr.w	r1, r1, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004924:	d015      	beq.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x196>
 8004926:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800492a:	42b3      	cmp	r3, r6
 800492c:	d011      	beq.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CCR5 = OC_Config->Pulse;
 800492e:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004930:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004932:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004934:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 8004936:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004938:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800493a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800493c:	f041 0108 	orr.w	r1, r1, #8
 8004940:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004942:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004944:	f021 0104 	bic.w	r1, r1, #4
 8004948:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800494a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800494c:	4302      	orrs	r2, r0
 800494e:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004950:	e762      	b.n	8004818 <HAL_TIM_PWM_ConfigChannel+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004952:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8004956:	696e      	ldr	r6, [r5, #20]
 8004958:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800495c:	e7e7      	b.n	800492e <HAL_TIM_PWM_ConfigChannel+0x172>
    tmpcr2 &= ~TIM_CR2_OIS6;
 800495e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8004962:	696e      	ldr	r6, [r5, #20]
 8004964:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004968:	e77c      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0xa8>
 800496a:	bf00      	nop
 800496c:	feff8fff 	.word	0xfeff8fff
 8004970:	40010000 	.word	0x40010000
 8004974:	fffeff8f 	.word	0xfffeff8f

08004978 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497c:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800497e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8004982:	b082      	sub	sp, #8
  if(huart->gState == HAL_UART_STATE_READY)
 8004984:	2b20      	cmp	r3, #32
 8004986:	d003      	beq.n	8004990 <HAL_UART_Transmit+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004988:	2002      	movs	r0, #2
  }
}
 800498a:	b002      	add	sp, #8
 800498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004990:	4688      	mov	r8, r1
    if((pData == NULL ) || (Size == 0U))
 8004992:	b391      	cbz	r1, 80049fa <HAL_UART_Transmit+0x82>
 8004994:	fab2 f382 	clz	r3, r2
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	bb73      	cbnz	r3, 80049fa <HAL_UART_Transmit+0x82>
    __HAL_LOCK(huart);
 800499c:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 80049a0:	4605      	mov	r5, r0
 80049a2:	2901      	cmp	r1, #1
 80049a4:	d0f0      	beq.n	8004988 <HAL_UART_Transmit+0x10>
 80049a6:	2001      	movs	r0, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049a8:	2121      	movs	r1, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	66eb      	str	r3, [r5, #108]	; 0x6c
    __HAL_LOCK(huart);
 80049ac:	f885 0068 	strb.w	r0, [r5, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049b0:	f885 1069 	strb.w	r1, [r5, #105]	; 0x69
 80049b4:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 80049b6:	f7fd fe67 	bl	8002688 <HAL_GetTick>
    huart->TxXferSize = Size;
 80049ba:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 80049bc:	4607      	mov	r7, r0
 80049be:	682c      	ldr	r4, [r5, #0]
    huart->TxXferSize = Size;
 80049c0:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
    huart->TxXferCount = Size;
 80049c4:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80049c8:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	b303      	cbz	r3, 8004a12 <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 80049d0:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
 80049dc:	1c72      	adds	r2, r6, #1
 80049de:	d125      	bne.n	8004a2c <HAL_UART_Transmit+0xb4>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e0:	69e2      	ldr	r2, [r4, #28]
 80049e2:	0613      	lsls	r3, r2, #24
 80049e4:	d5fc      	bpl.n	80049e0 <HAL_UART_Transmit+0x68>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e6:	68ab      	ldr	r3, [r5, #8]
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ec:	d03a      	beq.n	8004a64 <HAL_UART_Transmit+0xec>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80049ee:	f898 3000 	ldrb.w	r3, [r8]
 80049f2:	f108 0801 	add.w	r8, r8, #1
 80049f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80049f8:	e7e6      	b.n	80049c8 <HAL_UART_Transmit+0x50>
      return  HAL_ERROR;
 80049fa:	2001      	movs	r0, #1
 80049fc:	e7c5      	b.n	800498a <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fe:	69e3      	ldr	r3, [r4, #28]
 8004a00:	065b      	lsls	r3, r3, #25
 8004a02:	d40b      	bmi.n	8004a1c <HAL_UART_Transmit+0xa4>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004a04:	b1e6      	cbz	r6, 8004a40 <HAL_UART_Transmit+0xc8>
 8004a06:	f7fd fe3f 	bl	8002688 <HAL_GetTick>
 8004a0a:	1bc0      	subs	r0, r0, r7
 8004a0c:	682c      	ldr	r4, [r5, #0]
 8004a0e:	4286      	cmp	r6, r0
 8004a10:	d916      	bls.n	8004a40 <HAL_UART_Transmit+0xc8>
 8004a12:	1c71      	adds	r1, r6, #1
 8004a14:	d1f3      	bne.n	80049fe <HAL_UART_Transmit+0x86>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a16:	69e3      	ldr	r3, [r4, #28]
 8004a18:	065a      	lsls	r2, r3, #25
 8004a1a:	d5fc      	bpl.n	8004a16 <HAL_UART_Transmit+0x9e>
    __HAL_UNLOCK(huart);
 8004a1c:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_READY;
 8004a1e:	2220      	movs	r2, #32
    return HAL_OK;
 8004a20:	4618      	mov	r0, r3
    __HAL_UNLOCK(huart);
 8004a22:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8004a26:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
    return HAL_OK;
 8004a2a:	e7ae      	b.n	800498a <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2c:	69e3      	ldr	r3, [r4, #28]
 8004a2e:	0618      	lsls	r0, r3, #24
 8004a30:	d4d9      	bmi.n	80049e6 <HAL_UART_Transmit+0x6e>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004a32:	b12e      	cbz	r6, 8004a40 <HAL_UART_Transmit+0xc8>
 8004a34:	f7fd fe28 	bl	8002688 <HAL_GetTick>
 8004a38:	1bc0      	subs	r0, r0, r7
 8004a3a:	682c      	ldr	r4, [r5, #0]
 8004a3c:	4286      	cmp	r6, r0
 8004a3e:	d8cd      	bhi.n	80049dc <HAL_UART_Transmit+0x64>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a40:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

        huart->gState = HAL_UART_STATE_READY;
 8004a42:	2220      	movs	r2, #32
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a44:	2100      	movs	r1, #0
      return HAL_TIMEOUT;
 8004a46:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a4c:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004a56:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8004a5a:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004a5e:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
 8004a62:	e792      	b.n	800498a <HAL_UART_Transmit+0x12>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a64:	692b      	ldr	r3, [r5, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1c1      	bne.n	80049ee <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004a6a:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	62a3      	str	r3, [r4, #40]	; 0x28
        pData += 2;
 8004a74:	e7a8      	b.n	80049c8 <HAL_UART_Transmit+0x50>
 8004a76:	bf00      	nop

08004a78 <HAL_UART_Receive_DMA>:
{
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8004a7a:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 8004a7e:	2c20      	cmp	r4, #32
 8004a80:	d001      	beq.n	8004a86 <HAL_UART_Receive_DMA+0xe>
    return HAL_BUSY;
 8004a82:	2002      	movs	r0, #2
}
 8004a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 8004a86:	2900      	cmp	r1, #0
 8004a88:	d035      	beq.n	8004af6 <HAL_UART_Receive_DMA+0x7e>
 8004a8a:	fab2 f482 	clz	r4, r2
 8004a8e:	0964      	lsrs	r4, r4, #5
 8004a90:	2c00      	cmp	r4, #0
 8004a92:	d130      	bne.n	8004af6 <HAL_UART_Receive_DMA+0x7e>
    __HAL_LOCK(huart);
 8004a94:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d0f2      	beq.n	8004a82 <HAL_UART_Receive_DMA+0xa>
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	4616      	mov	r6, r2
 8004aa0:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aa2:	2122      	movs	r1, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004aa4:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_LOCK(huart);
 8004aa6:	f04f 0e01 	mov.w	lr, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aaa:	66c4      	str	r4, [r0, #108]	; 0x6c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004aac:	4633      	mov	r3, r6
    huart->pRxBuffPtr = pData;
 8004aae:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8004ab0:	f8a0 6058 	strh.w	r6, [r0, #88]	; 0x58
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004ab4:	4638      	mov	r0, r7
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ab6:	f885 106a 	strb.w	r1, [r5, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004aba:	4e10      	ldr	r6, [pc, #64]	; (8004afc <HAL_UART_Receive_DMA+0x84>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004abc:	4910      	ldr	r1, [pc, #64]	; (8004b00 <HAL_UART_Receive_DMA+0x88>)
    __HAL_LOCK(huart);
 8004abe:	f885 e068 	strb.w	lr, [r5, #104]	; 0x68
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ac2:	63fe      	str	r6, [r7, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ac4:	6439      	str	r1, [r7, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ac6:	4e0f      	ldr	r6, [pc, #60]	; (8004b04 <HAL_UART_Receive_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004ac8:	6829      	ldr	r1, [r5, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8004aca:	653c      	str	r4, [r7, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004acc:	64fe      	str	r6, [r7, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004ace:	3124      	adds	r1, #36	; 0x24
 8004ad0:	f7fe f8c0 	bl	8002c54 <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad4:	682b      	ldr	r3, [r5, #0]
    __HAL_UNLOCK(huart);
 8004ad6:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
    return HAL_OK;
 8004ada:	4620      	mov	r0, r4
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae2:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af2:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8004af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8004af6:	2001      	movs	r0, #1
 8004af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004afa:	bf00      	nop
 8004afc:	08004b7d 	.word	0x08004b7d
 8004b00:	08004bb9 	.word	0x08004bb9
 8004b04:	08004bc5 	.word	0x08004bc5

08004b08 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8004b08:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d016      	beq.n	8004b3e <HAL_UART_DMAResume+0x36>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b10:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  __HAL_LOCK(huart);
 8004b14:	2201      	movs	r2, #1
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b16:	2b21      	cmp	r3, #33	; 0x21
  __HAL_LOCK(huart);
 8004b18:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b1c:	6803      	ldr	r3, [r0, #0]
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b1e:	d023      	beq.n	8004b68 <HAL_UART_DMAResume+0x60>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b20:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8004b24:	2a22      	cmp	r2, #34	; 0x22
 8004b26:	d00c      	beq.n	8004b42 <HAL_UART_DMAResume+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	f010 0001 	ands.w	r0, r0, #1
 8004b2e:	d104      	bne.n	8004b3a <HAL_UART_DMAResume+0x32>
    __HAL_UART_ENABLE(huart);
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	4770      	bx	lr
  return HAL_OK;
 8004b3a:	2000      	movs	r0, #0
}
 8004b3c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004b3e:	2002      	movs	r0, #2
 8004b40:	4770      	bx	lr
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8004b42:	2208      	movs	r2, #8
 8004b44:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b4c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	f042 0201 	orr.w	r2, r2, #1
 8004b54:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5c:	609a      	str	r2, [r3, #8]
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	f010 0001 	ands.w	r0, r0, #1
 8004b64:	d0e4      	beq.n	8004b30 <HAL_UART_DMAResume+0x28>
 8004b66:	e7e8      	b.n	8004b3a <HAL_UART_DMAResume+0x32>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b6e:	609a      	str	r2, [r3, #8]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b70:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8004b74:	2a22      	cmp	r2, #34	; 0x22
 8004b76:	d1d7      	bne.n	8004b28 <HAL_UART_DMAResume+0x20>
 8004b78:	e7e3      	b.n	8004b42 <HAL_UART_DMAResume+0x3a>
 8004b7a:	bf00      	nop

08004b7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback
  * @param hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* DMA Normal mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b7e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b80:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8004b88:	d111      	bne.n	8004bae <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b8a:	6802      	ldr	r2, [r0, #0]
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

	/* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 8004b8e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b92:	6813      	ldr	r3, [r2, #0]
 8004b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b98:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	6893      	ldr	r3, [r2, #8]
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba2:	6893      	ldr	r3, [r2, #8]
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba8:	6093      	str	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8004baa:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
  }
  HAL_UART_RxCpltCallback(huart);
 8004bae:	f7fb fee3 	bl	8000978 <HAL_UART_RxCpltCallback>
 8004bb2:	bd08      	pop	{r3, pc}

08004bb4 <HAL_UART_RxHalfCpltCallback>:
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop

08004bb8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback
  * @param hdma  DMA handle
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8004bba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004bbc:	f7ff fffa 	bl	8004bb4 <HAL_UART_RxHalfCpltCallback>
 8004bc0:	bd08      	pop	{r3, pc}
 8004bc2:	bf00      	nop

08004bc4 <UART_DMAError>:
  * @brief DMA UART communication error callback
  * @param hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0U;
 8004bc6:	2200      	movs	r2, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8004bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004bce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bd2:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8004bd6:	2a21      	cmp	r2, #33	; 0x21
 8004bd8:	d01b      	beq.n	8004c12 <UART_DMAError+0x4e>
  {
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bda:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8004bde:	2a22      	cmp	r2, #34	; 0x22
 8004be0:	d007      	beq.n	8004bf2 <UART_DMAError+0x2e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
  {
    UART_EndRxTransfer(huart);
  }
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8004be2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8004be4:	4618      	mov	r0, r3
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8004be6:	f042 0210 	orr.w	r2, r2, #16
 8004bea:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8004bec:	f7fb fec0 	bl	8000970 <HAL_UART_ErrorCallback>
 8004bf0:	bd08      	pop	{r3, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	6891      	ldr	r1, [r2, #8]
 8004bf6:	0649      	lsls	r1, r1, #25
 8004bf8:	d5f3      	bpl.n	8004be2 <UART_DMAError+0x1e>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfa:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfe:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8004c02:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	6891      	ldr	r1, [r2, #8]
 8004c06:	f021 0101 	bic.w	r1, r1, #1
 8004c0a:	6091      	str	r1, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004c0c:	f883 006a 	strb.w	r0, [r3, #106]	; 0x6a
 8004c10:	e7e7      	b.n	8004be2 <UART_DMAError+0x1e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	6891      	ldr	r1, [r2, #8]
 8004c16:	0608      	lsls	r0, r1, #24
 8004c18:	d5df      	bpl.n	8004bda <UART_DMAError+0x16>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c1a:	6811      	ldr	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c1c:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c1e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004c22:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c24:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
 8004c28:	e7d7      	b.n	8004bda <UART_DMAError+0x16>
 8004c2a:	bf00      	nop

08004c2c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004c2e:	07da      	lsls	r2, r3, #31
{
 8004c30:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c32:	d506      	bpl.n	8004c42 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c34:	6801      	ldr	r1, [r0, #0]
 8004c36:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004c38:	684a      	ldr	r2, [r1, #4]
 8004c3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004c3e:	4322      	orrs	r2, r4
 8004c40:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c42:	079c      	lsls	r4, r3, #30
 8004c44:	d506      	bpl.n	8004c54 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c46:	6801      	ldr	r1, [r0, #0]
 8004c48:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004c4a:	684a      	ldr	r2, [r1, #4]
 8004c4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c50:	4322      	orrs	r2, r4
 8004c52:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c54:	0759      	lsls	r1, r3, #29
 8004c56:	d506      	bpl.n	8004c66 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c58:	6801      	ldr	r1, [r0, #0]
 8004c5a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004c5c:	684a      	ldr	r2, [r1, #4]
 8004c5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c62:	4322      	orrs	r2, r4
 8004c64:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c66:	071a      	lsls	r2, r3, #28
 8004c68:	d506      	bpl.n	8004c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c6a:	6801      	ldr	r1, [r0, #0]
 8004c6c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004c6e:	684a      	ldr	r2, [r1, #4]
 8004c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c74:	4322      	orrs	r2, r4
 8004c76:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c78:	06dc      	lsls	r4, r3, #27
 8004c7a:	d506      	bpl.n	8004c8a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c7c:	6801      	ldr	r1, [r0, #0]
 8004c7e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004c80:	688a      	ldr	r2, [r1, #8]
 8004c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c86:	4322      	orrs	r2, r4
 8004c88:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c8a:	0699      	lsls	r1, r3, #26
 8004c8c:	d506      	bpl.n	8004c9c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c8e:	6801      	ldr	r1, [r0, #0]
 8004c90:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004c92:	688a      	ldr	r2, [r1, #8]
 8004c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c98:	4322      	orrs	r2, r4
 8004c9a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c9c:	065a      	lsls	r2, r3, #25
 8004c9e:	d50a      	bpl.n	8004cb6 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca0:	6801      	ldr	r1, [r0, #0]
 8004ca2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004ca4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ca6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004caa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004cae:	ea42 0204 	orr.w	r2, r2, r4
 8004cb2:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cb4:	d00b      	beq.n	8004cce <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	d506      	bpl.n	8004cc8 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cba:	6802      	ldr	r2, [r0, #0]
 8004cbc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004cbe:	6853      	ldr	r3, [r2, #4]
 8004cc0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6053      	str	r3, [r2, #4]
  }
}
 8004cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ccc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cce:	684a      	ldr	r2, [r1, #4]
 8004cd0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004cd2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004cd6:	4322      	orrs	r2, r4
 8004cd8:	604a      	str	r2, [r1, #4]
 8004cda:	e7ec      	b.n	8004cb6 <UART_AdvFeatureConfig+0x8a>

08004cdc <HAL_UART_Init>:
  if(huart == NULL)
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	f000 81be 	beq.w	800505e <HAL_UART_Init+0x382>
{
 8004ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8004ce4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004ce8:	4604      	mov	r4, r0
 8004cea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d047      	beq.n	8004d82 <HAL_UART_Init+0xa6>
  __HAL_UART_DISABLE(huart);
 8004cf2:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004cf4:	2224      	movs	r2, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cf6:	6921      	ldr	r1, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8004cf8:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cfc:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004cfe:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6961      	ldr	r1, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8004d04:	f022 0201 	bic.w	r2, r2, #1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004d08:	48b8      	ldr	r0, [pc, #736]	; (8004fec <HAL_UART_Init+0x310>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8004d0e:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004d10:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d12:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d14:	68e7      	ldr	r7, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004d16:	4010      	ands	r0, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004d18:	6a26      	ldr	r6, [r4, #32]
 8004d1a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004d1c:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d1e:	48b4      	ldr	r0, [pc, #720]	; (8004ff0 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004d20:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004d22:	602b      	str	r3, [r5, #0]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d24:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d26:	686b      	ldr	r3, [r5, #4]
 8004d28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d2c:	ea43 0307 	orr.w	r3, r3, r7
 8004d30:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004d32:	68ab      	ldr	r3, [r5, #8]
 8004d34:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d38:	ea42 0203 	orr.w	r2, r2, r3
 8004d3c:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3e:	f000 8094 	beq.w	8004e6a <HAL_UART_Init+0x18e>
 8004d42:	4bac      	ldr	r3, [pc, #688]	; (8004ff4 <HAL_UART_Init+0x318>)
 8004d44:	429d      	cmp	r5, r3
 8004d46:	f000 80a4 	beq.w	8004e92 <HAL_UART_Init+0x1b6>
 8004d4a:	4bab      	ldr	r3, [pc, #684]	; (8004ff8 <HAL_UART_Init+0x31c>)
 8004d4c:	429d      	cmp	r5, r3
 8004d4e:	f000 80a9 	beq.w	8004ea4 <HAL_UART_Init+0x1c8>
 8004d52:	4baa      	ldr	r3, [pc, #680]	; (8004ffc <HAL_UART_Init+0x320>)
 8004d54:	429d      	cmp	r5, r3
 8004d56:	d019      	beq.n	8004d8c <HAL_UART_Init+0xb0>
 8004d58:	4ba9      	ldr	r3, [pc, #676]	; (8005000 <HAL_UART_Init+0x324>)
 8004d5a:	429d      	cmp	r5, r3
 8004d5c:	d027      	beq.n	8004dae <HAL_UART_Init+0xd2>
 8004d5e:	4ba9      	ldr	r3, [pc, #676]	; (8005004 <HAL_UART_Init+0x328>)
 8004d60:	429d      	cmp	r5, r3
 8004d62:	f000 80c8 	beq.w	8004ef6 <HAL_UART_Init+0x21a>
 8004d66:	4ba8      	ldr	r3, [pc, #672]	; (8005008 <HAL_UART_Init+0x32c>)
 8004d68:	429d      	cmp	r5, r3
 8004d6a:	f000 80b5 	beq.w	8004ed8 <HAL_UART_Init+0x1fc>
 8004d6e:	4ba7      	ldr	r3, [pc, #668]	; (800500c <HAL_UART_Init+0x330>)
 8004d70:	429d      	cmp	r5, r3
 8004d72:	f000 8159 	beq.w	8005028 <HAL_UART_Init+0x34c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d76:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004d7a:	f000 8168 	beq.w	800504e <HAL_UART_Init+0x372>
    return HAL_ERROR;
 8004d7e:	2001      	movs	r0, #1
 8004d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8004d82:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004d86:	f7fd fb47 	bl	8002418 <HAL_UART_MspInit>
 8004d8a:	e7b2      	b.n	8004cf2 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d8c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	f000 80a6 	beq.w	8004eea <HAL_UART_Init+0x20e>
 8004d9e:	d912      	bls.n	8004dc6 <HAL_UART_Init+0xea>
 8004da0:	2b80      	cmp	r3, #128	; 0x80
 8004da2:	f000 8103 	beq.w	8004fac <HAL_UART_Init+0x2d0>
 8004da6:	2bc0      	cmp	r3, #192	; 0xc0
 8004da8:	f000 808a 	beq.w	8004ec0 <HAL_UART_Init+0x1e4>
 8004dac:	e7e3      	b.n	8004d76 <HAL_UART_Init+0x9a>
 8004dae:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbe:	f000 8094 	beq.w	8004eea <HAL_UART_Init+0x20e>
 8004dc2:	f200 80e6 	bhi.w	8004f92 <HAL_UART_Init+0x2b6>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1d5      	bne.n	8004d76 <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dca:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004dce:	f000 80e7 	beq.w	8004fa0 <HAL_UART_Init+0x2c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004dd2:	f7fe fd3d 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004dd6:	6862      	ldr	r2, [r4, #4]
 8004dd8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d13b      	bne.n	8004e62 <HAL_UART_Init+0x186>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dea:	6823      	ldr	r3, [r4, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dec:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004df4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e06:	66e1      	str	r1, [r4, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e08:	f7fd fc3e 	bl	8002688 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e0c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004e0e:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	0712      	lsls	r2, r2, #28
 8004e14:	d409      	bmi.n	8004e2a <HAL_UART_Init+0x14e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8004e16:	2220      	movs	r2, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e18:	2300      	movs	r3, #0
  huart->gState= HAL_UART_STATE_READY;
 8004e1a:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69

  return HAL_OK;
 8004e1e:	4618      	mov	r0, r3
  huart->RxState= HAL_UART_STATE_READY;
 8004e20:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8004e24:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8004e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004e2a:	4f79      	ldr	r7, [pc, #484]	; (8005010 <HAL_UART_Init+0x334>)
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2c:	69dd      	ldr	r5, [r3, #28]
 8004e2e:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8004e32:	d1f0      	bne.n	8004e16 <HAL_UART_Init+0x13a>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004e34:	f7fd fc28 	bl	8002688 <HAL_GetTick>
 8004e38:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e3a:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004e3c:	42b8      	cmp	r0, r7
 8004e3e:	d9f5      	bls.n	8004e2c <HAL_UART_Init+0x150>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e40:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8004e42:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8004e44:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e4a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004e54:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8004e58:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 8004e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UART_AdvFeatureConfig(huart);
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7ff fee2 	bl	8004c2c <UART_AdvFeatureConfig>
 8004e68:	e7bf      	b.n	8004dea <HAL_UART_Init+0x10e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e6a:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <HAL_UART_Init+0x338>)
 8004e6c:	4a6a      	ldr	r2, [pc, #424]	; (8005018 <HAL_UART_Init+0x33c>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e78:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004e7c:	d159      	bne.n	8004f32 <HAL_UART_Init+0x256>
    switch (clocksource)
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	f200 80e5 	bhi.w	800504e <HAL_UART_Init+0x372>
 8004e84:	e8df f003 	tbb	[pc, r3]
 8004e88:	e395748c 	.word	0xe395748c
 8004e8c:	e3e3e38f 	.word	0xe3e3e38f
 8004e90:	9d          	.byte	0x9d
 8004e91:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e92:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8004e96:	4a61      	ldr	r2, [pc, #388]	; (800501c <HAL_UART_Init+0x340>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	f003 030c 	and.w	r3, r3, #12
 8004ea0:	5cd3      	ldrb	r3, [r2, r3]
 8004ea2:	e7e9      	b.n	8004e78 <HAL_UART_Init+0x19c>
 8004ea4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d01a      	beq.n	8004eea <HAL_UART_Init+0x20e>
 8004eb4:	d987      	bls.n	8004dc6 <HAL_UART_Init+0xea>
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d078      	beq.n	8004fac <HAL_UART_Init+0x2d0>
 8004eba:	2b30      	cmp	r3, #48	; 0x30
 8004ebc:	f47f af5b 	bne.w	8004d76 <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ec0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004ec4:	d07d      	beq.n	8004fc2 <HAL_UART_Init+0x2e6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004ec6:	6862      	ldr	r2, [r4, #4]
 8004ec8:	0853      	lsrs	r3, r2, #1
 8004eca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	60eb      	str	r3, [r5, #12]
 8004ed6:	e785      	b.n	8004de4 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ed8:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee8:	d116      	bne.n	8004f18 <HAL_UART_Init+0x23c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eea:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004eee:	d05a      	beq.n	8004fa6 <HAL_UART_Init+0x2ca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ef0:	f7fe fc7a 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8004ef4:	e76f      	b.n	8004dd6 <HAL_UART_Init+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f06:	d0f0      	beq.n	8004eea <HAL_UART_Init+0x20e>
 8004f08:	d92c      	bls.n	8004f64 <HAL_UART_Init+0x288>
 8004f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0e:	d04d      	beq.n	8004fac <HAL_UART_Init+0x2d0>
 8004f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f14:	d0d4      	beq.n	8004ec0 <HAL_UART_Init+0x1e4>
 8004f16:	e72e      	b.n	8004d76 <HAL_UART_Init+0x9a>
 8004f18:	f240 809d 	bls.w	8005056 <HAL_UART_Init+0x37a>
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f20:	d044      	beq.n	8004fac <HAL_UART_Init+0x2d0>
 8004f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f26:	d0cb      	beq.n	8004ec0 <HAL_UART_Init+0x1e4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f28:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004f2c:	f000 808f 	beq.w	800504e <HAL_UART_Init+0x372>
 8004f30:	2310      	movs	r3, #16
    switch (clocksource)
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	f63f af23 	bhi.w	8004d7e <HAL_UART_Init+0xa2>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <HAL_UART_Init+0x264>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004dd3 	.word	0x08004dd3
 8004f44:	08004fd3 	.word	0x08004fd3
 8004f48:	08004fd9 	.word	0x08004fd9
 8004f4c:	08004d7f 	.word	0x08004d7f
 8004f50:	08004ef1 	.word	0x08004ef1
 8004f54:	08004d7f 	.word	0x08004d7f
 8004f58:	08004d7f 	.word	0x08004d7f
 8004f5c:	08004d7f 	.word	0x08004d7f
 8004f60:	08004ec7 	.word	0x08004ec7
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f47f af06 	bne.w	8004d76 <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004f6e:	d130      	bne.n	8004fd2 <HAL_UART_Init+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004f70:	f7fe fc7e 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004f74:	6862      	ldr	r2, [r4, #4]
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	0853      	lsrs	r3, r2, #1
 8004f7a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f82:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8004f84:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f88:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60eb      	str	r3, [r5, #12]
 8004f90:	e728      	b.n	8004de4 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f96:	d009      	beq.n	8004fac <HAL_UART_Init+0x2d0>
 8004f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f9c:	d090      	beq.n	8004ec0 <HAL_UART_Init+0x1e4>
 8004f9e:	e6ea      	b.n	8004d76 <HAL_UART_Init+0x9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004fa0:	f7fe fc56 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	e7e6      	b.n	8004f74 <HAL_UART_Init+0x298>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004fa6:	f7fe fc1f 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8004faa:	e7e3      	b.n	8004f74 <HAL_UART_Init+0x298>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004fb0:	d112      	bne.n	8004fd8 <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004fb2:	6862      	ldr	r2, [r4, #4]
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <HAL_UART_Init+0x344>)
 8004fb6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004fba:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	e7e0      	b.n	8004f84 <HAL_UART_Init+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004fc2:	6862      	ldr	r2, [r4, #4]
 8004fc4:	0853      	lsrs	r3, r2, #1
 8004fc6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	e7d8      	b.n	8004f84 <HAL_UART_Init+0x2a8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004fd2:	f7fe fc4d 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
 8004fd6:	e6fe      	b.n	8004dd6 <HAL_UART_Init+0xfa>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004fd8:	6862      	ldr	r2, [r4, #4]
 8004fda:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_UART_Init+0x348>)
 8004fdc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	60eb      	str	r3, [r5, #12]
 8004fe8:	e6fc      	b.n	8004de4 <HAL_UART_Init+0x108>
 8004fea:	bf00      	nop
 8004fec:	efff69f3 	.word	0xefff69f3
 8004ff0:	40011000 	.word	0x40011000
 8004ff4:	40004400 	.word	0x40004400
 8004ff8:	40004800 	.word	0x40004800
 8004ffc:	40004c00 	.word	0x40004c00
 8005000:	40005000 	.word	0x40005000
 8005004:	40011400 	.word	0x40011400
 8005008:	40007800 	.word	0x40007800
 800500c:	40007c00 	.word	0x40007c00
 8005010:	01fffffe 	.word	0x01fffffe
 8005014:	40023800 	.word	0x40023800
 8005018:	080077cc 	.word	0x080077cc
 800501c:	080077d0 	.word	0x080077d0
 8005020:	01e84800 	.word	0x01e84800
 8005024:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005028:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005038:	f43f af57 	beq.w	8004eea <HAL_UART_Init+0x20e>
 800503c:	d90b      	bls.n	8005056 <HAL_UART_Init+0x37a>
 800503e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005042:	d0b3      	beq.n	8004fac <HAL_UART_Init+0x2d0>
 8005044:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005048:	f43f af3a 	beq.w	8004ec0 <HAL_UART_Init+0x1e4>
 800504c:	e76c      	b.n	8004f28 <HAL_UART_Init+0x24c>
    huart->Instance->BRR = brrtemp;
 800504e:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005050:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8005052:	60eb      	str	r3, [r5, #12]
 8005054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005056:	2b00      	cmp	r3, #0
 8005058:	f43f aeb7 	beq.w	8004dca <HAL_UART_Init+0xee>
 800505c:	e764      	b.n	8004f28 <HAL_UART_Init+0x24c>
    return HAL_ERROR;
 800505e:	2001      	movs	r0, #1
}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop

08005064 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005064:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005066:	f001 f8bd 	bl	80061e4 <vTaskStartScheduler>
  
  return osOK;
}
 800506a:	2000      	movs	r0, #0
 800506c:	bd08      	pop	{r3, pc}
 800506e:	bf00      	nop

08005070 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005070:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005072:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8005076:	b085      	sub	sp, #20
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 800507c:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800507e:	ad03      	add	r5, sp, #12
 8005080:	6811      	ldr	r1, [r2, #0]
    fpriority += (priority - osPriorityIdle);
 8005082:	bf14      	ite	ne
 8005084:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005086:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005088:	8a12      	ldrh	r2, [r2, #16]
 800508a:	6840      	ldr	r0, [r0, #4]
 800508c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005090:	f000 ff78 	bl	8005f84 <xTaskCreate>
 8005094:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005096:	bf0c      	ite	eq
 8005098:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800509a:	2000      	movne	r0, #0
}
 800509c:	b005      	add	sp, #20
 800509e:	bd30      	pop	{r4, r5, pc}

080050a0 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050a0:	2800      	cmp	r0, #0
 80050a2:	bf08      	it	eq
 80050a4:	2001      	moveq	r0, #1
{
 80050a6:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050a8:	f001 fa24 	bl	80064f4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050ac:	2000      	movs	r0, #0
 80050ae:	bd08      	pop	{r3, pc}

080050b0 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80050b0:	2001      	movs	r0, #1
 80050b2:	f000 bd13 	b.w	8005adc <xQueueCreateMutex>
 80050b6:	bf00      	nop

080050b8 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80050b8:	2200      	movs	r2, #0
 80050ba:	c803      	ldmia	r0, {r0, r1}
 80050bc:	f000 bb6a 	b.w	8005794 <xQueueGenericCreate>

080050c0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050c0:	4b11      	ldr	r3, [pc, #68]	; (8005108 <prvInsertBlockIntoFreeList+0x48>)
{
 80050c2:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4282      	cmp	r2, r0
 80050c8:	d201      	bcs.n	80050ce <prvInsertBlockIntoFreeList+0xe>
 80050ca:	4613      	mov	r3, r2
 80050cc:	e7fa      	b.n	80050c4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050ce:	685c      	ldr	r4, [r3, #4]
 80050d0:	1919      	adds	r1, r3, r4
 80050d2:	4288      	cmp	r0, r1
 80050d4:	d103      	bne.n	80050de <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050d6:	6841      	ldr	r1, [r0, #4]
 80050d8:	4618      	mov	r0, r3
 80050da:	4421      	add	r1, r4
 80050dc:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050de:	6844      	ldr	r4, [r0, #4]
 80050e0:	1901      	adds	r1, r0, r4
 80050e2:	428a      	cmp	r2, r1
 80050e4:	d109      	bne.n	80050fa <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050e6:	4909      	ldr	r1, [pc, #36]	; (800510c <prvInsertBlockIntoFreeList+0x4c>)
 80050e8:	6809      	ldr	r1, [r1, #0]
 80050ea:	428a      	cmp	r2, r1
 80050ec:	d005      	beq.n	80050fa <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ee:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050f0:	6815      	ldr	r5, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050f2:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050f4:	6005      	str	r5, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050f6:	6041      	str	r1, [r0, #4]
 80050f8:	e000      	b.n	80050fc <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050fa:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050fc:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050fe:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005100:	bf18      	it	ne
 8005102:	6018      	strne	r0, [r3, #0]
}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20003d2c 	.word	0x20003d2c
 800510c:	2000011c 	.word	0x2000011c

08005110 <pvPortMalloc>:
{
 8005110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8005114:	4e47      	ldr	r6, [pc, #284]	; (8005234 <pvPortMalloc+0x124>)
{
 8005116:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005118:	f001 f8a4 	bl	8006264 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d05e      	beq.n	80051e0 <pvPortMalloc+0xd0>
 8005122:	4a45      	ldr	r2, [pc, #276]	; (8005238 <pvPortMalloc+0x128>)
 8005124:	6816      	ldr	r6, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005126:	4234      	tst	r4, r6
 8005128:	d154      	bne.n	80051d4 <pvPortMalloc+0xc4>
			if( xWantedSize > 0 )
 800512a:	2c00      	cmp	r4, #0
 800512c:	d052      	beq.n	80051d4 <pvPortMalloc+0xc4>
				xWantedSize += xHeapStructSize;
 800512e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005132:	0750      	lsls	r0, r2, #29
 8005134:	d002      	beq.n	800513c <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005136:	f022 0207 	bic.w	r2, r2, #7
 800513a:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800513c:	2a00      	cmp	r2, #0
 800513e:	d049      	beq.n	80051d4 <pvPortMalloc+0xc4>
 8005140:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005248 <pvPortMalloc+0x138>
 8005144:	f8d8 5000 	ldr.w	r5, [r8]
 8005148:	42aa      	cmp	r2, r5
 800514a:	d843      	bhi.n	80051d4 <pvPortMalloc+0xc4>
				pxBlock = xStart.pxNextFreeBlock;
 800514c:	483b      	ldr	r0, [pc, #236]	; (800523c <pvPortMalloc+0x12c>)
 800514e:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005150:	e006      	b.n	8005160 <pvPortMalloc+0x50>
 8005152:	f8d4 e000 	ldr.w	lr, [r4]
 8005156:	f1be 0f00 	cmp.w	lr, #0
 800515a:	d004      	beq.n	8005166 <pvPortMalloc+0x56>
 800515c:	4620      	mov	r0, r4
 800515e:	4674      	mov	r4, lr
 8005160:	6861      	ldr	r1, [r4, #4]
 8005162:	428a      	cmp	r2, r1
 8005164:	d8f5      	bhi.n	8005152 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8005166:	429c      	cmp	r4, r3
 8005168:	d034      	beq.n	80051d4 <pvPortMalloc+0xc4>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800516a:	1a8b      	subs	r3, r1, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800516c:	6827      	ldr	r7, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800516e:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005170:	6007      	str	r7, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005172:	d912      	bls.n	800519a <pvPortMalloc+0x8a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005174:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005176:	0741      	lsls	r1, r0, #29
 8005178:	d00a      	beq.n	8005190 <pvPortMalloc+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	b672      	cpsid	i
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	b662      	cpsie	i
 800518e:	e7fe      	b.n	800518e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005190:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005192:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005194:	f7ff ff94 	bl	80050c0 <prvInsertBlockIntoFreeList>
 8005198:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800519a:	4a29      	ldr	r2, [pc, #164]	; (8005240 <pvPortMalloc+0x130>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800519c:	1a6d      	subs	r5, r5, r1
					pxBlock->pxNextFreeBlock = NULL;
 800519e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051a0:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051a2:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051a4:	f8c8 5000 	str.w	r5, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051a8:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 80051aa:	6023      	str	r3, [r4, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051ac:	6061      	str	r1, [r4, #4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051ae:	bf38      	it	cc
 80051b0:	6015      	strcc	r5, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051b2:	f104 0508 	add.w	r5, r4, #8
	( void ) xTaskResumeAll();
 80051b6:	f001 f90d 	bl	80063d4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ba:	076b      	lsls	r3, r5, #29
 80051bc:	d00d      	beq.n	80051da <pvPortMalloc+0xca>
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	b672      	cpsid	i
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	b662      	cpsie	i
 80051d2:	e7fe      	b.n	80051d2 <pvPortMalloc+0xc2>
	( void ) xTaskResumeAll();
 80051d4:	2500      	movs	r5, #0
 80051d6:	f001 f8fd 	bl	80063d4 <xTaskResumeAll>
}
 80051da:	4628      	mov	r0, r5
 80051dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 80051e0:	4918      	ldr	r1, [pc, #96]	; (8005244 <pvPortMalloc+0x134>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051e2:	074d      	lsls	r5, r1, #29
 80051e4:	d023      	beq.n	800522e <pvPortMalloc+0x11e>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051e6:	1dca      	adds	r2, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051e8:	f501 5370 	add.w	r3, r1, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051ec:	f022 0107 	bic.w	r1, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051f0:	1a5b      	subs	r3, r3, r1
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051f2:	440b      	add	r3, r1
	xStart.xBlockSize = ( size_t ) 0;
 80051f4:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051f6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051fa:	4f10      	ldr	r7, [pc, #64]	; (800523c <pvPortMalloc+0x12c>)
	uxAddress -= xHeapStructSize;
 80051fc:	3b08      	subs	r3, #8
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051fe:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8005240 <pvPortMalloc+0x130>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005202:	f8df c044 	ldr.w	ip, [pc, #68]	; 8005248 <pvPortMalloc+0x138>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005206:	f023 0307 	bic.w	r3, r3, #7
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800520a:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8005238 <pvPortMalloc+0x128>
	xStart.xBlockSize = ( size_t ) 0;
 800520e:	6078      	str	r0, [r7, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005210:	1a5a      	subs	r2, r3, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005212:	6039      	str	r1, [r7, #0]
	pxEnd->xBlockSize = 0;
 8005214:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005216:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8005218:	6033      	str	r3, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800521a:	462e      	mov	r6, r5
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800521c:	f8c8 2000 	str.w	r2, [r8]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005220:	f8cc 2000 	str.w	r2, [ip]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005224:	f8ce 5000 	str.w	r5, [lr]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005228:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800522a:	600b      	str	r3, [r1, #0]
 800522c:	e77b      	b.n	8005126 <pvPortMalloc+0x16>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800522e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005232:	e7de      	b.n	80051f2 <pvPortMalloc+0xe2>
 8005234:	2000011c 	.word	0x2000011c
 8005238:	20003d20 	.word	0x20003d20
 800523c:	20003d2c 	.word	0x20003d2c
 8005240:	20003d28 	.word	0x20003d28
 8005244:	20000120 	.word	0x20000120
 8005248:	20003d24 	.word	0x20003d24

0800524c <vPortFree>:
	if( pv != NULL )
 800524c:	b1f0      	cbz	r0, 800528c <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800524e:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <vPortFree+0x70>)
 8005250:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	4213      	tst	r3, r2
 8005258:	d10a      	bne.n	8005270 <vPortFree+0x24>
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	b672      	cpsid	i
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	b662      	cpsie	i
 800526e:	e7fe      	b.n	800526e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005270:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005274:	b159      	cbz	r1, 800528e <vPortFree+0x42>
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	b672      	cpsid	i
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	b662      	cpsie	i
 800528a:	e7fe      	b.n	800528a <vPortFree+0x3e>
 800528c:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800528e:	ea23 0302 	bic.w	r3, r3, r2
{
 8005292:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005294:	f840 3c04 	str.w	r3, [r0, #-4]
 8005298:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800529a:	f000 ffe3 	bl	8006264 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800529e:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <vPortFree+0x74>)
 80052a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052a4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052a8:	6811      	ldr	r1, [r2, #0]
 80052aa:	440b      	add	r3, r1
 80052ac:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052ae:	f7ff ff07 	bl	80050c0 <prvInsertBlockIntoFreeList>
}
 80052b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80052b6:	f001 b88d 	b.w	80063d4 <xTaskResumeAll>
 80052ba:	bf00      	nop
 80052bc:	20003d20 	.word	0x20003d20
 80052c0:	20003d24 	.word	0x20003d24

080052c4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052c4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052cc:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052ce:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d2:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d4:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop

080052dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	6103      	str	r3, [r0, #16]
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop

080052e4 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80052e4:	e890 000c 	ldmia.w	r0, {r2, r3}
{
 80052e8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052ea:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80052ec:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 80052ee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052f0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052f2:	689c      	ldr	r4, [r3, #8]
 80052f4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052f6:	6099      	str	r1, [r3, #8]
}
 80052f8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052fc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80052fe:	6002      	str	r2, [r0, #0]
}
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop

08005304 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005304:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005306:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005308:	1c6b      	adds	r3, r5, #1
 800530a:	d011      	beq.n	8005330 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800530c:	f100 0208 	add.w	r2, r0, #8
 8005310:	e000      	b.n	8005314 <vListInsert+0x10>
 8005312:	461a      	mov	r2, r3
 8005314:	6853      	ldr	r3, [r2, #4]
 8005316:	681c      	ldr	r4, [r3, #0]
 8005318:	42a5      	cmp	r5, r4
 800531a:	d2fa      	bcs.n	8005312 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800531c:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800531e:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005320:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005322:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005324:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005326:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005328:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800532a:	6004      	str	r4, [r0, #0]
}
 800532c:	bc30      	pop	{r4, r5}
 800532e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005330:	6902      	ldr	r2, [r0, #16]
 8005332:	6853      	ldr	r3, [r2, #4]
 8005334:	e7f2      	b.n	800531c <vListInsert+0x18>
 8005336:	bf00      	nop

08005338 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005338:	6902      	ldr	r2, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800533a:	6843      	ldr	r3, [r0, #4]
 800533c:	6881      	ldr	r1, [r0, #8]
{
 800533e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005340:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005342:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005344:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8005346:	42a0      	cmp	r0, r4

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8005348:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800534c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )--;
 800534e:	6813      	ldr	r3, [r2, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005350:	bf08      	it	eq
 8005352:	6051      	streq	r1, [r2, #4]
	pxItemToRemove->pvContainer = NULL;
 8005354:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8005356:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 8005358:	6101      	str	r1, [r0, #16]
}
 800535a:	4618      	mov	r0, r3
	( pxList->uxNumberOfItems )--;
 800535c:	6013      	str	r3, [r2, #0]
}
 800535e:	4770      	bx	lr

08005360 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <prvTaskExitError+0x34>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	d00a      	beq.n	800537e <prvTaskExitError+0x1e>
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	b672      	cpsid	i
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	b662      	cpsie	i
 800537c:	e7fe      	b.n	800537c <prvTaskExitError+0x1c>
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	b672      	cpsid	i
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	b662      	cpsie	i
 8005392:	e7fe      	b.n	8005392 <prvTaskExitError+0x32>
 8005394:	20000024 	.word	0x20000024

08005398 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005398:	4806      	ldr	r0, [pc, #24]	; (80053b4 <prvPortStartFirstTask+0x1c>)
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	6800      	ldr	r0, [r0, #0]
 800539e:	f380 8808 	msr	MSP, r0
 80053a2:	b662      	cpsie	i
 80053a4:	b661      	cpsie	f
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	df00      	svc	0
 80053b0:	bf00      	nop
 80053b2:	0000      	.short	0x0000
 80053b4:	e000ed08 	.word	0xe000ed08

080053b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053c8 <vPortEnableVFP+0x10>
 80053bc:	6801      	ldr	r1, [r0, #0]
 80053be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053c2:	6001      	str	r1, [r0, #0]
 80053c4:	4770      	bx	lr
 80053c6:	0000      	.short	0x0000
 80053c8:	e000ed88 	.word	0xe000ed88

080053cc <pxPortInitialiseStack>:
{
 80053cc:	b470      	push	{r4, r5, r6}
 80053ce:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053d0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053d4:	4d08      	ldr	r5, [pc, #32]	; (80053f8 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80053d6:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053da:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053de:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80053e2:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053e4:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053e6:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053ea:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80053ee:	f843 4c24 	str.w	r4, [r3, #-36]
}
 80053f2:	bc70      	pop	{r4, r5, r6}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	08005361 	.word	0x08005361
 80053fc:	00000000 	.word	0x00000000

08005400 <SVC_Handler>:
	__asm volatile (
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <pxCurrentTCBConst2>)
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	6808      	ldr	r0, [r1, #0]
 8005406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540a:	f380 8809 	msr	PSP, r0
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	4770      	bx	lr
 800541c:	f3af 8000 	nop.w

08005420 <pxCurrentTCBConst2>:
 8005420:	20003d3c 	.word	0x20003d3c

08005424 <vPortEnterCritical>:
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	b672      	cpsid	i
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	b662      	cpsie	i
	uxCriticalNesting++;
 8005438:	4a0b      	ldr	r2, [pc, #44]	; (8005468 <vPortEnterCritical+0x44>)
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800543e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005442:	d000      	beq.n	8005446 <vPortEnterCritical+0x22>
 8005444:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <vPortEnterCritical+0x48>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800544e:	d0f9      	beq.n	8005444 <vPortEnterCritical+0x20>
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	b672      	cpsid	i
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	b662      	cpsie	i
 8005464:	e7fe      	b.n	8005464 <vPortEnterCritical+0x40>
 8005466:	bf00      	nop
 8005468:	20000024 	.word	0x20000024
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005470:	4a09      	ldr	r2, [pc, #36]	; (8005498 <vPortExitCritical+0x28>)
 8005472:	6813      	ldr	r3, [r2, #0]
 8005474:	b953      	cbnz	r3, 800548c <vPortExitCritical+0x1c>
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	b672      	cpsid	i
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	b662      	cpsie	i
 800548a:	e7fe      	b.n	800548a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800548c:	3b01      	subs	r3, #1
 800548e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005490:	b90b      	cbnz	r3, 8005496 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	4770      	bx	lr
 8005498:	20000024 	.word	0x20000024
 800549c:	00000000 	.word	0x00000000

080054a0 <PendSV_Handler>:
	__asm volatile
 80054a0:	f3ef 8009 	mrs	r0, PSP
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	4b15      	ldr	r3, [pc, #84]	; (8005500 <pxCurrentTCBConst>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	f01e 0f10 	tst.w	lr, #16
 80054b0:	bf08      	it	eq
 80054b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ba:	6010      	str	r0, [r2, #0]
 80054bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80054c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054c4:	b672      	cpsid	i
 80054c6:	f380 8811 	msr	BASEPRI, r0
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	b662      	cpsie	i
 80054d4:	f001 f87e 	bl	80065d4 <vTaskSwitchContext>
 80054d8:	f04f 0000 	mov.w	r0, #0
 80054dc:	f380 8811 	msr	BASEPRI, r0
 80054e0:	bc08      	pop	{r3}
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	6808      	ldr	r0, [r1, #0]
 80054e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ea:	f01e 0f10 	tst.w	lr, #16
 80054ee:	bf08      	it	eq
 80054f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054f4:	f380 8809 	msr	PSP, r0
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop

08005500 <pxCurrentTCBConst>:
 8005500:	20003d3c 	.word	0x20003d3c

08005504 <SysTick_Handler>:
{
 8005504:	b508      	push	{r3, lr}
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	b672      	cpsid	i
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800551a:	f000 feab 	bl	8006274 <xTaskIncrementTick>
 800551e:	b118      	cbz	r0, 8005528 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005520:	4b03      	ldr	r3, [pc, #12]	; (8005530 <SysTick_Handler+0x2c>)
 8005522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005526:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005528:	2300      	movs	r3, #0
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	bd08      	pop	{r3, pc}
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005536:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005538:	4a06      	ldr	r2, [pc, #24]	; (8005554 <vPortSetupTimerInterrupt+0x20>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4806      	ldr	r0, [pc, #24]	; (8005558 <vPortSetupTimerInterrupt+0x24>)
 800553e:	fba2 2303 	umull	r2, r3, r2, r3
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005542:	4a06      	ldr	r2, [pc, #24]	; (800555c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005544:	099b      	lsrs	r3, r3, #6
 8005546:	3b01      	subs	r3, #1
 8005548:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800554a:	6011      	str	r1, [r2, #0]
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	2000001c 	.word	0x2000001c
 8005554:	10624dd3 	.word	0x10624dd3
 8005558:	e000e014 	.word	0xe000e014
 800555c:	e000e010 	.word	0xe000e010

08005560 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005560:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005562:	2207      	movs	r2, #7
 8005564:	4823      	ldr	r0, [pc, #140]	; (80055f4 <xPortStartScheduler+0x94>)
{
 8005566:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005568:	7819      	ldrb	r1, [r3, #0]
{
 800556a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800556c:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800556e:	4c22      	ldr	r4, [pc, #136]	; (80055f8 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005570:	b2c9      	uxtb	r1, r1
 8005572:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005574:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005576:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005578:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005580:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005584:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005588:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800558c:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800558e:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005590:	d50d      	bpl.n	80055ae <xPortStartScheduler+0x4e>
 8005592:	2206      	movs	r2, #6
 8005594:	e000      	b.n	8005598 <xPortStartScheduler+0x38>
 8005596:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005598:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800559c:	1e51      	subs	r1, r2, #1
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80055aa:	061b      	lsls	r3, r3, #24
 80055ac:	d4f3      	bmi.n	8005596 <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055ae:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055b0:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <xPortStartScheduler+0x9c>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055b4:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055ba:	4c0d      	ldr	r4, [pc, #52]	; (80055f0 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055bc:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055be:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80055c6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80055ce:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80055d0:	f7ff ffb0 	bl	8005534 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <xPortStartScheduler+0xa0>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80055da:	f7ff feed 	bl	80053b8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <xPortStartScheduler+0xa4>)
 80055e0:	6813      	ldr	r3, [r2, #0]
 80055e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055e6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80055e8:	f7ff fed6 	bl	8005398 <prvPortStartFirstTask>
	prvTaskExitError();
 80055ec:	f7ff feb8 	bl	8005360 <prvTaskExitError>
 80055f0:	e000e400 	.word	0xe000e400
 80055f4:	20003d38 	.word	0x20003d38
 80055f8:	20003d34 	.word	0x20003d34
 80055fc:	e000ed20 	.word	0xe000ed20
 8005600:	20000024 	.word	0x20000024
 8005604:	e000ef34 	.word	0xe000ef34

08005608 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8005608:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800560c:	2b0f      	cmp	r3, #15
 800560e:	d910      	bls.n	8005632 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005610:	4912      	ldr	r1, [pc, #72]	; (800565c <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005612:	4a13      	ldr	r2, [pc, #76]	; (8005660 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005614:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005616:	7812      	ldrb	r2, [r2, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d90a      	bls.n	8005632 <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	b672      	cpsid	i
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	b662      	cpsie	i
 8005630:	e7fe      	b.n	8005630 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <vPortValidateInterruptPriority+0x5c>)
 8005634:	4a0c      	ldr	r2, [pc, #48]	; (8005668 <vPortValidateInterruptPriority+0x60>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800563e:	4293      	cmp	r3, r2
 8005640:	d90a      	bls.n	8005658 <vPortValidateInterruptPriority+0x50>
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	b672      	cpsid	i
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	b662      	cpsie	i
 8005656:	e7fe      	b.n	8005656 <vPortValidateInterruptPriority+0x4e>
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	e000e3f0 	.word	0xe000e3f0
 8005660:	20003d34 	.word	0x20003d34
 8005664:	e000ed0c 	.word	0xe000ed0c
 8005668:	20003d38 	.word	0x20003d38

0800566c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005670:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8005672:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005674:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005676:	b932      	cbnz	r2, 8005686 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005678:	6805      	ldr	r5, [r0, #0]
 800567a:	bb3d      	cbnz	r5, 80056cc <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800567c:	6840      	ldr	r0, [r0, #4]
 800567e:	f001 f947 	bl	8006910 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005682:	6065      	str	r5, [r4, #4]
 8005684:	e025      	b.n	80056d2 <prvCopyDataToQueue+0x66>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005686:	b96d      	cbnz	r5, 80056a4 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005688:	6880      	ldr	r0, [r0, #8]
 800568a:	f001 f9cf 	bl	8006a2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005692:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005694:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005696:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005698:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800569a:	d317      	bcc.n	80056cc <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800569c:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800569e:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056a0:	60a3      	str	r3, [r4, #8]
 80056a2:	e016      	b.n	80056d2 <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a4:	68c0      	ldr	r0, [r0, #12]
 80056a6:	f001 f9c1 	bl	8006a2c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80056aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ac:	68e2      	ldr	r2, [r4, #12]
 80056ae:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056b0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80056b2:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056b4:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80056b6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056b8:	d202      	bcs.n	80056c0 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80056ba:	6862      	ldr	r2, [r4, #4]
 80056bc:	4413      	add	r3, r2
 80056be:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056c0:	2d02      	cmp	r5, #2
 80056c2:	d103      	bne.n	80056cc <prvCopyDataToQueue+0x60>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056c4:	b126      	cbz	r6, 80056d0 <prvCopyDataToQueue+0x64>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056c6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80056c8:	2000      	movs	r0, #0
 80056ca:	e002      	b.n	80056d2 <prvCopyDataToQueue+0x66>
 80056cc:	2000      	movs	r0, #0
 80056ce:	e000      	b.n	80056d2 <prvCopyDataToQueue+0x66>
 80056d0:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80056d2:	3601      	adds	r6, #1
 80056d4:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80056d6:	bd70      	pop	{r4, r5, r6, pc}

080056d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80056da:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056dc:	b172      	cbz	r2, 80056fc <prvCopyDataFromQueue+0x24>
 80056de:	4608      	mov	r0, r1
{
 80056e0:	b410      	push	{r4}
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80056e2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056e4:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80056e6:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056e8:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80056ea:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056ec:	d301      	bcc.n	80056f2 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80056ee:	6819      	ldr	r1, [r3, #0]
 80056f0:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056f2:	68d9      	ldr	r1, [r3, #12]
	}
}
 80056f4:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056f8:	f001 b998 	b.w	8006a2c <memcpy>
 80056fc:	4770      	bx	lr
	...

08005700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005704:	f7ff fe8e 	bl	8005424 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005708:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800570c:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800570e:	2c00      	cmp	r4, #0
 8005710:	dd16      	ble.n	8005740 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005712:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005714:	b1a3      	cbz	r3, 8005740 <prvUnlockQueue+0x40>
 8005716:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800571a:	e005      	b.n	8005728 <prvUnlockQueue+0x28>
 800571c:	3c01      	subs	r4, #1
 800571e:	b2e3      	uxtb	r3, r4
 8005720:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005722:	b16b      	cbz	r3, 8005740 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005724:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005726:	b15b      	cbz	r3, 8005740 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005728:	4630      	mov	r0, r6
 800572a:	f000 ffe5 	bl	80066f8 <xTaskRemoveFromEventList>
 800572e:	2800      	cmp	r0, #0
 8005730:	d0f4      	beq.n	800571c <prvUnlockQueue+0x1c>
 8005732:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005734:	f001 f888 	bl	8006848 <vTaskMissedYield>
 8005738:	b2e3      	uxtb	r3, r4
 800573a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1f1      	bne.n	8005724 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005740:	23ff      	movs	r3, #255	; 0xff
 8005742:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005746:	f7ff fe93 	bl	8005470 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800574a:	f7ff fe6b 	bl	8005424 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800574e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005752:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005754:	2c00      	cmp	r4, #0
 8005756:	dd16      	ble.n	8005786 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005758:	692b      	ldr	r3, [r5, #16]
 800575a:	b1a3      	cbz	r3, 8005786 <prvUnlockQueue+0x86>
 800575c:	f105 0610 	add.w	r6, r5, #16
 8005760:	e005      	b.n	800576e <prvUnlockQueue+0x6e>
 8005762:	3c01      	subs	r4, #1
 8005764:	b2e3      	uxtb	r3, r4
 8005766:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005768:	b16b      	cbz	r3, 8005786 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800576a:	692b      	ldr	r3, [r5, #16]
 800576c:	b15b      	cbz	r3, 8005786 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800576e:	4630      	mov	r0, r6
 8005770:	f000 ffc2 	bl	80066f8 <xTaskRemoveFromEventList>
 8005774:	2800      	cmp	r0, #0
 8005776:	d0f4      	beq.n	8005762 <prvUnlockQueue+0x62>
 8005778:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800577a:	f001 f865 	bl	8006848 <vTaskMissedYield>
 800577e:	b2e3      	uxtb	r3, r4
 8005780:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f1      	bne.n	800576a <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005786:	23ff      	movs	r3, #255	; 0xff
 8005788:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800578c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005790:	f7ff be6e 	b.w	8005470 <vPortExitCritical>

08005794 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005794:	b950      	cbnz	r0, 80057ac <xQueueGenericCreate+0x18>
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	b672      	cpsid	i
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	b662      	cpsie	i
 80057aa:	e7fe      	b.n	80057aa <xQueueGenericCreate+0x16>
	{
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b0:	fb01 f000 	mul.w	r0, r1, r0
 80057b4:	460d      	mov	r5, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80057b6:	3048      	adds	r0, #72	; 0x48
 80057b8:	f7ff fcaa 	bl	8005110 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80057bc:	4604      	mov	r4, r0
 80057be:	b318      	cbz	r0, 8005808 <xQueueGenericCreate+0x74>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80057c0:	b325      	cbz	r5, 800580c <xQueueGenericCreate+0x78>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80057c2:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80057c6:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80057c8:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057ca:	2600      	movs	r6, #0
	pxNewQueue->uxItemSize = uxItemSize;
 80057cc:	6425      	str	r5, [r4, #64]	; 0x40
		pxQueue->cRxLock = queueUNLOCKED;
 80057ce:	25ff      	movs	r5, #255	; 0xff
	taskENTER_CRITICAL();
 80057d0:	f7ff fe28 	bl	8005424 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80057d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057d8:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80057e4:	1a59      	subs	r1, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057e6:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057e8:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80057ea:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057ec:	6063      	str	r3, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 80057ee:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80057f2:	60e2      	str	r2, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 80057f4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057f8:	f7ff fd64 	bl	80052c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005800:	f7ff fd60 	bl	80052c4 <vListInitialise>
	taskEXIT_CRITICAL();
 8005804:	f7ff fe34 	bl	8005470 <vPortExitCritical>
	}
 8005808:	4620      	mov	r0, r4
 800580a:	bd70      	pop	{r4, r5, r6, pc}
	if( uxItemSize == ( UBaseType_t ) 0 )
 800580c:	4603      	mov	r3, r0
 800580e:	e7da      	b.n	80057c6 <xQueueGenericCreate+0x32>

08005810 <xQueueGenericSend>:
{
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	b085      	sub	sp, #20
 8005816:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005818:	2800      	cmp	r0, #0
 800581a:	f000 810a 	beq.w	8005a32 <xQueueGenericSend+0x222>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800581e:	2900      	cmp	r1, #0
 8005820:	f000 814b 	beq.w	8005aba <xQueueGenericSend+0x2aa>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005824:	2b02      	cmp	r3, #2
 8005826:	f000 8139 	beq.w	8005a9c <xQueueGenericSend+0x28c>
 800582a:	4604      	mov	r4, r0
 800582c:	461f      	mov	r7, r3
 800582e:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005830:	f001 f810 	bl	8006854 <xTaskGetSchedulerState>
 8005834:	b918      	cbnz	r0, 800583e <xQueueGenericSend+0x2e>
 8005836:	9b01      	ldr	r3, [sp, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f040 8124 	bne.w	8005a86 <xQueueGenericSend+0x276>
		taskENTER_CRITICAL();
 800583e:	f7ff fdf1 	bl	8005424 <vPortEnterCritical>
 8005842:	f1a7 0602 	sub.w	r6, r7, #2
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005846:	6ba2      	ldr	r2, [r4, #56]	; 0x38
{
 8005848:	2500      	movs	r5, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800584a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800584c:	fab6 f686 	clz	r6, r6
		prvLockQueue( pxQueue );
 8005850:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005852:	429a      	cmp	r2, r3
 8005854:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8005858:	d378      	bcc.n	800594c <xQueueGenericSend+0x13c>
 800585a:	2e00      	cmp	r6, #0
 800585c:	d176      	bne.n	800594c <xQueueGenericSend+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800585e:	9b01      	ldr	r3, [sp, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8104 	beq.w	8005a6e <xQueueGenericSend+0x25e>
				else if( xEntryTimeSet == pdFALSE )
 8005866:	2d00      	cmp	r5, #0
 8005868:	f000 80fd 	beq.w	8005a66 <xQueueGenericSend+0x256>
		taskEXIT_CRITICAL();
 800586c:	f7ff fe00 	bl	8005470 <vPortExitCritical>
		vTaskSuspendAll();
 8005870:	f000 fcf8 	bl	8006264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005874:	f7ff fdd6 	bl	8005424 <vPortEnterCritical>
 8005878:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800587c:	2bff      	cmp	r3, #255	; 0xff
 800587e:	f000 80ef 	beq.w	8005a60 <xQueueGenericSend+0x250>
 8005882:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005886:	2bff      	cmp	r3, #255	; 0xff
 8005888:	f000 80e7 	beq.w	8005a5a <xQueueGenericSend+0x24a>
 800588c:	f7ff fdf0 	bl	8005470 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005890:	a901      	add	r1, sp, #4
 8005892:	a802      	add	r0, sp, #8
 8005894:	f000 ff90 	bl	80067b8 <xTaskCheckForTimeOut>
 8005898:	2800      	cmp	r0, #0
 800589a:	f040 80d5 	bne.w	8005a48 <xQueueGenericSend+0x238>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800589e:	f7ff fdc1 	bl	8005424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d066      	beq.n	8005978 <xQueueGenericSend+0x168>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80058aa:	f7ff fde1 	bl	8005470 <vPortExitCritical>
	taskENTER_CRITICAL();
 80058ae:	f7ff fdb9 	bl	8005424 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80058b2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80058b6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	dd16      	ble.n	80058ea <xQueueGenericSend+0xda>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058be:	b1a3      	cbz	r3, 80058ea <xQueueGenericSend+0xda>
 80058c0:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 80058c4:	e005      	b.n	80058d2 <xQueueGenericSend+0xc2>
 80058c6:	3d01      	subs	r5, #1
 80058c8:	b2eb      	uxtb	r3, r5
 80058ca:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058cc:	b16b      	cbz	r3, 80058ea <xQueueGenericSend+0xda>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d0:	b15b      	cbz	r3, 80058ea <xQueueGenericSend+0xda>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d2:	4658      	mov	r0, fp
 80058d4:	f000 ff10 	bl	80066f8 <xTaskRemoveFromEventList>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d0f4      	beq.n	80058c6 <xQueueGenericSend+0xb6>
 80058dc:	3d01      	subs	r5, #1
						vTaskMissedYield();
 80058de:	f000 ffb3 	bl	8006848 <vTaskMissedYield>
 80058e2:	b2eb      	uxtb	r3, r5
 80058e4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1f1      	bne.n	80058ce <xQueueGenericSend+0xbe>
		pxQueue->cTxLock = queueUNLOCKED;
 80058ea:	23ff      	movs	r3, #255	; 0xff
 80058ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80058f0:	f7ff fdbe 	bl	8005470 <vPortExitCritical>
	taskENTER_CRITICAL();
 80058f4:	f7ff fd96 	bl	8005424 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80058f8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80058fc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058fe:	2d00      	cmp	r5, #0
 8005900:	dd16      	ble.n	8005930 <xQueueGenericSend+0x120>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	b1a3      	cbz	r3, 8005930 <xQueueGenericSend+0x120>
 8005906:	f104 0b10 	add.w	fp, r4, #16
 800590a:	e005      	b.n	8005918 <xQueueGenericSend+0x108>
 800590c:	3d01      	subs	r5, #1
 800590e:	b2eb      	uxtb	r3, r5
 8005910:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005912:	b16b      	cbz	r3, 8005930 <xQueueGenericSend+0x120>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	b15b      	cbz	r3, 8005930 <xQueueGenericSend+0x120>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005918:	4658      	mov	r0, fp
 800591a:	f000 feed 	bl	80066f8 <xTaskRemoveFromEventList>
 800591e:	2800      	cmp	r0, #0
 8005920:	d0f4      	beq.n	800590c <xQueueGenericSend+0xfc>
 8005922:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8005924:	f000 ff90 	bl	8006848 <vTaskMissedYield>
 8005928:	b2eb      	uxtb	r3, r5
 800592a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f1      	bne.n	8005914 <xQueueGenericSend+0x104>
		pxQueue->cRxLock = queueUNLOCKED;
 8005930:	23ff      	movs	r3, #255	; 0xff
 8005932:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005936:	f7ff fd9b 	bl	8005470 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800593a:	f000 fd4b 	bl	80063d4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800593e:	f7ff fd71 	bl	8005424 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005942:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005944:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005946:	2501      	movs	r5, #1
 8005948:	429a      	cmp	r2, r3
 800594a:	d286      	bcs.n	800585a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800594c:	463a      	mov	r2, r7
 800594e:	4641      	mov	r1, r8
 8005950:	4620      	mov	r0, r4
 8005952:	f7ff fe8b 	bl	800566c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	f040 808c 	bne.w	8005a76 <xQueueGenericSend+0x266>
					else if( xYieldRequired != pdFALSE )
 800595e:	b138      	cbz	r0, 8005970 <xQueueGenericSend+0x160>
						queueYIELD_IF_USING_PREEMPTION();
 8005960:	4b5d      	ldr	r3, [pc, #372]	; (8005ad8 <xQueueGenericSend+0x2c8>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005970:	f7ff fd7e 	bl	8005470 <vPortExitCritical>
				return pdPASS;
 8005974:	2001      	movs	r0, #1
 8005976:	e06d      	b.n	8005a54 <xQueueGenericSend+0x244>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005978:	f104 0b10 	add.w	fp, r4, #16
	taskEXIT_CRITICAL();
 800597c:	f7ff fd78 	bl	8005470 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005980:	9901      	ldr	r1, [sp, #4]
 8005982:	4658      	mov	r0, fp
 8005984:	f000 fe64 	bl	8006650 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005988:	f7ff fd4c 	bl	8005424 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800598c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005990:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005994:	f1ba 0f00 	cmp.w	sl, #0
 8005998:	dd1a      	ble.n	80059d0 <xQueueGenericSend+0x1c0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800599a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800599c:	b1c2      	cbz	r2, 80059d0 <xQueueGenericSend+0x1c0>
 800599e:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80059a2:	e007      	b.n	80059b4 <xQueueGenericSend+0x1a4>
 80059a4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059ae:	b17b      	cbz	r3, 80059d0 <xQueueGenericSend+0x1c0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059b2:	b16a      	cbz	r2, 80059d0 <xQueueGenericSend+0x1c0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059b4:	4628      	mov	r0, r5
 80059b6:	f000 fe9f 	bl	80066f8 <xTaskRemoveFromEventList>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d0f2      	beq.n	80059a4 <xQueueGenericSend+0x194>
						vTaskMissedYield();
 80059be:	f000 ff43 	bl	8006848 <vTaskMissedYield>
 80059c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ef      	bne.n	80059b0 <xQueueGenericSend+0x1a0>
		pxQueue->cTxLock = queueUNLOCKED;
 80059d0:	23ff      	movs	r3, #255	; 0xff
 80059d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80059d6:	f7ff fd4b 	bl	8005470 <vPortExitCritical>
	taskENTER_CRITICAL();
 80059da:	f7ff fd23 	bl	8005424 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80059de:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80059e2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	dc04      	bgt.n	80059f2 <xQueueGenericSend+0x1e2>
 80059e8:	e011      	b.n	8005a0e <xQueueGenericSend+0x1fe>
 80059ea:	3d01      	subs	r5, #1
 80059ec:	b2eb      	uxtb	r3, r5
 80059ee:	b25d      	sxtb	r5, r3
 80059f0:	b16b      	cbz	r3, 8005a0e <xQueueGenericSend+0x1fe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	b15b      	cbz	r3, 8005a0e <xQueueGenericSend+0x1fe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059f6:	4658      	mov	r0, fp
 80059f8:	f000 fe7e 	bl	80066f8 <xTaskRemoveFromEventList>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d0f4      	beq.n	80059ea <xQueueGenericSend+0x1da>
 8005a00:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8005a02:	f000 ff21 	bl	8006848 <vTaskMissedYield>
 8005a06:	b2eb      	uxtb	r3, r5
 8005a08:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f1      	bne.n	80059f2 <xQueueGenericSend+0x1e2>
		pxQueue->cRxLock = queueUNLOCKED;
 8005a0e:	23ff      	movs	r3, #255	; 0xff
 8005a10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005a14:	f7ff fd2c 	bl	8005470 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005a18:	f000 fcdc 	bl	80063d4 <xTaskResumeAll>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d18e      	bne.n	800593e <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8005a20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a24:	4a2c      	ldr	r2, [pc, #176]	; (8005ad8 <xQueueGenericSend+0x2c8>)
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	e785      	b.n	800593e <xQueueGenericSend+0x12e>
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	b672      	cpsid	i
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	b662      	cpsie	i
 8005a46:	e7fe      	b.n	8005a46 <xQueueGenericSend+0x236>
			prvUnlockQueue( pxQueue );
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f7ff fe59 	bl	8005700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a4e:	f000 fcc1 	bl	80063d4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005a52:	2000      	movs	r0, #0
}
 8005a54:	b005      	add	sp, #20
 8005a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		prvLockQueue( pxQueue );
 8005a5a:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8005a5e:	e715      	b.n	800588c <xQueueGenericSend+0x7c>
 8005a60:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8005a64:	e70d      	b.n	8005882 <xQueueGenericSend+0x72>
					vTaskSetTimeOutState( &xTimeOut );
 8005a66:	a802      	add	r0, sp, #8
 8005a68:	f000 fe8e 	bl	8006788 <vTaskSetTimeOutState>
 8005a6c:	e6fe      	b.n	800586c <xQueueGenericSend+0x5c>
					taskEXIT_CRITICAL();
 8005a6e:	f7ff fcff 	bl	8005470 <vPortExitCritical>
					return errQUEUE_FULL;
 8005a72:	4630      	mov	r0, r6
 8005a74:	e7ee      	b.n	8005a54 <xQueueGenericSend+0x244>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a7a:	f000 fe3d 	bl	80066f8 <xTaskRemoveFromEventList>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	f47f af6e 	bne.w	8005960 <xQueueGenericSend+0x150>
 8005a84:	e774      	b.n	8005970 <xQueueGenericSend+0x160>
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	b672      	cpsid	i
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	b662      	cpsie	i
 8005a9a:	e7fe      	b.n	8005a9a <xQueueGenericSend+0x28a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005a9e:	2a01      	cmp	r2, #1
 8005aa0:	f43f aec3 	beq.w	800582a <xQueueGenericSend+0x1a>
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	b672      	cpsid	i
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	b662      	cpsie	i
 8005ab8:	e7fe      	b.n	8005ab8 <xQueueGenericSend+0x2a8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	f43f aeb1 	beq.w	8005824 <xQueueGenericSend+0x14>
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	b672      	cpsid	i
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	b662      	cpsie	i
 8005ad6:	e7fe      	b.n	8005ad6 <xQueueGenericSend+0x2c6>
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <xQueueCreateMutex>:
	{
 8005adc:	b570      	push	{r4, r5, r6, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005ade:	2048      	movs	r0, #72	; 0x48
 8005ae0:	f7ff fb16 	bl	8005110 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	b350      	cbz	r0, 8005b3e <xQueueCreateMutex+0x62>
	pxNewQueue->uxItemSize = uxItemSize;
 8005ae8:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8005aea:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005aec:	6020      	str	r0, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
 8005aee:	26ff      	movs	r6, #255	; 0xff
	pxNewQueue->uxLength = uxQueueLength;
 8005af0:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005af2:	6405      	str	r5, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
 8005af4:	f7ff fc96 	bl	8005424 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005af8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005afa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005afc:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	fb02 f201 	mul.w	r2, r2, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b06:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b08:	1a51      	subs	r1, r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b0a:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b0c:	63a5      	str	r5, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b0e:	440b      	add	r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b10:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b12:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b16:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8005b18:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b1c:	f7ff fbd2 	bl	80052c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b20:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b24:	f7ff fbce 	bl	80052c4 <vListInitialise>
	taskEXIT_CRITICAL();
 8005b28:	f7ff fca2 	bl	8005470 <vPortExitCritical>
			pxNewQueue->pxMutexHolder = NULL;
 8005b2c:	6065      	str	r5, [r4, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b2e:	6025      	str	r5, [r4, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b30:	462b      	mov	r3, r5
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005b32:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b34:	462a      	mov	r2, r5
 8005b36:	4629      	mov	r1, r5
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f7ff fe69 	bl	8005810 <xQueueGenericSend>
	}
 8005b3e:	4620      	mov	r0, r4
 8005b40:	bd70      	pop	{r4, r5, r6, pc}
 8005b42:	bf00      	nop

08005b44 <xQueueGenericSendFromISR>:
{
 8005b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005b48:	b318      	cbz	r0, 8005b92 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	d04a      	beq.n	8005be4 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d03a      	beq.n	8005bc8 <xQueueGenericSendFromISR+0x84>
 8005b52:	4604      	mov	r4, r0
 8005b54:	461f      	mov	r7, r3
 8005b56:	4690      	mov	r8, r2
 8005b58:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b5a:	f7ff fd55 	bl	8005608 <vPortValidateInterruptPriority>
	__asm volatile
 8005b5e:	f3ef 8611 	mrs	r6, BASEPRI
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	b672      	cpsid	i
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d314      	bcc.n	8005ba8 <xQueueGenericSendFromISR+0x64>
 8005b7e:	f1a7 0002 	sub.w	r0, r7, #2
 8005b82:	fab0 f080 	clz	r0, r0
 8005b86:	0940      	lsrs	r0, r0, #5
 8005b88:	b970      	cbnz	r0, 8005ba8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005b8a:	f386 8811 	msr	BASEPRI, r6
}
 8005b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	b672      	cpsid	i
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	b662      	cpsie	i
 8005ba6:	e7fe      	b.n	8005ba6 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ba8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bac:	463a      	mov	r2, r7
 8005bae:	4649      	mov	r1, r9
 8005bb0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bb2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bb4:	f7ff fd5a 	bl	800566c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005bb8:	1c6b      	adds	r3, r5, #1
 8005bba:	d021      	beq.n	8005c00 <xQueueGenericSendFromISR+0xbc>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bbc:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8005bbe:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bc0:	b25b      	sxtb	r3, r3
 8005bc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bc6:	e7e0      	b.n	8005b8a <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bc8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005bca:	2c01      	cmp	r4, #1
 8005bcc:	d0c1      	beq.n	8005b52 <xQueueGenericSendFromISR+0xe>
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	b672      	cpsid	i
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	b662      	cpsie	i
 8005be2:	e7fe      	b.n	8005be2 <xQueueGenericSendFromISR+0x9e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005be4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005be6:	2c00      	cmp	r4, #0
 8005be8:	d0b1      	beq.n	8005b4e <xQueueGenericSendFromISR+0xa>
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	b672      	cpsid	i
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	b662      	cpsie	i
 8005bfe:	e7fe      	b.n	8005bfe <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c02:	b90b      	cbnz	r3, 8005c08 <xQueueGenericSendFromISR+0xc4>
			xReturn = pdPASS;
 8005c04:	2001      	movs	r0, #1
 8005c06:	e7c0      	b.n	8005b8a <xQueueGenericSendFromISR+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c0c:	f000 fd74 	bl	80066f8 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d0f7      	beq.n	8005c04 <xQueueGenericSendFromISR+0xc0>
 8005c14:	f1b8 0f00 	cmp.w	r8, #0
 8005c18:	d0f4      	beq.n	8005c04 <xQueueGenericSendFromISR+0xc0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	f8c8 0000 	str.w	r0, [r8]
 8005c20:	e7b3      	b.n	8005b8a <xQueueGenericSendFromISR+0x46>
 8005c22:	bf00      	nop

08005c24 <xQueueGenericReceive>:
{
 8005c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	f000 811e 	beq.w	8005e6e <xQueueGenericReceive+0x24a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c32:	2900      	cmp	r1, #0
 8005c34:	f000 814f 	beq.w	8005ed6 <xQueueGenericReceive+0x2b2>
 8005c38:	4604      	mov	r4, r0
 8005c3a:	461f      	mov	r7, r3
 8005c3c:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c3e:	f000 fe09 	bl	8006854 <xTaskGetSchedulerState>
 8005c42:	b960      	cbnz	r0, 8005c5e <xQueueGenericReceive+0x3a>
 8005c44:	9d01      	ldr	r5, [sp, #4]
 8005c46:	b15d      	cbz	r5, 8005c60 <xQueueGenericReceive+0x3c>
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	b672      	cpsid	i
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	b662      	cpsie	i
 8005c5c:	e7fe      	b.n	8005c5c <xQueueGenericReceive+0x38>
 8005c5e:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
 8005c60:	f7ff fbe0 	bl	8005424 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c64:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8005c68:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8005c6c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8005ef4 <xQueueGenericReceive+0x2d0>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c70:	f1ba 0f00 	cmp.w	sl, #0
 8005c74:	f040 808a 	bne.w	8005d8c <xQueueGenericReceive+0x168>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 810a 	beq.w	8005e94 <xQueueGenericReceive+0x270>
				else if( xEntryTimeSet == pdFALSE )
 8005c80:	b915      	cbnz	r5, 8005c88 <xQueueGenericReceive+0x64>
					vTaskSetTimeOutState( &xTimeOut );
 8005c82:	a802      	add	r0, sp, #8
 8005c84:	f000 fd80 	bl	8006788 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8005c88:	f7ff fbf2 	bl	8005470 <vPortExitCritical>
		vTaskSuspendAll();
 8005c8c:	f000 faea 	bl	8006264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c90:	f7ff fbc8 	bl	8005424 <vPortEnterCritical>
 8005c94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005c98:	2bff      	cmp	r3, #255	; 0xff
 8005c9a:	d101      	bne.n	8005ca0 <xQueueGenericReceive+0x7c>
 8005c9c:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8005ca0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005ca4:	2bff      	cmp	r3, #255	; 0xff
 8005ca6:	d101      	bne.n	8005cac <xQueueGenericReceive+0x88>
 8005ca8:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8005cac:	f7ff fbe0 	bl	8005470 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cb0:	a901      	add	r1, sp, #4
 8005cb2:	a802      	add	r0, sp, #8
 8005cb4:	f000 fd80 	bl	80067b8 <xTaskCheckForTimeOut>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f040 8088 	bne.w	8005dce <xQueueGenericReceive+0x1aa>
	taskENTER_CRITICAL();
 8005cbe:	f7ff fbb1 	bl	8005424 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d179      	bne.n	8005dbc <xQueueGenericReceive+0x198>
	taskEXIT_CRITICAL();
 8005cc8:	f7ff fbd2 	bl	8005470 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80d8 	beq.w	8005e84 <xQueueGenericReceive+0x260>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cd4:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8005cd8:	9901      	ldr	r1, [sp, #4]
 8005cda:	4650      	mov	r0, sl
 8005cdc:	f000 fcb8 	bl	8006650 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005ce0:	f7ff fba0 	bl	8005424 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005ce4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005ce8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cea:	2d00      	cmp	r5, #0
 8005cec:	dc04      	bgt.n	8005cf8 <xQueueGenericReceive+0xd4>
 8005cee:	e011      	b.n	8005d14 <xQueueGenericReceive+0xf0>
 8005cf0:	3d01      	subs	r5, #1
 8005cf2:	b2eb      	uxtb	r3, r5
 8005cf4:	b25d      	sxtb	r5, r3
 8005cf6:	b16b      	cbz	r3, 8005d14 <xQueueGenericReceive+0xf0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cfa:	b15b      	cbz	r3, 8005d14 <xQueueGenericReceive+0xf0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cfc:	4650      	mov	r0, sl
 8005cfe:	f000 fcfb 	bl	80066f8 <xTaskRemoveFromEventList>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d0f4      	beq.n	8005cf0 <xQueueGenericReceive+0xcc>
 8005d06:	3d01      	subs	r5, #1
						vTaskMissedYield();
 8005d08:	f000 fd9e 	bl	8006848 <vTaskMissedYield>
 8005d0c:	b2eb      	uxtb	r3, r5
 8005d0e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1f1      	bne.n	8005cf8 <xQueueGenericReceive+0xd4>
		pxQueue->cTxLock = queueUNLOCKED;
 8005d14:	23ff      	movs	r3, #255	; 0xff
 8005d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005d1a:	f7ff fba9 	bl	8005470 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005d1e:	f7ff fb81 	bl	8005424 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005d22:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005d26:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	dd16      	ble.n	8005d5a <xQueueGenericReceive+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	b1a3      	cbz	r3, 8005d5a <xQueueGenericReceive+0x136>
 8005d30:	f104 0a10 	add.w	sl, r4, #16
 8005d34:	e005      	b.n	8005d42 <xQueueGenericReceive+0x11e>
 8005d36:	3d01      	subs	r5, #1
 8005d38:	b2eb      	uxtb	r3, r5
 8005d3a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d3c:	b16b      	cbz	r3, 8005d5a <xQueueGenericReceive+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	b15b      	cbz	r3, 8005d5a <xQueueGenericReceive+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d42:	4650      	mov	r0, sl
 8005d44:	f000 fcd8 	bl	80066f8 <xTaskRemoveFromEventList>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d0f4      	beq.n	8005d36 <xQueueGenericReceive+0x112>
 8005d4c:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8005d4e:	f000 fd7b 	bl	8006848 <vTaskMissedYield>
 8005d52:	b2eb      	uxtb	r3, r5
 8005d54:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f1      	bne.n	8005d3e <xQueueGenericReceive+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 8005d5a:	23ff      	movs	r3, #255	; 0xff
 8005d5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005d60:	f7ff fb86 	bl	8005470 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005d64:	f000 fb36 	bl	80063d4 <xTaskResumeAll>
 8005d68:	b938      	cbnz	r0, 8005d7a <xQueueGenericReceive+0x156>
					portYIELD_WITHIN_API();
 8005d6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005d6e:	f8c9 3000 	str.w	r3, [r9]
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8005d7c:	f7ff fb52 	bl	8005424 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d80:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d84:	f1ba 0f00 	cmp.w	sl, #0
 8005d88:	f43f af76 	beq.w	8005c78 <xQueueGenericReceive+0x54>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005d90:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d92:	f7ff fca1 	bl	80056d8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8005d96:	2f00      	cmp	r7, #0
 8005d98:	f040 8082 	bne.w	8005ea0 <xQueueGenericReceive+0x27c>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005d9c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005da0:	6822      	ldr	r2, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005da2:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005da4:	b912      	cbnz	r2, 8005dac <xQueueGenericReceive+0x188>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005da6:	f000 fe11 	bl	80069cc <pvTaskIncrementMutexHeldCount>
 8005daa:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dac:	6923      	ldr	r3, [r4, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f040 808a 	bne.w	8005ec8 <xQueueGenericReceive+0x2a4>
				taskEXIT_CRITICAL();
 8005db4:	f7ff fb5c 	bl	8005470 <vPortExitCritical>
				return pdPASS;
 8005db8:	2001      	movs	r0, #1
 8005dba:	e06e      	b.n	8005e9a <xQueueGenericReceive+0x276>
	taskEXIT_CRITICAL();
 8005dbc:	f7ff fb58 	bl	8005470 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7ff fc9d 	bl	8005700 <prvUnlockQueue>
 8005dc6:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 8005dc8:	f000 fb04 	bl	80063d4 <xTaskResumeAll>
 8005dcc:	e7d6      	b.n	8005d7c <xQueueGenericReceive+0x158>
	taskENTER_CRITICAL();
 8005dce:	f7ff fb29 	bl	8005424 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005dd2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005dd6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dd8:	2d00      	cmp	r5, #0
 8005dda:	dd16      	ble.n	8005e0a <xQueueGenericReceive+0x1e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dde:	b1a3      	cbz	r3, 8005e0a <xQueueGenericReceive+0x1e6>
 8005de0:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8005de4:	e005      	b.n	8005df2 <xQueueGenericReceive+0x1ce>
 8005de6:	3d01      	subs	r5, #1
 8005de8:	b2eb      	uxtb	r3, r5
 8005dea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dec:	b16b      	cbz	r3, 8005e0a <xQueueGenericReceive+0x1e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df0:	b15b      	cbz	r3, 8005e0a <xQueueGenericReceive+0x1e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df2:	4650      	mov	r0, sl
 8005df4:	f000 fc80 	bl	80066f8 <xTaskRemoveFromEventList>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d0f4      	beq.n	8005de6 <xQueueGenericReceive+0x1c2>
 8005dfc:	3d01      	subs	r5, #1
						vTaskMissedYield();
 8005dfe:	f000 fd23 	bl	8006848 <vTaskMissedYield>
 8005e02:	b2eb      	uxtb	r3, r5
 8005e04:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f1      	bne.n	8005dee <xQueueGenericReceive+0x1ca>
		pxQueue->cTxLock = queueUNLOCKED;
 8005e0a:	23ff      	movs	r3, #255	; 0xff
 8005e0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005e10:	f7ff fb2e 	bl	8005470 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005e14:	f7ff fb06 	bl	8005424 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005e18:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005e1c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	dd16      	ble.n	8005e50 <xQueueGenericReceive+0x22c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	b1a3      	cbz	r3, 8005e50 <xQueueGenericReceive+0x22c>
 8005e26:	f104 0a10 	add.w	sl, r4, #16
 8005e2a:	e005      	b.n	8005e38 <xQueueGenericReceive+0x214>
 8005e2c:	3d01      	subs	r5, #1
 8005e2e:	b2eb      	uxtb	r3, r5
 8005e30:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e32:	b16b      	cbz	r3, 8005e50 <xQueueGenericReceive+0x22c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e34:	6923      	ldr	r3, [r4, #16]
 8005e36:	b15b      	cbz	r3, 8005e50 <xQueueGenericReceive+0x22c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e38:	4650      	mov	r0, sl
 8005e3a:	f000 fc5d 	bl	80066f8 <xTaskRemoveFromEventList>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d0f4      	beq.n	8005e2c <xQueueGenericReceive+0x208>
 8005e42:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8005e44:	f000 fd00 	bl	8006848 <vTaskMissedYield>
 8005e48:	b2eb      	uxtb	r3, r5
 8005e4a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f1      	bne.n	8005e34 <xQueueGenericReceive+0x210>
		pxQueue->cRxLock = queueUNLOCKED;
 8005e50:	23ff      	movs	r3, #255	; 0xff
 8005e52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005e56:	f7ff fb0b 	bl	8005470 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8005e5a:	f000 fabb 	bl	80063d4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005e5e:	f7ff fae1 	bl	8005424 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e64:	b1b3      	cbz	r3, 8005e94 <xQueueGenericReceive+0x270>
	taskEXIT_CRITICAL();
 8005e66:	f7ff fb03 	bl	8005470 <vPortExitCritical>
 8005e6a:	2501      	movs	r5, #1
 8005e6c:	e786      	b.n	8005d7c <xQueueGenericReceive+0x158>
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	b672      	cpsid	i
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	b662      	cpsie	i
 8005e82:	e7fe      	b.n	8005e82 <xQueueGenericReceive+0x25e>
						taskENTER_CRITICAL();
 8005e84:	f7ff face 	bl	8005424 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005e88:	6860      	ldr	r0, [r4, #4]
 8005e8a:	f000 fcf3 	bl	8006874 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8005e8e:	f7ff faef 	bl	8005470 <vPortExitCritical>
 8005e92:	e71f      	b.n	8005cd4 <xQueueGenericReceive+0xb0>
					taskEXIT_CRITICAL();
 8005e94:	f7ff faec 	bl	8005470 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005e98:	2000      	movs	r0, #0
}
 8005e9a:	b004      	add	sp, #16
 8005e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005ea2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d085      	beq.n	8005db4 <xQueueGenericReceive+0x190>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005eac:	f000 fc24 	bl	80066f8 <xTaskRemoveFromEventList>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f43f af7f 	beq.w	8005db4 <xQueueGenericReceive+0x190>
							queueYIELD_IF_USING_PREEMPTION();
 8005eb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <xQueueGenericReceive+0x2d0>)
 8005eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	e775      	b.n	8005db4 <xQueueGenericReceive+0x190>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec8:	f104 0010 	add.w	r0, r4, #16
 8005ecc:	f000 fc14 	bl	80066f8 <xTaskRemoveFromEventList>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d1f0      	bne.n	8005eb6 <xQueueGenericReceive+0x292>
 8005ed4:	e76e      	b.n	8005db4 <xQueueGenericReceive+0x190>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ed6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	f43f aead 	beq.w	8005c38 <xQueueGenericReceive+0x14>
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	b672      	cpsid	i
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	b662      	cpsie	i
 8005ef2:	e7fe      	b.n	8005ef2 <xQueueGenericReceive+0x2ce>
 8005ef4:	e000ed04 	.word	0xe000ed04

08005ef8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005efa:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8005efc:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005efe:	4d1b      	ldr	r5, [pc, #108]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x74>)
{
 8005f00:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8005f02:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f04:	6828      	ldr	r0, [r5, #0]
 8005f06:	3004      	adds	r0, #4
 8005f08:	f7ff fa16 	bl	8005338 <uxListRemove>
 8005f0c:	b940      	cbnz	r0, 8005f20 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	2201      	movs	r2, #1
 8005f12:	4917      	ldr	r1, [pc, #92]	; (8005f70 <prvAddCurrentTaskToDelayedList+0x78>)
 8005f14:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005f16:	680b      	ldr	r3, [r1, #0]
 8005f18:	4082      	lsls	r2, r0
 8005f1a:	ea23 0302 	bic.w	r3, r3, r2
 8005f1e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f20:	1c63      	adds	r3, r4, #1
 8005f22:	d100      	bne.n	8005f26 <prvAddCurrentTaskToDelayedList+0x2e>
 8005f24:	b9c7      	cbnz	r7, 8005f58 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f26:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f28:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 8005f2a:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f2c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f2e:	d80b      	bhi.n	8005f48 <prvAddCurrentTaskToDelayedList+0x50>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f30:	4b10      	ldr	r3, [pc, #64]	; (8005f74 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	6829      	ldr	r1, [r5, #0]
 8005f36:	3104      	adds	r1, #4
 8005f38:	f7ff f9e4 	bl	8005304 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <prvAddCurrentTaskToDelayedList+0x80>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4294      	cmp	r4, r2
 8005f42:	d200      	bcs.n	8005f46 <prvAddCurrentTaskToDelayedList+0x4e>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005f44:	601c      	str	r4, [r3, #0]
 8005f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f48:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <prvAddCurrentTaskToDelayedList+0x84>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f52:	3104      	adds	r1, #4
 8005f54:	f7ff b9d6 	b.w	8005304 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f58:	6829      	ldr	r1, [r5, #0]
 8005f5a:	4809      	ldr	r0, [pc, #36]	; (8005f80 <prvAddCurrentTaskToDelayedList+0x88>)
 8005f5c:	3104      	adds	r1, #4
}
 8005f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f62:	f7ff b9bf 	b.w	80052e4 <vListInsertEnd>
 8005f66:	bf00      	nop
 8005f68:	20003e60 	.word	0x20003e60
 8005f6c:	20003d3c 	.word	0x20003d3c
 8005f70:	20003de8 	.word	0x20003de8
 8005f74:	20003d40 	.word	0x20003d40
 8005f78:	20003e18 	.word	0x20003e18
 8005f7c:	20003d44 	.word	0x20003d44
 8005f80:	20003e38 	.word	0x20003e38

08005f84 <xTaskCreate>:
	{
 8005f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f88:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8005f8c:	4680      	mov	r8, r0
 8005f8e:	460d      	mov	r5, r1
 8005f90:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f92:	4650      	mov	r0, sl
	{
 8005f94:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f96:	f7ff f8bb 	bl	8005110 <pvPortMalloc>
			if( pxStack != NULL )
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	f000 80cc 	beq.w	8006138 <xTaskCreate+0x1b4>
 8005fa0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005fa2:	2054      	movs	r0, #84	; 0x54
 8005fa4:	f7ff f8b4 	bl	8005110 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005fa8:	4604      	mov	r4, r0
 8005faa:	2800      	cmp	r0, #0
 8005fac:	f000 80d1 	beq.w	8006152 <xTaskCreate+0x1ce>
					pxNewTCB->pxStack = pxStack;
 8005fb0:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fb2:	f1aa 0a04 	sub.w	sl, sl, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fb6:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fb8:	4456      	add	r6, sl
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fba:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8005fbe:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fc0:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d047      	beq.n	8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fc8:	786b      	ldrb	r3, [r5, #1]
 8005fca:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8005fce:	786b      	ldrb	r3, [r5, #1]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d041      	beq.n	8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fd4:	78ab      	ldrb	r3, [r5, #2]
 8005fd6:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 8005fda:	78ab      	ldrb	r3, [r5, #2]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d03b      	beq.n	8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fe0:	78eb      	ldrb	r3, [r5, #3]
 8005fe2:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8005fe6:	78eb      	ldrb	r3, [r5, #3]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d035      	beq.n	8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fec:	792b      	ldrb	r3, [r5, #4]
 8005fee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8005ff2:	792b      	ldrb	r3, [r5, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02f      	beq.n	8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff8:	796b      	ldrb	r3, [r5, #5]
 8005ffa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 8005ffe:	796b      	ldrb	r3, [r5, #5]
 8006000:	b353      	cbz	r3, 8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006002:	79ab      	ldrb	r3, [r5, #6]
 8006004:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 8006008:	79ab      	ldrb	r3, [r5, #6]
 800600a:	b32b      	cbz	r3, 8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800600c:	79eb      	ldrb	r3, [r5, #7]
 800600e:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8006012:	79eb      	ldrb	r3, [r5, #7]
 8006014:	b303      	cbz	r3, 8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006016:	7a2b      	ldrb	r3, [r5, #8]
 8006018:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800601c:	7a2b      	ldrb	r3, [r5, #8]
 800601e:	b1db      	cbz	r3, 8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006020:	7a6b      	ldrb	r3, [r5, #9]
 8006022:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8006026:	7a6b      	ldrb	r3, [r5, #9]
 8006028:	b1b3      	cbz	r3, 8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800602a:	7aab      	ldrb	r3, [r5, #10]
 800602c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8006030:	7aab      	ldrb	r3, [r5, #10]
 8006032:	b18b      	cbz	r3, 8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006034:	7aeb      	ldrb	r3, [r5, #11]
 8006036:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800603a:	7aeb      	ldrb	r3, [r5, #11]
 800603c:	b163      	cbz	r3, 8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800603e:	7b2b      	ldrb	r3, [r5, #12]
 8006040:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8006044:	7b2b      	ldrb	r3, [r5, #12]
 8006046:	b13b      	cbz	r3, 8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006048:	7b6b      	ldrb	r3, [r5, #13]
 800604a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800604e:	7b6b      	ldrb	r3, [r5, #13]
 8006050:	b113      	cbz	r3, 8006058 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006052:	7bab      	ldrb	r3, [r5, #14]
 8006054:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8006058:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800605a:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800605e:	f104 0a04 	add.w	sl, r4, #4
 8006062:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006064:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006068:	4650      	mov	r0, sl
		pxNewTCB->uxMutexesHeld = 0;
 800606a:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800606e:	bf28      	it	cs
 8006070:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8006072:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006074:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006076:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800607a:	f7ff f92f 	bl	80052dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800607e:	f104 0018 	add.w	r0, r4, #24
 8006082:	f7ff f92b 	bl	80052dc <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006086:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800608a:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800608c:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800608e:	4641      	mov	r1, r8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006090:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006094:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006096:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006098:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800609a:	f7ff f997 	bl	80053cc <pxPortInitialiseStack>
 800609e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80060a0:	b107      	cbz	r7, 80060a4 <xTaskCreate+0x120>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060a2:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 80060a4:	f7ff f9be 	bl	8005424 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80060a8:	4a40      	ldr	r2, [pc, #256]	; (80061ac <xTaskCreate+0x228>)
		if( pxCurrentTCB == NULL )
 80060aa:	4e41      	ldr	r6, [pc, #260]	; (80061b0 <xTaskCreate+0x22c>)
		uxCurrentNumberOfTasks++;
 80060ac:	6813      	ldr	r3, [r2, #0]
 80060ae:	3301      	adds	r3, #1
 80060b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060b2:	6833      	ldr	r3, [r6, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d043      	beq.n	8006140 <xTaskCreate+0x1bc>
			if( xSchedulerRunning == pdFALSE )
 80060b8:	4f3e      	ldr	r7, [pc, #248]	; (80061b4 <xTaskCreate+0x230>)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	b383      	cbz	r3, 8006120 <xTaskCreate+0x19c>
 80060be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060c0:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80061d4 <xTaskCreate+0x250>
		uxTaskNumber++;
 80060c4:	f8df c110 	ldr.w	ip, [pc, #272]	; 80061d8 <xTaskCreate+0x254>
		prvAddTaskToReadyList( pxNewTCB );
 80060c8:	f04f 0b01 	mov.w	fp, #1
 80060cc:	f8df e10c 	ldr.w	lr, [pc, #268]	; 80061dc <xTaskCreate+0x258>
 80060d0:	4651      	mov	r1, sl
		uxTaskNumber++;
 80060d2:	f8dc 5000 	ldr.w	r5, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 80060d6:	fa0b f203 	lsl.w	r2, fp, r3
 80060da:	f8de 0000 	ldr.w	r0, [lr]
 80060de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 80060e2:	eb05 090b 	add.w	r9, r5, fp
		prvAddTaskToReadyList( pxNewTCB );
 80060e6:	4302      	orrs	r2, r0
 80060e8:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 80060ec:	f8cc 9000 	str.w	r9, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 80060f0:	f8ce 2000 	str.w	r2, [lr]
 80060f4:	f7ff f8f6 	bl	80052e4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80060f8:	f7ff f9ba 	bl	8005470 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	b1c3      	cbz	r3, 8006132 <xTaskCreate+0x1ae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006100:	6832      	ldr	r2, [r6, #0]
 8006102:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006104:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006106:	429a      	cmp	r2, r3
 8006108:	d213      	bcs.n	8006132 <xTaskCreate+0x1ae>
			taskYIELD_IF_USING_PREEMPTION();
 800610a:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <xTaskCreate+0x234>)
 800610c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800611a:	4658      	mov	r0, fp
 800611c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006120:	6832      	ldr	r2, [r6, #0]
 8006122:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006124:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006126:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80061d4 <xTaskCreate+0x250>
 800612a:	429a      	cmp	r2, r3
 800612c:	d8ca      	bhi.n	80060c4 <xTaskCreate+0x140>
					pxCurrentTCB = pxNewTCB;
 800612e:	6034      	str	r4, [r6, #0]
 8006130:	e7c8      	b.n	80060c4 <xTaskCreate+0x140>
			xReturn = pdPASS;
 8006132:	4658      	mov	r0, fp
	}
 8006134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800613c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 8006140:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006142:	6813      	ldr	r3, [r2, #0]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d00b      	beq.n	8006160 <xTaskCreate+0x1dc>
 8006148:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800614a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80061d4 <xTaskCreate+0x250>
 800614e:	4f19      	ldr	r7, [pc, #100]	; (80061b4 <xTaskCreate+0x230>)
 8006150:	e7b8      	b.n	80060c4 <xTaskCreate+0x140>
					vPortFree( pxStack );
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff f87a 	bl	800524c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800615c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006160:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80061d4 <xTaskCreate+0x250>
 8006164:	4645      	mov	r5, r8
 8006166:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800616a:	4628      	mov	r0, r5
 800616c:	3514      	adds	r5, #20
 800616e:	f7ff f8a9 	bl	80052c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006172:	42bd      	cmp	r5, r7
 8006174:	d1f9      	bne.n	800616a <xTaskCreate+0x1e6>
	vListInitialise( &xDelayedTaskList1 );
 8006176:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80061e0 <xTaskCreate+0x25c>
	vListInitialise( &xDelayedTaskList2 );
 800617a:	4d10      	ldr	r5, [pc, #64]	; (80061bc <xTaskCreate+0x238>)
	vListInitialise( &xDelayedTaskList1 );
 800617c:	4648      	mov	r0, r9
 800617e:	4f0d      	ldr	r7, [pc, #52]	; (80061b4 <xTaskCreate+0x230>)
 8006180:	f7ff f8a0 	bl	80052c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006184:	4628      	mov	r0, r5
 8006186:	f7ff f89d 	bl	80052c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800618a:	480d      	ldr	r0, [pc, #52]	; (80061c0 <xTaskCreate+0x23c>)
 800618c:	f7ff f89a 	bl	80052c4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006190:	480c      	ldr	r0, [pc, #48]	; (80061c4 <xTaskCreate+0x240>)
 8006192:	f7ff f897 	bl	80052c4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006196:	480c      	ldr	r0, [pc, #48]	; (80061c8 <xTaskCreate+0x244>)
 8006198:	f7ff f894 	bl	80052c4 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <xTaskCreate+0x248>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800619e:	4a0c      	ldr	r2, [pc, #48]	; (80061d0 <xTaskCreate+0x24c>)
 80061a0:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061a4:	601d      	str	r5, [r3, #0]
 80061a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061a8:	e78c      	b.n	80060c4 <xTaskCreate+0x140>
 80061aa:	bf00      	nop
 80061ac:	20003dd4 	.word	0x20003dd4
 80061b0:	20003d3c 	.word	0x20003d3c
 80061b4:	20003e34 	.word	0x20003e34
 80061b8:	e000ed04 	.word	0xe000ed04
 80061bc:	20003e00 	.word	0x20003e00
 80061c0:	20003e20 	.word	0x20003e20
 80061c4:	20003e4c 	.word	0x20003e4c
 80061c8:	20003e38 	.word	0x20003e38
 80061cc:	20003d44 	.word	0x20003d44
 80061d0:	20003d40 	.word	0x20003d40
 80061d4:	20003d48 	.word	0x20003d48
 80061d8:	20003de4 	.word	0x20003de4
 80061dc:	20003de8 	.word	0x20003de8
 80061e0:	20003dec 	.word	0x20003dec

080061e4 <vTaskStartScheduler>:
{
 80061e4:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80061e6:	4b19      	ldr	r3, [pc, #100]	; (800624c <vTaskStartScheduler+0x68>)
{
 80061e8:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80061ea:	2400      	movs	r4, #0
 80061ec:	2280      	movs	r2, #128	; 0x80
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	4917      	ldr	r1, [pc, #92]	; (8006250 <vTaskStartScheduler+0x6c>)
 80061f2:	4623      	mov	r3, r4
 80061f4:	9400      	str	r4, [sp, #0]
 80061f6:	4817      	ldr	r0, [pc, #92]	; (8006254 <vTaskStartScheduler+0x70>)
 80061f8:	f7ff fec4 	bl	8005f84 <xTaskCreate>
	if( xReturn == pdPASS )
 80061fc:	2801      	cmp	r0, #1
 80061fe:	d00e      	beq.n	800621e <vTaskStartScheduler+0x3a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006200:	3001      	adds	r0, #1
 8006202:	d001      	beq.n	8006208 <vTaskStartScheduler+0x24>
}
 8006204:	b003      	add	sp, #12
 8006206:	bd30      	pop	{r4, r5, pc}
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	b672      	cpsid	i
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	b662      	cpsie	i
 800621c:	e7fe      	b.n	800621c <vTaskStartScheduler+0x38>
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	b672      	cpsid	i
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8006232:	4909      	ldr	r1, [pc, #36]	; (8006258 <vTaskStartScheduler+0x74>)
 8006234:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		xSchedulerRunning = pdTRUE;
 8006238:	4a08      	ldr	r2, [pc, #32]	; (800625c <vTaskStartScheduler+0x78>)
		xTickCount = ( TickType_t ) 0U;
 800623a:	4b09      	ldr	r3, [pc, #36]	; (8006260 <vTaskStartScheduler+0x7c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800623c:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800623e:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8006240:	601c      	str	r4, [r3, #0]
}
 8006242:	b003      	add	sp, #12
 8006244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006248:	f7ff b98a 	b.w	8005560 <xPortStartScheduler>
 800624c:	20003e14 	.word	0x20003e14
 8006250:	080077e0 	.word	0x080077e0
 8006254:	08006545 	.word	0x08006545
 8006258:	20003e18 	.word	0x20003e18
 800625c:	20003e34 	.word	0x20003e34
 8006260:	20003e60 	.word	0x20003e60

08006264 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006264:	4a02      	ldr	r2, [pc, #8]	; (8006270 <vTaskSuspendAll+0xc>)
 8006266:	6813      	ldr	r3, [r2, #0]
 8006268:	3301      	adds	r3, #1
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	20003de0 	.word	0x20003de0

08006274 <xTaskIncrementTick>:
{
 8006274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006278:	4b4b      	ldr	r3, [pc, #300]	; (80063a8 <xTaskIncrementTick+0x134>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d153      	bne.n	8006328 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8006280:	4b4a      	ldr	r3, [pc, #296]	; (80063ac <xTaskIncrementTick+0x138>)
 8006282:	681e      	ldr	r6, [r3, #0]
 8006284:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006286:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8006288:	2e00      	cmp	r6, #0
 800628a:	d05a      	beq.n	8006342 <xTaskIncrementTick+0xce>
 800628c:	f8df b13c 	ldr.w	fp, [pc, #316]	; 80063cc <xTaskIncrementTick+0x158>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006290:	f8db 2000 	ldr.w	r2, [fp]
 8006294:	2400      	movs	r4, #0
 8006296:	4296      	cmp	r6, r2
 8006298:	d362      	bcc.n	8006360 <xTaskIncrementTick+0xec>
 800629a:	4d45      	ldr	r5, [pc, #276]	; (80063b0 <xTaskIncrementTick+0x13c>)
 800629c:	4f45      	ldr	r7, [pc, #276]	; (80063b4 <xTaskIncrementTick+0x140>)
 800629e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80063d0 <xTaskIncrementTick+0x15c>
 80062a2:	e02e      	b.n	8006302 <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062a4:	682a      	ldr	r2, [r5, #0]
 80062a6:	68d2      	ldr	r2, [r2, #12]
 80062a8:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062b0:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 80062b4:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062b6:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 80062b8:	d36b      	bcc.n	8006392 <xTaskIncrementTick+0x11e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062ba:	f7ff f83d 	bl	8005338 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062be:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062c2:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062c6:	b109      	cbz	r1, 80062cc <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062c8:	f7ff f836 	bl	8005338 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062cc:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 80062d0:	2201      	movs	r2, #1
 80062d2:	4b39      	ldr	r3, [pc, #228]	; (80063b8 <xTaskIncrementTick+0x144>)
 80062d4:	4651      	mov	r1, sl
 80062d6:	fa02 fe00 	lsl.w	lr, r2, r0
 80062da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80062e4:	ea4e 0e03 	orr.w	lr, lr, r3
 80062e8:	4b33      	ldr	r3, [pc, #204]	; (80063b8 <xTaskIncrementTick+0x144>)
 80062ea:	f8c3 e000 	str.w	lr, [r3]
 80062ee:	f7fe fff9 	bl	80052e4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f2:	f8d8 0000 	ldr.w	r0, [r8]
 80062f6:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 80062fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80062fc:	4291      	cmp	r1, r2
 80062fe:	bf28      	it	cs
 8006300:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006302:	682a      	ldr	r2, [r5, #0]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	2a00      	cmp	r2, #0
 8006308:	d1cc      	bne.n	80062a4 <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800630a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800630e:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006312:	f8d8 3000 	ldr.w	r3, [r8]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800631c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 8006320:	2b02      	cmp	r3, #2
 8006322:	bf28      	it	cs
 8006324:	2401      	movcs	r4, #1
 8006326:	e004      	b.n	8006332 <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 8006328:	4a24      	ldr	r2, [pc, #144]	; (80063bc <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 800632a:	2400      	movs	r4, #0
		++uxPendedTicks;
 800632c:	6813      	ldr	r3, [r2, #0]
 800632e:	3301      	adds	r3, #1
 8006330:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8006332:	4b23      	ldr	r3, [pc, #140]	; (80063c0 <xTaskIncrementTick+0x14c>)
 8006334:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006336:	2b00      	cmp	r3, #0
 8006338:	bf18      	it	ne
 800633a:	2401      	movne	r4, #1
}
 800633c:	4620      	mov	r0, r4
 800633e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006342:	4d1b      	ldr	r5, [pc, #108]	; (80063b0 <xTaskIncrementTick+0x13c>)
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b173      	cbz	r3, 8006368 <xTaskIncrementTick+0xf4>
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	b672      	cpsid	i
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	b662      	cpsie	i
 800635e:	e7fe      	b.n	800635e <xTaskIncrementTick+0xea>
 8006360:	4f14      	ldr	r7, [pc, #80]	; (80063b4 <xTaskIncrementTick+0x140>)
 8006362:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80063d0 <xTaskIncrementTick+0x15c>
 8006366:	e7d4      	b.n	8006312 <xTaskIncrementTick+0x9e>
 8006368:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <xTaskIncrementTick+0x150>)
 800636a:	6829      	ldr	r1, [r5, #0]
 800636c:	4a16      	ldr	r2, [pc, #88]	; (80063c8 <xTaskIncrementTick+0x154>)
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	6028      	str	r0, [r5, #0]
 8006372:	6019      	str	r1, [r3, #0]
 8006374:	6813      	ldr	r3, [r2, #0]
 8006376:	3301      	adds	r3, #1
 8006378:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800637a:	682b      	ldr	r3, [r5, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	b15b      	cbz	r3, 8006398 <xTaskIncrementTick+0x124>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006380:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006382:	f8df b048 	ldr.w	fp, [pc, #72]	; 80063cc <xTaskIncrementTick+0x158>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006386:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006388:	68d2      	ldr	r2, [r2, #12]
 800638a:	6852      	ldr	r2, [r2, #4]
 800638c:	f8cb 2000 	str.w	r2, [fp]
 8006390:	e77e      	b.n	8006290 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 8006392:	f8cb 1000 	str.w	r1, [fp]
						break;
 8006396:	e7bc      	b.n	8006312 <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006398:	f8df b030 	ldr.w	fp, [pc, #48]	; 80063cc <xTaskIncrementTick+0x158>
 800639c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063a0:	f8cb 2000 	str.w	r2, [fp]
 80063a4:	e774      	b.n	8006290 <xTaskIncrementTick+0x1c>
 80063a6:	bf00      	nop
 80063a8:	20003de0 	.word	0x20003de0
 80063ac:	20003e60 	.word	0x20003e60
 80063b0:	20003d40 	.word	0x20003d40
 80063b4:	20003d48 	.word	0x20003d48
 80063b8:	20003de8 	.word	0x20003de8
 80063bc:	20003ddc 	.word	0x20003ddc
 80063c0:	20003e64 	.word	0x20003e64
 80063c4:	20003d44 	.word	0x20003d44
 80063c8:	20003e1c 	.word	0x20003e1c
 80063cc:	20003e18 	.word	0x20003e18
 80063d0:	20003d3c 	.word	0x20003d3c

080063d4 <xTaskResumeAll>:
{
 80063d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80063d8:	4c3b      	ldr	r4, [pc, #236]	; (80064c8 <xTaskResumeAll+0xf4>)
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	b953      	cbnz	r3, 80063f4 <xTaskResumeAll+0x20>
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	b672      	cpsid	i
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	b662      	cpsie	i
 80063f2:	e7fe      	b.n	80063f2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80063f4:	f7ff f816 	bl	8005424 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fe:	6824      	ldr	r4, [r4, #0]
 8006400:	2c00      	cmp	r4, #0
 8006402:	d153      	bne.n	80064ac <xTaskResumeAll+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006404:	4b31      	ldr	r3, [pc, #196]	; (80064cc <xTaskResumeAll+0xf8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d04f      	beq.n	80064ac <xTaskResumeAll+0xd8>
 800640c:	4d30      	ldr	r5, [pc, #192]	; (80064d0 <xTaskResumeAll+0xfc>)
 800640e:	4f31      	ldr	r7, [pc, #196]	; (80064d4 <xTaskResumeAll+0x100>)
					prvAddTaskToReadyList( pxTCB );
 8006410:	4e31      	ldr	r6, [pc, #196]	; (80064d8 <xTaskResumeAll+0x104>)
 8006412:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80064ec <xTaskResumeAll+0x118>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006416:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80064f0 <xTaskResumeAll+0x11c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800641a:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 800641c:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006420:	b323      	cbz	r3, 800646c <xTaskResumeAll+0x98>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006426:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800642a:	f104 0018 	add.w	r0, r4, #24
 800642e:	f7fe ff83 	bl	8005338 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006432:	4650      	mov	r0, sl
 8006434:	f7fe ff80 	bl	8005338 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006438:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800643a:	6832      	ldr	r2, [r6, #0]
 800643c:	4651      	mov	r1, sl
 800643e:	fa08 f300 	lsl.w	r3, r8, r0
 8006442:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006446:	4313      	orrs	r3, r2
 8006448:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800644c:	6033      	str	r3, [r6, #0]
 800644e:	f7fe ff49 	bl	80052e4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006452:	f8db 3000 	ldr.w	r3, [fp]
 8006456:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	429a      	cmp	r2, r3
 800645c:	d3dd      	bcc.n	800641a <xTaskResumeAll+0x46>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800645e:	683b      	ldr	r3, [r7, #0]
						xYieldPending = pdTRUE;
 8006460:	f8c5 8000 	str.w	r8, [r5]
					prvAddTaskToReadyList( pxTCB );
 8006464:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1da      	bne.n	8006422 <xTaskResumeAll+0x4e>
				if( pxTCB != NULL )
 800646c:	b13c      	cbz	r4, 800647e <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800646e:	4b1b      	ldr	r3, [pc, #108]	; (80064dc <xTaskResumeAll+0x108>)
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	bb02      	cbnz	r2, 80064b8 <xTaskResumeAll+0xe4>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <xTaskResumeAll+0x10c>)
 8006478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800647c:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800647e:	4e19      	ldr	r6, [pc, #100]	; (80064e4 <xTaskResumeAll+0x110>)
 8006480:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006482:	b13c      	cbz	r4, 8006494 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 8006484:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006486:	f7ff fef5 	bl	8006274 <xTaskIncrementTick>
 800648a:	b100      	cbz	r0, 800648e <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 800648c:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800648e:	3c01      	subs	r4, #1
 8006490:	d1f9      	bne.n	8006486 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8006492:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b14b      	cbz	r3, 80064ac <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 8006498:	4b13      	ldr	r3, [pc, #76]	; (80064e8 <xTaskResumeAll+0x114>)
 800649a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80064a8:	2401      	movs	r4, #1
 80064aa:	e000      	b.n	80064ae <xTaskResumeAll+0xda>
BaseType_t xAlreadyYielded = pdFALSE;
 80064ac:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80064ae:	f7fe ffdf 	bl	8005470 <vPortExitCritical>
}
 80064b2:	4620      	mov	r0, r4
 80064b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064b8:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064ba:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <xTaskResumeAll+0x10c>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064bc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064be:	68d2      	ldr	r2, [r2, #12]
 80064c0:	6852      	ldr	r2, [r2, #4]
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e7db      	b.n	800647e <xTaskResumeAll+0xaa>
 80064c6:	bf00      	nop
 80064c8:	20003de0 	.word	0x20003de0
 80064cc:	20003dd4 	.word	0x20003dd4
 80064d0:	20003e64 	.word	0x20003e64
 80064d4:	20003e20 	.word	0x20003e20
 80064d8:	20003de8 	.word	0x20003de8
 80064dc:	20003d40 	.word	0x20003d40
 80064e0:	20003e18 	.word	0x20003e18
 80064e4:	20003ddc 	.word	0x20003ddc
 80064e8:	e000ed04 	.word	0xe000ed04
 80064ec:	20003d48 	.word	0x20003d48
 80064f0:	20003d3c 	.word	0x20003d3c

080064f4 <vTaskDelay>:
	{
 80064f4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064f6:	b168      	cbz	r0, 8006514 <vTaskDelay+0x20>
			configASSERT( uxSchedulerSuspended == 0 );
 80064f8:	4b10      	ldr	r3, [pc, #64]	; (800653c <vTaskDelay+0x48>)
 80064fa:	6819      	ldr	r1, [r3, #0]
 80064fc:	b199      	cbz	r1, 8006526 <vTaskDelay+0x32>
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	b672      	cpsid	i
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	b662      	cpsie	i
 8006512:	e7fe      	b.n	8006512 <vTaskDelay+0x1e>
			portYIELD_WITHIN_API();
 8006514:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <vTaskDelay+0x4c>)
 8006516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	3201      	adds	r2, #1
 800652a:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800652c:	f7ff fce4 	bl	8005ef8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006530:	f7ff ff50 	bl	80063d4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006534:	2800      	cmp	r0, #0
 8006536:	d0ed      	beq.n	8006514 <vTaskDelay+0x20>
 8006538:	bd08      	pop	{r3, pc}
 800653a:	bf00      	nop
 800653c:	20003de0 	.word	0x20003de0
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <prvIdleTask>:
{
 8006544:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8006548:	4c1c      	ldr	r4, [pc, #112]	; (80065bc <prvIdleTask+0x78>)
				taskYIELD();
 800654a:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 800654e:	4e1c      	ldr	r6, [pc, #112]	; (80065c0 <prvIdleTask+0x7c>)
 8006550:	4d1c      	ldr	r5, [pc, #112]	; (80065c4 <prvIdleTask+0x80>)
 8006552:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80065cc <prvIdleTask+0x88>
 8006556:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80065d0 <prvIdleTask+0x8c>
 800655a:	e006      	b.n	800656a <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 800655c:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800655e:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 8006560:	3301      	adds	r3, #1
 8006562:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 8006564:	f7ff ff36 	bl	80063d4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8006568:	b96f      	cbnz	r7, 8006586 <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800656a:	682b      	ldr	r3, [r5, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1f5      	bne.n	800655c <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006570:	f8d8 3000 	ldr.w	r3, [r8]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d9f8      	bls.n	800656a <prvIdleTask+0x26>
				taskYIELD();
 8006578:	f8c9 a000 	str.w	sl, [r9]
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	e7f1      	b.n	800656a <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 8006586:	f7fe ff4d 	bl	8005424 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800658a:	68f3      	ldr	r3, [r6, #12]
 800658c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006590:	f10b 0004 	add.w	r0, fp, #4
 8006594:	f7fe fed0 	bl	8005338 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006598:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <prvIdleTask+0x84>)
 800659a:	4a0b      	ldr	r2, [pc, #44]	; (80065c8 <prvIdleTask+0x84>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3b01      	subs	r3, #1
 80065a0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80065a2:	682b      	ldr	r3, [r5, #0]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 80065a8:	f7fe ff62 	bl	8005470 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80065ac:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 80065b0:	f7fe fe4c 	bl	800524c <vPortFree>
			vPortFree( pxTCB );
 80065b4:	4658      	mov	r0, fp
 80065b6:	f7fe fe49 	bl	800524c <vPortFree>
 80065ba:	e7d6      	b.n	800656a <prvIdleTask+0x26>
 80065bc:	20003de0 	.word	0x20003de0
 80065c0:	20003e4c 	.word	0x20003e4c
 80065c4:	20003dd8 	.word	0x20003dd8
 80065c8:	20003dd4 	.word	0x20003dd4
 80065cc:	20003d48 	.word	0x20003d48
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065d4:	4b19      	ldr	r3, [pc, #100]	; (800663c <vTaskSwitchContext+0x68>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	bb2b      	cbnz	r3, 8006626 <vTaskSwitchContext+0x52>
		xYieldPending = pdFALSE;
 80065da:	4919      	ldr	r1, [pc, #100]	; (8006640 <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065dc:	4a19      	ldr	r2, [pc, #100]	; (8006644 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 80065de:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065e0:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80065e2:	fab3 f383 	clz	r3, r3
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	4a17      	ldr	r2, [pc, #92]	; (8006648 <vTaskSwitchContext+0x74>)
 80065ea:	f1c3 031f 	rsb	r3, r3, #31
 80065ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	58d0      	ldr	r0, [r2, r3]
 80065f6:	18d1      	adds	r1, r2, r3
 80065f8:	b950      	cbnz	r0, 8006610 <vTaskSwitchContext+0x3c>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	b672      	cpsid	i
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	b662      	cpsie	i
 800660e:	e7fe      	b.n	800660e <vTaskSwitchContext+0x3a>
 8006610:	3308      	adds	r3, #8
 8006612:	6848      	ldr	r0, [r1, #4]
 8006614:	441a      	add	r2, r3
 8006616:	6843      	ldr	r3, [r0, #4]
 8006618:	4293      	cmp	r3, r2
 800661a:	604b      	str	r3, [r1, #4]
 800661c:	d007      	beq.n	800662e <vTaskSwitchContext+0x5a>
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	4b0a      	ldr	r3, [pc, #40]	; (800664c <vTaskSwitchContext+0x78>)
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8006626:	4b06      	ldr	r3, [pc, #24]	; (8006640 <vTaskSwitchContext+0x6c>)
 8006628:	2201      	movs	r2, #1
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	604b      	str	r3, [r1, #4]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <vTaskSwitchContext+0x78>)
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20003de0 	.word	0x20003de0
 8006640:	20003e64 	.word	0x20003e64
 8006644:	20003de8 	.word	0x20003de8
 8006648:	20003d48 	.word	0x20003d48
 800664c:	20003d3c 	.word	0x20003d3c

08006650 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006650:	b348      	cbz	r0, 80066a6 <vTaskPlaceOnEventList+0x56>
{
 8006652:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006654:	4d21      	ldr	r5, [pc, #132]	; (80066dc <vTaskPlaceOnEventList+0x8c>)
 8006656:	460c      	mov	r4, r1
 8006658:	6829      	ldr	r1, [r5, #0]
 800665a:	3118      	adds	r1, #24
 800665c:	f7fe fe52 	bl	8005304 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8006660:	4b1f      	ldr	r3, [pc, #124]	; (80066e0 <vTaskPlaceOnEventList+0x90>)
 8006662:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006664:	6828      	ldr	r0, [r5, #0]
 8006666:	3004      	adds	r0, #4
 8006668:	f7fe fe66 	bl	8005338 <uxListRemove>
 800666c:	b940      	cbnz	r0, 8006680 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800666e:	682b      	ldr	r3, [r5, #0]
 8006670:	2201      	movs	r2, #1
 8006672:	491c      	ldr	r1, [pc, #112]	; (80066e4 <vTaskPlaceOnEventList+0x94>)
 8006674:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006676:	680b      	ldr	r3, [r1, #0]
 8006678:	4082      	lsls	r2, r0
 800667a:	ea23 0302 	bic.w	r3, r3, r2
 800667e:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006680:	1c63      	adds	r3, r4, #1
 8006682:	d01b      	beq.n	80066bc <vTaskPlaceOnEventList+0x6c>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006684:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006686:	682b      	ldr	r3, [r5, #0]
			if( xTimeToWake < xConstTickCount )
 8006688:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800668a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800668c:	d81d      	bhi.n	80066ca <vTaskPlaceOnEventList+0x7a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800668e:	4b16      	ldr	r3, [pc, #88]	; (80066e8 <vTaskPlaceOnEventList+0x98>)
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	6829      	ldr	r1, [r5, #0]
 8006694:	3104      	adds	r1, #4
 8006696:	f7fe fe35 	bl	8005304 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800669a:	4b14      	ldr	r3, [pc, #80]	; (80066ec <vTaskPlaceOnEventList+0x9c>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4294      	cmp	r4, r2
 80066a0:	d200      	bcs.n	80066a4 <vTaskPlaceOnEventList+0x54>
					xNextTaskUnblockTime = xTimeToWake;
 80066a2:	601c      	str	r4, [r3, #0]
 80066a4:	bd70      	pop	{r4, r5, r6, pc}
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	b672      	cpsid	i
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	b662      	cpsie	i
 80066ba:	e7fe      	b.n	80066ba <vTaskPlaceOnEventList+0x6a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066bc:	6829      	ldr	r1, [r5, #0]
 80066be:	480c      	ldr	r0, [pc, #48]	; (80066f0 <vTaskPlaceOnEventList+0xa0>)
 80066c0:	3104      	adds	r1, #4
}
 80066c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066c6:	f7fe be0d 	b.w	80052e4 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ca:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <vTaskPlaceOnEventList+0xa4>)
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	6829      	ldr	r1, [r5, #0]
}
 80066d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066d4:	3104      	adds	r1, #4
 80066d6:	f7fe be15 	b.w	8005304 <vListInsert>
 80066da:	bf00      	nop
 80066dc:	20003d3c 	.word	0x20003d3c
 80066e0:	20003e60 	.word	0x20003e60
 80066e4:	20003de8 	.word	0x20003de8
 80066e8:	20003d40 	.word	0x20003d40
 80066ec:	20003e18 	.word	0x20003e18
 80066f0:	20003e38 	.word	0x20003e38
 80066f4:	20003d44 	.word	0x20003d44

080066f8 <xTaskRemoveFromEventList>:
{
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80066fa:	68c3      	ldr	r3, [r0, #12]
 80066fc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80066fe:	b324      	cbz	r4, 800674a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006700:	f104 0518 	add.w	r5, r4, #24
 8006704:	4628      	mov	r0, r5
 8006706:	f7fe fe17 	bl	8005338 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800670a:	4b19      	ldr	r3, [pc, #100]	; (8006770 <xTaskRemoveFromEventList+0x78>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	bb4b      	cbnz	r3, 8006764 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006710:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006712:	4d18      	ldr	r5, [pc, #96]	; (8006774 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006714:	4630      	mov	r0, r6
 8006716:	f7fe fe0f 	bl	8005338 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800671a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800671c:	2301      	movs	r3, #1
 800671e:	4816      	ldr	r0, [pc, #88]	; (8006778 <xTaskRemoveFromEventList+0x80>)
 8006720:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8006724:	4631      	mov	r1, r6
 8006726:	4093      	lsls	r3, r2
 8006728:	682a      	ldr	r2, [r5, #0]
 800672a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800672e:	4313      	orrs	r3, r2
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	f7fe fdd7 	bl	80052e4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006736:	4b11      	ldr	r3, [pc, #68]	; (800677c <xTaskRemoveFromEventList+0x84>)
 8006738:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	429a      	cmp	r2, r3
 8006740:	d90e      	bls.n	8006760 <xTaskRemoveFromEventList+0x68>
		xYieldPending = pdTRUE;
 8006742:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <xTaskRemoveFromEventList+0x88>)
 8006744:	2001      	movs	r0, #1
 8006746:	6018      	str	r0, [r3, #0]
 8006748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	b672      	cpsid	i
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	b662      	cpsie	i
 800675e:	e7fe      	b.n	800675e <xTaskRemoveFromEventList+0x66>
		xReturn = pdFALSE;
 8006760:	2000      	movs	r0, #0
}
 8006762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006764:	4629      	mov	r1, r5
 8006766:	4807      	ldr	r0, [pc, #28]	; (8006784 <xTaskRemoveFromEventList+0x8c>)
 8006768:	f7fe fdbc 	bl	80052e4 <vListInsertEnd>
 800676c:	e7e3      	b.n	8006736 <xTaskRemoveFromEventList+0x3e>
 800676e:	bf00      	nop
 8006770:	20003de0 	.word	0x20003de0
 8006774:	20003de8 	.word	0x20003de8
 8006778:	20003d48 	.word	0x20003d48
 800677c:	20003d3c 	.word	0x20003d3c
 8006780:	20003e64 	.word	0x20003e64
 8006784:	20003e20 	.word	0x20003e20

08006788 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8006788:	b130      	cbz	r0, 8006798 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800678a:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <vTaskSetTimeOutState+0x28>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800678c:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <vTaskSetTimeOutState+0x2c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800678e:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	e880 000c 	stmia.w	r0, {r2, r3}
 8006796:	4770      	bx	lr
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	b672      	cpsid	i
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	b662      	cpsie	i
 80067ac:	e7fe      	b.n	80067ac <vTaskSetTimeOutState+0x24>
 80067ae:	bf00      	nop
 80067b0:	20003e1c 	.word	0x20003e1c
 80067b4:	20003e60 	.word	0x20003e60

080067b8 <xTaskCheckForTimeOut>:
{
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d030      	beq.n	8006820 <xTaskCheckForTimeOut+0x68>
	configASSERT( pxTicksToWait );
 80067be:	b321      	cbz	r1, 800680a <xTaskCheckForTimeOut+0x52>
 80067c0:	460d      	mov	r5, r1
 80067c2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80067c4:	f7fe fe2e 	bl	8005424 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80067c8:	481d      	ldr	r0, [pc, #116]	; (8006840 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 80067ca:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80067cc:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	d031      	beq.n	8006836 <xTaskCheckForTimeOut+0x7e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067d2:	4e1c      	ldr	r6, [pc, #112]	; (8006844 <xTaskCheckForTimeOut+0x8c>)
 80067d4:	6827      	ldr	r7, [r4, #0]
 80067d6:	6832      	ldr	r2, [r6, #0]
 80067d8:	4297      	cmp	r7, r2
 80067da:	6862      	ldr	r2, [r4, #4]
 80067dc:	d006      	beq.n	80067ec <xTaskCheckForTimeOut+0x34>
 80067de:	4291      	cmp	r1, r2
 80067e0:	d304      	bcc.n	80067ec <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 80067e2:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 80067e4:	f7fe fe44 	bl	8005470 <vPortExitCritical>
}
 80067e8:	4630      	mov	r0, r6
 80067ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067ec:	1a8f      	subs	r7, r1, r2
 80067ee:	42bb      	cmp	r3, r7
 80067f0:	d9f7      	bls.n	80067e2 <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80067f2:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067f4:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067f6:	6801      	ldr	r1, [r0, #0]
			xReturn = pdFALSE;
 80067f8:	2600      	movs	r6, #0
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80067fa:	4413      	add	r3, r2
 80067fc:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067fe:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006800:	6061      	str	r1, [r4, #4]
	taskEXIT_CRITICAL();
 8006802:	f7fe fe35 	bl	8005470 <vPortExitCritical>
}
 8006806:	4630      	mov	r0, r6
 8006808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	b672      	cpsid	i
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	b662      	cpsie	i
 800681e:	e7fe      	b.n	800681e <xTaskCheckForTimeOut+0x66>
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	b672      	cpsid	i
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	b662      	cpsie	i
 8006834:	e7fe      	b.n	8006834 <xTaskCheckForTimeOut+0x7c>
				xReturn = pdFALSE;
 8006836:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 8006838:	f7fe fe1a 	bl	8005470 <vPortExitCritical>
}
 800683c:	4630      	mov	r0, r6
 800683e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006840:	20003e60 	.word	0x20003e60
 8006844:	20003e1c 	.word	0x20003e1c

08006848 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006848:	4b01      	ldr	r3, [pc, #4]	; (8006850 <vTaskMissedYield+0x8>)
 800684a:	2201      	movs	r2, #1
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	4770      	bx	lr
 8006850:	20003e64 	.word	0x20003e64

08006854 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <xTaskGetSchedulerState+0x18>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	b133      	cbz	r3, 8006868 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <xTaskGetSchedulerState+0x1c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8006860:	bf0c      	ite	eq
 8006862:	2002      	moveq	r0, #2
 8006864:	2000      	movne	r0, #0
 8006866:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006868:	2001      	movs	r0, #1
	}
 800686a:	4770      	bx	lr
 800686c:	20003e34 	.word	0x20003e34
 8006870:	20003de0 	.word	0x20003de0

08006874 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8006874:	2800      	cmp	r0, #0
 8006876:	d042      	beq.n	80068fe <vTaskPriorityInherit+0x8a>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006878:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	{
 800687a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800687e:	4c21      	ldr	r4, [pc, #132]	; (8006904 <vTaskPriorityInherit+0x90>)
 8006880:	6822      	ldr	r2, [r4, #0]
 8006882:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006884:	4293      	cmp	r3, r2
 8006886:	d212      	bcs.n	80068ae <vTaskPriorityInherit+0x3a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006888:	6982      	ldr	r2, [r0, #24]
 800688a:	2a00      	cmp	r2, #0
 800688c:	db04      	blt.n	8006898 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006892:	f1c2 0207 	rsb	r2, r2, #7
 8006896:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006898:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800689c:	4d1a      	ldr	r5, [pc, #104]	; (8006908 <vTaskPriorityInherit+0x94>)
 800689e:	6942      	ldr	r2, [r0, #20]
 80068a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d004      	beq.n	80068b2 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	62c3      	str	r3, [r0, #44]	; 0x2c
 80068ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068b2:	f100 0804 	add.w	r8, r0, #4
 80068b6:	4607      	mov	r7, r0
 80068b8:	4640      	mov	r0, r8
 80068ba:	f7fe fd3d 	bl	8005338 <uxListRemove>
 80068be:	b9f8      	cbnz	r0, 8006900 <vTaskPriorityInherit+0x8c>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c2:	4e12      	ldr	r6, [pc, #72]	; (800690c <vTaskPriorityInherit+0x98>)
 80068c4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80068c8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80068cc:	b932      	cbnz	r2, 80068dc <vTaskPriorityInherit+0x68>
 80068ce:	2101      	movs	r1, #1
 80068d0:	6832      	ldr	r2, [r6, #0]
 80068d2:	fa01 f303 	lsl.w	r3, r1, r3
 80068d6:	ea22 0303 	bic.w	r3, r2, r3
 80068da:	6033      	str	r3, [r6, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068dc:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 80068de:	2301      	movs	r3, #1
 80068e0:	6834      	ldr	r4, [r6, #0]
 80068e2:	4641      	mov	r1, r8
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80068e6:	4093      	lsls	r3, r2
 80068e8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068ec:	62fa      	str	r2, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80068ee:	4323      	orrs	r3, r4
 80068f0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80068f4:	6033      	str	r3, [r6, #0]
	}
 80068f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80068fa:	f7fe bcf3 	b.w	80052e4 <vListInsertEnd>
 80068fe:	4770      	bx	lr
 8006900:	4e02      	ldr	r6, [pc, #8]	; (800690c <vTaskPriorityInherit+0x98>)
 8006902:	e7eb      	b.n	80068dc <vTaskPriorityInherit+0x68>
 8006904:	20003d3c 	.word	0x20003d3c
 8006908:	20003d48 	.word	0x20003d48
 800690c:	20003de8 	.word	0x20003de8

08006910 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006910:	2800      	cmp	r0, #0
 8006912:	d041      	beq.n	8006998 <xTaskPriorityDisinherit+0x88>
	{
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8006916:	4b2a      	ldr	r3, [pc, #168]	; (80069c0 <xTaskPriorityDisinherit+0xb0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4298      	cmp	r0, r3
 800691c:	d00a      	beq.n	8006934 <xTaskPriorityDisinherit+0x24>
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	b672      	cpsid	i
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	b662      	cpsie	i
 8006932:	e7fe      	b.n	8006932 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006934:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006936:	b953      	cbnz	r3, 800694e <xTaskPriorityDisinherit+0x3e>
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	b672      	cpsid	i
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	b662      	cpsie	i
 800694c:	e7fe      	b.n	800694c <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800694e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8006950:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006952:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8006954:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006956:	4291      	cmp	r1, r2
 8006958:	d030      	beq.n	80069bc <xTaskPriorityDisinherit+0xac>
 800695a:	bb7b      	cbnz	r3, 80069bc <xTaskPriorityDisinherit+0xac>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800695c:	1d07      	adds	r7, r0, #4
 800695e:	4604      	mov	r4, r0
 8006960:	4638      	mov	r0, r7
 8006962:	f7fe fce9 	bl	8005338 <uxListRemove>
 8006966:	b1c8      	cbz	r0, 800699c <xTaskPriorityDisinherit+0x8c>
 8006968:	4816      	ldr	r0, [pc, #88]	; (80069c4 <xTaskPriorityDisinherit+0xb4>)
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800696c:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 800696e:	2501      	movs	r5, #1
 8006970:	f8d2 e000 	ldr.w	lr, [r2]
 8006974:	4639      	mov	r1, r7
 8006976:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800697a:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800697e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006980:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006984:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006988:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800698a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800698e:	6016      	str	r6, [r2, #0]
 8006990:	f7fe fca8 	bl	80052e4 <vListInsertEnd>
					xReturn = pdTRUE;
 8006994:	4628      	mov	r0, r5
	}
 8006996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 8006998:	2000      	movs	r0, #0
	}
 800699a:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800699c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800699e:	4809      	ldr	r0, [pc, #36]	; (80069c4 <xTaskPriorityDisinherit+0xb4>)
 80069a0:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80069a4:	4a08      	ldr	r2, [pc, #32]	; (80069c8 <xTaskPriorityDisinherit+0xb8>)
 80069a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1de      	bne.n	800696c <xTaskPriorityDisinherit+0x5c>
 80069ae:	2501      	movs	r5, #1
 80069b0:	6813      	ldr	r3, [r2, #0]
 80069b2:	40b5      	lsls	r5, r6
 80069b4:	ea23 0305 	bic.w	r3, r3, r5
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	e7d7      	b.n	800696c <xTaskPriorityDisinherit+0x5c>
	BaseType_t xReturn = pdFALSE;
 80069bc:	2000      	movs	r0, #0
 80069be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c0:	20003d3c 	.word	0x20003d3c
 80069c4:	20003d48 	.word	0x20003d48
 80069c8:	20003de8 	.word	0x20003de8

080069cc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <pvTaskIncrementMutexHeldCount+0x14>)
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	b11a      	cbz	r2, 80069da <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80069d2:	6819      	ldr	r1, [r3, #0]
 80069d4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80069d6:	3201      	adds	r2, #1
 80069d8:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80069da:	6818      	ldr	r0, [r3, #0]
	}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20003d3c 	.word	0x20003d3c

080069e4 <__libc_init_array>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	4e0d      	ldr	r6, [pc, #52]	; (8006a1c <__libc_init_array+0x38>)
 80069e8:	4c0d      	ldr	r4, [pc, #52]	; (8006a20 <__libc_init_array+0x3c>)
 80069ea:	1ba4      	subs	r4, r4, r6
 80069ec:	10a4      	asrs	r4, r4, #2
 80069ee:	2500      	movs	r5, #0
 80069f0:	42a5      	cmp	r5, r4
 80069f2:	d109      	bne.n	8006a08 <__libc_init_array+0x24>
 80069f4:	4e0b      	ldr	r6, [pc, #44]	; (8006a24 <__libc_init_array+0x40>)
 80069f6:	4c0c      	ldr	r4, [pc, #48]	; (8006a28 <__libc_init_array+0x44>)
 80069f8:	f000 fe2a 	bl	8007650 <_init>
 80069fc:	1ba4      	subs	r4, r4, r6
 80069fe:	10a4      	asrs	r4, r4, #2
 8006a00:	2500      	movs	r5, #0
 8006a02:	42a5      	cmp	r5, r4
 8006a04:	d105      	bne.n	8006a12 <__libc_init_array+0x2e>
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a0c:	4798      	blx	r3
 8006a0e:	3501      	adds	r5, #1
 8006a10:	e7ee      	b.n	80069f0 <__libc_init_array+0xc>
 8006a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a16:	4798      	blx	r3
 8006a18:	3501      	adds	r5, #1
 8006a1a:	e7f2      	b.n	8006a02 <__libc_init_array+0x1e>
 8006a1c:	080079c8 	.word	0x080079c8
 8006a20:	080079c8 	.word	0x080079c8
 8006a24:	080079c8 	.word	0x080079c8
 8006a28:	080079cc 	.word	0x080079cc

08006a2c <memcpy>:
 8006a2c:	b510      	push	{r4, lr}
 8006a2e:	1e43      	subs	r3, r0, #1
 8006a30:	440a      	add	r2, r1
 8006a32:	4291      	cmp	r1, r2
 8006a34:	d100      	bne.n	8006a38 <memcpy+0xc>
 8006a36:	bd10      	pop	{r4, pc}
 8006a38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a40:	e7f7      	b.n	8006a32 <memcpy+0x6>

08006a42 <memset>:
 8006a42:	4402      	add	r2, r0
 8006a44:	4603      	mov	r3, r0
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d100      	bne.n	8006a4c <memset+0xa>
 8006a4a:	4770      	bx	lr
 8006a4c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a50:	e7f9      	b.n	8006a46 <memset+0x4>
 8006a52:	0000      	movs	r0, r0
 8006a54:	0000      	movs	r0, r0
	...

08006a58 <cos>:
 8006a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a5a:	eeb0 7b40 	vmov.f64	d7, d0
 8006a5e:	ee17 3a90 	vmov	r3, s15
 8006a62:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <cos+0x70>)
 8006a64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	dc04      	bgt.n	8006a76 <cos+0x1e>
 8006a6c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8006ac0 <cos+0x68>
 8006a70:	f000 f9aa 	bl	8006dc8 <__kernel_cos>
 8006a74:	e004      	b.n	8006a80 <cos+0x28>
 8006a76:	4a15      	ldr	r2, [pc, #84]	; (8006acc <cos+0x74>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	dd04      	ble.n	8006a86 <cos+0x2e>
 8006a7c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006a80:	b005      	add	sp, #20
 8006a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a86:	4668      	mov	r0, sp
 8006a88:	f000 f85e 	bl	8006b48 <__ieee754_rem_pio2>
 8006a8c:	f000 0003 	and.w	r0, r0, #3
 8006a90:	2801      	cmp	r0, #1
 8006a92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a96:	ed9d 0b00 	vldr	d0, [sp]
 8006a9a:	d007      	beq.n	8006aac <cos+0x54>
 8006a9c:	2802      	cmp	r0, #2
 8006a9e:	d00a      	beq.n	8006ab6 <cos+0x5e>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d0e5      	beq.n	8006a70 <cos+0x18>
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	f000 fc6f 	bl	8007388 <__kernel_sin>
 8006aaa:	e7e9      	b.n	8006a80 <cos+0x28>
 8006aac:	f000 fc6c 	bl	8007388 <__kernel_sin>
 8006ab0:	eeb1 0b40 	vneg.f64	d0, d0
 8006ab4:	e7e4      	b.n	8006a80 <cos+0x28>
 8006ab6:	f000 f987 	bl	8006dc8 <__kernel_cos>
 8006aba:	e7f9      	b.n	8006ab0 <cos+0x58>
 8006abc:	f3af 8000 	nop.w
	...
 8006ac8:	3fe921fb 	.word	0x3fe921fb
 8006acc:	7fefffff 	.word	0x7fefffff

08006ad0 <sin>:
 8006ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ad2:	eeb0 7b40 	vmov.f64	d7, d0
 8006ad6:	ee17 3a90 	vmov	r3, s15
 8006ada:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <sin+0x70>)
 8006adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	dc05      	bgt.n	8006af0 <sin+0x20>
 8006ae4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8006b38 <sin+0x68>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	f000 fc4d 	bl	8007388 <__kernel_sin>
 8006aee:	e004      	b.n	8006afa <sin+0x2a>
 8006af0:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <sin+0x74>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	dd04      	ble.n	8006b00 <sin+0x30>
 8006af6:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006afa:	b005      	add	sp, #20
 8006afc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b00:	4668      	mov	r0, sp
 8006b02:	f000 f821 	bl	8006b48 <__ieee754_rem_pio2>
 8006b06:	f000 0003 	and.w	r0, r0, #3
 8006b0a:	2801      	cmp	r0, #1
 8006b0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b10:	ed9d 0b00 	vldr	d0, [sp]
 8006b14:	d004      	beq.n	8006b20 <sin+0x50>
 8006b16:	2802      	cmp	r0, #2
 8006b18:	d005      	beq.n	8006b26 <sin+0x56>
 8006b1a:	b950      	cbnz	r0, 8006b32 <sin+0x62>
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	e7e4      	b.n	8006aea <sin+0x1a>
 8006b20:	f000 f952 	bl	8006dc8 <__kernel_cos>
 8006b24:	e7e9      	b.n	8006afa <sin+0x2a>
 8006b26:	2001      	movs	r0, #1
 8006b28:	f000 fc2e 	bl	8007388 <__kernel_sin>
 8006b2c:	eeb1 0b40 	vneg.f64	d0, d0
 8006b30:	e7e3      	b.n	8006afa <sin+0x2a>
 8006b32:	f000 f949 	bl	8006dc8 <__kernel_cos>
 8006b36:	e7f9      	b.n	8006b2c <sin+0x5c>
	...
 8006b40:	3fe921fb 	.word	0x3fe921fb
 8006b44:	7fefffff 	.word	0x7fefffff

08006b48 <__ieee754_rem_pio2>:
 8006b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4a:	eeb0 7b40 	vmov.f64	d7, d0
 8006b4e:	ee17 5a90 	vmov	r5, s15
 8006b52:	4b97      	ldr	r3, [pc, #604]	; (8006db0 <__ieee754_rem_pio2+0x268>)
 8006b54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006b58:	429e      	cmp	r6, r3
 8006b5a:	b089      	sub	sp, #36	; 0x24
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	dc07      	bgt.n	8006b70 <__ieee754_rem_pio2+0x28>
 8006b60:	2200      	movs	r2, #0
 8006b62:	2300      	movs	r3, #0
 8006b64:	ed84 0b00 	vstr	d0, [r4]
 8006b68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	e01b      	b.n	8006ba8 <__ieee754_rem_pio2+0x60>
 8006b70:	4b90      	ldr	r3, [pc, #576]	; (8006db4 <__ieee754_rem_pio2+0x26c>)
 8006b72:	429e      	cmp	r6, r3
 8006b74:	dc3b      	bgt.n	8006bee <__ieee754_rem_pio2+0xa6>
 8006b76:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8006b7a:	2d00      	cmp	r5, #0
 8006b7c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8006d70 <__ieee754_rem_pio2+0x228>
 8006b80:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8006b84:	dd19      	ble.n	8006bba <__ieee754_rem_pio2+0x72>
 8006b86:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006b8a:	429e      	cmp	r6, r3
 8006b8c:	d00e      	beq.n	8006bac <__ieee754_rem_pio2+0x64>
 8006b8e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8006d78 <__ieee754_rem_pio2+0x230>
 8006b92:	ee37 5b46 	vsub.f64	d5, d7, d6
 8006b96:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006b9a:	ed84 5b00 	vstr	d5, [r4]
 8006b9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006ba2:	ed84 7b02 	vstr	d7, [r4, #8]
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	b009      	add	sp, #36	; 0x24
 8006baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bac:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8006d80 <__ieee754_rem_pio2+0x238>
 8006bb0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006bb4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8006d88 <__ieee754_rem_pio2+0x240>
 8006bb8:	e7eb      	b.n	8006b92 <__ieee754_rem_pio2+0x4a>
 8006bba:	429e      	cmp	r6, r3
 8006bbc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006bc0:	d00e      	beq.n	8006be0 <__ieee754_rem_pio2+0x98>
 8006bc2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8006d78 <__ieee754_rem_pio2+0x230>
 8006bc6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8006bca:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006bce:	ed84 5b00 	vstr	d5, [r4]
 8006bd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bda:	ed84 7b02 	vstr	d7, [r4, #8]
 8006bde:	e7e3      	b.n	8006ba8 <__ieee754_rem_pio2+0x60>
 8006be0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8006d80 <__ieee754_rem_pio2+0x238>
 8006be4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006be8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8006d88 <__ieee754_rem_pio2+0x240>
 8006bec:	e7eb      	b.n	8006bc6 <__ieee754_rem_pio2+0x7e>
 8006bee:	4b72      	ldr	r3, [pc, #456]	; (8006db8 <__ieee754_rem_pio2+0x270>)
 8006bf0:	429e      	cmp	r6, r3
 8006bf2:	dc6e      	bgt.n	8006cd2 <__ieee754_rem_pio2+0x18a>
 8006bf4:	f000 fc20 	bl	8007438 <fabs>
 8006bf8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006bfc:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8006d90 <__ieee754_rem_pio2+0x248>
 8006c00:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006c04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006c08:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006c0c:	ee17 0a90 	vmov	r0, s15
 8006c10:	eeb1 5b44 	vneg.f64	d5, d4
 8006c14:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8006d70 <__ieee754_rem_pio2+0x228>
 8006c18:	eea5 0b07 	vfma.f64	d0, d5, d7
 8006c1c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8006d78 <__ieee754_rem_pio2+0x230>
 8006c20:	281f      	cmp	r0, #31
 8006c22:	ee24 7b07 	vmul.f64	d7, d4, d7
 8006c26:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006c2a:	dc1b      	bgt.n	8006c64 <__ieee754_rem_pio2+0x11c>
 8006c2c:	1e42      	subs	r2, r0, #1
 8006c2e:	4b63      	ldr	r3, [pc, #396]	; (8006dbc <__ieee754_rem_pio2+0x274>)
 8006c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c34:	429e      	cmp	r6, r3
 8006c36:	d015      	beq.n	8006c64 <__ieee754_rem_pio2+0x11c>
 8006c38:	ed84 6b00 	vstr	d6, [r4]
 8006c3c:	ed94 6b00 	vldr	d6, [r4]
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	ee30 0b46 	vsub.f64	d0, d0, d6
 8006c46:	ee30 7b47 	vsub.f64	d7, d0, d7
 8006c4a:	ed84 7b02 	vstr	d7, [r4, #8]
 8006c4e:	daab      	bge.n	8006ba8 <__ieee754_rem_pio2+0x60>
 8006c50:	eeb1 6b46 	vneg.f64	d6, d6
 8006c54:	ed84 6b00 	vstr	d6, [r4]
 8006c58:	eeb1 7b47 	vneg.f64	d7, d7
 8006c5c:	4240      	negs	r0, r0
 8006c5e:	ed84 7b02 	vstr	d7, [r4, #8]
 8006c62:	e7a1      	b.n	8006ba8 <__ieee754_rem_pio2+0x60>
 8006c64:	ee16 3a90 	vmov	r3, s13
 8006c68:	1536      	asrs	r6, r6, #20
 8006c6a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006c6e:	1af3      	subs	r3, r6, r3
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	ed84 6b00 	vstr	d6, [r4]
 8006c76:	dde1      	ble.n	8006c3c <__ieee754_rem_pio2+0xf4>
 8006c78:	eeb0 6b40 	vmov.f64	d6, d0
 8006c7c:	ed9f 3b40 	vldr	d3, [pc, #256]	; 8006d80 <__ieee754_rem_pio2+0x238>
 8006c80:	eea5 6b03 	vfma.f64	d6, d5, d3
 8006c84:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006c88:	eea5 7b03 	vfma.f64	d7, d5, d3
 8006c8c:	ed9f 3b3e 	vldr	d3, [pc, #248]	; 8006d88 <__ieee754_rem_pio2+0x240>
 8006c90:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8006c94:	ee36 3b47 	vsub.f64	d3, d6, d7
 8006c98:	ee13 3a90 	vmov	r3, s7
 8006c9c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006ca0:	1af6      	subs	r6, r6, r3
 8006ca2:	2e31      	cmp	r6, #49	; 0x31
 8006ca4:	ed84 3b00 	vstr	d3, [r4]
 8006ca8:	dd10      	ble.n	8006ccc <__ieee754_rem_pio2+0x184>
 8006caa:	eeb0 0b46 	vmov.f64	d0, d6
 8006cae:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8006d98 <__ieee754_rem_pio2+0x250>
 8006cb2:	eea5 0b03 	vfma.f64	d0, d5, d3
 8006cb6:	ee36 7b40 	vsub.f64	d7, d6, d0
 8006cba:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8006da0 <__ieee754_rem_pio2+0x258>
 8006cbe:	eea5 7b03 	vfma.f64	d7, d5, d3
 8006cc2:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8006cc6:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006cca:	e7b5      	b.n	8006c38 <__ieee754_rem_pio2+0xf0>
 8006ccc:	eeb0 0b46 	vmov.f64	d0, d6
 8006cd0:	e7b4      	b.n	8006c3c <__ieee754_rem_pio2+0xf4>
 8006cd2:	4b3b      	ldr	r3, [pc, #236]	; (8006dc0 <__ieee754_rem_pio2+0x278>)
 8006cd4:	429e      	cmp	r6, r3
 8006cd6:	dd06      	ble.n	8006ce6 <__ieee754_rem_pio2+0x19e>
 8006cd8:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006cdc:	ed80 7b02 	vstr	d7, [r0, #8]
 8006ce0:	ed80 7b00 	vstr	d7, [r0]
 8006ce4:	e742      	b.n	8006b6c <__ieee754_rem_pio2+0x24>
 8006ce6:	ee10 3a10 	vmov	r3, s0
 8006cea:	1532      	asrs	r2, r6, #20
 8006cec:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006cf6:	ec41 0b17 	vmov	d7, r0, r1
 8006cfa:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006cfe:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8006da8 <__ieee754_rem_pio2+0x260>
 8006d02:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006d06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006d0a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006d0e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006d12:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006d16:	a908      	add	r1, sp, #32
 8006d18:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006d1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006d20:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006d24:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006d28:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	ed31 7b02 	vldmdb	r1!, {d7}
 8006d32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d3a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8006d3e:	d013      	beq.n	8006d68 <__ieee754_rem_pio2+0x220>
 8006d40:	4920      	ldr	r1, [pc, #128]	; (8006dc4 <__ieee754_rem_pio2+0x27c>)
 8006d42:	9101      	str	r1, [sp, #4]
 8006d44:	2102      	movs	r1, #2
 8006d46:	9100      	str	r1, [sp, #0]
 8006d48:	a802      	add	r0, sp, #8
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	f000 f8a8 	bl	8006ea0 <__kernel_rem_pio2>
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	f6bf af29 	bge.w	8006ba8 <__ieee754_rem_pio2+0x60>
 8006d56:	ed94 7b00 	vldr	d7, [r4]
 8006d5a:	eeb1 7b47 	vneg.f64	d7, d7
 8006d5e:	ed84 7b00 	vstr	d7, [r4]
 8006d62:	ed94 7b02 	vldr	d7, [r4, #8]
 8006d66:	e777      	b.n	8006c58 <__ieee754_rem_pio2+0x110>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	e7e0      	b.n	8006d2e <__ieee754_rem_pio2+0x1e6>
 8006d6c:	f3af 8000 	nop.w
 8006d70:	54400000 	.word	0x54400000
 8006d74:	3ff921fb 	.word	0x3ff921fb
 8006d78:	1a626331 	.word	0x1a626331
 8006d7c:	3dd0b461 	.word	0x3dd0b461
 8006d80:	1a600000 	.word	0x1a600000
 8006d84:	3dd0b461 	.word	0x3dd0b461
 8006d88:	2e037073 	.word	0x2e037073
 8006d8c:	3ba3198a 	.word	0x3ba3198a
 8006d90:	6dc9c883 	.word	0x6dc9c883
 8006d94:	3fe45f30 	.word	0x3fe45f30
 8006d98:	2e000000 	.word	0x2e000000
 8006d9c:	3ba3198a 	.word	0x3ba3198a
 8006da0:	252049c1 	.word	0x252049c1
 8006da4:	397b839a 	.word	0x397b839a
 8006da8:	00000000 	.word	0x00000000
 8006dac:	41700000 	.word	0x41700000
 8006db0:	3fe921fb 	.word	0x3fe921fb
 8006db4:	4002d97b 	.word	0x4002d97b
 8006db8:	413921fb 	.word	0x413921fb
 8006dbc:	080077e8 	.word	0x080077e8
 8006dc0:	7fefffff 	.word	0x7fefffff
 8006dc4:	08007868 	.word	0x08007868

08006dc8 <__kernel_cos>:
 8006dc8:	ee10 1a90 	vmov	r1, s1
 8006dcc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8006dd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006dd4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8006dd8:	da05      	bge.n	8006de6 <__kernel_cos+0x1e>
 8006dda:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006dde:	ee17 3a90 	vmov	r3, s15
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d03d      	beq.n	8006e62 <__kernel_cos+0x9a>
 8006de6:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006dea:	ee20 1b01 	vmul.f64	d1, d0, d1
 8006dee:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8006e68 <__kernel_cos+0xa0>
 8006df2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006df6:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8006e70 <__kernel_cos+0xa8>
 8006dfa:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006dfe:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8006e78 <__kernel_cos+0xb0>
 8006e02:	eea6 7b04 	vfma.f64	d7, d6, d4
 8006e06:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8006e80 <__kernel_cos+0xb8>
 8006e0a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006e0e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8006e88 <__kernel_cos+0xc0>
 8006e12:	4b21      	ldr	r3, [pc, #132]	; (8006e98 <__kernel_cos+0xd0>)
 8006e14:	eea6 7b04 	vfma.f64	d7, d6, d4
 8006e18:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8006e90 <__kernel_cos+0xc8>
 8006e1c:	4299      	cmp	r1, r3
 8006e1e:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006e22:	ee24 4b06 	vmul.f64	d4, d4, d6
 8006e26:	dc06      	bgt.n	8006e36 <__kernel_cos+0x6e>
 8006e28:	ee96 1b04 	vfnms.f64	d1, d6, d4
 8006e2c:	ee96 1b03 	vfnms.f64	d1, d6, d3
 8006e30:	ee35 0b41 	vsub.f64	d0, d5, d1
 8006e34:	4770      	bx	lr
 8006e36:	4b19      	ldr	r3, [pc, #100]	; (8006e9c <__kernel_cos+0xd4>)
 8006e38:	4299      	cmp	r1, r3
 8006e3a:	dc0f      	bgt.n	8006e5c <__kernel_cos+0x94>
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8006e42:	ec43 2b17 	vmov	d7, r2, r3
 8006e46:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006e4a:	ee96 1b04 	vfnms.f64	d1, d6, d4
 8006e4e:	ee96 7b03 	vfnms.f64	d7, d6, d3
 8006e52:	ee37 0b41 	vsub.f64	d0, d7, d1
 8006e56:	ee35 0b40 	vsub.f64	d0, d5, d0
 8006e5a:	4770      	bx	lr
 8006e5c:	eeb5 7b02 	vmov.f64	d7, #82	; 0x3e900000  0.2812500
 8006e60:	e7f1      	b.n	8006e46 <__kernel_cos+0x7e>
 8006e62:	eeb0 0b45 	vmov.f64	d0, d5
 8006e66:	4770      	bx	lr
 8006e68:	be8838d4 	.word	0xbe8838d4
 8006e6c:	bda8fae9 	.word	0xbda8fae9
 8006e70:	bdb4b1c4 	.word	0xbdb4b1c4
 8006e74:	3e21ee9e 	.word	0x3e21ee9e
 8006e78:	809c52ad 	.word	0x809c52ad
 8006e7c:	be927e4f 	.word	0xbe927e4f
 8006e80:	19cb1590 	.word	0x19cb1590
 8006e84:	3efa01a0 	.word	0x3efa01a0
 8006e88:	16c15177 	.word	0x16c15177
 8006e8c:	bf56c16c 	.word	0xbf56c16c
 8006e90:	5555554c 	.word	0x5555554c
 8006e94:	3fa55555 	.word	0x3fa55555
 8006e98:	3fd33332 	.word	0x3fd33332
 8006e9c:	3fe90000 	.word	0x3fe90000

08006ea0 <__kernel_rem_pio2>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	ed2d 8b06 	vpush	{d8-d10}
 8006ea8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006eac:	468b      	mov	fp, r1
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006eb2:	4bcf      	ldr	r3, [pc, #828]	; (80071f0 <__kernel_rem_pio2+0x350>)
 8006eb4:	9002      	str	r0, [sp, #8]
 8006eb6:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8006eba:	9b01      	ldr	r3, [sp, #4]
 8006ebc:	9ca3      	ldr	r4, [sp, #652]	; 0x28c
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	1ed0      	subs	r0, r2, #3
 8006ec2:	2518      	movs	r5, #24
 8006ec4:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 80071d8 <__kernel_rem_pio2+0x338>
 8006ec8:	fb90 f0f5 	sdiv	r0, r0, r5
 8006ecc:	f06f 0517 	mvn.w	r5, #23
 8006ed0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006ed4:	fb00 5505 	mla	r5, r0, r5, r5
 8006ed8:	1ac7      	subs	r7, r0, r3
 8006eda:	4415      	add	r5, r2
 8006edc:	eb0a 0e03 	add.w	lr, sl, r3
 8006ee0:	ae1a      	add	r6, sp, #104	; 0x68
 8006ee2:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	4572      	cmp	r2, lr
 8006eea:	dd0f      	ble.n	8006f0c <__kernel_rem_pio2+0x6c>
 8006eec:	f50d 7ed4 	add.w	lr, sp, #424	; 0x1a8
 8006ef0:	2600      	movs	r6, #0
 8006ef2:	4556      	cmp	r6, sl
 8006ef4:	dc27      	bgt.n	8006f46 <__kernel_rem_pio2+0xa6>
 8006ef6:	9a01      	ldr	r2, [sp, #4]
 8006ef8:	9f02      	ldr	r7, [sp, #8]
 8006efa:	4432      	add	r2, r6
 8006efc:	a91a      	add	r1, sp, #104	; 0x68
 8006efe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006f02:	ed9f 7bb5 	vldr	d7, [pc, #724]	; 80071d8 <__kernel_rem_pio2+0x338>
 8006f06:	f04f 0c00 	mov.w	ip, #0
 8006f0a:	e016      	b.n	8006f3a <__kernel_rem_pio2+0x9a>
 8006f0c:	42d7      	cmn	r7, r2
 8006f0e:	d409      	bmi.n	8006f24 <__kernel_rem_pio2+0x84>
 8006f10:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8006f14:	ee07 1a90 	vmov	s15, r1
 8006f18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f1c:	eca6 7b02 	vstmia	r6!, {d7}
 8006f20:	3201      	adds	r2, #1
 8006f22:	e7e1      	b.n	8006ee8 <__kernel_rem_pio2+0x48>
 8006f24:	eeb0 7b46 	vmov.f64	d7, d6
 8006f28:	e7f8      	b.n	8006f1c <__kernel_rem_pio2+0x7c>
 8006f2a:	ecb7 5b02 	vldmia	r7!, {d5}
 8006f2e:	ed32 6b02 	vldmdb	r2!, {d6}
 8006f32:	f10c 0c01 	add.w	ip, ip, #1
 8006f36:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006f3a:	459c      	cmp	ip, r3
 8006f3c:	ddf5      	ble.n	8006f2a <__kernel_rem_pio2+0x8a>
 8006f3e:	ecae 7b02 	vstmia	lr!, {d7}
 8006f42:	3601      	adds	r6, #1
 8006f44:	e7d5      	b.n	8006ef2 <__kernel_rem_pio2+0x52>
 8006f46:	aa06      	add	r2, sp, #24
 8006f48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f4c:	ed9f 9ba4 	vldr	d9, [pc, #656]	; 80071e0 <__kernel_rem_pio2+0x340>
 8006f50:	ed9f aba5 	vldr	d10, [pc, #660]	; 80071e8 <__kernel_rem_pio2+0x348>
 8006f54:	9204      	str	r2, [sp, #16]
 8006f56:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8006f5a:	9203      	str	r2, [sp, #12]
 8006f5c:	4657      	mov	r7, sl
 8006f5e:	aa92      	add	r2, sp, #584	; 0x248
 8006f60:	f107 5800 	add.w	r8, r7, #536870912	; 0x20000000
 8006f64:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8006f68:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006f6c:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8006f70:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8006f74:	aa92      	add	r2, sp, #584	; 0x248
 8006f76:	eb02 0008 	add.w	r0, r2, r8
 8006f7a:	3898      	subs	r0, #152	; 0x98
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	1abc      	subs	r4, r7, r2
 8006f80:	2c00      	cmp	r4, #0
 8006f82:	dc4c      	bgt.n	800701e <__kernel_rem_pio2+0x17e>
 8006f84:	4628      	mov	r0, r5
 8006f86:	9305      	str	r3, [sp, #20]
 8006f88:	f000 fad6 	bl	8007538 <scalbn>
 8006f8c:	eeb0 8b40 	vmov.f64	d8, d0
 8006f90:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8006f94:	ee28 0b00 	vmul.f64	d0, d8, d0
 8006f98:	f000 fa56 	bl	8007448 <floor>
 8006f9c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8006fa0:	eea0 8b47 	vfms.f64	d8, d0, d7
 8006fa4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	ee17 9a90 	vmov	r9, s15
 8006fae:	9b05      	ldr	r3, [sp, #20]
 8006fb0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fb4:	ee38 8b47 	vsub.f64	d8, d8, d7
 8006fb8:	dd46      	ble.n	8007048 <__kernel_rem_pio2+0x1a8>
 8006fba:	1e78      	subs	r0, r7, #1
 8006fbc:	aa06      	add	r2, sp, #24
 8006fbe:	f1c5 0418 	rsb	r4, r5, #24
 8006fc2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8006fc6:	fa46 f204 	asr.w	r2, r6, r4
 8006fca:	4491      	add	r9, r2
 8006fcc:	40a2      	lsls	r2, r4
 8006fce:	1ab6      	subs	r6, r6, r2
 8006fd0:	aa06      	add	r2, sp, #24
 8006fd2:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8006fd6:	f1c5 0217 	rsb	r2, r5, #23
 8006fda:	4116      	asrs	r6, r2
 8006fdc:	2e00      	cmp	r6, #0
 8006fde:	dd42      	ble.n	8007066 <__kernel_rem_pio2+0x1c6>
 8006fe0:	2400      	movs	r4, #0
 8006fe2:	f109 0901 	add.w	r9, r9, #1
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8006fec:	42a7      	cmp	r7, r4
 8006fee:	dc75      	bgt.n	80070dc <__kernel_rem_pio2+0x23c>
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	dd05      	ble.n	8007000 <__kernel_rem_pio2+0x160>
 8006ff4:	2d01      	cmp	r5, #1
 8006ff6:	f000 8086 	beq.w	8007106 <__kernel_rem_pio2+0x266>
 8006ffa:	2d02      	cmp	r5, #2
 8006ffc:	f000 808d 	beq.w	800711a <__kernel_rem_pio2+0x27a>
 8007000:	2e02      	cmp	r6, #2
 8007002:	d130      	bne.n	8007066 <__kernel_rem_pio2+0x1c6>
 8007004:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007008:	ee30 8b48 	vsub.f64	d8, d0, d8
 800700c:	b358      	cbz	r0, 8007066 <__kernel_rem_pio2+0x1c6>
 800700e:	4628      	mov	r0, r5
 8007010:	9305      	str	r3, [sp, #20]
 8007012:	f000 fa91 	bl	8007538 <scalbn>
 8007016:	9b05      	ldr	r3, [sp, #20]
 8007018:	ee38 8b40 	vsub.f64	d8, d8, d0
 800701c:	e023      	b.n	8007066 <__kernel_rem_pio2+0x1c6>
 800701e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8007022:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007026:	ac06      	add	r4, sp, #24
 8007028:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800702c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8007030:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007034:	ee10 1a10 	vmov	r1, s0
 8007038:	ed30 0b02 	vldmdb	r0!, {d0}
 800703c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8007040:	ee37 0b00 	vadd.f64	d0, d7, d0
 8007044:	3201      	adds	r2, #1
 8007046:	e79a      	b.n	8006f7e <__kernel_rem_pio2+0xde>
 8007048:	d105      	bne.n	8007056 <__kernel_rem_pio2+0x1b6>
 800704a:	1e7a      	subs	r2, r7, #1
 800704c:	a906      	add	r1, sp, #24
 800704e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8007052:	15f6      	asrs	r6, r6, #23
 8007054:	e7c2      	b.n	8006fdc <__kernel_rem_pio2+0x13c>
 8007056:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800705a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800705e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007062:	da39      	bge.n	80070d8 <__kernel_rem_pio2+0x238>
 8007064:	2600      	movs	r6, #0
 8007066:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800706a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706e:	f040 808e 	bne.w	800718e <__kernel_rem_pio2+0x2ee>
 8007072:	1e7c      	subs	r4, r7, #1
 8007074:	4620      	mov	r0, r4
 8007076:	2200      	movs	r2, #0
 8007078:	4550      	cmp	r0, sl
 800707a:	da55      	bge.n	8007128 <__kernel_rem_pio2+0x288>
 800707c:	2a00      	cmp	r2, #0
 800707e:	d164      	bne.n	800714a <__kernel_rem_pio2+0x2aa>
 8007080:	2401      	movs	r4, #1
 8007082:	f06f 0003 	mvn.w	r0, #3
 8007086:	fb00 f204 	mul.w	r2, r0, r4
 800708a:	9904      	ldr	r1, [sp, #16]
 800708c:	588a      	ldr	r2, [r1, r2]
 800708e:	2a00      	cmp	r2, #0
 8007090:	d050      	beq.n	8007134 <__kernel_rem_pio2+0x294>
 8007092:	aa92      	add	r2, sp, #584	; 0x248
 8007094:	4490      	add	r8, r2
 8007096:	9a01      	ldr	r2, [sp, #4]
 8007098:	a91a      	add	r1, sp, #104	; 0x68
 800709a:	443a      	add	r2, r7
 800709c:	1c78      	adds	r0, r7, #1
 800709e:	f1a8 0890 	sub.w	r8, r8, #144	; 0x90
 80070a2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80070a6:	4427      	add	r7, r4
 80070a8:	42b8      	cmp	r0, r7
 80070aa:	f73f af58 	bgt.w	8006f5e <__kernel_rem_pio2+0xbe>
 80070ae:	9903      	ldr	r1, [sp, #12]
 80070b0:	9e02      	ldr	r6, [sp, #8]
 80070b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80070b6:	9105      	str	r1, [sp, #20]
 80070b8:	ee07 1a90 	vmov	s15, r1
 80070bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070c0:	2400      	movs	r4, #0
 80070c2:	eca2 7b02 	vstmia	r2!, {d7}
 80070c6:	ed9f 7b44 	vldr	d7, [pc, #272]	; 80071d8 <__kernel_rem_pio2+0x338>
 80070ca:	4696      	mov	lr, r2
 80070cc:	429c      	cmp	r4, r3
 80070ce:	dd33      	ble.n	8007138 <__kernel_rem_pio2+0x298>
 80070d0:	eca8 7b02 	vstmia	r8!, {d7}
 80070d4:	3001      	adds	r0, #1
 80070d6:	e7e7      	b.n	80070a8 <__kernel_rem_pio2+0x208>
 80070d8:	2602      	movs	r6, #2
 80070da:	e781      	b.n	8006fe0 <__kernel_rem_pio2+0x140>
 80070dc:	aa06      	add	r2, sp, #24
 80070de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80070e2:	b948      	cbnz	r0, 80070f8 <__kernel_rem_pio2+0x258>
 80070e4:	b12a      	cbz	r2, 80070f2 <__kernel_rem_pio2+0x252>
 80070e6:	a906      	add	r1, sp, #24
 80070e8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80070ec:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80070f0:	2201      	movs	r2, #1
 80070f2:	3401      	adds	r4, #1
 80070f4:	4610      	mov	r0, r2
 80070f6:	e779      	b.n	8006fec <__kernel_rem_pio2+0x14c>
 80070f8:	a906      	add	r1, sp, #24
 80070fa:	ebae 0202 	sub.w	r2, lr, r2
 80070fe:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8007102:	4602      	mov	r2, r0
 8007104:	e7f5      	b.n	80070f2 <__kernel_rem_pio2+0x252>
 8007106:	1e7c      	subs	r4, r7, #1
 8007108:	aa06      	add	r2, sp, #24
 800710a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800710e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007112:	a906      	add	r1, sp, #24
 8007114:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8007118:	e772      	b.n	8007000 <__kernel_rem_pio2+0x160>
 800711a:	1e7c      	subs	r4, r7, #1
 800711c:	aa06      	add	r2, sp, #24
 800711e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007122:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8007126:	e7f4      	b.n	8007112 <__kernel_rem_pio2+0x272>
 8007128:	a906      	add	r1, sp, #24
 800712a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800712e:	3801      	subs	r0, #1
 8007130:	430a      	orrs	r2, r1
 8007132:	e7a1      	b.n	8007078 <__kernel_rem_pio2+0x1d8>
 8007134:	3401      	adds	r4, #1
 8007136:	e7a6      	b.n	8007086 <__kernel_rem_pio2+0x1e6>
 8007138:	ecb6 5b02 	vldmia	r6!, {d5}
 800713c:	ed3e 6b02 	vldmdb	lr!, {d6}
 8007140:	3401      	adds	r4, #1
 8007142:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007146:	e7c1      	b.n	80070cc <__kernel_rem_pio2+0x22c>
 8007148:	3c01      	subs	r4, #1
 800714a:	ab06      	add	r3, sp, #24
 800714c:	3d18      	subs	r5, #24
 800714e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f8      	beq.n	8007148 <__kernel_rem_pio2+0x2a8>
 8007156:	4628      	mov	r0, r5
 8007158:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800715c:	f000 f9ec 	bl	8007538 <scalbn>
 8007160:	00e3      	lsls	r3, r4, #3
 8007162:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80071e0 <__kernel_rem_pio2+0x340>
 8007166:	aa6a      	add	r2, sp, #424	; 0x1a8
 8007168:	3308      	adds	r3, #8
 800716a:	18d0      	adds	r0, r2, r3
 800716c:	4622      	mov	r2, r4
 800716e:	2a00      	cmp	r2, #0
 8007170:	da4b      	bge.n	800720a <__kernel_rem_pio2+0x36a>
 8007172:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 8007176:	2200      	movs	r2, #0
 8007178:	4677      	mov	r7, lr
 800717a:	1aa5      	subs	r5, r4, r2
 800717c:	d464      	bmi.n	8007248 <__kernel_rem_pio2+0x3a8>
 800717e:	a86a      	add	r0, sp, #424	; 0x1a8
 8007180:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8007184:	491b      	ldr	r1, [pc, #108]	; (80071f4 <__kernel_rem_pio2+0x354>)
 8007186:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80071d8 <__kernel_rem_pio2+0x338>
 800718a:	2000      	movs	r0, #0
 800718c:	e054      	b.n	8007238 <__kernel_rem_pio2+0x398>
 800718e:	4268      	negs	r0, r5
 8007190:	eeb0 0b48 	vmov.f64	d0, d8
 8007194:	f000 f9d0 	bl	8007538 <scalbn>
 8007198:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80071e8 <__kernel_rem_pio2+0x348>
 800719c:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80071a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a4:	db28      	blt.n	80071f8 <__kernel_rem_pio2+0x358>
 80071a6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80071e0 <__kernel_rem_pio2+0x340>
 80071aa:	ee20 7b07 	vmul.f64	d7, d0, d7
 80071ae:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80071b2:	aa06      	add	r2, sp, #24
 80071b4:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80071b8:	eea5 0b46 	vfms.f64	d0, d5, d6
 80071bc:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80071c0:	1c7c      	adds	r4, r7, #1
 80071c2:	ee10 3a10 	vmov	r3, s0
 80071c6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80071ca:	ee17 3a10 	vmov	r3, s14
 80071ce:	3518      	adds	r5, #24
 80071d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80071d4:	e7bf      	b.n	8007156 <__kernel_rem_pio2+0x2b6>
 80071d6:	bf00      	nop
	...
 80071e4:	3e700000 	.word	0x3e700000
 80071e8:	00000000 	.word	0x00000000
 80071ec:	41700000 	.word	0x41700000
 80071f0:	080079b0 	.word	0x080079b0
 80071f4:	08007970 	.word	0x08007970
 80071f8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80071fc:	aa06      	add	r2, sp, #24
 80071fe:	ee10 3a10 	vmov	r3, s0
 8007202:	463c      	mov	r4, r7
 8007204:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8007208:	e7a5      	b.n	8007156 <__kernel_rem_pio2+0x2b6>
 800720a:	a906      	add	r1, sp, #24
 800720c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8007210:	9101      	str	r1, [sp, #4]
 8007212:	ee07 1a90 	vmov	s15, r1
 8007216:	3a01      	subs	r2, #1
 8007218:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800721c:	ee27 7b00 	vmul.f64	d7, d7, d0
 8007220:	ee20 0b06 	vmul.f64	d0, d0, d6
 8007224:	ed20 7b02 	vstmdb	r0!, {d7}
 8007228:	e7a1      	b.n	800716e <__kernel_rem_pio2+0x2ce>
 800722a:	ecb1 5b02 	vldmia	r1!, {d5}
 800722e:	ecb5 6b02 	vldmia	r5!, {d6}
 8007232:	3001      	adds	r0, #1
 8007234:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007238:	4550      	cmp	r0, sl
 800723a:	dc01      	bgt.n	8007240 <__kernel_rem_pio2+0x3a0>
 800723c:	4290      	cmp	r0, r2
 800723e:	ddf4      	ble.n	800722a <__kernel_rem_pio2+0x38a>
 8007240:	ecae 7b02 	vstmia	lr!, {d7}
 8007244:	3201      	adds	r2, #1
 8007246:	e798      	b.n	800717a <__kernel_rem_pio2+0x2da>
 8007248:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800724a:	2a03      	cmp	r2, #3
 800724c:	d843      	bhi.n	80072d6 <__kernel_rem_pio2+0x436>
 800724e:	e8df f002 	tbb	[pc, r2]
 8007252:	1d37      	.short	0x1d37
 8007254:	021d      	.short	0x021d
 8007256:	aa42      	add	r2, sp, #264	; 0x108
 8007258:	4413      	add	r3, r2
 800725a:	461a      	mov	r2, r3
 800725c:	4620      	mov	r0, r4
 800725e:	2800      	cmp	r0, #0
 8007260:	dc56      	bgt.n	8007310 <__kernel_rem_pio2+0x470>
 8007262:	461a      	mov	r2, r3
 8007264:	4620      	mov	r0, r4
 8007266:	2801      	cmp	r0, #1
 8007268:	dc62      	bgt.n	8007330 <__kernel_rem_pio2+0x490>
 800726a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8007380 <__kernel_rem_pio2+0x4e0>
 800726e:	2c01      	cmp	r4, #1
 8007270:	dc6e      	bgt.n	8007350 <__kernel_rem_pio2+0x4b0>
 8007272:	2e00      	cmp	r6, #0
 8007274:	d172      	bne.n	800735c <__kernel_rem_pio2+0x4bc>
 8007276:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 800727a:	e9cb 2300 	strd	r2, r3, [fp]
 800727e:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 8007282:	e9cb 2302 	strd	r2, r3, [fp, #8]
 8007286:	ed8b 7b04 	vstr	d7, [fp, #16]
 800728a:	e024      	b.n	80072d6 <__kernel_rem_pio2+0x436>
 800728c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007380 <__kernel_rem_pio2+0x4e0>
 8007290:	aa42      	add	r2, sp, #264	; 0x108
 8007292:	4413      	add	r3, r2
 8007294:	4622      	mov	r2, r4
 8007296:	2a00      	cmp	r2, #0
 8007298:	da2b      	bge.n	80072f2 <__kernel_rem_pio2+0x452>
 800729a:	b386      	cbz	r6, 80072fe <__kernel_rem_pio2+0x45e>
 800729c:	eeb1 7b46 	vneg.f64	d7, d6
 80072a0:	ed8b 7b00 	vstr	d7, [fp]
 80072a4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80072a8:	aa44      	add	r2, sp, #272	; 0x110
 80072aa:	2301      	movs	r3, #1
 80072ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80072b0:	429c      	cmp	r4, r3
 80072b2:	da27      	bge.n	8007304 <__kernel_rem_pio2+0x464>
 80072b4:	b10e      	cbz	r6, 80072ba <__kernel_rem_pio2+0x41a>
 80072b6:	eeb1 7b47 	vneg.f64	d7, d7
 80072ba:	ed8b 7b02 	vstr	d7, [fp, #8]
 80072be:	e00a      	b.n	80072d6 <__kernel_rem_pio2+0x436>
 80072c0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007380 <__kernel_rem_pio2+0x4e0>
 80072c4:	aa42      	add	r2, sp, #264	; 0x108
 80072c6:	4413      	add	r3, r2
 80072c8:	2c00      	cmp	r4, #0
 80072ca:	da0c      	bge.n	80072e6 <__kernel_rem_pio2+0x446>
 80072cc:	b10e      	cbz	r6, 80072d2 <__kernel_rem_pio2+0x432>
 80072ce:	eeb1 7b47 	vneg.f64	d7, d7
 80072d2:	ed8b 7b00 	vstr	d7, [fp]
 80072d6:	f009 0007 	and.w	r0, r9, #7
 80072da:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80072de:	ecbd 8b06 	vpop	{d8-d10}
 80072e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e6:	ed33 6b02 	vldmdb	r3!, {d6}
 80072ea:	3c01      	subs	r4, #1
 80072ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80072f0:	e7ea      	b.n	80072c8 <__kernel_rem_pio2+0x428>
 80072f2:	ed33 7b02 	vldmdb	r3!, {d7}
 80072f6:	3a01      	subs	r2, #1
 80072f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80072fc:	e7cb      	b.n	8007296 <__kernel_rem_pio2+0x3f6>
 80072fe:	eeb0 7b46 	vmov.f64	d7, d6
 8007302:	e7cd      	b.n	80072a0 <__kernel_rem_pio2+0x400>
 8007304:	ecb2 6b02 	vldmia	r2!, {d6}
 8007308:	3301      	adds	r3, #1
 800730a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800730e:	e7cf      	b.n	80072b0 <__kernel_rem_pio2+0x410>
 8007310:	ed12 5b02 	vldr	d5, [r2, #-8]
 8007314:	ed12 7b04 	vldr	d7, [r2, #-16]
 8007318:	ee37 6b05 	vadd.f64	d6, d7, d5
 800731c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007320:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007324:	ed22 7b02 	vstmdb	r2!, {d7}
 8007328:	3801      	subs	r0, #1
 800732a:	ed02 6b02 	vstr	d6, [r2, #-8]
 800732e:	e796      	b.n	800725e <__kernel_rem_pio2+0x3be>
 8007330:	ed12 5b02 	vldr	d5, [r2, #-8]
 8007334:	ed12 7b04 	vldr	d7, [r2, #-16]
 8007338:	ee37 6b05 	vadd.f64	d6, d7, d5
 800733c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007340:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007344:	ed22 7b02 	vstmdb	r2!, {d7}
 8007348:	3801      	subs	r0, #1
 800734a:	ed02 6b02 	vstr	d6, [r2, #-8]
 800734e:	e78a      	b.n	8007266 <__kernel_rem_pio2+0x3c6>
 8007350:	ed33 6b02 	vldmdb	r3!, {d6}
 8007354:	3c01      	subs	r4, #1
 8007356:	ee37 7b06 	vadd.f64	d7, d7, d6
 800735a:	e788      	b.n	800726e <__kernel_rem_pio2+0x3ce>
 800735c:	ed97 6b00 	vldr	d6, [r7]
 8007360:	eeb1 7b47 	vneg.f64	d7, d7
 8007364:	eeb1 6b46 	vneg.f64	d6, d6
 8007368:	ed8b 6b00 	vstr	d6, [fp]
 800736c:	ed97 6b02 	vldr	d6, [r7, #8]
 8007370:	eeb1 6b46 	vneg.f64	d6, d6
 8007374:	ed8b 6b02 	vstr	d6, [fp, #8]
 8007378:	e785      	b.n	8007286 <__kernel_rem_pio2+0x3e6>
 800737a:	bf00      	nop
 800737c:	f3af 8000 	nop.w
	...

08007388 <__kernel_sin>:
 8007388:	ee10 3a90 	vmov	r3, s1
 800738c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007390:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007394:	da04      	bge.n	80073a0 <__kernel_sin+0x18>
 8007396:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800739a:	ee17 3a90 	vmov	r3, s15
 800739e:	b35b      	cbz	r3, 80073f8 <__kernel_sin+0x70>
 80073a0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80073a4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80073a8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8007400 <__kernel_sin+0x78>
 80073ac:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007408 <__kernel_sin+0x80>
 80073b0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80073b4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007410 <__kernel_sin+0x88>
 80073b8:	eea6 7b04 	vfma.f64	d7, d6, d4
 80073bc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007418 <__kernel_sin+0x90>
 80073c0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80073c4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007420 <__kernel_sin+0x98>
 80073c8:	eea6 7b04 	vfma.f64	d7, d6, d4
 80073cc:	b930      	cbnz	r0, 80073dc <__kernel_sin+0x54>
 80073ce:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007428 <__kernel_sin+0xa0>
 80073d2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80073d6:	eea5 0b04 	vfma.f64	d0, d5, d4
 80073da:	4770      	bx	lr
 80073dc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80073e0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80073e4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80073e8:	ee96 1b07 	vfnms.f64	d1, d6, d7
 80073ec:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007430 <__kernel_sin+0xa8>
 80073f0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80073f4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	f3af 8000 	nop.w
 8007400:	5acfd57c 	.word	0x5acfd57c
 8007404:	3de5d93a 	.word	0x3de5d93a
 8007408:	8a2b9ceb 	.word	0x8a2b9ceb
 800740c:	be5ae5e6 	.word	0xbe5ae5e6
 8007410:	57b1fe7d 	.word	0x57b1fe7d
 8007414:	3ec71de3 	.word	0x3ec71de3
 8007418:	19c161d5 	.word	0x19c161d5
 800741c:	bf2a01a0 	.word	0xbf2a01a0
 8007420:	1110f8a6 	.word	0x1110f8a6
 8007424:	3f811111 	.word	0x3f811111
 8007428:	55555549 	.word	0x55555549
 800742c:	bfc55555 	.word	0xbfc55555
 8007430:	55555549 	.word	0x55555549
 8007434:	3fc55555 	.word	0x3fc55555

08007438 <fabs>:
 8007438:	ec53 2b10 	vmov	r2, r3, d0
 800743c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007440:	ec43 2b10 	vmov	d0, r2, r3
 8007444:	4770      	bx	lr
	...

08007448 <floor>:
 8007448:	ee10 1a90 	vmov	r1, s1
 800744c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007450:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8007454:	2b13      	cmp	r3, #19
 8007456:	b530      	push	{r4, r5, lr}
 8007458:	ee10 0a10 	vmov	r0, s0
 800745c:	ee10 5a10 	vmov	r5, s0
 8007460:	dc33      	bgt.n	80074ca <floor+0x82>
 8007462:	2b00      	cmp	r3, #0
 8007464:	da17      	bge.n	8007496 <floor+0x4e>
 8007466:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007528 <floor+0xe0>
 800746a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800746e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007476:	dd09      	ble.n	800748c <floor+0x44>
 8007478:	2900      	cmp	r1, #0
 800747a:	da50      	bge.n	800751e <floor+0xd6>
 800747c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007480:	432b      	orrs	r3, r5
 8007482:	4b2b      	ldr	r3, [pc, #172]	; (8007530 <floor+0xe8>)
 8007484:	f04f 0000 	mov.w	r0, #0
 8007488:	bf18      	it	ne
 800748a:	4619      	movne	r1, r3
 800748c:	460b      	mov	r3, r1
 800748e:	4602      	mov	r2, r0
 8007490:	ec43 2b10 	vmov	d0, r2, r3
 8007494:	bd30      	pop	{r4, r5, pc}
 8007496:	4a27      	ldr	r2, [pc, #156]	; (8007534 <floor+0xec>)
 8007498:	411a      	asrs	r2, r3
 800749a:	ea01 0402 	and.w	r4, r1, r2
 800749e:	432c      	orrs	r4, r5
 80074a0:	d0f8      	beq.n	8007494 <floor+0x4c>
 80074a2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007528 <floor+0xe0>
 80074a6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80074aa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80074ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b2:	ddeb      	ble.n	800748c <floor+0x44>
 80074b4:	2900      	cmp	r1, #0
 80074b6:	bfbe      	ittt	lt
 80074b8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80074bc:	fa40 f303 	asrlt.w	r3, r0, r3
 80074c0:	18c9      	addlt	r1, r1, r3
 80074c2:	ea21 0102 	bic.w	r1, r1, r2
 80074c6:	2000      	movs	r0, #0
 80074c8:	e7e0      	b.n	800748c <floor+0x44>
 80074ca:	2b33      	cmp	r3, #51	; 0x33
 80074cc:	dd05      	ble.n	80074da <floor+0x92>
 80074ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d2:	d1df      	bne.n	8007494 <floor+0x4c>
 80074d4:	ee30 0b00 	vadd.f64	d0, d0, d0
 80074d8:	bd30      	pop	{r4, r5, pc}
 80074da:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80074de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074e2:	40e2      	lsrs	r2, r4
 80074e4:	4215      	tst	r5, r2
 80074e6:	d0d5      	beq.n	8007494 <floor+0x4c>
 80074e8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007528 <floor+0xe0>
 80074ec:	ee30 0b07 	vadd.f64	d0, d0, d7
 80074f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80074f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f8:	ddc8      	ble.n	800748c <floor+0x44>
 80074fa:	2900      	cmp	r1, #0
 80074fc:	da02      	bge.n	8007504 <floor+0xbc>
 80074fe:	2b14      	cmp	r3, #20
 8007500:	d103      	bne.n	800750a <floor+0xc2>
 8007502:	3101      	adds	r1, #1
 8007504:	ea20 0002 	bic.w	r0, r0, r2
 8007508:	e7c0      	b.n	800748c <floor+0x44>
 800750a:	2401      	movs	r4, #1
 800750c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007510:	fa04 f303 	lsl.w	r3, r4, r3
 8007514:	4418      	add	r0, r3
 8007516:	4285      	cmp	r5, r0
 8007518:	bf88      	it	hi
 800751a:	1909      	addhi	r1, r1, r4
 800751c:	e7f2      	b.n	8007504 <floor+0xbc>
 800751e:	2000      	movs	r0, #0
 8007520:	4601      	mov	r1, r0
 8007522:	e7b3      	b.n	800748c <floor+0x44>
 8007524:	f3af 8000 	nop.w
 8007528:	8800759c 	.word	0x8800759c
 800752c:	7e37e43c 	.word	0x7e37e43c
 8007530:	bff00000 	.word	0xbff00000
 8007534:	000fffff 	.word	0x000fffff

08007538 <scalbn>:
 8007538:	b500      	push	{lr}
 800753a:	ed2d 8b02 	vpush	{d8}
 800753e:	b083      	sub	sp, #12
 8007540:	ed8d 0b00 	vstr	d0, [sp]
 8007544:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8007548:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800754c:	b9a2      	cbnz	r2, 8007578 <scalbn+0x40>
 800754e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007552:	430b      	orrs	r3, r1
 8007554:	d03a      	beq.n	80075cc <scalbn+0x94>
 8007556:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007610 <scalbn+0xd8>
 800755a:	4a35      	ldr	r2, [pc, #212]	; (8007630 <scalbn+0xf8>)
 800755c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007560:	4290      	cmp	r0, r2
 8007562:	ed8d 7b00 	vstr	d7, [sp]
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	da11      	bge.n	800758e <scalbn+0x56>
 800756a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8007618 <scalbn+0xe0>
 800756e:	ed9d 6b00 	vldr	d6, [sp]
 8007572:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007576:	e007      	b.n	8007588 <scalbn+0x50>
 8007578:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800757c:	428a      	cmp	r2, r1
 800757e:	d109      	bne.n	8007594 <scalbn+0x5c>
 8007580:	ed9d 7b00 	vldr	d7, [sp]
 8007584:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007588:	ed8d 7b00 	vstr	d7, [sp]
 800758c:	e01e      	b.n	80075cc <scalbn+0x94>
 800758e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007592:	3a36      	subs	r2, #54	; 0x36
 8007594:	4402      	add	r2, r0
 8007596:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800759a:	428a      	cmp	r2, r1
 800759c:	dd0a      	ble.n	80075b4 <scalbn+0x7c>
 800759e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8007620 <scalbn+0xe8>
 80075a2:	eeb0 0b48 	vmov.f64	d0, d8
 80075a6:	ed9d 1b00 	vldr	d1, [sp]
 80075aa:	f000 f843 	bl	8007634 <copysign>
 80075ae:	ee20 7b08 	vmul.f64	d7, d0, d8
 80075b2:	e7e9      	b.n	8007588 <scalbn+0x50>
 80075b4:	2a00      	cmp	r2, #0
 80075b6:	dd10      	ble.n	80075da <scalbn+0xa2>
 80075b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075c4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80075c8:	e9cd 0100 	strd	r0, r1, [sp]
 80075cc:	ed9d 0b00 	vldr	d0, [sp]
 80075d0:	b003      	add	sp, #12
 80075d2:	ecbd 8b02 	vpop	{d8}
 80075d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80075da:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075de:	da06      	bge.n	80075ee <scalbn+0xb6>
 80075e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80075e4:	4298      	cmp	r0, r3
 80075e6:	dcda      	bgt.n	800759e <scalbn+0x66>
 80075e8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8007618 <scalbn+0xe0>
 80075ec:	e7d9      	b.n	80075a2 <scalbn+0x6a>
 80075ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075f6:	3236      	adds	r2, #54	; 0x36
 80075f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075fc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007600:	ec41 0b17 	vmov	d7, r0, r1
 8007604:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8007628 <scalbn+0xf0>
 8007608:	e7b3      	b.n	8007572 <scalbn+0x3a>
 800760a:	bf00      	nop
 800760c:	f3af 8000 	nop.w
 8007610:	00000000 	.word	0x00000000
 8007614:	43500000 	.word	0x43500000
 8007618:	c2f8f359 	.word	0xc2f8f359
 800761c:	01a56e1f 	.word	0x01a56e1f
 8007620:	8800759c 	.word	0x8800759c
 8007624:	7e37e43c 	.word	0x7e37e43c
 8007628:	00000000 	.word	0x00000000
 800762c:	3c900000 	.word	0x3c900000
 8007630:	ffff3cb0 	.word	0xffff3cb0

08007634 <copysign>:
 8007634:	ec53 2b10 	vmov	r2, r3, d0
 8007638:	ee11 0a90 	vmov	r0, s3
 800763c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007640:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007644:	ea41 0300 	orr.w	r3, r1, r0
 8007648:	ec43 2b10 	vmov	d0, r2, r3
 800764c:	4770      	bx	lr
	...

08007650 <_init>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	bf00      	nop
 8007654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007656:	bc08      	pop	{r3}
 8007658:	469e      	mov	lr, r3
 800765a:	4770      	bx	lr

0800765c <_fini>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	bf00      	nop
 8007660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007662:	bc08      	pop	{r3}
 8007664:	469e      	mov	lr, r3
 8007666:	4770      	bx	lr
