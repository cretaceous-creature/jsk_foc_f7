
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022d8  08018d38  08018d38  00028d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000178  0801b010  0801b010  0002b010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000250  0801b188  0801b188  0002b188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000000c  0801b3d8  0801b3d8  0002b3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0801b3e4  0801b3e4  0002b3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000006a8  20000000  0801b3e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00007804  200006a8  0801ba90  000306a8  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20007eac  0801ba90  00037eac  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000306a8  2**0
                  CONTENTS, READONLY
 11 .debug_line   0001339e  00000000  00000000  000306d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0005ba13  00000000  00000000  00043a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000890b  00000000  00000000  0009f487  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002220  00000000  00000000  000a7d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002500  00000000  00000000  000a9fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00019667  00000000  00000000  000ac4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00016450  00000000  00000000  000c5b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000fa  00000000  00000000  000dbf6f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008de8  00000000  00000000  000dc06c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006a8 	.word	0x200006a8
 800021c:	00000000 	.word	0x00000000
 8000220:	08018d20 	.word	0x08018d20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006ac 	.word	0x200006ac
 800023c:	08018d20 	.word	0x08018d20

08000240 <d_make_comp>:
 8000240:	b470      	push	{r4, r5, r6}
 8000242:	1e4c      	subs	r4, r1, #1
 8000244:	2c4c      	cmp	r4, #76	; 0x4c
 8000246:	d82d      	bhi.n	80002a4 <d_make_comp+0x64>
 8000248:	e8df f004 	tbb	[pc, r4]
 800024c:	3c3c3c3c 	.word	0x3c3c3c3c
 8000250:	2c2c2c2c 	.word	0x2c2c2c2c
 8000254:	273c2727 	.word	0x273c2727
 8000258:	27272727 	.word	0x27272727
 800025c:	27272727 	.word	0x27272727
 8000260:	2c272727 	.word	0x2c272727
 8000264:	28282828 	.word	0x28282828
 8000268:	28282828 	.word	0x28282828
 800026c:	2727273c 	.word	0x2727273c
 8000270:	272c2727 	.word	0x272c2727
 8000274:	2c3c3e28 	.word	0x2c3c3e28
 8000278:	3e28283c 	.word	0x3e28283c
 800027c:	27272c2c 	.word	0x27272c2c
 8000280:	3c3c3c27 	.word	0x3c3c3c27
 8000284:	3c273c3c 	.word	0x3c273c3c
 8000288:	2c3c273c 	.word	0x2c3c273c
 800028c:	2727272c 	.word	0x2727272c
 8000290:	272c2c2c 	.word	0x272c2c2c
 8000294:	283c2727 	.word	0x283c2727
 8000298:	3c          	.byte	0x3c
 8000299:	00          	.byte	0x00
 800029a:	b11a      	cbz	r2, 80002a4 <d_make_comp+0x64>
 800029c:	6944      	ldr	r4, [r0, #20]
 800029e:	6985      	ldr	r5, [r0, #24]
 80002a0:	42ac      	cmp	r4, r5
 80002a2:	db02      	blt.n	80002aa <d_make_comp+0x6a>
 80002a4:	2000      	movs	r0, #0
 80002a6:	bc70      	pop	{r4, r5, r6}
 80002a8:	4770      	bx	lr
 80002aa:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80002ae:	6906      	ldr	r6, [r0, #16]
 80002b0:	00ad      	lsls	r5, r5, #2
 80002b2:	3401      	adds	r4, #1
 80002b4:	6144      	str	r4, [r0, #20]
 80002b6:	1970      	adds	r0, r6, r5
 80002b8:	d0f5      	beq.n	80002a6 <d_make_comp+0x66>
 80002ba:	5571      	strb	r1, [r6, r5]
 80002bc:	6042      	str	r2, [r0, #4]
 80002be:	6083      	str	r3, [r0, #8]
 80002c0:	bc70      	pop	{r4, r5, r6}
 80002c2:	4770      	bx	lr
 80002c4:	2a00      	cmp	r2, #0
 80002c6:	d0ed      	beq.n	80002a4 <d_make_comp+0x64>
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0eb      	beq.n	80002a4 <d_make_comp+0x64>
 80002cc:	6944      	ldr	r4, [r0, #20]
 80002ce:	6985      	ldr	r5, [r0, #24]
 80002d0:	42ac      	cmp	r4, r5
 80002d2:	dae7      	bge.n	80002a4 <d_make_comp+0x64>
 80002d4:	e7e9      	b.n	80002aa <d_make_comp+0x6a>
 80002d6:	bf00      	nop

080002d8 <d_cv_qualifiers>:
 80002d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002dc:	68c3      	ldr	r3, [r0, #12]
 80002de:	f1b2 0a00 	subs.w	sl, r2, #0
 80002e2:	4604      	mov	r4, r0
 80002e4:	460e      	mov	r6, r1
 80002e6:	781a      	ldrb	r2, [r3, #0]
 80002e8:	bf15      	itete	ne
 80002ea:	f04f 091e 	movne.w	r9, #30
 80002ee:	f04f 091b 	moveq.w	r9, #27
 80002f2:	f04f 081d 	movne.w	r8, #29
 80002f6:	f04f 081a 	moveq.w	r8, #26
 80002fa:	bf14      	ite	ne
 80002fc:	271c      	movne	r7, #28
 80002fe:	2719      	moveq	r7, #25
 8000300:	460d      	mov	r5, r1
 8000302:	e018      	b.n	8000336 <d_cv_qualifiers+0x5e>
 8000304:	2a56      	cmp	r2, #86	; 0x56
 8000306:	d01f      	beq.n	8000348 <d_cv_qualifiers+0x70>
 8000308:	2a4b      	cmp	r2, #75	; 0x4b
 800030a:	d024      	beq.n	8000356 <d_cv_qualifiers+0x7e>
 800030c:	2a44      	cmp	r2, #68	; 0x44
 800030e:	d12d      	bne.n	800036c <d_cv_qualifiers+0x94>
 8000310:	785a      	ldrb	r2, [r3, #1]
 8000312:	2a78      	cmp	r2, #120	; 0x78
 8000314:	d127      	bne.n	8000366 <d_cv_qualifiers+0x8e>
 8000316:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000318:	3302      	adds	r3, #2
 800031a:	3211      	adds	r2, #17
 800031c:	60e3      	str	r3, [r4, #12]
 800031e:	6322      	str	r2, [r4, #48]	; 0x30
 8000320:	214c      	movs	r1, #76	; 0x4c
 8000322:	2300      	movs	r3, #0
 8000324:	461a      	mov	r2, r3
 8000326:	4620      	mov	r0, r4
 8000328:	f7ff ff8a 	bl	8000240 <d_make_comp>
 800032c:	6028      	str	r0, [r5, #0]
 800032e:	b1c8      	cbz	r0, 8000364 <d_cv_qualifiers+0x8c>
 8000330:	68e3      	ldr	r3, [r4, #12]
 8000332:	781a      	ldrb	r2, [r3, #0]
 8000334:	1d05      	adds	r5, r0, #4
 8000336:	2a72      	cmp	r2, #114	; 0x72
 8000338:	d1e4      	bne.n	8000304 <d_cv_qualifiers+0x2c>
 800033a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800033c:	3301      	adds	r3, #1
 800033e:	3209      	adds	r2, #9
 8000340:	60e3      	str	r3, [r4, #12]
 8000342:	6322      	str	r2, [r4, #48]	; 0x30
 8000344:	4639      	mov	r1, r7
 8000346:	e7ec      	b.n	8000322 <d_cv_qualifiers+0x4a>
 8000348:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800034a:	3301      	adds	r3, #1
 800034c:	3209      	adds	r2, #9
 800034e:	60e3      	str	r3, [r4, #12]
 8000350:	6322      	str	r2, [r4, #48]	; 0x30
 8000352:	4641      	mov	r1, r8
 8000354:	e7e5      	b.n	8000322 <d_cv_qualifiers+0x4a>
 8000356:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000358:	3301      	adds	r3, #1
 800035a:	3206      	adds	r2, #6
 800035c:	60e3      	str	r3, [r4, #12]
 800035e:	6322      	str	r2, [r4, #48]	; 0x30
 8000360:	4649      	mov	r1, r9
 8000362:	e7de      	b.n	8000322 <d_cv_qualifiers+0x4a>
 8000364:	4605      	mov	r5, r0
 8000366:	4628      	mov	r0, r5
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	f1ba 0f00 	cmp.w	sl, #0
 8000370:	d1f9      	bne.n	8000366 <d_cv_qualifiers+0x8e>
 8000372:	2a46      	cmp	r2, #70	; 0x46
 8000374:	d1f7      	bne.n	8000366 <d_cv_qualifiers+0x8e>
 8000376:	42b5      	cmp	r5, r6
 8000378:	d0f5      	beq.n	8000366 <d_cv_qualifiers+0x8e>
 800037a:	201d      	movs	r0, #29
 800037c:	211e      	movs	r1, #30
 800037e:	221c      	movs	r2, #28
 8000380:	e007      	b.n	8000392 <d_cv_qualifiers+0xba>
 8000382:	2b1b      	cmp	r3, #27
 8000384:	d00b      	beq.n	800039e <d_cv_qualifiers+0xc6>
 8000386:	2b19      	cmp	r3, #25
 8000388:	d100      	bne.n	800038c <d_cv_qualifiers+0xb4>
 800038a:	7032      	strb	r2, [r6, #0]
 800038c:	3604      	adds	r6, #4
 800038e:	42b5      	cmp	r5, r6
 8000390:	d0e9      	beq.n	8000366 <d_cv_qualifiers+0x8e>
 8000392:	6836      	ldr	r6, [r6, #0]
 8000394:	7833      	ldrb	r3, [r6, #0]
 8000396:	2b1a      	cmp	r3, #26
 8000398:	d1f3      	bne.n	8000382 <d_cv_qualifiers+0xaa>
 800039a:	7030      	strb	r0, [r6, #0]
 800039c:	e7f6      	b.n	800038c <d_cv_qualifiers+0xb4>
 800039e:	7031      	strb	r1, [r6, #0]
 80003a0:	e7f4      	b.n	800038c <d_cv_qualifiers+0xb4>
 80003a2:	bf00      	nop

080003a4 <d_ref_qualifier>:
 80003a4:	b410      	push	{r4}
 80003a6:	68c3      	ldr	r3, [r0, #12]
 80003a8:	781c      	ldrb	r4, [r3, #0]
 80003aa:	2c52      	cmp	r4, #82	; 0x52
 80003ac:	460a      	mov	r2, r1
 80003ae:	d00f      	beq.n	80003d0 <d_ref_qualifier+0x2c>
 80003b0:	2c4f      	cmp	r4, #79	; 0x4f
 80003b2:	d003      	beq.n	80003bc <d_ref_qualifier+0x18>
 80003b4:	4608      	mov	r0, r1
 80003b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80003be:	3103      	adds	r1, #3
 80003c0:	6301      	str	r1, [r0, #48]	; 0x30
 80003c2:	2120      	movs	r1, #32
 80003c4:	3301      	adds	r3, #1
 80003c6:	60c3      	str	r3, [r0, #12]
 80003c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003cc:	2300      	movs	r3, #0
 80003ce:	e737      	b.n	8000240 <d_make_comp>
 80003d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80003d2:	3102      	adds	r1, #2
 80003d4:	6301      	str	r1, [r0, #48]	; 0x30
 80003d6:	211f      	movs	r1, #31
 80003d8:	e7f4      	b.n	80003c4 <d_ref_qualifier+0x20>
 80003da:	bf00      	nop

080003dc <d_count_templates_scopes>:
 80003dc:	2a00      	cmp	r2, #0
 80003de:	d04d      	beq.n	800047c <d_count_templates_scopes+0xa0>
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	4605      	mov	r5, r0
 80003e4:	460e      	mov	r6, r1
 80003e6:	4614      	mov	r4, r2
 80003e8:	7823      	ldrb	r3, [r4, #0]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	2b4c      	cmp	r3, #76	; 0x4c
 80003ee:	d82b      	bhi.n	8000448 <d_count_templates_scopes+0x6c>
 80003f0:	e8df f003 	tbb	[pc, r3]
 80003f4:	3f363636 	.word	0x3f363636
 80003f8:	27272a2a 	.word	0x27272a2a
 80003fc:	36363636 	.word	0x36363636
 8000400:	36363636 	.word	0x36363636
 8000404:	36363636 	.word	0x36363636
 8000408:	2a363636 	.word	0x2a363636
 800040c:	36363636 	.word	0x36363636
 8000410:	36363636 	.word	0x36363636
 8000414:	2f2f3636 	.word	0x2f2f3636
 8000418:	362a3636 	.word	0x362a3636
 800041c:	2b363636 	.word	0x2b363636
 8000420:	36363636 	.word	0x36363636
 8000424:	3636272a 	.word	0x3636272a
 8000428:	36363636 	.word	0x36363636
 800042c:	36363636 	.word	0x36363636
 8000430:	2a363636 	.word	0x2a363636
 8000434:	2b2b362a 	.word	0x2b2b362a
 8000438:	362a2b2b 	.word	0x362a2b2b
 800043c:	36363636 	.word	0x36363636
 8000440:	36          	.byte	0x36
 8000441:	00          	.byte	0x00
 8000442:	68a4      	ldr	r4, [r4, #8]
 8000444:	2c00      	cmp	r4, #0
 8000446:	d1cf      	bne.n	80003e8 <d_count_templates_scopes+0xc>
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	6864      	ldr	r4, [r4, #4]
 800044c:	2c00      	cmp	r4, #0
 800044e:	d1cb      	bne.n	80003e8 <d_count_templates_scopes+0xc>
 8000450:	e7fa      	b.n	8000448 <d_count_templates_scopes+0x6c>
 8000452:	6862      	ldr	r2, [r4, #4]
 8000454:	7813      	ldrb	r3, [r2, #0]
 8000456:	2b05      	cmp	r3, #5
 8000458:	d103      	bne.n	8000462 <d_count_templates_scopes+0x86>
 800045a:	6833      	ldr	r3, [r6, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	6033      	str	r3, [r6, #0]
 8000460:	6862      	ldr	r2, [r4, #4]
 8000462:	4631      	mov	r1, r6
 8000464:	4628      	mov	r0, r5
 8000466:	f7ff ffb9 	bl	80003dc <d_count_templates_scopes>
 800046a:	68a4      	ldr	r4, [r4, #8]
 800046c:	2c00      	cmp	r4, #0
 800046e:	d1bb      	bne.n	80003e8 <d_count_templates_scopes+0xc>
 8000470:	e7ea      	b.n	8000448 <d_count_templates_scopes+0x6c>
 8000472:	682b      	ldr	r3, [r5, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	602b      	str	r3, [r5, #0]
 8000478:	6862      	ldr	r2, [r4, #4]
 800047a:	e7f2      	b.n	8000462 <d_count_templates_scopes+0x86>
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <d_append_buffer>:
 8000480:	b37a      	cbz	r2, 80004e2 <d_append_buffer+0x62>
 8000482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000486:	460d      	mov	r5, r1
 8000488:	4604      	mov	r4, r0
 800048a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800048e:	18af      	adds	r7, r5, r2
 8000490:	f04f 0800 	mov.w	r8, #0
 8000494:	e009      	b.n	80004aa <d_append_buffer+0x2a>
 8000496:	460b      	mov	r3, r1
 8000498:	42bd      	cmp	r5, r7
 800049a:	f101 0101 	add.w	r1, r1, #1
 800049e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80004a2:	54e6      	strb	r6, [r4, r3]
 80004a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80004a8:	d019      	beq.n	80004de <d_append_buffer+0x5e>
 80004aa:	29ff      	cmp	r1, #255	; 0xff
 80004ac:	f815 6b01 	ldrb.w	r6, [r5], #1
 80004b0:	d1f1      	bne.n	8000496 <d_append_buffer+0x16>
 80004b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80004b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80004ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80004be:	4620      	mov	r0, r4
 80004c0:	4798      	blx	r3
 80004c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80004c6:	3301      	adds	r3, #1
 80004c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80004cc:	2300      	movs	r3, #0
 80004ce:	2101      	movs	r1, #1
 80004d0:	42bd      	cmp	r5, r7
 80004d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80004d6:	54e6      	strb	r6, [r4, r3]
 80004d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80004dc:	d1e5      	bne.n	80004aa <d_append_buffer+0x2a>
 80004de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80004e2:	4770      	bx	lr

080004e4 <d_number.isra.0>:
 80004e4:	b470      	push	{r4, r5, r6}
 80004e6:	6802      	ldr	r2, [r0, #0]
 80004e8:	7811      	ldrb	r1, [r2, #0]
 80004ea:	296e      	cmp	r1, #110	; 0x6e
 80004ec:	d018      	beq.n	8000520 <d_number.isra.0+0x3c>
 80004ee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80004f2:	2b09      	cmp	r3, #9
 80004f4:	d81e      	bhi.n	8000534 <d_number.isra.0+0x50>
 80004f6:	2600      	movs	r6, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	3201      	adds	r2, #1
 80004fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000500:	6002      	str	r2, [r0, #0]
 8000502:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000506:	7811      	ldrb	r1, [r2, #0]
 8000508:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 800050c:	2d09      	cmp	r5, #9
 800050e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000512:	d9f2      	bls.n	80004fa <d_number.isra.0+0x16>
 8000514:	b10e      	cbz	r6, 800051a <d_number.isra.0+0x36>
 8000516:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 800051a:	4618      	mov	r0, r3
 800051c:	bc70      	pop	{r4, r5, r6}
 800051e:	4770      	bx	lr
 8000520:	1c53      	adds	r3, r2, #1
 8000522:	6003      	str	r3, [r0, #0]
 8000524:	7851      	ldrb	r1, [r2, #1]
 8000526:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800052a:	2a09      	cmp	r2, #9
 800052c:	d802      	bhi.n	8000534 <d_number.isra.0+0x50>
 800052e:	461a      	mov	r2, r3
 8000530:	2601      	movs	r6, #1
 8000532:	e7e1      	b.n	80004f8 <d_number.isra.0+0x14>
 8000534:	2300      	movs	r3, #0
 8000536:	e7f0      	b.n	800051a <d_number.isra.0+0x36>

08000538 <d_number_component>:
 8000538:	6943      	ldr	r3, [r0, #20]
 800053a:	6982      	ldr	r2, [r0, #24]
 800053c:	4293      	cmp	r3, r2
 800053e:	b510      	push	{r4, lr}
 8000540:	da0f      	bge.n	8000562 <d_number_component+0x2a>
 8000542:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000546:	6901      	ldr	r1, [r0, #16]
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	3301      	adds	r3, #1
 800054c:	188c      	adds	r4, r1, r2
 800054e:	6143      	str	r3, [r0, #20]
 8000550:	d005      	beq.n	800055e <d_number_component+0x26>
 8000552:	2341      	movs	r3, #65	; 0x41
 8000554:	300c      	adds	r0, #12
 8000556:	548b      	strb	r3, [r1, r2]
 8000558:	f7ff ffc4 	bl	80004e4 <d_number.isra.0>
 800055c:	6060      	str	r0, [r4, #4]
 800055e:	4620      	mov	r0, r4
 8000560:	bd10      	pop	{r4, pc}
 8000562:	2400      	movs	r4, #0
 8000564:	4620      	mov	r0, r4
 8000566:	bd10      	pop	{r4, pc}

08000568 <d_compact_number>:
 8000568:	b510      	push	{r4, lr}
 800056a:	68c3      	ldr	r3, [r0, #12]
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	2a5f      	cmp	r2, #95	; 0x5f
 8000570:	4604      	mov	r4, r0
 8000572:	d00d      	beq.n	8000590 <d_compact_number+0x28>
 8000574:	2a6e      	cmp	r2, #110	; 0x6e
 8000576:	d00f      	beq.n	8000598 <d_compact_number+0x30>
 8000578:	300c      	adds	r0, #12
 800057a:	f7ff ffb3 	bl	80004e4 <d_number.isra.0>
 800057e:	3001      	adds	r0, #1
 8000580:	d40a      	bmi.n	8000598 <d_compact_number+0x30>
 8000582:	68e3      	ldr	r3, [r4, #12]
 8000584:	781a      	ldrb	r2, [r3, #0]
 8000586:	2a5f      	cmp	r2, #95	; 0x5f
 8000588:	d106      	bne.n	8000598 <d_compact_number+0x30>
 800058a:	3301      	adds	r3, #1
 800058c:	60e3      	str	r3, [r4, #12]
 800058e:	bd10      	pop	{r4, pc}
 8000590:	3301      	adds	r3, #1
 8000592:	2000      	movs	r0, #0
 8000594:	60e3      	str	r3, [r4, #12]
 8000596:	bd10      	pop	{r4, pc}
 8000598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800059c:	bd10      	pop	{r4, pc}
 800059e:	bf00      	nop

080005a0 <d_template_param>:
 80005a0:	b538      	push	{r3, r4, r5, lr}
 80005a2:	68c3      	ldr	r3, [r0, #12]
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	2a54      	cmp	r2, #84	; 0x54
 80005a8:	d001      	beq.n	80005ae <d_template_param+0xe>
 80005aa:	2000      	movs	r0, #0
 80005ac:	bd38      	pop	{r3, r4, r5, pc}
 80005ae:	3301      	adds	r3, #1
 80005b0:	60c3      	str	r3, [r0, #12]
 80005b2:	4604      	mov	r4, r0
 80005b4:	f7ff ffd8 	bl	8000568 <d_compact_number>
 80005b8:	1e05      	subs	r5, r0, #0
 80005ba:	dbf6      	blt.n	80005aa <d_template_param+0xa>
 80005bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005be:	6963      	ldr	r3, [r4, #20]
 80005c0:	69a1      	ldr	r1, [r4, #24]
 80005c2:	3201      	adds	r2, #1
 80005c4:	428b      	cmp	r3, r1
 80005c6:	62a2      	str	r2, [r4, #40]	; 0x28
 80005c8:	daef      	bge.n	80005aa <d_template_param+0xa>
 80005ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80005ce:	6921      	ldr	r1, [r4, #16]
 80005d0:	0092      	lsls	r2, r2, #2
 80005d2:	3301      	adds	r3, #1
 80005d4:	1888      	adds	r0, r1, r2
 80005d6:	6163      	str	r3, [r4, #20]
 80005d8:	d002      	beq.n	80005e0 <d_template_param+0x40>
 80005da:	2305      	movs	r3, #5
 80005dc:	548b      	strb	r3, [r1, r2]
 80005de:	6045      	str	r5, [r0, #4]
 80005e0:	bd38      	pop	{r3, r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <d_source_name>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	4604      	mov	r4, r0
 80005e8:	300c      	adds	r0, #12
 80005ea:	f7ff ff7b 	bl	80004e4 <d_number.isra.0>
 80005ee:	1e06      	subs	r6, r0, #0
 80005f0:	dd4d      	ble.n	800068e <d_source_name+0xaa>
 80005f2:	68e5      	ldr	r5, [r4, #12]
 80005f4:	6863      	ldr	r3, [r4, #4]
 80005f6:	1b5b      	subs	r3, r3, r5
 80005f8:	429e      	cmp	r6, r3
 80005fa:	dc2b      	bgt.n	8000654 <d_source_name+0x70>
 80005fc:	68a2      	ldr	r2, [r4, #8]
 80005fe:	19ab      	adds	r3, r5, r6
 8000600:	0752      	lsls	r2, r2, #29
 8000602:	60e3      	str	r3, [r4, #12]
 8000604:	d504      	bpl.n	8000610 <d_source_name+0x2c>
 8000606:	5daa      	ldrb	r2, [r5, r6]
 8000608:	2a24      	cmp	r2, #36	; 0x24
 800060a:	bf04      	itt	eq
 800060c:	3301      	addeq	r3, #1
 800060e:	60e3      	streq	r3, [r4, #12]
 8000610:	2e09      	cmp	r6, #9
 8000612:	dd0c      	ble.n	800062e <d_source_name+0x4a>
 8000614:	2208      	movs	r2, #8
 8000616:	491f      	ldr	r1, [pc, #124]	; (8000694 <d_source_name+0xb0>)
 8000618:	4628      	mov	r0, r5
 800061a:	f015 f9eb 	bl	80159f4 <memcmp>
 800061e:	b930      	cbnz	r0, 800062e <d_source_name+0x4a>
 8000620:	7a2b      	ldrb	r3, [r5, #8]
 8000622:	2b2e      	cmp	r3, #46	; 0x2e
 8000624:	d019      	beq.n	800065a <d_source_name+0x76>
 8000626:	2b5f      	cmp	r3, #95	; 0x5f
 8000628:	d017      	beq.n	800065a <d_source_name+0x76>
 800062a:	2b24      	cmp	r3, #36	; 0x24
 800062c:	d015      	beq.n	800065a <d_source_name+0x76>
 800062e:	6963      	ldr	r3, [r4, #20]
 8000630:	69a2      	ldr	r2, [r4, #24]
 8000632:	4293      	cmp	r3, r2
 8000634:	da0e      	bge.n	8000654 <d_source_name+0x70>
 8000636:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800063a:	6921      	ldr	r1, [r4, #16]
 800063c:	0092      	lsls	r2, r2, #2
 800063e:	3301      	adds	r3, #1
 8000640:	1888      	adds	r0, r1, r2
 8000642:	6163      	str	r3, [r4, #20]
 8000644:	d006      	beq.n	8000654 <d_source_name+0x70>
 8000646:	b12d      	cbz	r5, 8000654 <d_source_name+0x70>
 8000648:	2300      	movs	r3, #0
 800064a:	548b      	strb	r3, [r1, r2]
 800064c:	6045      	str	r5, [r0, #4]
 800064e:	6086      	str	r6, [r0, #8]
 8000650:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	2000      	movs	r0, #0
 8000656:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000658:	bd70      	pop	{r4, r5, r6, pc}
 800065a:	7a6b      	ldrb	r3, [r5, #9]
 800065c:	2b4e      	cmp	r3, #78	; 0x4e
 800065e:	d1e6      	bne.n	800062e <d_source_name+0x4a>
 8000660:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000662:	6962      	ldr	r2, [r4, #20]
 8000664:	69a1      	ldr	r1, [r4, #24]
 8000666:	3316      	adds	r3, #22
 8000668:	1b9e      	subs	r6, r3, r6
 800066a:	428a      	cmp	r2, r1
 800066c:	6326      	str	r6, [r4, #48]	; 0x30
 800066e:	daf1      	bge.n	8000654 <d_source_name+0x70>
 8000670:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000674:	6921      	ldr	r1, [r4, #16]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	3201      	adds	r2, #1
 800067a:	18c8      	adds	r0, r1, r3
 800067c:	6162      	str	r2, [r4, #20]
 800067e:	d0ea      	beq.n	8000656 <d_source_name+0x72>
 8000680:	2500      	movs	r5, #0
 8000682:	54cd      	strb	r5, [r1, r3]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <d_source_name+0xb4>)
 8000686:	6042      	str	r2, [r0, #4]
 8000688:	2315      	movs	r3, #21
 800068a:	6083      	str	r3, [r0, #8]
 800068c:	e7e3      	b.n	8000656 <d_source_name+0x72>
 800068e:	2000      	movs	r0, #0
 8000690:	bd70      	pop	{r4, r5, r6, pc}
 8000692:	bf00      	nop
 8000694:	08019f1c 	.word	0x08019f1c
 8000698:	08019f28 	.word	0x08019f28

0800069c <d_abi_tags>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	68c3      	ldr	r3, [r0, #12]
 80006a0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	2a42      	cmp	r2, #66	; 0x42
 80006a6:	4604      	mov	r4, r0
 80006a8:	460d      	mov	r5, r1
 80006aa:	d10f      	bne.n	80006cc <d_abi_tags+0x30>
 80006ac:	3301      	adds	r3, #1
 80006ae:	60e3      	str	r3, [r4, #12]
 80006b0:	4620      	mov	r0, r4
 80006b2:	f7ff ff97 	bl	80005e4 <d_source_name>
 80006b6:	462a      	mov	r2, r5
 80006b8:	4603      	mov	r3, r0
 80006ba:	214b      	movs	r1, #75	; 0x4b
 80006bc:	4620      	mov	r0, r4
 80006be:	f7ff fdbf 	bl	8000240 <d_make_comp>
 80006c2:	68e3      	ldr	r3, [r4, #12]
 80006c4:	781a      	ldrb	r2, [r3, #0]
 80006c6:	2a42      	cmp	r2, #66	; 0x42
 80006c8:	4605      	mov	r5, r0
 80006ca:	d0ef      	beq.n	80006ac <d_abi_tags+0x10>
 80006cc:	62e6      	str	r6, [r4, #44]	; 0x2c
 80006ce:	4628      	mov	r0, r5
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	bf00      	nop

080006d4 <d_substitution>:
 80006d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006d8:	4605      	mov	r5, r0
 80006da:	68c0      	ldr	r0, [r0, #12]
 80006dc:	7803      	ldrb	r3, [r0, #0]
 80006de:	2b53      	cmp	r3, #83	; 0x53
 80006e0:	d002      	beq.n	80006e8 <d_substitution+0x14>
 80006e2:	2000      	movs	r0, #0
 80006e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006e8:	1c43      	adds	r3, r0, #1
 80006ea:	60eb      	str	r3, [r5, #12]
 80006ec:	7842      	ldrb	r2, [r0, #1]
 80006ee:	b1a2      	cbz	r2, 800071a <d_substitution+0x46>
 80006f0:	1c83      	adds	r3, r0, #2
 80006f2:	60eb      	str	r3, [r5, #12]
 80006f4:	7842      	ldrb	r2, [r0, #1]
 80006f6:	2a5f      	cmp	r2, #95	; 0x5f
 80006f8:	d15a      	bne.n	80007b0 <d_substitution+0xdc>
 80006fa:	2300      	movs	r3, #0
 80006fc:	6a2a      	ldr	r2, [r5, #32]
 80006fe:	4293      	cmp	r3, r2
 8000700:	d2ef      	bcs.n	80006e2 <d_substitution+0xe>
 8000702:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000704:	69e9      	ldr	r1, [r5, #28]
 8000706:	3201      	adds	r2, #1
 8000708:	62aa      	str	r2, [r5, #40]	; 0x28
 800070a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800070e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000712:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8000716:	2b19      	cmp	r3, #25
 8000718:	d94f      	bls.n	80007ba <d_substitution+0xe6>
 800071a:	68ab      	ldr	r3, [r5, #8]
 800071c:	f003 0308 	and.w	r3, r3, #8
 8000720:	2b00      	cmp	r3, #0
 8000722:	bf14      	ite	ne
 8000724:	2401      	movne	r4, #1
 8000726:	2400      	moveq	r4, #0
 8000728:	d101      	bne.n	800072e <d_substitution+0x5a>
 800072a:	2900      	cmp	r1, #0
 800072c:	d169      	bne.n	8000802 <d_substitution+0x12e>
 800072e:	4b46      	ldr	r3, [pc, #280]	; (8000848 <d_substitution+0x174>)
 8000730:	2174      	movs	r1, #116	; 0x74
 8000732:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8000736:	e003      	b.n	8000740 <d_substitution+0x6c>
 8000738:	331c      	adds	r3, #28
 800073a:	4283      	cmp	r3, r0
 800073c:	d2d1      	bcs.n	80006e2 <d_substitution+0xe>
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	428a      	cmp	r2, r1
 8000742:	d1f9      	bne.n	8000738 <d_substitution+0x64>
 8000744:	695e      	ldr	r6, [r3, #20]
 8000746:	2e00      	cmp	r6, #0
 8000748:	d07b      	beq.n	8000842 <d_substitution+0x16e>
 800074a:	696a      	ldr	r2, [r5, #20]
 800074c:	69a9      	ldr	r1, [r5, #24]
 800074e:	428a      	cmp	r2, r1
 8000750:	da63      	bge.n	800081a <d_substitution+0x146>
 8000752:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8000756:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800075a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800075e:	00bf      	lsls	r7, r7, #2
 8000760:	3201      	adds	r2, #1
 8000762:	eb1e 0007 	adds.w	r0, lr, r7
 8000766:	616a      	str	r2, [r5, #20]
 8000768:	d006      	beq.n	8000778 <d_substitution+0xa4>
 800076a:	f04f 0c18 	mov.w	ip, #24
 800076e:	f80e c007 	strb.w	ip, [lr, r7]
 8000772:	6046      	str	r6, [r0, #4]
 8000774:	f8c0 8008 	str.w	r8, [r0, #8]
 8000778:	62e8      	str	r0, [r5, #44]	; 0x2c
 800077a:	2c00      	cmp	r4, #0
 800077c:	d04a      	beq.n	8000814 <d_substitution+0x140>
 800077e:	68de      	ldr	r6, [r3, #12]
 8000780:	691c      	ldr	r4, [r3, #16]
 8000782:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000784:	4291      	cmp	r1, r2
 8000786:	4423      	add	r3, r4
 8000788:	632b      	str	r3, [r5, #48]	; 0x30
 800078a:	dd41      	ble.n	8000810 <d_substitution+0x13c>
 800078c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000790:	6929      	ldr	r1, [r5, #16]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	3201      	adds	r2, #1
 8000796:	18c8      	adds	r0, r1, r3
 8000798:	616a      	str	r2, [r5, #20]
 800079a:	d003      	beq.n	80007a4 <d_substitution+0xd0>
 800079c:	2218      	movs	r2, #24
 800079e:	54ca      	strb	r2, [r1, r3]
 80007a0:	6046      	str	r6, [r0, #4]
 80007a2:	6084      	str	r4, [r0, #8]
 80007a4:	68eb      	ldr	r3, [r5, #12]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b42      	cmp	r3, #66	; 0x42
 80007aa:	d038      	beq.n	800081e <d_substitution+0x14a>
 80007ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007b0:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80007b4:	b2e3      	uxtb	r3, r4
 80007b6:	2b09      	cmp	r3, #9
 80007b8:	d8ab      	bhi.n	8000712 <d_substitution+0x3e>
 80007ba:	2100      	movs	r1, #0
 80007bc:	e00d      	b.n	80007da <d_substitution+0x106>
 80007be:	3b30      	subs	r3, #48	; 0x30
 80007c0:	4299      	cmp	r1, r3
 80007c2:	d88e      	bhi.n	80006e2 <d_substitution+0xe>
 80007c4:	68e9      	ldr	r1, [r5, #12]
 80007c6:	780a      	ldrb	r2, [r1, #0]
 80007c8:	1c48      	adds	r0, r1, #1
 80007ca:	b11a      	cbz	r2, 80007d4 <d_substitution+0x100>
 80007cc:	60e8      	str	r0, [r5, #12]
 80007ce:	780a      	ldrb	r2, [r1, #0]
 80007d0:	2a5f      	cmp	r2, #95	; 0x5f
 80007d2:	d014      	beq.n	80007fe <d_substitution+0x12a>
 80007d4:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80007d8:	4619      	mov	r1, r3
 80007da:	b2e4      	uxtb	r4, r4
 80007dc:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80007e0:	2c09      	cmp	r4, #9
 80007e2:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 80007e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80007ea:	d9e8      	bls.n	80007be <d_substitution+0xea>
 80007ec:	2819      	cmp	r0, #25
 80007ee:	f63f af78 	bhi.w	80006e2 <d_substitution+0xe>
 80007f2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80007f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80007fa:	3b37      	subs	r3, #55	; 0x37
 80007fc:	e7e0      	b.n	80007c0 <d_substitution+0xec>
 80007fe:	3301      	adds	r3, #1
 8000800:	e77c      	b.n	80006fc <d_substitution+0x28>
 8000802:	68eb      	ldr	r3, [r5, #12]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3b43      	subs	r3, #67	; 0x43
 8000808:	2b01      	cmp	r3, #1
 800080a:	bf98      	it	ls
 800080c:	2401      	movls	r4, #1
 800080e:	e78e      	b.n	800072e <d_substitution+0x5a>
 8000810:	2000      	movs	r0, #0
 8000812:	e7c7      	b.n	80007a4 <d_substitution+0xd0>
 8000814:	685e      	ldr	r6, [r3, #4]
 8000816:	689c      	ldr	r4, [r3, #8]
 8000818:	e7b3      	b.n	8000782 <d_substitution+0xae>
 800081a:	2000      	movs	r0, #0
 800081c:	e7ac      	b.n	8000778 <d_substitution+0xa4>
 800081e:	4601      	mov	r1, r0
 8000820:	4628      	mov	r0, r5
 8000822:	f7ff ff3b 	bl	800069c <d_abi_tags>
 8000826:	2800      	cmp	r0, #0
 8000828:	f43f af5b 	beq.w	80006e2 <d_substitution+0xe>
 800082c:	6a2b      	ldr	r3, [r5, #32]
 800082e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000830:	4293      	cmp	r3, r2
 8000832:	dabb      	bge.n	80007ac <d_substitution+0xd8>
 8000834:	69e9      	ldr	r1, [r5, #28]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800083c:	622a      	str	r2, [r5, #32]
 800083e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000842:	69a9      	ldr	r1, [r5, #24]
 8000844:	696a      	ldr	r2, [r5, #20]
 8000846:	e798      	b.n	800077a <d_substitution+0xa6>
 8000848:	08018e38 	.word	0x08018e38

0800084c <d_call_offset>:
 800084c:	b538      	push	{r3, r4, r5, lr}
 800084e:	4604      	mov	r4, r0
 8000850:	b929      	cbnz	r1, 800085e <d_call_offset+0x12>
 8000852:	68c3      	ldr	r3, [r0, #12]
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	b132      	cbz	r2, 8000866 <d_call_offset+0x1a>
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	60c2      	str	r2, [r0, #12]
 800085c:	7819      	ldrb	r1, [r3, #0]
 800085e:	2968      	cmp	r1, #104	; 0x68
 8000860:	d019      	beq.n	8000896 <d_call_offset+0x4a>
 8000862:	2976      	cmp	r1, #118	; 0x76
 8000864:	d001      	beq.n	800086a <d_call_offset+0x1e>
 8000866:	2000      	movs	r0, #0
 8000868:	bd38      	pop	{r3, r4, r5, pc}
 800086a:	f104 050c 	add.w	r5, r4, #12
 800086e:	4628      	mov	r0, r5
 8000870:	f7ff fe38 	bl	80004e4 <d_number.isra.0>
 8000874:	68e3      	ldr	r3, [r4, #12]
 8000876:	781a      	ldrb	r2, [r3, #0]
 8000878:	2a5f      	cmp	r2, #95	; 0x5f
 800087a:	d1f4      	bne.n	8000866 <d_call_offset+0x1a>
 800087c:	3301      	adds	r3, #1
 800087e:	60e3      	str	r3, [r4, #12]
 8000880:	4628      	mov	r0, r5
 8000882:	f7ff fe2f 	bl	80004e4 <d_number.isra.0>
 8000886:	68e3      	ldr	r3, [r4, #12]
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	2a5f      	cmp	r2, #95	; 0x5f
 800088c:	d1eb      	bne.n	8000866 <d_call_offset+0x1a>
 800088e:	3301      	adds	r3, #1
 8000890:	60e3      	str	r3, [r4, #12]
 8000892:	2001      	movs	r0, #1
 8000894:	bd38      	pop	{r3, r4, r5, pc}
 8000896:	f104 000c 	add.w	r0, r4, #12
 800089a:	f7ff fe23 	bl	80004e4 <d_number.isra.0>
 800089e:	e7f2      	b.n	8000886 <d_call_offset+0x3a>

080008a0 <d_lookup_template_argument.isra.6>:
 80008a0:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80008a4:	b19b      	cbz	r3, 80008ce <d_lookup_template_argument.isra.6+0x2e>
 80008a6:	680a      	ldr	r2, [r1, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	db09      	blt.n	80008c4 <d_lookup_template_argument.isra.6+0x24>
 80008b0:	b923      	cbnz	r3, 80008bc <d_lookup_template_argument.isra.6+0x1c>
 80008b2:	e007      	b.n	80008c4 <d_lookup_template_argument.isra.6+0x24>
 80008b4:	b142      	cbz	r2, 80008c8 <d_lookup_template_argument.isra.6+0x28>
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	3a01      	subs	r2, #1
 80008ba:	b11b      	cbz	r3, 80008c4 <d_lookup_template_argument.isra.6+0x24>
 80008bc:	7819      	ldrb	r1, [r3, #0]
 80008be:	292f      	cmp	r1, #47	; 0x2f
 80008c0:	d0f8      	beq.n	80008b4 <d_lookup_template_argument.isra.6+0x14>
 80008c2:	2300      	movs	r3, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	4770      	bx	lr
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	4618      	mov	r0, r3
 80008cc:	4770      	bx	lr
 80008ce:	2201      	movs	r2, #1
 80008d0:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80008d4:	e7f6      	b.n	80008c4 <d_lookup_template_argument.isra.6+0x24>
 80008d6:	bf00      	nop

080008d8 <d_find_pack>:
 80008d8:	2900      	cmp	r1, #0
 80008da:	d041      	beq.n	8000960 <d_find_pack+0x88>
 80008dc:	b538      	push	{r3, r4, r5, lr}
 80008de:	4605      	mov	r5, r0
 80008e0:	460c      	mov	r4, r1
 80008e2:	7823      	ldrb	r3, [r4, #0]
 80008e4:	2b4b      	cmp	r3, #75	; 0x4b
 80008e6:	d827      	bhi.n	8000938 <d_find_pack+0x60>
 80008e8:	e8df f003 	tbb	[pc, r3]
 80008ec:	2626262e 	.word	0x2626262e
 80008f0:	2b2e3026 	.word	0x2b2e3026
 80008f4:	2626262b 	.word	0x2626262b
 80008f8:	26262626 	.word	0x26262626
 80008fc:	26262626 	.word	0x26262626
 8000900:	26262626 	.word	0x26262626
 8000904:	2626262e 	.word	0x2626262e
 8000908:	26262626 	.word	0x26262626
 800090c:	26262626 	.word	0x26262626
 8000910:	2e262626 	.word	0x2e262626
 8000914:	26262626 	.word	0x26262626
 8000918:	2626262e 	.word	0x2626262e
 800091c:	262b2e26 	.word	0x262b2e26
 8000920:	26262626 	.word	0x26262626
 8000924:	26262626 	.word	0x26262626
 8000928:	26262626 	.word	0x26262626
 800092c:	26262e2e 	.word	0x26262e2e
 8000930:	2e2e2e26 	.word	0x2e2e2e26
 8000934:	2e2e2626 	.word	0x2e2e2626
 8000938:	6861      	ldr	r1, [r4, #4]
 800093a:	4628      	mov	r0, r5
 800093c:	f7ff ffcc 	bl	80008d8 <d_find_pack>
 8000940:	b918      	cbnz	r0, 800094a <d_find_pack+0x72>
 8000942:	68a4      	ldr	r4, [r4, #8]
 8000944:	2c00      	cmp	r4, #0
 8000946:	d1cc      	bne.n	80008e2 <d_find_pack+0xa>
 8000948:	2000      	movs	r0, #0
 800094a:	bd38      	pop	{r3, r4, r5, pc}
 800094c:	1d21      	adds	r1, r4, #4
 800094e:	4628      	mov	r0, r5
 8000950:	f7ff ffa6 	bl	80008a0 <d_lookup_template_argument.isra.6>
 8000954:	2800      	cmp	r0, #0
 8000956:	d0f7      	beq.n	8000948 <d_find_pack+0x70>
 8000958:	7803      	ldrb	r3, [r0, #0]
 800095a:	2b2f      	cmp	r3, #47	; 0x2f
 800095c:	d1f4      	bne.n	8000948 <d_find_pack+0x70>
 800095e:	bd38      	pop	{r3, r4, r5, pc}
 8000960:	2000      	movs	r0, #0
 8000962:	4770      	bx	lr

08000964 <d_growable_string_callback_adapter>:
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000966:	4615      	mov	r5, r2
 8000968:	6852      	ldr	r2, [r2, #4]
 800096a:	68ac      	ldr	r4, [r5, #8]
 800096c:	1c4b      	adds	r3, r1, #1
 800096e:	4413      	add	r3, r2
 8000970:	42a3      	cmp	r3, r4
 8000972:	b083      	sub	sp, #12
 8000974:	460e      	mov	r6, r1
 8000976:	4607      	mov	r7, r0
 8000978:	d813      	bhi.n	80009a2 <d_growable_string_callback_adapter+0x3e>
 800097a:	68ec      	ldr	r4, [r5, #12]
 800097c:	b10c      	cbz	r4, 8000982 <d_growable_string_callback_adapter+0x1e>
 800097e:	b003      	add	sp, #12
 8000980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000982:	e895 0009 	ldmia.w	r5, {r0, r3}
 8000986:	4632      	mov	r2, r6
 8000988:	4639      	mov	r1, r7
 800098a:	4418      	add	r0, r3
 800098c:	f015 f841 	bl	8015a12 <memcpy>
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	686a      	ldr	r2, [r5, #4]
 8000994:	4433      	add	r3, r6
 8000996:	549c      	strb	r4, [r3, r2]
 8000998:	686b      	ldr	r3, [r5, #4]
 800099a:	441e      	add	r6, r3
 800099c:	606e      	str	r6, [r5, #4]
 800099e:	b003      	add	sp, #12
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a2:	68ea      	ldr	r2, [r5, #12]
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d1ea      	bne.n	800097e <d_growable_string_callback_adapter+0x1a>
 80009a8:	b91c      	cbnz	r4, 80009b2 <d_growable_string_callback_adapter+0x4e>
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	f04f 0402 	mov.w	r4, #2
 80009b0:	d902      	bls.n	80009b8 <d_growable_string_callback_adapter+0x54>
 80009b2:	0064      	lsls	r4, r4, #1
 80009b4:	42a3      	cmp	r3, r4
 80009b6:	d8fc      	bhi.n	80009b2 <d_growable_string_callback_adapter+0x4e>
 80009b8:	4621      	mov	r1, r4
 80009ba:	6828      	ldr	r0, [r5, #0]
 80009bc:	f015 f8aa 	bl	8015b14 <realloc>
 80009c0:	b110      	cbz	r0, 80009c8 <d_growable_string_callback_adapter+0x64>
 80009c2:	6028      	str	r0, [r5, #0]
 80009c4:	60ac      	str	r4, [r5, #8]
 80009c6:	e7d8      	b.n	800097a <d_growable_string_callback_adapter+0x16>
 80009c8:	9001      	str	r0, [sp, #4]
 80009ca:	6828      	ldr	r0, [r5, #0]
 80009cc:	f014 fdfc 	bl	80155c8 <free>
 80009d0:	9b01      	ldr	r3, [sp, #4]
 80009d2:	602b      	str	r3, [r5, #0]
 80009d4:	2201      	movs	r2, #1
 80009d6:	606b      	str	r3, [r5, #4]
 80009d8:	60ab      	str	r3, [r5, #8]
 80009da:	60ea      	str	r2, [r5, #12]
 80009dc:	e7cf      	b.n	800097e <d_growable_string_callback_adapter+0x1a>
 80009de:	bf00      	nop

080009e0 <d_append_num>:
 80009e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009e4:	b088      	sub	sp, #32
 80009e6:	460a      	mov	r2, r1
 80009e8:	4604      	mov	r4, r0
 80009ea:	491b      	ldr	r1, [pc, #108]	; (8000a58 <d_append_num+0x78>)
 80009ec:	a801      	add	r0, sp, #4
 80009ee:	f015 fa6d 	bl	8015ecc <sprintf>
 80009f2:	a801      	add	r0, sp, #4
 80009f4:	f005 ffd6 	bl	80069a4 <strlen>
 80009f8:	b350      	cbz	r0, 8000a50 <d_append_num+0x70>
 80009fa:	ad01      	add	r5, sp, #4
 80009fc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000a00:	182f      	adds	r7, r5, r0
 8000a02:	f04f 0800 	mov.w	r8, #0
 8000a06:	e009      	b.n	8000a1c <d_append_num+0x3c>
 8000a08:	460b      	mov	r3, r1
 8000a0a:	42bd      	cmp	r5, r7
 8000a0c:	f101 0101 	add.w	r1, r1, #1
 8000a10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000a14:	54e6      	strb	r6, [r4, r3]
 8000a16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000a1a:	d019      	beq.n	8000a50 <d_append_num+0x70>
 8000a1c:	29ff      	cmp	r1, #255	; 0xff
 8000a1e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000a22:	d1f1      	bne.n	8000a08 <d_append_num+0x28>
 8000a24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000a28:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8000a2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000a30:	4620      	mov	r0, r4
 8000a32:	4798      	blx	r3
 8000a34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000a38:	3301      	adds	r3, #1
 8000a3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	42bd      	cmp	r5, r7
 8000a44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000a48:	54e6      	strb	r6, [r4, r3]
 8000a4a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000a4e:	d1e5      	bne.n	8000a1c <d_append_num+0x3c>
 8000a50:	b008      	add	sp, #32
 8000a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a56:	bf00      	nop
 8000a58:	08019f40 	.word	0x08019f40

08000a5c <d_exprlist>:
 8000a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a60:	68c3      	ldr	r3, [r0, #12]
 8000a62:	781d      	ldrb	r5, [r3, #0]
 8000a64:	b083      	sub	sp, #12
 8000a66:	2200      	movs	r2, #0
 8000a68:	428d      	cmp	r5, r1
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	9201      	str	r2, [sp, #4]
 8000a6e:	f000 81c6 	beq.w	8000dfe <d_exprlist+0x3a2>
 8000a72:	4688      	mov	r8, r1
 8000a74:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 8000f14 <d_exprlist+0x4b8>
 8000a78:	ae01      	add	r6, sp, #4
 8000a7a:	e023      	b.n	8000ac4 <d_exprlist+0x68>
 8000a7c:	2a66      	cmp	r2, #102	; 0x66
 8000a7e:	d04c      	beq.n	8000b1a <d_exprlist+0xbe>
 8000a80:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a84:	2909      	cmp	r1, #9
 8000a86:	f200 8217 	bhi.w	8000eb8 <d_exprlist+0x45c>
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f001 fb10 	bl	80020b0 <d_unqualified_name>
 8000a90:	4605      	mov	r5, r0
 8000a92:	2800      	cmp	r0, #0
 8000a94:	f000 8170 	beq.w	8000d78 <d_exprlist+0x31c>
 8000a98:	68e3      	ldr	r3, [r4, #12]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b49      	cmp	r3, #73	; 0x49
 8000a9e:	f000 8092 	beq.w	8000bc6 <d_exprlist+0x16a>
 8000aa2:	6367      	str	r7, [r4, #52]	; 0x34
 8000aa4:	462a      	mov	r2, r5
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	212e      	movs	r1, #46	; 0x2e
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f7ff fbc8 	bl	8000240 <d_make_comp>
 8000ab0:	6030      	str	r0, [r6, #0]
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	d05b      	beq.n	8000b6e <d_exprlist+0x112>
 8000ab6:	68e3      	ldr	r3, [r4, #12]
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	4542      	cmp	r2, r8
 8000abc:	f100 0608 	add.w	r6, r0, #8
 8000ac0:	f000 8107 	beq.w	8000cd2 <d_exprlist+0x276>
 8000ac4:	2501      	movs	r5, #1
 8000ac6:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000ac8:	6365      	str	r5, [r4, #52]	; 0x34
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	2a4c      	cmp	r2, #76	; 0x4c
 8000ace:	d047      	beq.n	8000b60 <d_exprlist+0x104>
 8000ad0:	2a54      	cmp	r2, #84	; 0x54
 8000ad2:	d051      	beq.n	8000b78 <d_exprlist+0x11c>
 8000ad4:	2a73      	cmp	r2, #115	; 0x73
 8000ad6:	d1d1      	bne.n	8000a7c <d_exprlist+0x20>
 8000ad8:	785a      	ldrb	r2, [r3, #1]
 8000ada:	2a72      	cmp	r2, #114	; 0x72
 8000adc:	f000 80e2 	beq.w	8000ca4 <d_exprlist+0x248>
 8000ae0:	2a70      	cmp	r2, #112	; 0x70
 8000ae2:	f000 80fd 	beq.w	8000ce0 <d_exprlist+0x284>
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f001 fa22 	bl	8001f30 <d_operator_name>
 8000aec:	4605      	mov	r5, r0
 8000aee:	2800      	cmp	r0, #0
 8000af0:	f000 8142 	beq.w	8000d78 <d_exprlist+0x31c>
 8000af4:	782b      	ldrb	r3, [r5, #0]
 8000af6:	2b31      	cmp	r3, #49	; 0x31
 8000af8:	d043      	beq.n	8000b82 <d_exprlist+0x126>
 8000afa:	2b32      	cmp	r3, #50	; 0x32
 8000afc:	d05c      	beq.n	8000bb8 <d_exprlist+0x15c>
 8000afe:	2b33      	cmp	r3, #51	; 0x33
 8000b00:	d17b      	bne.n	8000bfa <d_exprlist+0x19e>
 8000b02:	68e3      	ldr	r3, [r4, #12]
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	2a5f      	cmp	r2, #95	; 0x5f
 8000b08:	f040 80c1 	bne.w	8000c8e <d_exprlist+0x232>
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60e3      	str	r3, [r4, #12]
 8000b10:	2145      	movs	r1, #69	; 0x45
 8000b12:	4620      	mov	r0, r4
 8000b14:	f7ff ffa2 	bl	8000a5c <d_exprlist>
 8000b18:	e0bc      	b.n	8000c94 <d_exprlist+0x238>
 8000b1a:	785a      	ldrb	r2, [r3, #1]
 8000b1c:	2a70      	cmp	r2, #112	; 0x70
 8000b1e:	d1e2      	bne.n	8000ae6 <d_exprlist+0x8a>
 8000b20:	1c9a      	adds	r2, r3, #2
 8000b22:	60e2      	str	r2, [r4, #12]
 8000b24:	789a      	ldrb	r2, [r3, #2]
 8000b26:	2a54      	cmp	r2, #84	; 0x54
 8000b28:	d069      	beq.n	8000bfe <d_exprlist+0x1a2>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f7ff fd1c 	bl	8000568 <d_compact_number>
 8000b30:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000b34:	4298      	cmp	r0, r3
 8000b36:	d060      	beq.n	8000bfa <d_exprlist+0x19e>
 8000b38:	1c43      	adds	r3, r0, #1
 8000b3a:	d05e      	beq.n	8000bfa <d_exprlist+0x19e>
 8000b3c:	3001      	adds	r0, #1
 8000b3e:	6963      	ldr	r3, [r4, #20]
 8000b40:	69a2      	ldr	r2, [r4, #24]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	da59      	bge.n	8000bfa <d_exprlist+0x19e>
 8000b46:	6922      	ldr	r2, [r4, #16]
 8000b48:	1c59      	adds	r1, r3, #1
 8000b4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000b4e:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
 8000b52:	6161      	str	r1, [r4, #20]
 8000b54:	d051      	beq.n	8000bfa <d_exprlist+0x19e>
 8000b56:	2106      	movs	r1, #6
 8000b58:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8000b5c:	6068      	str	r0, [r5, #4]
 8000b5e:	e7a0      	b.n	8000aa2 <d_exprlist+0x46>
 8000b60:	4620      	mov	r0, r4
 8000b62:	f001 fef3 	bl	800294c <d_expr_primary>
 8000b66:	4605      	mov	r5, r0
 8000b68:	6367      	str	r7, [r4, #52]	; 0x34
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d19a      	bne.n	8000aa4 <d_exprlist+0x48>
 8000b6e:	2500      	movs	r5, #0
 8000b70:	4628      	mov	r0, r5
 8000b72:	b003      	add	sp, #12
 8000b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f7ff fd11 	bl	80005a0 <d_template_param>
 8000b7e:	4605      	mov	r5, r0
 8000b80:	e7f2      	b.n	8000b68 <d_exprlist+0x10c>
 8000b82:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8000b86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b88:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b8c:	f8db a000 	ldr.w	sl, [fp]
 8000b90:	3a02      	subs	r2, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	6323      	str	r3, [r4, #48]	; 0x30
 8000b96:	4650      	mov	r0, sl
 8000b98:	4649      	mov	r1, r9
 8000b9a:	f005 fef9 	bl	8006990 <strcmp>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	f000 80e6 	beq.w	8000d70 <d_exprlist+0x314>
 8000ba4:	f8db 300c 	ldr.w	r3, [fp, #12]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d826      	bhi.n	8000bfa <d_exprlist+0x19e>
 8000bac:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000bb0:	0135002b 	.word	0x0135002b
 8000bb4:	00a50033 	.word	0x00a50033
 8000bb8:	686b      	ldr	r3, [r5, #4]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d81d      	bhi.n	8000bfa <d_exprlist+0x19e>
 8000bbe:	e8df f003 	tbb	[pc, r3]
 8000bc2:	6622      	.short	0x6622
 8000bc4:	1c1c      	.short	0x1c1c
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f000 fc04 	bl	80013d4 <d_template_args>
 8000bcc:	462a      	mov	r2, r5
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f7ff fb34 	bl	8000240 <d_make_comp>
 8000bd8:	4605      	mov	r5, r0
 8000bda:	e7c5      	b.n	8000b68 <d_exprlist+0x10c>
 8000bdc:	2a74      	cmp	r2, #116	; 0x74
 8000bde:	d182      	bne.n	8000ae6 <d_exprlist+0x8a>
 8000be0:	785b      	ldrb	r3, [r3, #1]
 8000be2:	2b6c      	cmp	r3, #108	; 0x6c
 8000be4:	f47f af7f 	bne.w	8000ae6 <d_exprlist+0x8a>
 8000be8:	4620      	mov	r0, r4
 8000bea:	f000 fdb9 	bl	8001760 <d_type>
 8000bee:	68e3      	ldr	r3, [r4, #12]
 8000bf0:	785a      	ldrb	r2, [r3, #1]
 8000bf2:	4605      	mov	r5, r0
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	f040 8169 	bne.w	8000ecc <d_exprlist+0x470>
 8000bfa:	6367      	str	r7, [r4, #52]	; 0x34
 8000bfc:	e7b7      	b.n	8000b6e <d_exprlist+0x112>
 8000bfe:	3303      	adds	r3, #3
 8000c00:	60e3      	str	r3, [r4, #12]
 8000c02:	2000      	movs	r0, #0
 8000c04:	e79b      	b.n	8000b3e <d_exprlist+0xe2>
 8000c06:	462a      	mov	r2, r5
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2135      	movs	r1, #53	; 0x35
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f7ff fb17 	bl	8000240 <d_make_comp>
 8000c12:	4605      	mov	r5, r0
 8000c14:	e7a8      	b.n	8000b68 <d_exprlist+0x10c>
 8000c16:	f1ba 0f00 	cmp.w	sl, #0
 8000c1a:	d0ee      	beq.n	8000bfa <d_exprlist+0x19e>
 8000c1c:	686b      	ldr	r3, [r5, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	785a      	ldrb	r2, [r3, #1]
 8000c22:	2a63      	cmp	r2, #99	; 0x63
 8000c24:	f000 80d2 	beq.w	8000dcc <d_exprlist+0x370>
 8000c28:	f89a 3000 	ldrb.w	r3, [sl]
 8000c2c:	2b66      	cmp	r3, #102	; 0x66
 8000c2e:	f000 80ef 	beq.w	8000e10 <d_exprlist+0x3b4>
 8000c32:	4620      	mov	r0, r4
 8000c34:	f000 f970 	bl	8000f18 <d_expression_1>
 8000c38:	4683      	mov	fp, r0
 8000c3a:	49b1      	ldr	r1, [pc, #708]	; (8000f00 <d_exprlist+0x4a4>)
 8000c3c:	4650      	mov	r0, sl
 8000c3e:	f005 fea7 	bl	8006990 <strcmp>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	f000 809d 	beq.w	8000d82 <d_exprlist+0x326>
 8000c48:	49ae      	ldr	r1, [pc, #696]	; (8000f04 <d_exprlist+0x4a8>)
 8000c4a:	4650      	mov	r0, sl
 8000c4c:	f005 fea0 	bl	8006990 <strcmp>
 8000c50:	b130      	cbz	r0, 8000c60 <d_exprlist+0x204>
 8000c52:	4650      	mov	r0, sl
 8000c54:	49ac      	ldr	r1, [pc, #688]	; (8000f08 <d_exprlist+0x4ac>)
 8000c56:	f005 fe9b 	bl	8006990 <strcmp>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	f040 8083 	bne.w	8000d66 <d_exprlist+0x30a>
 8000c60:	4620      	mov	r0, r4
 8000c62:	f001 fa25 	bl	80020b0 <d_unqualified_name>
 8000c66:	68e3      	ldr	r3, [r4, #12]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b49      	cmp	r3, #73	; 0x49
 8000c6c:	4682      	mov	sl, r0
 8000c6e:	f000 80e9 	beq.w	8000e44 <d_exprlist+0x3e8>
 8000c72:	4653      	mov	r3, sl
 8000c74:	465a      	mov	r2, fp
 8000c76:	2138      	movs	r1, #56	; 0x38
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f7ff fae1 	bl	8000240 <d_make_comp>
 8000c7e:	462a      	mov	r2, r5
 8000c80:	4603      	mov	r3, r0
 8000c82:	2137      	movs	r1, #55	; 0x37
 8000c84:	4620      	mov	r0, r4
 8000c86:	f7ff fadb 	bl	8000240 <d_make_comp>
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	e76c      	b.n	8000b68 <d_exprlist+0x10c>
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f000 f942 	bl	8000f18 <d_expression_1>
 8000c94:	4603      	mov	r3, r0
 8000c96:	462a      	mov	r2, r5
 8000c98:	2136      	movs	r1, #54	; 0x36
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff fad0 	bl	8000240 <d_make_comp>
 8000ca0:	4605      	mov	r5, r0
 8000ca2:	e761      	b.n	8000b68 <d_exprlist+0x10c>
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	60e3      	str	r3, [r4, #12]
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f000 fd59 	bl	8001760 <d_type>
 8000cae:	4682      	mov	sl, r0
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f001 f9fd 	bl	80020b0 <d_unqualified_name>
 8000cb6:	68e3      	ldr	r3, [r4, #12]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b49      	cmp	r3, #73	; 0x49
 8000cbc:	4683      	mov	fp, r0
 8000cbe:	f000 8093 	beq.w	8000de8 <d_exprlist+0x38c>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4629      	mov	r1, r5
 8000cc6:	4652      	mov	r2, sl
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f7ff fab9 	bl	8000240 <d_make_comp>
 8000cce:	4605      	mov	r5, r0
 8000cd0:	e74a      	b.n	8000b68 <d_exprlist+0x10c>
 8000cd2:	9d01      	ldr	r5, [sp, #4]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4628      	mov	r0, r5
 8000cd8:	60e3      	str	r3, [r4, #12]
 8000cda:	b003      	add	sp, #12
 8000cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	60e3      	str	r3, [r4, #12]
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f000 f917 	bl	8000f18 <d_expression_1>
 8000cea:	2300      	movs	r3, #0
 8000cec:	4602      	mov	r2, r0
 8000cee:	214a      	movs	r1, #74	; 0x4a
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f7ff faa5 	bl	8000240 <d_make_comp>
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	e736      	b.n	8000b68 <d_exprlist+0x10c>
 8000cfa:	f1ba 0f00 	cmp.w	sl, #0
 8000cfe:	f43f af7c 	beq.w	8000bfa <d_exprlist+0x19e>
 8000d02:	4982      	ldr	r1, [pc, #520]	; (8000f0c <d_exprlist+0x4b0>)
 8000d04:	4650      	mov	r0, sl
 8000d06:	f005 fe43 	bl	8006990 <strcmp>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d03f      	beq.n	8000d8e <d_exprlist+0x332>
 8000d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8000d12:	2b66      	cmp	r3, #102	; 0x66
 8000d14:	f000 80bd 	beq.w	8000e92 <d_exprlist+0x436>
 8000d18:	2b6e      	cmp	r3, #110	; 0x6e
 8000d1a:	f47f af6e 	bne.w	8000bfa <d_exprlist+0x19e>
 8000d1e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000d22:	2b77      	cmp	r3, #119	; 0x77
 8000d24:	d002      	beq.n	8000d2c <d_exprlist+0x2d0>
 8000d26:	2b61      	cmp	r3, #97	; 0x61
 8000d28:	f47f af67 	bne.w	8000bfa <d_exprlist+0x19e>
 8000d2c:	215f      	movs	r1, #95	; 0x5f
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f7ff fe94 	bl	8000a5c <d_exprlist>
 8000d34:	4682      	mov	sl, r0
 8000d36:	4620      	mov	r0, r4
 8000d38:	f000 fd12 	bl	8001760 <d_type>
 8000d3c:	68e3      	ldr	r3, [r4, #12]
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	2a45      	cmp	r2, #69	; 0x45
 8000d42:	4683      	mov	fp, r0
 8000d44:	f000 80a1 	beq.w	8000e8a <d_exprlist+0x42e>
 8000d48:	2a70      	cmp	r2, #112	; 0x70
 8000d4a:	f000 80a6 	beq.w	8000e9a <d_exprlist+0x43e>
 8000d4e:	2a69      	cmp	r2, #105	; 0x69
 8000d50:	f47f af53 	bne.w	8000bfa <d_exprlist+0x19e>
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	2b6c      	cmp	r3, #108	; 0x6c
 8000d58:	f47f af4f 	bne.w	8000bfa <d_exprlist+0x19e>
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f000 f8db 	bl	8000f18 <d_expression_1>
 8000d62:	4603      	mov	r3, r0
 8000d64:	e01f      	b.n	8000da6 <d_exprlist+0x34a>
 8000d66:	4620      	mov	r0, r4
 8000d68:	f000 f8d6 	bl	8000f18 <d_expression_1>
 8000d6c:	4682      	mov	sl, r0
 8000d6e:	e780      	b.n	8000c72 <d_exprlist+0x216>
 8000d70:	4620      	mov	r0, r4
 8000d72:	f000 fcf5 	bl	8001760 <d_type>
 8000d76:	e78d      	b.n	8000c94 <d_exprlist+0x238>
 8000d78:	4628      	mov	r0, r5
 8000d7a:	6367      	str	r7, [r4, #52]	; 0x34
 8000d7c:	b003      	add	sp, #12
 8000d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d82:	2145      	movs	r1, #69	; 0x45
 8000d84:	4620      	mov	r0, r4
 8000d86:	f7ff fe69 	bl	8000a5c <d_exprlist>
 8000d8a:	4682      	mov	sl, r0
 8000d8c:	e771      	b.n	8000c72 <d_exprlist+0x216>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	f000 f8c2 	bl	8000f18 <d_expression_1>
 8000d94:	4682      	mov	sl, r0
 8000d96:	4620      	mov	r0, r4
 8000d98:	f000 f8be 	bl	8000f18 <d_expression_1>
 8000d9c:	4683      	mov	fp, r0
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f000 f8ba 	bl	8000f18 <d_expression_1>
 8000da4:	4603      	mov	r3, r0
 8000da6:	465a      	mov	r2, fp
 8000da8:	213b      	movs	r1, #59	; 0x3b
 8000daa:	4620      	mov	r0, r4
 8000dac:	f7ff fa48 	bl	8000240 <d_make_comp>
 8000db0:	4652      	mov	r2, sl
 8000db2:	4603      	mov	r3, r0
 8000db4:	213a      	movs	r1, #58	; 0x3a
 8000db6:	4620      	mov	r0, r4
 8000db8:	f7ff fa42 	bl	8000240 <d_make_comp>
 8000dbc:	462a      	mov	r2, r5
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2139      	movs	r1, #57	; 0x39
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f7ff fa3c 	bl	8000240 <d_make_comp>
 8000dc8:	4605      	mov	r5, r0
 8000dca:	e6cd      	b.n	8000b68 <d_exprlist+0x10c>
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000dd2:	2a01      	cmp	r2, #1
 8000dd4:	d903      	bls.n	8000dde <d_exprlist+0x382>
 8000dd6:	3b72      	subs	r3, #114	; 0x72
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	f63f af25 	bhi.w	8000c28 <d_exprlist+0x1cc>
 8000dde:	4620      	mov	r0, r4
 8000de0:	f000 fcbe 	bl	8001760 <d_type>
 8000de4:	4683      	mov	fp, r0
 8000de6:	e728      	b.n	8000c3a <d_exprlist+0x1de>
 8000de8:	4620      	mov	r0, r4
 8000dea:	f000 faf3 	bl	80013d4 <d_template_args>
 8000dee:	465a      	mov	r2, fp
 8000df0:	4603      	mov	r3, r0
 8000df2:	2104      	movs	r1, #4
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff fa23 	bl	8000240 <d_make_comp>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	e762      	b.n	8000cc4 <d_exprlist+0x268>
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60c3      	str	r3, [r0, #12]
 8000e02:	212e      	movs	r1, #46	; 0x2e
 8000e04:	4613      	mov	r3, r2
 8000e06:	b003      	add	sp, #12
 8000e08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e0c:	f7ff ba18 	b.w	8000240 <d_make_comp>
 8000e10:	4620      	mov	r0, r4
 8000e12:	f001 f88d 	bl	8001f30 <d_operator_name>
 8000e16:	4683      	mov	fp, r0
 8000e18:	e70f      	b.n	8000c3a <d_exprlist+0x1de>
 8000e1a:	f1ba 0f00 	cmp.w	sl, #0
 8000e1e:	f43f af36 	beq.w	8000c8e <d_exprlist+0x232>
 8000e22:	f89a 3000 	ldrb.w	r3, [sl]
 8000e26:	2b70      	cmp	r3, #112	; 0x70
 8000e28:	d017      	beq.n	8000e5a <d_exprlist+0x3fe>
 8000e2a:	2b6d      	cmp	r3, #109	; 0x6d
 8000e2c:	d015      	beq.n	8000e5a <d_exprlist+0x3fe>
 8000e2e:	4650      	mov	r0, sl
 8000e30:	4937      	ldr	r1, [pc, #220]	; (8000f10 <d_exprlist+0x4b4>)
 8000e32:	f005 fdad 	bl	8006990 <strcmp>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	f47f af29 	bne.w	8000c8e <d_exprlist+0x232>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f000 fa65 	bl	800130c <d_template_args_1>
 8000e42:	e727      	b.n	8000c94 <d_exprlist+0x238>
 8000e44:	4620      	mov	r0, r4
 8000e46:	f000 fac5 	bl	80013d4 <d_template_args>
 8000e4a:	4652      	mov	r2, sl
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4620      	mov	r0, r4
 8000e52:	f7ff f9f5 	bl	8000240 <d_make_comp>
 8000e56:	4682      	mov	sl, r0
 8000e58:	e70b      	b.n	8000c72 <d_exprlist+0x216>
 8000e5a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d1e5      	bne.n	8000e2e <d_exprlist+0x3d2>
 8000e62:	68e3      	ldr	r3, [r4, #12]
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	2a5f      	cmp	r2, #95	; 0x5f
 8000e68:	d023      	beq.n	8000eb2 <d_exprlist+0x456>
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	4928      	ldr	r1, [pc, #160]	; (8000f10 <d_exprlist+0x4b4>)
 8000e6e:	f005 fd8f 	bl	8006990 <strcmp>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d03f      	beq.n	8000ef6 <d_exprlist+0x49a>
 8000e76:	4620      	mov	r0, r4
 8000e78:	f000 f84e 	bl	8000f18 <d_expression_1>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2138      	movs	r1, #56	; 0x38
 8000e82:	4620      	mov	r0, r4
 8000e84:	f7ff f9dc 	bl	8000240 <d_make_comp>
 8000e88:	e704      	b.n	8000c94 <d_exprlist+0x238>
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	60e3      	str	r3, [r4, #12]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e789      	b.n	8000da6 <d_exprlist+0x34a>
 8000e92:	4620      	mov	r0, r4
 8000e94:	f001 f84c 	bl	8001f30 <d_operator_name>
 8000e98:	e77c      	b.n	8000d94 <d_exprlist+0x338>
 8000e9a:	785a      	ldrb	r2, [r3, #1]
 8000e9c:	2a69      	cmp	r2, #105	; 0x69
 8000e9e:	f47f aeac 	bne.w	8000bfa <d_exprlist+0x19e>
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	60e3      	str	r3, [r4, #12]
 8000ea6:	2145      	movs	r1, #69	; 0x45
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f7ff fdd7 	bl	8000a5c <d_exprlist>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	e779      	b.n	8000da6 <d_exprlist+0x34a>
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60e3      	str	r3, [r4, #12]
 8000eb6:	e7ba      	b.n	8000e2e <d_exprlist+0x3d2>
 8000eb8:	2a6f      	cmp	r2, #111	; 0x6f
 8000eba:	d015      	beq.n	8000ee8 <d_exprlist+0x48c>
 8000ebc:	2a69      	cmp	r2, #105	; 0x69
 8000ebe:	f47f ae8d 	bne.w	8000bdc <d_exprlist+0x180>
 8000ec2:	785a      	ldrb	r2, [r3, #1]
 8000ec4:	2a6c      	cmp	r2, #108	; 0x6c
 8000ec6:	f47f ae0e 	bne.w	8000ae6 <d_exprlist+0x8a>
 8000eca:	2500      	movs	r5, #0
 8000ecc:	3302      	adds	r3, #2
 8000ece:	60e3      	str	r3, [r4, #12]
 8000ed0:	2145      	movs	r1, #69	; 0x45
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f7ff fdc2 	bl	8000a5c <d_exprlist>
 8000ed8:	462a      	mov	r2, r5
 8000eda:	4603      	mov	r3, r0
 8000edc:	2130      	movs	r1, #48	; 0x30
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff f9ae 	bl	8000240 <d_make_comp>
 8000ee4:	4605      	mov	r5, r0
 8000ee6:	e63f      	b.n	8000b68 <d_exprlist+0x10c>
 8000ee8:	785a      	ldrb	r2, [r3, #1]
 8000eea:	2a6e      	cmp	r2, #110	; 0x6e
 8000eec:	f47f adfb 	bne.w	8000ae6 <d_exprlist+0x8a>
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	60e3      	str	r3, [r4, #12]
 8000ef4:	e5c9      	b.n	8000a8a <d_exprlist+0x2e>
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f000 fa08 	bl	800130c <d_template_args_1>
 8000efc:	4603      	mov	r3, r0
 8000efe:	e7be      	b.n	8000e7e <d_exprlist+0x422>
 8000f00:	08019f48 	.word	0x08019f48
 8000f04:	08019f4c 	.word	0x08019f4c
 8000f08:	08019f50 	.word	0x08019f50
 8000f0c:	08019f54 	.word	0x08019f54
 8000f10:	08019f44 	.word	0x08019f44
 8000f14:	0801a44c 	.word	0x0801a44c

08000f18 <d_expression_1>:
 8000f18:	68c1      	ldr	r1, [r0, #12]
 8000f1a:	780b      	ldrb	r3, [r1, #0]
 8000f1c:	2b4c      	cmp	r3, #76	; 0x4c
 8000f1e:	f000 8087 	beq.w	8001030 <d_expression_1+0x118>
 8000f22:	2b54      	cmp	r3, #84	; 0x54
 8000f24:	f000 8086 	beq.w	8001034 <d_expression_1+0x11c>
 8000f28:	2b73      	cmp	r3, #115	; 0x73
 8000f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2e:	4604      	mov	r4, r0
 8000f30:	d037      	beq.n	8000fa2 <d_expression_1+0x8a>
 8000f32:	2b66      	cmp	r3, #102	; 0x66
 8000f34:	d012      	beq.n	8000f5c <d_expression_1+0x44>
 8000f36:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f3a:	2a09      	cmp	r2, #9
 8000f3c:	f200 81b8 	bhi.w	80012b0 <d_expression_1+0x398>
 8000f40:	4620      	mov	r0, r4
 8000f42:	f001 f8b5 	bl	80020b0 <d_unqualified_name>
 8000f46:	4605      	mov	r5, r0
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d06d      	beq.n	8001028 <d_expression_1+0x110>
 8000f4c:	68e3      	ldr	r3, [r4, #12]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b49      	cmp	r3, #73	; 0x49
 8000f52:	f000 8088 	beq.w	8001066 <d_expression_1+0x14e>
 8000f56:	4628      	mov	r0, r5
 8000f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f5c:	784b      	ldrb	r3, [r1, #1]
 8000f5e:	2b70      	cmp	r3, #112	; 0x70
 8000f60:	d039      	beq.n	8000fd6 <d_expression_1+0xbe>
 8000f62:	4620      	mov	r0, r4
 8000f64:	f000 ffe4 	bl	8001f30 <d_operator_name>
 8000f68:	4605      	mov	r5, r0
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d05c      	beq.n	8001028 <d_expression_1+0x110>
 8000f6e:	7803      	ldrb	r3, [r0, #0]
 8000f70:	2b31      	cmp	r3, #49	; 0x31
 8000f72:	d061      	beq.n	8001038 <d_expression_1+0x120>
 8000f74:	2b32      	cmp	r3, #50	; 0x32
 8000f76:	d025      	beq.n	8000fc4 <d_expression_1+0xac>
 8000f78:	2b33      	cmp	r3, #51	; 0x33
 8000f7a:	d155      	bne.n	8001028 <d_expression_1+0x110>
 8000f7c:	68e3      	ldr	r3, [r4, #12]
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	2a5f      	cmp	r2, #95	; 0x5f
 8000f82:	f040 81b4 	bne.w	80012ee <d_expression_1+0x3d6>
 8000f86:	3301      	adds	r3, #1
 8000f88:	60e3      	str	r3, [r4, #12]
 8000f8a:	2145      	movs	r1, #69	; 0x45
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff fd65 	bl	8000a5c <d_exprlist>
 8000f92:	4603      	mov	r3, r0
 8000f94:	462a      	mov	r2, r5
 8000f96:	4620      	mov	r0, r4
 8000f98:	2136      	movs	r1, #54	; 0x36
 8000f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f9e:	f7ff b94f 	b.w	8000240 <d_make_comp>
 8000fa2:	784b      	ldrb	r3, [r1, #1]
 8000fa4:	2b72      	cmp	r3, #114	; 0x72
 8000fa6:	d069      	beq.n	800107c <d_expression_1+0x164>
 8000fa8:	2b70      	cmp	r3, #112	; 0x70
 8000faa:	d1da      	bne.n	8000f62 <d_expression_1+0x4a>
 8000fac:	3102      	adds	r1, #2
 8000fae:	60c1      	str	r1, [r0, #12]
 8000fb0:	f7ff ffb2 	bl	8000f18 <d_expression_1>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	214a      	movs	r1, #74	; 0x4a
 8000fba:	4620      	mov	r0, r4
 8000fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc0:	f7ff b93e 	b.w	8000240 <d_make_comp>
 8000fc4:	6843      	ldr	r3, [r0, #4]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d82e      	bhi.n	8001028 <d_expression_1+0x110>
 8000fca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000fce:	0071      	.short	0x0071
 8000fd0:	002d0190 	.word	0x002d0190
 8000fd4:	002d      	.short	0x002d
 8000fd6:	1c8b      	adds	r3, r1, #2
 8000fd8:	60c3      	str	r3, [r0, #12]
 8000fda:	788b      	ldrb	r3, [r1, #2]
 8000fdc:	2b54      	cmp	r3, #84	; 0x54
 8000fde:	d063      	beq.n	80010a8 <d_expression_1+0x190>
 8000fe0:	f7ff fac2 	bl	8000568 <d_compact_number>
 8000fe4:	43c3      	mvns	r3, r0
 8000fe6:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	d01d      	beq.n	8001028 <d_expression_1+0x110>
 8000fec:	3001      	adds	r0, #1
 8000fee:	6963      	ldr	r3, [r4, #20]
 8000ff0:	69a2      	ldr	r2, [r4, #24]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	da18      	bge.n	8001028 <d_expression_1+0x110>
 8000ff6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000ffa:	6921      	ldr	r1, [r4, #16]
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	3301      	adds	r3, #1
 8001000:	188d      	adds	r5, r1, r2
 8001002:	6163      	str	r3, [r4, #20]
 8001004:	d0a7      	beq.n	8000f56 <d_expression_1+0x3e>
 8001006:	2306      	movs	r3, #6
 8001008:	548b      	strb	r3, [r1, r2]
 800100a:	6068      	str	r0, [r5, #4]
 800100c:	e7a3      	b.n	8000f56 <d_expression_1+0x3e>
 800100e:	2b74      	cmp	r3, #116	; 0x74
 8001010:	d1a7      	bne.n	8000f62 <d_expression_1+0x4a>
 8001012:	784b      	ldrb	r3, [r1, #1]
 8001014:	2b6c      	cmp	r3, #108	; 0x6c
 8001016:	d1a4      	bne.n	8000f62 <d_expression_1+0x4a>
 8001018:	f000 fba2 	bl	8001760 <d_type>
 800101c:	68e1      	ldr	r1, [r4, #12]
 800101e:	784b      	ldrb	r3, [r1, #1]
 8001020:	4605      	mov	r5, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	f040 814e 	bne.w	80012c4 <d_expression_1+0x3ac>
 8001028:	2500      	movs	r5, #0
 800102a:	4628      	mov	r0, r5
 800102c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001030:	f001 bc8c 	b.w	800294c <d_expr_primary>
 8001034:	f7ff bab4 	b.w	80005a0 <d_template_param>
 8001038:	6847      	ldr	r7, [r0, #4]
 800103a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	683e      	ldr	r6, [r7, #0]
 8001040:	49ac      	ldr	r1, [pc, #688]	; (80012f4 <d_expression_1+0x3dc>)
 8001042:	3a02      	subs	r2, #2
 8001044:	4413      	add	r3, r2
 8001046:	6323      	str	r3, [r4, #48]	; 0x30
 8001048:	4630      	mov	r0, r6
 800104a:	f005 fca1 	bl	8006990 <strcmp>
 800104e:	2800      	cmp	r0, #0
 8001050:	f000 80ab 	beq.w	80011aa <d_expression_1+0x292>
 8001054:	68ff      	ldr	r7, [r7, #12]
 8001056:	2f03      	cmp	r7, #3
 8001058:	d8e6      	bhi.n	8001028 <d_expression_1+0x110>
 800105a:	e8df f017 	tbh	[pc, r7, lsl #1]
 800105e:	0029      	.short	0x0029
 8001060:	007100ff 	.word	0x007100ff
 8001064:	0031      	.short	0x0031
 8001066:	4620      	mov	r0, r4
 8001068:	f000 f9b4 	bl	80013d4 <d_template_args>
 800106c:	462a      	mov	r2, r5
 800106e:	4603      	mov	r3, r0
 8001070:	2104      	movs	r1, #4
 8001072:	4620      	mov	r0, r4
 8001074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001078:	f7ff b8e2 	b.w	8000240 <d_make_comp>
 800107c:	3102      	adds	r1, #2
 800107e:	60c1      	str	r1, [r0, #12]
 8001080:	f000 fb6e 	bl	8001760 <d_type>
 8001084:	4605      	mov	r5, r0
 8001086:	4620      	mov	r0, r4
 8001088:	f001 f812 	bl	80020b0 <d_unqualified_name>
 800108c:	68e3      	ldr	r3, [r4, #12]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b49      	cmp	r3, #73	; 0x49
 8001092:	4606      	mov	r6, r0
 8001094:	f000 80ae 	beq.w	80011f4 <d_expression_1+0x2dc>
 8001098:	4603      	mov	r3, r0
 800109a:	462a      	mov	r2, r5
 800109c:	4620      	mov	r0, r4
 800109e:	2101      	movs	r1, #1
 80010a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010a4:	f7ff b8cc 	b.w	8000240 <d_make_comp>
 80010a8:	3103      	adds	r1, #3
 80010aa:	60c1      	str	r1, [r0, #12]
 80010ac:	2000      	movs	r0, #0
 80010ae:	e79e      	b.n	8000fee <d_expression_1+0xd6>
 80010b0:	462a      	mov	r2, r5
 80010b2:	4620      	mov	r0, r4
 80010b4:	2300      	movs	r3, #0
 80010b6:	2135      	movs	r1, #53	; 0x35
 80010b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010bc:	f7ff b8c0 	b.w	8000240 <d_make_comp>
 80010c0:	2e00      	cmp	r6, #0
 80010c2:	d0b1      	beq.n	8001028 <d_expression_1+0x110>
 80010c4:	498c      	ldr	r1, [pc, #560]	; (80012f8 <d_expression_1+0x3e0>)
 80010c6:	4630      	mov	r0, r6
 80010c8:	f005 fc62 	bl	8006990 <strcmp>
 80010cc:	2800      	cmp	r0, #0
 80010ce:	d071      	beq.n	80011b4 <d_expression_1+0x29c>
 80010d0:	7833      	ldrb	r3, [r6, #0]
 80010d2:	2b66      	cmp	r3, #102	; 0x66
 80010d4:	f000 80b2 	beq.w	800123c <d_expression_1+0x324>
 80010d8:	2b6e      	cmp	r3, #110	; 0x6e
 80010da:	d1a5      	bne.n	8001028 <d_expression_1+0x110>
 80010dc:	7873      	ldrb	r3, [r6, #1]
 80010de:	2b77      	cmp	r3, #119	; 0x77
 80010e0:	d001      	beq.n	80010e6 <d_expression_1+0x1ce>
 80010e2:	2b61      	cmp	r3, #97	; 0x61
 80010e4:	d1a0      	bne.n	8001028 <d_expression_1+0x110>
 80010e6:	215f      	movs	r1, #95	; 0x5f
 80010e8:	4620      	mov	r0, r4
 80010ea:	f7ff fcb7 	bl	8000a5c <d_exprlist>
 80010ee:	4606      	mov	r6, r0
 80010f0:	4620      	mov	r0, r4
 80010f2:	f000 fb35 	bl	8001760 <d_type>
 80010f6:	68e3      	ldr	r3, [r4, #12]
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	2a45      	cmp	r2, #69	; 0x45
 80010fc:	4607      	mov	r7, r0
 80010fe:	f000 8099 	beq.w	8001234 <d_expression_1+0x31c>
 8001102:	2a70      	cmp	r2, #112	; 0x70
 8001104:	f000 809e 	beq.w	8001244 <d_expression_1+0x32c>
 8001108:	2a69      	cmp	r2, #105	; 0x69
 800110a:	d18d      	bne.n	8001028 <d_expression_1+0x110>
 800110c:	785b      	ldrb	r3, [r3, #1]
 800110e:	2b6c      	cmp	r3, #108	; 0x6c
 8001110:	d18a      	bne.n	8001028 <d_expression_1+0x110>
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff ff00 	bl	8000f18 <d_expression_1>
 8001118:	4603      	mov	r3, r0
 800111a:	463a      	mov	r2, r7
 800111c:	213b      	movs	r1, #59	; 0x3b
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff f88e 	bl	8000240 <d_make_comp>
 8001124:	4632      	mov	r2, r6
 8001126:	4603      	mov	r3, r0
 8001128:	213a      	movs	r1, #58	; 0x3a
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff f888 	bl	8000240 <d_make_comp>
 8001130:	462a      	mov	r2, r5
 8001132:	4603      	mov	r3, r0
 8001134:	2139      	movs	r1, #57	; 0x39
 8001136:	4620      	mov	r0, r4
 8001138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800113c:	f7ff b880 	b.w	8000240 <d_make_comp>
 8001140:	2e00      	cmp	r6, #0
 8001142:	f43f af71 	beq.w	8001028 <d_expression_1+0x110>
 8001146:	686b      	ldr	r3, [r5, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	785a      	ldrb	r2, [r3, #1]
 800114c:	2a63      	cmp	r2, #99	; 0x63
 800114e:	d044      	beq.n	80011da <d_expression_1+0x2c2>
 8001150:	7833      	ldrb	r3, [r6, #0]
 8001152:	2b66      	cmp	r3, #102	; 0x66
 8001154:	d059      	beq.n	800120a <d_expression_1+0x2f2>
 8001156:	4620      	mov	r0, r4
 8001158:	f7ff fede 	bl	8000f18 <d_expression_1>
 800115c:	4607      	mov	r7, r0
 800115e:	4967      	ldr	r1, [pc, #412]	; (80012fc <d_expression_1+0x3e4>)
 8001160:	4630      	mov	r0, r6
 8001162:	f005 fc15 	bl	8006990 <strcmp>
 8001166:	b390      	cbz	r0, 80011ce <d_expression_1+0x2b6>
 8001168:	4965      	ldr	r1, [pc, #404]	; (8001300 <d_expression_1+0x3e8>)
 800116a:	4630      	mov	r0, r6
 800116c:	f005 fc10 	bl	8006990 <strcmp>
 8001170:	b128      	cbz	r0, 800117e <d_expression_1+0x266>
 8001172:	4630      	mov	r0, r6
 8001174:	4963      	ldr	r1, [pc, #396]	; (8001304 <d_expression_1+0x3ec>)
 8001176:	f005 fc0b 	bl	8006990 <strcmp>
 800117a:	2800      	cmp	r0, #0
 800117c:	d14a      	bne.n	8001214 <d_expression_1+0x2fc>
 800117e:	4620      	mov	r0, r4
 8001180:	f000 ff96 	bl	80020b0 <d_unqualified_name>
 8001184:	68e3      	ldr	r3, [r4, #12]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b49      	cmp	r3, #73	; 0x49
 800118a:	4606      	mov	r6, r0
 800118c:	d047      	beq.n	800121e <d_expression_1+0x306>
 800118e:	4633      	mov	r3, r6
 8001190:	463a      	mov	r2, r7
 8001192:	2138      	movs	r1, #56	; 0x38
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff f853 	bl	8000240 <d_make_comp>
 800119a:	462a      	mov	r2, r5
 800119c:	4603      	mov	r3, r0
 800119e:	2137      	movs	r1, #55	; 0x37
 80011a0:	4620      	mov	r0, r4
 80011a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011a6:	f7ff b84b 	b.w	8000240 <d_make_comp>
 80011aa:	4620      	mov	r0, r4
 80011ac:	f000 fad8 	bl	8001760 <d_type>
 80011b0:	4603      	mov	r3, r0
 80011b2:	e6ef      	b.n	8000f94 <d_expression_1+0x7c>
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff feaf 	bl	8000f18 <d_expression_1>
 80011ba:	4606      	mov	r6, r0
 80011bc:	4620      	mov	r0, r4
 80011be:	f7ff feab 	bl	8000f18 <d_expression_1>
 80011c2:	4607      	mov	r7, r0
 80011c4:	4620      	mov	r0, r4
 80011c6:	f7ff fea7 	bl	8000f18 <d_expression_1>
 80011ca:	4603      	mov	r3, r0
 80011cc:	e7a5      	b.n	800111a <d_expression_1+0x202>
 80011ce:	2145      	movs	r1, #69	; 0x45
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff fc43 	bl	8000a5c <d_exprlist>
 80011d6:	4606      	mov	r6, r0
 80011d8:	e7d9      	b.n	800118e <d_expression_1+0x276>
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80011e0:	2a01      	cmp	r2, #1
 80011e2:	d902      	bls.n	80011ea <d_expression_1+0x2d2>
 80011e4:	3b72      	subs	r3, #114	; 0x72
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d8b2      	bhi.n	8001150 <d_expression_1+0x238>
 80011ea:	4620      	mov	r0, r4
 80011ec:	f000 fab8 	bl	8001760 <d_type>
 80011f0:	4607      	mov	r7, r0
 80011f2:	e7b4      	b.n	800115e <d_expression_1+0x246>
 80011f4:	4620      	mov	r0, r4
 80011f6:	f000 f8ed 	bl	80013d4 <d_template_args>
 80011fa:	4632      	mov	r2, r6
 80011fc:	4603      	mov	r3, r0
 80011fe:	2104      	movs	r1, #4
 8001200:	4620      	mov	r0, r4
 8001202:	f7ff f81d 	bl	8000240 <d_make_comp>
 8001206:	4603      	mov	r3, r0
 8001208:	e747      	b.n	800109a <d_expression_1+0x182>
 800120a:	4620      	mov	r0, r4
 800120c:	f000 fe90 	bl	8001f30 <d_operator_name>
 8001210:	4607      	mov	r7, r0
 8001212:	e7a4      	b.n	800115e <d_expression_1+0x246>
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff fe7f 	bl	8000f18 <d_expression_1>
 800121a:	4606      	mov	r6, r0
 800121c:	e7b7      	b.n	800118e <d_expression_1+0x276>
 800121e:	4620      	mov	r0, r4
 8001220:	f000 f8d8 	bl	80013d4 <d_template_args>
 8001224:	4632      	mov	r2, r6
 8001226:	4603      	mov	r3, r0
 8001228:	2104      	movs	r1, #4
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff f808 	bl	8000240 <d_make_comp>
 8001230:	4606      	mov	r6, r0
 8001232:	e7ac      	b.n	800118e <d_expression_1+0x276>
 8001234:	3301      	adds	r3, #1
 8001236:	60e3      	str	r3, [r4, #12]
 8001238:	2300      	movs	r3, #0
 800123a:	e76e      	b.n	800111a <d_expression_1+0x202>
 800123c:	4620      	mov	r0, r4
 800123e:	f000 fe77 	bl	8001f30 <d_operator_name>
 8001242:	e7ba      	b.n	80011ba <d_expression_1+0x2a2>
 8001244:	785a      	ldrb	r2, [r3, #1]
 8001246:	2a69      	cmp	r2, #105	; 0x69
 8001248:	f47f aeee 	bne.w	8001028 <d_expression_1+0x110>
 800124c:	3302      	adds	r3, #2
 800124e:	60e3      	str	r3, [r4, #12]
 8001250:	2145      	movs	r1, #69	; 0x45
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff fc02 	bl	8000a5c <d_exprlist>
 8001258:	4603      	mov	r3, r0
 800125a:	e75e      	b.n	800111a <d_expression_1+0x202>
 800125c:	2e00      	cmp	r6, #0
 800125e:	d046      	beq.n	80012ee <d_expression_1+0x3d6>
 8001260:	7833      	ldrb	r3, [r6, #0]
 8001262:	2b70      	cmp	r3, #112	; 0x70
 8001264:	d015      	beq.n	8001292 <d_expression_1+0x37a>
 8001266:	2b6d      	cmp	r3, #109	; 0x6d
 8001268:	d013      	beq.n	8001292 <d_expression_1+0x37a>
 800126a:	2700      	movs	r7, #0
 800126c:	4630      	mov	r0, r6
 800126e:	4926      	ldr	r1, [pc, #152]	; (8001308 <d_expression_1+0x3f0>)
 8001270:	f005 fb8e 	bl	8006990 <strcmp>
 8001274:	b1b8      	cbz	r0, 80012a6 <d_expression_1+0x38e>
 8001276:	4620      	mov	r0, r4
 8001278:	f7ff fe4e 	bl	8000f18 <d_expression_1>
 800127c:	4603      	mov	r3, r0
 800127e:	2f00      	cmp	r7, #0
 8001280:	f43f ae88 	beq.w	8000f94 <d_expression_1+0x7c>
 8001284:	461a      	mov	r2, r3
 8001286:	2138      	movs	r1, #56	; 0x38
 8001288:	4620      	mov	r0, r4
 800128a:	f7fe ffd9 	bl	8000240 <d_make_comp>
 800128e:	4603      	mov	r3, r0
 8001290:	e680      	b.n	8000f94 <d_expression_1+0x7c>
 8001292:	7872      	ldrb	r2, [r6, #1]
 8001294:	429a      	cmp	r2, r3
 8001296:	d1e8      	bne.n	800126a <d_expression_1+0x352>
 8001298:	68e3      	ldr	r3, [r4, #12]
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	2a5f      	cmp	r2, #95	; 0x5f
 800129e:	d1e5      	bne.n	800126c <d_expression_1+0x354>
 80012a0:	3301      	adds	r3, #1
 80012a2:	60e3      	str	r3, [r4, #12]
 80012a4:	e7e1      	b.n	800126a <d_expression_1+0x352>
 80012a6:	4620      	mov	r0, r4
 80012a8:	f000 f830 	bl	800130c <d_template_args_1>
 80012ac:	4603      	mov	r3, r0
 80012ae:	e7e6      	b.n	800127e <d_expression_1+0x366>
 80012b0:	2b6f      	cmp	r3, #111	; 0x6f
 80012b2:	d015      	beq.n	80012e0 <d_expression_1+0x3c8>
 80012b4:	2b69      	cmp	r3, #105	; 0x69
 80012b6:	f47f aeaa 	bne.w	800100e <d_expression_1+0xf6>
 80012ba:	784b      	ldrb	r3, [r1, #1]
 80012bc:	2b6c      	cmp	r3, #108	; 0x6c
 80012be:	f47f ae50 	bne.w	8000f62 <d_expression_1+0x4a>
 80012c2:	2500      	movs	r5, #0
 80012c4:	3102      	adds	r1, #2
 80012c6:	60e1      	str	r1, [r4, #12]
 80012c8:	4620      	mov	r0, r4
 80012ca:	2145      	movs	r1, #69	; 0x45
 80012cc:	f7ff fbc6 	bl	8000a5c <d_exprlist>
 80012d0:	462a      	mov	r2, r5
 80012d2:	4603      	mov	r3, r0
 80012d4:	2130      	movs	r1, #48	; 0x30
 80012d6:	4620      	mov	r0, r4
 80012d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012dc:	f7fe bfb0 	b.w	8000240 <d_make_comp>
 80012e0:	784b      	ldrb	r3, [r1, #1]
 80012e2:	2b6e      	cmp	r3, #110	; 0x6e
 80012e4:	f47f ae3d 	bne.w	8000f62 <d_expression_1+0x4a>
 80012e8:	3102      	adds	r1, #2
 80012ea:	60c1      	str	r1, [r0, #12]
 80012ec:	e628      	b.n	8000f40 <d_expression_1+0x28>
 80012ee:	2700      	movs	r7, #0
 80012f0:	e7c1      	b.n	8001276 <d_expression_1+0x35e>
 80012f2:	bf00      	nop
 80012f4:	0801a44c 	.word	0x0801a44c
 80012f8:	08019f54 	.word	0x08019f54
 80012fc:	08019f48 	.word	0x08019f48
 8001300:	08019f4c 	.word	0x08019f4c
 8001304:	08019f50 	.word	0x08019f50
 8001308:	08019f44 	.word	0x08019f44

0800130c <d_template_args_1>:
 800130c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001310:	68c2      	ldr	r2, [r0, #12]
 8001312:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 8001316:	7813      	ldrb	r3, [r2, #0]
 8001318:	2b45      	cmp	r3, #69	; 0x45
 800131a:	b083      	sub	sp, #12
 800131c:	4604      	mov	r4, r0
 800131e:	d04e      	beq.n	80013be <d_template_args_1+0xb2>
 8001320:	ae02      	add	r6, sp, #8
 8001322:	2100      	movs	r1, #0
 8001324:	f846 1d04 	str.w	r1, [r6, #-4]!
 8001328:	2701      	movs	r7, #1
 800132a:	3b49      	subs	r3, #73	; 0x49
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d83e      	bhi.n	80013ae <d_template_args_1+0xa2>
 8001330:	e8df f003 	tbb	[pc, r3]
 8001334:	1b3d3838 	.word	0x1b3d3838
 8001338:	3d3d3d3d 	.word	0x3d3d3d3d
 800133c:	3d3d3d3d 	.word	0x3d3d3d3d
 8001340:	083d3d3d 	.word	0x083d3d3d
 8001344:	3201      	adds	r2, #1
 8001346:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
 800134a:	60e2      	str	r2, [r4, #12]
 800134c:	6367      	str	r7, [r4, #52]	; 0x34
 800134e:	4620      	mov	r0, r4
 8001350:	f7ff fde2 	bl	8000f18 <d_expression_1>
 8001354:	68e3      	ldr	r3, [r4, #12]
 8001356:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	2a45      	cmp	r2, #69	; 0x45
 800135e:	4605      	mov	r5, r0
 8001360:	d02a      	beq.n	80013b8 <d_template_args_1+0xac>
 8001362:	2000      	movs	r0, #0
 8001364:	b003      	add	sp, #12
 8001366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800136a:	4620      	mov	r0, r4
 800136c:	f001 faee 	bl	800294c <d_expr_primary>
 8001370:	4605      	mov	r5, r0
 8001372:	2300      	movs	r3, #0
 8001374:	212f      	movs	r1, #47	; 0x2f
 8001376:	462a      	mov	r2, r5
 8001378:	4620      	mov	r0, r4
 800137a:	2d00      	cmp	r5, #0
 800137c:	d0f1      	beq.n	8001362 <d_template_args_1+0x56>
 800137e:	f7fe ff5f 	bl	8000240 <d_make_comp>
 8001382:	6030      	str	r0, [r6, #0]
 8001384:	f100 0608 	add.w	r6, r0, #8
 8001388:	2800      	cmp	r0, #0
 800138a:	d0ea      	beq.n	8001362 <d_template_args_1+0x56>
 800138c:	68e2      	ldr	r2, [r4, #12]
 800138e:	7813      	ldrb	r3, [r2, #0]
 8001390:	2b45      	cmp	r3, #69	; 0x45
 8001392:	d1ca      	bne.n	800132a <d_template_args_1+0x1e>
 8001394:	9801      	ldr	r0, [sp, #4]
 8001396:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800139a:	3201      	adds	r2, #1
 800139c:	60e2      	str	r2, [r4, #12]
 800139e:	b003      	add	sp, #12
 80013a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013a4:	4620      	mov	r0, r4
 80013a6:	f000 f815 	bl	80013d4 <d_template_args>
 80013aa:	4605      	mov	r5, r0
 80013ac:	e7e1      	b.n	8001372 <d_template_args_1+0x66>
 80013ae:	4620      	mov	r0, r4
 80013b0:	f000 f9d6 	bl	8001760 <d_type>
 80013b4:	4605      	mov	r5, r0
 80013b6:	e7dc      	b.n	8001372 <d_template_args_1+0x66>
 80013b8:	3301      	adds	r3, #1
 80013ba:	60e3      	str	r3, [r4, #12]
 80013bc:	e7d9      	b.n	8001372 <d_template_args_1+0x66>
 80013be:	3201      	adds	r2, #1
 80013c0:	2300      	movs	r3, #0
 80013c2:	60c2      	str	r2, [r0, #12]
 80013c4:	212f      	movs	r1, #47	; 0x2f
 80013c6:	461a      	mov	r2, r3
 80013c8:	b003      	add	sp, #12
 80013ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ce:	f7fe bf37 	b.w	8000240 <d_make_comp>
 80013d2:	bf00      	nop

080013d4 <d_template_args>:
 80013d4:	68c2      	ldr	r2, [r0, #12]
 80013d6:	7813      	ldrb	r3, [r2, #0]
 80013d8:	3b49      	subs	r3, #73	; 0x49
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d802      	bhi.n	80013e4 <d_template_args+0x10>
 80013de:	3201      	adds	r2, #1
 80013e0:	60c2      	str	r2, [r0, #12]
 80013e2:	e793      	b.n	800130c <d_template_args_1>
 80013e4:	2000      	movs	r0, #0
 80013e6:	4770      	bx	lr

080013e8 <d_name>:
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	68c2      	ldr	r2, [r0, #12]
 80013ee:	7813      	ldrb	r3, [r2, #0]
 80013f0:	3b4e      	subs	r3, #78	; 0x4e
 80013f2:	b085      	sub	sp, #20
 80013f4:	4605      	mov	r5, r0
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	d870      	bhi.n	80014dc <d_name+0xf4>
 80013fa:	e8df f003 	tbb	[pc, r3]
 80013fe:	6f1e      	.short	0x6f1e
 8001400:	5b6f6f6f 	.word	0x5b6f6f6f
 8001404:	6f6f176f 	.word	0x6f6f176f
 8001408:	6f6f      	.short	0x6f6f
 800140a:	07          	.byte	0x07
 800140b:	00          	.byte	0x00
 800140c:	3201      	adds	r2, #1
 800140e:	2100      	movs	r1, #0
 8001410:	60c2      	str	r2, [r0, #12]
 8001412:	f000 ffbd 	bl	8002390 <d_encoding>
 8001416:	68eb      	ldr	r3, [r5, #12]
 8001418:	7819      	ldrb	r1, [r3, #0]
 800141a:	2945      	cmp	r1, #69	; 0x45
 800141c:	4606      	mov	r6, r0
 800141e:	f000 8099 	beq.w	8001554 <d_name+0x16c>
 8001422:	2200      	movs	r2, #0
 8001424:	4610      	mov	r0, r2
 8001426:	b005      	add	sp, #20
 8001428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800142c:	f000 fe40 	bl	80020b0 <d_unqualified_name>
 8001430:	4602      	mov	r2, r0
 8001432:	4610      	mov	r0, r2
 8001434:	b005      	add	sp, #20
 8001436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800143a:	3201      	adds	r2, #1
 800143c:	60c2      	str	r2, [r0, #12]
 800143e:	a903      	add	r1, sp, #12
 8001440:	2201      	movs	r2, #1
 8001442:	f7fe ff49 	bl	80002d8 <d_cv_qualifiers>
 8001446:	4681      	mov	r9, r0
 8001448:	2800      	cmp	r0, #0
 800144a:	d0ea      	beq.n	8001422 <d_name+0x3a>
 800144c:	2100      	movs	r1, #0
 800144e:	4628      	mov	r0, r5
 8001450:	f7fe ffa8 	bl	80003a4 <d_ref_qualifier>
 8001454:	68ea      	ldr	r2, [r5, #12]
 8001456:	4eb4      	ldr	r6, [pc, #720]	; (8001728 <d_name+0x340>)
 8001458:	7814      	ldrb	r4, [r2, #0]
 800145a:	4680      	mov	r8, r0
 800145c:	2700      	movs	r7, #0
 800145e:	2c00      	cmp	r4, #0
 8001460:	f000 80e8 	beq.w	8001634 <d_name+0x24c>
 8001464:	2c44      	cmp	r4, #68	; 0x44
 8001466:	f000 80d1 	beq.w	800160c <d_name+0x224>
 800146a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b1c      	cmp	r3, #28
 8001472:	f240 80a8 	bls.w	80015c6 <d_name+0x1de>
 8001476:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800147a:	2b19      	cmp	r3, #25
 800147c:	f240 80a8 	bls.w	80015d0 <d_name+0x1e8>
 8001480:	2c55      	cmp	r4, #85	; 0x55
 8001482:	f000 80de 	beq.w	8001642 <d_name+0x25a>
 8001486:	2c53      	cmp	r4, #83	; 0x53
 8001488:	f000 80f1 	beq.w	800166e <d_name+0x286>
 800148c:	2c49      	cmp	r4, #73	; 0x49
 800148e:	f000 80da 	beq.w	8001646 <d_name+0x25e>
 8001492:	2c54      	cmp	r4, #84	; 0x54
 8001494:	f000 811f 	beq.w	80016d6 <d_name+0x2ee>
 8001498:	2c45      	cmp	r4, #69	; 0x45
 800149a:	f000 814b 	beq.w	8001734 <d_name+0x34c>
 800149e:	2c4d      	cmp	r4, #77	; 0x4d
 80014a0:	f040 80c8 	bne.w	8001634 <d_name+0x24c>
 80014a4:	2f00      	cmp	r7, #0
 80014a6:	f000 80c5 	beq.w	8001634 <d_name+0x24c>
 80014aa:	1c53      	adds	r3, r2, #1
 80014ac:	60eb      	str	r3, [r5, #12]
 80014ae:	7854      	ldrb	r4, [r2, #1]
 80014b0:	461a      	mov	r2, r3
 80014b2:	e7d4      	b.n	800145e <d_name+0x76>
 80014b4:	7853      	ldrb	r3, [r2, #1]
 80014b6:	2b74      	cmp	r3, #116	; 0x74
 80014b8:	d031      	beq.n	800151e <d_name+0x136>
 80014ba:	2100      	movs	r1, #0
 80014bc:	f7ff f90a 	bl	80006d4 <d_substitution>
 80014c0:	68eb      	ldr	r3, [r5, #12]
 80014c2:	7819      	ldrb	r1, [r3, #0]
 80014c4:	2949      	cmp	r1, #73	; 0x49
 80014c6:	4602      	mov	r2, r0
 80014c8:	d1b3      	bne.n	8001432 <d_name+0x4a>
 80014ca:	3301      	adds	r3, #1
 80014cc:	60eb      	str	r3, [r5, #12]
 80014ce:	4628      	mov	r0, r5
 80014d0:	9201      	str	r2, [sp, #4]
 80014d2:	f7ff ff1b 	bl	800130c <d_template_args_1>
 80014d6:	9a01      	ldr	r2, [sp, #4]
 80014d8:	4603      	mov	r3, r0
 80014da:	e017      	b.n	800150c <d_name+0x124>
 80014dc:	f000 fde8 	bl	80020b0 <d_unqualified_name>
 80014e0:	68eb      	ldr	r3, [r5, #12]
 80014e2:	7819      	ldrb	r1, [r3, #0]
 80014e4:	2949      	cmp	r1, #73	; 0x49
 80014e6:	4602      	mov	r2, r0
 80014e8:	d1a3      	bne.n	8001432 <d_name+0x4a>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d099      	beq.n	8001422 <d_name+0x3a>
 80014ee:	6a29      	ldr	r1, [r5, #32]
 80014f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80014f2:	4281      	cmp	r1, r0
 80014f4:	da95      	bge.n	8001422 <d_name+0x3a>
 80014f6:	69ec      	ldr	r4, [r5, #28]
 80014f8:	1c48      	adds	r0, r1, #1
 80014fa:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 80014fe:	6228      	str	r0, [r5, #32]
 8001500:	7819      	ldrb	r1, [r3, #0]
 8001502:	3949      	subs	r1, #73	; 0x49
 8001504:	2901      	cmp	r1, #1
 8001506:	bf88      	it	hi
 8001508:	2300      	movhi	r3, #0
 800150a:	d9de      	bls.n	80014ca <d_name+0xe2>
 800150c:	4628      	mov	r0, r5
 800150e:	2104      	movs	r1, #4
 8001510:	f7fe fe96 	bl	8000240 <d_make_comp>
 8001514:	4602      	mov	r2, r0
 8001516:	4610      	mov	r0, r2
 8001518:	b005      	add	sp, #20
 800151a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800151e:	6943      	ldr	r3, [r0, #20]
 8001520:	6981      	ldr	r1, [r0, #24]
 8001522:	3202      	adds	r2, #2
 8001524:	428b      	cmp	r3, r1
 8001526:	60c2      	str	r2, [r0, #12]
 8001528:	f2c0 80ab 	blt.w	8001682 <d_name+0x29a>
 800152c:	2400      	movs	r4, #0
 800152e:	4628      	mov	r0, r5
 8001530:	f000 fdbe 	bl	80020b0 <d_unqualified_name>
 8001534:	4622      	mov	r2, r4
 8001536:	4603      	mov	r3, r0
 8001538:	2101      	movs	r1, #1
 800153a:	4628      	mov	r0, r5
 800153c:	f7fe fe80 	bl	8000240 <d_make_comp>
 8001540:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001542:	68eb      	ldr	r3, [r5, #12]
 8001544:	3103      	adds	r1, #3
 8001546:	6329      	str	r1, [r5, #48]	; 0x30
 8001548:	7819      	ldrb	r1, [r3, #0]
 800154a:	2949      	cmp	r1, #73	; 0x49
 800154c:	4602      	mov	r2, r0
 800154e:	f47f af70 	bne.w	8001432 <d_name+0x4a>
 8001552:	e7ca      	b.n	80014ea <d_name+0x102>
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60ea      	str	r2, [r5, #12]
 8001558:	7859      	ldrb	r1, [r3, #1]
 800155a:	2973      	cmp	r1, #115	; 0x73
 800155c:	f000 80a3 	beq.w	80016a6 <d_name+0x2be>
 8001560:	2964      	cmp	r1, #100	; 0x64
 8001562:	f000 80bc 	beq.w	80016de <d_name+0x2f6>
 8001566:	4628      	mov	r0, r5
 8001568:	f7ff ff3e 	bl	80013e8 <d_name>
 800156c:	4604      	mov	r4, r0
 800156e:	2800      	cmp	r0, #0
 8001570:	d072      	beq.n	8001658 <d_name+0x270>
 8001572:	7803      	ldrb	r3, [r0, #0]
 8001574:	2b45      	cmp	r3, #69	; 0x45
 8001576:	f000 8094 	beq.w	80016a2 <d_name+0x2ba>
 800157a:	2b47      	cmp	r3, #71	; 0x47
 800157c:	f000 8091 	beq.w	80016a2 <d_name+0x2ba>
 8001580:	68eb      	ldr	r3, [r5, #12]
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	2a5f      	cmp	r2, #95	; 0x5f
 8001586:	f040 808c 	bne.w	80016a2 <d_name+0x2ba>
 800158a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800158e:	4628      	mov	r0, r5
 8001590:	3301      	adds	r3, #1
 8001592:	f840 3f0c 	str.w	r3, [r0, #12]!
 8001596:	f7fe ffa5 	bl	80004e4 <d_number.isra.0>
 800159a:	2800      	cmp	r0, #0
 800159c:	f6ff af41 	blt.w	8001422 <d_name+0x3a>
 80015a0:	1c7b      	adds	r3, r7, #1
 80015a2:	d07e      	beq.n	80016a2 <d_name+0x2ba>
 80015a4:	696b      	ldr	r3, [r5, #20]
 80015a6:	69aa      	ldr	r2, [r5, #24]
 80015a8:	4293      	cmp	r3, r2
 80015aa:	da55      	bge.n	8001658 <d_name+0x270>
 80015ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80015b0:	6929      	ldr	r1, [r5, #16]
 80015b2:	3301      	adds	r3, #1
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	616b      	str	r3, [r5, #20]
 80015b8:	188b      	adds	r3, r1, r2
 80015ba:	d04e      	beq.n	800165a <d_name+0x272>
 80015bc:	2046      	movs	r0, #70	; 0x46
 80015be:	5488      	strb	r0, [r1, r2]
 80015c0:	609f      	str	r7, [r3, #8]
 80015c2:	605c      	str	r4, [r3, #4]
 80015c4:	e049      	b.n	800165a <d_name+0x272>
 80015c6:	fa26 f303 	lsr.w	r3, r6, r3
 80015ca:	07d9      	lsls	r1, r3, #31
 80015cc:	f57f af53 	bpl.w	8001476 <d_name+0x8e>
 80015d0:	4628      	mov	r0, r5
 80015d2:	f000 fd6d 	bl	80020b0 <d_unqualified_name>
 80015d6:	b347      	cbz	r7, 800162a <d_name+0x242>
 80015d8:	2101      	movs	r1, #1
 80015da:	4603      	mov	r3, r0
 80015dc:	463a      	mov	r2, r7
 80015de:	4628      	mov	r0, r5
 80015e0:	f7fe fe2e 	bl	8000240 <d_make_comp>
 80015e4:	4607      	mov	r7, r0
 80015e6:	2c53      	cmp	r4, #83	; 0x53
 80015e8:	d01c      	beq.n	8001624 <d_name+0x23c>
 80015ea:	68ea      	ldr	r2, [r5, #12]
 80015ec:	7814      	ldrb	r4, [r2, #0]
 80015ee:	2c45      	cmp	r4, #69	; 0x45
 80015f0:	f43f af3b 	beq.w	800146a <d_name+0x82>
 80015f4:	b1f7      	cbz	r7, 8001634 <d_name+0x24c>
 80015f6:	6a2b      	ldr	r3, [r5, #32]
 80015f8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80015fa:	428b      	cmp	r3, r1
 80015fc:	da1a      	bge.n	8001634 <d_name+0x24c>
 80015fe:	69e9      	ldr	r1, [r5, #28]
 8001600:	1c58      	adds	r0, r3, #1
 8001602:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 8001606:	6228      	str	r0, [r5, #32]
 8001608:	7814      	ldrb	r4, [r2, #0]
 800160a:	e728      	b.n	800145e <d_name+0x76>
 800160c:	7853      	ldrb	r3, [r2, #1]
 800160e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001612:	2b54      	cmp	r3, #84	; 0x54
 8001614:	4628      	mov	r0, r5
 8001616:	d00a      	beq.n	800162e <d_name+0x246>
 8001618:	f000 fd4a 	bl	80020b0 <d_unqualified_name>
 800161c:	2f00      	cmp	r7, #0
 800161e:	d1db      	bne.n	80015d8 <d_name+0x1f0>
 8001620:	4607      	mov	r7, r0
 8001622:	e7e2      	b.n	80015ea <d_name+0x202>
 8001624:	68ea      	ldr	r2, [r5, #12]
 8001626:	7814      	ldrb	r4, [r2, #0]
 8001628:	e719      	b.n	800145e <d_name+0x76>
 800162a:	4607      	mov	r7, r0
 800162c:	e7db      	b.n	80015e6 <d_name+0x1fe>
 800162e:	f000 f897 	bl	8001760 <d_type>
 8001632:	e7f3      	b.n	800161c <d_name+0x234>
 8001634:	2200      	movs	r2, #0
 8001636:	4610      	mov	r0, r2
 8001638:	f8c9 2000 	str.w	r2, [r9]
 800163c:	b005      	add	sp, #20
 800163e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001642:	4628      	mov	r0, r5
 8001644:	e7e8      	b.n	8001618 <d_name+0x230>
 8001646:	2f00      	cmp	r7, #0
 8001648:	d0f4      	beq.n	8001634 <d_name+0x24c>
 800164a:	3201      	adds	r2, #1
 800164c:	60ea      	str	r2, [r5, #12]
 800164e:	4628      	mov	r0, r5
 8001650:	f7ff fe5c 	bl	800130c <d_template_args_1>
 8001654:	2104      	movs	r1, #4
 8001656:	e7c0      	b.n	80015da <d_name+0x1f2>
 8001658:	2300      	movs	r3, #0
 800165a:	4632      	mov	r2, r6
 800165c:	4628      	mov	r0, r5
 800165e:	2102      	movs	r1, #2
 8001660:	f7fe fdee 	bl	8000240 <d_make_comp>
 8001664:	4602      	mov	r2, r0
 8001666:	4610      	mov	r0, r2
 8001668:	b005      	add	sp, #20
 800166a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800166e:	2101      	movs	r1, #1
 8001670:	4628      	mov	r0, r5
 8001672:	f7ff f82f 	bl	80006d4 <d_substitution>
 8001676:	2f00      	cmp	r7, #0
 8001678:	d1ae      	bne.n	80015d8 <d_name+0x1f0>
 800167a:	68ea      	ldr	r2, [r5, #12]
 800167c:	4607      	mov	r7, r0
 800167e:	7814      	ldrb	r4, [r2, #0]
 8001680:	e6ed      	b.n	800145e <d_name+0x76>
 8001682:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001686:	6901      	ldr	r1, [r0, #16]
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	3301      	adds	r3, #1
 800168c:	188c      	adds	r4, r1, r2
 800168e:	6143      	str	r3, [r0, #20]
 8001690:	f43f af4d 	beq.w	800152e <d_name+0x146>
 8001694:	2300      	movs	r3, #0
 8001696:	548b      	strb	r3, [r1, r2]
 8001698:	4824      	ldr	r0, [pc, #144]	; (800172c <d_name+0x344>)
 800169a:	6060      	str	r0, [r4, #4]
 800169c:	2303      	movs	r3, #3
 800169e:	60a3      	str	r3, [r4, #8]
 80016a0:	e745      	b.n	800152e <d_name+0x146>
 80016a2:	4623      	mov	r3, r4
 80016a4:	e7d9      	b.n	800165a <d_name+0x272>
 80016a6:	1c9a      	adds	r2, r3, #2
 80016a8:	60ea      	str	r2, [r5, #12]
 80016aa:	789a      	ldrb	r2, [r3, #2]
 80016ac:	2a5f      	cmp	r2, #95	; 0x5f
 80016ae:	d032      	beq.n	8001716 <d_name+0x32e>
 80016b0:	696b      	ldr	r3, [r5, #20]
 80016b2:	69aa      	ldr	r2, [r5, #24]
 80016b4:	4293      	cmp	r3, r2
 80016b6:	dacf      	bge.n	8001658 <d_name+0x270>
 80016b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80016bc:	6929      	ldr	r1, [r5, #16]
 80016be:	3301      	adds	r3, #1
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	616b      	str	r3, [r5, #20]
 80016c4:	188b      	adds	r3, r1, r2
 80016c6:	d0c8      	beq.n	800165a <d_name+0x272>
 80016c8:	2400      	movs	r4, #0
 80016ca:	548c      	strb	r4, [r1, r2]
 80016cc:	4818      	ldr	r0, [pc, #96]	; (8001730 <d_name+0x348>)
 80016ce:	6058      	str	r0, [r3, #4]
 80016d0:	220e      	movs	r2, #14
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	e7c1      	b.n	800165a <d_name+0x272>
 80016d6:	4628      	mov	r0, r5
 80016d8:	f7fe ff62 	bl	80005a0 <d_template_param>
 80016dc:	e79e      	b.n	800161c <d_name+0x234>
 80016de:	3302      	adds	r3, #2
 80016e0:	60eb      	str	r3, [r5, #12]
 80016e2:	4628      	mov	r0, r5
 80016e4:	f7fe ff40 	bl	8000568 <d_compact_number>
 80016e8:	1e07      	subs	r7, r0, #0
 80016ea:	f6ff ae9a 	blt.w	8001422 <d_name+0x3a>
 80016ee:	4628      	mov	r0, r5
 80016f0:	f7ff fe7a 	bl	80013e8 <d_name>
 80016f4:	4604      	mov	r4, r0
 80016f6:	2800      	cmp	r0, #0
 80016f8:	f43f af54 	beq.w	80015a4 <d_name+0x1bc>
 80016fc:	7803      	ldrb	r3, [r0, #0]
 80016fe:	2b45      	cmp	r3, #69	; 0x45
 8001700:	f43f af50 	beq.w	80015a4 <d_name+0x1bc>
 8001704:	2b47      	cmp	r3, #71	; 0x47
 8001706:	f43f af4d 	beq.w	80015a4 <d_name+0x1bc>
 800170a:	68eb      	ldr	r3, [r5, #12]
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	2a5f      	cmp	r2, #95	; 0x5f
 8001710:	f47f af48 	bne.w	80015a4 <d_name+0x1bc>
 8001714:	e73b      	b.n	800158e <d_name+0x1a6>
 8001716:	4628      	mov	r0, r5
 8001718:	3303      	adds	r3, #3
 800171a:	f840 3f0c 	str.w	r3, [r0, #12]!
 800171e:	f7fe fee1 	bl	80004e4 <d_number.isra.0>
 8001722:	2800      	cmp	r0, #0
 8001724:	dac4      	bge.n	80016b0 <d_name+0x2c8>
 8001726:	e67c      	b.n	8001422 <d_name+0x3a>
 8001728:	100803ff 	.word	0x100803ff
 800172c:	08019f68 	.word	0x08019f68
 8001730:	08019f58 	.word	0x08019f58
 8001734:	f8c9 7000 	str.w	r7, [r9]
 8001738:	2f00      	cmp	r7, #0
 800173a:	f43f ae72 	beq.w	8001422 <d_name+0x3a>
 800173e:	f1b8 0f00 	cmp.w	r8, #0
 8001742:	d004      	beq.n	800174e <d_name+0x366>
 8001744:	9b03      	ldr	r3, [sp, #12]
 8001746:	f8c8 3004 	str.w	r3, [r8, #4]
 800174a:	f8cd 800c 	str.w	r8, [sp, #12]
 800174e:	7813      	ldrb	r3, [r2, #0]
 8001750:	2b45      	cmp	r3, #69	; 0x45
 8001752:	f47f ae66 	bne.w	8001422 <d_name+0x3a>
 8001756:	3201      	adds	r2, #1
 8001758:	60ea      	str	r2, [r5, #12]
 800175a:	9a03      	ldr	r2, [sp, #12]
 800175c:	e669      	b.n	8001432 <d_name+0x4a>
 800175e:	bf00      	nop

08001760 <d_type>:
 8001760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001764:	68c2      	ldr	r2, [r0, #12]
 8001766:	7813      	ldrb	r3, [r2, #0]
 8001768:	2b72      	cmp	r3, #114	; 0x72
 800176a:	b083      	sub	sp, #12
 800176c:	4604      	mov	r4, r0
 800176e:	d058      	beq.n	8001822 <d_type+0xc2>
 8001770:	2b56      	cmp	r3, #86	; 0x56
 8001772:	d056      	beq.n	8001822 <d_type+0xc2>
 8001774:	2b4b      	cmp	r3, #75	; 0x4b
 8001776:	d054      	beq.n	8001822 <d_type+0xc2>
 8001778:	2b44      	cmp	r3, #68	; 0x44
 800177a:	f000 809f 	beq.w	80018bc <d_type+0x15c>
 800177e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001782:	294a      	cmp	r1, #74	; 0x4a
 8001784:	f200 808a 	bhi.w	800189c <d_type+0x13c>
 8001788:	e8df f011 	tbh	[pc, r1, lsl #1]
 800178c:	012a012a 	.word	0x012a012a
 8001790:	012a012a 	.word	0x012a012a
 8001794:	012a012a 	.word	0x012a012a
 8001798:	012a012a 	.word	0x012a012a
 800179c:	012a012a 	.word	0x012a012a
 80017a0:	00880088 	.word	0x00880088
 80017a4:	00880088 	.word	0x00880088
 80017a8:	00880088 	.word	0x00880088
 80017ac:	020b0088 	.word	0x020b0088
 80017b0:	01520088 	.word	0x01520088
 80017b4:	00880088 	.word	0x00880088
 80017b8:	0160014c 	.word	0x0160014c
 80017bc:	00880088 	.word	0x00880088
 80017c0:	00880088 	.word	0x00880088
 80017c4:	016e0088 	.word	0x016e0088
 80017c8:	0186012a 	.word	0x0186012a
 80017cc:	008801c3 	.word	0x008801c3
 80017d0:	01a20194 	.word	0x01a20194
 80017d4:	01f301d1 	.word	0x01f301d1
 80017d8:	00880088 	.word	0x00880088
 80017dc:	00880088 	.word	0x00880088
 80017e0:	0088012a 	.word	0x0088012a
 80017e4:	00880088 	.word	0x00880088
 80017e8:	00880088 	.word	0x00880088
 80017ec:	010c0088 	.word	0x010c0088
 80017f0:	010c010c 	.word	0x010c010c
 80017f4:	010c010c 	.word	0x010c010c
 80017f8:	010c010c 	.word	0x010c010c
 80017fc:	010c010c 	.word	0x010c010c
 8001800:	0088010c 	.word	0x0088010c
 8001804:	010c010c 	.word	0x010c010c
 8001808:	010c010c 	.word	0x010c010c
 800180c:	00880088 	.word	0x00880088
 8001810:	010c0088 	.word	0x010c0088
 8001814:	013e010c 	.word	0x013e010c
 8001818:	010c010c 	.word	0x010c010c
 800181c:	010c010c 	.word	0x010c010c
 8001820:	010c      	.short	0x010c
 8001822:	2200      	movs	r2, #0
 8001824:	a901      	add	r1, sp, #4
 8001826:	4620      	mov	r0, r4
 8001828:	f7fe fd56 	bl	80002d8 <d_cv_qualifiers>
 800182c:	4605      	mov	r5, r0
 800182e:	2800      	cmp	r0, #0
 8001830:	d034      	beq.n	800189c <d_type+0x13c>
 8001832:	68e3      	ldr	r3, [r4, #12]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b46      	cmp	r3, #70	; 0x46
 8001838:	4620      	mov	r0, r4
 800183a:	d034      	beq.n	80018a6 <d_type+0x146>
 800183c:	f7ff ff90 	bl	8001760 <d_type>
 8001840:	6028      	str	r0, [r5, #0]
 8001842:	b358      	cbz	r0, 800189c <d_type+0x13c>
 8001844:	7803      	ldrb	r3, [r0, #0]
 8001846:	3b1f      	subs	r3, #31
 8001848:	2b01      	cmp	r3, #1
 800184a:	d930      	bls.n	80018ae <d_type+0x14e>
 800184c:	9a01      	ldr	r2, [sp, #4]
 800184e:	b32a      	cbz	r2, 800189c <d_type+0x13c>
 8001850:	6a23      	ldr	r3, [r4, #32]
 8001852:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001854:	428b      	cmp	r3, r1
 8001856:	da21      	bge.n	800189c <d_type+0x13c>
 8001858:	69e0      	ldr	r0, [r4, #28]
 800185a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800185e:	9d01      	ldr	r5, [sp, #4]
 8001860:	1c59      	adds	r1, r3, #1
 8001862:	4628      	mov	r0, r5
 8001864:	6221      	str	r1, [r4, #32]
 8001866:	b003      	add	sp, #12
 8001868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800186c:	2301      	movs	r3, #1
 800186e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001870:	6343      	str	r3, [r0, #52]	; 0x34
 8001872:	f7ff fb51 	bl	8000f18 <d_expression_1>
 8001876:	6365      	str	r5, [r4, #52]	; 0x34
 8001878:	4602      	mov	r2, r0
 800187a:	2300      	movs	r3, #0
 800187c:	2142      	movs	r1, #66	; 0x42
 800187e:	4620      	mov	r0, r4
 8001880:	f7fe fcde 	bl	8000240 <d_make_comp>
 8001884:	4605      	mov	r5, r0
 8001886:	9001      	str	r0, [sp, #4]
 8001888:	b140      	cbz	r0, 800189c <d_type+0x13c>
 800188a:	68e3      	ldr	r3, [r4, #12]
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	b12a      	cbz	r2, 800189c <d_type+0x13c>
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	60e2      	str	r2, [r4, #12]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b45      	cmp	r3, #69	; 0x45
 8001898:	f000 80aa 	beq.w	80019f0 <d_type+0x290>
 800189c:	2500      	movs	r5, #0
 800189e:	4628      	mov	r0, r5
 80018a0:	b003      	add	sp, #12
 80018a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018a6:	f000 fd53 	bl	8002350 <d_function_type>
 80018aa:	6028      	str	r0, [r5, #0]
 80018ac:	e7c9      	b.n	8001842 <d_type+0xe2>
 80018ae:	9a01      	ldr	r2, [sp, #4]
 80018b0:	6843      	ldr	r3, [r0, #4]
 80018b2:	6042      	str	r2, [r0, #4]
 80018b4:	682a      	ldr	r2, [r5, #0]
 80018b6:	9201      	str	r2, [sp, #4]
 80018b8:	602b      	str	r3, [r5, #0]
 80018ba:	e7c7      	b.n	800184c <d_type+0xec>
 80018bc:	7853      	ldrb	r3, [r2, #1]
 80018be:	2b78      	cmp	r3, #120	; 0x78
 80018c0:	d0af      	beq.n	8001822 <d_type+0xc2>
 80018c2:	1c53      	adds	r3, r2, #1
 80018c4:	60c3      	str	r3, [r0, #12]
 80018c6:	7853      	ldrb	r3, [r2, #1]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0e7      	beq.n	800189c <d_type+0x13c>
 80018cc:	1c93      	adds	r3, r2, #2
 80018ce:	60c3      	str	r3, [r0, #12]
 80018d0:	7853      	ldrb	r3, [r2, #1]
 80018d2:	3b46      	subs	r3, #70	; 0x46
 80018d4:	2b30      	cmp	r3, #48	; 0x30
 80018d6:	d8e1      	bhi.n	800189c <d_type+0x13c>
 80018d8:	a101      	add	r1, pc, #4	; (adr r1, 80018e0 <d_type+0x180>)
 80018da:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018de:	bf00      	nop
 80018e0:	08001dcb 	.word	0x08001dcb
 80018e4:	0800189d 	.word	0x0800189d
 80018e8:	0800189d 	.word	0x0800189d
 80018ec:	0800189d 	.word	0x0800189d
 80018f0:	0800189d 	.word	0x0800189d
 80018f4:	0800189d 	.word	0x0800189d
 80018f8:	0800189d 	.word	0x0800189d
 80018fc:	0800189d 	.word	0x0800189d
 8001900:	0800189d 	.word	0x0800189d
 8001904:	0800189d 	.word	0x0800189d
 8001908:	0800189d 	.word	0x0800189d
 800190c:	0800189d 	.word	0x0800189d
 8001910:	0800189d 	.word	0x0800189d
 8001914:	0800189d 	.word	0x0800189d
 8001918:	0800186d 	.word	0x0800186d
 800191c:	0800189d 	.word	0x0800189d
 8001920:	0800189d 	.word	0x0800189d
 8001924:	0800189d 	.word	0x0800189d
 8001928:	0800189d 	.word	0x0800189d
 800192c:	0800189d 	.word	0x0800189d
 8001930:	0800189d 	.word	0x0800189d
 8001934:	0800189d 	.word	0x0800189d
 8001938:	0800189d 	.word	0x0800189d
 800193c:	0800189d 	.word	0x0800189d
 8001940:	0800189d 	.word	0x0800189d
 8001944:	0800189d 	.word	0x0800189d
 8001948:	0800189d 	.word	0x0800189d
 800194c:	08001d9f 	.word	0x08001d9f
 8001950:	0800189d 	.word	0x0800189d
 8001954:	08001d73 	.word	0x08001d73
 8001958:	08001d53 	.word	0x08001d53
 800195c:	08001d29 	.word	0x08001d29
 8001960:	08001cfb 	.word	0x08001cfb
 8001964:	0800189d 	.word	0x0800189d
 8001968:	08001ccd 	.word	0x08001ccd
 800196c:	08001ca9 	.word	0x08001ca9
 8001970:	0800189d 	.word	0x0800189d
 8001974:	0800189d 	.word	0x0800189d
 8001978:	0800189d 	.word	0x0800189d
 800197c:	0800189d 	.word	0x0800189d
 8001980:	08001c6f 	.word	0x08001c6f
 8001984:	0800189d 	.word	0x0800189d
 8001988:	08001c59 	.word	0x08001c59
 800198c:	0800189d 	.word	0x0800189d
 8001990:	0800189d 	.word	0x0800189d
 8001994:	08001c2b 	.word	0x08001c2b
 8001998:	0800186d 	.word	0x0800186d
 800199c:	0800189d 	.word	0x0800189d
 80019a0:	08001bf5 	.word	0x08001bf5
 80019a4:	6960      	ldr	r0, [r4, #20]
 80019a6:	69a5      	ldr	r5, [r4, #24]
 80019a8:	49bc      	ldr	r1, [pc, #752]	; (8001c9c <d_type+0x53c>)
 80019aa:	3b61      	subs	r3, #97	; 0x61
 80019ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019b0:	42a8      	cmp	r0, r5
 80019b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80019b6:	f280 823a 	bge.w	8001e2e <d_type+0x6ce>
 80019ba:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80019be:	6926      	ldr	r6, [r4, #16]
 80019c0:	0089      	lsls	r1, r1, #2
 80019c2:	3001      	adds	r0, #1
 80019c4:	1875      	adds	r5, r6, r1
 80019c6:	6160      	str	r0, [r4, #20]
 80019c8:	f000 8231 	beq.w	8001e2e <d_type+0x6ce>
 80019cc:	2027      	movs	r0, #39	; 0x27
 80019ce:	5470      	strb	r0, [r6, r1]
 80019d0:	606b      	str	r3, [r5, #4]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019d6:	3201      	adds	r2, #1
 80019d8:	440b      	add	r3, r1
 80019da:	60e2      	str	r2, [r4, #12]
 80019dc:	6323      	str	r3, [r4, #48]	; 0x30
 80019de:	e75e      	b.n	800189e <d_type+0x13e>
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fd01 	bl	80013e8 <d_name>
 80019e6:	4605      	mov	r5, r0
 80019e8:	9001      	str	r0, [sp, #4]
 80019ea:	2d00      	cmp	r5, #0
 80019ec:	f43f af56 	beq.w	800189c <d_type+0x13c>
 80019f0:	6a23      	ldr	r3, [r4, #32]
 80019f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019f4:	4293      	cmp	r3, r2
 80019f6:	f6bf af51 	bge.w	800189c <d_type+0x13c>
 80019fa:	69e1      	ldr	r1, [r4, #28]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8001a02:	9d01      	ldr	r5, [sp, #4]
 8001a04:	6222      	str	r2, [r4, #32]
 8001a06:	e74a      	b.n	800189e <d_type+0x13e>
 8001a08:	3201      	adds	r2, #1
 8001a0a:	60e2      	str	r2, [r4, #12]
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7fe fde9 	bl	80005e4 <d_source_name>
 8001a12:	2300      	movs	r3, #0
 8001a14:	4602      	mov	r2, r0
 8001a16:	2128      	movs	r1, #40	; 0x28
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f7fe fc11 	bl	8000240 <d_make_comp>
 8001a1e:	4605      	mov	r5, r0
 8001a20:	9001      	str	r0, [sp, #4]
 8001a22:	e7e2      	b.n	80019ea <d_type+0x28a>
 8001a24:	4620      	mov	r0, r4
 8001a26:	f000 fc93 	bl	8002350 <d_function_type>
 8001a2a:	4605      	mov	r5, r0
 8001a2c:	9001      	str	r0, [sp, #4]
 8001a2e:	e7dc      	b.n	80019ea <d_type+0x28a>
 8001a30:	3201      	adds	r2, #1
 8001a32:	60e2      	str	r2, [r4, #12]
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff fe93 	bl	8001760 <d_type>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	2125      	movs	r1, #37	; 0x25
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7fe fbfd 	bl	8000240 <d_make_comp>
 8001a46:	4605      	mov	r5, r0
 8001a48:	9001      	str	r0, [sp, #4]
 8001a4a:	e7ce      	b.n	80019ea <d_type+0x28a>
 8001a4c:	3201      	adds	r2, #1
 8001a4e:	60e2      	str	r2, [r4, #12]
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff fe85 	bl	8001760 <d_type>
 8001a56:	2300      	movs	r3, #0
 8001a58:	4602      	mov	r2, r0
 8001a5a:	2126      	movs	r1, #38	; 0x26
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f7fe fbef 	bl	8000240 <d_make_comp>
 8001a62:	4605      	mov	r5, r0
 8001a64:	9001      	str	r0, [sp, #4]
 8001a66:	e7c0      	b.n	80019ea <d_type+0x28a>
 8001a68:	3201      	adds	r2, #1
 8001a6a:	60e2      	str	r2, [r4, #12]
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff fe77 	bl	8001760 <d_type>
 8001a72:	4605      	mov	r5, r0
 8001a74:	2800      	cmp	r0, #0
 8001a76:	f000 80bb 	beq.w	8001bf0 <d_type+0x490>
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff fe70 	bl	8001760 <d_type>
 8001a80:	2800      	cmp	r0, #0
 8001a82:	f000 80b5 	beq.w	8001bf0 <d_type+0x490>
 8001a86:	4603      	mov	r3, r0
 8001a88:	462a      	mov	r2, r5
 8001a8a:	212b      	movs	r1, #43	; 0x2b
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7fe fbd7 	bl	8000240 <d_make_comp>
 8001a92:	4605      	mov	r5, r0
 8001a94:	9501      	str	r5, [sp, #4]
 8001a96:	e7a8      	b.n	80019ea <d_type+0x28a>
 8001a98:	3201      	adds	r2, #1
 8001a9a:	60e2      	str	r2, [r4, #12]
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f7ff fe5f 	bl	8001760 <d_type>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	2124      	movs	r1, #36	; 0x24
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7fe fbc9 	bl	8000240 <d_make_comp>
 8001aae:	4605      	mov	r5, r0
 8001ab0:	9001      	str	r0, [sp, #4]
 8001ab2:	e79a      	b.n	80019ea <d_type+0x28a>
 8001ab4:	3201      	adds	r2, #1
 8001ab6:	60e2      	str	r2, [r4, #12]
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff fe51 	bl	8001760 <d_type>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	2123      	movs	r1, #35	; 0x23
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7fe fbbb 	bl	8000240 <d_make_comp>
 8001aca:	4605      	mov	r5, r0
 8001acc:	9001      	str	r0, [sp, #4]
 8001ace:	e78c      	b.n	80019ea <d_type+0x28a>
 8001ad0:	7853      	ldrb	r3, [r2, #1]
 8001ad2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001ad6:	2a09      	cmp	r2, #9
 8001ad8:	d905      	bls.n	8001ae6 <d_type+0x386>
 8001ada:	2b5f      	cmp	r3, #95	; 0x5f
 8001adc:	d003      	beq.n	8001ae6 <d_type+0x386>
 8001ade:	3b41      	subs	r3, #65	; 0x41
 8001ae0:	2b19      	cmp	r3, #25
 8001ae2:	f200 81c3 	bhi.w	8001e6c <d_type+0x70c>
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7fe fdf3 	bl	80006d4 <d_substitution>
 8001aee:	68e3      	ldr	r3, [r4, #12]
 8001af0:	9001      	str	r0, [sp, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b49      	cmp	r3, #73	; 0x49
 8001af6:	4605      	mov	r5, r0
 8001af8:	f47f aed1 	bne.w	800189e <d_type+0x13e>
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff fc69 	bl	80013d4 <d_template_args>
 8001b02:	462a      	mov	r2, r5
 8001b04:	4603      	mov	r3, r0
 8001b06:	2104      	movs	r1, #4
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7fe fb99 	bl	8000240 <d_make_comp>
 8001b0e:	4605      	mov	r5, r0
 8001b10:	e7c0      	b.n	8001a94 <d_type+0x334>
 8001b12:	3201      	adds	r2, #1
 8001b14:	60e2      	str	r2, [r4, #12]
 8001b16:	4620      	mov	r0, r4
 8001b18:	f7ff fe22 	bl	8001760 <d_type>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4602      	mov	r2, r0
 8001b20:	2122      	movs	r1, #34	; 0x22
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7fe fb8c 	bl	8000240 <d_make_comp>
 8001b28:	4605      	mov	r5, r0
 8001b2a:	9001      	str	r0, [sp, #4]
 8001b2c:	e75d      	b.n	80019ea <d_type+0x28a>
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7fe fd36 	bl	80005a0 <d_template_param>
 8001b34:	68e6      	ldr	r6, [r4, #12]
 8001b36:	9001      	str	r0, [sp, #4]
 8001b38:	7833      	ldrb	r3, [r6, #0]
 8001b3a:	2b49      	cmp	r3, #73	; 0x49
 8001b3c:	4605      	mov	r5, r0
 8001b3e:	f47f af54 	bne.w	80019ea <d_type+0x28a>
 8001b42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f040 81a9 	bne.w	8001e9c <d_type+0x73c>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	f43f aea6 	beq.w	800189c <d_type+0x13c>
 8001b50:	6a23      	ldr	r3, [r4, #32]
 8001b52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b54:	4293      	cmp	r3, r2
 8001b56:	f6bf aea1 	bge.w	800189c <d_type+0x13c>
 8001b5a:	69e1      	ldr	r1, [r4, #28]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001b62:	6222      	str	r2, [r4, #32]
 8001b64:	4620      	mov	r0, r4
 8001b66:	9d01      	ldr	r5, [sp, #4]
 8001b68:	f7ff fc34 	bl	80013d4 <d_template_args>
 8001b6c:	462a      	mov	r2, r5
 8001b6e:	4603      	mov	r3, r0
 8001b70:	e7c9      	b.n	8001b06 <d_type+0x3a6>
 8001b72:	3201      	adds	r2, #1
 8001b74:	60e2      	str	r2, [r4, #12]
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7fe fd34 	bl	80005e4 <d_source_name>
 8001b7c:	68e3      	ldr	r3, [r4, #12]
 8001b7e:	9001      	str	r0, [sp, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b49      	cmp	r3, #73	; 0x49
 8001b84:	4605      	mov	r5, r0
 8001b86:	f000 817e 	beq.w	8001e86 <d_type+0x726>
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fde8 	bl	8001760 <d_type>
 8001b90:	9b01      	ldr	r3, [sp, #4]
 8001b92:	4602      	mov	r2, r0
 8001b94:	2121      	movs	r1, #33	; 0x21
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7fe fb52 	bl	8000240 <d_make_comp>
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	9001      	str	r0, [sp, #4]
 8001ba0:	e723      	b.n	80019ea <d_type+0x28a>
 8001ba2:	1c51      	adds	r1, r2, #1
 8001ba4:	60e1      	str	r1, [r4, #12]
 8001ba6:	7853      	ldrb	r3, [r2, #1]
 8001ba8:	2b5f      	cmp	r3, #95	; 0x5f
 8001baa:	f000 8144 	beq.w	8001e36 <d_type+0x6d6>
 8001bae:	3b30      	subs	r3, #48	; 0x30
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	f200 814e 	bhi.w	8001e52 <d_type+0x6f2>
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	3301      	adds	r3, #1
 8001bba:	60e3      	str	r3, [r4, #12]
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	3a30      	subs	r2, #48	; 0x30
 8001bc0:	2a09      	cmp	r2, #9
 8001bc2:	d9f9      	bls.n	8001bb8 <d_type+0x458>
 8001bc4:	6962      	ldr	r2, [r4, #20]
 8001bc6:	69a0      	ldr	r0, [r4, #24]
 8001bc8:	4282      	cmp	r2, r0
 8001bca:	da11      	bge.n	8001bf0 <d_type+0x490>
 8001bcc:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8001bd0:	6926      	ldr	r6, [r4, #16]
 8001bd2:	0080      	lsls	r0, r0, #2
 8001bd4:	3201      	adds	r2, #1
 8001bd6:	1835      	adds	r5, r6, r0
 8001bd8:	6162      	str	r2, [r4, #20]
 8001bda:	d009      	beq.n	8001bf0 <d_type+0x490>
 8001bdc:	1a5a      	subs	r2, r3, r1
 8001bde:	d007      	beq.n	8001bf0 <d_type+0x490>
 8001be0:	2700      	movs	r7, #0
 8001be2:	5437      	strb	r7, [r6, r0]
 8001be4:	6069      	str	r1, [r5, #4]
 8001be6:	60aa      	str	r2, [r5, #8]
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	2a5f      	cmp	r2, #95	; 0x5f
 8001bec:	f000 8190 	beq.w	8001f10 <d_type+0x7b0>
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	e74f      	b.n	8001a94 <d_type+0x334>
 8001bf4:	7893      	ldrb	r3, [r2, #2]
 8001bf6:	2b5f      	cmp	r3, #95	; 0x5f
 8001bf8:	f000 8180 	beq.w	8001efc <d_type+0x79c>
 8001bfc:	f7fe fc9c 	bl	8000538 <d_number_component>
 8001c00:	4605      	mov	r5, r0
 8001c02:	2d00      	cmp	r5, #0
 8001c04:	f43f af46 	beq.w	8001a94 <d_type+0x334>
 8001c08:	68e3      	ldr	r3, [r4, #12]
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	2a5f      	cmp	r2, #95	; 0x5f
 8001c0e:	d1ef      	bne.n	8001bf0 <d_type+0x490>
 8001c10:	3301      	adds	r3, #1
 8001c12:	60e3      	str	r3, [r4, #12]
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7ff fda3 	bl	8001760 <d_type>
 8001c1a:	462a      	mov	r2, r5
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	212d      	movs	r1, #45	; 0x2d
 8001c20:	4620      	mov	r0, r4
 8001c22:	f7fe fb0d 	bl	8000240 <d_make_comp>
 8001c26:	4605      	mov	r5, r0
 8001c28:	e734      	b.n	8001a94 <d_type+0x334>
 8001c2a:	6942      	ldr	r2, [r0, #20]
 8001c2c:	6983      	ldr	r3, [r0, #24]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	f280 80fd 	bge.w	8001e2e <d_type+0x6ce>
 8001c34:	230c      	movs	r3, #12
 8001c36:	6901      	ldr	r1, [r0, #16]
 8001c38:	fb03 f302 	mul.w	r3, r3, r2
 8001c3c:	18cd      	adds	r5, r1, r3
 8001c3e:	f102 0201 	add.w	r2, r2, #1
 8001c42:	6142      	str	r2, [r0, #20]
 8001c44:	f000 80f3 	beq.w	8001e2e <d_type+0x6ce>
 8001c48:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <d_type+0x540>)
 8001c4a:	2027      	movs	r0, #39	; 0x27
 8001c4c:	54c8      	strb	r0, [r1, r3]
 8001c4e:	606a      	str	r2, [r5, #4]
 8001c50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c52:	3308      	adds	r3, #8
 8001c54:	6323      	str	r3, [r4, #48]	; 0x30
 8001c56:	e622      	b.n	800189e <d_type+0x13e>
 8001c58:	f7ff fd82 	bl	8001760 <d_type>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4602      	mov	r2, r0
 8001c60:	214a      	movs	r1, #74	; 0x4a
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7fe faec 	bl	8000240 <d_make_comp>
 8001c68:	4605      	mov	r5, r0
 8001c6a:	9001      	str	r0, [sp, #4]
 8001c6c:	e6bd      	b.n	80019ea <d_type+0x28a>
 8001c6e:	6942      	ldr	r2, [r0, #20]
 8001c70:	6983      	ldr	r3, [r0, #24]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	f280 80db 	bge.w	8001e2e <d_type+0x6ce>
 8001c78:	230c      	movs	r3, #12
 8001c7a:	6901      	ldr	r1, [r0, #16]
 8001c7c:	fb03 f302 	mul.w	r3, r3, r2
 8001c80:	18cd      	adds	r5, r1, r3
 8001c82:	f102 0201 	add.w	r2, r2, #1
 8001c86:	6142      	str	r2, [r0, #20]
 8001c88:	f000 80d1 	beq.w	8001e2e <d_type+0x6ce>
 8001c8c:	2027      	movs	r0, #39	; 0x27
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <d_type+0x544>)
 8001c90:	54c8      	strb	r0, [r1, r3]
 8001c92:	606a      	str	r2, [r5, #4]
 8001c94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c96:	3311      	adds	r3, #17
 8001c98:	6323      	str	r3, [r4, #48]	; 0x30
 8001c9a:	e600      	b.n	800189e <d_type+0x13e>
 8001c9c:	08018efc 	.word	0x08018efc
 8001ca0:	08019154 	.word	0x08019154
 8001ca4:	0801917c 	.word	0x0801917c
 8001ca8:	6942      	ldr	r2, [r0, #20]
 8001caa:	6983      	ldr	r3, [r0, #24]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f280 80be 	bge.w	8001e2e <d_type+0x6ce>
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	6901      	ldr	r1, [r0, #16]
 8001cb6:	fb03 f302 	mul.w	r3, r3, r2
 8001cba:	18cd      	adds	r5, r1, r3
 8001cbc:	f102 0201 	add.w	r2, r2, #1
 8001cc0:	6142      	str	r2, [r0, #20]
 8001cc2:	f000 80b4 	beq.w	8001e2e <d_type+0x6ce>
 8001cc6:	2027      	movs	r0, #39	; 0x27
 8001cc8:	4a92      	ldr	r2, [pc, #584]	; (8001f14 <d_type+0x7b4>)
 8001cca:	e7bf      	b.n	8001c4c <d_type+0x4ec>
 8001ccc:	6942      	ldr	r2, [r0, #20]
 8001cce:	6983      	ldr	r3, [r0, #24]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f280 80ac 	bge.w	8001e2e <d_type+0x6ce>
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	6901      	ldr	r1, [r0, #16]
 8001cda:	fb03 f302 	mul.w	r3, r3, r2
 8001cde:	18cd      	adds	r5, r1, r3
 8001ce0:	f102 0201 	add.w	r2, r2, #1
 8001ce4:	6142      	str	r2, [r0, #20]
 8001ce6:	f000 80a2 	beq.w	8001e2e <d_type+0x6ce>
 8001cea:	2027      	movs	r0, #39	; 0x27
 8001cec:	4a8a      	ldr	r2, [pc, #552]	; (8001f18 <d_type+0x7b8>)
 8001cee:	54c8      	strb	r0, [r1, r3]
 8001cf0:	606a      	str	r2, [r5, #4]
 8001cf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8001cf8:	e5d1      	b.n	800189e <d_type+0x13e>
 8001cfa:	6942      	ldr	r2, [r0, #20]
 8001cfc:	6983      	ldr	r3, [r0, #24]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	f280 8095 	bge.w	8001e2e <d_type+0x6ce>
 8001d04:	230c      	movs	r3, #12
 8001d06:	6901      	ldr	r1, [r0, #16]
 8001d08:	fb03 f302 	mul.w	r3, r3, r2
 8001d0c:	18cd      	adds	r5, r1, r3
 8001d0e:	f102 0201 	add.w	r2, r2, #1
 8001d12:	6142      	str	r2, [r0, #20]
 8001d14:	f000 808b 	beq.w	8001e2e <d_type+0x6ce>
 8001d18:	4a80      	ldr	r2, [pc, #512]	; (8001f1c <d_type+0x7bc>)
 8001d1a:	2027      	movs	r0, #39	; 0x27
 8001d1c:	54c8      	strb	r0, [r1, r3]
 8001d1e:	606a      	str	r2, [r5, #4]
 8001d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d22:	3309      	adds	r3, #9
 8001d24:	6323      	str	r3, [r4, #48]	; 0x30
 8001d26:	e5ba      	b.n	800189e <d_type+0x13e>
 8001d28:	6942      	ldr	r2, [r0, #20]
 8001d2a:	6983      	ldr	r3, [r0, #24]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	da7e      	bge.n	8001e2e <d_type+0x6ce>
 8001d30:	230c      	movs	r3, #12
 8001d32:	6901      	ldr	r1, [r0, #16]
 8001d34:	fb03 f302 	mul.w	r3, r3, r2
 8001d38:	18cd      	adds	r5, r1, r3
 8001d3a:	f102 0201 	add.w	r2, r2, #1
 8001d3e:	6142      	str	r2, [r0, #20]
 8001d40:	d075      	beq.n	8001e2e <d_type+0x6ce>
 8001d42:	2027      	movs	r0, #39	; 0x27
 8001d44:	4a76      	ldr	r2, [pc, #472]	; (8001f20 <d_type+0x7c0>)
 8001d46:	54c8      	strb	r0, [r1, r3]
 8001d48:	606a      	str	r2, [r5, #4]
 8001d4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d4c:	330a      	adds	r3, #10
 8001d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8001d50:	e5a5      	b.n	800189e <d_type+0x13e>
 8001d52:	6942      	ldr	r2, [r0, #20]
 8001d54:	6983      	ldr	r3, [r0, #24]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	da69      	bge.n	8001e2e <d_type+0x6ce>
 8001d5a:	230c      	movs	r3, #12
 8001d5c:	6901      	ldr	r1, [r0, #16]
 8001d5e:	fb03 f302 	mul.w	r3, r3, r2
 8001d62:	18cd      	adds	r5, r1, r3
 8001d64:	f102 0201 	add.w	r2, r2, #1
 8001d68:	6142      	str	r2, [r0, #20]
 8001d6a:	d060      	beq.n	8001e2e <d_type+0x6ce>
 8001d6c:	2027      	movs	r0, #39	; 0x27
 8001d6e:	4a6d      	ldr	r2, [pc, #436]	; (8001f24 <d_type+0x7c4>)
 8001d70:	e7d4      	b.n	8001d1c <d_type+0x5bc>
 8001d72:	6942      	ldr	r2, [r0, #20]
 8001d74:	6983      	ldr	r3, [r0, #24]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	f6bf ad90 	bge.w	800189c <d_type+0x13c>
 8001d7c:	230c      	movs	r3, #12
 8001d7e:	6901      	ldr	r1, [r0, #16]
 8001d80:	fb03 f302 	mul.w	r3, r3, r2
 8001d84:	18cd      	adds	r5, r1, r3
 8001d86:	f102 0201 	add.w	r2, r2, #1
 8001d8a:	6142      	str	r2, [r0, #20]
 8001d8c:	f43f ad87 	beq.w	800189e <d_type+0x13e>
 8001d90:	2000      	movs	r0, #0
 8001d92:	54c8      	strb	r0, [r1, r3]
 8001d94:	4a64      	ldr	r2, [pc, #400]	; (8001f28 <d_type+0x7c8>)
 8001d96:	606a      	str	r2, [r5, #4]
 8001d98:	230e      	movs	r3, #14
 8001d9a:	60ab      	str	r3, [r5, #8]
 8001d9c:	e57f      	b.n	800189e <d_type+0x13e>
 8001d9e:	6942      	ldr	r2, [r0, #20]
 8001da0:	6983      	ldr	r3, [r0, #24]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	f6bf ad7a 	bge.w	800189c <d_type+0x13c>
 8001da8:	230c      	movs	r3, #12
 8001daa:	6901      	ldr	r1, [r0, #16]
 8001dac:	fb03 f302 	mul.w	r3, r3, r2
 8001db0:	18cd      	adds	r5, r1, r3
 8001db2:	f102 0201 	add.w	r2, r2, #1
 8001db6:	6142      	str	r2, [r0, #20]
 8001db8:	f43f ad71 	beq.w	800189e <d_type+0x13e>
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	54c8      	strb	r0, [r1, r3]
 8001dc0:	4a5a      	ldr	r2, [pc, #360]	; (8001f2c <d_type+0x7cc>)
 8001dc2:	606a      	str	r2, [r5, #4]
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	60ab      	str	r3, [r5, #8]
 8001dc8:	e569      	b.n	800189e <d_type+0x13e>
 8001dca:	6943      	ldr	r3, [r0, #20]
 8001dcc:	6981      	ldr	r1, [r0, #24]
 8001dce:	428b      	cmp	r3, r1
 8001dd0:	da7a      	bge.n	8001ec8 <d_type+0x768>
 8001dd2:	6900      	ldr	r0, [r0, #16]
 8001dd4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001dd8:	0089      	lsls	r1, r1, #2
 8001dda:	3301      	adds	r3, #1
 8001ddc:	1845      	adds	r5, r0, r1
 8001dde:	262c      	movs	r6, #44	; 0x2c
 8001de0:	6163      	str	r3, [r4, #20]
 8001de2:	9501      	str	r5, [sp, #4]
 8001de4:	5446      	strb	r6, [r0, r1]
 8001de6:	7893      	ldrb	r3, [r2, #2]
 8001de8:	3b30      	subs	r3, #48	; 0x30
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b09      	cmp	r3, #9
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	812b      	strh	r3, [r5, #8]
 8001df6:	d97b      	bls.n	8001ef0 <d_type+0x790>
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7ff fcb1 	bl	8001760 <d_type>
 8001dfe:	9b01      	ldr	r3, [sp, #4]
 8001e00:	6068      	str	r0, [r5, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f43f ad49 	beq.w	800189c <d_type+0x13c>
 8001e0a:	f104 000c 	add.w	r0, r4, #12
 8001e0e:	f7fe fb69 	bl	80004e4 <d_number.isra.0>
 8001e12:	68e2      	ldr	r2, [r4, #12]
 8001e14:	7813      	ldrb	r3, [r2, #0]
 8001e16:	b113      	cbz	r3, 8001e1e <d_type+0x6be>
 8001e18:	1c53      	adds	r3, r2, #1
 8001e1a:	60e3      	str	r3, [r4, #12]
 8001e1c:	7813      	ldrb	r3, [r2, #0]
 8001e1e:	9d01      	ldr	r5, [sp, #4]
 8001e20:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	816b      	strh	r3, [r5, #10]
 8001e2c:	e537      	b.n	800189e <d_type+0x13e>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	deff      	udf	#255	; 0xff
 8001e36:	2500      	movs	r5, #0
 8001e38:	3101      	adds	r1, #1
 8001e3a:	60e1      	str	r1, [r4, #12]
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff fc8f 	bl	8001760 <d_type>
 8001e42:	462a      	mov	r2, r5
 8001e44:	4603      	mov	r3, r0
 8001e46:	212a      	movs	r1, #42	; 0x2a
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7fe f9f9 	bl	8000240 <d_make_comp>
 8001e4e:	4605      	mov	r5, r0
 8001e50:	e620      	b.n	8001a94 <d_type+0x334>
 8001e52:	2301      	movs	r3, #1
 8001e54:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e56:	6363      	str	r3, [r4, #52]	; 0x34
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7ff f85d 	bl	8000f18 <d_expression_1>
 8001e5e:	6365      	str	r5, [r4, #52]	; 0x34
 8001e60:	4605      	mov	r5, r0
 8001e62:	2800      	cmp	r0, #0
 8001e64:	f43f aec4 	beq.w	8001bf0 <d_type+0x490>
 8001e68:	68e3      	ldr	r3, [r4, #12]
 8001e6a:	e6bd      	b.n	8001be8 <d_type+0x488>
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff fabb 	bl	80013e8 <d_name>
 8001e72:	4605      	mov	r5, r0
 8001e74:	9001      	str	r0, [sp, #4]
 8001e76:	2800      	cmp	r0, #0
 8001e78:	f43f ad10 	beq.w	800189c <d_type+0x13c>
 8001e7c:	7803      	ldrb	r3, [r0, #0]
 8001e7e:	2b18      	cmp	r3, #24
 8001e80:	f47f adb6 	bne.w	80019f0 <d_type+0x290>
 8001e84:	e50b      	b.n	800189e <d_type+0x13e>
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff faa4 	bl	80013d4 <d_template_args>
 8001e8c:	462a      	mov	r2, r5
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2104      	movs	r1, #4
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7fe f9d4 	bl	8000240 <d_make_comp>
 8001e98:	9001      	str	r0, [sp, #4]
 8001e9a:	e676      	b.n	8001b8a <d_type+0x42a>
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001ea2:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001ea6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001ea8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001eaa:	f7ff fa93 	bl	80013d4 <d_template_args>
 8001eae:	68e2      	ldr	r2, [r4, #12]
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	2a49      	cmp	r2, #73	; 0x49
 8001eb4:	d00b      	beq.n	8001ece <d_type+0x76e>
 8001eb6:	6325      	str	r5, [r4, #48]	; 0x30
 8001eb8:	60e6      	str	r6, [r4, #12]
 8001eba:	f8c4 9014 	str.w	r9, [r4, #20]
 8001ebe:	f8c4 8020 	str.w	r8, [r4, #32]
 8001ec2:	62a7      	str	r7, [r4, #40]	; 0x28
 8001ec4:	9d01      	ldr	r5, [sp, #4]
 8001ec6:	e590      	b.n	80019ea <d_type+0x28a>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	701b      	strb	r3, [r3, #0]
 8001ecc:	deff      	udf	#255	; 0xff
 8001ece:	9b01      	ldr	r3, [sp, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f43f ace3 	beq.w	800189c <d_type+0x13c>
 8001ed6:	6a22      	ldr	r2, [r4, #32]
 8001ed8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001eda:	428a      	cmp	r2, r1
 8001edc:	f6bf acde 	bge.w	800189c <d_type+0x13c>
 8001ee0:	69e5      	ldr	r5, [r4, #28]
 8001ee2:	1c51      	adds	r1, r2, #1
 8001ee4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8001ee8:	9a01      	ldr	r2, [sp, #4]
 8001eea:	6221      	str	r1, [r4, #32]
 8001eec:	4603      	mov	r3, r0
 8001eee:	e60a      	b.n	8001b06 <d_type+0x3a6>
 8001ef0:	f104 000c 	add.w	r0, r4, #12
 8001ef4:	f7fe faf6 	bl	80004e4 <d_number.isra.0>
 8001ef8:	9d01      	ldr	r5, [sp, #4]
 8001efa:	e77d      	b.n	8001df8 <d_type+0x698>
 8001efc:	3203      	adds	r2, #3
 8001efe:	2301      	movs	r3, #1
 8001f00:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001f02:	60c2      	str	r2, [r0, #12]
 8001f04:	6343      	str	r3, [r0, #52]	; 0x34
 8001f06:	f7ff f807 	bl	8000f18 <d_expression_1>
 8001f0a:	6366      	str	r6, [r4, #52]	; 0x34
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	e678      	b.n	8001c02 <d_type+0x4a2>
 8001f10:	4619      	mov	r1, r3
 8001f12:	e791      	b.n	8001e38 <d_type+0x6d8>
 8001f14:	08019168 	.word	0x08019168
 8001f18:	08019140 	.word	0x08019140
 8001f1c:	08019104 	.word	0x08019104
 8001f20:	0801912c 	.word	0x0801912c
 8001f24:	08019118 	.word	0x08019118
 8001f28:	08019f74 	.word	0x08019f74
 8001f2c:	08019f6c 	.word	0x08019f6c

08001f30 <d_operator_name>:
 8001f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f32:	68c3      	ldr	r3, [r0, #12]
 8001f34:	781e      	ldrb	r6, [r3, #0]
 8001f36:	4684      	mov	ip, r0
 8001f38:	b326      	cbz	r6, 8001f84 <d_operator_name+0x54>
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	60c2      	str	r2, [r0, #12]
 8001f3e:	785a      	ldrb	r2, [r3, #1]
 8001f40:	781e      	ldrb	r6, [r3, #0]
 8001f42:	2a00      	cmp	r2, #0
 8001f44:	d058      	beq.n	8001ff8 <d_operator_name+0xc8>
 8001f46:	1c9a      	adds	r2, r3, #2
 8001f48:	60c2      	str	r2, [r0, #12]
 8001f4a:	2e76      	cmp	r6, #118	; 0x76
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001f52:	d043      	beq.n	8001fdc <d_operator_name+0xac>
 8001f54:	2e63      	cmp	r6, #99	; 0x63
 8001f56:	d116      	bne.n	8001f86 <d_operator_name+0x56>
 8001f58:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 8001f5c:	d113      	bne.n	8001f86 <d_operator_name+0x56>
 8001f5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f60:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	6383      	str	r3, [r0, #56]	; 0x38
 8001f6a:	f7ff fbf9 	bl	8001760 <d_type>
 8001f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f70:	4602      	mov	r2, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d052      	beq.n	800201c <d_operator_name+0xec>
 8001f76:	2300      	movs	r3, #0
 8001f78:	2134      	movs	r1, #52	; 0x34
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7fe f960 	bl	8000240 <d_make_comp>
 8001f80:	63a5      	str	r5, [r4, #56]	; 0x38
 8001f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f84:	46b6      	mov	lr, r6
 8001f86:	4c28      	ldr	r4, [pc, #160]	; (8002028 <d_operator_name+0xf8>)
 8001f88:	2043      	movs	r0, #67	; 0x43
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	e004      	b.n	8001f98 <d_operator_name+0x68>
 8001f8e:	bf94      	ite	ls
 8001f90:	1c5a      	addls	r2, r3, #1
 8001f92:	4618      	movhi	r0, r3
 8001f94:	4282      	cmp	r2, r0
 8001f96:	d02d      	beq.n	8001ff4 <d_operator_name+0xc4>
 8001f98:	1a83      	subs	r3, r0, r2
 8001f9a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f9e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001fa2:	0119      	lsls	r1, r3, #4
 8001fa4:	1867      	adds	r7, r4, r1
 8001fa6:	5861      	ldr	r1, [r4, r1]
 8001fa8:	780d      	ldrb	r5, [r1, #0]
 8001faa:	42b5      	cmp	r5, r6
 8001fac:	d1ef      	bne.n	8001f8e <d_operator_name+0x5e>
 8001fae:	7849      	ldrb	r1, [r1, #1]
 8001fb0:	4571      	cmp	r1, lr
 8001fb2:	d1ec      	bne.n	8001f8e <d_operator_name+0x5e>
 8001fb4:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8001fb8:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	da19      	bge.n	8001ff4 <d_operator_name+0xc4>
 8001fc0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001fc4:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	3301      	adds	r3, #1
 8001fcc:	1888      	adds	r0, r1, r2
 8001fce:	f8cc 3014 	str.w	r3, [ip, #20]
 8001fd2:	d013      	beq.n	8001ffc <d_operator_name+0xcc>
 8001fd4:	2331      	movs	r3, #49	; 0x31
 8001fd6:	548b      	strb	r3, [r1, r2]
 8001fd8:	6047      	str	r7, [r0, #4]
 8001fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fdc:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 8001fe0:	b2eb      	uxtb	r3, r5
 8001fe2:	2b09      	cmp	r3, #9
 8001fe4:	d8cf      	bhi.n	8001f86 <d_operator_name+0x56>
 8001fe6:	f7fe fafd 	bl	80005e4 <d_source_name>
 8001fea:	6963      	ldr	r3, [r4, #20]
 8001fec:	69a2      	ldr	r2, [r4, #24]
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	4601      	mov	r1, r0
 8001ff2:	db04      	blt.n	8001ffe <d_operator_name+0xce>
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ff8:	4696      	mov	lr, r2
 8001ffa:	e7c4      	b.n	8001f86 <d_operator_name+0x56>
 8001ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ffe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002002:	6926      	ldr	r6, [r4, #16]
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	3301      	adds	r3, #1
 8002008:	18b0      	adds	r0, r6, r2
 800200a:	6163      	str	r3, [r4, #20]
 800200c:	d0f2      	beq.n	8001ff4 <d_operator_name+0xc4>
 800200e:	2900      	cmp	r1, #0
 8002010:	d0f0      	beq.n	8001ff4 <d_operator_name+0xc4>
 8002012:	2332      	movs	r3, #50	; 0x32
 8002014:	54b3      	strb	r3, [r6, r2]
 8002016:	6045      	str	r5, [r0, #4]
 8002018:	6081      	str	r1, [r0, #8]
 800201a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800201c:	2133      	movs	r1, #51	; 0x33
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe f90e 	bl	8000240 <d_make_comp>
 8002024:	e7ac      	b.n	8001f80 <d_operator_name+0x50>
 8002026:	bf00      	nop
 8002028:	08019190 	.word	0x08019190

0800202c <d_parmlist>:
 800202c:	b530      	push	{r4, r5, lr}
 800202e:	68c2      	ldr	r2, [r0, #12]
 8002030:	b083      	sub	sp, #12
 8002032:	2300      	movs	r3, #0
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	7813      	ldrb	r3, [r2, #0]
 8002038:	b343      	cbz	r3, 800208c <d_parmlist+0x60>
 800203a:	2b45      	cmp	r3, #69	; 0x45
 800203c:	d026      	beq.n	800208c <d_parmlist+0x60>
 800203e:	2b2e      	cmp	r3, #46	; 0x2e
 8002040:	d024      	beq.n	800208c <d_parmlist+0x60>
 8002042:	4604      	mov	r4, r0
 8002044:	ad01      	add	r5, sp, #4
 8002046:	e015      	b.n	8002074 <d_parmlist+0x48>
 8002048:	2b4f      	cmp	r3, #79	; 0x4f
 800204a:	d016      	beq.n	800207a <d_parmlist+0x4e>
 800204c:	f7ff fb88 	bl	8001760 <d_type>
 8002050:	2300      	movs	r3, #0
 8002052:	4602      	mov	r2, r0
 8002054:	212e      	movs	r1, #46	; 0x2e
 8002056:	b1c8      	cbz	r0, 800208c <d_parmlist+0x60>
 8002058:	4620      	mov	r0, r4
 800205a:	f7fe f8f1 	bl	8000240 <d_make_comp>
 800205e:	6028      	str	r0, [r5, #0]
 8002060:	b1a0      	cbz	r0, 800208c <d_parmlist+0x60>
 8002062:	68e2      	ldr	r2, [r4, #12]
 8002064:	7813      	ldrb	r3, [r2, #0]
 8002066:	f100 0508 	add.w	r5, r0, #8
 800206a:	b14b      	cbz	r3, 8002080 <d_parmlist+0x54>
 800206c:	2b45      	cmp	r3, #69	; 0x45
 800206e:	d007      	beq.n	8002080 <d_parmlist+0x54>
 8002070:	2b2e      	cmp	r3, #46	; 0x2e
 8002072:	d005      	beq.n	8002080 <d_parmlist+0x54>
 8002074:	2b52      	cmp	r3, #82	; 0x52
 8002076:	4620      	mov	r0, r4
 8002078:	d1e6      	bne.n	8002048 <d_parmlist+0x1c>
 800207a:	7853      	ldrb	r3, [r2, #1]
 800207c:	2b45      	cmp	r3, #69	; 0x45
 800207e:	d1e5      	bne.n	800204c <d_parmlist+0x20>
 8002080:	9801      	ldr	r0, [sp, #4]
 8002082:	b118      	cbz	r0, 800208c <d_parmlist+0x60>
 8002084:	6883      	ldr	r3, [r0, #8]
 8002086:	b123      	cbz	r3, 8002092 <d_parmlist+0x66>
 8002088:	b003      	add	sp, #12
 800208a:	bd30      	pop	{r4, r5, pc}
 800208c:	2000      	movs	r0, #0
 800208e:	b003      	add	sp, #12
 8002090:	bd30      	pop	{r4, r5, pc}
 8002092:	6842      	ldr	r2, [r0, #4]
 8002094:	7811      	ldrb	r1, [r2, #0]
 8002096:	2927      	cmp	r1, #39	; 0x27
 8002098:	d1f6      	bne.n	8002088 <d_parmlist+0x5c>
 800209a:	6852      	ldr	r2, [r2, #4]
 800209c:	7c11      	ldrb	r1, [r2, #16]
 800209e:	2909      	cmp	r1, #9
 80020a0:	d1f2      	bne.n	8002088 <d_parmlist+0x5c>
 80020a2:	6851      	ldr	r1, [r2, #4]
 80020a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020a6:	1a52      	subs	r2, r2, r1
 80020a8:	6322      	str	r2, [r4, #48]	; 0x30
 80020aa:	6043      	str	r3, [r0, #4]
 80020ac:	e7ec      	b.n	8002088 <d_parmlist+0x5c>
 80020ae:	bf00      	nop

080020b0 <d_unqualified_name>:
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b2:	68c1      	ldr	r1, [r0, #12]
 80020b4:	780b      	ldrb	r3, [r1, #0]
 80020b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80020ba:	2a09      	cmp	r2, #9
 80020bc:	4604      	mov	r4, r0
 80020be:	d920      	bls.n	8002102 <d_unqualified_name+0x52>
 80020c0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80020c4:	2a19      	cmp	r2, #25
 80020c6:	d925      	bls.n	8002114 <d_unqualified_name+0x64>
 80020c8:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 80020cc:	2a01      	cmp	r2, #1
 80020ce:	d92c      	bls.n	800212a <d_unqualified_name+0x7a>
 80020d0:	2b4c      	cmp	r3, #76	; 0x4c
 80020d2:	f000 8088 	beq.w	80021e6 <d_unqualified_name+0x136>
 80020d6:	2b55      	cmp	r3, #85	; 0x55
 80020d8:	d133      	bne.n	8002142 <d_unqualified_name+0x92>
 80020da:	784b      	ldrb	r3, [r1, #1]
 80020dc:	2b6c      	cmp	r3, #108	; 0x6c
 80020de:	d033      	beq.n	8002148 <d_unqualified_name+0x98>
 80020e0:	2b74      	cmp	r3, #116	; 0x74
 80020e2:	d12e      	bne.n	8002142 <d_unqualified_name+0x92>
 80020e4:	1c4b      	adds	r3, r1, #1
 80020e6:	60c3      	str	r3, [r0, #12]
 80020e8:	784b      	ldrb	r3, [r1, #1]
 80020ea:	2b74      	cmp	r3, #116	; 0x74
 80020ec:	d05a      	beq.n	80021a4 <d_unqualified_name+0xf4>
 80020ee:	2b42      	cmp	r3, #66	; 0x42
 80020f0:	f04f 0500 	mov.w	r5, #0
 80020f4:	d10c      	bne.n	8002110 <d_unqualified_name+0x60>
 80020f6:	4629      	mov	r1, r5
 80020f8:	4620      	mov	r0, r4
 80020fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80020fe:	f7fe bacd 	b.w	800069c <d_abi_tags>
 8002102:	f7fe fa6f 	bl	80005e4 <d_source_name>
 8002106:	68e3      	ldr	r3, [r4, #12]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4605      	mov	r5, r0
 800210c:	2b42      	cmp	r3, #66	; 0x42
 800210e:	d0f2      	beq.n	80020f6 <d_unqualified_name+0x46>
 8002110:	4628      	mov	r0, r5
 8002112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002114:	f7ff ff0c 	bl	8001f30 <d_operator_name>
 8002118:	4605      	mov	r5, r0
 800211a:	b118      	cbz	r0, 8002124 <d_unqualified_name+0x74>
 800211c:	7803      	ldrb	r3, [r0, #0]
 800211e:	2b31      	cmp	r3, #49	; 0x31
 8002120:	f000 80b2 	beq.w	8002288 <d_unqualified_name+0x1d8>
 8002124:	68e3      	ldr	r3, [r4, #12]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	e7f0      	b.n	800210c <d_unqualified_name+0x5c>
 800212a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800212c:	b125      	cbz	r5, 8002138 <d_unqualified_name+0x88>
 800212e:	782a      	ldrb	r2, [r5, #0]
 8002130:	2a00      	cmp	r2, #0
 8002132:	d06c      	beq.n	800220e <d_unqualified_name+0x15e>
 8002134:	2a18      	cmp	r2, #24
 8002136:	d06a      	beq.n	800220e <d_unqualified_name+0x15e>
 8002138:	2b43      	cmp	r3, #67	; 0x43
 800213a:	f000 80bf 	beq.w	80022bc <d_unqualified_name+0x20c>
 800213e:	2b44      	cmp	r3, #68	; 0x44
 8002140:	d06f      	beq.n	8002222 <d_unqualified_name+0x172>
 8002142:	2500      	movs	r5, #0
 8002144:	4628      	mov	r0, r5
 8002146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002148:	1c4b      	adds	r3, r1, #1
 800214a:	60c3      	str	r3, [r0, #12]
 800214c:	784b      	ldrb	r3, [r1, #1]
 800214e:	2b6c      	cmp	r3, #108	; 0x6c
 8002150:	d1cd      	bne.n	80020ee <d_unqualified_name+0x3e>
 8002152:	3102      	adds	r1, #2
 8002154:	60c1      	str	r1, [r0, #12]
 8002156:	f7ff ff69 	bl	800202c <d_parmlist>
 800215a:	4606      	mov	r6, r0
 800215c:	b1f0      	cbz	r0, 800219c <d_unqualified_name+0xec>
 800215e:	68e2      	ldr	r2, [r4, #12]
 8002160:	7813      	ldrb	r3, [r2, #0]
 8002162:	2b45      	cmp	r3, #69	; 0x45
 8002164:	d1c3      	bne.n	80020ee <d_unqualified_name+0x3e>
 8002166:	3201      	adds	r2, #1
 8002168:	60e2      	str	r2, [r4, #12]
 800216a:	4620      	mov	r0, r4
 800216c:	f7fe f9fc 	bl	8000568 <d_compact_number>
 8002170:	2800      	cmp	r0, #0
 8002172:	db13      	blt.n	800219c <d_unqualified_name+0xec>
 8002174:	6963      	ldr	r3, [r4, #20]
 8002176:	69a2      	ldr	r2, [r4, #24]
 8002178:	4293      	cmp	r3, r2
 800217a:	da0f      	bge.n	800219c <d_unqualified_name+0xec>
 800217c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002180:	6921      	ldr	r1, [r4, #16]
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	3301      	adds	r3, #1
 8002186:	188d      	adds	r5, r1, r2
 8002188:	6163      	str	r3, [r4, #20]
 800218a:	d0cb      	beq.n	8002124 <d_unqualified_name+0x74>
 800218c:	2345      	movs	r3, #69	; 0x45
 800218e:	548b      	strb	r3, [r1, r2]
 8002190:	606e      	str	r6, [r5, #4]
 8002192:	60a8      	str	r0, [r5, #8]
 8002194:	6a23      	ldr	r3, [r4, #32]
 8002196:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002198:	4293      	cmp	r3, r2
 800219a:	db1c      	blt.n	80021d6 <d_unqualified_name+0x126>
 800219c:	68e3      	ldr	r3, [r4, #12]
 800219e:	2500      	movs	r5, #0
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	e7b3      	b.n	800210c <d_unqualified_name+0x5c>
 80021a4:	3102      	adds	r1, #2
 80021a6:	60c1      	str	r1, [r0, #12]
 80021a8:	f7fe f9de 	bl	8000568 <d_compact_number>
 80021ac:	2800      	cmp	r0, #0
 80021ae:	dbf5      	blt.n	800219c <d_unqualified_name+0xec>
 80021b0:	6963      	ldr	r3, [r4, #20]
 80021b2:	69a2      	ldr	r2, [r4, #24]
 80021b4:	4293      	cmp	r3, r2
 80021b6:	daf1      	bge.n	800219c <d_unqualified_name+0xec>
 80021b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80021bc:	6921      	ldr	r1, [r4, #16]
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	3301      	adds	r3, #1
 80021c2:	188d      	adds	r5, r1, r2
 80021c4:	6163      	str	r3, [r4, #20]
 80021c6:	d0ad      	beq.n	8002124 <d_unqualified_name+0x74>
 80021c8:	2347      	movs	r3, #71	; 0x47
 80021ca:	548b      	strb	r3, [r1, r2]
 80021cc:	6068      	str	r0, [r5, #4]
 80021ce:	6a23      	ldr	r3, [r4, #32]
 80021d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021d2:	4293      	cmp	r3, r2
 80021d4:	dae2      	bge.n	800219c <d_unqualified_name+0xec>
 80021d6:	69e1      	ldr	r1, [r4, #28]
 80021d8:	68e2      	ldr	r2, [r4, #12]
 80021da:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 80021de:	3301      	adds	r3, #1
 80021e0:	6223      	str	r3, [r4, #32]
 80021e2:	7813      	ldrb	r3, [r2, #0]
 80021e4:	e792      	b.n	800210c <d_unqualified_name+0x5c>
 80021e6:	3101      	adds	r1, #1
 80021e8:	60c1      	str	r1, [r0, #12]
 80021ea:	f7fe f9fb 	bl	80005e4 <d_source_name>
 80021ee:	4605      	mov	r5, r0
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d0a6      	beq.n	8002142 <d_unqualified_name+0x92>
 80021f4:	68e2      	ldr	r2, [r4, #12]
 80021f6:	7813      	ldrb	r3, [r2, #0]
 80021f8:	2b5f      	cmp	r3, #95	; 0x5f
 80021fa:	d187      	bne.n	800210c <d_unqualified_name+0x5c>
 80021fc:	4620      	mov	r0, r4
 80021fe:	3201      	adds	r2, #1
 8002200:	f840 2f0c 	str.w	r2, [r0, #12]!
 8002204:	f7fe f96e 	bl	80004e4 <d_number.isra.0>
 8002208:	2800      	cmp	r0, #0
 800220a:	da8b      	bge.n	8002124 <d_unqualified_name+0x74>
 800220c:	e799      	b.n	8002142 <d_unqualified_name+0x92>
 800220e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002210:	68aa      	ldr	r2, [r5, #8]
 8002212:	4413      	add	r3, r2
 8002214:	6323      	str	r3, [r4, #48]	; 0x30
 8002216:	780b      	ldrb	r3, [r1, #0]
 8002218:	2b43      	cmp	r3, #67	; 0x43
 800221a:	d04f      	beq.n	80022bc <d_unqualified_name+0x20c>
 800221c:	2b44      	cmp	r3, #68	; 0x44
 800221e:	f47f af66 	bne.w	80020ee <d_unqualified_name+0x3e>
 8002222:	784b      	ldrb	r3, [r1, #1]
 8002224:	3b30      	subs	r3, #48	; 0x30
 8002226:	2b05      	cmp	r3, #5
 8002228:	d88b      	bhi.n	8002142 <d_unqualified_name+0x92>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <d_unqualified_name+0x180>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	08002285 	.word	0x08002285
 8002234:	08002249 	.word	0x08002249
 8002238:	08002281 	.word	0x08002281
 800223c:	08002143 	.word	0x08002143
 8002240:	0800227d 	.word	0x0800227d
 8002244:	08002279 	.word	0x08002279
 8002248:	2702      	movs	r7, #2
 800224a:	6963      	ldr	r3, [r4, #20]
 800224c:	69a2      	ldr	r2, [r4, #24]
 800224e:	1c88      	adds	r0, r1, #2
 8002250:	4293      	cmp	r3, r2
 8002252:	60e0      	str	r0, [r4, #12]
 8002254:	da56      	bge.n	8002304 <d_unqualified_name+0x254>
 8002256:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800225a:	6920      	ldr	r0, [r4, #16]
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	3301      	adds	r3, #1
 8002260:	1886      	adds	r6, r0, r2
 8002262:	6163      	str	r3, [r4, #20]
 8002264:	d005      	beq.n	8002272 <d_unqualified_name+0x1c2>
 8002266:	2d00      	cmp	r5, #0
 8002268:	d04f      	beq.n	800230a <d_unqualified_name+0x25a>
 800226a:	2308      	movs	r3, #8
 800226c:	5483      	strb	r3, [r0, r2]
 800226e:	7137      	strb	r7, [r6, #4]
 8002270:	60b5      	str	r5, [r6, #8]
 8002272:	788b      	ldrb	r3, [r1, #2]
 8002274:	4635      	mov	r5, r6
 8002276:	e749      	b.n	800210c <d_unqualified_name+0x5c>
 8002278:	2705      	movs	r7, #5
 800227a:	e7e6      	b.n	800224a <d_unqualified_name+0x19a>
 800227c:	2704      	movs	r7, #4
 800227e:	e7e4      	b.n	800224a <d_unqualified_name+0x19a>
 8002280:	2703      	movs	r7, #3
 8002282:	e7e2      	b.n	800224a <d_unqualified_name+0x19a>
 8002284:	2701      	movs	r7, #1
 8002286:	e7e0      	b.n	800224a <d_unqualified_name+0x19a>
 8002288:	6842      	ldr	r2, [r0, #4]
 800228a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800228c:	6896      	ldr	r6, [r2, #8]
 800228e:	6810      	ldr	r0, [r2, #0]
 8002290:	491f      	ldr	r1, [pc, #124]	; (8002310 <d_unqualified_name+0x260>)
 8002292:	3307      	adds	r3, #7
 8002294:	4433      	add	r3, r6
 8002296:	6323      	str	r3, [r4, #48]	; 0x30
 8002298:	f004 fb7a 	bl	8006990 <strcmp>
 800229c:	2800      	cmp	r0, #0
 800229e:	f47f af41 	bne.w	8002124 <d_unqualified_name+0x74>
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7fe f99e 	bl	80005e4 <d_source_name>
 80022a8:	462a      	mov	r2, r5
 80022aa:	4603      	mov	r3, r0
 80022ac:	2136      	movs	r1, #54	; 0x36
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7fd ffc6 	bl	8000240 <d_make_comp>
 80022b4:	68e3      	ldr	r3, [r4, #12]
 80022b6:	4605      	mov	r5, r0
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	e727      	b.n	800210c <d_unqualified_name+0x5c>
 80022bc:	784b      	ldrb	r3, [r1, #1]
 80022be:	3b31      	subs	r3, #49	; 0x31
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	f63f af3e 	bhi.w	8002142 <d_unqualified_name+0x92>
 80022c6:	e8df f003 	tbb	[pc, r3]
 80022ca:	0315      	.short	0x0315
 80022cc:	191b      	.short	0x191b
 80022ce:	17          	.byte	0x17
 80022cf:	00          	.byte	0x00
 80022d0:	2702      	movs	r7, #2
 80022d2:	6963      	ldr	r3, [r4, #20]
 80022d4:	69a2      	ldr	r2, [r4, #24]
 80022d6:	1c88      	adds	r0, r1, #2
 80022d8:	4293      	cmp	r3, r2
 80022da:	60e0      	str	r0, [r4, #12]
 80022dc:	da12      	bge.n	8002304 <d_unqualified_name+0x254>
 80022de:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80022e2:	6920      	ldr	r0, [r4, #16]
 80022e4:	0092      	lsls	r2, r2, #2
 80022e6:	3301      	adds	r3, #1
 80022e8:	1886      	adds	r6, r0, r2
 80022ea:	6163      	str	r3, [r4, #20]
 80022ec:	d0c1      	beq.n	8002272 <d_unqualified_name+0x1c2>
 80022ee:	b165      	cbz	r5, 800230a <d_unqualified_name+0x25a>
 80022f0:	2307      	movs	r3, #7
 80022f2:	e7bb      	b.n	800226c <d_unqualified_name+0x1bc>
 80022f4:	2701      	movs	r7, #1
 80022f6:	e7ec      	b.n	80022d2 <d_unqualified_name+0x222>
 80022f8:	2705      	movs	r7, #5
 80022fa:	e7ea      	b.n	80022d2 <d_unqualified_name+0x222>
 80022fc:	2704      	movs	r7, #4
 80022fe:	e7e8      	b.n	80022d2 <d_unqualified_name+0x222>
 8002300:	2703      	movs	r7, #3
 8002302:	e7e6      	b.n	80022d2 <d_unqualified_name+0x222>
 8002304:	788b      	ldrb	r3, [r1, #2]
 8002306:	2500      	movs	r5, #0
 8002308:	e700      	b.n	800210c <d_unqualified_name+0x5c>
 800230a:	788b      	ldrb	r3, [r1, #2]
 800230c:	e6fe      	b.n	800210c <d_unqualified_name+0x5c>
 800230e:	bf00      	nop
 8002310:	08019f84 	.word	0x08019f84

08002314 <d_bare_function_type>:
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	68c3      	ldr	r3, [r0, #12]
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	2a4a      	cmp	r2, #74	; 0x4a
 800231c:	4604      	mov	r4, r0
 800231e:	d00d      	beq.n	800233c <d_bare_function_type+0x28>
 8002320:	b971      	cbnz	r1, 8002340 <d_bare_function_type+0x2c>
 8002322:	460d      	mov	r5, r1
 8002324:	4620      	mov	r0, r4
 8002326:	f7ff fe81 	bl	800202c <d_parmlist>
 800232a:	b178      	cbz	r0, 800234c <d_bare_function_type+0x38>
 800232c:	4603      	mov	r3, r0
 800232e:	462a      	mov	r2, r5
 8002330:	4620      	mov	r0, r4
 8002332:	2129      	movs	r1, #41	; 0x29
 8002334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002338:	f7fd bf82 	b.w	8000240 <d_make_comp>
 800233c:	3301      	adds	r3, #1
 800233e:	60c3      	str	r3, [r0, #12]
 8002340:	4620      	mov	r0, r4
 8002342:	f7ff fa0d 	bl	8001760 <d_type>
 8002346:	4605      	mov	r5, r0
 8002348:	2800      	cmp	r0, #0
 800234a:	d1eb      	bne.n	8002324 <d_bare_function_type+0x10>
 800234c:	2000      	movs	r0, #0
 800234e:	bd70      	pop	{r4, r5, r6, pc}

08002350 <d_function_type>:
 8002350:	68c3      	ldr	r3, [r0, #12]
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	2a46      	cmp	r2, #70	; 0x46
 8002356:	d001      	beq.n	800235c <d_function_type+0xc>
 8002358:	2000      	movs	r0, #0
 800235a:	4770      	bx	lr
 800235c:	b510      	push	{r4, lr}
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	60c2      	str	r2, [r0, #12]
 8002362:	785a      	ldrb	r2, [r3, #1]
 8002364:	2a59      	cmp	r2, #89	; 0x59
 8002366:	bf04      	itt	eq
 8002368:	3302      	addeq	r3, #2
 800236a:	60c3      	streq	r3, [r0, #12]
 800236c:	2101      	movs	r1, #1
 800236e:	4604      	mov	r4, r0
 8002370:	f7ff ffd0 	bl	8002314 <d_bare_function_type>
 8002374:	4601      	mov	r1, r0
 8002376:	4620      	mov	r0, r4
 8002378:	f7fe f814 	bl	80003a4 <d_ref_qualifier>
 800237c:	68e3      	ldr	r3, [r4, #12]
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	2a45      	cmp	r2, #69	; 0x45
 8002382:	d001      	beq.n	8002388 <d_function_type+0x38>
 8002384:	2000      	movs	r0, #0
 8002386:	bd10      	pop	{r4, pc}
 8002388:	3301      	adds	r3, #1
 800238a:	60e3      	str	r3, [r4, #12]
 800238c:	bd10      	pop	{r4, pc}
 800238e:	bf00      	nop

08002390 <d_encoding>:
 8002390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002394:	68c3      	ldr	r3, [r0, #12]
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	2a47      	cmp	r2, #71	; 0x47
 800239a:	4605      	mov	r5, r0
 800239c:	d01f      	beq.n	80023de <d_encoding+0x4e>
 800239e:	2a54      	cmp	r2, #84	; 0x54
 80023a0:	d01d      	beq.n	80023de <d_encoding+0x4e>
 80023a2:	460e      	mov	r6, r1
 80023a4:	f7ff f820 	bl	80013e8 <d_name>
 80023a8:	4604      	mov	r4, r0
 80023aa:	b310      	cbz	r0, 80023f2 <d_encoding+0x62>
 80023ac:	b32e      	cbz	r6, 80023fa <d_encoding+0x6a>
 80023ae:	68ab      	ldr	r3, [r5, #8]
 80023b0:	07db      	lsls	r3, r3, #31
 80023b2:	d422      	bmi.n	80023fa <d_encoding+0x6a>
 80023b4:	7823      	ldrb	r3, [r4, #0]
 80023b6:	f1a3 021c 	sub.w	r2, r3, #28
 80023ba:	2a04      	cmp	r2, #4
 80023bc:	d940      	bls.n	8002440 <d_encoding+0xb0>
 80023be:	2b4c      	cmp	r3, #76	; 0x4c
 80023c0:	d03e      	beq.n	8002440 <d_encoding+0xb0>
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d116      	bne.n	80023f4 <d_encoding+0x64>
 80023c6:	68a3      	ldr	r3, [r4, #8]
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	f1a2 011c 	sub.w	r1, r2, #28
 80023ce:	2904      	cmp	r1, #4
 80023d0:	f240 8283 	bls.w	80028da <d_encoding+0x54a>
 80023d4:	2a4c      	cmp	r2, #76	; 0x4c
 80023d6:	f000 8280 	beq.w	80028da <d_encoding+0x54a>
 80023da:	60a3      	str	r3, [r4, #8]
 80023dc:	e00a      	b.n	80023f4 <d_encoding+0x64>
 80023de:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80023e0:	f101 0214 	add.w	r2, r1, #20
 80023e4:	632a      	str	r2, [r5, #48]	; 0x30
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	2a54      	cmp	r2, #84	; 0x54
 80023ea:	d02b      	beq.n	8002444 <d_encoding+0xb4>
 80023ec:	2a47      	cmp	r2, #71	; 0x47
 80023ee:	f000 809f 	beq.w	8002530 <d_encoding+0x1a0>
 80023f2:	2400      	movs	r4, #0
 80023f4:	4620      	mov	r0, r4
 80023f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023fa:	68eb      	ldr	r3, [r5, #12]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f8      	beq.n	80023f4 <d_encoding+0x64>
 8002402:	2b45      	cmp	r3, #69	; 0x45
 8002404:	d0f6      	beq.n	80023f4 <d_encoding+0x64>
 8002406:	4621      	mov	r1, r4
 8002408:	780a      	ldrb	r2, [r1, #0]
 800240a:	2a20      	cmp	r2, #32
 800240c:	f200 8113 	bhi.w	8002636 <d_encoding+0x2a6>
 8002410:	2a1c      	cmp	r2, #28
 8002412:	f080 8112 	bcs.w	800263a <d_encoding+0x2aa>
 8002416:	2a04      	cmp	r2, #4
 8002418:	f040 8101 	bne.w	800261e <d_encoding+0x28e>
 800241c:	684a      	ldr	r2, [r1, #4]
 800241e:	b16a      	cbz	r2, 800243c <d_encoding+0xac>
 8002420:	7813      	ldrb	r3, [r2, #0]
 8002422:	2b08      	cmp	r3, #8
 8002424:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8002428:	f200 80f6 	bhi.w	8002618 <d_encoding+0x288>
 800242c:	2b07      	cmp	r3, #7
 800242e:	f080 80f6 	bcs.w	800261e <d_encoding+0x28e>
 8002432:	2901      	cmp	r1, #1
 8002434:	d802      	bhi.n	800243c <d_encoding+0xac>
 8002436:	6892      	ldr	r2, [r2, #8]
 8002438:	2a00      	cmp	r2, #0
 800243a:	d1f1      	bne.n	8002420 <d_encoding+0x90>
 800243c:	2101      	movs	r1, #1
 800243e:	e0ef      	b.n	8002620 <d_encoding+0x290>
 8002440:	6864      	ldr	r4, [r4, #4]
 8002442:	e7b7      	b.n	80023b4 <d_encoding+0x24>
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	60ea      	str	r2, [r5, #12]
 8002448:	785a      	ldrb	r2, [r3, #1]
 800244a:	2a00      	cmp	r2, #0
 800244c:	d0d1      	beq.n	80023f2 <d_encoding+0x62>
 800244e:	1c9a      	adds	r2, r3, #2
 8002450:	60ea      	str	r2, [r5, #12]
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	3b43      	subs	r3, #67	; 0x43
 8002456:	2b33      	cmp	r3, #51	; 0x33
 8002458:	d8cb      	bhi.n	80023f2 <d_encoding+0x62>
 800245a:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <d_encoding+0xd0>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	0800289b 	.word	0x0800289b
 8002464:	080023f3 	.word	0x080023f3
 8002468:	080023f3 	.word	0x080023f3
 800246c:	08002885 	.word	0x08002885
 8002470:	080023f3 	.word	0x080023f3
 8002474:	0800286f 	.word	0x0800286f
 8002478:	08002859 	.word	0x08002859
 800247c:	08002843 	.word	0x08002843
 8002480:	080023f3 	.word	0x080023f3
 8002484:	080023f3 	.word	0x080023f3
 8002488:	080023f3 	.word	0x080023f3
 800248c:	080023f3 	.word	0x080023f3
 8002490:	080023f3 	.word	0x080023f3
 8002494:	080023f3 	.word	0x080023f3
 8002498:	080023f3 	.word	0x080023f3
 800249c:	080023f3 	.word	0x080023f3
 80024a0:	0800282d 	.word	0x0800282d
 80024a4:	08002813 	.word	0x08002813
 80024a8:	080023f3 	.word	0x080023f3
 80024ac:	080027f9 	.word	0x080027f9
 80024b0:	080027e3 	.word	0x080027e3
 80024b4:	080023f3 	.word	0x080023f3
 80024b8:	080023f3 	.word	0x080023f3
 80024bc:	080023f3 	.word	0x080023f3
 80024c0:	080023f3 	.word	0x080023f3
 80024c4:	080023f3 	.word	0x080023f3
 80024c8:	080023f3 	.word	0x080023f3
 80024cc:	080023f3 	.word	0x080023f3
 80024d0:	080023f3 	.word	0x080023f3
 80024d4:	080023f3 	.word	0x080023f3
 80024d8:	080023f3 	.word	0x080023f3
 80024dc:	080023f3 	.word	0x080023f3
 80024e0:	080027af 	.word	0x080027af
 80024e4:	080023f3 	.word	0x080023f3
 80024e8:	080023f3 	.word	0x080023f3
 80024ec:	080023f3 	.word	0x080023f3
 80024f0:	080023f3 	.word	0x080023f3
 80024f4:	08002789 	.word	0x08002789
 80024f8:	080023f3 	.word	0x080023f3
 80024fc:	080023f3 	.word	0x080023f3
 8002500:	080023f3 	.word	0x080023f3
 8002504:	080023f3 	.word	0x080023f3
 8002508:	080023f3 	.word	0x080023f3
 800250c:	080023f3 	.word	0x080023f3
 8002510:	080023f3 	.word	0x080023f3
 8002514:	080023f3 	.word	0x080023f3
 8002518:	080023f3 	.word	0x080023f3
 800251c:	080023f3 	.word	0x080023f3
 8002520:	080023f3 	.word	0x080023f3
 8002524:	080023f3 	.word	0x080023f3
 8002528:	080023f3 	.word	0x080023f3
 800252c:	08002763 	.word	0x08002763
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	60ea      	str	r2, [r5, #12]
 8002534:	785a      	ldrb	r2, [r3, #1]
 8002536:	2a00      	cmp	r2, #0
 8002538:	f43f af5b 	beq.w	80023f2 <d_encoding+0x62>
 800253c:	1c9a      	adds	r2, r3, #2
 800253e:	60ea      	str	r2, [r5, #12]
 8002540:	785a      	ldrb	r2, [r3, #1]
 8002542:	3a41      	subs	r2, #65	; 0x41
 8002544:	2a31      	cmp	r2, #49	; 0x31
 8002546:	f63f af54 	bhi.w	80023f2 <d_encoding+0x62>
 800254a:	a101      	add	r1, pc, #4	; (adr r1, 8002550 <d_encoding+0x1c0>)
 800254c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002550:	08002645 	.word	0x08002645
 8002554:	080023f3 	.word	0x080023f3
 8002558:	080023f3 	.word	0x080023f3
 800255c:	080023f3 	.word	0x080023f3
 8002560:	080023f3 	.word	0x080023f3
 8002564:	080023f3 	.word	0x080023f3
 8002568:	080023f3 	.word	0x080023f3
 800256c:	080023f3 	.word	0x080023f3
 8002570:	080023f3 	.word	0x080023f3
 8002574:	080023f3 	.word	0x080023f3
 8002578:	080023f3 	.word	0x080023f3
 800257c:	080023f3 	.word	0x080023f3
 8002580:	080023f3 	.word	0x080023f3
 8002584:	080023f3 	.word	0x080023f3
 8002588:	080023f3 	.word	0x080023f3
 800258c:	080023f3 	.word	0x080023f3
 8002590:	080023f3 	.word	0x080023f3
 8002594:	08002745 	.word	0x08002745
 8002598:	080023f3 	.word	0x080023f3
 800259c:	08002719 	.word	0x08002719
 80025a0:	080023f3 	.word	0x080023f3
 80025a4:	08002703 	.word	0x08002703
 80025a8:	080023f3 	.word	0x080023f3
 80025ac:	080023f3 	.word	0x080023f3
 80025b0:	080023f3 	.word	0x080023f3
 80025b4:	080023f3 	.word	0x080023f3
 80025b8:	080023f3 	.word	0x080023f3
 80025bc:	080023f3 	.word	0x080023f3
 80025c0:	080023f3 	.word	0x080023f3
 80025c4:	080023f3 	.word	0x080023f3
 80025c8:	080023f3 	.word	0x080023f3
 80025cc:	080023f3 	.word	0x080023f3
 80025d0:	080023f3 	.word	0x080023f3
 80025d4:	080023f3 	.word	0x080023f3
 80025d8:	080023f3 	.word	0x080023f3
 80025dc:	080023f3 	.word	0x080023f3
 80025e0:	080023f3 	.word	0x080023f3
 80025e4:	080023f3 	.word	0x080023f3
 80025e8:	080023f3 	.word	0x080023f3
 80025ec:	080023f3 	.word	0x080023f3
 80025f0:	080023f3 	.word	0x080023f3
 80025f4:	080023f3 	.word	0x080023f3
 80025f8:	080023f3 	.word	0x080023f3
 80025fc:	080023f3 	.word	0x080023f3
 8002600:	080023f3 	.word	0x080023f3
 8002604:	080023f3 	.word	0x080023f3
 8002608:	080023f3 	.word	0x080023f3
 800260c:	080023f3 	.word	0x080023f3
 8002610:	080023f3 	.word	0x080023f3
 8002614:	0800265d 	.word	0x0800265d
 8002618:	2b34      	cmp	r3, #52	; 0x34
 800261a:	f47f af0f 	bne.w	800243c <d_encoding+0xac>
 800261e:	2100      	movs	r1, #0
 8002620:	4628      	mov	r0, r5
 8002622:	f7ff fe77 	bl	8002314 <d_bare_function_type>
 8002626:	4622      	mov	r2, r4
 8002628:	4603      	mov	r3, r0
 800262a:	2103      	movs	r1, #3
 800262c:	4628      	mov	r0, r5
 800262e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002632:	f7fd be05 	b.w	8000240 <d_make_comp>
 8002636:	2a4c      	cmp	r2, #76	; 0x4c
 8002638:	d1f1      	bne.n	800261e <d_encoding+0x28e>
 800263a:	6849      	ldr	r1, [r1, #4]
 800263c:	2900      	cmp	r1, #0
 800263e:	f47f aee3 	bne.w	8002408 <d_encoding+0x78>
 8002642:	e7ed      	b.n	8002620 <d_encoding+0x290>
 8002644:	2100      	movs	r1, #0
 8002646:	4628      	mov	r0, r5
 8002648:	f7ff fea2 	bl	8002390 <d_encoding>
 800264c:	2300      	movs	r3, #0
 800264e:	4602      	mov	r2, r0
 8002650:	2117      	movs	r1, #23
 8002652:	4628      	mov	r0, r5
 8002654:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002658:	f7fd bdf2 	b.w	8000240 <d_make_comp>
 800265c:	f105 000c 	add.w	r0, r5, #12
 8002660:	f7fd ff40 	bl	80004e4 <d_number.isra.0>
 8002664:	2801      	cmp	r0, #1
 8002666:	f77f aec4 	ble.w	80023f2 <d_encoding+0x62>
 800266a:	68eb      	ldr	r3, [r5, #12]
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	2a00      	cmp	r2, #0
 8002670:	f43f aebf 	beq.w	80023f2 <d_encoding+0x62>
 8002674:	1c5f      	adds	r7, r3, #1
 8002676:	60ef      	str	r7, [r5, #12]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b5f      	cmp	r3, #95	; 0x5f
 800267c:	f47f aeb9 	bne.w	80023f2 <d_encoding+0x62>
 8002680:	2200      	movs	r2, #0
 8002682:	1e46      	subs	r6, r0, #1
 8002684:	4690      	mov	r8, r2
 8002686:	f04f 0940 	mov.w	r9, #64	; 0x40
 800268a:	783b      	ldrb	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f43f aeb0 	beq.w	80023f2 <d_encoding+0x62>
 8002692:	2b24      	cmp	r3, #36	; 0x24
 8002694:	f000 8128 	beq.w	80028e8 <d_encoding+0x558>
 8002698:	463c      	mov	r4, r7
 800269a:	2100      	movs	r1, #0
 800269c:	e004      	b.n	80026a8 <d_encoding+0x318>
 800269e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80026a2:	b123      	cbz	r3, 80026ae <d_encoding+0x31e>
 80026a4:	2b24      	cmp	r3, #36	; 0x24
 80026a6:	d002      	beq.n	80026ae <d_encoding+0x31e>
 80026a8:	3101      	adds	r1, #1
 80026aa:	42b1      	cmp	r1, r6
 80026ac:	dbf7      	blt.n	800269e <d_encoding+0x30e>
 80026ae:	696c      	ldr	r4, [r5, #20]
 80026b0:	69a8      	ldr	r0, [r5, #24]
 80026b2:	4284      	cmp	r4, r0
 80026b4:	f280 8113 	bge.w	80028de <d_encoding+0x54e>
 80026b8:	6928      	ldr	r0, [r5, #16]
 80026ba:	1c63      	adds	r3, r4, #1
 80026bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80026c0:	616b      	str	r3, [r5, #20]
 80026c2:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 80026c6:	f000 810a 	beq.w	80028de <d_encoding+0x54e>
 80026ca:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 80026ce:	605f      	str	r7, [r3, #4]
 80026d0:	6099      	str	r1, [r3, #8]
 80026d2:	68ef      	ldr	r7, [r5, #12]
 80026d4:	440f      	add	r7, r1
 80026d6:	1a76      	subs	r6, r6, r1
 80026d8:	60ef      	str	r7, [r5, #12]
 80026da:	2a00      	cmp	r2, #0
 80026dc:	f000 8121 	beq.w	8002922 <d_encoding+0x592>
 80026e0:	213f      	movs	r1, #63	; 0x3f
 80026e2:	4628      	mov	r0, r5
 80026e4:	f7fd fdac 	bl	8000240 <d_make_comp>
 80026e8:	4602      	mov	r2, r0
 80026ea:	2800      	cmp	r0, #0
 80026ec:	f43f ae81 	beq.w	80023f2 <d_encoding+0x62>
 80026f0:	2e00      	cmp	r6, #0
 80026f2:	dcca      	bgt.n	800268a <d_encoding+0x2fa>
 80026f4:	4628      	mov	r0, r5
 80026f6:	2300      	movs	r3, #0
 80026f8:	213e      	movs	r1, #62	; 0x3e
 80026fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026fe:	f7fd bd9f 	b.w	8000240 <d_make_comp>
 8002702:	4628      	mov	r0, r5
 8002704:	f7fe fe70 	bl	80013e8 <d_name>
 8002708:	2300      	movs	r3, #0
 800270a:	4602      	mov	r2, r0
 800270c:	2113      	movs	r1, #19
 800270e:	4628      	mov	r0, r5
 8002710:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002714:	f7fd bd94 	b.w	8000240 <d_make_comp>
 8002718:	789a      	ldrb	r2, [r3, #2]
 800271a:	2100      	movs	r1, #0
 800271c:	4628      	mov	r0, r5
 800271e:	2a00      	cmp	r2, #0
 8002720:	f000 8101 	beq.w	8002926 <d_encoding+0x596>
 8002724:	1cda      	adds	r2, r3, #3
 8002726:	60ea      	str	r2, [r5, #12]
 8002728:	789b      	ldrb	r3, [r3, #2]
 800272a:	2b6e      	cmp	r3, #110	; 0x6e
 800272c:	f040 80fb 	bne.w	8002926 <d_encoding+0x596>
 8002730:	f7ff fe2e 	bl	8002390 <d_encoding>
 8002734:	2300      	movs	r3, #0
 8002736:	4602      	mov	r2, r0
 8002738:	2149      	movs	r1, #73	; 0x49
 800273a:	4628      	mov	r0, r5
 800273c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002740:	f7fd bd7e 	b.w	8000240 <d_make_comp>
 8002744:	4628      	mov	r0, r5
 8002746:	f7fe fe4f 	bl	80013e8 <d_name>
 800274a:	4604      	mov	r4, r0
 800274c:	4628      	mov	r0, r5
 800274e:	f7fd fef3 	bl	8000538 <d_number_component>
 8002752:	4622      	mov	r2, r4
 8002754:	4603      	mov	r3, r0
 8002756:	2116      	movs	r1, #22
 8002758:	4628      	mov	r0, r5
 800275a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800275e:	f7fd bd6f 	b.w	8000240 <d_make_comp>
 8002762:	2176      	movs	r1, #118	; 0x76
 8002764:	4628      	mov	r0, r5
 8002766:	f7fe f871 	bl	800084c <d_call_offset>
 800276a:	2800      	cmp	r0, #0
 800276c:	f43f ae41 	beq.w	80023f2 <d_encoding+0x62>
 8002770:	2100      	movs	r1, #0
 8002772:	4628      	mov	r0, r5
 8002774:	f7ff fe0c 	bl	8002390 <d_encoding>
 8002778:	2300      	movs	r3, #0
 800277a:	4602      	mov	r2, r0
 800277c:	2110      	movs	r1, #16
 800277e:	4628      	mov	r0, r5
 8002780:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002784:	f7fd bd5c 	b.w	8000240 <d_make_comp>
 8002788:	2168      	movs	r1, #104	; 0x68
 800278a:	4628      	mov	r0, r5
 800278c:	f7fe f85e 	bl	800084c <d_call_offset>
 8002790:	2800      	cmp	r0, #0
 8002792:	f43f ae2e 	beq.w	80023f2 <d_encoding+0x62>
 8002796:	2100      	movs	r1, #0
 8002798:	4628      	mov	r0, r5
 800279a:	f7ff fdf9 	bl	8002390 <d_encoding>
 800279e:	2300      	movs	r3, #0
 80027a0:	4602      	mov	r2, r0
 80027a2:	210f      	movs	r1, #15
 80027a4:	4628      	mov	r0, r5
 80027a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027aa:	f7fd bd49 	b.w	8000240 <d_make_comp>
 80027ae:	2100      	movs	r1, #0
 80027b0:	4628      	mov	r0, r5
 80027b2:	f7fe f84b 	bl	800084c <d_call_offset>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	f43f ae1b 	beq.w	80023f2 <d_encoding+0x62>
 80027bc:	2100      	movs	r1, #0
 80027be:	4628      	mov	r0, r5
 80027c0:	f7fe f844 	bl	800084c <d_call_offset>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	f43f ae14 	beq.w	80023f2 <d_encoding+0x62>
 80027ca:	2100      	movs	r1, #0
 80027cc:	4628      	mov	r0, r5
 80027ce:	f7ff fddf 	bl	8002390 <d_encoding>
 80027d2:	2300      	movs	r3, #0
 80027d4:	4602      	mov	r2, r0
 80027d6:	2111      	movs	r1, #17
 80027d8:	4628      	mov	r0, r5
 80027da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027de:	f7fd bd2f 	b.w	8000240 <d_make_comp>
 80027e2:	4628      	mov	r0, r5
 80027e4:	f7fe fe00 	bl	80013e8 <d_name>
 80027e8:	2300      	movs	r3, #0
 80027ea:	4602      	mov	r2, r0
 80027ec:	2115      	movs	r1, #21
 80027ee:	4628      	mov	r0, r5
 80027f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f4:	f7fd bd24 	b.w	8000240 <d_make_comp>
 80027f8:	310f      	adds	r1, #15
 80027fa:	6329      	str	r1, [r5, #48]	; 0x30
 80027fc:	4628      	mov	r0, r5
 80027fe:	f7fe ffaf 	bl	8001760 <d_type>
 8002802:	2300      	movs	r3, #0
 8002804:	4602      	mov	r2, r0
 8002806:	2109      	movs	r1, #9
 8002808:	4628      	mov	r0, r5
 800280a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800280e:	f7fd bd17 	b.w	8000240 <d_make_comp>
 8002812:	310a      	adds	r1, #10
 8002814:	6329      	str	r1, [r5, #48]	; 0x30
 8002816:	4628      	mov	r0, r5
 8002818:	f7fe ffa2 	bl	8001760 <d_type>
 800281c:	2300      	movs	r3, #0
 800281e:	4602      	mov	r2, r0
 8002820:	210a      	movs	r1, #10
 8002822:	4628      	mov	r0, r5
 8002824:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002828:	f7fd bd0a 	b.w	8000240 <d_make_comp>
 800282c:	4628      	mov	r0, r5
 800282e:	f7fe ff97 	bl	8001760 <d_type>
 8002832:	2300      	movs	r3, #0
 8002834:	4602      	mov	r2, r0
 8002836:	210d      	movs	r1, #13
 8002838:	4628      	mov	r0, r5
 800283a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800283e:	f7fd bcff 	b.w	8000240 <d_make_comp>
 8002842:	4628      	mov	r0, r5
 8002844:	f7fe ff8c 	bl	8001760 <d_type>
 8002848:	2300      	movs	r3, #0
 800284a:	4602      	mov	r2, r0
 800284c:	2112      	movs	r1, #18
 800284e:	4628      	mov	r0, r5
 8002850:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002854:	f7fd bcf4 	b.w	8000240 <d_make_comp>
 8002858:	4628      	mov	r0, r5
 800285a:	f7fe ff81 	bl	8001760 <d_type>
 800285e:	2300      	movs	r3, #0
 8002860:	4602      	mov	r2, r0
 8002862:	210c      	movs	r1, #12
 8002864:	4628      	mov	r0, r5
 8002866:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800286a:	f7fd bce9 	b.w	8000240 <d_make_comp>
 800286e:	4628      	mov	r0, r5
 8002870:	f7fe fdba 	bl	80013e8 <d_name>
 8002874:	2300      	movs	r3, #0
 8002876:	4602      	mov	r2, r0
 8002878:	2114      	movs	r1, #20
 800287a:	4628      	mov	r0, r5
 800287c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002880:	f7fd bcde 	b.w	8000240 <d_make_comp>
 8002884:	4628      	mov	r0, r5
 8002886:	f7fe ff6b 	bl	8001760 <d_type>
 800288a:	2300      	movs	r3, #0
 800288c:	4602      	mov	r2, r0
 800288e:	210e      	movs	r1, #14
 8002890:	4628      	mov	r0, r5
 8002892:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002896:	f7fd bcd3 	b.w	8000240 <d_make_comp>
 800289a:	4628      	mov	r0, r5
 800289c:	f7fe ff60 	bl	8001760 <d_type>
 80028a0:	4604      	mov	r4, r0
 80028a2:	f105 000c 	add.w	r0, r5, #12
 80028a6:	f7fd fe1d 	bl	80004e4 <d_number.isra.0>
 80028aa:	2800      	cmp	r0, #0
 80028ac:	f6ff ada1 	blt.w	80023f2 <d_encoding+0x62>
 80028b0:	68eb      	ldr	r3, [r5, #12]
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	2a5f      	cmp	r2, #95	; 0x5f
 80028b6:	f47f ad9c 	bne.w	80023f2 <d_encoding+0x62>
 80028ba:	3301      	adds	r3, #1
 80028bc:	60eb      	str	r3, [r5, #12]
 80028be:	4628      	mov	r0, r5
 80028c0:	f7fe ff4e 	bl	8001760 <d_type>
 80028c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80028c6:	1d59      	adds	r1, r3, #5
 80028c8:	6329      	str	r1, [r5, #48]	; 0x30
 80028ca:	4602      	mov	r2, r0
 80028cc:	4623      	mov	r3, r4
 80028ce:	4628      	mov	r0, r5
 80028d0:	210b      	movs	r1, #11
 80028d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d6:	f7fd bcb3 	b.w	8000240 <d_make_comp>
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	e574      	b.n	80023c8 <d_encoding+0x38>
 80028de:	68eb      	ldr	r3, [r5, #12]
 80028e0:	440b      	add	r3, r1
 80028e2:	60eb      	str	r3, [r5, #12]
 80028e4:	2400      	movs	r4, #0
 80028e6:	e585      	b.n	80023f4 <d_encoding+0x64>
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b53      	cmp	r3, #83	; 0x53
 80028ec:	d027      	beq.n	800293e <d_encoding+0x5ae>
 80028ee:	2b5f      	cmp	r3, #95	; 0x5f
 80028f0:	d023      	beq.n	800293a <d_encoding+0x5aa>
 80028f2:	2b24      	cmp	r3, #36	; 0x24
 80028f4:	f47f ad7d 	bne.w	80023f2 <d_encoding+0x62>
 80028f8:	4618      	mov	r0, r3
 80028fa:	6969      	ldr	r1, [r5, #20]
 80028fc:	69ab      	ldr	r3, [r5, #24]
 80028fe:	4299      	cmp	r1, r3
 8002900:	da1f      	bge.n	8002942 <d_encoding+0x5b2>
 8002902:	692c      	ldr	r4, [r5, #16]
 8002904:	1c4f      	adds	r7, r1, #1
 8002906:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800290a:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 800290e:	616f      	str	r7, [r5, #20]
 8002910:	d017      	beq.n	8002942 <d_encoding+0x5b2>
 8002912:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 8002916:	6058      	str	r0, [r3, #4]
 8002918:	68ef      	ldr	r7, [r5, #12]
 800291a:	3702      	adds	r7, #2
 800291c:	3e02      	subs	r6, #2
 800291e:	60ef      	str	r7, [r5, #12]
 8002920:	e6db      	b.n	80026da <d_encoding+0x34a>
 8002922:	461a      	mov	r2, r3
 8002924:	e6e4      	b.n	80026f0 <d_encoding+0x360>
 8002926:	f7ff fd33 	bl	8002390 <d_encoding>
 800292a:	2300      	movs	r3, #0
 800292c:	4602      	mov	r2, r0
 800292e:	2148      	movs	r1, #72	; 0x48
 8002930:	4628      	mov	r0, r5
 8002932:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002936:	f7fd bc83 	b.w	8000240 <d_make_comp>
 800293a:	202e      	movs	r0, #46	; 0x2e
 800293c:	e7dd      	b.n	80028fa <d_encoding+0x56a>
 800293e:	202f      	movs	r0, #47	; 0x2f
 8002940:	e7db      	b.n	80028fa <d_encoding+0x56a>
 8002942:	68eb      	ldr	r3, [r5, #12]
 8002944:	3302      	adds	r3, #2
 8002946:	60eb      	str	r3, [r5, #12]
 8002948:	2400      	movs	r4, #0
 800294a:	e553      	b.n	80023f4 <d_encoding+0x64>

0800294c <d_expr_primary>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	68c2      	ldr	r2, [r0, #12]
 8002950:	7813      	ldrb	r3, [r2, #0]
 8002952:	2b4c      	cmp	r3, #76	; 0x4c
 8002954:	d001      	beq.n	800295a <d_expr_primary+0xe>
 8002956:	2000      	movs	r0, #0
 8002958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800295a:	1c53      	adds	r3, r2, #1
 800295c:	60c3      	str	r3, [r0, #12]
 800295e:	7851      	ldrb	r1, [r2, #1]
 8002960:	295f      	cmp	r1, #95	; 0x5f
 8002962:	4605      	mov	r5, r0
 8002964:	d03a      	beq.n	80029dc <d_expr_primary+0x90>
 8002966:	295a      	cmp	r1, #90	; 0x5a
 8002968:	d03f      	beq.n	80029ea <d_expr_primary+0x9e>
 800296a:	f7fe fef9 	bl	8001760 <d_type>
 800296e:	2800      	cmp	r0, #0
 8002970:	d0f1      	beq.n	8002956 <d_expr_primary+0xa>
 8002972:	7803      	ldrb	r3, [r0, #0]
 8002974:	2b27      	cmp	r3, #39	; 0x27
 8002976:	d046      	beq.n	8002a06 <d_expr_primary+0xba>
 8002978:	68ee      	ldr	r6, [r5, #12]
 800297a:	7833      	ldrb	r3, [r6, #0]
 800297c:	2b6e      	cmp	r3, #110	; 0x6e
 800297e:	d04b      	beq.n	8002a18 <d_expr_primary+0xcc>
 8002980:	213c      	movs	r1, #60	; 0x3c
 8002982:	2b45      	cmp	r3, #69	; 0x45
 8002984:	d04e      	beq.n	8002a24 <d_expr_primary+0xd8>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0e5      	beq.n	8002956 <d_expr_primary+0xa>
 800298a:	4633      	mov	r3, r6
 800298c:	e001      	b.n	8002992 <d_expr_primary+0x46>
 800298e:	2c00      	cmp	r4, #0
 8002990:	d0e1      	beq.n	8002956 <d_expr_primary+0xa>
 8002992:	3301      	adds	r3, #1
 8002994:	60eb      	str	r3, [r5, #12]
 8002996:	781c      	ldrb	r4, [r3, #0]
 8002998:	2c45      	cmp	r4, #69	; 0x45
 800299a:	d1f8      	bne.n	800298e <d_expr_primary+0x42>
 800299c:	1b9c      	subs	r4, r3, r6
 800299e:	696b      	ldr	r3, [r5, #20]
 80029a0:	69aa      	ldr	r2, [r5, #24]
 80029a2:	4293      	cmp	r3, r2
 80029a4:	da2d      	bge.n	8002a02 <d_expr_primary+0xb6>
 80029a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80029aa:	692f      	ldr	r7, [r5, #16]
 80029ac:	3301      	adds	r3, #1
 80029ae:	0092      	lsls	r2, r2, #2
 80029b0:	616b      	str	r3, [r5, #20]
 80029b2:	18bb      	adds	r3, r7, r2
 80029b4:	d025      	beq.n	8002a02 <d_expr_primary+0xb6>
 80029b6:	b326      	cbz	r6, 8002a02 <d_expr_primary+0xb6>
 80029b8:	b31c      	cbz	r4, 8002a02 <d_expr_primary+0xb6>
 80029ba:	f04f 0e00 	mov.w	lr, #0
 80029be:	f807 e002 	strb.w	lr, [r7, r2]
 80029c2:	605e      	str	r6, [r3, #4]
 80029c4:	609c      	str	r4, [r3, #8]
 80029c6:	4602      	mov	r2, r0
 80029c8:	4628      	mov	r0, r5
 80029ca:	f7fd fc39 	bl	8000240 <d_make_comp>
 80029ce:	68eb      	ldr	r3, [r5, #12]
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	2a45      	cmp	r2, #69	; 0x45
 80029d4:	d1bf      	bne.n	8002956 <d_expr_primary+0xa>
 80029d6:	3301      	adds	r3, #1
 80029d8:	60eb      	str	r3, [r5, #12]
 80029da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029dc:	1c93      	adds	r3, r2, #2
 80029de:	60c3      	str	r3, [r0, #12]
 80029e0:	7892      	ldrb	r2, [r2, #2]
 80029e2:	2a5a      	cmp	r2, #90	; 0x5a
 80029e4:	bf18      	it	ne
 80029e6:	2000      	movne	r0, #0
 80029e8:	d107      	bne.n	80029fa <d_expr_primary+0xae>
 80029ea:	3301      	adds	r3, #1
 80029ec:	60eb      	str	r3, [r5, #12]
 80029ee:	2100      	movs	r1, #0
 80029f0:	4628      	mov	r0, r5
 80029f2:	f7ff fccd 	bl	8002390 <d_encoding>
 80029f6:	68eb      	ldr	r3, [r5, #12]
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	2a45      	cmp	r2, #69	; 0x45
 80029fc:	d0eb      	beq.n	80029d6 <d_expr_primary+0x8a>
 80029fe:	2000      	movs	r0, #0
 8002a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a02:	2300      	movs	r3, #0
 8002a04:	e7df      	b.n	80029c6 <d_expr_primary+0x7a>
 8002a06:	6843      	ldr	r3, [r0, #4]
 8002a08:	7c1a      	ldrb	r2, [r3, #16]
 8002a0a:	2a00      	cmp	r2, #0
 8002a0c:	d0b4      	beq.n	8002978 <d_expr_primary+0x2c>
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	632b      	str	r3, [r5, #48]	; 0x30
 8002a16:	e7af      	b.n	8002978 <d_expr_primary+0x2c>
 8002a18:	1c72      	adds	r2, r6, #1
 8002a1a:	60ea      	str	r2, [r5, #12]
 8002a1c:	7873      	ldrb	r3, [r6, #1]
 8002a1e:	213d      	movs	r1, #61	; 0x3d
 8002a20:	4616      	mov	r6, r2
 8002a22:	e7ae      	b.n	8002982 <d_expr_primary+0x36>
 8002a24:	2400      	movs	r4, #0
 8002a26:	e7ba      	b.n	800299e <d_expr_primary+0x52>

08002a28 <d_print_comp_inner>:
 8002a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	b095      	sub	sp, #84	; 0x54
 8002a30:	2a00      	cmp	r2, #0
 8002a32:	f000 80db 	beq.w	8002bec <d_print_comp_inner+0x1c4>
 8002a36:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 8002a3a:	2f00      	cmp	r7, #0
 8002a3c:	f040 80c2 	bne.w	8002bc4 <d_print_comp_inner+0x19c>
 8002a40:	7813      	ldrb	r3, [r2, #0]
 8002a42:	4688      	mov	r8, r1
 8002a44:	4615      	mov	r5, r2
 8002a46:	2b4d      	cmp	r3, #77	; 0x4d
 8002a48:	f201 81e6 	bhi.w	8003e18 <d_print_comp_inner+0x13f0>
 8002a4c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a50:	043c045a 	.word	0x043c045a
 8002a54:	03a4043c 	.word	0x03a4043c
 8002a58:	048904a5 	.word	0x048904a5
 8002a5c:	038e04ea 	.word	0x038e04ea
 8002a60:	0330037c 	.word	0x0330037c
 8002a64:	030a0356 	.word	0x030a0356
 8002a68:	029802e4 	.word	0x029802e4
 8002a6c:	027202be 	.word	0x027202be
 8002a70:	01f0024c 	.word	0x01f0024c
 8002a74:	01ca0226 	.word	0x01ca0226
 8002a78:	015801a4 	.word	0x015801a4
 8002a7c:	0132017e 	.word	0x0132017e
 8002a80:	00f2010b 	.word	0x00f2010b
 8002a84:	00f200f2 	.word	0x00f200f2
 8002a88:	00d400d4 	.word	0x00d400d4
 8002a8c:	00d400d4 	.word	0x00d400d4
 8002a90:	00d400d4 	.word	0x00d400d4
 8002a94:	06d500d4 	.word	0x06d500d4
 8002a98:	00d406d5 	.word	0x00d406d5
 8002a9c:	06a900d4 	.word	0x06a900d4
 8002aa0:	069306fc 	.word	0x069306fc
 8002aa4:	0701071d 	.word	0x0701071d
 8002aa8:	07010788 	.word	0x07010788
 8002aac:	057b057b 	.word	0x057b057b
 8002ab0:	06060630 	.word	0x06060630
 8002ab4:	09e405e0 	.word	0x09e405e0
 8002ab8:	068e05ad 	.word	0x068e05ad
 8002abc:	004e0654 	.word	0x004e0654
 8002ac0:	094c0485 	.word	0x094c0485
 8002ac4:	08df08df 	.word	0x08df08df
 8002ac8:	08ae08ae 	.word	0x08ae08ae
 8002acc:	05480888 	.word	0x05480888
 8002ad0:	08e4053a 	.word	0x08e4053a
 8002ad4:	09be0514 	.word	0x09be0514
 8002ad8:	09980914 	.word	0x09980914
 8002adc:	07cb09e4 	.word	0x07cb09e4
 8002ae0:	07f10862 	.word	0x07f10862
 8002ae4:	04130817 	.word	0x04130817
 8002ae8:	055200d4 	.word	0x055200d4
 8002aec:	68ab      	ldr	r3, [r5, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b38      	cmp	r3, #56	; 0x38
 8002af2:	d17b      	bne.n	8002bec <d_print_comp_inner+0x1c4>
 8002af4:	686a      	ldr	r2, [r5, #4]
 8002af6:	6853      	ldr	r3, [r2, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	7859      	ldrb	r1, [r3, #1]
 8002afc:	2963      	cmp	r1, #99	; 0x63
 8002afe:	f002 814a 	beq.w	8004d96 <d_print_comp_inner+0x236e>
 8002b02:	f105 0308 	add.w	r3, r5, #8
 8002b06:	4641      	mov	r1, r8
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f003 fbbb 	bl	8006284 <d_maybe_print_fold_expression.isra.15>
 8002b0e:	4606      	mov	r6, r0
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d157      	bne.n	8002bc4 <d_print_comp_inner+0x19c>
 8002b14:	686b      	ldr	r3, [r5, #4]
 8002b16:	781a      	ldrb	r2, [r3, #0]
 8002b18:	2a31      	cmp	r2, #49	; 0x31
 8002b1a:	f002 836b 	beq.w	80051f4 <d_print_comp_inner+0x27cc>
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	49c7      	ldr	r1, [pc, #796]	; (8002e40 <d_print_comp_inner+0x418>)
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	f003 ff34 	bl	8006990 <strcmp>
 8002b28:	68ab      	ldr	r3, [r5, #8]
 8002b2a:	b920      	cbnz	r0, 8002b36 <d_print_comp_inner+0x10e>
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	7811      	ldrb	r1, [r2, #0]
 8002b30:	2903      	cmp	r1, #3
 8002b32:	f002 83a5 	beq.w	8005280 <d_print_comp_inner+0x2858>
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4641      	mov	r1, r8
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f003 fb3e 	bl	80061bc <d_print_subexpr>
 8002b40:	686f      	ldr	r7, [r5, #4]
 8002b42:	49c0      	ldr	r1, [pc, #768]	; (8002e44 <d_print_comp_inner+0x41c>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 9000 	ldr.w	r9, [r3]
 8002b4a:	4648      	mov	r0, r9
 8002b4c:	f003 ff20 	bl	8006990 <strcmp>
 8002b50:	4606      	mov	r6, r0
 8002b52:	2800      	cmp	r0, #0
 8002b54:	f042 826f 	bne.w	8005036 <d_print_comp_inner+0x260e>
 8002b58:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b5c:	29ff      	cmp	r1, #255	; 0xff
 8002b5e:	f002 844a 	beq.w	80053f6 <d_print_comp_inner+0x29ce>
 8002b62:	1c4a      	adds	r2, r1, #1
 8002b64:	235b      	movs	r3, #91	; 0x5b
 8002b66:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b6a:	5463      	strb	r3, [r4, r1]
 8002b6c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b70:	68ab      	ldr	r3, [r5, #8]
 8002b72:	4641      	mov	r1, r8
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	4620      	mov	r0, r4
 8002b78:	f002 fcfa 	bl	8005570 <d_print_comp>
 8002b7c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b80:	29ff      	cmp	r1, #255	; 0xff
 8002b82:	f002 8425 	beq.w	80053d0 <d_print_comp_inner+0x29a8>
 8002b86:	235d      	movs	r3, #93	; 0x5d
 8002b88:	1c4a      	adds	r2, r1, #1
 8002b8a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b8e:	5463      	strb	r3, [r4, r1]
 8002b90:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b94:	686b      	ldr	r3, [r5, #4]
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	2a31      	cmp	r2, #49	; 0x31
 8002b9a:	d113      	bne.n	8002bc4 <d_print_comp_inner+0x19c>
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	2a01      	cmp	r2, #1
 8002ba2:	d10f      	bne.n	8002bc4 <d_print_comp_inner+0x19c>
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8002baa:	d10b      	bne.n	8002bc4 <d_print_comp_inner+0x19c>
 8002bac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002bb0:	29ff      	cmp	r1, #255	; 0xff
 8002bb2:	f002 8482 	beq.w	80054ba <d_print_comp_inner+0x2a92>
 8002bb6:	2329      	movs	r3, #41	; 0x29
 8002bb8:	1c4a      	adds	r2, r1, #1
 8002bba:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002bbe:	5463      	strb	r3, [r4, r1]
 8002bc0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002bc4:	b015      	add	sp, #84	; 0x54
 8002bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f2c1 84a4 	blt.w	800451c <d_print_comp_inner+0x1af4>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f002 8432 	beq.w	800543e <d_print_comp_inner+0x2a16>
 8002bda:	6880      	ldr	r0, [r0, #8]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b110      	cbz	r0, 8002be6 <d_print_comp_inner+0x1be>
 8002be0:	7802      	ldrb	r2, [r0, #0]
 8002be2:	2a2f      	cmp	r2, #47	; 0x2f
 8002be4:	d0f6      	beq.n	8002bd4 <d_print_comp_inner+0x1ac>
 8002be6:	b10f      	cbz	r7, 8002bec <d_print_comp_inner+0x1c4>
 8002be8:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002bec:	2301      	movs	r3, #1
 8002bee:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002bf2:	b015      	add	sp, #84	; 0x54
 8002bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bf8:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8002bfc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002c00:	9505      	str	r5, [sp, #20]
 8002c02:	ab14      	add	r3, sp, #80	; 0x50
 8002c04:	2100      	movs	r1, #0
 8002c06:	f843 cd40 	str.w	ip, [r3, #-64]!
 8002c0a:	9106      	str	r1, [sp, #24]
 8002c0c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002c10:	9207      	str	r2, [sp, #28]
 8002c12:	686a      	ldr	r2, [r5, #4]
 8002c14:	4641      	mov	r1, r8
 8002c16:	4620      	mov	r0, r4
 8002c18:	f002 fcaa 	bl	8005570 <d_print_comp>
 8002c1c:	9b06      	ldr	r3, [sp, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f001 8389 	beq.w	8004336 <d_print_comp_inner+0x190e>
 8002c24:	9b04      	ldr	r3, [sp, #16]
 8002c26:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002c2a:	2f00      	cmp	r7, #0
 8002c2c:	d0ca      	beq.n	8002bc4 <d_print_comp_inner+0x19c>
 8002c2e:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002c32:	e7c7      	b.n	8002bc4 <d_print_comp_inner+0x19c>
 8002c34:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8002c38:	f1bc 0f00 	cmp.w	ip, #0
 8002c3c:	d0de      	beq.n	8002bfc <d_print_comp_inner+0x1d4>
 8002c3e:	4662      	mov	r2, ip
 8002c40:	e005      	b.n	8002c4e <d_print_comp_inner+0x226>
 8002c42:	428b      	cmp	r3, r1
 8002c44:	f001 86b8 	beq.w	80049b8 <d_print_comp_inner+0x1f90>
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	2a00      	cmp	r2, #0
 8002c4c:	d0d6      	beq.n	8002bfc <d_print_comp_inner+0x1d4>
 8002c4e:	6890      	ldr	r0, [r2, #8]
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d1f9      	bne.n	8002c48 <d_print_comp_inner+0x220>
 8002c54:	6851      	ldr	r1, [r2, #4]
 8002c56:	7809      	ldrb	r1, [r1, #0]
 8002c58:	f1a1 0e19 	sub.w	lr, r1, #25
 8002c5c:	f1be 0f02 	cmp.w	lr, #2
 8002c60:	d9ef      	bls.n	8002c42 <d_print_comp_inner+0x21a>
 8002c62:	4607      	mov	r7, r0
 8002c64:	e7ca      	b.n	8002bfc <d_print_comp_inner+0x1d4>
 8002c66:	68af      	ldr	r7, [r5, #8]
 8002c68:	686d      	ldr	r5, [r5, #4]
 8002c6a:	2f00      	cmp	r7, #0
 8002c6c:	d0aa      	beq.n	8002bc4 <d_print_comp_inner+0x19c>
 8002c6e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c72:	442f      	add	r7, r5
 8002c74:	f04f 0800 	mov.w	r8, #0
 8002c78:	e008      	b.n	8002c8c <d_print_comp_inner+0x264>
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	3101      	adds	r1, #1
 8002c7e:	42bd      	cmp	r5, r7
 8002c80:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c84:	54e6      	strb	r6, [r4, r3]
 8002c86:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002c8a:	d09b      	beq.n	8002bc4 <d_print_comp_inner+0x19c>
 8002c8c:	29ff      	cmp	r1, #255	; 0xff
 8002c8e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002c92:	d1f2      	bne.n	8002c7a <d_print_comp_inner+0x252>
 8002c94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c98:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002c9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	4798      	blx	r3
 8002ca4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e7e4      	b.n	8002c7e <d_print_comp_inner+0x256>
 8002cb4:	4e64      	ldr	r6, [pc, #400]	; (8002e48 <d_print_comp_inner+0x420>)
 8002cb6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002cba:	f106 0a11 	add.w	sl, r6, #17
 8002cbe:	f04f 0900 	mov.w	r9, #0
 8002cc2:	e009      	b.n	8002cd8 <d_print_comp_inner+0x2b0>
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	3101      	adds	r1, #1
 8002cc8:	4556      	cmp	r6, sl
 8002cca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002cce:	54e7      	strb	r7, [r4, r3]
 8002cd0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002cd4:	f001 8296 	beq.w	8004204 <d_print_comp_inner+0x17dc>
 8002cd8:	29ff      	cmp	r1, #255	; 0xff
 8002cda:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002cde:	d1f1      	bne.n	8002cc4 <d_print_comp_inner+0x29c>
 8002ce0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ce4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ce8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002cec:	4620      	mov	r0, r4
 8002cee:	4798      	blx	r3
 8002cf0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e7e3      	b.n	8002cc8 <d_print_comp_inner+0x2a0>
 8002d00:	4e52      	ldr	r6, [pc, #328]	; (8002e4c <d_print_comp_inner+0x424>)
 8002d02:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d06:	f106 0a19 	add.w	sl, r6, #25
 8002d0a:	f04f 0900 	mov.w	r9, #0
 8002d0e:	e009      	b.n	8002d24 <d_print_comp_inner+0x2fc>
 8002d10:	460b      	mov	r3, r1
 8002d12:	3101      	adds	r1, #1
 8002d14:	4556      	cmp	r6, sl
 8002d16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d1a:	54e7      	strb	r7, [r4, r3]
 8002d1c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d20:	f001 82a8 	beq.w	8004274 <d_print_comp_inner+0x184c>
 8002d24:	29ff      	cmp	r1, #255	; 0xff
 8002d26:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d2a:	d1f1      	bne.n	8002d10 <d_print_comp_inner+0x2e8>
 8002d2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d30:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4798      	blx	r3
 8002d3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d40:	3301      	adds	r3, #1
 8002d42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d46:	2101      	movs	r1, #1
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e7e3      	b.n	8002d14 <d_print_comp_inner+0x2ec>
 8002d4c:	4e40      	ldr	r6, [pc, #256]	; (8002e50 <d_print_comp_inner+0x428>)
 8002d4e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d52:	f106 0a15 	add.w	sl, r6, #21
 8002d56:	f04f 0900 	mov.w	r9, #0
 8002d5a:	e009      	b.n	8002d70 <d_print_comp_inner+0x348>
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	3101      	adds	r1, #1
 8002d60:	4556      	cmp	r6, sl
 8002d62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d66:	54e7      	strb	r7, [r4, r3]
 8002d68:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d6c:	f001 8251 	beq.w	8004212 <d_print_comp_inner+0x17ea>
 8002d70:	29ff      	cmp	r1, #255	; 0xff
 8002d72:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d76:	d1f1      	bne.n	8002d5c <d_print_comp_inner+0x334>
 8002d78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d7c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d84:	4620      	mov	r0, r4
 8002d86:	4798      	blx	r3
 8002d88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d92:	2101      	movs	r1, #1
 8002d94:	2300      	movs	r3, #0
 8002d96:	e7e3      	b.n	8002d60 <d_print_comp_inner+0x338>
 8002d98:	4e2e      	ldr	r6, [pc, #184]	; (8002e54 <d_print_comp_inner+0x42c>)
 8002d9a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d9e:	f106 0a16 	add.w	sl, r6, #22
 8002da2:	f04f 0900 	mov.w	r9, #0
 8002da6:	e009      	b.n	8002dbc <d_print_comp_inner+0x394>
 8002da8:	460b      	mov	r3, r1
 8002daa:	3101      	adds	r1, #1
 8002dac:	4556      	cmp	r6, sl
 8002dae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002db2:	54e7      	strb	r7, [r4, r3]
 8002db4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002db8:	f001 8263 	beq.w	8004282 <d_print_comp_inner+0x185a>
 8002dbc:	29ff      	cmp	r1, #255	; 0xff
 8002dbe:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002dc2:	d1f1      	bne.n	8002da8 <d_print_comp_inner+0x380>
 8002dc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002dc8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002dcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	4798      	blx	r3
 8002dd4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dde:	2101      	movs	r1, #1
 8002de0:	2300      	movs	r3, #0
 8002de2:	e7e3      	b.n	8002dac <d_print_comp_inner+0x384>
 8002de4:	4e1c      	ldr	r6, [pc, #112]	; (8002e58 <d_print_comp_inner+0x430>)
 8002de6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002dea:	f106 0a13 	add.w	sl, r6, #19
 8002dee:	f04f 0900 	mov.w	r9, #0
 8002df2:	e009      	b.n	8002e08 <d_print_comp_inner+0x3e0>
 8002df4:	460b      	mov	r3, r1
 8002df6:	3101      	adds	r1, #1
 8002df8:	45b2      	cmp	sl, r6
 8002dfa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002dfe:	54e7      	strb	r7, [r4, r3]
 8002e00:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e04:	f001 8077 	beq.w	8003ef6 <d_print_comp_inner+0x14ce>
 8002e08:	29ff      	cmp	r1, #255	; 0xff
 8002e0a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e0e:	d1f1      	bne.n	8002df4 <d_print_comp_inner+0x3cc>
 8002e10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e14:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e18:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	4798      	blx	r3
 8002e20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e24:	3301      	adds	r3, #1
 8002e26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e7e3      	b.n	8002df8 <d_print_comp_inner+0x3d0>
 8002e30:	4e0a      	ldr	r6, [pc, #40]	; (8002e5c <d_print_comp_inner+0x434>)
 8002e32:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e36:	f106 0a1a 	add.w	sl, r6, #26
 8002e3a:	f04f 0900 	mov.w	r9, #0
 8002e3e:	e019      	b.n	8002e74 <d_print_comp_inner+0x44c>
 8002e40:	08019f48 	.word	0x08019f48
 8002e44:	0801a144 	.word	0x0801a144
 8002e48:	0801a0d3 	.word	0x0801a0d3
 8002e4c:	0801a09f 	.word	0x0801a09f
 8002e50:	0801a0bb 	.word	0x0801a0bb
 8002e54:	0801a087 	.word	0x0801a087
 8002e58:	0801a073 	.word	0x0801a073
 8002e5c:	0801a047 	.word	0x0801a047
 8002e60:	460b      	mov	r3, r1
 8002e62:	3101      	adds	r1, #1
 8002e64:	4556      	cmp	r6, sl
 8002e66:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e6a:	54e7      	strb	r7, [r4, r3]
 8002e6c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e70:	f001 804f 	beq.w	8003f12 <d_print_comp_inner+0x14ea>
 8002e74:	29ff      	cmp	r1, #255	; 0xff
 8002e76:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e7a:	d1f1      	bne.n	8002e60 <d_print_comp_inner+0x438>
 8002e7c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e80:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e88:	4620      	mov	r0, r4
 8002e8a:	4798      	blx	r3
 8002e8c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e90:	3301      	adds	r3, #1
 8002e92:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e96:	2101      	movs	r1, #1
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e7e3      	b.n	8002e64 <d_print_comp_inner+0x43c>
 8002e9c:	4eb5      	ldr	r6, [pc, #724]	; (8003174 <d_print_comp_inner+0x74c>)
 8002e9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ea2:	f106 0a0f 	add.w	sl, r6, #15
 8002ea6:	f04f 0900 	mov.w	r9, #0
 8002eaa:	e009      	b.n	8002ec0 <d_print_comp_inner+0x498>
 8002eac:	460b      	mov	r3, r1
 8002eae:	3101      	adds	r1, #1
 8002eb0:	4556      	cmp	r6, sl
 8002eb2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002eb6:	54e7      	strb	r7, [r4, r3]
 8002eb8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002ebc:	f001 8022 	beq.w	8003f04 <d_print_comp_inner+0x14dc>
 8002ec0:	29ff      	cmp	r1, #255	; 0xff
 8002ec2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002ec6:	d1f1      	bne.n	8002eac <d_print_comp_inner+0x484>
 8002ec8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ecc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ed0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	4798      	blx	r3
 8002ed8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002edc:	3301      	adds	r3, #1
 8002ede:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e7e3      	b.n	8002eb0 <d_print_comp_inner+0x488>
 8002ee8:	4ea3      	ldr	r6, [pc, #652]	; (8003178 <d_print_comp_inner+0x750>)
 8002eea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002eee:	f106 0a11 	add.w	sl, r6, #17
 8002ef2:	f04f 0900 	mov.w	r9, #0
 8002ef6:	e009      	b.n	8002f0c <d_print_comp_inner+0x4e4>
 8002ef8:	460b      	mov	r3, r1
 8002efa:	3101      	adds	r1, #1
 8002efc:	4556      	cmp	r6, sl
 8002efe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f02:	54e7      	strb	r7, [r4, r3]
 8002f04:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f08:	f001 800a 	beq.w	8003f20 <d_print_comp_inner+0x14f8>
 8002f0c:	29ff      	cmp	r1, #255	; 0xff
 8002f0e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f12:	d1f1      	bne.n	8002ef8 <d_print_comp_inner+0x4d0>
 8002f14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f18:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f20:	4620      	mov	r0, r4
 8002f22:	4798      	blx	r3
 8002f24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2300      	movs	r3, #0
 8002f32:	e7e3      	b.n	8002efc <d_print_comp_inner+0x4d4>
 8002f34:	4e91      	ldr	r6, [pc, #580]	; (800317c <d_print_comp_inner+0x754>)
 8002f36:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f3a:	f106 0a15 	add.w	sl, r6, #21
 8002f3e:	f04f 0900 	mov.w	r9, #0
 8002f42:	e009      	b.n	8002f58 <d_print_comp_inner+0x530>
 8002f44:	460b      	mov	r3, r1
 8002f46:	3101      	adds	r1, #1
 8002f48:	4556      	cmp	r6, sl
 8002f4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f4e:	54e7      	strb	r7, [r4, r3]
 8002f50:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f54:	f000 87b3 	beq.w	8003ebe <d_print_comp_inner+0x1496>
 8002f58:	29ff      	cmp	r1, #255	; 0xff
 8002f5a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f5e:	d1f1      	bne.n	8002f44 <d_print_comp_inner+0x51c>
 8002f60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f64:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	4798      	blx	r3
 8002f70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f74:	3301      	adds	r3, #1
 8002f76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e7e3      	b.n	8002f48 <d_print_comp_inner+0x520>
 8002f80:	4e7f      	ldr	r6, [pc, #508]	; (8003180 <d_print_comp_inner+0x758>)
 8002f82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f86:	f106 0a12 	add.w	sl, r6, #18
 8002f8a:	f04f 0900 	mov.w	r9, #0
 8002f8e:	e009      	b.n	8002fa4 <d_print_comp_inner+0x57c>
 8002f90:	460b      	mov	r3, r1
 8002f92:	3101      	adds	r1, #1
 8002f94:	45b2      	cmp	sl, r6
 8002f96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f9a:	54e7      	strb	r7, [r4, r3]
 8002f9c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002fa0:	f000 879b 	beq.w	8003eda <d_print_comp_inner+0x14b2>
 8002fa4:	29ff      	cmp	r1, #255	; 0xff
 8002fa6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002faa:	d1f1      	bne.n	8002f90 <d_print_comp_inner+0x568>
 8002fac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fb0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002fb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fb8:	4620      	mov	r0, r4
 8002fba:	4798      	blx	r3
 8002fbc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e7e3      	b.n	8002f94 <d_print_comp_inner+0x56c>
 8002fcc:	4e6d      	ldr	r6, [pc, #436]	; (8003184 <d_print_comp_inner+0x75c>)
 8002fce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002fd2:	f106 0a10 	add.w	sl, r6, #16
 8002fd6:	f04f 0900 	mov.w	r9, #0
 8002fda:	e009      	b.n	8002ff0 <d_print_comp_inner+0x5c8>
 8002fdc:	460b      	mov	r3, r1
 8002fde:	3101      	adds	r1, #1
 8002fe0:	4556      	cmp	r6, sl
 8002fe2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002fe6:	54e7      	strb	r7, [r4, r3]
 8002fe8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002fec:	f000 876e 	beq.w	8003ecc <d_print_comp_inner+0x14a4>
 8002ff0:	29ff      	cmp	r1, #255	; 0xff
 8002ff2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002ff6:	d1f1      	bne.n	8002fdc <d_print_comp_inner+0x5b4>
 8002ff8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ffc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003000:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003004:	4620      	mov	r0, r4
 8003006:	4798      	blx	r3
 8003008:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800300c:	3301      	adds	r3, #1
 800300e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003012:	2101      	movs	r1, #1
 8003014:	2300      	movs	r3, #0
 8003016:	e7e3      	b.n	8002fe0 <d_print_comp_inner+0x5b8>
 8003018:	4e5b      	ldr	r6, [pc, #364]	; (8003188 <d_print_comp_inner+0x760>)
 800301a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800301e:	f106 0a0d 	add.w	sl, r6, #13
 8003022:	f04f 0900 	mov.w	r9, #0
 8003026:	e009      	b.n	800303c <d_print_comp_inner+0x614>
 8003028:	460b      	mov	r3, r1
 800302a:	3101      	adds	r1, #1
 800302c:	4556      	cmp	r6, sl
 800302e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003032:	54e7      	strb	r7, [r4, r3]
 8003034:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003038:	f000 8756 	beq.w	8003ee8 <d_print_comp_inner+0x14c0>
 800303c:	29ff      	cmp	r1, #255	; 0xff
 800303e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003042:	d1f1      	bne.n	8003028 <d_print_comp_inner+0x600>
 8003044:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003048:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800304c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003050:	4620      	mov	r0, r4
 8003052:	4798      	blx	r3
 8003054:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003058:	3301      	adds	r3, #1
 800305a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800305e:	2101      	movs	r1, #1
 8003060:	2300      	movs	r3, #0
 8003062:	e7e3      	b.n	800302c <d_print_comp_inner+0x604>
 8003064:	4e49      	ldr	r6, [pc, #292]	; (800318c <d_print_comp_inner+0x764>)
 8003066:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800306a:	f106 0a18 	add.w	sl, r6, #24
 800306e:	f04f 0900 	mov.w	r9, #0
 8003072:	e009      	b.n	8003088 <d_print_comp_inner+0x660>
 8003074:	460b      	mov	r3, r1
 8003076:	3101      	adds	r1, #1
 8003078:	45b2      	cmp	sl, r6
 800307a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800307e:	54e7      	strb	r7, [r4, r3]
 8003080:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003084:	f000 86e3 	beq.w	8003e4e <d_print_comp_inner+0x1426>
 8003088:	29ff      	cmp	r1, #255	; 0xff
 800308a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800308e:	d1f1      	bne.n	8003074 <d_print_comp_inner+0x64c>
 8003090:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003094:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003098:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800309c:	4620      	mov	r0, r4
 800309e:	4798      	blx	r3
 80030a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030a4:	3301      	adds	r3, #1
 80030a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030aa:	2101      	movs	r1, #1
 80030ac:	2300      	movs	r3, #0
 80030ae:	e7e3      	b.n	8003078 <d_print_comp_inner+0x650>
 80030b0:	4e37      	ldr	r6, [pc, #220]	; (8003190 <d_print_comp_inner+0x768>)
 80030b2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80030b6:	f106 0a0b 	add.w	sl, r6, #11
 80030ba:	f04f 0900 	mov.w	r9, #0
 80030be:	e009      	b.n	80030d4 <d_print_comp_inner+0x6ac>
 80030c0:	460b      	mov	r3, r1
 80030c2:	3101      	adds	r1, #1
 80030c4:	45b2      	cmp	sl, r6
 80030c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80030ca:	54e7      	strb	r7, [r4, r3]
 80030cc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80030d0:	f000 87ca 	beq.w	8004068 <d_print_comp_inner+0x1640>
 80030d4:	29ff      	cmp	r1, #255	; 0xff
 80030d6:	f816 7b01 	ldrb.w	r7, [r6], #1
 80030da:	d1f1      	bne.n	80030c0 <d_print_comp_inner+0x698>
 80030dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030e8:	4620      	mov	r0, r4
 80030ea:	4798      	blx	r3
 80030ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030f0:	3301      	adds	r3, #1
 80030f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030f6:	2101      	movs	r1, #1
 80030f8:	2300      	movs	r3, #0
 80030fa:	e7e3      	b.n	80030c4 <d_print_comp_inner+0x69c>
 80030fc:	4e25      	ldr	r6, [pc, #148]	; (8003194 <d_print_comp_inner+0x76c>)
 80030fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003102:	f106 0a08 	add.w	sl, r6, #8
 8003106:	f04f 0900 	mov.w	r9, #0
 800310a:	e009      	b.n	8003120 <d_print_comp_inner+0x6f8>
 800310c:	460b      	mov	r3, r1
 800310e:	3101      	adds	r1, #1
 8003110:	45b2      	cmp	sl, r6
 8003112:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003116:	54e7      	strb	r7, [r4, r3]
 8003118:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800311c:	f000 86c8 	beq.w	8003eb0 <d_print_comp_inner+0x1488>
 8003120:	29ff      	cmp	r1, #255	; 0xff
 8003122:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003126:	d1f1      	bne.n	800310c <d_print_comp_inner+0x6e4>
 8003128:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800312c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003130:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003134:	4620      	mov	r0, r4
 8003136:	4798      	blx	r3
 8003138:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800313c:	3301      	adds	r3, #1
 800313e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003142:	2101      	movs	r1, #1
 8003144:	2300      	movs	r3, #0
 8003146:	e7e3      	b.n	8003110 <d_print_comp_inner+0x6e8>
 8003148:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800314c:	29ff      	cmp	r1, #255	; 0xff
 800314e:	f001 847c 	beq.w	8004a4a <d_print_comp_inner+0x2022>
 8003152:	1c4a      	adds	r2, r1, #1
 8003154:	237e      	movs	r3, #126	; 0x7e
 8003156:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800315a:	5463      	strb	r3, [r4, r1]
 800315c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003160:	4641      	mov	r1, r8
 8003162:	68aa      	ldr	r2, [r5, #8]
 8003164:	4620      	mov	r0, r4
 8003166:	f002 fa03 	bl	8005570 <d_print_comp>
 800316a:	e52b      	b.n	8002bc4 <d_print_comp_inner+0x19c>
 800316c:	68aa      	ldr	r2, [r5, #8]
 800316e:	f002 f9ff 	bl	8005570 <d_print_comp>
 8003172:	e527      	b.n	8002bc4 <d_print_comp_inner+0x19c>
 8003174:	0801a063 	.word	0x0801a063
 8003178:	0801a033 	.word	0x0801a033
 800317c:	0801a02f 	.word	0x0801a02f
 8003180:	0801a007 	.word	0x0801a007
 8003184:	0801a01b 	.word	0x0801a01b
 8003188:	08019ff8 	.word	0x08019ff8
 800318c:	08019fd3 	.word	0x08019fd3
 8003190:	08019fbc 	.word	0x08019fbc
 8003194:	08019fc7 	.word	0x08019fc7
 8003198:	2200      	movs	r2, #0
 800319a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800319e:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 80031a2:	686e      	ldr	r6, [r5, #4]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2e00      	cmp	r6, #0
 80031a8:	f000 864c 	beq.w	8003e44 <d_print_comp_inner+0x141c>
 80031ac:	f10d 0910 	add.w	r9, sp, #16
 80031b0:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 80031b4:	4617      	mov	r7, r2
 80031b6:	4696      	mov	lr, r2
 80031b8:	464b      	mov	r3, r9
 80031ba:	7831      	ldrb	r1, [r6, #0]
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	f1a1 021c 	sub.w	r2, r1, #28
 80031c2:	2a04      	cmp	r2, #4
 80031c4:	605e      	str	r6, [r3, #4]
 80031c6:	f8c3 e008 	str.w	lr, [r3, #8]
 80031ca:	f8c3 c00c 	str.w	ip, [r3, #12]
 80031ce:	f107 0701 	add.w	r7, r7, #1
 80031d2:	4618      	mov	r0, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	f240 862a 	bls.w	8003e2e <d_print_comp_inner+0x1406>
 80031da:	294c      	cmp	r1, #76	; 0x4c
 80031dc:	f000 8627 	beq.w	8003e2e <d_print_comp_inner+0x1406>
 80031e0:	2904      	cmp	r1, #4
 80031e2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80031e6:	f001 87bb 	beq.w	8005160 <d_print_comp_inner+0x2738>
 80031ea:	2902      	cmp	r1, #2
 80031ec:	d11a      	bne.n	8003224 <d_print_comp_inner+0x7fc>
 80031ee:	f8d6 b008 	ldr.w	fp, [r6, #8]
 80031f2:	f89b 3000 	ldrb.w	r3, [fp]
 80031f6:	2b46      	cmp	r3, #70	; 0x46
 80031f8:	f002 8035 	beq.w	8005266 <d_print_comp_inner+0x283e>
 80031fc:	462b      	mov	r3, r5
 80031fe:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
 8003202:	9601      	str	r6, [sp, #4]
 8003204:	465d      	mov	r5, fp
 8003206:	4676      	mov	r6, lr
 8003208:	46a2      	mov	sl, r4
 800320a:	469b      	mov	fp, r3
 800320c:	782b      	ldrb	r3, [r5, #0]
 800320e:	f1a3 021c 	sub.w	r2, r3, #28
 8003212:	2a04      	cmp	r2, #4
 8003214:	f241 805d 	bls.w	80042d2 <d_print_comp_inner+0x18aa>
 8003218:	2b4c      	cmp	r3, #76	; 0x4c
 800321a:	f001 805a 	beq.w	80042d2 <d_print_comp_inner+0x18aa>
 800321e:	9e01      	ldr	r6, [sp, #4]
 8003220:	4654      	mov	r4, sl
 8003222:	465d      	mov	r5, fp
 8003224:	68aa      	ldr	r2, [r5, #8]
 8003226:	4641      	mov	r1, r8
 8003228:	4620      	mov	r0, r4
 800322a:	f002 f9a1 	bl	8005570 <d_print_comp>
 800322e:	7833      	ldrb	r3, [r6, #0]
 8003230:	2b04      	cmp	r3, #4
 8003232:	f002 8020 	beq.w	8005276 <d_print_comp_inner+0x284e>
 8003236:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 800323a:	2620      	movs	r6, #32
 800323c:	f859 5c08 	ldr.w	r5, [r9, #-8]
 8003240:	3f01      	subs	r7, #1
 8003242:	b985      	cbnz	r5, 8003266 <d_print_comp_inner+0x83e>
 8003244:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003248:	29ff      	cmp	r1, #255	; 0xff
 800324a:	f002 8043 	beq.w	80052d4 <d_print_comp_inner+0x28ac>
 800324e:	1c4b      	adds	r3, r1, #1
 8003250:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003254:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 8003258:	5466      	strb	r6, [r4, r1]
 800325a:	4620      	mov	r0, r4
 800325c:	4641      	mov	r1, r8
 800325e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003262:	f002 f995 	bl	8005590 <d_print_mod>
 8003266:	f1a9 0910 	sub.w	r9, r9, #16
 800326a:	2f00      	cmp	r7, #0
 800326c:	d1e6      	bne.n	800323c <d_print_comp_inner+0x814>
 800326e:	9b00      	ldr	r3, [sp, #0]
 8003270:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003274:	e4a6      	b.n	8002bc4 <d_print_comp_inner+0x19c>
 8003276:	4ed1      	ldr	r6, [pc, #836]	; (80035bc <d_print_comp_inner+0xb94>)
 8003278:	686a      	ldr	r2, [r5, #4]
 800327a:	f002 f979 	bl	8005570 <d_print_comp>
 800327e:	f106 0a05 	add.w	sl, r6, #5
 8003282:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003286:	f04f 0900 	mov.w	r9, #0
 800328a:	e009      	b.n	80032a0 <d_print_comp_inner+0x878>
 800328c:	460b      	mov	r3, r1
 800328e:	3101      	adds	r1, #1
 8003290:	45b2      	cmp	sl, r6
 8003292:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003296:	54e7      	strb	r7, [r4, r3]
 8003298:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800329c:	f000 86d1 	beq.w	8004042 <d_print_comp_inner+0x161a>
 80032a0:	29ff      	cmp	r1, #255	; 0xff
 80032a2:	f816 7b01 	ldrb.w	r7, [r6], #1
 80032a6:	d1f1      	bne.n	800328c <d_print_comp_inner+0x864>
 80032a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032ac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80032b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032b4:	4620      	mov	r0, r4
 80032b6:	4798      	blx	r3
 80032b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032bc:	3301      	adds	r3, #1
 80032be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032c2:	2101      	movs	r1, #1
 80032c4:	2300      	movs	r3, #0
 80032c6:	e7e3      	b.n	8003290 <d_print_comp_inner+0x868>
 80032c8:	686a      	ldr	r2, [r5, #4]
 80032ca:	f002 f951 	bl	8005570 <d_print_comp>
 80032ce:	f018 0904 	ands.w	r9, r8, #4
 80032d2:	f001 82aa 	beq.w	800482a <d_print_comp_inner+0x1e02>
 80032d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80032da:	29ff      	cmp	r1, #255	; 0xff
 80032dc:	f001 859a 	beq.w	8004e14 <d_print_comp_inner+0x23ec>
 80032e0:	1c4a      	adds	r2, r1, #1
 80032e2:	232e      	movs	r3, #46	; 0x2e
 80032e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80032e8:	5463      	strb	r3, [r4, r1]
 80032ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032ee:	68ad      	ldr	r5, [r5, #8]
 80032f0:	782b      	ldrb	r3, [r5, #0]
 80032f2:	2b46      	cmp	r3, #70	; 0x46
 80032f4:	f001 83cc 	beq.w	8004a90 <d_print_comp_inner+0x2068>
 80032f8:	462a      	mov	r2, r5
 80032fa:	4641      	mov	r1, r8
 80032fc:	4620      	mov	r0, r4
 80032fe:	f002 f937 	bl	8005570 <d_print_comp>
 8003302:	e45f      	b.n	8002bc4 <d_print_comp_inner+0x19c>
 8003304:	f011 0804 	ands.w	r8, r1, #4
 8003308:	f041 808b 	bne.w	8004422 <d_print_comp_inner+0x19fa>
 800330c:	68af      	ldr	r7, [r5, #8]
 800330e:	686d      	ldr	r5, [r5, #4]
 8003310:	2f00      	cmp	r7, #0
 8003312:	f43f ac57 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 8003316:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800331a:	442f      	add	r7, r5
 800331c:	e009      	b.n	8003332 <d_print_comp_inner+0x90a>
 800331e:	460b      	mov	r3, r1
 8003320:	3101      	adds	r1, #1
 8003322:	42bd      	cmp	r5, r7
 8003324:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003328:	54e6      	strb	r6, [r4, r3]
 800332a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800332e:	f43f ac49 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 8003332:	29ff      	cmp	r1, #255	; 0xff
 8003334:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003338:	d1f1      	bne.n	800331e <d_print_comp_inner+0x8f6>
 800333a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800333e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003342:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003346:	4620      	mov	r0, r4
 8003348:	4798      	blx	r3
 800334a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800334e:	3301      	adds	r3, #1
 8003350:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003354:	2101      	movs	r1, #1
 8003356:	2300      	movs	r3, #0
 8003358:	e7e3      	b.n	8003322 <d_print_comp_inner+0x8fa>
 800335a:	2301      	movs	r3, #1
 800335c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003360:	e430      	b.n	8002bc4 <d_print_comp_inner+0x19c>
 8003362:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 8003366:	2b00      	cmp	r3, #0
 8003368:	f041 8106 	bne.w	8004578 <d_print_comp_inner+0x1b50>
 800336c:	1d29      	adds	r1, r5, #4
 800336e:	f7fd fa97 	bl	80008a0 <d_lookup_template_argument.isra.6>
 8003372:	2800      	cmp	r0, #0
 8003374:	f43f ac3a 	beq.w	8002bec <d_print_comp_inner+0x1c4>
 8003378:	7803      	ldrb	r3, [r0, #0]
 800337a:	2b2f      	cmp	r3, #47	; 0x2f
 800337c:	f001 83fc 	beq.w	8004b78 <d_print_comp_inner+0x2150>
 8003380:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800338a:	4602      	mov	r2, r0
 800338c:	4641      	mov	r1, r8
 800338e:	4620      	mov	r0, r4
 8003390:	f002 f8ee 	bl	8005570 <d_print_comp>
 8003394:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8003398:	e414      	b.n	8002bc4 <d_print_comp_inner+0x19c>
 800339a:	2300      	movs	r3, #0
 800339c:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 80033a0:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
 80033a4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80033a8:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
 80033ac:	f011 0f04 	tst.w	r1, #4
 80033b0:	686e      	ldr	r6, [r5, #4]
 80033b2:	d005      	beq.n	80033c0 <d_print_comp_inner+0x998>
 80033b4:	7833      	ldrb	r3, [r6, #0]
 80033b6:	b91b      	cbnz	r3, 80033c0 <d_print_comp_inner+0x998>
 80033b8:	68b2      	ldr	r2, [r6, #8]
 80033ba:	2a06      	cmp	r2, #6
 80033bc:	f001 853c 	beq.w	8004e38 <d_print_comp_inner+0x2410>
 80033c0:	4632      	mov	r2, r6
 80033c2:	4641      	mov	r1, r8
 80033c4:	4620      	mov	r0, r4
 80033c6:	f002 f8d3 	bl	8005570 <d_print_comp>
 80033ca:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80033ce:	2b3c      	cmp	r3, #60	; 0x3c
 80033d0:	f001 8274 	beq.w	80048bc <d_print_comp_inner+0x1e94>
 80033d4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80033d8:	2bff      	cmp	r3, #255	; 0xff
 80033da:	f001 8489 	beq.w	8004cf0 <d_print_comp_inner+0x22c8>
 80033de:	1c59      	adds	r1, r3, #1
 80033e0:	223c      	movs	r2, #60	; 0x3c
 80033e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033e6:	54e2      	strb	r2, [r4, r3]
 80033e8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80033ec:	4641      	mov	r1, r8
 80033ee:	68aa      	ldr	r2, [r5, #8]
 80033f0:	4620      	mov	r0, r4
 80033f2:	f002 f8bd 	bl	8005570 <d_print_comp>
 80033f6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80033fa:	2b3e      	cmp	r3, #62	; 0x3e
 80033fc:	f001 8239 	beq.w	8004872 <d_print_comp_inner+0x1e4a>
 8003400:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003404:	2bff      	cmp	r3, #255	; 0xff
 8003406:	f001 8460 	beq.w	8004cca <d_print_comp_inner+0x22a2>
 800340a:	1c59      	adds	r1, r3, #1
 800340c:	223e      	movs	r2, #62	; 0x3e
 800340e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003412:	54e2      	strb	r2, [r4, r3]
 8003414:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003418:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800341c:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
 8003420:	f7ff bbd0 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003424:	686f      	ldr	r7, [r5, #4]
 8003426:	2f00      	cmp	r7, #0
 8003428:	f001 8082 	beq.w	8004530 <d_print_comp_inner+0x1b08>
 800342c:	4d64      	ldr	r5, [pc, #400]	; (80035c0 <d_print_comp_inner+0xb98>)
 800342e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003432:	f105 0906 	add.w	r9, r5, #6
 8003436:	f04f 0800 	mov.w	r8, #0
 800343a:	e009      	b.n	8003450 <d_print_comp_inner+0xa28>
 800343c:	460b      	mov	r3, r1
 800343e:	3101      	adds	r1, #1
 8003440:	45a9      	cmp	r9, r5
 8003442:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003446:	54e6      	strb	r6, [r4, r3]
 8003448:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800344c:	f000 8782 	beq.w	8004354 <d_print_comp_inner+0x192c>
 8003450:	29ff      	cmp	r1, #255	; 0xff
 8003452:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003456:	d1f1      	bne.n	800343c <d_print_comp_inner+0xa14>
 8003458:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800345c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003460:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003464:	4620      	mov	r0, r4
 8003466:	4798      	blx	r3
 8003468:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800346c:	3301      	adds	r3, #1
 800346e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003472:	2101      	movs	r1, #1
 8003474:	2300      	movs	r3, #0
 8003476:	e7e3      	b.n	8003440 <d_print_comp_inner+0xa18>
 8003478:	4e52      	ldr	r6, [pc, #328]	; (80035c4 <d_print_comp_inner+0xb9c>)
 800347a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800347e:	f106 0a0a 	add.w	sl, r6, #10
 8003482:	f04f 0900 	mov.w	r9, #0
 8003486:	e009      	b.n	800349c <d_print_comp_inner+0xa74>
 8003488:	460b      	mov	r3, r1
 800348a:	3101      	adds	r1, #1
 800348c:	4556      	cmp	r6, sl
 800348e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003492:	54e7      	strb	r7, [r4, r3]
 8003494:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003498:	f000 8701 	beq.w	800429e <d_print_comp_inner+0x1876>
 800349c:	29ff      	cmp	r1, #255	; 0xff
 800349e:	f816 7b01 	ldrb.w	r7, [r6], #1
 80034a2:	d1f1      	bne.n	8003488 <d_print_comp_inner+0xa60>
 80034a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034a8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034b0:	4620      	mov	r0, r4
 80034b2:	4798      	blx	r3
 80034b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034b8:	3301      	adds	r3, #1
 80034ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034be:	2101      	movs	r1, #1
 80034c0:	2300      	movs	r3, #0
 80034c2:	e7e3      	b.n	800348c <d_print_comp_inner+0xa64>
 80034c4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80034c8:	792d      	ldrb	r5, [r5, #4]
 80034ca:	29ff      	cmp	r1, #255	; 0xff
 80034cc:	f001 82ab 	beq.w	8004a26 <d_print_comp_inner+0x1ffe>
 80034d0:	1c4b      	adds	r3, r1, #1
 80034d2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034d6:	5465      	strb	r5, [r4, r1]
 80034d8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80034dc:	f7ff bb72 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80034e0:	686a      	ldr	r2, [r5, #4]
 80034e2:	f002 f845 	bl	8005570 <d_print_comp>
 80034e6:	68aa      	ldr	r2, [r5, #8]
 80034e8:	4641      	mov	r1, r8
 80034ea:	4620      	mov	r0, r4
 80034ec:	f002 f840 	bl	8005570 <d_print_comp>
 80034f0:	f7ff bb68 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80034f4:	4e34      	ldr	r6, [pc, #208]	; (80035c8 <d_print_comp_inner+0xba0>)
 80034f6:	686a      	ldr	r2, [r5, #4]
 80034f8:	f002 f83a 	bl	8005570 <d_print_comp>
 80034fc:	f106 0a08 	add.w	sl, r6, #8
 8003500:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003504:	f04f 0900 	mov.w	r9, #0
 8003508:	e009      	b.n	800351e <d_print_comp_inner+0xaf6>
 800350a:	460b      	mov	r3, r1
 800350c:	3101      	adds	r1, #1
 800350e:	4556      	cmp	r6, sl
 8003510:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003514:	54e7      	strb	r7, [r4, r3]
 8003516:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800351a:	f000 8508 	beq.w	8003f2e <d_print_comp_inner+0x1506>
 800351e:	29ff      	cmp	r1, #255	; 0xff
 8003520:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003524:	d1f1      	bne.n	800350a <d_print_comp_inner+0xae2>
 8003526:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800352a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800352e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003532:	4620      	mov	r0, r4
 8003534:	4798      	blx	r3
 8003536:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800353a:	3301      	adds	r3, #1
 800353c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003540:	2101      	movs	r1, #1
 8003542:	2300      	movs	r3, #0
 8003544:	e7e3      	b.n	800350e <d_print_comp_inner+0xae6>
 8003546:	686a      	ldr	r2, [r5, #4]
 8003548:	b10a      	cbz	r2, 800354e <d_print_comp_inner+0xb26>
 800354a:	f002 f811 	bl	8005570 <d_print_comp>
 800354e:	68ab      	ldr	r3, [r5, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f43f ab37 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 8003556:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 800355a:	2efd      	cmp	r6, #253	; 0xfd
 800355c:	f201 81bc 	bhi.w	80048d8 <d_print_comp_inner+0x1eb0>
 8003560:	4f1a      	ldr	r7, [pc, #104]	; (80035cc <d_print_comp_inner+0xba4>)
 8003562:	f04f 0a00 	mov.w	sl, #0
 8003566:	f107 0b02 	add.w	fp, r7, #2
 800356a:	4631      	mov	r1, r6
 800356c:	e009      	b.n	8003582 <d_print_comp_inner+0xb5a>
 800356e:	460b      	mov	r3, r1
 8003570:	3101      	adds	r1, #1
 8003572:	455f      	cmp	r7, fp
 8003574:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003578:	54e6      	strb	r6, [r4, r3]
 800357a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800357e:	f000 86c1 	beq.w	8004304 <d_print_comp_inner+0x18dc>
 8003582:	29ff      	cmp	r1, #255	; 0xff
 8003584:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003588:	d1f1      	bne.n	800356e <d_print_comp_inner+0xb46>
 800358a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800358e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003592:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003596:	4620      	mov	r0, r4
 8003598:	4798      	blx	r3
 800359a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800359e:	3301      	adds	r3, #1
 80035a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035a4:	2101      	movs	r1, #1
 80035a6:	2300      	movs	r3, #0
 80035a8:	e7e3      	b.n	8003572 <d_print_comp_inner+0xb4a>
 80035aa:	4e09      	ldr	r6, [pc, #36]	; (80035d0 <d_print_comp_inner+0xba8>)
 80035ac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035b0:	f106 0a09 	add.w	sl, r6, #9
 80035b4:	f04f 0900 	mov.w	r9, #0
 80035b8:	e016      	b.n	80035e8 <d_print_comp_inner+0xbc0>
 80035ba:	bf00      	nop
 80035bc:	08019f88 	.word	0x08019f88
 80035c0:	0801a198 	.word	0x0801a198
 80035c4:	0801a180 	.word	0x0801a180
 80035c8:	0801a1ff 	.word	0x0801a1ff
 80035cc:	0801a11c 	.word	0x0801a11c
 80035d0:	0801a12b 	.word	0x0801a12b
 80035d4:	460b      	mov	r3, r1
 80035d6:	3101      	adds	r1, #1
 80035d8:	4556      	cmp	r6, sl
 80035da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035de:	54e7      	strb	r7, [r4, r3]
 80035e0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80035e4:	f000 8594 	beq.w	8004110 <d_print_comp_inner+0x16e8>
 80035e8:	29ff      	cmp	r1, #255	; 0xff
 80035ea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80035ee:	d1f1      	bne.n	80035d4 <d_print_comp_inner+0xbac>
 80035f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035f4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80035f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035fc:	4620      	mov	r0, r4
 80035fe:	4798      	blx	r3
 8003600:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003604:	3301      	adds	r3, #1
 8003606:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800360a:	2101      	movs	r1, #1
 800360c:	2300      	movs	r3, #0
 800360e:	e7e3      	b.n	80035d8 <d_print_comp_inner+0xbb0>
 8003610:	4ed1      	ldr	r6, [pc, #836]	; (8003958 <d_print_comp_inner+0xf30>)
 8003612:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003616:	f106 0a09 	add.w	sl, r6, #9
 800361a:	f04f 0900 	mov.w	r9, #0
 800361e:	e009      	b.n	8003634 <d_print_comp_inner+0xc0c>
 8003620:	460b      	mov	r3, r1
 8003622:	3101      	adds	r1, #1
 8003624:	4556      	cmp	r6, sl
 8003626:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800362a:	54e7      	strb	r7, [r4, r3]
 800362c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003630:	f000 8597 	beq.w	8004162 <d_print_comp_inner+0x173a>
 8003634:	29ff      	cmp	r1, #255	; 0xff
 8003636:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800363a:	d1f1      	bne.n	8003620 <d_print_comp_inner+0xbf8>
 800363c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003640:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003644:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003648:	4620      	mov	r0, r4
 800364a:	4798      	blx	r3
 800364c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003650:	3301      	adds	r3, #1
 8003652:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003656:	2101      	movs	r1, #1
 8003658:	2300      	movs	r3, #0
 800365a:	e7e3      	b.n	8003624 <d_print_comp_inner+0xbfc>
 800365c:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003660:	4dbe      	ldr	r5, [pc, #760]	; (800395c <d_print_comp_inner+0xf34>)
 8003662:	f8da 7008 	ldr.w	r7, [sl, #8]
 8003666:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800366a:	f105 0808 	add.w	r8, r5, #8
 800366e:	f04f 0900 	mov.w	r9, #0
 8003672:	e009      	b.n	8003688 <d_print_comp_inner+0xc60>
 8003674:	460b      	mov	r3, r1
 8003676:	3101      	adds	r1, #1
 8003678:	45a8      	cmp	r8, r5
 800367a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800367e:	54e6      	strb	r6, [r4, r3]
 8003680:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003684:	f000 8506 	beq.w	8004094 <d_print_comp_inner+0x166c>
 8003688:	29ff      	cmp	r1, #255	; 0xff
 800368a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800368e:	d1f1      	bne.n	8003674 <d_print_comp_inner+0xc4c>
 8003690:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003694:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003698:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800369c:	4620      	mov	r0, r4
 800369e:	4798      	blx	r3
 80036a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80036a4:	3301      	adds	r3, #1
 80036a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80036aa:	2101      	movs	r1, #1
 80036ac:	2300      	movs	r3, #0
 80036ae:	e7e3      	b.n	8003678 <d_print_comp_inner+0xc50>
 80036b0:	686a      	ldr	r2, [r5, #4]
 80036b2:	68ae      	ldr	r6, [r5, #8]
 80036b4:	b10a      	cbz	r2, 80036ba <d_print_comp_inner+0xc92>
 80036b6:	f001 ff5b 	bl	8005570 <d_print_comp>
 80036ba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80036be:	2bff      	cmp	r3, #255	; 0xff
 80036c0:	f001 82b1 	beq.w	8004c26 <d_print_comp_inner+0x21fe>
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	257b      	movs	r5, #123	; 0x7b
 80036c8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036cc:	4641      	mov	r1, r8
 80036ce:	54e5      	strb	r5, [r4, r3]
 80036d0:	4632      	mov	r2, r6
 80036d2:	4620      	mov	r0, r4
 80036d4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80036d8:	f001 ff4a 	bl	8005570 <d_print_comp>
 80036dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80036e0:	29ff      	cmp	r1, #255	; 0xff
 80036e2:	f001 81e7 	beq.w	8004ab4 <d_print_comp_inner+0x208c>
 80036e6:	1c4a      	adds	r2, r1, #1
 80036e8:	237d      	movs	r3, #125	; 0x7d
 80036ea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036ee:	5463      	strb	r3, [r4, r1]
 80036f0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036f4:	f7ff ba66 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80036f8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80036fc:	68ae      	ldr	r6, [r5, #8]
 80036fe:	f899 3000 	ldrb.w	r3, [r9]
 8003702:	2b31      	cmp	r3, #49	; 0x31
 8003704:	f000 87cb 	beq.w	800469e <d_print_comp_inner+0x1c76>
 8003708:	2b33      	cmp	r3, #51	; 0x33
 800370a:	f041 86d3 	bne.w	80054b4 <d_print_comp_inner+0x2a8c>
 800370e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003712:	29ff      	cmp	r1, #255	; 0xff
 8003714:	f001 84c3 	beq.w	800509e <d_print_comp_inner+0x2676>
 8003718:	1c4a      	adds	r2, r1, #1
 800371a:	2328      	movs	r3, #40	; 0x28
 800371c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003720:	5463      	strb	r3, [r4, r1]
 8003722:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003726:	a904      	add	r1, sp, #16
 8003728:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800372c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003730:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8003734:	4620      	mov	r0, r4
 8003736:	4641      	mov	r1, r8
 8003738:	9305      	str	r3, [sp, #20]
 800373a:	9204      	str	r2, [sp, #16]
 800373c:	f7ff f974 	bl	8002a28 <d_print_comp_inner>
 8003740:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003744:	9b05      	ldr	r3, [sp, #20]
 8003746:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800374a:	29ff      	cmp	r1, #255	; 0xff
 800374c:	f001 8496 	beq.w	800507c <d_print_comp_inner+0x2654>
 8003750:	2329      	movs	r3, #41	; 0x29
 8003752:	1c4a      	adds	r2, r1, #1
 8003754:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003758:	5463      	strb	r3, [r4, r1]
 800375a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800375e:	4632      	mov	r2, r6
 8003760:	4641      	mov	r1, r8
 8003762:	4620      	mov	r0, r4
 8003764:	f002 fd2a 	bl	80061bc <d_print_subexpr>
 8003768:	f7ff ba2c 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 800376c:	686a      	ldr	r2, [r5, #4]
 800376e:	f002 fce7 	bl	8006140 <d_print_expr_op>
 8003772:	f7ff ba27 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003776:	f011 0f20 	tst.w	r1, #32
 800377a:	f040 8753 	bne.w	8004624 <d_print_comp_inner+0x1bfc>
 800377e:	686a      	ldr	r2, [r5, #4]
 8003780:	b11a      	cbz	r2, 800378a <d_print_comp_inner+0xd62>
 8003782:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8003786:	f001 81d0 	beq.w	8004b2a <d_print_comp_inner+0x2102>
 800378a:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 800378e:	f105 0208 	add.w	r2, r5, #8
 8003792:	4641      	mov	r1, r8
 8003794:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003798:	4620      	mov	r0, r4
 800379a:	f002 fbdd 	bl	8005f58 <d_print_function_type.isra.11>
 800379e:	f7ff ba11 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80037a2:	f011 0804 	ands.w	r8, r1, #4
 80037a6:	686b      	ldr	r3, [r5, #4]
 80037a8:	f040 8612 	bne.w	80043d0 <d_print_comp_inner+0x19a8>
 80037ac:	e893 00a0 	ldmia.w	r3, {r5, r7}
 80037b0:	2f00      	cmp	r7, #0
 80037b2:	f43f aa07 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 80037b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80037ba:	442f      	add	r7, r5
 80037bc:	e009      	b.n	80037d2 <d_print_comp_inner+0xdaa>
 80037be:	460b      	mov	r3, r1
 80037c0:	3101      	adds	r1, #1
 80037c2:	42bd      	cmp	r5, r7
 80037c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80037c8:	54e6      	strb	r6, [r4, r3]
 80037ca:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80037ce:	f43f a9f9 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 80037d2:	29ff      	cmp	r1, #255	; 0xff
 80037d4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80037d8:	d1f1      	bne.n	80037be <d_print_comp_inner+0xd96>
 80037da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80037de:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80037e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80037e6:	4620      	mov	r0, r4
 80037e8:	4798      	blx	r3
 80037ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80037ee:	3301      	adds	r3, #1
 80037f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80037f4:	2101      	movs	r1, #1
 80037f6:	2300      	movs	r3, #0
 80037f8:	e7e3      	b.n	80037c2 <d_print_comp_inner+0xd9a>
 80037fa:	6869      	ldr	r1, [r5, #4]
 80037fc:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
 8003800:	780b      	ldrb	r3, [r1, #0]
 8003802:	2f00      	cmp	r7, #0
 8003804:	f040 85e1 	bne.w	80043ca <d_print_comp_inner+0x19a2>
 8003808:	2b05      	cmp	r3, #5
 800380a:	f001 81c7 	beq.w	8004b9c <d_print_comp_inner+0x2174>
 800380e:	2b23      	cmp	r3, #35	; 0x23
 8003810:	f000 8689 	beq.w	8004526 <d_print_comp_inner+0x1afe>
 8003814:	782a      	ldrb	r2, [r5, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	f000 8685 	beq.w	8004526 <d_print_comp_inner+0x1afe>
 800381c:	2b24      	cmp	r3, #36	; 0x24
 800381e:	f47f a9eb 	bne.w	8002bf8 <d_print_comp_inner+0x1d0>
 8003822:	a814      	add	r0, sp, #80	; 0x50
 8003824:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003828:	684a      	ldr	r2, [r1, #4]
 800382a:	f840 3d40 	str.w	r3, [r0, #-64]!
 800382e:	2100      	movs	r1, #0
 8003830:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003834:	9505      	str	r5, [sp, #20]
 8003836:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 800383a:	9106      	str	r1, [sp, #24]
 800383c:	9307      	str	r3, [sp, #28]
 800383e:	2a00      	cmp	r2, #0
 8003840:	f47f a9e8 	bne.w	8002c14 <d_print_comp_inner+0x1ec>
 8003844:	f7ff b9e5 	b.w	8002c12 <d_print_comp_inner+0x1ea>
 8003848:	686a      	ldr	r2, [r5, #4]
 800384a:	f001 fe91 	bl	8005570 <d_print_comp>
 800384e:	f7ff b9b9 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003852:	ab14      	add	r3, sp, #80	; 0x50
 8003854:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8003858:	f843 2d40 	str.w	r2, [r3, #-64]!
 800385c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8003860:	68aa      	ldr	r2, [r5, #8]
 8003862:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8003866:	9307      	str	r3, [sp, #28]
 8003868:	2600      	movs	r6, #0
 800386a:	9505      	str	r5, [sp, #20]
 800386c:	9606      	str	r6, [sp, #24]
 800386e:	f001 fe7f 	bl	8005570 <d_print_comp>
 8003872:	9b06      	ldr	r3, [sp, #24]
 8003874:	b923      	cbnz	r3, 8003880 <d_print_comp_inner+0xe58>
 8003876:	462a      	mov	r2, r5
 8003878:	4641      	mov	r1, r8
 800387a:	4620      	mov	r0, r4
 800387c:	f001 fe88 	bl	8005590 <d_print_mod>
 8003880:	9b04      	ldr	r3, [sp, #16]
 8003882:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003886:	f7ff b99d 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 800388a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 800388e:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
 8003892:	f849 bd40 	str.w	fp, [r9, #-64]!
 8003896:	2200      	movs	r2, #0
 8003898:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800389c:	f8cd b000 	str.w	fp, [sp]
 80038a0:	4659      	mov	r1, fp
 80038a2:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 80038a6:	9505      	str	r5, [sp, #20]
 80038a8:	9206      	str	r2, [sp, #24]
 80038aa:	9307      	str	r3, [sp, #28]
 80038ac:	2900      	cmp	r1, #0
 80038ae:	f001 83a0 	beq.w	8004ff2 <d_print_comp_inner+0x25ca>
 80038b2:	684b      	ldr	r3, [r1, #4]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	3b19      	subs	r3, #25
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f201 839a 	bhi.w	8004ff2 <d_print_comp_inner+0x25ca>
 80038be:	46ac      	mov	ip, r5
 80038c0:	2701      	movs	r7, #1
 80038c2:	460e      	mov	r6, r1
 80038c4:	464d      	mov	r5, r9
 80038c6:	e004      	b.n	80038d2 <d_print_comp_inner+0xeaa>
 80038c8:	6873      	ldr	r3, [r6, #4]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	3b19      	subs	r3, #25
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d81b      	bhi.n	800390a <d_print_comp_inner+0xee2>
 80038d2:	68b3      	ldr	r3, [r6, #8]
 80038d4:	ea4f 1e07 	mov.w	lr, r7, lsl #4
 80038d8:	aa14      	add	r2, sp, #80	; 0x50
 80038da:	eb02 0b0e 	add.w	fp, r2, lr
 80038de:	b98b      	cbnz	r3, 8003904 <d_print_comp_inner+0xedc>
 80038e0:	2f03      	cmp	r7, #3
 80038e2:	f201 80f9 	bhi.w	8004ad8 <d_print_comp_inner+0x20b0>
 80038e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80038ea:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 80038ee:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 80038f2:	f84b 5c40 	str.w	r5, [fp, #-64]
 80038f6:	2301      	movs	r3, #1
 80038f8:	eb09 050e 	add.w	r5, r9, lr
 80038fc:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8003900:	3701      	adds	r7, #1
 8003902:	60b3      	str	r3, [r6, #8]
 8003904:	6836      	ldr	r6, [r6, #0]
 8003906:	2e00      	cmp	r6, #0
 8003908:	d1de      	bne.n	80038c8 <d_print_comp_inner+0xea0>
 800390a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800390e:	4641      	mov	r1, r8
 8003910:	4620      	mov	r0, r4
 8003912:	4665      	mov	r5, ip
 8003914:	f001 fe2c 	bl	8005570 <d_print_comp>
 8003918:	9b06      	ldr	r3, [sp, #24]
 800391a:	9a00      	ldr	r2, [sp, #0]
 800391c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8003920:	2b00      	cmp	r3, #0
 8003922:	f47f a94f 	bne.w	8002bc4 <d_print_comp_inner+0x19c>
 8003926:	2f01      	cmp	r7, #1
 8003928:	d00c      	beq.n	8003944 <d_print_comp_inner+0xf1c>
 800392a:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 800392e:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 8003932:	3f01      	subs	r7, #1
 8003934:	4641      	mov	r1, r8
 8003936:	4620      	mov	r0, r4
 8003938:	f001 fe2a 	bl	8005590 <d_print_mod>
 800393c:	2f01      	cmp	r7, #1
 800393e:	f1a9 0910 	sub.w	r9, r9, #16
 8003942:	d1f4      	bne.n	800392e <d_print_comp_inner+0xf06>
 8003944:	1d2a      	adds	r2, r5, #4
 8003946:	4641      	mov	r1, r8
 8003948:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800394c:	4620      	mov	r0, r4
 800394e:	f002 fa27 	bl	8005da0 <d_print_array_type.isra.10>
 8003952:	f7ff b937 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003956:	bf00      	nop
 8003958:	0801a12b 	.word	0x0801a12b
 800395c:	0801a11f 	.word	0x0801a11f
 8003960:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f040 8674 	bne.w	8004652 <d_print_comp_inner+0x1c2a>
 800396a:	686a      	ldr	r2, [r5, #4]
 800396c:	4bd5      	ldr	r3, [pc, #852]	; (8003cc4 <d_print_comp_inner+0x129c>)
 800396e:	6851      	ldr	r1, [r2, #4]
 8003970:	4299      	cmp	r1, r3
 8003972:	f000 866a 	beq.w	800464a <d_print_comp_inner+0x1c22>
 8003976:	4641      	mov	r1, r8
 8003978:	4620      	mov	r0, r4
 800397a:	f001 fdf9 	bl	8005570 <d_print_comp>
 800397e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003982:	2bff      	cmp	r3, #255	; 0xff
 8003984:	f001 82b2 	beq.w	8004eec <d_print_comp_inner+0x24c4>
 8003988:	1c59      	adds	r1, r3, #1
 800398a:	2220      	movs	r2, #32
 800398c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003990:	54e2      	strb	r2, [r4, r3]
 8003992:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003996:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8595 	beq.w	80044ca <d_print_comp_inner+0x1aa2>
 80039a0:	4dc9      	ldr	r5, [pc, #804]	; (8003cc8 <d_print_comp_inner+0x12a0>)
 80039a2:	f04f 0800 	mov.w	r8, #0
 80039a6:	1daf      	adds	r7, r5, #6
 80039a8:	e009      	b.n	80039be <d_print_comp_inner+0xf96>
 80039aa:	460b      	mov	r3, r1
 80039ac:	3101      	adds	r1, #1
 80039ae:	42bd      	cmp	r5, r7
 80039b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039b4:	54e6      	strb	r6, [r4, r3]
 80039b6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80039ba:	f43f a903 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 80039be:	29ff      	cmp	r1, #255	; 0xff
 80039c0:	f815 6b01 	ldrb.w	r6, [r5], #1
 80039c4:	d1f1      	bne.n	80039aa <d_print_comp_inner+0xf82>
 80039c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039ca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039d2:	4620      	mov	r0, r4
 80039d4:	4798      	blx	r3
 80039d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039da:	3301      	adds	r3, #1
 80039dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039e0:	2101      	movs	r1, #1
 80039e2:	2300      	movs	r3, #0
 80039e4:	e7e3      	b.n	80039ae <d_print_comp_inner+0xf86>
 80039e6:	4eb9      	ldr	r6, [pc, #740]	; (8003ccc <d_print_comp_inner+0x12a4>)
 80039e8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80039ec:	f106 090e 	add.w	r9, r6, #14
 80039f0:	f04f 0800 	mov.w	r8, #0
 80039f4:	e009      	b.n	8003a0a <d_print_comp_inner+0xfe2>
 80039f6:	460b      	mov	r3, r1
 80039f8:	3101      	adds	r1, #1
 80039fa:	45b1      	cmp	r9, r6
 80039fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a00:	54e7      	strb	r7, [r4, r3]
 8003a02:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003a06:	f000 83b3 	beq.w	8004170 <d_print_comp_inner+0x1748>
 8003a0a:	29ff      	cmp	r1, #255	; 0xff
 8003a0c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003a10:	d1f1      	bne.n	80039f6 <d_print_comp_inner+0xfce>
 8003a12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a16:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a1e:	4620      	mov	r0, r4
 8003a20:	4798      	blx	r3
 8003a22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a26:	3301      	adds	r3, #1
 8003a28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e7e3      	b.n	80039fa <d_print_comp_inner+0xfd2>
 8003a32:	4ea7      	ldr	r6, [pc, #668]	; (8003cd0 <d_print_comp_inner+0x12a8>)
 8003a34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003a38:	f106 0a1a 	add.w	sl, r6, #26
 8003a3c:	f04f 0900 	mov.w	r9, #0
 8003a40:	e009      	b.n	8003a56 <d_print_comp_inner+0x102e>
 8003a42:	460b      	mov	r3, r1
 8003a44:	3101      	adds	r1, #1
 8003a46:	4556      	cmp	r6, sl
 8003a48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a4c:	54e7      	strb	r7, [r4, r3]
 8003a4e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003a52:	f000 82ef 	beq.w	8004034 <d_print_comp_inner+0x160c>
 8003a56:	29ff      	cmp	r1, #255	; 0xff
 8003a58:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003a5c:	d1f1      	bne.n	8003a42 <d_print_comp_inner+0x101a>
 8003a5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a62:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	4798      	blx	r3
 8003a6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a72:	3301      	adds	r3, #1
 8003a74:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a78:	2101      	movs	r1, #1
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e7e3      	b.n	8003a46 <d_print_comp_inner+0x101e>
 8003a7e:	6869      	ldr	r1, [r5, #4]
 8003a80:	f7fc ff2a 	bl	80008d8 <d_find_pack>
 8003a84:	f04f 0900 	mov.w	r9, #0
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	f001 835d 	beq.w	8005148 <d_print_comp_inner+0x2720>
 8003a8e:	7803      	ldrb	r3, [r0, #0]
 8003a90:	2b2f      	cmp	r3, #47	; 0x2f
 8003a92:	f040 8457 	bne.w	8004344 <d_print_comp_inner+0x191c>
 8003a96:	6843      	ldr	r3, [r0, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8453 	beq.w	8004344 <d_print_comp_inner+0x191c>
 8003a9e:	6880      	ldr	r0, [r0, #8]
 8003aa0:	f109 0901 	add.w	r9, r9, #1
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d1f2      	bne.n	8003a8e <d_print_comp_inner+0x1066>
 8003aa8:	686b      	ldr	r3, [r5, #4]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	f04f 0a00 	mov.w	sl, #0
 8003ab6:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8003aba:	9a00      	ldr	r2, [sp, #0]
 8003abc:	4641      	mov	r1, r8
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f001 fd56 	bl	8005570 <d_print_comp>
 8003ac4:	9b01      	ldr	r3, [sp, #4]
 8003ac6:	42bb      	cmp	r3, r7
 8003ac8:	f340 81ab 	ble.w	8003e22 <d_print_comp_inner+0x13fa>
 8003acc:	4d81      	ldr	r5, [pc, #516]	; (8003cd4 <d_print_comp_inner+0x12ac>)
 8003ace:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ad2:	f105 0b02 	add.w	fp, r5, #2
 8003ad6:	e009      	b.n	8003aec <d_print_comp_inner+0x10c4>
 8003ad8:	460b      	mov	r3, r1
 8003ada:	3101      	adds	r1, #1
 8003adc:	45ab      	cmp	fp, r5
 8003ade:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003ae2:	54e6      	strb	r6, [r4, r3]
 8003ae4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003ae8:	f000 819b 	beq.w	8003e22 <d_print_comp_inner+0x13fa>
 8003aec:	29ff      	cmp	r1, #255	; 0xff
 8003aee:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003af2:	d1f1      	bne.n	8003ad8 <d_print_comp_inner+0x10b0>
 8003af4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003af8:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003afc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b00:	4620      	mov	r0, r4
 8003b02:	4798      	blx	r3
 8003b04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003b0e:	2101      	movs	r1, #1
 8003b10:	2300      	movs	r3, #0
 8003b12:	e7e3      	b.n	8003adc <d_print_comp_inner+0x10b4>
 8003b14:	4e70      	ldr	r6, [pc, #448]	; (8003cd8 <d_print_comp_inner+0x12b0>)
 8003b16:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003b1a:	f106 0a16 	add.w	sl, r6, #22
 8003b1e:	f04f 0900 	mov.w	r9, #0
 8003b22:	e009      	b.n	8003b38 <d_print_comp_inner+0x1110>
 8003b24:	460b      	mov	r3, r1
 8003b26:	3101      	adds	r1, #1
 8003b28:	45b2      	cmp	sl, r6
 8003b2a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b2e:	54e7      	strb	r7, [r4, r3]
 8003b30:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b34:	f000 835f 	beq.w	80041f6 <d_print_comp_inner+0x17ce>
 8003b38:	29ff      	cmp	r1, #255	; 0xff
 8003b3a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003b3e:	d1f1      	bne.n	8003b24 <d_print_comp_inner+0x10fc>
 8003b40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b44:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003b48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	4798      	blx	r3
 8003b50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003b54:	3301      	adds	r3, #1
 8003b56:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e7e3      	b.n	8003b28 <d_print_comp_inner+0x1100>
 8003b60:	4e5e      	ldr	r6, [pc, #376]	; (8003cdc <d_print_comp_inner+0x12b4>)
 8003b62:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003b66:	f106 0a0e 	add.w	sl, r6, #14
 8003b6a:	f04f 0900 	mov.w	r9, #0
 8003b6e:	e009      	b.n	8003b84 <d_print_comp_inner+0x115c>
 8003b70:	460b      	mov	r3, r1
 8003b72:	3101      	adds	r1, #1
 8003b74:	4556      	cmp	r6, sl
 8003b76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b7a:	54e7      	strb	r7, [r4, r3]
 8003b7c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b80:	f000 83a0 	beq.w	80042c4 <d_print_comp_inner+0x189c>
 8003b84:	29ff      	cmp	r1, #255	; 0xff
 8003b86:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003b8a:	d1f1      	bne.n	8003b70 <d_print_comp_inner+0x1148>
 8003b8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b90:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003b94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b98:	4620      	mov	r0, r4
 8003b9a:	4798      	blx	r3
 8003b9c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e7e3      	b.n	8003b74 <d_print_comp_inner+0x114c>
 8003bac:	686a      	ldr	r2, [r5, #4]
 8003bae:	7811      	ldrb	r1, [r2, #0]
 8003bb0:	2927      	cmp	r1, #39	; 0x27
 8003bb2:	f000 8615 	beq.w	80047e0 <d_print_comp_inner+0x1db8>
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003bbc:	29ff      	cmp	r1, #255	; 0xff
 8003bbe:	f001 80c5 	beq.w	8004d4c <d_print_comp_inner+0x2324>
 8003bc2:	2328      	movs	r3, #40	; 0x28
 8003bc4:	1c4a      	adds	r2, r1, #1
 8003bc6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003bca:	5463      	strb	r3, [r4, r1]
 8003bcc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003bd0:	686a      	ldr	r2, [r5, #4]
 8003bd2:	4641      	mov	r1, r8
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f001 fccb 	bl	8005570 <d_print_comp>
 8003bda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003bde:	2bff      	cmp	r3, #255	; 0xff
 8003be0:	f001 8099 	beq.w	8004d16 <d_print_comp_inner+0x22ee>
 8003be4:	1c59      	adds	r1, r3, #1
 8003be6:	2229      	movs	r2, #41	; 0x29
 8003be8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003bec:	54e2      	strb	r2, [r4, r3]
 8003bee:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003bf2:	782b      	ldrb	r3, [r5, #0]
 8003bf4:	2b3d      	cmp	r3, #61	; 0x3d
 8003bf6:	f000 86e6 	beq.w	80049c6 <d_print_comp_inner+0x1f9e>
 8003bfa:	2e08      	cmp	r6, #8
 8003bfc:	f000 867f 	beq.w	80048fe <d_print_comp_inner+0x1ed6>
 8003c00:	68aa      	ldr	r2, [r5, #8]
 8003c02:	4641      	mov	r1, r8
 8003c04:	4620      	mov	r0, r4
 8003c06:	f001 fcb3 	bl	8005570 <d_print_comp>
 8003c0a:	f7fe bfdb 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003c14:	f7fe bfd6 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003c18:	686a      	ldr	r2, [r5, #4]
 8003c1a:	4931      	ldr	r1, [pc, #196]	; (8003ce0 <d_print_comp_inner+0x12b8>)
 8003c1c:	a804      	add	r0, sp, #16
 8003c1e:	f012 f955 	bl	8015ecc <sprintf>
 8003c22:	a804      	add	r0, sp, #16
 8003c24:	f002 febe 	bl	80069a4 <strlen>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	f43e afcb 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 8003c2e:	ad04      	add	r5, sp, #16
 8003c30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003c34:	182f      	adds	r7, r5, r0
 8003c36:	f04f 0800 	mov.w	r8, #0
 8003c3a:	e009      	b.n	8003c50 <d_print_comp_inner+0x1228>
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	3101      	adds	r1, #1
 8003c40:	42bd      	cmp	r5, r7
 8003c42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c46:	54e6      	strb	r6, [r4, r3]
 8003c48:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003c4c:	f43e afba 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 8003c50:	29ff      	cmp	r1, #255	; 0xff
 8003c52:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003c56:	d1f1      	bne.n	8003c3c <d_print_comp_inner+0x1214>
 8003c58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c5c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003c60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c64:	4620      	mov	r0, r4
 8003c66:	4798      	blx	r3
 8003c68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c72:	2101      	movs	r1, #1
 8003c74:	2300      	movs	r3, #0
 8003c76:	e7e3      	b.n	8003c40 <d_print_comp_inner+0x1218>
 8003c78:	4e1a      	ldr	r6, [pc, #104]	; (8003ce4 <d_print_comp_inner+0x12bc>)
 8003c7a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003c7e:	f106 0a1c 	add.w	sl, r6, #28
 8003c82:	f04f 0900 	mov.w	r9, #0
 8003c86:	e009      	b.n	8003c9c <d_print_comp_inner+0x1274>
 8003c88:	460b      	mov	r3, r1
 8003c8a:	3101      	adds	r1, #1
 8003c8c:	4556      	cmp	r6, sl
 8003c8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c92:	54e7      	strb	r7, [r4, r3]
 8003c94:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003c98:	f000 82fa 	beq.w	8004290 <d_print_comp_inner+0x1868>
 8003c9c:	29ff      	cmp	r1, #255	; 0xff
 8003c9e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003ca2:	d1f1      	bne.n	8003c88 <d_print_comp_inner+0x1260>
 8003ca4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ca8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003cac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	4798      	blx	r3
 8003cb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e7e3      	b.n	8003c8c <d_print_comp_inner+0x1264>
 8003cc4:	08018f9c 	.word	0x08018f9c
 8003cc8:	0801a10c 	.word	0x0801a10c
 8003ccc:	0801a1ef 	.word	0x0801a1ef
 8003cd0:	0801a0e7 	.word	0x0801a0e7
 8003cd4:	0801a11c 	.word	0x0801a11c
 8003cd8:	0801a0eb 	.word	0x0801a0eb
 8003cdc:	0801a16f 	.word	0x0801a16f
 8003ce0:	08019f40 	.word	0x08019f40
 8003ce4:	0801a1bf 	.word	0x0801a1bf
 8003ce8:	68ab      	ldr	r3, [r5, #8]
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	2a3a      	cmp	r2, #58	; 0x3a
 8003cee:	f47e af7d 	bne.w	8002bec <d_print_comp_inner+0x1c4>
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b3b      	cmp	r3, #59	; 0x3b
 8003cf8:	f47e af78 	bne.w	8002bec <d_print_comp_inner+0x1c4>
 8003cfc:	f105 0308 	add.w	r3, r5, #8
 8003d00:	686a      	ldr	r2, [r5, #4]
 8003d02:	f002 fabf 	bl	8006284 <d_maybe_print_fold_expression.isra.15>
 8003d06:	4606      	mov	r6, r0
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	f47e af5b 	bne.w	8002bc4 <d_print_comp_inner+0x19c>
 8003d0e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003d12:	68aa      	ldr	r2, [r5, #8]
 8003d14:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003d18:	6893      	ldr	r3, [r2, #8]
 8003d1a:	6808      	ldr	r0, [r1, #0]
 8003d1c:	49d6      	ldr	r1, [pc, #856]	; (8004078 <d_print_comp_inner+0x1650>)
 8003d1e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8003d22:	685f      	ldr	r7, [r3, #4]
 8003d24:	689d      	ldr	r5, [r3, #8]
 8003d26:	f002 fe33 	bl	8006990 <strcmp>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	f001 82e2 	beq.w	80052f4 <d_print_comp_inner+0x28cc>
 8003d30:	2204      	movs	r2, #4
 8003d32:	49d2      	ldr	r1, [pc, #840]	; (800407c <d_print_comp_inner+0x1654>)
 8003d34:	4620      	mov	r0, r4
 8003d36:	f7fc fba3 	bl	8000480 <d_append_buffer>
 8003d3a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003d3e:	b183      	cbz	r3, 8003d62 <d_print_comp_inner+0x133a>
 8003d40:	4641      	mov	r1, r8
 8003d42:	464a      	mov	r2, r9
 8003d44:	4620      	mov	r0, r4
 8003d46:	f002 fa39 	bl	80061bc <d_print_subexpr>
 8003d4a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003d4e:	29ff      	cmp	r1, #255	; 0xff
 8003d50:	f001 83ec 	beq.w	800552c <d_print_comp_inner+0x2b04>
 8003d54:	2320      	movs	r3, #32
 8003d56:	1c4a      	adds	r2, r1, #1
 8003d58:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003d5c:	5463      	strb	r3, [r4, r1]
 8003d5e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003d62:	463a      	mov	r2, r7
 8003d64:	4641      	mov	r1, r8
 8003d66:	4620      	mov	r0, r4
 8003d68:	f001 fc02 	bl	8005570 <d_print_comp>
 8003d6c:	2d00      	cmp	r5, #0
 8003d6e:	f43e af29 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 8003d72:	462a      	mov	r2, r5
 8003d74:	4641      	mov	r1, r8
 8003d76:	4620      	mov	r0, r4
 8003d78:	f002 fa20 	bl	80061bc <d_print_subexpr>
 8003d7c:	f7fe bf22 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003d80:	4ebf      	ldr	r6, [pc, #764]	; (8004080 <d_print_comp_inner+0x1658>)
 8003d82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d86:	f106 0a08 	add.w	sl, r6, #8
 8003d8a:	f04f 0900 	mov.w	r9, #0
 8003d8e:	e009      	b.n	8003da4 <d_print_comp_inner+0x137c>
 8003d90:	460b      	mov	r3, r1
 8003d92:	3101      	adds	r1, #1
 8003d94:	4556      	cmp	r6, sl
 8003d96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d9a:	54e7      	strb	r7, [r4, r3]
 8003d9c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003da0:	f000 80d8 	beq.w	8003f54 <d_print_comp_inner+0x152c>
 8003da4:	29ff      	cmp	r1, #255	; 0xff
 8003da6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003daa:	d1f1      	bne.n	8003d90 <d_print_comp_inner+0x1368>
 8003dac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003db0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003db4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003db8:	4620      	mov	r0, r4
 8003dba:	4798      	blx	r3
 8003dbc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e7e3      	b.n	8003d94 <d_print_comp_inner+0x136c>
 8003dcc:	4ead      	ldr	r6, [pc, #692]	; (8004084 <d_print_comp_inner+0x165c>)
 8003dce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003dd2:	f106 0a1d 	add.w	sl, r6, #29
 8003dd6:	f04f 0900 	mov.w	r9, #0
 8003dda:	e009      	b.n	8003df0 <d_print_comp_inner+0x13c8>
 8003ddc:	460b      	mov	r3, r1
 8003dde:	3101      	adds	r1, #1
 8003de0:	45b2      	cmp	sl, r6
 8003de2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003de6:	54e7      	strb	r7, [r4, r3]
 8003de8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003dec:	f000 81fc 	beq.w	80041e8 <d_print_comp_inner+0x17c0>
 8003df0:	29ff      	cmp	r1, #255	; 0xff
 8003df2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003df6:	d1f1      	bne.n	8003ddc <d_print_comp_inner+0x13b4>
 8003df8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dfc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e04:	4620      	mov	r0, r4
 8003e06:	4798      	blx	r3
 8003e08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e12:	2101      	movs	r1, #1
 8003e14:	2300      	movs	r3, #0
 8003e16:	e7e3      	b.n	8003de0 <d_print_comp_inner+0x13b8>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003e1e:	f7fe bed1 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003e22:	3701      	adds	r7, #1
 8003e24:	454f      	cmp	r7, r9
 8003e26:	f47f ae46 	bne.w	8003ab6 <d_print_comp_inner+0x108e>
 8003e2a:	f7fe becb 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003e2e:	6876      	ldr	r6, [r6, #4]
 8003e30:	2e00      	cmp	r6, #0
 8003e32:	f001 806e 	beq.w	8004f12 <d_print_comp_inner+0x24ea>
 8003e36:	2f04      	cmp	r7, #4
 8003e38:	f103 0310 	add.w	r3, r3, #16
 8003e3c:	f47f a9bd 	bne.w	80031ba <d_print_comp_inner+0x792>
 8003e40:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8003e44:	2301      	movs	r3, #1
 8003e46:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003e4a:	f7fe bebb 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003e4e:	4e8e      	ldr	r6, [pc, #568]	; (8004088 <d_print_comp_inner+0x1660>)
 8003e50:	686a      	ldr	r2, [r5, #4]
 8003e52:	4641      	mov	r1, r8
 8003e54:	4620      	mov	r0, r4
 8003e56:	f001 fb8b 	bl	8005570 <d_print_comp>
 8003e5a:	f106 0a04 	add.w	sl, r6, #4
 8003e5e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e62:	f04f 0900 	mov.w	r9, #0
 8003e66:	e008      	b.n	8003e7a <d_print_comp_inner+0x1452>
 8003e68:	460b      	mov	r3, r1
 8003e6a:	3101      	adds	r1, #1
 8003e6c:	45b2      	cmp	sl, r6
 8003e6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e72:	54e7      	strb	r7, [r4, r3]
 8003e74:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003e78:	d013      	beq.n	8003ea2 <d_print_comp_inner+0x147a>
 8003e7a:	29ff      	cmp	r1, #255	; 0xff
 8003e7c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003e80:	d1f2      	bne.n	8003e68 <d_print_comp_inner+0x1440>
 8003e82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e86:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4798      	blx	r3
 8003e92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e96:	3301      	adds	r3, #1
 8003e98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e7e4      	b.n	8003e6c <d_print_comp_inner+0x1444>
 8003ea2:	68aa      	ldr	r2, [r5, #8]
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f001 fb62 	bl	8005570 <d_print_comp>
 8003eac:	f7fe be8a 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003eb0:	686a      	ldr	r2, [r5, #4]
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f001 fb5b 	bl	8005570 <d_print_comp>
 8003eba:	f7fe be83 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003ebe:	686a      	ldr	r2, [r5, #4]
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f001 fb54 	bl	8005570 <d_print_comp>
 8003ec8:	f7fe be7c 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003ecc:	686a      	ldr	r2, [r5, #4]
 8003ece:	4641      	mov	r1, r8
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f001 fb4d 	bl	8005570 <d_print_comp>
 8003ed6:	f7fe be75 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003eda:	686a      	ldr	r2, [r5, #4]
 8003edc:	4641      	mov	r1, r8
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f001 fb46 	bl	8005570 <d_print_comp>
 8003ee4:	f7fe be6e 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003ee8:	686a      	ldr	r2, [r5, #4]
 8003eea:	4641      	mov	r1, r8
 8003eec:	4620      	mov	r0, r4
 8003eee:	f001 fb3f 	bl	8005570 <d_print_comp>
 8003ef2:	f7fe be67 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003ef6:	686a      	ldr	r2, [r5, #4]
 8003ef8:	4641      	mov	r1, r8
 8003efa:	4620      	mov	r0, r4
 8003efc:	f001 fb38 	bl	8005570 <d_print_comp>
 8003f00:	f7fe be60 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003f04:	686a      	ldr	r2, [r5, #4]
 8003f06:	4641      	mov	r1, r8
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f001 fb31 	bl	8005570 <d_print_comp>
 8003f0e:	f7fe be59 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003f12:	686a      	ldr	r2, [r5, #4]
 8003f14:	4641      	mov	r1, r8
 8003f16:	4620      	mov	r0, r4
 8003f18:	f001 fb2a 	bl	8005570 <d_print_comp>
 8003f1c:	f7fe be52 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003f20:	686a      	ldr	r2, [r5, #4]
 8003f22:	4641      	mov	r1, r8
 8003f24:	4620      	mov	r0, r4
 8003f26:	f001 fb23 	bl	8005570 <d_print_comp>
 8003f2a:	f7fe be4b 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003f2e:	4641      	mov	r1, r8
 8003f30:	68aa      	ldr	r2, [r5, #8]
 8003f32:	4620      	mov	r0, r4
 8003f34:	f001 fb1c 	bl	8005570 <d_print_comp>
 8003f38:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f3c:	29ff      	cmp	r1, #255	; 0xff
 8003f3e:	f000 8560 	beq.w	8004a02 <d_print_comp_inner+0x1fda>
 8003f42:	1c4a      	adds	r2, r1, #1
 8003f44:	235d      	movs	r3, #93	; 0x5d
 8003f46:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003f4a:	5463      	strb	r3, [r4, r1]
 8003f4c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003f50:	f7fe be38 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8003f54:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003f58:	4e4c      	ldr	r6, [pc, #304]	; (800408c <d_print_comp_inner+0x1664>)
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003f60:	4641      	mov	r1, r8
 8003f62:	686a      	ldr	r2, [r5, #4]
 8003f64:	4620      	mov	r0, r4
 8003f66:	f001 fb03 	bl	8005570 <d_print_comp>
 8003f6a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003f6e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f72:	3b01      	subs	r3, #1
 8003f74:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003f78:	f106 0902 	add.w	r9, r6, #2
 8003f7c:	f04f 0800 	mov.w	r8, #0
 8003f80:	e008      	b.n	8003f94 <d_print_comp_inner+0x156c>
 8003f82:	460b      	mov	r3, r1
 8003f84:	3101      	adds	r1, #1
 8003f86:	454e      	cmp	r6, r9
 8003f88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f8c:	54e7      	strb	r7, [r4, r3]
 8003f8e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003f92:	d013      	beq.n	8003fbc <d_print_comp_inner+0x1594>
 8003f94:	29ff      	cmp	r1, #255	; 0xff
 8003f96:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003f9a:	d1f2      	bne.n	8003f82 <d_print_comp_inner+0x155a>
 8003f9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fa0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003fa4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fa8:	4620      	mov	r0, r4
 8003faa:	4798      	blx	r3
 8003fac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e7e4      	b.n	8003f86 <d_print_comp_inner+0x155e>
 8003fbc:	68aa      	ldr	r2, [r5, #8]
 8003fbe:	4934      	ldr	r1, [pc, #208]	; (8004090 <d_print_comp_inner+0x1668>)
 8003fc0:	3201      	adds	r2, #1
 8003fc2:	a804      	add	r0, sp, #16
 8003fc4:	f011 ff82 	bl	8015ecc <sprintf>
 8003fc8:	a804      	add	r0, sp, #16
 8003fca:	f002 fceb 	bl	80069a4 <strlen>
 8003fce:	b318      	cbz	r0, 8004018 <d_print_comp_inner+0x15f0>
 8003fd0:	ad04      	add	r5, sp, #16
 8003fd2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fd6:	182f      	adds	r7, r5, r0
 8003fd8:	f04f 0800 	mov.w	r8, #0
 8003fdc:	e008      	b.n	8003ff0 <d_print_comp_inner+0x15c8>
 8003fde:	460b      	mov	r3, r1
 8003fe0:	3101      	adds	r1, #1
 8003fe2:	42af      	cmp	r7, r5
 8003fe4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003fe8:	54e6      	strb	r6, [r4, r3]
 8003fea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003fee:	d015      	beq.n	800401c <d_print_comp_inner+0x15f4>
 8003ff0:	29ff      	cmp	r1, #255	; 0xff
 8003ff2:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003ff6:	d1f2      	bne.n	8003fde <d_print_comp_inner+0x15b6>
 8003ff8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ffc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004000:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004004:	4620      	mov	r0, r4
 8004006:	4798      	blx	r3
 8004008:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800400c:	3301      	adds	r3, #1
 800400e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004012:	2101      	movs	r1, #1
 8004014:	2300      	movs	r3, #0
 8004016:	e7e4      	b.n	8003fe2 <d_print_comp_inner+0x15ba>
 8004018:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800401c:	29ff      	cmp	r1, #255	; 0xff
 800401e:	f000 8560 	beq.w	8004ae2 <d_print_comp_inner+0x20ba>
 8004022:	1c4a      	adds	r2, r1, #1
 8004024:	237d      	movs	r3, #125	; 0x7d
 8004026:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800402a:	5463      	strb	r3, [r4, r1]
 800402c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004030:	f7fe bdc8 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004034:	686a      	ldr	r2, [r5, #4]
 8004036:	4641      	mov	r1, r8
 8004038:	4620      	mov	r0, r4
 800403a:	f001 fa99 	bl	8005570 <d_print_comp>
 800403e:	f7fe bdc1 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004042:	4641      	mov	r1, r8
 8004044:	68aa      	ldr	r2, [r5, #8]
 8004046:	4620      	mov	r0, r4
 8004048:	f001 fa92 	bl	8005570 <d_print_comp>
 800404c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004050:	29ff      	cmp	r1, #255	; 0xff
 8004052:	f000 850b 	beq.w	8004a6c <d_print_comp_inner+0x2044>
 8004056:	1c4a      	adds	r2, r1, #1
 8004058:	235d      	movs	r3, #93	; 0x5d
 800405a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800405e:	5463      	strb	r3, [r4, r1]
 8004060:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004064:	f7fe bdae 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004068:	686a      	ldr	r2, [r5, #4]
 800406a:	4641      	mov	r1, r8
 800406c:	4620      	mov	r0, r4
 800406e:	f001 fa7f 	bl	8005570 <d_print_comp>
 8004072:	f7fe bda7 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004076:	bf00      	nop
 8004078:	08019f54 	.word	0x08019f54
 800407c:	0801a14c 	.word	0x0801a14c
 8004080:	0801a1df 	.word	0x0801a1df
 8004084:	0801a19f 	.word	0x0801a19f
 8004088:	08019ff0 	.word	0x08019ff0
 800408c:	0801a1ec 	.word	0x0801a1ec
 8004090:	08019f40 	.word	0x08019f40
 8004094:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004098:	782b      	ldrb	r3, [r5, #0]
 800409a:	3b61      	subs	r3, #97	; 0x61
 800409c:	2b19      	cmp	r3, #25
 800409e:	d809      	bhi.n	80040b4 <d_print_comp_inner+0x168c>
 80040a0:	29ff      	cmp	r1, #255	; 0xff
 80040a2:	f000 8793 	beq.w	8004fcc <d_print_comp_inner+0x25a4>
 80040a6:	2320      	movs	r3, #32
 80040a8:	1c4a      	adds	r2, r1, #1
 80040aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80040ae:	5463      	strb	r3, [r4, r1]
 80040b0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80040b4:	19eb      	adds	r3, r5, r7
 80040b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	bf08      	it	eq
 80040be:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 80040c2:	2f00      	cmp	r7, #0
 80040c4:	f43e ad7e 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 80040c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80040cc:	442f      	add	r7, r5
 80040ce:	f04f 0800 	mov.w	r8, #0
 80040d2:	e009      	b.n	80040e8 <d_print_comp_inner+0x16c0>
 80040d4:	460b      	mov	r3, r1
 80040d6:	3101      	adds	r1, #1
 80040d8:	42af      	cmp	r7, r5
 80040da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80040de:	54e6      	strb	r6, [r4, r3]
 80040e0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80040e4:	f43e ad6e 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 80040e8:	29ff      	cmp	r1, #255	; 0xff
 80040ea:	f815 6b01 	ldrb.w	r6, [r5], #1
 80040ee:	d1f1      	bne.n	80040d4 <d_print_comp_inner+0x16ac>
 80040f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80040f4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80040f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80040fc:	4620      	mov	r0, r4
 80040fe:	4798      	blx	r3
 8004100:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004104:	3301      	adds	r3, #1
 8004106:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800410a:	2101      	movs	r1, #1
 800410c:	2300      	movs	r3, #0
 800410e:	e7e3      	b.n	80040d8 <d_print_comp_inner+0x16b0>
 8004110:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8004114:	b13a      	cbz	r2, 8004126 <d_print_comp_inner+0x16fe>
 8004116:	ab14      	add	r3, sp, #80	; 0x50
 8004118:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 800411c:	f843 1d48 	str.w	r1, [r3, #-72]!
 8004120:	9203      	str	r2, [sp, #12]
 8004122:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004126:	686b      	ldr	r3, [r5, #4]
 8004128:	781a      	ldrb	r2, [r3, #0]
 800412a:	2a04      	cmp	r2, #4
 800412c:	f000 830e 	beq.w	800474c <d_print_comp_inner+0x1d24>
 8004130:	a804      	add	r0, sp, #16
 8004132:	461a      	mov	r2, r3
 8004134:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 8004138:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 800413c:	4641      	mov	r1, r8
 800413e:	4620      	mov	r0, r4
 8004140:	9304      	str	r3, [sp, #16]
 8004142:	9505      	str	r5, [sp, #20]
 8004144:	f7fe fc70 	bl	8002a28 <d_print_comp_inner>
 8004148:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 800414c:	9a05      	ldr	r2, [sp, #20]
 800414e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004152:	2b00      	cmp	r3, #0
 8004154:	f43e ad36 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 8004158:	9b02      	ldr	r3, [sp, #8]
 800415a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800415e:	f7fe bd31 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004162:	68aa      	ldr	r2, [r5, #8]
 8004164:	4641      	mov	r1, r8
 8004166:	4620      	mov	r0, r4
 8004168:	f001 fa02 	bl	8005570 <d_print_comp>
 800416c:	f7fe bd2a 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004170:	686a      	ldr	r2, [r5, #4]
 8004172:	49d8      	ldr	r1, [pc, #864]	; (80044d4 <d_print_comp_inner+0x1aac>)
 8004174:	3201      	adds	r2, #1
 8004176:	a804      	add	r0, sp, #16
 8004178:	f011 fea8 	bl	8015ecc <sprintf>
 800417c:	a804      	add	r0, sp, #16
 800417e:	f002 fc11 	bl	80069a4 <strlen>
 8004182:	b318      	cbz	r0, 80041cc <d_print_comp_inner+0x17a4>
 8004184:	ad04      	add	r5, sp, #16
 8004186:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800418a:	182f      	adds	r7, r5, r0
 800418c:	f04f 0800 	mov.w	r8, #0
 8004190:	e008      	b.n	80041a4 <d_print_comp_inner+0x177c>
 8004192:	460b      	mov	r3, r1
 8004194:	3101      	adds	r1, #1
 8004196:	42bd      	cmp	r5, r7
 8004198:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800419c:	54e6      	strb	r6, [r4, r3]
 800419e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80041a2:	d015      	beq.n	80041d0 <d_print_comp_inner+0x17a8>
 80041a4:	29ff      	cmp	r1, #255	; 0xff
 80041a6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80041aa:	d1f2      	bne.n	8004192 <d_print_comp_inner+0x176a>
 80041ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80041b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80041b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041b8:	4620      	mov	r0, r4
 80041ba:	4798      	blx	r3
 80041bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80041c0:	3301      	adds	r3, #1
 80041c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80041c6:	2101      	movs	r1, #1
 80041c8:	2300      	movs	r3, #0
 80041ca:	e7e4      	b.n	8004196 <d_print_comp_inner+0x176e>
 80041cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80041d0:	29ff      	cmp	r1, #255	; 0xff
 80041d2:	f000 8404 	beq.w	80049de <d_print_comp_inner+0x1fb6>
 80041d6:	1c4a      	adds	r2, r1, #1
 80041d8:	237d      	movs	r3, #125	; 0x7d
 80041da:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80041de:	5463      	strb	r3, [r4, r1]
 80041e0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80041e4:	f7fe bcee 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80041e8:	686a      	ldr	r2, [r5, #4]
 80041ea:	4641      	mov	r1, r8
 80041ec:	4620      	mov	r0, r4
 80041ee:	f001 f9bf 	bl	8005570 <d_print_comp>
 80041f2:	f7fe bce7 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80041f6:	686a      	ldr	r2, [r5, #4]
 80041f8:	4641      	mov	r1, r8
 80041fa:	4620      	mov	r0, r4
 80041fc:	f001 f9b8 	bl	8005570 <d_print_comp>
 8004200:	f7fe bce0 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004204:	686a      	ldr	r2, [r5, #4]
 8004206:	4641      	mov	r1, r8
 8004208:	4620      	mov	r0, r4
 800420a:	f001 f9b1 	bl	8005570 <d_print_comp>
 800420e:	f7fe bcd9 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004212:	4eb1      	ldr	r6, [pc, #708]	; (80044d8 <d_print_comp_inner+0x1ab0>)
 8004214:	68aa      	ldr	r2, [r5, #8]
 8004216:	4641      	mov	r1, r8
 8004218:	4620      	mov	r0, r4
 800421a:	f001 f9a9 	bl	8005570 <d_print_comp>
 800421e:	f106 0a05 	add.w	sl, r6, #5
 8004222:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004226:	f04f 0900 	mov.w	r9, #0
 800422a:	e008      	b.n	800423e <d_print_comp_inner+0x1816>
 800422c:	460b      	mov	r3, r1
 800422e:	3101      	adds	r1, #1
 8004230:	4556      	cmp	r6, sl
 8004232:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004236:	54e7      	strb	r7, [r4, r3]
 8004238:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800423c:	d013      	beq.n	8004266 <d_print_comp_inner+0x183e>
 800423e:	29ff      	cmp	r1, #255	; 0xff
 8004240:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004244:	d1f2      	bne.n	800422c <d_print_comp_inner+0x1804>
 8004246:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800424a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800424e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004252:	4620      	mov	r0, r4
 8004254:	4798      	blx	r3
 8004256:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800425a:	3301      	adds	r3, #1
 800425c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004260:	2101      	movs	r1, #1
 8004262:	2300      	movs	r3, #0
 8004264:	e7e4      	b.n	8004230 <d_print_comp_inner+0x1808>
 8004266:	686a      	ldr	r2, [r5, #4]
 8004268:	4641      	mov	r1, r8
 800426a:	4620      	mov	r0, r4
 800426c:	f001 f980 	bl	8005570 <d_print_comp>
 8004270:	f7fe bca8 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004274:	686a      	ldr	r2, [r5, #4]
 8004276:	4641      	mov	r1, r8
 8004278:	4620      	mov	r0, r4
 800427a:	f001 f979 	bl	8005570 <d_print_comp>
 800427e:	f7fe bca1 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004282:	686a      	ldr	r2, [r5, #4]
 8004284:	4641      	mov	r1, r8
 8004286:	4620      	mov	r0, r4
 8004288:	f001 f972 	bl	8005570 <d_print_comp>
 800428c:	f7fe bc9a 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004290:	686a      	ldr	r2, [r5, #4]
 8004292:	4641      	mov	r1, r8
 8004294:	4620      	mov	r0, r4
 8004296:	f001 f96b 	bl	8005570 <d_print_comp>
 800429a:	f7fe bc93 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 800429e:	4641      	mov	r1, r8
 80042a0:	686a      	ldr	r2, [r5, #4]
 80042a2:	4620      	mov	r0, r4
 80042a4:	f001 f964 	bl	8005570 <d_print_comp>
 80042a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80042ac:	29ff      	cmp	r1, #255	; 0xff
 80042ae:	f000 842a 	beq.w	8004b06 <d_print_comp_inner+0x20de>
 80042b2:	1c4a      	adds	r2, r1, #1
 80042b4:	2329      	movs	r3, #41	; 0x29
 80042b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80042ba:	5463      	strb	r3, [r4, r1]
 80042bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80042c0:	f7fe bc80 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80042c4:	686a      	ldr	r2, [r5, #4]
 80042c6:	4641      	mov	r1, r8
 80042c8:	4620      	mov	r0, r4
 80042ca:	f001 f951 	bl	8005570 <d_print_comp>
 80042ce:	f7fe bc79 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80042d2:	2f04      	cmp	r7, #4
 80042d4:	f1a6 0410 	sub.w	r4, r6, #16
 80042d8:	f106 0e10 	add.w	lr, r6, #16
 80042dc:	f000 8722 	beq.w	8005124 <d_print_comp_inner+0x26fc>
 80042e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042e4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80042e8:	2300      	movs	r3, #0
 80042ea:	f84e 4c10 	str.w	r4, [lr, #-16]
 80042ee:	e906 1008 	stmdb	r6, {r3, ip}
 80042f2:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
 80042f6:	f846 5c0c 	str.w	r5, [r6, #-12]
 80042fa:	686d      	ldr	r5, [r5, #4]
 80042fc:	3701      	adds	r7, #1
 80042fe:	4676      	mov	r6, lr
 8004300:	f7fe bf84 	b.w	800320c <d_print_comp_inner+0x7e4>
 8004304:	68aa      	ldr	r2, [r5, #8]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	460e      	mov	r6, r1
 800430a:	4620      	mov	r0, r4
 800430c:	4641      	mov	r1, r8
 800430e:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8004312:	f001 f92d 	bl	8005570 <d_print_comp>
 8004316:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800431a:	9b00      	ldr	r3, [sp, #0]
 800431c:	4295      	cmp	r5, r2
 800431e:	f47e ac51 	bne.w	8002bc4 <d_print_comp_inner+0x19c>
 8004322:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004326:	42b2      	cmp	r2, r6
 8004328:	f47e ac4c 	bne.w	8002bc4 <d_print_comp_inner+0x19c>
 800432c:	3b01      	subs	r3, #1
 800432e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004332:	f7fe bc47 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004336:	462a      	mov	r2, r5
 8004338:	4641      	mov	r1, r8
 800433a:	4620      	mov	r0, r4
 800433c:	f001 f928 	bl	8005590 <d_print_mod>
 8004340:	f7fe bc70 	b.w	8002c24 <d_print_comp_inner+0x1fc>
 8004344:	686b      	ldr	r3, [r5, #4]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	f1b9 0f00 	cmp.w	r9, #0
 800434c:	f47f abae 	bne.w	8003aac <d_print_comp_inner+0x1084>
 8004350:	f7fe bc38 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004354:	463a      	mov	r2, r7
 8004356:	a804      	add	r0, sp, #16
 8004358:	495e      	ldr	r1, [pc, #376]	; (80044d4 <d_print_comp_inner+0x1aac>)
 800435a:	f011 fdb7 	bl	8015ecc <sprintf>
 800435e:	a804      	add	r0, sp, #16
 8004360:	f002 fb20 	bl	80069a4 <strlen>
 8004364:	b318      	cbz	r0, 80043ae <d_print_comp_inner+0x1986>
 8004366:	ad04      	add	r5, sp, #16
 8004368:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800436c:	182f      	adds	r7, r5, r0
 800436e:	f04f 0800 	mov.w	r8, #0
 8004372:	e008      	b.n	8004386 <d_print_comp_inner+0x195e>
 8004374:	460b      	mov	r3, r1
 8004376:	3101      	adds	r1, #1
 8004378:	42af      	cmp	r7, r5
 800437a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800437e:	54e6      	strb	r6, [r4, r3]
 8004380:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004384:	d015      	beq.n	80043b2 <d_print_comp_inner+0x198a>
 8004386:	29ff      	cmp	r1, #255	; 0xff
 8004388:	f815 6b01 	ldrb.w	r6, [r5], #1
 800438c:	d1f2      	bne.n	8004374 <d_print_comp_inner+0x194c>
 800438e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004392:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004396:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800439a:	4620      	mov	r0, r4
 800439c:	4798      	blx	r3
 800439e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043a2:	3301      	adds	r3, #1
 80043a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043a8:	2101      	movs	r1, #1
 80043aa:	2300      	movs	r3, #0
 80043ac:	e7e4      	b.n	8004378 <d_print_comp_inner+0x1950>
 80043ae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80043b2:	29ff      	cmp	r1, #255	; 0xff
 80043b4:	f000 84dd 	beq.w	8004d72 <d_print_comp_inner+0x234a>
 80043b8:	1c4a      	adds	r2, r1, #1
 80043ba:	237d      	movs	r3, #125	; 0x7d
 80043bc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80043c0:	5463      	strb	r3, [r4, r1]
 80043c2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80043c6:	f7fe bbfd 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80043ca:	2700      	movs	r7, #0
 80043cc:	f7ff ba1f 	b.w	800380e <d_print_comp_inner+0xde6>
 80043d0:	68df      	ldr	r7, [r3, #12]
 80043d2:	689d      	ldr	r5, [r3, #8]
 80043d4:	2f00      	cmp	r7, #0
 80043d6:	f43e abf5 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 80043da:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80043de:	442f      	add	r7, r5
 80043e0:	f04f 0800 	mov.w	r8, #0
 80043e4:	e009      	b.n	80043fa <d_print_comp_inner+0x19d2>
 80043e6:	460b      	mov	r3, r1
 80043e8:	3101      	adds	r1, #1
 80043ea:	42bd      	cmp	r5, r7
 80043ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80043f0:	54e6      	strb	r6, [r4, r3]
 80043f2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80043f6:	f43e abe5 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 80043fa:	29ff      	cmp	r1, #255	; 0xff
 80043fc:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004400:	d1f1      	bne.n	80043e6 <d_print_comp_inner+0x19be>
 8004402:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004406:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800440a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800440e:	4620      	mov	r0, r4
 8004410:	4798      	blx	r3
 8004412:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004416:	3301      	adds	r3, #1
 8004418:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800441c:	2101      	movs	r1, #1
 800441e:	2300      	movs	r3, #0
 8004420:	e7e3      	b.n	80043ea <d_print_comp_inner+0x19c2>
 8004422:	686e      	ldr	r6, [r5, #4]
 8004424:	68af      	ldr	r7, [r5, #8]
 8004426:	4437      	add	r7, r6
 8004428:	42be      	cmp	r6, r7
 800442a:	f4be abcb 	bcs.w	8002bc4 <d_print_comp_inner+0x19c>
 800442e:	f04f 0800 	mov.w	r8, #0
 8004432:	e00d      	b.n	8004450 <d_print_comp_inner+0x1a28>
 8004434:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004438:	29ff      	cmp	r1, #255	; 0xff
 800443a:	d036      	beq.n	80044aa <d_print_comp_inner+0x1a82>
 800443c:	1c4b      	adds	r3, r1, #1
 800443e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004442:	5465      	strb	r5, [r4, r1]
 8004444:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004448:	3601      	adds	r6, #1
 800444a:	42b7      	cmp	r7, r6
 800444c:	f67e abba 	bls.w	8002bc4 <d_print_comp_inner+0x19c>
 8004450:	1bbb      	subs	r3, r7, r6
 8004452:	2b03      	cmp	r3, #3
 8004454:	7835      	ldrb	r5, [r6, #0]
 8004456:	dded      	ble.n	8004434 <d_print_comp_inner+0x1a0c>
 8004458:	2d5f      	cmp	r5, #95	; 0x5f
 800445a:	d1eb      	bne.n	8004434 <d_print_comp_inner+0x1a0c>
 800445c:	7873      	ldrb	r3, [r6, #1]
 800445e:	2b5f      	cmp	r3, #95	; 0x5f
 8004460:	d1e8      	bne.n	8004434 <d_print_comp_inner+0x1a0c>
 8004462:	78b3      	ldrb	r3, [r6, #2]
 8004464:	2b55      	cmp	r3, #85	; 0x55
 8004466:	d1e5      	bne.n	8004434 <d_print_comp_inner+0x1a0c>
 8004468:	1cf3      	adds	r3, r6, #3
 800446a:	429f      	cmp	r7, r3
 800446c:	d9e2      	bls.n	8004434 <d_print_comp_inner+0x1a0c>
 800446e:	2000      	movs	r0, #0
 8004470:	e006      	b.n	8004480 <d_print_comp_inner+0x1a58>
 8004472:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8004476:	429f      	cmp	r7, r3
 8004478:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 800447c:	f000 85c7 	beq.w	800500e <d_print_comp_inner+0x25e6>
 8004480:	4699      	mov	r9, r3
 8004482:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004486:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 800448a:	b2d1      	uxtb	r1, r2
 800448c:	2909      	cmp	r1, #9
 800448e:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 8004492:	d9f0      	bls.n	8004476 <d_print_comp_inner+0x1a4e>
 8004494:	f1be 0f05 	cmp.w	lr, #5
 8004498:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 800449c:	d9e9      	bls.n	8004472 <d_print_comp_inner+0x1a4a>
 800449e:	2a05      	cmp	r2, #5
 80044a0:	f200 8743 	bhi.w	800532a <d_print_comp_inner+0x2902>
 80044a4:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 80044a8:	e7e5      	b.n	8004476 <d_print_comp_inner+0x1a4e>
 80044aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80044ae:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80044b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044b6:	4620      	mov	r0, r4
 80044b8:	4798      	blx	r3
 80044ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044be:	3301      	adds	r3, #1
 80044c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80044c4:	2100      	movs	r1, #0
 80044c6:	2301      	movs	r3, #1
 80044c8:	e7b9      	b.n	800443e <d_print_comp_inner+0x1a16>
 80044ca:	4d04      	ldr	r5, [pc, #16]	; (80044dc <d_print_comp_inner+0x1ab4>)
 80044cc:	4698      	mov	r8, r3
 80044ce:	1daf      	adds	r7, r5, #6
 80044d0:	e010      	b.n	80044f4 <d_print_comp_inner+0x1acc>
 80044d2:	bf00      	nop
 80044d4:	08019f40 	.word	0x08019f40
 80044d8:	0801a0b4 	.word	0x0801a0b4
 80044dc:	0801a114 	.word	0x0801a114
 80044e0:	460b      	mov	r3, r1
 80044e2:	3101      	adds	r1, #1
 80044e4:	42bd      	cmp	r5, r7
 80044e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80044ea:	54e6      	strb	r6, [r4, r3]
 80044ec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80044f0:	f43e ab68 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 80044f4:	29ff      	cmp	r1, #255	; 0xff
 80044f6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80044fa:	d1f1      	bne.n	80044e0 <d_print_comp_inner+0x1ab8>
 80044fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004500:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004504:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004508:	4620      	mov	r0, r4
 800450a:	4798      	blx	r3
 800450c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004510:	3301      	adds	r3, #1
 8004512:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004516:	2101      	movs	r1, #1
 8004518:	2300      	movs	r3, #0
 800451a:	e7e3      	b.n	80044e4 <d_print_comp_inner+0x1abc>
 800451c:	782b      	ldrb	r3, [r5, #0]
 800451e:	2b2f      	cmp	r3, #47	; 0x2f
 8004520:	f47e ab6a 	bne.w	8002bf8 <d_print_comp_inner+0x1d0>
 8004524:	4601      	mov	r1, r0
 8004526:	460d      	mov	r5, r1
 8004528:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 800452c:	f7fe bb66 	b.w	8002bfc <d_print_comp_inner+0x1d4>
 8004530:	4dd7      	ldr	r5, [pc, #860]	; (8004890 <d_print_comp_inner+0x1e68>)
 8004532:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004536:	f105 0804 	add.w	r8, r5, #4
 800453a:	e009      	b.n	8004550 <d_print_comp_inner+0x1b28>
 800453c:	460b      	mov	r3, r1
 800453e:	3101      	adds	r1, #1
 8004540:	45a8      	cmp	r8, r5
 8004542:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004546:	54e6      	strb	r6, [r4, r3]
 8004548:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800454c:	f43e ab3a 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 8004550:	29ff      	cmp	r1, #255	; 0xff
 8004552:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004556:	d1f1      	bne.n	800453c <d_print_comp_inner+0x1b14>
 8004558:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800455c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004560:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004564:	4620      	mov	r0, r4
 8004566:	4798      	blx	r3
 8004568:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800456c:	3301      	adds	r3, #1
 800456e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004572:	2101      	movs	r1, #1
 8004574:	2300      	movs	r3, #0
 8004576:	e7e3      	b.n	8004540 <d_print_comp_inner+0x1b18>
 8004578:	4ec6      	ldr	r6, [pc, #792]	; (8004894 <d_print_comp_inner+0x1e6c>)
 800457a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800457e:	f106 0905 	add.w	r9, r6, #5
 8004582:	f04f 0800 	mov.w	r8, #0
 8004586:	e008      	b.n	800459a <d_print_comp_inner+0x1b72>
 8004588:	460b      	mov	r3, r1
 800458a:	3101      	adds	r1, #1
 800458c:	45b1      	cmp	r9, r6
 800458e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004592:	54e7      	strb	r7, [r4, r3]
 8004594:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004598:	d013      	beq.n	80045c2 <d_print_comp_inner+0x1b9a>
 800459a:	29ff      	cmp	r1, #255	; 0xff
 800459c:	f816 7b01 	ldrb.w	r7, [r6], #1
 80045a0:	d1f2      	bne.n	8004588 <d_print_comp_inner+0x1b60>
 80045a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80045aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045ae:	4620      	mov	r0, r4
 80045b0:	4798      	blx	r3
 80045b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045b6:	3301      	adds	r3, #1
 80045b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045bc:	2101      	movs	r1, #1
 80045be:	2300      	movs	r3, #0
 80045c0:	e7e4      	b.n	800458c <d_print_comp_inner+0x1b64>
 80045c2:	686a      	ldr	r2, [r5, #4]
 80045c4:	49b4      	ldr	r1, [pc, #720]	; (8004898 <d_print_comp_inner+0x1e70>)
 80045c6:	3201      	adds	r2, #1
 80045c8:	a804      	add	r0, sp, #16
 80045ca:	f011 fc7f 	bl	8015ecc <sprintf>
 80045ce:	a804      	add	r0, sp, #16
 80045d0:	f002 f9e8 	bl	80069a4 <strlen>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	f43e aaf5 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 80045da:	ad04      	add	r5, sp, #16
 80045dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80045e0:	182f      	adds	r7, r5, r0
 80045e2:	f04f 0800 	mov.w	r8, #0
 80045e6:	e009      	b.n	80045fc <d_print_comp_inner+0x1bd4>
 80045e8:	460b      	mov	r3, r1
 80045ea:	3101      	adds	r1, #1
 80045ec:	42af      	cmp	r7, r5
 80045ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80045f2:	54e6      	strb	r6, [r4, r3]
 80045f4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80045f8:	f43e aae4 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 80045fc:	29ff      	cmp	r1, #255	; 0xff
 80045fe:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004602:	d1f1      	bne.n	80045e8 <d_print_comp_inner+0x1bc0>
 8004604:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004608:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800460c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004610:	4620      	mov	r0, r4
 8004612:	4798      	blx	r3
 8004614:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004618:	3301      	adds	r3, #1
 800461a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800461e:	2101      	movs	r1, #1
 8004620:	2300      	movs	r3, #0
 8004622:	e7e3      	b.n	80045ec <d_print_comp_inner+0x1bc4>
 8004624:	f021 0860 	bic.w	r8, r1, #96	; 0x60
 8004628:	f105 0208 	add.w	r2, r5, #8
 800462c:	4641      	mov	r1, r8
 800462e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8004632:	f001 fc91 	bl	8005f58 <d_print_function_type.isra.11>
 8004636:	686a      	ldr	r2, [r5, #4]
 8004638:	2a00      	cmp	r2, #0
 800463a:	f43e aac3 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 800463e:	4641      	mov	r1, r8
 8004640:	4620      	mov	r0, r4
 8004642:	f000 ff95 	bl	8005570 <d_print_comp>
 8004646:	f7fe babd 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 800464a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800464e:	f7ff b9a2 	b.w	8003996 <d_print_comp_inner+0xf6e>
 8004652:	4e92      	ldr	r6, [pc, #584]	; (800489c <d_print_comp_inner+0x1e74>)
 8004654:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004658:	f106 0a05 	add.w	sl, r6, #5
 800465c:	f04f 0900 	mov.w	r9, #0
 8004660:	e009      	b.n	8004676 <d_print_comp_inner+0x1c4e>
 8004662:	460b      	mov	r3, r1
 8004664:	3101      	adds	r1, #1
 8004666:	45b2      	cmp	sl, r6
 8004668:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800466c:	54e7      	strb	r7, [r4, r3]
 800466e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004672:	f43f a97a 	beq.w	800396a <d_print_comp_inner+0xf42>
 8004676:	29ff      	cmp	r1, #255	; 0xff
 8004678:	f816 7b01 	ldrb.w	r7, [r6], #1
 800467c:	d1f1      	bne.n	8004662 <d_print_comp_inner+0x1c3a>
 800467e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004682:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004686:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800468a:	4620      	mov	r0, r4
 800468c:	4798      	blx	r3
 800468e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004692:	3301      	adds	r3, #1
 8004694:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004698:	2101      	movs	r1, #1
 800469a:	2300      	movs	r3, #0
 800469c:	e7e3      	b.n	8004666 <d_print_comp_inner+0x1c3e>
 800469e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80046a2:	497f      	ldr	r1, [pc, #508]	; (80048a0 <d_print_comp_inner+0x1e78>)
 80046a4:	681f      	ldr	r7, [r3, #0]
 80046a6:	4638      	mov	r0, r7
 80046a8:	f002 f972 	bl	8006990 <strcmp>
 80046ac:	f896 a000 	ldrb.w	sl, [r6]
 80046b0:	b918      	cbnz	r0, 80046ba <d_print_comp_inner+0x1c92>
 80046b2:	f1ba 0f03 	cmp.w	sl, #3
 80046b6:	f000 851b 	beq.w	80050f0 <d_print_comp_inner+0x26c8>
 80046ba:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
 80046be:	f000 85fd 	beq.w	80052bc <d_print_comp_inner+0x2894>
 80046c2:	4978      	ldr	r1, [pc, #480]	; (80048a4 <d_print_comp_inner+0x1e7c>)
 80046c4:	4638      	mov	r0, r7
 80046c6:	f002 f963 	bl	8006990 <strcmp>
 80046ca:	4605      	mov	r5, r0
 80046cc:	2800      	cmp	r0, #0
 80046ce:	f000 8135 	beq.w	800493c <d_print_comp_inner+0x1f14>
 80046d2:	4975      	ldr	r1, [pc, #468]	; (80048a8 <d_print_comp_inner+0x1e80>)
 80046d4:	4638      	mov	r0, r7
 80046d6:	f002 f95b 	bl	8006990 <strcmp>
 80046da:	2800      	cmp	r0, #0
 80046dc:	f000 82b6 	beq.w	8004c4c <d_print_comp_inner+0x2224>
 80046e0:	464a      	mov	r2, r9
 80046e2:	4641      	mov	r1, r8
 80046e4:	4620      	mov	r0, r4
 80046e6:	f001 fd2b 	bl	8006140 <d_print_expr_op>
 80046ea:	2f00      	cmp	r7, #0
 80046ec:	f43f a837 	beq.w	800375e <d_print_comp_inner+0xd36>
 80046f0:	496e      	ldr	r1, [pc, #440]	; (80048ac <d_print_comp_inner+0x1e84>)
 80046f2:	4638      	mov	r0, r7
 80046f4:	f002 f94c 	bl	8006990 <strcmp>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	f000 8384 	beq.w	8004e06 <d_print_comp_inner+0x23de>
 80046fe:	4638      	mov	r0, r7
 8004700:	496b      	ldr	r1, [pc, #428]	; (80048b0 <d_print_comp_inner+0x1e88>)
 8004702:	f002 f945 	bl	8006990 <strcmp>
 8004706:	4605      	mov	r5, r0
 8004708:	2800      	cmp	r0, #0
 800470a:	f47f a828 	bne.w	800375e <d_print_comp_inner+0xd36>
 800470e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004712:	2bff      	cmp	r3, #255	; 0xff
 8004714:	f000 84db 	beq.w	80050ce <d_print_comp_inner+0x26a6>
 8004718:	1c58      	adds	r0, r3, #1
 800471a:	2528      	movs	r5, #40	; 0x28
 800471c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004720:	4641      	mov	r1, r8
 8004722:	54e5      	strb	r5, [r4, r3]
 8004724:	4632      	mov	r2, r6
 8004726:	4620      	mov	r0, r4
 8004728:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800472c:	f000 ff20 	bl	8005570 <d_print_comp>
 8004730:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004734:	29ff      	cmp	r1, #255	; 0xff
 8004736:	f000 846d 	beq.w	8005014 <d_print_comp_inner+0x25ec>
 800473a:	2329      	movs	r3, #41	; 0x29
 800473c:	1c4a      	adds	r2, r1, #1
 800473e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004742:	5463      	strb	r3, [r4, r1]
 8004744:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004748:	f7fe ba3c 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 800474c:	f10d 0910 	add.w	r9, sp, #16
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004756:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 800475a:	4641      	mov	r1, r8
 800475c:	4620      	mov	r0, r4
 800475e:	9204      	str	r2, [sp, #16]
 8004760:	9305      	str	r3, [sp, #20]
 8004762:	f7fe f961 	bl	8002a28 <d_print_comp_inner>
 8004766:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 800476a:	9a05      	ldr	r2, [sp, #20]
 800476c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004770:	b113      	cbz	r3, 8004778 <d_print_comp_inner+0x1d50>
 8004772:	9b02      	ldr	r3, [sp, #8]
 8004774:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004778:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800477c:	2b3c      	cmp	r3, #60	; 0x3c
 800477e:	f000 83d9 	beq.w	8004f34 <d_print_comp_inner+0x250c>
 8004782:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004786:	29ff      	cmp	r1, #255	; 0xff
 8004788:	f000 8467 	beq.w	800505a <d_print_comp_inner+0x2632>
 800478c:	1c4a      	adds	r2, r1, #1
 800478e:	233c      	movs	r3, #60	; 0x3c
 8004790:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004794:	5463      	strb	r3, [r4, r1]
 8004796:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800479a:	686b      	ldr	r3, [r5, #4]
 800479c:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 80047a6:	461a      	mov	r2, r3
 80047a8:	4641      	mov	r1, r8
 80047aa:	4620      	mov	r0, r4
 80047ac:	9304      	str	r3, [sp, #16]
 80047ae:	9505      	str	r5, [sp, #20]
 80047b0:	f7fe f93a 	bl	8002a28 <d_print_comp_inner>
 80047b4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80047b8:	9a05      	ldr	r2, [sp, #20]
 80047ba:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80047be:	2b3e      	cmp	r3, #62	; 0x3e
 80047c0:	f000 83ab 	beq.w	8004f1a <d_print_comp_inner+0x24f2>
 80047c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80047c8:	29ff      	cmp	r1, #255	; 0xff
 80047ca:	f000 849a 	beq.w	8005102 <d_print_comp_inner+0x26da>
 80047ce:	233e      	movs	r3, #62	; 0x3e
 80047d0:	1c4a      	adds	r2, r1, #1
 80047d2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80047d6:	5463      	strb	r3, [r4, r1]
 80047d8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80047dc:	f7fe b9f2 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80047e0:	6852      	ldr	r2, [r2, #4]
 80047e2:	7c16      	ldrb	r6, [r2, #16]
 80047e4:	2e00      	cmp	r6, #0
 80047e6:	f43f a9e7 	beq.w	8003bb8 <d_print_comp_inner+0x1190>
 80047ea:	2e06      	cmp	r6, #6
 80047ec:	f240 8337 	bls.w	8004e5e <d_print_comp_inner+0x2436>
 80047f0:	2e07      	cmp	r6, #7
 80047f2:	f47f a9e1 	bne.w	8003bb8 <d_print_comp_inner+0x1190>
 80047f6:	68aa      	ldr	r2, [r5, #8]
 80047f8:	7811      	ldrb	r1, [r2, #0]
 80047fa:	2900      	cmp	r1, #0
 80047fc:	f47f a9dc 	bne.w	8003bb8 <d_print_comp_inner+0x1190>
 8004800:	6891      	ldr	r1, [r2, #8]
 8004802:	2901      	cmp	r1, #1
 8004804:	f47f a9d8 	bne.w	8003bb8 <d_print_comp_inner+0x1190>
 8004808:	2b3c      	cmp	r3, #60	; 0x3c
 800480a:	f47f a9d5 	bne.w	8003bb8 <d_print_comp_inner+0x1190>
 800480e:	6853      	ldr	r3, [r2, #4]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b30      	cmp	r3, #48	; 0x30
 8004814:	f000 8626 	beq.w	8005464 <d_print_comp_inner+0x2a3c>
 8004818:	2b31      	cmp	r3, #49	; 0x31
 800481a:	f47f a9cd 	bne.w	8003bb8 <d_print_comp_inner+0x1190>
 800481e:	2204      	movs	r2, #4
 8004820:	4924      	ldr	r1, [pc, #144]	; (80048b4 <d_print_comp_inner+0x1e8c>)
 8004822:	f7fb fe2d 	bl	8000480 <d_append_buffer>
 8004826:	f7fe b9cd 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 800482a:	4e23      	ldr	r6, [pc, #140]	; (80048b8 <d_print_comp_inner+0x1e90>)
 800482c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004830:	f106 0a02 	add.w	sl, r6, #2
 8004834:	e009      	b.n	800484a <d_print_comp_inner+0x1e22>
 8004836:	460b      	mov	r3, r1
 8004838:	3101      	adds	r1, #1
 800483a:	45b2      	cmp	sl, r6
 800483c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004840:	54e7      	strb	r7, [r4, r3]
 8004842:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004846:	f43e ad52 	beq.w	80032ee <d_print_comp_inner+0x8c6>
 800484a:	29ff      	cmp	r1, #255	; 0xff
 800484c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004850:	d1f1      	bne.n	8004836 <d_print_comp_inner+0x1e0e>
 8004852:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004856:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800485a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800485e:	4620      	mov	r0, r4
 8004860:	4798      	blx	r3
 8004862:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004866:	3301      	adds	r3, #1
 8004868:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800486c:	2101      	movs	r1, #1
 800486e:	2300      	movs	r3, #0
 8004870:	e7e3      	b.n	800483a <d_print_comp_inner+0x1e12>
 8004872:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004876:	29ff      	cmp	r1, #255	; 0xff
 8004878:	f000 84e4 	beq.w	8005244 <d_print_comp_inner+0x281c>
 800487c:	2220      	movs	r2, #32
 800487e:	1c4b      	adds	r3, r1, #1
 8004880:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004884:	5462      	strb	r2, [r4, r1]
 8004886:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800488a:	f7fe bdbb 	b.w	8003404 <d_print_comp_inner+0x9dc>
 800488e:	bf00      	nop
 8004890:	0801a190 	.word	0x0801a190
 8004894:	08019fb4 	.word	0x08019fb4
 8004898:	08019f40 	.word	0x08019f40
 800489c:	0801a104 	.word	0x0801a104
 80048a0:	0801a138 	.word	0x0801a138
 80048a4:	0801a20c 	.word	0x0801a20c
 80048a8:	08019f44 	.word	0x08019f44
 80048ac:	0801a13c 	.word	0x0801a13c
 80048b0:	0801a44c 	.word	0x0801a44c
 80048b4:	0801a168 	.word	0x0801a168
 80048b8:	08019f90 	.word	0x08019f90
 80048bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80048c0:	29ff      	cmp	r1, #255	; 0xff
 80048c2:	f000 8465 	beq.w	8005190 <d_print_comp_inner+0x2768>
 80048c6:	2220      	movs	r2, #32
 80048c8:	1c4b      	adds	r3, r1, #1
 80048ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80048ce:	5462      	strb	r2, [r4, r1]
 80048d0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80048d4:	f7fe bd80 	b.w	80033d8 <d_print_comp_inner+0x9b0>
 80048d8:	2700      	movs	r7, #0
 80048da:	55a7      	strb	r7, [r4, r6]
 80048dc:	4631      	mov	r1, r6
 80048de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048e6:	4620      	mov	r0, r4
 80048e8:	4798      	blx	r3
 80048ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048ee:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 80048f2:	3301      	adds	r3, #1
 80048f4:	463e      	mov	r6, r7
 80048f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048fa:	f7fe be31 	b.w	8003560 <d_print_comp_inner+0xb38>
 80048fe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004902:	29ff      	cmp	r1, #255	; 0xff
 8004904:	f000 8465 	beq.w	80051d2 <d_print_comp_inner+0x27aa>
 8004908:	1c4a      	adds	r2, r1, #1
 800490a:	235b      	movs	r3, #91	; 0x5b
 800490c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004910:	5463      	strb	r3, [r4, r1]
 8004912:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004916:	4641      	mov	r1, r8
 8004918:	68aa      	ldr	r2, [r5, #8]
 800491a:	4620      	mov	r0, r4
 800491c:	f000 fe28 	bl	8005570 <d_print_comp>
 8004920:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004924:	29ff      	cmp	r1, #255	; 0xff
 8004926:	f000 8312 	beq.w	8004f4e <d_print_comp_inner+0x2526>
 800492a:	235d      	movs	r3, #93	; 0x5d
 800492c:	1c4a      	adds	r2, r1, #1
 800492e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004932:	5463      	strb	r3, [r4, r1]
 8004934:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004938:	f7fe b944 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 800493c:	4631      	mov	r1, r6
 800493e:	4620      	mov	r0, r4
 8004940:	f7fb ffca 	bl	80008d8 <d_find_pack>
 8004944:	b928      	cbnz	r0, 8004952 <d_print_comp_inner+0x1f2a>
 8004946:	e007      	b.n	8004958 <d_print_comp_inner+0x1f30>
 8004948:	6843      	ldr	r3, [r0, #4]
 800494a:	b12b      	cbz	r3, 8004958 <d_print_comp_inner+0x1f30>
 800494c:	6880      	ldr	r0, [r0, #8]
 800494e:	3501      	adds	r5, #1
 8004950:	b110      	cbz	r0, 8004958 <d_print_comp_inner+0x1f30>
 8004952:	7803      	ldrb	r3, [r0, #0]
 8004954:	2b2f      	cmp	r3, #47	; 0x2f
 8004956:	d0f7      	beq.n	8004948 <d_print_comp_inner+0x1f20>
 8004958:	462a      	mov	r2, r5
 800495a:	a804      	add	r0, sp, #16
 800495c:	49d4      	ldr	r1, [pc, #848]	; (8004cb0 <d_print_comp_inner+0x2288>)
 800495e:	f011 fab5 	bl	8015ecc <sprintf>
 8004962:	a804      	add	r0, sp, #16
 8004964:	f002 f81e 	bl	80069a4 <strlen>
 8004968:	2800      	cmp	r0, #0
 800496a:	f43e a92b 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 800496e:	ad04      	add	r5, sp, #16
 8004970:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004974:	182f      	adds	r7, r5, r0
 8004976:	f04f 0800 	mov.w	r8, #0
 800497a:	e009      	b.n	8004990 <d_print_comp_inner+0x1f68>
 800497c:	460b      	mov	r3, r1
 800497e:	3101      	adds	r1, #1
 8004980:	42bd      	cmp	r5, r7
 8004982:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004986:	54e6      	strb	r6, [r4, r3]
 8004988:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800498c:	f43e a91a 	beq.w	8002bc4 <d_print_comp_inner+0x19c>
 8004990:	29ff      	cmp	r1, #255	; 0xff
 8004992:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004996:	d1f1      	bne.n	800497c <d_print_comp_inner+0x1f54>
 8004998:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800499c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80049a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049a4:	4620      	mov	r0, r4
 80049a6:	4798      	blx	r3
 80049a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049ac:	3301      	adds	r3, #1
 80049ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049b2:	2101      	movs	r1, #1
 80049b4:	2300      	movs	r3, #0
 80049b6:	e7e3      	b.n	8004980 <d_print_comp_inner+0x1f58>
 80049b8:	686a      	ldr	r2, [r5, #4]
 80049ba:	4641      	mov	r1, r8
 80049bc:	4620      	mov	r0, r4
 80049be:	f000 fdd7 	bl	8005570 <d_print_comp>
 80049c2:	f7fe b8ff 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80049c6:	29ff      	cmp	r1, #255	; 0xff
 80049c8:	f000 83d2 	beq.w	8005170 <d_print_comp_inner+0x2748>
 80049cc:	232d      	movs	r3, #45	; 0x2d
 80049ce:	1c4a      	adds	r2, r1, #1
 80049d0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80049d4:	5463      	strb	r3, [r4, r1]
 80049d6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80049da:	f7ff b90e 	b.w	8003bfa <d_print_comp_inner+0x11d2>
 80049de:	2500      	movs	r5, #0
 80049e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049e8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80049ec:	4620      	mov	r0, r4
 80049ee:	4798      	blx	r3
 80049f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049f4:	3301      	adds	r3, #1
 80049f6:	4629      	mov	r1, r5
 80049f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049fc:	2201      	movs	r2, #1
 80049fe:	f7ff bbeb 	b.w	80041d8 <d_print_comp_inner+0x17b0>
 8004a02:	2500      	movs	r5, #0
 8004a04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a0c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a10:	4620      	mov	r0, r4
 8004a12:	4798      	blx	r3
 8004a14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a18:	3301      	adds	r3, #1
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a20:	2201      	movs	r2, #1
 8004a22:	f7ff ba8f 	b.w	8003f44 <d_print_comp_inner+0x151c>
 8004a26:	2600      	movs	r6, #0
 8004a28:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004a2c:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004a30:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004a34:	4798      	blx	r3
 8004a36:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a3a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004a3e:	3301      	adds	r3, #1
 8004a40:	4631      	mov	r1, r6
 8004a42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a46:	f7fe bd43 	b.w	80034d0 <d_print_comp_inner+0xaa8>
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004a50:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004a54:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004a58:	4798      	blx	r3
 8004a5a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a5e:	3301      	adds	r3, #1
 8004a60:	4631      	mov	r1, r6
 8004a62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a66:	2201      	movs	r2, #1
 8004a68:	f7fe bb74 	b.w	8003154 <d_print_comp_inner+0x72c>
 8004a6c:	2500      	movs	r5, #0
 8004a6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a76:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	4798      	blx	r3
 8004a7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a82:	3301      	adds	r3, #1
 8004a84:	4629      	mov	r1, r5
 8004a86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f7ff bae4 	b.w	8004058 <d_print_comp_inner+0x1630>
 8004a90:	220d      	movs	r2, #13
 8004a92:	4988      	ldr	r1, [pc, #544]	; (8004cb4 <d_print_comp_inner+0x228c>)
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7fb fcf3 	bl	8000480 <d_append_buffer>
 8004a9a:	68a9      	ldr	r1, [r5, #8]
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	3101      	adds	r1, #1
 8004aa0:	f7fb ff9e 	bl	80009e0 <d_append_num>
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	4984      	ldr	r1, [pc, #528]	; (8004cb8 <d_print_comp_inner+0x2290>)
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7fb fce9 	bl	8000480 <d_append_buffer>
 8004aae:	686d      	ldr	r5, [r5, #4]
 8004ab0:	f7fe bc22 	b.w	80032f8 <d_print_comp_inner+0x8d0>
 8004ab4:	2500      	movs	r5, #0
 8004ab6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004aba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004abe:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4798      	blx	r3
 8004ac6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004aca:	3301      	adds	r3, #1
 8004acc:	4629      	mov	r1, r5
 8004ace:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f7fe be08 	b.w	80036e8 <d_print_comp_inner+0xcc0>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004ade:	f7fe b871 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004ae2:	2500      	movs	r5, #0
 8004ae4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ae8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004aec:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004af0:	4620      	mov	r0, r4
 8004af2:	4798      	blx	r3
 8004af4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004af8:	3301      	adds	r3, #1
 8004afa:	4629      	mov	r1, r5
 8004afc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004b00:	2201      	movs	r2, #1
 8004b02:	f7ff ba8f 	b.w	8004024 <d_print_comp_inner+0x15fc>
 8004b06:	2500      	movs	r5, #0
 8004b08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004b10:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004b14:	4620      	mov	r0, r4
 8004b16:	4798      	blx	r3
 8004b18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004b24:	2201      	movs	r2, #1
 8004b26:	f7ff bbc5 	b.w	80042b4 <d_print_comp_inner+0x188c>
 8004b2a:	a914      	add	r1, sp, #80	; 0x50
 8004b2c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8004b30:	f841 0d40 	str.w	r0, [r1, #-64]!
 8004b34:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 8004b38:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8004b3c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8004b40:	4620      	mov	r0, r4
 8004b42:	4641      	mov	r1, r8
 8004b44:	9306      	str	r3, [sp, #24]
 8004b46:	9607      	str	r6, [sp, #28]
 8004b48:	9505      	str	r5, [sp, #20]
 8004b4a:	f000 fd11 	bl	8005570 <d_print_comp>
 8004b4e:	9e06      	ldr	r6, [sp, #24]
 8004b50:	9b04      	ldr	r3, [sp, #16]
 8004b52:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004b56:	2e00      	cmp	r6, #0
 8004b58:	f47e a834 	bne.w	8002bc4 <d_print_comp_inner+0x19c>
 8004b5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004b60:	29ff      	cmp	r1, #255	; 0xff
 8004b62:	f000 8409 	beq.w	8005378 <d_print_comp_inner+0x2950>
 8004b66:	2320      	movs	r3, #32
 8004b68:	1c4a      	adds	r2, r1, #1
 8004b6a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004b6e:	5463      	strb	r3, [r4, r1]
 8004b70:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004b74:	f7fe be0b 	b.w	800378e <d_print_comp_inner+0xd66>
 8004b78:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f6fe abff 	blt.w	8003380 <d_print_comp_inner+0x958>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 829d 	beq.w	80050c2 <d_print_comp_inner+0x269a>
 8004b88:	6880      	ldr	r0, [r0, #8]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	f43e a82d 	beq.w	8002bec <d_print_comp_inner+0x1c4>
 8004b92:	7802      	ldrb	r2, [r0, #0]
 8004b94:	2a2f      	cmp	r2, #47	; 0x2f
 8004b96:	d0f4      	beq.n	8004b82 <d_print_comp_inner+0x215a>
 8004b98:	f7fe b828 	b.w	8002bec <d_print_comp_inner+0x1c4>
 8004b9c:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
 8004ba0:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
 8004ba4:	f1be 0f00 	cmp.w	lr, #0
 8004ba8:	dd14      	ble.n	8004bd4 <d_print_comp_inner+0x21ac>
 8004baa:	6813      	ldr	r3, [r2, #0]
 8004bac:	4299      	cmp	r1, r3
 8004bae:	f000 83f5 	beq.w	800539c <d_print_comp_inner+0x2974>
 8004bb2:	f102 0008 	add.w	r0, r2, #8
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	46a4      	mov	ip, r4
 8004bba:	e004      	b.n	8004bc6 <d_print_comp_inner+0x219e>
 8004bbc:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8004bc0:	42a1      	cmp	r1, r4
 8004bc2:	f000 81d4 	beq.w	8004f6e <d_print_comp_inner+0x2546>
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	459e      	cmp	lr, r3
 8004bca:	4681      	mov	r9, r0
 8004bcc:	f100 0008 	add.w	r0, r0, #8
 8004bd0:	d1f4      	bne.n	8004bbc <d_print_comp_inner+0x2194>
 8004bd2:	4664      	mov	r4, ip
 8004bd4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8004bd8:	459e      	cmp	lr, r3
 8004bda:	f280 84b9 	bge.w	8005550 <d_print_comp_inner+0x2b28>
 8004bde:	f10e 0301 	add.w	r3, lr, #1
 8004be2:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
 8004be6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8004bea:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
 8004bee:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8004bf2:	3004      	adds	r0, #4
 8004bf4:	468e      	mov	lr, r1
 8004bf6:	2a00      	cmp	r2, #0
 8004bf8:	f000 848d 	beq.w	8005516 <d_print_comp_inner+0x2aee>
 8004bfc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8004c00:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 8004c04:	428b      	cmp	r3, r1
 8004c06:	f103 0c01 	add.w	ip, r3, #1
 8004c0a:	f280 84a1 	bge.w	8005550 <d_print_comp_inner+0x2b28>
 8004c0e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8004c12:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
 8004c16:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8004c1a:	6851      	ldr	r1, [r2, #4]
 8004c1c:	6059      	str	r1, [r3, #4]
 8004c1e:	6003      	str	r3, [r0, #0]
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	e7e7      	b.n	8004bf6 <d_print_comp_inner+0x21ce>
 8004c26:	2500      	movs	r5, #0
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c32:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004c36:	4620      	mov	r0, r4
 8004c38:	4798      	blx	r3
 8004c3a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004c44:	462b      	mov	r3, r5
 8004c46:	2201      	movs	r2, #1
 8004c48:	f7fe bd3d 	b.w	80036c6 <d_print_comp_inner+0xc9e>
 8004c4c:	2e00      	cmp	r6, #0
 8004c4e:	f000 844d 	beq.w	80054ec <d_print_comp_inner+0x2ac4>
 8004c52:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
 8004c56:	f040 8488 	bne.w	800556a <d_print_comp_inner+0x2b42>
 8004c5a:	6873      	ldr	r3, [r6, #4]
 8004c5c:	b373      	cbz	r3, 8004cbc <d_print_comp_inner+0x2294>
 8004c5e:	4607      	mov	r7, r0
 8004c60:	e007      	b.n	8004c72 <d_print_comp_inner+0x224a>
 8004c62:	3701      	adds	r7, #1
 8004c64:	68b6      	ldr	r6, [r6, #8]
 8004c66:	b356      	cbz	r6, 8004cbe <d_print_comp_inner+0x2296>
 8004c68:	7833      	ldrb	r3, [r6, #0]
 8004c6a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c6c:	d127      	bne.n	8004cbe <d_print_comp_inner+0x2296>
 8004c6e:	6873      	ldr	r3, [r6, #4]
 8004c70:	b32b      	cbz	r3, 8004cbe <d_print_comp_inner+0x2296>
 8004c72:	781a      	ldrb	r2, [r3, #0]
 8004c74:	2a4a      	cmp	r2, #74	; 0x4a
 8004c76:	d1f4      	bne.n	8004c62 <d_print_comp_inner+0x223a>
 8004c78:	6859      	ldr	r1, [r3, #4]
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f7fb fe2c 	bl	80008d8 <d_find_pack>
 8004c80:	b198      	cbz	r0, 8004caa <d_print_comp_inner+0x2282>
 8004c82:	7803      	ldrb	r3, [r0, #0]
 8004c84:	2b2f      	cmp	r3, #47	; 0x2f
 8004c86:	f040 846c 	bne.w	8005562 <d_print_comp_inner+0x2b3a>
 8004c8a:	6843      	ldr	r3, [r0, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8464 	beq.w	800555a <d_print_comp_inner+0x2b32>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2000      	movs	r0, #0
 8004c96:	e004      	b.n	8004ca2 <d_print_comp_inner+0x227a>
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	2a2f      	cmp	r2, #47	; 0x2f
 8004c9c:	d105      	bne.n	8004caa <d_print_comp_inner+0x2282>
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	b11a      	cbz	r2, 8004caa <d_print_comp_inner+0x2282>
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f6      	bne.n	8004c98 <d_print_comp_inner+0x2270>
 8004caa:	4407      	add	r7, r0
 8004cac:	e7da      	b.n	8004c64 <d_print_comp_inner+0x223c>
 8004cae:	bf00      	nop
 8004cb0:	08019f40 	.word	0x08019f40
 8004cb4:	08019f94 	.word	0x08019f94
 8004cb8:	08019fa4 	.word	0x08019fa4
 8004cbc:	461f      	mov	r7, r3
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7fb fe8d 	bl	80009e0 <d_append_num>
 8004cc6:	f7fd bf7d 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004cca:	2500      	movs	r5, #0
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cd6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004cda:	4620      	mov	r0, r4
 8004cdc:	4798      	blx	r3
 8004cde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004ce8:	462b      	mov	r3, r5
 8004cea:	2101      	movs	r1, #1
 8004cec:	f7fe bb8e 	b.w	800340c <d_print_comp_inner+0x9e4>
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cf8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cfc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004d00:	4620      	mov	r0, r4
 8004d02:	4798      	blx	r3
 8004d04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004d0e:	4633      	mov	r3, r6
 8004d10:	2101      	movs	r1, #1
 8004d12:	f7fe bb65 	b.w	80033e0 <d_print_comp_inner+0x9b8>
 8004d16:	2200      	movs	r2, #0
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8004d1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d22:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d26:	4620      	mov	r0, r4
 8004d28:	4798      	blx	r3
 8004d2a:	2329      	movs	r3, #41	; 0x29
 8004d2c:	7023      	strb	r3, [r4, #0]
 8004d2e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d32:	782a      	ldrb	r2, [r5, #0]
 8004d34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d38:	2101      	movs	r1, #1
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	2a3d      	cmp	r2, #61	; 0x3d
 8004d3e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004d46:	f47e af58 	bne.w	8003bfa <d_print_comp_inner+0x11d2>
 8004d4a:	e63f      	b.n	80049cc <d_print_comp_inner+0x1fa4>
 8004d4c:	2700      	movs	r7, #0
 8004d4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d52:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004d56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	4798      	blx	r3
 8004d5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d62:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004d66:	3301      	adds	r3, #1
 8004d68:	4639      	mov	r1, r7
 8004d6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d6e:	f7fe bf28 	b.w	8003bc2 <d_print_comp_inner+0x119a>
 8004d72:	2500      	movs	r5, #0
 8004d74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d7c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004d80:	4620      	mov	r0, r4
 8004d82:	4798      	blx	r3
 8004d84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d88:	3301      	adds	r3, #1
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d90:	2201      	movs	r2, #1
 8004d92:	f7ff bb12 	b.w	80043ba <d_print_comp_inner+0x1992>
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8004d9c:	2901      	cmp	r1, #1
 8004d9e:	d903      	bls.n	8004da8 <d_print_comp_inner+0x2380>
 8004da0:	3b72      	subs	r3, #114	; 0x72
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	f63d aead 	bhi.w	8002b02 <d_print_comp_inner+0xda>
 8004da8:	4641      	mov	r1, r8
 8004daa:	4620      	mov	r0, r4
 8004dac:	f001 f9c8 	bl	8006140 <d_print_expr_op>
 8004db0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004db4:	29ff      	cmp	r1, #255	; 0xff
 8004db6:	f000 8271 	beq.w	800529c <d_print_comp_inner+0x2874>
 8004dba:	1c4a      	adds	r2, r1, #1
 8004dbc:	233c      	movs	r3, #60	; 0x3c
 8004dbe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dc2:	5463      	strb	r3, [r4, r1]
 8004dc4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004dc8:	68ab      	ldr	r3, [r5, #8]
 8004dca:	4641      	mov	r1, r8
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f000 fbce 	bl	8005570 <d_print_comp>
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	49d5      	ldr	r1, [pc, #852]	; (800512c <d_print_comp_inner+0x2704>)
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7fb fb51 	bl	8000480 <d_append_buffer>
 8004dde:	68ab      	ldr	r3, [r5, #8]
 8004de0:	4641      	mov	r1, r8
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	4620      	mov	r0, r4
 8004de6:	f000 fbc3 	bl	8005570 <d_print_comp>
 8004dea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004dee:	29ff      	cmp	r1, #255	; 0xff
 8004df0:	f000 81df 	beq.w	80051b2 <d_print_comp_inner+0x278a>
 8004df4:	2329      	movs	r3, #41	; 0x29
 8004df6:	1c4a      	adds	r2, r1, #1
 8004df8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dfc:	5463      	strb	r3, [r4, r1]
 8004dfe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e02:	f7fd bedf 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004e06:	4632      	mov	r2, r6
 8004e08:	4641      	mov	r1, r8
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f000 fbb0 	bl	8005570 <d_print_comp>
 8004e10:	f7fd bed8 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004e14:	2600      	movs	r6, #0
 8004e16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e1e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004e22:	4620      	mov	r0, r4
 8004e24:	4798      	blx	r3
 8004e26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e32:	2201      	movs	r2, #1
 8004e34:	f7fe ba55 	b.w	80032e2 <d_print_comp_inner+0x8ba>
 8004e38:	49bd      	ldr	r1, [pc, #756]	; (8005130 <d_print_comp_inner+0x2708>)
 8004e3a:	6870      	ldr	r0, [r6, #4]
 8004e3c:	f011 f86a 	bl	8015f14 <strncmp>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	f47e aabd 	bne.w	80033c0 <d_print_comp_inner+0x998>
 8004e46:	68aa      	ldr	r2, [r5, #8]
 8004e48:	4641      	mov	r1, r8
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f000 fb90 	bl	8005570 <d_print_comp>
 8004e50:	2202      	movs	r2, #2
 8004e52:	49b8      	ldr	r1, [pc, #736]	; (8005134 <d_print_comp_inner+0x270c>)
 8004e54:	4620      	mov	r0, r4
 8004e56:	f7fb fb13 	bl	8000480 <d_append_buffer>
 8004e5a:	f7fe badd 	b.w	8003418 <d_print_comp_inner+0x9f0>
 8004e5e:	68aa      	ldr	r2, [r5, #8]
 8004e60:	7817      	ldrb	r7, [r2, #0]
 8004e62:	2f00      	cmp	r7, #0
 8004e64:	f47e aea8 	bne.w	8003bb8 <d_print_comp_inner+0x1190>
 8004e68:	2b3d      	cmp	r3, #61	; 0x3d
 8004e6a:	f000 82ef 	beq.w	800544c <d_print_comp_inner+0x2a24>
 8004e6e:	68aa      	ldr	r2, [r5, #8]
 8004e70:	4641      	mov	r1, r8
 8004e72:	4620      	mov	r0, r4
 8004e74:	3e02      	subs	r6, #2
 8004e76:	f000 fb7b 	bl	8005570 <d_print_comp>
 8004e7a:	2e04      	cmp	r6, #4
 8004e7c:	f63d aea2 	bhi.w	8002bc4 <d_print_comp_inner+0x19c>
 8004e80:	e8df f006 	tbb	[pc, r6]
 8004e84:	0a111826 	.word	0x0a111826
 8004e88:	03          	.byte	0x03
 8004e89:	00          	.byte	0x00
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	2203      	movs	r2, #3
 8004e8e:	49aa      	ldr	r1, [pc, #680]	; (8005138 <d_print_comp_inner+0x2710>)
 8004e90:	f7fb faf6 	bl	8000480 <d_append_buffer>
 8004e94:	f7fd be96 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004e98:	4620      	mov	r0, r4
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	49a7      	ldr	r1, [pc, #668]	; (800513c <d_print_comp_inner+0x2714>)
 8004e9e:	f7fb faef 	bl	8000480 <d_append_buffer>
 8004ea2:	f7fd be8f 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	49a5      	ldr	r1, [pc, #660]	; (8005140 <d_print_comp_inner+0x2718>)
 8004eac:	f7fb fae8 	bl	8000480 <d_append_buffer>
 8004eb0:	f7fd be88 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004eb4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004eb8:	29ff      	cmp	r1, #255	; 0xff
 8004eba:	f000 831a 	beq.w	80054f2 <d_print_comp_inner+0x2aca>
 8004ebe:	236c      	movs	r3, #108	; 0x6c
 8004ec0:	1c4a      	adds	r2, r1, #1
 8004ec2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ec6:	5463      	strb	r3, [r4, r1]
 8004ec8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ecc:	f7fd be7a 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004ed0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004ed4:	29ff      	cmp	r1, #255	; 0xff
 8004ed6:	f000 82db 	beq.w	8005490 <d_print_comp_inner+0x2a68>
 8004eda:	2375      	movs	r3, #117	; 0x75
 8004edc:	1c4a      	adds	r2, r1, #1
 8004ede:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ee2:	5463      	strb	r3, [r4, r1]
 8004ee4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ee8:	f7fd be6c 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8004eec:	2600      	movs	r6, #0
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ef4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ef8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004efc:	4620      	mov	r0, r4
 8004efe:	4798      	blx	r3
 8004f00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004f0a:	4633      	mov	r3, r6
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	f7fe bd3c 	b.w	800398a <d_print_comp_inner+0xf62>
 8004f12:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004f16:	f7fe bf95 	b.w	8003e44 <d_print_comp_inner+0x141c>
 8004f1a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004f1e:	29ff      	cmp	r1, #255	; 0xff
 8004f20:	f000 8244 	beq.w	80053ac <d_print_comp_inner+0x2984>
 8004f24:	2320      	movs	r3, #32
 8004f26:	1c4a      	adds	r2, r1, #1
 8004f28:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f2c:	5463      	strb	r3, [r4, r1]
 8004f2e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f32:	e447      	b.n	80047c4 <d_print_comp_inner+0x1d9c>
 8004f34:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004f38:	29ff      	cmp	r1, #255	; 0xff
 8004f3a:	f000 826e 	beq.w	800541a <d_print_comp_inner+0x29f2>
 8004f3e:	2320      	movs	r3, #32
 8004f40:	1c4a      	adds	r2, r1, #1
 8004f42:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f46:	5463      	strb	r3, [r4, r1]
 8004f48:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f4c:	e419      	b.n	8004782 <d_print_comp_inner+0x1d5a>
 8004f4e:	2500      	movs	r5, #0
 8004f50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f54:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004f58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	4798      	blx	r3
 8004f60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f64:	3301      	adds	r3, #1
 8004f66:	4629      	mov	r1, r5
 8004f68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f6c:	e4dd      	b.n	800492a <d_print_comp_inner+0x1f02>
 8004f6e:	4664      	mov	r4, ip
 8004f70:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8004f74:	b1d8      	cbz	r0, 8004fae <d_print_comp_inner+0x2586>
 8004f76:	6802      	ldr	r2, [r0, #0]
 8004f78:	4291      	cmp	r1, r2
 8004f7a:	d00a      	beq.n	8004f92 <d_print_comp_inner+0x256a>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	e004      	b.n	8004f8a <d_print_comp_inner+0x2562>
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b1a3      	cbz	r3, 8004fae <d_print_comp_inner+0x2586>
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4291      	cmp	r1, r2
 8004f88:	d003      	beq.n	8004f92 <d_print_comp_inner+0x256a>
 8004f8a:	4295      	cmp	r5, r2
 8004f8c:	d1f8      	bne.n	8004f80 <d_print_comp_inner+0x2558>
 8004f8e:	4298      	cmp	r0, r3
 8004f90:	d0f6      	beq.n	8004f80 <d_print_comp_inner+0x2558>
 8004f92:	3104      	adds	r1, #4
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7fb fc83 	bl	80008a0 <d_lookup_template_argument.isra.6>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	f43d ae26 	beq.w	8002bec <d_print_comp_inner+0x1c4>
 8004fa0:	7803      	ldrb	r3, [r0, #0]
 8004fa2:	2b2f      	cmp	r3, #47	; 0x2f
 8004fa4:	f43d ae11 	beq.w	8002bca <d_print_comp_inner+0x1a2>
 8004fa8:	4601      	mov	r1, r0
 8004faa:	f7fe bc30 	b.w	800380e <d_print_comp_inner+0xde6>
 8004fae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004fb2:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8004fb6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004fba:	3104      	adds	r1, #4
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7fb fc6f 	bl	80008a0 <d_lookup_template_argument.isra.6>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	f43d ae10 	beq.w	8002be8 <d_print_comp_inner+0x1c0>
 8004fc8:	2701      	movs	r7, #1
 8004fca:	e7e9      	b.n	8004fa0 <d_print_comp_inner+0x2578>
 8004fcc:	2600      	movs	r6, #0
 8004fce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fd2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004fd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fda:	4620      	mov	r0, r4
 8004fdc:	4798      	blx	r3
 8004fde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fe2:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	4631      	mov	r1, r6
 8004fea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fee:	f7ff b85a 	b.w	80040a6 <d_print_comp_inner+0x167e>
 8004ff2:	68aa      	ldr	r2, [r5, #8]
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f000 faba 	bl	8005570 <d_print_comp>
 8004ffc:	9b06      	ldr	r3, [sp, #24]
 8004ffe:	9a00      	ldr	r2, [sp, #0]
 8005000:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8005004:	2b00      	cmp	r3, #0
 8005006:	f43e ac9d 	beq.w	8003944 <d_print_comp_inner+0xf1c>
 800500a:	f7fd bddb 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 800500e:	255f      	movs	r5, #95	; 0x5f
 8005010:	f7ff ba10 	b.w	8004434 <d_print_comp_inner+0x1a0c>
 8005014:	2500      	movs	r5, #0
 8005016:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800501a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800501e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005022:	4620      	mov	r0, r4
 8005024:	4798      	blx	r3
 8005026:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800502a:	3301      	adds	r3, #1
 800502c:	4629      	mov	r1, r5
 800502e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005032:	f7ff bb82 	b.w	800473a <d_print_comp_inner+0x1d12>
 8005036:	4648      	mov	r0, r9
 8005038:	4942      	ldr	r1, [pc, #264]	; (8005144 <d_print_comp_inner+0x271c>)
 800503a:	f001 fca9 	bl	8006990 <strcmp>
 800503e:	b120      	cbz	r0, 800504a <d_print_comp_inner+0x2622>
 8005040:	463a      	mov	r2, r7
 8005042:	4641      	mov	r1, r8
 8005044:	4620      	mov	r0, r4
 8005046:	f001 f87b 	bl	8006140 <d_print_expr_op>
 800504a:	68ab      	ldr	r3, [r5, #8]
 800504c:	4641      	mov	r1, r8
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	4620      	mov	r0, r4
 8005052:	f001 f8b3 	bl	80061bc <d_print_subexpr>
 8005056:	f7fd bd9d 	b.w	8002b94 <d_print_comp_inner+0x16c>
 800505a:	2600      	movs	r6, #0
 800505c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005060:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005064:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005068:	4620      	mov	r0, r4
 800506a:	4798      	blx	r3
 800506c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005070:	3301      	adds	r3, #1
 8005072:	4631      	mov	r1, r6
 8005074:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005078:	f7ff bb88 	b.w	800478c <d_print_comp_inner+0x1d64>
 800507c:	2500      	movs	r5, #0
 800507e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005082:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005086:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800508a:	4620      	mov	r0, r4
 800508c:	4798      	blx	r3
 800508e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005092:	3301      	adds	r3, #1
 8005094:	4629      	mov	r1, r5
 8005096:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800509a:	f7fe bb59 	b.w	8003750 <d_print_comp_inner+0xd28>
 800509e:	2500      	movs	r5, #0
 80050a0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80050a4:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80050a8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80050ac:	4798      	blx	r3
 80050ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80050b2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80050b6:	3301      	adds	r3, #1
 80050b8:	4629      	mov	r1, r5
 80050ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80050be:	f7fe bb2b 	b.w	8003718 <d_print_comp_inner+0xcf0>
 80050c2:	6840      	ldr	r0, [r0, #4]
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f43d ad91 	beq.w	8002bec <d_print_comp_inner+0x1c4>
 80050ca:	f7fe b959 	b.w	8003380 <d_print_comp_inner+0x958>
 80050ce:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 80050d2:	4619      	mov	r1, r3
 80050d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80050d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80050dc:	4620      	mov	r0, r4
 80050de:	4798      	blx	r3
 80050e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80050ea:	462b      	mov	r3, r5
 80050ec:	f7ff bb14 	b.w	8004718 <d_print_comp_inner+0x1cf0>
 80050f0:	6873      	ldr	r3, [r6, #4]
 80050f2:	781a      	ldrb	r2, [r3, #0]
 80050f4:	2a01      	cmp	r2, #1
 80050f6:	f000 8153 	beq.w	80053a0 <d_print_comp_inner+0x2978>
 80050fa:	f896 a000 	ldrb.w	sl, [r6]
 80050fe:	f7ff bae0 	b.w	80046c2 <d_print_comp_inner+0x1c9a>
 8005102:	2500      	movs	r5, #0
 8005104:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005108:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800510c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005110:	4620      	mov	r0, r4
 8005112:	4798      	blx	r3
 8005114:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005118:	3301      	adds	r3, #1
 800511a:	4629      	mov	r1, r5
 800511c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005120:	f7ff bb55 	b.w	80047ce <d_print_comp_inner+0x1da6>
 8005124:	4654      	mov	r4, sl
 8005126:	f7fe be8d 	b.w	8003e44 <d_print_comp_inner+0x141c>
 800512a:	bf00      	nop
 800512c:	0801a140 	.word	0x0801a140
 8005130:	08019fa8 	.word	0x08019fa8
 8005134:	08019fb0 	.word	0x08019fb0
 8005138:	0801a15c 	.word	0x0801a15c
 800513c:	0801a158 	.word	0x0801a158
 8005140:	0801a154 	.word	0x0801a154
 8005144:	08019f48 	.word	0x08019f48
 8005148:	686a      	ldr	r2, [r5, #4]
 800514a:	4641      	mov	r1, r8
 800514c:	4620      	mov	r0, r4
 800514e:	f001 f835 	bl	80061bc <d_print_subexpr>
 8005152:	4620      	mov	r0, r4
 8005154:	2203      	movs	r2, #3
 8005156:	49e2      	ldr	r1, [pc, #904]	; (80054e0 <d_print_comp_inner+0x2ab8>)
 8005158:	f7fb f992 	bl	8000480 <d_append_buffer>
 800515c:	f7fd bd32 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8005160:	ab14      	add	r3, sp, #80	; 0x50
 8005162:	9603      	str	r6, [sp, #12]
 8005164:	f843 cd48 	str.w	ip, [r3, #-72]!
 8005168:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800516c:	f7fe b85a 	b.w	8003224 <d_print_comp_inner+0x7fc>
 8005170:	2700      	movs	r7, #0
 8005172:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005176:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800517a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800517e:	4620      	mov	r0, r4
 8005180:	4798      	blx	r3
 8005182:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005186:	3301      	adds	r3, #1
 8005188:	4639      	mov	r1, r7
 800518a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800518e:	e41d      	b.n	80049cc <d_print_comp_inner+0x1fa4>
 8005190:	2600      	movs	r6, #0
 8005192:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005196:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800519a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800519e:	4620      	mov	r0, r4
 80051a0:	4798      	blx	r3
 80051a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051a6:	3301      	adds	r3, #1
 80051a8:	4631      	mov	r1, r6
 80051aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051ae:	f7ff bb8a 	b.w	80048c6 <d_print_comp_inner+0x1e9e>
 80051b2:	2500      	movs	r5, #0
 80051b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051b8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80051bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051c0:	4620      	mov	r0, r4
 80051c2:	4798      	blx	r3
 80051c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051c8:	3301      	adds	r3, #1
 80051ca:	4629      	mov	r1, r5
 80051cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051d0:	e610      	b.n	8004df4 <d_print_comp_inner+0x23cc>
 80051d2:	2600      	movs	r6, #0
 80051d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051d8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80051dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051e0:	4620      	mov	r0, r4
 80051e2:	4798      	blx	r3
 80051e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051e8:	3301      	adds	r3, #1
 80051ea:	4631      	mov	r1, r6
 80051ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051f0:	f7ff bb8a 	b.w	8004908 <d_print_comp_inner+0x1ee0>
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	6891      	ldr	r1, [r2, #8]
 80051f8:	2901      	cmp	r1, #1
 80051fa:	f47d ac90 	bne.w	8002b1e <d_print_comp_inner+0xf6>
 80051fe:	6852      	ldr	r2, [r2, #4]
 8005200:	7812      	ldrb	r2, [r2, #0]
 8005202:	2a3e      	cmp	r2, #62	; 0x3e
 8005204:	f47d ac8b 	bne.w	8002b1e <d_print_comp_inner+0xf6>
 8005208:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800520c:	29ff      	cmp	r1, #255	; 0xff
 800520e:	d10f      	bne.n	8005230 <d_print_comp_inner+0x2808>
 8005210:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005214:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005218:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800521c:	4620      	mov	r0, r4
 800521e:	4798      	blx	r3
 8005220:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005224:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005228:	3301      	adds	r3, #1
 800522a:	4631      	mov	r1, r6
 800522c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005230:	2328      	movs	r3, #40	; 0x28
 8005232:	1c4a      	adds	r2, r1, #1
 8005234:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005238:	5463      	strb	r3, [r4, r1]
 800523a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800523e:	686b      	ldr	r3, [r5, #4]
 8005240:	f7fd bc6d 	b.w	8002b1e <d_print_comp_inner+0xf6>
 8005244:	2500      	movs	r5, #0
 8005246:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800524a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800524e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005252:	4620      	mov	r0, r4
 8005254:	4798      	blx	r3
 8005256:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800525a:	3301      	adds	r3, #1
 800525c:	4629      	mov	r1, r5
 800525e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005262:	f7ff bb0b 	b.w	800487c <d_print_comp_inner+0x1e54>
 8005266:	f8db b004 	ldr.w	fp, [fp, #4]
 800526a:	f1bb 0f00 	cmp.w	fp, #0
 800526e:	f43e ade9 	beq.w	8003e44 <d_print_comp_inner+0x141c>
 8005272:	f7fd bfc3 	b.w	80031fc <d_print_comp_inner+0x7d4>
 8005276:	9b02      	ldr	r3, [sp, #8]
 8005278:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800527c:	f7fd bfdb 	b.w	8003236 <d_print_comp_inner+0x80e>
 8005280:	6893      	ldr	r3, [r2, #8]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b29      	cmp	r3, #41	; 0x29
 8005286:	bf1c      	itt	ne
 8005288:	2301      	movne	r3, #1
 800528a:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 800528e:	6852      	ldr	r2, [r2, #4]
 8005290:	4641      	mov	r1, r8
 8005292:	4620      	mov	r0, r4
 8005294:	f000 ff92 	bl	80061bc <d_print_subexpr>
 8005298:	f7fd bc52 	b.w	8002b40 <d_print_comp_inner+0x118>
 800529c:	2600      	movs	r6, #0
 800529e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052a2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80052a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052aa:	4620      	mov	r0, r4
 80052ac:	4798      	blx	r3
 80052ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052b2:	3301      	adds	r3, #1
 80052b4:	4631      	mov	r1, r6
 80052b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80052ba:	e57e      	b.n	8004dba <d_print_comp_inner+0x2392>
 80052bc:	6872      	ldr	r2, [r6, #4]
 80052be:	4641      	mov	r1, r8
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 ff7b 	bl	80061bc <d_print_subexpr>
 80052c6:	464a      	mov	r2, r9
 80052c8:	4641      	mov	r1, r8
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 ff38 	bl	8006140 <d_print_expr_op>
 80052d0:	f7fd bc78 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 80052d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052d8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80052dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052e0:	4620      	mov	r0, r4
 80052e2:	4798      	blx	r3
 80052e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052e8:	3301      	adds	r3, #1
 80052ea:	4629      	mov	r1, r5
 80052ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80052f0:	f7fd bfad 	b.w	800324e <d_print_comp_inner+0x826>
 80052f4:	464a      	mov	r2, r9
 80052f6:	4641      	mov	r1, r8
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 ff5f 	bl	80061bc <d_print_subexpr>
 80052fe:	4652      	mov	r2, sl
 8005300:	4641      	mov	r1, r8
 8005302:	4620      	mov	r0, r4
 8005304:	f000 ff1c 	bl	8006140 <d_print_expr_op>
 8005308:	463a      	mov	r2, r7
 800530a:	4641      	mov	r1, r8
 800530c:	4620      	mov	r0, r4
 800530e:	f000 ff55 	bl	80061bc <d_print_subexpr>
 8005312:	4620      	mov	r0, r4
 8005314:	2203      	movs	r2, #3
 8005316:	4973      	ldr	r1, [pc, #460]	; (80054e4 <d_print_comp_inner+0x2abc>)
 8005318:	f7fb f8b2 	bl	8000480 <d_append_buffer>
 800531c:	462a      	mov	r2, r5
 800531e:	4641      	mov	r1, r8
 8005320:	4620      	mov	r0, r4
 8005322:	f000 ff4b 	bl	80061bc <d_print_subexpr>
 8005326:	f7fd bc4d 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 800532a:	454f      	cmp	r7, r9
 800532c:	f67f ae6f 	bls.w	800500e <d_print_comp_inner+0x25e6>
 8005330:	2d5f      	cmp	r5, #95	; 0x5f
 8005332:	f47f ae6c 	bne.w	800500e <d_print_comp_inner+0x25e6>
 8005336:	28ff      	cmp	r0, #255	; 0xff
 8005338:	f63f a87c 	bhi.w	8004434 <d_print_comp_inner+0x1a0c>
 800533c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005340:	29ff      	cmp	r1, #255	; 0xff
 8005342:	b2c5      	uxtb	r5, r0
 8005344:	d10f      	bne.n	8005366 <d_print_comp_inner+0x293e>
 8005346:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800534a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800534e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005352:	4620      	mov	r0, r4
 8005354:	4798      	blx	r3
 8005356:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800535a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 800535e:	3301      	adds	r3, #1
 8005360:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005364:	2100      	movs	r1, #0
 8005366:	1c4b      	adds	r3, r1, #1
 8005368:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800536c:	464e      	mov	r6, r9
 800536e:	5465      	strb	r5, [r4, r1]
 8005370:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005374:	f7ff b868 	b.w	8004448 <d_print_comp_inner+0x1a20>
 8005378:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800537c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005380:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005384:	4620      	mov	r0, r4
 8005386:	4798      	blx	r3
 8005388:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800538c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005390:	3301      	adds	r3, #1
 8005392:	4631      	mov	r1, r6
 8005394:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005398:	f7ff bbe5 	b.w	8004b66 <d_print_comp_inner+0x213e>
 800539c:	4691      	mov	r9, r2
 800539e:	e5e7      	b.n	8004f70 <d_print_comp_inner+0x2548>
 80053a0:	68b2      	ldr	r2, [r6, #8]
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	2a29      	cmp	r2, #41	; 0x29
 80053a6:	bf08      	it	eq
 80053a8:	461e      	moveq	r6, r3
 80053aa:	e6a6      	b.n	80050fa <d_print_comp_inner+0x26d2>
 80053ac:	2500      	movs	r5, #0
 80053ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053b2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80053b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053ba:	4620      	mov	r0, r4
 80053bc:	4798      	blx	r3
 80053be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053c2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80053c6:	3301      	adds	r3, #1
 80053c8:	4629      	mov	r1, r5
 80053ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053ce:	e5a9      	b.n	8004f24 <d_print_comp_inner+0x24fc>
 80053d0:	2600      	movs	r6, #0
 80053d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053d6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053de:	4620      	mov	r0, r4
 80053e0:	4798      	blx	r3
 80053e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053e6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053ea:	3301      	adds	r3, #1
 80053ec:	4631      	mov	r1, r6
 80053ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053f2:	f7fd bbc8 	b.w	8002b86 <d_print_comp_inner+0x15e>
 80053f6:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 80053fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005402:	4620      	mov	r0, r4
 8005404:	4798      	blx	r3
 8005406:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800540a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800540e:	3301      	adds	r3, #1
 8005410:	4631      	mov	r1, r6
 8005412:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005416:	f7fd bba4 	b.w	8002b62 <d_print_comp_inner+0x13a>
 800541a:	2600      	movs	r6, #0
 800541c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005420:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005424:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005428:	4620      	mov	r0, r4
 800542a:	4798      	blx	r3
 800542c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005430:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005434:	3301      	adds	r3, #1
 8005436:	4631      	mov	r1, r6
 8005438:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800543c:	e57f      	b.n	8004f3e <d_print_comp_inner+0x2516>
 800543e:	6841      	ldr	r1, [r0, #4]
 8005440:	2900      	cmp	r1, #0
 8005442:	f43d abd0 	beq.w	8002be6 <d_print_comp_inner+0x1be>
 8005446:	780b      	ldrb	r3, [r1, #0]
 8005448:	f7fe b9e1 	b.w	800380e <d_print_comp_inner+0xde6>
 800544c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005450:	29ff      	cmp	r1, #255	; 0xff
 8005452:	d00d      	beq.n	8005470 <d_print_comp_inner+0x2a48>
 8005454:	232d      	movs	r3, #45	; 0x2d
 8005456:	1c4a      	adds	r2, r1, #1
 8005458:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800545c:	5463      	strb	r3, [r4, r1]
 800545e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005462:	e504      	b.n	8004e6e <d_print_comp_inner+0x2446>
 8005464:	2205      	movs	r2, #5
 8005466:	4920      	ldr	r1, [pc, #128]	; (80054e8 <d_print_comp_inner+0x2ac0>)
 8005468:	f7fb f80a 	bl	8000480 <d_append_buffer>
 800546c:	f7fd bbaa 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 8005470:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005474:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005478:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800547c:	4798      	blx	r3
 800547e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005482:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005486:	3301      	adds	r3, #1
 8005488:	4639      	mov	r1, r7
 800548a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800548e:	e7e1      	b.n	8005454 <d_print_comp_inner+0x2a2c>
 8005490:	2500      	movs	r5, #0
 8005492:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005496:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800549a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800549e:	4620      	mov	r0, r4
 80054a0:	4798      	blx	r3
 80054a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054a6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80054aa:	3301      	adds	r3, #1
 80054ac:	4629      	mov	r1, r5
 80054ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054b2:	e512      	b.n	8004eda <d_print_comp_inner+0x24b2>
 80054b4:	2700      	movs	r7, #0
 80054b6:	f7ff b913 	b.w	80046e0 <d_print_comp_inner+0x1cb8>
 80054ba:	2500      	movs	r5, #0
 80054bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054c0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80054c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80054c8:	4620      	mov	r0, r4
 80054ca:	4798      	blx	r3
 80054cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054d0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80054d4:	3301      	adds	r3, #1
 80054d6:	4629      	mov	r1, r5
 80054d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054dc:	f7fd bb6b 	b.w	8002bb6 <d_print_comp_inner+0x18e>
 80054e0:	0801a18c 	.word	0x0801a18c
 80054e4:	0801a148 	.word	0x0801a148
 80054e8:	0801a160 	.word	0x0801a160
 80054ec:	4637      	mov	r7, r6
 80054ee:	f7ff bbe6 	b.w	8004cbe <d_print_comp_inner+0x2296>
 80054f2:	2500      	movs	r5, #0
 80054f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054f8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80054fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005500:	4620      	mov	r0, r4
 8005502:	4798      	blx	r3
 8005504:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005508:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800550c:	3301      	adds	r3, #1
 800550e:	4629      	mov	r1, r5
 8005510:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005514:	e4d3      	b.n	8004ebe <d_print_comp_inner+0x2496>
 8005516:	4671      	mov	r1, lr
 8005518:	6002      	str	r2, [r0, #0]
 800551a:	3104      	adds	r1, #4
 800551c:	4620      	mov	r0, r4
 800551e:	f7fb f9bf 	bl	80008a0 <d_lookup_template_argument.isra.6>
 8005522:	2800      	cmp	r0, #0
 8005524:	f47f ad3c 	bne.w	8004fa0 <d_print_comp_inner+0x2578>
 8005528:	f7fd bb60 	b.w	8002bec <d_print_comp_inner+0x1c4>
 800552c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005530:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005534:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005538:	4620      	mov	r0, r4
 800553a:	4798      	blx	r3
 800553c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005540:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005544:	3301      	adds	r3, #1
 8005546:	4631      	mov	r1, r6
 8005548:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800554c:	f7fe bc02 	b.w	8003d54 <d_print_comp_inner+0x132c>
 8005550:	2301      	movs	r3, #1
 8005552:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005556:	f7fd bb35 	b.w	8002bc4 <d_print_comp_inner+0x19c>
 800555a:	4618      	mov	r0, r3
 800555c:	4407      	add	r7, r0
 800555e:	f7ff bb81 	b.w	8004c64 <d_print_comp_inner+0x223c>
 8005562:	2000      	movs	r0, #0
 8005564:	4407      	add	r7, r0
 8005566:	f7ff bb7d 	b.w	8004c64 <d_print_comp_inner+0x223c>
 800556a:	4607      	mov	r7, r0
 800556c:	f7ff bba7 	b.w	8004cbe <d_print_comp_inner+0x2296>

08005570 <d_print_comp>:
 8005570:	b510      	push	{r4, lr}
 8005572:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8005576:	b082      	sub	sp, #8
 8005578:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 800557c:	4604      	mov	r4, r0
 800557e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005582:	f7fd fa51 	bl	8002a28 <d_print_comp_inner>
 8005586:	9b01      	ldr	r3, [sp, #4]
 8005588:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800558c:	b002      	add	sp, #8
 800558e:	bd10      	pop	{r4, pc}

08005590 <d_print_mod>:
 8005590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005594:	7813      	ldrb	r3, [r2, #0]
 8005596:	3b03      	subs	r3, #3
 8005598:	b082      	sub	sp, #8
 800559a:	4615      	mov	r5, r2
 800559c:	4604      	mov	r4, r0
 800559e:	4688      	mov	r8, r1
 80055a0:	2b49      	cmp	r3, #73	; 0x49
 80055a2:	f200 8223 	bhi.w	80059ec <d_print_mod+0x45c>
 80055a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80055aa:	01e7      	.short	0x01e7
 80055ac:	02210221 	.word	0x02210221
 80055b0:	02210221 	.word	0x02210221
 80055b4:	02210221 	.word	0x02210221
 80055b8:	02210221 	.word	0x02210221
 80055bc:	02210221 	.word	0x02210221
 80055c0:	02210221 	.word	0x02210221
 80055c4:	02210221 	.word	0x02210221
 80055c8:	02210221 	.word	0x02210221
 80055cc:	02210221 	.word	0x02210221
 80055d0:	02210221 	.word	0x02210221
 80055d4:	01e90221 	.word	0x01e90221
 80055d8:	01a80182 	.word	0x01a80182
 80055dc:	018201e9 	.word	0x018201e9
 80055e0:	01cd01a8 	.word	0x01cd01a8
 80055e4:	006f01da 	.word	0x006f01da
 80055e8:	009c008c 	.word	0x009c008c
 80055ec:	00cf00ab 	.word	0x00cf00ab
 80055f0:	022100f4 	.word	0x022100f4
 80055f4:	02210221 	.word	0x02210221
 80055f8:	01190221 	.word	0x01190221
 80055fc:	015c0221 	.word	0x015c0221
 8005600:	02210221 	.word	0x02210221
 8005604:	02210221 	.word	0x02210221
 8005608:	02210221 	.word	0x02210221
 800560c:	02210221 	.word	0x02210221
 8005610:	02210221 	.word	0x02210221
 8005614:	02210221 	.word	0x02210221
 8005618:	02210221 	.word	0x02210221
 800561c:	02210221 	.word	0x02210221
 8005620:	02210221 	.word	0x02210221
 8005624:	02210221 	.word	0x02210221
 8005628:	02210221 	.word	0x02210221
 800562c:	02210221 	.word	0x02210221
 8005630:	02210221 	.word	0x02210221
 8005634:	02210221 	.word	0x02210221
 8005638:	02210221 	.word	0x02210221
 800563c:	004a      	.short	0x004a
 800563e:	4dd3      	ldr	r5, [pc, #844]	; (800598c <d_print_mod+0x3fc>)
 8005640:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005644:	f105 0711 	add.w	r7, r5, #17
 8005648:	f04f 0800 	mov.w	r8, #0
 800564c:	e008      	b.n	8005660 <d_print_mod+0xd0>
 800564e:	460b      	mov	r3, r1
 8005650:	3101      	adds	r1, #1
 8005652:	42bd      	cmp	r5, r7
 8005654:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005658:	54e6      	strb	r6, [r4, r3]
 800565a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800565e:	d02d      	beq.n	80056bc <d_print_mod+0x12c>
 8005660:	29ff      	cmp	r1, #255	; 0xff
 8005662:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005666:	d1f2      	bne.n	800564e <d_print_mod+0xbe>
 8005668:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800566c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005670:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005674:	4620      	mov	r0, r4
 8005676:	4798      	blx	r3
 8005678:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800567c:	3301      	adds	r3, #1
 800567e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005682:	2101      	movs	r1, #1
 8005684:	2300      	movs	r3, #0
 8005686:	e7e4      	b.n	8005652 <d_print_mod+0xc2>
 8005688:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800568c:	29ff      	cmp	r1, #255	; 0xff
 800568e:	f000 81f7 	beq.w	8005a80 <d_print_mod+0x4f0>
 8005692:	1c4a      	adds	r2, r1, #1
 8005694:	2320      	movs	r3, #32
 8005696:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800569a:	5463      	strb	r3, [r4, r1]
 800569c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80056a0:	68aa      	ldr	r2, [r5, #8]
 80056a2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80056a6:	9200      	str	r2, [sp, #0]
 80056a8:	4641      	mov	r1, r8
 80056aa:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80056ae:	4620      	mov	r0, r4
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	f7fd f9b9 	bl	8002a28 <d_print_comp_inner>
 80056b6:	9b01      	ldr	r3, [sp, #4]
 80056b8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80056bc:	b002      	add	sp, #8
 80056be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c2:	f011 0504 	ands.w	r5, r1, #4
 80056c6:	d1f9      	bne.n	80056bc <d_print_mod+0x12c>
 80056c8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80056cc:	2bff      	cmp	r3, #255	; 0xff
 80056ce:	f000 821c 	beq.w	8005b0a <d_print_mod+0x57a>
 80056d2:	222a      	movs	r2, #42	; 0x2a
 80056d4:	1c59      	adds	r1, r3, #1
 80056d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056da:	54e2      	strb	r2, [r4, r3]
 80056dc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80056e0:	e7ec      	b.n	80056bc <d_print_mod+0x12c>
 80056e2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80056e6:	29ff      	cmp	r1, #255	; 0xff
 80056e8:	f000 81b9 	beq.w	8005a5e <d_print_mod+0x4ce>
 80056ec:	1c4a      	adds	r2, r1, #1
 80056ee:	2326      	movs	r3, #38	; 0x26
 80056f0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80056f4:	5463      	strb	r3, [r4, r1]
 80056f6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80056fa:	b002      	add	sp, #8
 80056fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005700:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005704:	4da2      	ldr	r5, [pc, #648]	; (8005990 <d_print_mod+0x400>)
 8005706:	f04f 0800 	mov.w	r8, #0
 800570a:	1caf      	adds	r7, r5, #2
 800570c:	e008      	b.n	8005720 <d_print_mod+0x190>
 800570e:	460b      	mov	r3, r1
 8005710:	3101      	adds	r1, #1
 8005712:	42bd      	cmp	r5, r7
 8005714:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005718:	54e6      	strb	r6, [r4, r3]
 800571a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800571e:	d0cd      	beq.n	80056bc <d_print_mod+0x12c>
 8005720:	29ff      	cmp	r1, #255	; 0xff
 8005722:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005726:	d1f2      	bne.n	800570e <d_print_mod+0x17e>
 8005728:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800572c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005730:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005734:	4620      	mov	r0, r4
 8005736:	4798      	blx	r3
 8005738:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800573c:	3301      	adds	r3, #1
 800573e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005742:	2101      	movs	r1, #1
 8005744:	2300      	movs	r3, #0
 8005746:	e7e4      	b.n	8005712 <d_print_mod+0x182>
 8005748:	4d92      	ldr	r5, [pc, #584]	; (8005994 <d_print_mod+0x404>)
 800574a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800574e:	f105 0708 	add.w	r7, r5, #8
 8005752:	f04f 0800 	mov.w	r8, #0
 8005756:	e008      	b.n	800576a <d_print_mod+0x1da>
 8005758:	460b      	mov	r3, r1
 800575a:	3101      	adds	r1, #1
 800575c:	42bd      	cmp	r5, r7
 800575e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005762:	54e6      	strb	r6, [r4, r3]
 8005764:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005768:	d0a8      	beq.n	80056bc <d_print_mod+0x12c>
 800576a:	29ff      	cmp	r1, #255	; 0xff
 800576c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005770:	d1f2      	bne.n	8005758 <d_print_mod+0x1c8>
 8005772:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005776:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800577a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800577e:	4620      	mov	r0, r4
 8005780:	4798      	blx	r3
 8005782:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005786:	3301      	adds	r3, #1
 8005788:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800578c:	2101      	movs	r1, #1
 800578e:	2300      	movs	r3, #0
 8005790:	e7e4      	b.n	800575c <d_print_mod+0x1cc>
 8005792:	4d81      	ldr	r5, [pc, #516]	; (8005998 <d_print_mod+0x408>)
 8005794:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005798:	f105 070a 	add.w	r7, r5, #10
 800579c:	f04f 0800 	mov.w	r8, #0
 80057a0:	e008      	b.n	80057b4 <d_print_mod+0x224>
 80057a2:	460b      	mov	r3, r1
 80057a4:	3101      	adds	r1, #1
 80057a6:	42bd      	cmp	r5, r7
 80057a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057ac:	54e6      	strb	r6, [r4, r3]
 80057ae:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80057b2:	d083      	beq.n	80056bc <d_print_mod+0x12c>
 80057b4:	29ff      	cmp	r1, #255	; 0xff
 80057b6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80057ba:	d1f2      	bne.n	80057a2 <d_print_mod+0x212>
 80057bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057c0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80057c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057c8:	4620      	mov	r0, r4
 80057ca:	4798      	blx	r3
 80057cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057d0:	3301      	adds	r3, #1
 80057d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057d6:	2101      	movs	r1, #1
 80057d8:	2300      	movs	r3, #0
 80057da:	e7e4      	b.n	80057a6 <d_print_mod+0x216>
 80057dc:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 80057e0:	2b28      	cmp	r3, #40	; 0x28
 80057e2:	d00b      	beq.n	80057fc <d_print_mod+0x26c>
 80057e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80057e8:	2bff      	cmp	r3, #255	; 0xff
 80057ea:	f000 8126 	beq.w	8005a3a <d_print_mod+0x4aa>
 80057ee:	2220      	movs	r2, #32
 80057f0:	1c59      	adds	r1, r3, #1
 80057f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057f6:	54e2      	strb	r2, [r4, r3]
 80057f8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80057fc:	686a      	ldr	r2, [r5, #4]
 80057fe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005802:	4d66      	ldr	r5, [pc, #408]	; (800599c <d_print_mod+0x40c>)
 8005804:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005808:	4641      	mov	r1, r8
 800580a:	4620      	mov	r0, r4
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	9200      	str	r2, [sp, #0]
 8005810:	f7fd f90a 	bl	8002a28 <d_print_comp_inner>
 8005814:	9b01      	ldr	r3, [sp, #4]
 8005816:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800581a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800581e:	1cef      	adds	r7, r5, #3
 8005820:	f04f 0800 	mov.w	r8, #0
 8005824:	e009      	b.n	800583a <d_print_mod+0x2aa>
 8005826:	460b      	mov	r3, r1
 8005828:	3101      	adds	r1, #1
 800582a:	42bd      	cmp	r5, r7
 800582c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005830:	54e6      	strb	r6, [r4, r3]
 8005832:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005836:	f43f af41 	beq.w	80056bc <d_print_mod+0x12c>
 800583a:	29ff      	cmp	r1, #255	; 0xff
 800583c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005840:	d1f1      	bne.n	8005826 <d_print_mod+0x296>
 8005842:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005846:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800584a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800584e:	4620      	mov	r0, r4
 8005850:	4798      	blx	r3
 8005852:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005856:	3301      	adds	r3, #1
 8005858:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800585c:	2101      	movs	r1, #1
 800585e:	2300      	movs	r3, #0
 8005860:	e7e3      	b.n	800582a <d_print_mod+0x29a>
 8005862:	4e4f      	ldr	r6, [pc, #316]	; (80059a0 <d_print_mod+0x410>)
 8005864:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005868:	f106 0a0a 	add.w	sl, r6, #10
 800586c:	f04f 0900 	mov.w	r9, #0
 8005870:	e009      	b.n	8005886 <d_print_mod+0x2f6>
 8005872:	460b      	mov	r3, r1
 8005874:	3101      	adds	r1, #1
 8005876:	4556      	cmp	r6, sl
 8005878:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800587c:	54e7      	strb	r7, [r4, r3]
 800587e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8005882:	f000 80c0 	beq.w	8005a06 <d_print_mod+0x476>
 8005886:	29ff      	cmp	r1, #255	; 0xff
 8005888:	f816 7b01 	ldrb.w	r7, [r6], #1
 800588c:	d1f1      	bne.n	8005872 <d_print_mod+0x2e2>
 800588e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005892:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005896:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800589a:	4620      	mov	r0, r4
 800589c:	4798      	blx	r3
 800589e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80058a2:	3301      	adds	r3, #1
 80058a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80058a8:	2101      	movs	r1, #1
 80058aa:	2300      	movs	r3, #0
 80058ac:	e7e3      	b.n	8005876 <d_print_mod+0x2e6>
 80058ae:	4d3d      	ldr	r5, [pc, #244]	; (80059a4 <d_print_mod+0x414>)
 80058b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80058b4:	f105 0709 	add.w	r7, r5, #9
 80058b8:	f04f 0800 	mov.w	r8, #0
 80058bc:	e009      	b.n	80058d2 <d_print_mod+0x342>
 80058be:	460b      	mov	r3, r1
 80058c0:	3101      	adds	r1, #1
 80058c2:	42bd      	cmp	r5, r7
 80058c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058c8:	54e6      	strb	r6, [r4, r3]
 80058ca:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80058ce:	f43f aef5 	beq.w	80056bc <d_print_mod+0x12c>
 80058d2:	29ff      	cmp	r1, #255	; 0xff
 80058d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80058d8:	d1f1      	bne.n	80058be <d_print_mod+0x32e>
 80058da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80058de:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80058e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80058e6:	4620      	mov	r0, r4
 80058e8:	4798      	blx	r3
 80058ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80058ee:	3301      	adds	r3, #1
 80058f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80058f4:	2101      	movs	r1, #1
 80058f6:	2300      	movs	r3, #0
 80058f8:	e7e3      	b.n	80058c2 <d_print_mod+0x332>
 80058fa:	4d2b      	ldr	r5, [pc, #172]	; (80059a8 <d_print_mod+0x418>)
 80058fc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005900:	1daf      	adds	r7, r5, #6
 8005902:	f04f 0800 	mov.w	r8, #0
 8005906:	e009      	b.n	800591c <d_print_mod+0x38c>
 8005908:	460b      	mov	r3, r1
 800590a:	3101      	adds	r1, #1
 800590c:	42bd      	cmp	r5, r7
 800590e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005912:	54e6      	strb	r6, [r4, r3]
 8005914:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005918:	f43f aed0 	beq.w	80056bc <d_print_mod+0x12c>
 800591c:	29ff      	cmp	r1, #255	; 0xff
 800591e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005922:	d1f1      	bne.n	8005908 <d_print_mod+0x378>
 8005924:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005928:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800592c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005930:	4620      	mov	r0, r4
 8005932:	4798      	blx	r3
 8005934:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005938:	3301      	adds	r3, #1
 800593a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800593e:	2101      	movs	r1, #1
 8005940:	2300      	movs	r3, #0
 8005942:	e7e3      	b.n	800590c <d_print_mod+0x37c>
 8005944:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005948:	2bff      	cmp	r3, #255	; 0xff
 800594a:	f000 80cc 	beq.w	8005ae6 <d_print_mod+0x556>
 800594e:	2220      	movs	r2, #32
 8005950:	1c59      	adds	r1, r3, #1
 8005952:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005956:	54e2      	strb	r2, [r4, r3]
 8005958:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800595c:	e6c3      	b.n	80056e6 <d_print_mod+0x156>
 800595e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005962:	2bff      	cmp	r3, #255	; 0xff
 8005964:	f000 80ad 	beq.w	8005ac2 <d_print_mod+0x532>
 8005968:	2220      	movs	r2, #32
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005970:	54e2      	strb	r2, [r4, r3]
 8005972:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005976:	e6c5      	b.n	8005704 <d_print_mod+0x174>
 8005978:	686a      	ldr	r2, [r5, #4]
 800597a:	e692      	b.n	80056a2 <d_print_mod+0x112>
 800597c:	4d0b      	ldr	r5, [pc, #44]	; (80059ac <d_print_mod+0x41c>)
 800597e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005982:	f105 0709 	add.w	r7, r5, #9
 8005986:	f04f 0800 	mov.w	r8, #0
 800598a:	e01b      	b.n	80059c4 <d_print_mod+0x434>
 800598c:	0801a22f 	.word	0x0801a22f
 8005990:	0801a244 	.word	0x0801a244
 8005994:	0801a247 	.word	0x0801a247
 8005998:	0801a254 	.word	0x0801a254
 800599c:	0801a260 	.word	0x0801a260
 80059a0:	0801a264 	.word	0x0801a264
 80059a4:	0801a21b 	.word	0x0801a21b
 80059a8:	0801a228 	.word	0x0801a228
 80059ac:	0801a20f 	.word	0x0801a20f
 80059b0:	460b      	mov	r3, r1
 80059b2:	3101      	adds	r1, #1
 80059b4:	42af      	cmp	r7, r5
 80059b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80059ba:	54e6      	strb	r6, [r4, r3]
 80059bc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80059c0:	f43f ae7c 	beq.w	80056bc <d_print_mod+0x12c>
 80059c4:	29ff      	cmp	r1, #255	; 0xff
 80059c6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80059ca:	d1f1      	bne.n	80059b0 <d_print_mod+0x420>
 80059cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059d0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80059d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059d8:	4620      	mov	r0, r4
 80059da:	4798      	blx	r3
 80059dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059e0:	3301      	adds	r3, #1
 80059e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80059e6:	2101      	movs	r1, #1
 80059e8:	2300      	movs	r3, #0
 80059ea:	e7e3      	b.n	80059b4 <d_print_mod+0x424>
 80059ec:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 80059f0:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 80059f4:	462a      	mov	r2, r5
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	9500      	str	r5, [sp, #0]
 80059fa:	f7fd f815 	bl	8002a28 <d_print_comp_inner>
 80059fe:	9b01      	ldr	r3, [sp, #4]
 8005a00:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005a04:	e65a      	b.n	80056bc <d_print_mod+0x12c>
 8005a06:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005a0a:	686a      	ldr	r2, [r5, #4]
 8005a0c:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005a10:	4641      	mov	r1, r8
 8005a12:	4620      	mov	r0, r4
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	9200      	str	r2, [sp, #0]
 8005a18:	f7fd f806 	bl	8002a28 <d_print_comp_inner>
 8005a1c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005a20:	9b01      	ldr	r3, [sp, #4]
 8005a22:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005a26:	29ff      	cmp	r1, #255	; 0xff
 8005a28:	d03a      	beq.n	8005aa0 <d_print_mod+0x510>
 8005a2a:	1c4a      	adds	r2, r1, #1
 8005a2c:	2329      	movs	r3, #41	; 0x29
 8005a2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005a32:	5463      	strb	r3, [r4, r1]
 8005a34:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005a38:	e640      	b.n	80056bc <d_print_mod+0x12c>
 8005a3a:	2600      	movs	r6, #0
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a42:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a46:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005a4a:	4798      	blx	r3
 8005a4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a50:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005a5a:	4633      	mov	r3, r6
 8005a5c:	e6c7      	b.n	80057ee <d_print_mod+0x25e>
 8005a5e:	2500      	movs	r5, #0
 8005a60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a68:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	4798      	blx	r3
 8005a70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a74:	3301      	adds	r3, #1
 8005a76:	4629      	mov	r1, r5
 8005a78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	e636      	b.n	80056ee <d_print_mod+0x15e>
 8005a80:	2600      	movs	r6, #0
 8005a82:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a86:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a8a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005a8e:	4798      	blx	r3
 8005a90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a94:	3301      	adds	r3, #1
 8005a96:	4631      	mov	r1, r6
 8005a98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	e5f9      	b.n	8005694 <d_print_mod+0x104>
 8005aa0:	2500      	movs	r5, #0
 8005aa2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005aa6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005aaa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4798      	blx	r3
 8005ab2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005abe:	2201      	movs	r2, #1
 8005ac0:	e7b4      	b.n	8005a2c <d_print_mod+0x49c>
 8005ac2:	2500      	movs	r5, #0
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005aca:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005ace:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005ad2:	4798      	blx	r3
 8005ad4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ad8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	e740      	b.n	8005968 <d_print_mod+0x3d8>
 8005ae6:	2500      	movs	r5, #0
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005aee:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005af2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005af6:	4798      	blx	r3
 8005af8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005afc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005b06:	462b      	mov	r3, r5
 8005b08:	e721      	b.n	800594e <d_print_mod+0x3be>
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b10:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b14:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005b18:	4798      	blx	r3
 8005b1a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b1e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005b28:	462b      	mov	r3, r5
 8005b2a:	e5d2      	b.n	80056d2 <d_print_mod+0x142>

08005b2c <d_print_mod_list>:
 8005b2c:	2a00      	cmp	r2, #0
 8005b2e:	f000 80a1 	beq.w	8005c74 <d_print_mod_list+0x148>
 8005b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b36:	461e      	mov	r6, r3
 8005b38:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8005b3c:	b089      	sub	sp, #36	; 0x24
 8005b3e:	4605      	mov	r5, r0
 8005b40:	bb43      	cbnz	r3, 8005b94 <d_print_mod_list+0x68>
 8005b42:	460f      	mov	r7, r1
 8005b44:	4614      	mov	r4, r2
 8005b46:	f04f 0801 	mov.w	r8, #1
 8005b4a:	e002      	b.n	8005b52 <d_print_mod_list+0x26>
 8005b4c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005b50:	bb03      	cbnz	r3, 8005b94 <d_print_mod_list+0x68>
 8005b52:	68a3      	ldr	r3, [r4, #8]
 8005b54:	b9db      	cbnz	r3, 8005b8e <d_print_mod_list+0x62>
 8005b56:	6862      	ldr	r2, [r4, #4]
 8005b58:	7813      	ldrb	r3, [r2, #0]
 8005b5a:	b92e      	cbnz	r6, 8005b68 <d_print_mod_list+0x3c>
 8005b5c:	f1a3 011c 	sub.w	r1, r3, #28
 8005b60:	2904      	cmp	r1, #4
 8005b62:	d914      	bls.n	8005b8e <d_print_mod_list+0x62>
 8005b64:	2b4c      	cmp	r3, #76	; 0x4c
 8005b66:	d012      	beq.n	8005b8e <d_print_mod_list+0x62>
 8005b68:	68e1      	ldr	r1, [r4, #12]
 8005b6a:	f8c4 8008 	str.w	r8, [r4, #8]
 8005b6e:	2b29      	cmp	r3, #41	; 0x29
 8005b70:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8005b74:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8005b78:	d00f      	beq.n	8005b9a <d_print_mod_list+0x6e>
 8005b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b7c:	d018      	beq.n	8005bb0 <d_print_mod_list+0x84>
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d021      	beq.n	8005bc6 <d_print_mod_list+0x9a>
 8005b82:	4639      	mov	r1, r7
 8005b84:	4628      	mov	r0, r5
 8005b86:	f7ff fd03 	bl	8005590 <d_print_mod>
 8005b8a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b8e:	6824      	ldr	r4, [r4, #0]
 8005b90:	2c00      	cmp	r4, #0
 8005b92:	d1db      	bne.n	8005b4c <d_print_mod_list+0x20>
 8005b94:	b009      	add	sp, #36	; 0x24
 8005b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	3208      	adds	r2, #8
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 f9d9 	bl	8005f58 <d_print_function_type.isra.11>
 8005ba6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005baa:	b009      	add	sp, #36	; 0x24
 8005bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	3204      	adds	r2, #4
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 f8f2 	bl	8005da0 <d_print_array_type.isra.10>
 8005bbc:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005bc0:	b009      	add	sp, #36	; 0x24
 8005bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc6:	2600      	movs	r6, #0
 8005bc8:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 8005bcc:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8005bd0:	6852      	ldr	r2, [r2, #4]
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	f7ff fccb 	bl	8005570 <d_print_comp>
 8005bda:	f017 0a04 	ands.w	sl, r7, #4
 8005bde:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 8005be2:	d023      	beq.n	8005c2c <d_print_mod_list+0x100>
 8005be4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005be8:	29ff      	cmp	r1, #255	; 0xff
 8005bea:	f000 80c1 	beq.w	8005d70 <d_print_mod_list+0x244>
 8005bee:	1c4a      	adds	r2, r1, #1
 8005bf0:	232e      	movs	r3, #46	; 0x2e
 8005bf2:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8005bf6:	546b      	strb	r3, [r5, r1]
 8005bf8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8005bfc:	6863      	ldr	r3, [r4, #4]
 8005bfe:	689c      	ldr	r4, [r3, #8]
 8005c00:	7823      	ldrb	r3, [r4, #0]
 8005c02:	2b46      	cmp	r3, #70	; 0x46
 8005c04:	d037      	beq.n	8005c76 <d_print_mod_list+0x14a>
 8005c06:	f1a3 021c 	sub.w	r2, r3, #28
 8005c0a:	2a04      	cmp	r2, #4
 8005c0c:	d90b      	bls.n	8005c26 <d_print_mod_list+0xfa>
 8005c0e:	2b4c      	cmp	r3, #76	; 0x4c
 8005c10:	d009      	beq.n	8005c26 <d_print_mod_list+0xfa>
 8005c12:	4622      	mov	r2, r4
 8005c14:	4639      	mov	r1, r7
 8005c16:	4628      	mov	r0, r5
 8005c18:	f7ff fcaa 	bl	8005570 <d_print_comp>
 8005c1c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005c20:	b009      	add	sp, #36	; 0x24
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	6864      	ldr	r4, [r4, #4]
 8005c28:	7823      	ldrb	r3, [r4, #0]
 8005c2a:	e7ec      	b.n	8005c06 <d_print_mod_list+0xda>
 8005c2c:	4e58      	ldr	r6, [pc, #352]	; (8005d90 <d_print_mod_list+0x264>)
 8005c2e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c32:	f106 0b02 	add.w	fp, r6, #2
 8005c36:	e009      	b.n	8005c4c <d_print_mod_list+0x120>
 8005c38:	460b      	mov	r3, r1
 8005c3a:	3101      	adds	r1, #1
 8005c3c:	455e      	cmp	r6, fp
 8005c3e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c42:	f805 8003 	strb.w	r8, [r5, r3]
 8005c46:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c4a:	d0d7      	beq.n	8005bfc <d_print_mod_list+0xd0>
 8005c4c:	29ff      	cmp	r1, #255	; 0xff
 8005c4e:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c52:	d1f1      	bne.n	8005c38 <d_print_mod_list+0x10c>
 8005c54:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c58:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
 8005c5c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c60:	4628      	mov	r0, r5
 8005c62:	4798      	blx	r3
 8005c64:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005c68:	3301      	adds	r3, #1
 8005c6a:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005c6e:	2101      	movs	r1, #1
 8005c70:	2300      	movs	r3, #0
 8005c72:	e7e3      	b.n	8005c3c <d_print_mod_list+0x110>
 8005c74:	4770      	bx	lr
 8005c76:	4e47      	ldr	r6, [pc, #284]	; (8005d94 <d_print_mod_list+0x268>)
 8005c78:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c7c:	f106 0a0d 	add.w	sl, r6, #13
 8005c80:	f04f 0b00 	mov.w	fp, #0
 8005c84:	e009      	b.n	8005c9a <d_print_mod_list+0x16e>
 8005c86:	460b      	mov	r3, r1
 8005c88:	3101      	adds	r1, #1
 8005c8a:	45b2      	cmp	sl, r6
 8005c8c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c90:	f805 8003 	strb.w	r8, [r5, r3]
 8005c94:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c98:	d013      	beq.n	8005cc2 <d_print_mod_list+0x196>
 8005c9a:	29ff      	cmp	r1, #255	; 0xff
 8005c9c:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005ca0:	d1f1      	bne.n	8005c86 <d_print_mod_list+0x15a>
 8005ca2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005ca6:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005caa:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005cae:	4628      	mov	r0, r5
 8005cb0:	4798      	blx	r3
 8005cb2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e7e3      	b.n	8005c8a <d_print_mod_list+0x15e>
 8005cc2:	68a2      	ldr	r2, [r4, #8]
 8005cc4:	4934      	ldr	r1, [pc, #208]	; (8005d98 <d_print_mod_list+0x26c>)
 8005cc6:	3201      	adds	r2, #1
 8005cc8:	a801      	add	r0, sp, #4
 8005cca:	f010 f8ff 	bl	8015ecc <sprintf>
 8005cce:	a801      	add	r0, sp, #4
 8005cd0:	f000 fe68 	bl	80069a4 <strlen>
 8005cd4:	b328      	cbz	r0, 8005d22 <d_print_mod_list+0x1f6>
 8005cd6:	ae01      	add	r6, sp, #4
 8005cd8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005cdc:	eb06 0a00 	add.w	sl, r6, r0
 8005ce0:	f04f 0b00 	mov.w	fp, #0
 8005ce4:	e009      	b.n	8005cfa <d_print_mod_list+0x1ce>
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	3101      	adds	r1, #1
 8005cea:	45b2      	cmp	sl, r6
 8005cec:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005cf0:	f805 8003 	strb.w	r8, [r5, r3]
 8005cf4:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005cf8:	d015      	beq.n	8005d26 <d_print_mod_list+0x1fa>
 8005cfa:	29ff      	cmp	r1, #255	; 0xff
 8005cfc:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005d00:	d1f1      	bne.n	8005ce6 <d_print_mod_list+0x1ba>
 8005d02:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005d06:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005d0a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005d0e:	4628      	mov	r0, r5
 8005d10:	4798      	blx	r3
 8005d12:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005d16:	3301      	adds	r3, #1
 8005d18:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e7e3      	b.n	8005cea <d_print_mod_list+0x1be>
 8005d22:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005d26:	4e1d      	ldr	r6, [pc, #116]	; (8005d9c <d_print_mod_list+0x270>)
 8005d28:	f04f 0b00 	mov.w	fp, #0
 8005d2c:	f106 0a03 	add.w	sl, r6, #3
 8005d30:	e00a      	b.n	8005d48 <d_print_mod_list+0x21c>
 8005d32:	460b      	mov	r3, r1
 8005d34:	3101      	adds	r1, #1
 8005d36:	45b2      	cmp	sl, r6
 8005d38:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005d3c:	f805 8003 	strb.w	r8, [r5, r3]
 8005d40:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005d44:	f43f af6f 	beq.w	8005c26 <d_print_mod_list+0xfa>
 8005d48:	29ff      	cmp	r1, #255	; 0xff
 8005d4a:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005d4e:	d1f0      	bne.n	8005d32 <d_print_mod_list+0x206>
 8005d50:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005d54:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005d58:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	4798      	blx	r3
 8005d60:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005d64:	3301      	adds	r3, #1
 8005d66:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e7e2      	b.n	8005d36 <d_print_mod_list+0x20a>
 8005d70:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005d74:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005d78:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	4798      	blx	r3
 8005d80:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005d84:	3301      	adds	r3, #1
 8005d86:	4631      	mov	r1, r6
 8005d88:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	e72f      	b.n	8005bf0 <d_print_mod_list+0xc4>
 8005d90:	08019f90 	.word	0x08019f90
 8005d94:	08019f94 	.word	0x08019f94
 8005d98:	08019f40 	.word	0x08019f40
 8005d9c:	08019fa4 	.word	0x08019fa4

08005da0 <d_print_array_type.isra.10>:
 8005da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	4604      	mov	r4, r0
 8005da6:	460f      	mov	r7, r1
 8005da8:	4690      	mov	r8, r2
 8005daa:	b163      	cbz	r3, 8005dc6 <d_print_array_type.isra.10+0x26>
 8005dac:	461e      	mov	r6, r3
 8005dae:	461a      	mov	r2, r3
 8005db0:	6893      	ldr	r3, [r2, #8]
 8005db2:	b393      	cbz	r3, 8005e1a <d_print_array_type.isra.10+0x7a>
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	d1fa      	bne.n	8005db0 <d_print_array_type.isra.10+0x10>
 8005dba:	4613      	mov	r3, r2
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	4632      	mov	r2, r6
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7ff feb3 	bl	8005b2c <d_print_mod_list>
 8005dc6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005dca:	29ff      	cmp	r1, #255	; 0xff
 8005dcc:	f000 808d 	beq.w	8005eea <d_print_array_type.isra.10+0x14a>
 8005dd0:	1c4b      	adds	r3, r1, #1
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	2bff      	cmp	r3, #255	; 0xff
 8005dd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005dda:	5462      	strb	r2, [r4, r1]
 8005ddc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005de0:	d068      	beq.n	8005eb4 <d_print_array_type.isra.10+0x114>
 8005de2:	225b      	movs	r2, #91	; 0x5b
 8005de4:	1c59      	adds	r1, r3, #1
 8005de6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005dea:	54e2      	strb	r2, [r4, r3]
 8005dec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005df0:	f8d8 2000 	ldr.w	r2, [r8]
 8005df4:	b12a      	cbz	r2, 8005e02 <d_print_array_type.isra.10+0x62>
 8005df6:	4639      	mov	r1, r7
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f7ff fbb9 	bl	8005570 <d_print_comp>
 8005dfe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005e02:	29ff      	cmp	r1, #255	; 0xff
 8005e04:	f000 8082 	beq.w	8005f0c <d_print_array_type.isra.10+0x16c>
 8005e08:	1c4a      	adds	r2, r1, #1
 8005e0a:	235d      	movs	r3, #93	; 0x5d
 8005e0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005e10:	5463      	strb	r3, [r4, r1]
 8005e12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005e16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1a:	6852      	ldr	r2, [r2, #4]
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	2a2a      	cmp	r2, #42	; 0x2a
 8005e20:	d03f      	beq.n	8005ea2 <d_print_array_type.isra.10+0x102>
 8005e22:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005f54 <d_print_array_type.isra.10+0x1b4>
 8005e26:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005e2a:	461d      	mov	r5, r3
 8005e2c:	f109 0b02 	add.w	fp, r9, #2
 8005e30:	e00a      	b.n	8005e48 <d_print_array_type.isra.10+0xa8>
 8005e32:	460b      	mov	r3, r1
 8005e34:	45cb      	cmp	fp, r9
 8005e36:	f101 0101 	add.w	r1, r1, #1
 8005e3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e3e:	f804 a003 	strb.w	sl, [r4, r3]
 8005e42:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005e46:	d01a      	beq.n	8005e7e <d_print_array_type.isra.10+0xde>
 8005e48:	29ff      	cmp	r1, #255	; 0xff
 8005e4a:	f819 ab01 	ldrb.w	sl, [r9], #1
 8005e4e:	d1f0      	bne.n	8005e32 <d_print_array_type.isra.10+0x92>
 8005e50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e54:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	4798      	blx	r3
 8005e60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e64:	3301      	adds	r3, #1
 8005e66:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	45cb      	cmp	fp, r9
 8005e70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e74:	f804 a003 	strb.w	sl, [r4, r3]
 8005e78:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005e7c:	d1e4      	bne.n	8005e48 <d_print_array_type.isra.10+0xa8>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	4632      	mov	r2, r6
 8005e82:	4639      	mov	r1, r7
 8005e84:	4620      	mov	r0, r4
 8005e86:	f7ff fe51 	bl	8005b2c <d_print_mod_list>
 8005e8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005e8e:	2bff      	cmp	r3, #255	; 0xff
 8005e90:	d04d      	beq.n	8005f2e <d_print_array_type.isra.10+0x18e>
 8005e92:	1c59      	adds	r1, r3, #1
 8005e94:	2229      	movs	r2, #41	; 0x29
 8005e96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e9a:	54e2      	strb	r2, [r4, r3]
 8005e9c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005ea0:	e793      	b.n	8005dca <d_print_array_type.isra.10+0x2a>
 8005ea2:	4632      	mov	r2, r6
 8005ea4:	4639      	mov	r1, r7
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f7ff fe40 	bl	8005b2c <d_print_mod_list>
 8005eac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005eb0:	2bff      	cmp	r3, #255	; 0xff
 8005eb2:	d196      	bne.n	8005de2 <d_print_array_type.isra.10+0x42>
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8005ebc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ec0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4798      	blx	r3
 8005ec8:	235b      	movs	r3, #91	; 0x5b
 8005eca:	7023      	strb	r3, [r4, #0]
 8005ecc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005ed0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ed4:	f8d8 2000 	ldr.w	r2, [r8]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	2101      	movs	r1, #1
 8005edc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005ee0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	d186      	bne.n	8005df6 <d_print_array_type.isra.10+0x56>
 8005ee8:	e78e      	b.n	8005e08 <d_print_array_type.isra.10+0x68>
 8005eea:	2500      	movs	r5, #0
 8005eec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ef0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ef4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ef8:	4620      	mov	r0, r4
 8005efa:	4798      	blx	r3
 8005efc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005f00:	3301      	adds	r3, #1
 8005f02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005f06:	4629      	mov	r1, r5
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e762      	b.n	8005dd2 <d_print_array_type.isra.10+0x32>
 8005f0c:	2500      	movs	r5, #0
 8005f0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f16:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	4798      	blx	r3
 8005f1e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005f22:	3301      	adds	r3, #1
 8005f24:	4629      	mov	r1, r5
 8005f26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	e76d      	b.n	8005e0a <d_print_array_type.isra.10+0x6a>
 8005f2e:	2500      	movs	r5, #0
 8005f30:	4619      	mov	r1, r3
 8005f32:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f3a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005f3e:	4620      	mov	r0, r4
 8005f40:	4798      	blx	r3
 8005f42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	2101      	movs	r1, #1
 8005f50:	e7a0      	b.n	8005e94 <d_print_array_type.isra.10+0xf4>
 8005f52:	bf00      	nop
 8005f54:	0801a188 	.word	0x0801a188

08005f58 <d_print_function_type.isra.11>:
 8005f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	b083      	sub	sp, #12
 8005f60:	460e      	mov	r6, r1
 8005f62:	4617      	mov	r7, r2
 8005f64:	461d      	mov	r5, r3
 8005f66:	b34b      	cbz	r3, 8005fbc <d_print_function_type.isra.11+0x64>
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	bb3b      	cbnz	r3, 8005fbc <d_print_function_type.isra.11+0x64>
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	2001      	movs	r0, #1
 8005f70:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 800613c <d_print_function_type.isra.11+0x1e4>
 8005f74:	e006      	b.n	8005f84 <d_print_function_type.isra.11+0x2c>
 8005f76:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f7a:	d15a      	bne.n	8006032 <d_print_function_type.isra.11+0xda>
 8005f7c:	6812      	ldr	r2, [r2, #0]
 8005f7e:	b1ea      	cbz	r2, 8005fbc <d_print_function_type.isra.11+0x64>
 8005f80:	6893      	ldr	r3, [r2, #8]
 8005f82:	b9db      	cbnz	r3, 8005fbc <d_print_function_type.isra.11+0x64>
 8005f84:	6853      	ldr	r3, [r2, #4]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	3b19      	subs	r3, #25
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b12      	cmp	r3, #18
 8005f8e:	fa00 f103 	lsl.w	r1, r0, r3
 8005f92:	d8f3      	bhi.n	8005f7c <d_print_function_type.isra.11+0x24>
 8005f94:	ea11 0f0e 	tst.w	r1, lr
 8005f98:	d0ed      	beq.n	8005f76 <d_print_function_type.isra.11+0x1e>
 8005f9a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d04d      	beq.n	800603e <d_print_function_type.isra.11+0xe6>
 8005fa2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005fa6:	2bff      	cmp	r3, #255	; 0xff
 8005fa8:	f000 80b4 	beq.w	8006114 <d_print_function_type.isra.11+0x1bc>
 8005fac:	1c59      	adds	r1, r3, #1
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005fb4:	54e2      	strb	r2, [r4, r3]
 8005fb6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005fba:	e042      	b.n	8006042 <d_print_function_type.isra.11+0xea>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005fc2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	462a      	mov	r2, r5
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f7ff fdae 	bl	8005b2c <d_print_mod_list>
 8005fd0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fd4:	29ff      	cmp	r1, #255	; 0xff
 8005fd6:	d056      	beq.n	8006086 <d_print_function_type.isra.11+0x12e>
 8005fd8:	1c4b      	adds	r3, r1, #1
 8005fda:	2228      	movs	r2, #40	; 0x28
 8005fdc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005fe0:	5462      	strb	r2, [r4, r1]
 8005fe2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005fe6:	6838      	ldr	r0, [r7, #0]
 8005fe8:	b178      	cbz	r0, 800600a <d_print_function_type.isra.11+0xb2>
 8005fea:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005fee:	9000      	str	r0, [sp, #0]
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	f7fc fd14 	bl	8002a28 <d_print_comp_inner>
 8006000:	9a01      	ldr	r2, [sp, #4]
 8006002:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006006:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800600a:	2bff      	cmp	r3, #255	; 0xff
 800600c:	d04d      	beq.n	80060aa <d_print_function_type.isra.11+0x152>
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	2029      	movs	r0, #41	; 0x29
 8006012:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006016:	4631      	mov	r1, r6
 8006018:	54e0      	strb	r0, [r4, r3]
 800601a:	462a      	mov	r2, r5
 800601c:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8006020:	2301      	movs	r3, #1
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff fd82 	bl	8005b2c <d_print_mod_list>
 8006028:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 800602c:	b003      	add	sp, #12
 800602e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006032:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006036:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800603a:	2a28      	cmp	r2, #40	; 0x28
 800603c:	d1af      	bne.n	8005f9e <d_print_function_type.isra.11+0x46>
 800603e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006042:	29ff      	cmp	r1, #255	; 0xff
 8006044:	d054      	beq.n	80060f0 <d_print_function_type.isra.11+0x198>
 8006046:	1c4a      	adds	r2, r1, #1
 8006048:	2328      	movs	r3, #40	; 0x28
 800604a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800604e:	5463      	strb	r3, [r4, r1]
 8006050:	f04f 0900 	mov.w	r9, #0
 8006054:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006058:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800605c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006060:	464b      	mov	r3, r9
 8006062:	462a      	mov	r2, r5
 8006064:	4631      	mov	r1, r6
 8006066:	4620      	mov	r0, r4
 8006068:	f7ff fd60 	bl	8005b2c <d_print_mod_list>
 800606c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006070:	2bff      	cmp	r3, #255	; 0xff
 8006072:	d02c      	beq.n	80060ce <d_print_function_type.isra.11+0x176>
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	2229      	movs	r2, #41	; 0x29
 8006078:	29ff      	cmp	r1, #255	; 0xff
 800607a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800607e:	54e2      	strb	r2, [r4, r3]
 8006080:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006084:	d1a8      	bne.n	8005fd8 <d_print_function_type.isra.11+0x80>
 8006086:	f04f 0900 	mov.w	r9, #0
 800608a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800608e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006092:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006096:	4620      	mov	r0, r4
 8006098:	4798      	blx	r3
 800609a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800609e:	3301      	adds	r3, #1
 80060a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060a4:	4649      	mov	r1, r9
 80060a6:	2301      	movs	r3, #1
 80060a8:	e797      	b.n	8005fda <d_print_function_type.isra.11+0x82>
 80060aa:	2700      	movs	r7, #0
 80060ac:	4619      	mov	r1, r3
 80060ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060b6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80060ba:	4620      	mov	r0, r4
 80060bc:	4798      	blx	r3
 80060be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80060c8:	463b      	mov	r3, r7
 80060ca:	2201      	movs	r2, #1
 80060cc:	e7a0      	b.n	8006010 <d_print_function_type.isra.11+0xb8>
 80060ce:	4619      	mov	r1, r3
 80060d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80060dc:	4620      	mov	r0, r4
 80060de:	4798      	blx	r3
 80060e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80060ea:	464b      	mov	r3, r9
 80060ec:	2101      	movs	r1, #1
 80060ee:	e7c2      	b.n	8006076 <d_print_function_type.isra.11+0x11e>
 80060f0:	f04f 0800 	mov.w	r8, #0
 80060f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006100:	4620      	mov	r0, r4
 8006102:	4798      	blx	r3
 8006104:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006108:	3301      	adds	r3, #1
 800610a:	4641      	mov	r1, r8
 800610c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006110:	2201      	movs	r2, #1
 8006112:	e799      	b.n	8006048 <d_print_function_type.isra.11+0xf0>
 8006114:	f04f 0800 	mov.w	r8, #0
 8006118:	4619      	mov	r1, r3
 800611a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800611e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006122:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006126:	4620      	mov	r0, r4
 8006128:	4798      	blx	r3
 800612a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006134:	4643      	mov	r3, r8
 8006136:	2101      	movs	r1, #1
 8006138:	e739      	b.n	8005fae <d_print_function_type.isra.11+0x56>
 800613a:	bf00      	nop
 800613c:	00043107 	.word	0x00043107

08006140 <d_print_expr_op>:
 8006140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006144:	7815      	ldrb	r5, [r2, #0]
 8006146:	2d31      	cmp	r5, #49	; 0x31
 8006148:	b082      	sub	sp, #8
 800614a:	4613      	mov	r3, r2
 800614c:	4604      	mov	r4, r0
 800614e:	d00d      	beq.n	800616c <d_print_expr_op+0x2c>
 8006150:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
 8006154:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 8006158:	e88d 0028 	stmia.w	sp, {r3, r5}
 800615c:	f7fc fc64 	bl	8002a28 <d_print_comp_inner>
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006166:	b002      	add	sp, #8
 8006168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800616c:	6853      	ldr	r3, [r2, #4]
 800616e:	689f      	ldr	r7, [r3, #8]
 8006170:	685d      	ldr	r5, [r3, #4]
 8006172:	2f00      	cmp	r7, #0
 8006174:	d0f7      	beq.n	8006166 <d_print_expr_op+0x26>
 8006176:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800617a:	442f      	add	r7, r5
 800617c:	f04f 0800 	mov.w	r8, #0
 8006180:	e008      	b.n	8006194 <d_print_expr_op+0x54>
 8006182:	460b      	mov	r3, r1
 8006184:	3101      	adds	r1, #1
 8006186:	42bd      	cmp	r5, r7
 8006188:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800618c:	54e6      	strb	r6, [r4, r3]
 800618e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006192:	d0e8      	beq.n	8006166 <d_print_expr_op+0x26>
 8006194:	29ff      	cmp	r1, #255	; 0xff
 8006196:	f815 6b01 	ldrb.w	r6, [r5], #1
 800619a:	d1f2      	bne.n	8006182 <d_print_expr_op+0x42>
 800619c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80061a0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80061a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80061a8:	4620      	mov	r0, r4
 80061aa:	4798      	blx	r3
 80061ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80061b0:	3301      	adds	r3, #1
 80061b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80061b6:	2101      	movs	r1, #1
 80061b8:	2300      	movs	r3, #0
 80061ba:	e7e4      	b.n	8006186 <d_print_expr_op+0x46>

080061bc <d_print_subexpr>:
 80061bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061be:	7813      	ldrb	r3, [r2, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	b083      	sub	sp, #12
 80061c4:	4615      	mov	r5, r2
 80061c6:	460e      	mov	r6, r1
 80061c8:	4604      	mov	r4, r0
 80061ca:	d929      	bls.n	8006220 <d_print_subexpr+0x64>
 80061cc:	2b30      	cmp	r3, #48	; 0x30
 80061ce:	d027      	beq.n	8006220 <d_print_subexpr+0x64>
 80061d0:	2b06      	cmp	r3, #6
 80061d2:	d025      	beq.n	8006220 <d_print_subexpr+0x64>
 80061d4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80061d8:	29ff      	cmp	r1, #255	; 0xff
 80061da:	d031      	beq.n	8006240 <d_print_subexpr+0x84>
 80061dc:	1c4a      	adds	r2, r1, #1
 80061de:	2328      	movs	r3, #40	; 0x28
 80061e0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80061e4:	5463      	strb	r3, [r4, r1]
 80061e6:	462a      	mov	r2, r5
 80061e8:	4631      	mov	r1, r6
 80061ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80061ee:	4620      	mov	r0, r4
 80061f0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80061f4:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	9500      	str	r5, [sp, #0]
 80061fc:	f7fc fc14 	bl	8002a28 <d_print_comp_inner>
 8006200:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006204:	9b01      	ldr	r3, [sp, #4]
 8006206:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800620a:	29ff      	cmp	r1, #255	; 0xff
 800620c:	d028      	beq.n	8006260 <d_print_subexpr+0xa4>
 800620e:	1c4a      	adds	r2, r1, #1
 8006210:	2329      	movs	r3, #41	; 0x29
 8006212:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006216:	5463      	strb	r3, [r4, r1]
 8006218:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800621c:	b003      	add	sp, #12
 800621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006220:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006224:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8006228:	4631      	mov	r1, r6
 800622a:	462a      	mov	r2, r5
 800622c:	4620      	mov	r0, r4
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	9500      	str	r5, [sp, #0]
 8006232:	f7fc fbf9 	bl	8002a28 <d_print_comp_inner>
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800623c:	b003      	add	sp, #12
 800623e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006240:	2700      	movs	r7, #0
 8006242:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006246:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800624a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800624e:	4798      	blx	r3
 8006250:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006254:	3301      	adds	r3, #1
 8006256:	4639      	mov	r1, r7
 8006258:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800625c:	2201      	movs	r2, #1
 800625e:	e7be      	b.n	80061de <d_print_subexpr+0x22>
 8006260:	2500      	movs	r5, #0
 8006262:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006266:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800626a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800626e:	4620      	mov	r0, r4
 8006270:	4798      	blx	r3
 8006272:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006276:	3301      	adds	r3, #1
 8006278:	4629      	mov	r1, r5
 800627a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800627e:	2201      	movs	r2, #1
 8006280:	e7c6      	b.n	8006210 <d_print_subexpr+0x54>
 8006282:	bf00      	nop

08006284 <d_maybe_print_fold_expression.isra.15>:
 8006284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	6852      	ldr	r2, [r2, #4]
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	7815      	ldrb	r5, [r2, #0]
 800628e:	2d66      	cmp	r5, #102	; 0x66
 8006290:	d002      	beq.n	8006298 <d_maybe_print_fold_expression.isra.15+0x14>
 8006292:	2000      	movs	r0, #0
 8006294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800629e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80062a2:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80062a6:	f899 3000 	ldrb.w	r3, [r9]
 80062aa:	2b3b      	cmp	r3, #59	; 0x3b
 80062ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b0:	bf04      	itt	eq
 80062b2:	f8d9 5008 	ldreq.w	r5, [r9, #8]
 80062b6:	f8d9 9004 	ldreq.w	r9, [r9, #4]
 80062ba:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 80062be:	7853      	ldrb	r3, [r2, #1]
 80062c0:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
 80062c4:	bf18      	it	ne
 80062c6:	2500      	movne	r5, #0
 80062c8:	460e      	mov	r6, r1
 80062ca:	4604      	mov	r4, r0
 80062cc:	2b26      	cmp	r3, #38	; 0x26
 80062ce:	d82b      	bhi.n	8006328 <d_maybe_print_fold_expression.isra.15+0xa4>
 80062d0:	e8df f003 	tbb	[pc, r3]
 80062d4:	2a2a2a90 	.word	0x2a2a2a90
 80062d8:	2a902a2a 	.word	0x2a902a2a
 80062dc:	2a2a2a2a 	.word	0x2a2a2a2a
 80062e0:	2a2a2a2a 	.word	0x2a2a2a2a
 80062e4:	2a2a2a2a 	.word	0x2a2a2a2a
 80062e8:	2a2a2a2a 	.word	0x2a2a2a2a
 80062ec:	2a2a2a2a 	.word	0x2a2a2a2a
 80062f0:	2a2a2a2a 	.word	0x2a2a2a2a
 80062f4:	2a2a2a6a 	.word	0x2a2a2a6a
 80062f8:	2a2a      	.short	0x2a2a
 80062fa:	2f          	.byte	0x2f
 80062fb:	00          	.byte	0x00
 80062fc:	4642      	mov	r2, r8
 80062fe:	4631      	mov	r1, r6
 8006300:	4620      	mov	r0, r4
 8006302:	f7ff ff1d 	bl	8006140 <d_print_expr_op>
 8006306:	464a      	mov	r2, r9
 8006308:	4631      	mov	r1, r6
 800630a:	4620      	mov	r0, r4
 800630c:	f7ff ff56 	bl	80061bc <d_print_subexpr>
 8006310:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006314:	29ff      	cmp	r1, #255	; 0xff
 8006316:	f000 80b2 	beq.w	800647e <d_maybe_print_fold_expression.isra.15+0x1fa>
 800631a:	1c4a      	adds	r2, r1, #1
 800631c:	2329      	movs	r3, #41	; 0x29
 800631e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006322:	5463      	strb	r3, [r4, r1]
 8006324:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006328:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 800632c:	2001      	movs	r0, #1
 800632e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006332:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006336:	29ff      	cmp	r1, #255	; 0xff
 8006338:	f000 80c5 	beq.w	80064c6 <d_maybe_print_fold_expression.isra.15+0x242>
 800633c:	1c4a      	adds	r2, r1, #1
 800633e:	2328      	movs	r3, #40	; 0x28
 8006340:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006344:	4620      	mov	r0, r4
 8006346:	5463      	strb	r3, [r4, r1]
 8006348:	464a      	mov	r2, r9
 800634a:	4631      	mov	r1, r6
 800634c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006350:	4d65      	ldr	r5, [pc, #404]	; (80064e8 <d_maybe_print_fold_expression.isra.15+0x264>)
 8006352:	f7ff ff33 	bl	80061bc <d_print_subexpr>
 8006356:	4642      	mov	r2, r8
 8006358:	4631      	mov	r1, r6
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff fef0 	bl	8006140 <d_print_expr_op>
 8006360:	f105 0904 	add.w	r9, r5, #4
 8006364:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006368:	f04f 0800 	mov.w	r8, #0
 800636c:	e008      	b.n	8006380 <d_maybe_print_fold_expression.isra.15+0xfc>
 800636e:	460b      	mov	r3, r1
 8006370:	3101      	adds	r1, #1
 8006372:	45a9      	cmp	r9, r5
 8006374:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006378:	54e6      	strb	r6, [r4, r3]
 800637a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800637e:	d0d3      	beq.n	8006328 <d_maybe_print_fold_expression.isra.15+0xa4>
 8006380:	29ff      	cmp	r1, #255	; 0xff
 8006382:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006386:	d1f2      	bne.n	800636e <d_maybe_print_fold_expression.isra.15+0xea>
 8006388:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800638c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006390:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006394:	4620      	mov	r0, r4
 8006396:	4798      	blx	r3
 8006398:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800639c:	3301      	adds	r3, #1
 800639e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063a2:	2101      	movs	r1, #1
 80063a4:	2300      	movs	r3, #0
 80063a6:	e7e4      	b.n	8006372 <d_maybe_print_fold_expression.isra.15+0xee>
 80063a8:	4d50      	ldr	r5, [pc, #320]	; (80064ec <d_maybe_print_fold_expression.isra.15+0x268>)
 80063aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80063ae:	f105 0b04 	add.w	fp, r5, #4
 80063b2:	e009      	b.n	80063c8 <d_maybe_print_fold_expression.isra.15+0x144>
 80063b4:	460b      	mov	r3, r1
 80063b6:	3101      	adds	r1, #1
 80063b8:	455d      	cmp	r5, fp
 80063ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063be:	f804 a003 	strb.w	sl, [r4, r3]
 80063c2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80063c6:	d099      	beq.n	80062fc <d_maybe_print_fold_expression.isra.15+0x78>
 80063c8:	29ff      	cmp	r1, #255	; 0xff
 80063ca:	f815 ab01 	ldrb.w	sl, [r5], #1
 80063ce:	d1f1      	bne.n	80063b4 <d_maybe_print_fold_expression.isra.15+0x130>
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063e0:	4620      	mov	r0, r4
 80063e2:	4798      	blx	r3
 80063e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063e8:	3301      	adds	r3, #1
 80063ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063ee:	2101      	movs	r1, #1
 80063f0:	2300      	movs	r3, #0
 80063f2:	e7e1      	b.n	80063b8 <d_maybe_print_fold_expression.isra.15+0x134>
 80063f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80063f8:	2bff      	cmp	r3, #255	; 0xff
 80063fa:	d051      	beq.n	80064a0 <d_maybe_print_fold_expression.isra.15+0x21c>
 80063fc:	1c59      	adds	r1, r3, #1
 80063fe:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8006402:	464a      	mov	r2, r9
 8006404:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006408:	4620      	mov	r0, r4
 800640a:	f804 e003 	strb.w	lr, [r4, r3]
 800640e:	4631      	mov	r1, r6
 8006410:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
 8006414:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80064f0 <d_maybe_print_fold_expression.isra.15+0x26c>
 8006418:	f7ff fed0 	bl	80061bc <d_print_subexpr>
 800641c:	4631      	mov	r1, r6
 800641e:	4642      	mov	r2, r8
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff fe8d 	bl	8006140 <d_print_expr_op>
 8006426:	f109 0b03 	add.w	fp, r9, #3
 800642a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800642e:	e009      	b.n	8006444 <d_maybe_print_fold_expression.isra.15+0x1c0>
 8006430:	460b      	mov	r3, r1
 8006432:	3101      	adds	r1, #1
 8006434:	45cb      	cmp	fp, r9
 8006436:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800643a:	f804 a003 	strb.w	sl, [r4, r3]
 800643e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8006442:	d015      	beq.n	8006470 <d_maybe_print_fold_expression.isra.15+0x1ec>
 8006444:	29ff      	cmp	r1, #255	; 0xff
 8006446:	f819 ab01 	ldrb.w	sl, [r9], #1
 800644a:	d1f1      	bne.n	8006430 <d_maybe_print_fold_expression.isra.15+0x1ac>
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006454:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006458:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800645c:	4620      	mov	r0, r4
 800645e:	4798      	blx	r3
 8006460:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006464:	3301      	adds	r3, #1
 8006466:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800646a:	2101      	movs	r1, #1
 800646c:	2300      	movs	r3, #0
 800646e:	e7e1      	b.n	8006434 <d_maybe_print_fold_expression.isra.15+0x1b0>
 8006470:	4642      	mov	r2, r8
 8006472:	4631      	mov	r1, r6
 8006474:	4620      	mov	r0, r4
 8006476:	f7ff fe63 	bl	8006140 <d_print_expr_op>
 800647a:	462a      	mov	r2, r5
 800647c:	e744      	b.n	8006308 <d_maybe_print_fold_expression.isra.15+0x84>
 800647e:	2500      	movs	r5, #0
 8006480:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006484:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006488:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800648c:	4620      	mov	r0, r4
 800648e:	4798      	blx	r3
 8006490:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006494:	3301      	adds	r3, #1
 8006496:	4629      	mov	r1, r5
 8006498:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800649c:	2201      	movs	r2, #1
 800649e:	e73d      	b.n	800631c <d_maybe_print_fold_expression.isra.15+0x98>
 80064a0:	f04f 0a00 	mov.w	sl, #0
 80064a4:	4619      	mov	r1, r3
 80064a6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80064aa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80064ae:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
 80064b2:	4798      	blx	r3
 80064b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064b8:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80064c2:	4653      	mov	r3, sl
 80064c4:	e79a      	b.n	80063fc <d_maybe_print_fold_expression.isra.15+0x178>
 80064c6:	2500      	movs	r5, #0
 80064c8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80064cc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80064d0:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80064d4:	4798      	blx	r3
 80064d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064da:	3301      	adds	r3, #1
 80064dc:	4629      	mov	r1, r5
 80064de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064e2:	2201      	movs	r2, #1
 80064e4:	e72b      	b.n	800633e <d_maybe_print_fold_expression.isra.15+0xba>
 80064e6:	bf00      	nop
 80064e8:	0801a278 	.word	0x0801a278
 80064ec:	0801a270 	.word	0x0801a270
 80064f0:	0801a18c 	.word	0x0801a18c

080064f4 <d_demangle_callback.constprop.17>:
 80064f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f8:	b0e7      	sub	sp, #412	; 0x19c
 80064fa:	f890 9000 	ldrb.w	r9, [r0]
 80064fe:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 8006502:	af00      	add	r7, sp, #0
 8006504:	4605      	mov	r5, r0
 8006506:	4688      	mov	r8, r1
 8006508:	4616      	mov	r6, r2
 800650a:	f000 80f1 	beq.w	80066f0 <d_demangle_callback.constprop.17+0x1fc>
 800650e:	2208      	movs	r2, #8
 8006510:	49bd      	ldr	r1, [pc, #756]	; (8006808 <d_demangle_callback.constprop.17+0x314>)
 8006512:	4628      	mov	r0, r5
 8006514:	f00f fcfe 	bl	8015f14 <strncmp>
 8006518:	b948      	cbnz	r0, 800652e <d_demangle_callback.constprop.17+0x3a>
 800651a:	7a2b      	ldrb	r3, [r5, #8]
 800651c:	2b2e      	cmp	r3, #46	; 0x2e
 800651e:	f000 80d6 	beq.w	80066ce <d_demangle_callback.constprop.17+0x1da>
 8006522:	2b5f      	cmp	r3, #95	; 0x5f
 8006524:	f000 80d3 	beq.w	80066ce <d_demangle_callback.constprop.17+0x1da>
 8006528:	2b24      	cmp	r3, #36	; 0x24
 800652a:	f000 80d0 	beq.w	80066ce <d_demangle_callback.constprop.17+0x1da>
 800652e:	f04f 0a00 	mov.w	sl, #0
 8006532:	4628      	mov	r0, r5
 8006534:	f000 fa36 	bl	80069a4 <strlen>
 8006538:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 800653c:	0083      	lsls	r3, r0, #2
 800653e:	eb03 020b 	add.w	r2, r3, fp
 8006542:	0092      	lsls	r2, r2, #2
 8006544:	3208      	adds	r2, #8
 8006546:	330a      	adds	r3, #10
 8006548:	ebad 0d02 	sub.w	sp, sp, r2
 800654c:	f023 0307 	bic.w	r3, r3, #7
 8006550:	2400      	movs	r4, #0
 8006552:	466a      	mov	r2, sp
 8006554:	1829      	adds	r1, r5, r0
 8006556:	ebad 0d03 	sub.w	sp, sp, r3
 800655a:	f1ba 0f01 	cmp.w	sl, #1
 800655e:	f04f 0311 	mov.w	r3, #17
 8006562:	627a      	str	r2, [r7, #36]	; 0x24
 8006564:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
 8006568:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800656c:	617d      	str	r5, [r7, #20]
 800656e:	623d      	str	r5, [r7, #32]
 8006570:	63b8      	str	r0, [r7, #56]	; 0x38
 8006572:	61b9      	str	r1, [r7, #24]
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	62bc      	str	r4, [r7, #40]	; 0x28
 8006578:	637c      	str	r4, [r7, #52]	; 0x34
 800657a:	63fc      	str	r4, [r7, #60]	; 0x3c
 800657c:	643c      	str	r4, [r7, #64]	; 0x40
 800657e:	647c      	str	r4, [r7, #68]	; 0x44
 8006580:	64bc      	str	r4, [r7, #72]	; 0x48
 8006582:	64fc      	str	r4, [r7, #76]	; 0x4c
 8006584:	f000 80bb 	beq.w	80066fe <d_demangle_callback.constprop.17+0x20a>
 8006588:	f0c0 80cf 	bcc.w	800672a <d_demangle_callback.constprop.17+0x236>
 800658c:	7aeb      	ldrb	r3, [r5, #11]
 800658e:	f1ba 0f02 	cmp.w	sl, #2
 8006592:	bf18      	it	ne
 8006594:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006598:	f105 0a0b 	add.w	sl, r5, #11
 800659c:	bf08      	it	eq
 800659e:	f04f 0943 	moveq.w	r9, #67	; 0x43
 80065a2:	2b5f      	cmp	r3, #95	; 0x5f
 80065a4:	f8c7 a020 	str.w	sl, [r7, #32]
 80065a8:	f000 80b2 	beq.w	8006710 <d_demangle_callback.constprop.17+0x21c>
 80065ac:	4650      	mov	r0, sl
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	f000 f9f8 	bl	80069a4 <strlen>
 80065b4:	f1bb 0f00 	cmp.w	fp, #0
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	f340 80bf 	ble.w	800673c <d_demangle_callback.constprop.17+0x248>
 80065be:	2301      	movs	r3, #1
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f000 80ba 	beq.w	800673c <d_demangle_callback.constprop.17+0x248>
 80065c8:	2300      	movs	r3, #0
 80065ca:	f8c2 a004 	str.w	sl, [r2, #4]
 80065ce:	6090      	str	r0, [r2, #8]
 80065d0:	7013      	strb	r3, [r2, #0]
 80065d2:	4649      	mov	r1, r9
 80065d4:	2300      	movs	r3, #0
 80065d6:	f107 0014 	add.w	r0, r7, #20
 80065da:	f7f9 fe31 	bl	8000240 <d_make_comp>
 80065de:	6a3c      	ldr	r4, [r7, #32]
 80065e0:	4605      	mov	r5, r0
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 f9de 	bl	80069a4 <strlen>
 80065e8:	1823      	adds	r3, r4, r0
 80065ea:	623b      	str	r3, [r7, #32]
 80065ec:	f814 9000 	ldrb.w	r9, [r4, r0]
 80065f0:	f1b9 0f00 	cmp.w	r9, #0
 80065f4:	f040 8086 	bne.w	8006704 <d_demangle_callback.constprop.17+0x210>
 80065f8:	2d00      	cmp	r5, #0
 80065fa:	f000 8083 	beq.w	8006704 <d_demangle_callback.constprop.17+0x210>
 80065fe:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006602:	462a      	mov	r2, r5
 8006604:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8006608:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800660c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 8006610:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 8006614:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8006618:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800661c:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 8006620:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006624:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 8006628:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 800662c:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 8006630:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 8006634:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8006638:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 800663c:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 8006640:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8006644:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8006648:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 800664c:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8006650:	f7f9 fec4 	bl	80003dc <d_count_templates_scopes>
 8006654:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 8006658:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 800665c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	00d0      	lsls	r0, r2, #3
 8006664:	fb01 f102 	mul.w	r1, r1, r2
 8006668:	3008      	adds	r0, #8
 800666a:	46e8      	mov	r8, sp
 800666c:	00ca      	lsls	r2, r1, #3
 800666e:	ebad 0d00 	sub.w	sp, sp, r0
 8006672:	4668      	mov	r0, sp
 8006674:	3208      	adds	r2, #8
 8006676:	ebad 0d02 	sub.w	sp, sp, r2
 800667a:	f107 060c 	add.w	r6, r7, #12
 800667e:	462a      	mov	r2, r5
 8006680:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8006684:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 8006688:	4620      	mov	r0, r4
 800668a:	2111      	movs	r1, #17
 800668c:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006690:	60fd      	str	r5, [r7, #12]
 8006692:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006696:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 800669a:	f7fc f9c5 	bl	8002a28 <d_print_comp_inner>
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80066a4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80066a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80066ac:	f804 9001 	strb.w	r9, [r4, r1]
 80066b0:	4620      	mov	r0, r4
 80066b2:	46c5      	mov	sp, r8
 80066b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80066b8:	4798      	blx	r3
 80066ba:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 80066be:	fab0 f080 	clz	r0, r0
 80066c2:	0940      	lsrs	r0, r0, #5
 80066c4:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 80066c8:	46bd      	mov	sp, r7
 80066ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ce:	7a6b      	ldrb	r3, [r5, #9]
 80066d0:	2b44      	cmp	r3, #68	; 0x44
 80066d2:	d002      	beq.n	80066da <d_demangle_callback.constprop.17+0x1e6>
 80066d4:	2b49      	cmp	r3, #73	; 0x49
 80066d6:	f47f af2a 	bne.w	800652e <d_demangle_callback.constprop.17+0x3a>
 80066da:	7aaa      	ldrb	r2, [r5, #10]
 80066dc:	2a5f      	cmp	r2, #95	; 0x5f
 80066de:	f47f af26 	bne.w	800652e <d_demangle_callback.constprop.17+0x3a>
 80066e2:	2b49      	cmp	r3, #73	; 0x49
 80066e4:	bf14      	ite	ne
 80066e6:	f04f 0a03 	movne.w	sl, #3
 80066ea:	f04f 0a02 	moveq.w	sl, #2
 80066ee:	e720      	b.n	8006532 <d_demangle_callback.constprop.17+0x3e>
 80066f0:	7843      	ldrb	r3, [r0, #1]
 80066f2:	2b5a      	cmp	r3, #90	; 0x5a
 80066f4:	f47f af0b 	bne.w	800650e <d_demangle_callback.constprop.17+0x1a>
 80066f8:	f04f 0a01 	mov.w	sl, #1
 80066fc:	e719      	b.n	8006532 <d_demangle_callback.constprop.17+0x3e>
 80066fe:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 8006702:	d01d      	beq.n	8006740 <d_demangle_callback.constprop.17+0x24c>
 8006704:	2000      	movs	r0, #0
 8006706:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 800670a:	46bd      	mov	sp, r7
 800670c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006710:	7b2b      	ldrb	r3, [r5, #12]
 8006712:	2b5a      	cmp	r3, #90	; 0x5a
 8006714:	f47f af4a 	bne.w	80065ac <d_demangle_callback.constprop.17+0xb8>
 8006718:	350d      	adds	r5, #13
 800671a:	4621      	mov	r1, r4
 800671c:	f107 0014 	add.w	r0, r7, #20
 8006720:	623d      	str	r5, [r7, #32]
 8006722:	f7fb fe35 	bl	8002390 <d_encoding>
 8006726:	4602      	mov	r2, r0
 8006728:	e753      	b.n	80065d2 <d_demangle_callback.constprop.17+0xde>
 800672a:	f107 0014 	add.w	r0, r7, #20
 800672e:	f7fb f817 	bl	8001760 <d_type>
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	4605      	mov	r5, r0
 8006736:	f893 9000 	ldrb.w	r9, [r3]
 800673a:	e759      	b.n	80065f0 <d_demangle_callback.constprop.17+0xfc>
 800673c:	2200      	movs	r2, #0
 800673e:	e748      	b.n	80065d2 <d_demangle_callback.constprop.17+0xde>
 8006740:	786b      	ldrb	r3, [r5, #1]
 8006742:	2b5a      	cmp	r3, #90	; 0x5a
 8006744:	d1de      	bne.n	8006704 <d_demangle_callback.constprop.17+0x210>
 8006746:	3502      	adds	r5, #2
 8006748:	4651      	mov	r1, sl
 800674a:	f107 0014 	add.w	r0, r7, #20
 800674e:	623d      	str	r5, [r7, #32]
 8006750:	f7fb fe1e 	bl	8002390 <d_encoding>
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	07db      	lsls	r3, r3, #31
 8006758:	4605      	mov	r5, r0
 800675a:	d551      	bpl.n	8006800 <d_demangle_callback.constprop.17+0x30c>
 800675c:	6a38      	ldr	r0, [r7, #32]
 800675e:	f890 9000 	ldrb.w	r9, [r0]
 8006762:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006766:	f47f af43 	bne.w	80065f0 <d_demangle_callback.constprop.17+0xfc>
 800676a:	7843      	ldrb	r3, [r0, #1]
 800676c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006770:	2a19      	cmp	r2, #25
 8006772:	d939      	bls.n	80067e8 <d_demangle_callback.constprop.17+0x2f4>
 8006774:	2b5f      	cmp	r3, #95	; 0x5f
 8006776:	d037      	beq.n	80067e8 <d_demangle_callback.constprop.17+0x2f4>
 8006778:	3b30      	subs	r3, #48	; 0x30
 800677a:	2b09      	cmp	r3, #9
 800677c:	d840      	bhi.n	8006800 <d_demangle_callback.constprop.17+0x30c>
 800677e:	7803      	ldrb	r3, [r0, #0]
 8006780:	4602      	mov	r2, r0
 8006782:	2b2e      	cmp	r3, #46	; 0x2e
 8006784:	d112      	bne.n	80067ac <d_demangle_callback.constprop.17+0x2b8>
 8006786:	7853      	ldrb	r3, [r2, #1]
 8006788:	3b30      	subs	r3, #48	; 0x30
 800678a:	2b09      	cmp	r3, #9
 800678c:	d80e      	bhi.n	80067ac <d_demangle_callback.constprop.17+0x2b8>
 800678e:	7893      	ldrb	r3, [r2, #2]
 8006790:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006794:	2909      	cmp	r1, #9
 8006796:	f102 0202 	add.w	r2, r2, #2
 800679a:	d8f2      	bhi.n	8006782 <d_demangle_callback.constprop.17+0x28e>
 800679c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80067a0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80067a4:	2909      	cmp	r1, #9
 80067a6:	d9f9      	bls.n	800679c <d_demangle_callback.constprop.17+0x2a8>
 80067a8:	2b2e      	cmp	r3, #46	; 0x2e
 80067aa:	d0ec      	beq.n	8006786 <d_demangle_callback.constprop.17+0x292>
 80067ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b0:	623a      	str	r2, [r7, #32]
 80067b2:	4299      	cmp	r1, r3
 80067b4:	da16      	bge.n	80067e4 <d_demangle_callback.constprop.17+0x2f0>
 80067b6:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
 80067ba:	1c4b      	adds	r3, r1, #1
 80067bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c2:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
 80067c6:	d00d      	beq.n	80067e4 <d_demangle_callback.constprop.17+0x2f0>
 80067c8:	1a12      	subs	r2, r2, r0
 80067ca:	d00b      	beq.n	80067e4 <d_demangle_callback.constprop.17+0x2f0>
 80067cc:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
 80067d0:	6058      	str	r0, [r3, #4]
 80067d2:	609a      	str	r2, [r3, #8]
 80067d4:	462a      	mov	r2, r5
 80067d6:	214d      	movs	r1, #77	; 0x4d
 80067d8:	f107 0014 	add.w	r0, r7, #20
 80067dc:	f7f9 fd30 	bl	8000240 <d_make_comp>
 80067e0:	4605      	mov	r5, r0
 80067e2:	e7bb      	b.n	800675c <d_demangle_callback.constprop.17+0x268>
 80067e4:	2300      	movs	r3, #0
 80067e6:	e7f5      	b.n	80067d4 <d_demangle_callback.constprop.17+0x2e0>
 80067e8:	1c81      	adds	r1, r0, #2
 80067ea:	460a      	mov	r2, r1
 80067ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067f0:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 80067f4:	f1be 0f19 	cmp.w	lr, #25
 80067f8:	d9f7      	bls.n	80067ea <d_demangle_callback.constprop.17+0x2f6>
 80067fa:	2b5f      	cmp	r3, #95	; 0x5f
 80067fc:	d0f5      	beq.n	80067ea <d_demangle_callback.constprop.17+0x2f6>
 80067fe:	e7c0      	b.n	8006782 <d_demangle_callback.constprop.17+0x28e>
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	f893 9000 	ldrb.w	r9, [r3]
 8006806:	e6f3      	b.n	80065f0 <d_demangle_callback.constprop.17+0xfc>
 8006808:	08019f1c 	.word	0x08019f1c

0800680c <__cxa_demangle>:
 800680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	b378      	cbz	r0, 8006874 <__cxa_demangle+0x68>
 8006814:	b101      	cbz	r1, 8006818 <__cxa_demangle+0xc>
 8006816:	b36a      	cbz	r2, 8006874 <__cxa_demangle+0x68>
 8006818:	2400      	movs	r4, #0
 800681a:	4616      	mov	r6, r2
 800681c:	460d      	mov	r5, r1
 800681e:	466a      	mov	r2, sp
 8006820:	4927      	ldr	r1, [pc, #156]	; (80068c0 <__cxa_demangle+0xb4>)
 8006822:	9400      	str	r4, [sp, #0]
 8006824:	461f      	mov	r7, r3
 8006826:	9401      	str	r4, [sp, #4]
 8006828:	9402      	str	r4, [sp, #8]
 800682a:	9403      	str	r4, [sp, #12]
 800682c:	f7ff fe62 	bl	80064f4 <d_demangle_callback.constprop.17>
 8006830:	2800      	cmp	r0, #0
 8006832:	d03f      	beq.n	80068b4 <__cxa_demangle+0xa8>
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	b1d3      	cbz	r3, 800686e <__cxa_demangle+0x62>
 8006838:	f04f 0801 	mov.w	r8, #1
 800683c:	9c00      	ldr	r4, [sp, #0]
 800683e:	b35c      	cbz	r4, 8006898 <__cxa_demangle+0x8c>
 8006840:	b33d      	cbz	r5, 8006892 <__cxa_demangle+0x86>
 8006842:	4620      	mov	r0, r4
 8006844:	f000 f8ae 	bl	80069a4 <strlen>
 8006848:	6833      	ldr	r3, [r6, #0]
 800684a:	4298      	cmp	r0, r3
 800684c:	d21b      	bcs.n	8006886 <__cxa_demangle+0x7a>
 800684e:	1c42      	adds	r2, r0, #1
 8006850:	4621      	mov	r1, r4
 8006852:	4628      	mov	r0, r5
 8006854:	f00f f8dd 	bl	8015a12 <memcpy>
 8006858:	4620      	mov	r0, r4
 800685a:	f00e feb5 	bl	80155c8 <free>
 800685e:	462c      	mov	r4, r5
 8006860:	b10f      	cbz	r7, 8006866 <__cxa_demangle+0x5a>
 8006862:	2300      	movs	r3, #0
 8006864:	603b      	str	r3, [r7, #0]
 8006866:	4620      	mov	r0, r4
 8006868:	b004      	add	sp, #16
 800686a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800686e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006872:	e7e3      	b.n	800683c <__cxa_demangle+0x30>
 8006874:	b113      	cbz	r3, 800687c <__cxa_demangle+0x70>
 8006876:	f06f 0202 	mvn.w	r2, #2
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	2400      	movs	r4, #0
 800687e:	4620      	mov	r0, r4
 8006880:	b004      	add	sp, #16
 8006882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006886:	4628      	mov	r0, r5
 8006888:	f00e fe9e 	bl	80155c8 <free>
 800688c:	f8c6 8000 	str.w	r8, [r6]
 8006890:	e7e6      	b.n	8006860 <__cxa_demangle+0x54>
 8006892:	2e00      	cmp	r6, #0
 8006894:	d1fa      	bne.n	800688c <__cxa_demangle+0x80>
 8006896:	e7e3      	b.n	8006860 <__cxa_demangle+0x54>
 8006898:	2f00      	cmp	r7, #0
 800689a:	d0ef      	beq.n	800687c <__cxa_demangle+0x70>
 800689c:	f1b8 0f01 	cmp.w	r8, #1
 80068a0:	d004      	beq.n	80068ac <__cxa_demangle+0xa0>
 80068a2:	f06f 0301 	mvn.w	r3, #1
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	2400      	movs	r4, #0
 80068aa:	e7dc      	b.n	8006866 <__cxa_demangle+0x5a>
 80068ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	e7d8      	b.n	8006866 <__cxa_demangle+0x5a>
 80068b4:	9800      	ldr	r0, [sp, #0]
 80068b6:	f00e fe87 	bl	80155c8 <free>
 80068ba:	2f00      	cmp	r7, #0
 80068bc:	d1f1      	bne.n	80068a2 <__cxa_demangle+0x96>
 80068be:	e7dd      	b.n	800687c <__cxa_demangle+0x70>
 80068c0:	08000965 	.word	0x08000965

080068c4 <__gcclibcxx_demangle_callback>:
 80068c4:	b160      	cbz	r0, 80068e0 <__gcclibcxx_demangle_callback+0x1c>
 80068c6:	b508      	push	{r3, lr}
 80068c8:	b139      	cbz	r1, 80068da <__gcclibcxx_demangle_callback+0x16>
 80068ca:	f7ff fe13 	bl	80064f4 <d_demangle_callback.constprop.17>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	bf0c      	ite	eq
 80068d2:	f06f 0001 	mvneq.w	r0, #1
 80068d6:	2000      	movne	r0, #0
 80068d8:	bd08      	pop	{r3, pc}
 80068da:	f06f 0002 	mvn.w	r0, #2
 80068de:	bd08      	pop	{r3, pc}
 80068e0:	f06f 0002 	mvn.w	r0, #2
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
	...

080068f0 <memchr>:
 80068f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80068f4:	2a10      	cmp	r2, #16
 80068f6:	db2b      	blt.n	8006950 <memchr+0x60>
 80068f8:	f010 0f07 	tst.w	r0, #7
 80068fc:	d008      	beq.n	8006910 <memchr+0x20>
 80068fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006902:	3a01      	subs	r2, #1
 8006904:	428b      	cmp	r3, r1
 8006906:	d02d      	beq.n	8006964 <memchr+0x74>
 8006908:	f010 0f07 	tst.w	r0, #7
 800690c:	b342      	cbz	r2, 8006960 <memchr+0x70>
 800690e:	d1f6      	bne.n	80068fe <memchr+0xe>
 8006910:	b4f0      	push	{r4, r5, r6, r7}
 8006912:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006916:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800691a:	f022 0407 	bic.w	r4, r2, #7
 800691e:	f07f 0700 	mvns.w	r7, #0
 8006922:	2300      	movs	r3, #0
 8006924:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006928:	3c08      	subs	r4, #8
 800692a:	ea85 0501 	eor.w	r5, r5, r1
 800692e:	ea86 0601 	eor.w	r6, r6, r1
 8006932:	fa85 f547 	uadd8	r5, r5, r7
 8006936:	faa3 f587 	sel	r5, r3, r7
 800693a:	fa86 f647 	uadd8	r6, r6, r7
 800693e:	faa5 f687 	sel	r6, r5, r7
 8006942:	b98e      	cbnz	r6, 8006968 <memchr+0x78>
 8006944:	d1ee      	bne.n	8006924 <memchr+0x34>
 8006946:	bcf0      	pop	{r4, r5, r6, r7}
 8006948:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800694c:	f002 0207 	and.w	r2, r2, #7
 8006950:	b132      	cbz	r2, 8006960 <memchr+0x70>
 8006952:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006956:	3a01      	subs	r2, #1
 8006958:	ea83 0301 	eor.w	r3, r3, r1
 800695c:	b113      	cbz	r3, 8006964 <memchr+0x74>
 800695e:	d1f8      	bne.n	8006952 <memchr+0x62>
 8006960:	2000      	movs	r0, #0
 8006962:	4770      	bx	lr
 8006964:	3801      	subs	r0, #1
 8006966:	4770      	bx	lr
 8006968:	2d00      	cmp	r5, #0
 800696a:	bf06      	itte	eq
 800696c:	4635      	moveq	r5, r6
 800696e:	3803      	subeq	r0, #3
 8006970:	3807      	subne	r0, #7
 8006972:	f015 0f01 	tst.w	r5, #1
 8006976:	d107      	bne.n	8006988 <memchr+0x98>
 8006978:	3001      	adds	r0, #1
 800697a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800697e:	bf02      	ittt	eq
 8006980:	3001      	addeq	r0, #1
 8006982:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006986:	3001      	addeq	r0, #1
 8006988:	bcf0      	pop	{r4, r5, r6, r7}
 800698a:	3801      	subs	r0, #1
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop

08006990 <strcmp>:
 8006990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006998:	2a01      	cmp	r2, #1
 800699a:	bf28      	it	cs
 800699c:	429a      	cmpcs	r2, r3
 800699e:	d0f7      	beq.n	8006990 <strcmp>
 80069a0:	1ad0      	subs	r0, r2, r3
 80069a2:	4770      	bx	lr

080069a4 <strlen>:
 80069a4:	4603      	mov	r3, r0
 80069a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069aa:	2a00      	cmp	r2, #0
 80069ac:	d1fb      	bne.n	80069a6 <strlen+0x2>
 80069ae:	1a18      	subs	r0, r3, r0
 80069b0:	3801      	subs	r0, #1
 80069b2:	4770      	bx	lr

080069b4 <__aeabi_uldivmod>:
 80069b4:	b953      	cbnz	r3, 80069cc <__aeabi_uldivmod+0x18>
 80069b6:	b94a      	cbnz	r2, 80069cc <__aeabi_uldivmod+0x18>
 80069b8:	2900      	cmp	r1, #0
 80069ba:	bf08      	it	eq
 80069bc:	2800      	cmpeq	r0, #0
 80069be:	bf1c      	itt	ne
 80069c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80069c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80069c8:	f001 b8f6 	b.w	8007bb8 <__aeabi_idiv0>
 80069cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80069d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80069d4:	f000 f806 	bl	80069e4 <__udivmoddi4>
 80069d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80069dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069e0:	b004      	add	sp, #16
 80069e2:	4770      	bx	lr

080069e4 <__udivmoddi4>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	468c      	mov	ip, r1
 80069ea:	460d      	mov	r5, r1
 80069ec:	4604      	mov	r4, r0
 80069ee:	9e08      	ldr	r6, [sp, #32]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d151      	bne.n	8006a98 <__udivmoddi4+0xb4>
 80069f4:	428a      	cmp	r2, r1
 80069f6:	4617      	mov	r7, r2
 80069f8:	d96d      	bls.n	8006ad6 <__udivmoddi4+0xf2>
 80069fa:	fab2 fe82 	clz	lr, r2
 80069fe:	f1be 0f00 	cmp.w	lr, #0
 8006a02:	d00b      	beq.n	8006a1c <__udivmoddi4+0x38>
 8006a04:	f1ce 0c20 	rsb	ip, lr, #32
 8006a08:	fa01 f50e 	lsl.w	r5, r1, lr
 8006a0c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006a10:	fa02 f70e 	lsl.w	r7, r2, lr
 8006a14:	ea4c 0c05 	orr.w	ip, ip, r5
 8006a18:	fa00 f40e 	lsl.w	r4, r0, lr
 8006a1c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8006a20:	0c25      	lsrs	r5, r4, #16
 8006a22:	fbbc f8fa 	udiv	r8, ip, sl
 8006a26:	fa1f f987 	uxth.w	r9, r7
 8006a2a:	fb0a cc18 	mls	ip, sl, r8, ip
 8006a2e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8006a32:	fb08 f309 	mul.w	r3, r8, r9
 8006a36:	42ab      	cmp	r3, r5
 8006a38:	d90a      	bls.n	8006a50 <__udivmoddi4+0x6c>
 8006a3a:	19ed      	adds	r5, r5, r7
 8006a3c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8006a40:	f080 8123 	bcs.w	8006c8a <__udivmoddi4+0x2a6>
 8006a44:	42ab      	cmp	r3, r5
 8006a46:	f240 8120 	bls.w	8006c8a <__udivmoddi4+0x2a6>
 8006a4a:	f1a8 0802 	sub.w	r8, r8, #2
 8006a4e:	443d      	add	r5, r7
 8006a50:	1aed      	subs	r5, r5, r3
 8006a52:	b2a4      	uxth	r4, r4
 8006a54:	fbb5 f0fa 	udiv	r0, r5, sl
 8006a58:	fb0a 5510 	mls	r5, sl, r0, r5
 8006a5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006a60:	fb00 f909 	mul.w	r9, r0, r9
 8006a64:	45a1      	cmp	r9, r4
 8006a66:	d909      	bls.n	8006a7c <__udivmoddi4+0x98>
 8006a68:	19e4      	adds	r4, r4, r7
 8006a6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a6e:	f080 810a 	bcs.w	8006c86 <__udivmoddi4+0x2a2>
 8006a72:	45a1      	cmp	r9, r4
 8006a74:	f240 8107 	bls.w	8006c86 <__udivmoddi4+0x2a2>
 8006a78:	3802      	subs	r0, #2
 8006a7a:	443c      	add	r4, r7
 8006a7c:	eba4 0409 	sub.w	r4, r4, r9
 8006a80:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8006a84:	2100      	movs	r1, #0
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	d061      	beq.n	8006b4e <__udivmoddi4+0x16a>
 8006a8a:	fa24 f40e 	lsr.w	r4, r4, lr
 8006a8e:	2300      	movs	r3, #0
 8006a90:	6034      	str	r4, [r6, #0]
 8006a92:	6073      	str	r3, [r6, #4]
 8006a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	d907      	bls.n	8006aac <__udivmoddi4+0xc8>
 8006a9c:	2e00      	cmp	r6, #0
 8006a9e:	d054      	beq.n	8006b4a <__udivmoddi4+0x166>
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	e886 0021 	stmia.w	r6, {r0, r5}
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aac:	fab3 f183 	clz	r1, r3
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	f040 808e 	bne.w	8006bd2 <__udivmoddi4+0x1ee>
 8006ab6:	42ab      	cmp	r3, r5
 8006ab8:	d302      	bcc.n	8006ac0 <__udivmoddi4+0xdc>
 8006aba:	4282      	cmp	r2, r0
 8006abc:	f200 80fa 	bhi.w	8006cb4 <__udivmoddi4+0x2d0>
 8006ac0:	1a84      	subs	r4, r0, r2
 8006ac2:	eb65 0503 	sbc.w	r5, r5, r3
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	46ac      	mov	ip, r5
 8006aca:	2e00      	cmp	r6, #0
 8006acc:	d03f      	beq.n	8006b4e <__udivmoddi4+0x16a>
 8006ace:	e886 1010 	stmia.w	r6, {r4, ip}
 8006ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad6:	b912      	cbnz	r2, 8006ade <__udivmoddi4+0xfa>
 8006ad8:	2701      	movs	r7, #1
 8006ada:	fbb7 f7f2 	udiv	r7, r7, r2
 8006ade:	fab7 fe87 	clz	lr, r7
 8006ae2:	f1be 0f00 	cmp.w	lr, #0
 8006ae6:	d134      	bne.n	8006b52 <__udivmoddi4+0x16e>
 8006ae8:	1beb      	subs	r3, r5, r7
 8006aea:	0c3a      	lsrs	r2, r7, #16
 8006aec:	fa1f fc87 	uxth.w	ip, r7
 8006af0:	2101      	movs	r1, #1
 8006af2:	fbb3 f8f2 	udiv	r8, r3, r2
 8006af6:	0c25      	lsrs	r5, r4, #16
 8006af8:	fb02 3318 	mls	r3, r2, r8, r3
 8006afc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8006b00:	fb0c f308 	mul.w	r3, ip, r8
 8006b04:	42ab      	cmp	r3, r5
 8006b06:	d907      	bls.n	8006b18 <__udivmoddi4+0x134>
 8006b08:	19ed      	adds	r5, r5, r7
 8006b0a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8006b0e:	d202      	bcs.n	8006b16 <__udivmoddi4+0x132>
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	f200 80d1 	bhi.w	8006cb8 <__udivmoddi4+0x2d4>
 8006b16:	4680      	mov	r8, r0
 8006b18:	1aed      	subs	r5, r5, r3
 8006b1a:	b2a3      	uxth	r3, r4
 8006b1c:	fbb5 f0f2 	udiv	r0, r5, r2
 8006b20:	fb02 5510 	mls	r5, r2, r0, r5
 8006b24:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8006b28:	fb0c fc00 	mul.w	ip, ip, r0
 8006b2c:	45a4      	cmp	ip, r4
 8006b2e:	d907      	bls.n	8006b40 <__udivmoddi4+0x15c>
 8006b30:	19e4      	adds	r4, r4, r7
 8006b32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006b36:	d202      	bcs.n	8006b3e <__udivmoddi4+0x15a>
 8006b38:	45a4      	cmp	ip, r4
 8006b3a:	f200 80b8 	bhi.w	8006cae <__udivmoddi4+0x2ca>
 8006b3e:	4618      	mov	r0, r3
 8006b40:	eba4 040c 	sub.w	r4, r4, ip
 8006b44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8006b48:	e79d      	b.n	8006a86 <__udivmoddi4+0xa2>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b52:	f1ce 0420 	rsb	r4, lr, #32
 8006b56:	fa05 f30e 	lsl.w	r3, r5, lr
 8006b5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8006b5e:	fa20 f804 	lsr.w	r8, r0, r4
 8006b62:	0c3a      	lsrs	r2, r7, #16
 8006b64:	fa25 f404 	lsr.w	r4, r5, r4
 8006b68:	ea48 0803 	orr.w	r8, r8, r3
 8006b6c:	fbb4 f1f2 	udiv	r1, r4, r2
 8006b70:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8006b74:	fb02 4411 	mls	r4, r2, r1, r4
 8006b78:	fa1f fc87 	uxth.w	ip, r7
 8006b7c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8006b80:	fb01 f30c 	mul.w	r3, r1, ip
 8006b84:	42ab      	cmp	r3, r5
 8006b86:	fa00 f40e 	lsl.w	r4, r0, lr
 8006b8a:	d909      	bls.n	8006ba0 <__udivmoddi4+0x1bc>
 8006b8c:	19ed      	adds	r5, r5, r7
 8006b8e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8006b92:	f080 808a 	bcs.w	8006caa <__udivmoddi4+0x2c6>
 8006b96:	42ab      	cmp	r3, r5
 8006b98:	f240 8087 	bls.w	8006caa <__udivmoddi4+0x2c6>
 8006b9c:	3902      	subs	r1, #2
 8006b9e:	443d      	add	r5, r7
 8006ba0:	1aeb      	subs	r3, r5, r3
 8006ba2:	fa1f f588 	uxth.w	r5, r8
 8006ba6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006baa:	fb02 3310 	mls	r3, r2, r0, r3
 8006bae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8006bb2:	fb00 f30c 	mul.w	r3, r0, ip
 8006bb6:	42ab      	cmp	r3, r5
 8006bb8:	d907      	bls.n	8006bca <__udivmoddi4+0x1e6>
 8006bba:	19ed      	adds	r5, r5, r7
 8006bbc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8006bc0:	d26f      	bcs.n	8006ca2 <__udivmoddi4+0x2be>
 8006bc2:	42ab      	cmp	r3, r5
 8006bc4:	d96d      	bls.n	8006ca2 <__udivmoddi4+0x2be>
 8006bc6:	3802      	subs	r0, #2
 8006bc8:	443d      	add	r5, r7
 8006bca:	1aeb      	subs	r3, r5, r3
 8006bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006bd0:	e78f      	b.n	8006af2 <__udivmoddi4+0x10e>
 8006bd2:	f1c1 0720 	rsb	r7, r1, #32
 8006bd6:	fa22 f807 	lsr.w	r8, r2, r7
 8006bda:	408b      	lsls	r3, r1
 8006bdc:	fa05 f401 	lsl.w	r4, r5, r1
 8006be0:	ea48 0303 	orr.w	r3, r8, r3
 8006be4:	fa20 fe07 	lsr.w	lr, r0, r7
 8006be8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8006bec:	40fd      	lsrs	r5, r7
 8006bee:	ea4e 0e04 	orr.w	lr, lr, r4
 8006bf2:	fbb5 f9fc 	udiv	r9, r5, ip
 8006bf6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8006bfa:	fb0c 5519 	mls	r5, ip, r9, r5
 8006bfe:	fa1f f883 	uxth.w	r8, r3
 8006c02:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8006c06:	fb09 f408 	mul.w	r4, r9, r8
 8006c0a:	42ac      	cmp	r4, r5
 8006c0c:	fa02 f201 	lsl.w	r2, r2, r1
 8006c10:	fa00 fa01 	lsl.w	sl, r0, r1
 8006c14:	d908      	bls.n	8006c28 <__udivmoddi4+0x244>
 8006c16:	18ed      	adds	r5, r5, r3
 8006c18:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8006c1c:	d243      	bcs.n	8006ca6 <__udivmoddi4+0x2c2>
 8006c1e:	42ac      	cmp	r4, r5
 8006c20:	d941      	bls.n	8006ca6 <__udivmoddi4+0x2c2>
 8006c22:	f1a9 0902 	sub.w	r9, r9, #2
 8006c26:	441d      	add	r5, r3
 8006c28:	1b2d      	subs	r5, r5, r4
 8006c2a:	fa1f fe8e 	uxth.w	lr, lr
 8006c2e:	fbb5 f0fc 	udiv	r0, r5, ip
 8006c32:	fb0c 5510 	mls	r5, ip, r0, r5
 8006c36:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8006c3a:	fb00 f808 	mul.w	r8, r0, r8
 8006c3e:	45a0      	cmp	r8, r4
 8006c40:	d907      	bls.n	8006c52 <__udivmoddi4+0x26e>
 8006c42:	18e4      	adds	r4, r4, r3
 8006c44:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8006c48:	d229      	bcs.n	8006c9e <__udivmoddi4+0x2ba>
 8006c4a:	45a0      	cmp	r8, r4
 8006c4c:	d927      	bls.n	8006c9e <__udivmoddi4+0x2ba>
 8006c4e:	3802      	subs	r0, #2
 8006c50:	441c      	add	r4, r3
 8006c52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8006c56:	eba4 0408 	sub.w	r4, r4, r8
 8006c5a:	fba0 8902 	umull	r8, r9, r0, r2
 8006c5e:	454c      	cmp	r4, r9
 8006c60:	46c6      	mov	lr, r8
 8006c62:	464d      	mov	r5, r9
 8006c64:	d315      	bcc.n	8006c92 <__udivmoddi4+0x2ae>
 8006c66:	d012      	beq.n	8006c8e <__udivmoddi4+0x2aa>
 8006c68:	b156      	cbz	r6, 8006c80 <__udivmoddi4+0x29c>
 8006c6a:	ebba 030e 	subs.w	r3, sl, lr
 8006c6e:	eb64 0405 	sbc.w	r4, r4, r5
 8006c72:	fa04 f707 	lsl.w	r7, r4, r7
 8006c76:	40cb      	lsrs	r3, r1
 8006c78:	431f      	orrs	r7, r3
 8006c7a:	40cc      	lsrs	r4, r1
 8006c7c:	6037      	str	r7, [r6, #0]
 8006c7e:	6074      	str	r4, [r6, #4]
 8006c80:	2100      	movs	r1, #0
 8006c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c86:	4618      	mov	r0, r3
 8006c88:	e6f8      	b.n	8006a7c <__udivmoddi4+0x98>
 8006c8a:	4690      	mov	r8, r2
 8006c8c:	e6e0      	b.n	8006a50 <__udivmoddi4+0x6c>
 8006c8e:	45c2      	cmp	sl, r8
 8006c90:	d2ea      	bcs.n	8006c68 <__udivmoddi4+0x284>
 8006c92:	ebb8 0e02 	subs.w	lr, r8, r2
 8006c96:	eb69 0503 	sbc.w	r5, r9, r3
 8006c9a:	3801      	subs	r0, #1
 8006c9c:	e7e4      	b.n	8006c68 <__udivmoddi4+0x284>
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	e7d7      	b.n	8006c52 <__udivmoddi4+0x26e>
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	e791      	b.n	8006bca <__udivmoddi4+0x1e6>
 8006ca6:	4681      	mov	r9, r0
 8006ca8:	e7be      	b.n	8006c28 <__udivmoddi4+0x244>
 8006caa:	4601      	mov	r1, r0
 8006cac:	e778      	b.n	8006ba0 <__udivmoddi4+0x1bc>
 8006cae:	3802      	subs	r0, #2
 8006cb0:	443c      	add	r4, r7
 8006cb2:	e745      	b.n	8006b40 <__udivmoddi4+0x15c>
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	e708      	b.n	8006aca <__udivmoddi4+0xe6>
 8006cb8:	f1a8 0802 	sub.w	r8, r8, #2
 8006cbc:	443d      	add	r5, r7
 8006cbe:	e72b      	b.n	8006b18 <__udivmoddi4+0x134>

08006cc0 <selfrel_offset31>:
 8006cc0:	6803      	ldr	r3, [r0, #0]
 8006cc2:	005a      	lsls	r2, r3, #1
 8006cc4:	bf4c      	ite	mi
 8006cc6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006cca:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8006cce:	4418      	add	r0, r3
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop

08006cd4 <search_EIT_table>:
 8006cd4:	b361      	cbz	r1, 8006d30 <search_EIT_table+0x5c>
 8006cd6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cda:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8006cde:	4690      	mov	r8, r2
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	46d1      	mov	r9, sl
 8006ce4:	2700      	movs	r7, #0
 8006ce6:	eb07 0409 	add.w	r4, r7, r9
 8006cea:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8006cee:	1064      	asrs	r4, r4, #1
 8006cf0:	00e5      	lsls	r5, r4, #3
 8006cf2:	1971      	adds	r1, r6, r5
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	f7ff ffe3 	bl	8006cc0 <selfrel_offset31>
 8006cfa:	45a2      	cmp	sl, r4
 8006cfc:	4683      	mov	fp, r0
 8006cfe:	f105 0008 	add.w	r0, r5, #8
 8006d02:	4430      	add	r0, r6
 8006d04:	d009      	beq.n	8006d1a <search_EIT_table+0x46>
 8006d06:	f7ff ffdb 	bl	8006cc0 <selfrel_offset31>
 8006d0a:	45c3      	cmp	fp, r8
 8006d0c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8006d10:	d805      	bhi.n	8006d1e <search_EIT_table+0x4a>
 8006d12:	4540      	cmp	r0, r8
 8006d14:	d209      	bcs.n	8006d2a <search_EIT_table+0x56>
 8006d16:	1c67      	adds	r7, r4, #1
 8006d18:	e7e5      	b.n	8006ce6 <search_EIT_table+0x12>
 8006d1a:	45c3      	cmp	fp, r8
 8006d1c:	d905      	bls.n	8006d2a <search_EIT_table+0x56>
 8006d1e:	42a7      	cmp	r7, r4
 8006d20:	d002      	beq.n	8006d28 <search_EIT_table+0x54>
 8006d22:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8006d26:	e7de      	b.n	8006ce6 <search_EIT_table+0x12>
 8006d28:	2100      	movs	r1, #0
 8006d2a:	4608      	mov	r0, r1
 8006d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d30:	4608      	mov	r0, r1
 8006d32:	4770      	bx	lr

08006d34 <__gnu_unwind_get_pr_addr>:
 8006d34:	2801      	cmp	r0, #1
 8006d36:	d007      	beq.n	8006d48 <__gnu_unwind_get_pr_addr+0x14>
 8006d38:	2802      	cmp	r0, #2
 8006d3a:	d007      	beq.n	8006d4c <__gnu_unwind_get_pr_addr+0x18>
 8006d3c:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <__gnu_unwind_get_pr_addr+0x1c>)
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	bf0c      	ite	eq
 8006d42:	4618      	moveq	r0, r3
 8006d44:	2000      	movne	r0, #0
 8006d46:	4770      	bx	lr
 8006d48:	4802      	ldr	r0, [pc, #8]	; (8006d54 <__gnu_unwind_get_pr_addr+0x20>)
 8006d4a:	4770      	bx	lr
 8006d4c:	4802      	ldr	r0, [pc, #8]	; (8006d58 <__gnu_unwind_get_pr_addr+0x24>)
 8006d4e:	4770      	bx	lr
 8006d50:	08007439 	.word	0x08007439
 8006d54:	0800743d 	.word	0x0800743d
 8006d58:	08007441 	.word	0x08007441

08006d5c <get_eit_entry>:
 8006d5c:	b530      	push	{r4, r5, lr}
 8006d5e:	4b24      	ldr	r3, [pc, #144]	; (8006df0 <get_eit_entry+0x94>)
 8006d60:	b083      	sub	sp, #12
 8006d62:	4604      	mov	r4, r0
 8006d64:	1e8d      	subs	r5, r1, #2
 8006d66:	b37b      	cbz	r3, 8006dc8 <get_eit_entry+0x6c>
 8006d68:	a901      	add	r1, sp, #4
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f3af 8000 	nop.w
 8006d70:	b320      	cbz	r0, 8006dbc <get_eit_entry+0x60>
 8006d72:	9901      	ldr	r1, [sp, #4]
 8006d74:	462a      	mov	r2, r5
 8006d76:	f7ff ffad 	bl	8006cd4 <search_EIT_table>
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	b1f0      	cbz	r0, 8006dbc <get_eit_entry+0x60>
 8006d7e:	f7ff ff9f 	bl	8006cc0 <selfrel_offset31>
 8006d82:	684b      	ldr	r3, [r1, #4]
 8006d84:	64a0      	str	r0, [r4, #72]	; 0x48
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d012      	beq.n	8006db0 <get_eit_entry+0x54>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f101 0004 	add.w	r0, r1, #4
 8006d90:	db20      	blt.n	8006dd4 <get_eit_entry+0x78>
 8006d92:	f7ff ff95 	bl	8006cc0 <selfrel_offset31>
 8006d96:	2300      	movs	r3, #0
 8006d98:	64e0      	str	r0, [r4, #76]	; 0x4c
 8006d9a:	6523      	str	r3, [r4, #80]	; 0x50
 8006d9c:	6803      	ldr	r3, [r0, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	db1c      	blt.n	8006ddc <get_eit_entry+0x80>
 8006da2:	f7ff ff8d 	bl	8006cc0 <selfrel_offset31>
 8006da6:	2300      	movs	r3, #0
 8006da8:	6120      	str	r0, [r4, #16]
 8006daa:	4618      	mov	r0, r3
 8006dac:	b003      	add	sp, #12
 8006dae:	bd30      	pop	{r4, r5, pc}
 8006db0:	2300      	movs	r3, #0
 8006db2:	6123      	str	r3, [r4, #16]
 8006db4:	2305      	movs	r3, #5
 8006db6:	4618      	mov	r0, r3
 8006db8:	b003      	add	sp, #12
 8006dba:	bd30      	pop	{r4, r5, pc}
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6123      	str	r3, [r4, #16]
 8006dc0:	2309      	movs	r3, #9
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	b003      	add	sp, #12
 8006dc6:	bd30      	pop	{r4, r5, pc}
 8006dc8:	490a      	ldr	r1, [pc, #40]	; (8006df4 <get_eit_entry+0x98>)
 8006dca:	480b      	ldr	r0, [pc, #44]	; (8006df8 <get_eit_entry+0x9c>)
 8006dcc:	1a09      	subs	r1, r1, r0
 8006dce:	10c9      	asrs	r1, r1, #3
 8006dd0:	9101      	str	r1, [sp, #4]
 8006dd2:	e7cf      	b.n	8006d74 <get_eit_entry+0x18>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	64e0      	str	r0, [r4, #76]	; 0x4c
 8006dd8:	6523      	str	r3, [r4, #80]	; 0x50
 8006dda:	e7df      	b.n	8006d9c <get_eit_entry+0x40>
 8006ddc:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8006de0:	f7ff ffa8 	bl	8006d34 <__gnu_unwind_get_pr_addr>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	6120      	str	r0, [r4, #16]
 8006de8:	bf14      	ite	ne
 8006dea:	2300      	movne	r3, #0
 8006dec:	2309      	moveq	r3, #9
 8006dee:	e7dc      	b.n	8006daa <get_eit_entry+0x4e>
 8006df0:	00000000 	.word	0x00000000
 8006df4:	0801b3d8 	.word	0x0801b3d8
 8006df8:	0801b188 	.word	0x0801b188

08006dfc <restore_non_core_regs>:
 8006dfc:	6803      	ldr	r3, [r0, #0]
 8006dfe:	07da      	lsls	r2, r3, #31
 8006e00:	b510      	push	{r4, lr}
 8006e02:	4604      	mov	r4, r0
 8006e04:	d406      	bmi.n	8006e14 <restore_non_core_regs+0x18>
 8006e06:	079b      	lsls	r3, r3, #30
 8006e08:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8006e0c:	d509      	bpl.n	8006e22 <restore_non_core_regs+0x26>
 8006e0e:	f000 fc51 	bl	80076b4 <__gnu_Unwind_Restore_VFP_D>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0759      	lsls	r1, r3, #29
 8006e16:	d509      	bpl.n	8006e2c <restore_non_core_regs+0x30>
 8006e18:	071a      	lsls	r2, r3, #28
 8006e1a:	d50e      	bpl.n	8006e3a <restore_non_core_regs+0x3e>
 8006e1c:	06db      	lsls	r3, r3, #27
 8006e1e:	d513      	bpl.n	8006e48 <restore_non_core_regs+0x4c>
 8006e20:	bd10      	pop	{r4, pc}
 8006e22:	f000 fc3f 	bl	80076a4 <__gnu_Unwind_Restore_VFP>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	0759      	lsls	r1, r3, #29
 8006e2a:	d4f5      	bmi.n	8006e18 <restore_non_core_regs+0x1c>
 8006e2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e30:	f000 fc48 	bl	80076c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	071a      	lsls	r2, r3, #28
 8006e38:	d4f0      	bmi.n	8006e1c <restore_non_core_regs+0x20>
 8006e3a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8006e3e:	f000 fc49 	bl	80076d4 <__gnu_Unwind_Restore_WMMXD>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	06db      	lsls	r3, r3, #27
 8006e46:	d4eb      	bmi.n	8006e20 <restore_non_core_regs+0x24>
 8006e48:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8006e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e50:	f000 bc84 	b.w	800775c <__gnu_Unwind_Restore_WMMXC>

08006e54 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8006e54:	6803      	ldr	r3, [r0, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8006e58:	4403      	add	r3, r0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop

08006e60 <__gnu_unwind_24bit.isra.1>:
 8006e60:	2009      	movs	r0, #9
 8006e62:	4770      	bx	lr

08006e64 <_Unwind_DebugHook>:
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop

08006e68 <unwind_phase2>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	460d      	mov	r5, r1
 8006e6e:	e008      	b.n	8006e82 <unwind_phase2+0x1a>
 8006e70:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006e72:	6163      	str	r3, [r4, #20]
 8006e74:	462a      	mov	r2, r5
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	4621      	mov	r1, r4
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	4798      	blx	r3
 8006e7e:	2808      	cmp	r0, #8
 8006e80:	d108      	bne.n	8006e94 <unwind_phase2+0x2c>
 8006e82:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8006e84:	4620      	mov	r0, r4
 8006e86:	f7ff ff69 	bl	8006d5c <get_eit_entry>
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d0ef      	beq.n	8006e70 <unwind_phase2+0x8>
 8006e90:	f00e f905 	bl	801509e <abort>
 8006e94:	2807      	cmp	r0, #7
 8006e96:	d1fb      	bne.n	8006e90 <unwind_phase2+0x28>
 8006e98:	4630      	mov	r0, r6
 8006e9a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8006e9c:	f7ff ffe2 	bl	8006e64 <_Unwind_DebugHook>
 8006ea0:	1d28      	adds	r0, r5, #4
 8006ea2:	f000 fbf3 	bl	800768c <__restore_core_regs>
 8006ea6:	bf00      	nop

08006ea8 <unwind_phase2_forced>:
 8006ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eac:	1d0c      	adds	r4, r1, #4
 8006eae:	4605      	mov	r5, r0
 8006eb0:	4692      	mov	sl, r2
 8006eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eb4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8006eb8:	ae03      	add	r6, sp, #12
 8006eba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ebe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ec2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006ec4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006ec8:	ac02      	add	r4, sp, #8
 8006eca:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8006ece:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8006ed2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	4628      	mov	r0, r5
 8006eda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	f7ff ff3d 	bl	8006d5c <get_eit_entry>
 8006ee2:	f1ba 0f00 	cmp.w	sl, #0
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	bf14      	ite	ne
 8006eea:	260a      	movne	r6, #10
 8006eec:	2609      	moveq	r6, #9
 8006eee:	b17f      	cbz	r7, 8006f10 <unwind_phase2_forced+0x68>
 8006ef0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ef2:	f046 0110 	orr.w	r1, r6, #16
 8006ef6:	e88d 0210 	stmia.w	sp, {r4, r9}
 8006efa:	462a      	mov	r2, r5
 8006efc:	6463      	str	r3, [r4, #68]	; 0x44
 8006efe:	2001      	movs	r0, #1
 8006f00:	462b      	mov	r3, r5
 8006f02:	47c0      	blx	r8
 8006f04:	bb78      	cbnz	r0, 8006f66 <unwind_phase2_forced+0xbe>
 8006f06:	4638      	mov	r0, r7
 8006f08:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8006f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f12:	616b      	str	r3, [r5, #20]
 8006f14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006f18:	4621      	mov	r1, r4
 8006f1a:	a87a      	add	r0, sp, #488	; 0x1e8
 8006f1c:	f00e fd79 	bl	8015a12 <memcpy>
 8006f20:	692b      	ldr	r3, [r5, #16]
 8006f22:	aa7a      	add	r2, sp, #488	; 0x1e8
 8006f24:	4629      	mov	r1, r5
 8006f26:	4630      	mov	r0, r6
 8006f28:	4798      	blx	r3
 8006f2a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8006f2c:	4682      	mov	sl, r0
 8006f2e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8006f32:	4631      	mov	r1, r6
 8006f34:	6463      	str	r3, [r4, #68]	; 0x44
 8006f36:	462a      	mov	r2, r5
 8006f38:	462b      	mov	r3, r5
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	47c0      	blx	r8
 8006f3e:	b990      	cbnz	r0, 8006f66 <unwind_phase2_forced+0xbe>
 8006f40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006f44:	a97a      	add	r1, sp, #488	; 0x1e8
 8006f46:	4620      	mov	r0, r4
 8006f48:	f00e fd63 	bl	8015a12 <memcpy>
 8006f4c:	f1ba 0f08 	cmp.w	sl, #8
 8006f50:	d106      	bne.n	8006f60 <unwind_phase2_forced+0xb8>
 8006f52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f54:	4628      	mov	r0, r5
 8006f56:	f7ff ff01 	bl	8006d5c <get_eit_entry>
 8006f5a:	2609      	movs	r6, #9
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	e7c6      	b.n	8006eee <unwind_phase2_forced+0x46>
 8006f60:	f1ba 0f07 	cmp.w	sl, #7
 8006f64:	d005      	beq.n	8006f72 <unwind_phase2_forced+0xca>
 8006f66:	2709      	movs	r7, #9
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8006f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f72:	4638      	mov	r0, r7
 8006f74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f76:	f7ff ff75 	bl	8006e64 <_Unwind_DebugHook>
 8006f7a:	a803      	add	r0, sp, #12
 8006f7c:	f000 fb86 	bl	800768c <__restore_core_regs>

08006f80 <_Unwind_GetCFA>:
 8006f80:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8006f82:	4770      	bx	lr

08006f84 <__gnu_Unwind_RaiseException>:
 8006f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f86:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006f88:	640b      	str	r3, [r1, #64]	; 0x40
 8006f8a:	1d0e      	adds	r6, r1, #4
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	4604      	mov	r4, r0
 8006f90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006f92:	b0f9      	sub	sp, #484	; 0x1e4
 8006f94:	ad01      	add	r5, sp, #4
 8006f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fa0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006fa4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006fa8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006fac:	9600      	str	r6, [sp, #0]
 8006fae:	e006      	b.n	8006fbe <__gnu_Unwind_RaiseException+0x3a>
 8006fb0:	6923      	ldr	r3, [r4, #16]
 8006fb2:	466a      	mov	r2, sp
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4798      	blx	r3
 8006fb8:	2808      	cmp	r0, #8
 8006fba:	4605      	mov	r5, r0
 8006fbc:	d108      	bne.n	8006fd0 <__gnu_Unwind_RaiseException+0x4c>
 8006fbe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f7ff fecb 	bl	8006d5c <get_eit_entry>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d0f2      	beq.n	8006fb0 <__gnu_Unwind_RaiseException+0x2c>
 8006fca:	2009      	movs	r0, #9
 8006fcc:	b079      	add	sp, #484	; 0x1e4
 8006fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd0:	4668      	mov	r0, sp
 8006fd2:	f7ff ff13 	bl	8006dfc <restore_non_core_regs>
 8006fd6:	2d06      	cmp	r5, #6
 8006fd8:	d1f7      	bne.n	8006fca <__gnu_Unwind_RaiseException+0x46>
 8006fda:	4639      	mov	r1, r7
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7ff ff43 	bl	8006e68 <unwind_phase2>
 8006fe2:	bf00      	nop

08006fe4 <__gnu_Unwind_ForcedUnwind>:
 8006fe4:	b430      	push	{r4, r5}
 8006fe6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8006fe8:	60c1      	str	r1, [r0, #12]
 8006fea:	6182      	str	r2, [r0, #24]
 8006fec:	4619      	mov	r1, r3
 8006fee:	641d      	str	r5, [r3, #64]	; 0x40
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	bc30      	pop	{r4, r5}
 8006ff4:	e758      	b.n	8006ea8 <unwind_phase2_forced>
 8006ff6:	bf00      	nop

08006ff8 <__gnu_Unwind_Resume>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	68c6      	ldr	r6, [r0, #12]
 8006ffc:	6943      	ldr	r3, [r0, #20]
 8006ffe:	640b      	str	r3, [r1, #64]	; 0x40
 8007000:	b126      	cbz	r6, 800700c <__gnu_Unwind_Resume+0x14>
 8007002:	2201      	movs	r2, #1
 8007004:	f7ff ff50 	bl	8006ea8 <unwind_phase2_forced>
 8007008:	f00e f849 	bl	801509e <abort>
 800700c:	6903      	ldr	r3, [r0, #16]
 800700e:	460a      	mov	r2, r1
 8007010:	4604      	mov	r4, r0
 8007012:	460d      	mov	r5, r1
 8007014:	4601      	mov	r1, r0
 8007016:	2002      	movs	r0, #2
 8007018:	4798      	blx	r3
 800701a:	2807      	cmp	r0, #7
 800701c:	d007      	beq.n	800702e <__gnu_Unwind_Resume+0x36>
 800701e:	2808      	cmp	r0, #8
 8007020:	d103      	bne.n	800702a <__gnu_Unwind_Resume+0x32>
 8007022:	4629      	mov	r1, r5
 8007024:	4620      	mov	r0, r4
 8007026:	f7ff ff1f 	bl	8006e68 <unwind_phase2>
 800702a:	f00e f838 	bl	801509e <abort>
 800702e:	4630      	mov	r0, r6
 8007030:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007032:	f7ff ff17 	bl	8006e64 <_Unwind_DebugHook>
 8007036:	1d28      	adds	r0, r5, #4
 8007038:	f000 fb28 	bl	800768c <__restore_core_regs>

0800703c <__gnu_Unwind_Resume_or_Rethrow>:
 800703c:	68c2      	ldr	r2, [r0, #12]
 800703e:	b11a      	cbz	r2, 8007048 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007040:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007042:	640a      	str	r2, [r1, #64]	; 0x40
 8007044:	2200      	movs	r2, #0
 8007046:	e72f      	b.n	8006ea8 <unwind_phase2_forced>
 8007048:	e79c      	b.n	8006f84 <__gnu_Unwind_RaiseException>
 800704a:	bf00      	nop

0800704c <_Unwind_Complete>:
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop

08007050 <_Unwind_DeleteException>:
 8007050:	6883      	ldr	r3, [r0, #8]
 8007052:	b113      	cbz	r3, 800705a <_Unwind_DeleteException+0xa>
 8007054:	4601      	mov	r1, r0
 8007056:	2001      	movs	r0, #1
 8007058:	4718      	bx	r3
 800705a:	4770      	bx	lr

0800705c <_Unwind_VRS_Get>:
 800705c:	b500      	push	{lr}
 800705e:	2904      	cmp	r1, #4
 8007060:	d807      	bhi.n	8007072 <_Unwind_VRS_Get+0x16>
 8007062:	e8df f001 	tbb	[pc, r1]
 8007066:	0903      	.short	0x0903
 8007068:	0906      	.short	0x0906
 800706a:	09          	.byte	0x09
 800706b:	00          	.byte	0x00
 800706c:	b90b      	cbnz	r3, 8007072 <_Unwind_VRS_Get+0x16>
 800706e:	2a0f      	cmp	r2, #15
 8007070:	d905      	bls.n	800707e <_Unwind_VRS_Get+0x22>
 8007072:	2002      	movs	r0, #2
 8007074:	f85d fb04 	ldr.w	pc, [sp], #4
 8007078:	2001      	movs	r0, #1
 800707a:	f85d fb04 	ldr.w	pc, [sp], #4
 800707e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007082:	4618      	mov	r0, r3
 8007084:	6853      	ldr	r3, [r2, #4]
 8007086:	9a01      	ldr	r2, [sp, #4]
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	f85d fb04 	ldr.w	pc, [sp], #4
 800708e:	bf00      	nop

08007090 <_Unwind_GetGR>:
 8007090:	b510      	push	{r4, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	2300      	movs	r3, #0
 8007096:	ac03      	add	r4, sp, #12
 8007098:	460a      	mov	r2, r1
 800709a:	9400      	str	r4, [sp, #0]
 800709c:	4619      	mov	r1, r3
 800709e:	f7ff ffdd 	bl	800705c <_Unwind_VRS_Get>
 80070a2:	9803      	ldr	r0, [sp, #12]
 80070a4:	b004      	add	sp, #16
 80070a6:	bd10      	pop	{r4, pc}

080070a8 <_Unwind_VRS_Set>:
 80070a8:	b500      	push	{lr}
 80070aa:	2904      	cmp	r1, #4
 80070ac:	d807      	bhi.n	80070be <_Unwind_VRS_Set+0x16>
 80070ae:	e8df f001 	tbb	[pc, r1]
 80070b2:	0903      	.short	0x0903
 80070b4:	0906      	.short	0x0906
 80070b6:	09          	.byte	0x09
 80070b7:	00          	.byte	0x00
 80070b8:	b90b      	cbnz	r3, 80070be <_Unwind_VRS_Set+0x16>
 80070ba:	2a0f      	cmp	r2, #15
 80070bc:	d905      	bls.n	80070ca <_Unwind_VRS_Set+0x22>
 80070be:	2002      	movs	r0, #2
 80070c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80070c4:	2001      	movs	r0, #1
 80070c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80070ca:	9901      	ldr	r1, [sp, #4]
 80070cc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80070d0:	6809      	ldr	r1, [r1, #0]
 80070d2:	6051      	str	r1, [r2, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80070da:	bf00      	nop

080070dc <_Unwind_SetGR>:
 80070dc:	b510      	push	{r4, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	ac04      	add	r4, sp, #16
 80070e2:	2300      	movs	r3, #0
 80070e4:	f844 2d04 	str.w	r2, [r4, #-4]!
 80070e8:	460a      	mov	r2, r1
 80070ea:	9400      	str	r4, [sp, #0]
 80070ec:	4619      	mov	r1, r3
 80070ee:	f7ff ffdb 	bl	80070a8 <_Unwind_VRS_Set>
 80070f2:	b004      	add	sp, #16
 80070f4:	bd10      	pop	{r4, pc}
 80070f6:	bf00      	nop

080070f8 <__gnu_Unwind_Backtrace>:
 80070f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80070fc:	6413      	str	r3, [r2, #64]	; 0x40
 80070fe:	1d15      	adds	r5, r2, #4
 8007100:	4607      	mov	r7, r0
 8007102:	460e      	mov	r6, r1
 8007104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007106:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800710a:	ac17      	add	r4, sp, #92	; 0x5c
 800710c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800710e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007116:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800711a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800711e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007122:	9516      	str	r5, [sp, #88]	; 0x58
 8007124:	e010      	b.n	8007148 <__gnu_Unwind_Backtrace+0x50>
 8007126:	a816      	add	r0, sp, #88	; 0x58
 8007128:	f7ff ffd8 	bl	80070dc <_Unwind_SetGR>
 800712c:	4631      	mov	r1, r6
 800712e:	a816      	add	r0, sp, #88	; 0x58
 8007130:	47b8      	blx	r7
 8007132:	aa16      	add	r2, sp, #88	; 0x58
 8007134:	4669      	mov	r1, sp
 8007136:	b978      	cbnz	r0, 8007158 <__gnu_Unwind_Backtrace+0x60>
 8007138:	9b04      	ldr	r3, [sp, #16]
 800713a:	2008      	movs	r0, #8
 800713c:	4798      	blx	r3
 800713e:	2805      	cmp	r0, #5
 8007140:	4604      	mov	r4, r0
 8007142:	d00a      	beq.n	800715a <__gnu_Unwind_Backtrace+0x62>
 8007144:	2809      	cmp	r0, #9
 8007146:	d007      	beq.n	8007158 <__gnu_Unwind_Backtrace+0x60>
 8007148:	9926      	ldr	r1, [sp, #152]	; 0x98
 800714a:	4668      	mov	r0, sp
 800714c:	f7ff fe06 	bl	8006d5c <get_eit_entry>
 8007150:	466a      	mov	r2, sp
 8007152:	210c      	movs	r1, #12
 8007154:	2800      	cmp	r0, #0
 8007156:	d0e6      	beq.n	8007126 <__gnu_Unwind_Backtrace+0x2e>
 8007158:	2409      	movs	r4, #9
 800715a:	a816      	add	r0, sp, #88	; 0x58
 800715c:	f7ff fe4e 	bl	8006dfc <restore_non_core_regs>
 8007160:	4620      	mov	r0, r4
 8007162:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007168 <__gnu_unwind_pr_common>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	460d      	mov	r5, r1
 800716e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007170:	b08b      	sub	sp, #44	; 0x2c
 8007172:	1d0c      	adds	r4, r1, #4
 8007174:	6809      	ldr	r1, [r1, #0]
 8007176:	9107      	str	r1, [sp, #28]
 8007178:	4691      	mov	r9, r2
 800717a:	9408      	str	r4, [sp, #32]
 800717c:	f000 0b03 	and.w	fp, r0, #3
 8007180:	461e      	mov	r6, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d160      	bne.n	8007248 <__gnu_unwind_pr_common+0xe0>
 8007186:	0209      	lsls	r1, r1, #8
 8007188:	2303      	movs	r3, #3
 800718a:	9107      	str	r1, [sp, #28]
 800718c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8007190:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8007194:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007196:	f1bb 0f02 	cmp.w	fp, #2
 800719a:	bf08      	it	eq
 800719c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800719e:	f013 0301 	ands.w	r3, r3, #1
 80071a2:	d140      	bne.n	8007226 <__gnu_unwind_pr_common+0xbe>
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	f000 0308 	and.w	r3, r0, #8
 80071aa:	9303      	str	r3, [sp, #12]
 80071ac:	f8d4 8000 	ldr.w	r8, [r4]
 80071b0:	f1b8 0f00 	cmp.w	r8, #0
 80071b4:	d039      	beq.n	800722a <__gnu_unwind_pr_common+0xc2>
 80071b6:	2e02      	cmp	r6, #2
 80071b8:	d043      	beq.n	8007242 <__gnu_unwind_pr_common+0xda>
 80071ba:	f8b4 8000 	ldrh.w	r8, [r4]
 80071be:	8867      	ldrh	r7, [r4, #2]
 80071c0:	3404      	adds	r4, #4
 80071c2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80071c4:	f027 0a01 	bic.w	sl, r7, #1
 80071c8:	210f      	movs	r1, #15
 80071ca:	4648      	mov	r0, r9
 80071cc:	449a      	add	sl, r3
 80071ce:	f7ff ff5f 	bl	8007090 <_Unwind_GetGR>
 80071d2:	4582      	cmp	sl, r0
 80071d4:	d833      	bhi.n	800723e <__gnu_unwind_pr_common+0xd6>
 80071d6:	f028 0301 	bic.w	r3, r8, #1
 80071da:	449a      	add	sl, r3
 80071dc:	4550      	cmp	r0, sl
 80071de:	bf2c      	ite	cs
 80071e0:	2000      	movcs	r0, #0
 80071e2:	2001      	movcc	r0, #1
 80071e4:	007f      	lsls	r7, r7, #1
 80071e6:	f007 0702 	and.w	r7, r7, #2
 80071ea:	f008 0801 	and.w	r8, r8, #1
 80071ee:	ea47 0708 	orr.w	r7, r7, r8
 80071f2:	2f01      	cmp	r7, #1
 80071f4:	d03e      	beq.n	8007274 <__gnu_unwind_pr_common+0x10c>
 80071f6:	d335      	bcc.n	8007264 <__gnu_unwind_pr_common+0xfc>
 80071f8:	2f02      	cmp	r7, #2
 80071fa:	d11c      	bne.n	8007236 <__gnu_unwind_pr_common+0xce>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007202:	9202      	str	r2, [sp, #8]
 8007204:	f1bb 0f00 	cmp.w	fp, #0
 8007208:	d176      	bne.n	80072f8 <__gnu_unwind_pr_common+0x190>
 800720a:	b128      	cbz	r0, 8007218 <__gnu_unwind_pr_common+0xb0>
 800720c:	9903      	ldr	r1, [sp, #12]
 800720e:	2900      	cmp	r1, #0
 8007210:	d07e      	beq.n	8007310 <__gnu_unwind_pr_common+0x1a8>
 8007212:	2a00      	cmp	r2, #0
 8007214:	f000 80a6 	beq.w	8007364 <__gnu_unwind_pr_common+0x1fc>
 8007218:	2b00      	cmp	r3, #0
 800721a:	db77      	blt.n	800730c <__gnu_unwind_pr_common+0x1a4>
 800721c:	9b02      	ldr	r3, [sp, #8]
 800721e:	3301      	adds	r3, #1
 8007220:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007224:	e7c2      	b.n	80071ac <__gnu_unwind_pr_common+0x44>
 8007226:	2300      	movs	r3, #0
 8007228:	9301      	str	r3, [sp, #4]
 800722a:	2e02      	cmp	r6, #2
 800722c:	dd3e      	ble.n	80072ac <__gnu_unwind_pr_common+0x144>
 800722e:	f7ff fe17 	bl	8006e60 <__gnu_unwind_24bit.isra.1>
 8007232:	2800      	cmp	r0, #0
 8007234:	d040      	beq.n	80072b8 <__gnu_unwind_pr_common+0x150>
 8007236:	2009      	movs	r0, #9
 8007238:	b00b      	add	sp, #44	; 0x2c
 800723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723e:	2000      	movs	r0, #0
 8007240:	e7d0      	b.n	80071e4 <__gnu_unwind_pr_common+0x7c>
 8007242:	6867      	ldr	r7, [r4, #4]
 8007244:	3408      	adds	r4, #8
 8007246:	e7bc      	b.n	80071c2 <__gnu_unwind_pr_common+0x5a>
 8007248:	2b02      	cmp	r3, #2
 800724a:	dca3      	bgt.n	8007194 <__gnu_unwind_pr_common+0x2c>
 800724c:	0c0b      	lsrs	r3, r1, #16
 800724e:	b2da      	uxtb	r2, r3
 8007250:	0409      	lsls	r1, r1, #16
 8007252:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8007256:	2302      	movs	r3, #2
 8007258:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800725c:	9107      	str	r1, [sp, #28]
 800725e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8007262:	e797      	b.n	8007194 <__gnu_unwind_pr_common+0x2c>
 8007264:	f1bb 0f00 	cmp.w	fp, #0
 8007268:	d002      	beq.n	8007270 <__gnu_unwind_pr_common+0x108>
 800726a:	2800      	cmp	r0, #0
 800726c:	f040 80bd 	bne.w	80073ea <__gnu_unwind_pr_common+0x282>
 8007270:	3404      	adds	r4, #4
 8007272:	e79b      	b.n	80071ac <__gnu_unwind_pr_common+0x44>
 8007274:	f1bb 0f00 	cmp.w	fp, #0
 8007278:	d125      	bne.n	80072c6 <__gnu_unwind_pr_common+0x15e>
 800727a:	b1a8      	cbz	r0, 80072a8 <__gnu_unwind_pr_common+0x140>
 800727c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007280:	1c99      	adds	r1, r3, #2
 8007282:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007286:	d0d6      	beq.n	8007236 <__gnu_unwind_pr_common+0xce>
 8007288:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800728c:	3301      	adds	r3, #1
 800728e:	9106      	str	r1, [sp, #24]
 8007290:	f000 80a3 	beq.w	80073da <__gnu_unwind_pr_common+0x272>
 8007294:	1d20      	adds	r0, r4, #4
 8007296:	f7ff fddd 	bl	8006e54 <_Unwind_decode_typeinfo_ptr.isra.0>
 800729a:	ab06      	add	r3, sp, #24
 800729c:	4601      	mov	r1, r0
 800729e:	4628      	mov	r0, r5
 80072a0:	f00b fb82 	bl	80129a8 <__cxa_type_match>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d177      	bne.n	8007398 <__gnu_unwind_pr_common+0x230>
 80072a8:	3408      	adds	r4, #8
 80072aa:	e77f      	b.n	80071ac <__gnu_unwind_pr_common+0x44>
 80072ac:	a907      	add	r1, sp, #28
 80072ae:	4648      	mov	r0, r9
 80072b0:	f000 faee 	bl	8007890 <__gnu_unwind_execute>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d1be      	bne.n	8007236 <__gnu_unwind_pr_common+0xce>
 80072b8:	9b01      	ldr	r3, [sp, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d15c      	bne.n	8007378 <__gnu_unwind_pr_common+0x210>
 80072be:	2008      	movs	r0, #8
 80072c0:	b00b      	add	sp, #44	; 0x2c
 80072c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c6:	210d      	movs	r1, #13
 80072c8:	4648      	mov	r0, r9
 80072ca:	6a2f      	ldr	r7, [r5, #32]
 80072cc:	f7ff fee0 	bl	8007090 <_Unwind_GetGR>
 80072d0:	4287      	cmp	r7, r0
 80072d2:	d1e9      	bne.n	80072a8 <__gnu_unwind_pr_common+0x140>
 80072d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80072d6:	429c      	cmp	r4, r3
 80072d8:	d1e6      	bne.n	80072a8 <__gnu_unwind_pr_common+0x140>
 80072da:	4620      	mov	r0, r4
 80072dc:	f7ff fcf0 	bl	8006cc0 <selfrel_offset31>
 80072e0:	210f      	movs	r1, #15
 80072e2:	4602      	mov	r2, r0
 80072e4:	4648      	mov	r0, r9
 80072e6:	f7ff fef9 	bl	80070dc <_Unwind_SetGR>
 80072ea:	4648      	mov	r0, r9
 80072ec:	462a      	mov	r2, r5
 80072ee:	2100      	movs	r1, #0
 80072f0:	f7ff fef4 	bl	80070dc <_Unwind_SetGR>
 80072f4:	2007      	movs	r0, #7
 80072f6:	e79f      	b.n	8007238 <__gnu_unwind_pr_common+0xd0>
 80072f8:	210d      	movs	r1, #13
 80072fa:	4648      	mov	r0, r9
 80072fc:	6a2f      	ldr	r7, [r5, #32]
 80072fe:	f7ff fec7 	bl	8007090 <_Unwind_GetGR>
 8007302:	4287      	cmp	r7, r0
 8007304:	d058      	beq.n	80073b8 <__gnu_unwind_pr_common+0x250>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	da87      	bge.n	800721c <__gnu_unwind_pr_common+0xb4>
 800730c:	3404      	adds	r4, #4
 800730e:	e785      	b.n	800721c <__gnu_unwind_pr_common+0xb4>
 8007310:	9b02      	ldr	r3, [sp, #8]
 8007312:	b33b      	cbz	r3, 8007364 <__gnu_unwind_pr_common+0x1fc>
 8007314:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007318:	1d27      	adds	r7, r4, #4
 800731a:	f8cd b010 	str.w	fp, [sp, #16]
 800731e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007322:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007326:	9605      	str	r6, [sp, #20]
 8007328:	46a3      	mov	fp, r4
 800732a:	461c      	mov	r4, r3
 800732c:	e002      	b.n	8007334 <__gnu_unwind_pr_common+0x1cc>
 800732e:	45b2      	cmp	sl, r6
 8007330:	46b0      	mov	r8, r6
 8007332:	d016      	beq.n	8007362 <__gnu_unwind_pr_common+0x1fa>
 8007334:	4638      	mov	r0, r7
 8007336:	9406      	str	r4, [sp, #24]
 8007338:	f7ff fd8c 	bl	8006e54 <_Unwind_decode_typeinfo_ptr.isra.0>
 800733c:	ab06      	add	r3, sp, #24
 800733e:	4601      	mov	r1, r0
 8007340:	2200      	movs	r2, #0
 8007342:	4628      	mov	r0, r5
 8007344:	f00b fb30 	bl	80129a8 <__cxa_type_match>
 8007348:	f108 0601 	add.w	r6, r8, #1
 800734c:	3704      	adds	r7, #4
 800734e:	2800      	cmp	r0, #0
 8007350:	d0ed      	beq.n	800732e <__gnu_unwind_pr_common+0x1c6>
 8007352:	9b02      	ldr	r3, [sp, #8]
 8007354:	9e05      	ldr	r6, [sp, #20]
 8007356:	4543      	cmp	r3, r8
 8007358:	465c      	mov	r4, fp
 800735a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800735e:	d1d2      	bne.n	8007306 <__gnu_unwind_pr_common+0x19e>
 8007360:	e000      	b.n	8007364 <__gnu_unwind_pr_common+0x1fc>
 8007362:	465c      	mov	r4, fp
 8007364:	4648      	mov	r0, r9
 8007366:	210d      	movs	r1, #13
 8007368:	f7ff fe92 	bl	8007090 <_Unwind_GetGR>
 800736c:	9b06      	ldr	r3, [sp, #24]
 800736e:	6228      	str	r0, [r5, #32]
 8007370:	62ac      	str	r4, [r5, #40]	; 0x28
 8007372:	626b      	str	r3, [r5, #36]	; 0x24
 8007374:	2006      	movs	r0, #6
 8007376:	e75f      	b.n	8007238 <__gnu_unwind_pr_common+0xd0>
 8007378:	210f      	movs	r1, #15
 800737a:	4648      	mov	r0, r9
 800737c:	f7ff fe88 	bl	8007090 <_Unwind_GetGR>
 8007380:	210e      	movs	r1, #14
 8007382:	4602      	mov	r2, r0
 8007384:	4648      	mov	r0, r9
 8007386:	f7ff fea9 	bl	80070dc <_Unwind_SetGR>
 800738a:	4648      	mov	r0, r9
 800738c:	4a29      	ldr	r2, [pc, #164]	; (8007434 <__gnu_unwind_pr_common+0x2cc>)
 800738e:	210f      	movs	r1, #15
 8007390:	f7ff fea4 	bl	80070dc <_Unwind_SetGR>
 8007394:	2007      	movs	r0, #7
 8007396:	e74f      	b.n	8007238 <__gnu_unwind_pr_common+0xd0>
 8007398:	4607      	mov	r7, r0
 800739a:	210d      	movs	r1, #13
 800739c:	4648      	mov	r0, r9
 800739e:	f7ff fe77 	bl	8007090 <_Unwind_GetGR>
 80073a2:	2f02      	cmp	r7, #2
 80073a4:	6228      	str	r0, [r5, #32]
 80073a6:	d11d      	bne.n	80073e4 <__gnu_unwind_pr_common+0x27c>
 80073a8:	462b      	mov	r3, r5
 80073aa:	9a06      	ldr	r2, [sp, #24]
 80073ac:	f843 2f2c 	str.w	r2, [r3, #44]!
 80073b0:	626b      	str	r3, [r5, #36]	; 0x24
 80073b2:	62ac      	str	r4, [r5, #40]	; 0x28
 80073b4:	2006      	movs	r0, #6
 80073b6:	e73f      	b.n	8007238 <__gnu_unwind_pr_common+0xd0>
 80073b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80073ba:	429c      	cmp	r4, r3
 80073bc:	d1a3      	bne.n	8007306 <__gnu_unwind_pr_common+0x19e>
 80073be:	2204      	movs	r2, #4
 80073c0:	2700      	movs	r7, #0
 80073c2:	18a3      	adds	r3, r4, r2
 80073c4:	9902      	ldr	r1, [sp, #8]
 80073c6:	62a9      	str	r1, [r5, #40]	; 0x28
 80073c8:	62ef      	str	r7, [r5, #44]	; 0x2c
 80073ca:	632a      	str	r2, [r5, #48]	; 0x30
 80073cc:	636b      	str	r3, [r5, #52]	; 0x34
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	42bb      	cmp	r3, r7
 80073d2:	db1d      	blt.n	8007410 <__gnu_unwind_pr_common+0x2a8>
 80073d4:	2301      	movs	r3, #1
 80073d6:	9301      	str	r3, [sp, #4]
 80073d8:	e720      	b.n	800721c <__gnu_unwind_pr_common+0xb4>
 80073da:	4648      	mov	r0, r9
 80073dc:	210d      	movs	r1, #13
 80073de:	f7ff fe57 	bl	8007090 <_Unwind_GetGR>
 80073e2:	6228      	str	r0, [r5, #32]
 80073e4:	9b06      	ldr	r3, [sp, #24]
 80073e6:	626b      	str	r3, [r5, #36]	; 0x24
 80073e8:	e7e3      	b.n	80073b2 <__gnu_unwind_pr_common+0x24a>
 80073ea:	4620      	mov	r0, r4
 80073ec:	f7ff fc68 	bl	8006cc0 <selfrel_offset31>
 80073f0:	3404      	adds	r4, #4
 80073f2:	4606      	mov	r6, r0
 80073f4:	63ac      	str	r4, [r5, #56]	; 0x38
 80073f6:	4628      	mov	r0, r5
 80073f8:	f00b fb32 	bl	8012a60 <__cxa_begin_cleanup>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f43f af1a 	beq.w	8007236 <__gnu_unwind_pr_common+0xce>
 8007402:	4648      	mov	r0, r9
 8007404:	4632      	mov	r2, r6
 8007406:	210f      	movs	r1, #15
 8007408:	f7ff fe68 	bl	80070dc <_Unwind_SetGR>
 800740c:	2007      	movs	r0, #7
 800740e:	e713      	b.n	8007238 <__gnu_unwind_pr_common+0xd0>
 8007410:	4608      	mov	r0, r1
 8007412:	3001      	adds	r0, #1
 8007414:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007418:	f7ff fc52 	bl	8006cc0 <selfrel_offset31>
 800741c:	210f      	movs	r1, #15
 800741e:	4602      	mov	r2, r0
 8007420:	4648      	mov	r0, r9
 8007422:	f7ff fe5b 	bl	80070dc <_Unwind_SetGR>
 8007426:	4648      	mov	r0, r9
 8007428:	462a      	mov	r2, r5
 800742a:	4639      	mov	r1, r7
 800742c:	f7ff fe56 	bl	80070dc <_Unwind_SetGR>
 8007430:	2007      	movs	r0, #7
 8007432:	e701      	b.n	8007238 <__gnu_unwind_pr_common+0xd0>
 8007434:	08013341 	.word	0x08013341

08007438 <__aeabi_unwind_cpp_pr0>:
 8007438:	2300      	movs	r3, #0
 800743a:	e695      	b.n	8007168 <__gnu_unwind_pr_common>

0800743c <__aeabi_unwind_cpp_pr1>:
 800743c:	2301      	movs	r3, #1
 800743e:	e693      	b.n	8007168 <__gnu_unwind_pr_common>

08007440 <__aeabi_unwind_cpp_pr2>:
 8007440:	2302      	movs	r3, #2
 8007442:	e691      	b.n	8007168 <__gnu_unwind_pr_common>

08007444 <_Unwind_VRS_Pop>:
 8007444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007446:	4604      	mov	r4, r0
 8007448:	b0c5      	sub	sp, #276	; 0x114
 800744a:	2904      	cmp	r1, #4
 800744c:	d80d      	bhi.n	800746a <_Unwind_VRS_Pop+0x26>
 800744e:	e8df f001 	tbb	[pc, r1]
 8007452:	0353      	.short	0x0353
 8007454:	310c      	.short	0x310c
 8007456:	0f          	.byte	0x0f
 8007457:	00          	.byte	0x00
 8007458:	2b01      	cmp	r3, #1
 800745a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800745e:	b295      	uxth	r5, r2
 8007460:	d162      	bne.n	8007528 <_Unwind_VRS_Pop+0xe4>
 8007462:	1972      	adds	r2, r6, r5
 8007464:	2a10      	cmp	r2, #16
 8007466:	f240 809b 	bls.w	80075a0 <_Unwind_VRS_Pop+0x15c>
 800746a:	2002      	movs	r0, #2
 800746c:	b045      	add	sp, #276	; 0x114
 800746e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1fa      	bne.n	800746a <_Unwind_VRS_Pop+0x26>
 8007474:	2a10      	cmp	r2, #16
 8007476:	d8f8      	bhi.n	800746a <_Unwind_VRS_Pop+0x26>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	06d8      	lsls	r0, r3, #27
 800747c:	f100 80c6 	bmi.w	800760c <_Unwind_VRS_Pop+0x1c8>
 8007480:	ae22      	add	r6, sp, #136	; 0x88
 8007482:	4630      	mov	r0, r6
 8007484:	9201      	str	r2, [sp, #4]
 8007486:	f000 f973 	bl	8007770 <__gnu_Unwind_Save_WMMXC>
 800748a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800748c:	9a01      	ldr	r2, [sp, #4]
 800748e:	2300      	movs	r3, #0
 8007490:	2501      	movs	r5, #1
 8007492:	fa05 f103 	lsl.w	r1, r5, r3
 8007496:	4211      	tst	r1, r2
 8007498:	d003      	beq.n	80074a2 <_Unwind_VRS_Pop+0x5e>
 800749a:	6801      	ldr	r1, [r0, #0]
 800749c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80074a0:	3004      	adds	r0, #4
 80074a2:	3301      	adds	r3, #1
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d1f4      	bne.n	8007492 <_Unwind_VRS_Pop+0x4e>
 80074a8:	63a0      	str	r0, [r4, #56]	; 0x38
 80074aa:	4630      	mov	r0, r6
 80074ac:	f000 f956 	bl	800775c <__gnu_Unwind_Restore_WMMXC>
 80074b0:	2000      	movs	r0, #0
 80074b2:	e7db      	b.n	800746c <_Unwind_VRS_Pop+0x28>
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d1d8      	bne.n	800746a <_Unwind_VRS_Pop+0x26>
 80074b8:	0c15      	lsrs	r5, r2, #16
 80074ba:	b297      	uxth	r7, r2
 80074bc:	19eb      	adds	r3, r5, r7
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d8d3      	bhi.n	800746a <_Unwind_VRS_Pop+0x26>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	071e      	lsls	r6, r3, #28
 80074c6:	f100 80b5 	bmi.w	8007634 <_Unwind_VRS_Pop+0x1f0>
 80074ca:	ae22      	add	r6, sp, #136	; 0x88
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 f923 	bl	8007718 <__gnu_Unwind_Save_WMMXD>
 80074d2:	00ed      	lsls	r5, r5, #3
 80074d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80074d6:	b14f      	cbz	r7, 80074ec <_Unwind_VRS_Pop+0xa8>
 80074d8:	3d04      	subs	r5, #4
 80074da:	1971      	adds	r1, r6, r5
 80074dc:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 80074e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80074e8:	4283      	cmp	r3, r0
 80074ea:	d1f9      	bne.n	80074e0 <_Unwind_VRS_Pop+0x9c>
 80074ec:	4630      	mov	r0, r6
 80074ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80074f0:	f000 f8f0 	bl	80076d4 <__gnu_Unwind_Restore_WMMXD>
 80074f4:	2000      	movs	r0, #0
 80074f6:	e7b9      	b.n	800746c <_Unwind_VRS_Pop+0x28>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1b6      	bne.n	800746a <_Unwind_VRS_Pop+0x26>
 80074fc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80074fe:	b297      	uxth	r7, r2
 8007500:	1d20      	adds	r0, r4, #4
 8007502:	2601      	movs	r6, #1
 8007504:	fa06 f103 	lsl.w	r1, r6, r3
 8007508:	4239      	tst	r1, r7
 800750a:	f103 0301 	add.w	r3, r3, #1
 800750e:	d002      	beq.n	8007516 <_Unwind_VRS_Pop+0xd2>
 8007510:	6829      	ldr	r1, [r5, #0]
 8007512:	6001      	str	r1, [r0, #0]
 8007514:	3504      	adds	r5, #4
 8007516:	2b10      	cmp	r3, #16
 8007518:	f100 0004 	add.w	r0, r0, #4
 800751c:	d1f2      	bne.n	8007504 <_Unwind_VRS_Pop+0xc0>
 800751e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8007522:	d13b      	bne.n	800759c <_Unwind_VRS_Pop+0x158>
 8007524:	63a5      	str	r5, [r4, #56]	; 0x38
 8007526:	e7a1      	b.n	800746c <_Unwind_VRS_Pop+0x28>
 8007528:	2b05      	cmp	r3, #5
 800752a:	d19e      	bne.n	800746a <_Unwind_VRS_Pop+0x26>
 800752c:	1977      	adds	r7, r6, r5
 800752e:	2f20      	cmp	r7, #32
 8007530:	d89b      	bhi.n	800746a <_Unwind_VRS_Pop+0x26>
 8007532:	2e0f      	cmp	r6, #15
 8007534:	d966      	bls.n	8007604 <_Unwind_VRS_Pop+0x1c0>
 8007536:	462f      	mov	r7, r5
 8007538:	2d00      	cmp	r5, #0
 800753a:	d13a      	bne.n	80075b2 <_Unwind_VRS_Pop+0x16e>
 800753c:	462a      	mov	r2, r5
 800753e:	2700      	movs	r7, #0
 8007540:	2a00      	cmp	r2, #0
 8007542:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007544:	dd72      	ble.n	800762c <_Unwind_VRS_Pop+0x1e8>
 8007546:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800754a:	4601      	mov	r1, r0
 800754c:	a844      	add	r0, sp, #272	; 0x110
 800754e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8007552:	388c      	subs	r0, #140	; 0x8c
 8007554:	f851 5b04 	ldr.w	r5, [r1], #4
 8007558:	f840 5f04 	str.w	r5, [r0, #4]!
 800755c:	4291      	cmp	r1, r2
 800755e:	d1f9      	bne.n	8007554 <_Unwind_VRS_Pop+0x110>
 8007560:	4608      	mov	r0, r1
 8007562:	b197      	cbz	r7, 800758a <_Unwind_VRS_Pop+0x146>
 8007564:	2e10      	cmp	r6, #16
 8007566:	4632      	mov	r2, r6
 8007568:	a944      	add	r1, sp, #272	; 0x110
 800756a:	bf38      	it	cc
 800756c:	2210      	movcc	r2, #16
 800756e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007572:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8007576:	0079      	lsls	r1, r7, #1
 8007578:	3a04      	subs	r2, #4
 800757a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800757e:	f850 5b04 	ldr.w	r5, [r0], #4
 8007582:	f842 5f04 	str.w	r5, [r2, #4]!
 8007586:	4288      	cmp	r0, r1
 8007588:	d1f9      	bne.n	800757e <_Unwind_VRS_Pop+0x13a>
 800758a:	2b01      	cmp	r3, #1
 800758c:	d048      	beq.n	8007620 <_Unwind_VRS_Pop+0x1dc>
 800758e:	2e0f      	cmp	r6, #15
 8007590:	63a1      	str	r1, [r4, #56]	; 0x38
 8007592:	d933      	bls.n	80075fc <_Unwind_VRS_Pop+0x1b8>
 8007594:	b117      	cbz	r7, 800759c <_Unwind_VRS_Pop+0x158>
 8007596:	a802      	add	r0, sp, #8
 8007598:	f000 f894 	bl	80076c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800759c:	2000      	movs	r0, #0
 800759e:	e765      	b.n	800746c <_Unwind_VRS_Pop+0x28>
 80075a0:	2e0f      	cmp	r6, #15
 80075a2:	f63f af62 	bhi.w	800746a <_Unwind_VRS_Pop+0x26>
 80075a6:	2700      	movs	r7, #0
 80075a8:	6822      	ldr	r2, [r4, #0]
 80075aa:	07d1      	lsls	r1, r2, #31
 80075ac:	d417      	bmi.n	80075de <_Unwind_VRS_Pop+0x19a>
 80075ae:	2f00      	cmp	r7, #0
 80075b0:	d060      	beq.n	8007674 <_Unwind_VRS_Pop+0x230>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	0751      	lsls	r1, r2, #29
 80075b6:	d445      	bmi.n	8007644 <_Unwind_VRS_Pop+0x200>
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d04d      	beq.n	8007658 <_Unwind_VRS_Pop+0x214>
 80075bc:	2e0f      	cmp	r6, #15
 80075be:	d806      	bhi.n	80075ce <_Unwind_VRS_Pop+0x18a>
 80075c0:	a822      	add	r0, sp, #136	; 0x88
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	f000 f87a 	bl	80076bc <__gnu_Unwind_Save_VFP_D>
 80075c8:	9b01      	ldr	r3, [sp, #4]
 80075ca:	2f00      	cmp	r7, #0
 80075cc:	d0b6      	beq.n	800753c <_Unwind_VRS_Pop+0xf8>
 80075ce:	a802      	add	r0, sp, #8
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	f000 f87b 	bl	80076cc <__gnu_Unwind_Save_VFP_D_16_to_31>
 80075d6:	9b01      	ldr	r3, [sp, #4]
 80075d8:	f1c6 0210 	rsb	r2, r6, #16
 80075dc:	e7b0      	b.n	8007540 <_Unwind_VRS_Pop+0xfc>
 80075de:	f022 0101 	bic.w	r1, r2, #1
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	6021      	str	r1, [r4, #0]
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	4620      	mov	r0, r4
 80075ea:	d03b      	beq.n	8007664 <_Unwind_VRS_Pop+0x220>
 80075ec:	f022 0203 	bic.w	r2, r2, #3
 80075f0:	f840 2b48 	str.w	r2, [r0], #72
 80075f4:	f000 f85a 	bl	80076ac <__gnu_Unwind_Save_VFP>
 80075f8:	9b01      	ldr	r3, [sp, #4]
 80075fa:	e7d8      	b.n	80075ae <_Unwind_VRS_Pop+0x16a>
 80075fc:	a822      	add	r0, sp, #136	; 0x88
 80075fe:	f000 f859 	bl	80076b4 <__gnu_Unwind_Restore_VFP_D>
 8007602:	e7c7      	b.n	8007594 <_Unwind_VRS_Pop+0x150>
 8007604:	2f10      	cmp	r7, #16
 8007606:	d9ce      	bls.n	80075a6 <_Unwind_VRS_Pop+0x162>
 8007608:	3f10      	subs	r7, #16
 800760a:	e7cd      	b.n	80075a8 <_Unwind_VRS_Pop+0x164>
 800760c:	f023 0310 	bic.w	r3, r3, #16
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007616:	9201      	str	r2, [sp, #4]
 8007618:	f000 f8aa 	bl	8007770 <__gnu_Unwind_Save_WMMXC>
 800761c:	9a01      	ldr	r2, [sp, #4]
 800761e:	e72f      	b.n	8007480 <_Unwind_VRS_Pop+0x3c>
 8007620:	3104      	adds	r1, #4
 8007622:	63a1      	str	r1, [r4, #56]	; 0x38
 8007624:	a822      	add	r0, sp, #136	; 0x88
 8007626:	f000 f83d 	bl	80076a4 <__gnu_Unwind_Restore_VFP>
 800762a:	e7b7      	b.n	800759c <_Unwind_VRS_Pop+0x158>
 800762c:	2f00      	cmp	r7, #0
 800762e:	d199      	bne.n	8007564 <_Unwind_VRS_Pop+0x120>
 8007630:	4601      	mov	r1, r0
 8007632:	e7aa      	b.n	800758a <_Unwind_VRS_Pop+0x146>
 8007634:	f023 0308 	bic.w	r3, r3, #8
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800763e:	f000 f86b 	bl	8007718 <__gnu_Unwind_Save_WMMXD>
 8007642:	e742      	b.n	80074ca <_Unwind_VRS_Pop+0x86>
 8007644:	4620      	mov	r0, r4
 8007646:	f022 0204 	bic.w	r2, r2, #4
 800764a:	f840 2bd0 	str.w	r2, [r0], #208
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	f000 f83c 	bl	80076cc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	e7af      	b.n	80075b8 <_Unwind_VRS_Pop+0x174>
 8007658:	a822      	add	r0, sp, #136	; 0x88
 800765a:	9301      	str	r3, [sp, #4]
 800765c:	f000 f826 	bl	80076ac <__gnu_Unwind_Save_VFP>
 8007660:	9b01      	ldr	r3, [sp, #4]
 8007662:	e7b9      	b.n	80075d8 <_Unwind_VRS_Pop+0x194>
 8007664:	f041 0102 	orr.w	r1, r1, #2
 8007668:	f840 1b48 	str.w	r1, [r0], #72
 800766c:	f000 f826 	bl	80076bc <__gnu_Unwind_Save_VFP_D>
 8007670:	9b01      	ldr	r3, [sp, #4]
 8007672:	e79c      	b.n	80075ae <_Unwind_VRS_Pop+0x16a>
 8007674:	2b01      	cmp	r3, #1
 8007676:	d003      	beq.n	8007680 <_Unwind_VRS_Pop+0x23c>
 8007678:	2e0f      	cmp	r6, #15
 800767a:	f63f af5f 	bhi.w	800753c <_Unwind_VRS_Pop+0xf8>
 800767e:	e79f      	b.n	80075c0 <_Unwind_VRS_Pop+0x17c>
 8007680:	a822      	add	r0, sp, #136	; 0x88
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	f000 f812 	bl	80076ac <__gnu_Unwind_Save_VFP>
 8007688:	9b01      	ldr	r3, [sp, #4]
 800768a:	e757      	b.n	800753c <_Unwind_VRS_Pop+0xf8>

0800768c <__restore_core_regs>:
 800768c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8007690:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8007694:	469c      	mov	ip, r3
 8007696:	46a6      	mov	lr, r4
 8007698:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800769c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80076a0:	46e5      	mov	sp, ip
 80076a2:	bd00      	pop	{pc}

080076a4 <__gnu_Unwind_Restore_VFP>:
 80076a4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop

080076ac <__gnu_Unwind_Save_VFP>:
 80076ac:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop

080076b4 <__gnu_Unwind_Restore_VFP_D>:
 80076b4:	ec90 0b20 	vldmia	r0, {d0-d15}
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop

080076bc <__gnu_Unwind_Save_VFP_D>:
 80076bc:	ec80 0b20 	vstmia	r0, {d0-d15}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop

080076c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80076c4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop

080076cc <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80076cc:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop

080076d4 <__gnu_Unwind_Restore_WMMXD>:
 80076d4:	ecf0 0102 	ldfe	f0, [r0], #8
 80076d8:	ecf0 1102 	ldfe	f1, [r0], #8
 80076dc:	ecf0 2102 	ldfe	f2, [r0], #8
 80076e0:	ecf0 3102 	ldfe	f3, [r0], #8
 80076e4:	ecf0 4102 	ldfe	f4, [r0], #8
 80076e8:	ecf0 5102 	ldfe	f5, [r0], #8
 80076ec:	ecf0 6102 	ldfe	f6, [r0], #8
 80076f0:	ecf0 7102 	ldfe	f7, [r0], #8
 80076f4:	ecf0 8102 	ldfp	f0, [r0], #8
 80076f8:	ecf0 9102 	ldfp	f1, [r0], #8
 80076fc:	ecf0 a102 	ldfp	f2, [r0], #8
 8007700:	ecf0 b102 	ldfp	f3, [r0], #8
 8007704:	ecf0 c102 	ldfp	f4, [r0], #8
 8007708:	ecf0 d102 	ldfp	f5, [r0], #8
 800770c:	ecf0 e102 	ldfp	f6, [r0], #8
 8007710:	ecf0 f102 	ldfp	f7, [r0], #8
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop

08007718 <__gnu_Unwind_Save_WMMXD>:
 8007718:	ece0 0102 	stfe	f0, [r0], #8
 800771c:	ece0 1102 	stfe	f1, [r0], #8
 8007720:	ece0 2102 	stfe	f2, [r0], #8
 8007724:	ece0 3102 	stfe	f3, [r0], #8
 8007728:	ece0 4102 	stfe	f4, [r0], #8
 800772c:	ece0 5102 	stfe	f5, [r0], #8
 8007730:	ece0 6102 	stfe	f6, [r0], #8
 8007734:	ece0 7102 	stfe	f7, [r0], #8
 8007738:	ece0 8102 	stfp	f0, [r0], #8
 800773c:	ece0 9102 	stfp	f1, [r0], #8
 8007740:	ece0 a102 	stfp	f2, [r0], #8
 8007744:	ece0 b102 	stfp	f3, [r0], #8
 8007748:	ece0 c102 	stfp	f4, [r0], #8
 800774c:	ece0 d102 	stfp	f5, [r0], #8
 8007750:	ece0 e102 	stfp	f6, [r0], #8
 8007754:	ece0 f102 	stfp	f7, [r0], #8
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop

0800775c <__gnu_Unwind_Restore_WMMXC>:
 800775c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8007760:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8007764:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8007768:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <__gnu_Unwind_Save_WMMXC>:
 8007770:	fca0 8101 	stc2	1, cr8, [r0], #4
 8007774:	fca0 9101 	stc2	1, cr9, [r0], #4
 8007778:	fca0 a101 	stc2	1, cr10, [r0], #4
 800777c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop

08007784 <_Unwind_RaiseException>:
 8007784:	46ec      	mov	ip, sp
 8007786:	b500      	push	{lr}
 8007788:	e92d 5000 	stmdb	sp!, {ip, lr}
 800778c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007790:	f04f 0300 	mov.w	r3, #0
 8007794:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007798:	a901      	add	r1, sp, #4
 800779a:	f7ff fbf3 	bl	8006f84 <__gnu_Unwind_RaiseException>
 800779e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80077a2:	b012      	add	sp, #72	; 0x48
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop

080077a8 <_Unwind_Resume>:
 80077a8:	46ec      	mov	ip, sp
 80077aa:	b500      	push	{lr}
 80077ac:	e92d 5000 	stmdb	sp!, {ip, lr}
 80077b0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80077b4:	f04f 0300 	mov.w	r3, #0
 80077b8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80077bc:	a901      	add	r1, sp, #4
 80077be:	f7ff fc1b 	bl	8006ff8 <__gnu_Unwind_Resume>
 80077c2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80077c6:	b012      	add	sp, #72	; 0x48
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop

080077cc <_Unwind_Resume_or_Rethrow>:
 80077cc:	46ec      	mov	ip, sp
 80077ce:	b500      	push	{lr}
 80077d0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80077d4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80077e0:	a901      	add	r1, sp, #4
 80077e2:	f7ff fc2b 	bl	800703c <__gnu_Unwind_Resume_or_Rethrow>
 80077e6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80077ea:	b012      	add	sp, #72	; 0x48
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop

080077f0 <_Unwind_ForcedUnwind>:
 80077f0:	46ec      	mov	ip, sp
 80077f2:	b500      	push	{lr}
 80077f4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80077f8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007804:	ab01      	add	r3, sp, #4
 8007806:	f7ff fbed 	bl	8006fe4 <__gnu_Unwind_ForcedUnwind>
 800780a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800780e:	b012      	add	sp, #72	; 0x48
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop

08007814 <_Unwind_Backtrace>:
 8007814:	46ec      	mov	ip, sp
 8007816:	b500      	push	{lr}
 8007818:	e92d 5000 	stmdb	sp!, {ip, lr}
 800781c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007828:	aa01      	add	r2, sp, #4
 800782a:	f7ff fc65 	bl	80070f8 <__gnu_Unwind_Backtrace>
 800782e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007832:	b012      	add	sp, #72	; 0x48
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop

08007838 <next_unwind_byte>:
 8007838:	7a02      	ldrb	r2, [r0, #8]
 800783a:	b91a      	cbnz	r2, 8007844 <next_unwind_byte+0xc>
 800783c:	7a43      	ldrb	r3, [r0, #9]
 800783e:	b943      	cbnz	r3, 8007852 <next_unwind_byte+0x1a>
 8007840:	20b0      	movs	r0, #176	; 0xb0
 8007842:	4770      	bx	lr
 8007844:	6803      	ldr	r3, [r0, #0]
 8007846:	3a01      	subs	r2, #1
 8007848:	7202      	strb	r2, [r0, #8]
 800784a:	021a      	lsls	r2, r3, #8
 800784c:	6002      	str	r2, [r0, #0]
 800784e:	0e18      	lsrs	r0, r3, #24
 8007850:	4770      	bx	lr
 8007852:	6842      	ldr	r2, [r0, #4]
 8007854:	3b01      	subs	r3, #1
 8007856:	b410      	push	{r4}
 8007858:	7243      	strb	r3, [r0, #9]
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	2103      	movs	r1, #3
 800785e:	1d14      	adds	r4, r2, #4
 8007860:	7201      	strb	r1, [r0, #8]
 8007862:	021a      	lsls	r2, r3, #8
 8007864:	6044      	str	r4, [r0, #4]
 8007866:	6002      	str	r2, [r0, #0]
 8007868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800786c:	0e18      	lsrs	r0, r3, #24
 800786e:	4770      	bx	lr

08007870 <_Unwind_GetGR.constprop.0>:
 8007870:	b500      	push	{lr}
 8007872:	b085      	sub	sp, #20
 8007874:	aa03      	add	r2, sp, #12
 8007876:	2300      	movs	r3, #0
 8007878:	9200      	str	r2, [sp, #0]
 800787a:	4619      	mov	r1, r3
 800787c:	220c      	movs	r2, #12
 800787e:	f7ff fbed 	bl	800705c <_Unwind_VRS_Get>
 8007882:	9803      	ldr	r0, [sp, #12]
 8007884:	b005      	add	sp, #20
 8007886:	f85d fb04 	ldr.w	pc, [sp], #4
 800788a:	bf00      	nop

0800788c <unwind_UCB_from_context>:
 800788c:	e7f0      	b.n	8007870 <_Unwind_GetGR.constprop.0>
 800788e:	bf00      	nop

08007890 <__gnu_unwind_execute>:
 8007890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007894:	4606      	mov	r6, r0
 8007896:	b085      	sub	sp, #20
 8007898:	460f      	mov	r7, r1
 800789a:	f04f 0800 	mov.w	r8, #0
 800789e:	4638      	mov	r0, r7
 80078a0:	f7ff ffca 	bl	8007838 <next_unwind_byte>
 80078a4:	28b0      	cmp	r0, #176	; 0xb0
 80078a6:	4604      	mov	r4, r0
 80078a8:	d023      	beq.n	80078f2 <__gnu_unwind_execute+0x62>
 80078aa:	0605      	lsls	r5, r0, #24
 80078ac:	d427      	bmi.n	80078fe <__gnu_unwind_execute+0x6e>
 80078ae:	2300      	movs	r3, #0
 80078b0:	f10d 090c 	add.w	r9, sp, #12
 80078b4:	4619      	mov	r1, r3
 80078b6:	0085      	lsls	r5, r0, #2
 80078b8:	220d      	movs	r2, #13
 80078ba:	f8cd 9000 	str.w	r9, [sp]
 80078be:	4630      	mov	r0, r6
 80078c0:	f7ff fbcc 	bl	800705c <_Unwind_VRS_Get>
 80078c4:	b2ed      	uxtb	r5, r5
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	f8cd 9000 	str.w	r9, [sp]
 80078cc:	0660      	lsls	r0, r4, #25
 80078ce:	f105 0504 	add.w	r5, r5, #4
 80078d2:	bf4c      	ite	mi
 80078d4:	1b5d      	submi	r5, r3, r5
 80078d6:	18ed      	addpl	r5, r5, r3
 80078d8:	2300      	movs	r3, #0
 80078da:	4619      	mov	r1, r3
 80078dc:	220d      	movs	r2, #13
 80078de:	4630      	mov	r0, r6
 80078e0:	9503      	str	r5, [sp, #12]
 80078e2:	f7ff fbe1 	bl	80070a8 <_Unwind_VRS_Set>
 80078e6:	4638      	mov	r0, r7
 80078e8:	f7ff ffa6 	bl	8007838 <next_unwind_byte>
 80078ec:	28b0      	cmp	r0, #176	; 0xb0
 80078ee:	4604      	mov	r4, r0
 80078f0:	d1db      	bne.n	80078aa <__gnu_unwind_execute+0x1a>
 80078f2:	f1b8 0f00 	cmp.w	r8, #0
 80078f6:	f000 8095 	beq.w	8007a24 <__gnu_unwind_execute+0x194>
 80078fa:	2000      	movs	r0, #0
 80078fc:	e01c      	b.n	8007938 <__gnu_unwind_execute+0xa8>
 80078fe:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8007902:	2b80      	cmp	r3, #128	; 0x80
 8007904:	d05d      	beq.n	80079c2 <__gnu_unwind_execute+0x132>
 8007906:	2b90      	cmp	r3, #144	; 0x90
 8007908:	d019      	beq.n	800793e <__gnu_unwind_execute+0xae>
 800790a:	2ba0      	cmp	r3, #160	; 0xa0
 800790c:	d02c      	beq.n	8007968 <__gnu_unwind_execute+0xd8>
 800790e:	2bb0      	cmp	r3, #176	; 0xb0
 8007910:	d03f      	beq.n	8007992 <__gnu_unwind_execute+0x102>
 8007912:	2bc0      	cmp	r3, #192	; 0xc0
 8007914:	d06c      	beq.n	80079f0 <__gnu_unwind_execute+0x160>
 8007916:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800791a:	2bd0      	cmp	r3, #208	; 0xd0
 800791c:	d10b      	bne.n	8007936 <__gnu_unwind_execute+0xa6>
 800791e:	f000 0207 	and.w	r2, r0, #7
 8007922:	3201      	adds	r2, #1
 8007924:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007928:	2305      	movs	r3, #5
 800792a:	2101      	movs	r1, #1
 800792c:	4630      	mov	r0, r6
 800792e:	f7ff fd89 	bl	8007444 <_Unwind_VRS_Pop>
 8007932:	2800      	cmp	r0, #0
 8007934:	d0b3      	beq.n	800789e <__gnu_unwind_execute+0xe>
 8007936:	2009      	movs	r0, #9
 8007938:	b005      	add	sp, #20
 800793a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800793e:	f000 030d 	and.w	r3, r0, #13
 8007942:	2b0d      	cmp	r3, #13
 8007944:	d0f7      	beq.n	8007936 <__gnu_unwind_execute+0xa6>
 8007946:	ad03      	add	r5, sp, #12
 8007948:	2300      	movs	r3, #0
 800794a:	f000 020f 	and.w	r2, r0, #15
 800794e:	4619      	mov	r1, r3
 8007950:	9500      	str	r5, [sp, #0]
 8007952:	4630      	mov	r0, r6
 8007954:	f7ff fb82 	bl	800705c <_Unwind_VRS_Get>
 8007958:	2300      	movs	r3, #0
 800795a:	9500      	str	r5, [sp, #0]
 800795c:	4619      	mov	r1, r3
 800795e:	220d      	movs	r2, #13
 8007960:	4630      	mov	r0, r6
 8007962:	f7ff fba1 	bl	80070a8 <_Unwind_VRS_Set>
 8007966:	e79a      	b.n	800789e <__gnu_unwind_execute+0xe>
 8007968:	43c2      	mvns	r2, r0
 800796a:	f002 0307 	and.w	r3, r2, #7
 800796e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8007972:	411a      	asrs	r2, r3
 8007974:	0701      	lsls	r1, r0, #28
 8007976:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	bf48      	it	mi
 8007980:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8007984:	4619      	mov	r1, r3
 8007986:	4630      	mov	r0, r6
 8007988:	f7ff fd5c 	bl	8007444 <_Unwind_VRS_Pop>
 800798c:	2800      	cmp	r0, #0
 800798e:	d1d2      	bne.n	8007936 <__gnu_unwind_execute+0xa6>
 8007990:	e785      	b.n	800789e <__gnu_unwind_execute+0xe>
 8007992:	28b1      	cmp	r0, #177	; 0xb1
 8007994:	d057      	beq.n	8007a46 <__gnu_unwind_execute+0x1b6>
 8007996:	28b2      	cmp	r0, #178	; 0xb2
 8007998:	d068      	beq.n	8007a6c <__gnu_unwind_execute+0x1dc>
 800799a:	28b3      	cmp	r0, #179	; 0xb3
 800799c:	f000 8095 	beq.w	8007aca <__gnu_unwind_execute+0x23a>
 80079a0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80079a4:	2bb4      	cmp	r3, #180	; 0xb4
 80079a6:	d0c6      	beq.n	8007936 <__gnu_unwind_execute+0xa6>
 80079a8:	f000 0207 	and.w	r2, r0, #7
 80079ac:	3201      	adds	r2, #1
 80079ae:	2301      	movs	r3, #1
 80079b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80079b4:	4619      	mov	r1, r3
 80079b6:	4630      	mov	r0, r6
 80079b8:	f7ff fd44 	bl	8007444 <_Unwind_VRS_Pop>
 80079bc:	2800      	cmp	r0, #0
 80079be:	d1ba      	bne.n	8007936 <__gnu_unwind_execute+0xa6>
 80079c0:	e76d      	b.n	800789e <__gnu_unwind_execute+0xe>
 80079c2:	4638      	mov	r0, r7
 80079c4:	f7ff ff38 	bl	8007838 <next_unwind_byte>
 80079c8:	0224      	lsls	r4, r4, #8
 80079ca:	4304      	orrs	r4, r0
 80079cc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80079d0:	d0b1      	beq.n	8007936 <__gnu_unwind_execute+0xa6>
 80079d2:	0124      	lsls	r4, r4, #4
 80079d4:	2300      	movs	r3, #0
 80079d6:	b2a2      	uxth	r2, r4
 80079d8:	4619      	mov	r1, r3
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff fd32 	bl	8007444 <_Unwind_VRS_Pop>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d1a8      	bne.n	8007936 <__gnu_unwind_execute+0xa6>
 80079e4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80079e8:	bf18      	it	ne
 80079ea:	f04f 0801 	movne.w	r8, #1
 80079ee:	e756      	b.n	800789e <__gnu_unwind_execute+0xe>
 80079f0:	28c6      	cmp	r0, #198	; 0xc6
 80079f2:	d07d      	beq.n	8007af0 <__gnu_unwind_execute+0x260>
 80079f4:	28c7      	cmp	r0, #199	; 0xc7
 80079f6:	f000 8086 	beq.w	8007b06 <__gnu_unwind_execute+0x276>
 80079fa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80079fe:	2bc0      	cmp	r3, #192	; 0xc0
 8007a00:	f000 8094 	beq.w	8007b2c <__gnu_unwind_execute+0x29c>
 8007a04:	28c8      	cmp	r0, #200	; 0xc8
 8007a06:	f000 809f 	beq.w	8007b48 <__gnu_unwind_execute+0x2b8>
 8007a0a:	28c9      	cmp	r0, #201	; 0xc9
 8007a0c:	d193      	bne.n	8007936 <__gnu_unwind_execute+0xa6>
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f7ff ff12 	bl	8007838 <next_unwind_byte>
 8007a14:	0302      	lsls	r2, r0, #12
 8007a16:	f000 000f 	and.w	r0, r0, #15
 8007a1a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8007a1e:	3001      	adds	r0, #1
 8007a20:	4302      	orrs	r2, r0
 8007a22:	e781      	b.n	8007928 <__gnu_unwind_execute+0x98>
 8007a24:	ac03      	add	r4, sp, #12
 8007a26:	4643      	mov	r3, r8
 8007a28:	220e      	movs	r2, #14
 8007a2a:	4641      	mov	r1, r8
 8007a2c:	9400      	str	r4, [sp, #0]
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f7ff fb14 	bl	800705c <_Unwind_VRS_Get>
 8007a34:	9400      	str	r4, [sp, #0]
 8007a36:	4630      	mov	r0, r6
 8007a38:	4643      	mov	r3, r8
 8007a3a:	220f      	movs	r2, #15
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	f7ff fb33 	bl	80070a8 <_Unwind_VRS_Set>
 8007a42:	4640      	mov	r0, r8
 8007a44:	e778      	b.n	8007938 <__gnu_unwind_execute+0xa8>
 8007a46:	4638      	mov	r0, r7
 8007a48:	f7ff fef6 	bl	8007838 <next_unwind_byte>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f43f af72 	beq.w	8007936 <__gnu_unwind_execute+0xa6>
 8007a52:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8007a56:	f47f af6e 	bne.w	8007936 <__gnu_unwind_execute+0xa6>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f7ff fcf0 	bl	8007444 <_Unwind_VRS_Pop>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f47f af66 	bne.w	8007936 <__gnu_unwind_execute+0xa6>
 8007a6a:	e718      	b.n	800789e <__gnu_unwind_execute+0xe>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f10d 090c 	add.w	r9, sp, #12
 8007a72:	220d      	movs	r2, #13
 8007a74:	4619      	mov	r1, r3
 8007a76:	f8cd 9000 	str.w	r9, [sp]
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7ff faee 	bl	800705c <_Unwind_VRS_Get>
 8007a80:	4638      	mov	r0, r7
 8007a82:	f7ff fed9 	bl	8007838 <next_unwind_byte>
 8007a86:	0602      	lsls	r2, r0, #24
 8007a88:	f04f 0402 	mov.w	r4, #2
 8007a8c:	d50c      	bpl.n	8007aa8 <__gnu_unwind_execute+0x218>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007a94:	40a0      	lsls	r0, r4
 8007a96:	4403      	add	r3, r0
 8007a98:	4638      	mov	r0, r7
 8007a9a:	9303      	str	r3, [sp, #12]
 8007a9c:	f7ff fecc 	bl	8007838 <next_unwind_byte>
 8007aa0:	0603      	lsls	r3, r0, #24
 8007aa2:	f104 0407 	add.w	r4, r4, #7
 8007aa6:	d4f2      	bmi.n	8007a8e <__gnu_unwind_execute+0x1fe>
 8007aa8:	9b03      	ldr	r3, [sp, #12]
 8007aaa:	f8cd 9000 	str.w	r9, [sp]
 8007aae:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8007ab2:	40a2      	lsls	r2, r4
 8007ab4:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4414      	add	r4, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	220d      	movs	r2, #13
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	9403      	str	r4, [sp, #12]
 8007ac4:	f7ff faf0 	bl	80070a8 <_Unwind_VRS_Set>
 8007ac8:	e6e9      	b.n	800789e <__gnu_unwind_execute+0xe>
 8007aca:	4638      	mov	r0, r7
 8007acc:	f7ff feb4 	bl	8007838 <next_unwind_byte>
 8007ad0:	0301      	lsls	r1, r0, #12
 8007ad2:	f000 000f 	and.w	r0, r0, #15
 8007ad6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8007ada:	1c42      	adds	r2, r0, #1
 8007adc:	2301      	movs	r3, #1
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f7ff fcae 	bl	8007444 <_Unwind_VRS_Pop>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f47f af24 	bne.w	8007936 <__gnu_unwind_execute+0xa6>
 8007aee:	e6d6      	b.n	800789e <__gnu_unwind_execute+0xe>
 8007af0:	4638      	mov	r0, r7
 8007af2:	f7ff fea1 	bl	8007838 <next_unwind_byte>
 8007af6:	0301      	lsls	r1, r0, #12
 8007af8:	f000 000f 	and.w	r0, r0, #15
 8007afc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8007b00:	1c42      	adds	r2, r0, #1
 8007b02:	2303      	movs	r3, #3
 8007b04:	e7eb      	b.n	8007ade <__gnu_unwind_execute+0x24e>
 8007b06:	4638      	mov	r0, r7
 8007b08:	f7ff fe96 	bl	8007838 <next_unwind_byte>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	f43f af12 	beq.w	8007936 <__gnu_unwind_execute+0xa6>
 8007b12:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8007b16:	f47f af0e 	bne.w	8007936 <__gnu_unwind_execute+0xa6>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	2104      	movs	r1, #4
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7ff fc90 	bl	8007444 <_Unwind_VRS_Pop>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f47f af06 	bne.w	8007936 <__gnu_unwind_execute+0xa6>
 8007b2a:	e6b8      	b.n	800789e <__gnu_unwind_execute+0xe>
 8007b2c:	f000 020f 	and.w	r2, r0, #15
 8007b30:	3201      	adds	r2, #1
 8007b32:	2303      	movs	r3, #3
 8007b34:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7ff fc82 	bl	8007444 <_Unwind_VRS_Pop>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f47f aef8 	bne.w	8007936 <__gnu_unwind_execute+0xa6>
 8007b46:	e6aa      	b.n	800789e <__gnu_unwind_execute+0xe>
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f7ff fe75 	bl	8007838 <next_unwind_byte>
 8007b4e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8007b52:	f000 030f 	and.w	r3, r0, #15
 8007b56:	3210      	adds	r2, #16
 8007b58:	3301      	adds	r3, #1
 8007b5a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8007b5e:	e6e3      	b.n	8007928 <__gnu_unwind_execute+0x98>

08007b60 <__gnu_unwind_frame>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007b64:	b084      	sub	sp, #16
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	2003      	movs	r0, #3
 8007b6a:	f88d 000c 	strb.w	r0, [sp, #12]
 8007b6e:	79dc      	ldrb	r4, [r3, #7]
 8007b70:	f88d 400d 	strb.w	r4, [sp, #13]
 8007b74:	0212      	lsls	r2, r2, #8
 8007b76:	3308      	adds	r3, #8
 8007b78:	4608      	mov	r0, r1
 8007b7a:	a901      	add	r1, sp, #4
 8007b7c:	9201      	str	r2, [sp, #4]
 8007b7e:	9302      	str	r3, [sp, #8]
 8007b80:	f7ff fe86 	bl	8007890 <__gnu_unwind_execute>
 8007b84:	b004      	add	sp, #16
 8007b86:	bd10      	pop	{r4, pc}

08007b88 <_Unwind_GetRegionStart>:
 8007b88:	b508      	push	{r3, lr}
 8007b8a:	f7ff fe7f 	bl	800788c <unwind_UCB_from_context>
 8007b8e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007b90:	bd08      	pop	{r3, pc}
 8007b92:	bf00      	nop

08007b94 <_Unwind_GetLanguageSpecificData>:
 8007b94:	b508      	push	{r3, lr}
 8007b96:	f7ff fe79 	bl	800788c <unwind_UCB_from_context>
 8007b9a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007b9c:	79c3      	ldrb	r3, [r0, #7]
 8007b9e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007ba2:	3008      	adds	r0, #8
 8007ba4:	bd08      	pop	{r3, pc}
 8007ba6:	bf00      	nop

08007ba8 <_Unwind_GetTextRelBase>:
 8007ba8:	b508      	push	{r3, lr}
 8007baa:	f00d fa78 	bl	801509e <abort>
 8007bae:	bf00      	nop

08007bb0 <_Unwind_GetDataRelBase>:
 8007bb0:	b508      	push	{r3, lr}
 8007bb2:	f7ff fff9 	bl	8007ba8 <_Unwind_GetTextRelBase>
 8007bb6:	bf00      	nop

08007bb8 <__aeabi_idiv0>:
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop

08007bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007bf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007bc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007bc2:	e003      	b.n	8007bcc <LoopCopyDataInit>

08007bc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007bc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007bc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007bca:	3104      	adds	r1, #4

08007bcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007bcc:	480b      	ldr	r0, [pc, #44]	; (8007bfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007bce:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007bd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007bd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007bd4:	d3f6      	bcc.n	8007bc4 <CopyDataInit>
  ldr  r2, =_sbss
 8007bd6:	4a0b      	ldr	r2, [pc, #44]	; (8007c04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007bd8:	e002      	b.n	8007be0 <LoopFillZerobss>

08007bda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007bda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007bdc:	f842 3b04 	str.w	r3, [r2], #4

08007be0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007be0:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007be2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007be4:	d3f9      	bcc.n	8007bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007be6:	f005 f991 	bl	800cf0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007bea:	f00d fcbb 	bl	8015564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007bee:	f004 fceb 	bl	800c5c8 <main>
  bx  lr    
 8007bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007bf4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007bf8:	0801b3e8 	.word	0x0801b3e8
  ldr  r0, =_sdata
 8007bfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007c00:	200006a8 	.word	0x200006a8
  ldr  r2, =_sbss
 8007c04:	200006a8 	.word	0x200006a8
  ldr  r3, = _ebss
 8007c08:	20007eac 	.word	0x20007eac

08007c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c0c:	e7fe      	b.n	8007c0c <ADC_IRQHandler>

08007c0e <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007c0e:	2001      	movs	r0, #1
 8007c10:	4770      	bx	lr

08007c12 <_kill>:

int _kill(int pid, int sig)
{
 8007c12:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007c14:	f00d fa50 	bl	80150b8 <__errno>
 8007c18:	2316      	movs	r3, #22
 8007c1a:	6003      	str	r3, [r0, #0]
	return -1;
}
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c20:	bd08      	pop	{r3, pc}

08007c22 <_exit>:

void _exit (int status)
{
 8007c22:	b508      	push	{r3, lr}
	_kill(status, -1);
 8007c24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c28:	f7ff fff3 	bl	8007c12 <_kill>
 8007c2c:	e7fe      	b.n	8007c2c <_exit+0xa>

08007c2e <_read>:
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8007c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c30:	460d      	mov	r5, r1
 8007c32:	4617      	mov	r7, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c34:	2400      	movs	r4, #0
 8007c36:	e005      	b.n	8007c44 <_read+0x16>
	{
		*ptr++ = __io_getchar();
 8007c38:	1c6e      	adds	r6, r5, #1
 8007c3a:	f3af 8000 	nop.w
 8007c3e:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c40:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8007c42:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c44:	42bc      	cmp	r4, r7
 8007c46:	dbf7      	blt.n	8007c38 <_read+0xa>
	}

return len;
}
 8007c48:	4638      	mov	r0, r7
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c4c <_write>:

int _write(int file, char *ptr, int len)
{
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c50:	2400      	movs	r4, #0
 8007c52:	e005      	b.n	8007c60 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8007c54:	1c4d      	adds	r5, r1, #1
 8007c56:	7808      	ldrb	r0, [r1, #0]
 8007c58:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c5c:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8007c5e:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c60:	42b4      	cmp	r4, r6
 8007c62:	dbf7      	blt.n	8007c54 <_write+0x8>
	}
	return len;
}
 8007c64:	4630      	mov	r0, r6
 8007c66:	bd70      	pop	{r4, r5, r6, pc}

08007c68 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007c68:	b508      	push	{r3, lr}
 8007c6a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007c6c:	4a0b      	ldr	r2, [pc, #44]	; (8007c9c <_sbrk+0x34>)
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	b142      	cbz	r2, 8007c84 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007c72:	4a0a      	ldr	r2, [pc, #40]	; (8007c9c <_sbrk+0x34>)
 8007c74:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8007c76:	4403      	add	r3, r0
 8007c78:	466a      	mov	r2, sp
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d806      	bhi.n	8007c8c <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007c7e:	4a07      	ldr	r2, [pc, #28]	; (8007c9c <_sbrk+0x34>)
 8007c80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007c82:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007c84:	4906      	ldr	r1, [pc, #24]	; (8007ca0 <_sbrk+0x38>)
 8007c86:	4a05      	ldr	r2, [pc, #20]	; (8007c9c <_sbrk+0x34>)
 8007c88:	6011      	str	r1, [r2, #0]
 8007c8a:	e7f2      	b.n	8007c72 <_sbrk+0xa>
		errno = ENOMEM;
 8007c8c:	f00d fa14 	bl	80150b8 <__errno>
 8007c90:	230c      	movs	r3, #12
 8007c92:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c98:	bd08      	pop	{r3, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000730 	.word	0x20000730
 8007ca0:	20007eac 	.word	0x20007eac

08007ca4 <_close>:

int _close(int file)
{
	return -1;
}
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca8:	4770      	bx	lr

08007caa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cae:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	4770      	bx	lr

08007cb4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	4770      	bx	lr

08007cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007cb8:	2000      	movs	r0, #0
 8007cba:	4770      	bx	lr

08007cbc <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8007cbc:	7903      	ldrb	r3, [r0, #4]
 8007cbe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8007cc0:	7943      	ldrb	r3, [r0, #5]
 8007cc2:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8007cc4:	7983      	ldrb	r3, [r0, #6]
 8007cc6:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8007cc8:	79c3      	ldrb	r3, [r0, #7]
 8007cca:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8007ccc:	7a03      	ldrb	r3, [r0, #8]
 8007cce:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8007cd0:	7a43      	ldrb	r3, [r0, #9]
 8007cd2:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8007cd4:	7a83      	ldrb	r3, [r0, #10]
 8007cd6:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8007cd8:	7ac3      	ldrb	r3, [r0, #11]
 8007cda:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8007cdc:	2008      	movs	r0, #8
 8007cde:	4770      	bx	lr

08007ce0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8007ce0:	780b      	ldrb	r3, [r1, #0]
 8007ce2:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007ce4:	784a      	ldrb	r2, [r1, #1]
 8007ce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007cea:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007cec:	788a      	ldrb	r2, [r1, #2]
 8007cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cf2:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007cf4:	78ca      	ldrb	r2, [r1, #3]
 8007cf6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007cfa:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8007cfc:	790b      	ldrb	r3, [r1, #4]
 8007cfe:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007d00:	794a      	ldrb	r2, [r1, #5]
 8007d02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007d06:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007d08:	798a      	ldrb	r2, [r1, #6]
 8007d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d0e:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007d10:	79ca      	ldrb	r2, [r1, #7]
 8007d12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007d16:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 8007d18:	2008      	movs	r0, #8
 8007d1a:	4770      	bx	lr

08007d1c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8007d1c:	4800      	ldr	r0, [pc, #0]	; (8007d20 <_ZN8std_msgs4Time7getTypeEv+0x4>)
 8007d1e:	4770      	bx	lr
 8007d20:	08019b5c 	.word	0x08019b5c

08007d24 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8007d24:	4800      	ldr	r0, [pc, #0]	; (8007d28 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 8007d26:	4770      	bx	lr
 8007d28:	08019b38 	.word	0x08019b38

08007d2c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8007d2c:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8007d2e:	780b      	ldrb	r3, [r1, #0]
 8007d30:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007d32:	784a      	ldrb	r2, [r1, #1]
 8007d34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007d38:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 8007d3a:	f8d1 5002 	ldr.w	r5, [r1, #2]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8007d3e:	2306      	movs	r3, #6
 8007d40:	1daa      	adds	r2, r5, #6
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d204      	bcs.n	8007d50 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x24>
          inbuffer[k-1]=inbuffer[k];
 8007d46:	1e5a      	subs	r2, r3, #1
 8007d48:	5ccc      	ldrb	r4, [r1, r3]
 8007d4a:	548c      	strb	r4, [r1, r2]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	e7f7      	b.n	8007d40 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8007d50:	3505      	adds	r5, #5
 8007d52:	2300      	movs	r3, #0
 8007d54:	554b      	strb	r3, [r1, r5]
      this->topic_name = (char *)(inbuffer + offset-1);
 8007d56:	1d4b      	adds	r3, r1, #5
 8007d58:	6083      	str	r3, [r0, #8]
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 8007d5a:	588e      	ldr	r6, [r1, r2]
      offset += 4;
 8007d5c:	1d14      	adds	r4, r2, #4
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8007d5e:	4623      	mov	r3, r4
 8007d60:	1932      	adds	r2, r6, r4
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d204      	bcs.n	8007d70 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8007d66:	1e5a      	subs	r2, r3, #1
 8007d68:	5ccd      	ldrb	r5, [r1, r3]
 8007d6a:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	e7f7      	b.n	8007d60 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x34>
      }
      inbuffer[offset+length_message_type-1]=0;
 8007d70:	1e53      	subs	r3, r2, #1
 8007d72:	2500      	movs	r5, #0
 8007d74:	54cd      	strb	r5, [r1, r3]
      this->message_type = (char *)(inbuffer + offset-1);
 8007d76:	3c01      	subs	r4, #1
 8007d78:	440c      	add	r4, r1
 8007d7a:	60c4      	str	r4, [r0, #12]
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 8007d7c:	588e      	ldr	r6, [r1, r2]
      offset += 4;
 8007d7e:	3204      	adds	r2, #4
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8007d80:	4613      	mov	r3, r2
 8007d82:	18b4      	adds	r4, r6, r2
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	d204      	bcs.n	8007d92 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x66>
          inbuffer[k-1]=inbuffer[k];
 8007d88:	1e5c      	subs	r4, r3, #1
 8007d8a:	5ccd      	ldrb	r5, [r1, r3]
 8007d8c:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8007d8e:	3301      	adds	r3, #1
 8007d90:	e7f7      	b.n	8007d82 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x56>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8007d92:	1e63      	subs	r3, r4, #1
 8007d94:	2500      	movs	r5, #0
 8007d96:	54cd      	strb	r5, [r1, r3]
      this->md5sum = (char *)(inbuffer + offset-1);
 8007d98:	3a01      	subs	r2, #1
 8007d9a:	440a      	add	r2, r1
 8007d9c:	6102      	str	r2, [r0, #16]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007d9e:	5d0b      	ldrb	r3, [r1, r4]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007da0:	1c62      	adds	r2, r4, #1
 8007da2:	5c8a      	ldrb	r2, [r1, r2]
 8007da4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007da8:	1ca2      	adds	r2, r4, #2
 8007daa:	5c8a      	ldrb	r2, [r1, r2]
 8007dac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007db0:	1ce2      	adds	r2, r4, #3
 8007db2:	5c8a      	ldrb	r2, [r1, r2]
 8007db4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
 8007db8:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8007dba:	1d20      	adds	r0, r4, #4
 8007dbc:	bc70      	pop	{r4, r5, r6}
 8007dbe:	4770      	bx	lr

08007dc0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8007dc0:	4800      	ldr	r0, [pc, #0]	; (8007dc4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 8007dc2:	4770      	bx	lr
 8007dc4:	080199cc 	.word	0x080199cc

08007dc8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8007dc8:	4800      	ldr	r0, [pc, #0]	; (8007dcc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8007dca:	4770      	bx	lr
 8007dcc:	080199a8 	.word	0x080199a8

08007dd0 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8007dd0:	b430      	push	{r4, r5}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8007dd2:	780b      	ldrb	r3, [r1, #0]
 8007dd4:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 8007dd6:	f8d1 5001 	ldr.w	r5, [r1, #1]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8007dda:	2305      	movs	r3, #5
 8007ddc:	1d6a      	adds	r2, r5, #5
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d204      	bcs.n	8007dec <_ZN14rosserial_msgs3Log11deserializeEPh+0x1c>
          inbuffer[k-1]=inbuffer[k];
 8007de2:	1e5a      	subs	r2, r3, #1
 8007de4:	5ccc      	ldrb	r4, [r1, r3]
 8007de6:	548c      	strb	r4, [r1, r2]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8007de8:	3301      	adds	r3, #1
 8007dea:	e7f7      	b.n	8007ddc <_ZN14rosserial_msgs3Log11deserializeEPh+0xc>
      }
      inbuffer[offset+length_msg-1]=0;
 8007dec:	3504      	adds	r5, #4
 8007dee:	2300      	movs	r3, #0
 8007df0:	554b      	strb	r3, [r1, r5]
      this->msg = (char *)(inbuffer + offset-1);
 8007df2:	3104      	adds	r1, #4
 8007df4:	6081      	str	r1, [r0, #8]
      offset += length_msg;
     return offset;
    }
 8007df6:	4610      	mov	r0, r2
 8007df8:	bc30      	pop	{r4, r5}
 8007dfa:	4770      	bx	lr

08007dfc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8007dfc:	4800      	ldr	r0, [pc, #0]	; (8007e00 <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 8007dfe:	4770      	bx	lr
 8007e00:	08019994 	.word	0x08019994

08007e04 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8007e04:	4800      	ldr	r0, [pc, #0]	; (8007e08 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 8007e06:	4770      	bx	lr
 8007e08:	08019970 	.word	0x08019970

08007e0c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 8007e0c:	4800      	ldr	r0, [pc, #0]	; (8007e10 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 8007e0e:	4770      	bx	lr
 8007e10:	08018d38 	.word	0x08018d38

08007e14 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8007e14:	4800      	ldr	r0, [pc, #0]	; (8007e18 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 8007e16:	4770      	bx	lr
 8007e18:	0801994c 	.word	0x0801994c

08007e1c <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh>:
      mag_data(),
      angles()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8007e1c:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8007e1e:	7903      	ldrb	r3, [r0, #4]
 8007e20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8007e22:	7943      	ldrb	r3, [r0, #5]
 8007e24:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8007e26:	7983      	ldrb	r3, [r0, #6]
 8007e28:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8007e2a:	79c3      	ldrb	r3, [r0, #7]
 8007e2c:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8007e2e:	7a03      	ldrb	r3, [r0, #8]
 8007e30:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8007e32:	7a43      	ldrb	r3, [r0, #9]
 8007e34:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8007e36:	7a83      	ldrb	r3, [r0, #10]
 8007e38:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8007e3a:	7ac3      	ldrb	r3, [r0, #11]
 8007e3c:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 3; i++){
 8007e3e:	2400      	movs	r4, #0
      offset += sizeof(this->stamp.nsec);
 8007e40:	2308      	movs	r3, #8
      for( uint8_t i = 0; i < 3; i++){
 8007e42:	2c02      	cmp	r4, #2
 8007e44:	dc13      	bgt.n	8007e6e <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x52>
      union {
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.real = this->acc_data[i];
 8007e46:	1ca2      	adds	r2, r4, #2
 8007e48:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007e4c:	6852      	ldr	r2, [r2, #4]
      *(outbuffer + offset + 0) = (u_acc_datai.base >> (8 * 0)) & 0xFF;
 8007e4e:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (u_acc_datai.base >> (8 * 1)) & 0xFF;
 8007e50:	1c5d      	adds	r5, r3, #1
 8007e52:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8007e56:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
 8007e58:	1c9d      	adds	r5, r3, #2
 8007e5a:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8007e5e:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
 8007e60:	1cdd      	adds	r5, r3, #3
 8007e62:	0e12      	lsrs	r2, r2, #24
 8007e64:	554a      	strb	r2, [r1, r5]
      offset += sizeof(this->acc_data[i]);
 8007e66:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 8007e68:	3401      	adds	r4, #1
 8007e6a:	b2e4      	uxtb	r4, r4
 8007e6c:	e7e9      	b.n	8007e42 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x26>
 8007e6e:	2400      	movs	r4, #0
      }
      for( uint8_t i = 0; i < 3; i++){
 8007e70:	2c02      	cmp	r4, #2
 8007e72:	dc12      	bgt.n	8007e9a <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x7e>
      union {
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.real = this->gyro_data[i];
 8007e74:	1da2      	adds	r2, r4, #6
 8007e76:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_gyro_datai.base >> (8 * 0)) & 0xFF;
 8007e7a:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (u_gyro_datai.base >> (8 * 1)) & 0xFF;
 8007e7c:	1c5d      	adds	r5, r3, #1
 8007e7e:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8007e82:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
 8007e84:	1c9d      	adds	r5, r3, #2
 8007e86:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8007e8a:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
 8007e8c:	1cdd      	adds	r5, r3, #3
 8007e8e:	0e12      	lsrs	r2, r2, #24
 8007e90:	554a      	strb	r2, [r1, r5]
      offset += sizeof(this->gyro_data[i]);
 8007e92:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 8007e94:	3401      	adds	r4, #1
 8007e96:	b2e4      	uxtb	r4, r4
 8007e98:	e7ea      	b.n	8007e70 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x54>
 8007e9a:	2400      	movs	r4, #0
      }
      for( uint8_t i = 0; i < 3; i++){
 8007e9c:	2c02      	cmp	r4, #2
 8007e9e:	dc14      	bgt.n	8007eca <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0xae>
      union {
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.real = this->mag_data[i];
 8007ea0:	f104 0208 	add.w	r2, r4, #8
 8007ea4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007ea8:	6852      	ldr	r2, [r2, #4]
      *(outbuffer + offset + 0) = (u_mag_datai.base >> (8 * 0)) & 0xFF;
 8007eaa:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (u_mag_datai.base >> (8 * 1)) & 0xFF;
 8007eac:	1c5d      	adds	r5, r3, #1
 8007eae:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8007eb2:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
 8007eb4:	1c9d      	adds	r5, r3, #2
 8007eb6:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8007eba:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
 8007ebc:	1cdd      	adds	r5, r3, #3
 8007ebe:	0e12      	lsrs	r2, r2, #24
 8007ec0:	554a      	strb	r2, [r1, r5]
      offset += sizeof(this->mag_data[i]);
 8007ec2:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 8007ec4:	3401      	adds	r4, #1
 8007ec6:	b2e4      	uxtb	r4, r4
 8007ec8:	e7e8      	b.n	8007e9c <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x80>
 8007eca:	2400      	movs	r4, #0
      }
      for( uint8_t i = 0; i < 3; i++){
 8007ecc:	2c02      	cmp	r4, #2
 8007ece:	dc13      	bgt.n	8007ef8 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0xdc>
      union {
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.real = this->angles[i];
 8007ed0:	f104 020c 	add.w	r2, r4, #12
 8007ed4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_anglesi.base >> (8 * 0)) & 0xFF;
 8007ed8:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (u_anglesi.base >> (8 * 1)) & 0xFF;
 8007eda:	1c5d      	adds	r5, r3, #1
 8007edc:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8007ee0:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_anglesi.base >> (8 * 2)) & 0xFF;
 8007ee2:	1c9d      	adds	r5, r3, #2
 8007ee4:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8007ee8:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_anglesi.base >> (8 * 3)) & 0xFF;
 8007eea:	1cdd      	adds	r5, r3, #3
 8007eec:	0e12      	lsrs	r2, r2, #24
 8007eee:	554a      	strb	r2, [r1, r5]
      offset += sizeof(this->angles[i]);
 8007ef0:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 8007ef2:	3401      	adds	r4, #1
 8007ef4:	b2e4      	uxtb	r4, r4
 8007ef6:	e7e9      	b.n	8007ecc <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0xb0>
      }
      return offset;
    }
 8007ef8:	4618      	mov	r0, r3
 8007efa:	bc70      	pop	{r4, r5, r6}
 8007efc:	4770      	bx	lr

08007efe <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007efe:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8007f00:	780b      	ldrb	r3, [r1, #0]
 8007f02:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007f04:	784a      	ldrb	r2, [r1, #1]
 8007f06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007f0a:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007f0c:	788a      	ldrb	r2, [r1, #2]
 8007f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f12:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007f14:	78ca      	ldrb	r2, [r1, #3]
 8007f16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007f1a:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8007f1c:	790b      	ldrb	r3, [r1, #4]
 8007f1e:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007f20:	794a      	ldrb	r2, [r1, #5]
 8007f22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007f26:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007f28:	798a      	ldrb	r2, [r1, #6]
 8007f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f2e:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007f30:	79ca      	ldrb	r2, [r1, #7]
 8007f32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007f36:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 3; i++){
 8007f38:	2400      	movs	r4, #0
      offset += sizeof(this->stamp.nsec);
 8007f3a:	2308      	movs	r3, #8
      for( uint8_t i = 0; i < 3; i++){
 8007f3c:	2c02      	cmp	r4, #2
 8007f3e:	dc14      	bgt.n	8007f6a <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x6c>
      union {
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.base = 0;
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007f40:	5cca      	ldrb	r2, [r1, r3]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007f42:	1c5d      	adds	r5, r3, #1
 8007f44:	5d4d      	ldrb	r5, [r1, r5]
 8007f46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007f4a:	1c9d      	adds	r5, r3, #2
 8007f4c:	5d4d      	ldrb	r5, [r1, r5]
 8007f4e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007f52:	1cdd      	adds	r5, r3, #3
 8007f54:	5d4e      	ldrb	r6, [r1, r5]
      this->acc_data[i] = u_acc_datai.real;
 8007f56:	1ca5      	adds	r5, r4, #2
 8007f58:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007f5c:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8007f60:	606a      	str	r2, [r5, #4]
      offset += sizeof(this->acc_data[i]);
 8007f62:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 8007f64:	3401      	adds	r4, #1
 8007f66:	b2e4      	uxtb	r4, r4
 8007f68:	e7e8      	b.n	8007f3c <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x3e>
 8007f6a:	2400      	movs	r4, #0
      }
      for( uint8_t i = 0; i < 3; i++){
 8007f6c:	2c02      	cmp	r4, #2
 8007f6e:	dc14      	bgt.n	8007f9a <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x9c>
      union {
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.base = 0;
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007f70:	5cca      	ldrb	r2, [r1, r3]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007f72:	1c5d      	adds	r5, r3, #1
 8007f74:	5d4d      	ldrb	r5, [r1, r5]
 8007f76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007f7a:	1c9d      	adds	r5, r3, #2
 8007f7c:	5d4d      	ldrb	r5, [r1, r5]
 8007f7e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007f82:	1cdd      	adds	r5, r3, #3
 8007f84:	5d4e      	ldrb	r6, [r1, r5]
      this->gyro_data[i] = u_gyro_datai.real;
 8007f86:	1da5      	adds	r5, r4, #6
 8007f88:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007f8c:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8007f90:	602a      	str	r2, [r5, #0]
      offset += sizeof(this->gyro_data[i]);
 8007f92:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 8007f94:	3401      	adds	r4, #1
 8007f96:	b2e4      	uxtb	r4, r4
 8007f98:	e7e8      	b.n	8007f6c <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x6e>
 8007f9a:	2400      	movs	r4, #0
      }
      for( uint8_t i = 0; i < 3; i++){
 8007f9c:	2c02      	cmp	r4, #2
 8007f9e:	dc15      	bgt.n	8007fcc <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0xce>
      union {
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.base = 0;
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007fa0:	5cca      	ldrb	r2, [r1, r3]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007fa2:	1c5d      	adds	r5, r3, #1
 8007fa4:	5d4d      	ldrb	r5, [r1, r5]
 8007fa6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007faa:	1c9d      	adds	r5, r3, #2
 8007fac:	5d4d      	ldrb	r5, [r1, r5]
 8007fae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007fb2:	1cdd      	adds	r5, r3, #3
 8007fb4:	5d4e      	ldrb	r6, [r1, r5]
      this->mag_data[i] = u_mag_datai.real;
 8007fb6:	f104 0508 	add.w	r5, r4, #8
 8007fba:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007fbe:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8007fc2:	606a      	str	r2, [r5, #4]
      offset += sizeof(this->mag_data[i]);
 8007fc4:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 8007fc6:	3401      	adds	r4, #1
 8007fc8:	b2e4      	uxtb	r4, r4
 8007fca:	e7e7      	b.n	8007f9c <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x9e>
 8007fcc:	2400      	movs	r4, #0
      }
      for( uint8_t i = 0; i < 3; i++){
 8007fce:	2c02      	cmp	r4, #2
 8007fd0:	dc15      	bgt.n	8007ffe <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x100>
      union {
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.base = 0;
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007fd2:	5cca      	ldrb	r2, [r1, r3]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007fd4:	1c5d      	adds	r5, r3, #1
 8007fd6:	5d4d      	ldrb	r5, [r1, r5]
 8007fd8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007fdc:	1c9d      	adds	r5, r3, #2
 8007fde:	5d4d      	ldrb	r5, [r1, r5]
 8007fe0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007fe4:	1cdd      	adds	r5, r3, #3
 8007fe6:	5d4e      	ldrb	r6, [r1, r5]
      this->angles[i] = u_anglesi.real;
 8007fe8:	f104 050c 	add.w	r5, r4, #12
 8007fec:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007ff0:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8007ff4:	602a      	str	r2, [r5, #0]
      offset += sizeof(this->angles[i]);
 8007ff6:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 8007ff8:	3401      	adds	r4, #1
 8007ffa:	b2e4      	uxtb	r4, r4
 8007ffc:	e7e7      	b.n	8007fce <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0xd0>
      }
     return offset;
    }
 8007ffe:	4618      	mov	r0, r3
 8008000:	bc70      	pop	{r4, r5, r6}
 8008002:	4770      	bx	lr

08008004 <_ZN17jsk_imu_mini_msgs3Imu7getTypeEv>:

    const char * getType(){ return "jsk_imu_mini_msgs/Imu"; };
 8008004:	4800      	ldr	r0, [pc, #0]	; (8008008 <_ZN17jsk_imu_mini_msgs3Imu7getTypeEv+0x4>)
 8008006:	4770      	bx	lr
 8008008:	08019ae4 	.word	0x08019ae4

0800800c <_ZN17jsk_imu_mini_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "68b769ca85e5d9c44dbce51dc60e4be7"; };
 800800c:	4800      	ldr	r0, [pc, #0]	; (8008010 <_ZN17jsk_imu_mini_msgs3Imu6getMD5Ev+0x4>)
 800800e:	4770      	bx	lr
 8008010:	08019ac0 	.word	0x08019ac0

08008014 <_ZNK17jsk_imu_mini_msgs11DesireCoord9serializeEPh>:
      yaw(0),
      coord_type(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8008014:	6843      	ldr	r3, [r0, #4]
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.real = this->roll;
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
 8008016:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
 8008018:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800801c:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 800801e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008022:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8008024:	0e1b      	lsrs	r3, r3, #24
 8008026:	70cb      	strb	r3, [r1, #3]
 8008028:	6883      	ldr	r3, [r0, #8]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
 800802a:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
 800802c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008030:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8008032:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008036:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8008038:	0e1b      	lsrs	r3, r3, #24
 800803a:	71cb      	strb	r3, [r1, #7]
 800803c:	68c3      	ldr	r3, [r0, #12]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
 800803e:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
 8008040:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008044:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 8008046:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800804a:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 800804c:	0e1b      	lsrs	r3, r3, #24
 800804e:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->yaw);
      *(outbuffer + offset + 0) = (this->coord_type >> (8 * 0)) & 0xFF;
 8008050:	7c03      	ldrb	r3, [r0, #16]
 8008052:	730b      	strb	r3, [r1, #12]
      offset += sizeof(this->coord_type);
      return offset;
    }
 8008054:	200d      	movs	r0, #13
 8008056:	4770      	bx	lr

08008058 <_ZN17jsk_imu_mini_msgs11DesireCoord11deserializeEPh>:
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.base = 0;
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008058:	780b      	ldrb	r3, [r1, #0]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800805a:	784a      	ldrb	r2, [r1, #1]
 800805c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008060:	788a      	ldrb	r2, [r1, #2]
 8008062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008066:	78ca      	ldrb	r2, [r1, #3]
      this->roll = u_roll.real;
 8008068:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800806c:	6043      	str	r3, [r0, #4]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.base = 0;
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800806e:	790b      	ldrb	r3, [r1, #4]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008070:	794a      	ldrb	r2, [r1, #5]
 8008072:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008076:	798a      	ldrb	r2, [r1, #6]
 8008078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800807c:	79ca      	ldrb	r2, [r1, #7]
      this->pitch = u_pitch.real;
 800807e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008082:	6083      	str	r3, [r0, #8]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.base = 0;
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008084:	7a0b      	ldrb	r3, [r1, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008086:	7a4a      	ldrb	r2, [r1, #9]
 8008088:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800808c:	7a8a      	ldrb	r2, [r1, #10]
 800808e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008092:	7aca      	ldrb	r2, [r1, #11]
      this->yaw = u_yaw.real;
 8008094:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008098:	60c3      	str	r3, [r0, #12]
      offset += sizeof(this->yaw);
      this->coord_type =  ((uint8_t) (*(inbuffer + offset)));
 800809a:	7b0b      	ldrb	r3, [r1, #12]
 800809c:	7403      	strb	r3, [r0, #16]
      offset += sizeof(this->coord_type);
     return offset;
    }
 800809e:	200d      	movs	r0, #13
 80080a0:	4770      	bx	lr
	...

080080a4 <_ZN17jsk_imu_mini_msgs11DesireCoord7getTypeEv>:

    const char * getType(){ return "jsk_imu_mini_msgs/DesireCoord"; };
 80080a4:	4800      	ldr	r0, [pc, #0]	; (80080a8 <_ZN17jsk_imu_mini_msgs11DesireCoord7getTypeEv+0x4>)
 80080a6:	4770      	bx	lr
 80080a8:	08019aa0 	.word	0x08019aa0

080080ac <_ZN17jsk_imu_mini_msgs11DesireCoord6getMD5Ev>:
    const char * getMD5(){ return "6ccf1a68453182818d4a1d0d5013bd0d"; };
 80080ac:	4800      	ldr	r0, [pc, #0]	; (80080b0 <_ZN17jsk_imu_mini_msgs11DesireCoord6getMD5Ev+0x4>)
 80080ae:	4770      	bx	lr
 80080b0:	08019a7c 	.word	0x08019a7c

080080b4 <_ZNK17aerial_robot_msgs9Barometer9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80080b4:	7903      	ldrb	r3, [r0, #4]
 80080b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80080b8:	7943      	ldrb	r3, [r0, #5]
 80080ba:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80080bc:	7983      	ldrb	r3, [r0, #6]
 80080be:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80080c0:	79c3      	ldrb	r3, [r0, #7]
 80080c2:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80080c4:	7a03      	ldrb	r3, [r0, #8]
 80080c6:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80080c8:	7a43      	ldrb	r3, [r0, #9]
 80080ca:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80080cc:	7a83      	ldrb	r3, [r0, #10]
 80080ce:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80080d0:	7ac3      	ldrb	r3, [r0, #11]
 80080d2:	71cb      	strb	r3, [r1, #7]
 80080d4:	68c3      	ldr	r3, [r0, #12]
      union {
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.real = this->altitude;
      *(outbuffer + offset + 0) = (u_altitude.base >> (8 * 0)) & 0xFF;
 80080d6:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_altitude.base >> (8 * 1)) & 0xFF;
 80080d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80080dc:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_altitude.base >> (8 * 2)) & 0xFF;
 80080de:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80080e2:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_altitude.base >> (8 * 3)) & 0xFF;
 80080e4:	0e1b      	lsrs	r3, r3, #24
 80080e6:	72cb      	strb	r3, [r1, #11]
 80080e8:	6903      	ldr	r3, [r0, #16]
      union {
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.real = this->pressure;
      *(outbuffer + offset + 0) = (u_pressure.base >> (8 * 0)) & 0xFF;
 80080ea:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_pressure.base >> (8 * 1)) & 0xFF;
 80080ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80080f0:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_pressure.base >> (8 * 2)) & 0xFF;
 80080f2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80080f6:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_pressure.base >> (8 * 3)) & 0xFF;
 80080f8:	0e1b      	lsrs	r3, r3, #24
 80080fa:	73cb      	strb	r3, [r1, #15]
 80080fc:	6943      	ldr	r3, [r0, #20]
      union {
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.real = this->temperature;
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 80080fe:	740b      	strb	r3, [r1, #16]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 8008100:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008104:	744a      	strb	r2, [r1, #17]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8008106:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800810a:	748a      	strb	r2, [r1, #18]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 800810c:	0e1b      	lsrs	r3, r3, #24
 800810e:	74cb      	strb	r3, [r1, #19]
      offset += sizeof(this->temperature);
      return offset;
    }
 8008110:	2014      	movs	r0, #20
 8008112:	4770      	bx	lr

08008114 <_ZN17aerial_robot_msgs9Barometer11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8008114:	780b      	ldrb	r3, [r1, #0]
 8008116:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008118:	784a      	ldrb	r2, [r1, #1]
 800811a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800811e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008120:	788a      	ldrb	r2, [r1, #2]
 8008122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008126:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008128:	78ca      	ldrb	r2, [r1, #3]
 800812a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800812e:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8008130:	790b      	ldrb	r3, [r1, #4]
 8008132:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008134:	794a      	ldrb	r2, [r1, #5]
 8008136:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800813a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800813c:	798a      	ldrb	r2, [r1, #6]
 800813e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008142:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008144:	79ca      	ldrb	r2, [r1, #7]
 8008146:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800814a:	6083      	str	r3, [r0, #8]
      union {
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.base = 0;
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800814c:	7a0b      	ldrb	r3, [r1, #8]
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800814e:	7a4a      	ldrb	r2, [r1, #9]
 8008150:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008154:	7a8a      	ldrb	r2, [r1, #10]
 8008156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800815a:	7aca      	ldrb	r2, [r1, #11]
      this->altitude = u_altitude.real;
 800815c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008160:	60c3      	str	r3, [r0, #12]
      union {
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.base = 0;
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008162:	7b0b      	ldrb	r3, [r1, #12]
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008164:	7b4a      	ldrb	r2, [r1, #13]
 8008166:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800816a:	7b8a      	ldrb	r2, [r1, #14]
 800816c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008170:	7bca      	ldrb	r2, [r1, #15]
      this->pressure = u_pressure.real;
 8008172:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008176:	6103      	str	r3, [r0, #16]
      union {
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.base = 0;
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008178:	7c0b      	ldrb	r3, [r1, #16]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800817a:	7c4a      	ldrb	r2, [r1, #17]
 800817c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008180:	7c8a      	ldrb	r2, [r1, #18]
 8008182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008186:	7cca      	ldrb	r2, [r1, #19]
      this->temperature = u_temperature.real;
 8008188:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800818c:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->temperature);
     return offset;
    }
 800818e:	2014      	movs	r0, #20
 8008190:	4770      	bx	lr
	...

08008194 <_ZN17aerial_robot_msgs9Barometer7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Barometer"; };
 8008194:	4800      	ldr	r0, [pc, #0]	; (8008198 <_ZN17aerial_robot_msgs9Barometer7getTypeEv+0x4>)
 8008196:	4770      	bx	lr
 8008198:	08019a60 	.word	0x08019a60

0800819c <_ZN17aerial_robot_msgs9Barometer6getMD5Ev>:
    const char * getMD5(){ return "b732c389660333d48fe976feb5768402"; };
 800819c:	4800      	ldr	r0, [pc, #0]	; (80081a0 <_ZN17aerial_robot_msgs9Barometer6getMD5Ev+0x4>)
 800819e:	4770      	bx	lr
 80081a0:	08019a3c 	.word	0x08019a3c

080081a4 <_ZNK17aerial_robot_msgs3Gps9serializeEPh>:
      velocity(),
      sat_num(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 80081a4:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80081a6:	7903      	ldrb	r3, [r0, #4]
 80081a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80081aa:	7943      	ldrb	r3, [r0, #5]
 80081ac:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80081ae:	7983      	ldrb	r3, [r0, #6]
 80081b0:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80081b2:	79c3      	ldrb	r3, [r0, #7]
 80081b4:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80081b6:	7a03      	ldrb	r3, [r0, #8]
 80081b8:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80081ba:	7a43      	ldrb	r3, [r0, #9]
 80081bc:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80081be:	7a83      	ldrb	r3, [r0, #10]
 80081c0:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80081c2:	7ac3      	ldrb	r3, [r0, #11]
 80081c4:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 2; i++){
 80081c6:	2200      	movs	r2, #0
      offset += sizeof(this->stamp.nsec);
 80081c8:	2308      	movs	r3, #8
      for( uint8_t i = 0; i < 2; i++){
 80081ca:	2a01      	cmp	r2, #1
 80081cc:	dc13      	bgt.n	80081f6 <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x52>
      union {
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.real = this->location[i];
 80081ce:	1c94      	adds	r4, r2, #2
 80081d0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80081d4:	6864      	ldr	r4, [r4, #4]
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
 80081d6:	54cc      	strb	r4, [r1, r3]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
 80081d8:	1c5d      	adds	r5, r3, #1
 80081da:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80081de:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 80081e0:	1c9d      	adds	r5, r3, #2
 80081e2:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80081e6:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 80081e8:	1cdd      	adds	r5, r3, #3
 80081ea:	0e24      	lsrs	r4, r4, #24
 80081ec:	554c      	strb	r4, [r1, r5]
      offset += sizeof(this->location[i]);
 80081ee:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 2; i++){
 80081f0:	3201      	adds	r2, #1
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	e7e9      	b.n	80081ca <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x26>
 80081f6:	2400      	movs	r4, #0
      }
      for( uint8_t i = 0; i < 2; i++){
 80081f8:	2c01      	cmp	r4, #1
 80081fa:	dc13      	bgt.n	8008224 <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x80>
      union {
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 80081fc:	1d22      	adds	r2, r4, #4
 80081fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008202:	6852      	ldr	r2, [r2, #4]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 8008204:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8008206:	1c5d      	adds	r5, r3, #1
 8008208:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800820c:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 800820e:	1c9d      	adds	r5, r3, #2
 8008210:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8008214:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8008216:	1cdd      	adds	r5, r3, #3
 8008218:	0e12      	lsrs	r2, r2, #24
 800821a:	554a      	strb	r2, [r1, r5]
      offset += sizeof(this->velocity[i]);
 800821c:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 2; i++){
 800821e:	3401      	adds	r4, #1
 8008220:	b2e4      	uxtb	r4, r4
 8008222:	e7e9      	b.n	80081f8 <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x54>
      }
      *(outbuffer + offset + 0) = (this->sat_num >> (8 * 0)) & 0xFF;
 8008224:	7f02      	ldrb	r2, [r0, #28]
 8008226:	54ca      	strb	r2, [r1, r3]
      offset += sizeof(this->sat_num);
      return offset;
    }
 8008228:	1c58      	adds	r0, r3, #1
 800822a:	bc70      	pop	{r4, r5, r6}
 800822c:	4770      	bx	lr

0800822e <_ZN17aerial_robot_msgs3Gps11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800822e:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8008230:	780b      	ldrb	r3, [r1, #0]
 8008232:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008234:	784a      	ldrb	r2, [r1, #1]
 8008236:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800823a:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800823c:	788a      	ldrb	r2, [r1, #2]
 800823e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008242:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008244:	78ca      	ldrb	r2, [r1, #3]
 8008246:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800824a:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800824c:	790b      	ldrb	r3, [r1, #4]
 800824e:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008250:	794a      	ldrb	r2, [r1, #5]
 8008252:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008256:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008258:	798a      	ldrb	r2, [r1, #6]
 800825a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800825e:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008260:	79ca      	ldrb	r2, [r1, #7]
 8008262:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008266:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 2; i++){
 8008268:	2400      	movs	r4, #0
      offset += sizeof(this->stamp.nsec);
 800826a:	2208      	movs	r2, #8
      for( uint8_t i = 0; i < 2; i++){
 800826c:	2c01      	cmp	r4, #1
 800826e:	dc14      	bgt.n	800829a <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x6c>
      union {
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.base = 0;
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008270:	5c8b      	ldrb	r3, [r1, r2]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008272:	1c55      	adds	r5, r2, #1
 8008274:	5d4d      	ldrb	r5, [r1, r5]
 8008276:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800827a:	1c95      	adds	r5, r2, #2
 800827c:	5d4d      	ldrb	r5, [r1, r5]
 800827e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008282:	1cd5      	adds	r5, r2, #3
 8008284:	5d4e      	ldrb	r6, [r1, r5]
      this->location[i] = u_locationi.real;
 8008286:	1ca5      	adds	r5, r4, #2
 8008288:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800828c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8008290:	606b      	str	r3, [r5, #4]
      offset += sizeof(this->location[i]);
 8008292:	3204      	adds	r2, #4
      for( uint8_t i = 0; i < 2; i++){
 8008294:	3401      	adds	r4, #1
 8008296:	b2e4      	uxtb	r4, r4
 8008298:	e7e8      	b.n	800826c <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x3e>
 800829a:	2400      	movs	r4, #0
      }
      for( uint8_t i = 0; i < 2; i++){
 800829c:	2c01      	cmp	r4, #1
 800829e:	dc14      	bgt.n	80082ca <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x9c>
      union {
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.base = 0;
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80082a0:	5c8b      	ldrb	r3, [r1, r2]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80082a2:	1c55      	adds	r5, r2, #1
 80082a4:	5d4d      	ldrb	r5, [r1, r5]
 80082a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80082aa:	1c95      	adds	r5, r2, #2
 80082ac:	5d4d      	ldrb	r5, [r1, r5]
 80082ae:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80082b2:	1cd5      	adds	r5, r2, #3
 80082b4:	5d4e      	ldrb	r6, [r1, r5]
      this->velocity[i] = u_velocityi.real;
 80082b6:	1d25      	adds	r5, r4, #4
 80082b8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80082bc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80082c0:	606b      	str	r3, [r5, #4]
      offset += sizeof(this->velocity[i]);
 80082c2:	3204      	adds	r2, #4
      for( uint8_t i = 0; i < 2; i++){
 80082c4:	3401      	adds	r4, #1
 80082c6:	b2e4      	uxtb	r4, r4
 80082c8:	e7e8      	b.n	800829c <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x6e>
      }
      this->sat_num =  ((uint8_t) (*(inbuffer + offset)));
 80082ca:	5c8b      	ldrb	r3, [r1, r2]
 80082cc:	7703      	strb	r3, [r0, #28]
      offset += sizeof(this->sat_num);
     return offset;
    }
 80082ce:	1c50      	adds	r0, r2, #1
 80082d0:	bc70      	pop	{r4, r5, r6}
 80082d2:	4770      	bx	lr

080082d4 <_ZN17aerial_robot_msgs3Gps7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Gps"; };
 80082d4:	4800      	ldr	r0, [pc, #0]	; (80082d8 <_ZN17aerial_robot_msgs3Gps7getTypeEv+0x4>)
 80082d6:	4770      	bx	lr
 80082d8:	08019a24 	.word	0x08019a24

080082dc <_ZN17aerial_robot_msgs3Gps6getMD5Ev>:
    const char * getMD5(){ return "b9b55701ff5240f76ada29af2827853c"; };
 80082dc:	4800      	ldr	r0, [pc, #0]	; (80082e0 <_ZN17aerial_robot_msgs3Gps6getMD5Ev+0x4>)
 80082de:	4770      	bx	lr
 80082e0:	08019a00 	.word	0x08019a00

080082e4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE9connectedEv>:


    /* Are we connected to the PC? */
    virtual bool connected() {
      return configured_;
    };
 80082e4:	f890 02d0 	ldrb.w	r0, [r0, #720]	; 0x2d0
 80082e8:	4770      	bx	lr
	...

080082ec <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef>:
  inline uint8_t& rxValue() { return rx_value_; }
  inline RingBuffer<uint8_t, RX_SIZE>* ringBuffer() { return ring_buf_; }

  static void ReceiveCplt(DMA_HandleTypeDef *hdma)
  {
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 80082ec:	6b83      	ldr	r3, [r0, #56]	; 0x38

    /* DMA Normal mode */
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80082ee:	6802      	ldr	r2, [r0, #0]
 80082f0:	6812      	ldr	r2, [r2, #0]
 80082f2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80082f6:	d10f      	bne.n	8008318 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x2c>
      {
        huart->RxXferCount = 0;
 80082f8:	2200      	movs	r2, #0
 80082fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
           in the UART CR3 register */
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80082fe:	6819      	ldr	r1, [r3, #0]
 8008300:	688a      	ldr	r2, [r1, #8]
 8008302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008306:	608a      	str	r2, [r1, #8]

        /* Check if a transmit Process is ongoing or not */
        if(huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 8008308:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	2a23      	cmp	r2, #35	; 0x23
 8008310:	d004      	beq.n	800831c <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x30>
          huart->gState = HAL_UART_STATE_BUSY_TX;
        else
          huart->gState = HAL_UART_STATE_READY;
 8008312:	2220      	movs	r2, #32
 8008314:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  static void ReceiveCplt(DMA_HandleTypeDef *hdma)
 8008318:	2100      	movs	r1, #0
 800831a:	e004      	b.n	8008326 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x3a>
          huart->gState = HAL_UART_STATE_BUSY_TX;
 800831c:	2221      	movs	r2, #33	; 0x21
 800831e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8008322:	e7f9      	b.n	8008318 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x2c>
      }
    //sepecial process
for(int i = 0; i < RX_BURST_SIZE; i++)
 8008324:	3101      	adds	r1, #1
 8008326:	2907      	cmp	r1, #7
 8008328:	dc12      	bgt.n	8008350 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x64>
    ring_buf_->push(rx_value_[i]);
 800832a:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x68>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x6c>)
 8008330:	5c58      	ldrb	r0, [r3, r1]
    buf_[byte_to_add_] = new_value;
 8008332:	f9b2 3192 	ldrsh.w	r3, [r2, #402]	; 0x192
 8008336:	54d0      	strb	r0, [r2, r3]
    byte_to_add_++;
 8008338:	3301      	adds	r3, #1
 800833a:	b21b      	sxth	r3, r3
 800833c:	f8a2 3192 	strh.w	r3, [r2, #402]	; 0x192
    if (byte_to_add_ == buffer_length_)
 8008340:	f8b2 0194 	ldrh.w	r0, [r2, #404]	; 0x194
 8008344:	4283      	cmp	r3, r0
 8008346:	d1ed      	bne.n	8008324 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x38>
        byte_to_add_ = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	f8a2 3192 	strh.w	r3, [r2, #402]	; 0x192
 800834e:	e7e9      	b.n	8008324 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x38>
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20003848 	.word	0x20003848
 8008358:	20003840 	.word	0x20003840

0800835c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef>:
  ~TxBuffer(){}


  static void TransmitCplt(DMA_HandleTypeDef *hdma)
  {
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 800835c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    /* DMA Normal mode*/
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800835e:	6802      	ldr	r2, [r0, #0]
 8008360:	6812      	ldr	r2, [r2, #0]
 8008362:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008366:	d06e      	beq.n	8008446 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xea>
      }
    /* DMA Circular mode */
    else
      {
        /* Disable the peripheral */
        huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 8008368:	6819      	ldr	r1, [r3, #0]
 800836a:	688a      	ldr	r2, [r1, #8]
 800836c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008370:	608a      	str	r2, [r1, #8]

        if(!idle_flag_)
 8008372:	4aa8      	ldr	r2, [pc, #672]	; (8008614 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2b8>)
 8008374:	7812      	ldrb	r2, [r2, #0]
 8008376:	2a00      	cmp	r2, #0
 8008378:	d12d      	bne.n	80083d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x7a>
          {
            subscript_in_progress_++;
 800837a:	49a7      	ldr	r1, [pc, #668]	; (8008618 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2bc>)
 800837c:	780a      	ldrb	r2, [r1, #0]
 800837e:	3201      	adds	r2, #1
 8008380:	b2d2      	uxtb	r2, r2
 8008382:	700a      	strb	r2, [r1, #0]

            if (subscript_in_progress_ == TX_SIZE)
 8008384:	2a32      	cmp	r2, #50	; 0x32
 8008386:	d06c      	beq.n	8008462 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x106>
                subscript_in_progress_ = 0;

            if (subscript_in_progress_ != subscript_to_add_)
 8008388:	4aa3      	ldr	r2, [pc, #652]	; (8008618 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2bc>)
 800838a:	7811      	ldrb	r1, [r2, #0]
 800838c:	4aa3      	ldr	r2, [pc, #652]	; (800861c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2c0>)
 800838e:	7812      	ldrb	r2, [r2, #0]
 8008390:	4291      	cmp	r1, r2
 8008392:	d06a      	beq.n	800846a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x10e>
              {
                __HAL_DMA_DISABLE(huart->hdmatx);
 8008394:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008396:	6811      	ldr	r1, [r2, #0]
 8008398:	680a      	ldr	r2, [r1, #0]
 800839a:	f022 0201 	bic.w	r2, r2, #1
 800839e:	600a      	str	r2, [r1, #0]
                uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 80083a0:	4a9d      	ldr	r2, [pc, #628]	; (8008618 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2bc>)
 80083a2:	7812      	ldrb	r2, [r2, #0]
 80083a4:	ebc2 1182 	rsb	r1, r2, r2, lsl #6
 80083a8:	ebc2 0281 	rsb	r2, r2, r1, lsl #2
 80083ac:	499c      	ldr	r1, [pc, #624]	; (8008620 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2c4>)
 80083ae:	440a      	add	r2, r1
                uint32_t * tmp32 = (uint32_t*)&tmp8;
                huart->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 80083b0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80083b2:	6809      	ldr	r1, [r1, #0]
 80083b4:	f892 00fa 	ldrb.w	r0, [r2, #250]	; 0xfa
 80083b8:	6048      	str	r0, [r1, #4]

                huart->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 80083ba:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80083bc:	6809      	ldr	r1, [r1, #0]
 80083be:	60ca      	str	r2, [r1, #12]
                /* Enable USARTy DMA TX Channel */
                huart->Instance->CR3 |= USART_CR3_DMAT; //enable dma request in hsuart side
 80083c0:	6819      	ldr	r1, [r3, #0]
 80083c2:	688a      	ldr	r2, [r1, #8]
 80083c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083c8:	608a      	str	r2, [r1, #8]
                __HAL_DMA_ENABLE(huart->hdmatx);
 80083ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80083cc:	6811      	ldr	r1, [r2, #0]
 80083ce:	680a      	ldr	r2, [r1, #0]
 80083d0:	f042 0201 	orr.w	r2, r2, #1
 80083d4:	600a      	str	r2, [r1, #0]
              {
                idle_flag_ = true;
              }

          }
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 80083d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a92      	ldr	r2, [pc, #584]	; (8008624 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2c8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d96a      	bls.n	80084b6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x15a>
 80083e0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d047      	beq.n	8008478 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11c>
 80083e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d047      	beq.n	8008480 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x124>
 80083f0:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d045      	beq.n	8008484 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x128>
 80083f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d043      	beq.n	8008488 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x12c>
 8008400:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8008404:	4293      	cmp	r3, r2
 8008406:	d041      	beq.n	800848c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x130>
 8008408:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800840c:	4293      	cmp	r3, r2
 800840e:	d040      	beq.n	8008492 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x136>
 8008410:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008414:	4293      	cmp	r3, r2
 8008416:	d03f      	beq.n	8008498 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x13c>
 8008418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800841c:	4293      	cmp	r3, r2
 800841e:	d03e      	beq.n	800849e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x142>
 8008420:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8008424:	4293      	cmp	r3, r2
 8008426:	d03d      	beq.n	80084a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x148>
 8008428:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800842c:	4293      	cmp	r3, r2
 800842e:	d03c      	beq.n	80084aa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x14e>
 8008430:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008434:	4293      	cmp	r3, r2
 8008436:	d03b      	beq.n	80084b0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x154>
 8008438:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800843c:	4293      	cmp	r3, r2
 800843e:	d018      	beq.n	8008472 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x116>
 8008440:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008444:	e019      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
        huart->TxXferCount = 0;
 8008446:	2200      	movs	r2, #0
 8008448:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 800844c:	6819      	ldr	r1, [r3, #0]
 800844e:	688a      	ldr	r2, [r1, #8]
 8008450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008454:	608a      	str	r2, [r1, #8]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	6813      	ldr	r3, [r2, #0]
 800845a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	4770      	bx	lr
                subscript_in_progress_ = 0;
 8008462:	2100      	movs	r1, #0
 8008464:	4a6c      	ldr	r2, [pc, #432]	; (8008618 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2bc>)
 8008466:	7011      	strb	r1, [r2, #0]
 8008468:	e78e      	b.n	8008388 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2c>
                idle_flag_ = true;
 800846a:	2101      	movs	r1, #1
 800846c:	4a69      	ldr	r2, [pc, #420]	; (8008614 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2b8>)
 800846e:	7011      	strb	r1, [r2, #0]
 8008470:	e7b1      	b.n	80083d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x7a>
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 8008472:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008476:	e000      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 8008478:	2220      	movs	r2, #32
 800847a:	4b6b      	ldr	r3, [pc, #428]	; (8008628 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2cc>)
 800847c:	60da      	str	r2, [r3, #12]
 800847e:	4770      	bx	lr
 8008480:	2220      	movs	r2, #32
 8008482:	e7fa      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 8008484:	2220      	movs	r2, #32
 8008486:	e7f8      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 8008488:	2220      	movs	r2, #32
 800848a:	e7f6      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 800848c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008490:	e7f3      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 8008492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008496:	e7f0      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 8008498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800849c:	e7ed      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 800849e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084a2:	e7ea      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 80084a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80084a8:	e7e7      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 80084aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80084ae:	e7e4      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 80084b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80084b4:	e7e1      	b.n	800847a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11e>
 80084b6:	4a5d      	ldr	r2, [pc, #372]	; (800862c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2d0>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d953      	bls.n	8008564 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x208>
 80084bc:	3aa8      	subs	r2, #168	; 0xa8
 80084be:	4293      	cmp	r3, r2
 80084c0:	d031      	beq.n	8008526 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1ca>
 80084c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d031      	beq.n	800852e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1d2>
 80084ca:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d02f      	beq.n	8008532 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1d6>
 80084d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d02d      	beq.n	8008536 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1da>
 80084da:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80084de:	4293      	cmp	r3, r2
 80084e0:	d02b      	beq.n	800853a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1de>
 80084e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d02a      	beq.n	8008540 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1e4>
 80084ea:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d029      	beq.n	8008546 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1ea>
 80084f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d028      	beq.n	800854c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1f0>
 80084fa:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80084fe:	4293      	cmp	r3, r2
 8008500:	d027      	beq.n	8008552 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1f6>
 8008502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008506:	4293      	cmp	r3, r2
 8008508:	d026      	beq.n	8008558 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1fc>
 800850a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800850e:	4293      	cmp	r3, r2
 8008510:	d025      	beq.n	800855e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x202>
 8008512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008516:	4293      	cmp	r3, r2
 8008518:	d002      	beq.n	8008520 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1c4>
 800851a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800851e:	e003      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 8008520:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008524:	e000      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 8008526:	2220      	movs	r2, #32
 8008528:	4b3f      	ldr	r3, [pc, #252]	; (8008628 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2cc>)
 800852a:	609a      	str	r2, [r3, #8]
 800852c:	4770      	bx	lr
 800852e:	2220      	movs	r2, #32
 8008530:	e7fa      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 8008532:	2220      	movs	r2, #32
 8008534:	e7f8      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 8008536:	2220      	movs	r2, #32
 8008538:	e7f6      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 800853a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800853e:	e7f3      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 8008540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008544:	e7f0      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 8008546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800854a:	e7ed      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 800854c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008550:	e7ea      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 8008552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008556:	e7e7      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 8008558:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800855c:	e7e4      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 800855e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008562:	e7e1      	b.n	8008528 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1cc>
 8008564:	4a32      	ldr	r2, [pc, #200]	; (8008630 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2d4>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d966      	bls.n	8008638 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2dc>
 800856a:	3a48      	subs	r2, #72	; 0x48
 800856c:	4293      	cmp	r3, r2
 800856e:	d031      	beq.n	80085d4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x278>
 8008570:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008574:	4293      	cmp	r3, r2
 8008576:	d031      	beq.n	80085dc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x280>
 8008578:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800857c:	4293      	cmp	r3, r2
 800857e:	d02f      	beq.n	80085e0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x284>
 8008580:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008584:	4293      	cmp	r3, r2
 8008586:	d02d      	beq.n	80085e4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x288>
 8008588:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800858c:	4293      	cmp	r3, r2
 800858e:	d02b      	beq.n	80085e8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x28c>
 8008590:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008594:	4293      	cmp	r3, r2
 8008596:	d02a      	beq.n	80085ee <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x292>
 8008598:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800859c:	4293      	cmp	r3, r2
 800859e:	d029      	beq.n	80085f4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x298>
 80085a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d028      	beq.n	80085fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x29e>
 80085a8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d027      	beq.n	8008600 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2a4>
 80085b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d026      	beq.n	8008606 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2aa>
 80085b8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80085bc:	4293      	cmp	r3, r2
 80085be:	d025      	beq.n	800860c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2b0>
 80085c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d002      	beq.n	80085ce <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x272>
 80085c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085cc:	e003      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 80085ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80085d2:	e000      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 80085d4:	2220      	movs	r2, #32
 80085d6:	4b17      	ldr	r3, [pc, #92]	; (8008634 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2d8>)
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	4770      	bx	lr
 80085dc:	2220      	movs	r2, #32
 80085de:	e7fa      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 80085e0:	2220      	movs	r2, #32
 80085e2:	e7f8      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 80085e4:	2220      	movs	r2, #32
 80085e6:	e7f6      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 80085e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ec:	e7f3      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 80085ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085f2:	e7f0      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 80085f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085f8:	e7ed      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 80085fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085fe:	e7ea      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 8008600:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008604:	e7e7      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 8008606:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800860a:	e7e4      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 800860c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008610:	e7e1      	b.n	80085d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27a>
 8008612:	bf00      	nop
 8008614:	20000734 	.word	0x20000734
 8008618:	20000736 	.word	0x20000736
 800861c:	20000735 	.word	0x20000735
 8008620:	20000738 	.word	0x20000738
 8008624:	40026458 	.word	0x40026458
 8008628:	40026400 	.word	0x40026400
 800862c:	400260b8 	.word	0x400260b8
 8008630:	40026058 	.word	0x40026058
 8008634:	40026000 	.word	0x40026000
 8008638:	4a29      	ldr	r2, [pc, #164]	; (80086e0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x384>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d031      	beq.n	80086a2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x346>
 800863e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008642:	4293      	cmp	r3, r2
 8008644:	d031      	beq.n	80086aa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x34e>
 8008646:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800864a:	4293      	cmp	r3, r2
 800864c:	d02f      	beq.n	80086ae <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x352>
 800864e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008652:	4293      	cmp	r3, r2
 8008654:	d02d      	beq.n	80086b2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x356>
 8008656:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800865a:	4293      	cmp	r3, r2
 800865c:	d02b      	beq.n	80086b6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x35a>
 800865e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008662:	4293      	cmp	r3, r2
 8008664:	d02a      	beq.n	80086bc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 8008666:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800866a:	4293      	cmp	r3, r2
 800866c:	d029      	beq.n	80086c2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x366>
 800866e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008672:	4293      	cmp	r3, r2
 8008674:	d028      	beq.n	80086c8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x36c>
 8008676:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800867a:	4293      	cmp	r3, r2
 800867c:	d027      	beq.n	80086ce <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x372>
 800867e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008682:	4293      	cmp	r3, r2
 8008684:	d026      	beq.n	80086d4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x378>
 8008686:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800868a:	4293      	cmp	r3, r2
 800868c:	d025      	beq.n	80086da <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37e>
 800868e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008692:	4293      	cmp	r3, r2
 8008694:	d002      	beq.n	800869c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x340>
 8008696:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800869a:	e003      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 800869c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80086a0:	e000      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086a2:	2220      	movs	r2, #32
 80086a4:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x388>)
 80086a6:	609a      	str	r2, [r3, #8]
 80086a8:	4770      	bx	lr
 80086aa:	2220      	movs	r2, #32
 80086ac:	e7fa      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086ae:	2220      	movs	r2, #32
 80086b0:	e7f8      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086b2:	2220      	movs	r2, #32
 80086b4:	e7f6      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086ba:	e7f3      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086c0:	e7f0      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086c6:	e7ed      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086cc:	e7ea      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80086d2:	e7e7      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80086d8:	e7e4      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80086de:	e7e1      	b.n	80086a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 80086e0:	40026010 	.word	0x40026010
 80086e4:	40026000 	.word	0x40026000

080086e8 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE15getEndpointTypeEv>:
      this->fun_obj_(obj_, msg);
    }

    virtual const char * getMsgType(){ return this->msg.getType(); }
    virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
    virtual int getEndpointType(){ return endpoint_; }
 80086e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80086ea:	4770      	bx	lr

080086ec <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE10getMsgTypeEv>:
    virtual const char * getMsgType(){ return this->msg.getType(); }
 80086ec:	4800      	ldr	r0, [pc, #0]	; (80086f0 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE10getMsgTypeEv+0x4>)
 80086ee:	4770      	bx	lr
 80086f0:	08019aa0 	.word	0x08019aa0

080086f4 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev>:
    virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 80086f4:	4800      	ldr	r0, [pc, #0]	; (80086f8 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev+0x4>)
 80086f6:	4770      	bx	lr
 80086f8:	08019a7c 	.word	0x08019a7c

080086fc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE>:
            }
        }
      configured_ = true;
    }

    virtual int publish(int id, const Msg * msg)
 80086fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086fe:	b085      	sub	sp, #20
    {
      if(id >= 100 && !configured_)
 8008700:	2963      	cmp	r1, #99	; 0x63
 8008702:	dd04      	ble.n	800870e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x12>
 8008704:	f890 32d0 	ldrb.w	r3, [r0, #720]	; 0x2d0
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 822d 	beq.w	8008b68 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x46c>
 800870e:	460f      	mov	r7, r1
 8008710:	4604      	mov	r4, r0
        return 0;

      /* serialize message */
      uint16_t l = msg->serialize(message_out+7);
 8008712:	6813      	ldr	r3, [r2, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f500 7191 	add.w	r1, r0, #290	; 0x122
 800871a:	4610      	mov	r0, r2
 800871c:	4798      	blx	r3
 800871e:	b286      	uxth	r6, r0

      /* setup the header */
      message_out[0] = 0xff;
 8008720:	23ff      	movs	r3, #255	; 0xff
 8008722:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
      message_out[1] = PROTOCOL_VER;
 8008726:	23fe      	movs	r3, #254	; 0xfe
 8008728:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
      message_out[2] = (uint8_t) ((uint16_t)l&255);
 800872c:	b2c3      	uxtb	r3, r0
 800872e:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8008732:	4635      	mov	r5, r6
      message_out[3] = (uint8_t) ((uint16_t)l>>8);
 8008734:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8008738:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 800873c:	4403      	add	r3, r0
 800873e:	b2db      	uxtb	r3, r3
 8008740:	43db      	mvns	r3, r3
 8008742:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
      message_out[5] = (uint8_t) ((int16_t)id&255);
 8008746:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
      message_out[6] = (uint8_t) ((int16_t)id>>8);
 800874a:	f347 2707 	sbfx	r7, r7, #8, #8
 800874e:	f884 7121 	strb.w	r7, [r4, #289]	; 0x121

      /* calculate checksum */
      int chk = 0;
      for(int i =5; i<l+7; i++)
 8008752:	2305      	movs	r3, #5
      int chk = 0;
 8008754:	2200      	movs	r2, #0
      for(int i =5; i<l+7; i++)
 8008756:	1de9      	adds	r1, r5, #7
 8008758:	428b      	cmp	r3, r1
 800875a:	da05      	bge.n	8008768 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x6c>
        chk += message_out[i];
 800875c:	18e1      	adds	r1, r4, r3
 800875e:	f891 111b 	ldrb.w	r1, [r1, #283]	; 0x11b
 8008762:	440a      	add	r2, r1
      for(int i =5; i<l+7; i++)
 8008764:	3301      	adds	r3, #1
 8008766:	e7f6      	b.n	8008756 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x5a>
      l += 7;
 8008768:	1df1      	adds	r1, r6, #7
      message_out[l++] = 255 - (chk%256);
 800876a:	f106 0308 	add.w	r3, r6, #8
 800876e:	b29b      	uxth	r3, r3
 8008770:	4250      	negs	r0, r2
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	b2c0      	uxtb	r0, r0
 8008776:	bf58      	it	pl
 8008778:	4242      	negpl	r2, r0
 800877a:	43d2      	mvns	r2, r2
 800877c:	fa14 f181 	uxtah	r1, r4, r1
 8008780:	f881 211b 	strb.w	r2, [r1, #283]	; 0x11b
        {
          uint8_t reminder = l % DMA_TX_BURST_SIZE;
          if(reminder != 0) l = (l / DMA_TX_BURST_SIZE + 1) * DMA_TX_BURST_SIZE;
        }

      if( l <= OUTPUT_SIZE ){
 8008784:	461d      	mov	r5, r3
 8008786:	2bff      	cmp	r3, #255	; 0xff
 8008788:	f300 81de 	bgt.w	8008b48 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x44c>
        hardware_.write(message_out, l);
 800878c:	f204 111b 	addw	r1, r4, #283	; 0x11b
  {
    return iostream_->read();
  };

  void write(uint8_t* data, int length){
    iostream_->write(data, length);
 8008790:	68a0      	ldr	r0, [r4, #8]
 8008792:	b2da      	uxtb	r2, r3
    tx_->write(data_byte, size);
 8008794:	6887      	ldr	r7, [r0, #8]
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0) )
 8008796:	4bb6      	ldr	r3, [pc, #728]	; (8008a70 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x374>)
 8008798:	781e      	ldrb	r6, [r3, #0]
 800879a:	4630      	mov	r0, r6
 800879c:	4bb5      	ldr	r3, [pc, #724]	; (8008a74 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x378>)
 800879e:	781c      	ldrb	r4, [r3, #0]
 80087a0:	1c63      	adds	r3, r4, #1
 80087a2:	429e      	cmp	r6, r3
 80087a4:	f000 8087 	beq.w	80088b6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1ba>
 80087a8:	2c31      	cmp	r4, #49	; 0x31
 80087aa:	f000 8081 	beq.w	80088b0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1b4>
    tx_buffer_unit_[subscript_to_add_].tx_len_ = new_size;
 80087ae:	ebc4 1384 	rsb	r3, r4, r4, lsl #6
 80087b2:	ebc4 0383 	rsb	r3, r4, r3, lsl #2
 80087b6:	48b0      	ldr	r0, [pc, #704]	; (8008a78 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x37c>)
 80087b8:	4418      	add	r0, r3
 80087ba:	f880 20fa 	strb.w	r2, [r0, #250]	; 0xfa
    memcpy(tx_buffer_unit_[subscript_to_add_].tx_data_, new_data, new_size);
 80087be:	f00d f928 	bl	8015a12 <memcpy>
    subscript_to_add_++;
 80087c2:	1c63      	adds	r3, r4, #1
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	4aab      	ldr	r2, [pc, #684]	; (8008a74 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x378>)
 80087c8:	7013      	strb	r3, [r2, #0]
    if (subscript_to_add_ == TX_SIZE)
 80087ca:	2b32      	cmp	r3, #50	; 0x32
 80087cc:	d07b      	beq.n	80088c6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1ca>
    if (idle_flag_ )
 80087ce:	4bab      	ldr	r3, [pc, #684]	; (8008a7c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x380>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 81c9 	beq.w	8008b6a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x46e>
        if ((subscript_in_progress_ == (subscript_to_add_-1)) || (subscript_in_progress_ == TX_SIZE -1 && subscript_to_add_ == 0)) idle_flag_= false;
 80087d8:	4ba6      	ldr	r3, [pc, #664]	; (8008a74 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x378>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	1e5a      	subs	r2, r3, #1
 80087de:	4296      	cmp	r6, r2
 80087e0:	d077      	beq.n	80088d2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1d6>
 80087e2:	2e31      	cmp	r6, #49	; 0x31
 80087e4:	d073      	beq.n	80088ce <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1d2>
        huart_->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	6893      	ldr	r3, [r2, #8]
 80087ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087f0:	6093      	str	r3, [r2, #8]
        __HAL_DMA_DISABLE(huart_->hdmatx);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	6813      	ldr	r3, [r2, #0]
 80087fa:	f023 0301 	bic.w	r3, r3, #1
 80087fe:	6013      	str	r3, [r2, #0]
        uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 8008800:	4b9b      	ldr	r3, [pc, #620]	; (8008a70 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x374>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 8008808:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
 800880c:	4a9a      	ldr	r2, [pc, #616]	; (8008a78 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x37c>)
 800880e:	4413      	add	r3, r2
        huart_->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8008814:	6812      	ldr	r2, [r2, #0]
 8008816:	f893 10fa 	ldrb.w	r1, [r3, #250]	; 0xfa
 800881a:	6051      	str	r1, [r2, #4]
        huart_->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	60d3      	str	r3, [r2, #12]
        huart_->Instance->CR3 |= USART_CR3_DMAT;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	6893      	ldr	r3, [r2, #8]
 800882a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800882e:	6093      	str	r3, [r2, #8]
        __HAL_DMA_ENABLE(huart_->hdmatx);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	6813      	ldr	r3, [r2, #0]
 8008838:	f043 0301 	orr.w	r3, r3, #1
 800883c:	6013      	str	r3, [r2, #0]
        __HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx));
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a8e      	ldr	r2, [pc, #568]	; (8008a80 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x384>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d969      	bls.n	800891e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x222>
 800884a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800884e:	4293      	cmp	r3, r2
 8008850:	d046      	beq.n	80088e0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e4>
 8008852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008856:	4293      	cmp	r3, r2
 8008858:	d046      	beq.n	80088e8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1ec>
 800885a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800885e:	4293      	cmp	r3, r2
 8008860:	d044      	beq.n	80088ec <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1f0>
 8008862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008866:	4293      	cmp	r3, r2
 8008868:	d042      	beq.n	80088f0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1f4>
 800886a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800886e:	4293      	cmp	r3, r2
 8008870:	d040      	beq.n	80088f4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1f8>
 8008872:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008876:	4293      	cmp	r3, r2
 8008878:	d03f      	beq.n	80088fa <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1fe>
 800887a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800887e:	4293      	cmp	r3, r2
 8008880:	d03e      	beq.n	8008900 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x204>
 8008882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008886:	4293      	cmp	r3, r2
 8008888:	d03d      	beq.n	8008906 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x20a>
 800888a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800888e:	4293      	cmp	r3, r2
 8008890:	d03c      	beq.n	800890c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x210>
 8008892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008896:	4293      	cmp	r3, r2
 8008898:	d03b      	beq.n	8008912 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x216>
 800889a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800889e:	4293      	cmp	r3, r2
 80088a0:	d03a      	beq.n	8008918 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21c>
 80088a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d017      	beq.n	80088da <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1de>
 80088aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088ae:	e018      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0) )
 80088b0:	2e00      	cmp	r6, #0
 80088b2:	f47f af7c 	bne.w	80087ae <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb2>
		while(subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0)){}
 80088b6:	4298      	cmp	r0, r3
 80088b8:	d0fd      	beq.n	80088b6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1ba>
 80088ba:	2c31      	cmp	r4, #49	; 0x31
 80088bc:	f47f af77 	bne.w	80087ae <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb2>
 80088c0:	2e00      	cmp	r6, #0
 80088c2:	d0f8      	beq.n	80088b6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1ba>
 80088c4:	e773      	b.n	80087ae <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb2>
      subscript_to_add_ = 0;
 80088c6:	2200      	movs	r2, #0
 80088c8:	4b6a      	ldr	r3, [pc, #424]	; (8008a74 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x378>)
 80088ca:	701a      	strb	r2, [r3, #0]
 80088cc:	e77f      	b.n	80087ce <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xd2>
        if ((subscript_in_progress_ == (subscript_to_add_-1)) || (subscript_in_progress_ == TX_SIZE -1 && subscript_to_add_ == 0)) idle_flag_= false;
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d189      	bne.n	80087e6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xea>
 80088d2:	2200      	movs	r2, #0
 80088d4:	4b69      	ldr	r3, [pc, #420]	; (8008a7c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x380>)
 80088d6:	701a      	strb	r2, [r3, #0]
 80088d8:	e785      	b.n	80087e6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xea>
        __HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx));
 80088da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088de:	e000      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 80088e0:	2320      	movs	r3, #32
 80088e2:	4a68      	ldr	r2, [pc, #416]	; (8008a84 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x388>)
 80088e4:	60d3      	str	r3, [r2, #12]
 80088e6:	e140      	b.n	8008b6a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x46e>
 80088e8:	2320      	movs	r3, #32
 80088ea:	e7fa      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 80088ec:	2320      	movs	r3, #32
 80088ee:	e7f8      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 80088f0:	2320      	movs	r3, #32
 80088f2:	e7f6      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 80088f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088f8:	e7f3      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 80088fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088fe:	e7f0      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 8008900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008904:	e7ed      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 8008906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800890a:	e7ea      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 800890c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008910:	e7e7      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 8008912:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008916:	e7e4      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 8008918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800891c:	e7e1      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e6>
 800891e:	4a5a      	ldr	r2, [pc, #360]	; (8008a88 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x38c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d953      	bls.n	80089cc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2d0>
 8008924:	3aa8      	subs	r2, #168	; 0xa8
 8008926:	4293      	cmp	r3, r2
 8008928:	d031      	beq.n	800898e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x292>
 800892a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800892e:	4293      	cmp	r3, r2
 8008930:	d031      	beq.n	8008996 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x29a>
 8008932:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008936:	4293      	cmp	r3, r2
 8008938:	d02f      	beq.n	800899a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x29e>
 800893a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800893e:	4293      	cmp	r3, r2
 8008940:	d02d      	beq.n	800899e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2a2>
 8008942:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8008946:	4293      	cmp	r3, r2
 8008948:	d02b      	beq.n	80089a2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2a6>
 800894a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800894e:	4293      	cmp	r3, r2
 8008950:	d02a      	beq.n	80089a8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2ac>
 8008952:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008956:	4293      	cmp	r3, r2
 8008958:	d029      	beq.n	80089ae <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2b2>
 800895a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800895e:	4293      	cmp	r3, r2
 8008960:	d028      	beq.n	80089b4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2b8>
 8008962:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8008966:	4293      	cmp	r3, r2
 8008968:	d027      	beq.n	80089ba <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2be>
 800896a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800896e:	4293      	cmp	r3, r2
 8008970:	d026      	beq.n	80089c0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2c4>
 8008972:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008976:	4293      	cmp	r3, r2
 8008978:	d025      	beq.n	80089c6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2ca>
 800897a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800897e:	4293      	cmp	r3, r2
 8008980:	d002      	beq.n	8008988 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x28c>
 8008982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008986:	e003      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 8008988:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800898c:	e000      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 800898e:	2320      	movs	r3, #32
 8008990:	4a3c      	ldr	r2, [pc, #240]	; (8008a84 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x388>)
 8008992:	6093      	str	r3, [r2, #8]
 8008994:	e0e9      	b.n	8008b6a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x46e>
 8008996:	2320      	movs	r3, #32
 8008998:	e7fa      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 800899a:	2320      	movs	r3, #32
 800899c:	e7f8      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 800899e:	2320      	movs	r3, #32
 80089a0:	e7f6      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 80089a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089a6:	e7f3      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 80089a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089ac:	e7f0      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 80089ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089b2:	e7ed      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 80089b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089b8:	e7ea      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 80089ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089be:	e7e7      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 80089c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089c4:	e7e4      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 80089c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089ca:	e7e1      	b.n	8008990 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x294>
 80089cc:	4a2f      	ldr	r2, [pc, #188]	; (8008a8c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x390>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d966      	bls.n	8008aa0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x3a4>
 80089d2:	3a48      	subs	r2, #72	; 0x48
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d031      	beq.n	8008a3c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x340>
 80089d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089dc:	4293      	cmp	r3, r2
 80089de:	d031      	beq.n	8008a44 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x348>
 80089e0:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d02f      	beq.n	8008a48 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x34c>
 80089e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d02d      	beq.n	8008a4c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x350>
 80089f0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d02b      	beq.n	8008a50 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x354>
 80089f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d02a      	beq.n	8008a56 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x35a>
 8008a00:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d029      	beq.n	8008a5c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x360>
 8008a08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d028      	beq.n	8008a62 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x366>
 8008a10:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d027      	beq.n	8008a68 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x36c>
 8008a18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d039      	beq.n	8008a94 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x398>
 8008a20:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d038      	beq.n	8008a9a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 8008a28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d002      	beq.n	8008a36 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x33a>
 8008a30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a34:	e003      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a3a:	e000      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	4a14      	ldr	r2, [pc, #80]	; (8008a90 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x394>)
 8008a40:	60d3      	str	r3, [r2, #12]
 8008a42:	e092      	b.n	8008b6a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x46e>
 8008a44:	2320      	movs	r3, #32
 8008a46:	e7fa      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a48:	2320      	movs	r3, #32
 8008a4a:	e7f8      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a4c:	2320      	movs	r3, #32
 8008a4e:	e7f6      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a54:	e7f3      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a5a:	e7f0      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a60:	e7ed      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a66:	e7ea      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a6c:	e7e7      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a6e:	bf00      	nop
 8008a70:	20000736 	.word	0x20000736
 8008a74:	20000735 	.word	0x20000735
 8008a78:	20000738 	.word	0x20000738
 8008a7c:	20000734 	.word	0x20000734
 8008a80:	40026458 	.word	0x40026458
 8008a84:	40026400 	.word	0x40026400
 8008a88:	400260b8 	.word	0x400260b8
 8008a8c:	40026058 	.word	0x40026058
 8008a90:	40026000 	.word	0x40026000
 8008a94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a98:	e7d1      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008a9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a9e:	e7ce      	b.n	8008a3e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x342>
 8008aa0:	4a33      	ldr	r2, [pc, #204]	; (8008b70 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x474>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d02e      	beq.n	8008b04 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x408>
 8008aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d02e      	beq.n	8008b0c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x410>
 8008aae:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d02c      	beq.n	8008b10 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x414>
 8008ab6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d02a      	beq.n	8008b14 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x418>
 8008abe:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d028      	beq.n	8008b18 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x41c>
 8008ac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d027      	beq.n	8008b1e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x422>
 8008ace:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d026      	beq.n	8008b24 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x428>
 8008ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d025      	beq.n	8008b2a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x42e>
 8008ade:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d024      	beq.n	8008b30 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x434>
 8008ae6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d023      	beq.n	8008b36 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x43a>
 8008aee:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d022      	beq.n	8008b3c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x440>
 8008af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d121      	bne.n	8008b42 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 8008afe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b02:	e000      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b04:	2320      	movs	r3, #32
 8008b06:	4a1b      	ldr	r2, [pc, #108]	; (8008b74 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x478>)
 8008b08:	6093      	str	r3, [r2, #8]
 8008b0a:	e02e      	b.n	8008b6a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x46e>
 8008b0c:	2320      	movs	r3, #32
 8008b0e:	e7fa      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b10:	2320      	movs	r3, #32
 8008b12:	e7f8      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b14:	2320      	movs	r3, #32
 8008b16:	e7f6      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b1c:	e7f3      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b22:	e7f0      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b28:	e7ed      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b2e:	e7ea      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b34:	e7e7      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b3a:	e7e4      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b40:	e7e1      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
 8008b42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b46:	e7de      	b.n	8008b06 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40a>
      msg("")
 8008b48:	4b0b      	ldr	r3, [pc, #44]	; (8008b78 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x47c>)
 8008b4a:	9301      	str	r3, [sp, #4]
     */

  private:
    void log(char byte, const char * msg){
      rosserial_msgs::Log l;
      l.level= byte;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	f88d 3008 	strb.w	r3, [sp, #8]
      l.msg = (char*)msg;
 8008b52:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x480>)
 8008b54:	9303      	str	r3, [sp, #12]
      publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	aa01      	add	r2, sp, #4
 8008b5c:	2107      	movs	r1, #7
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4798      	blx	r3
        return -1;
 8008b62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008b66:	e000      	b.n	8008b6a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x46e>
        return 0;
 8008b68:	2500      	movs	r5, #0
    }
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	b005      	add	sp, #20
 8008b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b70:	40026010 	.word	0x40026010
 8008b74:	40026000 	.word	0x40026000
 8008b78:	0801988c 	.word	0x0801988c
 8008b7c:	08019afc 	.word	0x08019afc

08008b80 <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	4606      	mov	r6, r0
 8008b84:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8008b86:	7903      	ldrb	r3, [r0, #4]
 8008b88:	700b      	strb	r3, [r1, #0]
      uint32_t length_msg = strlen(this->msg);
 8008b8a:	6880      	ldr	r0, [r0, #8]
 8008b8c:	f7fd ff0a 	bl	80069a4 <strlen>
 8008b90:	4604      	mov	r4, r0
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 8008b92:	f8c5 0001 	str.w	r0, [r5, #1]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8008b96:	4602      	mov	r2, r0
 8008b98:	68b1      	ldr	r1, [r6, #8]
 8008b9a:	1d68      	adds	r0, r5, #5
 8008b9c:	f00c ff39 	bl	8015a12 <memcpy>
    }
 8008ba0:	1d60      	adds	r0, r4, #5
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}

08008ba4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8008ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba8:	4605      	mov	r5, r0
 8008baa:	460c      	mov	r4, r1
      *(outbuffer + offset++) = ints_length;
 8008bac:	7903      	ldrb	r3, [r0, #4]
 8008bae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	7061      	strb	r1, [r4, #1]
      *(outbuffer + offset++) = 0;
 8008bb4:	70a1      	strb	r1, [r4, #2]
      *(outbuffer + offset++) = 0;
 8008bb6:	70e1      	strb	r1, [r4, #3]
 8008bb8:	2304      	movs	r3, #4
      for( uint8_t i = 0; i < ints_length; i++){
 8008bba:	792a      	ldrb	r2, [r5, #4]
 8008bbc:	4291      	cmp	r1, r2
 8008bbe:	da12      	bge.n	8008be6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x42>
      u_intsi.real = this->ints[i];
 8008bc0:	68ea      	ldr	r2, [r5, #12]
 8008bc2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8008bc6:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8008bc8:	1c58      	adds	r0, r3, #1
 8008bca:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8008bce:	5426      	strb	r6, [r4, r0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8008bd0:	1c98      	adds	r0, r3, #2
 8008bd2:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8008bd6:	5426      	strb	r6, [r4, r0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8008bd8:	1cd8      	adds	r0, r3, #3
 8008bda:	0e12      	lsrs	r2, r2, #24
 8008bdc:	5422      	strb	r2, [r4, r0]
      offset += sizeof(this->ints[i]);
 8008bde:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < ints_length; i++){
 8008be0:	3101      	adds	r1, #1
 8008be2:	b2c9      	uxtb	r1, r1
 8008be4:	e7e9      	b.n	8008bba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16>
      *(outbuffer + offset++) = floats_length;
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	7c29      	ldrb	r1, [r5, #16]
 8008bea:	54e1      	strb	r1, [r4, r3]
      *(outbuffer + offset++) = 0;
 8008bec:	1c98      	adds	r0, r3, #2
 8008bee:	2100      	movs	r1, #0
 8008bf0:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset++) = 0;
 8008bf2:	1cda      	adds	r2, r3, #3
 8008bf4:	5421      	strb	r1, [r4, r0]
      *(outbuffer + offset++) = 0;
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	54a1      	strb	r1, [r4, r2]
      for( uint8_t i = 0; i < floats_length; i++){
 8008bfa:	7c2a      	ldrb	r2, [r5, #16]
 8008bfc:	4291      	cmp	r1, r2
 8008bfe:	da12      	bge.n	8008c26 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x82>
      u_floatsi.real = this->floats[i];
 8008c00:	69aa      	ldr	r2, [r5, #24]
 8008c02:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8008c06:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8008c08:	1c58      	adds	r0, r3, #1
 8008c0a:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8008c0e:	5426      	strb	r6, [r4, r0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8008c10:	1c98      	adds	r0, r3, #2
 8008c12:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8008c16:	5426      	strb	r6, [r4, r0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8008c18:	1cd8      	adds	r0, r3, #3
 8008c1a:	0e12      	lsrs	r2, r2, #24
 8008c1c:	5422      	strb	r2, [r4, r0]
      offset += sizeof(this->floats[i]);
 8008c1e:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < floats_length; i++){
 8008c20:	3101      	adds	r1, #1
 8008c22:	b2c9      	uxtb	r1, r1
 8008c24:	e7e9      	b.n	8008bfa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x56>
      *(outbuffer + offset++) = strings_length;
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	7f29      	ldrb	r1, [r5, #28]
 8008c2a:	54e1      	strb	r1, [r4, r3]
      *(outbuffer + offset++) = 0;
 8008c2c:	1c99      	adds	r1, r3, #2
 8008c2e:	f04f 0800 	mov.w	r8, #0
 8008c32:	f804 8002 	strb.w	r8, [r4, r2]
      *(outbuffer + offset++) = 0;
 8008c36:	1cda      	adds	r2, r3, #3
 8008c38:	f804 8001 	strb.w	r8, [r4, r1]
      *(outbuffer + offset++) = 0;
 8008c3c:	1d1e      	adds	r6, r3, #4
 8008c3e:	f804 8002 	strb.w	r8, [r4, r2]
      for( uint8_t i = 0; i < strings_length; i++){
 8008c42:	7f2b      	ldrb	r3, [r5, #28]
 8008c44:	4598      	cmp	r8, r3
 8008c46:	da14      	bge.n	8008c72 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xce>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8008c48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c4a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008c4e:	f7fd fea9 	bl	80069a4 <strlen>
 8008c52:	4607      	mov	r7, r0
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 8008c54:	51a0      	str	r0, [r4, r6]
      offset += 4;
 8008c56:	3604      	adds	r6, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8008c58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8008c60:	19a0      	adds	r0, r4, r6
 8008c62:	f00c fed6 	bl	8015a12 <memcpy>
      offset += length_stringsi;
 8008c66:	443e      	add	r6, r7
      for( uint8_t i = 0; i < strings_length; i++){
 8008c68:	f108 0801 	add.w	r8, r8, #1
 8008c6c:	fa5f f888 	uxtb.w	r8, r8
 8008c70:	e7e7      	b.n	8008c42 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x9e>
    }
 8008c72:	4630      	mov	r0, r6
 8008c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c78 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8008c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	460c      	mov	r4, r1
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8008c80:	7903      	ldrb	r3, [r0, #4]
 8008c82:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8008c84:	8883      	ldrh	r3, [r0, #4]
 8008c86:	0a1b      	lsrs	r3, r3, #8
 8008c88:	704b      	strb	r3, [r1, #1]
      uint32_t length_topic_name = strlen(this->topic_name);
 8008c8a:	6880      	ldr	r0, [r0, #8]
 8008c8c:	f7fd fe8a 	bl	80069a4 <strlen>
 8008c90:	4607      	mov	r7, r0
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 8008c92:	f8c4 0002 	str.w	r0, [r4, #2]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8008c96:	4602      	mov	r2, r0
 8008c98:	68b1      	ldr	r1, [r6, #8]
 8008c9a:	1da0      	adds	r0, r4, #6
 8008c9c:	f00c feb9 	bl	8015a12 <memcpy>
      offset += length_topic_name;
 8008ca0:	f107 0806 	add.w	r8, r7, #6
      uint32_t length_message_type = strlen(this->message_type);
 8008ca4:	68f0      	ldr	r0, [r6, #12]
 8008ca6:	f7fd fe7d 	bl	80069a4 <strlen>
 8008caa:	4605      	mov	r5, r0
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 8008cac:	f844 0008 	str.w	r0, [r4, r8]
      offset += 4;
 8008cb0:	370a      	adds	r7, #10
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	68f1      	ldr	r1, [r6, #12]
 8008cb6:	19e0      	adds	r0, r4, r7
 8008cb8:	f00c feab 	bl	8015a12 <memcpy>
      offset += length_message_type;
 8008cbc:	442f      	add	r7, r5
      uint32_t length_md5sum = strlen(this->md5sum);
 8008cbe:	6930      	ldr	r0, [r6, #16]
 8008cc0:	f7fd fe70 	bl	80069a4 <strlen>
 8008cc4:	4605      	mov	r5, r0
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 8008cc6:	51e0      	str	r0, [r4, r7]
      offset += 4;
 8008cc8:	3704      	adds	r7, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8008cca:	4602      	mov	r2, r0
 8008ccc:	6931      	ldr	r1, [r6, #16]
 8008cce:	19e0      	adds	r0, r4, r7
 8008cd0:	f00c fe9f 	bl	8015a12 <memcpy>
      offset += length_md5sum;
 8008cd4:	19e8      	adds	r0, r5, r7
      u_buffer_size.real = this->buffer_size;
 8008cd6:	6973      	ldr	r3, [r6, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8008cd8:	5423      	strb	r3, [r4, r0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8008cda:	1c42      	adds	r2, r0, #1
 8008cdc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008ce0:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8008ce2:	1c82      	adds	r2, r0, #2
 8008ce4:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008ce8:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8008cea:	1cc2      	adds	r2, r0, #3
 8008cec:	0e1b      	lsrs	r3, r3, #24
 8008cee:	54a3      	strb	r3, [r4, r2]
    }
 8008cf0:	3004      	adds	r0, #4
 8008cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008cf6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8008cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	460d      	mov	r5, r1
      uint8_t ints_lengthT = *(inbuffer + offset++);
 8008cfc:	780c      	ldrb	r4, [r1, #0]
      if(ints_lengthT > ints_length)
 8008cfe:	7903      	ldrb	r3, [r0, #4]
 8008d00:	429c      	cmp	r4, r3
 8008d02:	dc1a      	bgt.n	8008d3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x44>
      ints_length = ints_lengthT;
 8008d04:	7134      	strb	r4, [r6, #4]
      for( uint8_t i = 0; i < ints_length; i++){
 8008d06:	2200      	movs	r2, #0
      offset += 3;
 8008d08:	2404      	movs	r4, #4
      for( uint8_t i = 0; i < ints_length; i++){
 8008d0a:	7933      	ldrb	r3, [r6, #4]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	da1a      	bge.n	8008d46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x50>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008d10:	5d2b      	ldrb	r3, [r5, r4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008d12:	1c61      	adds	r1, r4, #1
 8008d14:	5c69      	ldrb	r1, [r5, r1]
 8008d16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008d1a:	1ca1      	adds	r1, r4, #2
 8008d1c:	5c69      	ldrb	r1, [r5, r1]
 8008d1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008d22:	1ce1      	adds	r1, r4, #3
 8008d24:	5c69      	ldrb	r1, [r5, r1]
 8008d26:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 8008d2a:	60b3      	str	r3, [r6, #8]
      offset += sizeof(this->st_ints);
 8008d2c:	3404      	adds	r4, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8008d2e:	68f1      	ldr	r1, [r6, #12]
 8008d30:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint8_t i = 0; i < ints_length; i++){
 8008d34:	3201      	adds	r2, #1
 8008d36:	b2d2      	uxtb	r2, r2
 8008d38:	e7e7      	b.n	8008d0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x14>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8008d3a:	00a1      	lsls	r1, r4, #2
 8008d3c:	68c0      	ldr	r0, [r0, #12]
 8008d3e:	f00c fee9 	bl	8015b14 <realloc>
 8008d42:	60f0      	str	r0, [r6, #12]
 8008d44:	e7de      	b.n	8008d04 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xe>
      uint8_t floats_lengthT = *(inbuffer + offset++);
 8008d46:	5d2f      	ldrb	r7, [r5, r4]
      if(floats_lengthT > floats_length)
 8008d48:	7c33      	ldrb	r3, [r6, #16]
 8008d4a:	429f      	cmp	r7, r3
 8008d4c:	dc1a      	bgt.n	8008d84 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x8e>
      offset += 3;
 8008d4e:	3404      	adds	r4, #4
      floats_length = floats_lengthT;
 8008d50:	7437      	strb	r7, [r6, #16]
      for( uint8_t i = 0; i < floats_length; i++){
 8008d52:	2200      	movs	r2, #0
 8008d54:	7c33      	ldrb	r3, [r6, #16]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	da1a      	bge.n	8008d90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x9a>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008d5a:	5d2b      	ldrb	r3, [r5, r4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008d5c:	1c61      	adds	r1, r4, #1
 8008d5e:	5c69      	ldrb	r1, [r5, r1]
 8008d60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008d64:	1ca1      	adds	r1, r4, #2
 8008d66:	5c69      	ldrb	r1, [r5, r1]
 8008d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008d6c:	1ce1      	adds	r1, r4, #3
 8008d6e:	5c69      	ldrb	r1, [r5, r1]
 8008d70:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 8008d74:	6173      	str	r3, [r6, #20]
      offset += sizeof(this->st_floats);
 8008d76:	3404      	adds	r4, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8008d78:	69b1      	ldr	r1, [r6, #24]
 8008d7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint8_t i = 0; i < floats_length; i++){
 8008d7e:	3201      	adds	r2, #1
 8008d80:	b2d2      	uxtb	r2, r2
 8008d82:	e7e7      	b.n	8008d54 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x5e>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8008d84:	00b9      	lsls	r1, r7, #2
 8008d86:	69b0      	ldr	r0, [r6, #24]
 8008d88:	f00c fec4 	bl	8015b14 <realloc>
 8008d8c:	61b0      	str	r0, [r6, #24]
 8008d8e:	e7de      	b.n	8008d4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x58>
      uint8_t strings_lengthT = *(inbuffer + offset++);
 8008d90:	5d2f      	ldrb	r7, [r5, r4]
      if(strings_lengthT > strings_length)
 8008d92:	7f33      	ldrb	r3, [r6, #28]
 8008d94:	429f      	cmp	r7, r3
 8008d96:	dc04      	bgt.n	8008da2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xac>
      offset += 3;
 8008d98:	1d20      	adds	r0, r4, #4
      strings_length = strings_lengthT;
 8008d9a:	7737      	strb	r7, [r6, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 8008d9c:	f04f 0e00 	mov.w	lr, #0
 8008da0:	e012      	b.n	8008dc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xd2>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8008da2:	00b9      	lsls	r1, r7, #2
 8008da4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8008da6:	f00c feb5 	bl	8015b14 <realloc>
 8008daa:	6270      	str	r0, [r6, #36]	; 0x24
 8008dac:	e7f4      	b.n	8008d98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xa2>
      inbuffer[offset+length_st_strings-1]=0;
 8008dae:	1e43      	subs	r3, r0, #1
 8008db0:	2200      	movs	r2, #0
 8008db2:	54ea      	strb	r2, [r5, r3]
      this->st_strings = (char *)(inbuffer + offset-1);
 8008db4:	3c01      	subs	r4, #1
 8008db6:	442c      	add	r4, r5
 8008db8:	6234      	str	r4, [r6, #32]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8008dba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dbc:	f843 402e 	str.w	r4, [r3, lr, lsl #2]
      for( uint8_t i = 0; i < strings_length; i++){
 8008dc0:	f10e 0e01 	add.w	lr, lr, #1
 8008dc4:	fa5f fe8e 	uxtb.w	lr, lr
 8008dc8:	7f33      	ldrb	r3, [r6, #28]
 8008dca:	459e      	cmp	lr, r3
 8008dcc:	da0a      	bge.n	8008de4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xee>
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 8008dce:	582f      	ldr	r7, [r5, r0]
      offset += 4;
 8008dd0:	1d04      	adds	r4, r0, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	1938      	adds	r0, r7, r4
 8008dd6:	4283      	cmp	r3, r0
 8008dd8:	d2e9      	bcs.n	8008dae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xb8>
          inbuffer[k-1]=inbuffer[k];
 8008dda:	1e5a      	subs	r2, r3, #1
 8008ddc:	5ce9      	ldrb	r1, [r5, r3]
 8008dde:	54a9      	strb	r1, [r5, r2]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008de0:	3301      	adds	r3, #1
 8008de2:	e7f7      	b.n	8008dd4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xde>
    }
 8008de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008de6 <_ZN7encoder8ENCODER_D1Ev>:
{
  class ENCODER_ : public SENSOR_<Enctype>  //the data is uint16_t
  {
  public:
    ENCODER_(){};
    ~ENCODER_(){};
 8008de6:	b510      	push	{r4, lr}
 8008de8:	4604      	mov	r4, r0
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008dea:	6a00      	ldr	r0, [r0, #32]
	if (__p)
 8008dec:	b108      	cbz	r0, 8008df2 <_ZN7encoder8ENCODER_D1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8008dee:	f009 fc49 	bl	8012684 <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008df2:	6960      	ldr	r0, [r4, #20]
	if (__p)
 8008df4:	b108      	cbz	r0, 8008dfa <_ZN7encoder8ENCODER_D1Ev+0x14>
 8008df6:	f009 fc45 	bl	8012684 <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008dfa:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8008dfc:	b108      	cbz	r0, 8008e02 <_ZN7encoder8ENCODER_D1Ev+0x1c>
 8008dfe:	f009 fc41 	bl	8012684 <_ZdlPv>
 8008e02:	4620      	mov	r0, r4
 8008e04:	bd10      	pop	{r4, pc}
	...

08008e08 <_ZN16AttitudeEstimate19desireCoordCallbackERKN17jsk_imu_mini_msgs11DesireCoordE>:
  EstimatorAlgorithm* estimator_;
  IMU* imu_;

  uint32_t last_pub_time_;

  void desireCoordCallback(const jsk_imu_mini_msgs::DesireCoord& coord_msg)
 8008e08:	b508      	push	{r3, lr}
  {
    estimator_->coordinateUpdate(coord_msg.roll, coord_msg.pitch);
 8008e0a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8008e0c:	ed91 0a01 	vldr	s0, [r1, #4]
 8008e10:	edd1 0a02 	vldr	s1, [r1, #8]
  ~EstimatorAlgorithm(){}

  /* coodrinate change  */
  void coordinateUpdate(float desire_attitude_roll, float desire_attitude_pitch)
  {
    desire_attitude_roll_ = desire_attitude_roll; 
 8008e14:	ed80 0a23 	vstr	s0, [r0, #140]	; 0x8c
    desire_attitude_pitch_ = desire_attitude_pitch; 
 8008e18:	edc0 0a24 	vstr	s1, [r0, #144]	; 0x90

    r_.from_euler(desire_attitude_roll_, desire_attitude_pitch_, 0);
 8008e1c:	ed9f 1a02 	vldr	s2, [pc, #8]	; 8008e28 <_ZN16AttitudeEstimate19desireCoordCallbackERKN17jsk_imu_mini_msgs11DesireCoordE+0x20>
 8008e20:	304c      	adds	r0, #76	; 0x4c
 8008e22:	f009 fa2f 	bl	8012284 <_ZN7Matrix3IfE10from_eulerEfff>
 8008e26:	bd08      	pop	{r3, pc}
 8008e28:	00000000 	.word	0x00000000

08008e2c <_ZN17ComplementaryAHRS10estimationEv>:
    v->y +=  delta[X]  * v_tmp.z - delta[Z]   * v_tmp.x;
  }
  */

  /* core esitmation process, using body frame */
  virtual void estimation() 
 8008e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e30:	ed2d 8b04 	vpush	{d8-d9}
 8008e34:	b09e      	sub	sp, #120	; 0x78
 8008e36:	4604      	mov	r4, r0

      rotateV(&EstGb_.V,delta_gyro_angle);
      rotateV(&EstMb_.V,delta_gyro_angle);
 #endif

    float acc_magnitude = acc_b_ * acc_b_; //norm?
 8008e38:	f100 0904 	add.w	r9, r0, #4
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	4648      	mov	r0, r9
 8008e40:	f009 f852 	bl	8011ee8 <_ZNK7Vector3IfEmlERKS0_>
 8008e44:	eef0 8a40 	vmov.f32	s17, s0
    Vector3f est_g_b_tmp = est_g_b_;
 8008e48:	f10d 080c 	add.w	r8, sp, #12
 8008e4c:	f104 06b0 	add.w	r6, r4, #176	; 0xb0
 8008e50:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008e54:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    Vector3f est_m_b_tmp = est_m_b_;
 8008e58:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 8008e5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e60:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    est_g_b_ += (est_g_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 8008e64:	f104 0a1c 	add.w	sl, r4, #28
 8008e68:	ed9f 8a8b 	vldr	s16, [pc, #556]	; 8009098 <_ZN17ComplementaryAHRS10estimationEv+0x26c>
 8008e6c:	eeb0 0a48 	vmov.f32	s0, s16
 8008e70:	4650      	mov	r0, sl
 8008e72:	f009 f929 	bl	80120c8 <_ZNK7Vector3IfEmlEf>
 8008e76:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8008e7a:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 8008e7e:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 8008e82:	a909      	add	r1, sp, #36	; 0x24
 8008e84:	4640      	mov	r0, r8
 8008e86:	f008 ffcf 	bl	8011e28 <_ZNK7Vector3IfErmERKS0_>
 8008e8a:	ed8d 0a06 	vstr	s0, [sp, #24]
 8008e8e:	edcd 0a07 	vstr	s1, [sp, #28]
 8008e92:	ed8d 1a08 	vstr	s2, [sp, #32]
 8008e96:	a906      	add	r1, sp, #24
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f009 f8a7 	bl	8011fec <_ZN7Vector3IfEpLERKS0_>
    est_m_b_ += (est_m_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 8008e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8008ea2:	4650      	mov	r0, sl
 8008ea4:	f009 f910 	bl	80120c8 <_ZNK7Vector3IfEmlEf>
 8008ea8:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
 8008eac:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
 8008eb0:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
 8008eb4:	a90f      	add	r1, sp, #60	; 0x3c
 8008eb6:	4668      	mov	r0, sp
 8008eb8:	f008 ffb6 	bl	8011e28 <_ZNK7Vector3IfErmERKS0_>
 8008ebc:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8008ec0:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
 8008ec4:	ed8d 1a0e 	vstr	s2, [sp, #56]	; 0x38
 8008ec8:	a90c      	add	r1, sp, #48	; 0x30
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f009 f88e 	bl	8011fec <_ZN7Vector3IfEpLERKS0_>



    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
 8008ed0:	eddf 7a72 	vldr	s15, [pc, #456]	; 800909c <_ZN17ComplementaryAHRS10estimationEv+0x270>
 8008ed4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008edc:	dd09      	ble.n	8008ef2 <_ZN17ComplementaryAHRS10estimationEv+0xc6>
 8008ede:	eddf 7a70 	vldr	s15, [pc, #448]	; 80090a0 <_ZN17ComplementaryAHRS10estimationEv+0x274>
 8008ee2:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eea:	f100 80a8 	bmi.w	800903e <_ZN17ComplementaryAHRS10estimationEv+0x212>
    else valid_acc = 0;
 8008eee:	2700      	movs	r7, #0
 8008ef0:	e000      	b.n	8008ef4 <_ZN17ComplementaryAHRS10estimationEv+0xc8>
 8008ef2:	2700      	movs	r7, #0
    rpy_[Z] = atan2f( EstMv_.V.z * EstGv_.V.y - EstMv_.V.y * EstGv_.V.z,
                      EstMv_.V.x * invG * sqGY_sqGZ  - (EstMv_.V.y * EstGv_.V.y + EstMv_.V.z * EstGv_.V.z) * invG * EstGv_.V.x ) ;//+ MAG_DECLINIATION;
#endif


    est_g_b_tmp = est_g_b_;
 8008ef4:	ab03      	add	r3, sp, #12
 8008ef6:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8008efa:	ca07      	ldmia	r2, {r0, r1, r2}
 8008efc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    est_m_b_tmp = est_m_b_;
 8008f00:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8008f04:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f06:	e88d 0007 	stmia.w	sp, {r0, r1, r2}

    if ( valid_acc == 1 && cnt == 0)
 8008f0a:	2f00      	cmp	r7, #0
 8008f0c:	f040 8099 	bne.w	8009042 <_ZN17ComplementaryAHRS10estimationEv+0x216>
      est_g_b_ = (est_g_b_tmp * GYR_CMPF_FACTOR + acc_b_) * INV_GYR_CMPF_FACTOR;
    est_m_b_ = (est_m_b_tmp * GYR_CMPFM_FACTOR  + mag_b_) * INV_GYR_CMPFM_FACTOR;
 8008f10:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8008f14:	4668      	mov	r0, sp
 8008f16:	f009 f8d7 	bl	80120c8 <_ZNK7Vector3IfEmlEf>
 8008f1a:	ed8d 0a1b 	vstr	s0, [sp, #108]	; 0x6c
 8008f1e:	edcd 0a1c 	vstr	s1, [sp, #112]	; 0x70
 8008f22:	ed8d 1a1d 	vstr	s2, [sp, #116]	; 0x74
 8008f26:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8008f2a:	a81b      	add	r0, sp, #108	; 0x6c
 8008f2c:	f009 f90c 	bl	8012148 <_ZNK7Vector3IfEplERKS0_>
 8008f30:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
 8008f34:	edcd 0a19 	vstr	s1, [sp, #100]	; 0x64
 8008f38:	ed8d 1a1a 	vstr	s2, [sp, #104]	; 0x68
 8008f3c:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80090a4 <_ZN17ComplementaryAHRS10estimationEv+0x278>
 8008f40:	a818      	add	r0, sp, #96	; 0x60
 8008f42:	f009 f8c1 	bl	80120c8 <_ZNK7Vector3IfEmlEf>
 8008f46:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
 8008f4a:	edc4 0a30 	vstr	s1, [r4, #192]	; 0xc0
 8008f4e:	ed84 1a31 	vstr	s2, [r4, #196]	; 0xc4

    est_g_v_ = r_ * est_g_b_;
 8008f52:	f104 084c 	add.w	r8, r4, #76	; 0x4c
 8008f56:	4631      	mov	r1, r6
 8008f58:	4640      	mov	r0, r8
 8008f5a:	f009 fa45 	bl	80123e8 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 8008f5e:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
 8008f62:	edc4 0a27 	vstr	s1, [r4, #156]	; 0x9c
 8008f66:	ed84 1a28 	vstr	s2, [r4, #160]	; 0xa0
    est_m_v_ = r_ * est_m_b_;
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4640      	mov	r0, r8
 8008f6e:	f009 fa3b 	bl	80123e8 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 8008f72:	ed84 0a29 	vstr	s0, [r4, #164]	; 0xa4
 8008f76:	edc4 0a2a 	vstr	s1, [r4, #168]	; 0xa8
 8008f7a:	ed84 1a2b 	vstr	s2, [r4, #172]	; 0xac

    // Attitude of the estimated vector
    float sq_g_x_sq_g_z = est_g_v_.x * est_g_v_.x + est_g_v_.z * est_g_v_.z;
 8008f7e:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
 8008f82:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008f86:	ed94 8a28 	vldr	s16, [r4, #160]	; 0xa0
 8008f8a:	ee28 8a08 	vmul.f32	s16, s16, s16
 8008f8e:	ee30 0a08 	vadd.f32	s0, s0, s16
    float sq_g_y_sq_g_z = est_g_v_.y * est_g_v_.y + est_g_v_.z * est_g_v_.z;
 8008f92:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 8008f96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f9a:	ee38 8a27 	vadd.f32	s16, s16, s15
    float invG = inv_sqrt(sq_g_x_sq_g_z + est_g_v_.y * est_g_v_.y);
 8008f9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008fa2:	f009 fa9f 	bl	80124e4 <_Z8inv_sqrtf>
 8008fa6:	eef0 8a40 	vmov.f32	s17, s0

    rpy_.x = atan2f(est_g_v_.y , est_g_v_.z);
 8008faa:	edd4 0a28 	vldr	s1, [r4, #160]	; 0xa0
 8008fae:	ed94 0a27 	vldr	s0, [r4, #156]	; 0x9c
 8008fb2:	f00a fc87 	bl	80138c4 <atan2f>
 8008fb6:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    rpy_.y = atan2f(-est_g_v_.x , inv_sqrt(sq_g_y_sq_g_z)* sq_g_y_sq_g_z);
 8008fba:	ed94 9a26 	vldr	s18, [r4, #152]	; 0x98
 8008fbe:	eeb0 0a48 	vmov.f32	s0, s16
 8008fc2:	f009 fa8f 	bl	80124e4 <_Z8inv_sqrtf>
 8008fc6:	ee68 0a00 	vmul.f32	s1, s16, s0
 8008fca:	eeb1 0a49 	vneg.f32	s0, s18
 8008fce:	f00a fc79 	bl	80138c4 <atan2f>
 8008fd2:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8008fd6:	ed94 7a2b 	vldr	s14, [r4, #172]	; 0xac
 8008fda:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 8008fde:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008fe2:	ed94 6a2a 	vldr	s12, [r4, #168]	; 0xa8
 8008fe6:	edd4 0a28 	vldr	s1, [r4, #160]	; 0xa0
 8008fea:	ee66 5a20 	vmul.f32	s11, s12, s1
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 8008fee:	edd4 6a29 	vldr	s13, [r4, #164]	; 0xa4
 8008ff2:	ee68 6aa6 	vmul.f32	s13, s17, s13
 8008ff6:	ee28 8a26 	vmul.f32	s16, s16, s13
 8008ffa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008ffe:	ee67 0a20 	vmul.f32	s1, s14, s1
 8009002:	ee77 0aa0 	vadd.f32	s1, s15, s1
 8009006:	ee68 8aa0 	vmul.f32	s17, s17, s1
 800900a:	edd4 0a26 	vldr	s1, [r4, #152]	; 0x98
 800900e:	ee68 0aa0 	vmul.f32	s1, s17, s1
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8009012:	ee78 0a60 	vsub.f32	s1, s16, s1
 8009016:	ee30 0a65 	vsub.f32	s0, s0, s11
 800901a:	f00a fc53 	bl	80138c4 <atan2f>
 800901e:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
     //********************************************************************************:
     //** refrence1: https://sites.google.com/site/myimuestimationexperience/sensors/magnetometer
     //** refrence2: http://uav.xenocross.net/hdg.html
     //********************************************************************************
    /* update */
    if(valid_acc) cnt++;
 8009022:	b11f      	cbz	r7, 800902c <_ZN17ComplementaryAHRS10estimationEv+0x200>
 8009024:	4a20      	ldr	r2, [pc, #128]	; (80090a8 <_ZN17ComplementaryAHRS10estimationEv+0x27c>)
 8009026:	6813      	ldr	r3, [r2, #0]
 8009028:	3301      	adds	r3, #1
 800902a:	6013      	str	r3, [r2, #0]
    if(cnt == PRESCLAER_ACC) cnt = 0;
 800902c:	4b1e      	ldr	r3, [pc, #120]	; (80090a8 <_ZN17ComplementaryAHRS10estimationEv+0x27c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b03      	cmp	r3, #3
 8009032:	d02c      	beq.n	800908e <_ZN17ComplementaryAHRS10estimationEv+0x262>
  }
 8009034:	b01e      	add	sp, #120	; 0x78
 8009036:	ecbd 8b04 	vpop	{d8-d9}
 800903a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
 800903e:	2701      	movs	r7, #1
 8009040:	e758      	b.n	8008ef4 <_ZN17ComplementaryAHRS10estimationEv+0xc8>
    if ( valid_acc == 1 && cnt == 0)
 8009042:	4b19      	ldr	r3, [pc, #100]	; (80090a8 <_ZN17ComplementaryAHRS10estimationEv+0x27c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f47f af62 	bne.w	8008f10 <_ZN17ComplementaryAHRS10estimationEv+0xe4>
      est_g_b_ = (est_g_b_tmp * GYR_CMPF_FACTOR + acc_b_) * INV_GYR_CMPF_FACTOR;
 800904c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80090ac <_ZN17ComplementaryAHRS10estimationEv+0x280>
 8009050:	a803      	add	r0, sp, #12
 8009052:	f009 f839 	bl	80120c8 <_ZNK7Vector3IfEmlEf>
 8009056:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
 800905a:	edcd 0a16 	vstr	s1, [sp, #88]	; 0x58
 800905e:	ed8d 1a17 	vstr	s2, [sp, #92]	; 0x5c
 8009062:	4649      	mov	r1, r9
 8009064:	a815      	add	r0, sp, #84	; 0x54
 8009066:	f009 f86f 	bl	8012148 <_ZNK7Vector3IfEplERKS0_>
 800906a:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 800906e:	edcd 0a13 	vstr	s1, [sp, #76]	; 0x4c
 8009072:	ed8d 1a14 	vstr	s2, [sp, #80]	; 0x50
 8009076:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80090b0 <_ZN17ComplementaryAHRS10estimationEv+0x284>
 800907a:	a812      	add	r0, sp, #72	; 0x48
 800907c:	f009 f824 	bl	80120c8 <_ZNK7Vector3IfEmlEf>
 8009080:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 8009084:	edc4 0a2d 	vstr	s1, [r4, #180]	; 0xb4
 8009088:	ed84 1a2e 	vstr	s2, [r4, #184]	; 0xb8
 800908c:	e740      	b.n	8008f10 <_ZN17ComplementaryAHRS10estimationEv+0xe4>
    if(cnt == PRESCLAER_ACC) cnt = 0;
 800908e:	2200      	movs	r2, #0
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <_ZN17ComplementaryAHRS10estimationEv+0x27c>)
 8009092:	601a      	str	r2, [r3, #0]
  }
 8009094:	e7ce      	b.n	8009034 <_ZN17ComplementaryAHRS10estimationEv+0x208>
 8009096:	bf00      	nop
 8009098:	3c3ab218 	.word	0x3c3ab218
 800909c:	42900000 	.word	0x42900000
 80090a0:	43050000 	.word	0x43050000
 80090a4:	3d1d89d9 	.word	0x3d1d89d9
 80090a8:	2000384c 	.word	0x2000384c
 80090ac:	42700000 	.word	0x42700000
 80090b0:	3c864b8a 	.word	0x3c864b8a

080090b4 <_Z41__static_initialization_and_destruction_0ii>:
	    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,GPIO_PIN_RESET);

		osDelay(5);

	}
}
 80090b4:	2801      	cmp	r0, #1
 80090b6:	d000      	beq.n	80090ba <_Z41__static_initialization_and_destruction_0ii+0x6>
 80090b8:	4770      	bx	lr
 80090ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090be:	4299      	cmp	r1, r3
 80090c0:	d1fa      	bne.n	80090b8 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80090c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80090c6:	4c1a      	ldr	r4, [pc, #104]	; (8009130 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80090c8:	2500      	movs	r5, #0
 80090ca:	6025      	str	r5, [r4, #0]
 80090cc:	6065      	str	r5, [r4, #4]
 80090ce:	60a5      	str	r5, [r4, #8]
    ENCODER_(){};
 80090d0:	f247 5a30 	movw	sl, #30000	; 0x7530
 80090d4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80090d8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8009138 <_Z41__static_initialization_and_destruction_0ii+0x84>
 80090dc:	f8c4 9010 	str.w	r9, [r4, #16]
 80090e0:	6165      	str	r5, [r4, #20]
 80090e2:	61a5      	str	r5, [r4, #24]
 80090e4:	61e5      	str	r5, [r4, #28]
 80090e6:	6225      	str	r5, [r4, #32]
 80090e8:	6265      	str	r5, [r4, #36]	; 0x24
 80090ea:	62a5      	str	r5, [r4, #40]	; 0x28
 80090ec:	2600      	movs	r6, #0
 80090ee:	62e6      	str	r6, [r4, #44]	; 0x2c
 80090f0:	6326      	str	r6, [r4, #48]	; 0x30
/* State Estimate, including attitude, altitude and pos */
#if ATTITUDE_ESTIMATE_FLAG || HEIGHT_ESTIMATE_FLAG || POS_ESTIMATE_FLAG
#include "state_estimate/state_estimate.h"
#endif
/* encoder related */
encoder::ENCODER_ Enc_handle_left;
 80090f2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800913c <_Z41__static_initialization_and_destruction_0ii+0x88>
 80090f6:	4f0f      	ldr	r7, [pc, #60]	; (8009134 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80090f8:	4642      	mov	r2, r8
 80090fa:	4639      	mov	r1, r7
 80090fc:	4620      	mov	r0, r4
 80090fe:	f009 fac3 	bl	8012688 <__aeabi_atexit>
 8009102:	6365      	str	r5, [r4, #52]	; 0x34
 8009104:	63a5      	str	r5, [r4, #56]	; 0x38
 8009106:	63e5      	str	r5, [r4, #60]	; 0x3c
 8009108:	f8a4 a040 	strh.w	sl, [r4, #64]	; 0x40
 800910c:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
 8009110:	64a5      	str	r5, [r4, #72]	; 0x48
 8009112:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009114:	6525      	str	r5, [r4, #80]	; 0x50
 8009116:	6565      	str	r5, [r4, #84]	; 0x54
 8009118:	65a5      	str	r5, [r4, #88]	; 0x58
 800911a:	65e5      	str	r5, [r4, #92]	; 0x5c
 800911c:	6626      	str	r6, [r4, #96]	; 0x60
 800911e:	6666      	str	r6, [r4, #100]	; 0x64
encoder::ENCODER_ Enc_handle_right;
 8009120:	4642      	mov	r2, r8
 8009122:	4639      	mov	r1, r7
 8009124:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009128:	f009 faae 	bl	8012688 <__aeabi_atexit>
 800912c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009130:	200006c4 	.word	0x200006c4
 8009134:	08008de7 	.word	0x08008de7
 8009138:	3903126f 	.word	0x3903126f
 800913c:	20000000 	.word	0x20000000

08009140 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE8callbackEPh>:
    virtual void callback(unsigned char* data){
 8009140:	b510      	push	{r4, lr}
 8009142:	460b      	mov	r3, r1
      msg.deserialize(data);
 8009144:	f100 010c 	add.w	r1, r0, #12
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009148:	781a      	ldrb	r2, [r3, #0]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800914a:	785c      	ldrb	r4, [r3, #1]
 800914c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009150:	789c      	ldrb	r4, [r3, #2]
 8009152:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009156:	78dc      	ldrb	r4, [r3, #3]
      this->roll = u_roll.real;
 8009158:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800915c:	604a      	str	r2, [r1, #4]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800915e:	791a      	ldrb	r2, [r3, #4]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009160:	795c      	ldrb	r4, [r3, #5]
 8009162:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009166:	799c      	ldrb	r4, [r3, #6]
 8009168:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800916c:	79dc      	ldrb	r4, [r3, #7]
      this->pitch = u_pitch.real;
 800916e:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8009172:	608a      	str	r2, [r1, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009174:	7a1a      	ldrb	r2, [r3, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009176:	7a5c      	ldrb	r4, [r3, #9]
 8009178:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800917c:	7a9c      	ldrb	r4, [r3, #10]
 800917e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009182:	7adc      	ldrb	r4, [r3, #11]
      this->yaw = u_yaw.real;
 8009184:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8009188:	60ca      	str	r2, [r1, #12]
      this->coord_type =  ((uint8_t) (*(inbuffer + offset)));
 800918a:	7b1b      	ldrb	r3, [r3, #12]
 800918c:	740b      	strb	r3, [r1, #16]
      this->fun_obj_(obj_, msg);
 800918e:	6a02      	ldr	r2, [r0, #32]
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }
 8009190:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009192:	f013 0f01 	tst.w	r3, #1
 8009196:	d007      	beq.n	80091a8 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE8callbackEPh+0x68>
 8009198:	105c      	asrs	r4, r3, #1
 800919a:	5914      	ldr	r4, [r2, r4]
 800919c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800919e:	5824      	ldr	r4, [r4, r0]
 80091a0:	eb02 0063 	add.w	r0, r2, r3, asr #1
 80091a4:	47a0      	blx	r4
 80091a6:	bd10      	pop	{r4, pc}
 80091a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80091aa:	e7f9      	b.n	80091a0 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE8callbackEPh+0x60>

080091ac <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>:
    virtual int spinOnce(){
 80091ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b0:	b086      	sub	sp, #24
 80091b2:	4604      	mov	r4, r0
  }

  uint32_t time(){return HAL_GetTick();}
 80091b4:	f003 fef4 	bl	800cfa0 <HAL_GetTick>
 80091b8:	4606      	mov	r6, r0
      if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 80091ba:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 80091be:	1ac3      	subs	r3, r0, r3
 80091c0:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d902      	bls.n	80091ce <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x22>
        configured_ = false;
 80091c8:	2300      	movs	r3, #0
 80091ca:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
      if ( mode_ != MODE_FIRST_FF){
 80091ce:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80091d2:	b37b      	cbz	r3, 8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
        if (c_time > last_msg_timeout_time){
 80091d4:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 80091d8:	42b3      	cmp	r3, r6
 80091da:	d22b      	bcs.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
          mode_ = MODE_FIRST_FF;
 80091dc:	2300      	movs	r3, #0
 80091de:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 80091e2:	e027      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
      return (byte_to_add_ - (buffer_length_ - byte_in_progress_));
 80091e4:	b293      	uxth	r3, r2
 80091e6:	f8b1 7194 	ldrh.w	r7, [r1, #404]	; 0x194
 80091ea:	1bdb      	subs	r3, r3, r7
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	fa13 f380 	uxtah	r3, r3, r0
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	e02b      	b.n	800924e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xa2>
          byte_in_progress_ = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
 80091fc:	e034      	b.n	8009268 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xbc>
    if(!available()) return -1;
 80091fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009202:	e032      	b.n	800926a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xbe>
            message_in[index_++] = data;
 8009204:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	f8c4 22c8 	str.w	r2, [r4, #712]	; 0x2c8
 800920e:	4423      	add	r3, r4
 8009210:	7719      	strb	r1, [r3, #28]
            bytes_--;
 8009212:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009216:	3b01      	subs	r3, #1
 8009218:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 800921c:	b953      	cbnz	r3, 8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
              mode_ = MODE_MSG_CHECKSUM;
 800921e:	2308      	movs	r3, #8
 8009220:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 8009224:	e006      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
              mode_++;
 8009226:	3301      	adds	r3, #1
 8009228:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 800922c:	f106 0314 	add.w	r3, r6, #20
 8009230:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
  bool available() { return ring_buf_->length(); }
 8009234:	4b9e      	ldr	r3, [pc, #632]	; (80094b0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x304>)
 8009236:	6819      	ldr	r1, [r3, #0]
    if(byte_to_add_ - byte_in_progress_ >= 0)
 8009238:	f9b1 0192 	ldrsh.w	r0, [r1, #402]	; 0x192
 800923c:	f9b1 2190 	ldrsh.w	r2, [r1, #400]	; 0x190
 8009240:	1a83      	subs	r3, r0, r2
 8009242:	2b00      	cmp	r3, #0
 8009244:	dbce      	blt.n	80091e4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x38>
      return (byte_to_add_ - byte_in_progress_);
 8009246:	b283      	uxth	r3, r0
 8009248:	b297      	uxth	r7, r2
 800924a:	1bdb      	subs	r3, r3, r7
 800924c:	b29b      	uxth	r3, r3
    if(!available()) return -1;
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0d5      	beq.n	80091fe <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x52>
    if (byte_in_progress_ != byte_to_add_)
 8009252:	4290      	cmp	r0, r2
 8009254:	d008      	beq.n	8009268 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xbc>
        pop_value =  buf_[byte_in_progress_];
 8009256:	5c8d      	ldrb	r5, [r1, r2]
        byte_in_progress_++;
 8009258:	3201      	adds	r2, #1
 800925a:	b212      	sxth	r2, r2
 800925c:	f8a1 2190 	strh.w	r2, [r1, #400]	; 0x190
        if (byte_in_progress_ == buffer_length_)
 8009260:	f8b1 3194 	ldrh.w	r3, [r1, #404]	; 0x194
 8009264:	429a      	cmp	r2, r3
 8009266:	d0c6      	beq.n	80091f6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4a>
    return  r_data;
 8009268:	4629      	mov	r1, r5
          if( data < 0 )
 800926a:	2900      	cmp	r1, #0
 800926c:	f2c0 8211 	blt.w	8009692 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e6>
          checksum_ += data;
 8009270:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
 8009274:	440a      	add	r2, r1
 8009276:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800927a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800927e:	2b07      	cmp	r3, #7
 8009280:	d0c0      	beq.n	8009204 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x58>
          }else if( mode_ == MODE_FIRST_FF ){
 8009282:	b963      	cbnz	r3, 800929e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xf2>
            if(data == 0xff){
 8009284:	29ff      	cmp	r1, #255	; 0xff
 8009286:	d0ce      	beq.n	8009226 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x7a>
  uint32_t time(){return HAL_GetTick();}
 8009288:	f003 fe8a 	bl	800cfa0 <HAL_GetTick>
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 800928c:	1b80      	subs	r0, r0, r6
 800928e:	2805      	cmp	r0, #5
 8009290:	d9d0      	bls.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
              configured_=false;
 8009292:	2300      	movs	r3, #0
 8009294:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
              return -2;
 8009298:	f06f 0001 	mvn.w	r0, #1
 800929c:	e218      	b.n	80096d0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x524>
          }else if( mode_ == MODE_PROTOCOL_VER ){
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d034      	beq.n	800930c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x160>
          }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d04e      	beq.n	8009344 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x198>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d057      	beq.n	800935a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1ae>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d05f      	beq.n	800936e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1c2>
          }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 80092ae:	2b05      	cmp	r3, #5
 80092b0:	d06c      	beq.n	800938c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1e0>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 80092b2:	2b06      	cmp	r3, #6
 80092b4:	d072      	beq.n	800939c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1f0>
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 80092b6:	2b08      	cmp	r3, #8
 80092b8:	d1bc      	bne.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
            mode_ = MODE_FIRST_FF;
 80092ba:	2300      	movs	r3, #0
 80092bc:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            if( (checksum_%256) == 255){
 80092c0:	1a9b      	subs	r3, r3, r2
 80092c2:	b2d2      	uxtb	r2, r2
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	bf58      	it	pl
 80092c8:	425a      	negpl	r2, r3
 80092ca:	2aff      	cmp	r2, #255	; 0xff
 80092cc:	d1b2      	bne.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 80092ce:	f8d4 72c4 	ldr.w	r7, [r4, #708]	; 0x2c4
 80092d2:	2f00      	cmp	r7, #0
 80092d4:	d074      	beq.n	80093c0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x214>
              }else if(topic_ == TopicInfo::ID_TIME){
 80092d6:	2f0a      	cmp	r7, #10
 80092d8:	f000 80f2 	beq.w	80094c0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x314>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 80092dc:	2f06      	cmp	r7, #6
 80092de:	f000 8135 	beq.w	800954c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x3a0>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 80092e2:	2f0b      	cmp	r7, #11
 80092e4:	f000 81d1 	beq.w	800968a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4de>
                if(subscribers[topic_-100])
 80092e8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80092ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092f0:	6858      	ldr	r0, [r3, #4]
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d09e      	beq.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
                  subscribers[topic_-100]->callback( message_in );
 80092f6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80092fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f104 011c 	add.w	r1, r4, #28
 8009308:	4798      	blx	r3
 800930a:	e793      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
            if(data == PROTOCOL_VER){
 800930c:	29fe      	cmp	r1, #254	; 0xfe
 800930e:	d015      	beq.n	800933c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x190>
              mode_ = MODE_FIRST_FF;
 8009310:	2300      	movs	r3, #0
 8009312:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
              if (configured_ == false)
 8009316:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d18a      	bne.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
      data()
 800931e:	4b65      	ldr	r3, [pc, #404]	; (80094b4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x308>)
 8009320:	9300      	str	r3, [sp, #0]
  class Time
  {
  public:
    uint32_t sec, nsec;

    Time() : sec(0), nsec(0) {}
 8009322:	2300      	movs	r3, #0
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	9302      	str	r3, [sp, #8]
      publish(TopicInfo::ID_TIME, &t);
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	466a      	mov	r2, sp
 800932e:	210a      	movs	r1, #10
 8009330:	4620      	mov	r0, r4
 8009332:	4798      	blx	r3
 8009334:	f003 fe34 	bl	800cfa0 <HAL_GetTick>
      rt_time = hardware_.time();
 8009338:	6120      	str	r0, [r4, #16]
 800933a:	e77b      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
              mode_++;
 800933c:	3301      	adds	r3, #1
 800933e:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 8009342:	e777      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
            bytes_ = data;
 8009344:	f8c4 12c0 	str.w	r1, [r4, #704]	; 0x2c0
            index_ = 0;
 8009348:	2200      	movs	r2, #0
 800934a:	f8c4 22c8 	str.w	r2, [r4, #712]	; 0x2c8
            mode_++;
 800934e:	3301      	adds	r3, #1
 8009350:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            checksum_ = data;               /* first byte for calculating size checksum */
 8009354:	f8c4 12cc 	str.w	r1, [r4, #716]	; 0x2cc
 8009358:	e76c      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
            bytes_ += data<<8;
 800935a:	f8d4 22c0 	ldr.w	r2, [r4, #704]	; 0x2c0
 800935e:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 8009362:	f8c4 12c0 	str.w	r1, [r4, #704]	; 0x2c0
            mode_++;
 8009366:	3301      	adds	r3, #1
 8009368:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 800936c:	e762      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
            if( (checksum_%256) == 255)
 800936e:	4251      	negs	r1, r2
 8009370:	b2d2      	uxtb	r2, r2
 8009372:	b2c9      	uxtb	r1, r1
 8009374:	bf58      	it	pl
 8009376:	424a      	negpl	r2, r1
 8009378:	2aff      	cmp	r2, #255	; 0xff
 800937a:	d003      	beq.n	8009384 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1d8>
              mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800937c:	2300      	movs	r3, #0
 800937e:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 8009382:	e757      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
              mode_++;
 8009384:	3301      	adds	r3, #1
 8009386:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 800938a:	e753      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
            topic_ = data;
 800938c:	f8c4 12c4 	str.w	r1, [r4, #708]	; 0x2c4
            mode_++;
 8009390:	3301      	adds	r3, #1
 8009392:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            checksum_ = data;               /* first byte included in checksum */
 8009396:	f8c4 12cc 	str.w	r1, [r4, #716]	; 0x2cc
 800939a:	e74b      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
            topic_ += data<<8;
 800939c:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 80093a0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80093a4:	f8c4 12c4 	str.w	r1, [r4, #708]	; 0x2c4
            mode_ = MODE_MESSAGE;
 80093a8:	2307      	movs	r3, #7
 80093aa:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            if(bytes_ == 0)
 80093ae:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f47f af3e 	bne.w	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
              mode_ = MODE_MSG_CHECKSUM;
 80093b8:	2308      	movs	r3, #8
 80093ba:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 80093be:	e739      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
 80093c0:	4b3c      	ldr	r3, [pc, #240]	; (80094b4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x308>)
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	2500      	movs	r5, #0
 80093c6:	9501      	str	r5, [sp, #4]
 80093c8:	9502      	str	r5, [sp, #8]
      publish(TopicInfo::ID_TIME, &t);
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	466a      	mov	r2, sp
 80093d0:	210a      	movs	r1, #10
 80093d2:	4620      	mov	r0, r4
 80093d4:	4798      	blx	r3
 80093d6:	f003 fde3 	bl	800cfa0 <HAL_GetTick>
      rt_time = hardware_.time();
 80093da:	6120      	str	r0, [r4, #16]
      buffer_size(0)
 80093dc:	4b36      	ldr	r3, [pc, #216]	; (80094b8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x30c>)
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	f8ad 5004 	strh.w	r5, [sp, #4]
 80093e4:	4b35      	ldr	r3, [pc, #212]	; (80094bc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x310>)
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	9303      	str	r3, [sp, #12]
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	9505      	str	r5, [sp, #20]
      for(i = 0; i < MAX_PUBLISHERS; i++)
 80093ee:	463d      	mov	r5, r7
 80093f0:	e000      	b.n	80093f4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x248>
 80093f2:	3501      	adds	r5, #1
 80093f4:	2d13      	cmp	r5, #19
 80093f6:	dc27      	bgt.n	8009448 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x29c>
          if(publishers[i] != 0) // non-empty slot
 80093f8:	f105 0386 	add.w	r3, r5, #134	; 0x86
 80093fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0f5      	beq.n	80093f2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x246>
              ti.topic_id = publishers[i]->id_;
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	f8ad 2004 	strh.w	r2, [sp, #4]
              ti.topic_name = (char *) publishers[i]->topic_;
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	9202      	str	r2, [sp, #8]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8009410:	6858      	ldr	r0, [r3, #4]
 8009412:	6803      	ldr	r3, [r0, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	4798      	blx	r3
 8009418:	9003      	str	r0, [sp, #12]
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800941a:	f105 0886 	add.w	r8, r5, #134	; 0x86
 800941e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8009422:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009426:	6858      	ldr	r0, [r3, #4]
 8009428:	6803      	ldr	r3, [r0, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	4798      	blx	r3
 800942e:	9004      	str	r0, [sp, #16]
              ti.buffer_size = OUTPUT_SIZE;
 8009430:	23ff      	movs	r3, #255	; 0xff
 8009432:	9305      	str	r3, [sp, #20]
              publish( publishers[i]->getEndpointType(), &ti );
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800943c:	466a      	mov	r2, sp
 800943e:	6909      	ldr	r1, [r1, #16]
 8009440:	4620      	mov	r0, r4
 8009442:	4798      	blx	r3
 8009444:	e7d5      	b.n	80093f2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x246>
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 8009446:	3701      	adds	r7, #1
 8009448:	2f13      	cmp	r7, #19
 800944a:	dc26      	bgt.n	800949a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2ee>
          if(subscribers[i] != 0) // non-empty slot
 800944c:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 8009450:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009454:	6858      	ldr	r0, [r3, #4]
 8009456:	2800      	cmp	r0, #0
 8009458:	d0f5      	beq.n	8009446 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x29a>
              ti.topic_id = subscribers[i]->id_;
 800945a:	6843      	ldr	r3, [r0, #4]
 800945c:	f8ad 3004 	strh.w	r3, [sp, #4]
              ti.topic_name = (char *) subscribers[i]->topic_;
 8009460:	6883      	ldr	r3, [r0, #8]
 8009462:	9302      	str	r3, [sp, #8]
              ti.message_type = (char *) subscribers[i]->getMsgType();
 8009464:	6803      	ldr	r3, [r0, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	4798      	blx	r3
 800946a:	9003      	str	r0, [sp, #12]
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800946c:	f107 059a 	add.w	r5, r7, #154	; 0x9a
 8009470:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009474:	6868      	ldr	r0, [r5, #4]
 8009476:	6803      	ldr	r3, [r0, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	4798      	blx	r3
 800947c:	9004      	str	r0, [sp, #16]
              ti.buffer_size = INPUT_SIZE;
 800947e:	23ff      	movs	r3, #255	; 0xff
 8009480:	9305      	str	r3, [sp, #20]
              publish( subscribers[i]->getEndpointType(), &ti );
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	f8d3 8000 	ldr.w	r8, [r3]
 8009488:	6868      	ldr	r0, [r5, #4]
 800948a:	6803      	ldr	r3, [r0, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	4798      	blx	r3
 8009490:	466a      	mov	r2, sp
 8009492:	4601      	mov	r1, r0
 8009494:	4620      	mov	r0, r4
 8009496:	47c0      	blx	r8
 8009498:	e7d5      	b.n	8009446 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x29a>
      configured_ = true;
 800949a:	2301      	movs	r3, #1
 800949c:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
                last_sync_time = c_time;
 80094a0:	f8c4 62d4 	str.w	r6, [r4, #724]	; 0x2d4
                last_sync_receive_time = c_time;
 80094a4:	f8c4 62d8 	str.w	r6, [r4, #728]	; 0x2d8
                return -1;
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ac:	e110      	b.n	80096d0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x524>
 80094ae:	bf00      	nop
 80094b0:	20003848 	.word	0x20003848
 80094b4:	0801985c 	.word	0x0801985c
 80094b8:	08019874 	.word	0x08019874
 80094bc:	0801a208 	.word	0x0801a208
                syncTime(message_in);
 80094c0:	f104 071c 	add.w	r7, r4, #28
 80094c4:	f003 fd6c 	bl	800cfa0 <HAL_GetTick>
      uint32_t offset = hardware_.time() - rt_time;
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	1ac0      	subs	r0, r0, r3
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80094cc:	7f22      	ldrb	r2, [r4, #28]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80094ce:	463b      	mov	r3, r7
 80094d0:	7879      	ldrb	r1, [r7, #1]
 80094d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80094d6:	78b9      	ldrb	r1, [r7, #2]
 80094d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80094dc:	78f9      	ldrb	r1, [r7, #3]
 80094de:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80094e2:	793a      	ldrb	r2, [r7, #4]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80094e4:	797f      	ldrb	r7, [r7, #5]
 80094e6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80094ea:	799f      	ldrb	r7, [r3, #6]
 80094ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80094f0:	79db      	ldrb	r3, [r3, #7]
 80094f2:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
      t.data.sec += offset/1000;
 80094f6:	4f78      	ldr	r7, [pc, #480]	; (80096d8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x52c>)
 80094f8:	fba7 e300 	umull	lr, r3, r7, r0
 80094fc:	099b      	lsrs	r3, r3, #6
 80094fe:	4419      	add	r1, r3
 8009500:	9101      	str	r1, [sp, #4]
      t.data.nsec += (offset%1000)*1000000UL;
 8009502:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 8009506:	fb09 0313 	mls	r3, r9, r3, r0
 800950a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80096e4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x538>
 800950e:	fb08 2303 	mla	r3, r8, r3, r2
 8009512:	9302      	str	r3, [sp, #8]
 8009514:	f003 fd44 	bl	800cfa0 <HAL_GetTick>
      sec_offset = new_now.sec - ms/1000 - 1;
 8009518:	fba7 2300 	umull	r2, r3, r7, r0
 800951c:	099b      	lsrs	r3, r3, #6
 800951e:	9a01      	ldr	r2, [sp, #4]
 8009520:	1ad2      	subs	r2, r2, r3
 8009522:	3a01      	subs	r2, #1
 8009524:	6162      	str	r2, [r4, #20]
      nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 8009526:	fb09 0313 	mls	r3, r9, r3, r0
 800952a:	9a02      	ldr	r2, [sp, #8]
 800952c:	fb08 2313 	mls	r3, r8, r3, r2
 8009530:	4a6a      	ldr	r2, [pc, #424]	; (80096dc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x530>)
 8009532:	441a      	add	r2, r3
 8009534:	61a2      	str	r2, [r4, #24]
      normalizeSecNSec(sec_offset, nsec_offset);
 8009536:	f104 0118 	add.w	r1, r4, #24
 800953a:	f104 0014 	add.w	r0, r4, #20
 800953e:	f003 fccf 	bl	800cee0 <_ZN3ros16normalizeSecNSecERmS0_>
 8009542:	f003 fd2d 	bl	800cfa0 <HAL_GetTick>
      last_sync_receive_time = hardware_.time();
 8009546:	f8c4 02d8 	str.w	r0, [r4, #728]	; 0x2d8
 800954a:	e673      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
                req_param_resp.deserialize(message_in);
 800954c:	f504 7939 	add.w	r9, r4, #740	; 0x2e4
 8009550:	f104 081c 	add.w	r8, r4, #28
      uint8_t ints_lengthT = *(inbuffer + offset++);
 8009554:	7f27      	ldrb	r7, [r4, #28]
      if(ints_lengthT > ints_length)
 8009556:	f899 3004 	ldrb.w	r3, [r9, #4]
 800955a:	429f      	cmp	r7, r3
 800955c:	dc22      	bgt.n	80095a4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x3f8>
      ints_length = ints_lengthT;
 800955e:	f889 7004 	strb.w	r7, [r9, #4]
      for( uint8_t i = 0; i < ints_length; i++){
 8009562:	2200      	movs	r2, #0
      offset += 3;
 8009564:	2704      	movs	r7, #4
      for( uint8_t i = 0; i < ints_length; i++){
 8009566:	f899 3004 	ldrb.w	r3, [r9, #4]
 800956a:	429a      	cmp	r2, r3
 800956c:	da22      	bge.n	80095b4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x408>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800956e:	f818 3007 	ldrb.w	r3, [r8, r7]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009572:	1c79      	adds	r1, r7, #1
 8009574:	f818 1001 	ldrb.w	r1, [r8, r1]
 8009578:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800957c:	1cb9      	adds	r1, r7, #2
 800957e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8009582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009586:	1cf9      	adds	r1, r7, #3
 8009588:	f818 1001 	ldrb.w	r1, [r8, r1]
 800958c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 8009590:	f8c9 3008 	str.w	r3, [r9, #8]
      offset += sizeof(this->st_ints);
 8009594:	3704      	adds	r7, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8009596:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800959a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint8_t i = 0; i < ints_length; i++){
 800959e:	3201      	adds	r2, #1
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	e7e0      	b.n	8009566 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x3ba>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80095a4:	00b9      	lsls	r1, r7, #2
 80095a6:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80095aa:	f00c fab3 	bl	8015b14 <realloc>
 80095ae:	f8c9 000c 	str.w	r0, [r9, #12]
 80095b2:	e7d4      	b.n	800955e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x3b2>
      uint8_t floats_lengthT = *(inbuffer + offset++);
 80095b4:	f818 a007 	ldrb.w	sl, [r8, r7]
      if(floats_lengthT > floats_length)
 80095b8:	f899 3010 	ldrb.w	r3, [r9, #16]
 80095bc:	459a      	cmp	sl, r3
 80095be:	dc22      	bgt.n	8009606 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x45a>
      offset += 3;
 80095c0:	3704      	adds	r7, #4
      floats_length = floats_lengthT;
 80095c2:	f889 a010 	strb.w	sl, [r9, #16]
      for( uint8_t i = 0; i < floats_length; i++){
 80095c6:	2200      	movs	r2, #0
 80095c8:	f899 3010 	ldrb.w	r3, [r9, #16]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	da23      	bge.n	8009618 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x46c>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80095d0:	f818 3007 	ldrb.w	r3, [r8, r7]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80095d4:	1c79      	adds	r1, r7, #1
 80095d6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80095da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80095de:	1cb9      	adds	r1, r7, #2
 80095e0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80095e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80095e8:	1cf9      	adds	r1, r7, #3
 80095ea:	f818 1001 	ldrb.w	r1, [r8, r1]
 80095ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 80095f2:	f8c9 3014 	str.w	r3, [r9, #20]
      offset += sizeof(this->st_floats);
 80095f6:	3704      	adds	r7, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80095f8:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80095fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint8_t i = 0; i < floats_length; i++){
 8009600:	3201      	adds	r2, #1
 8009602:	b2d2      	uxtb	r2, r2
 8009604:	e7e0      	b.n	80095c8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x41c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8009606:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800960a:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800960e:	f00c fa81 	bl	8015b14 <realloc>
 8009612:	f8c9 0018 	str.w	r0, [r9, #24]
 8009616:	e7d3      	b.n	80095c0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x414>
      uint8_t strings_lengthT = *(inbuffer + offset++);
 8009618:	f818 a007 	ldrb.w	sl, [r8, r7]
      if(strings_lengthT > strings_length)
 800961c:	f899 301c 	ldrb.w	r3, [r9, #28]
 8009620:	459a      	cmp	sl, r3
 8009622:	dc04      	bgt.n	800962e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x482>
      offset += 3;
 8009624:	1d3a      	adds	r2, r7, #4
      strings_length = strings_lengthT;
 8009626:	f889 a01c 	strb.w	sl, [r9, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 800962a:	2000      	movs	r0, #0
 800962c:	e016      	b.n	800965c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4b0>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800962e:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8009632:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 8009636:	f00c fa6d 	bl	8015b14 <realloc>
 800963a:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 800963e:	e7f1      	b.n	8009624 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x478>
      inbuffer[offset+length_st_strings-1]=0;
 8009640:	1e53      	subs	r3, r2, #1
 8009642:	2100      	movs	r1, #0
 8009644:	f808 1003 	strb.w	r1, [r8, r3]
      this->st_strings = (char *)(inbuffer + offset-1);
 8009648:	1e7b      	subs	r3, r7, #1
 800964a:	4443      	add	r3, r8
 800964c:	f8c9 3020 	str.w	r3, [r9, #32]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8009650:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
 8009654:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
      for( uint8_t i = 0; i < strings_length; i++){
 8009658:	3001      	adds	r0, #1
 800965a:	b2c0      	uxtb	r0, r0
 800965c:	f899 301c 	ldrb.w	r3, [r9, #28]
 8009660:	4298      	cmp	r0, r3
 8009662:	da0e      	bge.n	8009682 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4d6>
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 8009664:	f858 e002 	ldr.w	lr, [r8, r2]
      offset += 4;
 8009668:	1d17      	adds	r7, r2, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800966a:	463b      	mov	r3, r7
 800966c:	eb0e 0207 	add.w	r2, lr, r7
 8009670:	429a      	cmp	r2, r3
 8009672:	d9e5      	bls.n	8009640 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x494>
          inbuffer[k-1]=inbuffer[k];
 8009674:	1e5a      	subs	r2, r3, #1
 8009676:	f818 1003 	ldrb.w	r1, [r8, r3]
 800967a:	f808 1002 	strb.w	r1, [r8, r2]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800967e:	3301      	adds	r3, #1
 8009680:	e7f4      	b.n	800966c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4c0>
                param_recieved= true;
 8009682:	2301      	movs	r3, #1
 8009684:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
 8009688:	e5d4      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
                configured_ = false;
 800968a:	2300      	movs	r3, #0
 800968c:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
 8009690:	e5d0      	b.n	8009234 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x88>
      if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 8009692:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
 8009696:	b1d3      	cbz	r3, 80096ce <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x522>
 8009698:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800969c:	1af3      	subs	r3, r6, r3
 800969e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d801      	bhi.n	80096aa <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4fe>
      return 0;
 80096a6:	2000      	movs	r0, #0
 80096a8:	e012      	b.n	80096d0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x524>
      data()
 80096aa:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x534>)
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	2500      	movs	r5, #0
 80096b0:	9501      	str	r5, [sp, #4]
 80096b2:	9502      	str	r5, [sp, #8]
      publish(TopicInfo::ID_TIME, &t);
 80096b4:	6823      	ldr	r3, [r4, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	466a      	mov	r2, sp
 80096ba:	210a      	movs	r1, #10
 80096bc:	4620      	mov	r0, r4
 80096be:	4798      	blx	r3
 80096c0:	f003 fc6e 	bl	800cfa0 <HAL_GetTick>
      rt_time = hardware_.time();
 80096c4:	6120      	str	r0, [r4, #16]
        last_sync_time = c_time;
 80096c6:	f8c4 62d4 	str.w	r6, [r4, #724]	; 0x2d4
      return 0;
 80096ca:	4628      	mov	r0, r5
 80096cc:	e000      	b.n	80096d0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x524>
 80096ce:	2000      	movs	r0, #0
    }
 80096d0:	b006      	add	sp, #24
 80096d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d6:	bf00      	nop
 80096d8:	10624dd3 	.word	0x10624dd3
 80096dc:	3b9aca00 	.word	0x3b9aca00
 80096e0:	0801985c 	.word	0x0801985c
 80096e4:	000f4240 	.word	0x000f4240

080096e8 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>:
  void init(IMU* imu, ros::NodeHandle* nh)
 80096e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ea:	b087      	sub	sp, #28
 80096ec:	4604      	mov	r4, r0
 80096ee:	460d      	mov	r5, r1
    nh_ = nh;
 80096f0:	4606      	mov	r6, r0
 80096f2:	f846 2b08 	str.w	r2, [r6], #8
    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 80096f6:	2014      	movs	r0, #20
 80096f8:	f008 ffcc 	bl	8012694 <_Znwj>
  {
  public:
    Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
      topic_(topic_name), 
      msg_(msg),
      endpoint_(endpoint) {};
 80096fc:	4b50      	ldr	r3, [pc, #320]	; (8009840 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x158>)
 80096fe:	6003      	str	r3, [r0, #0]
 8009700:	6046      	str	r6, [r0, #4]
 8009702:	2300      	movs	r3, #0
 8009704:	6103      	str	r3, [r0, #16]
 8009706:	6060      	str	r0, [r4, #4]
    nh_->advertise(*imu_pub_);
 8009708:	6821      	ldr	r1, [r4, #0]
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 800970a:	2b13      	cmp	r3, #19
 800970c:	dc0f      	bgt.n	800972e <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x46>
        if(publishers[i] == 0){ // empty slot
 800970e:	f103 0286 	add.w	r2, r3, #134	; 0x86
 8009712:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009716:	6852      	ldr	r2, [r2, #4]
 8009718:	b10a      	cbz	r2, 800971e <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x36>
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 800971a:	3301      	adds	r3, #1
 800971c:	e7f5      	b.n	800970a <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x22>
          publishers[i] = &p;
 800971e:	f103 0286 	add.w	r2, r3, #134	; 0x86
 8009722:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009726:	6050      	str	r0, [r2, #4]
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8009728:	3378      	adds	r3, #120	; 0x78
 800972a:	6083      	str	r3, [r0, #8]
          p.nh_ = this;
 800972c:	60c1      	str	r1, [r0, #12]
    desire_coord_sub_ = new ros::Subscriber2<jsk_imu_mini_msgs::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
 800972e:	2030      	movs	r0, #48	; 0x30
 8009730:	f008 ffb0 	bl	8012694 <_Znwj>
 8009734:	4606      	mov	r6, r0
 8009736:	4b43      	ldr	r3, [pc, #268]	; (8009844 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x15c>)
 8009738:	9304      	str	r3, [sp, #16]
 800973a:	2300      	movs	r3, #0
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	aa06      	add	r2, sp, #24
 8009740:	e912 0003 	ldmdb	r2, {r0, r1}
 8009744:	e88d 0003 	stmia.w	sp, {r0, r1}
      obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8009748:	4a3f      	ldr	r2, [pc, #252]	; (8009848 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x160>)
 800974a:	6032      	str	r2, [r6, #0]
      coord_type(0)
 800974c:	4a3f      	ldr	r2, [pc, #252]	; (800984c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x164>)
 800974e:	60f2      	str	r2, [r6, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	6132      	str	r2, [r6, #16]
 8009754:	6172      	str	r2, [r6, #20]
 8009756:	61b2      	str	r2, [r6, #24]
 8009758:	7733      	strb	r3, [r6, #28]
 800975a:	6234      	str	r4, [r6, #32]
 800975c:	aa02      	add	r2, sp, #8
 800975e:	e882 0003 	stmia.w	r2, {r0, r1}
      : _M_f(__pf) { }
 8009762:	f106 0724 	add.w	r7, r6, #36	; 0x24
 8009766:	e887 0003 	stmia.w	r7, {r0, r1}
 800976a:	2201      	movs	r2, #1
 800976c:	62f2      	str	r2, [r6, #44]	; 0x2c
      topic_ = topic_name;
 800976e:	4a38      	ldr	r2, [pc, #224]	; (8009850 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x168>)
 8009770:	60b2      	str	r2, [r6, #8]
 8009772:	6466      	str	r6, [r4, #68]	; 0x44
    nh_->subscribe<jsk_imu_mini_msgs::DesireCoord, AttitudeEstimate>(*desire_coord_sub_);
 8009774:	6821      	ldr	r1, [r4, #0]
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8009776:	2b13      	cmp	r3, #19
 8009778:	dc0e      	bgt.n	8009798 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xb0>
        if(subscribers[i] == 0){ // empty slot
 800977a:	f103 029a 	add.w	r2, r3, #154	; 0x9a
 800977e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009782:	6852      	ldr	r2, [r2, #4]
 8009784:	b10a      	cbz	r2, 800978a <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xa2>
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8009786:	3301      	adds	r3, #1
 8009788:	e7f5      	b.n	8009776 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x8e>
          subscribers[i] = (Subscriber_*) &s;
 800978a:	f103 029a 	add.w	r2, r3, #154	; 0x9a
 800978e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009792:	604e      	str	r6, [r1, #4]
          s.id_ = i+100;
 8009794:	3364      	adds	r3, #100	; 0x64
 8009796:	6073      	str	r3, [r6, #4]
    imu_ = imu;
 8009798:	64e5      	str	r5, [r4, #76]	; 0x4c
    last_pub_time_ = HAL_GetTick();
 800979a:	f003 fc01 	bl	800cfa0 <HAL_GetTick>
 800979e:	6520      	str	r0, [r4, #80]	; 0x50
    estimator_ = new ComplementaryAHRS();
 80097a0:	20c8      	movs	r0, #200	; 0xc8
 80097a2:	f008 ff77 	bl	8012694 <_Znwj>
public:
    T        x, y, z;

    // trivial ctor
    Vector3<T>() {
        x = y = z = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60c3      	str	r3, [r0, #12]
 80097aa:	6083      	str	r3, [r0, #8]
 80097ac:	6043      	str	r3, [r0, #4]
 80097ae:	6183      	str	r3, [r0, #24]
 80097b0:	6143      	str	r3, [r0, #20]
 80097b2:	6103      	str	r3, [r0, #16]
 80097b4:	6243      	str	r3, [r0, #36]	; 0x24
 80097b6:	6203      	str	r3, [r0, #32]
 80097b8:	61c3      	str	r3, [r0, #28]
 80097ba:	6303      	str	r3, [r0, #48]	; 0x30
 80097bc:	62c3      	str	r3, [r0, #44]	; 0x2c
 80097be:	6283      	str	r3, [r0, #40]	; 0x28
 80097c0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80097c2:	6383      	str	r3, [r0, #56]	; 0x38
 80097c4:	6343      	str	r3, [r0, #52]	; 0x34
 80097c6:	6483      	str	r3, [r0, #72]	; 0x48
 80097c8:	6443      	str	r3, [r0, #68]	; 0x44
 80097ca:	6403      	str	r3, [r0, #64]	; 0x40
 80097cc:	6543      	str	r3, [r0, #84]	; 0x54
 80097ce:	6503      	str	r3, [r0, #80]	; 0x50
 80097d0:	6603      	str	r3, [r0, #96]	; 0x60
 80097d2:	6583      	str	r3, [r0, #88]	; 0x58
 80097d4:	6683      	str	r3, [r0, #104]	; 0x68
 80097d6:	6643      	str	r3, [r0, #100]	; 0x64
 80097d8:	6783      	str	r3, [r0, #120]	; 0x78
 80097da:	6743      	str	r3, [r0, #116]	; 0x74
 80097dc:	6703      	str	r3, [r0, #112]	; 0x70
    float        q1, q2, q3, q4;

    // constructor creates a quaternion equivalent
    // to roll=0, pitch=0, yaw=0
    Quaternion() {
        q1 = 1; q2 = q3 = q4 = 0;
 80097de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80097e2:	67c2      	str	r2, [r0, #124]	; 0x7c
 80097e4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80097e8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80097ec:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    abs_rel_(ABSOLUTE_COORD)
 80097f0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 80097f4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80097f8:	2100      	movs	r1, #0
 80097fa:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
    // zero the matrix
    void        zero(void);

    // setup the identity matrix
    void        identity(void) {
        a.x = b.y = c.z = 1;
 80097fe:	66c2      	str	r2, [r0, #108]	; 0x6c
 8009800:	65c2      	str	r2, [r0, #92]	; 0x5c
 8009802:	64c2      	str	r2, [r0, #76]	; 0x4c
                       est_g_b_(), est_m_b_()
 8009804:	4a13      	ldr	r2, [pc, #76]	; (8009854 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x16c>)
 8009806:	6002      	str	r2, [r0, #0]
 8009808:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 800980c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
 8009810:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 8009814:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
 8009818:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 800981c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 8009820:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8009824:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8009828:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 800982c:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 8009830:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
 8009834:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 8009838:	64a0      	str	r0, [r4, #72]	; 0x48
  }
 800983a:	b007      	add	sp, #28
 800983c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800983e:	bf00      	nop
 8009840:	080199e8 	.word	0x080199e8
 8009844:	08008e09 	.word	0x08008e09
 8009848:	0801990c 	.word	0x0801990c
 800984c:	080198e8 	.word	0x080198e8
 8009850:	080199ec 	.word	0x080199ec
 8009854:	08019900 	.word	0x08019900

08009858 <StartenchallTask>:
{
 8009858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800985c:	f5ad 6dce 	sub.w	sp, sp, #1648	; 0x670
    NodeHandle_() : configured_(false) {
 8009860:	4ba6      	ldr	r3, [pc, #664]	; (8009afc <StartenchallTask+0x2a4>)
 8009862:	9394      	str	r3, [sp, #592]	; 0x250
    baud_ = 921600;
 8009864:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8009868:	9397      	str	r3, [sp, #604]	; 0x25c
 800986a:	2300      	movs	r3, #0
 800986c:	f88d 3520 	strb.w	r3, [sp, #1312]	; 0x520
      strings_length(0), strings(NULL)
 8009870:	4aa3      	ldr	r2, [pc, #652]	; (8009b00 <StartenchallTask+0x2a8>)
 8009872:	f8cd 2534 	str.w	r2, [sp, #1332]	; 0x534
 8009876:	f88d 3538 	strb.w	r3, [sp, #1336]	; 0x538
 800987a:	f8cd 3540 	str.w	r3, [sp, #1344]	; 0x540
 800987e:	f88d 3544 	strb.w	r3, [sp, #1348]	; 0x544
 8009882:	f8cd 354c 	str.w	r3, [sp, #1356]	; 0x54c
 8009886:	f88d 3550 	strb.w	r3, [sp, #1360]	; 0x550
 800988a:	f8cd 3558 	str.w	r3, [sp, #1368]	; 0x558
      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 800988e:	2b13      	cmp	r3, #19
 8009890:	d808      	bhi.n	80098a4 <StartenchallTask+0x4c>
        publishers[i] = 0;
 8009892:	f103 0286 	add.w	r2, r3, #134	; 0x86
 8009896:	a994      	add	r1, sp, #592	; 0x250
 8009898:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800989c:	2100      	movs	r1, #0
 800989e:	6051      	str	r1, [r2, #4]
      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 80098a0:	3301      	adds	r3, #1
 80098a2:	e7f4      	b.n	800988e <StartenchallTask+0x36>
 80098a4:	2300      	movs	r3, #0
      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 80098a6:	2b13      	cmp	r3, #19
 80098a8:	d808      	bhi.n	80098bc <StartenchallTask+0x64>
        subscribers[i] = 0;
 80098aa:	f103 029a 	add.w	r2, r3, #154	; 0x9a
 80098ae:	a994      	add	r1, sp, #592	; 0x250
 80098b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80098b4:	2100      	movs	r1, #0
 80098b6:	6051      	str	r1, [r2, #4]
      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 80098b8:	3301      	adds	r3, #1
 80098ba:	e7f4      	b.n	80098a6 <StartenchallTask+0x4e>
 80098bc:	2300      	movs	r3, #0
      for(unsigned int i=0; i< INPUT_SIZE; i++)
 80098be:	2bfe      	cmp	r3, #254	; 0xfe
 80098c0:	d805      	bhi.n	80098ce <StartenchallTask+0x76>
        message_in[i] = 0;
 80098c2:	aa94      	add	r2, sp, #592	; 0x250
 80098c4:	441a      	add	r2, r3
 80098c6:	2100      	movs	r1, #0
 80098c8:	7711      	strb	r1, [r2, #28]
      for(unsigned int i=0; i< INPUT_SIZE; i++)
 80098ca:	3301      	adds	r3, #1
 80098cc:	e7f7      	b.n	80098be <StartenchallTask+0x66>
 80098ce:	2300      	movs	r3, #0
      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 80098d0:	2bfe      	cmp	r3, #254	; 0xfe
 80098d2:	d806      	bhi.n	80098e2 <StartenchallTask+0x8a>
        message_out[i] = 0;
 80098d4:	aa94      	add	r2, sp, #592	; 0x250
 80098d6:	441a      	add	r2, r3
 80098d8:	2100      	movs	r1, #0
 80098da:	f882 111b 	strb.w	r1, [r2, #283]	; 0x11b
      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 80098de:	3301      	adds	r3, #1
 80098e0:	e7f6      	b.n	80098d0 <StartenchallTask+0x78>
    iostream_ = new UartDriver<serial_class>(huart);
 80098e2:	200c      	movs	r0, #12
 80098e4:	f008 fed6 	bl	8012694 <_Znwj>
 80098e8:	4605      	mov	r5, r0
  UartDriver(Hardware *huart): huart_(huart)
 80098ea:	4b86      	ldr	r3, [pc, #536]	; (8009b04 <StartenchallTask+0x2ac>)
 80098ec:	6003      	str	r3, [r0, #0]
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 80098ee:	2004      	movs	r0, #4
 80098f0:	f008 fed0 	bl	8012694 <_Znwj>
 80098f4:	4606      	mov	r6, r0
 80098f6:	682b      	ldr	r3, [r5, #0]
  RxBuffer(Hardware *huart):huart_(huart)
 80098f8:	6003      	str	r3, [r0, #0]
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 80098fa:	f44f 70cb 	mov.w	r0, #406	; 0x196
 80098fe:	f008 fec9 	bl	8012694 <_Znwj>
    byte_in_progress_ = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
    byte_to_add_ = 0;
 8009908:	f8a0 3192 	strh.w	r3, [r0, #402]	; 0x192
    buffer_length_ = (uint16_t)SIZE;
 800990c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009910:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 8009914:	4b7c      	ldr	r3, [pc, #496]	; (8009b08 <StartenchallTask+0x2b0>)
 8009916:	6018      	str	r0, [r3, #0]
    HAL_UART_Receive_DMA(huart_, rx_value_, RX_BURST_SIZE); //1byte receive protocal
 8009918:	2208      	movs	r2, #8
 800991a:	497c      	ldr	r1, [pc, #496]	; (8009b0c <StartenchallTask+0x2b4>)
 800991c:	6830      	ldr	r0, [r6, #0]
 800991e:	f006 fb5b 	bl	800ffd8 <HAL_UART_Receive_DMA>
    huart_->hdmarx->XferCpltCallback = ReceiveCplt;
 8009922:	6833      	ldr	r3, [r6, #0]
 8009924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009926:	4a7a      	ldr	r2, [pc, #488]	; (8009b10 <StartenchallTask+0x2b8>)
 8009928:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UART_DISABLE_IT(huart_, UART_IT_RXNE);
 800992a:	6833      	ldr	r3, [r6, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	6813      	ldr	r3, [r2, #0]
 8009930:	f023 0320 	bic.w	r3, r3, #32
 8009934:	6013      	str	r3, [r2, #0]
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8009936:	606e      	str	r6, [r5, #4]
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8009938:	2004      	movs	r0, #4
 800993a:	f008 feab 	bl	8012694 <_Znwj>
 800993e:	4606      	mov	r6, r0
 8009940:	682b      	ldr	r3, [r5, #0]
  TxBuffer(Hardware *huart): huart_(huart)
 8009942:	6003      	str	r3, [r0, #0]
    idle_flag_ = true;
 8009944:	2201      	movs	r2, #1
 8009946:	4b73      	ldr	r3, [pc, #460]	; (8009b14 <StartenchallTask+0x2bc>)
 8009948:	701a      	strb	r2, [r3, #0]
    subscript_in_progress_ = 0;
 800994a:	2000      	movs	r0, #0
 800994c:	4b72      	ldr	r3, [pc, #456]	; (8009b18 <StartenchallTask+0x2c0>)
 800994e:	7018      	strb	r0, [r3, #0]
    subscript_to_add_ = 0;
 8009950:	4b72      	ldr	r3, [pc, #456]	; (8009b1c <StartenchallTask+0x2c4>)
 8009952:	7018      	strb	r0, [r3, #0]
 8009954:	e00b      	b.n	800996e <StartenchallTask+0x116>
          tx_buffer_unit_[i].tx_data_[j]  = 1;
 8009956:	ebc0 1280 	rsb	r2, r0, r0, lsl #6
 800995a:	ebc0 0182 	rsb	r1, r0, r2, lsl #2
 800995e:	4a70      	ldr	r2, [pc, #448]	; (8009b20 <StartenchallTask+0x2c8>)
 8009960:	440a      	add	r2, r1
 8009962:	2101      	movs	r1, #1
 8009964:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j < BUFFER_LENGTH; j++)
 8009966:	440b      	add	r3, r1
 8009968:	2bf9      	cmp	r3, #249	; 0xf9
 800996a:	ddf4      	ble.n	8009956 <StartenchallTask+0xfe>
    for(int i = 0; i < TX_SIZE; i++) 
 800996c:	3001      	adds	r0, #1
 800996e:	2831      	cmp	r0, #49	; 0x31
 8009970:	dc0a      	bgt.n	8009988 <StartenchallTask+0x130>
        tx_buffer_unit_[i].tx_len_ = 1;
 8009972:	ebc0 1380 	rsb	r3, r0, r0, lsl #6
 8009976:	ebc0 0283 	rsb	r2, r0, r3, lsl #2
 800997a:	4b69      	ldr	r3, [pc, #420]	; (8009b20 <StartenchallTask+0x2c8>)
 800997c:	4413      	add	r3, r2
 800997e:	2201      	movs	r2, #1
 8009980:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        for(int j = 0; j < BUFFER_LENGTH; j++)
 8009984:	2300      	movs	r3, #0
 8009986:	e7ef      	b.n	8009968 <StartenchallTask+0x110>
    HAL_UART_Transmit_DMA(huart_, (uint8_t*)tx_buffer_unit_[0].tx_data_, tx_buffer_unit_[0].tx_len_);
 8009988:	4965      	ldr	r1, [pc, #404]	; (8009b20 <StartenchallTask+0x2c8>)
 800998a:	f891 20fa 	ldrb.w	r2, [r1, #250]	; 0xfa
 800998e:	6830      	ldr	r0, [r6, #0]
 8009990:	f006 fadc 	bl	800ff4c <HAL_UART_Transmit_DMA>
    huart_->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8009994:	6833      	ldr	r3, [r6, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	6893      	ldr	r3, [r2, #8]
 800999a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800999e:	6093      	str	r3, [r2, #8]
    huart_->hdmatx->XferCpltCallback = TransmitCplt;
 80099a0:	6833      	ldr	r3, [r6, #0]
 80099a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a4:	4a5f      	ldr	r2, [pc, #380]	; (8009b24 <StartenchallTask+0x2cc>)
 80099a6:	63da      	str	r2, [r3, #60]	; 0x3c
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 80099a8:	60ae      	str	r6, [r5, #8]
    iostream_ = new UartDriver<serial_class>(huart);
 80099aa:	9596      	str	r5, [sp, #600]	; 0x258
    iostream_->begin(baud_);
 80099ac:	9a97      	ldr	r2, [sp, #604]	; 0x25c
    huart_->Init.BaudRate = baud_rate;
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(huart_);
 80099b2:	6828      	ldr	r0, [r5, #0]
 80099b4:	f006 fe71 	bl	801069a <HAL_UART_Init>
      mode_ = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
      bytes_ = 0;
 80099be:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
      index_ = 0;
 80099c2:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
      topic_ = 0;
 80099c6:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80099ca:	934f      	str	r3, [sp, #316]	; 0x13c
 80099cc:	9350      	str	r3, [sp, #320]	; 0x140
 80099ce:	9351      	str	r3, [sp, #324]	; 0x144
 80099d0:	9352      	str	r3, [sp, #328]	; 0x148
 80099d2:	9353      	str	r3, [sp, #332]	; 0x14c
 80099d4:	9354      	str	r3, [sp, #336]	; 0x150
 80099d6:	2300      	movs	r3, #0
 80099d8:	9357      	str	r3, [sp, #348]	; 0x15c
 80099da:	9356      	str	r3, [sp, #344]	; 0x158
 80099dc:	9355      	str	r3, [sp, #340]	; 0x154
 80099de:	935a      	str	r3, [sp, #360]	; 0x168
 80099e0:	9359      	str	r3, [sp, #356]	; 0x164
 80099e2:	9358      	str	r3, [sp, #352]	; 0x160
 80099e4:	9361      	str	r3, [sp, #388]	; 0x184
 80099e6:	9360      	str	r3, [sp, #384]	; 0x180
 80099e8:	935f      	str	r3, [sp, #380]	; 0x17c
 80099ea:	9364      	str	r3, [sp, #400]	; 0x190
 80099ec:	9363      	str	r3, [sp, #396]	; 0x18c
 80099ee:	9362      	str	r3, [sp, #392]	; 0x188
 80099f0:	9367      	str	r3, [sp, #412]	; 0x19c
 80099f2:	9366      	str	r3, [sp, #408]	; 0x198
 80099f4:	9365      	str	r3, [sp, #404]	; 0x194
 80099f6:	936a      	str	r3, [sp, #424]	; 0x1a8
 80099f8:	9369      	str	r3, [sp, #420]	; 0x1a4
 80099fa:	9368      	str	r3, [sp, #416]	; 0x1a0
 80099fc:	936d      	str	r3, [sp, #436]	; 0x1b4
 80099fe:	936c      	str	r3, [sp, #432]	; 0x1b0
 8009a00:	936b      	str	r3, [sp, #428]	; 0x1ac
 8009a02:	9370      	str	r3, [sp, #448]	; 0x1c0
 8009a04:	936f      	str	r3, [sp, #444]	; 0x1bc
 8009a06:	936e      	str	r3, [sp, #440]	; 0x1b8
 8009a08:	9373      	str	r3, [sp, #460]	; 0x1cc
 8009a0a:	9372      	str	r3, [sp, #456]	; 0x1c8
 8009a0c:	9371      	str	r3, [sp, #452]	; 0x1c4
 8009a0e:	9376      	str	r3, [sp, #472]	; 0x1d8
 8009a10:	9375      	str	r3, [sp, #468]	; 0x1d4
 8009a12:	9374      	str	r3, [sp, #464]	; 0x1d0
 8009a14:	9379      	str	r3, [sp, #484]	; 0x1e4
 8009a16:	9378      	str	r3, [sp, #480]	; 0x1e0
 8009a18:	9377      	str	r3, [sp, #476]	; 0x1dc
 8009a1a:	937c      	str	r3, [sp, #496]	; 0x1f0
 8009a1c:	937b      	str	r3, [sp, #492]	; 0x1ec
 8009a1e:	937a      	str	r3, [sp, #488]	; 0x1e8
 8009a20:	937f      	str	r3, [sp, #508]	; 0x1fc
 8009a22:	937e      	str	r3, [sp, #504]	; 0x1f8
 8009a24:	937d      	str	r3, [sp, #500]	; 0x1f4
 8009a26:	9385      	str	r3, [sp, #532]	; 0x214
 8009a28:	9384      	str	r3, [sp, #528]	; 0x210
 8009a2a:	9383      	str	r3, [sp, #524]	; 0x20c
 8009a2c:	9388      	str	r3, [sp, #544]	; 0x220
 8009a2e:	9387      	str	r3, [sp, #540]	; 0x21c
 8009a30:	9386      	str	r3, [sp, #536]	; 0x218
 8009a32:	938b      	str	r3, [sp, #556]	; 0x22c
 8009a34:	938a      	str	r3, [sp, #552]	; 0x228
 8009a36:	9389      	str	r3, [sp, #548]	; 0x224
 8009a38:	938e      	str	r3, [sp, #568]	; 0x238
 8009a3a:	938d      	str	r3, [sp, #564]	; 0x234
 8009a3c:	938c      	str	r3, [sp, #560]	; 0x230
 8009a3e:	9391      	str	r3, [sp, #580]	; 0x244
 8009a40:	9390      	str	r3, [sp, #576]	; 0x240
 8009a42:	938f      	str	r3, [sp, #572]	; 0x23c
	imu_.init(&hspi1, &nh_);
 8009a44:	aa94      	add	r2, sp, #592	; 0x250
 8009a46:	4938      	ldr	r1, [pc, #224]	; (8009b28 <StartenchallTask+0x2d0>)
 8009a48:	a84f      	add	r0, sp, #316	; 0x13c
 8009a4a:	f002 f829 	bl	800baa0 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>
 8009a4e:	e00c      	b.n	8009a6a <StartenchallTask+0x212>
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8009a50:	4630      	mov	r0, r6
 8009a52:	f008 fe17 	bl	8012684 <_ZdlPv>
    iostream_ = new UartDriver<serial_class>(huart);
 8009a56:	4628      	mov	r0, r5
 8009a58:	f008 fe14 	bl	8012684 <_ZdlPv>
 8009a5c:	f008 ff9e 	bl	801299c <__cxa_end_cleanup>
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8009a60:	4630      	mov	r0, r6
 8009a62:	f008 fe0f 	bl	8012684 <_ZdlPv>
 8009a66:	e7f6      	b.n	8009a56 <StartenchallTask+0x1fe>
 8009a68:	e7f5      	b.n	8009a56 <StartenchallTask+0x1fe>
      angles()
 8009a6a:	4b30      	ldr	r3, [pc, #192]	; (8009b2c <StartenchallTask+0x2d4>)
 8009a6c:	9325      	str	r3, [sp, #148]	; 0x94
 8009a6e:	2300      	movs	r3, #0
 8009a70:	9326      	str	r3, [sp, #152]	; 0x98
 8009a72:	9327      	str	r3, [sp, #156]	; 0x9c
 8009a74:	2302      	movs	r3, #2
 8009a76:	aa28      	add	r2, sp, #160	; 0xa0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db04      	blt.n	8009a86 <StartenchallTask+0x22e>
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	f842 1b04 	str.w	r1, [r2], #4
 8009a82:	3b01      	subs	r3, #1
 8009a84:	e7f8      	b.n	8009a78 <StartenchallTask+0x220>
 8009a86:	2302      	movs	r3, #2
 8009a88:	aa2b      	add	r2, sp, #172	; 0xac
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	db04      	blt.n	8009a98 <StartenchallTask+0x240>
 8009a8e:	2100      	movs	r1, #0
 8009a90:	f842 1b04 	str.w	r1, [r2], #4
 8009a94:	3b01      	subs	r3, #1
 8009a96:	e7f8      	b.n	8009a8a <StartenchallTask+0x232>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	aa2e      	add	r2, sp, #184	; 0xb8
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	db04      	blt.n	8009aaa <StartenchallTask+0x252>
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	f842 1b04 	str.w	r1, [r2], #4
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	e7f8      	b.n	8009a9c <StartenchallTask+0x244>
 8009aaa:	2302      	movs	r3, #2
 8009aac:	aa31      	add	r2, sp, #196	; 0xc4
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	db04      	blt.n	8009abc <StartenchallTask+0x264>
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	f842 1b04 	str.w	r1, [r2], #4
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	e7f8      	b.n	8009aae <StartenchallTask+0x256>
      temperature(0)
 8009abc:	4b1c      	ldr	r3, [pc, #112]	; (8009b30 <StartenchallTask+0x2d8>)
 8009abe:	933a      	str	r3, [sp, #232]	; 0xe8
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	933b      	str	r3, [sp, #236]	; 0xec
 8009ac4:	933c      	str	r3, [sp, #240]	; 0xf0
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	923d      	str	r2, [sp, #244]	; 0xf4
 8009aca:	923e      	str	r2, [sp, #248]	; 0xf8
 8009acc:	923f      	str	r2, [sp, #252]	; 0xfc
      sat_num(0)
 8009ace:	4a19      	ldr	r2, [pc, #100]	; (8009b34 <StartenchallTask+0x2dc>)
 8009ad0:	9244      	str	r2, [sp, #272]	; 0x110
 8009ad2:	9345      	str	r3, [sp, #276]	; 0x114
 8009ad4:	9346      	str	r3, [sp, #280]	; 0x118
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	aa47      	add	r2, sp, #284	; 0x11c
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	db04      	blt.n	8009ae8 <StartenchallTask+0x290>
 8009ade:	2100      	movs	r1, #0
 8009ae0:	f842 1b04 	str.w	r1, [r2], #4
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	e7f8      	b.n	8009ada <StartenchallTask+0x282>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	aa49      	add	r2, sp, #292	; 0x124
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	db23      	blt.n	8009b38 <StartenchallTask+0x2e0>
 8009af0:	2100      	movs	r1, #0
 8009af2:	f842 1b04 	str.w	r1, [r2], #4
 8009af6:	3b01      	subs	r3, #1
 8009af8:	e7f8      	b.n	8009aec <StartenchallTask+0x294>
 8009afa:	bf00      	nop
 8009afc:	080198bc 	.word	0x080198bc
 8009b00:	080198a4 	.word	0x080198a4
 8009b04:	20007d2c 	.word	0x20007d2c
 8009b08:	20003848 	.word	0x20003848
 8009b0c:	20003840 	.word	0x20003840
 8009b10:	080082ed 	.word	0x080082ed
 8009b14:	20000734 	.word	0x20000734
 8009b18:	20000736 	.word	0x20000736
 8009b1c:	20000735 	.word	0x20000735
 8009b20:	20000738 	.word	0x20000738
 8009b24:	0800835d 	.word	0x0800835d
 8009b28:	20007a38 	.word	0x20007a38
 8009b2c:	080198d0 	.word	0x080198d0
 8009b30:	08019924 	.word	0x08019924
 8009b34:	0801993c 	.word	0x0801993c
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f88d 312c 	strb.w	r3, [sp, #300]	; 0x12c
  }
  ~StateEstimate(){}

void  init(IMU* imu, Baro* baro, GPS* gps, ros::NodeHandle* nh)
  {
    nh_ = nh;
 8009b3e:	aa94      	add	r2, sp, #592	; 0x250
 8009b40:	921f      	str	r2, [sp, #124]	; 0x7c
      {
        attitude_estimate_flag_ = false;
      }
    else
      {
        attitude_estimate_flag_ = true;
 8009b42:	2301      	movs	r3, #1
 8009b44:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
        imu_ = imu;
 8009b48:	a94f      	add	r1, sp, #316	; 0x13c
 8009b4a:	9120      	str	r1, [sp, #128]	; 0x80
        attitude_estimator_.init(imu_, nh_);
 8009b4c:	a823      	add	r0, sp, #140	; 0x8c
 8009b4e:	f7ff fdcb 	bl	80096e8 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>
      }

    if(baro == NULL)
      {
        altitude_estimate_flag_ = false;
 8009b52:	2300      	movs	r3, #0
 8009b54:	f88d 3139 	strb.w	r3, [sp, #313]	; 0x139
        altitude_estimator_.init(imu_, baro_, nh_);
      }

    if(gps == NULL)
      {
        pos_estimate_flag_ = false;
 8009b58:	f88d 313a 	strb.w	r3, [sp, #314]	; 0x13a
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,GPIO_PIN_SET);
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009b62:	48aa      	ldr	r0, [pc, #680]	; (8009e0c <StartenchallTask+0x5b4>)
 8009b64:	f004 f982 	bl	800de6c <HAL_GPIO_WritePin>
  uint32_t time(){return HAL_GetTick();}
 8009b68:	f003 fa1a 	bl	800cfa0 <HAL_GetTick>
 8009b6c:	4605      	mov	r5, r0
      if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 8009b6e:	f8dd 3528 	ldr.w	r3, [sp, #1320]	; 0x528
 8009b72:	1ac3      	subs	r3, r0, r3
 8009b74:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d902      	bls.n	8009b82 <StartenchallTask+0x32a>
        configured_ = false;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f88d 3520 	strb.w	r3, [sp, #1312]	; 0x520
      if ( mode_ != MODE_FIRST_FF){
 8009b82:	f8dd 350c 	ldr.w	r3, [sp, #1292]	; 0x50c
 8009b86:	b3a3      	cbz	r3, 8009bf2 <StartenchallTask+0x39a>
        if (c_time > last_msg_timeout_time){
 8009b88:	f8dd 352c 	ldr.w	r3, [sp, #1324]	; 0x52c
 8009b8c:	429d      	cmp	r5, r3
 8009b8e:	d930      	bls.n	8009bf2 <StartenchallTask+0x39a>
          mode_ = MODE_FIRST_FF;
 8009b90:	2300      	movs	r3, #0
 8009b92:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
 8009b96:	e02c      	b.n	8009bf2 <StartenchallTask+0x39a>
      return (byte_to_add_ - (buffer_length_ - byte_in_progress_));
 8009b98:	b293      	uxth	r3, r2
 8009b9a:	f8b1 6194 	ldrh.w	r6, [r1, #404]	; 0x194
 8009b9e:	1b9b      	subs	r3, r3, r6
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	fa13 f380 	uxtah	r3, r3, r0
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	e030      	b.n	8009c0c <StartenchallTask+0x3b4>
          byte_in_progress_ = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
 8009bb0:	e039      	b.n	8009c26 <StartenchallTask+0x3ce>
    if(!available()) return -1;
 8009bb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009bb6:	e037      	b.n	8009c28 <StartenchallTask+0x3d0>
            message_in[index_++] = data;
 8009bb8:	f8dd 3518 	ldr.w	r3, [sp, #1304]	; 0x518
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009bc2:	aa94      	add	r2, sp, #592	; 0x250
 8009bc4:	4413      	add	r3, r2
 8009bc6:	7719      	strb	r1, [r3, #28]
            bytes_--;
 8009bc8:	f8dd 3510 	ldr.w	r3, [sp, #1296]	; 0x510
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 8009bd2:	b973      	cbnz	r3, 8009bf2 <StartenchallTask+0x39a>
              mode_ = MODE_MSG_CHECKSUM;
 8009bd4:	2308      	movs	r3, #8
 8009bd6:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
 8009bda:	e00a      	b.n	8009bf2 <StartenchallTask+0x39a>
              mode_++;
 8009bdc:	3301      	adds	r3, #1
 8009bde:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 8009be2:	f105 0314 	add.w	r3, r5, #20
 8009be6:	f8cd 352c 	str.w	r3, [sp, #1324]	; 0x52c
 8009bea:	e002      	b.n	8009bf2 <StartenchallTask+0x39a>
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 8009bec:	1b40      	subs	r0, r0, r5
 8009bee:	2805      	cmp	r0, #5
 8009bf0:	d82c      	bhi.n	8009c4c <StartenchallTask+0x3f4>
  bool available() { return ring_buf_->length(); }
 8009bf2:	4b87      	ldr	r3, [pc, #540]	; (8009e10 <StartenchallTask+0x5b8>)
 8009bf4:	6819      	ldr	r1, [r3, #0]
    if(byte_to_add_ - byte_in_progress_ >= 0)
 8009bf6:	f9b1 0192 	ldrsh.w	r0, [r1, #402]	; 0x192
 8009bfa:	f9b1 2190 	ldrsh.w	r2, [r1, #400]	; 0x190
 8009bfe:	1a83      	subs	r3, r0, r2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dbc9      	blt.n	8009b98 <StartenchallTask+0x340>
      return (byte_to_add_ - byte_in_progress_);
 8009c04:	b283      	uxth	r3, r0
 8009c06:	b296      	uxth	r6, r2
 8009c08:	1b9b      	subs	r3, r3, r6
 8009c0a:	b29b      	uxth	r3, r3
    if(!available()) return -1;
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0d0      	beq.n	8009bb2 <StartenchallTask+0x35a>
    if (byte_in_progress_ != byte_to_add_)
 8009c10:	4290      	cmp	r0, r2
 8009c12:	d008      	beq.n	8009c26 <StartenchallTask+0x3ce>
        pop_value =  buf_[byte_in_progress_];
 8009c14:	5c8c      	ldrb	r4, [r1, r2]
        byte_in_progress_++;
 8009c16:	3201      	adds	r2, #1
 8009c18:	b212      	sxth	r2, r2
 8009c1a:	f8a1 2190 	strh.w	r2, [r1, #400]	; 0x190
        if (byte_in_progress_ == buffer_length_)
 8009c1e:	f8b1 3194 	ldrh.w	r3, [r1, #404]	; 0x194
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d0c1      	beq.n	8009baa <StartenchallTask+0x352>
    return  r_data;
 8009c26:	4621      	mov	r1, r4
          if( data < 0 )
 8009c28:	2900      	cmp	r1, #0
 8009c2a:	f2c0 8217 	blt.w	800a05c <StartenchallTask+0x804>
          checksum_ += data;
 8009c2e:	f8dd 251c 	ldr.w	r2, [sp, #1308]	; 0x51c
 8009c32:	440a      	add	r2, r1
 8009c34:	f8cd 251c 	str.w	r2, [sp, #1308]	; 0x51c
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 8009c38:	f8dd 350c 	ldr.w	r3, [sp, #1292]	; 0x50c
 8009c3c:	2b07      	cmp	r3, #7
 8009c3e:	d0bb      	beq.n	8009bb8 <StartenchallTask+0x360>
          }else if( mode_ == MODE_FIRST_FF ){
 8009c40:	b943      	cbnz	r3, 8009c54 <StartenchallTask+0x3fc>
            if(data == 0xff){
 8009c42:	29ff      	cmp	r1, #255	; 0xff
 8009c44:	d0ca      	beq.n	8009bdc <StartenchallTask+0x384>
  uint32_t time(){return HAL_GetTick();}
 8009c46:	f003 f9ab 	bl	800cfa0 <HAL_GetTick>
 8009c4a:	e7cf      	b.n	8009bec <StartenchallTask+0x394>
              configured_=false;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f88d 3520 	strb.w	r3, [sp, #1312]	; 0x520
 8009c52:	e20d      	b.n	800a070 <StartenchallTask+0x818>
          }else if( mode_ == MODE_PROTOCOL_VER ){
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d034      	beq.n	8009cc2 <StartenchallTask+0x46a>
          }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d04f      	beq.n	8009cfc <StartenchallTask+0x4a4>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d058      	beq.n	8009d12 <StartenchallTask+0x4ba>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 8009c60:	2b04      	cmp	r3, #4
 8009c62:	d060      	beq.n	8009d26 <StartenchallTask+0x4ce>
          }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 8009c64:	2b05      	cmp	r3, #5
 8009c66:	d06d      	beq.n	8009d44 <StartenchallTask+0x4ec>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 8009c68:	2b06      	cmp	r3, #6
 8009c6a:	d073      	beq.n	8009d54 <StartenchallTask+0x4fc>
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 8009c6c:	2b08      	cmp	r3, #8
 8009c6e:	d1c0      	bne.n	8009bf2 <StartenchallTask+0x39a>
            mode_ = MODE_FIRST_FF;
 8009c70:	2300      	movs	r3, #0
 8009c72:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
            if( (checksum_%256) == 255){
 8009c76:	1a9b      	subs	r3, r3, r2
 8009c78:	b2d2      	uxtb	r2, r2
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	bf58      	it	pl
 8009c7e:	425a      	negpl	r2, r3
 8009c80:	2aff      	cmp	r2, #255	; 0xff
 8009c82:	d1b6      	bne.n	8009bf2 <StartenchallTask+0x39a>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 8009c84:	f8dd 6514 	ldr.w	r6, [sp, #1300]	; 0x514
 8009c88:	2e00      	cmp	r6, #0
 8009c8a:	d075      	beq.n	8009d78 <StartenchallTask+0x520>
              }else if(topic_ == TopicInfo::ID_TIME){
 8009c8c:	2e0a      	cmp	r6, #10
 8009c8e:	f000 80ff 	beq.w	8009e90 <StartenchallTask+0x638>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 8009c92:	2e06      	cmp	r6, #6
 8009c94:	f000 8148 	beq.w	8009f28 <StartenchallTask+0x6d0>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 8009c98:	2e0b      	cmp	r6, #11
 8009c9a:	f000 81db 	beq.w	800a054 <StartenchallTask+0x7fc>
                if(subscribers[topic_-100])
 8009c9e:	f1a6 0364 	sub.w	r3, r6, #100	; 0x64
 8009ca2:	3636      	adds	r6, #54	; 0x36
 8009ca4:	aa94      	add	r2, sp, #592	; 0x250
 8009ca6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009caa:	6870      	ldr	r0, [r6, #4]
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d0a0      	beq.n	8009bf2 <StartenchallTask+0x39a>
                  subscribers[topic_-100]->callback( message_in );
 8009cb0:	339a      	adds	r3, #154	; 0x9a
 8009cb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	a99b      	add	r1, sp, #620	; 0x26c
 8009cbe:	4798      	blx	r3
 8009cc0:	e797      	b.n	8009bf2 <StartenchallTask+0x39a>
            if(data == PROTOCOL_VER){
 8009cc2:	29fe      	cmp	r1, #254	; 0xfe
 8009cc4:	d012      	beq.n	8009cec <StartenchallTask+0x494>
              mode_ = MODE_FIRST_FF;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
              if (configured_ == false)
 8009ccc:	f89d 3520 	ldrb.w	r3, [sp, #1312]	; 0x520
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d18e      	bne.n	8009bf2 <StartenchallTask+0x39a>
 8009cd4:	4b4f      	ldr	r3, [pc, #316]	; (8009e14 <StartenchallTask+0x5bc>)
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9302      	str	r3, [sp, #8]
 8009cdc:	9303      	str	r3, [sp, #12]
      publish(TopicInfo::ID_TIME, &t);
 8009cde:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	aa01      	add	r2, sp, #4
 8009ce4:	210a      	movs	r1, #10
 8009ce6:	a894      	add	r0, sp, #592	; 0x250
 8009ce8:	4798      	blx	r3
 8009cea:	e003      	b.n	8009cf4 <StartenchallTask+0x49c>
              mode_++;
 8009cec:	3301      	adds	r3, #1
 8009cee:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
 8009cf2:	e77e      	b.n	8009bf2 <StartenchallTask+0x39a>
 8009cf4:	f003 f954 	bl	800cfa0 <HAL_GetTick>
      rt_time = hardware_.time();
 8009cf8:	9098      	str	r0, [sp, #608]	; 0x260
 8009cfa:	e77a      	b.n	8009bf2 <StartenchallTask+0x39a>
            bytes_ = data;
 8009cfc:	f8cd 1510 	str.w	r1, [sp, #1296]	; 0x510
            index_ = 0;
 8009d00:	2200      	movs	r2, #0
 8009d02:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
            mode_++;
 8009d06:	3301      	adds	r3, #1
 8009d08:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
            checksum_ = data;               /* first byte for calculating size checksum */
 8009d0c:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
 8009d10:	e76f      	b.n	8009bf2 <StartenchallTask+0x39a>
            bytes_ += data<<8;
 8009d12:	f8dd 2510 	ldr.w	r2, [sp, #1296]	; 0x510
 8009d16:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 8009d1a:	f8cd 1510 	str.w	r1, [sp, #1296]	; 0x510
            mode_++;
 8009d1e:	3301      	adds	r3, #1
 8009d20:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
 8009d24:	e765      	b.n	8009bf2 <StartenchallTask+0x39a>
            if( (checksum_%256) == 255)
 8009d26:	4251      	negs	r1, r2
 8009d28:	b2d2      	uxtb	r2, r2
 8009d2a:	b2c9      	uxtb	r1, r1
 8009d2c:	bf58      	it	pl
 8009d2e:	424a      	negpl	r2, r1
 8009d30:	2aff      	cmp	r2, #255	; 0xff
 8009d32:	d003      	beq.n	8009d3c <StartenchallTask+0x4e4>
              mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8009d34:	2300      	movs	r3, #0
 8009d36:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
 8009d3a:	e75a      	b.n	8009bf2 <StartenchallTask+0x39a>
              mode_++;
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
 8009d42:	e756      	b.n	8009bf2 <StartenchallTask+0x39a>
            topic_ = data;
 8009d44:	f8cd 1514 	str.w	r1, [sp, #1300]	; 0x514
            mode_++;
 8009d48:	3301      	adds	r3, #1
 8009d4a:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
            checksum_ = data;               /* first byte included in checksum */
 8009d4e:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
 8009d52:	e74e      	b.n	8009bf2 <StartenchallTask+0x39a>
            topic_ += data<<8;
 8009d54:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009d58:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8009d5c:	f8cd 1514 	str.w	r1, [sp, #1300]	; 0x514
            mode_ = MODE_MESSAGE;
 8009d60:	2307      	movs	r3, #7
 8009d62:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
            if(bytes_ == 0)
 8009d66:	f8dd 3510 	ldr.w	r3, [sp, #1296]	; 0x510
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f47f af41 	bne.w	8009bf2 <StartenchallTask+0x39a>
              mode_ = MODE_MSG_CHECKSUM;
 8009d70:	2308      	movs	r3, #8
 8009d72:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
 8009d76:	e73c      	b.n	8009bf2 <StartenchallTask+0x39a>
 8009d78:	4b26      	ldr	r3, [pc, #152]	; (8009e14 <StartenchallTask+0x5bc>)
 8009d7a:	9304      	str	r3, [sp, #16]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	9306      	str	r3, [sp, #24]
      publish(TopicInfo::ID_TIME, &t);
 8009d82:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	aa04      	add	r2, sp, #16
 8009d88:	210a      	movs	r1, #10
 8009d8a:	a894      	add	r0, sp, #592	; 0x250
 8009d8c:	4798      	blx	r3
 8009d8e:	f003 f907 	bl	800cfa0 <HAL_GetTick>
      rt_time = hardware_.time();
 8009d92:	9098      	str	r0, [sp, #608]	; 0x260
 8009d94:	4b20      	ldr	r3, [pc, #128]	; (8009e18 <StartenchallTask+0x5c0>)
 8009d96:	930d      	str	r3, [sp, #52]	; 0x34
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8009d9e:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <StartenchallTask+0x5c4>)
 8009da0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009da2:	9310      	str	r3, [sp, #64]	; 0x40
 8009da4:	9311      	str	r3, [sp, #68]	; 0x44
 8009da6:	9212      	str	r2, [sp, #72]	; 0x48
      for(i = 0; i < MAX_PUBLISHERS; i++)
 8009da8:	4637      	mov	r7, r6
 8009daa:	e01b      	b.n	8009de4 <StartenchallTask+0x58c>
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8009dac:	9010      	str	r0, [sp, #64]	; 0x40
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8009dae:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8009db2:	aa94      	add	r2, sp, #592	; 0x250
 8009db4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	6858      	ldr	r0, [r3, #4]
 8009dbc:	6803      	ldr	r3, [r0, #0]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	4798      	blx	r3
 8009dc2:	9011      	str	r0, [sp, #68]	; 0x44
              ti.buffer_size = OUTPUT_SIZE;
 8009dc4:	23ff      	movs	r3, #255	; 0xff
 8009dc6:	9312      	str	r3, [sp, #72]	; 0x48
              publish( publishers[i]->getEndpointType(), &ti );
 8009dc8:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8009dca:	f8d3 8000 	ldr.w	r8, [r3]
 8009dce:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8009dd2:	aa94      	add	r2, sp, #592	; 0x250
 8009dd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	aa0d      	add	r2, sp, #52	; 0x34
 8009ddc:	6919      	ldr	r1, [r3, #16]
 8009dde:	a894      	add	r0, sp, #592	; 0x250
 8009de0:	47c0      	blx	r8
      for(i = 0; i < MAX_PUBLISHERS; i++)
 8009de2:	3701      	adds	r7, #1
 8009de4:	2f13      	cmp	r7, #19
 8009de6:	dc38      	bgt.n	8009e5a <StartenchallTask+0x602>
          if(publishers[i] != 0) // non-empty slot
 8009de8:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8009dec:	aa94      	add	r2, sp, #592	; 0x250
 8009dee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d0f4      	beq.n	8009de2 <StartenchallTask+0x58a>
              ti.topic_id = publishers[i]->id_;
 8009df8:	689a      	ldr	r2, [r3, #8]
 8009dfa:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
              ti.topic_name = (char *) publishers[i]->topic_;
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	920f      	str	r2, [sp, #60]	; 0x3c
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8009e02:	6858      	ldr	r0, [r3, #4]
 8009e04:	6803      	ldr	r3, [r0, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	4798      	blx	r3
 8009e0a:	e7cf      	b.n	8009dac <StartenchallTask+0x554>
 8009e0c:	40020800 	.word	0x40020800
 8009e10:	20003848 	.word	0x20003848
 8009e14:	0801985c 	.word	0x0801985c
 8009e18:	08019874 	.word	0x08019874
 8009e1c:	0801a208 	.word	0x0801a208
              ti.message_type = (char *) subscribers[i]->getMsgType();
 8009e20:	9010      	str	r0, [sp, #64]	; 0x40
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8009e22:	f106 039a 	add.w	r3, r6, #154	; 0x9a
 8009e26:	aa94      	add	r2, sp, #592	; 0x250
 8009e28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e2c:	6858      	ldr	r0, [r3, #4]
 8009e2e:	6803      	ldr	r3, [r0, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	4798      	blx	r3
 8009e34:	9011      	str	r0, [sp, #68]	; 0x44
              ti.buffer_size = INPUT_SIZE;
 8009e36:	23ff      	movs	r3, #255	; 0xff
 8009e38:	9312      	str	r3, [sp, #72]	; 0x48
              publish( subscribers[i]->getEndpointType(), &ti );
 8009e3a:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8009e3c:	681f      	ldr	r7, [r3, #0]
 8009e3e:	f106 039a 	add.w	r3, r6, #154	; 0x9a
 8009e42:	aa94      	add	r2, sp, #592	; 0x250
 8009e44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e48:	6858      	ldr	r0, [r3, #4]
 8009e4a:	6803      	ldr	r3, [r0, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	4798      	blx	r3
 8009e50:	aa0d      	add	r2, sp, #52	; 0x34
 8009e52:	4601      	mov	r1, r0
 8009e54:	a894      	add	r0, sp, #592	; 0x250
 8009e56:	47b8      	blx	r7
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 8009e58:	3601      	adds	r6, #1
 8009e5a:	2e13      	cmp	r6, #19
 8009e5c:	dc10      	bgt.n	8009e80 <StartenchallTask+0x628>
          if(subscribers[i] != 0) // non-empty slot
 8009e5e:	f106 039a 	add.w	r3, r6, #154	; 0x9a
 8009e62:	aa94      	add	r2, sp, #592	; 0x250
 8009e64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e68:	6858      	ldr	r0, [r3, #4]
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d0f4      	beq.n	8009e58 <StartenchallTask+0x600>
              ti.topic_id = subscribers[i]->id_;
 8009e6e:	6843      	ldr	r3, [r0, #4]
 8009e70:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
              ti.topic_name = (char *) subscribers[i]->topic_;
 8009e74:	6883      	ldr	r3, [r0, #8]
 8009e76:	930f      	str	r3, [sp, #60]	; 0x3c
              ti.message_type = (char *) subscribers[i]->getMsgType();
 8009e78:	6803      	ldr	r3, [r0, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	4798      	blx	r3
 8009e7e:	e7cf      	b.n	8009e20 <StartenchallTask+0x5c8>
      configured_ = true;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f88d 3520 	strb.w	r3, [sp, #1312]	; 0x520
                last_sync_time = c_time;
 8009e86:	f8cd 5524 	str.w	r5, [sp, #1316]	; 0x524
                last_sync_receive_time = c_time;
 8009e8a:	f8cd 5528 	str.w	r5, [sp, #1320]	; 0x528
 8009e8e:	e0ef      	b.n	800a070 <StartenchallTask+0x818>
 8009e90:	f003 f886 	bl	800cfa0 <HAL_GetTick>
      uint32_t offset = hardware_.time() - rt_time;
 8009e94:	9b98      	ldr	r3, [sp, #608]	; 0x260
 8009e96:	1ac0      	subs	r0, r0, r3
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8009e98:	f89d 226c 	ldrb.w	r2, [sp, #620]	; 0x26c
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009e9c:	f89d 326d 	ldrb.w	r3, [sp, #621]	; 0x26d
 8009ea0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009ea4:	f89d 326e 	ldrb.w	r3, [sp, #622]	; 0x26e
 8009ea8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009eac:	f89d 326f 	ldrb.w	r3, [sp, #623]	; 0x26f
 8009eb0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8009eb4:	f89d 3270 	ldrb.w	r3, [sp, #624]	; 0x270
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009eb8:	f89d 1271 	ldrb.w	r1, [sp, #625]	; 0x271
 8009ebc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009ec0:	f89d 1272 	ldrb.w	r1, [sp, #626]	; 0x272
 8009ec4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009ec8:	f89d 1273 	ldrb.w	r1, [sp, #627]	; 0x273
 8009ecc:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
      t.data.sec += offset/1000;
 8009ed0:	4bbe      	ldr	r3, [pc, #760]	; (800a1cc <StartenchallTask+0x974>)
 8009ed2:	fba3 6300 	umull	r6, r3, r3, r0
 8009ed6:	099b      	lsrs	r3, r3, #6
 8009ed8:	441a      	add	r2, r3
 8009eda:	9208      	str	r2, [sp, #32]
      t.data.nsec += (offset%1000)*1000000UL;
 8009edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ee0:	fb02 0313 	mls	r3, r2, r3, r0
 8009ee4:	4aba      	ldr	r2, [pc, #744]	; (800a1d0 <StartenchallTask+0x978>)
 8009ee6:	fb02 1303 	mla	r3, r2, r3, r1
 8009eea:	9309      	str	r3, [sp, #36]	; 0x24
 8009eec:	f003 f858 	bl	800cfa0 <HAL_GetTick>
      sec_offset = new_now.sec - ms/1000 - 1;
 8009ef0:	9a08      	ldr	r2, [sp, #32]
 8009ef2:	4bb6      	ldr	r3, [pc, #728]	; (800a1cc <StartenchallTask+0x974>)
 8009ef4:	fba3 1300 	umull	r1, r3, r3, r0
 8009ef8:	099b      	lsrs	r3, r3, #6
 8009efa:	1ad2      	subs	r2, r2, r3
 8009efc:	3a01      	subs	r2, #1
 8009efe:	9299      	str	r2, [sp, #612]	; 0x264
      nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 8009f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f06:	fb02 0313 	mls	r3, r2, r3, r0
 8009f0a:	4ab1      	ldr	r2, [pc, #708]	; (800a1d0 <StartenchallTask+0x978>)
 8009f0c:	fb02 1313 	mls	r3, r2, r3, r1
 8009f10:	4ab0      	ldr	r2, [pc, #704]	; (800a1d4 <StartenchallTask+0x97c>)
 8009f12:	441a      	add	r2, r3
 8009f14:	929a      	str	r2, [sp, #616]	; 0x268
      normalizeSecNSec(sec_offset, nsec_offset);
 8009f16:	a99a      	add	r1, sp, #616	; 0x268
 8009f18:	a899      	add	r0, sp, #612	; 0x264
 8009f1a:	f002 ffe1 	bl	800cee0 <_ZN3ros16normalizeSecNSecERmS0_>
 8009f1e:	f003 f83f 	bl	800cfa0 <HAL_GetTick>
      last_sync_receive_time = hardware_.time();
 8009f22:	f8cd 0528 	str.w	r0, [sp, #1320]	; 0x528
 8009f26:	e664      	b.n	8009bf2 <StartenchallTask+0x39a>
      uint8_t ints_lengthT = *(inbuffer + offset++);
 8009f28:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
      if(ints_lengthT > ints_length)
 8009f2c:	f89d 3538 	ldrb.w	r3, [sp, #1336]	; 0x538
 8009f30:	429e      	cmp	r6, r3
 8009f32:	dc1f      	bgt.n	8009f74 <StartenchallTask+0x71c>
      ints_length = ints_lengthT;
 8009f34:	f88d 6538 	strb.w	r6, [sp, #1336]	; 0x538
      for( uint8_t i = 0; i < ints_length; i++){
 8009f38:	2200      	movs	r2, #0
      offset += 3;
 8009f3a:	2604      	movs	r6, #4
      for( uint8_t i = 0; i < ints_length; i++){
 8009f3c:	f89d 3538 	ldrb.w	r3, [sp, #1336]	; 0x538
 8009f40:	429a      	cmp	r2, r3
 8009f42:	da1f      	bge.n	8009f84 <StartenchallTask+0x72c>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009f44:	a99b      	add	r1, sp, #620	; 0x26c
 8009f46:	5d8b      	ldrb	r3, [r1, r6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009f48:	1c70      	adds	r0, r6, #1
 8009f4a:	5c08      	ldrb	r0, [r1, r0]
 8009f4c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009f50:	1cb0      	adds	r0, r6, #2
 8009f52:	5c08      	ldrb	r0, [r1, r0]
 8009f54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009f58:	1cf0      	adds	r0, r6, #3
 8009f5a:	5c09      	ldrb	r1, [r1, r0]
 8009f5c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 8009f60:	f8cd 353c 	str.w	r3, [sp, #1340]	; 0x53c
      offset += sizeof(this->st_ints);
 8009f64:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8009f66:	f8dd 1540 	ldr.w	r1, [sp, #1344]	; 0x540
 8009f6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint8_t i = 0; i < ints_length; i++){
 8009f6e:	3201      	adds	r2, #1
 8009f70:	b2d2      	uxtb	r2, r2
 8009f72:	e7e3      	b.n	8009f3c <StartenchallTask+0x6e4>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8009f74:	00b1      	lsls	r1, r6, #2
 8009f76:	f8dd 0540 	ldr.w	r0, [sp, #1344]	; 0x540
 8009f7a:	f00b fdcb 	bl	8015b14 <realloc>
 8009f7e:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
 8009f82:	e7d7      	b.n	8009f34 <StartenchallTask+0x6dc>
      uint8_t floats_lengthT = *(inbuffer + offset++);
 8009f84:	ab9b      	add	r3, sp, #620	; 0x26c
 8009f86:	5d9f      	ldrb	r7, [r3, r6]
      if(floats_lengthT > floats_length)
 8009f88:	f89d 3544 	ldrb.w	r3, [sp, #1348]	; 0x544
 8009f8c:	429f      	cmp	r7, r3
 8009f8e:	dc20      	bgt.n	8009fd2 <StartenchallTask+0x77a>
      offset += 3;
 8009f90:	3604      	adds	r6, #4
      floats_length = floats_lengthT;
 8009f92:	f88d 7544 	strb.w	r7, [sp, #1348]	; 0x544
      for( uint8_t i = 0; i < floats_length; i++){
 8009f96:	2200      	movs	r2, #0
 8009f98:	f89d 3544 	ldrb.w	r3, [sp, #1348]	; 0x544
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	da20      	bge.n	8009fe2 <StartenchallTask+0x78a>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009fa0:	a894      	add	r0, sp, #592	; 0x250
 8009fa2:	a99b      	add	r1, sp, #620	; 0x26c
 8009fa4:	5d8b      	ldrb	r3, [r1, r6]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009fa6:	1c77      	adds	r7, r6, #1
 8009fa8:	5dcf      	ldrb	r7, [r1, r7]
 8009faa:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009fae:	1cb7      	adds	r7, r6, #2
 8009fb0:	5dcf      	ldrb	r7, [r1, r7]
 8009fb2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009fb6:	1cf7      	adds	r7, r6, #3
 8009fb8:	5dc9      	ldrb	r1, [r1, r7]
 8009fba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 8009fbe:	f8c0 32f8 	str.w	r3, [r0, #760]	; 0x2f8
      offset += sizeof(this->st_floats);
 8009fc2:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8009fc4:	f8dd 154c 	ldr.w	r1, [sp, #1356]	; 0x54c
 8009fc8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint8_t i = 0; i < floats_length; i++){
 8009fcc:	3201      	adds	r2, #1
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	e7e2      	b.n	8009f98 <StartenchallTask+0x740>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8009fd2:	00b9      	lsls	r1, r7, #2
 8009fd4:	f8dd 054c 	ldr.w	r0, [sp, #1356]	; 0x54c
 8009fd8:	f00b fd9c 	bl	8015b14 <realloc>
 8009fdc:	f8cd 054c 	str.w	r0, [sp, #1356]	; 0x54c
 8009fe0:	e7d6      	b.n	8009f90 <StartenchallTask+0x738>
      uint8_t strings_lengthT = *(inbuffer + offset++);
 8009fe2:	ab9b      	add	r3, sp, #620	; 0x26c
 8009fe4:	5d9f      	ldrb	r7, [r3, r6]
      if(strings_lengthT > strings_length)
 8009fe6:	f89d 3550 	ldrb.w	r3, [sp, #1360]	; 0x550
 8009fea:	429f      	cmp	r7, r3
 8009fec:	dc05      	bgt.n	8009ffa <StartenchallTask+0x7a2>
      offset += 3;
 8009fee:	1d32      	adds	r2, r6, #4
      strings_length = strings_lengthT;
 8009ff0:	f88d 7550 	strb.w	r7, [sp, #1360]	; 0x550
      for( uint8_t i = 0; i < strings_length; i++){
 8009ff4:	f04f 0e00 	mov.w	lr, #0
 8009ff8:	e017      	b.n	800a02a <StartenchallTask+0x7d2>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8009ffa:	00b9      	lsls	r1, r7, #2
 8009ffc:	f8dd 0558 	ldr.w	r0, [sp, #1368]	; 0x558
 800a000:	f00b fd88 	bl	8015b14 <realloc>
 800a004:	f8cd 0558 	str.w	r0, [sp, #1368]	; 0x558
 800a008:	e7f1      	b.n	8009fee <StartenchallTask+0x796>
      inbuffer[offset+length_st_strings-1]=0;
 800a00a:	ab9b      	add	r3, sp, #620	; 0x26c
 800a00c:	1e51      	subs	r1, r2, #1
 800a00e:	2000      	movs	r0, #0
 800a010:	5458      	strb	r0, [r3, r1]
      this->st_strings = (char *)(inbuffer + offset-1);
 800a012:	3e01      	subs	r6, #1
 800a014:	441e      	add	r6, r3
 800a016:	f8cd 6554 	str.w	r6, [sp, #1364]	; 0x554
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800a01a:	f8dd 3558 	ldr.w	r3, [sp, #1368]	; 0x558
 800a01e:	f843 602e 	str.w	r6, [r3, lr, lsl #2]
      for( uint8_t i = 0; i < strings_length; i++){
 800a022:	f10e 0e01 	add.w	lr, lr, #1
 800a026:	fa5f fe8e 	uxtb.w	lr, lr
 800a02a:	f89d 3550 	ldrb.w	r3, [sp, #1360]	; 0x550
 800a02e:	459e      	cmp	lr, r3
 800a030:	da0c      	bge.n	800a04c <StartenchallTask+0x7f4>
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 800a032:	ab9b      	add	r3, sp, #620	; 0x26c
 800a034:	589f      	ldr	r7, [r3, r2]
      offset += 4;
 800a036:	1d16      	adds	r6, r2, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800a038:	4633      	mov	r3, r6
 800a03a:	19ba      	adds	r2, r7, r6
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d9e4      	bls.n	800a00a <StartenchallTask+0x7b2>
          inbuffer[k-1]=inbuffer[k];
 800a040:	aa9b      	add	r2, sp, #620	; 0x26c
 800a042:	1e59      	subs	r1, r3, #1
 800a044:	5cd0      	ldrb	r0, [r2, r3]
 800a046:	5450      	strb	r0, [r2, r1]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800a048:	3301      	adds	r3, #1
 800a04a:	e7f6      	b.n	800a03a <StartenchallTask+0x7e2>
                param_recieved= true;
 800a04c:	2301      	movs	r3, #1
 800a04e:	f88d 3530 	strb.w	r3, [sp, #1328]	; 0x530
 800a052:	e5ce      	b.n	8009bf2 <StartenchallTask+0x39a>
                configured_ = false;
 800a054:	2300      	movs	r3, #0
 800a056:	f88d 3520 	strb.w	r3, [sp, #1312]	; 0x520
 800a05a:	e5ca      	b.n	8009bf2 <StartenchallTask+0x39a>
      if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 800a05c:	f89d 3520 	ldrb.w	r3, [sp, #1312]	; 0x520
 800a060:	b133      	cbz	r3, 800a070 <StartenchallTask+0x818>
 800a062:	f8dd 3524 	ldr.w	r3, [sp, #1316]	; 0x524
 800a066:	1aeb      	subs	r3, r5, r3
 800a068:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d807      	bhi.n	800a080 <StartenchallTask+0x828>
      return configured_;
 800a070:	f89d 3520 	ldrb.w	r3, [sp, #1312]	; 0x520
	  if(nh_.connected())
 800a074:	b353      	cbz	r3, 800a0cc <StartenchallTask+0x874>
			  imu_.update();
 800a076:	210a      	movs	r1, #10
 800a078:	a84f      	add	r0, sp, #316	; 0x13c
 800a07a:	f002 f88d 	bl	800c198 <_ZN3IMU6updateEt>
 800a07e:	e010      	b.n	800a0a2 <StartenchallTask+0x84a>
      data()
 800a080:	4b55      	ldr	r3, [pc, #340]	; (800a1d8 <StartenchallTask+0x980>)
 800a082:	930a      	str	r3, [sp, #40]	; 0x28
 800a084:	2300      	movs	r3, #0
 800a086:	930b      	str	r3, [sp, #44]	; 0x2c
 800a088:	930c      	str	r3, [sp, #48]	; 0x30
      publish(TopicInfo::ID_TIME, &t);
 800a08a:	9b94      	ldr	r3, [sp, #592]	; 0x250
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	aa0a      	add	r2, sp, #40	; 0x28
 800a090:	210a      	movs	r1, #10
 800a092:	a894      	add	r0, sp, #592	; 0x250
 800a094:	4798      	blx	r3
 800a096:	f002 ff83 	bl	800cfa0 <HAL_GetTick>
      rt_time = hardware_.time();
 800a09a:	9098      	str	r0, [sp, #608]	; 0x260
        last_sync_time = c_time;
 800a09c:	f8cd 5524 	str.w	r5, [sp, #1316]	; 0x524
 800a0a0:	e7e6      	b.n	800a070 <StartenchallTask+0x818>
      }
  }

  void update()
  {
    if(attitude_estimate_flag_) attitude_estimator_.update();
 800a0a2:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800a0a6:	b9c3      	cbnz	r3, 800a0da <StartenchallTask+0x882>
    if(altitude_estimate_flag_) altitude_estimator_.update();
 800a0a8:	f89d 3139 	ldrb.w	r3, [sp, #313]	; 0x139
 800a0ac:	b12b      	cbz	r3, 800a0ba <StartenchallTask+0x862>
    baro_= baro;
  }

  void update()
  {
    if(baro_->getUpdate())
 800a0ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
  // get current climb rate in meters/s. A positive number means
  float getClimbRate(void);
  // get last time sample was taken (in ms)
  uint32_t getLastUpdate(void) const { return last_timer_; }

  bool getUpdate() { return update_; }
 800a0b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f040 8127 	bne.w	800a308 <StartenchallTask+0xab0>
    if(pos_estimate_flag_) pos_estimator_.update();
 800a0ba:	f89d 313a 	ldrb.w	r3, [sp, #314]	; 0x13a
 800a0be:	b12b      	cbz	r3, 800a0cc <StartenchallTask+0x874>
    gps_ = gps;
  }

  void update()
  {
    if(gps_->getUpdate())
 800a0c0:	9b4d      	ldr	r3, [sp, #308]	; 0x134
  uint16_t getRxSize()
  {
    return (uint16_t)GPS_RX_SIZE;
  }

  bool getUpdate() { return update_; }
 800a0c2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f040 8153 	bne.w	800a372 <StartenchallTask+0xb1a>
	    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,GPIO_PIN_RESET);
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a0d2:	4842      	ldr	r0, [pc, #264]	; (800a1dc <StartenchallTask+0x984>)
 800a0d4:	f003 feca 	bl	800de6c <HAL_GPIO_WritePin>
 800a0d8:	e1ad      	b.n	800a436 <StartenchallTask+0xbde>
    if(imu_->getUpdate())
 800a0da:	9836      	ldr	r0, [sp, #216]	; 0xd8
	//chen 0526 change update function
	//void update();
	uint16_t update(uint16_t queue_size = DEFAULT_DATA_SIZE);
	void ledOutput();

	bool getUpdate() { return update_; }
 800a0dc:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0e1      	beq.n	800a0a8 <StartenchallTask+0x850>
        if(!imu_->getCalibrated()) return;
 800a0e4:	f001 fb80 	bl	800b7e8 <_ZN3IMU13getCalibratedEv>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d0dd      	beq.n	800a0a8 <StartenchallTask+0x850>
        estimator_->update(imu_->getGyro(), imu_->getAcc(), imu_->getMag());
 800a0ec:	9d35      	ldr	r5, [sp, #212]	; 0xd4
 800a0ee:	9b36      	ldr	r3, [sp, #216]	; 0xd8
	static const uint8_t RESET_CALIB_CMD = 0x00;
	static const uint8_t MPU_ACC_GYRO_CALIB_CMD = 0x01;
	static const uint8_t MPU_MAG_CALIB_CMD = 0x02;

	Vector3f  getAcc(){return acc_;}
	Vector3f  getGyro(){return gyro_;}
 800a0f0:	f20d 565c 	addw	r6, sp, #1372	; 0x55c
 800a0f4:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800a0f8:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0fa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a0fe:	f50d 67ad 	add.w	r7, sp, #1384	; 0x568
 800a102:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800a106:	f20d 56bc 	addw	r6, sp, #1468	; 0x5bc
 800a10a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	Vector3f  getAcc(){return acc_;}
 800a10e:	f20d 5774 	addw	r7, sp, #1396	; 0x574
 800a112:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800a116:	ca07      	ldmia	r2, {r0, r1, r2}
 800a118:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800a11c:	f50d 6eb0 	add.w	lr, sp, #1408	; 0x580
 800a120:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 800a124:	f50d 67b6 	add.w	r7, sp, #1456	; 0x5b0
 800a128:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	Vector3f  getMag(){return mag_;}
 800a12c:	f20d 5c8c 	addw	ip, sp, #1420	; 0x58c
 800a130:	33a0      	adds	r3, #160	; 0xa0
 800a132:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a136:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800a13a:	f50d 6eb3 	add.w	lr, sp, #1432	; 0x598
 800a13e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 800a142:	f20d 53a4 	addw	r3, sp, #1444	; 0x5a4
 800a146:	e883 0007 	stmia.w	r3, {r0, r1, r2}


  void update(const Vector3f& gyro, const Vector3f& acc, const Vector3f& mag)
  {
    /* the sensor data in body frame */
    acc_b_ = acc;
 800a14a:	f105 0e04 	add.w	lr, r5, #4
 800a14e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800a152:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    gyro_b_ = gyro;
 800a156:	f105 071c 	add.w	r7, r5, #28
 800a15a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a15e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    mag_b_ = mag;
 800a162:	f105 0634 	add.w	r6, r5, #52	; 0x34
 800a166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a16a:	e886 0007 	stmia.w	r6, {r0, r1, r2}

    /* the sensor data in virtual frame */
    acc_v_ = r_* acc_b_;
 800a16e:	f105 064c 	add.w	r6, r5, #76	; 0x4c
 800a172:	4671      	mov	r1, lr
 800a174:	4630      	mov	r0, r6
 800a176:	f008 f937 	bl	80123e8 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 800a17a:	ed85 0a04 	vstr	s0, [r5, #16]
 800a17e:	edc5 0a05 	vstr	s1, [r5, #20]
 800a182:	ed85 1a06 	vstr	s2, [r5, #24]
    gyro_v_ = r_*  gyro_b_;
 800a186:	4639      	mov	r1, r7
 800a188:	4630      	mov	r0, r6
 800a18a:	f008 f92d 	bl	80123e8 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 800a18e:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
 800a192:	edc5 0a0b 	vstr	s1, [r5, #44]	; 0x2c
 800a196:	ed85 1a0c 	vstr	s2, [r5, #48]	; 0x30
    mag_v_ = r_ * mag_b_;
 800a19a:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f008 f922 	bl	80123e8 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 800a1a4:	ed85 0a10 	vstr	s0, [r5, #64]	; 0x40
 800a1a8:	edc5 0a11 	vstr	s1, [r5, #68]	; 0x44
 800a1ac:	ed85 1a12 	vstr	s2, [r5, #72]	; 0x48
    arm_mat_mult_f32(&desire_attitude_R_, &acc_b_vec_, &acc_v_vec_);
    arm_mat_mult_f32(&desire_attitude_R_, &gyro_b_vec_, &gyro_v_vec_);
    arm_mat_mult_f32(&desire_attitude_R_, &mag_b_vec_, &mag_v_vec_);
    */

    estimation();
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	4798      	blx	r3
        if(nh_->connected())  publish();
 800a1b8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800a1ba:	6803      	ldr	r3, [r0, #0]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	4798      	blx	r3
 800a1c0:	b970      	cbnz	r0, 800a1e0 <StartenchallTask+0x988>
        imu_->setUpdate(false);
 800a1c2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
	void setUpdate(bool update) { update_ = update; }
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800a1ca:	e76d      	b.n	800a0a8 <StartenchallTask+0x850>
 800a1cc:	10624dd3 	.word	0x10624dd3
 800a1d0:	000f4240 	.word	0x000f4240
 800a1d4:	3b9aca00 	.word	0x3b9aca00
 800a1d8:	0801985c 	.word	0x0801985c
 800a1dc:	40020800 	.word	0x40020800
    uint32_t now_time = HAL_GetTick();
 800a1e0:	f002 fede 	bl	800cfa0 <HAL_GetTick>
    if( now_time - last_pub_time_ >= PUB_INTERVAL)
 800a1e4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800a1e6:	1ac3      	subs	r3, r0, r3
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d9ea      	bls.n	800a1c2 <StartenchallTask+0x96a>
        last_pub_time_ = now_time;
 800a1ec:	9037      	str	r0, [sp, #220]	; 0xdc
        imu_msg_.stamp = nh_->now();
 800a1ee:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800a1f0:	f002 fed6 	bl	800cfa0 <HAL_GetTick>
      current_time.sec = ms/1000 + sec_offset;
 800a1f4:	4b97      	ldr	r3, [pc, #604]	; (800a454 <StartenchallTask+0xbfc>)
 800a1f6:	fba3 2300 	umull	r2, r3, r3, r0
 800a1fa:	099b      	lsrs	r3, r3, #6
 800a1fc:	696a      	ldr	r2, [r5, #20]
 800a1fe:	441a      	add	r2, r3
 800a200:	f8cd 2658 	str.w	r2, [sp, #1624]	; 0x658
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 800a204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a208:	fb02 0313 	mls	r3, r2, r3, r0
 800a20c:	69aa      	ldr	r2, [r5, #24]
 800a20e:	4992      	ldr	r1, [pc, #584]	; (800a458 <StartenchallTask+0xc00>)
 800a210:	fb01 2303 	mla	r3, r1, r3, r2
 800a214:	f8cd 365c 	str.w	r3, [sp, #1628]	; 0x65c
      normalizeSecNSec(current_time.sec, current_time.nsec);
 800a218:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800a21c:	f50d 60cb 	add.w	r0, sp, #1624	; 0x658
 800a220:	f002 fe5e 	bl	800cee0 <_ZN3ros16normalizeSecNSecERmS0_>
 800a224:	ab26      	add	r3, sp, #152	; 0x98
 800a226:	f50d 62cb 	add.w	r2, sp, #1624	; 0x658
 800a22a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a22e:	e883 0003 	stmia.w	r3, {r0, r1}
        for(int i = 0; i < 3 ; i ++)
 800a232:	2300      	movs	r3, #0
 800a234:	2b02      	cmp	r3, #2
 800a236:	dc5f      	bgt.n	800a2f8 <StartenchallTask+0xaa0>
imu_msg_.gyro_data[i] = imu_->getGyro()[i];
 800a238:	9d36      	ldr	r5, [sp, #216]	; 0xd8
	Vector3f  getGyro(){return gyro_;}
 800a23a:	f50d 67b9 	add.w	r7, sp, #1480	; 0x5c8
 800a23e:	f105 0294 	add.w	r2, r5, #148	; 0x94
 800a242:	ca07      	ldmia	r2, {r0, r1, r2}
 800a244:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800a248:	f20d 56d4 	addw	r6, sp, #1492	; 0x5d4
 800a24c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a250:	f20d 674c 	addw	r7, sp, #1612	; 0x64c
 800a254:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    T & operator[](uint8_t i) {
        T *_v = &x;
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 800a258:	b2de      	uxtb	r6, r3
 800a25a:	00b6      	lsls	r6, r6, #2
 800a25c:	4437      	add	r7, r6
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	f103 0208 	add.w	r2, r3, #8
 800a264:	a81f      	add	r0, sp, #124	; 0x7c
 800a266:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a26a:	6111      	str	r1, [r2, #16]
	Vector3f  getMag(){return mag_;}
 800a26c:	f50d 67bc 	add.w	r7, sp, #1504	; 0x5e0
 800a270:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
 800a274:	ca07      	ldmia	r2, {r0, r1, r2}
 800a276:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800a27a:	f20d 5eec 	addw	lr, sp, #1516	; 0x5ec
 800a27e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
            imu_msg_.mag_data[i] = imu_->getMag()[i];
 800a282:	f50d 67c8 	add.w	r7, sp, #1600	; 0x640
 800a286:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800a28a:	4437      	add	r7, r6
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	f103 020a 	add.w	r2, r3, #10
 800a292:	a81f      	add	r0, sp, #124	; 0x7c
 800a294:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a298:	6151      	str	r1, [r2, #20]
	Vector3f  getAcc(){return acc_;}
 800a29a:	f50d 6ebf 	add.w	lr, sp, #1528	; 0x5f8
 800a29e:	3588      	adds	r5, #136	; 0x88
 800a2a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a2a4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 800a2a8:	f20d 6704 	addw	r7, sp, #1540	; 0x604
 800a2ac:	e887 0007 	stmia.w	r7, {r0, r1, r2}
            imu_msg_.acc_data[i] = imu_->getAcc()[i];
 800a2b0:	f20d 6534 	addw	r5, sp, #1588	; 0x634
 800a2b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a2b8:	4435      	add	r5, r6
 800a2ba:	6829      	ldr	r1, [r5, #0]
 800a2bc:	1d1a      	adds	r2, r3, #4
 800a2be:	a81f      	add	r0, sp, #124	; 0x7c
 800a2c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a2c4:	6151      	str	r1, [r2, #20]
            imu_msg_.angles[i] = estimator_->getAngles()[i];
 800a2c6:	9a35      	ldr	r2, [sp, #212]	; 0xd4
  static const uint8_t RELATIVE_COORD = 1;
  static const uint8_t X = 0;
  static const uint8_t Y = 1;
  static const uint8_t Z = 2;

  Vector3f getAngles(){return rpy_;}
 800a2c8:	f50d 65c2 	add.w	r5, sp, #1552	; 0x610
 800a2cc:	3270      	adds	r2, #112	; 0x70
 800a2ce:	ca07      	ldmia	r2, {r0, r1, r2}
 800a2d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a2d4:	f20d 671c 	addw	r7, sp, #1564	; 0x61c
 800a2d8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800a2dc:	f50d 65c5 	add.w	r5, sp, #1576	; 0x628
 800a2e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a2e4:	4435      	add	r5, r6
 800a2e6:	6829      	ldr	r1, [r5, #0]
 800a2e8:	f103 020e 	add.w	r2, r3, #14
 800a2ec:	a81f      	add	r0, sp, #124	; 0x7c
 800a2ee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a2f2:	6111      	str	r1, [r2, #16]
        for(int i = 0; i < 3 ; i ++)
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	e79d      	b.n	800a234 <StartenchallTask+0x9dc>
        imu_pub_->publish(&imu_msg_);
 800a2f8:	9b24      	ldr	r3, [sp, #144]	; 0x90

    int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 800a2fa:	68d8      	ldr	r0, [r3, #12]
 800a2fc:	6802      	ldr	r2, [r0, #0]
 800a2fe:	6815      	ldr	r5, [r2, #0]
 800a300:	aa25      	add	r2, sp, #148	; 0x94
 800a302:	6899      	ldr	r1, [r3, #8]
 800a304:	47a8      	blx	r5
 800a306:	e75c      	b.n	800a1c2 <StartenchallTask+0x96a>
  //nav-ekf


  void publish()
  {
    baro_msg_.stamp = nh_->now();
 800a308:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 800a30a:	f002 fe49 	bl	800cfa0 <HAL_GetTick>
      current_time.sec = ms/1000 + sec_offset;
 800a30e:	4b51      	ldr	r3, [pc, #324]	; (800a454 <StartenchallTask+0xbfc>)
 800a310:	fba3 2300 	umull	r2, r3, r3, r0
 800a314:	099b      	lsrs	r3, r3, #6
 800a316:	696a      	ldr	r2, [r5, #20]
 800a318:	441a      	add	r2, r3
 800a31a:	f8cd 2660 	str.w	r2, [sp, #1632]	; 0x660
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 800a31e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a322:	fb02 0313 	mls	r3, r2, r3, r0
 800a326:	69aa      	ldr	r2, [r5, #24]
 800a328:	494b      	ldr	r1, [pc, #300]	; (800a458 <StartenchallTask+0xc00>)
 800a32a:	fb01 2303 	mla	r3, r1, r3, r2
 800a32e:	f8cd 3664 	str.w	r3, [sp, #1636]	; 0x664
      normalizeSecNSec(current_time.sec, current_time.nsec);
 800a332:	f20d 6164 	addw	r1, sp, #1636	; 0x664
 800a336:	f50d 60cc 	add.w	r0, sp, #1632	; 0x660
 800a33a:	f002 fdd1 	bl	800cee0 <_ZN3ros16normalizeSecNSecERmS0_>
 800a33e:	ab3b      	add	r3, sp, #236	; 0xec
 800a340:	f50d 62cc 	add.w	r2, sp, #1632	; 0x660
 800a344:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a348:	e883 0003 	stmia.w	r3, {r0, r1}
    baro_msg_.pressure = baro_->getPressure();
 800a34c:	9b41      	ldr	r3, [sp, #260]	; 0x104
  void setUpdate(bool update) { update_ = update; }

  inline float getPressure(){return pressure_;}
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	923e      	str	r2, [sp, #248]	; 0xf8
  inline float getTemperature(){return temperature_;}
 800a352:	689a      	ldr	r2, [r3, #8]
    baro_msg_.temperature = baro_->getTemperature();
 800a354:	923f      	str	r2, [sp, #252]	; 0xfc
  inline float getAltitude(){return altitude_;}
 800a356:	68db      	ldr	r3, [r3, #12]
    baro_msg_.altitude = baro_->getAltitude();
 800a358:	933d      	str	r3, [sp, #244]	; 0xf4
    baro_pub_->publish(&baro_msg_);
 800a35a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800a35c:	68d8      	ldr	r0, [r3, #12]
 800a35e:	6802      	ldr	r2, [r0, #0]
 800a360:	6815      	ldr	r5, [r2, #0]
 800a362:	aa3a      	add	r2, sp, #232	; 0xe8
 800a364:	6899      	ldr	r1, [r3, #8]
 800a366:	47a8      	blx	r5
        baro_->setUpdate(false);
 800a368:	9b41      	ldr	r3, [sp, #260]	; 0x104
  void setUpdate(bool update) { update_ = update; }
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a370:	e6a3      	b.n	800a0ba <StartenchallTask+0x862>
  GPS* gps_;
  //nav-ekf2

  void publish()
  {
    gps_msg_.stamp = nh_->now();
 800a372:	9d42      	ldr	r5, [sp, #264]	; 0x108
 800a374:	f002 fe14 	bl	800cfa0 <HAL_GetTick>
      current_time.sec = ms/1000 + sec_offset;
 800a378:	4b36      	ldr	r3, [pc, #216]	; (800a454 <StartenchallTask+0xbfc>)
 800a37a:	fba3 2300 	umull	r2, r3, r3, r0
 800a37e:	099b      	lsrs	r3, r3, #6
 800a380:	696a      	ldr	r2, [r5, #20]
 800a382:	441a      	add	r2, r3
 800a384:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 800a388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a38c:	fb02 0313 	mls	r3, r2, r3, r0
 800a390:	69aa      	ldr	r2, [r5, #24]
 800a392:	4931      	ldr	r1, [pc, #196]	; (800a458 <StartenchallTask+0xc00>)
 800a394:	fb01 2303 	mla	r3, r1, r3, r2
 800a398:	f8cd 366c 	str.w	r3, [sp, #1644]	; 0x66c
      normalizeSecNSec(current_time.sec, current_time.nsec);
 800a39c:	f20d 616c 	addw	r1, sp, #1644	; 0x66c
 800a3a0:	f50d 60cd 	add.w	r0, sp, #1640	; 0x668
 800a3a4:	f002 fd9c 	bl	800cee0 <_ZN3ros16normalizeSecNSecERmS0_>
 800a3a8:	ab45      	add	r3, sp, #276	; 0x114
 800a3aa:	f50d 62ce 	add.w	r2, sp, #1648	; 0x670
 800a3ae:	e912 0003 	ldmdb	r2, {r0, r1}
 800a3b2:	e883 0003 	stmia.w	r3, {r0, r1}

    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 800a3b6:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    return state;
 800a3b8:	3510      	adds	r5, #16
 800a3ba:	2648      	movs	r6, #72	; 0x48
 800a3bc:	4632      	mov	r2, r6
 800a3be:	4629      	mov	r1, r5
 800a3c0:	a80d      	add	r0, sp, #52	; 0x34
 800a3c2:	f00b fb26 	bl	8015a12 <memcpy>
 800a3c6:	f8dd 3042 	ldr.w	r3, [sp, #66]	; 0x42
 800a3ca:	ee07 3a90 	vmov	s15, r3
 800a3ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3d2:	edcd 7a47 	vstr	s15, [sp, #284]	; 0x11c
 800a3d6:	4632      	mov	r2, r6
 800a3d8:	4629      	mov	r1, r5
 800a3da:	a80d      	add	r0, sp, #52	; 0x34
 800a3dc:	f00b fb19 	bl	8015a12 <memcpy>
    gps_msg_.location[1] = gps_->getGosState().location.lng; // lng
 800a3e0:	f8dd 3046 	ldr.w	r3, [sp, #70]	; 0x46
 800a3e4:	ee07 3a90 	vmov	s15, r3
 800a3e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3ec:	edcd 7a48 	vstr	s15, [sp, #288]	; 0x120
 800a3f0:	4632      	mov	r2, r6
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	a80d      	add	r0, sp, #52	; 0x34
 800a3f6:	f00b fb0c 	bl	8015a12 <memcpy>

    gps_msg_.velocity[0] = gps_->getGosState().velocity.x;
 800a3fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3fc:	9349      	str	r3, [sp, #292]	; 0x124
 800a3fe:	4632      	mov	r2, r6
 800a400:	4629      	mov	r1, r5
 800a402:	a80d      	add	r0, sp, #52	; 0x34
 800a404:	f00b fb05 	bl	8015a12 <memcpy>
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;
 800a408:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a40a:	934a      	str	r3, [sp, #296]	; 0x128
 800a40c:	4632      	mov	r2, r6
 800a40e:	4629      	mov	r1, r5
 800a410:	a80d      	add	r0, sp, #52	; 0x34
 800a412:	f00b fafe 	bl	8015a12 <memcpy>

    gps_msg_.sat_num = gps_->getGosState().num_sats;
 800a416:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a41a:	f88d 312c 	strb.w	r3, [sp, #300]	; 0x12c

    gps_pub_->publish(&gps_msg_);
 800a41e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a420:	68d8      	ldr	r0, [r3, #12]
 800a422:	6802      	ldr	r2, [r0, #0]
 800a424:	6815      	ldr	r5, [r2, #0]
 800a426:	aa44      	add	r2, sp, #272	; 0x110
 800a428:	6899      	ldr	r1, [r3, #8]
 800a42a:	47a8      	blx	r5
        gps_->setUpdate(false);
 800a42c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
  void setUpdate(bool update) { update_ = update; }
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 800a434:	e64a      	b.n	800a0cc <StartenchallTask+0x874>
		osDelay(5);
 800a436:	2005      	movs	r0, #5
 800a438:	f006 f988 	bl	801074c <osDelay>
 800a43c:	f7ff bb8e 	b.w	8009b5c <StartenchallTask+0x304>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a440:	9852      	ldr	r0, [sp, #328]	; 0x148
	if (__p)
 800a442:	b108      	cbz	r0, 800a448 <StartenchallTask+0xbf0>
 800a444:	f008 f91e 	bl	8012684 <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a448:	984f      	ldr	r0, [sp, #316]	; 0x13c
	if (__p)
 800a44a:	b108      	cbz	r0, 800a450 <StartenchallTask+0xbf8>
 800a44c:	f008 f91a 	bl	8012684 <_ZdlPv>
 800a450:	f008 faa4 	bl	801299c <__cxa_end_cleanup>
 800a454:	10624dd3 	.word	0x10624dd3
 800a458:	000f4240 	.word	0x000f4240

0800a45c <_GLOBAL__sub_I_Enc_handle_left>:
}
 800a45c:	b508      	push	{r3, lr}
 800a45e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a462:	2001      	movs	r0, #1
 800a464:	f7fe fe26 	bl	80090b4 <_Z41__static_initialization_and_destruction_0ii>
 800a468:	bd08      	pop	{r3, pc}
 800a46a:	0000      	movs	r0, r0
 800a46c:	0000      	movs	r0, r0
	...

0800a470 <StartcontrolTask>:
 * Start FOC control task...
 * clark -> park -> control -> rev park -> rev clark -> PWM
 *
 */
void StartcontrolTask(void const * argument)
{
 800a470:	b500      	push	{lr}
 800a472:	ed2d 8b0e 	vpush	{d8-d14}
 800a476:	b091      	sub	sp, #68	; 0x44
	float integra_Cd = 0;
	float integra_Cq = 0;
	float lastq = 0, lastd = 0;  //incremental control
	float vd_st = 0, vq_st = 0;
 800a478:	eddf 9aed 	vldr	s19, [pc, #948]	; 800a830 <StartcontrolTask+0x3c0>
 800a47c:	eeb0 9a69 	vmov.f32	s18, s19
	float lastq = 0, lastd = 0;  //incremental control
 800a480:	eeb0 da69 	vmov.f32	s26, s19
 800a484:	eef0 da69 	vmov.f32	s27, s19
 800a488:	e19a      	b.n	800a7c0 <StartcontrolTask+0x350>
		{
			//to test the calculation time.. arount 25us
			//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
			//copy the data use float type.
			//as we have FPU, fast..
			float c_a = ((float)shuntdata.cur_a)/1000;
 800a48a:	eddd 7a02 	vldr	s15, [sp, #8]
 800a48e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a492:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 800a834 <StartcontrolTask+0x3c4>
 800a496:	ee87 8a87 	vdiv.f32	s16, s15, s14
			float c_b = ((float)shuntdata.cur_b)/1000;
 800a49a:	eddd 7a03 	vldr	s15, [sp, #12]
 800a49e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4a2:	eec7 8a87 	vdiv.f32	s17, s15, s14
//			float c_c = ((float)shuntdata.cur_c)/1000;
			//now the unity is 1 for 10ma..

			//obtain the encoder angle
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	a907      	add	r1, sp, #28
 800a4ac:	48e2      	ldr	r0, [pc, #904]	; (800a838 <StartcontrolTask+0x3c8>)
 800a4ae:	6800      	ldr	r0, [r0, #0]
 800a4b0:	f006 fec4 	bl	801123c <xQueueGenericReceive>
 800a4b4:	2801      	cmp	r0, #1
 800a4b6:	f040 819b 	bne.w	800a7f0 <StartcontrolTask+0x380>
	*apha = 1.5 * a;
 800a4ba:	eeb7 ea08 	vmov.f32	s28, #120	; 0x3fc00000  1.5
 800a4be:	ee28 ea0e 	vmul.f32	s28, s16, s28
	*beta = sq3 * b + (sq3 * a)/2;
 800a4c2:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 800a4c6:	ed9f 6bce 	vldr	d6, [pc, #824]	; 800a800 <StartcontrolTask+0x390>
 800a4ca:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800a4ce:	ee28 8b06 	vmul.f64	d8, d8, d6
 800a4d2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a4d6:	ee28 8b05 	vmul.f64	d8, d8, d5
 800a4da:	ee07 8b06 	vmla.f64	d8, d7, d6
 800a4de:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
				return;
			//clarke
			float c_apha, c_beta;
			ClarkeTrans(c_a, c_b, &c_apha, &c_beta);
			//then park...
			float theta = 4 * PI * (encdata.recon_counter - CENTERCOUNT
 800a4e2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800a4e6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
					+ shuntdata.centeroffset) / MAXCOUNT;
 800a4ea:	f99d 2016 	ldrsb.w	r2, [sp, #22]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	ee07 3a10 	vmov	s14, r3
			float theta = 4 * PI * (encdata.recon_counter - CENTERCOUNT
 800a4f4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800a4f8:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 800a808 <StartcontrolTask+0x398>
 800a4fc:	ee27 7b06 	vmul.f64	d7, d7, d6
					+ shuntdata.centeroffset) / MAXCOUNT;
 800a500:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 800a810 <StartcontrolTask+0x3a0>
 800a504:	ee87 cb06 	vdiv.f64	d12, d7, d6
			float theta = 4 * PI * (encdata.recon_counter - CENTERCOUNT
 800a508:	eeb7 cbcc 	vcvt.f32.f64	s24, d12
	*i_d = apha*cos(theta) + beta*sin(theta);
 800a50c:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 800a510:	eeb0 0b4c 	vmov.f64	d0, d12
 800a514:	f009 f8dc 	bl	80136d0 <cos>
 800a518:	eeb0 bb40 	vmov.f64	d11, d0
 800a51c:	eeb7 aace 	vcvt.f64.f32	d10, s28
 800a520:	ee2a ab00 	vmul.f64	d10, d10, d0
 800a524:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800a528:	eeb0 0b4c 	vmov.f64	d0, d12
 800a52c:	f009 f90c 	bl	8013748 <sin>
 800a530:	ee08 ab00 	vmla.f64	d10, d8, d0
 800a534:	eef7 6bca 	vcvt.f32.f64	s13, d10
	*i_q = -apha*sin(theta) + beta*cos(theta);
 800a538:	eeb1 ea4e 	vneg.f32	s28, s28
 800a53c:	eeb7 eace 	vcvt.f64.f32	d14, s28
 800a540:	ee2b 8b08 	vmul.f64	d8, d11, d8
 800a544:	ee00 8b0e 	vmla.f64	d8, d0, d14
 800a548:	eeb7 8bc8 	vcvt.f32.f64	s16, d8

			/*
			 * PID control
			 */
			//P part
			float er_q = shuntdata.target_cur - c_q;
 800a54c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a550:	ee08 3a90 	vmov	s17, r3
 800a554:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800a558:	ee78 8ac8 	vsub.f32	s17, s17, s16
			float er_d = T_ID - c_d;
 800a55c:	ed9f aab4 	vldr	s20, [pc, #720]	; 800a830 <StartcontrolTask+0x3c0>
 800a560:	ee3a aa66 	vsub.f32	s20, s20, s13

			/******************
			 * before control the motor
			 * we add another control loop to control velocity of the motor
			 */
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 800a564:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfb8      	it	lt
 800a56c:	425b      	neglt	r3, r3
 800a56e:	ee07 3a90 	vmov	s15, r3
 800a572:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a576:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800a57a:	ee07 3a10 	vmov	s14, r3
 800a57e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800a582:	ed9f 4ba5 	vldr	d4, [pc, #660]	; 800a818 <StartcontrolTask+0x3a8>
 800a586:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a58a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a592:	dd03      	ble.n	800a59c <StartcontrolTask+0x12c>
			{
				er_q = 0 - c_q;
 800a594:	eddf 8aa6 	vldr	s17, [pc, #664]	; 800a830 <StartcontrolTask+0x3c0>
 800a598:	ee78 8ac8 	vsub.f32	s17, s17, s16
				er_d = T_ID - c_d;
			}
			//debug view.. send back to PC to view the control result
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 800a59c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a5a0:	ee17 3a90 	vmov	r3, s15
 800a5a4:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 800a5a8:	fa02 f383 	sxtah	r3, r2, r3
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f2c0 8115 	blt.w	800a7dc <StartcontrolTask+0x36c>
 800a5b2:	105b      	asrs	r3, r3, #1
 800a5b4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 800a5b8:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800a5bc:	ee17 3a90 	vmov	r3, s15
 800a5c0:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 800a5c4:	fa02 f383 	sxtah	r3, r2, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f2c0 8109 	blt.w	800a7e0 <StartcontrolTask+0x370>
 800a5ce:	105b      	asrs	r3, r3, #1
 800a5d0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

						/*******************
			 * these codes may have some problem, need to test it carefully later...
			 */
			{
				float eer_d = er_d - lastd;
 800a5d4:	ee3a da4d 	vsub.f32	s26, s20, s26
				float eer_q = er_q - lastq;
 800a5d8:	ee78 7aed 	vsub.f32	s15, s17, s27
				lastd = er_d; lastq = er_q;
				//get the control voltage

				float v_d = shuntdata.Kp * eer_d + shuntdata.Ki * er_d * 1e-1;
 800a5dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a5e0:	ee07 3a10 	vmov	s14, r3
 800a5e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a5e8:	ee2d da07 	vmul.f32	s26, s26, s14
 800a5ec:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 800a5f0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800a5f4:	ee05 3a10 	vmov	s10, r3
 800a5f8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800a5fc:	ee2a 4a05 	vmul.f32	s8, s20, s10
 800a600:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
 800a604:	ed9f 6b86 	vldr	d6, [pc, #536]	; 800a820 <StartcontrolTask+0x3b0>
 800a608:	ee04 db06 	vmla.f64	d13, d4, d6
 800a60c:	eeb7 dbcd 	vcvt.f32.f64	s26, d13
				float v_q = shuntdata.Kp * eer_q + shuntdata.Ki * er_q * 1e-1;
 800a610:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a614:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800a618:	ee28 5a85 	vmul.f32	s10, s17, s10
 800a61c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 800a620:	ee05 7b06 	vmla.f64	d7, d5, d6
 800a624:	eeb7 7bc7 	vcvt.f32.f64	s14, d7

#define MAXVqd 1000000
				if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 800a628:	ee79 7a0d 	vadd.f32	s15, s18, s26
 800a62c:	eddf 6a83 	vldr	s13, [pc, #524]	; 800a83c <StartcontrolTask+0x3cc>
 800a630:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a638:	d51e      	bpl.n	800a678 <StartcontrolTask+0x208>
 800a63a:	eddf 6a81 	vldr	s13, [pc, #516]	; 800a840 <StartcontrolTask+0x3d0>
 800a63e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a646:	dd17      	ble.n	800a678 <StartcontrolTask+0x208>
						(vq_st + v_q)<MAXVqd && (vq_st + v_q)>-MAXVqd)
 800a648:	ee79 7a87 	vadd.f32	s15, s19, s14
				if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 800a64c:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800a83c <StartcontrolTask+0x3cc>
 800a650:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a658:	d50e      	bpl.n	800a678 <StartcontrolTask+0x208>
						(vq_st + v_q)<MAXVqd && (vq_st + v_q)>-MAXVqd)
 800a65a:	eddf 6a79 	vldr	s13, [pc, #484]	; 800a840 <StartcontrolTask+0x3d0>
 800a65e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a666:	dd07      	ble.n	800a678 <StartcontrolTask+0x208>
				{
					vd_st += v_d + v_d;  //equals to Kp..
 800a668:	ee3d da0d 	vadd.f32	s26, s26, s26
 800a66c:	ee39 9a0d 	vadd.f32	s18, s18, s26
					vq_st += v_q + v_q;
 800a670:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a674:	ee79 9a87 	vadd.f32	s19, s19, s14
	*apha = v_d*cos(theta) - v_q*sin(theta);
 800a678:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 800a67c:	eeb7 5ae9 	vcvt.f64.f32	d5, s19
 800a680:	ee20 7b05 	vmul.f64	d7, d0, d5
 800a684:	ee1b 7b06 	vnmls.f64	d7, d11, d6
 800a688:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	*beta = v_d*sin(theta) + v_q*cos(theta);
 800a68c:	ee2b bb05 	vmul.f64	d11, d11, d5
 800a690:	ee00 bb06 	vmla.f64	d11, d0, d6
 800a694:	eeb7 bbcb 	vcvt.f32.f64	s22, d11
	*va = 2*apha/3;
 800a698:	ee77 7a07 	vadd.f32	s15, s14, s14
 800a69c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800a6a0:	ee87 5aa6 	vdiv.f32	s10, s15, s13
	*vb = -apha/3 + beta/sq3;
 800a6a4:	eef1 7a47 	vneg.f32	s15, s14
 800a6a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a6ac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800a6b0:	eeb7 bacb 	vcvt.f64.f32	d11, s22
 800a6b4:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800a800 <StartcontrolTask+0x390>
 800a6b8:	ee8b 4b06 	vdiv.f64	d4, d11, d6
 800a6bc:	ee37 6b04 	vadd.f64	d6, d7, d4
 800a6c0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	*vc = -apha/3 - beta/sq3;
 800a6c4:	ee37 7b44 	vsub.f64	d7, d7, d4
 800a6c8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			//reverse clarke
			float v_a,v_b,v_c;
			RevClarkeTrans(&v_a,&v_b,&v_c,v_apha,v_beta);

			//mapping the v_a v_b v_c to the real voltage and to the max duty of 2160
			v_a *= 1e-3;  //because of 1 is 1 mv
 800a6cc:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 800a6d0:	ed9f 4b55 	vldr	d4, [pc, #340]	; 800a828 <StartcontrolTask+0x3b8>
 800a6d4:	ee25 5b04 	vmul.f64	d5, d5, d4
 800a6d8:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
			v_b *= 1e-3;
 800a6dc:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800a6e0:	ee26 6b04 	vmul.f64	d6, d6, d4
 800a6e4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			v_c *= 1e-3;
 800a6e8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800a6ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a6f0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	v_big = *v_a>*v_b?*v_a:*v_b;
 800a6f4:	eeb4 5ac6 	vcmpe.f32	s10, s12
 800a6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6fc:	dd72      	ble.n	800a7e4 <StartcontrolTask+0x374>
 800a6fe:	eef0 7a45 	vmov.f32	s15, s10
	v_big = v_big>*v_c?v_big:*v_c;
 800a702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70a:	d401      	bmi.n	800a710 <StartcontrolTask+0x2a0>
 800a70c:	eef0 7a47 	vmov.f32	s15, s14
	*v_a -= v_big;
 800a710:	ee35 5a67 	vsub.f32	s10, s10, s15
	*v_b -= v_big;
 800a714:	ee36 6a67 	vsub.f32	s12, s12, s15
	*v_c -= v_big;
 800a718:	ee37 7a67 	vsub.f32	s14, s14, s15
	v_small = *v_a<*v_b?*v_a:*v_b;
 800a71c:	eeb4 5ac6 	vcmpe.f32	s10, s12
 800a720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a724:	d561      	bpl.n	800a7ea <StartcontrolTask+0x37a>
 800a726:	eef0 7a45 	vmov.f32	s15, s10
	v_small = v_small<*v_c?v_small:*v_c;
 800a72a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a732:	dc01      	bgt.n	800a738 <StartcontrolTask+0x2c8>
 800a734:	eef0 7a47 	vmov.f32	s15, s14
	if(v_small<-MAXDUTY) // <-2159..
 800a738:	eddf 6a42 	vldr	s13, [pc, #264]	; 800a844 <StartcontrolTask+0x3d4>
 800a73c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a744:	d509      	bpl.n	800a75a <StartcontrolTask+0x2ea>
		*v_a *= -(MAXDUTY)/v_small;
 800a746:	eef0 5a66 	vmov.f32	s11, s13
 800a74a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800a74e:	ee25 5a26 	vmul.f32	s10, s10, s13
		*v_b *= -(MAXDUTY)/v_small;
 800a752:	ee26 6a26 	vmul.f32	s12, s12, s13
		*v_c *= -(MAXDUTY)/v_small;  //then the data is proportional under maxduty
 800a756:	ee27 7a26 	vmul.f32	s14, s14, s13

			//find the bigest one.. sent the duty to 0;
			SVMDuty(&v_a,&v_b,&v_c);
			uint16_t cont_a = (uint16_t)(-v_a);
 800a75a:	eeb1 5a45 	vneg.f32	s10, s10
 800a75e:	eefc 7ac5 	vcvt.u32.f32	s15, s10
 800a762:	edcd 7a01 	vstr	s15, [sp, #4]
 800a766:	f8bd 1004 	ldrh.w	r1, [sp, #4]
			uint16_t cont_b = (uint16_t)(-v_b);
 800a76a:	eeb1 6a46 	vneg.f32	s12, s12
 800a76e:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 800a772:	edcd 7a01 	vstr	s15, [sp, #4]
 800a776:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			uint16_t cont_c = (uint16_t)(-v_c);
 800a77a:	eeb1 7a47 	vneg.f32	s14, s14
 800a77e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a782:	edcd 7a01 	vstr	s15, [sp, #4]
 800a786:	f8bd 3004 	ldrh.w	r3, [sp, #4]


			/******
			 * control the motor
			 */
			setMotorDuty(cont_a, cont_b, cont_c);
 800a78a:	482f      	ldr	r0, [pc, #188]	; (800a848 <StartcontrolTask+0x3d8>)
 800a78c:	6800      	ldr	r0, [r0, #0]
 800a78e:	6341      	str	r1, [r0, #52]	; 0x34
 800a790:	6382      	str	r2, [r0, #56]	; 0x38
 800a792:	63c3      	str	r3, [r0, #60]	; 0x3c



			//for debug view..
			conres.duty_a = cont_a;conres.duty_b = cont_b;conres.duty_c = cont_c;
 800a794:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 800a798:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800a79c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
			xQueueOverwrite(conresQueueHandle,&conres);
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	a90d      	add	r1, sp, #52	; 0x34
 800a7a6:	4829      	ldr	r0, [pc, #164]	; (800a84c <StartcontrolTask+0x3dc>)
 800a7a8:	6800      	ldr	r0, [r0, #0]
 800a7aa:	f006 fbed 	bl	8010f88 <xQueueGenericSend>
			//to test the control frequency
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 800a7ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a7b2:	4827      	ldr	r0, [pc, #156]	; (800a850 <StartcontrolTask+0x3e0>)
 800a7b4:	f003 fb60 	bl	800de78 <HAL_GPIO_TogglePin>
				lastd = er_d; lastq = er_q;
 800a7b8:	eeb0 da4a 	vmov.f32	s26, s20
 800a7bc:	eef0 da68 	vmov.f32	s27, s17
		if(xQueueReceive(shuntQueueHandle,&shuntdata,2)==pdPASS)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	a902      	add	r1, sp, #8
 800a7c6:	4823      	ldr	r0, [pc, #140]	; (800a854 <StartcontrolTask+0x3e4>)
 800a7c8:	6800      	ldr	r0, [r0, #0]
 800a7ca:	f006 fd37 	bl	801123c <xQueueGenericReceive>
 800a7ce:	2801      	cmp	r0, #1
 800a7d0:	f43f ae5b 	beq.w	800a48a <StartcontrolTask+0x1a>
//				shuntdata.cur_a -= 8600;
//				shuntdata.cur_b -= 18400;
//				shuntdata.cur_c = -shuntdata.cur_a - shuntdata.cur_b;
//				volatile float cc = ((float)shuntdata.cur_a)/100;
//			}
			osDelay(1);
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	f005 ffb9 	bl	801074c <osDelay>
	{
 800a7da:	e7f1      	b.n	800a7c0 <StartcontrolTask+0x350>
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 800a7dc:	3301      	adds	r3, #1
 800a7de:	e6e8      	b.n	800a5b2 <StartcontrolTask+0x142>
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	e6f4      	b.n	800a5ce <StartcontrolTask+0x15e>
	v_big = *v_a>*v_b?*v_a:*v_b;
 800a7e4:	eef0 7a46 	vmov.f32	s15, s12
 800a7e8:	e78b      	b.n	800a702 <StartcontrolTask+0x292>
	v_small = *v_a<*v_b?*v_a:*v_b;
 800a7ea:	eef0 7a46 	vmov.f32	s15, s12
 800a7ee:	e79c      	b.n	800a72a <StartcontrolTask+0x2ba>
		}
  }
}
 800a7f0:	b011      	add	sp, #68	; 0x44
 800a7f2:	ecbd 8b0e 	vpop	{d8-d14}
 800a7f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7fa:	bf00      	nop
 800a7fc:	f3af 8000 	nop.w
 800a800:	1c0010c7 	.word	0x1c0010c7
 800a804:	3ffbb67b 	.word	0x3ffbb67b
 800a808:	2e48e8a7 	.word	0x2e48e8a7
 800a80c:	402921ff 	.word	0x402921ff
 800a810:	00000000 	.word	0x00000000
 800a814:	409f4000 	.word	0x409f4000
 800a818:	66666666 	.word	0x66666666
 800a81c:	404f6666 	.word	0x404f6666
 800a820:	9999999a 	.word	0x9999999a
 800a824:	3fb99999 	.word	0x3fb99999
 800a828:	d2f1a9fc 	.word	0xd2f1a9fc
 800a82c:	3f50624d 	.word	0x3f50624d
 800a830:	00000000 	.word	0x00000000
 800a834:	447a0000 	.word	0x447a0000
 800a838:	200079d0 	.word	0x200079d0
 800a83c:	49742400 	.word	0x49742400
 800a840:	c9742400 	.word	0xc9742400
 800a844:	c5070000 	.word	0xc5070000
 800a848:	20007b1c 	.word	0x20007b1c
 800a84c:	200079b8 	.word	0x200079b8
 800a850:	40020800 	.word	0x40020800
 800a854:	200079e0 	.word	0x200079e0

0800a858 <HAL_UART_ErrorCallback>:

/***********
 * UART4 error handler
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a858:	b508      	push	{r3, lr}
	//error...
	Error_Handler();
 800a85a:	f001 fee5 	bl	800c628 <Error_Handler>
 800a85e:	bd08      	pop	{r3, pc}

0800a860 <HAL_UART_RxCpltCallback>:
	 * if some other task B that has higher priority than A are being woken by the passing queue or semaphore,
	 * the xHigherPriorityTaskWoken will be set to pdTrue and we can directly perform a context switch and thus
	 * leaves the ISR and go to task B, if not so, we need to go back to task A and wait for a tick to switch to B.
	 */

	if(huart->Instance==huart4.Instance) //not necessary to check..
 800a860:	6802      	ldr	r2, [r0, #0]
 800a862:	4b9d      	ldr	r3, [pc, #628]	; (800aad8 <HAL_UART_RxCpltCallback+0x278>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d000      	beq.n	800a86c <HAL_UART_RxCpltCallback+0xc>
 800a86a:	4770      	bx	lr
{
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	2400      	movs	r4, #0
 800a872:	e009      	b.n	800a888 <HAL_UART_RxCpltCallback+0x28>
		static BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		for(int i=0; i<UART4BYTE; i++)
		{
			if(enchall_buff[i] == TXHEADER)
			{
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 800a874:	2300      	movs	r3, #0
 800a876:	e014      	b.n	800a8a2 <HAL_UART_RxCpltCallback+0x42>
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 800a878:	2200      	movs	r2, #0
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 800a87a:	4618      	mov	r0, r3
 800a87c:	4997      	ldr	r1, [pc, #604]	; (800aadc <HAL_UART_RxCpltCallback+0x27c>)
 800a87e:	5ccb      	ldrb	r3, [r1, r3]
 800a880:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a884:	d112      	bne.n	800a8ac <HAL_UART_RxCpltCallback+0x4c>
		for(int i=0; i<UART4BYTE; i++)
 800a886:	3401      	adds	r4, #1
 800a888:	2c04      	cmp	r4, #4
 800a88a:	f300 81a4 	bgt.w	800abd6 <HAL_UART_RxCpltCallback+0x376>
			if(enchall_buff[i] == TXHEADER)
 800a88e:	4b93      	ldr	r3, [pc, #588]	; (800aadc <HAL_UART_RxCpltCallback+0x27c>)
 800a890:	5d1b      	ldrb	r3, [r3, r4]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2bf8      	cmp	r3, #248	; 0xf8
 800a896:	d1f6      	bne.n	800a886 <HAL_UART_RxCpltCallback+0x26>
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 800a898:	2c04      	cmp	r4, #4
 800a89a:	d0eb      	beq.n	800a874 <HAL_UART_RxCpltCallback+0x14>
 800a89c:	b2e3      	uxtb	r3, r4
 800a89e:	3301      	adds	r3, #1
 800a8a0:	b2db      	uxtb	r3, r3
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d0e8      	beq.n	800a878 <HAL_UART_RxCpltCallback+0x18>
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	b2d2      	uxtb	r2, r2
 800a8aa:	e7e6      	b.n	800a87a <HAL_UART_RxCpltCallback+0x1a>
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 800a8ac:	5c8b      	ldrb	r3, [r1, r2]
 800a8ae:	f013 0f60 	tst.w	r3, #96	; 0x60
 800a8b2:	d0e8      	beq.n	800a886 <HAL_UART_RxCpltCallback+0x26>
				{
					//then we can obtain the correct bytes...
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	5c0d      	ldrb	r5, [r1, r0]
 800a8b8:	f3c5 1580 	ubfx	r5, r5, #6, #1
 800a8bc:	4988      	ldr	r1, [pc, #544]	; (800aae0 <HAL_UART_RxCpltCallback+0x280>)
 800a8be:	700d      	strb	r5, [r1, #0]
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 800a8c0:	5c1d      	ldrb	r5, [r3, r0]
 800a8c2:	f3c5 1540 	ubfx	r5, r5, #5, #1
 800a8c6:	704d      	strb	r5, [r1, #1]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 800a8c8:	5c1d      	ldrb	r5, [r3, r0]
 800a8ca:	f3c5 0582 	ubfx	r5, r5, #2, #3
 800a8ce:	708d      	strb	r5, [r1, #2]
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 800a8d0:	5c18      	ldrb	r0, [r3, r0]
 800a8d2:	f000 0003 	and.w	r0, r0, #3
 800a8d6:	70c8      	strb	r0, [r1, #3]
					//next byte
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 800a8d8:	5c9b      	ldrb	r3, [r3, r2]
 800a8da:	f003 031f 	and.w	r3, r3, #31
 800a8de:	710b      	strb	r3, [r1, #4]
					//next two bytes
					uint8_t b1 = t==UART4BYTE-1?0:t+1;
 800a8e0:	2a04      	cmp	r2, #4
 800a8e2:	d021      	beq.n	800a928 <HAL_UART_RxCpltCallback+0xc8>
 800a8e4:	3201      	adds	r2, #1
 800a8e6:	b2d2      	uxtb	r2, r2
					uint8_t b2 = b1==UART4BYTE-1?0:b1+1;
 800a8e8:	2a04      	cmp	r2, #4
 800a8ea:	d01f      	beq.n	800a92c <HAL_UART_RxCpltCallback+0xcc>
 800a8ec:	1c51      	adds	r1, r2, #1
 800a8ee:	b2c9      	uxtb	r1, r1
					enchall.enc_high = enchall_buff[b1]&0xff;
 800a8f0:	4d7a      	ldr	r5, [pc, #488]	; (800aadc <HAL_UART_RxCpltCallback+0x27c>)
 800a8f2:	5cae      	ldrb	r6, [r5, r2]
 800a8f4:	4a7a      	ldr	r2, [pc, #488]	; (800aae0 <HAL_UART_RxCpltCallback+0x280>)
 800a8f6:	7156      	strb	r6, [r2, #5]
					enchall.enc_low = enchall_buff[b2]&0xff;
 800a8f8:	5c69      	ldrb	r1, [r5, r1]
 800a8fa:	7191      	strb	r1, [r2, #6]
					//process the data... change to from 0-2000 encoder count..
					if(enchall.calc_tag == 2) //all 0
 800a8fc:	2802      	cmp	r0, #2
 800a8fe:	d017      	beq.n	800a930 <HAL_UART_RxCpltCallback+0xd0>
						enchall.recon_counter = enchall.enc_counter;  //only 5bit has number, other bits are 0
						if(flag==2)
							enchall.z_count++;
						flag = 1;
					}
					else if(enchall.calc_tag == 3) //all 1    except the last 5 bits... other bits are 1
 800a900:	2803      	cmp	r0, #3
 800a902:	d03d      	beq.n	800a980 <HAL_UART_RxCpltCallback+0x120>
							enchall.z_count--;
						flag = 2;
					}
					else
					{
						flag = 0;
 800a904:	2100      	movs	r1, #0
 800a906:	4a77      	ldr	r2, [pc, #476]	; (800aae4 <HAL_UART_RxCpltCallback+0x284>)
 800a908:	7011      	strb	r1, [r2, #0]
						if(enchall.enc_counter-last5bitsdata>16) //overflowed..
 800a90a:	4a77      	ldr	r2, [pc, #476]	; (800aae8 <HAL_UART_RxCpltCallback+0x288>)
 800a90c:	8812      	ldrh	r2, [r2, #0]
 800a90e:	b292      	uxth	r2, r2
 800a910:	1a9a      	subs	r2, r3, r2
 800a912:	2a10      	cmp	r2, #16
 800a914:	dd45      	ble.n	800a9a2 <HAL_UART_RxCpltCallback+0x142>
						{
							enchall.recon_counter = (enchall.recon_counter - 32)&0xFFE0|enchall.enc_counter;
 800a916:	4972      	ldr	r1, [pc, #456]	; (800aae0 <HAL_UART_RxCpltCallback+0x280>)
 800a918:	890a      	ldrh	r2, [r1, #8]
 800a91a:	3a20      	subs	r2, #32
 800a91c:	b212      	sxth	r2, r2
 800a91e:	f022 021f 	bic.w	r2, r2, #31
 800a922:	4313      	orrs	r3, r2
 800a924:	810b      	strh	r3, [r1, #8]
 800a926:	e00b      	b.n	800a940 <HAL_UART_RxCpltCallback+0xe0>
					uint8_t b1 = t==UART4BYTE-1?0:t+1;
 800a928:	2200      	movs	r2, #0
 800a92a:	e7dd      	b.n	800a8e8 <HAL_UART_RxCpltCallback+0x88>
					uint8_t b2 = b1==UART4BYTE-1?0:b1+1;
 800a92c:	2100      	movs	r1, #0
 800a92e:	e7df      	b.n	800a8f0 <HAL_UART_RxCpltCallback+0x90>
						enchall.recon_counter = enchall.enc_counter;  //only 5bit has number, other bits are 0
 800a930:	8113      	strh	r3, [r2, #8]
						if(flag==2)
 800a932:	4b6c      	ldr	r3, [pc, #432]	; (800aae4 <HAL_UART_RxCpltCallback+0x284>)
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b02      	cmp	r3, #2
 800a938:	d01d      	beq.n	800a976 <HAL_UART_RxCpltCallback+0x116>
						flag = 1;
 800a93a:	2201      	movs	r2, #1
 800a93c:	4b69      	ldr	r3, [pc, #420]	; (800aae4 <HAL_UART_RxCpltCallback+0x284>)
 800a93e:	701a      	strb	r2, [r3, #0]
						}
						else //not overflow
							enchall.recon_counter = enchall.recon_counter&0xFFE0|enchall.enc_counter;
					}
					//get the last data..
					last5bitsdata = enchall.enc_counter;
 800a940:	4b67      	ldr	r3, [pc, #412]	; (800aae0 <HAL_UART_RxCpltCallback+0x280>)
 800a942:	791a      	ldrb	r2, [r3, #4]
 800a944:	4b68      	ldr	r3, [pc, #416]	; (800aae8 <HAL_UART_RxCpltCallback+0x288>)
 800a946:	801a      	strh	r2, [r3, #0]


					//about 400us for every speed estimation, bug solved,
					//timer 2 and timer 4 not stable..
					if(fivetimecount--<=0&&cnt==lasttick)
 800a948:	4968      	ldr	r1, [pc, #416]	; (800aaec <HAL_UART_RxCpltCallback+0x28c>)
 800a94a:	780b      	ldrb	r3, [r1, #0]
 800a94c:	b25b      	sxtb	r3, r3
 800a94e:	1e5a      	subs	r2, r3, #1
 800a950:	b252      	sxtb	r2, r2
 800a952:	700a      	strb	r2, [r1, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	dd3c      	ble.n	800a9d2 <HAL_UART_RxCpltCallback+0x172>
						enchall.timetick = cnt_e;
						fivetimecount = 51;
					}

					//send the DFSDM current sensing data.
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 800a958:	2100      	movs	r1, #0
 800a95a:	4865      	ldr	r0, [pc, #404]	; (800aaf0 <HAL_UART_RxCpltCallback+0x290>)
 800a95c:	f002 fd3d 	bl	800d3da <HAL_DFSDM_FilterPollForRegConversion>
 800a960:	2800      	cmp	r0, #0
 800a962:	f000 8115 	beq.w	800ab90 <HAL_UART_RxCpltCallback+0x330>
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
					}

					//send the queue to tasks...
					//since we need to always refresh the data, need to use overwrite, only return pass
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 800a966:	2302      	movs	r3, #2
 800a968:	4a62      	ldr	r2, [pc, #392]	; (800aaf4 <HAL_UART_RxCpltCallback+0x294>)
 800a96a:	495d      	ldr	r1, [pc, #372]	; (800aae0 <HAL_UART_RxCpltCallback+0x280>)
 800a96c:	4862      	ldr	r0, [pc, #392]	; (800aaf8 <HAL_UART_RxCpltCallback+0x298>)
 800a96e:	6800      	ldr	r0, [r0, #0]
 800a970:	f006 fbed 	bl	801114e <xQueueGenericSendFromISR>
 800a974:	e787      	b.n	800a886 <HAL_UART_RxCpltCallback+0x26>
							enchall.z_count++;
 800a976:	f9b2 300e 	ldrsh.w	r3, [r2, #14]
 800a97a:	3301      	adds	r3, #1
 800a97c:	81d3      	strh	r3, [r2, #14]
 800a97e:	e7dc      	b.n	800a93a <HAL_UART_RxCpltCallback+0xda>
						enchall.recon_counter = ALLONECOUNT + enchall.enc_counter;
 800a980:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800a984:	4a56      	ldr	r2, [pc, #344]	; (800aae0 <HAL_UART_RxCpltCallback+0x280>)
 800a986:	8113      	strh	r3, [r2, #8]
						if(flag==1)
 800a988:	4b56      	ldr	r3, [pc, #344]	; (800aae4 <HAL_UART_RxCpltCallback+0x284>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d003      	beq.n	800a998 <HAL_UART_RxCpltCallback+0x138>
						flag = 2;
 800a990:	2202      	movs	r2, #2
 800a992:	4b54      	ldr	r3, [pc, #336]	; (800aae4 <HAL_UART_RxCpltCallback+0x284>)
 800a994:	701a      	strb	r2, [r3, #0]
 800a996:	e7d3      	b.n	800a940 <HAL_UART_RxCpltCallback+0xe0>
							enchall.z_count--;
 800a998:	f9b2 300e 	ldrsh.w	r3, [r2, #14]
 800a99c:	3b01      	subs	r3, #1
 800a99e:	81d3      	strh	r3, [r2, #14]
 800a9a0:	e7f6      	b.n	800a990 <HAL_UART_RxCpltCallback+0x130>
						else if(enchall.enc_counter-last5bitsdata<-16)
 800a9a2:	4a51      	ldr	r2, [pc, #324]	; (800aae8 <HAL_UART_RxCpltCallback+0x288>)
 800a9a4:	8812      	ldrh	r2, [r2, #0]
 800a9a6:	b292      	uxth	r2, r2
 800a9a8:	1a9a      	subs	r2, r3, r2
 800a9aa:	f112 0f10 	cmn.w	r2, #16
 800a9ae:	da08      	bge.n	800a9c2 <HAL_UART_RxCpltCallback+0x162>
							enchall.recon_counter = (enchall.recon_counter + 32)&0xFFE0|enchall.enc_counter;
 800a9b0:	494b      	ldr	r1, [pc, #300]	; (800aae0 <HAL_UART_RxCpltCallback+0x280>)
 800a9b2:	890a      	ldrh	r2, [r1, #8]
 800a9b4:	3220      	adds	r2, #32
 800a9b6:	b212      	sxth	r2, r2
 800a9b8:	f022 021f 	bic.w	r2, r2, #31
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	810b      	strh	r3, [r1, #8]
 800a9c0:	e7be      	b.n	800a940 <HAL_UART_RxCpltCallback+0xe0>
							enchall.recon_counter = enchall.recon_counter&0xFFE0|enchall.enc_counter;
 800a9c2:	4947      	ldr	r1, [pc, #284]	; (800aae0 <HAL_UART_RxCpltCallback+0x280>)
 800a9c4:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 800a9c8:	f022 021f 	bic.w	r2, r2, #31
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	810b      	strh	r3, [r1, #8]
 800a9d0:	e7b6      	b.n	800a940 <HAL_UART_RxCpltCallback+0xe0>
					if(fivetimecount--<=0&&cnt==lasttick)
 800a9d2:	4b4a      	ldr	r3, [pc, #296]	; (800aafc <HAL_UART_RxCpltCallback+0x29c>)
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	4b4a      	ldr	r3, [pc, #296]	; (800ab00 <HAL_UART_RxCpltCallback+0x2a0>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d1bc      	bne.n	800a958 <HAL_UART_RxCpltCallback+0xf8>
						cnt = (int32_t)htim3.Instance->CNT;
 800a9de:	4b49      	ldr	r3, [pc, #292]	; (800ab04 <HAL_UART_RxCpltCallback+0x2a4>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9e4:	4b45      	ldr	r3, [pc, #276]	; (800aafc <HAL_UART_RxCpltCallback+0x29c>)
 800a9e6:	601a      	str	r2, [r3, #0]
						cnt_e = cnt-lasttick;
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a45      	ldr	r2, [pc, #276]	; (800ab00 <HAL_UART_RxCpltCallback+0x2a0>)
 800a9ec:	6812      	ldr	r2, [r2, #0]
 800a9ee:	1a9b      	subs	r3, r3, r2
 800a9f0:	4a45      	ldr	r2, [pc, #276]	; (800ab08 <HAL_UART_RxCpltCallback+0x2a8>)
 800a9f2:	6013      	str	r3, [r2, #0]
						cnt_e = cnt_e<0?cnt_e+50000:cnt_e;
 800a9f4:	6813      	ldr	r3, [r2, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	db5a      	blt.n	800aab0 <HAL_UART_RxCpltCallback+0x250>
 800a9fa:	4b43      	ldr	r3, [pc, #268]	; (800ab08 <HAL_UART_RxCpltCallback+0x2a8>)
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	4b42      	ldr	r3, [pc, #264]	; (800ab08 <HAL_UART_RxCpltCallback+0x2a8>)
 800aa00:	601a      	str	r2, [r3, #0]
						if(cnt_e>390&&cnt_e<400)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 800aa08:	f340 80b0 	ble.w	800ab6c <HAL_UART_RxCpltCallback+0x30c>
 800aa0c:	4b3e      	ldr	r3, [pc, #248]	; (800ab08 <HAL_UART_RxCpltCallback+0x2a8>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800aa14:	f280 80aa 	bge.w	800ab6c <HAL_UART_RxCpltCallback+0x30c>
							volatile int16_t ct = enchall.recon_counter - last_recon;
 800aa18:	4b31      	ldr	r3, [pc, #196]	; (800aae0 <HAL_UART_RxCpltCallback+0x280>)
 800aa1a:	891b      	ldrh	r3, [r3, #8]
 800aa1c:	4a3b      	ldr	r2, [pc, #236]	; (800ab0c <HAL_UART_RxCpltCallback+0x2ac>)
 800aa1e:	8812      	ldrh	r2, [r2, #0]
 800aa20:	1a9a      	subs	r2, r3, r2
 800aa22:	b212      	sxth	r2, r2
 800aa24:	f8ad 2002 	strh.w	r2, [sp, #2]
							ct = ct>1000?enchall.recon_counter-last_recon-2000:ct;
 800aa28:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aa2c:	b212      	sxth	r2, r2
 800aa2e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800aa32:	dd42      	ble.n	800aaba <HAL_UART_RxCpltCallback+0x25a>
 800aa34:	4a35      	ldr	r2, [pc, #212]	; (800ab0c <HAL_UART_RxCpltCallback+0x2ac>)
 800aa36:	8812      	ldrh	r2, [r2, #0]
 800aa38:	1a9a      	subs	r2, r3, r2
 800aa3a:	b292      	uxth	r2, r2
 800aa3c:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 800aa40:	b212      	sxth	r2, r2
 800aa42:	f8ad 2002 	strh.w	r2, [sp, #2]
							ct = ct<-1000?enchall.recon_counter-last_recon+2000:ct;
 800aa46:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aa4a:	b212      	sxth	r2, r2
 800aa4c:	f512 7f7a 	cmn.w	r2, #1000	; 0x3e8
 800aa50:	da37      	bge.n	800aac2 <HAL_UART_RxCpltCallback+0x262>
 800aa52:	4a2e      	ldr	r2, [pc, #184]	; (800ab0c <HAL_UART_RxCpltCallback+0x2ac>)
 800aa54:	8812      	ldrh	r2, [r2, #0]
 800aa56:	1a9b      	subs	r3, r3, r2
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800aa5e:	b21b      	sxth	r3, r3
 800aa60:	f8ad 3002 	strh.w	r3, [sp, #2]
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 800aa64:	4b2a      	ldr	r3, [pc, #168]	; (800ab10 <HAL_UART_RxCpltCallback+0x2b0>)
 800aa66:	7818      	ldrb	r0, [r3, #0]
 800aa68:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aa6c:	b212      	sxth	r2, r2
 800aa6e:	4d29      	ldr	r5, [pc, #164]	; (800ab14 <HAL_UART_RxCpltCallback+0x2b4>)
 800aa70:	230c      	movs	r3, #12
 800aa72:	fb03 f300 	mul.w	r3, r3, r0
 800aa76:	18e9      	adds	r1, r5, r3
 800aa78:	50ea      	str	r2, [r5, r3]
 800aa7a:	4a23      	ldr	r2, [pc, #140]	; (800ab08 <HAL_UART_RxCpltCallback+0x2a8>)
 800aa7c:	6813      	ldr	r3, [r2, #0]
 800aa7e:	604b      	str	r3, [r1, #4]
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 800aa80:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800aa84:	b21b      	sxth	r3, r3
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aa8e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800aad0 <HAL_UART_RxCpltCallback+0x270>
 800aa92:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa96:	ed92 5a00 	vldr	s10, [r2]
 800aa9a:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 800aa9e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800aaa2:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 800aaa6:	ed81 6a02 	vstr	s12, [r1, #8]
							volatile int32_t v_all = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	9301      	str	r3, [sp, #4]
							for(uint8_t i=0;i<MAX_V_FRAME;i++)
 800aaae:	e03e      	b.n	800ab2e <HAL_UART_RxCpltCallback+0x2ce>
						cnt_e = cnt_e<0?cnt_e+50000:cnt_e;
 800aab0:	6813      	ldr	r3, [r2, #0]
 800aab2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800aab6:	441a      	add	r2, r3
 800aab8:	e7a1      	b.n	800a9fe <HAL_UART_RxCpltCallback+0x19e>
							ct = ct>1000?enchall.recon_counter-last_recon-2000:ct;
 800aaba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aabe:	b212      	sxth	r2, r2
 800aac0:	e7bf      	b.n	800aa42 <HAL_UART_RxCpltCallback+0x1e2>
							ct = ct<-1000?enchall.recon_counter-last_recon+2000:ct;
 800aac2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800aac6:	b21b      	sxth	r3, r3
 800aac8:	e7ca      	b.n	800aa60 <HAL_UART_RxCpltCallback+0x200>
 800aaca:	bf00      	nop
 800aacc:	f3af 8000 	nop.w
 800aad0:	00000000 	.word	0x00000000
 800aad4:	412e8480 	.word	0x412e8480
 800aad8:	20007e0c 	.word	0x20007e0c
 800aadc:	200077d0 	.word	0x200077d0
 800aae0:	20000004 	.word	0x20000004
 800aae4:	20003858 	.word	0x20003858
 800aae8:	2000385a 	.word	0x2000385a
 800aaec:	2000001c 	.word	0x2000001c
 800aaf0:	200077e0 	.word	0x200077e0
 800aaf4:	200038f4 	.word	0x200038f4
 800aaf8:	200079d0 	.word	0x200079d0
 800aafc:	20003850 	.word	0x20003850
 800ab00:	20003860 	.word	0x20003860
 800ab04:	20007adc 	.word	0x20007adc
 800ab08:	20003854 	.word	0x20003854
 800ab0c:	2000385c 	.word	0x2000385c
 800ab10:	200038f0 	.word	0x200038f0
 800ab14:	20003878 	.word	0x20003878
								v_all += v_buff[i][2];
 800ab18:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ab1c:	0091      	lsls	r1, r2, #2
 800ab1e:	4a3a      	ldr	r2, [pc, #232]	; (800ac08 <HAL_UART_RxCpltCallback+0x3a8>)
 800ab20:	440a      	add	r2, r1
 800ab22:	6892      	ldr	r2, [r2, #8]
 800ab24:	9901      	ldr	r1, [sp, #4]
 800ab26:	440a      	add	r2, r1
 800ab28:	9201      	str	r2, [sp, #4]
							for(uint8_t i=0;i<MAX_V_FRAME;i++)
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b09      	cmp	r3, #9
 800ab30:	d9f2      	bls.n	800ab18 <HAL_UART_RxCpltCallback+0x2b8>
							v_all /= MAX_V_FRAME;
 800ab32:	9b01      	ldr	r3, [sp, #4]
 800ab34:	220a      	movs	r2, #10
 800ab36:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab3a:	9301      	str	r3, [sp, #4]
							enchall.w = (int16_t)(PI*v_all/100);
 800ab3c:	ed9d 7a01 	vldr	s14, [sp, #4]
 800ab40:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ab44:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800abf8 <HAL_UART_RxCpltCallback+0x398>
 800ab48:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab4c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800ac00 <HAL_UART_RxCpltCallback+0x3a0>
 800ab50:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800ab54:	eefd 7bc6 	vcvt.s32.f64	s15, d6
 800ab58:	ee17 3a90 	vmov	r3, s15
 800ab5c:	4a2b      	ldr	r2, [pc, #172]	; (800ac0c <HAL_UART_RxCpltCallback+0x3ac>)
 800ab5e:	8293      	strh	r3, [r2, #20]
							v_index = v_index+1>=MAX_V_FRAME?0:v_index+1;
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	2b09      	cmp	r3, #9
 800ab64:	dc12      	bgt.n	800ab8c <HAL_UART_RxCpltCallback+0x32c>
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	4a29      	ldr	r2, [pc, #164]	; (800ac10 <HAL_UART_RxCpltCallback+0x3b0>)
 800ab6a:	7013      	strb	r3, [r2, #0]
						lasttick = cnt;
 800ab6c:	4b29      	ldr	r3, [pc, #164]	; (800ac14 <HAL_UART_RxCpltCallback+0x3b4>)
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	4b29      	ldr	r3, [pc, #164]	; (800ac18 <HAL_UART_RxCpltCallback+0x3b8>)
 800ab72:	601a      	str	r2, [r3, #0]
						last_recon = enchall.recon_counter;
 800ab74:	4b25      	ldr	r3, [pc, #148]	; (800ac0c <HAL_UART_RxCpltCallback+0x3ac>)
 800ab76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800ab7a:	4a28      	ldr	r2, [pc, #160]	; (800ac1c <HAL_UART_RxCpltCallback+0x3bc>)
 800ab7c:	8011      	strh	r1, [r2, #0]
						enchall.timetick = cnt_e;
 800ab7e:	4a28      	ldr	r2, [pc, #160]	; (800ac20 <HAL_UART_RxCpltCallback+0x3c0>)
 800ab80:	6812      	ldr	r2, [r2, #0]
 800ab82:	611a      	str	r2, [r3, #16]
						fivetimecount = 51;
 800ab84:	2233      	movs	r2, #51	; 0x33
 800ab86:	4b27      	ldr	r3, [pc, #156]	; (800ac24 <HAL_UART_RxCpltCallback+0x3c4>)
 800ab88:	701a      	strb	r2, [r3, #0]
 800ab8a:	e6e5      	b.n	800a958 <HAL_UART_RxCpltCallback+0xf8>
							v_index = v_index+1>=MAX_V_FRAME?0:v_index+1;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	e7eb      	b.n	800ab68 <HAL_UART_RxCpltCallback+0x308>
							HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter1,0) == HAL_OK)
 800ab90:	2100      	movs	r1, #0
 800ab92:	4825      	ldr	r0, [pc, #148]	; (800ac28 <HAL_UART_RxCpltCallback+0x3c8>)
 800ab94:	f002 fc21 	bl	800d3da <HAL_DFSDM_FilterPollForRegConversion>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	f47f aee4 	bne.w	800a966 <HAL_UART_RxCpltCallback+0x106>
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 800ab9e:	4923      	ldr	r1, [pc, #140]	; (800ac2c <HAL_UART_RxCpltCallback+0x3cc>)
 800aba0:	4823      	ldr	r0, [pc, #140]	; (800ac30 <HAL_UART_RxCpltCallback+0x3d0>)
 800aba2:	f002 fc12 	bl	800d3ca <HAL_DFSDM_FilterGetRegularValue>
 800aba6:	4d23      	ldr	r5, [pc, #140]	; (800ac34 <HAL_UART_RxCpltCallback+0x3d4>)
 800aba8:	6068      	str	r0, [r5, #4]
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 800abaa:	4923      	ldr	r1, [pc, #140]	; (800ac38 <HAL_UART_RxCpltCallback+0x3d8>)
 800abac:	481e      	ldr	r0, [pc, #120]	; (800ac28 <HAL_UART_RxCpltCallback+0x3c8>)
 800abae:	f002 fc0c 	bl	800d3ca <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_a -= 8600;
 800abb2:	4b22      	ldr	r3, [pc, #136]	; (800ac3c <HAL_UART_RxCpltCallback+0x3dc>)
 800abb4:	4403      	add	r3, r0
 800abb6:	602b      	str	r3, [r5, #0]
						motorcurrent.cur_b -= 18400;
 800abb8:	6869      	ldr	r1, [r5, #4]
 800abba:	4a21      	ldr	r2, [pc, #132]	; (800ac40 <HAL_UART_RxCpltCallback+0x3e0>)
 800abbc:	440a      	add	r2, r1
 800abbe:	606a      	str	r2, [r5, #4]
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 800abc0:	425b      	negs	r3, r3
 800abc2:	1a9b      	subs	r3, r3, r2
 800abc4:	60ab      	str	r3, [r5, #8]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 800abc6:	2300      	movs	r3, #0
 800abc8:	4a1e      	ldr	r2, [pc, #120]	; (800ac44 <HAL_UART_RxCpltCallback+0x3e4>)
 800abca:	4629      	mov	r1, r5
 800abcc:	481e      	ldr	r0, [pc, #120]	; (800ac48 <HAL_UART_RxCpltCallback+0x3e8>)
 800abce:	6800      	ldr	r0, [r0, #0]
 800abd0:	f006 fabd 	bl	801114e <xQueueGenericSendFromISR>
 800abd4:	e6c7      	b.n	800a966 <HAL_UART_RxCpltCallback+0x106>
				}
			}
		}
		//continue DMA
		HAL_UART_DMAResume(&huart4);
 800abd6:	481d      	ldr	r0, [pc, #116]	; (800ac4c <HAL_UART_RxCpltCallback+0x3ec>)
 800abd8:	f005 fa4a 	bl	8010070 <HAL_UART_DMAResume>
			//call a context switch if needed..
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800abdc:	4b19      	ldr	r3, [pc, #100]	; (800ac44 <HAL_UART_RxCpltCallback+0x3e4>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	b13b      	cbz	r3, 800abf2 <HAL_UART_RxCpltCallback+0x392>
 800abe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe6:	4b1a      	ldr	r3, [pc, #104]	; (800ac50 <HAL_UART_RxCpltCallback+0x3f0>)
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	f3bf 8f6f 	isb	sy
	}


}
 800abf2:	b002      	add	sp, #8
 800abf4:	bd70      	pop	{r4, r5, r6, pc}
 800abf6:	bf00      	nop
 800abf8:	2e48e8a7 	.word	0x2e48e8a7
 800abfc:	400921ff 	.word	0x400921ff
 800ac00:	00000000 	.word	0x00000000
 800ac04:	40590000 	.word	0x40590000
 800ac08:	20003878 	.word	0x20003878
 800ac0c:	20000004 	.word	0x20000004
 800ac10:	200038f0 	.word	0x200038f0
 800ac14:	20003850 	.word	0x20003850
 800ac18:	20003860 	.word	0x20003860
 800ac1c:	2000385c 	.word	0x2000385c
 800ac20:	20003854 	.word	0x20003854
 800ac24:	2000001c 	.word	0x2000001c
 800ac28:	2000792c 	.word	0x2000792c
 800ac2c:	20007980 	.word	0x20007980
 800ac30:	200077e0 	.word	0x200077e0
 800ac34:	20003864 	.word	0x20003864
 800ac38:	20007834 	.word	0x20007834
 800ac3c:	ffffde68 	.word	0xffffde68
 800ac40:	ffffb820 	.word	0xffffb820
 800ac44:	200038f4 	.word	0x200038f4
 800ac48:	200079e0 	.word	0x200079e0
 800ac4c:	20007e0c 	.word	0x20007e0c
 800ac50:	e000ed04 	.word	0xe000ed04

0800ac54 <StartledblueTask>:
htim2.Instance->CCR1=0;}
#endif

/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
 800ac54:	b508      	push	{r3, lr}
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 800ac56:	2104      	movs	r1, #4
 800ac58:	4803      	ldr	r0, [pc, #12]	; (800ac68 <StartledblueTask+0x14>)
 800ac5a:	f003 f90d 	bl	800de78 <HAL_GPIO_TogglePin>
		osDelay(500);
 800ac5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ac62:	f005 fd73 	bl	801074c <osDelay>
 800ac66:	e7f6      	b.n	800ac56 <StartledblueTask+0x2>
 800ac68:	40021000 	.word	0x40021000

0800ac6c <StartledgreenTask>:
	}
}

/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
 800ac6c:	b508      	push	{r3, lr}
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 800ac6e:	2108      	movs	r1, #8
 800ac70:	4803      	ldr	r0, [pc, #12]	; (800ac80 <StartledgreenTask+0x14>)
 800ac72:	f003 f901 	bl	800de78 <HAL_GPIO_TogglePin>
		osDelay(1000);
 800ac76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ac7a:	f005 fd67 	bl	801074c <osDelay>
 800ac7e:	e7f6      	b.n	800ac6e <StartledgreenTask+0x2>
 800ac80:	40021000 	.word	0x40021000

0800ac84 <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 800ac84:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 800ac86:	2032      	movs	r0, #50	; 0x32
 800ac88:	f005 fd60 	bl	801074c <osDelay>
 800ac8c:	e7fb      	b.n	800ac86 <StartiwdgTask+0x2>
	...

0800ac90 <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 800ac94:	22c8      	movs	r2, #200	; 0xc8
 800ac96:	2100      	movs	r1, #0
 800ac98:	a802      	add	r0, sp, #8
 800ac9a:	f00a fedf 	bl	8015a5c <memset>
 800ac9e:	f240 35f5 	movw	r5, #1013	; 0x3f5
 800aca2:	f8ad 5008 	strh.w	r5, [sp, #8]
 800aca6:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800acaa:	f8ad 100a 	strh.w	r1, [sp, #10]
 800acae:	f240 72df 	movw	r2, #2015	; 0x7df
 800acb2:	f8ad 200c 	strh.w	r2, [sp, #12]
 800acb6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800acba:	f8ad 300e 	strh.w	r3, [sp, #14]
 800acbe:	f240 34f7 	movw	r4, #1015	; 0x3f7
 800acc2:	f8ad 4010 	strh.w	r4, [sp, #16]
 800acc6:	f8ad 2012 	strh.w	r2, [sp, #18]
 800acca:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800acce:	f8ad 0014 	strh.w	r0, [sp, #20]
 800acd2:	f8ad 5016 	strh.w	r5, [sp, #22]
 800acd6:	f8ad 1018 	strh.w	r1, [sp, #24]
 800acda:	f240 77dc 	movw	r7, #2012	; 0x7dc
 800acde:	f8ad 701a 	strh.w	r7, [sp, #26]
 800ace2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ace6:	f240 36f3 	movw	r6, #1011	; 0x3f3
 800acea:	f8ad 601e 	strh.w	r6, [sp, #30]
 800acee:	f240 76db 	movw	r6, #2011	; 0x7db
 800acf2:	f8ad 6020 	strh.w	r6, [sp, #32]
 800acf6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800acfa:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
 800acfe:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800ad02:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 800ad06:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 800ad0a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800ad0e:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 800ad12:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800ad16:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800ad1a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 800ad1e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800ad22:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 800ad26:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
 800ad2a:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 800ad2e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800ad32:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 800ad36:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 800ad3a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ad3e:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 800ad42:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800ad46:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 800ad4a:	f240 71e5 	movw	r1, #2021	; 0x7e5
 800ad4e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 800ad52:	f240 70e6 	movw	r0, #2022	; 0x7e6
 800ad56:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800ad5a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 800ad5e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800ad62:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800ad66:	f240 73e7 	movw	r3, #2023	; 0x7e7
 800ad6a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 800ad6e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ad72:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 800ad76:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800ad7a:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 800ad7e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 800ad82:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 800ad86:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 800ad8a:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800ad8e:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 800ad92:	f44f 637b 	mov.w	r3, #4016	; 0xfb0
 800ad96:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 800ad9a:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 800ad9e:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
			1013, 2013, 2012, 8000, 1011, 2011, 4000, 1012, 2012, 2013, 8000, 1015, 2015, 2013, 1012, 1000,
			1013, 2013, 2015, 8000, 1015, 2015, 4000,
			1021, 2021, 2022, 8000, 1023, 2023, 2000,
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ada8:	e00c      	b.n	800adc4 <StartbuzzerrythmTask+0x134>
	{
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
		{
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
			{
				i=i==SONGLENGTH-1?0:i+1;
 800adaa:	2300      	movs	r3, #0
 800adac:	f8ad 3006 	strh.w	r3, [sp, #6]
			}
			xSemaphoreGive(buzzerMutexHandle);
 800adb0:	2300      	movs	r3, #0
 800adb2:	461a      	mov	r2, r3
 800adb4:	4619      	mov	r1, r3
 800adb6:	4814      	ldr	r0, [pc, #80]	; (800ae08 <StartbuzzerrythmTask+0x178>)
 800adb8:	6800      	ldr	r0, [r0, #0]
 800adba:	f006 f8e5 	bl	8010f88 <xQueueGenericSend>
		}
		osDelay(10);
 800adbe:	200a      	movs	r0, #10
 800adc0:	f005 fcc4 	bl	801074c <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 800adc4:	2300      	movs	r3, #0
 800adc6:	461a      	mov	r2, r3
 800adc8:	4619      	mov	r1, r3
 800adca:	480f      	ldr	r0, [pc, #60]	; (800ae08 <StartbuzzerrythmTask+0x178>)
 800adcc:	6800      	ldr	r0, [r0, #0]
 800adce:	f006 fa35 	bl	801123c <xQueueGenericReceive>
 800add2:	2801      	cmp	r0, #1
 800add4:	d1f3      	bne.n	800adbe <StartbuzzerrythmTask+0x12e>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 800add6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800adda:	b289      	uxth	r1, r1
 800addc:	2300      	movs	r3, #0
 800adde:	461a      	mov	r2, r3
 800ade0:	a802      	add	r0, sp, #8
 800ade2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ade6:	4809      	ldr	r0, [pc, #36]	; (800ae0c <StartbuzzerrythmTask+0x17c>)
 800ade8:	6800      	ldr	r0, [r0, #0]
 800adea:	f006 f8cd 	bl	8010f88 <xQueueGenericSend>
 800adee:	2801      	cmp	r0, #1
 800adf0:	d1de      	bne.n	800adb0 <StartbuzzerrythmTask+0x120>
				i=i==SONGLENGTH-1?0:i+1;
 800adf2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	2b31      	cmp	r3, #49	; 0x31
 800adfa:	d0d6      	beq.n	800adaa <StartbuzzerrythmTask+0x11a>
 800adfc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	3301      	adds	r3, #1
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	e7d1      	b.n	800adac <StartbuzzerrythmTask+0x11c>
 800ae08:	200079cc 	.word	0x200079cc
 800ae0c:	200079c0 	.word	0x200079c0

0800ae10 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	b090      	sub	sp, #64	; 0x40
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800ae14:	4c58      	ldr	r4, [pc, #352]	; (800af78 <StartbuzzertoneTask+0x168>)
 800ae16:	ad08      	add	r5, sp, #32
 800ae18:	4626      	mov	r6, r4
 800ae1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ae1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae1e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ae22:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 800ae26:	ad03      	add	r5, sp, #12
 800ae28:	341c      	adds	r4, #28
 800ae2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	602b      	str	r3, [r5, #0]
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 800ae32:	2300      	movs	r3, #0
 800ae34:	9302      	str	r3, [sp, #8]
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	e061      	b.n	800aefe <StartbuzzertoneTask+0xee>
			//black goes first, num decides the height of the tone..
			//if all is 0 then no sound...
			//like 512 should be black[5-1] = 466.16/4   la+
			//013 should be white[3-1] = 329.63/4    mi
			//023 should be 2 * white[3-1] = 329.63/2
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	4619      	mov	r1, r3
 800ae40:	484e      	ldr	r0, [pc, #312]	; (800af7c <StartbuzzertoneTask+0x16c>)
 800ae42:	6800      	ldr	r0, [r0, #0]
 800ae44:	f006 f9fa 	bl	801123c <xQueueGenericReceive>
			time = tonedata/1000;
 800ae48:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800ae4c:	4a4c      	ldr	r2, [pc, #304]	; (800af80 <StartbuzzertoneTask+0x170>)
 800ae4e:	fba2 3201 	umull	r3, r2, r2, r1
 800ae52:	0992      	lsrs	r2, r2, #6
 800ae54:	b293      	uxth	r3, r2
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae5e:	edcd 7a01 	vstr	s15, [sp, #4]
			black = (tonedata%1000)/100;
 800ae62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae66:	fb03 1212 	mls	r2, r3, r2, r1
 800ae6a:	b292      	uxth	r2, r2
 800ae6c:	4b45      	ldr	r3, [pc, #276]	; (800af84 <StartbuzzertoneTask+0x174>)
 800ae6e:	fba3 0402 	umull	r0, r4, r3, r2
 800ae72:	0964      	lsrs	r4, r4, #5
			num = (tonedata%100)/10;
 800ae74:	fba3 0301 	umull	r0, r3, r3, r1
 800ae78:	095b      	lsrs	r3, r3, #5
 800ae7a:	2064      	movs	r0, #100	; 0x64
 800ae7c:	fb00 1313 	mls	r3, r0, r3, r1
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	4841      	ldr	r0, [pc, #260]	; (800af88 <StartbuzzertoneTask+0x178>)
 800ae84:	fba0 5303 	umull	r5, r3, r0, r3
 800ae88:	08db      	lsrs	r3, r3, #3
			white  = tonedata%10;
 800ae8a:	fba0 5001 	umull	r5, r0, r0, r1
 800ae8e:	08c0      	lsrs	r0, r0, #3
 800ae90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ae94:	0045      	lsls	r5, r0, #1
 800ae96:	1b49      	subs	r1, r1, r5
 800ae98:	b289      	uxth	r1, r1
			if((tonedata%1000) != 0)
 800ae9a:	2a00      	cmp	r2, #0
 800ae9c:	d053      	beq.n	800af46 <StartbuzzertoneTask+0x136>
			{
				if(black)
 800ae9e:	2c00      	cmp	r4, #0
 800aea0:	d040      	beq.n	800af24 <StartbuzzertoneTask+0x114>
					tonefreq = tonetable_black[black-1] * num *2 ;
 800aea2:	3c01      	subs	r4, #1
 800aea4:	aa10      	add	r2, sp, #64	; 0x40
 800aea6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800aeaa:	ed14 7a0d 	vldr	s14, [r4, #-52]	; 0xffffffcc
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aeba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aebe:	edcd 7a02 	vstr	s15, [sp, #8]
				else
					tonefreq = tonetable_white[white-1] * num *2;
				//ring
				SetbuzzerFreq(tonefreq);
 800aec2:	4b32      	ldr	r3, [pc, #200]	; (800af8c <StartbuzzertoneTask+0x17c>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	ed9d 6a02 	vldr	s12, [sp, #8]
 800aeca:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800aece:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800af70 <StartbuzzertoneTask+0x160>
 800aed2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800aed6:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 800aeda:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 800aede:	2200      	movs	r2, #0
 800aee0:	635a      	str	r2, [r3, #52]	; 0x34
			else
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
 800aee2:	eddd 7a01 	vldr	s15, [sp, #4]
 800aee6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeee:	d132      	bne.n	800af56 <StartbuzzertoneTask+0x146>
				osDelay(500/time); //time is used to shorter the sound..
			xSemaphoreGive(buzzerMutexHandle);
 800aef0:	2300      	movs	r3, #0
 800aef2:	461a      	mov	r2, r3
 800aef4:	4619      	mov	r1, r3
 800aef6:	4821      	ldr	r0, [pc, #132]	; (800af7c <StartbuzzertoneTask+0x16c>)
 800aef8:	6800      	ldr	r0, [r0, #0]
 800aefa:	f006 f845 	bl	8010f88 <xQueueGenericSend>
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 800aefe:	2300      	movs	r3, #0
 800af00:	220a      	movs	r2, #10
 800af02:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
 800af06:	4822      	ldr	r0, [pc, #136]	; (800af90 <StartbuzzertoneTask+0x180>)
 800af08:	6800      	ldr	r0, [r0, #0]
 800af0a:	f006 f997 	bl	801123c <xQueueGenericReceive>
 800af0e:	2801      	cmp	r0, #1
 800af10:	d093      	beq.n	800ae3a <StartbuzzertoneTask+0x2a>
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 800af12:	4b1e      	ldr	r3, [pc, #120]	; (800af8c <StartbuzzertoneTask+0x17c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	635a      	str	r2, [r3, #52]	; 0x34
 800af1a:	635a      	str	r2, [r3, #52]	; 0x34
			osDelay(10);
 800af1c:	200a      	movs	r0, #10
 800af1e:	f005 fc15 	bl	801074c <osDelay>
 800af22:	e7ec      	b.n	800aefe <StartbuzzertoneTask+0xee>
					tonefreq = tonetable_white[white-1] * num *2;
 800af24:	3901      	subs	r1, #1
 800af26:	aa10      	add	r2, sp, #64	; 0x40
 800af28:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800af2c:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 800af30:	ee07 3a90 	vmov	s15, r3
 800af34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af38:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af40:	edcd 7a02 	vstr	s15, [sp, #8]
 800af44:	e7bd      	b.n	800aec2 <StartbuzzertoneTask+0xb2>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 800af46:	4b11      	ldr	r3, [pc, #68]	; (800af8c <StartbuzzertoneTask+0x17c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2200      	movs	r2, #0
 800af4c:	635a      	str	r2, [r3, #52]	; 0x34
 800af4e:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	9302      	str	r3, [sp, #8]
 800af54:	e7c5      	b.n	800aee2 <StartbuzzertoneTask+0xd2>
				osDelay(500/time); //time is used to shorter the sound..
 800af56:	ed9d 7a01 	vldr	s14, [sp, #4]
 800af5a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800af94 <StartbuzzertoneTask+0x184>
 800af5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af66:	ee17 0a90 	vmov	r0, s15
 800af6a:	f005 fbef 	bl	801074c <osDelay>
 800af6e:	e7bf      	b.n	800aef0 <StartbuzzertoneTask+0xe0>
 800af70:	00000000 	.word	0x00000000
 800af74:	412e8480 	.word	0x412e8480
 800af78:	08018d54 	.word	0x08018d54
 800af7c:	200079cc 	.word	0x200079cc
 800af80:	10624dd3 	.word	0x10624dd3
 800af84:	51eb851f 	.word	0x51eb851f
 800af88:	cccccccd 	.word	0xcccccccd
 800af8c:	20007b5c 	.word	0x20007b5c
 800af90:	200079c0 	.word	0x200079c0
 800af94:	43fa0000 	.word	0x43fa0000

0800af98 <SystemInitialization>:
extern DMA_HandleTypeDef hdma_uart4_rx;
//int32_t cur_u;
//int32_t cur_v;

void SystemInitialization(void)
{
 800af98:	b510      	push	{r4, lr}
	/*
	 * start tim2 for BUZZER
	 */
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800af9a:	2100      	movs	r1, #0
 800af9c:	4815      	ldr	r0, [pc, #84]	; (800aff4 <SystemInitialization+0x5c>)
 800af9e:	f004 fe19 	bl	800fbd4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 800afa2:	4815      	ldr	r0, [pc, #84]	; (800aff8 <SystemInitialization+0x60>)
 800afa4:	f004 faf0 	bl	800f588 <HAL_TIM_Base_Start>
	 * thus if we consider the driver delay and blabla...
	 * we choose the dead time to be 300ns~...
	 * lookinto the tim.c file the dead time is calculated by
	 * 1/216mhz * DeadTime,  thus we choose DeadTime to be 66~
	 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800afa8:	4c14      	ldr	r4, [pc, #80]	; (800affc <SystemInitialization+0x64>)
 800afaa:	2100      	movs	r1, #0
 800afac:	4620      	mov	r0, r4
 800afae:	f004 fe11 	bl	800fbd4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 800afb2:	2100      	movs	r1, #0
 800afb4:	4620      	mov	r0, r4
 800afb6:	f004 fe8d 	bl	800fcd4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800afba:	2104      	movs	r1, #4
 800afbc:	4620      	mov	r0, r4
 800afbe:	f004 fe09 	bl	800fbd4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 800afc2:	2104      	movs	r1, #4
 800afc4:	4620      	mov	r0, r4
 800afc6:	f004 fe85 	bl	800fcd4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800afca:	2108      	movs	r1, #8
 800afcc:	4620      	mov	r0, r4
 800afce:	f004 fe01 	bl	800fbd4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 800afd2:	2108      	movs	r1, #8
 800afd4:	4620      	mov	r0, r4
 800afd6:	f004 fe7d 	bl	800fcd4 <HAL_TIMEx_PWMN_Start>

	/*
	 * register the call back of uart4 transmit..
	 */

	HAL_UART_Receive_DMA(&huart4,enchall_buff,5);
 800afda:	2205      	movs	r2, #5
 800afdc:	4908      	ldr	r1, [pc, #32]	; (800b000 <SystemInitialization+0x68>)
 800afde:	4809      	ldr	r0, [pc, #36]	; (800b004 <SystemInitialization+0x6c>)
 800afe0:	f004 fffa 	bl	800ffd8 <HAL_UART_Receive_DMA>
//HAL_DMA_RegisterCallback(&hdma_uart4_rx,HAL_DMA_XFER_CPLT_CB_ID,UART4_DMA2_Cplt_Callback);
	/*
	 * DFSDM initial
	 */
	//polling mode
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0);
 800afe4:	4808      	ldr	r0, [pc, #32]	; (800b008 <SystemInitialization+0x70>)
 800afe6:	f002 f9e3 	bl	800d3b0 <HAL_DFSDM_FilterRegularStart>
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 800afea:	4808      	ldr	r0, [pc, #32]	; (800b00c <SystemInitialization+0x74>)
 800afec:	f002 f9e0 	bl	800d3b0 <HAL_DFSDM_FilterRegularStart>
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	bf00      	nop
 800aff4:	20007b5c 	.word	0x20007b5c
 800aff8:	20007adc 	.word	0x20007adc
 800affc:	20007b1c 	.word	0x20007b1c
 800b000:	200077d0 	.word	0x200077d0
 800b004:	20007e0c 	.word	0x20007e0c
 800b008:	200077e0 	.word	0x200077e0
 800b00c:	2000792c 	.word	0x2000792c

0800b010 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 800b010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800b014:	482d      	ldr	r0, [pc, #180]	; (800b0cc <MX_DFSDM1_Init+0xbc>)
 800b016:	4b2e      	ldr	r3, [pc, #184]	; (800b0d0 <MX_DFSDM1_Init+0xc0>)
 800b018:	6003      	str	r3, [r0, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800b01a:	2400      	movs	r4, #0
 800b01c:	6044      	str	r4, [r0, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800b01e:	2501      	movs	r5, #1
 800b020:	7205      	strb	r5, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800b022:	7245      	strb	r5, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800b024:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
 800b028:	f8c0 801c 	str.w	r8, [r0, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 800b02c:	f44f 7780 	mov.w	r7, #256	; 0x100
 800b030:	6207      	str	r7, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 800b032:	2602      	movs	r6, #2
 800b034:	6246      	str	r6, [r0, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 800b036:	f002 f8ff 	bl	800d238 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 800b03a:	4826      	ldr	r0, [pc, #152]	; (800b0d4 <MX_DFSDM1_Init+0xc4>)
 800b03c:	4b26      	ldr	r3, [pc, #152]	; (800b0d8 <MX_DFSDM1_Init+0xc8>)
 800b03e:	6003      	str	r3, [r0, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800b040:	6044      	str	r4, [r0, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800b042:	7205      	strb	r5, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 800b044:	7245      	strb	r5, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800b046:	f8c0 801c 	str.w	r8, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
 800b04a:	6207      	str	r7, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
 800b04c:	6246      	str	r6, [r0, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 800b04e:	f002 f8f3 	bl	800d238 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800b052:	4822      	ldr	r0, [pc, #136]	; (800b0dc <MX_DFSDM1_Init+0xcc>)
 800b054:	4b22      	ldr	r3, [pc, #136]	; (800b0e0 <MX_DFSDM1_Init+0xd0>)
 800b056:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 800b058:	7104      	strb	r4, [r0, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800b05a:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800b05c:	60c6      	str	r6, [r0, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800b05e:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800b060:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800b062:	6184      	str	r4, [r0, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800b064:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800b066:	6204      	str	r4, [r0, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800b068:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800b06c:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800b06e:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800b070:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800b072:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800b074:	f002 f85c 	bl	800d130 <HAL_DFSDM_ChannelInit>
 800b078:	bb10      	cbnz	r0, 800b0c0 <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 800b07a:	481a      	ldr	r0, [pc, #104]	; (800b0e4 <MX_DFSDM1_Init+0xd4>)
 800b07c:	4b1a      	ldr	r3, [pc, #104]	; (800b0e8 <MX_DFSDM1_Init+0xd8>)
 800b07e:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 800b080:	2300      	movs	r3, #0
 800b082:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800b084:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 800b086:	2202      	movs	r2, #2
 800b088:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800b08a:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800b08c:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800b08e:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800b090:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800b092:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800b094:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800b098:	6242      	str	r2, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 800b09a:	2201      	movs	r2, #1
 800b09c:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 800b09e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 800b0a0:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 800b0a2:	f002 f845 	bl	800d130 <HAL_DFSDM_ChannelInit>
 800b0a6:	b970      	cbnz	r0, 800b0c6 <MX_DFSDM1_Init+0xb6>
  {
    Error_Handler();
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	4807      	ldr	r0, [pc, #28]	; (800b0cc <MX_DFSDM1_Init+0xbc>)
 800b0ae:	f002 f957 	bl	800d360 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	490d      	ldr	r1, [pc, #52]	; (800b0ec <MX_DFSDM1_Init+0xdc>)
 800b0b6:	4807      	ldr	r0, [pc, #28]	; (800b0d4 <MX_DFSDM1_Init+0xc4>)
 800b0b8:	f002 f952 	bl	800d360 <HAL_DFSDM_FilterConfigRegChannel>
 800b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Error_Handler();
 800b0c0:	f001 fab2 	bl	800c628 <Error_Handler>
 800b0c4:	e7d9      	b.n	800b07a <MX_DFSDM1_Init+0x6a>
    Error_Handler();
 800b0c6:	f001 faaf 	bl	800c628 <Error_Handler>
 800b0ca:	e7ed      	b.n	800b0a8 <MX_DFSDM1_Init+0x98>
 800b0cc:	200077e0 	.word	0x200077e0
 800b0d0:	40017500 	.word	0x40017500
 800b0d4:	2000792c 	.word	0x2000792c
 800b0d8:	40017580 	.word	0x40017580
 800b0dc:	20007980 	.word	0x20007980
 800b0e0:	40017400 	.word	0x40017400
 800b0e4:	20007834 	.word	0x20007834
 800b0e8:	40017460 	.word	0x40017460
 800b0ec:	00030008 	.word	0x00030008

0800b0f0 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 800b0f0:	b530      	push	{r4, r5, lr}
 800b0f2:	b089      	sub	sp, #36	; 0x24
 800b0f4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9303      	str	r3, [sp, #12]
 800b0fa:	9304      	str	r3, [sp, #16]
 800b0fc:	9305      	str	r3, [sp, #20]
 800b0fe:	9306      	str	r3, [sp, #24]
 800b100:	9307      	str	r3, [sp, #28]
  if(DFSDM1_Init == 0)
 800b102:	4b4c      	ldr	r3, [pc, #304]	; (800b234 <HAL_DFSDM_FilterMspInit+0x144>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d132      	bne.n	800b170 <HAL_DFSDM_FilterMspInit+0x80>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800b10a:	4a4b      	ldr	r2, [pc, #300]	; (800b238 <HAL_DFSDM_FilterMspInit+0x148>)
 800b10c:	6813      	ldr	r3, [r2, #0]
 800b10e:	3301      	adds	r3, #1
 800b110:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800b112:	2b01      	cmp	r3, #1
 800b114:	d036      	beq.n	800b184 <HAL_DFSDM_FilterMspInit+0x94>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b116:	4b49      	ldr	r3, [pc, #292]	; (800b23c <HAL_DFSDM_FilterMspInit+0x14c>)
 800b118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b11a:	f042 0210 	orr.w	r2, r2, #16
 800b11e:	631a      	str	r2, [r3, #48]	; 0x30
 800b120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b122:	f002 0210 	and.w	r2, r2, #16
 800b126:	9201      	str	r2, [sp, #4]
 800b128:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b12a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b12c:	f042 0208 	orr.w	r2, r2, #8
 800b130:	631a      	str	r2, [r3, #48]	; 0x30
 800b132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b134:	f003 0308 	and.w	r3, r3, #8
 800b138:	9302      	str	r3, [sp, #8]
 800b13a:	9b02      	ldr	r3, [sp, #8]
    PE4     ------> DFSDM1_DATIN3
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b13c:	2330      	movs	r3, #48	; 0x30
 800b13e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b140:	2502      	movs	r5, #2
 800b142:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800b144:	230a      	movs	r3, #10
 800b146:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b148:	a903      	add	r1, sp, #12
 800b14a:	483d      	ldr	r0, [pc, #244]	; (800b240 <HAL_DFSDM_FilterMspInit+0x150>)
 800b14c:	f002 fda0 	bl	800dc90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800b150:	2318      	movs	r3, #24
 800b152:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b154:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b156:	2300      	movs	r3, #0
 800b158:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b15a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800b15c:	2306      	movs	r3, #6
 800b15e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b160:	a903      	add	r1, sp, #12
 800b162:	4838      	ldr	r0, [pc, #224]	; (800b244 <HAL_DFSDM_FilterMspInit+0x154>)
 800b164:	f002 fd94 	bl	800dc90 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800b168:	4a32      	ldr	r2, [pc, #200]	; (800b234 <HAL_DFSDM_FilterMspInit+0x144>)
 800b16a:	6813      	ldr	r3, [r2, #0]
 800b16c:	3301      	adds	r3, #1
 800b16e:	6013      	str	r3, [r2, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800b170:	6822      	ldr	r2, [r4, #0]
 800b172:	4b35      	ldr	r3, [pc, #212]	; (800b248 <HAL_DFSDM_FilterMspInit+0x158>)
 800b174:	429a      	cmp	r2, r3
 800b176:	d010      	beq.n	800b19a <HAL_DFSDM_FilterMspInit+0xaa>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 800b178:	6822      	ldr	r2, [r4, #0]
 800b17a:	4b34      	ldr	r3, [pc, #208]	; (800b24c <HAL_DFSDM_FilterMspInit+0x15c>)
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d032      	beq.n	800b1e6 <HAL_DFSDM_FilterMspInit+0xf6>
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
  }

}
 800b180:	b009      	add	sp, #36	; 0x24
 800b182:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800b184:	4b2d      	ldr	r3, [pc, #180]	; (800b23c <HAL_DFSDM_FilterMspInit+0x14c>)
 800b186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b188:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b18c:	645a      	str	r2, [r3, #68]	; 0x44
 800b18e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	9b00      	ldr	r3, [sp, #0]
 800b198:	e7bd      	b.n	800b116 <HAL_DFSDM_FilterMspInit+0x26>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800b19a:	482d      	ldr	r0, [pc, #180]	; (800b250 <HAL_DFSDM_FilterMspInit+0x160>)
 800b19c:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
 800b1a0:	3310      	adds	r3, #16
 800b1a2:	6003      	str	r3, [r0, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800b1a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1a8:	6043      	str	r3, [r0, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	6083      	str	r3, [r0, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800b1ae:	60c3      	str	r3, [r0, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800b1b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b1b4:	6102      	str	r2, [r0, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b1b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b1ba:	6142      	str	r2, [r0, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b1bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b1c0:	6182      	str	r2, [r0, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800b1c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1c6:	61c2      	str	r2, [r0, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b1c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b1cc:	6202      	str	r2, [r0, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b1ce:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800b1d0:	f002 f9be 	bl	800d550 <HAL_DMA_Init>
 800b1d4:	b920      	cbnz	r0, 800b1e0 <HAL_DFSDM_FilterMspInit+0xf0>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800b1d6:	4b1e      	ldr	r3, [pc, #120]	; (800b250 <HAL_DFSDM_FilterMspInit+0x160>)
 800b1d8:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800b1da:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1dc:	639c      	str	r4, [r3, #56]	; 0x38
 800b1de:	e7cb      	b.n	800b178 <HAL_DFSDM_FilterMspInit+0x88>
      Error_Handler();
 800b1e0:	f001 fa22 	bl	800c628 <Error_Handler>
 800b1e4:	e7f7      	b.n	800b1d6 <HAL_DFSDM_FilterMspInit+0xe6>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 800b1e6:	481b      	ldr	r0, [pc, #108]	; (800b254 <HAL_DFSDM_FilterMspInit+0x164>)
 800b1e8:	f503 436e 	add.w	r3, r3, #60928	; 0xee00
 800b1ec:	33a8      	adds	r3, #168	; 0xa8
 800b1ee:	6003      	str	r3, [r0, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 800b1f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1f4:	6043      	str	r3, [r0, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	6083      	str	r3, [r0, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b1fa:	60c3      	str	r3, [r0, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 800b1fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b200:	6102      	str	r2, [r0, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b206:	6142      	str	r2, [r0, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b208:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b20c:	6182      	str	r2, [r0, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800b20e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b212:	61c2      	str	r2, [r0, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b214:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b218:	6202      	str	r2, [r0, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b21a:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 800b21c:	f002 f998 	bl	800d550 <HAL_DMA_Init>
 800b220:	b920      	cbnz	r0, 800b22c <HAL_DFSDM_FilterMspInit+0x13c>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 800b222:	4b0c      	ldr	r3, [pc, #48]	; (800b254 <HAL_DFSDM_FilterMspInit+0x164>)
 800b224:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 800b226:	62a3      	str	r3, [r4, #40]	; 0x28
 800b228:	639c      	str	r4, [r3, #56]	; 0x38
}
 800b22a:	e7a9      	b.n	800b180 <HAL_DFSDM_FilterMspInit+0x90>
      Error_Handler();
 800b22c:	f001 f9fc 	bl	800c628 <Error_Handler>
 800b230:	e7f7      	b.n	800b222 <HAL_DFSDM_FilterMspInit+0x132>
 800b232:	bf00      	nop
 800b234:	200038f8 	.word	0x200038f8
 800b238:	200038fc 	.word	0x200038fc
 800b23c:	40023800 	.word	0x40023800
 800b240:	40021000 	.word	0x40021000
 800b244:	40020c00 	.word	0x40020c00
 800b248:	40017500 	.word	0x40017500
 800b24c:	40017580 	.word	0x40017580
 800b250:	200078cc 	.word	0x200078cc
 800b254:	2000786c 	.word	0x2000786c

0800b258 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800b258:	b510      	push	{r4, lr}
 800b25a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b25c:	2300      	movs	r3, #0
 800b25e:	9303      	str	r3, [sp, #12]
 800b260:	9304      	str	r3, [sp, #16]
 800b262:	9305      	str	r3, [sp, #20]
 800b264:	9306      	str	r3, [sp, #24]
 800b266:	9307      	str	r3, [sp, #28]
  if(DFSDM1_Init == 0)
 800b268:	4b21      	ldr	r3, [pc, #132]	; (800b2f0 <HAL_DFSDM_ChannelMspInit+0x98>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d132      	bne.n	800b2d6 <HAL_DFSDM_ChannelMspInit+0x7e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800b270:	4a20      	ldr	r2, [pc, #128]	; (800b2f4 <HAL_DFSDM_ChannelMspInit+0x9c>)
 800b272:	6813      	ldr	r3, [r2, #0]
 800b274:	3301      	adds	r3, #1
 800b276:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d02e      	beq.n	800b2da <HAL_DFSDM_ChannelMspInit+0x82>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b27c:	4b1e      	ldr	r3, [pc, #120]	; (800b2f8 <HAL_DFSDM_ChannelMspInit+0xa0>)
 800b27e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b280:	f042 0210 	orr.w	r2, r2, #16
 800b284:	631a      	str	r2, [r3, #48]	; 0x30
 800b286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b288:	f002 0210 	and.w	r2, r2, #16
 800b28c:	9201      	str	r2, [sp, #4]
 800b28e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b292:	f042 0208 	orr.w	r2, r2, #8
 800b296:	631a      	str	r2, [r3, #48]	; 0x30
 800b298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29a:	f003 0308 	and.w	r3, r3, #8
 800b29e:	9302      	str	r3, [sp, #8]
 800b2a0:	9b02      	ldr	r3, [sp, #8]
    PE4     ------> DFSDM1_DATIN3
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b2a2:	2330      	movs	r3, #48	; 0x30
 800b2a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2a6:	2402      	movs	r4, #2
 800b2a8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800b2aa:	230a      	movs	r3, #10
 800b2ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b2ae:	a903      	add	r1, sp, #12
 800b2b0:	4812      	ldr	r0, [pc, #72]	; (800b2fc <HAL_DFSDM_ChannelMspInit+0xa4>)
 800b2b2:	f002 fced 	bl	800dc90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800b2b6:	2318      	movs	r3, #24
 800b2b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ba:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2c0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800b2c2:	2306      	movs	r3, #6
 800b2c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b2c6:	a903      	add	r1, sp, #12
 800b2c8:	480d      	ldr	r0, [pc, #52]	; (800b300 <HAL_DFSDM_ChannelMspInit+0xa8>)
 800b2ca:	f002 fce1 	bl	800dc90 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800b2ce:	4a08      	ldr	r2, [pc, #32]	; (800b2f0 <HAL_DFSDM_ChannelMspInit+0x98>)
 800b2d0:	6813      	ldr	r3, [r2, #0]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	6013      	str	r3, [r2, #0]
  }
}
 800b2d6:	b008      	add	sp, #32
 800b2d8:	bd10      	pop	{r4, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800b2da:	4b07      	ldr	r3, [pc, #28]	; (800b2f8 <HAL_DFSDM_ChannelMspInit+0xa0>)
 800b2dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2de:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b2e2:	645a      	str	r2, [r3, #68]	; 0x44
 800b2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	9b00      	ldr	r3, [sp, #0]
 800b2ee:	e7c5      	b.n	800b27c <HAL_DFSDM_ChannelMspInit+0x24>
 800b2f0:	200038f8 	.word	0x200038f8
 800b2f4:	200038fc 	.word	0x200038fc
 800b2f8:	40023800 	.word	0x40023800
 800b2fc:	40021000 	.word	0x40021000
 800b300:	40020c00 	.word	0x40020c00

0800b304 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800b304:	b500      	push	{lr}
 800b306:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b308:	4b1e      	ldr	r3, [pc, #120]	; (800b384 <MX_DMA_Init+0x80>)
 800b30a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b30c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b310:	631a      	str	r2, [r3, #48]	; 0x30
 800b312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b314:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800b318:	9200      	str	r2, [sp, #0]
 800b31a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b31c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b31e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800b322:	631a      	str	r2, [r3, #48]	; 0x30
 800b324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800b32e:	2200      	movs	r2, #0
 800b330:	2105      	movs	r1, #5
 800b332:	200d      	movs	r0, #13
 800b334:	f001 fe60 	bl	800cff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800b338:	200d      	movs	r0, #13
 800b33a:	f001 fe8d 	bl	800d058 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800b33e:	2200      	movs	r2, #0
 800b340:	2105      	movs	r1, #5
 800b342:	2038      	movs	r0, #56	; 0x38
 800b344:	f001 fe58 	bl	800cff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800b348:	2038      	movs	r0, #56	; 0x38
 800b34a:	f001 fe85 	bl	800d058 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800b34e:	2200      	movs	r2, #0
 800b350:	2105      	movs	r1, #5
 800b352:	2039      	movs	r0, #57	; 0x39
 800b354:	f001 fe50 	bl	800cff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800b358:	2039      	movs	r0, #57	; 0x39
 800b35a:	f001 fe7d 	bl	800d058 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800b35e:	2200      	movs	r2, #0
 800b360:	2105      	movs	r1, #5
 800b362:	203a      	movs	r0, #58	; 0x3a
 800b364:	f001 fe48 	bl	800cff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800b368:	203a      	movs	r0, #58	; 0x3a
 800b36a:	f001 fe75 	bl	800d058 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800b36e:	2200      	movs	r2, #0
 800b370:	2105      	movs	r1, #5
 800b372:	2046      	movs	r0, #70	; 0x46
 800b374:	f001 fe40 	bl	800cff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800b378:	2046      	movs	r0, #70	; 0x46
 800b37a:	f001 fe6d 	bl	800d058 <HAL_NVIC_EnableIRQ>

}
 800b37e:	b003      	add	sp, #12
 800b380:	f85d fb04 	ldr.w	pc, [sp], #4
 800b384:	40023800 	.word	0x40023800

0800b388 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800b388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b38a:	b0af      	sub	sp, #188	; 0xbc
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of buzzerMutex */
  osMutexDef(buzzerMutex);
 800b38c:	2500      	movs	r5, #0
 800b38e:	a82e      	add	r0, sp, #184	; 0xb8
 800b390:	f840 5d04 	str.w	r5, [r0, #-4]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 800b394:	f005 f9e3 	bl	801075e <osMutexCreate>
 800b398:	4b4e      	ldr	r3, [pc, #312]	; (800b4d4 <MX_FREERTOS_Init+0x14c>)
 800b39a:	6018      	str	r0, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of enchallTask */
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 1280);
 800b39c:	4c4e      	ldr	r4, [pc, #312]	; (800b4d8 <MX_FREERTOS_Init+0x150>)
 800b39e:	ae28      	add	r6, sp, #160	; 0xa0
 800b3a0:	4627      	mov	r7, r4
 800b3a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b3a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	6033      	str	r3, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	a828      	add	r0, sp, #160	; 0xa0
 800b3ae:	f005 f9b3 	bl	8010718 <osThreadCreate>
 800b3b2:	4b4a      	ldr	r3, [pc, #296]	; (800b4dc <MX_FREERTOS_Init+0x154>)
 800b3b4:	6018      	str	r0, [r3, #0]

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 800b3b6:	ae23      	add	r6, sp, #140	; 0x8c
 800b3b8:	f104 0714 	add.w	r7, r4, #20
 800b3bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b3be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	6033      	str	r3, [r6, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	a823      	add	r0, sp, #140	; 0x8c
 800b3c8:	f005 f9a6 	bl	8010718 <osThreadCreate>
 800b3cc:	4b44      	ldr	r3, [pc, #272]	; (800b4e0 <MX_FREERTOS_Init+0x158>)
 800b3ce:	6018      	str	r0, [r3, #0]

  /* definition and creation of ledblueTask */
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 800b3d0:	ae1e      	add	r6, sp, #120	; 0x78
 800b3d2:	f104 0728 	add.w	r7, r4, #40	; 0x28
 800b3d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b3d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	6033      	str	r3, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 800b3de:	4629      	mov	r1, r5
 800b3e0:	a81e      	add	r0, sp, #120	; 0x78
 800b3e2:	f005 f999 	bl	8010718 <osThreadCreate>
 800b3e6:	4b3f      	ldr	r3, [pc, #252]	; (800b4e4 <MX_FREERTOS_Init+0x15c>)
 800b3e8:	6018      	str	r0, [r3, #0]

  /* definition and creation of ledgreenTask */
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 800b3ea:	ae19      	add	r6, sp, #100	; 0x64
 800b3ec:	f104 073c 	add.w	r7, r4, #60	; 0x3c
 800b3f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b3f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	6033      	str	r3, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	a819      	add	r0, sp, #100	; 0x64
 800b3fc:	f005 f98c 	bl	8010718 <osThreadCreate>
 800b400:	4b39      	ldr	r3, [pc, #228]	; (800b4e8 <MX_FREERTOS_Init+0x160>)
 800b402:	6018      	str	r0, [r3, #0]

  /* definition and creation of iwdgTask */
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 800b404:	ae14      	add	r6, sp, #80	; 0x50
 800b406:	f104 0750 	add.w	r7, r4, #80	; 0x50
 800b40a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b40c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	6033      	str	r3, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 800b412:	4629      	mov	r1, r5
 800b414:	a814      	add	r0, sp, #80	; 0x50
 800b416:	f005 f97f 	bl	8010718 <osThreadCreate>
 800b41a:	4b34      	ldr	r3, [pc, #208]	; (800b4ec <MX_FREERTOS_Init+0x164>)
 800b41c:	6018      	str	r0, [r3, #0]

  /* definition and creation of buzzertoneTask */
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 800b41e:	ae0f      	add	r6, sp, #60	; 0x3c
 800b420:	f104 0764 	add.w	r7, r4, #100	; 0x64
 800b424:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b426:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	6033      	str	r3, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 800b42c:	4629      	mov	r1, r5
 800b42e:	a80f      	add	r0, sp, #60	; 0x3c
 800b430:	f005 f972 	bl	8010718 <osThreadCreate>
 800b434:	4b2e      	ldr	r3, [pc, #184]	; (800b4f0 <MX_FREERTOS_Init+0x168>)
 800b436:	6018      	str	r0, [r3, #0]

  /* definition and creation of buzzerrythmTask */
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 800b438:	ae0a      	add	r6, sp, #40	; 0x28
 800b43a:	f104 0778 	add.w	r7, r4, #120	; 0x78
 800b43e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b440:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	6033      	str	r3, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 800b446:	4629      	mov	r1, r5
 800b448:	a80a      	add	r0, sp, #40	; 0x28
 800b44a:	f005 f965 	bl	8010718 <osThreadCreate>
 800b44e:	4b29      	ldr	r3, [pc, #164]	; (800b4f4 <MX_FREERTOS_Init+0x16c>)
 800b450:	6018      	str	r0, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of buzzerQueue */
  osMessageQDef(buzzerQueue, 1, uint16_t);
 800b452:	ab08      	add	r3, sp, #32
 800b454:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 800b458:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b45c:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 800b460:	4629      	mov	r1, r5
 800b462:	4618      	mov	r0, r3
 800b464:	f005 f980 	bl	8010768 <osMessageCreate>
 800b468:	4b23      	ldr	r3, [pc, #140]	; (800b4f8 <MX_FREERTOS_Init+0x170>)
 800b46a:	6018      	str	r0, [r3, #0]

  /* definition and creation of rythmQueue */
  osMessageQDef(rythmQueue, 32, uint16_t);
 800b46c:	ab06      	add	r3, sp, #24
 800b46e:	f104 0294 	add.w	r2, r4, #148	; 0x94
 800b472:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b476:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 800b47a:	4629      	mov	r1, r5
 800b47c:	4618      	mov	r0, r3
 800b47e:	f005 f973 	bl	8010768 <osMessageCreate>
 800b482:	4b1e      	ldr	r3, [pc, #120]	; (800b4fc <MX_FREERTOS_Init+0x174>)
 800b484:	6018      	str	r0, [r3, #0]

  /* definition and creation of enchallQueue */
  osMessageQDef(enchallQueue, 1, ENCHD);
 800b486:	ab04      	add	r3, sp, #16
 800b488:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 800b48c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b490:	e883 0003 	stmia.w	r3, {r0, r1}
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 800b494:	4629      	mov	r1, r5
 800b496:	4618      	mov	r0, r3
 800b498:	f005 f966 	bl	8010768 <osMessageCreate>
 800b49c:	4b18      	ldr	r3, [pc, #96]	; (800b500 <MX_FREERTOS_Init+0x178>)
 800b49e:	6018      	str	r0, [r3, #0]

  /* definition and creation of shuntQueue */
  osMessageQDef(shuntQueue, 1, CURDATA);
 800b4a0:	ab02      	add	r3, sp, #8
 800b4a2:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 800b4a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4aa:	e883 0003 	stmia.w	r3, {r0, r1}
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f005 f959 	bl	8010768 <osMessageCreate>
 800b4b6:	4b13      	ldr	r3, [pc, #76]	; (800b504 <MX_FREERTOS_Init+0x17c>)
 800b4b8:	6018      	str	r0, [r3, #0]

  /* definition and creation of conresQueue */
  osMessageQDef(conresQueue, 1, CONRES);
 800b4ba:	34ac      	adds	r4, #172	; 0xac
 800b4bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b4c0:	e88d 0003 	stmia.w	sp, {r0, r1}
  conresQueueHandle = osMessageCreate(osMessageQ(conresQueue), NULL);
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	4668      	mov	r0, sp
 800b4c8:	f005 f94e 	bl	8010768 <osMessageCreate>
 800b4cc:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <MX_FREERTOS_Init+0x180>)
 800b4ce:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  /* USER CODE END RTOS_QUEUES */
}
 800b4d0:	b02f      	add	sp, #188	; 0xbc
 800b4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4d4:	200079cc 	.word	0x200079cc
 800b4d8:	08018d84 	.word	0x08018d84
 800b4dc:	200079c8 	.word	0x200079c8
 800b4e0:	200079d4 	.word	0x200079d4
 800b4e4:	200079dc 	.word	0x200079dc
 800b4e8:	200079d8 	.word	0x200079d8
 800b4ec:	200079e4 	.word	0x200079e4
 800b4f0:	200079bc 	.word	0x200079bc
 800b4f4:	200079e8 	.word	0x200079e8
 800b4f8:	200079c0 	.word	0x200079c0
 800b4fc:	200079c4 	.word	0x200079c4
 800b500:	200079d0 	.word	0x200079d0
 800b504:	200079e0 	.word	0x200079e0
 800b508:	200079b8 	.word	0x200079b8

0800b50c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800b50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b510:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b512:	2400      	movs	r4, #0
 800b514:	9407      	str	r4, [sp, #28]
 800b516:	9408      	str	r4, [sp, #32]
 800b518:	9409      	str	r4, [sp, #36]	; 0x24
 800b51a:	940a      	str	r4, [sp, #40]	; 0x28
 800b51c:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b51e:	4b52      	ldr	r3, [pc, #328]	; (800b668 <MX_GPIO_Init+0x15c>)
 800b520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b522:	f042 0210 	orr.w	r2, r2, #16
 800b526:	631a      	str	r2, [r3, #48]	; 0x30
 800b528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b52a:	f002 0210 	and.w	r2, r2, #16
 800b52e:	9201      	str	r2, [sp, #4]
 800b530:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b534:	f042 0204 	orr.w	r2, r2, #4
 800b538:	631a      	str	r2, [r3, #48]	; 0x30
 800b53a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b53c:	f002 0204 	and.w	r2, r2, #4
 800b540:	9202      	str	r2, [sp, #8]
 800b542:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b54a:	631a      	str	r2, [r3, #48]	; 0x30
 800b54c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b54e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b552:	9203      	str	r2, [sp, #12]
 800b554:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b558:	f042 0201 	orr.w	r2, r2, #1
 800b55c:	631a      	str	r2, [r3, #48]	; 0x30
 800b55e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b560:	f002 0201 	and.w	r2, r2, #1
 800b564:	9204      	str	r2, [sp, #16]
 800b566:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b56a:	f042 0202 	orr.w	r2, r2, #2
 800b56e:	631a      	str	r2, [r3, #48]	; 0x30
 800b570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b572:	f002 0202 	and.w	r2, r2, #2
 800b576:	9205      	str	r2, [sp, #20]
 800b578:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b57a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b57c:	f042 0208 	orr.w	r2, r2, #8
 800b580:	631a      	str	r2, [r3, #48]	; 0x30
 800b582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b584:	f003 0308 	and.w	r3, r3, #8
 800b588:	9306      	str	r3, [sp, #24]
 800b58a:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 800b58c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800b67c <MX_GPIO_Init+0x170>
 800b590:	4622      	mov	r2, r4
 800b592:	210c      	movs	r1, #12
 800b594:	4640      	mov	r0, r8
 800b596:	f002 fc69 	bl	800de6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800b59a:	4e34      	ldr	r6, [pc, #208]	; (800b66c <MX_GPIO_Init+0x160>)
 800b59c:	4622      	mov	r2, r4
 800b59e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f002 fc62 	bl	800de6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 800b5a8:	4f31      	ldr	r7, [pc, #196]	; (800b670 <MX_GPIO_Init+0x164>)
 800b5aa:	4622      	mov	r2, r4
 800b5ac:	2140      	movs	r1, #64	; 0x40
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	f002 fc5c 	bl	800de6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 800b5b4:	230c      	movs	r3, #12
 800b5b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800b5b8:	2311      	movs	r3, #17
 800b5ba:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5bc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5be:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b5c0:	a907      	add	r1, sp, #28
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	f002 fb64 	bl	800dc90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE14 
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_14 
 800b5c8:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
 800b5cc:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5ce:	2503      	movs	r5, #3
 800b5d0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5d2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b5d4:	a907      	add	r1, sp, #28
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	f002 fb5a 	bl	800dc90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 800b5dc:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 800b5e0:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5e2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5e4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b5e6:	a907      	add	r1, sp, #28
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	f002 fb51 	bl	800dc90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 
                           PA6 PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800b5ee:	f641 137c 	movw	r3, #6524	; 0x197c
 800b5f2:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5f4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5f6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5f8:	a907      	add	r1, sp, #28
 800b5fa:	481e      	ldr	r0, [pc, #120]	; (800b674 <MX_GPIO_Init+0x168>)
 800b5fc:	f002 fb48 	bl	800dc90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB5 PB7 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800b600:	f64f 73a7 	movw	r3, #65447	; 0xffa7
 800b604:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b606:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b608:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b60a:	a907      	add	r1, sp, #28
 800b60c:	4638      	mov	r0, r7
 800b60e:	f002 fb3f 	bl	800dc90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15 
                           PD0 PD1 PD2 PD5 
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15 
 800b612:	f64c 4367 	movw	r3, #52327	; 0xcc67
 800b616:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b618:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b61a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b61c:	a907      	add	r1, sp, #28
 800b61e:	4816      	ldr	r0, [pc, #88]	; (800b678 <MX_GPIO_Init+0x16c>)
 800b620:	f002 fb36 	bl	800dc90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b628:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b62a:	2501      	movs	r5, #1
 800b62c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b62e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b630:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b632:	a907      	add	r1, sp, #28
 800b634:	4630      	mov	r0, r6
 800b636:	f002 fb2b 	bl	800dc90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800b63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b63e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b640:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b642:	2302      	movs	r3, #2
 800b644:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b646:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b648:	a907      	add	r1, sp, #28
 800b64a:	4630      	mov	r0, r6
 800b64c:	f002 fb20 	bl	800dc90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 800b650:	2340      	movs	r3, #64	; 0x40
 800b652:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b654:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b656:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b658:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 800b65a:	a907      	add	r1, sp, #28
 800b65c:	4638      	mov	r0, r7
 800b65e:	f002 fb17 	bl	800dc90 <HAL_GPIO_Init>

}
 800b662:	b00c      	add	sp, #48	; 0x30
 800b664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b668:	40023800 	.word	0x40023800
 800b66c:	40020800 	.word	0x40020800
 800b670:	40020400 	.word	0x40020400
 800b674:	40020000 	.word	0x40020000
 800b678:	40020c00 	.word	0x40020c00
 800b67c:	40021000 	.word	0x40021000

0800b680 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 800b680:	b508      	push	{r3, lr}

  hi2c4.Instance = I2C4;
 800b682:	4812      	ldr	r0, [pc, #72]	; (800b6cc <MX_I2C4_Init+0x4c>)
 800b684:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <MX_I2C4_Init+0x50>)
 800b686:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x20404768;
 800b688:	4b12      	ldr	r3, [pc, #72]	; (800b6d4 <MX_I2C4_Init+0x54>)
 800b68a:	6043      	str	r3, [r0, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800b68c:	2300      	movs	r3, #0
 800b68e:	6083      	str	r3, [r0, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b690:	2201      	movs	r2, #1
 800b692:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b694:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800b696:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b698:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b69a:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b69c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800b69e:	f002 fbef 	bl	800de80 <HAL_I2C_Init>
 800b6a2:	b950      	cbnz	r0, 800b6ba <MX_I2C4_Init+0x3a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4809      	ldr	r0, [pc, #36]	; (800b6cc <MX_I2C4_Init+0x4c>)
 800b6a8:	f002 fc48 	bl	800df3c <HAL_I2CEx_ConfigAnalogFilter>
 800b6ac:	b940      	cbnz	r0, 800b6c0 <MX_I2C4_Init+0x40>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	4806      	ldr	r0, [pc, #24]	; (800b6cc <MX_I2C4_Init+0x4c>)
 800b6b2:	f002 fc71 	bl	800df98 <HAL_I2CEx_ConfigDigitalFilter>
 800b6b6:	b930      	cbnz	r0, 800b6c6 <MX_I2C4_Init+0x46>
 800b6b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b6ba:	f000 ffb5 	bl	800c628 <Error_Handler>
 800b6be:	e7f1      	b.n	800b6a4 <MX_I2C4_Init+0x24>
    Error_Handler();
 800b6c0:	f000 ffb2 	bl	800c628 <Error_Handler>
 800b6c4:	e7f3      	b.n	800b6ae <MX_I2C4_Init+0x2e>
  {
    Error_Handler();
 800b6c6:	f000 ffaf 	bl	800c628 <Error_Handler>
  }

}
 800b6ca:	e7f5      	b.n	800b6b8 <MX_I2C4_Init+0x38>
 800b6cc:	200079ec 	.word	0x200079ec
 800b6d0:	40006000 	.word	0x40006000
 800b6d4:	20404768 	.word	0x20404768

0800b6d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6dc:	2300      	movs	r3, #0
 800b6de:	9303      	str	r3, [sp, #12]
 800b6e0:	9304      	str	r3, [sp, #16]
 800b6e2:	9305      	str	r3, [sp, #20]
 800b6e4:	9306      	str	r3, [sp, #24]
 800b6e6:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C4)
 800b6e8:	6802      	ldr	r2, [r0, #0]
 800b6ea:	4b14      	ldr	r3, [pc, #80]	; (800b73c <HAL_I2C_MspInit+0x64>)
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d001      	beq.n	800b6f4 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800b6f0:	b008      	add	sp, #32
 800b6f2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b6f4:	4c12      	ldr	r4, [pc, #72]	; (800b740 <HAL_I2C_MspInit+0x68>)
 800b6f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b6f8:	f043 0308 	orr.w	r3, r3, #8
 800b6fc:	6323      	str	r3, [r4, #48]	; 0x30
 800b6fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b700:	f003 0308 	and.w	r3, r3, #8
 800b704:	9301      	str	r3, [sp, #4]
 800b706:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800b708:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b70c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b70e:	2312      	movs	r3, #18
 800b710:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b712:	2301      	movs	r3, #1
 800b714:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b716:	2303      	movs	r3, #3
 800b718:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800b71a:	2304      	movs	r3, #4
 800b71c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b71e:	a903      	add	r1, sp, #12
 800b720:	4808      	ldr	r0, [pc, #32]	; (800b744 <HAL_I2C_MspInit+0x6c>)
 800b722:	f002 fab5 	bl	800dc90 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800b726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b72c:	6423      	str	r3, [r4, #64]	; 0x40
 800b72e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b734:	9302      	str	r3, [sp, #8]
 800b736:	9b02      	ldr	r3, [sp, #8]
}
 800b738:	e7da      	b.n	800b6f0 <HAL_I2C_MspInit+0x18>
 800b73a:	bf00      	nop
 800b73c:	40006000 	.word	0x40006000
 800b740:	40023800 	.word	0x40023800
 800b744:	40020c00 	.word	0x40020c00

0800b748 <_ZNK8std_msgs5UInt89serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800b748:	7903      	ldrb	r3, [r0, #4]
 800b74a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 800b74c:	2001      	movs	r0, #1
 800b74e:	4770      	bx	lr

0800b750 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800b750:	780b      	ldrb	r3, [r1, #0]
 800b752:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 800b754:	2001      	movs	r0, #1
 800b756:	4770      	bx	lr

0800b758 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 800b758:	4800      	ldr	r0, [pc, #0]	; (800b75c <_ZN8std_msgs5UInt87getTypeEv+0x4>)
 800b75a:	4770      	bx	lr
 800b75c:	08019c78 	.word	0x08019c78

0800b760 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 800b760:	4800      	ldr	r0, [pc, #0]	; (800b764 <_ZN8std_msgs5UInt86getMD5Ev+0x4>)
 800b762:	4770      	bx	lr
 800b764:	08019c54 	.word	0x08019c54

0800b768 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E>:
	}
}

void IMU::imuConfigCallback(const std_msgs::UInt8& config_msg)
{
	switch(config_msg.data)
 800b768:	790b      	ldrb	r3, [r1, #4]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d011      	beq.n	800b792 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x2a>
 800b76e:	b113      	cbz	r3, 800b776 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xe>
 800b770:	2b02      	cmp	r3, #2
 800b772:	d015      	beq.n	800b7a0 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x38>
 800b774:	4770      	bx	lr
    }

    // zero the vector
    void zero()
    {
        x = y = z = 0;
 800b776:	2300      	movs	r3, #0
 800b778:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 800b77c:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 800b780:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 800b784:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 800b788:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 800b78c:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
 800b790:	4770      	bx	lr
		acc_offset_.zero();
		mag_offset_.zero();
		//writeCalibData(); //no need?
		break;
	case MPU_ACC_GYRO_CALIB_CMD:
		calibrate_gyro_ = CALIBRATING_STEP;
 800b792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b796:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
		calibrate_acc_ = CALIBRATING_STEP;
 800b79a:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
		break;
 800b79e:	4770      	bx	lr
	case MPU_MAG_CALIB_CMD:
		calibrate_mag_ = CALIBRATING_MAG_STEP;
 800b7a0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800b7a4:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
 800b7a8:	4770      	bx	lr

0800b7aa <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE8callbackEPh>:
    virtual void callback(unsigned char* data){
 800b7aa:	b510      	push	{r4, lr}
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800b7ac:	780b      	ldrb	r3, [r1, #0]
 800b7ae:	7403      	strb	r3, [r0, #16]
      this->fun_obj_(obj_, msg);
 800b7b0:	6942      	ldr	r2, [r0, #20]
 800b7b2:	f100 010c 	add.w	r1, r0, #12
      { return (__p->*_M_f)(__x); }
 800b7b6:	69c3      	ldr	r3, [r0, #28]
 800b7b8:	f013 0f01 	tst.w	r3, #1
 800b7bc:	d007      	beq.n	800b7ce <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE8callbackEPh+0x24>
 800b7be:	105c      	asrs	r4, r3, #1
 800b7c0:	5914      	ldr	r4, [r2, r4]
 800b7c2:	6980      	ldr	r0, [r0, #24]
 800b7c4:	5824      	ldr	r4, [r4, r0]
 800b7c6:	eb02 0063 	add.w	r0, r2, r3, asr #1
 800b7ca:	47a0      	blx	r4
 800b7cc:	bd10      	pop	{r4, pc}
 800b7ce:	6984      	ldr	r4, [r0, #24]
 800b7d0:	e7f9      	b.n	800b7c6 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE8callbackEPh+0x1c>

0800b7d2 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE15getEndpointTypeEv>:
    virtual int getEndpointType(){ return endpoint_; }
 800b7d2:	6a00      	ldr	r0, [r0, #32]
 800b7d4:	4770      	bx	lr
	...

0800b7d8 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv>:
    virtual const char * getMsgType(){ return this->msg.getType(); }
 800b7d8:	4800      	ldr	r0, [pc, #0]	; (800b7dc <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv+0x4>)
 800b7da:	4770      	bx	lr
 800b7dc:	08019c78 	.word	0x08019c78

0800b7e0 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev>:
    virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800b7e0:	4800      	ldr	r0, [pc, #0]	; (800b7e4 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev+0x4>)
 800b7e2:	4770      	bx	lr
 800b7e4:	08019c54 	.word	0x08019c54

0800b7e8 <_ZN3IMU13getCalibratedEv>:
	if(!calibrate_acc_ && !calibrate_gyro_ && !calibrate_mag_) return true;
 800b7e8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 800b7ec:	b93b      	cbnz	r3, 800b7fe <_ZN3IMU13getCalibratedEv+0x16>
 800b7ee:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800b7f2:	b933      	cbnz	r3, 800b802 <_ZN3IMU13getCalibratedEv+0x1a>
 800b7f4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 800b7f8:	b12b      	cbz	r3, 800b806 <_ZN3IMU13getCalibratedEv+0x1e>
	else return false;
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	4770      	bx	lr
 800b7fe:	2000      	movs	r0, #0
 800b800:	4770      	bx	lr
 800b802:	2000      	movs	r0, #0
 800b804:	4770      	bx	lr
	if(!calibrate_acc_ && !calibrate_gyro_ && !calibrate_mag_) return true;
 800b806:	2001      	movs	r0, #1
}
 800b808:	4770      	bx	lr
	...

0800b80c <_ZN3IMU13readCalibDataEv>:
{
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4604      	mov	r4, r0
	status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b810:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b814:	f002 f924 	bl	800da60 <FLASH_WaitForLastOperation>
	if(status == HAL_OK)
 800b818:	b9d0      	cbnz	r0, 800b850 <_ZN3IMU13readCalibDataEv+0x44>
 800b81a:	2200      	movs	r2, #0
		for(int i = 0; i < 3; i++)
 800b81c:	2a02      	cmp	r2, #2
 800b81e:	dc12      	bgt.n	800b846 <_ZN3IMU13readCalibDataEv+0x3a>
        T *_v = &x;
 800b820:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
        return _v[i];
 800b824:	b2d1      	uxtb	r1, r2
 800b826:	0089      	lsls	r1, r1, #2
 800b828:	440b      	add	r3, r1
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 800b82a:	0095      	lsls	r5, r2, #2
 800b82c:	4809      	ldr	r0, [pc, #36]	; (800b854 <_ZN3IMU13readCalibDataEv+0x48>)
 800b82e:	4428      	add	r0, r5
 800b830:	6800      	ldr	r0, [r0, #0]
 800b832:	6018      	str	r0, [r3, #0]
        T *_v = &x;
 800b834:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
        return _v[i];
 800b838:	4419      	add	r1, r3
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 800b83a:	4b07      	ldr	r3, [pc, #28]	; (800b858 <_ZN3IMU13readCalibDataEv+0x4c>)
 800b83c:	442b      	add	r3, r5
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	600b      	str	r3, [r1, #0]
		for(int i = 0; i < 3; i++)
 800b842:	3201      	adds	r2, #1
 800b844:	e7ea      	b.n	800b81c <_ZN3IMU13readCalibDataEv+0x10>
		FLASH->CR &= (~FLASH_CR_PG);
 800b846:	4a05      	ldr	r2, [pc, #20]	; (800b85c <_ZN3IMU13readCalibDataEv+0x50>)
 800b848:	6913      	ldr	r3, [r2, #16]
 800b84a:	f023 0301 	bic.w	r3, r3, #1
 800b84e:	6113      	str	r3, [r2, #16]
 800b850:	bd38      	pop	{r3, r4, r5, pc}
 800b852:	bf00      	nop
 800b854:	08040000 	.word	0x08040000
 800b858:	0804000c 	.word	0x0804000c
 800b85c:	40023c00 	.word	0x40023c00

0800b860 <_ZN3IMU14writeCalibDataEv>:
{
 800b860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b862:	b087      	sub	sp, #28
 800b864:	4606      	mov	r6, r0
	r = HAL_FLASH_Unlock();
 800b866:	f002 f8d9 	bl	800da1c <HAL_FLASH_Unlock>
	if( r != HAL_OK ) return;
 800b86a:	b108      	cbz	r0, 800b870 <_ZN3IMU14writeCalibDataEv+0x10>
}
 800b86c:	b007      	add	sp, #28
 800b86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t SectorError = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	9300      	str	r3, [sp, #0]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800b874:	9301      	str	r3, [sp, #4]
	EraseInitStruct.Sector = CALIB_DATA_SECTOR ;
 800b876:	2305      	movs	r3, #5
 800b878:	9303      	str	r3, [sp, #12]
	EraseInitStruct.NbSectors = 1;
 800b87a:	2301      	movs	r3, #1
 800b87c:	9304      	str	r3, [sp, #16]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800b87e:	2302      	movs	r3, #2
 800b880:	9305      	str	r3, [sp, #20]
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800b882:	4669      	mov	r1, sp
 800b884:	a801      	add	r0, sp, #4
 800b886:	f002 f9b7 	bl	800dbf8 <HAL_FLASHEx_Erase>
	if ( r != HAL_OK )
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d1ee      	bne.n	800b86c <_ZN3IMU14writeCalibDataEv+0xc>
 800b88e:	2400      	movs	r4, #0
	for(int i = 0; i < 3; i++)
 800b890:	2c02      	cmp	r4, #2
 800b892:	dc18      	bgt.n	800b8c6 <_ZN3IMU14writeCalibDataEv+0x66>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i, (*(__IO uint64_t*)(&acc_offset_[i])));
 800b894:	00a7      	lsls	r7, r4, #2
        T *_v = &x;
 800b896:	f106 03d0 	add.w	r3, r6, #208	; 0xd0
        return _v[i];
 800b89a:	b2e5      	uxtb	r5, r4
 800b89c:	00ad      	lsls	r5, r5, #2
 800b89e:	442b      	add	r3, r5
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	4909      	ldr	r1, [pc, #36]	; (800b8cc <_ZN3IMU14writeCalibDataEv+0x6c>)
 800b8a6:	4439      	add	r1, r7
 800b8a8:	2002      	movs	r0, #2
 800b8aa:	f002 f90d 	bl	800dac8 <HAL_FLASH_Program>
        T *_v = &x;
 800b8ae:	f106 03e8 	add.w	r3, r6, #232	; 0xe8
        return _v[i];
 800b8b2:	441d      	add	r5, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i, (*(__IO uint64_t*)(&mag_offset_[i])));
 800b8b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8b8:	4905      	ldr	r1, [pc, #20]	; (800b8d0 <_ZN3IMU14writeCalibDataEv+0x70>)
 800b8ba:	4439      	add	r1, r7
 800b8bc:	2002      	movs	r0, #2
 800b8be:	f002 f903 	bl	800dac8 <HAL_FLASH_Program>
	for(int i = 0; i < 3; i++)
 800b8c2:	3401      	adds	r4, #1
 800b8c4:	e7e4      	b.n	800b890 <_ZN3IMU14writeCalibDataEv+0x30>
	r = HAL_FLASH_Lock();
 800b8c6:	f002 f8c1 	bl	800da4c <HAL_FLASH_Lock>
 800b8ca:	e7cf      	b.n	800b86c <_ZN3IMU14writeCalibDataEv+0xc>
 800b8cc:	08040000 	.word	0x08040000
 800b8d0:	0804000c 	.word	0x0804000c

0800b8d4 <_ZN3IMU8mpuWriteEhh>:
{
 800b8d4:	b530      	push	{r4, r5, lr}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	4605      	mov	r5, r0
 800b8da:	f88d 1007 	strb.w	r1, [sp, #7]
 800b8de:	f88d 2006 	strb.w	r2, [sp, #6]
	IMU_SPI_CS_L;
 800b8e2:	4c0e      	ldr	r4, [pc, #56]	; (800b91c <_ZN3IMU8mpuWriteEhh+0x48>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2140      	movs	r1, #64	; 0x40
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f002 fabf 	bl	800de6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, &address, 1, 1000);
 800b8ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f10d 0107 	add.w	r1, sp, #7
 800b8f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800b8fa:	f003 fb4c 	bl	800ef96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi_, &value, 1, 1000);
 800b8fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b902:	2201      	movs	r2, #1
 800b904:	f10d 0106 	add.w	r1, sp, #6
 800b908:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800b90a:	f003 fb44 	bl	800ef96 <HAL_SPI_Transmit>
	IMU_SPI_CS_H;
 800b90e:	2201      	movs	r2, #1
 800b910:	2140      	movs	r1, #64	; 0x40
 800b912:	4620      	mov	r0, r4
 800b914:	f002 faaa 	bl	800de6c <HAL_GPIO_WritePin>
}
 800b918:	b003      	add	sp, #12
 800b91a:	bd30      	pop	{r4, r5, pc}
 800b91c:	40020400 	.word	0x40020400

0800b920 <_ZN3IMU8gyroInitEv>:
{
 800b920:	b510      	push	{r4, lr}
 800b922:	4604      	mov	r4, r0
	HAL_Delay(100);
 800b924:	2064      	movs	r0, #100	; 0x64
 800b926:	f001 fb41 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x6B, 0x80);             //PWR_MGMT_1    -- DEVICE_RESET 1
 800b92a:	2280      	movs	r2, #128	; 0x80
 800b92c:	216b      	movs	r1, #107	; 0x6b
 800b92e:	4620      	mov	r0, r4
 800b930:	f7ff ffd0 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800b934:	200a      	movs	r0, #10
 800b936:	f001 fb39 	bl	800cfac <HAL_Delay>
	HAL_Delay(1); //very important!, some duration for process the setting
 800b93a:	2001      	movs	r0, #1
 800b93c:	f001 fb36 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x6A, 0x10);             //disable i2c communication
 800b940:	2210      	movs	r2, #16
 800b942:	216a      	movs	r1, #106	; 0x6a
 800b944:	4620      	mov	r0, r4
 800b946:	f7ff ffc5 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 800b94a:	2001      	movs	r0, #1
 800b94c:	f001 fb2e 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x1A, GYRO_DLPF_CFG); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 800b950:	2201      	movs	r2, #1
 800b952:	211a      	movs	r1, #26
 800b954:	4620      	mov	r0, r4
 800b956:	f7ff ffbd 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 800b95a:	2001      	movs	r0, #1
 800b95c:	f001 fb26 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x1B, 0x18);             //GYRO_CONFIG   -- FS_SEL = 3: Full scale set to 2000 deg/sec
 800b960:	2218      	movs	r2, #24
 800b962:	211b      	movs	r1, #27
 800b964:	4620      	mov	r0, r4
 800b966:	f7ff ffb5 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10); //very importnat! between gyro and acc
 800b96a:	200a      	movs	r0, #10
 800b96c:	f001 fb1e 	bl	800cfac <HAL_Delay>
	calibrate_gyro_ = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
        x = y = z = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 800b97c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 800b980:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 800b984:	bd10      	pop	{r4, pc}

0800b986 <_ZN3IMU7accInitEv>:
void IMU::accInit (void) {
 800b986:	b510      	push	{r4, lr}
 800b988:	4604      	mov	r4, r0
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 800b98a:	2210      	movs	r2, #16
 800b98c:	211c      	movs	r1, #28
 800b98e:	f7ff ffa1 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800b992:	2001      	movs	r0, #1
 800b994:	f001 fb0a 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x1D, ACC_DLPF_CFG);
 800b998:	2203      	movs	r2, #3
 800b99a:	211d      	movs	r1, #29
 800b99c:	4620      	mov	r0, r4
 800b99e:	f7ff ff99 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800b9a2:	200a      	movs	r0, #10
 800b9a4:	f001 fb02 	bl	800cfac <HAL_Delay>
	calibrate_acc_ = 0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 800b9b4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 800b9b8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 800b9bc:	bd10      	pop	{r4, pc}

0800b9be <_ZN3IMU7magInitEv>:
{
 800b9be:	b510      	push	{r4, lr}
 800b9c0:	4604      	mov	r4, r0
	HAL_Delay(10);
 800b9c2:	200a      	movs	r0, #10
 800b9c4:	f001 faf2 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x6A, 0x20); //USER_CTRL -- DMP_EN=0 ; FIFO_EN=0 ; I2C_MST_EN=1 (I2C master mode) ; I2C_IF_DIS=0 ; FIFO_RESET=0 ; I2C_MST_RESET=0 ; SIG_COND_RESET=0
 800b9c8:	2220      	movs	r2, #32
 800b9ca:	216a      	movs	r1, #106	; 0x6a
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f7ff ff81 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800b9d2:	200a      	movs	r0, #10
 800b9d4:	f001 faea 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x37, 0x00); //INT_PIN_CFG -- INT_LEVEL=0 ; INT_OPEN=0 ; LATCH_INT_EN=0 ; INT_RD_CLEAR=0 ; FSYNC_INT_LEVEL=0 ; FSYNC_INT_EN=0 ; I2C_BYPASS_EN=0 ; CLKOUT_EN=0
 800b9d8:	2200      	movs	r2, #0
 800b9da:	2137      	movs	r1, #55	; 0x37
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f7ff ff79 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800b9e2:	2001      	movs	r0, #1
 800b9e4:	f001 fae2 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x24, 0x0D); //I2C_MST_CTRL -- MULT_MST_EN=0 ; WAIT_FOR_ES=0 ; SLV_3_FIFO_EN=0 ; I2C_MST_P_NSR=0 ; I2C_MST_CLK=13 (I2C slave speed bus = 400kHz)
 800b9e8:	220d      	movs	r2, #13
 800b9ea:	2124      	movs	r1, #36	; 0x24
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f7ff ff71 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	f001 fada 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x25, MAG_ADDRESS);
 800b9f8:	220c      	movs	r2, #12
 800b9fa:	2125      	movs	r1, #37	; 0x25
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f7ff ff69 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800ba02:	2001      	movs	r0, #1
 800ba04:	f001 fad2 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x26, 0x0B);
 800ba08:	220b      	movs	r2, #11
 800ba0a:	2126      	movs	r1, #38	; 0x26
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f7ff ff61 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800ba12:	2001      	movs	r0, #1
 800ba14:	f001 faca 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x63, 0x01);
 800ba18:	2201      	movs	r2, #1
 800ba1a:	2163      	movs	r1, #99	; 0x63
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f7ff ff59 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800ba22:	2001      	movs	r0, #1
 800ba24:	f001 fac2 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 800ba28:	2281      	movs	r2, #129	; 0x81
 800ba2a:	2127      	movs	r1, #39	; 0x27
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7ff ff51 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800ba32:	2001      	movs	r0, #1
 800ba34:	f001 faba 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x26, 0x0A);
 800ba38:	220a      	movs	r2, #10
 800ba3a:	2126      	movs	r1, #38	; 0x26
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f7ff ff49 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800ba42:	2001      	movs	r0, #1
 800ba44:	f001 fab2 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x63, 0x16);
 800ba48:	2216      	movs	r2, #22
 800ba4a:	2163      	movs	r1, #99	; 0x63
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f7ff ff41 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800ba52:	2001      	movs	r0, #1
 800ba54:	f001 faaa 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 800ba58:	2281      	movs	r2, #129	; 0x81
 800ba5a:	2127      	movs	r1, #39	; 0x27
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f7ff ff39 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800ba62:	2001      	movs	r0, #1
 800ba64:	f001 faa2 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x25, 0x80|MAG_ADDRESS);//I2C_SLV0_ADDR -- I2C_SLV4_RW=1 (read operation) ; I2C_SLV4_ADDR=MAG_ADDRESS
 800ba68:	228c      	movs	r2, #140	; 0x8c
 800ba6a:	2125      	movs	r1, #37	; 0x25
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f7ff ff31 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800ba72:	2001      	movs	r0, #1
 800ba74:	f001 fa9a 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x26, MAG_DATA_REGISTER);//I2C_SLV0_REG -- 6 data bytes of MAG are stored in 6 registers. First register address is MAG_DATA_REGISTER
 800ba78:	2203      	movs	r2, #3
 800ba7a:	2126      	movs	r1, #38	; 0x26
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f7ff ff29 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800ba82:	2001      	movs	r0, #1
 800ba84:	f001 fa92 	bl	800cfac <HAL_Delay>
	mpuWrite( 0x27, 0x87);
 800ba88:	2287      	movs	r2, #135	; 0x87
 800ba8a:	2127      	movs	r1, #39	; 0x27
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f7ff ff21 	bl	800b8d4 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800ba92:	2001      	movs	r0, #1
 800ba94:	f001 fa8a 	bl	800cfac <HAL_Delay>
	calibrate_mag_ = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 800ba9e:	bd10      	pop	{r4, pc}

0800baa0 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>:
{
 800baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa2:	b087      	sub	sp, #28
 800baa4:	4605      	mov	r5, r0
 800baa6:	460e      	mov	r6, r1
	reset_calib_flag_  = 0;
 800baa8:	2400      	movs	r4, #0
 800baaa:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
 800baae:	2300      	movs	r3, #0
 800bab0:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800bab4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800bab8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800babc:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
 800bac0:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 800bac4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800bac8:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 800bacc:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 800bad0:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	nh_ = nh;
 800bad4:	6342      	str	r2, [r0, #52]	; 0x34
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 800bad6:	2024      	movs	r0, #36	; 0x24
 800bad8:	f006 fddc 	bl	8012694 <_Znwj>
 800badc:	4607      	mov	r7, r0
 800bade:	4b27      	ldr	r3, [pc, #156]	; (800bb7c <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xdc>)
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	9405      	str	r4, [sp, #20]
 800bae4:	ab06      	add	r3, sp, #24
 800bae6:	e913 0003 	ldmdb	r3, {r0, r1}
 800baea:	e88d 0003 	stmia.w	sp, {r0, r1}
      obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 800baee:	4b24      	ldr	r3, [pc, #144]	; (800bb80 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xe0>)
 800baf0:	603b      	str	r3, [r7, #0]
      data(0)
 800baf2:	4b24      	ldr	r3, [pc, #144]	; (800bb84 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xe4>)
 800baf4:	60fb      	str	r3, [r7, #12]
 800baf6:	743c      	strb	r4, [r7, #16]
 800baf8:	617d      	str	r5, [r7, #20]
 800bafa:	ab02      	add	r3, sp, #8
 800bafc:	e883 0003 	stmia.w	r3, {r0, r1}
      : _M_f(__pf) { }
 800bb00:	f107 0218 	add.w	r2, r7, #24
 800bb04:	e882 0003 	stmia.w	r2, {r0, r1}
 800bb08:	2301      	movs	r3, #1
 800bb0a:	623b      	str	r3, [r7, #32]
      topic_ = topic_name;
 800bb0c:	4b1e      	ldr	r3, [pc, #120]	; (800bb88 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xe8>)
 800bb0e:	60bb      	str	r3, [r7, #8]
 800bb10:	63af      	str	r7, [r5, #56]	; 0x38
	nh_->subscribe<std_msgs::UInt8, IMU>(*imu_config_sub_);
 800bb12:	6b69      	ldr	r1, [r5, #52]	; 0x34
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 800bb14:	4623      	mov	r3, r4
 800bb16:	2b13      	cmp	r3, #19
 800bb18:	dc0e      	bgt.n	800bb38 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x98>
        if(subscribers[i] == 0){ // empty slot
 800bb1a:	f103 029a 	add.w	r2, r3, #154	; 0x9a
 800bb1e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bb22:	6852      	ldr	r2, [r2, #4]
 800bb24:	b10a      	cbz	r2, 800bb2a <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x8a>
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 800bb26:	3301      	adds	r3, #1
 800bb28:	e7f5      	b.n	800bb16 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x76>
          subscribers[i] = (Subscriber_*) &s;
 800bb2a:	f103 029a 	add.w	r2, r3, #154	; 0x9a
 800bb2e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb32:	604f      	str	r7, [r1, #4]
          s.id_ = i+100;
 800bb34:	3364      	adds	r3, #100	; 0x64
 800bb36:	607b      	str	r3, [r7, #4]
	ahb_suspend_flag_ = false;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
	mag_filtering_flag_ = false;
 800bb3e:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
	mag_outlier_counter_ = 0;
 800bb42:	f8a5 310e 	strh.w	r3, [r5, #270]	; 0x10e
	hspi_ = hspi;
 800bb46:	632e      	str	r6, [r5, #48]	; 0x30
	readCalibData();
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f7ff fe5f 	bl	800b80c <_ZN3IMU13readCalibDataEv>
	gyroInit();
 800bb4e:	4628      	mov	r0, r5
 800bb50:	f7ff fee6 	bl	800b920 <_ZN3IMU8gyroInitEv>
	accInit();
 800bb54:	4628      	mov	r0, r5
 800bb56:	f7ff ff16 	bl	800b986 <_ZN3IMU7accInitEv>
	magInit();
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	f7ff ff2f 	bl	800b9be <_ZN3IMU7magInitEv>
	hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 800bb60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	6813      	ldr	r3, [r2, #0]
 800bb66:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800bb6a:	6013      	str	r3, [r2, #0]
	hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 800bb6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	6813      	ldr	r3, [r2, #0]
 800bb72:	f043 0310 	orr.w	r3, r3, #16
 800bb76:	6013      	str	r3, [r2, #0]
}
 800bb78:	b007      	add	sp, #28
 800bb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb7c:	0800b769 	.word	0x0800b769
 800bb80:	08019c44 	.word	0x08019c44
 800bb84:	08019c2c 	.word	0x08019c2c
 800bb88:	08019c88 	.word	0x08019c88

0800bb8c <_ZN3IMU4readEv>:
{
 800bb8c:	b570      	push	{r4, r5, r6, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	4604      	mov	r4, r0
	t_data[0] = 0x43 | 0x80;
 800bb92:	ae08      	add	r6, sp, #32
 800bb94:	23c3      	movs	r3, #195	; 0xc3
 800bb96:	f806 3d1c 	strb.w	r3, [r6, #-28]!
	IMU_SPI_CS_L;
 800bb9a:	4d98      	ldr	r5, [pc, #608]	; (800bdfc <_ZN3IMU4readEv+0x270>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	2140      	movs	r1, #64	; 0x40
 800bba0:	4628      	mov	r0, r5
 800bba2:	f002 f963 	bl	800de6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 800bba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4631      	mov	r1, r6
 800bbae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bbb0:	f003 f9f1 	bl	800ef96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_, adc_gyro, 6, 1000);
 800bbb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bbb8:	2206      	movs	r2, #6
 800bbba:	a906      	add	r1, sp, #24
 800bbbc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bbbe:	f003 fbf4 	bl	800f3aa <HAL_SPI_Receive>
	IMU_SPI_CS_H;
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	2140      	movs	r1, #64	; 0x40
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f002 f950 	bl	800de6c <HAL_GPIO_WritePin>
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800bbcc:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800bbd0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bbd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bbd8:	b21b      	sxth	r3, r3
 800bbda:	ee07 3a10 	vmov	s14, r3
 800bbde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bbe2:	ed9f 5a87 	vldr	s10, [pc, #540]	; 800be00 <_ZN3IMU4readEv+0x274>
 800bbe6:	ee27 7a05 	vmul.f32	s14, s14, s10
 800bbea:	eddf 5a86 	vldr	s11, [pc, #536]	; 800be04 <_ZN3IMU4readEv+0x278>
 800bbee:	eec7 7a25 	vdiv.f32	s15, s14, s11
 800bbf2:	ed9f 6a85 	vldr	s12, [pc, #532]	; 800be08 <_ZN3IMU4readEv+0x27c>
 800bbf6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bbfa:	eddf 6a84 	vldr	s13, [pc, #528]	; 800be0c <_ZN3IMU4readEv+0x280>
 800bbfe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bc02:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800bc06:	f89d 201a 	ldrb.w	r2, [sp, #26]
 800bc0a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800bc0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc12:	b21b      	sxth	r3, r3
 800bc14:	ee07 3a10 	vmov	s14, r3
 800bc18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc1c:	ee27 7a05 	vmul.f32	s14, s14, s10
 800bc20:	eec7 7a25 	vdiv.f32	s15, s14, s11
 800bc24:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bc28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bc2c:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800bc30:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800bc34:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800bc38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc3c:	b21b      	sxth	r3, r3
 800bc3e:	ee07 3a90 	vmov	s15, r3
 800bc42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc46:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bc4a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bc4e:	ee67 7a06 	vmul.f32	s15, s14, s12
 800bc52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bc56:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
	t_data[0] = 0x3B | 0x80;
 800bc5a:	23bb      	movs	r3, #187	; 0xbb
 800bc5c:	f88d 3004 	strb.w	r3, [sp, #4]
	IMU_SPI_CS_L;
 800bc60:	2200      	movs	r2, #0
 800bc62:	2140      	movs	r1, #64	; 0x40
 800bc64:	4628      	mov	r0, r5
 800bc66:	f002 f901 	bl	800de6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 800bc6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc6e:	2201      	movs	r2, #1
 800bc70:	4631      	mov	r1, r6
 800bc72:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bc74:	f003 f98f 	bl	800ef96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_, adc_acc, 6, 1000);
 800bc78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc7c:	2206      	movs	r2, #6
 800bc7e:	a904      	add	r1, sp, #16
 800bc80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bc82:	f003 fb92 	bl	800f3aa <HAL_SPI_Receive>
	IMU_SPI_CS_H;
 800bc86:	2201      	movs	r2, #1
 800bc88:	2140      	movs	r1, #64	; 0x40
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f002 f8ee 	bl	800de6c <HAL_GPIO_WritePin>
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 800bc90:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800bc94:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800bc98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc9c:	b21b      	sxth	r3, r3
 800bc9e:	ee07 3a10 	vmov	s14, r3
 800bca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bca6:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 800be10 <_ZN3IMU4readEv+0x284>
 800bcaa:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bcae:	eddf 6a59 	vldr	s13, [pc, #356]	; 800be14 <_ZN3IMU4readEv+0x288>
 800bcb2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bcb6:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 800bcba:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800bcbe:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800bcc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bcc6:	b21b      	sxth	r3, r3
 800bcc8:	ee07 3a10 	vmov	s14, r3
 800bccc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bcd0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bcd4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bcd8:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 800bcdc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800bce0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800bce4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bce8:	b21b      	sxth	r3, r3
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcf2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bcf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcfa:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
	if(i == MAG_PRESCALER)
 800bcfe:	4b46      	ldr	r3, [pc, #280]	; (800be18 <_ZN3IMU4readEv+0x28c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b04      	cmp	r3, #4
 800bd04:	d008      	beq.n	800bd18 <_ZN3IMU4readEv+0x18c>
	if(i == MAG_PRESCALER) i =0;
 800bd06:	4b44      	ldr	r3, [pc, #272]	; (800be18 <_ZN3IMU4readEv+0x28c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b04      	cmp	r3, #4
 800bd0c:	d071      	beq.n	800bdf2 <_ZN3IMU4readEv+0x266>
	else i++;
 800bd0e:	3301      	adds	r3, #1
 800bd10:	4a41      	ldr	r2, [pc, #260]	; (800be18 <_ZN3IMU4readEv+0x28c>)
 800bd12:	6013      	str	r3, [r2, #0]
}
 800bd14:	b008      	add	sp, #32
 800bd16:	bd70      	pop	{r4, r5, r6, pc}
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 800bd18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	6813      	ldr	r3, [r2, #0]
 800bd1e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800bd22:	6013      	str	r3, [r2, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_128); //128 = 0.8Mhz
 800bd24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	6813      	ldr	r3, [r2, #0]
 800bd2a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800bd2e:	6013      	str	r3, [r2, #0]
		t_data[0] = 0x49 | 0x80;
 800bd30:	ad08      	add	r5, sp, #32
 800bd32:	23c9      	movs	r3, #201	; 0xc9
 800bd34:	f805 3d1c 	strb.w	r3, [r5, #-28]!
		IMU_SPI_CS_L;
 800bd38:	4e30      	ldr	r6, [pc, #192]	; (800bdfc <_ZN3IMU4readEv+0x270>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2140      	movs	r1, #64	; 0x40
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f002 f894 	bl	800de6c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 800bd44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd48:	2201      	movs	r2, #1
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bd4e:	f003 f922 	bl	800ef96 <HAL_SPI_Transmit>
		HAL_SPI_Receive(hspi_, adc_mag, 7, 1000);
 800bd52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd56:	2207      	movs	r2, #7
 800bd58:	a902      	add	r1, sp, #8
 800bd5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bd5c:	f003 fb25 	bl	800f3aa <HAL_SPI_Receive>
		IMU_SPI_CS_H;
 800bd60:	2201      	movs	r2, #1
 800bd62:	2140      	movs	r1, #64	; 0x40
 800bd64:	4630      	mov	r0, r6
 800bd66:	f002 f881 	bl	800de6c <HAL_GPIO_WritePin>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 800bd6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	6813      	ldr	r3, [r2, #0]
 800bd70:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800bd74:	6013      	str	r3, [r2, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 800bd76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	6813      	ldr	r3, [r2, #0]
 800bd7c:	f043 0310 	orr.w	r3, r3, #16
 800bd80:	6013      	str	r3, [r2, #0]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 800bd82:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800bd86:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bd8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd8e:	b21b      	sxth	r3, r3
 800bd90:	ee07 3a10 	vmov	s14, r3
 800bd94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd98:	ed9f 6a20 	vldr	s12, [pc, #128]	; 800be1c <_ZN3IMU4readEv+0x290>
 800bd9c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bda0:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800be20 <_ZN3IMU4readEv+0x294>
 800bda4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bda8:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 800bdac:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800bdb0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800bdb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bdb8:	b21b      	sxth	r3, r3
 800bdba:	ee07 3a10 	vmov	s14, r3
 800bdbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bdc2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bdc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bdca:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 800bdce:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800bdd2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bdd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bdda:	b21b      	sxth	r3, r3
 800bddc:	ee07 3a90 	vmov	s15, r3
 800bde0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bde4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bde8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bdec:	ed84 7a18 	vstr	s14, [r4, #96]	; 0x60
 800bdf0:	e789      	b.n	800bd06 <_ZN3IMU4readEv+0x17a>
	if(i == MAG_PRESCALER) i =0;
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	4b08      	ldr	r3, [pc, #32]	; (800be18 <_ZN3IMU4readEv+0x28c>)
 800bdf6:	601a      	str	r2, [r3, #0]
 800bdf8:	e78c      	b.n	800bd14 <_ZN3IMU4readEv+0x188>
 800bdfa:	bf00      	nop
 800bdfc:	40020400 	.word	0x40020400
 800be00:	44fa0000 	.word	0x44fa0000
 800be04:	46fffe00 	.word	0x46fffe00
 800be08:	40490fdb 	.word	0x40490fdb
 800be0c:	43340000 	.word	0x43340000
 800be10:	39800000 	.word	0x39800000
 800be14:	411ce80a 	.word	0x411ce80a
 800be18:	2000072c 	.word	0x2000072c
 800be1c:	45998000 	.word	0x45998000
 800be20:	46fff000 	.word	0x46fff000

0800be24 <_ZN3IMU7processEv>:
{
 800be24:	b570      	push	{r4, r5, r6, lr}
 800be26:	ed2d 8b02 	vpush	{d8}
 800be2a:	b08a      	sub	sp, #40	; 0x28
 800be2c:	4604      	mov	r4, r0
	if (calibrate_gyro_ > 0)
 800be2e:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800be32:	2b00      	cmp	r3, #0
 800be34:	dd41      	ble.n	800beba <_ZN3IMU7processEv+0x96>
		if (calibrate_gyro_ == CALIBRATING_STEP)
 800be36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be3a:	d030      	beq.n	800be9e <_ZN3IMU7processEv+0x7a>
		gyro_offset_ += raw_gyro_adc_;
 800be3c:	f104 05dc 	add.w	r5, r4, #220	; 0xdc
 800be40:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800be44:	4628      	mov	r0, r5
 800be46:	f006 f8d1 	bl	8011fec <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_gyro_ == 1)
 800be4a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d02d      	beq.n	800beae <_ZN3IMU7processEv+0x8a>
		calibrate_gyro_--;
 800be52:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800be56:	3b01      	subs	r3, #1
 800be58:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	if (calibrate_acc_ > 0) {
 800be5c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800be60:	2b00      	cmp	r3, #0
 800be62:	dd7b      	ble.n	800bf5c <_ZN3IMU7processEv+0x138>
		if (calibrate_acc_ == CALIBRATING_STEP) acc_offset_.zero();
 800be64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be68:	d054      	beq.n	800bf14 <_ZN3IMU7processEv+0xf0>
		acc_offset_ += raw_acc_adc_;
 800be6a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800be6e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800be72:	f006 f8bb 	bl	8011fec <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_acc_ == 1) {
 800be76:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d052      	beq.n	800bf24 <_ZN3IMU7processEv+0x100>
		calibrate_acc_--;
 800be7e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800be82:	3b01      	subs	r3, #1
 800be84:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	if (calibrate_mag_ > 0)
 800be88:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f340 80f8 	ble.w	800c082 <_ZN3IMU7processEv+0x25e>
		if(calibrate_mag_  == CALIBRATING_MAG_STEP)
 800be92:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800be96:	f000 8091 	beq.w	800bfbc <_ZN3IMU7processEv+0x198>
{
 800be9a:	2100      	movs	r1, #0
 800be9c:	e0a5      	b.n	800bfea <_ZN3IMU7processEv+0x1c6>
 800be9e:	2300      	movs	r3, #0
 800bea0:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800bea4:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 800bea8:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 800beac:	e7c6      	b.n	800be3c <_ZN3IMU7processEv+0x18>
			gyro_offset_ /= (float)CALIBRATING_STEP;
 800beae:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 800c188 <_ZN3IMU7processEv+0x364>
 800beb2:	4628      	mov	r0, r5
 800beb4:	f006 f840 	bl	8011f38 <_ZN7Vector3IfEdVEf>
 800beb8:	e7cb      	b.n	800be52 <_ZN3IMU7processEv+0x2e>
		raw_gyro_= raw_gyro_adc_ - gyro_offset_;
 800beba:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
 800bebe:	3040      	adds	r0, #64	; 0x40
 800bec0:	f006 f984 	bl	80121cc <_ZNK7Vector3IfEmiERKS0_>
 800bec4:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 800bec8:	edc4 0a1d 	vstr	s1, [r4, #116]	; 0x74
 800becc:	ed84 1a1e 	vstr	s2, [r4, #120]	; 0x78
		raw_gyro_p_  -= (raw_gyro_p_/GYRO_LPF_FACTOR);
 800bed0:	f104 05ac 	add.w	r5, r4, #172	; 0xac
 800bed4:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800bed8:	4628      	mov	r0, r5
 800beda:	f006 f8b5 	bl	8012048 <_ZNK7Vector3IfEdvEf>
 800bede:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bee2:	edcd 0a02 	vstr	s1, [sp, #8]
 800bee6:	ed8d 1a03 	vstr	s2, [sp, #12]
 800beea:	a901      	add	r1, sp, #4
 800beec:	4628      	mov	r0, r5
 800beee:	f006 f84f 	bl	8011f90 <_ZN7Vector3IfEmIERKS0_>
		raw_gyro_p_   += raw_gyro_;
 800bef2:	f104 0170 	add.w	r1, r4, #112	; 0x70
 800bef6:	4628      	mov	r0, r5
 800bef8:	f006 f878 	bl	8011fec <_ZN7Vector3IfEpLERKS0_>
		gyro_  = (raw_gyro_p_/GYRO_LPF_FACTOR);
 800befc:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800bf00:	4628      	mov	r0, r5
 800bf02:	f006 f8a1 	bl	8012048 <_ZNK7Vector3IfEdvEf>
 800bf06:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
 800bf0a:	edc4 0a26 	vstr	s1, [r4, #152]	; 0x98
 800bf0e:	ed84 1a27 	vstr	s2, [r4, #156]	; 0x9c
 800bf12:	e7a3      	b.n	800be5c <_ZN3IMU7processEv+0x38>
 800bf14:	2300      	movs	r3, #0
 800bf16:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800bf1a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800bf1e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 800bf22:	e7a2      	b.n	800be6a <_ZN3IMU7processEv+0x46>
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 800bf24:	edd4 6a34 	vldr	s13, [r4, #208]	; 0xd0
 800bf28:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800c188 <_ZN3IMU7processEv+0x364>
 800bf2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf30:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 800bf34:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 800bf38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf3c:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
			acc_offset_[2] =  acc_offset_[2]/(float)CALIBRATING_STEP - GRAVITY_MSS;
 800bf40:	edd4 6a36 	vldr	s13, [r4, #216]	; 0xd8
 800bf44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf48:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800c18c <_ZN3IMU7processEv+0x368>
 800bf4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf50:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
			writeCalibData();
 800bf54:	4620      	mov	r0, r4
 800bf56:	f7ff fc83 	bl	800b860 <_ZN3IMU14writeCalibDataEv>
 800bf5a:	e790      	b.n	800be7e <_ZN3IMU7processEv+0x5a>
		raw_acc_ = raw_acc_adc_ - acc_offset_;
 800bf5c:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
 800bf60:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800bf64:	f006 f932 	bl	80121cc <_ZNK7Vector3IfEmiERKS0_>
 800bf68:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
 800bf6c:	edc4 0a1a 	vstr	s1, [r4, #104]	; 0x68
 800bf70:	ed84 1a1b 	vstr	s2, [r4, #108]	; 0x6c
		raw_acc_p_    -= (raw_acc_p_/ACC_LPF_FACTOR);
 800bf74:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 800bf78:	ed9f 8a85 	vldr	s16, [pc, #532]	; 800c190 <_ZN3IMU7processEv+0x36c>
 800bf7c:	eeb0 0a48 	vmov.f32	s0, s16
 800bf80:	4628      	mov	r0, r5
 800bf82:	f006 f861 	bl	8012048 <_ZNK7Vector3IfEdvEf>
 800bf86:	ed8d 0a04 	vstr	s0, [sp, #16]
 800bf8a:	edcd 0a05 	vstr	s1, [sp, #20]
 800bf8e:	ed8d 1a06 	vstr	s2, [sp, #24]
 800bf92:	a904      	add	r1, sp, #16
 800bf94:	4628      	mov	r0, r5
 800bf96:	f005 fffb 	bl	8011f90 <_ZN7Vector3IfEmIERKS0_>
		raw_acc_p_    += raw_acc_;
 800bf9a:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f006 f824 	bl	8011fec <_ZN7Vector3IfEpLERKS0_>
		acc_  = (raw_acc_p_/ACC_LPF_FACTOR);
 800bfa4:	eeb0 0a48 	vmov.f32	s0, s16
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	f006 f84d 	bl	8012048 <_ZNK7Vector3IfEdvEf>
 800bfae:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
 800bfb2:	edc4 0a23 	vstr	s1, [r4, #140]	; 0x8c
 800bfb6:	ed84 1a24 	vstr	s2, [r4, #144]	; 0x90
 800bfba:	e765      	b.n	800be88 <_ZN3IMU7processEv+0x64>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800bfc2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800bfc6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
			mag_min_ = raw_mag_adc_;
 800bfca:	f504 7580 	add.w	r5, r4, #256	; 0x100
 800bfce:	f104 0358 	add.w	r3, r4, #88	; 0x58
 800bfd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bfd6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			mag_max_ = raw_mag_adc_;
 800bfda:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
 800bfde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bfe2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800bfe6:	e758      	b.n	800be9a <_ZN3IMU7processEv+0x76>
		for (int i = 0; i < 3; i++)
 800bfe8:	3101      	adds	r1, #1
 800bfea:	2902      	cmp	r1, #2
 800bfec:	dc21      	bgt.n	800c032 <_ZN3IMU7processEv+0x20e>
        T *_v = &x;
 800bfee:	f104 0358 	add.w	r3, r4, #88	; 0x58
        return _v[i];
 800bff2:	b2ca      	uxtb	r2, r1
 800bff4:	0092      	lsls	r2, r2, #2
 800bff6:	4413      	add	r3, r2
			if (raw_mag_adc_[i] < mag_min_[i]) mag_min_[i] = raw_mag_adc_[i];
 800bff8:	edd3 7a00 	vldr	s15, [r3]
        T *_v = &x;
 800bffc:	f504 7080 	add.w	r0, r4, #256	; 0x100
        return _v[i];
 800c000:	4410      	add	r0, r2
 800c002:	ed90 7a00 	vldr	s14, [r0]
 800c006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c00e:	d501      	bpl.n	800c014 <_ZN3IMU7processEv+0x1f0>
 800c010:	edc0 7a00 	vstr	s15, [r0]
			if (raw_mag_adc_[i] > mag_max_[i]) mag_max_[i] = raw_mag_adc_[i];
 800c014:	edd3 7a00 	vldr	s15, [r3]
        T *_v = &x;
 800c018:	f104 03f4 	add.w	r3, r4, #244	; 0xf4
        return _v[i];
 800c01c:	441a      	add	r2, r3
 800c01e:	ed92 7a00 	vldr	s14, [r2]
 800c022:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c02a:	dddd      	ble.n	800bfe8 <_ZN3IMU7processEv+0x1c4>
 800c02c:	edc2 7a00 	vstr	s15, [r2]
 800c030:	e7da      	b.n	800bfe8 <_ZN3IMU7processEv+0x1c4>
		if(calibrate_mag_ == 1)
 800c032:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800c036:	2b01      	cmp	r3, #1
 800c038:	d008      	beq.n	800c04c <_ZN3IMU7processEv+0x228>
		calibrate_mag_ --;
 800c03a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800c03e:	3b01      	subs	r3, #1
 800c040:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
}
 800c044:	b00a      	add	sp, #40	; 0x28
 800c046:	ecbd 8b02 	vpop	{d8}
 800c04a:	bd70      	pop	{r4, r5, r6, pc}
			mag_offset_ = (mag_min_ + mag_max_) /2 ;
 800c04c:	f104 01f4 	add.w	r1, r4, #244	; 0xf4
 800c050:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800c054:	f006 f878 	bl	8012148 <_ZNK7Vector3IfEplERKS0_>
 800c058:	ed8d 0a07 	vstr	s0, [sp, #28]
 800c05c:	edcd 0a08 	vstr	s1, [sp, #32]
 800c060:	ed8d 1a09 	vstr	s2, [sp, #36]	; 0x24
 800c064:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c068:	a807      	add	r0, sp, #28
 800c06a:	f005 ffed 	bl	8012048 <_ZNK7Vector3IfEdvEf>
 800c06e:	ed84 0a3a 	vstr	s0, [r4, #232]	; 0xe8
 800c072:	edc4 0a3b 	vstr	s1, [r4, #236]	; 0xec
 800c076:	ed84 1a3c 	vstr	s2, [r4, #240]	; 0xf0
			writeCalibData();
 800c07a:	4620      	mov	r0, r4
 800c07c:	f7ff fbf0 	bl	800b860 <_ZN3IMU14writeCalibDataEv>
 800c080:	e7db      	b.n	800c03a <_ZN3IMU7processEv+0x216>
		raw_mag_[0] = raw_mag_adc_[1] - mag_offset_[1];
 800c082:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 800c086:	edd4 7a3b 	vldr	s15, [r4, #236]	; 0xec
 800c08a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c08e:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
		raw_mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 800c092:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
 800c096:	edd4 7a3a 	vldr	s15, [r4, #232]	; 0xe8
 800c09a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c09e:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
		raw_mag_[2] = -(raw_mag_adc_[2] - mag_offset_[2]);
 800c0a2:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 800c0a6:	edd4 7a3c 	vldr	s15, [r4, #240]	; 0xf0
 800c0aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c0ae:	eef1 7a67 	vneg.f32	s15, s15
 800c0b2:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
		if(mag_filtering_flag_)
 800c0b6:	f894 510c 	ldrb.w	r5, [r4, #268]	; 0x10c
 800c0ba:	2d00      	cmp	r5, #0
 800c0bc:	d03e      	beq.n	800c13c <_ZN3IMU7processEv+0x318>
 800c0be:	2200      	movs	r2, #0
 800c0c0:	4616      	mov	r6, r2
 800c0c2:	e000      	b.n	800c0c6 <_ZN3IMU7processEv+0x2a2>
			for(int i = 0; i < 3; i++)
 800c0c4:	3201      	adds	r2, #1
 800c0c6:	2a02      	cmp	r2, #2
 800c0c8:	dc18      	bgt.n	800c0fc <_ZN3IMU7processEv+0x2d8>
        T *_v = &x;
 800c0ca:	f104 037c 	add.w	r3, r4, #124	; 0x7c
        return _v[i];
 800c0ce:	b2d1      	uxtb	r1, r2
 800c0d0:	0089      	lsls	r1, r1, #2
 800c0d2:	440b      	add	r3, r1
        T *_v = &x;
 800c0d4:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
        return _v[i];
 800c0d8:	4401      	add	r1, r0
				if(fabs(raw_mag_[i] - mag_[i]) > MAG_GENERAL_THRESH) mag_outlier_flag = true;
 800c0da:	edd3 7a00 	vldr	s15, [r3]
 800c0de:	ed91 7a00 	vldr	s14, [r1]
 800c0e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800c0e6:	eef0 7ae7 	vabs.f32	s15, s15
 800c0ea:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800c0ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f6:	dde5      	ble.n	800c0c4 <_ZN3IMU7processEv+0x2a0>
 800c0f8:	462e      	mov	r6, r5
 800c0fa:	e7e3      	b.n	800c0c4 <_ZN3IMU7processEv+0x2a0>
			if(!mag_outlier_flag)
 800c0fc:	b19e      	cbz	r6, 800c126 <_ZN3IMU7processEv+0x302>
				if(++mag_outlier_counter_ > MAG_OUTLIER_MAX_COUNT)
 800c0fe:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
 800c102:	3301      	adds	r3, #1
 800c104:	b29b      	uxth	r3, r3
 800c106:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
 800c10a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c10e:	dd99      	ble.n	800c044 <_ZN3IMU7processEv+0x220>
					mag_outlier_counter_ = 0;
 800c110:	2300      	movs	r3, #0
 800c112:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
					mag_ = raw_mag_;
 800c116:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800c11a:	347c      	adds	r4, #124	; 0x7c
 800c11c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c120:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c124:	e78e      	b.n	800c044 <_ZN3IMU7processEv+0x220>
				mag_ = raw_mag_;
 800c126:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800c12a:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 800c12e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c130:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				mag_outlier_counter_ = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
 800c13a:	e783      	b.n	800c044 <_ZN3IMU7processEv+0x220>
    bool is_zero(void) const { return (fabsf(x) < FLT_EPSILON) && (fabsf(y) < FLT_EPSILON) && (fabsf(z) < FLT_EPSILON); }
 800c13c:	eeb0 7ac7 	vabs.f32	s14, s14
 800c140:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c194 <_ZN3IMU7processEv+0x370>
 800c144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c14c:	d50e      	bpl.n	800c16c <_ZN3IMU7processEv+0x348>
 800c14e:	eef0 6ae6 	vabs.f32	s13, s13
 800c152:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c15a:	d507      	bpl.n	800c16c <_ZN3IMU7processEv+0x348>
 800c15c:	eeb0 6ac6 	vabs.f32	s12, s12
 800c160:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800c164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c168:	d500      	bpl.n	800c16c <_ZN3IMU7processEv+0x348>
 800c16a:	2501      	movs	r5, #1
			if(!raw_mag_adc_.is_zero())
 800c16c:	2d00      	cmp	r5, #0
 800c16e:	f47f af69 	bne.w	800c044 <_ZN3IMU7processEv+0x220>
				mag_ = raw_mag_;
 800c172:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800c176:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 800c17a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c17c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			mag_filtering_flag_  = true;
 800c180:	2301      	movs	r3, #1
 800c182:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
}
 800c186:	e75d      	b.n	800c044 <_ZN3IMU7processEv+0x220>
 800c188:	447a0000 	.word	0x447a0000
 800c18c:	411ce80a 	.word	0x411ce80a
 800c190:	42280000 	.word	0x42280000
 800c194:	34000000 	.word	0x34000000

0800c198 <_ZN3IMU6updateEt>:
{
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	4604      	mov	r4, r0
	if(nh_->connected() && (!nh_->getHardware()->getUartDriver()->getTx()->idleFlag()))
 800c19c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800c19e:	6803      	ldr	r3, [r0, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	4798      	blx	r3
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	b118      	cbz	r0, 800c1b0 <_ZN3IMU6updateEt+0x18>
  bool idleFlag(){return idle_flag_;}
 800c1a8:	4aa3      	ldr	r2, [pc, #652]	; (800c438 <_ZN3IMU6updateEt+0x2a0>)
 800c1aa:	7812      	ldrb	r2, [r2, #0]
 800c1ac:	b102      	cbz	r2, 800c1b0 <_ZN3IMU6updateEt+0x18>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	b113      	cbz	r3, 800c1b8 <_ZN3IMU6updateEt+0x20>
		ahb_suspend_flag_ = true; //should suspend USART1 of DMA(ros) for a while
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	if(ahb_suspend_flag_)
 800c1b8:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d141      	bne.n	800c244 <_ZN3IMU6updateEt+0xac>
	read(); //read from SPI
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f7ff fce3 	bl	800bb8c <_ZN3IMU4readEv>
	if(ahb_suspend_flag_)
 800c1c6:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d064      	beq.n	800c298 <_ZN3IMU6updateEt+0x100>
		UART_HandleTypeDef *huart = nh_->getHardware()->getUartDriver()->getHuart();
 800c1ce:	6b63      	ldr	r3, [r4, #52]	; 0x34

UartDriver<serial_class>* getUartDriver() {return  iostream_;}
 800c1d0:	689b      	ldr	r3, [r3, #8]
    return huart_;
 800c1d2:	681a      	ldr	r2, [r3, #0]
		__HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx)); // this should come before __HAL_DMA_ENABLE!!
 800c1d4:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4998      	ldr	r1, [pc, #608]	; (800c43c <_ZN3IMU6updateEt+0x2a4>)
 800c1da:	428b      	cmp	r3, r1
 800c1dc:	d97e      	bls.n	800c2dc <_ZN3IMU6updateEt+0x144>
 800c1de:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800c1e2:	428b      	cmp	r3, r1
 800c1e4:	d04c      	beq.n	800c280 <_ZN3IMU6updateEt+0xe8>
 800c1e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c1ea:	428b      	cmp	r3, r1
 800c1ec:	d05b      	beq.n	800c2a6 <_ZN3IMU6updateEt+0x10e>
 800c1ee:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c1f2:	428b      	cmp	r3, r1
 800c1f4:	d059      	beq.n	800c2aa <_ZN3IMU6updateEt+0x112>
 800c1f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c1fa:	428b      	cmp	r3, r1
 800c1fc:	d057      	beq.n	800c2ae <_ZN3IMU6updateEt+0x116>
 800c1fe:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800c202:	428b      	cmp	r3, r1
 800c204:	d055      	beq.n	800c2b2 <_ZN3IMU6updateEt+0x11a>
 800c206:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c20a:	428b      	cmp	r3, r1
 800c20c:	d054      	beq.n	800c2b8 <_ZN3IMU6updateEt+0x120>
 800c20e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c212:	428b      	cmp	r3, r1
 800c214:	d053      	beq.n	800c2be <_ZN3IMU6updateEt+0x126>
 800c216:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c21a:	428b      	cmp	r3, r1
 800c21c:	d052      	beq.n	800c2c4 <_ZN3IMU6updateEt+0x12c>
 800c21e:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800c222:	428b      	cmp	r3, r1
 800c224:	d051      	beq.n	800c2ca <_ZN3IMU6updateEt+0x132>
 800c226:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c22a:	428b      	cmp	r3, r1
 800c22c:	d050      	beq.n	800c2d0 <_ZN3IMU6updateEt+0x138>
 800c22e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c232:	428b      	cmp	r3, r1
 800c234:	d04f      	beq.n	800c2d6 <_ZN3IMU6updateEt+0x13e>
 800c236:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c23a:	428b      	cmp	r3, r1
 800c23c:	d01d      	beq.n	800c27a <_ZN3IMU6updateEt+0xe2>
 800c23e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800c242:	e01e      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
		UART_HandleTypeDef *huart = nh_->getHardware()->getUartDriver()->getHuart();
 800c244:	6b63      	ldr	r3, [r4, #52]	; 0x34
UartDriver<serial_class>* getUartDriver() {return  iostream_;}
 800c246:	689b      	ldr	r3, [r3, #8]
    return huart_;
 800c248:	681d      	ldr	r5, [r3, #0]
		HAL_DMA_Abort(huart->hdmatx); //suspend the dma first(please note that TCIF of DMATx is set because of suspension)
 800c24a:	6e28      	ldr	r0, [r5, #96]	; 0x60
 800c24c:	f001 fa22 	bl	800d694 <HAL_DMA_Abort>
return tx_buffer_unit_[subscript_in_progress_].tx_len_;
 800c250:	4b7b      	ldr	r3, [pc, #492]	; (800c440 <_ZN3IMU6updateEt+0x2a8>)
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 800c258:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
 800c25c:	4b79      	ldr	r3, [pc, #484]	; (800c444 <_ZN3IMU6updateEt+0x2ac>)
 800c25e:	4413      	add	r3, r2
 800c260:	f893 10fa 	ldrb.w	r1, [r3, #250]	; 0xfa
		uint8_t temp_length2 = huart->hdmatx->Instance->NDTR;
 800c264:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800c266:	6810      	ldr	r0, [r2, #0]
 800c268:	6842      	ldr	r2, [r0, #4]
 800c26a:	b2d2      	uxtb	r2, r2
		uint8_t* temp_p = nh_->getHardware()->getUartDriver()->getTx()->getCurrentTransmitBufferP() + (temp_length - temp_length2);
 800c26c:	1a89      	subs	r1, r1, r2
 800c26e:	440b      	add	r3, r1
		huart->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 800c270:	60c3      	str	r3, [r0, #12]
		huart->hdmatx->Instance->NDTR = temp_length2;
 800c272:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	605a      	str	r2, [r3, #4]
 800c278:	e7a2      	b.n	800c1c0 <_ZN3IMU6updateEt+0x28>
		__HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx)); // this should come before __HAL_DMA_ENABLE!!
 800c27a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c27e:	e000      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c280:	2120      	movs	r1, #32
 800c282:	4b71      	ldr	r3, [pc, #452]	; (800c448 <_ZN3IMU6updateEt+0x2b0>)
 800c284:	60d9      	str	r1, [r3, #12]
		__HAL_DMA_ENABLE(huart->hdmatx);
 800c286:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	6813      	ldr	r3, [r2, #0]
 800c28c:	f043 0301 	orr.w	r3, r3, #1
 800c290:	6013      	str	r3, [r2, #0]
		ahb_suspend_flag_ = false; //finish suspension
 800c292:	2300      	movs	r3, #0
 800c294:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	process();
 800c298:	4620      	mov	r0, r4
 800c29a:	f7ff fdc3 	bl	800be24 <_ZN3IMU7processEv>
	update_ = true;
 800c29e:	2001      	movs	r0, #1
 800c2a0:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
}
 800c2a4:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx)); // this should come before __HAL_DMA_ENABLE!!
 800c2a6:	2120      	movs	r1, #32
 800c2a8:	e7eb      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c2aa:	2120      	movs	r1, #32
 800c2ac:	e7e9      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c2ae:	2120      	movs	r1, #32
 800c2b0:	e7e7      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c2b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c2b6:	e7e4      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c2b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c2bc:	e7e1      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c2be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c2c2:	e7de      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c2c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c2c8:	e7db      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c2ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2ce:	e7d8      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c2d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2d4:	e7d5      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c2d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2da:	e7d2      	b.n	800c282 <_ZN3IMU6updateEt+0xea>
 800c2dc:	495b      	ldr	r1, [pc, #364]	; (800c44c <_ZN3IMU6updateEt+0x2b4>)
 800c2de:	428b      	cmp	r3, r1
 800c2e0:	d953      	bls.n	800c38a <_ZN3IMU6updateEt+0x1f2>
 800c2e2:	39a8      	subs	r1, #168	; 0xa8
 800c2e4:	428b      	cmp	r3, r1
 800c2e6:	d031      	beq.n	800c34c <_ZN3IMU6updateEt+0x1b4>
 800c2e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c2ec:	428b      	cmp	r3, r1
 800c2ee:	d031      	beq.n	800c354 <_ZN3IMU6updateEt+0x1bc>
 800c2f0:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c2f4:	428b      	cmp	r3, r1
 800c2f6:	d02f      	beq.n	800c358 <_ZN3IMU6updateEt+0x1c0>
 800c2f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c2fc:	428b      	cmp	r3, r1
 800c2fe:	d02d      	beq.n	800c35c <_ZN3IMU6updateEt+0x1c4>
 800c300:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800c304:	428b      	cmp	r3, r1
 800c306:	d02b      	beq.n	800c360 <_ZN3IMU6updateEt+0x1c8>
 800c308:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c30c:	428b      	cmp	r3, r1
 800c30e:	d02a      	beq.n	800c366 <_ZN3IMU6updateEt+0x1ce>
 800c310:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c314:	428b      	cmp	r3, r1
 800c316:	d029      	beq.n	800c36c <_ZN3IMU6updateEt+0x1d4>
 800c318:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c31c:	428b      	cmp	r3, r1
 800c31e:	d028      	beq.n	800c372 <_ZN3IMU6updateEt+0x1da>
 800c320:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800c324:	428b      	cmp	r3, r1
 800c326:	d027      	beq.n	800c378 <_ZN3IMU6updateEt+0x1e0>
 800c328:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c32c:	428b      	cmp	r3, r1
 800c32e:	d026      	beq.n	800c37e <_ZN3IMU6updateEt+0x1e6>
 800c330:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c334:	428b      	cmp	r3, r1
 800c336:	d025      	beq.n	800c384 <_ZN3IMU6updateEt+0x1ec>
 800c338:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c33c:	428b      	cmp	r3, r1
 800c33e:	d002      	beq.n	800c346 <_ZN3IMU6updateEt+0x1ae>
 800c340:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800c344:	e003      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c34a:	e000      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c34c:	2120      	movs	r1, #32
 800c34e:	4b3e      	ldr	r3, [pc, #248]	; (800c448 <_ZN3IMU6updateEt+0x2b0>)
 800c350:	6099      	str	r1, [r3, #8]
 800c352:	e798      	b.n	800c286 <_ZN3IMU6updateEt+0xee>
 800c354:	2120      	movs	r1, #32
 800c356:	e7fa      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c358:	2120      	movs	r1, #32
 800c35a:	e7f8      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c35c:	2120      	movs	r1, #32
 800c35e:	e7f6      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c364:	e7f3      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c366:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c36a:	e7f0      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c36c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c370:	e7ed      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c372:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c376:	e7ea      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c378:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c37c:	e7e7      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c37e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c382:	e7e4      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c384:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c388:	e7e1      	b.n	800c34e <_ZN3IMU6updateEt+0x1b6>
 800c38a:	4931      	ldr	r1, [pc, #196]	; (800c450 <_ZN3IMU6updateEt+0x2b8>)
 800c38c:	428b      	cmp	r3, r1
 800c38e:	d963      	bls.n	800c458 <_ZN3IMU6updateEt+0x2c0>
 800c390:	3948      	subs	r1, #72	; 0x48
 800c392:	428b      	cmp	r3, r1
 800c394:	d031      	beq.n	800c3fa <_ZN3IMU6updateEt+0x262>
 800c396:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c39a:	428b      	cmp	r3, r1
 800c39c:	d031      	beq.n	800c402 <_ZN3IMU6updateEt+0x26a>
 800c39e:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c3a2:	428b      	cmp	r3, r1
 800c3a4:	d02f      	beq.n	800c406 <_ZN3IMU6updateEt+0x26e>
 800c3a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c3aa:	428b      	cmp	r3, r1
 800c3ac:	d02d      	beq.n	800c40a <_ZN3IMU6updateEt+0x272>
 800c3ae:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800c3b2:	428b      	cmp	r3, r1
 800c3b4:	d02b      	beq.n	800c40e <_ZN3IMU6updateEt+0x276>
 800c3b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c3ba:	428b      	cmp	r3, r1
 800c3bc:	d02a      	beq.n	800c414 <_ZN3IMU6updateEt+0x27c>
 800c3be:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c3c2:	428b      	cmp	r3, r1
 800c3c4:	d029      	beq.n	800c41a <_ZN3IMU6updateEt+0x282>
 800c3c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c3ca:	428b      	cmp	r3, r1
 800c3cc:	d028      	beq.n	800c420 <_ZN3IMU6updateEt+0x288>
 800c3ce:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800c3d2:	428b      	cmp	r3, r1
 800c3d4:	d027      	beq.n	800c426 <_ZN3IMU6updateEt+0x28e>
 800c3d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c3da:	428b      	cmp	r3, r1
 800c3dc:	d026      	beq.n	800c42c <_ZN3IMU6updateEt+0x294>
 800c3de:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c3e2:	428b      	cmp	r3, r1
 800c3e4:	d025      	beq.n	800c432 <_ZN3IMU6updateEt+0x29a>
 800c3e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c3ea:	428b      	cmp	r3, r1
 800c3ec:	d002      	beq.n	800c3f4 <_ZN3IMU6updateEt+0x25c>
 800c3ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800c3f2:	e003      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c3f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3f8:	e000      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c3fa:	2120      	movs	r1, #32
 800c3fc:	4b15      	ldr	r3, [pc, #84]	; (800c454 <_ZN3IMU6updateEt+0x2bc>)
 800c3fe:	60d9      	str	r1, [r3, #12]
 800c400:	e741      	b.n	800c286 <_ZN3IMU6updateEt+0xee>
 800c402:	2120      	movs	r1, #32
 800c404:	e7fa      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c406:	2120      	movs	r1, #32
 800c408:	e7f8      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c40a:	2120      	movs	r1, #32
 800c40c:	e7f6      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c40e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c412:	e7f3      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c418:	e7f0      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c41a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c41e:	e7ed      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c424:	e7ea      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c42a:	e7e7      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c42c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c430:	e7e4      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c436:	e7e1      	b.n	800c3fc <_ZN3IMU6updateEt+0x264>
 800c438:	20000734 	.word	0x20000734
 800c43c:	40026458 	.word	0x40026458
 800c440:	20000736 	.word	0x20000736
 800c444:	20000738 	.word	0x20000738
 800c448:	40026400 	.word	0x40026400
 800c44c:	400260b8 	.word	0x400260b8
 800c450:	40026058 	.word	0x40026058
 800c454:	40026000 	.word	0x40026000
 800c458:	4929      	ldr	r1, [pc, #164]	; (800c500 <_ZN3IMU6updateEt+0x368>)
 800c45a:	428b      	cmp	r3, r1
 800c45c:	d031      	beq.n	800c4c2 <_ZN3IMU6updateEt+0x32a>
 800c45e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c462:	428b      	cmp	r3, r1
 800c464:	d031      	beq.n	800c4ca <_ZN3IMU6updateEt+0x332>
 800c466:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c46a:	428b      	cmp	r3, r1
 800c46c:	d02f      	beq.n	800c4ce <_ZN3IMU6updateEt+0x336>
 800c46e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c472:	428b      	cmp	r3, r1
 800c474:	d02d      	beq.n	800c4d2 <_ZN3IMU6updateEt+0x33a>
 800c476:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800c47a:	428b      	cmp	r3, r1
 800c47c:	d02b      	beq.n	800c4d6 <_ZN3IMU6updateEt+0x33e>
 800c47e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c482:	428b      	cmp	r3, r1
 800c484:	d02a      	beq.n	800c4dc <_ZN3IMU6updateEt+0x344>
 800c486:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c48a:	428b      	cmp	r3, r1
 800c48c:	d029      	beq.n	800c4e2 <_ZN3IMU6updateEt+0x34a>
 800c48e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c492:	428b      	cmp	r3, r1
 800c494:	d028      	beq.n	800c4e8 <_ZN3IMU6updateEt+0x350>
 800c496:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800c49a:	428b      	cmp	r3, r1
 800c49c:	d027      	beq.n	800c4ee <_ZN3IMU6updateEt+0x356>
 800c49e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c4a2:	428b      	cmp	r3, r1
 800c4a4:	d026      	beq.n	800c4f4 <_ZN3IMU6updateEt+0x35c>
 800c4a6:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800c4aa:	428b      	cmp	r3, r1
 800c4ac:	d025      	beq.n	800c4fa <_ZN3IMU6updateEt+0x362>
 800c4ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c4b2:	428b      	cmp	r3, r1
 800c4b4:	d002      	beq.n	800c4bc <_ZN3IMU6updateEt+0x324>
 800c4b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800c4ba:	e003      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4c0:	e000      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4c2:	2120      	movs	r1, #32
 800c4c4:	4b0f      	ldr	r3, [pc, #60]	; (800c504 <_ZN3IMU6updateEt+0x36c>)
 800c4c6:	6099      	str	r1, [r3, #8]
 800c4c8:	e6dd      	b.n	800c286 <_ZN3IMU6updateEt+0xee>
 800c4ca:	2120      	movs	r1, #32
 800c4cc:	e7fa      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4ce:	2120      	movs	r1, #32
 800c4d0:	e7f8      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4d2:	2120      	movs	r1, #32
 800c4d4:	e7f6      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c4da:	e7f3      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c4e0:	e7f0      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c4e6:	e7ed      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c4ec:	e7ea      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4f2:	e7e7      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4f8:	e7e4      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c4fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4fe:	e7e1      	b.n	800c4c4 <_ZN3IMU6updateEt+0x32c>
 800c500:	40026010 	.word	0x40026010
 800c504:	40026000 	.word	0x40026000

0800c508 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c508:	b570      	push	{r4, r5, r6, lr}
 800c50a:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c50c:	2234      	movs	r2, #52	; 0x34
 800c50e:	2100      	movs	r1, #0
 800c510:	a82b      	add	r0, sp, #172	; 0xac
 800c512:	f009 faa3 	bl	8015a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c516:	2400      	movs	r4, #0
 800c518:	9426      	str	r4, [sp, #152]	; 0x98
 800c51a:	9427      	str	r4, [sp, #156]	; 0x9c
 800c51c:	9428      	str	r4, [sp, #160]	; 0xa0
 800c51e:	9429      	str	r4, [sp, #164]	; 0xa4
 800c520:	942a      	str	r4, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c522:	2290      	movs	r2, #144	; 0x90
 800c524:	4621      	mov	r1, r4
 800c526:	a802      	add	r0, sp, #8
 800c528:	f009 fa98 	bl	8015a5c <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c52c:	4b23      	ldr	r3, [pc, #140]	; (800c5bc <_Z18SystemClock_Configv+0xb4>)
 800c52e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c530:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c534:	641a      	str	r2, [r3, #64]	; 0x40
 800c536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c540:	4b1f      	ldr	r3, [pc, #124]	; (800c5c0 <_Z18SystemClock_Configv+0xb8>)
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c550:	9301      	str	r3, [sp, #4]
 800c552:	9b01      	ldr	r3, [sp, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c554:	2601      	movs	r6, #1
 800c556:	962b      	str	r6, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c55c:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c55e:	2502      	movs	r5, #2
 800c560:	9531      	str	r5, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c566:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c568:	2304      	movs	r3, #4
 800c56a:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800c56c:	22d8      	movs	r2, #216	; 0xd8
 800c56e:	9234      	str	r2, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c570:	9535      	str	r5, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c572:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c574:	a82b      	add	r0, sp, #172	; 0xac
 800c576:	f001 fd79 	bl	800e06c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800c57a:	f001 fd39 	bl	800dff0 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c57e:	230f      	movs	r3, #15
 800c580:	9326      	str	r3, [sp, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c582:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c584:	9428      	str	r4, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c586:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c58a:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c58c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c590:	932a      	str	r3, [sp, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800c592:	2107      	movs	r1, #7
 800c594:	a826      	add	r0, sp, #152	; 0x98
 800c596:	f001 ffbd 	bl	800e514 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 800c59a:	4b0a      	ldr	r3, [pc, #40]	; (800c5c4 <_Z18SystemClock_Configv+0xbc>)
 800c59c:	9302      	str	r3, [sp, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800c59e:	9613      	str	r6, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 800c5a0:	2310      	movs	r3, #16
 800c5a2:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 800c5a4:	2340      	movs	r3, #64	; 0x40
 800c5a6:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 800c5a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c5ac:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800c5ae:	941e      	str	r4, [sp, #120]	; 0x78
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800c5b0:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c5b2:	a802      	add	r0, sp, #8
 800c5b4:	f002 f8a4 	bl	800e700 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800c5b8:	b038      	add	sp, #224	; 0xe0
 800c5ba:	bd70      	pop	{r4, r5, r6, pc}
 800c5bc:	40023800 	.word	0x40023800
 800c5c0:	40007000 	.word	0x40007000
 800c5c4:	08022340 	.word	0x08022340

0800c5c8 <main>:
{
 800c5c8:	b508      	push	{r3, lr}
  HAL_Init();
 800c5ca:	f000 fcc7 	bl	800cf5c <HAL_Init>
  SystemClock_Config();
 800c5ce:	f7ff ff9b 	bl	800c508 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800c5d2:	f7fe ff9b 	bl	800b50c <MX_GPIO_Init>
  MX_DMA_Init();
 800c5d6:	f7fe fe95 	bl	800b304 <MX_DMA_Init>
  MX_DFSDM1_Init();
 800c5da:	f7fe fd19 	bl	800b010 <MX_DFSDM1_Init>
  MX_I2C4_Init();
 800c5de:	f7ff f84f 	bl	800b680 <MX_I2C4_Init>
  MX_SPI1_Init();
 800c5e2:	f000 f823 	bl	800c62c <MX_SPI1_Init>
  MX_TIM1_Init();
 800c5e6:	f000 f9f1 	bl	800c9cc <MX_TIM1_Init>
  MX_UART4_Init();
 800c5ea:	f000 fadf 	bl	800cbac <MX_UART4_Init>
  MX_UART8_Init();
 800c5ee:	f000 fb05 	bl	800cbfc <MX_UART8_Init>
  MX_USART1_UART_Init();
 800c5f2:	f000 fb23 	bl	800cc3c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800c5f6:	f000 fb3d 	bl	800cc74 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800c5fa:	f000 fa7f 	bl	800cafc <MX_TIM2_Init>
  MX_TIM3_Init();
 800c5fe:	f000 f919 	bl	800c834 <MX_TIM3_Init>
  SystemInitialization();
 800c602:	f7fe fcc9 	bl	800af98 <SystemInitialization>
  MX_FREERTOS_Init();
 800c606:	f7fe febf 	bl	800b388 <MX_FREERTOS_Init>
  osKernelStart();
 800c60a:	f004 f880 	bl	801070e <osKernelStart>
 800c60e:	e7fe      	b.n	800c60e <main+0x46>

0800c610 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800c612:	6802      	ldr	r2, [r0, #0]
 800c614:	4b03      	ldr	r3, [pc, #12]	; (800c624 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800c616:	429a      	cmp	r2, r3
 800c618:	d000      	beq.n	800c61c <HAL_TIM_PeriodElapsedCallback+0xc>
 800c61a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800c61c:	f000 fcb4 	bl	800cf88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800c620:	e7fb      	b.n	800c61a <HAL_TIM_PeriodElapsedCallback+0xa>
 800c622:	bf00      	nop
 800c624:	40000800 	.word	0x40000800

0800c628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c628:	4770      	bx	lr
	...

0800c62c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800c62c:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 800c62e:	4810      	ldr	r0, [pc, #64]	; (800c670 <MX_SPI1_Init+0x44>)
 800c630:	4b10      	ldr	r3, [pc, #64]	; (800c674 <MX_SPI1_Init+0x48>)
 800c632:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c634:	f44f 7382 	mov.w	r3, #260	; 0x104
 800c638:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c63a:	2300      	movs	r3, #0
 800c63c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c63e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800c642:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c644:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c646:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c64c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800c64e:	2230      	movs	r2, #48	; 0x30
 800c650:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c652:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c654:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c656:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800c658:	2207      	movs	r2, #7
 800c65a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c65c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c65e:	2308      	movs	r3, #8
 800c660:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c662:	f002 fc3b 	bl	800eedc <HAL_SPI_Init>
 800c666:	b900      	cbnz	r0, 800c66a <MX_SPI1_Init+0x3e>
 800c668:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800c66a:	f7ff ffdd 	bl	800c628 <Error_Handler>
  }

}
 800c66e:	e7fb      	b.n	800c668 <MX_SPI1_Init+0x3c>
 800c670:	20007a38 	.word	0x20007a38
 800c674:	40013000 	.word	0x40013000

0800c678 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c67c:	2300      	movs	r3, #0
 800c67e:	9303      	str	r3, [sp, #12]
 800c680:	9304      	str	r3, [sp, #16]
 800c682:	9305      	str	r3, [sp, #20]
 800c684:	9306      	str	r3, [sp, #24]
 800c686:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 800c688:	6802      	ldr	r2, [r0, #0]
 800c68a:	4b1d      	ldr	r3, [pc, #116]	; (800c700 <HAL_SPI_MspInit+0x88>)
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d001      	beq.n	800c694 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800c690:	b008      	add	sp, #32
 800c692:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c694:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800c698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c69a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c69e:	645a      	str	r2, [r3, #68]	; 0x44
 800c6a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c6a6:	9200      	str	r2, [sp, #0]
 800c6a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c6aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6ac:	f042 0208 	orr.w	r2, r2, #8
 800c6b0:	631a      	str	r2, [r3, #48]	; 0x30
 800c6b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6b4:	f002 0208 	and.w	r2, r2, #8
 800c6b8:	9201      	str	r2, [sp, #4]
 800c6ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6be:	f042 0202 	orr.w	r2, r2, #2
 800c6c2:	631a      	str	r2, [r3, #48]	; 0x30
 800c6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c6:	f003 0302 	and.w	r3, r3, #2
 800c6ca:	9302      	str	r3, [sp, #8]
 800c6cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c6ce:	2380      	movs	r3, #128	; 0x80
 800c6d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6d2:	2602      	movs	r6, #2
 800c6d4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6d6:	2503      	movs	r5, #3
 800c6d8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c6da:	2405      	movs	r4, #5
 800c6dc:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c6de:	a903      	add	r1, sp, #12
 800c6e0:	4808      	ldr	r0, [pc, #32]	; (800c704 <HAL_SPI_MspInit+0x8c>)
 800c6e2:	f001 fad5 	bl	800dc90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800c6e6:	2318      	movs	r3, #24
 800c6e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6ea:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6f0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c6f2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c6f4:	a903      	add	r1, sp, #12
 800c6f6:	4804      	ldr	r0, [pc, #16]	; (800c708 <HAL_SPI_MspInit+0x90>)
 800c6f8:	f001 faca 	bl	800dc90 <HAL_GPIO_Init>
}
 800c6fc:	e7c8      	b.n	800c690 <HAL_SPI_MspInit+0x18>
 800c6fe:	bf00      	nop
 800c700:	40013000 	.word	0x40013000
 800c704:	40020c00 	.word	0x40020c00
 800c708:	40020400 	.word	0x40020400

0800c70c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c70c:	b500      	push	{lr}
 800c70e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800c710:	4b0d      	ldr	r3, [pc, #52]	; (800c748 <HAL_MspInit+0x3c>)
 800c712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c714:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c718:	641a      	str	r2, [r3, #64]	; 0x40
 800c71a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c71c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800c720:	9200      	str	r2, [sp, #0]
 800c722:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c72a:	645a      	str	r2, [r3, #68]	; 0x44
 800c72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c72e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c732:	9301      	str	r3, [sp, #4]
 800c734:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c736:	2200      	movs	r2, #0
 800c738:	210f      	movs	r1, #15
 800c73a:	f06f 0001 	mvn.w	r0, #1
 800c73e:	f000 fc5b 	bl	800cff8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c742:	b003      	add	sp, #12
 800c744:	f85d fb04 	ldr.w	pc, [sp], #4
 800c748:	40023800 	.word	0x40023800

0800c74c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c74c:	b500      	push	{lr}
 800c74e:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800c750:	2200      	movs	r2, #0
 800c752:	4601      	mov	r1, r0
 800c754:	201e      	movs	r0, #30
 800c756:	f000 fc4f 	bl	800cff8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800c75a:	201e      	movs	r0, #30
 800c75c:	f000 fc7c 	bl	800d058 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800c760:	4b15      	ldr	r3, [pc, #84]	; (800c7b8 <HAL_InitTick+0x6c>)
 800c762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c764:	f042 0204 	orr.w	r2, r2, #4
 800c768:	641a      	str	r2, [r3, #64]	; 0x40
 800c76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c774:	a902      	add	r1, sp, #8
 800c776:	a803      	add	r0, sp, #12
 800c778:	f001 ffa4 	bl	800e6c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c77c:	f001 ff82 	bl	800e684 <HAL_RCC_GetPCLK1Freq>
 800c780:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c782:	480e      	ldr	r0, [pc, #56]	; (800c7bc <HAL_InitTick+0x70>)
 800c784:	fba0 2303 	umull	r2, r3, r0, r3
 800c788:	0c9b      	lsrs	r3, r3, #18
 800c78a:	3b01      	subs	r3, #1
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800c78c:	480c      	ldr	r0, [pc, #48]	; (800c7c0 <HAL_InitTick+0x74>)
 800c78e:	4a0d      	ldr	r2, [pc, #52]	; (800c7c4 <HAL_InitTick+0x78>)
 800c790:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800c792:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c796:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800c798:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c79e:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800c7a0:	f003 f87e 	bl	800f8a0 <HAL_TIM_Base_Init>
 800c7a4:	b118      	cbz	r0, 800c7ae <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c7a6:	2001      	movs	r0, #1
}
 800c7a8:	b009      	add	sp, #36	; 0x24
 800c7aa:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim4);
 800c7ae:	4804      	ldr	r0, [pc, #16]	; (800c7c0 <HAL_InitTick+0x74>)
 800c7b0:	f002 fef7 	bl	800f5a2 <HAL_TIM_Base_Start_IT>
 800c7b4:	e7f8      	b.n	800c7a8 <HAL_InitTick+0x5c>
 800c7b6:	bf00      	nop
 800c7b8:	40023800 	.word	0x40023800
 800c7bc:	431bde83 	.word	0x431bde83
 800c7c0:	20007a9c 	.word	0x20007a9c
 800c7c4:	40000800 	.word	0x40000800

0800c7c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c7c8:	4770      	bx	lr

0800c7ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c7ca:	e7fe      	b.n	800c7ca <HardFault_Handler>

0800c7cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c7cc:	e7fe      	b.n	800c7cc <MemManage_Handler>

0800c7ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c7ce:	e7fe      	b.n	800c7ce <BusFault_Handler>

0800c7d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c7d0:	e7fe      	b.n	800c7d0 <UsageFault_Handler>

0800c7d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c7d2:	4770      	bx	lr

0800c7d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800c7d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800c7d6:	4802      	ldr	r0, [pc, #8]	; (800c7e0 <DMA1_Stream2_IRQHandler+0xc>)
 800c7d8:	f000 ffa6 	bl	800d728 <HAL_DMA_IRQHandler>
 800c7dc:	bd08      	pop	{r3, pc}
 800c7de:	bf00      	nop
 800c7e0:	20007b9c 	.word	0x20007b9c

0800c7e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800c7e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800c7e6:	4802      	ldr	r0, [pc, #8]	; (800c7f0 <TIM4_IRQHandler+0xc>)
 800c7e8:	f002 feec 	bl	800f5c4 <HAL_TIM_IRQHandler>
 800c7ec:	bd08      	pop	{r3, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20007a9c 	.word	0x20007a9c

0800c7f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800c7f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800c7f6:	4802      	ldr	r0, [pc, #8]	; (800c800 <DMA2_Stream0_IRQHandler+0xc>)
 800c7f8:	f000 ff96 	bl	800d728 <HAL_DMA_IRQHandler>
 800c7fc:	bd08      	pop	{r3, pc}
 800c7fe:	bf00      	nop
 800c800:	200078cc 	.word	0x200078cc

0800c804 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800c804:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 800c806:	4802      	ldr	r0, [pc, #8]	; (800c810 <DMA2_Stream1_IRQHandler+0xc>)
 800c808:	f000 ff8e 	bl	800d728 <HAL_DMA_IRQHandler>
 800c80c:	bd08      	pop	{r3, pc}
 800c80e:	bf00      	nop
 800c810:	2000786c 	.word	0x2000786c

0800c814 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800c814:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800c816:	4802      	ldr	r0, [pc, #8]	; (800c820 <DMA2_Stream2_IRQHandler+0xc>)
 800c818:	f000 ff86 	bl	800d728 <HAL_DMA_IRQHandler>
 800c81c:	bd08      	pop	{r3, pc}
 800c81e:	bf00      	nop
 800c820:	20007ccc 	.word	0x20007ccc

0800c824 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800c824:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800c826:	4802      	ldr	r0, [pc, #8]	; (800c830 <DMA2_Stream7_IRQHandler+0xc>)
 800c828:	f000 ff7e 	bl	800d728 <HAL_DMA_IRQHandler>
 800c82c:	bd08      	pop	{r3, pc}
 800c82e:	bf00      	nop
 800c830:	20007c6c 	.word	0x20007c6c

0800c834 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800c834:	b500      	push	{lr}
 800c836:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c838:	2300      	movs	r3, #0
 800c83a:	9304      	str	r3, [sp, #16]
 800c83c:	9305      	str	r3, [sp, #20]
 800c83e:	9306      	str	r3, [sp, #24]
 800c840:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	9302      	str	r3, [sp, #8]
 800c846:	9303      	str	r3, [sp, #12]

  htim3.Instance = TIM3;
 800c848:	4815      	ldr	r0, [pc, #84]	; (800c8a0 <MX_TIM3_Init+0x6c>)
 800c84a:	4a16      	ldr	r2, [pc, #88]	; (800c8a4 <MX_TIM3_Init+0x70>)
 800c84c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 107;
 800c84e:	226b      	movs	r2, #107	; 0x6b
 800c850:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c852:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 50000;
 800c854:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c858:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c85a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c85c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800c85e:	f003 f81f 	bl	800f8a0 <HAL_TIM_Base_Init>
 800c862:	b998      	cbnz	r0, 800c88c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c864:	a908      	add	r1, sp, #32
 800c866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c86a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800c86e:	480c      	ldr	r0, [pc, #48]	; (800c8a0 <MX_TIM3_Init+0x6c>)
 800c870:	f003 f916 	bl	800faa0 <HAL_TIM_ConfigClockSource>
 800c874:	b968      	cbnz	r0, 800c892 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c876:	2300      	movs	r3, #0
 800c878:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c87a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c87c:	a901      	add	r1, sp, #4
 800c87e:	4808      	ldr	r0, [pc, #32]	; (800c8a0 <MX_TIM3_Init+0x6c>)
 800c880:	f003 fa3a 	bl	800fcf8 <HAL_TIMEx_MasterConfigSynchronization>
 800c884:	b940      	cbnz	r0, 800c898 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
  }

}
 800c886:	b009      	add	sp, #36	; 0x24
 800c888:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800c88c:	f7ff fecc 	bl	800c628 <Error_Handler>
 800c890:	e7e8      	b.n	800c864 <MX_TIM3_Init+0x30>
    Error_Handler();
 800c892:	f7ff fec9 	bl	800c628 <Error_Handler>
 800c896:	e7ee      	b.n	800c876 <MX_TIM3_Init+0x42>
    Error_Handler();
 800c898:	f7ff fec6 	bl	800c628 <Error_Handler>
}
 800c89c:	e7f3      	b.n	800c886 <MX_TIM3_Init+0x52>
 800c89e:	bf00      	nop
 800c8a0:	20007adc 	.word	0x20007adc
 800c8a4:	40000400 	.word	0x40000400

0800c8a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c8a8:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM1)
 800c8aa:	6803      	ldr	r3, [r0, #0]
 800c8ac:	4a16      	ldr	r2, [pc, #88]	; (800c908 <HAL_TIM_Base_MspInit+0x60>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d007      	beq.n	800c8c2 <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 800c8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8b6:	d00f      	beq.n	800c8d8 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 800c8b8:	4a14      	ldr	r2, [pc, #80]	; (800c90c <HAL_TIM_Base_MspInit+0x64>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d018      	beq.n	800c8f0 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800c8be:	b004      	add	sp, #16
 800c8c0:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c8c2:	4b13      	ldr	r3, [pc, #76]	; (800c910 <HAL_TIM_Base_MspInit+0x68>)
 800c8c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8c6:	f042 0201 	orr.w	r2, r2, #1
 800c8ca:	645a      	str	r2, [r3, #68]	; 0x44
 800c8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ce:	f003 0301 	and.w	r3, r3, #1
 800c8d2:	9301      	str	r3, [sp, #4]
 800c8d4:	9b01      	ldr	r3, [sp, #4]
 800c8d6:	e7f2      	b.n	800c8be <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c8d8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800c8dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8de:	f042 0201 	orr.w	r2, r2, #1
 800c8e2:	641a      	str	r2, [r3, #64]	; 0x40
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e6:	f003 0301 	and.w	r3, r3, #1
 800c8ea:	9302      	str	r3, [sp, #8]
 800c8ec:	9b02      	ldr	r3, [sp, #8]
 800c8ee:	e7e6      	b.n	800c8be <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c8f0:	4b07      	ldr	r3, [pc, #28]	; (800c910 <HAL_TIM_Base_MspInit+0x68>)
 800c8f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8f4:	f042 0202 	orr.w	r2, r2, #2
 800c8f8:	641a      	str	r2, [r3, #64]	; 0x40
 800c8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fc:	f003 0302 	and.w	r3, r3, #2
 800c900:	9303      	str	r3, [sp, #12]
 800c902:	9b03      	ldr	r3, [sp, #12]
}
 800c904:	e7db      	b.n	800c8be <HAL_TIM_Base_MspInit+0x16>
 800c906:	bf00      	nop
 800c908:	40010000 	.word	0x40010000
 800c90c:	40000400 	.word	0x40000400
 800c910:	40023800 	.word	0x40023800

0800c914 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c914:	b530      	push	{r4, r5, lr}
 800c916:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c918:	2300      	movs	r3, #0
 800c91a:	9303      	str	r3, [sp, #12]
 800c91c:	9304      	str	r3, [sp, #16]
 800c91e:	9305      	str	r3, [sp, #20]
 800c920:	9306      	str	r3, [sp, #24]
 800c922:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 800c924:	6803      	ldr	r3, [r0, #0]
 800c926:	4a25      	ldr	r2, [pc, #148]	; (800c9bc <HAL_TIM_MspPostInit+0xa8>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d004      	beq.n	800c936 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 800c92c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c930:	d02b      	beq.n	800c98a <HAL_TIM_MspPostInit+0x76>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800c932:	b009      	add	sp, #36	; 0x24
 800c934:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c936:	4b22      	ldr	r3, [pc, #136]	; (800c9c0 <HAL_TIM_MspPostInit+0xac>)
 800c938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c93a:	f042 0201 	orr.w	r2, r2, #1
 800c93e:	631a      	str	r2, [r3, #48]	; 0x30
 800c940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c942:	f002 0201 	and.w	r2, r2, #1
 800c946:	9200      	str	r2, [sp, #0]
 800c948:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c94a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c94c:	f042 0210 	orr.w	r2, r2, #16
 800c950:	631a      	str	r2, [r3, #48]	; 0x30
 800c952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c954:	f003 0310 	and.w	r3, r3, #16
 800c958:	9301      	str	r3, [sp, #4]
 800c95a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c95c:	2380      	movs	r3, #128	; 0x80
 800c95e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c960:	2502      	movs	r5, #2
 800c962:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c964:	2401      	movs	r4, #1
 800c966:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c968:	a903      	add	r1, sp, #12
 800c96a:	4816      	ldr	r0, [pc, #88]	; (800c9c4 <HAL_TIM_MspPostInit+0xb0>)
 800c96c:	f001 f990 	bl	800dc90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 800c970:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800c974:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c976:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c978:	2300      	movs	r3, #0
 800c97a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c97c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c97e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c980:	a903      	add	r1, sp, #12
 800c982:	4811      	ldr	r0, [pc, #68]	; (800c9c8 <HAL_TIM_MspPostInit+0xb4>)
 800c984:	f001 f984 	bl	800dc90 <HAL_GPIO_Init>
 800c988:	e7d3      	b.n	800c932 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c98a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800c98e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c990:	f042 0201 	orr.w	r2, r2, #1
 800c994:	631a      	str	r2, [r3, #48]	; 0x30
 800c996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	9302      	str	r3, [sp, #8]
 800c99e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800c9a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9a6:	2302      	movs	r3, #2
 800c9a8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c9ae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9b0:	a903      	add	r1, sp, #12
 800c9b2:	4804      	ldr	r0, [pc, #16]	; (800c9c4 <HAL_TIM_MspPostInit+0xb0>)
 800c9b4:	f001 f96c 	bl	800dc90 <HAL_GPIO_Init>
}
 800c9b8:	e7bb      	b.n	800c932 <HAL_TIM_MspPostInit+0x1e>
 800c9ba:	bf00      	nop
 800c9bc:	40010000 	.word	0x40010000
 800c9c0:	40023800 	.word	0x40023800
 800c9c4:	40020000 	.word	0x40020000
 800c9c8:	40021000 	.word	0x40021000

0800c9cc <MX_TIM1_Init>:
{
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	b09a      	sub	sp, #104	; 0x68
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c9d0:	2400      	movs	r4, #0
 800c9d2:	9416      	str	r4, [sp, #88]	; 0x58
 800c9d4:	9417      	str	r4, [sp, #92]	; 0x5c
 800c9d6:	9418      	str	r4, [sp, #96]	; 0x60
 800c9d8:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c9da:	9413      	str	r4, [sp, #76]	; 0x4c
 800c9dc:	9414      	str	r4, [sp, #80]	; 0x50
 800c9de:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c9e0:	940c      	str	r4, [sp, #48]	; 0x30
 800c9e2:	940d      	str	r4, [sp, #52]	; 0x34
 800c9e4:	940e      	str	r4, [sp, #56]	; 0x38
 800c9e6:	940f      	str	r4, [sp, #60]	; 0x3c
 800c9e8:	9410      	str	r4, [sp, #64]	; 0x40
 800c9ea:	9411      	str	r4, [sp, #68]	; 0x44
 800c9ec:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c9ee:	222c      	movs	r2, #44	; 0x2c
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	a801      	add	r0, sp, #4
 800c9f4:	f009 f832 	bl	8015a5c <memset>
  htim1.Instance = TIM1;
 800c9f8:	483e      	ldr	r0, [pc, #248]	; (800caf4 <MX_TIM1_Init+0x128>)
 800c9fa:	4b3f      	ldr	r3, [pc, #252]	; (800caf8 <MX_TIM1_Init+0x12c>)
 800c9fc:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800c9fe:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800ca00:	2320      	movs	r3, #32
 800ca02:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 2160;
 800ca04:	f44f 6307 	mov.w	r3, #2160	; 0x870
 800ca08:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ca0a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800ca0c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ca0e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ca10:	f002 ff46 	bl	800f8a0 <HAL_TIM_Base_Init>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d155      	bne.n	800cac4 <MX_TIM1_Init+0xf8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ca18:	a91a      	add	r1, sp, #104	; 0x68
 800ca1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca1e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ca22:	4834      	ldr	r0, [pc, #208]	; (800caf4 <MX_TIM1_Init+0x128>)
 800ca24:	f003 f83c 	bl	800faa0 <HAL_TIM_ConfigClockSource>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d14e      	bne.n	800caca <MX_TIM1_Init+0xfe>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800ca2c:	4831      	ldr	r0, [pc, #196]	; (800caf4 <MX_TIM1_Init+0x128>)
 800ca2e:	f002 ff50 	bl	800f8d2 <HAL_TIM_PWM_Init>
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d14c      	bne.n	800cad0 <MX_TIM1_Init+0x104>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ca36:	2300      	movs	r3, #0
 800ca38:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ca3a:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca3c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ca3e:	a913      	add	r1, sp, #76	; 0x4c
 800ca40:	482c      	ldr	r0, [pc, #176]	; (800caf4 <MX_TIM1_Init+0x128>)
 800ca42:	f003 f959 	bl	800fcf8 <HAL_TIMEx_MasterConfigSynchronization>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d145      	bne.n	800cad6 <MX_TIM1_Init+0x10a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ca4a:	2360      	movs	r3, #96	; 0x60
 800ca4c:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 580;
 800ca4e:	f44f 7311 	mov.w	r3, #580	; 0x244
 800ca52:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ca54:	2200      	movs	r2, #0
 800ca56:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ca58:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ca5a:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ca5c:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ca5e:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ca60:	a90c      	add	r1, sp, #48	; 0x30
 800ca62:	4824      	ldr	r0, [pc, #144]	; (800caf4 <MX_TIM1_Init+0x128>)
 800ca64:	f003 f9c0 	bl	800fde8 <HAL_TIM_PWM_ConfigChannel>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d137      	bne.n	800cadc <MX_TIM1_Init+0x110>
  sConfigOC.Pulse = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ca70:	2204      	movs	r2, #4
 800ca72:	a90c      	add	r1, sp, #48	; 0x30
 800ca74:	481f      	ldr	r0, [pc, #124]	; (800caf4 <MX_TIM1_Init+0x128>)
 800ca76:	f003 f9b7 	bl	800fde8 <HAL_TIM_PWM_ConfigChannel>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d131      	bne.n	800cae2 <MX_TIM1_Init+0x116>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ca7e:	2208      	movs	r2, #8
 800ca80:	a90c      	add	r1, sp, #48	; 0x30
 800ca82:	481c      	ldr	r0, [pc, #112]	; (800caf4 <MX_TIM1_Init+0x128>)
 800ca84:	f003 f9b0 	bl	800fde8 <HAL_TIM_PWM_ConfigChannel>
 800ca88:	bb70      	cbnz	r0, 800cae8 <MX_TIM1_Init+0x11c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ca8e:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ca90:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 45;
 800ca92:	222d      	movs	r2, #45	; 0x2d
 800ca94:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ca96:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ca98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ca9c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800ca9e:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800caa0:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800caa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800caa6:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800caa8:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800caaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800caae:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800cab0:	a901      	add	r1, sp, #4
 800cab2:	4810      	ldr	r0, [pc, #64]	; (800caf4 <MX_TIM1_Init+0x128>)
 800cab4:	f003 f94c 	bl	800fd50 <HAL_TIMEx_ConfigBreakDeadTime>
 800cab8:	b9c8      	cbnz	r0, 800caee <MX_TIM1_Init+0x122>
  HAL_TIM_MspPostInit(&htim1);
 800caba:	480e      	ldr	r0, [pc, #56]	; (800caf4 <MX_TIM1_Init+0x128>)
 800cabc:	f7ff ff2a 	bl	800c914 <HAL_TIM_MspPostInit>
}
 800cac0:	b01a      	add	sp, #104	; 0x68
 800cac2:	bd10      	pop	{r4, pc}
    Error_Handler();
 800cac4:	f7ff fdb0 	bl	800c628 <Error_Handler>
 800cac8:	e7a6      	b.n	800ca18 <MX_TIM1_Init+0x4c>
    Error_Handler();
 800caca:	f7ff fdad 	bl	800c628 <Error_Handler>
 800cace:	e7ad      	b.n	800ca2c <MX_TIM1_Init+0x60>
    Error_Handler();
 800cad0:	f7ff fdaa 	bl	800c628 <Error_Handler>
 800cad4:	e7af      	b.n	800ca36 <MX_TIM1_Init+0x6a>
    Error_Handler();
 800cad6:	f7ff fda7 	bl	800c628 <Error_Handler>
 800cada:	e7b6      	b.n	800ca4a <MX_TIM1_Init+0x7e>
    Error_Handler();
 800cadc:	f7ff fda4 	bl	800c628 <Error_Handler>
 800cae0:	e7c4      	b.n	800ca6c <MX_TIM1_Init+0xa0>
    Error_Handler();
 800cae2:	f7ff fda1 	bl	800c628 <Error_Handler>
 800cae6:	e7ca      	b.n	800ca7e <MX_TIM1_Init+0xb2>
    Error_Handler();
 800cae8:	f7ff fd9e 	bl	800c628 <Error_Handler>
 800caec:	e7cd      	b.n	800ca8a <MX_TIM1_Init+0xbe>
    Error_Handler();
 800caee:	f7ff fd9b 	bl	800c628 <Error_Handler>
 800caf2:	e7e2      	b.n	800caba <MX_TIM1_Init+0xee>
 800caf4:	20007b1c 	.word	0x20007b1c
 800caf8:	40010000 	.word	0x40010000

0800cafc <MX_TIM2_Init>:
{
 800cafc:	b500      	push	{lr}
 800cafe:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cb00:	2300      	movs	r3, #0
 800cb02:	930a      	str	r3, [sp, #40]	; 0x28
 800cb04:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb06:	930c      	str	r3, [sp, #48]	; 0x30
 800cb08:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cb0a:	9307      	str	r3, [sp, #28]
 800cb0c:	9308      	str	r3, [sp, #32]
 800cb0e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	9301      	str	r3, [sp, #4]
 800cb14:	9302      	str	r3, [sp, #8]
 800cb16:	9303      	str	r3, [sp, #12]
 800cb18:	9304      	str	r3, [sp, #16]
 800cb1a:	9305      	str	r3, [sp, #20]
 800cb1c:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 800cb1e:	4822      	ldr	r0, [pc, #136]	; (800cba8 <MX_TIM2_Init+0xac>)
 800cb20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cb24:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 107;
 800cb26:	226b      	movs	r2, #107	; 0x6b
 800cb28:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb2a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 50000;
 800cb2c:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cb30:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cb32:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cb34:	2380      	movs	r3, #128	; 0x80
 800cb36:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800cb38:	f002 feb2 	bl	800f8a0 <HAL_TIM_Base_Init>
 800cb3c:	bb28      	cbnz	r0, 800cb8a <MX_TIM2_Init+0x8e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cb3e:	a90e      	add	r1, sp, #56	; 0x38
 800cb40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb44:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800cb48:	4817      	ldr	r0, [pc, #92]	; (800cba8 <MX_TIM2_Init+0xac>)
 800cb4a:	f002 ffa9 	bl	800faa0 <HAL_TIM_ConfigClockSource>
 800cb4e:	b9f8      	cbnz	r0, 800cb90 <MX_TIM2_Init+0x94>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800cb50:	4815      	ldr	r0, [pc, #84]	; (800cba8 <MX_TIM2_Init+0xac>)
 800cb52:	f002 febe 	bl	800f8d2 <HAL_TIM_PWM_Init>
 800cb56:	b9f0      	cbnz	r0, 800cb96 <MX_TIM2_Init+0x9a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cb5c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800cb5e:	a907      	add	r1, sp, #28
 800cb60:	4811      	ldr	r0, [pc, #68]	; (800cba8 <MX_TIM2_Init+0xac>)
 800cb62:	f003 f8c9 	bl	800fcf8 <HAL_TIMEx_MasterConfigSynchronization>
 800cb66:	b9c8      	cbnz	r0, 800cb9c <MX_TIM2_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cb68:	2360      	movs	r3, #96	; 0x60
 800cb6a:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cb70:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cb72:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cb74:	4669      	mov	r1, sp
 800cb76:	480c      	ldr	r0, [pc, #48]	; (800cba8 <MX_TIM2_Init+0xac>)
 800cb78:	f003 f936 	bl	800fde8 <HAL_TIM_PWM_ConfigChannel>
 800cb7c:	b988      	cbnz	r0, 800cba2 <MX_TIM2_Init+0xa6>
  HAL_TIM_MspPostInit(&htim2);
 800cb7e:	480a      	ldr	r0, [pc, #40]	; (800cba8 <MX_TIM2_Init+0xac>)
 800cb80:	f7ff fec8 	bl	800c914 <HAL_TIM_MspPostInit>
}
 800cb84:	b00f      	add	sp, #60	; 0x3c
 800cb86:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800cb8a:	f7ff fd4d 	bl	800c628 <Error_Handler>
 800cb8e:	e7d6      	b.n	800cb3e <MX_TIM2_Init+0x42>
    Error_Handler();
 800cb90:	f7ff fd4a 	bl	800c628 <Error_Handler>
 800cb94:	e7dc      	b.n	800cb50 <MX_TIM2_Init+0x54>
    Error_Handler();
 800cb96:	f7ff fd47 	bl	800c628 <Error_Handler>
 800cb9a:	e7dd      	b.n	800cb58 <MX_TIM2_Init+0x5c>
    Error_Handler();
 800cb9c:	f7ff fd44 	bl	800c628 <Error_Handler>
 800cba0:	e7e2      	b.n	800cb68 <MX_TIM2_Init+0x6c>
    Error_Handler();
 800cba2:	f7ff fd41 	bl	800c628 <Error_Handler>
 800cba6:	e7ea      	b.n	800cb7e <MX_TIM2_Init+0x82>
 800cba8:	20007b5c 	.word	0x20007b5c

0800cbac <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800cbac:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 800cbae:	4810      	ldr	r0, [pc, #64]	; (800cbf0 <MX_UART4_Init+0x44>)
 800cbb0:	4b10      	ldr	r3, [pc, #64]	; (800cbf4 <MX_UART4_Init+0x48>)
 800cbb2:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 8000000;
 800cbb4:	4b10      	ldr	r3, [pc, #64]	; (800cbf8 <MX_UART4_Init+0x4c>)
 800cbb6:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800cbbc:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800cbbe:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_RX;
 800cbc0:	2204      	movs	r2, #4
 800cbc2:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cbc4:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800cbc6:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cbc8:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT
 800cbca:	23b0      	movs	r3, #176	; 0xb0
 800cbcc:	6243      	str	r3, [r0, #36]	; 0x24
                              |UART_ADVFEATURE_MSBFIRST_INIT;
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800cbce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbd2:	6383      	str	r3, [r0, #56]	; 0x38
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800cbd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cbd8:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 800cbda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cbde:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800cbe0:	f003 fd5b 	bl	801069a <HAL_UART_Init>
 800cbe4:	b900      	cbnz	r0, 800cbe8 <MX_UART4_Init+0x3c>
 800cbe6:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800cbe8:	f7ff fd1e 	bl	800c628 <Error_Handler>
  }

}
 800cbec:	e7fb      	b.n	800cbe6 <MX_UART4_Init+0x3a>
 800cbee:	bf00      	nop
 800cbf0:	20007e0c 	.word	0x20007e0c
 800cbf4:	40004c00 	.word	0x40004c00
 800cbf8:	007a1200 	.word	0x007a1200

0800cbfc <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800cbfc:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 800cbfe:	480c      	ldr	r0, [pc, #48]	; (800cc30 <MX_UART8_Init+0x34>)
 800cc00:	4b0c      	ldr	r3, [pc, #48]	; (800cc34 <MX_UART8_Init+0x38>)
 800cc02:	6003      	str	r3, [r0, #0]
  huart8.Init.BaudRate = 26666666;
 800cc04:	4b0c      	ldr	r3, [pc, #48]	; (800cc38 <MX_UART8_Init+0x3c>)
 800cc06:	6043      	str	r3, [r0, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800cc0c:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800cc0e:	6103      	str	r3, [r0, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800cc10:	220c      	movs	r2, #12
 800cc12:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cc14:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 800cc16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cc1a:	61c2      	str	r2, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cc1c:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cc1e:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800cc20:	f003 fd3b 	bl	801069a <HAL_UART_Init>
 800cc24:	b900      	cbnz	r0, 800cc28 <MX_UART8_Init+0x2c>
 800cc26:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800cc28:	f7ff fcfe 	bl	800c628 <Error_Handler>
  }

}
 800cc2c:	e7fb      	b.n	800cc26 <MX_UART8_Init+0x2a>
 800cc2e:	bf00      	nop
 800cc30:	20007d9c 	.word	0x20007d9c
 800cc34:	40007c00 	.word	0x40007c00
 800cc38:	0196e6aa 	.word	0x0196e6aa

0800cc3c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800cc3c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800cc3e:	480b      	ldr	r0, [pc, #44]	; (800cc6c <MX_USART1_UART_Init+0x30>)
 800cc40:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <MX_USART1_UART_Init+0x34>)
 800cc42:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800cc44:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 800cc48:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cc4e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cc50:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cc52:	220c      	movs	r2, #12
 800cc54:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cc56:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cc58:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cc5a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cc5c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cc5e:	f003 fd1c 	bl	801069a <HAL_UART_Init>
 800cc62:	b900      	cbnz	r0, 800cc66 <MX_USART1_UART_Init+0x2a>
 800cc64:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800cc66:	f7ff fcdf 	bl	800c628 <Error_Handler>
  }

}
 800cc6a:	e7fb      	b.n	800cc64 <MX_USART1_UART_Init+0x28>
 800cc6c:	20007d2c 	.word	0x20007d2c
 800cc70:	40011000 	.word	0x40011000

0800cc74 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800cc74:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800cc76:	480c      	ldr	r0, [pc, #48]	; (800cca8 <MX_USART3_UART_Init+0x34>)
 800cc78:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <MX_USART3_UART_Init+0x38>)
 800cc7a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 26666666;
 800cc7c:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <MX_USART3_UART_Init+0x3c>)
 800cc7e:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800cc80:	2300      	movs	r3, #0
 800cc82:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800cc84:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800cc86:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800cc88:	220c      	movs	r2, #12
 800cc8a:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cc8c:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 800cc8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cc92:	61c2      	str	r2, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cc94:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cc96:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800cc98:	f003 fcff 	bl	801069a <HAL_UART_Init>
 800cc9c:	b900      	cbnz	r0, 800cca0 <MX_USART3_UART_Init+0x2c>
 800cc9e:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800cca0:	f7ff fcc2 	bl	800c628 <Error_Handler>
  }

}
 800cca4:	e7fb      	b.n	800cc9e <MX_USART3_UART_Init+0x2a>
 800cca6:	bf00      	nop
 800cca8:	20007bfc 	.word	0x20007bfc
 800ccac:	40004800 	.word	0x40004800
 800ccb0:	0196e6aa 	.word	0x0196e6aa

0800ccb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ccb4:	b510      	push	{r4, lr}
 800ccb6:	b08e      	sub	sp, #56	; 0x38
 800ccb8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccba:	2300      	movs	r3, #0
 800ccbc:	9309      	str	r3, [sp, #36]	; 0x24
 800ccbe:	930a      	str	r3, [sp, #40]	; 0x28
 800ccc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccc2:	930c      	str	r3, [sp, #48]	; 0x30
 800ccc4:	930d      	str	r3, [sp, #52]	; 0x34
  if(uartHandle->Instance==UART4)
 800ccc6:	6803      	ldr	r3, [r0, #0]
 800ccc8:	4a77      	ldr	r2, [pc, #476]	; (800cea8 <HAL_UART_MspInit+0x1f4>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d00b      	beq.n	800cce6 <HAL_UART_MspInit+0x32>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 800ccce:	4a77      	ldr	r2, [pc, #476]	; (800ceac <HAL_UART_MspInit+0x1f8>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d045      	beq.n	800cd60 <HAL_UART_MspInit+0xac>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 800ccd4:	4a76      	ldr	r2, [pc, #472]	; (800ceb0 <HAL_UART_MspInit+0x1fc>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d061      	beq.n	800cd9e <HAL_UART_MspInit+0xea>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800ccda:	4a76      	ldr	r2, [pc, #472]	; (800ceb4 <HAL_UART_MspInit+0x200>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	f000 80c2 	beq.w	800ce66 <HAL_UART_MspInit+0x1b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800cce2:	b00e      	add	sp, #56	; 0x38
 800cce4:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 800cce6:	4b74      	ldr	r3, [pc, #464]	; (800ceb8 <HAL_UART_MspInit+0x204>)
 800cce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ccea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800ccee:	641a      	str	r2, [r3, #64]	; 0x40
 800ccf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ccf2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800ccf6:	9201      	str	r2, [sp, #4]
 800ccf8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ccfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccfc:	f042 0201 	orr.w	r2, r2, #1
 800cd00:	631a      	str	r2, [r3, #48]	; 0x30
 800cd02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd04:	f003 0301 	and.w	r3, r3, #1
 800cd08:	9302      	str	r3, [sp, #8]
 800cd0a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd10:	2202      	movs	r2, #2
 800cd12:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd14:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800cd16:	2308      	movs	r3, #8
 800cd18:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd1a:	a909      	add	r1, sp, #36	; 0x24
 800cd1c:	4867      	ldr	r0, [pc, #412]	; (800cebc <HAL_UART_MspInit+0x208>)
 800cd1e:	f000 ffb7 	bl	800dc90 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800cd22:	4867      	ldr	r0, [pc, #412]	; (800cec0 <HAL_UART_MspInit+0x20c>)
 800cd24:	4b67      	ldr	r3, [pc, #412]	; (800cec4 <HAL_UART_MspInit+0x210>)
 800cd26:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800cd28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd2c:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cd32:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cd34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cd38:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cd3a:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cd3c:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800cd3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd42:	61c2      	str	r2, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800cd44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cd48:	6202      	str	r2, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cd4a:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800cd4c:	f000 fc00 	bl	800d550 <HAL_DMA_Init>
 800cd50:	b918      	cbnz	r0, 800cd5a <HAL_UART_MspInit+0xa6>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800cd52:	4b5b      	ldr	r3, [pc, #364]	; (800cec0 <HAL_UART_MspInit+0x20c>)
 800cd54:	6663      	str	r3, [r4, #100]	; 0x64
 800cd56:	639c      	str	r4, [r3, #56]	; 0x38
 800cd58:	e7c3      	b.n	800cce2 <HAL_UART_MspInit+0x2e>
      Error_Handler();
 800cd5a:	f7ff fc65 	bl	800c628 <Error_Handler>
 800cd5e:	e7f8      	b.n	800cd52 <HAL_UART_MspInit+0x9e>
    __HAL_RCC_UART8_CLK_ENABLE();
 800cd60:	4b55      	ldr	r3, [pc, #340]	; (800ceb8 <HAL_UART_MspInit+0x204>)
 800cd62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800cd68:	641a      	str	r2, [r3, #64]	; 0x40
 800cd6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cd70:	9203      	str	r2, [sp, #12]
 800cd72:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cd74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd76:	f042 0210 	orr.w	r2, r2, #16
 800cd7a:	631a      	str	r2, [r3, #48]	; 0x30
 800cd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7e:	f003 0310 	and.w	r3, r3, #16
 800cd82:	9304      	str	r3, [sp, #16]
 800cd84:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800cd86:	2303      	movs	r3, #3
 800cd88:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd8a:	2202      	movs	r2, #2
 800cd8c:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd8e:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800cd90:	2308      	movs	r3, #8
 800cd92:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cd94:	a909      	add	r1, sp, #36	; 0x24
 800cd96:	484c      	ldr	r0, [pc, #304]	; (800cec8 <HAL_UART_MspInit+0x214>)
 800cd98:	f000 ff7a 	bl	800dc90 <HAL_GPIO_Init>
 800cd9c:	e7a1      	b.n	800cce2 <HAL_UART_MspInit+0x2e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800cd9e:	4b46      	ldr	r3, [pc, #280]	; (800ceb8 <HAL_UART_MspInit+0x204>)
 800cda0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cda2:	f042 0210 	orr.w	r2, r2, #16
 800cda6:	645a      	str	r2, [r3, #68]	; 0x44
 800cda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdaa:	f002 0210 	and.w	r2, r2, #16
 800cdae:	9205      	str	r2, [sp, #20]
 800cdb0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdb4:	f042 0201 	orr.w	r2, r2, #1
 800cdb8:	631a      	str	r2, [r3, #48]	; 0x30
 800cdba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdbc:	f003 0301 	and.w	r3, r3, #1
 800cdc0:	9306      	str	r3, [sp, #24]
 800cdc2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cdc4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800cdc8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdca:	2302      	movs	r3, #2
 800cdcc:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800cdce:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cdd0:	2307      	movs	r3, #7
 800cdd2:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdd4:	a909      	add	r1, sp, #36	; 0x24
 800cdd6:	4839      	ldr	r0, [pc, #228]	; (800cebc <HAL_UART_MspInit+0x208>)
 800cdd8:	f000 ff5a 	bl	800dc90 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800cddc:	483b      	ldr	r0, [pc, #236]	; (800cecc <HAL_UART_MspInit+0x218>)
 800cdde:	4b3c      	ldr	r3, [pc, #240]	; (800ced0 <HAL_UART_MspInit+0x21c>)
 800cde0:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800cde2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cde6:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cde8:	2300      	movs	r3, #0
 800cdea:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cdec:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cdee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cdf2:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cdf4:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cdf6:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800cdf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdfc:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800cdfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ce02:	6202      	str	r2, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ce04:	2204      	movs	r2, #4
 800ce06:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800ce08:	2201      	movs	r2, #1
 800ce0a:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
 800ce0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ce10:	62c2      	str	r2, [r0, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ce12:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800ce14:	f000 fb9c 	bl	800d550 <HAL_DMA_Init>
 800ce18:	b9f8      	cbnz	r0, 800ce5a <HAL_UART_MspInit+0x1a6>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800ce1a:	4b2c      	ldr	r3, [pc, #176]	; (800cecc <HAL_UART_MspInit+0x218>)
 800ce1c:	6663      	str	r3, [r4, #100]	; 0x64
 800ce1e:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800ce20:	482c      	ldr	r0, [pc, #176]	; (800ced4 <HAL_UART_MspInit+0x220>)
 800ce22:	4b2d      	ldr	r3, [pc, #180]	; (800ced8 <HAL_UART_MspInit+0x224>)
 800ce24:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800ce26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce2a:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ce2c:	2340      	movs	r3, #64	; 0x40
 800ce2e:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ce30:	2300      	movs	r3, #0
 800ce32:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ce34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce38:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ce3a:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ce3c:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800ce3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce42:	61c2      	str	r2, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ce44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ce48:	6202      	str	r2, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ce4a:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800ce4c:	f000 fb80 	bl	800d550 <HAL_DMA_Init>
 800ce50:	b930      	cbnz	r0, 800ce60 <HAL_UART_MspInit+0x1ac>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800ce52:	4b20      	ldr	r3, [pc, #128]	; (800ced4 <HAL_UART_MspInit+0x220>)
 800ce54:	6623      	str	r3, [r4, #96]	; 0x60
 800ce56:	639c      	str	r4, [r3, #56]	; 0x38
 800ce58:	e743      	b.n	800cce2 <HAL_UART_MspInit+0x2e>
      Error_Handler();
 800ce5a:	f7ff fbe5 	bl	800c628 <Error_Handler>
 800ce5e:	e7dc      	b.n	800ce1a <HAL_UART_MspInit+0x166>
      Error_Handler();
 800ce60:	f7ff fbe2 	bl	800c628 <Error_Handler>
 800ce64:	e7f5      	b.n	800ce52 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ce66:	4b14      	ldr	r3, [pc, #80]	; (800ceb8 <HAL_UART_MspInit+0x204>)
 800ce68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ce6e:	641a      	str	r2, [r3, #64]	; 0x40
 800ce70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce72:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800ce76:	9207      	str	r2, [sp, #28]
 800ce78:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ce7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce7c:	f042 0208 	orr.w	r2, r2, #8
 800ce80:	631a      	str	r2, [r3, #48]	; 0x30
 800ce82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce84:	f003 0308 	and.w	r3, r3, #8
 800ce88:	9308      	str	r3, [sp, #32]
 800ce8a:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ce8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ce90:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce92:	2302      	movs	r3, #2
 800ce94:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce96:	2303      	movs	r3, #3
 800ce98:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ce9a:	2307      	movs	r3, #7
 800ce9c:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ce9e:	a909      	add	r1, sp, #36	; 0x24
 800cea0:	480e      	ldr	r0, [pc, #56]	; (800cedc <HAL_UART_MspInit+0x228>)
 800cea2:	f000 fef5 	bl	800dc90 <HAL_GPIO_Init>
}
 800cea6:	e71c      	b.n	800cce2 <HAL_UART_MspInit+0x2e>
 800cea8:	40004c00 	.word	0x40004c00
 800ceac:	40007c00 	.word	0x40007c00
 800ceb0:	40011000 	.word	0x40011000
 800ceb4:	40004800 	.word	0x40004800
 800ceb8:	40023800 	.word	0x40023800
 800cebc:	40020000 	.word	0x40020000
 800cec0:	20007b9c 	.word	0x20007b9c
 800cec4:	40026040 	.word	0x40026040
 800cec8:	40021000 	.word	0x40021000
 800cecc:	20007ccc 	.word	0x20007ccc
 800ced0:	40026440 	.word	0x40026440
 800ced4:	20007c6c 	.word	0x20007c6c
 800ced8:	400264b8 	.word	0x400264b8
 800cedc:	40020c00 	.word	0x40020c00

0800cee0 <_ZN3ros16normalizeSecNSecERmS0_>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 800cee0:	b430      	push	{r4, r5}
    uint32_t nsec_part= nsec % 1000000000UL;
 800cee2:	680c      	ldr	r4, [r1, #0]
 800cee4:	0a63      	lsrs	r3, r4, #9
 800cee6:	4a07      	ldr	r2, [pc, #28]	; (800cf04 <_ZN3ros16normalizeSecNSecERmS0_+0x24>)
 800cee8:	fba2 2303 	umull	r2, r3, r2, r3
 800ceec:	09da      	lsrs	r2, r3, #7
 800ceee:	4d06      	ldr	r5, [pc, #24]	; (800cf08 <_ZN3ros16normalizeSecNSecERmS0_+0x28>)
 800cef0:	fb05 4212 	mls	r2, r5, r2, r4
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 800cef4:	6804      	ldr	r4, [r0, #0]
 800cef6:	eb04 13d3 	add.w	r3, r4, r3, lsr #7
 800cefa:	6003      	str	r3, [r0, #0]
    nsec = nsec_part;
 800cefc:	600a      	str	r2, [r1, #0]
  }
 800cefe:	bc30      	pop	{r4, r5}
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	00044b83 	.word	0x00044b83
 800cf08:	3b9aca00 	.word	0x3b9aca00

0800cf0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cf0c:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cf0e:	4a0f      	ldr	r2, [pc, #60]	; (800cf4c <SystemInit+0x40>)
 800cf10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800cf14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cf1c:	4b0c      	ldr	r3, [pc, #48]	; (800cf50 <SystemInit+0x44>)
 800cf1e:	6819      	ldr	r1, [r3, #0]
 800cf20:	f041 0101 	orr.w	r1, r1, #1
 800cf24:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800cf26:	2000      	movs	r0, #0
 800cf28:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800cf2a:	681c      	ldr	r4, [r3, #0]
 800cf2c:	4909      	ldr	r1, [pc, #36]	; (800cf54 <SystemInit+0x48>)
 800cf2e:	4021      	ands	r1, r4
 800cf30:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800cf32:	4909      	ldr	r1, [pc, #36]	; (800cf58 <SystemInit+0x4c>)
 800cf34:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800cf36:	6819      	ldr	r1, [r3, #0]
 800cf38:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800cf3c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800cf3e:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cf40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf44:	6093      	str	r3, [r2, #8]
#endif
}
 800cf46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	e000ed00 	.word	0xe000ed00
 800cf50:	40023800 	.word	0x40023800
 800cf54:	fef6ffff 	.word	0xfef6ffff
 800cf58:	24003010 	.word	0x24003010

0800cf5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cf5c:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800cf5e:	4b09      	ldr	r3, [pc, #36]	; (800cf84 <HAL_Init+0x28>)
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf66:	601a      	str	r2, [r3, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf6e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cf70:	2003      	movs	r0, #3
 800cf72:	f000 f82f 	bl	800cfd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cf76:	2000      	movs	r0, #0
 800cf78:	f7ff fbe8 	bl	800c74c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800cf7c:	f7ff fbc6 	bl	800c70c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800cf80:	2000      	movs	r0, #0
 800cf82:	bd08      	pop	{r3, pc}
 800cf84:	40023c00 	.word	0x40023c00

0800cf88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800cf88:	4a03      	ldr	r2, [pc, #12]	; (800cf98 <HAL_IncTick+0x10>)
 800cf8a:	6811      	ldr	r1, [r2, #0]
 800cf8c:	4b03      	ldr	r3, [pc, #12]	; (800cf9c <HAL_IncTick+0x14>)
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	440b      	add	r3, r1
 800cf92:	6013      	str	r3, [r2, #0]
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	20007e7c 	.word	0x20007e7c
 800cf9c:	20000024 	.word	0x20000024

0800cfa0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800cfa0:	4b01      	ldr	r3, [pc, #4]	; (800cfa8 <HAL_GetTick+0x8>)
 800cfa2:	6818      	ldr	r0, [r3, #0]
}
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	20007e7c 	.word	0x20007e7c

0800cfac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cfac:	b538      	push	{r3, r4, r5, lr}
 800cfae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800cfb0:	f7ff fff6 	bl	800cfa0 <HAL_GetTick>
 800cfb4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cfb6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800cfba:	d002      	beq.n	800cfc2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800cfbc:	4b04      	ldr	r3, [pc, #16]	; (800cfd0 <HAL_Delay+0x24>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800cfc2:	f7ff ffed 	bl	800cfa0 <HAL_GetTick>
 800cfc6:	1b40      	subs	r0, r0, r5
 800cfc8:	4284      	cmp	r4, r0
 800cfca:	d8fa      	bhi.n	800cfc2 <HAL_Delay+0x16>
  {
  }
}
 800cfcc:	bd38      	pop	{r3, r4, r5, pc}
 800cfce:	bf00      	nop
 800cfd0:	20000024 	.word	0x20000024

0800cfd4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cfd4:	4906      	ldr	r1, [pc, #24]	; (800cff0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800cfd6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cfd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800cfdc:	041b      	lsls	r3, r3, #16
 800cfde:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800cfe0:	0200      	lsls	r0, r0, #8
 800cfe2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cfe6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800cfe8:	4a02      	ldr	r2, [pc, #8]	; (800cff4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800cfea:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800cfec:	60ca      	str	r2, [r1, #12]
 800cfee:	4770      	bx	lr
 800cff0:	e000ed00 	.word	0xe000ed00
 800cff4:	05fa0000 	.word	0x05fa0000

0800cff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cff8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cffa:	4b14      	ldr	r3, [pc, #80]	; (800d04c <HAL_NVIC_SetPriority+0x54>)
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d002:	f1c3 0407 	rsb	r4, r3, #7
 800d006:	2c04      	cmp	r4, #4
 800d008:	bf28      	it	cs
 800d00a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d00c:	1d1d      	adds	r5, r3, #4
 800d00e:	2d06      	cmp	r5, #6
 800d010:	d913      	bls.n	800d03a <HAL_NVIC_SetPriority+0x42>
 800d012:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d014:	2501      	movs	r5, #1
 800d016:	fa05 f404 	lsl.w	r4, r5, r4
 800d01a:	3c01      	subs	r4, #1
 800d01c:	4021      	ands	r1, r4
 800d01e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d020:	fa05 f303 	lsl.w	r3, r5, r3
 800d024:	3b01      	subs	r3, #1
 800d026:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d028:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800d02a:	2800      	cmp	r0, #0
 800d02c:	db07      	blt.n	800d03e <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d02e:	0109      	lsls	r1, r1, #4
 800d030:	b2c9      	uxtb	r1, r1
 800d032:	4b07      	ldr	r3, [pc, #28]	; (800d050 <HAL_NVIC_SetPriority+0x58>)
 800d034:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800d036:	bc30      	pop	{r4, r5}
 800d038:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d03a:	2300      	movs	r3, #0
 800d03c:	e7ea      	b.n	800d014 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d03e:	f000 000f 	and.w	r0, r0, #15
 800d042:	0109      	lsls	r1, r1, #4
 800d044:	b2c9      	uxtb	r1, r1
 800d046:	4b03      	ldr	r3, [pc, #12]	; (800d054 <HAL_NVIC_SetPriority+0x5c>)
 800d048:	5419      	strb	r1, [r3, r0]
 800d04a:	e7f4      	b.n	800d036 <HAL_NVIC_SetPriority+0x3e>
 800d04c:	e000ed00 	.word	0xe000ed00
 800d050:	e000e400 	.word	0xe000e400
 800d054:	e000ed14 	.word	0xe000ed14

0800d058 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800d058:	0942      	lsrs	r2, r0, #5
 800d05a:	f000 001f 	and.w	r0, r0, #31
 800d05e:	2301      	movs	r3, #1
 800d060:	fa03 f000 	lsl.w	r0, r3, r0
 800d064:	4b01      	ldr	r3, [pc, #4]	; (800d06c <HAL_NVIC_EnableIRQ+0x14>)
 800d066:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d06a:	4770      	bx	lr
 800d06c:	e000e100 	.word	0xe000e100

0800d070 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800d070:	4b14      	ldr	r3, [pc, #80]	; (800d0c4 <DFSDM_GetChannelFromInstance+0x54>)
 800d072:	4298      	cmp	r0, r3
 800d074:	d016      	beq.n	800d0a4 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 800d076:	3320      	adds	r3, #32
 800d078:	4298      	cmp	r0, r3
 800d07a:	d015      	beq.n	800d0a8 <DFSDM_GetChannelFromInstance+0x38>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 800d07c:	3320      	adds	r3, #32
 800d07e:	4298      	cmp	r0, r3
 800d080:	d014      	beq.n	800d0ac <DFSDM_GetChannelFromInstance+0x3c>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 800d082:	3320      	adds	r3, #32
 800d084:	4298      	cmp	r0, r3
 800d086:	d013      	beq.n	800d0b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 800d088:	3320      	adds	r3, #32
 800d08a:	4298      	cmp	r0, r3
 800d08c:	d012      	beq.n	800d0b4 <DFSDM_GetChannelFromInstance+0x44>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 800d08e:	3320      	adds	r3, #32
 800d090:	4298      	cmp	r0, r3
 800d092:	d011      	beq.n	800d0b8 <DFSDM_GetChannelFromInstance+0x48>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 800d094:	3320      	adds	r3, #32
 800d096:	4298      	cmp	r0, r3
 800d098:	d010      	beq.n	800d0bc <DFSDM_GetChannelFromInstance+0x4c>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
 800d09a:	3320      	adds	r3, #32
 800d09c:	4298      	cmp	r0, r3
 800d09e:	d00f      	beq.n	800d0c0 <DFSDM_GetChannelFromInstance+0x50>
  uint32_t channel = 0xFF;
 800d0a0:	20ff      	movs	r0, #255	; 0xff
 800d0a2:	4770      	bx	lr
    channel = 0;
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	4770      	bx	lr
    channel = 1;
 800d0a8:	2001      	movs	r0, #1
 800d0aa:	4770      	bx	lr
    channel = 2;
 800d0ac:	2002      	movs	r0, #2
 800d0ae:	4770      	bx	lr
    channel = 3;
 800d0b0:	2003      	movs	r0, #3
 800d0b2:	4770      	bx	lr
    channel = 4;
 800d0b4:	2004      	movs	r0, #4
 800d0b6:	4770      	bx	lr
    channel = 5;
 800d0b8:	2005      	movs	r0, #5
 800d0ba:	4770      	bx	lr
    channel = 6;
 800d0bc:	2006      	movs	r0, #6
 800d0be:	4770      	bx	lr
  {
    channel = 7;
 800d0c0:	2007      	movs	r0, #7
  }

  return channel;
}
 800d0c2:	4770      	bx	lr
 800d0c4:	40017400 	.word	0x40017400

0800d0c8 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800d0c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d0ca:	b963      	cbnz	r3, 800d0e6 <DFSDM_RegConvStart+0x1e>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800d0cc:	6802      	ldr	r2, [r0, #0]
 800d0ce:	6813      	ldr	r3, [r2, #0]
 800d0d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0d4:	6013      	str	r3, [r2, #0]
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800d0d6:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d026      	beq.n	800d12c <DFSDM_RegConvStart+0x64>
 800d0de:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800d0e0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 800d0e4:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800d0e6:	6802      	ldr	r2, [r0, #0]
 800d0e8:	6813      	ldr	r3, [r2, #0]
 800d0ea:	f023 0301 	bic.w	r3, r3, #1
 800d0ee:	6013      	str	r3, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800d0f0:	6802      	ldr	r2, [r0, #0]
 800d0f2:	6813      	ldr	r3, [r2, #0]
 800d0f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0f8:	6013      	str	r3, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800d0fa:	6802      	ldr	r2, [r0, #0]
 800d0fc:	6813      	ldr	r3, [r2, #0]
 800d0fe:	f043 0301 	orr.w	r3, r3, #1
 800d102:	6013      	str	r3, [r2, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800d104:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d1e4      	bne.n	800d0d6 <DFSDM_RegConvStart+0xe>
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800d10c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d10e:	b923      	cbnz	r3, 800d11a <DFSDM_RegConvStart+0x52>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800d110:	6802      	ldr	r2, [r0, #0]
 800d112:	6813      	ldr	r3, [r2, #0]
 800d114:	f043 0302 	orr.w	r3, r3, #2
 800d118:	6013      	str	r3, [r2, #0]
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800d11a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d002      	beq.n	800d128 <DFSDM_RegConvStart+0x60>
 800d122:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800d124:	6483      	str	r3, [r0, #72]	; 0x48
 800d126:	e7d6      	b.n	800d0d6 <DFSDM_RegConvStart+0xe>
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800d128:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d12a:	e7fb      	b.n	800d124 <DFSDM_RegConvStart+0x5c>
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800d12c:	2302      	movs	r3, #2
 800d12e:	e7d7      	b.n	800d0e0 <DFSDM_RegConvStart+0x18>

0800d130 <HAL_DFSDM_ChannelInit>:
  if(hdfsdm_channel == NULL)
 800d130:	2800      	cmp	r0, #0
 800d132:	d078      	beq.n	800d226 <HAL_DFSDM_ChannelInit+0xf6>
{
 800d134:	b510      	push	{r4, lr}
 800d136:	4604      	mov	r4, r0
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800d138:	6800      	ldr	r0, [r0, #0]
 800d13a:	f7ff ff99 	bl	800d070 <DFSDM_GetChannelFromInstance>
 800d13e:	4b3b      	ldr	r3, [pc, #236]	; (800d22c <HAL_DFSDM_ChannelInit+0xfc>)
 800d140:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d144:	b10b      	cbz	r3, 800d14a <HAL_DFSDM_ChannelInit+0x1a>
    return HAL_ERROR;
 800d146:	2001      	movs	r0, #1
}
 800d148:	bd10      	pop	{r4, pc}
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800d14a:	4620      	mov	r0, r4
 800d14c:	f7fe f884 	bl	800b258 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 800d150:	4b37      	ldr	r3, [pc, #220]	; (800d230 <HAL_DFSDM_ChannelInit+0x100>)
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	3201      	adds	r2, #1
 800d156:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d045      	beq.n	800d1ea <HAL_DFSDM_ChannelInit+0xba>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800d15e:	6822      	ldr	r2, [r4, #0]
 800d160:	6813      	ldr	r3, [r2, #0]
 800d162:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 800d166:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800d168:	6821      	ldr	r1, [r4, #0]
 800d16a:	680a      	ldr	r2, [r1, #0]
 800d16c:	6923      	ldr	r3, [r4, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800d16e:	6960      	ldr	r0, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800d170:	4303      	orrs	r3, r0
                                        hdfsdm_channel->Init.Input.Pins);
 800d172:	69a0      	ldr	r0, [r4, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800d174:	4303      	orrs	r3, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800d176:	4313      	orrs	r3, r2
 800d178:	600b      	str	r3, [r1, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800d17a:	6822      	ldr	r2, [r4, #0]
 800d17c:	6813      	ldr	r3, [r2, #0]
 800d17e:	f023 030f 	bic.w	r3, r3, #15
 800d182:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800d184:	6821      	ldr	r1, [r4, #0]
 800d186:	680b      	ldr	r3, [r1, #0]
 800d188:	69e2      	ldr	r2, [r4, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800d18a:	6a20      	ldr	r0, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800d18c:	4302      	orrs	r2, r0
 800d18e:	4313      	orrs	r3, r2
 800d190:	600b      	str	r3, [r1, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800d192:	6822      	ldr	r2, [r4, #0]
 800d194:	6893      	ldr	r3, [r2, #8]
 800d196:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 800d19a:	6093      	str	r3, [r2, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800d19c:	6820      	ldr	r0, [r4, #0]
 800d19e:	6883      	ldr	r3, [r0, #8]
 800d1a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800d1a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d1a4:	3901      	subs	r1, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800d1a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800d1ae:	6822      	ldr	r2, [r4, #0]
 800d1b0:	6853      	ldr	r3, [r2, #4]
 800d1b2:	f003 0307 	and.w	r3, r3, #7
 800d1b6:	6053      	str	r3, [r2, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800d1b8:	6821      	ldr	r1, [r4, #0]
 800d1ba:	684a      	ldr	r2, [r1, #4]
 800d1bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800d1be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d1c0:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800d1c2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	604b      	str	r3, [r1, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800d1ca:	6822      	ldr	r2, [r4, #0]
 800d1cc:	6813      	ldr	r3, [r2, #0]
 800d1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1d2:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800d1da:	6820      	ldr	r0, [r4, #0]
 800d1dc:	f7ff ff48 	bl	800d070 <DFSDM_GetChannelFromInstance>
 800d1e0:	4b12      	ldr	r3, [pc, #72]	; (800d22c <HAL_DFSDM_ChannelInit+0xfc>)
 800d1e2:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  return HAL_OK;
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	bd10      	pop	{r4, pc}
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800d1ea:	4b12      	ldr	r3, [pc, #72]	; (800d234 <HAL_DFSDM_ChannelInit+0x104>)
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d1f2:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	68a1      	ldr	r1, [r4, #8]
 800d1f8:	430a      	orrs	r2, r1
 800d1fa:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800d202:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800d204:	7923      	ldrb	r3, [r4, #4]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d005      	beq.n	800d216 <HAL_DFSDM_ChannelInit+0xe6>
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800d20a:	4a0a      	ldr	r2, [pc, #40]	; (800d234 <HAL_DFSDM_ChannelInit+0x104>)
 800d20c:	6813      	ldr	r3, [r2, #0]
 800d20e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	e7a3      	b.n	800d15e <HAL_DFSDM_ChannelInit+0x2e>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 800d216:	4907      	ldr	r1, [pc, #28]	; (800d234 <HAL_DFSDM_ChannelInit+0x104>)
 800d218:	680b      	ldr	r3, [r1, #0]
 800d21a:	68e2      	ldr	r2, [r4, #12]
 800d21c:	3a01      	subs	r2, #1
 800d21e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d222:	600b      	str	r3, [r1, #0]
 800d224:	e7f1      	b.n	800d20a <HAL_DFSDM_ChannelInit+0xda>
    return HAL_ERROR;
 800d226:	2001      	movs	r0, #1
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	20003900 	.word	0x20003900
 800d230:	20003920 	.word	0x20003920
 800d234:	40017400 	.word	0x40017400

0800d238 <HAL_DFSDM_FilterInit>:
  if(hdfsdm_filter == NULL)
 800d238:	2800      	cmp	r0, #0
 800d23a:	f000 8086 	beq.w	800d34a <HAL_DFSDM_FilterInit+0x112>
{
 800d23e:	b510      	push	{r4, lr}
 800d240:	4604      	mov	r4, r0
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800d242:	6802      	ldr	r2, [r0, #0]
 800d244:	4b43      	ldr	r3, [pc, #268]	; (800d354 <HAL_DFSDM_FilterInit+0x11c>)
 800d246:	429a      	cmp	r2, r3
 800d248:	d059      	beq.n	800d2fe <HAL_DFSDM_FilterInit+0xc6>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800d24a:	2300      	movs	r3, #0
 800d24c:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800d24e:	2201      	movs	r2, #1
 800d250:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800d252:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800d254:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800d256:	4620      	mov	r0, r4
 800d258:	f7fd ff4a 	bl	800b0f0 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800d25c:	6822      	ldr	r2, [r4, #0]
 800d25e:	6813      	ldr	r3, [r2, #0]
 800d260:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800d264:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800d266:	7a23      	ldrb	r3, [r4, #8]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d050      	beq.n	800d30e <HAL_DFSDM_FilterInit+0xd6>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800d26c:	6822      	ldr	r2, [r4, #0]
 800d26e:	6813      	ldr	r3, [r2, #0]
 800d270:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d274:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800d276:	7a63      	ldrb	r3, [r4, #9]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d04e      	beq.n	800d31a <HAL_DFSDM_FilterInit+0xe2>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800d27c:	6822      	ldr	r2, [r4, #0]
 800d27e:	6813      	ldr	r3, [r2, #0]
 800d280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d284:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800d286:	6822      	ldr	r2, [r4, #0]
 800d288:	6811      	ldr	r1, [r2, #0]
 800d28a:	4b33      	ldr	r3, [pc, #204]	; (800d358 <HAL_DFSDM_FilterInit+0x120>)
 800d28c:	400b      	ands	r3, r1
 800d28e:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800d290:	68e3      	ldr	r3, [r4, #12]
 800d292:	2b02      	cmp	r3, #2
 800d294:	d047      	beq.n	800d326 <HAL_DFSDM_FilterInit+0xee>
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800d296:	7c23      	ldrb	r3, [r4, #16]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d04a      	beq.n	800d332 <HAL_DFSDM_FilterInit+0xfa>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800d29c:	6822      	ldr	r2, [r4, #0]
 800d29e:	6813      	ldr	r3, [r2, #0]
 800d2a0:	f023 0310 	bic.w	r3, r3, #16
 800d2a4:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800d2a6:	7c63      	ldrb	r3, [r4, #17]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d048      	beq.n	800d33e <HAL_DFSDM_FilterInit+0x106>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800d2ac:	6822      	ldr	r2, [r4, #0]
 800d2ae:	6813      	ldr	r3, [r2, #0]
 800d2b0:	f023 0320 	bic.w	r3, r3, #32
 800d2b4:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800d2b6:	6822      	ldr	r2, [r4, #0]
 800d2b8:	6951      	ldr	r1, [r2, #20]
 800d2ba:	4b28      	ldr	r3, [pc, #160]	; (800d35c <HAL_DFSDM_FilterInit+0x124>)
 800d2bc:	400b      	ands	r3, r1
 800d2be:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	6942      	ldr	r2, [r0, #20]
 800d2c4:	69e3      	ldr	r3, [r4, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800d2c6:	6a21      	ldr	r1, [r4, #32]
 800d2c8:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800d2ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800d2ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d2d0:	3901      	subs	r1, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800d2d2:	430b      	orrs	r3, r1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	6143      	str	r3, [r0, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800d2d8:	6863      	ldr	r3, [r4, #4]
 800d2da:	6363      	str	r3, [r4, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800d2dc:	68e3      	ldr	r3, [r4, #12]
 800d2de:	63a3      	str	r3, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800d2e0:	69a3      	ldr	r3, [r4, #24]
 800d2e2:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800d2e4:	7c23      	ldrb	r3, [r4, #16]
 800d2e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800d2ea:	6822      	ldr	r2, [r4, #0]
 800d2ec:	6813      	ldr	r3, [r2, #0]
 800d2ee:	f043 0301 	orr.w	r3, r3, #1
 800d2f2:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	bd10      	pop	{r4, pc}
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 800d2fe:	6843      	ldr	r3, [r0, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800d300:	2b01      	cmp	r3, #1
 800d302:	d024      	beq.n	800d34e <HAL_DFSDM_FilterInit+0x116>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800d304:	68c3      	ldr	r3, [r0, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 800d306:	2b01      	cmp	r3, #1
 800d308:	d19f      	bne.n	800d24a <HAL_DFSDM_FilterInit+0x12>
    return HAL_ERROR;
 800d30a:	2001      	movs	r0, #1
}
 800d30c:	bd10      	pop	{r4, pc}
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800d30e:	6822      	ldr	r2, [r4, #0]
 800d310:	6813      	ldr	r3, [r2, #0]
 800d312:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d316:	6013      	str	r3, [r2, #0]
 800d318:	e7ad      	b.n	800d276 <HAL_DFSDM_FilterInit+0x3e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800d31a:	6822      	ldr	r2, [r4, #0]
 800d31c:	6813      	ldr	r3, [r2, #0]
 800d31e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d322:	6013      	str	r3, [r2, #0]
 800d324:	e7af      	b.n	800d286 <HAL_DFSDM_FilterInit+0x4e>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800d326:	6822      	ldr	r2, [r4, #0]
 800d328:	6813      	ldr	r3, [r2, #0]
 800d32a:	6961      	ldr	r1, [r4, #20]
 800d32c:	430b      	orrs	r3, r1
 800d32e:	6013      	str	r3, [r2, #0]
 800d330:	e7b1      	b.n	800d296 <HAL_DFSDM_FilterInit+0x5e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800d332:	6822      	ldr	r2, [r4, #0]
 800d334:	6813      	ldr	r3, [r2, #0]
 800d336:	f043 0310 	orr.w	r3, r3, #16
 800d33a:	6013      	str	r3, [r2, #0]
 800d33c:	e7b3      	b.n	800d2a6 <HAL_DFSDM_FilterInit+0x6e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800d33e:	6822      	ldr	r2, [r4, #0]
 800d340:	6813      	ldr	r3, [r2, #0]
 800d342:	f043 0320 	orr.w	r3, r3, #32
 800d346:	6013      	str	r3, [r2, #0]
 800d348:	e7b5      	b.n	800d2b6 <HAL_DFSDM_FilterInit+0x7e>
    return HAL_ERROR;
 800d34a:	2001      	movs	r0, #1
 800d34c:	4770      	bx	lr
    return HAL_ERROR;
 800d34e:	2001      	movs	r0, #1
 800d350:	bd10      	pop	{r4, pc}
 800d352:	bf00      	nop
 800d354:	40017500 	.word	0x40017500
 800d358:	ffff80f7 	.word	0xffff80f7
 800d35c:	1c00ff00 	.word	0x1c00ff00

0800d360 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 800d360:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800d364:	3b01      	subs	r3, #1
 800d366:	b2db      	uxtb	r3, r3
 800d368:	2bfd      	cmp	r3, #253	; 0xfd
 800d36a:	d81c      	bhi.n	800d3a6 <HAL_DFSDM_FilterConfigRegChannel+0x46>
{
 800d36c:	b430      	push	{r4, r5}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800d36e:	6804      	ldr	r4, [r0, #0]
 800d370:	6825      	ldr	r5, [r4, #0]
 800d372:	4b0e      	ldr	r3, [pc, #56]	; (800d3ac <HAL_DFSDM_FilterConfigRegChannel+0x4c>)
 800d374:	402b      	ands	r3, r5
 800d376:	6023      	str	r3, [r4, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800d378:	2a01      	cmp	r2, #1
 800d37a:	d00a      	beq.n	800d392 <HAL_DFSDM_FilterConfigRegChannel+0x32>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800d37c:	6804      	ldr	r4, [r0, #0]
 800d37e:	6823      	ldr	r3, [r4, #0]
 800d380:	0209      	lsls	r1, r1, #8
 800d382:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800d386:	4319      	orrs	r1, r3
 800d388:	6021      	str	r1, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800d38a:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 800d38c:	2000      	movs	r0, #0
}
 800d38e:	bc30      	pop	{r4, r5}
 800d390:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800d392:	6804      	ldr	r4, [r0, #0]
 800d394:	6823      	ldr	r3, [r4, #0]
 800d396:	0209      	lsls	r1, r1, #8
 800d398:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800d39c:	4319      	orrs	r1, r3
 800d39e:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800d3a2:	6021      	str	r1, [r4, #0]
 800d3a4:	e7f1      	b.n	800d38a <HAL_DFSDM_FilterConfigRegChannel+0x2a>
    status = HAL_ERROR;
 800d3a6:	2001      	movs	r0, #1
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	f8fbffff 	.word	0xf8fbffff

0800d3b0 <HAL_DFSDM_FilterRegularStart>:
{
 800d3b0:	b508      	push	{r3, lr}
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800d3b2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800d3b6:	2b03      	cmp	r3, #3
 800d3b8:	bf18      	it	ne
 800d3ba:	2b01      	cmpne	r3, #1
 800d3bc:	d001      	beq.n	800d3c2 <HAL_DFSDM_FilterRegularStart+0x12>
    status = HAL_ERROR;
 800d3be:	2001      	movs	r0, #1
}
 800d3c0:	bd08      	pop	{r3, pc}
    DFSDM_RegConvStart(hdfsdm_filter);
 800d3c2:	f7ff fe81 	bl	800d0c8 <DFSDM_RegConvStart>
  HAL_StatusTypeDef status = HAL_OK;
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	bd08      	pop	{r3, pc}

0800d3ca <HAL_DFSDM_FilterGetRegularValue>:
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 800d3ca:	6803      	ldr	r3, [r0, #0]
 800d3cc:	69d8      	ldr	r0, [r3, #28]
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 800d3ce:	f000 0307 	and.w	r3, r0, #7
 800d3d2:	600b      	str	r3, [r1, #0]
}
 800d3d4:	1200      	asrs	r0, r0, #8
 800d3d6:	4770      	bx	lr

0800d3d8 <HAL_DFSDM_FilterErrorCallback>:
{
 800d3d8:	4770      	bx	lr

0800d3da <HAL_DFSDM_FilterPollForRegConversion>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800d3da:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	bf18      	it	ne
 800d3e2:	2b04      	cmpne	r3, #4
 800d3e4:	d001      	beq.n	800d3ea <HAL_DFSDM_FilterPollForRegConversion+0x10>
    return HAL_ERROR;
 800d3e6:	2001      	movs	r0, #1
 800d3e8:	4770      	bx	lr
{
 800d3ea:	b570      	push	{r4, r5, r6, lr}
 800d3ec:	460d      	mov	r5, r1
 800d3ee:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();  
 800d3f0:	f7ff fdd6 	bl	800cfa0 <HAL_GetTick>
 800d3f4:	4606      	mov	r6, r0
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	689a      	ldr	r2, [r3, #8]
 800d3fa:	f012 0f02 	tst.w	r2, #2
 800d3fe:	d10a      	bne.n	800d416 <HAL_DFSDM_FilterPollForRegConversion+0x3c>
      if(Timeout != HAL_MAX_DELAY)
 800d400:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800d404:	d0f7      	beq.n	800d3f6 <HAL_DFSDM_FilterPollForRegConversion+0x1c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800d406:	b315      	cbz	r5, 800d44e <HAL_DFSDM_FilterPollForRegConversion+0x74>
 800d408:	f7ff fdca 	bl	800cfa0 <HAL_GetTick>
 800d40c:	1b80      	subs	r0, r0, r6
 800d40e:	4285      	cmp	r5, r0
 800d410:	d2f1      	bcs.n	800d3f6 <HAL_DFSDM_FilterPollForRegConversion+0x1c>
          return HAL_TIMEOUT;
 800d412:	2003      	movs	r0, #3
 800d414:	bd70      	pop	{r4, r5, r6, pc}
    if((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	f013 0f08 	tst.w	r3, #8
 800d41c:	d10c      	bne.n	800d438 <HAL_DFSDM_FilterPollForRegConversion+0x5e>
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800d41e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d420:	b9bb      	cbnz	r3, 800d452 <HAL_DFSDM_FilterPollForRegConversion+0x78>
       (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 800d422:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800d424:	b9bb      	cbnz	r3, 800d456 <HAL_DFSDM_FilterPollForRegConversion+0x7c>
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800d426:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	d00d      	beq.n	800d44a <HAL_DFSDM_FilterPollForRegConversion+0x70>
 800d42e:	2303      	movs	r3, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800d430:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return HAL_OK;
 800d434:	2000      	movs	r0, #0
 800d436:	bd70      	pop	{r4, r5, r6, pc}
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 800d438:	2301      	movs	r3, #1
 800d43a:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800d43c:	4620      	mov	r0, r4
 800d43e:	f7ff ffcb 	bl	800d3d8 <HAL_DFSDM_FilterErrorCallback>
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	2208      	movs	r2, #8
 800d446:	60da      	str	r2, [r3, #12]
 800d448:	e7e9      	b.n	800d41e <HAL_DFSDM_FilterPollForRegConversion+0x44>
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e7f0      	b.n	800d430 <HAL_DFSDM_FilterPollForRegConversion+0x56>
          return HAL_TIMEOUT;
 800d44e:	2003      	movs	r0, #3
 800d450:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_OK;
 800d452:	2000      	movs	r0, #0
 800d454:	bd70      	pop	{r4, r5, r6, pc}
 800d456:	2000      	movs	r0, #0
}
 800d458:	bd70      	pop	{r4, r5, r6, pc}

0800d45a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d45a:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d45c:	6805      	ldr	r5, [r0, #0]
 800d45e:	682c      	ldr	r4, [r5, #0]
 800d460:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800d464:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d466:	6804      	ldr	r4, [r0, #0]
 800d468:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d46a:	6883      	ldr	r3, [r0, #8]
 800d46c:	2b40      	cmp	r3, #64	; 0x40
 800d46e:	d005      	beq.n	800d47c <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800d470:	6803      	ldr	r3, [r0, #0]
 800d472:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800d474:	6803      	ldr	r3, [r0, #0]
 800d476:	60da      	str	r2, [r3, #12]
  }
}
 800d478:	bc30      	pop	{r4, r5}
 800d47a:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800d47c:	6803      	ldr	r3, [r0, #0]
 800d47e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800d480:	6803      	ldr	r3, [r0, #0]
 800d482:	60d9      	str	r1, [r3, #12]
 800d484:	e7f8      	b.n	800d478 <DMA_SetConfig+0x1e>
	...

0800d488 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d488:	6802      	ldr	r2, [r0, #0]
 800d48a:	b2d3      	uxtb	r3, r2
 800d48c:	3b10      	subs	r3, #16
 800d48e:	4909      	ldr	r1, [pc, #36]	; (800d4b4 <DMA_CalcBaseAndBitshift+0x2c>)
 800d490:	fba1 1303 	umull	r1, r3, r1, r3
 800d494:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d496:	4908      	ldr	r1, [pc, #32]	; (800d4b8 <DMA_CalcBaseAndBitshift+0x30>)
 800d498:	5cc9      	ldrb	r1, [r1, r3]
 800d49a:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800d49c:	2b03      	cmp	r3, #3
 800d49e:	d804      	bhi.n	800d4aa <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d4a0:	4b06      	ldr	r3, [pc, #24]	; (800d4bc <DMA_CalcBaseAndBitshift+0x34>)
 800d4a2:	4013      	ands	r3, r2
 800d4a4:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800d4a6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800d4a8:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d4aa:	4b04      	ldr	r3, [pc, #16]	; (800d4bc <DMA_CalcBaseAndBitshift+0x34>)
 800d4ac:	4013      	ands	r3, r2
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	6583      	str	r3, [r0, #88]	; 0x58
 800d4b2:	e7f8      	b.n	800d4a6 <DMA_CalcBaseAndBitshift+0x1e>
 800d4b4:	aaaaaaab 	.word	0xaaaaaaab
 800d4b8:	08019cb0 	.word	0x08019cb0
 800d4bc:	fffffc00 	.word	0xfffffc00

0800d4c0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d4c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d4c2:	6982      	ldr	r2, [r0, #24]
 800d4c4:	b992      	cbnz	r2, 800d4ec <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d00a      	beq.n	800d4e0 <DMA_CheckFifoParam+0x20>
 800d4ca:	b11b      	cbz	r3, 800d4d4 <DMA_CheckFifoParam+0x14>
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d001      	beq.n	800d4d4 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d4d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d4d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800d4da:	d12c      	bne.n	800d536 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 800d4dc:	2000      	movs	r0, #0
 800d4de:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d4e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d4e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d4e6:	d028      	beq.n	800d53a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d4ec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d4f0:	d005      	beq.n	800d4fe <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d929      	bls.n	800d54a <DMA_CheckFifoParam+0x8a>
 800d4f6:	2b03      	cmp	r3, #3
 800d4f8:	d015      	beq.n	800d526 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	4770      	bx	lr
    switch (tmp)
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d803      	bhi.n	800d50a <DMA_CheckFifoParam+0x4a>
 800d502:	e8df f003 	tbb	[pc, r3]
 800d506:	041c      	.short	0x041c
 800d508:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800d50a:	2000      	movs	r0, #0
 800d50c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d50e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d510:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800d514:	d115      	bne.n	800d542 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800d516:	2000      	movs	r0, #0
 800d518:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d51a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d51c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d520:	d011      	beq.n	800d546 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800d522:	2000      	movs	r0, #0
 800d524:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d526:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d528:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800d52c:	d001      	beq.n	800d532 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800d52e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800d530:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800d532:	2000      	movs	r0, #0
 800d534:	4770      	bx	lr
        status = HAL_ERROR;
 800d536:	2001      	movs	r0, #1
 800d538:	4770      	bx	lr
        status = HAL_ERROR;
 800d53a:	2001      	movs	r0, #1
 800d53c:	4770      	bx	lr
      status = HAL_ERROR;
 800d53e:	2001      	movs	r0, #1
 800d540:	4770      	bx	lr
        status = HAL_ERROR;
 800d542:	2001      	movs	r0, #1
 800d544:	4770      	bx	lr
        status = HAL_ERROR;
 800d546:	2001      	movs	r0, #1
 800d548:	4770      	bx	lr
      status = HAL_ERROR;
 800d54a:	2001      	movs	r0, #1
 800d54c:	4770      	bx	lr
	...

0800d550 <HAL_DMA_Init>:
{
 800d550:	b570      	push	{r4, r5, r6, lr}
 800d552:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d554:	f7ff fd24 	bl	800cfa0 <HAL_GetTick>
  if(hdma == NULL)
 800d558:	2c00      	cmp	r4, #0
 800d55a:	d05d      	beq.n	800d618 <HAL_DMA_Init+0xc8>
 800d55c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800d55e:	2300      	movs	r3, #0
 800d560:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800d564:	2302      	movs	r3, #2
 800d566:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800d56a:	6822      	ldr	r2, [r4, #0]
 800d56c:	6813      	ldr	r3, [r2, #0]
 800d56e:	f023 0301 	bic.w	r3, r3, #1
 800d572:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d574:	6823      	ldr	r3, [r4, #0]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	f012 0f01 	tst.w	r2, #1
 800d57c:	d00a      	beq.n	800d594 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d57e:	f7ff fd0f 	bl	800cfa0 <HAL_GetTick>
 800d582:	1b40      	subs	r0, r0, r5
 800d584:	2805      	cmp	r0, #5
 800d586:	d9f5      	bls.n	800d574 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d588:	2320      	movs	r3, #32
 800d58a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d58c:	2003      	movs	r0, #3
 800d58e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800d592:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800d594:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d596:	4921      	ldr	r1, [pc, #132]	; (800d61c <HAL_DMA_Init+0xcc>)
 800d598:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d59a:	6862      	ldr	r2, [r4, #4]
 800d59c:	68a0      	ldr	r0, [r4, #8]
 800d59e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d5a0:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d5a2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d5a4:	6920      	ldr	r0, [r4, #16]
 800d5a6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d5a8:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d5aa:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d5ac:	69a0      	ldr	r0, [r4, #24]
 800d5ae:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800d5b0:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d5b2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800d5b4:	6a20      	ldr	r0, [r4, #32]
 800d5b6:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d5b8:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d5ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d5bc:	2904      	cmp	r1, #4
 800d5be:	d016      	beq.n	800d5ee <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 800d5c0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800d5c2:	6826      	ldr	r6, [r4, #0]
 800d5c4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d5c6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800d5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5cc:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d5ce:	2b04      	cmp	r3, #4
 800d5d0:	d012      	beq.n	800d5f8 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 800d5d2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f7ff ff57 	bl	800d488 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d5da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d5dc:	233f      	movs	r3, #63	; 0x3f
 800d5de:	4093      	lsls	r3, r2
 800d5e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800d5ec:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d5ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d5f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d5f2:	4301      	orrs	r1, r0
 800d5f4:	430a      	orrs	r2, r1
 800d5f6:	e7e3      	b.n	800d5c0 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 800d5f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d5fa:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d5fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d0e7      	beq.n	800d5d2 <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800d602:	4620      	mov	r0, r4
 800d604:	f7ff ff5c 	bl	800d4c0 <DMA_CheckFifoParam>
 800d608:	2800      	cmp	r0, #0
 800d60a:	d0e2      	beq.n	800d5d2 <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d60c:	2340      	movs	r3, #64	; 0x40
 800d60e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800d610:	2001      	movs	r0, #1
 800d612:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800d616:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800d618:	2001      	movs	r0, #1
}
 800d61a:	bd70      	pop	{r4, r5, r6, pc}
 800d61c:	e010803f 	.word	0xe010803f

0800d620 <HAL_DMA_Start_IT>:
{
 800d620:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d622:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800d624:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800d628:	2c01      	cmp	r4, #1
 800d62a:	d031      	beq.n	800d690 <HAL_DMA_Start_IT+0x70>
 800d62c:	2401      	movs	r4, #1
 800d62e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800d632:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800d636:	b2e4      	uxtb	r4, r4
 800d638:	2c01      	cmp	r4, #1
 800d63a:	d004      	beq.n	800d646 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 800d63c:	2300      	movs	r3, #0
 800d63e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800d642:	2002      	movs	r0, #2
 800d644:	bd38      	pop	{r3, r4, r5, pc}
 800d646:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800d648:	2002      	movs	r0, #2
 800d64a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d64e:	2000      	movs	r0, #0
 800d650:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d652:	4620      	mov	r0, r4
 800d654:	f7ff ff01 	bl	800d45a <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d658:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d65a:	233f      	movs	r3, #63	; 0x3f
 800d65c:	4093      	lsls	r3, r2
 800d65e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800d660:	6822      	ldr	r2, [r4, #0]
 800d662:	6813      	ldr	r3, [r2, #0]
 800d664:	f043 0316 	orr.w	r3, r3, #22
 800d668:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800d66a:	6822      	ldr	r2, [r4, #0]
 800d66c:	6953      	ldr	r3, [r2, #20]
 800d66e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d672:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800d674:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d676:	b123      	cbz	r3, 800d682 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 800d678:	6822      	ldr	r2, [r4, #0]
 800d67a:	6813      	ldr	r3, [r2, #0]
 800d67c:	f043 0308 	orr.w	r3, r3, #8
 800d680:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800d682:	6822      	ldr	r2, [r4, #0]
 800d684:	6813      	ldr	r3, [r2, #0]
 800d686:	f043 0301 	orr.w	r3, r3, #1
 800d68a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d68c:	2000      	movs	r0, #0
 800d68e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 800d690:	2002      	movs	r0, #2
}
 800d692:	bd38      	pop	{r3, r4, r5, pc}

0800d694 <HAL_DMA_Abort>:
{
 800d694:	b570      	push	{r4, r5, r6, lr}
 800d696:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d698:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800d69a:	f7ff fc81 	bl	800cfa0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d69e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d006      	beq.n	800d6b6 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d6a8:	2380      	movs	r3, #128	; 0x80
 800d6aa:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800d6b2:	2001      	movs	r0, #1
 800d6b4:	bd70      	pop	{r4, r5, r6, pc}
 800d6b6:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d6b8:	6822      	ldr	r2, [r4, #0]
 800d6ba:	6813      	ldr	r3, [r2, #0]
 800d6bc:	f023 0316 	bic.w	r3, r3, #22
 800d6c0:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d6c2:	6822      	ldr	r2, [r4, #0]
 800d6c4:	6953      	ldr	r3, [r2, #20]
 800d6c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6ca:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d6cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6ce:	b1e3      	cbz	r3, 800d70a <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d6d0:	6822      	ldr	r2, [r4, #0]
 800d6d2:	6813      	ldr	r3, [r2, #0]
 800d6d4:	f023 0308 	bic.w	r3, r3, #8
 800d6d8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800d6da:	6822      	ldr	r2, [r4, #0]
 800d6dc:	6813      	ldr	r3, [r2, #0]
 800d6de:	f023 0301 	bic.w	r3, r3, #1
 800d6e2:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f013 0f01 	tst.w	r3, #1
 800d6ec:	d011      	beq.n	800d712 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d6ee:	f7ff fc57 	bl	800cfa0 <HAL_GetTick>
 800d6f2:	1b40      	subs	r0, r0, r5
 800d6f4:	2805      	cmp	r0, #5
 800d6f6:	d9f5      	bls.n	800d6e4 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d6f8:	2320      	movs	r3, #32
 800d6fa:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d702:	2003      	movs	r0, #3
 800d704:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800d708:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d70a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d1df      	bne.n	800d6d0 <HAL_DMA_Abort+0x3c>
 800d710:	e7e3      	b.n	800d6da <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d712:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d714:	233f      	movs	r3, #63	; 0x3f
 800d716:	4093      	lsls	r3, r2
 800d718:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 800d71a:	2000      	movs	r0, #0
 800d71c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800d720:	2301      	movs	r3, #1
 800d722:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800d726:	bd70      	pop	{r4, r5, r6, pc}

0800d728 <HAL_DMA_IRQHandler>:
{
 800d728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d72a:	b083      	sub	sp, #12
 800d72c:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800d72e:	2300      	movs	r3, #0
 800d730:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800d732:	4b72      	ldr	r3, [pc, #456]	; (800d8fc <HAL_DMA_IRQHandler+0x1d4>)
 800d734:	681d      	ldr	r5, [r3, #0]
 800d736:	4b72      	ldr	r3, [pc, #456]	; (800d900 <HAL_DMA_IRQHandler+0x1d8>)
 800d738:	fba3 3505 	umull	r3, r5, r3, r5
 800d73c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d73e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800d740:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d742:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800d744:	2308      	movs	r3, #8
 800d746:	4093      	lsls	r3, r2
 800d748:	421e      	tst	r6, r3
 800d74a:	d010      	beq.n	800d76e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800d74c:	6803      	ldr	r3, [r0, #0]
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	f012 0f04 	tst.w	r2, #4
 800d754:	d00b      	beq.n	800d76e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	f022 0204 	bic.w	r2, r2, #4
 800d75c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800d75e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800d760:	2308      	movs	r3, #8
 800d762:	4093      	lsls	r3, r2
 800d764:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d766:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800d768:	f043 0301 	orr.w	r3, r3, #1
 800d76c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800d76e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d770:	2301      	movs	r3, #1
 800d772:	4093      	lsls	r3, r2
 800d774:	421e      	tst	r6, r3
 800d776:	d009      	beq.n	800d78c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800d778:	6822      	ldr	r2, [r4, #0]
 800d77a:	6952      	ldr	r2, [r2, #20]
 800d77c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d780:	d004      	beq.n	800d78c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800d782:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d784:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d786:	f043 0302 	orr.w	r3, r3, #2
 800d78a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800d78c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d78e:	2304      	movs	r3, #4
 800d790:	4093      	lsls	r3, r2
 800d792:	421e      	tst	r6, r3
 800d794:	d009      	beq.n	800d7aa <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800d796:	6822      	ldr	r2, [r4, #0]
 800d798:	6812      	ldr	r2, [r2, #0]
 800d79a:	f012 0f02 	tst.w	r2, #2
 800d79e:	d004      	beq.n	800d7aa <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800d7a0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d7a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d7a4:	f043 0304 	orr.w	r3, r3, #4
 800d7a8:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800d7aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d7ac:	2310      	movs	r3, #16
 800d7ae:	4093      	lsls	r3, r2
 800d7b0:	421e      	tst	r6, r3
 800d7b2:	d024      	beq.n	800d7fe <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800d7b4:	6822      	ldr	r2, [r4, #0]
 800d7b6:	6812      	ldr	r2, [r2, #0]
 800d7b8:	f012 0f08 	tst.w	r2, #8
 800d7bc:	d01f      	beq.n	800d7fe <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d7be:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800d7c8:	d00d      	beq.n	800d7e6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800d7d0:	d104      	bne.n	800d7dc <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800d7d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7d4:	b19b      	cbz	r3, 800d7fe <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	4798      	blx	r3
 800d7da:	e010      	b.n	800d7fe <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d7dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d7de:	b173      	cbz	r3, 800d7fe <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	4798      	blx	r3
 800d7e4:	e00b      	b.n	800d7fe <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	f412 7f80 	tst.w	r2, #256	; 0x100
 800d7ec:	d103      	bne.n	800d7f6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	f022 0208 	bic.w	r2, r2, #8
 800d7f4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800d7f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7f8:	b10b      	cbz	r3, 800d7fe <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d7fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d800:	2320      	movs	r3, #32
 800d802:	4093      	lsls	r3, r2
 800d804:	421e      	tst	r6, r3
 800d806:	d055      	beq.n	800d8b4 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d808:	6822      	ldr	r2, [r4, #0]
 800d80a:	6812      	ldr	r2, [r2, #0]
 800d80c:	f012 0f10 	tst.w	r2, #16
 800d810:	d050      	beq.n	800d8b4 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d812:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d814:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	2b05      	cmp	r3, #5
 800d81c:	d00e      	beq.n	800d83c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d81e:	6823      	ldr	r3, [r4, #0]
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800d826:	d033      	beq.n	800d890 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800d82e:	d12a      	bne.n	800d886 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800d830:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d832:	2b00      	cmp	r3, #0
 800d834:	d03e      	beq.n	800d8b4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800d836:	4620      	mov	r0, r4
 800d838:	4798      	blx	r3
 800d83a:	e03b      	b.n	800d8b4 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d83c:	6822      	ldr	r2, [r4, #0]
 800d83e:	6813      	ldr	r3, [r2, #0]
 800d840:	f023 0316 	bic.w	r3, r3, #22
 800d844:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d846:	6822      	ldr	r2, [r4, #0]
 800d848:	6953      	ldr	r3, [r2, #20]
 800d84a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d84e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d852:	b1a3      	cbz	r3, 800d87e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d854:	6822      	ldr	r2, [r4, #0]
 800d856:	6813      	ldr	r3, [r2, #0]
 800d858:	f023 0308 	bic.w	r3, r3, #8
 800d85c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d85e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d860:	233f      	movs	r3, #63	; 0x3f
 800d862:	4093      	lsls	r3, r2
 800d864:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800d866:	2300      	movs	r3, #0
 800d868:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800d86c:	2301      	movs	r3, #1
 800d86e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800d872:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d874:	2b00      	cmp	r3, #0
 800d876:	d03f      	beq.n	800d8f8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800d878:	4620      	mov	r0, r4
 800d87a:	4798      	blx	r3
 800d87c:	e03c      	b.n	800d8f8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d87e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1e7      	bne.n	800d854 <HAL_DMA_IRQHandler+0x12c>
 800d884:	e7eb      	b.n	800d85e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800d886:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d888:	b1a3      	cbz	r3, 800d8b4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800d88a:	4620      	mov	r0, r4
 800d88c:	4798      	blx	r3
 800d88e:	e011      	b.n	800d8b4 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	f412 7f80 	tst.w	r2, #256	; 0x100
 800d896:	d109      	bne.n	800d8ac <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	f022 0210 	bic.w	r2, r2, #16
 800d89e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800d8ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d8ae:	b10b      	cbz	r3, 800d8b4 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d8b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d8b6:	b1fb      	cbz	r3, 800d8f8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d8b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d8ba:	f013 0f01 	tst.w	r3, #1
 800d8be:	d017      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800d8c0:	2305      	movs	r3, #5
 800d8c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800d8c6:	6822      	ldr	r2, [r4, #0]
 800d8c8:	6813      	ldr	r3, [r2, #0]
 800d8ca:	f023 0301 	bic.w	r3, r3, #1
 800d8ce:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800d8d0:	9b01      	ldr	r3, [sp, #4]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	9301      	str	r3, [sp, #4]
 800d8d6:	429d      	cmp	r5, r3
 800d8d8:	d304      	bcc.n	800d8e4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d8da:	6823      	ldr	r3, [r4, #0]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f013 0f01 	tst.w	r3, #1
 800d8e2:	d1f5      	bne.n	800d8d0 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800d8f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d8f2:	b10b      	cbz	r3, 800d8f8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4798      	blx	r3
}
 800d8f8:	b003      	add	sp, #12
 800d8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8fc:	20000020 	.word	0x20000020
 800d900:	1b4e81b5 	.word	0x1b4e81b5

0800d904 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d904:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800d906:	490a      	ldr	r1, [pc, #40]	; (800d930 <FLASH_Program_DoubleWord+0x2c>)
 800d908:	690c      	ldr	r4, [r1, #16]
 800d90a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800d90e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800d910:	690c      	ldr	r4, [r1, #16]
 800d912:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800d916:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d918:	690c      	ldr	r4, [r1, #16]
 800d91a:	f044 0401 	orr.w	r4, r4, #1
 800d91e:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d920:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800d922:	6043      	str	r3, [r0, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d924:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800d928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	40023c00 	.word	0x40023c00

0800d934 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800d934:	4b08      	ldr	r3, [pc, #32]	; (800d958 <FLASH_Program_Word+0x24>)
 800d936:	691a      	ldr	r2, [r3, #16]
 800d938:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d93c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800d93e:	691a      	ldr	r2, [r3, #16]
 800d940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d944:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d946:	691a      	ldr	r2, [r3, #16]
 800d948:	f042 0201 	orr.w	r2, r2, #1
 800d94c:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 800d94e:	6001      	str	r1, [r0, #0]
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	40023c00 	.word	0x40023c00

0800d95c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800d95c:	4b08      	ldr	r3, [pc, #32]	; (800d980 <FLASH_Program_HalfWord+0x24>)
 800d95e:	691a      	ldr	r2, [r3, #16]
 800d960:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d964:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800d966:	691a      	ldr	r2, [r3, #16]
 800d968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d96c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d96e:	691a      	ldr	r2, [r3, #16]
 800d970:	f042 0201 	orr.w	r2, r2, #1
 800d974:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800d976:	8001      	strh	r1, [r0, #0]
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	40023c00 	.word	0x40023c00

0800d984 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800d984:	4b07      	ldr	r3, [pc, #28]	; (800d9a4 <FLASH_Program_Byte+0x20>)
 800d986:	691a      	ldr	r2, [r3, #16]
 800d988:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d98c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800d98e:	691a      	ldr	r2, [r3, #16]
 800d990:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d992:	691a      	ldr	r2, [r3, #16]
 800d994:	f042 0201 	orr.w	r2, r2, #1
 800d998:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800d99a:	7001      	strb	r1, [r0, #0]
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	40023c00 	.word	0x40023c00

0800d9a8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800d9a8:	4b1a      	ldr	r3, [pc, #104]	; (800da14 <FLASH_SetErrorCode+0x6c>)
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	f013 0f02 	tst.w	r3, #2
 800d9b0:	d004      	beq.n	800d9bc <FLASH_SetErrorCode+0x14>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800d9b2:	4a19      	ldr	r2, [pc, #100]	; (800da18 <FLASH_SetErrorCode+0x70>)
 800d9b4:	6993      	ldr	r3, [r2, #24]
 800d9b6:	f043 0320 	orr.w	r3, r3, #32
 800d9ba:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800d9bc:	4b15      	ldr	r3, [pc, #84]	; (800da14 <FLASH_SetErrorCode+0x6c>)
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	f013 0f10 	tst.w	r3, #16
 800d9c4:	d004      	beq.n	800d9d0 <FLASH_SetErrorCode+0x28>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800d9c6:	4a14      	ldr	r2, [pc, #80]	; (800da18 <FLASH_SetErrorCode+0x70>)
 800d9c8:	6993      	ldr	r3, [r2, #24]
 800d9ca:	f043 0310 	orr.w	r3, r3, #16
 800d9ce:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800d9d0:	4b10      	ldr	r3, [pc, #64]	; (800da14 <FLASH_SetErrorCode+0x6c>)
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	f013 0f20 	tst.w	r3, #32
 800d9d8:	d004      	beq.n	800d9e4 <FLASH_SetErrorCode+0x3c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800d9da:	4a0f      	ldr	r2, [pc, #60]	; (800da18 <FLASH_SetErrorCode+0x70>)
 800d9dc:	6993      	ldr	r3, [r2, #24]
 800d9de:	f043 0308 	orr.w	r3, r3, #8
 800d9e2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800d9e4:	4b0b      	ldr	r3, [pc, #44]	; (800da14 <FLASH_SetErrorCode+0x6c>)
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d9ec:	d004      	beq.n	800d9f8 <FLASH_SetErrorCode+0x50>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800d9ee:	4a0a      	ldr	r2, [pc, #40]	; (800da18 <FLASH_SetErrorCode+0x70>)
 800d9f0:	6993      	ldr	r3, [r2, #24]
 800d9f2:	f043 0304 	orr.w	r3, r3, #4
 800d9f6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800d9f8:	4b06      	ldr	r3, [pc, #24]	; (800da14 <FLASH_SetErrorCode+0x6c>)
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800da00:	d004      	beq.n	800da0c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800da02:	4a05      	ldr	r2, [pc, #20]	; (800da18 <FLASH_SetErrorCode+0x70>)
 800da04:	6993      	ldr	r3, [r2, #24]
 800da06:	f043 0302 	orr.w	r3, r3, #2
 800da0a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800da0c:	22f2      	movs	r2, #242	; 0xf2
 800da0e:	4b01      	ldr	r3, [pc, #4]	; (800da14 <FLASH_SetErrorCode+0x6c>)
 800da10:	60da      	str	r2, [r3, #12]
 800da12:	4770      	bx	lr
 800da14:	40023c00 	.word	0x40023c00
 800da18:	20007e80 	.word	0x20007e80

0800da1c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800da1c:	4b09      	ldr	r3, [pc, #36]	; (800da44 <HAL_FLASH_Unlock+0x28>)
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	2b00      	cmp	r3, #0
 800da22:	db01      	blt.n	800da28 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800da24:	2000      	movs	r0, #0
 800da26:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800da28:	4b06      	ldr	r3, [pc, #24]	; (800da44 <HAL_FLASH_Unlock+0x28>)
 800da2a:	4a07      	ldr	r2, [pc, #28]	; (800da48 <HAL_FLASH_Unlock+0x2c>)
 800da2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800da2e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800da32:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	db01      	blt.n	800da3e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800da3a:	2000      	movs	r0, #0
 800da3c:	4770      	bx	lr
      status = HAL_ERROR;
 800da3e:	2001      	movs	r0, #1
}
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	40023c00 	.word	0x40023c00
 800da48:	45670123 	.word	0x45670123

0800da4c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800da4c:	4a03      	ldr	r2, [pc, #12]	; (800da5c <HAL_FLASH_Lock+0x10>)
 800da4e:	6913      	ldr	r3, [r2, #16]
 800da50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da54:	6113      	str	r3, [r2, #16]
}
 800da56:	2000      	movs	r0, #0
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	40023c00 	.word	0x40023c00

0800da60 <FLASH_WaitForLastOperation>:
{ 
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800da64:	2200      	movs	r2, #0
 800da66:	4b16      	ldr	r3, [pc, #88]	; (800dac0 <FLASH_WaitForLastOperation+0x60>)
 800da68:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 800da6a:	f7ff fa99 	bl	800cfa0 <HAL_GetTick>
 800da6e:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800da70:	4b14      	ldr	r3, [pc, #80]	; (800dac4 <FLASH_WaitForLastOperation+0x64>)
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800da78:	d00a      	beq.n	800da90 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 800da7a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800da7e:	d0f7      	beq.n	800da70 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800da80:	b1cc      	cbz	r4, 800dab6 <FLASH_WaitForLastOperation+0x56>
 800da82:	f7ff fa8d 	bl	800cfa0 <HAL_GetTick>
 800da86:	1b40      	subs	r0, r0, r5
 800da88:	4284      	cmp	r4, r0
 800da8a:	d2f1      	bcs.n	800da70 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 800da8c:	2003      	movs	r0, #3
 800da8e:	bd38      	pop	{r3, r4, r5, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800da90:	4b0c      	ldr	r3, [pc, #48]	; (800dac4 <FLASH_WaitForLastOperation+0x64>)
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 800da98:	d109      	bne.n	800daae <FLASH_WaitForLastOperation+0x4e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800da9a:	4b0a      	ldr	r3, [pc, #40]	; (800dac4 <FLASH_WaitForLastOperation+0x64>)
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	f013 0f01 	tst.w	r3, #1
 800daa2:	d00a      	beq.n	800daba <FLASH_WaitForLastOperation+0x5a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800daa4:	2201      	movs	r2, #1
 800daa6:	4b07      	ldr	r3, [pc, #28]	; (800dac4 <FLASH_WaitForLastOperation+0x64>)
 800daa8:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800daaa:	2000      	movs	r0, #0
 800daac:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 800daae:	f7ff ff7b 	bl	800d9a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800dab2:	2001      	movs	r0, #1
 800dab4:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 800dab6:	2003      	movs	r0, #3
 800dab8:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800daba:	2000      	movs	r0, #0
}  
 800dabc:	bd38      	pop	{r3, r4, r5, pc}
 800dabe:	bf00      	nop
 800dac0:	20007e80 	.word	0x20007e80
 800dac4:	40023c00 	.word	0x40023c00

0800dac8 <HAL_FLASH_Program>:
{
 800dac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800dacc:	4c1e      	ldr	r4, [pc, #120]	; (800db48 <HAL_FLASH_Program+0x80>)
 800dace:	7d24      	ldrb	r4, [r4, #20]
 800dad0:	2c01      	cmp	r4, #1
 800dad2:	d103      	bne.n	800dadc <HAL_FLASH_Program+0x14>
 800dad4:	2402      	movs	r4, #2
}
 800dad6:	4620      	mov	r0, r4
 800dad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dadc:	4698      	mov	r8, r3
 800dade:	4617      	mov	r7, r2
 800dae0:	460e      	mov	r6, r1
 800dae2:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800dae4:	2201      	movs	r2, #1
 800dae6:	4b18      	ldr	r3, [pc, #96]	; (800db48 <HAL_FLASH_Program+0x80>)
 800dae8:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800daea:	f24c 3050 	movw	r0, #50000	; 0xc350
 800daee:	f7ff ffb7 	bl	800da60 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800daf2:	4604      	mov	r4, r0
 800daf4:	b998      	cbnz	r0, 800db1e <HAL_FLASH_Program+0x56>
    switch(TypeProgram)
 800daf6:	2d03      	cmp	r5, #3
 800daf8:	d807      	bhi.n	800db0a <HAL_FLASH_Program+0x42>
 800dafa:	e8df f005 	tbb	[pc, r5]
 800dafe:	1402      	.short	0x1402
 800db00:	1e19      	.short	0x1e19
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800db02:	b2f9      	uxtb	r1, r7
 800db04:	4630      	mov	r0, r6
 800db06:	f7ff ff3d 	bl	800d984 <FLASH_Program_Byte>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800db0e:	f7ff ffa7 	bl	800da60 <FLASH_WaitForLastOperation>
 800db12:	4604      	mov	r4, r0
    FLASH->CR &= (~FLASH_CR_PG);
 800db14:	4a0d      	ldr	r2, [pc, #52]	; (800db4c <HAL_FLASH_Program+0x84>)
 800db16:	6913      	ldr	r3, [r2, #16]
 800db18:	f023 0301 	bic.w	r3, r3, #1
 800db1c:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800db1e:	2200      	movs	r2, #0
 800db20:	4b09      	ldr	r3, [pc, #36]	; (800db48 <HAL_FLASH_Program+0x80>)
 800db22:	751a      	strb	r2, [r3, #20]
  return status;
 800db24:	e7d7      	b.n	800dad6 <HAL_FLASH_Program+0xe>
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800db26:	b2b9      	uxth	r1, r7
 800db28:	4630      	mov	r0, r6
 800db2a:	f7ff ff17 	bl	800d95c <FLASH_Program_HalfWord>
        break;
 800db2e:	e7ec      	b.n	800db0a <HAL_FLASH_Program+0x42>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800db30:	4639      	mov	r1, r7
 800db32:	4630      	mov	r0, r6
 800db34:	f7ff fefe 	bl	800d934 <FLASH_Program_Word>
        break;
 800db38:	e7e7      	b.n	800db0a <HAL_FLASH_Program+0x42>
        FLASH_Program_DoubleWord(Address, Data);
 800db3a:	463a      	mov	r2, r7
 800db3c:	4643      	mov	r3, r8
 800db3e:	4630      	mov	r0, r6
 800db40:	f7ff fee0 	bl	800d904 <FLASH_Program_DoubleWord>
        break;
 800db44:	e7e1      	b.n	800db0a <HAL_FLASH_Program+0x42>
 800db46:	bf00      	nop
 800db48:	20007e80 	.word	0x20007e80
 800db4c:	40023c00 	.word	0x40023c00

0800db50 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800db50:	4a11      	ldr	r2, [pc, #68]	; (800db98 <FLASH_MassErase+0x48>)
 800db52:	6913      	ldr	r3, [r2, #16]
 800db54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db58:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 800db5a:	2903      	cmp	r1, #3
 800db5c:	d010      	beq.n	800db80 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
  }
  else if(Banks == FLASH_BANK_2)
 800db5e:	2902      	cmp	r1, #2
 800db60:	d014      	beq.n	800db8c <FLASH_MassErase+0x3c>
    FLASH->CR |= FLASH_CR_MER2;
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 800db62:	4a0d      	ldr	r2, [pc, #52]	; (800db98 <FLASH_MassErase+0x48>)
 800db64:	6913      	ldr	r3, [r2, #16]
 800db66:	f043 0304 	orr.w	r3, r3, #4
 800db6a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800db6c:	4a0a      	ldr	r2, [pc, #40]	; (800db98 <FLASH_MassErase+0x48>)
 800db6e:	6913      	ldr	r3, [r2, #16]
 800db70:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800db74:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800db78:	6110      	str	r0, [r2, #16]
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	4770      	bx	lr
    FLASH->CR |= FLASH_MER_BIT;
 800db80:	6911      	ldr	r1, [r2, #16]
 800db82:	f248 0304 	movw	r3, #32772	; 0x8004
 800db86:	430b      	orrs	r3, r1
 800db88:	6113      	str	r3, [r2, #16]
 800db8a:	e7ef      	b.n	800db6c <FLASH_MassErase+0x1c>
    FLASH->CR |= FLASH_CR_MER2;
 800db8c:	4a02      	ldr	r2, [pc, #8]	; (800db98 <FLASH_MassErase+0x48>)
 800db8e:	6913      	ldr	r3, [r2, #16]
 800db90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db94:	6113      	str	r3, [r2, #16]
 800db96:	e7e9      	b.n	800db6c <FLASH_MassErase+0x1c>
 800db98:	40023c00 	.word	0x40023c00

0800db9c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800db9c:	b149      	cbz	r1, 800dbb2 <FLASH_Erase_Sector+0x16>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800db9e:	2901      	cmp	r1, #1
 800dba0:	d024      	beq.n	800dbec <FLASH_Erase_Sector+0x50>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800dba2:	2902      	cmp	r1, #2
 800dba4:	d002      	beq.n	800dbac <FLASH_Erase_Sector+0x10>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800dba6:	f44f 7140 	mov.w	r1, #768	; 0x300
 800dbaa:	e003      	b.n	800dbb4 <FLASH_Erase_Sector+0x18>
    tmp_psize = FLASH_PSIZE_WORD;
 800dbac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dbb0:	e000      	b.n	800dbb4 <FLASH_Erase_Sector+0x18>
     tmp_psize = FLASH_PSIZE_BYTE;
 800dbb2:	2100      	movs	r1, #0
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800dbb4:	280b      	cmp	r0, #11
 800dbb6:	d900      	bls.n	800dbba <FLASH_Erase_Sector+0x1e>
  {
    Sector += 4;
 800dbb8:	3004      	adds	r0, #4
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800dbba:	4b0e      	ldr	r3, [pc, #56]	; (800dbf4 <FLASH_Erase_Sector+0x58>)
 800dbbc:	691a      	ldr	r2, [r3, #16]
 800dbbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800dbc2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800dbc4:	691a      	ldr	r2, [r3, #16]
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800dbca:	691a      	ldr	r2, [r3, #16]
 800dbcc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800dbd0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800dbd2:	691a      	ldr	r2, [r3, #16]
 800dbd4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800dbd8:	f040 0002 	orr.w	r0, r0, #2
 800dbdc:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800dbde:	691a      	ldr	r2, [r3, #16]
 800dbe0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dbe4:	611a      	str	r2, [r3, #16]
 800dbe6:	f3bf 8f4f 	dsb	sy
 800dbea:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800dbec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dbf0:	e7e0      	b.n	800dbb4 <FLASH_Erase_Sector+0x18>
 800dbf2:	bf00      	nop
 800dbf4:	40023c00 	.word	0x40023c00

0800dbf8 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 800dbf8:	4b22      	ldr	r3, [pc, #136]	; (800dc84 <HAL_FLASHEx_Erase+0x8c>)
 800dbfa:	7d1b      	ldrb	r3, [r3, #20]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d102      	bne.n	800dc06 <HAL_FLASHEx_Erase+0xe>
 800dc00:	2202      	movs	r2, #2
}
 800dc02:	4610      	mov	r0, r2
 800dc04:	4770      	bx	lr
{
 800dc06:	b570      	push	{r4, r5, r6, lr}
 800dc08:	460e      	mov	r6, r1
 800dc0a:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	4b1d      	ldr	r3, [pc, #116]	; (800dc84 <HAL_FLASHEx_Erase+0x8c>)
 800dc10:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dc12:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dc16:	f7ff ff23 	bl	800da60 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	bb60      	cbnz	r0, 800dc78 <HAL_FLASHEx_Erase+0x80>
    *SectorError = 0xFFFFFFFFU;
 800dc1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc22:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800dc24:	6823      	ldr	r3, [r4, #0]
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d016      	beq.n	800dc58 <HAL_FLASHEx_Erase+0x60>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800dc2a:	68a5      	ldr	r5, [r4, #8]
 800dc2c:	68e3      	ldr	r3, [r4, #12]
 800dc2e:	68a1      	ldr	r1, [r4, #8]
 800dc30:	440b      	add	r3, r1
 800dc32:	429d      	cmp	r5, r3
 800dc34:	d220      	bcs.n	800dc78 <HAL_FLASHEx_Erase+0x80>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800dc36:	7c21      	ldrb	r1, [r4, #16]
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f7ff ffaf 	bl	800db9c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dc3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dc42:	f7ff ff0d 	bl	800da60 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800dc46:	4a10      	ldr	r2, [pc, #64]	; (800dc88 <HAL_FLASHEx_Erase+0x90>)
 800dc48:	6913      	ldr	r3, [r2, #16]
 800dc4a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800dc4e:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 800dc50:	4602      	mov	r2, r0
 800dc52:	b980      	cbnz	r0, 800dc76 <HAL_FLASHEx_Erase+0x7e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800dc54:	3501      	adds	r5, #1
 800dc56:	e7e9      	b.n	800dc2c <HAL_FLASHEx_Erase+0x34>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800dc58:	6861      	ldr	r1, [r4, #4]
 800dc5a:	7c20      	ldrb	r0, [r4, #16]
 800dc5c:	f7ff ff78 	bl	800db50 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dc60:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dc64:	f7ff fefc 	bl	800da60 <FLASH_WaitForLastOperation>
 800dc68:	4602      	mov	r2, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800dc6a:	4907      	ldr	r1, [pc, #28]	; (800dc88 <HAL_FLASHEx_Erase+0x90>)
 800dc6c:	6908      	ldr	r0, [r1, #16]
 800dc6e:	4b07      	ldr	r3, [pc, #28]	; (800dc8c <HAL_FLASHEx_Erase+0x94>)
 800dc70:	4003      	ands	r3, r0
 800dc72:	610b      	str	r3, [r1, #16]
 800dc74:	e000      	b.n	800dc78 <HAL_FLASHEx_Erase+0x80>
          *SectorError = index;
 800dc76:	6035      	str	r5, [r6, #0]
  __HAL_UNLOCK(&pFlash);
 800dc78:	2100      	movs	r1, #0
 800dc7a:	4b02      	ldr	r3, [pc, #8]	; (800dc84 <HAL_FLASHEx_Erase+0x8c>)
 800dc7c:	7519      	strb	r1, [r3, #20]
}
 800dc7e:	4610      	mov	r0, r2
 800dc80:	bd70      	pop	{r4, r5, r6, pc}
 800dc82:	bf00      	nop
 800dc84:	20007e80 	.word	0x20007e80
 800dc88:	40023c00 	.word	0x40023c00
 800dc8c:	ffff7ffb 	.word	0xffff7ffb

0800dc90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dc90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc92:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800dc94:	2400      	movs	r4, #0
 800dc96:	e037      	b.n	800dd08 <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800dc98:	2609      	movs	r6, #9
 800dc9a:	e000      	b.n	800dc9e <HAL_GPIO_Init+0xe>
 800dc9c:	2600      	movs	r6, #0
 800dc9e:	fa06 f60e 	lsl.w	r6, r6, lr
 800dca2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800dca4:	3302      	adds	r3, #2
 800dca6:	4e6c      	ldr	r6, [pc, #432]	; (800de58 <HAL_GPIO_Init+0x1c8>)
 800dca8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800dcac:	4b6b      	ldr	r3, [pc, #428]	; (800de5c <HAL_GPIO_Init+0x1cc>)
 800dcae:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 800dcb0:	43eb      	mvns	r3, r5
 800dcb2:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800dcb6:	684f      	ldr	r7, [r1, #4]
 800dcb8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800dcbc:	d001      	beq.n	800dcc2 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 800dcbe:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 800dcc2:	4a66      	ldr	r2, [pc, #408]	; (800de5c <HAL_GPIO_Init+0x1cc>)
 800dcc4:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800dcc6:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800dcc8:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800dccc:	684f      	ldr	r7, [r1, #4]
 800dcce:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800dcd2:	d001      	beq.n	800dcd8 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 800dcd4:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 800dcd8:	4a60      	ldr	r2, [pc, #384]	; (800de5c <HAL_GPIO_Init+0x1cc>)
 800dcda:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800dcdc:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800dcde:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800dce2:	684f      	ldr	r7, [r1, #4]
 800dce4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800dce8:	d001      	beq.n	800dcee <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 800dcea:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 800dcee:	4a5b      	ldr	r2, [pc, #364]	; (800de5c <HAL_GPIO_Init+0x1cc>)
 800dcf0:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800dcf2:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800dcf4:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800dcf6:	684e      	ldr	r6, [r1, #4]
 800dcf8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800dcfc:	d001      	beq.n	800dd02 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 800dcfe:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 800dd02:	4a56      	ldr	r2, [pc, #344]	; (800de5c <HAL_GPIO_Init+0x1cc>)
 800dd04:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800dd06:	3401      	adds	r4, #1
 800dd08:	2c0f      	cmp	r4, #15
 800dd0a:	f200 80a3 	bhi.w	800de54 <HAL_GPIO_Init+0x1c4>
    ioposition = ((uint32_t)0x01) << position;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dd12:	680a      	ldr	r2, [r1, #0]
 800dd14:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 800dd18:	42ab      	cmp	r3, r5
 800dd1a:	d1f4      	bne.n	800dd06 <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800dd1c:	684a      	ldr	r2, [r1, #4]
 800dd1e:	2a12      	cmp	r2, #18
 800dd20:	bf18      	it	ne
 800dd22:	2a02      	cmpne	r2, #2
 800dd24:	d112      	bne.n	800dd4c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 800dd26:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800dd2a:	f10e 0e08 	add.w	lr, lr, #8
 800dd2e:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800dd32:	f004 0607 	and.w	r6, r4, #7
 800dd36:	00b6      	lsls	r6, r6, #2
 800dd38:	270f      	movs	r7, #15
 800dd3a:	40b7      	lsls	r7, r6
 800dd3c:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800dd40:	690f      	ldr	r7, [r1, #16]
 800dd42:	fa07 f606 	lsl.w	r6, r7, r6
 800dd46:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 800dd48:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 800dd4c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800dd4e:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 800dd52:	2203      	movs	r2, #3
 800dd54:	fa02 f20e 	lsl.w	r2, r2, lr
 800dd58:	43d2      	mvns	r2, r2
 800dd5a:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800dd5c:	684f      	ldr	r7, [r1, #4]
 800dd5e:	f007 0703 	and.w	r7, r7, #3
 800dd62:	fa07 f70e 	lsl.w	r7, r7, lr
 800dd66:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800dd68:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800dd6a:	684e      	ldr	r6, [r1, #4]
 800dd6c:	1e77      	subs	r7, r6, #1
 800dd6e:	2e11      	cmp	r6, #17
 800dd70:	bf18      	it	ne
 800dd72:	2f01      	cmpne	r7, #1
 800dd74:	d901      	bls.n	800dd7a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800dd76:	2e12      	cmp	r6, #18
 800dd78:	d10f      	bne.n	800dd9a <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 800dd7a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800dd7c:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 800dd7e:	68cf      	ldr	r7, [r1, #12]
 800dd80:	fa07 f70e 	lsl.w	r7, r7, lr
 800dd84:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800dd86:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800dd88:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dd8a:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800dd8e:	684e      	ldr	r6, [r1, #4]
 800dd90:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800dd94:	40a6      	lsls	r6, r4
 800dd96:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800dd98:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800dd9a:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800dd9c:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800dd9e:	688b      	ldr	r3, [r1, #8]
 800dda0:	fa03 f30e 	lsl.w	r3, r3, lr
 800dda4:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 800dda6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800dda8:	684b      	ldr	r3, [r1, #4]
 800ddaa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800ddae:	d0aa      	beq.n	800dd06 <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ddb0:	4b2b      	ldr	r3, [pc, #172]	; (800de60 <HAL_GPIO_Init+0x1d0>)
 800ddb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ddb8:	645a      	str	r2, [r3, #68]	; 0x44
 800ddba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800ddc4:	08a3      	lsrs	r3, r4, #2
 800ddc6:	1c9e      	adds	r6, r3, #2
 800ddc8:	4a23      	ldr	r2, [pc, #140]	; (800de58 <HAL_GPIO_Init+0x1c8>)
 800ddca:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ddce:	f004 0603 	and.w	r6, r4, #3
 800ddd2:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800ddd6:	260f      	movs	r6, #15
 800ddd8:	fa06 f60e 	lsl.w	r6, r6, lr
 800dddc:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800dde0:	4f20      	ldr	r7, [pc, #128]	; (800de64 <HAL_GPIO_Init+0x1d4>)
 800dde2:	42b8      	cmp	r0, r7
 800dde4:	f43f af5a 	beq.w	800dc9c <HAL_GPIO_Init+0xc>
 800dde8:	4e1f      	ldr	r6, [pc, #124]	; (800de68 <HAL_GPIO_Init+0x1d8>)
 800ddea:	42b0      	cmp	r0, r6
 800ddec:	d022      	beq.n	800de34 <HAL_GPIO_Init+0x1a4>
 800ddee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800ddf2:	42b0      	cmp	r0, r6
 800ddf4:	d020      	beq.n	800de38 <HAL_GPIO_Init+0x1a8>
 800ddf6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800ddfa:	42b0      	cmp	r0, r6
 800ddfc:	d01e      	beq.n	800de3c <HAL_GPIO_Init+0x1ac>
 800ddfe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800de02:	42b0      	cmp	r0, r6
 800de04:	d01c      	beq.n	800de40 <HAL_GPIO_Init+0x1b0>
 800de06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800de0a:	42b0      	cmp	r0, r6
 800de0c:	d01a      	beq.n	800de44 <HAL_GPIO_Init+0x1b4>
 800de0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800de12:	42b0      	cmp	r0, r6
 800de14:	d018      	beq.n	800de48 <HAL_GPIO_Init+0x1b8>
 800de16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800de1a:	42b0      	cmp	r0, r6
 800de1c:	d016      	beq.n	800de4c <HAL_GPIO_Init+0x1bc>
 800de1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800de22:	42b0      	cmp	r0, r6
 800de24:	d014      	beq.n	800de50 <HAL_GPIO_Init+0x1c0>
 800de26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800de2a:	42b0      	cmp	r0, r6
 800de2c:	f43f af34 	beq.w	800dc98 <HAL_GPIO_Init+0x8>
 800de30:	260a      	movs	r6, #10
 800de32:	e734      	b.n	800dc9e <HAL_GPIO_Init+0xe>
 800de34:	2601      	movs	r6, #1
 800de36:	e732      	b.n	800dc9e <HAL_GPIO_Init+0xe>
 800de38:	2602      	movs	r6, #2
 800de3a:	e730      	b.n	800dc9e <HAL_GPIO_Init+0xe>
 800de3c:	2603      	movs	r6, #3
 800de3e:	e72e      	b.n	800dc9e <HAL_GPIO_Init+0xe>
 800de40:	2604      	movs	r6, #4
 800de42:	e72c      	b.n	800dc9e <HAL_GPIO_Init+0xe>
 800de44:	2605      	movs	r6, #5
 800de46:	e72a      	b.n	800dc9e <HAL_GPIO_Init+0xe>
 800de48:	2606      	movs	r6, #6
 800de4a:	e728      	b.n	800dc9e <HAL_GPIO_Init+0xe>
 800de4c:	2607      	movs	r6, #7
 800de4e:	e726      	b.n	800dc9e <HAL_GPIO_Init+0xe>
 800de50:	2608      	movs	r6, #8
 800de52:	e724      	b.n	800dc9e <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 800de54:	b003      	add	sp, #12
 800de56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de58:	40013800 	.word	0x40013800
 800de5c:	40013c00 	.word	0x40013c00
 800de60:	40023800 	.word	0x40023800
 800de64:	40020000 	.word	0x40020000
 800de68:	40020400 	.word	0x40020400

0800de6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800de6c:	b912      	cbnz	r2, 800de74 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800de6e:	0409      	lsls	r1, r1, #16
 800de70:	6181      	str	r1, [r0, #24]
 800de72:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800de74:	6181      	str	r1, [r0, #24]
 800de76:	4770      	bx	lr

0800de78 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800de78:	6943      	ldr	r3, [r0, #20]
 800de7a:	4059      	eors	r1, r3
 800de7c:	6141      	str	r1, [r0, #20]
 800de7e:	4770      	bx	lr

0800de80 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800de80:	2800      	cmp	r0, #0
 800de82:	d057      	beq.n	800df34 <HAL_I2C_Init+0xb4>
{
 800de84:	b510      	push	{r4, lr}
 800de86:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800de88:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d041      	beq.n	800df14 <HAL_I2C_Init+0x94>

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800de90:	2324      	movs	r3, #36	; 0x24
 800de92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800de96:	6822      	ldr	r2, [r4, #0]
 800de98:	6813      	ldr	r3, [r2, #0]
 800de9a:	f023 0301 	bic.w	r3, r3, #1
 800de9e:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800dea0:	6822      	ldr	r2, [r4, #0]
 800dea2:	6863      	ldr	r3, [r4, #4]
 800dea4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800dea8:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800deaa:	6822      	ldr	r2, [r4, #0]
 800deac:	6893      	ldr	r3, [r2, #8]
 800deae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800deb2:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800deb4:	68e3      	ldr	r3, [r4, #12]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d031      	beq.n	800df1e <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800deba:	6822      	ldr	r2, [r4, #0]
 800debc:	68a3      	ldr	r3, [r4, #8]
 800debe:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800dec2:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dec4:	68e3      	ldr	r3, [r4, #12]
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	d02f      	beq.n	800df2a <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800deca:	6822      	ldr	r2, [r4, #0]
 800decc:	6851      	ldr	r1, [r2, #4]
 800dece:	4b1a      	ldr	r3, [pc, #104]	; (800df38 <HAL_I2C_Init+0xb8>)
 800ded0:	430b      	orrs	r3, r1
 800ded2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ded4:	6822      	ldr	r2, [r4, #0]
 800ded6:	68d3      	ldr	r3, [r2, #12]
 800ded8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dedc:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800dede:	6822      	ldr	r2, [r4, #0]
 800dee0:	6923      	ldr	r3, [r4, #16]
 800dee2:	6961      	ldr	r1, [r4, #20]
 800dee4:	430b      	orrs	r3, r1
 800dee6:	69a1      	ldr	r1, [r4, #24]
 800dee8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800deec:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800deee:	6822      	ldr	r2, [r4, #0]
 800def0:	69e3      	ldr	r3, [r4, #28]
 800def2:	6a21      	ldr	r1, [r4, #32]
 800def4:	430b      	orrs	r3, r1
 800def6:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800def8:	6822      	ldr	r2, [r4, #0]
 800defa:	6813      	ldr	r3, [r2, #0]
 800defc:	f043 0301 	orr.w	r3, r3, #1
 800df00:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df02:	2000      	movs	r0, #0
 800df04:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800df06:	2320      	movs	r3, #32
 800df08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800df0c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800df0e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 800df12:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800df14:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800df18:	f7fd fbde 	bl	800b6d8 <HAL_I2C_MspInit>
 800df1c:	e7b8      	b.n	800de90 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800df1e:	6822      	ldr	r2, [r4, #0]
 800df20:	68a3      	ldr	r3, [r4, #8]
 800df22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df26:	6093      	str	r3, [r2, #8]
 800df28:	e7cc      	b.n	800dec4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df30:	605a      	str	r2, [r3, #4]
 800df32:	e7ca      	b.n	800deca <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800df34:	2001      	movs	r0, #1
 800df36:	4770      	bx	lr
 800df38:	02008000 	.word	0x02008000

0800df3c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800df3c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800df40:	b2db      	uxtb	r3, r3
 800df42:	2b20      	cmp	r3, #32
 800df44:	d001      	beq.n	800df4a <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800df46:	2002      	movs	r0, #2
 800df48:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800df4a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d020      	beq.n	800df94 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800df52:	2301      	movs	r3, #1
 800df54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800df58:	2324      	movs	r3, #36	; 0x24
 800df5a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800df5e:	6802      	ldr	r2, [r0, #0]
 800df60:	6813      	ldr	r3, [r2, #0]
 800df62:	f023 0301 	bic.w	r3, r3, #1
 800df66:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800df68:	6802      	ldr	r2, [r0, #0]
 800df6a:	6813      	ldr	r3, [r2, #0]
 800df6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df70:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800df72:	6802      	ldr	r2, [r0, #0]
 800df74:	6813      	ldr	r3, [r2, #0]
 800df76:	4319      	orrs	r1, r3
 800df78:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800df7a:	6802      	ldr	r2, [r0, #0]
 800df7c:	6813      	ldr	r3, [r2, #0]
 800df7e:	f043 0301 	orr.w	r3, r3, #1
 800df82:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800df84:	2320      	movs	r3, #32
 800df86:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800df8a:	2300      	movs	r3, #0
 800df8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 800df90:	4618      	mov	r0, r3
 800df92:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800df94:	2002      	movs	r0, #2
  }
}
 800df96:	4770      	bx	lr

0800df98 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800df98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	2b20      	cmp	r3, #32
 800dfa0:	d001      	beq.n	800dfa6 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800dfa2:	2002      	movs	r0, #2
 800dfa4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800dfa6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d01e      	beq.n	800dfec <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800dfb4:	2324      	movs	r3, #36	; 0x24
 800dfb6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800dfba:	6802      	ldr	r2, [r0, #0]
 800dfbc:	6813      	ldr	r3, [r2, #0]
 800dfbe:	f023 0301 	bic.w	r3, r3, #1
 800dfc2:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800dfc4:	6802      	ldr	r2, [r0, #0]
 800dfc6:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800dfc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800dfcc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800dfd0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800dfd2:	6802      	ldr	r2, [r0, #0]
 800dfd4:	6813      	ldr	r3, [r2, #0]
 800dfd6:	f043 0301 	orr.w	r3, r3, #1
 800dfda:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800dfdc:	2320      	movs	r3, #32
 800dfde:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 800dfe8:	4618      	mov	r0, r3
 800dfea:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800dfec:	2002      	movs	r0, #2
  }
}
 800dfee:	4770      	bx	lr

0800dff0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800dff0:	b510      	push	{r4, lr}
 800dff2:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800dff4:	4b1b      	ldr	r3, [pc, #108]	; (800e064 <HAL_PWREx_EnableOverDrive+0x74>)
 800dff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dff8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800dffc:	641a      	str	r2, [r3, #64]	; 0x40
 800dffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e004:	9301      	str	r3, [sp, #4]
 800e006:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e008:	4a17      	ldr	r2, [pc, #92]	; (800e068 <HAL_PWREx_EnableOverDrive+0x78>)
 800e00a:	6813      	ldr	r3, [r2, #0]
 800e00c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e010:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e012:	f7fe ffc5 	bl	800cfa0 <HAL_GetTick>
 800e016:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e018:	4b13      	ldr	r3, [pc, #76]	; (800e068 <HAL_PWREx_EnableOverDrive+0x78>)
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800e020:	d108      	bne.n	800e034 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e022:	f7fe ffbd 	bl	800cfa0 <HAL_GetTick>
 800e026:	1b00      	subs	r0, r0, r4
 800e028:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e02c:	d9f4      	bls.n	800e018 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800e02e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800e030:	b002      	add	sp, #8
 800e032:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e034:	4a0c      	ldr	r2, [pc, #48]	; (800e068 <HAL_PWREx_EnableOverDrive+0x78>)
 800e036:	6813      	ldr	r3, [r2, #0]
 800e038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e03c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800e03e:	f7fe ffaf 	bl	800cfa0 <HAL_GetTick>
 800e042:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e044:	4b08      	ldr	r3, [pc, #32]	; (800e068 <HAL_PWREx_EnableOverDrive+0x78>)
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800e04c:	d107      	bne.n	800e05e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e04e:	f7fe ffa7 	bl	800cfa0 <HAL_GetTick>
 800e052:	1b00      	subs	r0, r0, r4
 800e054:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e058:	d9f4      	bls.n	800e044 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800e05a:	2003      	movs	r0, #3
 800e05c:	e7e8      	b.n	800e030 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800e05e:	2000      	movs	r0, #0
 800e060:	e7e6      	b.n	800e030 <HAL_PWREx_EnableOverDrive+0x40>
 800e062:	bf00      	nop
 800e064:	40023800 	.word	0x40023800
 800e068:	40007000 	.word	0x40007000

0800e06c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e06c:	2800      	cmp	r0, #0
 800e06e:	f000 81dc 	beq.w	800e42a <HAL_RCC_OscConfig+0x3be>
{
 800e072:	b570      	push	{r4, r5, r6, lr}
 800e074:	b082      	sub	sp, #8
 800e076:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e078:	6803      	ldr	r3, [r0, #0]
 800e07a:	f013 0f01 	tst.w	r3, #1
 800e07e:	d03a      	beq.n	800e0f6 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e080:	4ba2      	ldr	r3, [pc, #648]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	f003 030c 	and.w	r3, r3, #12
 800e088:	2b04      	cmp	r3, #4
 800e08a:	d02b      	beq.n	800e0e4 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e08c:	4b9f      	ldr	r3, [pc, #636]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	f003 030c 	and.w	r3, r3, #12
 800e094:	2b08      	cmp	r3, #8
 800e096:	d020      	beq.n	800e0da <HAL_RCC_OscConfig+0x6e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e098:	6863      	ldr	r3, [r4, #4]
 800e09a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e09e:	d050      	beq.n	800e142 <HAL_RCC_OscConfig+0xd6>
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d154      	bne.n	800e14e <HAL_RCC_OscConfig+0xe2>
 800e0a4:	4b99      	ldr	r3, [pc, #612]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e0ac:	601a      	str	r2, [r3, #0]
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e0b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e0b6:	6863      	ldr	r3, [r4, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d05f      	beq.n	800e17c <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0bc:	f7fe ff70 	bl	800cfa0 <HAL_GetTick>
 800e0c0:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e0c2:	4b92      	ldr	r3, [pc, #584]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800e0ca:	d114      	bne.n	800e0f6 <HAL_RCC_OscConfig+0x8a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e0cc:	f7fe ff68 	bl	800cfa0 <HAL_GetTick>
 800e0d0:	1b40      	subs	r0, r0, r5
 800e0d2:	2864      	cmp	r0, #100	; 0x64
 800e0d4:	d9f5      	bls.n	800e0c2 <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 800e0d6:	2003      	movs	r0, #3
 800e0d8:	e1ac      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e0da:	4b8c      	ldr	r3, [pc, #560]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800e0e2:	d0d9      	beq.n	800e098 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e0e4:	4b89      	ldr	r3, [pc, #548]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800e0ec:	d003      	beq.n	800e0f6 <HAL_RCC_OscConfig+0x8a>
 800e0ee:	6863      	ldr	r3, [r4, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 819c 	beq.w	800e42e <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e0f6:	6823      	ldr	r3, [r4, #0]
 800e0f8:	f013 0f02 	tst.w	r3, #2
 800e0fc:	d064      	beq.n	800e1c8 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e0fe:	4b83      	ldr	r3, [pc, #524]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	f013 0f0c 	tst.w	r3, #12
 800e106:	d04d      	beq.n	800e1a4 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e108:	4b80      	ldr	r3, [pc, #512]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	f003 030c 	and.w	r3, r3, #12
 800e110:	2b08      	cmp	r3, #8
 800e112:	d042      	beq.n	800e19a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e114:	68e3      	ldr	r3, [r4, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d079      	beq.n	800e20e <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e11a:	4a7c      	ldr	r2, [pc, #496]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e11c:	6813      	ldr	r3, [r2, #0]
 800e11e:	f043 0301 	orr.w	r3, r3, #1
 800e122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e124:	f7fe ff3c 	bl	800cfa0 <HAL_GetTick>
 800e128:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e12a:	4b78      	ldr	r3, [pc, #480]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f013 0f02 	tst.w	r3, #2
 800e132:	d163      	bne.n	800e1fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e134:	f7fe ff34 	bl	800cfa0 <HAL_GetTick>
 800e138:	1b40      	subs	r0, r0, r5
 800e13a:	2802      	cmp	r0, #2
 800e13c:	d9f5      	bls.n	800e12a <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 800e13e:	2003      	movs	r0, #3
 800e140:	e178      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e142:	4a72      	ldr	r2, [pc, #456]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e144:	6813      	ldr	r3, [r2, #0]
 800e146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e14a:	6013      	str	r3, [r2, #0]
 800e14c:	e7b3      	b.n	800e0b6 <HAL_RCC_OscConfig+0x4a>
 800e14e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e152:	d009      	beq.n	800e168 <HAL_RCC_OscConfig+0xfc>
 800e154:	4b6d      	ldr	r3, [pc, #436]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	e7a6      	b.n	800e0b6 <HAL_RCC_OscConfig+0x4a>
 800e168:	4b68      	ldr	r3, [pc, #416]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e178:	601a      	str	r2, [r3, #0]
 800e17a:	e79c      	b.n	800e0b6 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 800e17c:	f7fe ff10 	bl	800cfa0 <HAL_GetTick>
 800e180:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e182:	4b62      	ldr	r3, [pc, #392]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800e18a:	d0b4      	beq.n	800e0f6 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e18c:	f7fe ff08 	bl	800cfa0 <HAL_GetTick>
 800e190:	1b40      	subs	r0, r0, r5
 800e192:	2864      	cmp	r0, #100	; 0x64
 800e194:	d9f5      	bls.n	800e182 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800e196:	2003      	movs	r0, #3
 800e198:	e14c      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e19a:	4b5c      	ldr	r3, [pc, #368]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800e1a2:	d1b7      	bne.n	800e114 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e1a4:	4b59      	ldr	r3, [pc, #356]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f013 0f02 	tst.w	r3, #2
 800e1ac:	d004      	beq.n	800e1b8 <HAL_RCC_OscConfig+0x14c>
 800e1ae:	68e3      	ldr	r3, [r4, #12]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d001      	beq.n	800e1b8 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 800e1b4:	2001      	movs	r0, #1
 800e1b6:	e13d      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1b8:	4a54      	ldr	r2, [pc, #336]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e1ba:	6813      	ldr	r3, [r2, #0]
 800e1bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e1c0:	6921      	ldr	r1, [r4, #16]
 800e1c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800e1c6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	f013 0f08 	tst.w	r3, #8
 800e1ce:	d046      	beq.n	800e25e <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e1d0:	6963      	ldr	r3, [r4, #20]
 800e1d2:	b383      	cbz	r3, 800e236 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e1d4:	4a4d      	ldr	r2, [pc, #308]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e1d6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800e1d8:	f043 0301 	orr.w	r3, r3, #1
 800e1dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1de:	f7fe fedf 	bl	800cfa0 <HAL_GetTick>
 800e1e2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e1e4:	4b49      	ldr	r3, [pc, #292]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e1e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1e8:	f013 0f02 	tst.w	r3, #2
 800e1ec:	d137      	bne.n	800e25e <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e1ee:	f7fe fed7 	bl	800cfa0 <HAL_GetTick>
 800e1f2:	1b40      	subs	r0, r0, r5
 800e1f4:	2802      	cmp	r0, #2
 800e1f6:	d9f5      	bls.n	800e1e4 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 800e1f8:	2003      	movs	r0, #3
 800e1fa:	e11b      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1fc:	4a43      	ldr	r2, [pc, #268]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e1fe:	6813      	ldr	r3, [r2, #0]
 800e200:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e204:	6921      	ldr	r1, [r4, #16]
 800e206:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800e20a:	6013      	str	r3, [r2, #0]
 800e20c:	e7dc      	b.n	800e1c8 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800e20e:	4a3f      	ldr	r2, [pc, #252]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e210:	6813      	ldr	r3, [r2, #0]
 800e212:	f023 0301 	bic.w	r3, r3, #1
 800e216:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e218:	f7fe fec2 	bl	800cfa0 <HAL_GetTick>
 800e21c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e21e:	4b3b      	ldr	r3, [pc, #236]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f013 0f02 	tst.w	r3, #2
 800e226:	d0cf      	beq.n	800e1c8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e228:	f7fe feba 	bl	800cfa0 <HAL_GetTick>
 800e22c:	1b40      	subs	r0, r0, r5
 800e22e:	2802      	cmp	r0, #2
 800e230:	d9f5      	bls.n	800e21e <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800e232:	2003      	movs	r0, #3
 800e234:	e0fe      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e236:	4a35      	ldr	r2, [pc, #212]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e238:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800e23a:	f023 0301 	bic.w	r3, r3, #1
 800e23e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e240:	f7fe feae 	bl	800cfa0 <HAL_GetTick>
 800e244:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e246:	4b31      	ldr	r3, [pc, #196]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e24a:	f013 0f02 	tst.w	r3, #2
 800e24e:	d006      	beq.n	800e25e <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e250:	f7fe fea6 	bl	800cfa0 <HAL_GetTick>
 800e254:	1b40      	subs	r0, r0, r5
 800e256:	2802      	cmp	r0, #2
 800e258:	d9f5      	bls.n	800e246 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 800e25a:	2003      	movs	r0, #3
 800e25c:	e0ea      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e25e:	6823      	ldr	r3, [r4, #0]
 800e260:	f013 0f04 	tst.w	r3, #4
 800e264:	d07e      	beq.n	800e364 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e266:	4b29      	ldr	r3, [pc, #164]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e26a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800e26e:	d131      	bne.n	800e2d4 <HAL_RCC_OscConfig+0x268>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800e270:	4b26      	ldr	r3, [pc, #152]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e274:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e278:	641a      	str	r2, [r3, #64]	; 0x40
 800e27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e27c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e280:	9301      	str	r3, [sp, #4]
 800e282:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800e284:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e286:	4b22      	ldr	r3, [pc, #136]	; (800e310 <HAL_RCC_OscConfig+0x2a4>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e28e:	d023      	beq.n	800e2d8 <HAL_RCC_OscConfig+0x26c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e290:	68a3      	ldr	r3, [r4, #8]
 800e292:	2b01      	cmp	r3, #1
 800e294:	d034      	beq.n	800e300 <HAL_RCC_OscConfig+0x294>
 800e296:	2b00      	cmp	r3, #0
 800e298:	d13c      	bne.n	800e314 <HAL_RCC_OscConfig+0x2a8>
 800e29a:	4b1c      	ldr	r3, [pc, #112]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e29c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e29e:	f022 0201 	bic.w	r2, r2, #1
 800e2a2:	671a      	str	r2, [r3, #112]	; 0x70
 800e2a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e2a6:	f022 0204 	bic.w	r2, r2, #4
 800e2aa:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e2ac:	68a3      	ldr	r3, [r4, #8]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d046      	beq.n	800e340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2b2:	f7fe fe75 	bl	800cfa0 <HAL_GetTick>
 800e2b6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2b8:	4b14      	ldr	r3, [pc, #80]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2bc:	f013 0f02 	tst.w	r3, #2
 800e2c0:	d14f      	bne.n	800e362 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e2c2:	f7fe fe6d 	bl	800cfa0 <HAL_GetTick>
 800e2c6:	1b80      	subs	r0, r0, r6
 800e2c8:	f241 3388 	movw	r3, #5000	; 0x1388
 800e2cc:	4298      	cmp	r0, r3
 800e2ce:	d9f3      	bls.n	800e2b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e2d0:	2003      	movs	r0, #3
 800e2d2:	e0af      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
  FlagStatus pwrclkchanged = RESET;
 800e2d4:	2500      	movs	r5, #0
 800e2d6:	e7d6      	b.n	800e286 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 800e2d8:	4a0d      	ldr	r2, [pc, #52]	; (800e310 <HAL_RCC_OscConfig+0x2a4>)
 800e2da:	6813      	ldr	r3, [r2, #0]
 800e2dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2e0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800e2e2:	f7fe fe5d 	bl	800cfa0 <HAL_GetTick>
 800e2e6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e2e8:	4b09      	ldr	r3, [pc, #36]	; (800e310 <HAL_RCC_OscConfig+0x2a4>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e2f0:	d1ce      	bne.n	800e290 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e2f2:	f7fe fe55 	bl	800cfa0 <HAL_GetTick>
 800e2f6:	1b80      	subs	r0, r0, r6
 800e2f8:	2864      	cmp	r0, #100	; 0x64
 800e2fa:	d9f5      	bls.n	800e2e8 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800e2fc:	2003      	movs	r0, #3
 800e2fe:	e099      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e300:	4a02      	ldr	r2, [pc, #8]	; (800e30c <HAL_RCC_OscConfig+0x2a0>)
 800e302:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800e304:	f043 0301 	orr.w	r3, r3, #1
 800e308:	6713      	str	r3, [r2, #112]	; 0x70
 800e30a:	e7cf      	b.n	800e2ac <HAL_RCC_OscConfig+0x240>
 800e30c:	40023800 	.word	0x40023800
 800e310:	40007000 	.word	0x40007000
 800e314:	2b05      	cmp	r3, #5
 800e316:	d009      	beq.n	800e32c <HAL_RCC_OscConfig+0x2c0>
 800e318:	4b48      	ldr	r3, [pc, #288]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e31a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e31c:	f022 0201 	bic.w	r2, r2, #1
 800e320:	671a      	str	r2, [r3, #112]	; 0x70
 800e322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e324:	f022 0204 	bic.w	r2, r2, #4
 800e328:	671a      	str	r2, [r3, #112]	; 0x70
 800e32a:	e7bf      	b.n	800e2ac <HAL_RCC_OscConfig+0x240>
 800e32c:	4b43      	ldr	r3, [pc, #268]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e32e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e330:	f042 0204 	orr.w	r2, r2, #4
 800e334:	671a      	str	r2, [r3, #112]	; 0x70
 800e336:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e338:	f042 0201 	orr.w	r2, r2, #1
 800e33c:	671a      	str	r2, [r3, #112]	; 0x70
 800e33e:	e7b5      	b.n	800e2ac <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e340:	f7fe fe2e 	bl	800cfa0 <HAL_GetTick>
 800e344:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e346:	4b3d      	ldr	r3, [pc, #244]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e34a:	f013 0f02 	tst.w	r3, #2
 800e34e:	d008      	beq.n	800e362 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e350:	f7fe fe26 	bl	800cfa0 <HAL_GetTick>
 800e354:	1b80      	subs	r0, r0, r6
 800e356:	f241 3388 	movw	r3, #5000	; 0x1388
 800e35a:	4298      	cmp	r0, r3
 800e35c:	d9f3      	bls.n	800e346 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800e35e:	2003      	movs	r0, #3
 800e360:	e068      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e362:	b9f5      	cbnz	r5, 800e3a2 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e364:	69a3      	ldr	r3, [r4, #24]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d063      	beq.n	800e432 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e36a:	4a34      	ldr	r2, [pc, #208]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e36c:	6892      	ldr	r2, [r2, #8]
 800e36e:	f002 020c 	and.w	r2, r2, #12
 800e372:	2a08      	cmp	r2, #8
 800e374:	d060      	beq.n	800e438 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e376:	2b02      	cmp	r3, #2
 800e378:	d019      	beq.n	800e3ae <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e37a:	4a30      	ldr	r2, [pc, #192]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e37c:	6813      	ldr	r3, [r2, #0]
 800e37e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e384:	f7fe fe0c 	bl	800cfa0 <HAL_GetTick>
 800e388:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e38a:	4b2c      	ldr	r3, [pc, #176]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800e392:	d048      	beq.n	800e426 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e394:	f7fe fe04 	bl	800cfa0 <HAL_GetTick>
 800e398:	1b00      	subs	r0, r0, r4
 800e39a:	2802      	cmp	r0, #2
 800e39c:	d9f5      	bls.n	800e38a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800e39e:	2003      	movs	r0, #3
 800e3a0:	e048      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e3a2:	4a26      	ldr	r2, [pc, #152]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e3a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e3a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e3aa:	6413      	str	r3, [r2, #64]	; 0x40
 800e3ac:	e7da      	b.n	800e364 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800e3ae:	4a23      	ldr	r2, [pc, #140]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e3b0:	6813      	ldr	r3, [r2, #0]
 800e3b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e3b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e3b8:	f7fe fdf2 	bl	800cfa0 <HAL_GetTick>
 800e3bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e3be:	4b1f      	ldr	r3, [pc, #124]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800e3c6:	d006      	beq.n	800e3d6 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e3c8:	f7fe fdea 	bl	800cfa0 <HAL_GetTick>
 800e3cc:	1b40      	subs	r0, r0, r5
 800e3ce:	2802      	cmp	r0, #2
 800e3d0:	d9f5      	bls.n	800e3be <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 800e3d2:	2003      	movs	r0, #3
 800e3d4:	e02e      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e3d6:	69e3      	ldr	r3, [r4, #28]
 800e3d8:	6a22      	ldr	r2, [r4, #32]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e3de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800e3e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e3e4:	0852      	lsrs	r2, r2, #1
 800e3e6:	3a01      	subs	r2, #1
 800e3e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e3ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e3f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e3f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800e3f8:	4a10      	ldr	r2, [pc, #64]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e3fa:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800e3fc:	6813      	ldr	r3, [r2, #0]
 800e3fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e402:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e404:	f7fe fdcc 	bl	800cfa0 <HAL_GetTick>
 800e408:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e40a:	4b0c      	ldr	r3, [pc, #48]	; (800e43c <HAL_RCC_OscConfig+0x3d0>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800e412:	d106      	bne.n	800e422 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e414:	f7fe fdc4 	bl	800cfa0 <HAL_GetTick>
 800e418:	1b00      	subs	r0, r0, r4
 800e41a:	2802      	cmp	r0, #2
 800e41c:	d9f5      	bls.n	800e40a <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 800e41e:	2003      	movs	r0, #3
 800e420:	e008      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800e422:	2000      	movs	r0, #0
 800e424:	e006      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
 800e426:	2000      	movs	r0, #0
 800e428:	e004      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 800e42a:	2001      	movs	r0, #1
 800e42c:	4770      	bx	lr
        return HAL_ERROR;
 800e42e:	2001      	movs	r0, #1
 800e430:	e000      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 800e432:	2000      	movs	r0, #0
}
 800e434:	b002      	add	sp, #8
 800e436:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800e438:	2001      	movs	r0, #1
 800e43a:	e7fb      	b.n	800e434 <HAL_RCC_OscConfig+0x3c8>
 800e43c:	40023800 	.word	0x40023800

0800e440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e442:	4b31      	ldr	r3, [pc, #196]	; (800e508 <HAL_RCC_GetSysClockFreq+0xc8>)
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	f003 030c 	and.w	r3, r3, #12
 800e44a:	2b04      	cmp	r3, #4
 800e44c:	d059      	beq.n	800e502 <HAL_RCC_GetSysClockFreq+0xc2>
 800e44e:	2b08      	cmp	r3, #8
 800e450:	d001      	beq.n	800e456 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e452:	482e      	ldr	r0, [pc, #184]	; (800e50c <HAL_RCC_GetSysClockFreq+0xcc>)
 800e454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e456:	4b2c      	ldr	r3, [pc, #176]	; (800e508 <HAL_RCC_GetSysClockFreq+0xc8>)
 800e458:	685a      	ldr	r2, [r3, #4]
 800e45a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800e464:	d02a      	beq.n	800e4bc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e466:	4b28      	ldr	r3, [pc, #160]	; (800e508 <HAL_RCC_GetSysClockFreq+0xc8>)
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800e46e:	461e      	mov	r6, r3
 800e470:	2700      	movs	r7, #0
 800e472:	015c      	lsls	r4, r3, #5
 800e474:	2500      	movs	r5, #0
 800e476:	1ae4      	subs	r4, r4, r3
 800e478:	eb65 0507 	sbc.w	r5, r5, r7
 800e47c:	01a9      	lsls	r1, r5, #6
 800e47e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800e482:	01a0      	lsls	r0, r4, #6
 800e484:	1b00      	subs	r0, r0, r4
 800e486:	eb61 0105 	sbc.w	r1, r1, r5
 800e48a:	00cb      	lsls	r3, r1, #3
 800e48c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e490:	00c4      	lsls	r4, r0, #3
 800e492:	19a0      	adds	r0, r4, r6
 800e494:	eb43 0107 	adc.w	r1, r3, r7
 800e498:	024b      	lsls	r3, r1, #9
 800e49a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800e49e:	0244      	lsls	r4, r0, #9
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	f7f8 fa85 	bl	80069b4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800e4aa:	4b17      	ldr	r3, [pc, #92]	; (800e508 <HAL_RCC_GetSysClockFreq+0xc8>)
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800e4b6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800e4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e4bc:	4b12      	ldr	r3, [pc, #72]	; (800e508 <HAL_RCC_GetSysClockFreq+0xc8>)
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800e4c4:	461e      	mov	r6, r3
 800e4c6:	2700      	movs	r7, #0
 800e4c8:	015c      	lsls	r4, r3, #5
 800e4ca:	2500      	movs	r5, #0
 800e4cc:	1ae4      	subs	r4, r4, r3
 800e4ce:	eb65 0507 	sbc.w	r5, r5, r7
 800e4d2:	01a9      	lsls	r1, r5, #6
 800e4d4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800e4d8:	01a0      	lsls	r0, r4, #6
 800e4da:	1b00      	subs	r0, r0, r4
 800e4dc:	eb61 0105 	sbc.w	r1, r1, r5
 800e4e0:	00cb      	lsls	r3, r1, #3
 800e4e2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e4e6:	00c4      	lsls	r4, r0, #3
 800e4e8:	19a0      	adds	r0, r4, r6
 800e4ea:	eb43 0107 	adc.w	r1, r3, r7
 800e4ee:	028b      	lsls	r3, r1, #10
 800e4f0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800e4f4:	0284      	lsls	r4, r0, #10
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	f7f8 fa5a 	bl	80069b4 <__aeabi_uldivmod>
 800e500:	e7d3      	b.n	800e4aa <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800e502:	4803      	ldr	r0, [pc, #12]	; (800e510 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800e504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e506:	bf00      	nop
 800e508:	40023800 	.word	0x40023800
 800e50c:	00f42400 	.word	0x00f42400
 800e510:	007a1200 	.word	0x007a1200

0800e514 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800e514:	2800      	cmp	r0, #0
 800e516:	f000 80a2 	beq.w	800e65e <HAL_RCC_ClockConfig+0x14a>
{
 800e51a:	b570      	push	{r4, r5, r6, lr}
 800e51c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e51e:	4b52      	ldr	r3, [pc, #328]	; (800e668 <HAL_RCC_ClockConfig+0x154>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f003 030f 	and.w	r3, r3, #15
 800e526:	428b      	cmp	r3, r1
 800e528:	d20c      	bcs.n	800e544 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e52a:	4a4f      	ldr	r2, [pc, #316]	; (800e668 <HAL_RCC_ClockConfig+0x154>)
 800e52c:	6813      	ldr	r3, [r2, #0]
 800e52e:	f023 030f 	bic.w	r3, r3, #15
 800e532:	430b      	orrs	r3, r1
 800e534:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e536:	6813      	ldr	r3, [r2, #0]
 800e538:	f003 030f 	and.w	r3, r3, #15
 800e53c:	4299      	cmp	r1, r3
 800e53e:	d001      	beq.n	800e544 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800e540:	2001      	movs	r0, #1
 800e542:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e544:	6823      	ldr	r3, [r4, #0]
 800e546:	f013 0f02 	tst.w	r3, #2
 800e54a:	d017      	beq.n	800e57c <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e54c:	f013 0f04 	tst.w	r3, #4
 800e550:	d004      	beq.n	800e55c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e552:	4a46      	ldr	r2, [pc, #280]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e554:	6893      	ldr	r3, [r2, #8]
 800e556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e55a:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e55c:	6823      	ldr	r3, [r4, #0]
 800e55e:	f013 0f08 	tst.w	r3, #8
 800e562:	d004      	beq.n	800e56e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e564:	4a41      	ldr	r2, [pc, #260]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e566:	6893      	ldr	r3, [r2, #8]
 800e568:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e56c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e56e:	4a3f      	ldr	r2, [pc, #252]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e570:	6893      	ldr	r3, [r2, #8]
 800e572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e576:	68a0      	ldr	r0, [r4, #8]
 800e578:	4303      	orrs	r3, r0
 800e57a:	6093      	str	r3, [r2, #8]
 800e57c:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e57e:	6823      	ldr	r3, [r4, #0]
 800e580:	f013 0f01 	tst.w	r3, #1
 800e584:	d031      	beq.n	800e5ea <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d020      	beq.n	800e5ce <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e58c:	2b02      	cmp	r3, #2
 800e58e:	d025      	beq.n	800e5dc <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e590:	4a36      	ldr	r2, [pc, #216]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e592:	6812      	ldr	r2, [r2, #0]
 800e594:	f012 0f02 	tst.w	r2, #2
 800e598:	d063      	beq.n	800e662 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e59a:	4934      	ldr	r1, [pc, #208]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e59c:	688a      	ldr	r2, [r1, #8]
 800e59e:	f022 0203 	bic.w	r2, r2, #3
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800e5a6:	f7fe fcfb 	bl	800cfa0 <HAL_GetTick>
 800e5aa:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e5ac:	4b2f      	ldr	r3, [pc, #188]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e5ae:	689b      	ldr	r3, [r3, #8]
 800e5b0:	f003 030c 	and.w	r3, r3, #12
 800e5b4:	6862      	ldr	r2, [r4, #4]
 800e5b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800e5ba:	d016      	beq.n	800e5ea <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e5bc:	f7fe fcf0 	bl	800cfa0 <HAL_GetTick>
 800e5c0:	1b80      	subs	r0, r0, r6
 800e5c2:	f241 3388 	movw	r3, #5000	; 0x1388
 800e5c6:	4298      	cmp	r0, r3
 800e5c8:	d9f0      	bls.n	800e5ac <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800e5ca:	2003      	movs	r0, #3
 800e5cc:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e5ce:	4a27      	ldr	r2, [pc, #156]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e5d0:	6812      	ldr	r2, [r2, #0]
 800e5d2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800e5d6:	d1e0      	bne.n	800e59a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800e5d8:	2001      	movs	r0, #1
 800e5da:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e5dc:	4a23      	ldr	r2, [pc, #140]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e5de:	6812      	ldr	r2, [r2, #0]
 800e5e0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800e5e4:	d1d9      	bne.n	800e59a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800e5e6:	2001      	movs	r0, #1
 800e5e8:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e5ea:	4b1f      	ldr	r3, [pc, #124]	; (800e668 <HAL_RCC_ClockConfig+0x154>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f003 030f 	and.w	r3, r3, #15
 800e5f2:	429d      	cmp	r5, r3
 800e5f4:	d20c      	bcs.n	800e610 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e5f6:	4a1c      	ldr	r2, [pc, #112]	; (800e668 <HAL_RCC_ClockConfig+0x154>)
 800e5f8:	6813      	ldr	r3, [r2, #0]
 800e5fa:	f023 030f 	bic.w	r3, r3, #15
 800e5fe:	432b      	orrs	r3, r5
 800e600:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e602:	6813      	ldr	r3, [r2, #0]
 800e604:	f003 030f 	and.w	r3, r3, #15
 800e608:	429d      	cmp	r5, r3
 800e60a:	d001      	beq.n	800e610 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 800e60c:	2001      	movs	r0, #1
}
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	f013 0f04 	tst.w	r3, #4
 800e616:	d006      	beq.n	800e626 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e618:	4a14      	ldr	r2, [pc, #80]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e61a:	6893      	ldr	r3, [r2, #8]
 800e61c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800e620:	68e1      	ldr	r1, [r4, #12]
 800e622:	430b      	orrs	r3, r1
 800e624:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	f013 0f08 	tst.w	r3, #8
 800e62c:	d007      	beq.n	800e63e <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e62e:	4a0f      	ldr	r2, [pc, #60]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e630:	6893      	ldr	r3, [r2, #8]
 800e632:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800e636:	6921      	ldr	r1, [r4, #16]
 800e638:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800e63c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e63e:	f7ff feff 	bl	800e440 <HAL_RCC_GetSysClockFreq>
 800e642:	4b0a      	ldr	r3, [pc, #40]	; (800e66c <HAL_RCC_ClockConfig+0x158>)
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800e64a:	4a09      	ldr	r2, [pc, #36]	; (800e670 <HAL_RCC_ClockConfig+0x15c>)
 800e64c:	5cd3      	ldrb	r3, [r2, r3]
 800e64e:	40d8      	lsrs	r0, r3
 800e650:	4b08      	ldr	r3, [pc, #32]	; (800e674 <HAL_RCC_ClockConfig+0x160>)
 800e652:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800e654:	2000      	movs	r0, #0
 800e656:	f7fe f879 	bl	800c74c <HAL_InitTick>
  return HAL_OK;
 800e65a:	2000      	movs	r0, #0
 800e65c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800e65e:	2001      	movs	r0, #1
 800e660:	4770      	bx	lr
        return HAL_ERROR;
 800e662:	2001      	movs	r0, #1
 800e664:	bd70      	pop	{r4, r5, r6, pc}
 800e666:	bf00      	nop
 800e668:	40023c00 	.word	0x40023c00
 800e66c:	40023800 	.word	0x40023800
 800e670:	08019c98 	.word	0x08019c98
 800e674:	20000020 	.word	0x20000020

0800e678 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800e678:	4b01      	ldr	r3, [pc, #4]	; (800e680 <HAL_RCC_GetHCLKFreq+0x8>)
 800e67a:	6818      	ldr	r0, [r3, #0]
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	20000020 	.word	0x20000020

0800e684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e684:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e686:	f7ff fff7 	bl	800e678 <HAL_RCC_GetHCLKFreq>
 800e68a:	4b04      	ldr	r3, [pc, #16]	; (800e69c <HAL_RCC_GetPCLK1Freq+0x18>)
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800e692:	4a03      	ldr	r2, [pc, #12]	; (800e6a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800e694:	5cd3      	ldrb	r3, [r2, r3]
}
 800e696:	40d8      	lsrs	r0, r3
 800e698:	bd08      	pop	{r3, pc}
 800e69a:	bf00      	nop
 800e69c:	40023800 	.word	0x40023800
 800e6a0:	08019ca8 	.word	0x08019ca8

0800e6a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e6a4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e6a6:	f7ff ffe7 	bl	800e678 <HAL_RCC_GetHCLKFreq>
 800e6aa:	4b04      	ldr	r3, [pc, #16]	; (800e6bc <HAL_RCC_GetPCLK2Freq+0x18>)
 800e6ac:	689b      	ldr	r3, [r3, #8]
 800e6ae:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800e6b2:	4a03      	ldr	r2, [pc, #12]	; (800e6c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800e6b4:	5cd3      	ldrb	r3, [r2, r3]
}
 800e6b6:	40d8      	lsrs	r0, r3
 800e6b8:	bd08      	pop	{r3, pc}
 800e6ba:	bf00      	nop
 800e6bc:	40023800 	.word	0x40023800
 800e6c0:	08019ca8 	.word	0x08019ca8

0800e6c4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e6c4:	230f      	movs	r3, #15
 800e6c6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e6c8:	4b0b      	ldr	r3, [pc, #44]	; (800e6f8 <HAL_RCC_GetClockConfig+0x34>)
 800e6ca:	689a      	ldr	r2, [r3, #8]
 800e6cc:	f002 0203 	and.w	r2, r2, #3
 800e6d0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e6d2:	689a      	ldr	r2, [r3, #8]
 800e6d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800e6d8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e6da:	689a      	ldr	r2, [r3, #8]
 800e6dc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800e6e0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e6e2:	689b      	ldr	r3, [r3, #8]
 800e6e4:	08db      	lsrs	r3, r3, #3
 800e6e6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800e6ea:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e6ec:	4b03      	ldr	r3, [pc, #12]	; (800e6fc <HAL_RCC_GetClockConfig+0x38>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f003 030f 	and.w	r3, r3, #15
 800e6f4:	600b      	str	r3, [r1, #0]
 800e6f6:	4770      	bx	lr
 800e6f8:	40023800 	.word	0x40023800
 800e6fc:	40023c00 	.word	0x40023c00

0800e700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e702:	b083      	sub	sp, #12
 800e704:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e706:	6803      	ldr	r3, [r0, #0]
 800e708:	f013 0f01 	tst.w	r3, #1
 800e70c:	d00c      	beq.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e70e:	4bb3      	ldr	r3, [pc, #716]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e710:	689a      	ldr	r2, [r3, #8]
 800e712:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e716:	609a      	str	r2, [r3, #8]
 800e718:	689a      	ldr	r2, [r3, #8]
 800e71a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e71c:	430a      	orrs	r2, r1
 800e71e:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e720:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e722:	b1c3      	cbz	r3, 800e756 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 800e724:	2700      	movs	r7, #0
 800e726:	e000      	b.n	800e72a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800e728:	2700      	movs	r7, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e72a:	6823      	ldr	r3, [r4, #0]
 800e72c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800e730:	d015      	beq.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e732:	4aaa      	ldr	r2, [pc, #680]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e734:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e738:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e73c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e73e:	430b      	orrs	r3, r1
 800e740:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e744:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e74a:	d006      	beq.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f000 8141 	beq.w	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  uint32_t pllsaiused = 0;
 800e752:	2500      	movs	r5, #0
 800e754:	e004      	b.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800e756:	2701      	movs	r7, #1
 800e758:	e7e7      	b.n	800e72a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800e75a:	2701      	movs	r7, #1
 800e75c:	e7f6      	b.n	800e74c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 800e75e:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800e766:	d00f      	beq.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e768:	4a9c      	ldr	r2, [pc, #624]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e76a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e76e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800e772:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e774:	430b      	orrs	r3, r1
 800e776:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e77a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e77c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e780:	f000 812a 	beq.w	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e784:	b903      	cbnz	r3, 800e788 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 800e786:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800e78e:	d000      	beq.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 800e790:	2701      	movs	r7, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e792:	f013 0f20 	tst.w	r3, #32
 800e796:	f040 8123 	bne.w	800e9e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e79a:	6823      	ldr	r3, [r4, #0]
 800e79c:	f013 0f10 	tst.w	r3, #16
 800e7a0:	d00c      	beq.n	800e7bc <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e7a2:	4b8e      	ldr	r3, [pc, #568]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e7a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e7a8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800e7ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800e7b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e7b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e7b6:	430a      	orrs	r2, r1
 800e7b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e7bc:	6823      	ldr	r3, [r4, #0]
 800e7be:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800e7c2:	d008      	beq.n	800e7d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e7c4:	4a85      	ldr	r2, [pc, #532]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e7c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e7ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800e7ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e7d0:	430b      	orrs	r3, r1
 800e7d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800e7dc:	d008      	beq.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e7de:	4a7f      	ldr	r2, [pc, #508]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e7e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e7e4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800e7e8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800e7ea:	430b      	orrs	r3, r1
 800e7ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e7f0:	6823      	ldr	r3, [r4, #0]
 800e7f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800e7f6:	d008      	beq.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e7f8:	4a78      	ldr	r2, [pc, #480]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e7fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e7fe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e802:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e804:	430b      	orrs	r3, r1
 800e806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e80a:	6823      	ldr	r3, [r4, #0]
 800e80c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800e810:	d008      	beq.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e812:	4a72      	ldr	r2, [pc, #456]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e814:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e818:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800e81c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800e81e:	430b      	orrs	r3, r1
 800e820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e824:	6823      	ldr	r3, [r4, #0]
 800e826:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e82a:	d008      	beq.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e82c:	4a6b      	ldr	r2, [pc, #428]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e82e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e832:	f023 0303 	bic.w	r3, r3, #3
 800e836:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e838:	430b      	orrs	r3, r1
 800e83a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e844:	d008      	beq.n	800e858 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e846:	4a65      	ldr	r2, [pc, #404]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e848:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e84c:	f023 030c 	bic.w	r3, r3, #12
 800e850:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e852:	430b      	orrs	r3, r1
 800e854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e858:	6823      	ldr	r3, [r4, #0]
 800e85a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e85e:	d008      	beq.n	800e872 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e860:	4a5e      	ldr	r2, [pc, #376]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e862:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e866:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800e86a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e86c:	430b      	orrs	r3, r1
 800e86e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e878:	d008      	beq.n	800e88c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e87a:	4a58      	ldr	r2, [pc, #352]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e87c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e880:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e884:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800e886:	430b      	orrs	r3, r1
 800e888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e88c:	6823      	ldr	r3, [r4, #0]
 800e88e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800e892:	d008      	beq.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e894:	4a51      	ldr	r2, [pc, #324]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e896:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e89a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e89e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e8a0:	430b      	orrs	r3, r1
 800e8a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e8a6:	6823      	ldr	r3, [r4, #0]
 800e8a8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800e8ac:	d008      	beq.n	800e8c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e8ae:	4a4b      	ldr	r2, [pc, #300]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e8b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e8b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e8b8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e8ba:	430b      	orrs	r3, r1
 800e8bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800e8c6:	d008      	beq.n	800e8da <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e8c8:	4a44      	ldr	r2, [pc, #272]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e8ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e8ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e8d2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e8d4:	430b      	orrs	r3, r1
 800e8d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e8e0:	d008      	beq.n	800e8f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e8e2:	4a3e      	ldr	r2, [pc, #248]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e8e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e8e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800e8ec:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800e8ee:	430b      	orrs	r3, r1
 800e8f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e8f4:	6823      	ldr	r3, [r4, #0]
 800e8f6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800e8fa:	d008      	beq.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e8fc:	4a37      	ldr	r2, [pc, #220]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e8fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e902:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e906:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800e908:	430b      	orrs	r3, r1
 800e90a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e90e:	6823      	ldr	r3, [r4, #0]
 800e910:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800e914:	d00d      	beq.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e916:	4a31      	ldr	r2, [pc, #196]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e918:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e91c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800e920:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800e922:	430b      	orrs	r3, r1
 800e924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e928:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800e92a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e92e:	f000 80bd 	beq.w	800eaac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e932:	6823      	ldr	r3, [r4, #0]
 800e934:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800e938:	d008      	beq.n	800e94c <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e93a:	4a28      	ldr	r2, [pc, #160]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e93c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e940:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800e944:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800e946:	430b      	orrs	r3, r1
 800e948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800e952:	d009      	beq.n	800e968 <HAL_RCCEx_PeriphCLKConfig+0x268>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e954:	4a21      	ldr	r2, [pc, #132]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e956:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e95a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e95e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800e962:	430b      	orrs	r3, r1
 800e964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800e96e:	d009      	beq.n	800e984 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e970:	4a1a      	ldr	r2, [pc, #104]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e972:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e976:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e97a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800e97e:	430b      	orrs	r3, r1
 800e980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e984:	6823      	ldr	r3, [r4, #0]
 800e986:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800e98a:	d009      	beq.n	800e9a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e98c:	4a13      	ldr	r2, [pc, #76]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e98e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e992:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e996:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800e99a:	430b      	orrs	r3, r1
 800e99c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e9a0:	6823      	ldr	r3, [r4, #0]
 800e9a2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800e9a6:	d009      	beq.n	800e9bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e9a8:	4a0c      	ldr	r2, [pc, #48]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800e9aa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e9ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e9b2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800e9b6:	430b      	orrs	r3, r1
 800e9b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800e9bc:	2f00      	cmp	r7, #0
 800e9be:	d177      	bne.n	800eab0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e9c6:	d073      	beq.n	800eab0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e9c8:	2d00      	cmp	r5, #0
 800e9ca:	f040 8105 	bne.w	800ebd8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800e9ce:	2000      	movs	r0, #0
}
 800e9d0:	b003      	add	sp, #12
 800e9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 800e9d4:	2501      	movs	r5, #1
 800e9d6:	e6c3      	b.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800e9d8:	2701      	movs	r7, #1
 800e9da:	e6d3      	b.n	800e784 <HAL_RCCEx_PeriphCLKConfig+0x84>
 800e9dc:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 800e9e0:	4bb3      	ldr	r3, [pc, #716]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800e9e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e9e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e9e8:	641a      	str	r2, [r3, #64]	; 0x40
 800e9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e9f0:	9301      	str	r3, [sp, #4]
 800e9f2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800e9f4:	4aaf      	ldr	r2, [pc, #700]	; (800ecb4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800e9f6:	6813      	ldr	r3, [r2, #0]
 800e9f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9fc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800e9fe:	f7fe facf 	bl	800cfa0 <HAL_GetTick>
 800ea02:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ea04:	4bab      	ldr	r3, [pc, #684]	; (800ecb4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ea0c:	d106      	bne.n	800ea1c <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea0e:	f7fe fac7 	bl	800cfa0 <HAL_GetTick>
 800ea12:	1b80      	subs	r0, r0, r6
 800ea14:	2864      	cmp	r0, #100	; 0x64
 800ea16:	d9f5      	bls.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x304>
        return HAL_TIMEOUT;
 800ea18:	2003      	movs	r0, #3
 800ea1a:	e7d9      	b.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ea1c:	4ba4      	ldr	r3, [pc, #656]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ea1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ea20:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800ea24:	d015      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800ea26:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ea28:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d010      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x352>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ea30:	4b9f      	ldr	r3, [pc, #636]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ea32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ea34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800ea38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ea3a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800ea3e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ea40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ea42:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800ea46:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800ea48:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ea4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea4c:	f013 0f01 	tst.w	r3, #1
 800ea50:	d112      	bne.n	800ea78 <HAL_RCCEx_PeriphCLKConfig+0x378>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ea52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ea54:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800ea58:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800ea5c:	d01d      	beq.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800ea5e:	4a94      	ldr	r2, [pc, #592]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ea60:	6893      	ldr	r3, [r2, #8]
 800ea62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ea66:	6093      	str	r3, [r2, #8]
 800ea68:	4991      	ldr	r1, [pc, #580]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ea6a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800ea6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ea6e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800ea72:	4313      	orrs	r3, r2
 800ea74:	670b      	str	r3, [r1, #112]	; 0x70
 800ea76:	e690      	b.n	800e79a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 800ea78:	f7fe fa92 	bl	800cfa0 <HAL_GetTick>
 800ea7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ea7e:	4b8c      	ldr	r3, [pc, #560]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ea80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea82:	f013 0f02 	tst.w	r3, #2
 800ea86:	d1e4      	bne.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x352>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ea88:	f7fe fa8a 	bl	800cfa0 <HAL_GetTick>
 800ea8c:	1b80      	subs	r0, r0, r6
 800ea8e:	f241 3388 	movw	r3, #5000	; 0x1388
 800ea92:	4298      	cmp	r0, r3
 800ea94:	d9f3      	bls.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x37e>
            return HAL_TIMEOUT;
 800ea96:	2003      	movs	r0, #3
 800ea98:	e79a      	b.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ea9a:	4885      	ldr	r0, [pc, #532]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ea9c:	6882      	ldr	r2, [r0, #8]
 800ea9e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800eaa2:	4985      	ldr	r1, [pc, #532]	; (800ecb8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>)
 800eaa4:	4019      	ands	r1, r3
 800eaa6:	430a      	orrs	r2, r1
 800eaa8:	6082      	str	r2, [r0, #8]
 800eaaa:	e7dd      	b.n	800ea68 <HAL_RCCEx_PeriphCLKConfig+0x368>
      pllsaiused = 1;
 800eaac:	2501      	movs	r5, #1
 800eaae:	e740      	b.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 800eab0:	4a7f      	ldr	r2, [pc, #508]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800eab2:	6813      	ldr	r3, [r2, #0]
 800eab4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800eab8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800eaba:	f7fe fa71 	bl	800cfa0 <HAL_GetTick>
 800eabe:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800eac0:	4b7b      	ldr	r3, [pc, #492]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800eac8:	d006      	beq.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800eaca:	f7fe fa69 	bl	800cfa0 <HAL_GetTick>
 800eace:	1b80      	subs	r0, r0, r6
 800ead0:	2864      	cmp	r0, #100	; 0x64
 800ead2:	d9f5      	bls.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
        return HAL_TIMEOUT;
 800ead4:	2003      	movs	r0, #3
 800ead6:	e77b      	b.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ead8:	6823      	ldr	r3, [r4, #0]
 800eada:	f013 0f01 	tst.w	r3, #1
 800eade:	d013      	beq.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800eae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eae2:	b98b      	cbnz	r3, 800eb08 <HAL_RCCEx_PeriphCLKConfig+0x408>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800eae4:	4a72      	ldr	r2, [pc, #456]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800eae6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800eaea:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800eaee:	6860      	ldr	r0, [r4, #4]
 800eaf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800eaf4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800eaf8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800eafc:	430b      	orrs	r3, r1
 800eafe:	68a1      	ldr	r1, [r4, #8]
 800eb00:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800eb04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800eb0e:	d003      	beq.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800eb10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800eb12:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800eb16:	d043      	beq.n	800eba0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800eb18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800eb1c:	d003      	beq.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x426>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800eb1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb24:	d03c      	beq.n	800eba0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800eb26:	6823      	ldr	r3, [r4, #0]
 800eb28:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800eb2c:	d011      	beq.n	800eb52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800eb2e:	4a60      	ldr	r2, [pc, #384]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800eb30:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800eb34:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800eb38:	6866      	ldr	r6, [r4, #4]
 800eb3a:	6923      	ldr	r3, [r4, #16]
 800eb3c:	041b      	lsls	r3, r3, #16
 800eb3e:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800eb42:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800eb46:	4303      	orrs	r3, r0
 800eb48:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800eb4c:	430b      	orrs	r3, r1
 800eb4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800eb52:	6823      	ldr	r3, [r4, #0]
 800eb54:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800eb58:	d00d      	beq.n	800eb76 <HAL_RCCEx_PeriphCLKConfig+0x476>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800eb5a:	6862      	ldr	r2, [r4, #4]
 800eb5c:	6923      	ldr	r3, [r4, #16]
 800eb5e:	041b      	lsls	r3, r3, #16
 800eb60:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800eb64:	68e2      	ldr	r2, [r4, #12]
 800eb66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eb6a:	68a2      	ldr	r2, [r4, #8]
 800eb6c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800eb70:	4a4f      	ldr	r2, [pc, #316]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800eb72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800eb76:	4a4e      	ldr	r2, [pc, #312]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800eb78:	6813      	ldr	r3, [r2, #0]
 800eb7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eb7e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800eb80:	f7fe fa0e 	bl	800cfa0 <HAL_GetTick>
 800eb84:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800eb86:	4b4a      	ldr	r3, [pc, #296]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800eb8e:	f47f af1b 	bne.w	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800eb92:	f7fe fa05 	bl	800cfa0 <HAL_GetTick>
 800eb96:	1b80      	subs	r0, r0, r6
 800eb98:	2864      	cmp	r0, #100	; 0x64
 800eb9a:	d9f4      	bls.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0x486>
        return HAL_TIMEOUT;
 800eb9c:	2003      	movs	r0, #3
 800eb9e:	e717      	b.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800eba0:	4a43      	ldr	r2, [pc, #268]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800eba2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800eba6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ebaa:	6860      	ldr	r0, [r4, #4]
 800ebac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ebb0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800ebb4:	68e0      	ldr	r0, [r4, #12]
 800ebb6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800ebba:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800ebbe:	430b      	orrs	r3, r1
 800ebc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ebc4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ebc8:	f023 031f 	bic.w	r3, r3, #31
 800ebcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ebce:	3901      	subs	r1, #1
 800ebd0:	430b      	orrs	r3, r1
 800ebd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ebd6:	e7a6      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x426>
    __HAL_RCC_PLLSAI_DISABLE();
 800ebd8:	4a35      	ldr	r2, [pc, #212]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ebda:	6813      	ldr	r3, [r2, #0]
 800ebdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ebe0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ebe2:	f7fe f9dd 	bl	800cfa0 <HAL_GetTick>
 800ebe6:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ebe8:	4b31      	ldr	r3, [pc, #196]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800ebf0:	d006      	beq.n	800ec00 <HAL_RCCEx_PeriphCLKConfig+0x500>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ebf2:	f7fe f9d5 	bl	800cfa0 <HAL_GetTick>
 800ebf6:	1b40      	subs	r0, r0, r5
 800ebf8:	2864      	cmp	r0, #100	; 0x64
 800ebfa:	d9f5      	bls.n	800ebe8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
        return HAL_TIMEOUT;
 800ebfc:	2003      	movs	r0, #3
 800ebfe:	e6e7      	b.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ec00:	6823      	ldr	r3, [r4, #0]
 800ec02:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800ec06:	d001      	beq.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800ec08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ec0a:	b122      	cbz	r2, 800ec16 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800ec0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800ec10:	d01d      	beq.n	800ec4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ec12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec14:	b9db      	cbnz	r3, 800ec4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ec16:	4a26      	ldr	r2, [pc, #152]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ec18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ec1c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ec20:	6960      	ldr	r0, [r4, #20]
 800ec22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ec26:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800ec2a:	69a0      	ldr	r0, [r4, #24]
 800ec2c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800ec30:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800ec34:	430b      	orrs	r3, r1
 800ec36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ec3a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ec3e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800ec42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ec44:	3901      	subs	r1, #1
 800ec46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ec4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ec4e:	6823      	ldr	r3, [r4, #0]
 800ec50:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800ec54:	d003      	beq.n	800ec5e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800ec56:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ec58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ec5c:	d013      	beq.n	800ec86 <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_PLLSAI_ENABLE();
 800ec5e:	4a14      	ldr	r2, [pc, #80]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ec60:	6813      	ldr	r3, [r2, #0]
 800ec62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec66:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ec68:	f7fe f99a 	bl	800cfa0 <HAL_GetTick>
 800ec6c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ec6e:	4b10      	ldr	r3, [pc, #64]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800ec76:	d119      	bne.n	800ecac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ec78:	f7fe f992 	bl	800cfa0 <HAL_GetTick>
 800ec7c:	1b00      	subs	r0, r0, r4
 800ec7e:	2864      	cmp	r0, #100	; 0x64
 800ec80:	d9f5      	bls.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0x56e>
        return HAL_TIMEOUT;
 800ec82:	2003      	movs	r0, #3
 800ec84:	e6a4      	b.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ec86:	4a0a      	ldr	r2, [pc, #40]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 800ec88:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ec8c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ec90:	6965      	ldr	r5, [r4, #20]
 800ec92:	6a23      	ldr	r3, [r4, #32]
 800ec94:	041b      	lsls	r3, r3, #16
 800ec96:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800ec9a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800ec9e:	4303      	orrs	r3, r0
 800eca0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800eca4:	430b      	orrs	r3, r1
 800eca6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800ecaa:	e7d8      	b.n	800ec5e <HAL_RCCEx_PeriphCLKConfig+0x55e>
  return HAL_OK;
 800ecac:	2000      	movs	r0, #0
 800ecae:	e68f      	b.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800ecb0:	40023800 	.word	0x40023800
 800ecb4:	40007000 	.word	0x40007000
 800ecb8:	0ffffcff 	.word	0x0ffffcff

0800ecbc <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ecbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecbe:	4605      	mov	r5, r0
 800ecc0:	460f      	mov	r7, r1
 800ecc2:	4616      	mov	r6, r2
 800ecc4:	461c      	mov	r4, r3
  while ((hspi->Instance->SR & Flag) != State)
 800ecc6:	682b      	ldr	r3, [r5, #0]
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	403b      	ands	r3, r7
 800eccc:	42b3      	cmp	r3, r6
 800ecce:	d038      	beq.n	800ed42 <SPI_WaitFlagStateUntilTimeout+0x86>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ecd0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800ecd4:	d0f7      	beq.n	800ecc6 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800ecd6:	b12c      	cbz	r4, 800ece4 <SPI_WaitFlagStateUntilTimeout+0x28>
 800ecd8:	f7fe f962 	bl	800cfa0 <HAL_GetTick>
 800ecdc:	9b06      	ldr	r3, [sp, #24]
 800ecde:	1ac0      	subs	r0, r0, r3
 800ece0:	4284      	cmp	r4, r0
 800ece2:	d8f0      	bhi.n	800ecc6 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ece4:	682a      	ldr	r2, [r5, #0]
 800ece6:	6853      	ldr	r3, [r2, #4]
 800ece8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800ecec:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecee:	686b      	ldr	r3, [r5, #4]
 800ecf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ecf4:	d00b      	beq.n	800ed0e <SPI_WaitFlagStateUntilTimeout+0x52>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ecf6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ecf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecfc:	d014      	beq.n	800ed28 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ed04:	2300      	movs	r3, #0
 800ed06:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ed0a:	2003      	movs	r0, #3
 800ed0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed0e:	68ab      	ldr	r3, [r5, #8]
 800ed10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed14:	bf18      	it	ne
 800ed16:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800ed1a:	d1ec      	bne.n	800ecf6 <SPI_WaitFlagStateUntilTimeout+0x3a>
          __HAL_SPI_DISABLE(hspi);
 800ed1c:	682a      	ldr	r2, [r5, #0]
 800ed1e:	6813      	ldr	r3, [r2, #0]
 800ed20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed24:	6013      	str	r3, [r2, #0]
 800ed26:	e7e6      	b.n	800ecf6 <SPI_WaitFlagStateUntilTimeout+0x3a>
          SPI_RESET_CRC(hspi);
 800ed28:	682a      	ldr	r2, [r5, #0]
 800ed2a:	6813      	ldr	r3, [r2, #0]
 800ed2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ed30:	041b      	lsls	r3, r3, #16
 800ed32:	0c1b      	lsrs	r3, r3, #16
 800ed34:	6013      	str	r3, [r2, #0]
 800ed36:	682a      	ldr	r2, [r5, #0]
 800ed38:	6813      	ldr	r3, [r2, #0]
 800ed3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ed3e:	6013      	str	r3, [r2, #0]
 800ed40:	e7dd      	b.n	800ecfe <SPI_WaitFlagStateUntilTimeout+0x42>
      }
    }
  }

  return HAL_OK;
 800ed42:	2000      	movs	r0, #0
}
 800ed44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed46 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ed46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed48:	b083      	sub	sp, #12
 800ed4a:	4607      	mov	r7, r0
 800ed4c:	460d      	mov	r5, r1
 800ed4e:	4614      	mov	r4, r2
 800ed50:	461e      	mov	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800ed52:	e002      	b.n	800ed5a <SPI_WaitFifoStateUntilTimeout+0x14>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 800ed54:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800ed58:	d110      	bne.n	800ed7c <SPI_WaitFifoStateUntilTimeout+0x36>
  while ((hspi->Instance->SR & Fifo) != State)
 800ed5a:	683a      	ldr	r2, [r7, #0]
 800ed5c:	6893      	ldr	r3, [r2, #8]
 800ed5e:	402b      	ands	r3, r5
 800ed60:	42a3      	cmp	r3, r4
 800ed62:	d041      	beq.n	800ede8 <SPI_WaitFifoStateUntilTimeout+0xa2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ed64:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800ed68:	bf08      	it	eq
 800ed6a:	2c00      	cmpeq	r4, #0
 800ed6c:	d1f2      	bne.n	800ed54 <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800ed6e:	7b13      	ldrb	r3, [r2, #12]
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 800ed76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ed7a:	e7eb      	b.n	800ed54 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800ed7c:	b12e      	cbz	r6, 800ed8a <SPI_WaitFifoStateUntilTimeout+0x44>
 800ed7e:	f7fe f90f 	bl	800cfa0 <HAL_GetTick>
 800ed82:	9b08      	ldr	r3, [sp, #32]
 800ed84:	1ac0      	subs	r0, r0, r3
 800ed86:	4286      	cmp	r6, r0
 800ed88:	d8e7      	bhi.n	800ed5a <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ed8a:	683a      	ldr	r2, [r7, #0]
 800ed8c:	6853      	ldr	r3, [r2, #4]
 800ed8e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800ed92:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed9a:	d00b      	beq.n	800edb4 <SPI_WaitFifoStateUntilTimeout+0x6e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ed9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eda2:	d014      	beq.n	800edce <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eda4:	2301      	movs	r3, #1
 800eda6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800edaa:	2300      	movs	r3, #0
 800edac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 800edb0:	2003      	movs	r0, #3
 800edb2:	e01a      	b.n	800edea <SPI_WaitFifoStateUntilTimeout+0xa4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edba:	bf18      	it	ne
 800edbc:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800edc0:	d1ec      	bne.n	800ed9c <SPI_WaitFifoStateUntilTimeout+0x56>
          __HAL_SPI_DISABLE(hspi);
 800edc2:	683a      	ldr	r2, [r7, #0]
 800edc4:	6813      	ldr	r3, [r2, #0]
 800edc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edca:	6013      	str	r3, [r2, #0]
 800edcc:	e7e6      	b.n	800ed9c <SPI_WaitFifoStateUntilTimeout+0x56>
          SPI_RESET_CRC(hspi);
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	6813      	ldr	r3, [r2, #0]
 800edd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800edd6:	041b      	lsls	r3, r3, #16
 800edd8:	0c1b      	lsrs	r3, r3, #16
 800edda:	6013      	str	r3, [r2, #0]
 800eddc:	683a      	ldr	r2, [r7, #0]
 800edde:	6813      	ldr	r3, [r2, #0]
 800ede0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ede4:	6013      	str	r3, [r2, #0]
 800ede6:	e7dd      	b.n	800eda4 <SPI_WaitFifoStateUntilTimeout+0x5e>
      }
    }
  }

  return HAL_OK;
 800ede8:	2000      	movs	r0, #0
}
 800edea:	b003      	add	sp, #12
 800edec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800edee <SPI_EndRxTxTransaction>:
  * @param hspi SPI handle
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800edee:	b570      	push	{r4, r5, r6, lr}
 800edf0:	b082      	sub	sp, #8
 800edf2:	4604      	mov	r4, r0
 800edf4:	460d      	mov	r5, r1
 800edf6:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800edf8:	9200      	str	r2, [sp, #0]
 800edfa:	460b      	mov	r3, r1
 800edfc:	2200      	movs	r2, #0
 800edfe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ee02:	f7ff ffa0 	bl	800ed46 <SPI_WaitFifoStateUntilTimeout>
 800ee06:	b138      	cbz	r0, 800ee18 <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee08:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ee0a:	f043 0320 	orr.w	r3, r3, #32
 800ee0e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee10:	2303      	movs	r3, #3
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	b002      	add	sp, #8
 800ee16:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee18:	9600      	str	r6, [sp, #0]
 800ee1a:	462b      	mov	r3, r5
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	2180      	movs	r1, #128	; 0x80
 800ee20:	4620      	mov	r0, r4
 800ee22:	f7ff ff4b 	bl	800ecbc <SPI_WaitFlagStateUntilTimeout>
 800ee26:	b128      	cbz	r0, 800ee34 <SPI_EndRxTxTransaction+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ee2a:	f043 0320 	orr.w	r3, r3, #32
 800ee2e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee30:	2303      	movs	r3, #3
 800ee32:	e7ee      	b.n	800ee12 <SPI_EndRxTxTransaction+0x24>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee34:	9600      	str	r6, [sp, #0]
 800ee36:	462b      	mov	r3, r5
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f7ff ff81 	bl	800ed46 <SPI_WaitFifoStateUntilTimeout>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d0e3      	beq.n	800ee12 <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ee4c:	f043 0320 	orr.w	r3, r3, #32
 800ee50:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee52:	2303      	movs	r3, #3
 800ee54:	e7dd      	b.n	800ee12 <SPI_EndRxTxTransaction+0x24>

0800ee56 <SPI_EndRxTransaction>:
{
 800ee56:	b570      	push	{r4, r5, r6, lr}
 800ee58:	b082      	sub	sp, #8
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	460d      	mov	r5, r1
 800ee5e:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee60:	6843      	ldr	r3, [r0, #4]
 800ee62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee66:	d010      	beq.n	800ee8a <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee68:	9600      	str	r6, [sp, #0]
 800ee6a:	462b      	mov	r3, r5
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	2180      	movs	r1, #128	; 0x80
 800ee70:	4620      	mov	r0, r4
 800ee72:	f7ff ff23 	bl	800ecbc <SPI_WaitFlagStateUntilTimeout>
 800ee76:	4603      	mov	r3, r0
 800ee78:	b1a0      	cbz	r0, 800eea4 <SPI_EndRxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee7a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ee7c:	f043 0320 	orr.w	r3, r3, #32
 800ee80:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee82:	2303      	movs	r3, #3
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	b002      	add	sp, #8
 800ee88:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee8a:	6883      	ldr	r3, [r0, #8]
 800ee8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee90:	bf18      	it	ne
 800ee92:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800ee96:	d1e7      	bne.n	800ee68 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800ee98:	6802      	ldr	r2, [r0, #0]
 800ee9a:	6813      	ldr	r3, [r2, #0]
 800ee9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eea0:	6013      	str	r3, [r2, #0]
 800eea2:	e7e1      	b.n	800ee68 <SPI_EndRxTransaction+0x12>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eea4:	6862      	ldr	r2, [r4, #4]
 800eea6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800eeaa:	d1eb      	bne.n	800ee84 <SPI_EndRxTransaction+0x2e>
 800eeac:	68a2      	ldr	r2, [r4, #8]
 800eeae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800eeb2:	bf18      	it	ne
 800eeb4:	f5b2 4f00 	cmpne.w	r2, #32768	; 0x8000
 800eeb8:	d1e4      	bne.n	800ee84 <SPI_EndRxTransaction+0x2e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eeba:	9600      	str	r6, [sp, #0]
 800eebc:	462b      	mov	r3, r5
 800eebe:	2200      	movs	r2, #0
 800eec0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eec4:	4620      	mov	r0, r4
 800eec6:	f7ff ff3e 	bl	800ed46 <SPI_WaitFifoStateUntilTimeout>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2800      	cmp	r0, #0
 800eece:	d0d9      	beq.n	800ee84 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eed0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800eed2:	f043 0320 	orr.w	r3, r3, #32
 800eed6:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800eed8:	2303      	movs	r3, #3
 800eeda:	e7d3      	b.n	800ee84 <SPI_EndRxTransaction+0x2e>

0800eedc <HAL_SPI_Init>:
  if (hspi == NULL)
 800eedc:	2800      	cmp	r0, #0
 800eede:	d058      	beq.n	800ef92 <HAL_SPI_Init+0xb6>
{
 800eee0:	b510      	push	{r4, lr}
 800eee2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eee4:	2300      	movs	r3, #0
 800eee6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800eee8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d045      	beq.n	800ef7c <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 800eef0:	2302      	movs	r3, #2
 800eef2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800eef6:	6822      	ldr	r2, [r4, #0]
 800eef8:	6813      	ldr	r3, [r2, #0]
 800eefa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eefe:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef00:	68e3      	ldr	r3, [r4, #12]
 800ef02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ef06:	d93e      	bls.n	800ef86 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ef08:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ef0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ef0e:	bf18      	it	ne
 800ef10:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 800ef14:	d001      	beq.n	800ef1a <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef16:	2200      	movs	r2, #0
 800ef18:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800ef1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ef1c:	b922      	cbnz	r2, 800ef28 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ef22:	d933      	bls.n	800ef8c <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800ef24:	2302      	movs	r3, #2
 800ef26:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ef28:	6822      	ldr	r2, [r4, #0]
 800ef2a:	6863      	ldr	r3, [r4, #4]
 800ef2c:	68a0      	ldr	r0, [r4, #8]
 800ef2e:	4303      	orrs	r3, r0
 800ef30:	6920      	ldr	r0, [r4, #16]
 800ef32:	4303      	orrs	r3, r0
 800ef34:	6960      	ldr	r0, [r4, #20]
 800ef36:	4303      	orrs	r3, r0
 800ef38:	69a0      	ldr	r0, [r4, #24]
 800ef3a:	f400 7000 	and.w	r0, r0, #512	; 0x200
 800ef3e:	4303      	orrs	r3, r0
 800ef40:	69e0      	ldr	r0, [r4, #28]
 800ef42:	4303      	orrs	r3, r0
 800ef44:	6a20      	ldr	r0, [r4, #32]
 800ef46:	4303      	orrs	r3, r0
 800ef48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ef4a:	4303      	orrs	r3, r0
 800ef4c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ef4e:	6822      	ldr	r2, [r4, #0]
 800ef50:	8b63      	ldrh	r3, [r4, #26]
 800ef52:	f003 0304 	and.w	r3, r3, #4
 800ef56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ef58:	4303      	orrs	r3, r0
 800ef5a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ef5c:	4303      	orrs	r3, r0
 800ef5e:	68e0      	ldr	r0, [r4, #12]
 800ef60:	4303      	orrs	r3, r0
 800ef62:	430b      	orrs	r3, r1
 800ef64:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef66:	6822      	ldr	r2, [r4, #0]
 800ef68:	69d3      	ldr	r3, [r2, #28]
 800ef6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ef6e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef70:	2000      	movs	r0, #0
 800ef72:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ef74:	2301      	movs	r3, #1
 800ef76:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800ef7a:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800ef7c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800ef80:	f7fd fb7a 	bl	800c678 <HAL_SPI_MspInit>
 800ef84:	e7b4      	b.n	800eef0 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ef86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ef8a:	e7be      	b.n	800ef0a <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ef90:	e7ca      	b.n	800ef28 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 800ef92:	2001      	movs	r0, #1
 800ef94:	4770      	bx	lr

0800ef96 <HAL_SPI_Transmit>:
{
 800ef96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800ef9e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d103      	bne.n	800efae <HAL_SPI_Transmit+0x18>
 800efa6:	2002      	movs	r0, #2
}
 800efa8:	b002      	add	sp, #8
 800efaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efae:	4604      	mov	r4, r0
 800efb0:	460e      	mov	r6, r1
 800efb2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800efb4:	2301      	movs	r3, #1
 800efb6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800efba:	f7fd fff1 	bl	800cfa0 <HAL_GetTick>
 800efbe:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800efc0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d007      	beq.n	800efda <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 800efca:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800efcc:	2301      	movs	r3, #1
 800efce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800efd2:	2300      	movs	r3, #0
 800efd4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800efd8:	e7e6      	b.n	800efa8 <HAL_SPI_Transmit+0x12>
  if ((pData == NULL) || (Size == 0U))
 800efda:	f1b8 0f00 	cmp.w	r8, #0
 800efde:	bf18      	it	ne
 800efe0:	2e00      	cmpne	r6, #0
 800efe2:	f000 8082 	beq.w	800f0ea <HAL_SPI_Transmit+0x154>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800efe6:	2303      	movs	r3, #3
 800efe8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efec:	2300      	movs	r3, #0
 800efee:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800eff0:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800eff2:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800eff6:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800effa:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800effc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800f000:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800f004:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800f006:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f008:	68a3      	ldr	r3, [r4, #8]
 800f00a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f00e:	d00d      	beq.n	800f02c <HAL_SPI_Transmit+0x96>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f018:	d103      	bne.n	800f022 <HAL_SPI_Transmit+0x8c>
    __HAL_SPI_ENABLE(hspi);
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f020:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f022:	68e3      	ldr	r3, [r4, #12]
 800f024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f028:	d810      	bhi.n	800f04c <HAL_SPI_Transmit+0xb6>
 800f02a:	e034      	b.n	800f096 <HAL_SPI_Transmit+0x100>
    SPI_1LINE_TX(hspi);
 800f02c:	6822      	ldr	r2, [r4, #0]
 800f02e:	6813      	ldr	r3, [r2, #0]
 800f030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f034:	6013      	str	r3, [r2, #0]
 800f036:	e7eb      	b.n	800f010 <HAL_SPI_Transmit+0x7a>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800f038:	2d00      	cmp	r5, #0
 800f03a:	d058      	beq.n	800f0ee <HAL_SPI_Transmit+0x158>
 800f03c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800f040:	d004      	beq.n	800f04c <HAL_SPI_Transmit+0xb6>
 800f042:	f7fd ffad 	bl	800cfa0 <HAL_GetTick>
 800f046:	1bc0      	subs	r0, r0, r7
 800f048:	4285      	cmp	r5, r0
 800f04a:	d952      	bls.n	800f0f2 <HAL_SPI_Transmit+0x15c>
    while (hspi->TxXferCount > 0U)
 800f04c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f04e:	b29b      	uxth	r3, r3
 800f050:	2b00      	cmp	r3, #0
 800f052:	d035      	beq.n	800f0c0 <HAL_SPI_Transmit+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f054:	6823      	ldr	r3, [r4, #0]
 800f056:	689a      	ldr	r2, [r3, #8]
 800f058:	f012 0f02 	tst.w	r2, #2
 800f05c:	d0ec      	beq.n	800f038 <HAL_SPI_Transmit+0xa2>
        hspi->Instance->DR = *((uint16_t *)pData);
 800f05e:	f836 2b02 	ldrh.w	r2, [r6], #2
 800f062:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800f064:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f066:	b29b      	uxth	r3, r3
 800f068:	3b01      	subs	r3, #1
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800f06e:	e7ed      	b.n	800f04c <HAL_SPI_Transmit+0xb6>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800f070:	7832      	ldrb	r2, [r6, #0]
 800f072:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800f074:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f076:	b29b      	uxth	r3, r3
 800f078:	3b01      	subs	r3, #1
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800f07e:	3601      	adds	r6, #1
 800f080:	e009      	b.n	800f096 <HAL_SPI_Transmit+0x100>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800f082:	2d00      	cmp	r5, #0
 800f084:	d037      	beq.n	800f0f6 <HAL_SPI_Transmit+0x160>
 800f086:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800f08a:	d004      	beq.n	800f096 <HAL_SPI_Transmit+0x100>
 800f08c:	f7fd ff88 	bl	800cfa0 <HAL_GetTick>
 800f090:	1bc0      	subs	r0, r0, r7
 800f092:	4285      	cmp	r5, r0
 800f094:	d931      	bls.n	800f0fa <HAL_SPI_Transmit+0x164>
    while (hspi->TxXferCount > 0U)
 800f096:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f098:	b29b      	uxth	r3, r3
 800f09a:	b18b      	cbz	r3, 800f0c0 <HAL_SPI_Transmit+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f09c:	6823      	ldr	r3, [r4, #0]
 800f09e:	689a      	ldr	r2, [r3, #8]
 800f0a0:	f012 0f02 	tst.w	r2, #2
 800f0a4:	d0ed      	beq.n	800f082 <HAL_SPI_Transmit+0xec>
        if (hspi->TxXferCount > 1U)
 800f0a6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800f0a8:	b292      	uxth	r2, r2
 800f0aa:	2a01      	cmp	r2, #1
 800f0ac:	d9e0      	bls.n	800f070 <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((uint16_t *)pData);
 800f0ae:	f836 2b02 	ldrh.w	r2, [r6], #2
 800f0b2:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800f0b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	3b02      	subs	r3, #2
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800f0be:	e7ea      	b.n	800f096 <HAL_SPI_Transmit+0x100>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f0c0:	463a      	mov	r2, r7
 800f0c2:	4629      	mov	r1, r5
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f7ff fe92 	bl	800edee <SPI_EndRxTxTransaction>
 800f0ca:	b108      	cbz	r0, 800f0d0 <HAL_SPI_Transmit+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f0cc:	2320      	movs	r3, #32
 800f0ce:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f0d0:	68a3      	ldr	r3, [r4, #8]
 800f0d2:	b933      	cbnz	r3, 800f0e2 <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f0d4:	9301      	str	r3, [sp, #4]
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	68da      	ldr	r2, [r3, #12]
 800f0da:	9201      	str	r2, [sp, #4]
 800f0dc:	689b      	ldr	r3, [r3, #8]
 800f0de:	9301      	str	r3, [sp, #4]
 800f0e0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f0e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f0e4:	b95b      	cbnz	r3, 800f0fe <HAL_SPI_Transmit+0x168>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f0e6:	2000      	movs	r0, #0
 800f0e8:	e770      	b.n	800efcc <HAL_SPI_Transmit+0x36>
    errorcode = HAL_ERROR;
 800f0ea:	2001      	movs	r0, #1
 800f0ec:	e76e      	b.n	800efcc <HAL_SPI_Transmit+0x36>
          errorcode = HAL_TIMEOUT;
 800f0ee:	2003      	movs	r0, #3
 800f0f0:	e76c      	b.n	800efcc <HAL_SPI_Transmit+0x36>
 800f0f2:	2003      	movs	r0, #3
 800f0f4:	e76a      	b.n	800efcc <HAL_SPI_Transmit+0x36>
          errorcode = HAL_TIMEOUT;
 800f0f6:	2003      	movs	r0, #3
 800f0f8:	e768      	b.n	800efcc <HAL_SPI_Transmit+0x36>
 800f0fa:	2003      	movs	r0, #3
 800f0fc:	e766      	b.n	800efcc <HAL_SPI_Transmit+0x36>
    errorcode = HAL_ERROR;
 800f0fe:	2001      	movs	r0, #1
 800f100:	e764      	b.n	800efcc <HAL_SPI_Transmit+0x36>

0800f102 <HAL_SPI_TransmitReceive>:
{
 800f102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f106:	4698      	mov	r8, r3
  __HAL_LOCK(hspi);
 800f108:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d102      	bne.n	800f116 <HAL_SPI_TransmitReceive+0x14>
 800f110:	2002      	movs	r0, #2
}
 800f112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f116:	4604      	mov	r4, r0
 800f118:	460e      	mov	r6, r1
 800f11a:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800f11c:	2301      	movs	r3, #1
 800f11e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800f122:	f7fd ff3d 	bl	800cfa0 <HAL_GetTick>
 800f126:	4607      	mov	r7, r0
  tmp  = hspi->State;
 800f128:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800f12c:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 800f12e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800f130:	2b01      	cmp	r3, #1
 800f132:	d013      	beq.n	800f15c <HAL_SPI_TransmitReceive+0x5a>
 800f134:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800f138:	d008      	beq.n	800f14c <HAL_SPI_TransmitReceive+0x4a>
    errorcode = HAL_BUSY;
 800f13a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800f13c:	2301      	movs	r3, #1
 800f13e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f142:	2300      	movs	r3, #0
 800f144:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800f148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800f14c:	68a2      	ldr	r2, [r4, #8]
 800f14e:	2a00      	cmp	r2, #0
 800f150:	f040 811f 	bne.w	800f392 <HAL_SPI_TransmitReceive+0x290>
 800f154:	2b04      	cmp	r3, #4
 800f156:	d001      	beq.n	800f15c <HAL_SPI_TransmitReceive+0x5a>
    errorcode = HAL_BUSY;
 800f158:	2002      	movs	r0, #2
 800f15a:	e7ef      	b.n	800f13c <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f15c:	2d00      	cmp	r5, #0
 800f15e:	bf18      	it	ne
 800f160:	2e00      	cmpne	r6, #0
 800f162:	f000 8118 	beq.w	800f396 <HAL_SPI_TransmitReceive+0x294>
 800f166:	f1b8 0f00 	cmp.w	r8, #0
 800f16a:	f000 8116 	beq.w	800f39a <HAL_SPI_TransmitReceive+0x298>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f16e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b04      	cmp	r3, #4
 800f176:	d002      	beq.n	800f17e <HAL_SPI_TransmitReceive+0x7c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f178:	2305      	movs	r3, #5
 800f17a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f17e:	2300      	movs	r3, #0
 800f180:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f182:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f184:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800f188:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f18c:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f18e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f192:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800f196:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f198:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800f19a:	68e3      	ldr	r3, [r4, #12]
 800f19c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f1a0:	d804      	bhi.n	800f1ac <HAL_SPI_TransmitReceive+0xaa>
 800f1a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d923      	bls.n	800f1f4 <HAL_SPI_TransmitReceive+0xf2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f1ac:	6822      	ldr	r2, [r4, #0]
 800f1ae:	6853      	ldr	r3, [r2, #4]
 800f1b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1b4:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f1be:	d103      	bne.n	800f1c8 <HAL_SPI_TransmitReceive+0xc6>
    __HAL_SPI_ENABLE(hspi);
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1c6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f1c8:	68e3      	ldr	r3, [r4, #12]
 800f1ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f1ce:	d957      	bls.n	800f280 <HAL_SPI_TransmitReceive+0x17e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800f1d0:	6863      	ldr	r3, [r4, #4]
 800f1d2:	b11b      	cbz	r3, 800f1dc <HAL_SPI_TransmitReceive+0xda>
 800f1d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d108      	bne.n	800f1ee <HAL_SPI_TransmitReceive+0xec>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800f1dc:	6823      	ldr	r3, [r4, #0]
 800f1de:	f836 2b02 	ldrh.w	r2, [r6], #2
 800f1e2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800f1e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800f1ee:	f04f 0801 	mov.w	r8, #1
 800f1f2:	e025      	b.n	800f240 <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f1f4:	6822      	ldr	r2, [r4, #0]
 800f1f6:	6853      	ldr	r3, [r2, #4]
 800f1f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f1fc:	6053      	str	r3, [r2, #4]
 800f1fe:	e7da      	b.n	800f1b6 <HAL_SPI_TransmitReceive+0xb4>
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800f200:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f204:	b29b      	uxth	r3, r3
 800f206:	b183      	cbz	r3, 800f22a <HAL_SPI_TransmitReceive+0x128>
 800f208:	6823      	ldr	r3, [r4, #0]
 800f20a:	689a      	ldr	r2, [r3, #8]
 800f20c:	f012 0f01 	tst.w	r2, #1
 800f210:	d00b      	beq.n	800f22a <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 800f218:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	3b01      	subs	r3, #1
 800f220:	b29b      	uxth	r3, r3
 800f222:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800f226:	f04f 0801 	mov.w	r8, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800f22a:	9b06      	ldr	r3, [sp, #24]
 800f22c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f230:	d006      	beq.n	800f240 <HAL_SPI_TransmitReceive+0x13e>
 800f232:	f7fd feb5 	bl	800cfa0 <HAL_GetTick>
 800f236:	1bc0      	subs	r0, r0, r7
 800f238:	9b06      	ldr	r3, [sp, #24]
 800f23a:	4283      	cmp	r3, r0
 800f23c:	f240 80af 	bls.w	800f39e <HAL_SPI_TransmitReceive+0x29c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f240:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f242:	b29b      	uxth	r3, r3
 800f244:	b92b      	cbnz	r3, 800f252 <HAL_SPI_TransmitReceive+0x150>
 800f246:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 8094 	beq.w	800f37a <HAL_SPI_TransmitReceive+0x278>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800f252:	f1b8 0f00 	cmp.w	r8, #0
 800f256:	d0d3      	beq.n	800f200 <HAL_SPI_TransmitReceive+0xfe>
 800f258:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d0cf      	beq.n	800f200 <HAL_SPI_TransmitReceive+0xfe>
 800f260:	6823      	ldr	r3, [r4, #0]
 800f262:	689a      	ldr	r2, [r3, #8]
 800f264:	f012 0f02 	tst.w	r2, #2
 800f268:	d0ca      	beq.n	800f200 <HAL_SPI_TransmitReceive+0xfe>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800f26a:	f836 2b02 	ldrh.w	r2, [r6], #2
 800f26e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800f270:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f272:	b29b      	uxth	r3, r3
 800f274:	3b01      	subs	r3, #1
 800f276:	b29b      	uxth	r3, r3
 800f278:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800f27a:	f04f 0800 	mov.w	r8, #0
 800f27e:	e7bf      	b.n	800f200 <HAL_SPI_TransmitReceive+0xfe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800f280:	6863      	ldr	r3, [r4, #4]
 800f282:	b11b      	cbz	r3, 800f28c <HAL_SPI_TransmitReceive+0x18a>
 800f284:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f286:	b29b      	uxth	r3, r3
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d108      	bne.n	800f29e <HAL_SPI_TransmitReceive+0x19c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*pTxData);
 800f28c:	6823      	ldr	r3, [r4, #0]
 800f28e:	f816 2b01 	ldrb.w	r2, [r6], #1
 800f292:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800f294:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f296:	b29b      	uxth	r3, r3
 800f298:	3b01      	subs	r3, #1
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800f29e:	f04f 0801 	mov.w	r8, #1
 800f2a2:	e032      	b.n	800f30a <HAL_SPI_TransmitReceive+0x208>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800f2a4:	7832      	ldrb	r2, [r6, #0]
 800f2a6:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800f2a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800f2b2:	3601      	adds	r6, #1
        txallowed = 0U;
 800f2b4:	f04f 0800 	mov.w	r8, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800f2b8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	b1d3      	cbz	r3, 800f2f6 <HAL_SPI_TransmitReceive+0x1f4>
 800f2c0:	6823      	ldr	r3, [r4, #0]
 800f2c2:	689a      	ldr	r2, [r3, #8]
 800f2c4:	f012 0f01 	tst.w	r2, #1
 800f2c8:	d015      	beq.n	800f2f6 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 800f2ca:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800f2ce:	b292      	uxth	r2, r2
 800f2d0:	2a01      	cmp	r2, #1
 800f2d2:	d945      	bls.n	800f360 <HAL_SPI_TransmitReceive+0x25e>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	f825 3b02 	strh.w	r3, [r5], #2
          hspi->RxXferCount -= 2U;
 800f2da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	3b02      	subs	r3, #2
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800f2e8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d92e      	bls.n	800f350 <HAL_SPI_TransmitReceive+0x24e>
        txallowed = 1U;
 800f2f2:	f04f 0801 	mov.w	r8, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800f2f6:	9b06      	ldr	r3, [sp, #24]
 800f2f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2fc:	d005      	beq.n	800f30a <HAL_SPI_TransmitReceive+0x208>
 800f2fe:	f7fd fe4f 	bl	800cfa0 <HAL_GetTick>
 800f302:	1bc0      	subs	r0, r0, r7
 800f304:	9b06      	ldr	r3, [sp, #24]
 800f306:	4283      	cmp	r3, r0
 800f308:	d94b      	bls.n	800f3a2 <HAL_SPI_TransmitReceive+0x2a0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f30a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	b923      	cbnz	r3, 800f31a <HAL_SPI_TransmitReceive+0x218>
 800f310:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f314:	b29b      	uxth	r3, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	d02f      	beq.n	800f37a <HAL_SPI_TransmitReceive+0x278>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800f31a:	f1b8 0f00 	cmp.w	r8, #0
 800f31e:	d0cb      	beq.n	800f2b8 <HAL_SPI_TransmitReceive+0x1b6>
 800f320:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f322:	b29b      	uxth	r3, r3
 800f324:	2b00      	cmp	r3, #0
 800f326:	d0c7      	beq.n	800f2b8 <HAL_SPI_TransmitReceive+0x1b6>
 800f328:	6823      	ldr	r3, [r4, #0]
 800f32a:	689a      	ldr	r2, [r3, #8]
 800f32c:	f012 0f02 	tst.w	r2, #2
 800f330:	d0c2      	beq.n	800f2b8 <HAL_SPI_TransmitReceive+0x1b6>
        if (hspi->TxXferCount > 1U)
 800f332:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800f334:	b292      	uxth	r2, r2
 800f336:	2a01      	cmp	r2, #1
 800f338:	d9b4      	bls.n	800f2a4 <HAL_SPI_TransmitReceive+0x1a2>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800f33a:	f836 2b02 	ldrh.w	r2, [r6], #2
 800f33e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800f340:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f342:	b29b      	uxth	r3, r3
 800f344:	3b02      	subs	r3, #2
 800f346:	b29b      	uxth	r3, r3
 800f348:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800f34a:	f04f 0800 	mov.w	r8, #0
 800f34e:	e7b3      	b.n	800f2b8 <HAL_SPI_TransmitReceive+0x1b6>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f350:	6822      	ldr	r2, [r4, #0]
 800f352:	6853      	ldr	r3, [r2, #4]
 800f354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f358:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800f35a:	f04f 0801 	mov.w	r8, #1
 800f35e:	e7ca      	b.n	800f2f6 <HAL_SPI_TransmitReceive+0x1f4>
          (*pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f360:	7b1b      	ldrb	r3, [r3, #12]
 800f362:	702b      	strb	r3, [r5, #0]
          hspi->RxXferCount--;
 800f364:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f368:	b29b      	uxth	r3, r3
 800f36a:	3b01      	subs	r3, #1
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f372:	3501      	adds	r5, #1
        txallowed = 1U;
 800f374:	f04f 0801 	mov.w	r8, #1
 800f378:	e7bd      	b.n	800f2f6 <HAL_SPI_TransmitReceive+0x1f4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f37a:	463a      	mov	r2, r7
 800f37c:	9906      	ldr	r1, [sp, #24]
 800f37e:	4620      	mov	r0, r4
 800f380:	f7ff fd35 	bl	800edee <SPI_EndRxTxTransaction>
 800f384:	b108      	cbz	r0, 800f38a <HAL_SPI_TransmitReceive+0x288>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f386:	2320      	movs	r3, #32
 800f388:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f38a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f38c:	b95b      	cbnz	r3, 800f3a6 <HAL_SPI_TransmitReceive+0x2a4>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f38e:	2000      	movs	r0, #0
 800f390:	e6d4      	b.n	800f13c <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 800f392:	2002      	movs	r0, #2
 800f394:	e6d2      	b.n	800f13c <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 800f396:	2001      	movs	r0, #1
 800f398:	e6d0      	b.n	800f13c <HAL_SPI_TransmitReceive+0x3a>
 800f39a:	2001      	movs	r0, #1
 800f39c:	e6ce      	b.n	800f13c <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 800f39e:	2003      	movs	r0, #3
 800f3a0:	e6cc      	b.n	800f13c <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 800f3a2:	2003      	movs	r0, #3
 800f3a4:	e6ca      	b.n	800f13c <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 800f3a6:	2001      	movs	r0, #1
 800f3a8:	e6c8      	b.n	800f13c <HAL_SPI_TransmitReceive+0x3a>

0800f3aa <HAL_SPI_Receive>:
{
 800f3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	460e      	mov	r6, r1
 800f3b4:	4690      	mov	r8, r2
 800f3b6:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f3b8:	6843      	ldr	r3, [r0, #4]
 800f3ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f3be:	d007      	beq.n	800f3d0 <HAL_SPI_Receive+0x26>
  __HAL_LOCK(hspi);
 800f3c0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d10f      	bne.n	800f3e8 <HAL_SPI_Receive+0x3e>
 800f3c8:	2002      	movs	r0, #2
}
 800f3ca:	b002      	add	sp, #8
 800f3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f3d0:	6883      	ldr	r3, [r0, #8]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1f4      	bne.n	800f3c0 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f3d6:	2304      	movs	r3, #4
 800f3d8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f3dc:	9500      	str	r5, [sp, #0]
 800f3de:	4613      	mov	r3, r2
 800f3e0:	460a      	mov	r2, r1
 800f3e2:	f7ff fe8e 	bl	800f102 <HAL_SPI_TransmitReceive>
 800f3e6:	e7f0      	b.n	800f3ca <HAL_SPI_Receive+0x20>
  __HAL_LOCK(hspi);
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800f3ee:	f7fd fdd7 	bl	800cfa0 <HAL_GetTick>
 800f3f2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800f3f4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d007      	beq.n	800f40e <HAL_SPI_Receive+0x64>
    errorcode = HAL_BUSY;
 800f3fe:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800f400:	2301      	movs	r3, #1
 800f402:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f406:	2300      	movs	r3, #0
 800f408:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800f40c:	e7dd      	b.n	800f3ca <HAL_SPI_Receive+0x20>
  if ((pData == NULL) || (Size == 0U))
 800f40e:	f1b8 0f00 	cmp.w	r8, #0
 800f412:	bf18      	it	ne
 800f414:	2e00      	cmpne	r6, #0
 800f416:	d07c      	beq.n	800f512 <HAL_SPI_Receive+0x168>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f418:	2304      	movs	r3, #4
 800f41a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f41e:	2300      	movs	r3, #0
 800f420:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f422:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800f424:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800f428:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f42c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800f42e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800f430:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800f432:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f434:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f436:	68e3      	ldr	r3, [r4, #12]
 800f438:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f43c:	d916      	bls.n	800f46c <HAL_SPI_Receive+0xc2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f43e:	6822      	ldr	r2, [r4, #0]
 800f440:	6853      	ldr	r3, [r2, #4]
 800f442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f446:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f448:	68a3      	ldr	r3, [r4, #8]
 800f44a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f44e:	d013      	beq.n	800f478 <HAL_SPI_Receive+0xce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f450:	6823      	ldr	r3, [r4, #0]
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f458:	d103      	bne.n	800f462 <HAL_SPI_Receive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f460:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f462:	68e3      	ldr	r3, [r4, #12]
 800f464:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f468:	d916      	bls.n	800f498 <HAL_SPI_Receive+0xee>
 800f46a:	e032      	b.n	800f4d2 <HAL_SPI_Receive+0x128>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f46c:	6822      	ldr	r2, [r4, #0]
 800f46e:	6853      	ldr	r3, [r2, #4]
 800f470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f474:	6053      	str	r3, [r2, #4]
 800f476:	e7e7      	b.n	800f448 <HAL_SPI_Receive+0x9e>
    SPI_1LINE_RX(hspi);
 800f478:	6822      	ldr	r2, [r4, #0]
 800f47a:	6813      	ldr	r3, [r2, #0]
 800f47c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f480:	6013      	str	r3, [r2, #0]
 800f482:	e7e5      	b.n	800f450 <HAL_SPI_Receive+0xa6>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800f484:	2d00      	cmp	r5, #0
 800f486:	d046      	beq.n	800f516 <HAL_SPI_Receive+0x16c>
 800f488:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800f48c:	d004      	beq.n	800f498 <HAL_SPI_Receive+0xee>
 800f48e:	f7fd fd87 	bl	800cfa0 <HAL_GetTick>
 800f492:	1bc0      	subs	r0, r0, r7
 800f494:	4285      	cmp	r5, r0
 800f496:	d940      	bls.n	800f51a <HAL_SPI_Receive+0x170>
    while (hspi->RxXferCount > 0U)
 800f498:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	b363      	cbz	r3, 800f4fa <HAL_SPI_Receive+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f4a0:	6823      	ldr	r3, [r4, #0]
 800f4a2:	689a      	ldr	r2, [r3, #8]
 800f4a4:	f012 0f01 	tst.w	r2, #1
 800f4a8:	d0ec      	beq.n	800f484 <HAL_SPI_Receive+0xda>
        (*pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f4aa:	7b1b      	ldrb	r3, [r3, #12]
 800f4ac:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 800f4b0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	b29b      	uxth	r3, r3
 800f4ba:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800f4be:	e7eb      	b.n	800f498 <HAL_SPI_Receive+0xee>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800f4c0:	b36d      	cbz	r5, 800f51e <HAL_SPI_Receive+0x174>
 800f4c2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800f4c6:	d004      	beq.n	800f4d2 <HAL_SPI_Receive+0x128>
 800f4c8:	f7fd fd6a 	bl	800cfa0 <HAL_GetTick>
 800f4cc:	1bc0      	subs	r0, r0, r7
 800f4ce:	4285      	cmp	r5, r0
 800f4d0:	d927      	bls.n	800f522 <HAL_SPI_Receive+0x178>
    while (hspi->RxXferCount > 0U)
 800f4d2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	b17b      	cbz	r3, 800f4fa <HAL_SPI_Receive+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	689a      	ldr	r2, [r3, #8]
 800f4de:	f012 0f01 	tst.w	r2, #1
 800f4e2:	d0ed      	beq.n	800f4c0 <HAL_SPI_Receive+0x116>
        *((uint16_t *)pData) = hspi->Instance->DR;
 800f4e4:	68db      	ldr	r3, [r3, #12]
 800f4e6:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800f4ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800f4f8:	e7eb      	b.n	800f4d2 <HAL_SPI_Receive+0x128>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f4fa:	463a      	mov	r2, r7
 800f4fc:	4629      	mov	r1, r5
 800f4fe:	4620      	mov	r0, r4
 800f500:	f7ff fca9 	bl	800ee56 <SPI_EndRxTransaction>
 800f504:	b108      	cbz	r0, 800f50a <HAL_SPI_Receive+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f506:	2320      	movs	r3, #32
 800f508:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f50a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f50c:	b95b      	cbnz	r3, 800f526 <HAL_SPI_Receive+0x17c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f50e:	2000      	movs	r0, #0
 800f510:	e776      	b.n	800f400 <HAL_SPI_Receive+0x56>
    errorcode = HAL_ERROR;
 800f512:	2001      	movs	r0, #1
 800f514:	e774      	b.n	800f400 <HAL_SPI_Receive+0x56>
          errorcode = HAL_TIMEOUT;
 800f516:	2003      	movs	r0, #3
 800f518:	e772      	b.n	800f400 <HAL_SPI_Receive+0x56>
 800f51a:	2003      	movs	r0, #3
 800f51c:	e770      	b.n	800f400 <HAL_SPI_Receive+0x56>
          errorcode = HAL_TIMEOUT;
 800f51e:	2003      	movs	r0, #3
 800f520:	e76e      	b.n	800f400 <HAL_SPI_Receive+0x56>
 800f522:	2003      	movs	r0, #3
 800f524:	e76c      	b.n	800f400 <HAL_SPI_Receive+0x56>
    errorcode = HAL_ERROR;
 800f526:	2001      	movs	r0, #1
 800f528:	e76a      	b.n	800f400 <HAL_SPI_Receive+0x56>

0800f52a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f52a:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f52c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f52e:	6a04      	ldr	r4, [r0, #32]
 800f530:	f024 0401 	bic.w	r4, r4, #1
 800f534:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800f536:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f538:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800f53c:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f540:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800f544:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f546:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800f548:	6203      	str	r3, [r0, #32]
}
 800f54a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f550:	b410      	push	{r4}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f552:	6a03      	ldr	r3, [r0, #32]
 800f554:	f023 0310 	bic.w	r3, r3, #16
 800f558:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f55a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800f55c:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f55e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);
 800f562:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 800f56a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f56e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800f570:	6203      	str	r3, [r0, #32]
}
 800f572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f576:	4770      	bx	lr

0800f578 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800f578:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800f57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800f57e:	f041 0107 	orr.w	r1, r1, #7
 800f582:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800f584:	6083      	str	r3, [r0, #8]
 800f586:	4770      	bx	lr

0800f588 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 800f588:	2302      	movs	r3, #2
 800f58a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 800f58e:	6802      	ldr	r2, [r0, #0]
 800f590:	6813      	ldr	r3, [r2, #0]
 800f592:	f043 0301 	orr.w	r3, r3, #1
 800f596:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 800f598:	2301      	movs	r3, #1
 800f59a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800f59e:	2000      	movs	r0, #0
 800f5a0:	4770      	bx	lr

0800f5a2 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f5a2:	6802      	ldr	r2, [r0, #0]
 800f5a4:	68d3      	ldr	r3, [r2, #12]
 800f5a6:	f043 0301 	orr.w	r3, r3, #1
 800f5aa:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 800f5ac:	6802      	ldr	r2, [r0, #0]
 800f5ae:	6813      	ldr	r3, [r2, #0]
 800f5b0:	f043 0301 	orr.w	r3, r3, #1
 800f5b4:	6013      	str	r3, [r2, #0]
}
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	4770      	bx	lr

0800f5ba <HAL_TIM_PWM_MspInit>:
{
 800f5ba:	4770      	bx	lr

0800f5bc <HAL_TIM_OC_DelayElapsedCallback>:
{
 800f5bc:	4770      	bx	lr

0800f5be <HAL_TIM_IC_CaptureCallback>:
{
 800f5be:	4770      	bx	lr

0800f5c0 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 800f5c0:	4770      	bx	lr

0800f5c2 <HAL_TIM_TriggerCallback>:
{
 800f5c2:	4770      	bx	lr

0800f5c4 <HAL_TIM_IRQHandler>:
{
 800f5c4:	b510      	push	{r4, lr}
 800f5c6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f5c8:	6803      	ldr	r3, [r0, #0]
 800f5ca:	691a      	ldr	r2, [r3, #16]
 800f5cc:	f012 0f02 	tst.w	r2, #2
 800f5d0:	d011      	beq.n	800f5f6 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800f5d2:	68da      	ldr	r2, [r3, #12]
 800f5d4:	f012 0f02 	tst.w	r2, #2
 800f5d8:	d00d      	beq.n	800f5f6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f5da:	f06f 0202 	mvn.w	r2, #2
 800f5de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800f5e4:	6803      	ldr	r3, [r0, #0]
 800f5e6:	699b      	ldr	r3, [r3, #24]
 800f5e8:	f013 0f03 	tst.w	r3, #3
 800f5ec:	d079      	beq.n	800f6e2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800f5ee:	f7ff ffe6 	bl	800f5be <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	691a      	ldr	r2, [r3, #16]
 800f5fa:	f012 0f04 	tst.w	r2, #4
 800f5fe:	d012      	beq.n	800f626 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800f600:	68da      	ldr	r2, [r3, #12]
 800f602:	f012 0f04 	tst.w	r2, #4
 800f606:	d00e      	beq.n	800f626 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f608:	f06f 0204 	mvn.w	r2, #4
 800f60c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f60e:	2302      	movs	r3, #2
 800f610:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800f612:	6823      	ldr	r3, [r4, #0]
 800f614:	699b      	ldr	r3, [r3, #24]
 800f616:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f61a:	d068      	beq.n	800f6ee <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800f61c:	4620      	mov	r0, r4
 800f61e:	f7ff ffce 	bl	800f5be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f622:	2300      	movs	r3, #0
 800f624:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	691a      	ldr	r2, [r3, #16]
 800f62a:	f012 0f08 	tst.w	r2, #8
 800f62e:	d012      	beq.n	800f656 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800f630:	68da      	ldr	r2, [r3, #12]
 800f632:	f012 0f08 	tst.w	r2, #8
 800f636:	d00e      	beq.n	800f656 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f638:	f06f 0208 	mvn.w	r2, #8
 800f63c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f63e:	2304      	movs	r3, #4
 800f640:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	69db      	ldr	r3, [r3, #28]
 800f646:	f013 0f03 	tst.w	r3, #3
 800f64a:	d057      	beq.n	800f6fc <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800f64c:	4620      	mov	r0, r4
 800f64e:	f7ff ffb6 	bl	800f5be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f652:	2300      	movs	r3, #0
 800f654:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f656:	6823      	ldr	r3, [r4, #0]
 800f658:	691a      	ldr	r2, [r3, #16]
 800f65a:	f012 0f10 	tst.w	r2, #16
 800f65e:	d012      	beq.n	800f686 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800f660:	68da      	ldr	r2, [r3, #12]
 800f662:	f012 0f10 	tst.w	r2, #16
 800f666:	d00e      	beq.n	800f686 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f668:	f06f 0210 	mvn.w	r2, #16
 800f66c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f66e:	2308      	movs	r3, #8
 800f670:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	69db      	ldr	r3, [r3, #28]
 800f676:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f67a:	d046      	beq.n	800f70a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800f67c:	4620      	mov	r0, r4
 800f67e:	f7ff ff9e 	bl	800f5be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f682:	2300      	movs	r3, #0
 800f684:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f686:	6823      	ldr	r3, [r4, #0]
 800f688:	691a      	ldr	r2, [r3, #16]
 800f68a:	f012 0f01 	tst.w	r2, #1
 800f68e:	d003      	beq.n	800f698 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800f690:	68da      	ldr	r2, [r3, #12]
 800f692:	f012 0f01 	tst.w	r2, #1
 800f696:	d13f      	bne.n	800f718 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	691a      	ldr	r2, [r3, #16]
 800f69c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f6a0:	d003      	beq.n	800f6aa <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800f6a2:	68da      	ldr	r2, [r3, #12]
 800f6a4:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f6a8:	d13d      	bne.n	800f726 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	691a      	ldr	r2, [r3, #16]
 800f6ae:	f412 7f80 	tst.w	r2, #256	; 0x100
 800f6b2:	d003      	beq.n	800f6bc <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800f6b4:	68da      	ldr	r2, [r3, #12]
 800f6b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f6ba:	d13b      	bne.n	800f734 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f6bc:	6823      	ldr	r3, [r4, #0]
 800f6be:	691a      	ldr	r2, [r3, #16]
 800f6c0:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f6c4:	d003      	beq.n	800f6ce <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800f6c6:	68da      	ldr	r2, [r3, #12]
 800f6c8:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f6cc:	d139      	bne.n	800f742 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f6ce:	6823      	ldr	r3, [r4, #0]
 800f6d0:	691a      	ldr	r2, [r3, #16]
 800f6d2:	f012 0f20 	tst.w	r2, #32
 800f6d6:	d003      	beq.n	800f6e0 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800f6d8:	68da      	ldr	r2, [r3, #12]
 800f6da:	f012 0f20 	tst.w	r2, #32
 800f6de:	d137      	bne.n	800f750 <HAL_TIM_IRQHandler+0x18c>
 800f6e0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6e2:	f7ff ff6b 	bl	800f5bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	f7ff ff6a 	bl	800f5c0 <HAL_TIM_PWM_PulseFinishedCallback>
 800f6ec:	e781      	b.n	800f5f2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f7ff ff64 	bl	800f5bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f7ff ff63 	bl	800f5c0 <HAL_TIM_PWM_PulseFinishedCallback>
 800f6fa:	e792      	b.n	800f622 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f7ff ff5d 	bl	800f5bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f702:	4620      	mov	r0, r4
 800f704:	f7ff ff5c 	bl	800f5c0 <HAL_TIM_PWM_PulseFinishedCallback>
 800f708:	e7a3      	b.n	800f652 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f70a:	4620      	mov	r0, r4
 800f70c:	f7ff ff56 	bl	800f5bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f710:	4620      	mov	r0, r4
 800f712:	f7ff ff55 	bl	800f5c0 <HAL_TIM_PWM_PulseFinishedCallback>
 800f716:	e7b4      	b.n	800f682 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f718:	f06f 0201 	mvn.w	r2, #1
 800f71c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f71e:	4620      	mov	r0, r4
 800f720:	f7fc ff76 	bl	800c610 <HAL_TIM_PeriodElapsedCallback>
 800f724:	e7b8      	b.n	800f698 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f726:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f72a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800f72c:	4620      	mov	r0, r4
 800f72e:	f000 fb5a 	bl	800fde6 <HAL_TIMEx_BreakCallback>
 800f732:	e7ba      	b.n	800f6aa <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f738:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800f73a:	4620      	mov	r0, r4
 800f73c:	f000 fb53 	bl	800fde6 <HAL_TIMEx_BreakCallback>
 800f740:	e7bc      	b.n	800f6bc <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f742:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f746:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800f748:	4620      	mov	r0, r4
 800f74a:	f7ff ff3a 	bl	800f5c2 <HAL_TIM_TriggerCallback>
 800f74e:	e7be      	b.n	800f6ce <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f750:	f06f 0220 	mvn.w	r2, #32
 800f754:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800f756:	4620      	mov	r0, r4
 800f758:	f000 fb44 	bl	800fde4 <HAL_TIMEx_CommutationCallback>
}
 800f75c:	e7c0      	b.n	800f6e0 <HAL_TIM_IRQHandler+0x11c>
	...

0800f760 <TIM_Base_SetConfig>:
{
 800f760:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 800f762:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800f764:	4a47      	ldr	r2, [pc, #284]	; (800f884 <TIM_Base_SetConfig+0x124>)
 800f766:	4290      	cmp	r0, r2
 800f768:	bf14      	ite	ne
 800f76a:	2200      	movne	r2, #0
 800f76c:	2201      	moveq	r2, #1
 800f76e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800f772:	bf14      	ite	ne
 800f774:	4614      	movne	r4, r2
 800f776:	f042 0401 	orreq.w	r4, r2, #1
 800f77a:	b9d4      	cbnz	r4, 800f7b2 <TIM_Base_SetConfig+0x52>
 800f77c:	4d42      	ldr	r5, [pc, #264]	; (800f888 <TIM_Base_SetConfig+0x128>)
 800f77e:	42a8      	cmp	r0, r5
 800f780:	bf14      	ite	ne
 800f782:	2500      	movne	r5, #0
 800f784:	2501      	moveq	r5, #1
 800f786:	4e41      	ldr	r6, [pc, #260]	; (800f88c <TIM_Base_SetConfig+0x12c>)
 800f788:	42b0      	cmp	r0, r6
 800f78a:	d054      	beq.n	800f836 <TIM_Base_SetConfig+0xd6>
 800f78c:	2d00      	cmp	r5, #0
 800f78e:	d152      	bne.n	800f836 <TIM_Base_SetConfig+0xd6>
 800f790:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800f794:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 800f798:	42a8      	cmp	r0, r5
 800f79a:	bf14      	ite	ne
 800f79c:	2500      	movne	r5, #0
 800f79e:	2501      	moveq	r5, #1
 800f7a0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800f7a4:	42b0      	cmp	r0, r6
 800f7a6:	d002      	beq.n	800f7ae <TIM_Base_SetConfig+0x4e>
 800f7a8:	b90d      	cbnz	r5, 800f7ae <TIM_Base_SetConfig+0x4e>
 800f7aa:	2500      	movs	r5, #0
 800f7ac:	e002      	b.n	800f7b4 <TIM_Base_SetConfig+0x54>
 800f7ae:	2501      	movs	r5, #1
 800f7b0:	e000      	b.n	800f7b4 <TIM_Base_SetConfig+0x54>
 800f7b2:	2501      	movs	r5, #1
 800f7b4:	b11d      	cbz	r5, 800f7be <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800f7ba:	684d      	ldr	r5, [r1, #4]
 800f7bc:	432b      	orrs	r3, r5
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800f7be:	2c00      	cmp	r4, #0
 800f7c0:	d13d      	bne.n	800f83e <TIM_Base_SetConfig+0xde>
 800f7c2:	4c31      	ldr	r4, [pc, #196]	; (800f888 <TIM_Base_SetConfig+0x128>)
 800f7c4:	42a0      	cmp	r0, r4
 800f7c6:	bf14      	ite	ne
 800f7c8:	2400      	movne	r4, #0
 800f7ca:	2401      	moveq	r4, #1
 800f7cc:	4d2f      	ldr	r5, [pc, #188]	; (800f88c <TIM_Base_SetConfig+0x12c>)
 800f7ce:	42a8      	cmp	r0, r5
 800f7d0:	d050      	beq.n	800f874 <TIM_Base_SetConfig+0x114>
 800f7d2:	2c00      	cmp	r4, #0
 800f7d4:	d14e      	bne.n	800f874 <TIM_Base_SetConfig+0x114>
 800f7d6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800f7da:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800f7de:	42a0      	cmp	r0, r4
 800f7e0:	bf14      	ite	ne
 800f7e2:	2400      	movne	r4, #0
 800f7e4:	2401      	moveq	r4, #1
 800f7e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800f7ea:	42a8      	cmp	r0, r5
 800f7ec:	d044      	beq.n	800f878 <TIM_Base_SetConfig+0x118>
 800f7ee:	2c00      	cmp	r4, #0
 800f7f0:	d142      	bne.n	800f878 <TIM_Base_SetConfig+0x118>
 800f7f2:	4c27      	ldr	r4, [pc, #156]	; (800f890 <TIM_Base_SetConfig+0x130>)
 800f7f4:	42a0      	cmp	r0, r4
 800f7f6:	bf14      	ite	ne
 800f7f8:	2400      	movne	r4, #0
 800f7fa:	2401      	moveq	r4, #1
 800f7fc:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800f800:	42a8      	cmp	r0, r5
 800f802:	d03b      	beq.n	800f87c <TIM_Base_SetConfig+0x11c>
 800f804:	2c00      	cmp	r4, #0
 800f806:	d139      	bne.n	800f87c <TIM_Base_SetConfig+0x11c>
 800f808:	4c22      	ldr	r4, [pc, #136]	; (800f894 <TIM_Base_SetConfig+0x134>)
 800f80a:	42a0      	cmp	r0, r4
 800f80c:	bf14      	ite	ne
 800f80e:	2400      	movne	r4, #0
 800f810:	2401      	moveq	r4, #1
 800f812:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800f816:	42a8      	cmp	r0, r5
 800f818:	d032      	beq.n	800f880 <TIM_Base_SetConfig+0x120>
 800f81a:	2c00      	cmp	r4, #0
 800f81c:	d130      	bne.n	800f880 <TIM_Base_SetConfig+0x120>
 800f81e:	4c1e      	ldr	r4, [pc, #120]	; (800f898 <TIM_Base_SetConfig+0x138>)
 800f820:	42a0      	cmp	r0, r4
 800f822:	bf14      	ite	ne
 800f824:	2400      	movne	r4, #0
 800f826:	2401      	moveq	r4, #1
 800f828:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 800f82c:	42a8      	cmp	r0, r5
 800f82e:	d004      	beq.n	800f83a <TIM_Base_SetConfig+0xda>
 800f830:	b91c      	cbnz	r4, 800f83a <TIM_Base_SetConfig+0xda>
 800f832:	2400      	movs	r4, #0
 800f834:	e004      	b.n	800f840 <TIM_Base_SetConfig+0xe0>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800f836:	2501      	movs	r5, #1
 800f838:	e7bc      	b.n	800f7b4 <TIM_Base_SetConfig+0x54>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800f83a:	2401      	movs	r4, #1
 800f83c:	e000      	b.n	800f840 <TIM_Base_SetConfig+0xe0>
 800f83e:	2401      	movs	r4, #1
 800f840:	b11c      	cbz	r4, 800f84a <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~TIM_CR1_CKD;
 800f842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f846:	68cc      	ldr	r4, [r1, #12]
 800f848:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f84a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f84e:	694c      	ldr	r4, [r1, #20]
 800f850:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800f852:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f854:	688b      	ldr	r3, [r1, #8]
 800f856:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800f858:	680b      	ldr	r3, [r1, #0]
 800f85a:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800f85c:	4b0f      	ldr	r3, [pc, #60]	; (800f89c <TIM_Base_SetConfig+0x13c>)
 800f85e:	4298      	cmp	r0, r3
 800f860:	bf08      	it	eq
 800f862:	f042 0201 	orreq.w	r2, r2, #1
 800f866:	b10a      	cbz	r2, 800f86c <TIM_Base_SetConfig+0x10c>
    TIMx->RCR = Structure->RepetitionCounter;
 800f868:	690b      	ldr	r3, [r1, #16]
 800f86a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800f86c:	2301      	movs	r3, #1
 800f86e:	6143      	str	r3, [r0, #20]
}
 800f870:	bc70      	pop	{r4, r5, r6}
 800f872:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800f874:	2401      	movs	r4, #1
 800f876:	e7e3      	b.n	800f840 <TIM_Base_SetConfig+0xe0>
 800f878:	2401      	movs	r4, #1
 800f87a:	e7e1      	b.n	800f840 <TIM_Base_SetConfig+0xe0>
 800f87c:	2401      	movs	r4, #1
 800f87e:	e7df      	b.n	800f840 <TIM_Base_SetConfig+0xe0>
 800f880:	2401      	movs	r4, #1
 800f882:	e7dd      	b.n	800f840 <TIM_Base_SetConfig+0xe0>
 800f884:	40010000 	.word	0x40010000
 800f888:	40000800 	.word	0x40000800
 800f88c:	40000400 	.word	0x40000400
 800f890:	40014400 	.word	0x40014400
 800f894:	40001800 	.word	0x40001800
 800f898:	40002000 	.word	0x40002000
 800f89c:	40010400 	.word	0x40010400

0800f8a0 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 800f8a0:	b1a8      	cbz	r0, 800f8ce <HAL_TIM_Base_Init+0x2e>
{ 
 800f8a2:	b510      	push	{r4, lr}
 800f8a4:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800f8a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800f8aa:	b15b      	cbz	r3, 800f8c4 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800f8ac:	2302      	movs	r3, #2
 800f8ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800f8b2:	1d21      	adds	r1, r4, #4
 800f8b4:	6820      	ldr	r0, [r4, #0]
 800f8b6:	f7ff ff53 	bl	800f760 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800f8c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800f8c8:	f7fc ffee 	bl	800c8a8 <HAL_TIM_Base_MspInit>
 800f8cc:	e7ee      	b.n	800f8ac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800f8ce:	2001      	movs	r0, #1
 800f8d0:	4770      	bx	lr

0800f8d2 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 800f8d2:	b1a8      	cbz	r0, 800f900 <HAL_TIM_PWM_Init+0x2e>
{
 800f8d4:	b510      	push	{r4, lr}
 800f8d6:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800f8d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800f8dc:	b15b      	cbz	r3, 800f8f6 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 800f8de:	2302      	movs	r3, #2
 800f8e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800f8e4:	1d21      	adds	r1, r4, #4
 800f8e6:	6820      	ldr	r0, [r4, #0]
 800f8e8:	f7ff ff3a 	bl	800f760 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800f8f2:	2000      	movs	r0, #0
 800f8f4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800f8f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800f8fa:	f7ff fe5e 	bl	800f5ba <HAL_TIM_PWM_MspInit>
 800f8fe:	e7ee      	b.n	800f8de <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800f900:	2001      	movs	r0, #1
 800f902:	4770      	bx	lr

0800f904 <TIM_OC1_SetConfig>:
{
 800f904:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f906:	6a03      	ldr	r3, [r0, #32]
 800f908:	f023 0301 	bic.w	r3, r3, #1
 800f90c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800f90e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800f910:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800f912:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f914:	4a10      	ldr	r2, [pc, #64]	; (800f958 <TIM_OC1_SetConfig+0x54>)
 800f916:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800f918:	680d      	ldr	r5, [r1, #0]
 800f91a:	432a      	orrs	r2, r5
  tmpccer &= ~TIM_CCER_CC1P;
 800f91c:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800f920:	688d      	ldr	r5, [r1, #8]
 800f922:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800f924:	4d0d      	ldr	r5, [pc, #52]	; (800f95c <TIM_OC1_SetConfig+0x58>)
 800f926:	4e0e      	ldr	r6, [pc, #56]	; (800f960 <TIM_OC1_SetConfig+0x5c>)
 800f928:	42a8      	cmp	r0, r5
 800f92a:	bf18      	it	ne
 800f92c:	42b0      	cmpne	r0, r6
 800f92e:	d10b      	bne.n	800f948 <TIM_OC1_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC1NP;
 800f930:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800f934:	68cd      	ldr	r5, [r1, #12]
 800f936:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800f938:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f93c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800f940:	694d      	ldr	r5, [r1, #20]
 800f942:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800f944:	698d      	ldr	r5, [r1, #24]
 800f946:	432c      	orrs	r4, r5
  TIMx->CR2 = tmpcr2;
 800f948:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800f94a:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800f94c:	684a      	ldr	r2, [r1, #4]
 800f94e:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 800f950:	6203      	str	r3, [r0, #32]
} 
 800f952:	bc70      	pop	{r4, r5, r6}
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop
 800f958:	fffeff8c 	.word	0xfffeff8c
 800f95c:	40010400 	.word	0x40010400
 800f960:	40010000 	.word	0x40010000

0800f964 <TIM_OC2_SetConfig>:
{
 800f964:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f966:	6a03      	ldr	r3, [r0, #32]
 800f968:	f023 0310 	bic.w	r3, r3, #16
 800f96c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800f96e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800f970:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800f972:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f974:	4a12      	ldr	r2, [pc, #72]	; (800f9c0 <TIM_OC2_SetConfig+0x5c>)
 800f976:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8);
 800f978:	680d      	ldr	r5, [r1, #0]
 800f97a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800f97e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
 800f982:	688d      	ldr	r5, [r1, #8]
 800f984:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800f988:	4d0e      	ldr	r5, [pc, #56]	; (800f9c4 <TIM_OC2_SetConfig+0x60>)
 800f98a:	4e0f      	ldr	r6, [pc, #60]	; (800f9c8 <TIM_OC2_SetConfig+0x64>)
 800f98c:	42a8      	cmp	r0, r5
 800f98e:	bf18      	it	ne
 800f990:	42b0      	cmpne	r0, r6
 800f992:	d10e      	bne.n	800f9b2 <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 800f994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800f998:	68cd      	ldr	r5, [r1, #12]
 800f99a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800f99e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f9a2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800f9a6:	694d      	ldr	r5, [r1, #20]
 800f9a8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800f9ac:	698d      	ldr	r5, [r1, #24]
 800f9ae:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800f9b2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800f9b4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800f9b6:	684a      	ldr	r2, [r1, #4]
 800f9b8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800f9ba:	6203      	str	r3, [r0, #32]
}
 800f9bc:	bc70      	pop	{r4, r5, r6}
 800f9be:	4770      	bx	lr
 800f9c0:	feff8cff 	.word	0xfeff8cff
 800f9c4:	40010400 	.word	0x40010400
 800f9c8:	40010000 	.word	0x40010000

0800f9cc <TIM_OC3_SetConfig>:
{
 800f9cc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f9ce:	6a03      	ldr	r3, [r0, #32]
 800f9d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9d4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800f9d6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800f9d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800f9da:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800f9dc:	4a12      	ldr	r2, [pc, #72]	; (800fa28 <TIM_OC3_SetConfig+0x5c>)
 800f9de:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800f9e0:	680d      	ldr	r5, [r1, #0]
 800f9e2:	432a      	orrs	r2, r5
  tmpccer &= ~TIM_CCER_CC3P;
 800f9e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8);
 800f9e8:	688d      	ldr	r5, [r1, #8]
 800f9ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800f9ee:	4d0f      	ldr	r5, [pc, #60]	; (800fa2c <TIM_OC3_SetConfig+0x60>)
 800f9f0:	4e0f      	ldr	r6, [pc, #60]	; (800fa30 <TIM_OC3_SetConfig+0x64>)
 800f9f2:	42a8      	cmp	r0, r5
 800f9f4:	bf18      	it	ne
 800f9f6:	42b0      	cmpne	r0, r6
 800f9f8:	d10e      	bne.n	800fa18 <TIM_OC3_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC3NP;
 800f9fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800f9fe:	68cd      	ldr	r5, [r1, #12]
 800fa00:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa08:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800fa0c:	694d      	ldr	r5, [r1, #20]
 800fa0e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800fa12:	698d      	ldr	r5, [r1, #24]
 800fa14:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  TIMx->CR2 = tmpcr2;
 800fa18:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800fa1a:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800fa1c:	684a      	ldr	r2, [r1, #4]
 800fa1e:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800fa20:	6203      	str	r3, [r0, #32]
}
 800fa22:	bc70      	pop	{r4, r5, r6}
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	fffeff8c 	.word	0xfffeff8c
 800fa2c:	40010400 	.word	0x40010400
 800fa30:	40010000 	.word	0x40010000

0800fa34 <TIM_OC4_SetConfig>:
{
 800fa34:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa36:	6a03      	ldr	r3, [r0, #32]
 800fa38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa3c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800fa3e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800fa40:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800fa42:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fa44:	4a0d      	ldr	r2, [pc, #52]	; (800fa7c <TIM_OC4_SetConfig+0x48>)
 800fa46:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8);
 800fa48:	680d      	ldr	r5, [r1, #0]
 800fa4a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
 800fa4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12);
 800fa52:	688d      	ldr	r5, [r1, #8]
 800fa54:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800fa58:	4d09      	ldr	r5, [pc, #36]	; (800fa80 <TIM_OC4_SetConfig+0x4c>)
 800fa5a:	4e0a      	ldr	r6, [pc, #40]	; (800fa84 <TIM_OC4_SetConfig+0x50>)
 800fa5c:	42a8      	cmp	r0, r5
 800fa5e:	bf18      	it	ne
 800fa60:	42b0      	cmpne	r0, r6
 800fa62:	d104      	bne.n	800fa6e <TIM_OC4_SetConfig+0x3a>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa64:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800fa68:	694d      	ldr	r5, [r1, #20]
 800fa6a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CR2 = tmpcr2;
 800fa6e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800fa70:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800fa72:	684a      	ldr	r2, [r1, #4]
 800fa74:	6402      	str	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800fa76:	6203      	str	r3, [r0, #32]
}
 800fa78:	bc70      	pop	{r4, r5, r6}
 800fa7a:	4770      	bx	lr
 800fa7c:	feff8cff 	.word	0xfeff8cff
 800fa80:	40010400 	.word	0x40010400
 800fa84:	40010000 	.word	0x40010000

0800fa88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fa88:	b410      	push	{r4}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 800fa8a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa8c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800fa90:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800fa94:	4319      	orrs	r1, r3
 800fa96:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fa98:	6084      	str	r4, [r0, #8]
} 
 800fa9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800faa0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d07d      	beq.n	800fba4 <HAL_TIM_ConfigClockSource+0x104>
{
 800faa8:	b510      	push	{r4, lr}
 800faaa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800faac:	2301      	movs	r3, #1
 800faae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800fab2:	2302      	movs	r3, #2
 800fab4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800fab8:	6802      	ldr	r2, [r0, #0]
 800faba:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fabc:	4b3a      	ldr	r3, [pc, #232]	; (800fba8 <HAL_TIM_ConfigClockSource+0x108>)
 800fabe:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800fac0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800fac2:	680b      	ldr	r3, [r1, #0]
 800fac4:	2b40      	cmp	r3, #64	; 0x40
 800fac6:	d059      	beq.n	800fb7c <HAL_TIM_ConfigClockSource+0xdc>
 800fac8:	d910      	bls.n	800faec <HAL_TIM_ConfigClockSource+0x4c>
 800faca:	2b70      	cmp	r3, #112	; 0x70
 800facc:	d03e      	beq.n	800fb4c <HAL_TIM_ConfigClockSource+0xac>
 800face:	d81f      	bhi.n	800fb10 <HAL_TIM_ConfigClockSource+0x70>
 800fad0:	2b50      	cmp	r3, #80	; 0x50
 800fad2:	d049      	beq.n	800fb68 <HAL_TIM_ConfigClockSource+0xc8>
 800fad4:	2b60      	cmp	r3, #96	; 0x60
 800fad6:	d132      	bne.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800fad8:	68ca      	ldr	r2, [r1, #12]
 800fada:	6849      	ldr	r1, [r1, #4]
 800fadc:	6820      	ldr	r0, [r4, #0]
 800fade:	f7ff fd37 	bl	800f550 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fae2:	2160      	movs	r1, #96	; 0x60
 800fae4:	6820      	ldr	r0, [r4, #0]
 800fae6:	f7ff fd47 	bl	800f578 <TIM_ITRx_SetConfig>
    break;
 800faea:	e028      	b.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800faec:	2b10      	cmp	r3, #16
 800faee:	d04f      	beq.n	800fb90 <HAL_TIM_ConfigClockSource+0xf0>
 800faf0:	d908      	bls.n	800fb04 <HAL_TIM_ConfigClockSource+0x64>
 800faf2:	2b20      	cmp	r3, #32
 800faf4:	d051      	beq.n	800fb9a <HAL_TIM_ConfigClockSource+0xfa>
 800faf6:	2b30      	cmp	r3, #48	; 0x30
 800faf8:	d121      	bne.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800fafa:	2130      	movs	r1, #48	; 0x30
 800fafc:	6820      	ldr	r0, [r4, #0]
 800fafe:	f7ff fd3b 	bl	800f578 <TIM_ITRx_SetConfig>
    break;
 800fb02:	e01c      	b.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800fb04:	b9db      	cbnz	r3, 800fb3e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800fb06:	2100      	movs	r1, #0
 800fb08:	6820      	ldr	r0, [r4, #0]
 800fb0a:	f7ff fd35 	bl	800f578 <TIM_ITRx_SetConfig>
    break;
 800fb0e:	e016      	b.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800fb10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb14:	d00e      	beq.n	800fb34 <HAL_TIM_ConfigClockSource+0x94>
 800fb16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb1a:	d110      	bne.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ETR_SetConfig(htim->Instance, 
 800fb1c:	68cb      	ldr	r3, [r1, #12]
 800fb1e:	684a      	ldr	r2, [r1, #4]
 800fb20:	6889      	ldr	r1, [r1, #8]
 800fb22:	6820      	ldr	r0, [r4, #0]
 800fb24:	f7ff ffb0 	bl	800fa88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fb28:	6822      	ldr	r2, [r4, #0]
 800fb2a:	6893      	ldr	r3, [r2, #8]
 800fb2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fb30:	6093      	str	r3, [r2, #8]
    break;
 800fb32:	e004      	b.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800fb34:	6822      	ldr	r2, [r4, #0]
 800fb36:	6891      	ldr	r1, [r2, #8]
 800fb38:	4b1c      	ldr	r3, [pc, #112]	; (800fbac <HAL_TIM_ConfigClockSource+0x10c>)
 800fb3a:	400b      	ands	r3, r1
 800fb3c:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800fb3e:	2301      	movs	r3, #1
 800fb40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800fb44:	2000      	movs	r0, #0
 800fb46:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800fb4a:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 800fb4c:	68cb      	ldr	r3, [r1, #12]
 800fb4e:	684a      	ldr	r2, [r1, #4]
 800fb50:	6889      	ldr	r1, [r1, #8]
 800fb52:	6820      	ldr	r0, [r4, #0]
 800fb54:	f7ff ff98 	bl	800fa88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fb58:	6822      	ldr	r2, [r4, #0]
 800fb5a:	6891      	ldr	r1, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fb5c:	4b14      	ldr	r3, [pc, #80]	; (800fbb0 <HAL_TIM_ConfigClockSource+0x110>)
 800fb5e:	400b      	ands	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fb60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800fb64:	6093      	str	r3, [r2, #8]
    break;
 800fb66:	e7ea      	b.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800fb68:	68ca      	ldr	r2, [r1, #12]
 800fb6a:	6849      	ldr	r1, [r1, #4]
 800fb6c:	6820      	ldr	r0, [r4, #0]
 800fb6e:	f7ff fcdc 	bl	800f52a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fb72:	2150      	movs	r1, #80	; 0x50
 800fb74:	6820      	ldr	r0, [r4, #0]
 800fb76:	f7ff fcff 	bl	800f578 <TIM_ITRx_SetConfig>
    break;
 800fb7a:	e7e0      	b.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800fb7c:	68ca      	ldr	r2, [r1, #12]
 800fb7e:	6849      	ldr	r1, [r1, #4]
 800fb80:	6820      	ldr	r0, [r4, #0]
 800fb82:	f7ff fcd2 	bl	800f52a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fb86:	2140      	movs	r1, #64	; 0x40
 800fb88:	6820      	ldr	r0, [r4, #0]
 800fb8a:	f7ff fcf5 	bl	800f578 <TIM_ITRx_SetConfig>
    break;
 800fb8e:	e7d6      	b.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800fb90:	2110      	movs	r1, #16
 800fb92:	6820      	ldr	r0, [r4, #0]
 800fb94:	f7ff fcf0 	bl	800f578 <TIM_ITRx_SetConfig>
    break;
 800fb98:	e7d1      	b.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800fb9a:	2120      	movs	r1, #32
 800fb9c:	6820      	ldr	r0, [r4, #0]
 800fb9e:	f7ff fceb 	bl	800f578 <TIM_ITRx_SetConfig>
    break;
 800fba2:	e7cc      	b.n	800fb3e <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 800fba4:	2002      	movs	r0, #2
 800fba6:	4770      	bx	lr
 800fba8:	fffe0088 	.word	0xfffe0088
 800fbac:	fffefff8 	.word	0xfffefff8
 800fbb0:	fffeff88 	.word	0xfffeff88

0800fbb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fbb4:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fbbc:	6a03      	ldr	r3, [r0, #32]
 800fbbe:	ea23 0304 	bic.w	r3, r3, r4
 800fbc2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800fbc4:	6a03      	ldr	r3, [r0, #32]
 800fbc6:	408a      	lsls	r2, r1
 800fbc8:	4313      	orrs	r3, r2
 800fbca:	6203      	str	r3, [r0, #32]
}
 800fbcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbd0:	4770      	bx	lr
	...

0800fbd4 <HAL_TIM_PWM_Start>:
{
 800fbd4:	b510      	push	{r4, lr}
 800fbd6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fbd8:	2201      	movs	r2, #1
 800fbda:	6800      	ldr	r0, [r0, #0]
 800fbdc:	f7ff ffea 	bl	800fbb4 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800fbe0:	6823      	ldr	r3, [r4, #0]
 800fbe2:	4a08      	ldr	r2, [pc, #32]	; (800fc04 <HAL_TIM_PWM_Start+0x30>)
 800fbe4:	4908      	ldr	r1, [pc, #32]	; (800fc08 <HAL_TIM_PWM_Start+0x34>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	bf18      	it	ne
 800fbea:	428b      	cmpne	r3, r1
 800fbec:	d103      	bne.n	800fbf6 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 800fbee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fbf4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800fbf6:	6822      	ldr	r2, [r4, #0]
 800fbf8:	6813      	ldr	r3, [r2, #0]
 800fbfa:	f043 0301 	orr.w	r3, r3, #1
 800fbfe:	6013      	str	r3, [r2, #0]
} 
 800fc00:	2000      	movs	r0, #0
 800fc02:	bd10      	pop	{r4, pc}
 800fc04:	40010400 	.word	0x40010400
 800fc08:	40010000 	.word	0x40010000

0800fc0c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800fc0c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 800fc0e:	2304      	movs	r3, #4
 800fc10:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 800fc14:	6a03      	ldr	r3, [r0, #32]
 800fc16:	ea23 0304 	bic.w	r3, r3, r4
 800fc1a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 800fc1c:	6a03      	ldr	r3, [r0, #32]
 800fc1e:	408a      	lsls	r2, r1
 800fc20:	4313      	orrs	r3, r2
 800fc22:	6203      	str	r3, [r0, #32]
}
 800fc24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc28:	4770      	bx	lr
	...

0800fc2c <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc2c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fc2e:	6a03      	ldr	r3, [r0, #32]
 800fc30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fc34:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800fc38:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc3a:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc3c:	4a0d      	ldr	r2, [pc, #52]	; (800fc74 <TIM_OC5_SetConfig+0x48>)
 800fc3e:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc40:	680d      	ldr	r5, [r1, #0]
 800fc42:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800fc48:	688d      	ldr	r5, [r1, #8]
 800fc4a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800fc4e:	4d0a      	ldr	r5, [pc, #40]	; (800fc78 <TIM_OC5_SetConfig+0x4c>)
 800fc50:	4e0a      	ldr	r6, [pc, #40]	; (800fc7c <TIM_OC5_SetConfig+0x50>)
 800fc52:	42a8      	cmp	r0, r5
 800fc54:	bf18      	it	ne
 800fc56:	42b0      	cmpne	r0, r6
 800fc58:	d104      	bne.n	800fc64 <TIM_OC5_SetConfig+0x38>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fc5a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800fc5e:	694d      	ldr	r5, [r1, #20]
 800fc60:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc64:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc66:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fc68:	684a      	ldr	r2, [r1, #4]
 800fc6a:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800fc6c:	6203      	str	r3, [r0, #32]
}
 800fc6e:	bc70      	pop	{r4, r5, r6}
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	fffeff8f 	.word	0xfffeff8f
 800fc78:	40010400 	.word	0x40010400
 800fc7c:	40010000 	.word	0x40010000

0800fc80 <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc80:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fc82:	6a03      	ldr	r3, [r0, #32]
 800fc84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fc88:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc8a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800fc8c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc8e:	6d45      	ldr	r5, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fc90:	4a0d      	ldr	r2, [pc, #52]	; (800fcc8 <TIM_OC6_SetConfig+0x48>)
 800fc92:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800fc94:	680d      	ldr	r5, [r1, #0]
 800fc96:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fc9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800fc9e:	688d      	ldr	r5, [r1, #8]
 800fca0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800fca4:	4d09      	ldr	r5, [pc, #36]	; (800fccc <TIM_OC6_SetConfig+0x4c>)
 800fca6:	4e0a      	ldr	r6, [pc, #40]	; (800fcd0 <TIM_OC6_SetConfig+0x50>)
 800fca8:	42a8      	cmp	r0, r5
 800fcaa:	bf18      	it	ne
 800fcac:	42b0      	cmpne	r0, r6
 800fcae:	d104      	bne.n	800fcba <TIM_OC6_SetConfig+0x3a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fcb0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800fcb4:	694d      	ldr	r5, [r1, #20]
 800fcb6:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcba:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fcbc:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fcbe:	684a      	ldr	r2, [r1, #4]
 800fcc0:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800fcc2:	6203      	str	r3, [r0, #32]
}
 800fcc4:	bc70      	pop	{r4, r5, r6}
 800fcc6:	4770      	bx	lr
 800fcc8:	feff8fff 	.word	0xfeff8fff
 800fccc:	40010400 	.word	0x40010400
 800fcd0:	40010000 	.word	0x40010000

0800fcd4 <HAL_TIMEx_PWMN_Start>:
{
 800fcd4:	b510      	push	{r4, lr}
 800fcd6:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800fcd8:	2204      	movs	r2, #4
 800fcda:	6800      	ldr	r0, [r0, #0]
 800fcdc:	f7ff ff96 	bl	800fc0c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800fce0:	6822      	ldr	r2, [r4, #0]
 800fce2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800fce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fce8:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800fcea:	6822      	ldr	r2, [r4, #0]
 800fcec:	6813      	ldr	r3, [r2, #0]
 800fcee:	f043 0301 	orr.w	r3, r3, #1
 800fcf2:	6013      	str	r3, [r2, #0]
} 
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	bd10      	pop	{r4, pc}

0800fcf8 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800fcf8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d021      	beq.n	800fd44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
{
 800fd00:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800fd02:	2301      	movs	r3, #1
 800fd04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 800fd08:	6804      	ldr	r4, [r0, #0]
 800fd0a:	6863      	ldr	r3, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 800fd0c:	68a2      	ldr	r2, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd0e:	4d0e      	ldr	r5, [pc, #56]	; (800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800fd10:	4e0e      	ldr	r6, [pc, #56]	; (800fd4c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800fd12:	42ac      	cmp	r4, r5
 800fd14:	bf18      	it	ne
 800fd16:	42b4      	cmpne	r4, r6
 800fd18:	d103      	bne.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd1e:	684d      	ldr	r5, [r1, #4]
 800fd20:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd26:	680d      	ldr	r5, [r1, #0]
 800fd28:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800fd2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd2e:	6889      	ldr	r1, [r1, #8]
 800fd30:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 800fd32:	6063      	str	r3, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800fd34:	6803      	ldr	r3, [r0, #0]
 800fd36:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800fd38:	2300      	movs	r3, #0
 800fd3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800fd3e:	4618      	mov	r0, r3
} 
 800fd40:	bc70      	pop	{r4, r5, r6}
 800fd42:	4770      	bx	lr
  __HAL_LOCK(htim);
 800fd44:	2002      	movs	r0, #2
 800fd46:	4770      	bx	lr
 800fd48:	40010400 	.word	0x40010400
 800fd4c:	40010000 	.word	0x40010000

0800fd50 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800fd50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d03f      	beq.n	800fdd8 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 800fd58:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fd60:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fd62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd66:	688a      	ldr	r2, [r1, #8]
 800fd68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fd6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd6e:	684a      	ldr	r2, [r1, #4]
 800fd70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fd72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd76:	680a      	ldr	r2, [r1, #0]
 800fd78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fd7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd7e:	690a      	ldr	r2, [r1, #16]
 800fd80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fd82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd86:	694a      	ldr	r2, [r1, #20]
 800fd88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fd8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd8e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800fd90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fd92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fd96:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800fd98:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800fd9c:	698a      	ldr	r2, [r1, #24]
 800fd9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fda2:	6802      	ldr	r2, [r0, #0]
 800fda4:	4c0d      	ldr	r4, [pc, #52]	; (800fddc <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800fda6:	4d0e      	ldr	r5, [pc, #56]	; (800fde0 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 800fda8:	42a2      	cmp	r2, r4
 800fdaa:	bf18      	it	ne
 800fdac:	42aa      	cmpne	r2, r5
 800fdae:	d10c      	bne.n	800fdca <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800fdb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fdb4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800fdb6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fdba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fdbe:	69cc      	ldr	r4, [r1, #28]
 800fdc0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fdc2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fdc6:	6a09      	ldr	r1, [r1, #32]
 800fdc8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800fdca:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800fdcc:	2300      	movs	r3, #0
 800fdce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800fdd2:	4618      	mov	r0, r3
}
 800fdd4:	bc30      	pop	{r4, r5}
 800fdd6:	4770      	bx	lr
  __HAL_LOCK(htim);
 800fdd8:	2002      	movs	r0, #2
 800fdda:	4770      	bx	lr
 800fddc:	40010400 	.word	0x40010400
 800fde0:	40010000 	.word	0x40010000

0800fde4 <HAL_TIMEx_CommutationCallback>:
{
 800fde4:	4770      	bx	lr

0800fde6 <HAL_TIMEx_BreakCallback>:
{
 800fde6:	4770      	bx	lr

0800fde8 <HAL_TIM_PWM_ConfigChannel>:
{
 800fde8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800fdea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	f000 8092 	beq.w	800ff18 <HAL_TIM_PWM_ConfigChannel+0x130>
 800fdf4:	460d      	mov	r5, r1
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800fdfe:	2302      	movs	r3, #2
 800fe00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800fe04:	2a14      	cmp	r2, #20
 800fe06:	d81e      	bhi.n	800fe46 <HAL_TIM_PWM_ConfigChannel+0x5e>
 800fe08:	e8df f002 	tbb	[pc, r2]
 800fe0c:	1d1d1d0b 	.word	0x1d1d1d0b
 800fe10:	1d1d1d24 	.word	0x1d1d1d24
 800fe14:	1d1d1d38 	.word	0x1d1d1d38
 800fe18:	1d1d1d4b 	.word	0x1d1d1d4b
 800fe1c:	1d1d1d5f 	.word	0x1d1d1d5f
 800fe20:	72          	.byte	0x72
 800fe21:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fe22:	6800      	ldr	r0, [r0, #0]
 800fe24:	f7ff fd6e 	bl	800f904 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fe28:	6822      	ldr	r2, [r4, #0]
 800fe2a:	6993      	ldr	r3, [r2, #24]
 800fe2c:	f043 0308 	orr.w	r3, r3, #8
 800fe30:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fe32:	6822      	ldr	r2, [r4, #0]
 800fe34:	6993      	ldr	r3, [r2, #24]
 800fe36:	f023 0304 	bic.w	r3, r3, #4
 800fe3a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fe3c:	6822      	ldr	r2, [r4, #0]
 800fe3e:	6993      	ldr	r3, [r2, #24]
 800fe40:	6929      	ldr	r1, [r5, #16]
 800fe42:	430b      	orrs	r3, r1
 800fe44:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800fe46:	2301      	movs	r3, #1
 800fe48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800fe52:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fe54:	6800      	ldr	r0, [r0, #0]
 800fe56:	f7ff fd85 	bl	800f964 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fe5a:	6822      	ldr	r2, [r4, #0]
 800fe5c:	6993      	ldr	r3, [r2, #24]
 800fe5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fe62:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fe64:	6822      	ldr	r2, [r4, #0]
 800fe66:	6993      	ldr	r3, [r2, #24]
 800fe68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fe6c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800fe6e:	6822      	ldr	r2, [r4, #0]
 800fe70:	6993      	ldr	r3, [r2, #24]
 800fe72:	6929      	ldr	r1, [r5, #16]
 800fe74:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800fe78:	6193      	str	r3, [r2, #24]
    break;
 800fe7a:	e7e4      	b.n	800fe46 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fe7c:	6800      	ldr	r0, [r0, #0]
 800fe7e:	f7ff fda5 	bl	800f9cc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fe82:	6822      	ldr	r2, [r4, #0]
 800fe84:	69d3      	ldr	r3, [r2, #28]
 800fe86:	f043 0308 	orr.w	r3, r3, #8
 800fe8a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fe8c:	6822      	ldr	r2, [r4, #0]
 800fe8e:	69d3      	ldr	r3, [r2, #28]
 800fe90:	f023 0304 	bic.w	r3, r3, #4
 800fe94:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800fe96:	6822      	ldr	r2, [r4, #0]
 800fe98:	69d3      	ldr	r3, [r2, #28]
 800fe9a:	6929      	ldr	r1, [r5, #16]
 800fe9c:	430b      	orrs	r3, r1
 800fe9e:	61d3      	str	r3, [r2, #28]
    break;
 800fea0:	e7d1      	b.n	800fe46 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fea2:	6800      	ldr	r0, [r0, #0]
 800fea4:	f7ff fdc6 	bl	800fa34 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fea8:	6822      	ldr	r2, [r4, #0]
 800feaa:	69d3      	ldr	r3, [r2, #28]
 800feac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800feb0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800feb2:	6822      	ldr	r2, [r4, #0]
 800feb4:	69d3      	ldr	r3, [r2, #28]
 800feb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800feba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800febc:	6822      	ldr	r2, [r4, #0]
 800febe:	69d3      	ldr	r3, [r2, #28]
 800fec0:	6929      	ldr	r1, [r5, #16]
 800fec2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800fec6:	61d3      	str	r3, [r2, #28]
    break;
 800fec8:	e7bd      	b.n	800fe46 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800feca:	6800      	ldr	r0, [r0, #0]
 800fecc:	f7ff feae 	bl	800fc2c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fed0:	6822      	ldr	r2, [r4, #0]
 800fed2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fed4:	f043 0308 	orr.w	r3, r3, #8
 800fed8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800feda:	6822      	ldr	r2, [r4, #0]
 800fedc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fede:	f023 0304 	bic.w	r3, r3, #4
 800fee2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800fee4:	6822      	ldr	r2, [r4, #0]
 800fee6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fee8:	6929      	ldr	r1, [r5, #16]
 800feea:	430b      	orrs	r3, r1
 800feec:	6553      	str	r3, [r2, #84]	; 0x54
    break;
 800feee:	e7aa      	b.n	800fe46 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fef0:	6800      	ldr	r0, [r0, #0]
 800fef2:	f7ff fec5 	bl	800fc80 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fef6:	6822      	ldr	r2, [r4, #0]
 800fef8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fefa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fefe:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ff00:	6822      	ldr	r2, [r4, #0]
 800ff02:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ff04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ff08:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800ff0a:	6822      	ldr	r2, [r4, #0]
 800ff0c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ff0e:	6929      	ldr	r1, [r5, #16]
 800ff10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ff14:	6553      	str	r3, [r2, #84]	; 0x54
    break;
 800ff16:	e796      	b.n	800fe46 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 800ff18:	2002      	movs	r0, #2
}
 800ff1a:	bd38      	pop	{r3, r4, r5, pc}

0800ff1c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ff1c:	6802      	ldr	r2, [r0, #0]
 800ff1e:	6813      	ldr	r3, [r2, #0]
 800ff20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ff24:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff26:	2320      	movs	r3, #32
 800ff28:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800ff2c:	4770      	bx	lr

0800ff2e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ff2e:	6802      	ldr	r2, [r0, #0]
 800ff30:	6813      	ldr	r3, [r2, #0]
 800ff32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff36:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff38:	6802      	ldr	r2, [r0, #0]
 800ff3a:	6893      	ldr	r3, [r2, #8]
 800ff3c:	f023 0301 	bic.w	r3, r3, #1
 800ff40:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff42:	2320      	movs	r3, #32
 800ff44:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800ff48:	4770      	bx	lr
	...

0800ff4c <HAL_UART_Transmit_DMA>:
{
 800ff4c:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800ff4e:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
 800ff52:	b2e4      	uxtb	r4, r4
 800ff54:	2c20      	cmp	r4, #32
 800ff56:	d001      	beq.n	800ff5c <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 800ff58:	2002      	movs	r0, #2
 800ff5a:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL ) || (Size == 0U))
 800ff5c:	2a00      	cmp	r2, #0
 800ff5e:	bf18      	it	ne
 800ff60:	2900      	cmpne	r1, #0
 800ff62:	d030      	beq.n	800ffc6 <HAL_UART_Transmit_DMA+0x7a>
    __HAL_LOCK(huart);
 800ff64:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d101      	bne.n	800ff70 <HAL_UART_Transmit_DMA+0x24>
 800ff6c:	2002      	movs	r0, #2
}
 800ff6e:	bd38      	pop	{r3, r4, r5, pc}
 800ff70:	4613      	mov	r3, r2
 800ff72:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 800ff74:	2201      	movs	r2, #1
 800ff76:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    huart->pTxBuffPtr = pData;
 800ff7a:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 800ff7c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800ff80:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff84:	2500      	movs	r5, #0
 800ff86:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff88:	2221      	movs	r2, #33	; 0x21
 800ff8a:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ff8e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800ff90:	480e      	ldr	r0, [pc, #56]	; (800ffcc <HAL_UART_Transmit_DMA+0x80>)
 800ff92:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ff94:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ff96:	480e      	ldr	r0, [pc, #56]	; (800ffd0 <HAL_UART_Transmit_DMA+0x84>)
 800ff98:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ff9a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ff9c:	480d      	ldr	r0, [pc, #52]	; (800ffd4 <HAL_UART_Transmit_DMA+0x88>)
 800ff9e:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 800ffa0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ffa2:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 800ffa4:	6822      	ldr	r2, [r4, #0]
 800ffa6:	3228      	adds	r2, #40	; 0x28
 800ffa8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ffaa:	f7fd fb39 	bl	800d620 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	2240      	movs	r2, #64	; 0x40
 800ffb2:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800ffb4:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ffb8:	6822      	ldr	r2, [r4, #0]
 800ffba:	6893      	ldr	r3, [r2, #8]
 800ffbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffc0:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800ffc6:	2001      	movs	r0, #1
 800ffc8:	bd38      	pop	{r3, r4, r5, pc}
 800ffca:	bf00      	nop
 800ffcc:	08010149 	.word	0x08010149
 800ffd0:	0801017d 	.word	0x0801017d
 800ffd4:	080101d3 	.word	0x080101d3

0800ffd8 <HAL_UART_Receive_DMA>:
{
 800ffd8:	b538      	push	{r3, r4, r5, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 800ffda:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 800ffde:	b2e4      	uxtb	r4, r4
 800ffe0:	2c20      	cmp	r4, #32
 800ffe2:	d001      	beq.n	800ffe8 <HAL_UART_Receive_DMA+0x10>
    return HAL_BUSY;
 800ffe4:	2002      	movs	r0, #2
 800ffe6:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL ) || (Size == 0U))
 800ffe8:	2a00      	cmp	r2, #0
 800ffea:	bf18      	it	ne
 800ffec:	2900      	cmpne	r1, #0
 800ffee:	d036      	beq.n	801005e <HAL_UART_Receive_DMA+0x86>
    __HAL_LOCK(huart);
 800fff0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d101      	bne.n	800fffc <HAL_UART_Receive_DMA+0x24>
 800fff8:	2002      	movs	r0, #2
}
 800fffa:	bd38      	pop	{r3, r4, r5, pc}
 800fffc:	4613      	mov	r3, r2
 800fffe:	460a      	mov	r2, r1
 8010000:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8010002:	2101      	movs	r1, #1
 8010004:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8010008:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 801000a:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801000e:	2500      	movs	r5, #0
 8010010:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010012:	2122      	movs	r1, #34	; 0x22
 8010014:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010018:	6e41      	ldr	r1, [r0, #100]	; 0x64
 801001a:	4812      	ldr	r0, [pc, #72]	; (8010064 <HAL_UART_Receive_DMA+0x8c>)
 801001c:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801001e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8010020:	4811      	ldr	r0, [pc, #68]	; (8010068 <HAL_UART_Receive_DMA+0x90>)
 8010022:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010024:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8010026:	4811      	ldr	r0, [pc, #68]	; (801006c <HAL_UART_Receive_DMA+0x94>)
 8010028:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 801002a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801002c:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801002e:	6821      	ldr	r1, [r4, #0]
 8010030:	3124      	adds	r1, #36	; 0x24
 8010032:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8010034:	f7fd faf4 	bl	800d620 <HAL_DMA_Start_IT>
    __HAL_UNLOCK(huart);
 8010038:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801003c:	6822      	ldr	r2, [r4, #0]
 801003e:	6813      	ldr	r3, [r2, #0]
 8010040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010044:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010046:	6822      	ldr	r2, [r4, #0]
 8010048:	6893      	ldr	r3, [r2, #8]
 801004a:	f043 0301 	orr.w	r3, r3, #1
 801004e:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010050:	6822      	ldr	r2, [r4, #0]
 8010052:	6893      	ldr	r3, [r2, #8]
 8010054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010058:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 801005a:	4628      	mov	r0, r5
 801005c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 801005e:	2001      	movs	r0, #1
 8010060:	bd38      	pop	{r3, r4, r5, pc}
 8010062:	bf00      	nop
 8010064:	08010187 	.word	0x08010187
 8010068:	080101c9 	.word	0x080101c9
 801006c:	080101d3 	.word	0x080101d3

08010070 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8010070:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8010074:	2b01      	cmp	r3, #1
 8010076:	d030      	beq.n	80100da <HAL_UART_DMAResume+0x6a>
 8010078:	2301      	movs	r3, #1
 801007a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 801007e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8010082:	b2db      	uxtb	r3, r3
 8010084:	2b21      	cmp	r3, #33	; 0x21
 8010086:	d00f      	beq.n	80100a8 <HAL_UART_DMAResume+0x38>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010088:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801008c:	b2db      	uxtb	r3, r3
 801008e:	2b22      	cmp	r3, #34	; 0x22
 8010090:	d010      	beq.n	80100b4 <HAL_UART_DMAResume+0x44>
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8010092:	6803      	ldr	r3, [r0, #0]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	f012 0f01 	tst.w	r2, #1
 801009a:	d120      	bne.n	80100de <HAL_UART_DMAResume+0x6e>
    __HAL_UART_ENABLE(huart);
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	f042 0201 	orr.w	r2, r2, #1
 80100a2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80100a4:	2000      	movs	r0, #0
 80100a6:	4770      	bx	lr
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80100a8:	6802      	ldr	r2, [r0, #0]
 80100aa:	6893      	ldr	r3, [r2, #8]
 80100ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100b0:	6093      	str	r3, [r2, #8]
 80100b2:	e7e9      	b.n	8010088 <HAL_UART_DMAResume+0x18>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80100b4:	6803      	ldr	r3, [r0, #0]
 80100b6:	2208      	movs	r2, #8
 80100b8:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80100ba:	6802      	ldr	r2, [r0, #0]
 80100bc:	6813      	ldr	r3, [r2, #0]
 80100be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100c2:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100c4:	6802      	ldr	r2, [r0, #0]
 80100c6:	6893      	ldr	r3, [r2, #8]
 80100c8:	f043 0301 	orr.w	r3, r3, #1
 80100cc:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80100ce:	6802      	ldr	r2, [r0, #0]
 80100d0:	6893      	ldr	r3, [r2, #8]
 80100d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100d6:	6093      	str	r3, [r2, #8]
 80100d8:	e7db      	b.n	8010092 <HAL_UART_DMAResume+0x22>
  __HAL_LOCK(huart);
 80100da:	2002      	movs	r0, #2
 80100dc:	4770      	bx	lr
  return HAL_OK;
 80100de:	2000      	movs	r0, #0
}
 80100e0:	4770      	bx	lr

080100e2 <UART_WaitOnFlagUntilTimeout>:
{
 80100e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e6:	4605      	mov	r5, r0
 80100e8:	460f      	mov	r7, r1
 80100ea:	4616      	mov	r6, r2
 80100ec:	4698      	mov	r8, r3
 80100ee:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100f0:	682b      	ldr	r3, [r5, #0]
 80100f2:	69db      	ldr	r3, [r3, #28]
 80100f4:	ea37 0303 	bics.w	r3, r7, r3
 80100f8:	bf0c      	ite	eq
 80100fa:	2301      	moveq	r3, #1
 80100fc:	2300      	movne	r3, #0
 80100fe:	42b3      	cmp	r3, r6
 8010100:	d11e      	bne.n	8010140 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8010102:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8010106:	d0f3      	beq.n	80100f0 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8010108:	b12c      	cbz	r4, 8010116 <UART_WaitOnFlagUntilTimeout+0x34>
 801010a:	f7fc ff49 	bl	800cfa0 <HAL_GetTick>
 801010e:	eba0 0008 	sub.w	r0, r0, r8
 8010112:	4284      	cmp	r4, r0
 8010114:	d8ec      	bhi.n	80100f0 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010116:	682a      	ldr	r2, [r5, #0]
 8010118:	6813      	ldr	r3, [r2, #0]
 801011a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801011e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010120:	682a      	ldr	r2, [r5, #0]
 8010122:	6893      	ldr	r3, [r2, #8]
 8010124:	f023 0301 	bic.w	r3, r3, #1
 8010128:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 801012a:	2320      	movs	r3, #32
 801012c:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8010130:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8010134:	2300      	movs	r3, #0
 8010136:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 801013a:	2003      	movs	r0, #3
 801013c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8010140:	2000      	movs	r0, #0
}
 8010142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010146 <HAL_UART_TxCpltCallback>:
{
 8010146:	4770      	bx	lr

08010148 <UART_DMATransmitCplt>:
{
 8010148:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801014a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801014c:	6802      	ldr	r2, [r0, #0]
 801014e:	6812      	ldr	r2, [r2, #0]
 8010150:	f412 7f80 	tst.w	r2, #256	; 0x100
 8010154:	d10d      	bne.n	8010172 <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0U;
 8010156:	2200      	movs	r2, #0
 8010158:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801015c:	6819      	ldr	r1, [r3, #0]
 801015e:	688a      	ldr	r2, [r1, #8]
 8010160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010164:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010166:	681a      	ldr	r2, [r3, #0]
 8010168:	6813      	ldr	r3, [r2, #0]
 801016a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801016e:	6013      	str	r3, [r2, #0]
 8010170:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8010172:	4618      	mov	r0, r3
 8010174:	f7ff ffe7 	bl	8010146 <HAL_UART_TxCpltCallback>
 8010178:	bd08      	pop	{r3, pc}

0801017a <HAL_UART_TxHalfCpltCallback>:
{
 801017a:	4770      	bx	lr

0801017c <UART_DMATxHalfCplt>:
{
 801017c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 801017e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8010180:	f7ff fffb 	bl	801017a <HAL_UART_TxHalfCpltCallback>
 8010184:	bd08      	pop	{r3, pc}

08010186 <UART_DMAReceiveCplt>:
{
 8010186:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010188:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801018a:	6802      	ldr	r2, [r0, #0]
 801018c:	6812      	ldr	r2, [r2, #0]
 801018e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8010192:	d114      	bne.n	80101be <UART_DMAReceiveCplt+0x38>
    huart->RxXferCount = 0U;
 8010194:	2200      	movs	r2, #0
 8010196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801019a:	6819      	ldr	r1, [r3, #0]
 801019c:	680a      	ldr	r2, [r1, #0]
 801019e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80101a2:	600a      	str	r2, [r1, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101a4:	6819      	ldr	r1, [r3, #0]
 80101a6:	688a      	ldr	r2, [r1, #8]
 80101a8:	f022 0201 	bic.w	r2, r2, #1
 80101ac:	608a      	str	r2, [r1, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101ae:	6819      	ldr	r1, [r3, #0]
 80101b0:	688a      	ldr	r2, [r1, #8]
 80101b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80101b6:	608a      	str	r2, [r1, #8]
    huart->RxState = HAL_UART_STATE_READY;
 80101b8:	2220      	movs	r2, #32
 80101ba:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  HAL_UART_RxCpltCallback(huart);
 80101be:	4618      	mov	r0, r3
 80101c0:	f7fa fb4e 	bl	800a860 <HAL_UART_RxCpltCallback>
 80101c4:	bd08      	pop	{r3, pc}

080101c6 <HAL_UART_RxHalfCpltCallback>:
{
 80101c6:	4770      	bx	lr

080101c8 <UART_DMARxHalfCplt>:
{
 80101c8:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80101ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80101cc:	f7ff fffb 	bl	80101c6 <HAL_UART_RxHalfCpltCallback>
 80101d0:	bd08      	pop	{r3, pc}

080101d2 <UART_DMAError>:
{
 80101d2:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80101d4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80101d6:	2300      	movs	r3, #0
 80101d8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80101dc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80101e0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	2b21      	cmp	r3, #33	; 0x21
 80101e8:	d00c      	beq.n	8010204 <UART_DMAError+0x32>
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80101ea:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	2b22      	cmp	r3, #34	; 0x22
 80101f2:	d010      	beq.n	8010216 <UART_DMAError+0x44>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 80101f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80101f6:	f043 0310 	orr.w	r3, r3, #16
 80101fa:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80101fc:	4620      	mov	r0, r4
 80101fe:	f7fa fb2b 	bl	800a858 <HAL_UART_ErrorCallback>
 8010202:	bd10      	pop	{r4, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8010204:	6823      	ldr	r3, [r4, #0]
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	f013 0f80 	tst.w	r3, #128	; 0x80
 801020c:	d0ed      	beq.n	80101ea <UART_DMAError+0x18>
    UART_EndTxTransfer(huart);
 801020e:	4620      	mov	r0, r4
 8010210:	f7ff fe84 	bl	800ff1c <UART_EndTxTransfer>
 8010214:	e7e9      	b.n	80101ea <UART_DMAError+0x18>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8010216:	6823      	ldr	r3, [r4, #0]
 8010218:	689b      	ldr	r3, [r3, #8]
 801021a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801021e:	d0e9      	beq.n	80101f4 <UART_DMAError+0x22>
    UART_EndRxTransfer(huart);
 8010220:	4620      	mov	r0, r4
 8010222:	f7ff fe84 	bl	800ff2e <UART_EndRxTransfer>
 8010226:	e7e5      	b.n	80101f4 <UART_DMAError+0x22>

08010228 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010228:	b538      	push	{r3, r4, r5, lr}
 801022a:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801022c:	6883      	ldr	r3, [r0, #8]
 801022e:	6902      	ldr	r2, [r0, #16]
 8010230:	4313      	orrs	r3, r2
 8010232:	6942      	ldr	r2, [r0, #20]
 8010234:	4313      	orrs	r3, r2
 8010236:	69c2      	ldr	r2, [r0, #28]
 8010238:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801023a:	6801      	ldr	r1, [r0, #0]
 801023c:	6808      	ldr	r0, [r1, #0]
 801023e:	4aa0      	ldr	r2, [pc, #640]	; (80104c0 <UART_SetConfig+0x298>)
 8010240:	4002      	ands	r2, r0
 8010242:	4313      	orrs	r3, r2
 8010244:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010246:	6822      	ldr	r2, [r4, #0]
 8010248:	6853      	ldr	r3, [r2, #4]
 801024a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801024e:	68e1      	ldr	r1, [r4, #12]
 8010250:	430b      	orrs	r3, r1
 8010252:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8010254:	69a3      	ldr	r3, [r4, #24]
 8010256:	6a22      	ldr	r2, [r4, #32]
 8010258:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801025a:	6821      	ldr	r1, [r4, #0]
 801025c:	688a      	ldr	r2, [r1, #8]
 801025e:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8010262:	4313      	orrs	r3, r2
 8010264:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010266:	6825      	ldr	r5, [r4, #0]
 8010268:	4b96      	ldr	r3, [pc, #600]	; (80104c4 <UART_SetConfig+0x29c>)
 801026a:	429d      	cmp	r5, r3
 801026c:	d02b      	beq.n	80102c6 <UART_SetConfig+0x9e>
 801026e:	4b96      	ldr	r3, [pc, #600]	; (80104c8 <UART_SetConfig+0x2a0>)
 8010270:	429d      	cmp	r5, r3
 8010272:	d03c      	beq.n	80102ee <UART_SetConfig+0xc6>
 8010274:	4b95      	ldr	r3, [pc, #596]	; (80104cc <UART_SetConfig+0x2a4>)
 8010276:	429d      	cmp	r5, r3
 8010278:	d052      	beq.n	8010320 <UART_SetConfig+0xf8>
 801027a:	4b95      	ldr	r3, [pc, #596]	; (80104d0 <UART_SetConfig+0x2a8>)
 801027c:	429d      	cmp	r5, r3
 801027e:	d067      	beq.n	8010350 <UART_SetConfig+0x128>
 8010280:	4b94      	ldr	r3, [pc, #592]	; (80104d4 <UART_SetConfig+0x2ac>)
 8010282:	429d      	cmp	r5, r3
 8010284:	d07c      	beq.n	8010380 <UART_SetConfig+0x158>
 8010286:	4b94      	ldr	r3, [pc, #592]	; (80104d8 <UART_SetConfig+0x2b0>)
 8010288:	429d      	cmp	r5, r3
 801028a:	f000 8094 	beq.w	80103b6 <UART_SetConfig+0x18e>
 801028e:	4b93      	ldr	r3, [pc, #588]	; (80104dc <UART_SetConfig+0x2b4>)
 8010290:	429d      	cmp	r5, r3
 8010292:	f000 80ab 	beq.w	80103ec <UART_SetConfig+0x1c4>
 8010296:	4b92      	ldr	r3, [pc, #584]	; (80104e0 <UART_SetConfig+0x2b8>)
 8010298:	429d      	cmp	r5, r3
 801029a:	f000 80c2 	beq.w	8010422 <UART_SetConfig+0x1fa>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 801029e:	2310      	movs	r3, #16

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80102a0:	69e2      	ldr	r2, [r4, #28]
 80102a2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80102a6:	f000 80db 	beq.w	8010460 <UART_SetConfig+0x238>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80102aa:	2b08      	cmp	r3, #8
 80102ac:	f200 8168 	bhi.w	8010580 <UART_SetConfig+0x358>
 80102b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80102b4:	013c0131 	.word	0x013c0131
 80102b8:	01660147 	.word	0x01660147
 80102bc:	01660151 	.word	0x01660151
 80102c0:	01660166 	.word	0x01660166
 80102c4:	015c      	.short	0x015c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102c6:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80102ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102ce:	f003 0303 	and.w	r3, r3, #3
 80102d2:	2b03      	cmp	r3, #3
 80102d4:	d803      	bhi.n	80102de <UART_SetConfig+0xb6>
 80102d6:	e8df f003 	tbb	[pc, r3]
 80102da:	06bf      	.short	0x06bf
 80102dc:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80102de:	2310      	movs	r3, #16
 80102e0:	e7de      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102e2:	2302      	movs	r3, #2
 80102e4:	e7dc      	b.n	80102a0 <UART_SetConfig+0x78>
 80102e6:	2304      	movs	r3, #4
 80102e8:	e7da      	b.n	80102a0 <UART_SetConfig+0x78>
 80102ea:	2308      	movs	r3, #8
 80102ec:	e7d8      	b.n	80102a0 <UART_SetConfig+0x78>
 80102ee:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80102f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102f6:	f003 030c 	and.w	r3, r3, #12
 80102fa:	2b0c      	cmp	r3, #12
 80102fc:	d808      	bhi.n	8010310 <UART_SetConfig+0xe8>
 80102fe:	e8df f003 	tbb	[pc, r3]
 8010302:	07ad      	.short	0x07ad
 8010304:	070b0707 	.word	0x070b0707
 8010308:	07090707 	.word	0x07090707
 801030c:	0707      	.short	0x0707
 801030e:	0d          	.byte	0x0d
 801030f:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8010310:	2310      	movs	r3, #16
 8010312:	e7c5      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010314:	2302      	movs	r3, #2
 8010316:	e7c3      	b.n	80102a0 <UART_SetConfig+0x78>
 8010318:	2304      	movs	r3, #4
 801031a:	e7c1      	b.n	80102a0 <UART_SetConfig+0x78>
 801031c:	2308      	movs	r3, #8
 801031e:	e7bf      	b.n	80102a0 <UART_SetConfig+0x78>
 8010320:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8010324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010328:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801032c:	2b10      	cmp	r3, #16
 801032e:	d00d      	beq.n	801034c <UART_SetConfig+0x124>
 8010330:	d905      	bls.n	801033e <UART_SetConfig+0x116>
 8010332:	2b20      	cmp	r3, #32
 8010334:	d008      	beq.n	8010348 <UART_SetConfig+0x120>
 8010336:	2b30      	cmp	r3, #48	; 0x30
 8010338:	d104      	bne.n	8010344 <UART_SetConfig+0x11c>
 801033a:	2308      	movs	r3, #8
 801033c:	e7b0      	b.n	80102a0 <UART_SetConfig+0x78>
 801033e:	b90b      	cbnz	r3, 8010344 <UART_SetConfig+0x11c>
 8010340:	2300      	movs	r3, #0
 8010342:	e7ad      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8010344:	2310      	movs	r3, #16
 8010346:	e7ab      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010348:	2302      	movs	r3, #2
 801034a:	e7a9      	b.n	80102a0 <UART_SetConfig+0x78>
 801034c:	2304      	movs	r3, #4
 801034e:	e7a7      	b.n	80102a0 <UART_SetConfig+0x78>
 8010350:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8010354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010358:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801035c:	2b40      	cmp	r3, #64	; 0x40
 801035e:	d00d      	beq.n	801037c <UART_SetConfig+0x154>
 8010360:	d905      	bls.n	801036e <UART_SetConfig+0x146>
 8010362:	2b80      	cmp	r3, #128	; 0x80
 8010364:	d008      	beq.n	8010378 <UART_SetConfig+0x150>
 8010366:	2bc0      	cmp	r3, #192	; 0xc0
 8010368:	d104      	bne.n	8010374 <UART_SetConfig+0x14c>
 801036a:	2308      	movs	r3, #8
 801036c:	e798      	b.n	80102a0 <UART_SetConfig+0x78>
 801036e:	b90b      	cbnz	r3, 8010374 <UART_SetConfig+0x14c>
 8010370:	2300      	movs	r3, #0
 8010372:	e795      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8010374:	2310      	movs	r3, #16
 8010376:	e793      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010378:	2302      	movs	r3, #2
 801037a:	e791      	b.n	80102a0 <UART_SetConfig+0x78>
 801037c:	2304      	movs	r3, #4
 801037e:	e78f      	b.n	80102a0 <UART_SetConfig+0x78>
 8010380:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8010384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801038c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010390:	d00f      	beq.n	80103b2 <UART_SetConfig+0x18a>
 8010392:	d907      	bls.n	80103a4 <UART_SetConfig+0x17c>
 8010394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010398:	d009      	beq.n	80103ae <UART_SetConfig+0x186>
 801039a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801039e:	d104      	bne.n	80103aa <UART_SetConfig+0x182>
 80103a0:	2308      	movs	r3, #8
 80103a2:	e77d      	b.n	80102a0 <UART_SetConfig+0x78>
 80103a4:	b90b      	cbnz	r3, 80103aa <UART_SetConfig+0x182>
 80103a6:	2300      	movs	r3, #0
 80103a8:	e77a      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80103aa:	2310      	movs	r3, #16
 80103ac:	e778      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103ae:	2302      	movs	r3, #2
 80103b0:	e776      	b.n	80102a0 <UART_SetConfig+0x78>
 80103b2:	2304      	movs	r3, #4
 80103b4:	e774      	b.n	80102a0 <UART_SetConfig+0x78>
 80103b6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80103ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80103c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80103c6:	d00f      	beq.n	80103e8 <UART_SetConfig+0x1c0>
 80103c8:	d907      	bls.n	80103da <UART_SetConfig+0x1b2>
 80103ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80103ce:	d009      	beq.n	80103e4 <UART_SetConfig+0x1bc>
 80103d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80103d4:	d104      	bne.n	80103e0 <UART_SetConfig+0x1b8>
 80103d6:	2308      	movs	r3, #8
 80103d8:	e762      	b.n	80102a0 <UART_SetConfig+0x78>
 80103da:	b90b      	cbnz	r3, 80103e0 <UART_SetConfig+0x1b8>
 80103dc:	2301      	movs	r3, #1
 80103de:	e75f      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80103e0:	2310      	movs	r3, #16
 80103e2:	e75d      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103e4:	2302      	movs	r3, #2
 80103e6:	e75b      	b.n	80102a0 <UART_SetConfig+0x78>
 80103e8:	2304      	movs	r3, #4
 80103ea:	e759      	b.n	80102a0 <UART_SetConfig+0x78>
 80103ec:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80103f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80103f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103fc:	d00f      	beq.n	801041e <UART_SetConfig+0x1f6>
 80103fe:	d907      	bls.n	8010410 <UART_SetConfig+0x1e8>
 8010400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010404:	d009      	beq.n	801041a <UART_SetConfig+0x1f2>
 8010406:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801040a:	d104      	bne.n	8010416 <UART_SetConfig+0x1ee>
 801040c:	2308      	movs	r3, #8
 801040e:	e747      	b.n	80102a0 <UART_SetConfig+0x78>
 8010410:	b90b      	cbnz	r3, 8010416 <UART_SetConfig+0x1ee>
 8010412:	2300      	movs	r3, #0
 8010414:	e744      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8010416:	2310      	movs	r3, #16
 8010418:	e742      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801041a:	2302      	movs	r3, #2
 801041c:	e740      	b.n	80102a0 <UART_SetConfig+0x78>
 801041e:	2304      	movs	r3, #4
 8010420:	e73e      	b.n	80102a0 <UART_SetConfig+0x78>
 8010422:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8010426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801042a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801042e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010432:	d00f      	beq.n	8010454 <UART_SetConfig+0x22c>
 8010434:	d907      	bls.n	8010446 <UART_SetConfig+0x21e>
 8010436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801043a:	d009      	beq.n	8010450 <UART_SetConfig+0x228>
 801043c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010440:	d104      	bne.n	801044c <UART_SetConfig+0x224>
 8010442:	2308      	movs	r3, #8
 8010444:	e72c      	b.n	80102a0 <UART_SetConfig+0x78>
 8010446:	b90b      	cbnz	r3, 801044c <UART_SetConfig+0x224>
 8010448:	2300      	movs	r3, #0
 801044a:	e729      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 801044c:	2310      	movs	r3, #16
 801044e:	e727      	b.n	80102a0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010450:	2302      	movs	r3, #2
 8010452:	e725      	b.n	80102a0 <UART_SetConfig+0x78>
 8010454:	2304      	movs	r3, #4
 8010456:	e723      	b.n	80102a0 <UART_SetConfig+0x78>
 8010458:	2301      	movs	r3, #1
 801045a:	e721      	b.n	80102a0 <UART_SetConfig+0x78>
 801045c:	2300      	movs	r3, #0
 801045e:	e71f      	b.n	80102a0 <UART_SetConfig+0x78>
    switch (clocksource)
 8010460:	2b08      	cmp	r3, #8
 8010462:	d855      	bhi.n	8010510 <UART_SetConfig+0x2e8>
 8010464:	e8df f003 	tbb	[pc, r3]
 8010468:	54221705 	.word	0x54221705
 801046c:	54545440 	.word	0x54545440
 8010470:	4b          	.byte	0x4b
 8010471:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8010472:	f7fe f907 	bl	800e684 <HAL_RCC_GetPCLK1Freq>
 8010476:	6862      	ldr	r2, [r4, #4]
 8010478:	0853      	lsrs	r3, r2, #1
 801047a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801047e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010482:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8010484:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8010486:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801048a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 801048e:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8010490:	6822      	ldr	r2, [r4, #0]
 8010492:	60d3      	str	r3, [r2, #12]
 8010494:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8010496:	f7fe f905 	bl	800e6a4 <HAL_RCC_GetPCLK2Freq>
 801049a:	6862      	ldr	r2, [r4, #4]
 801049c:	0853      	lsrs	r3, r2, #1
 801049e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80104a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80104a6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80104a8:	2000      	movs	r0, #0
      break;
 80104aa:	e7ec      	b.n	8010486 <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80104ac:	6862      	ldr	r2, [r4, #4]
 80104ae:	4b0d      	ldr	r3, [pc, #52]	; (80104e4 <UART_SetConfig+0x2bc>)
 80104b0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80104b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80104b8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80104ba:	2000      	movs	r0, #0
      break;
 80104bc:	e7e3      	b.n	8010486 <UART_SetConfig+0x25e>
 80104be:	bf00      	nop
 80104c0:	efff69f3 	.word	0xefff69f3
 80104c4:	40011000 	.word	0x40011000
 80104c8:	40004400 	.word	0x40004400
 80104cc:	40004800 	.word	0x40004800
 80104d0:	40004c00 	.word	0x40004c00
 80104d4:	40005000 	.word	0x40005000
 80104d8:	40011400 	.word	0x40011400
 80104dc:	40007800 	.word	0x40007800
 80104e0:	40007c00 	.word	0x40007c00
 80104e4:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80104e8:	f7fd ffaa 	bl	800e440 <HAL_RCC_GetSysClockFreq>
 80104ec:	6862      	ldr	r2, [r4, #4]
 80104ee:	0853      	lsrs	r3, r2, #1
 80104f0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80104f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80104f8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80104fa:	2000      	movs	r0, #0
      break;
 80104fc:	e7c3      	b.n	8010486 <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80104fe:	6862      	ldr	r2, [r4, #4]
 8010500:	0853      	lsrs	r3, r2, #1
 8010502:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8010506:	fbb3 f3f2 	udiv	r3, r3, r2
 801050a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 801050c:	2000      	movs	r0, #0
      break;
 801050e:	e7ba      	b.n	8010486 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8010510:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8010512:	2300      	movs	r3, #0
 8010514:	e7b7      	b.n	8010486 <UART_SetConfig+0x25e>
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8010516:	f7fe f8b5 	bl	800e684 <HAL_RCC_GetPCLK1Freq>
 801051a:	6863      	ldr	r3, [r4, #4]
 801051c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8010520:	fbb0 f0f3 	udiv	r0, r0, r3
 8010524:	b280      	uxth	r0, r0
 8010526:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8010528:	2000      	movs	r0, #0
      break;
 801052a:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 801052c:	f7fe f8ba 	bl	800e6a4 <HAL_RCC_GetPCLK2Freq>
 8010530:	6863      	ldr	r3, [r4, #4]
 8010532:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8010536:	fbb0 f0f3 	udiv	r0, r0, r3
 801053a:	b280      	uxth	r0, r0
 801053c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801053e:	2000      	movs	r0, #0
      break;
 8010540:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8010542:	6862      	ldr	r2, [r4, #4]
 8010544:	4b0f      	ldr	r3, [pc, #60]	; (8010584 <UART_SetConfig+0x35c>)
 8010546:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801054a:	fbb3 f3f2 	udiv	r3, r3, r2
 801054e:	b29b      	uxth	r3, r3
 8010550:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8010552:	2000      	movs	r0, #0
      break;
 8010554:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8010556:	f7fd ff73 	bl	800e440 <HAL_RCC_GetSysClockFreq>
 801055a:	6863      	ldr	r3, [r4, #4]
 801055c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8010560:	fbb0 f0f3 	udiv	r0, r0, r3
 8010564:	b280      	uxth	r0, r0
 8010566:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8010568:	2000      	movs	r0, #0
      break;
 801056a:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 801056c:	6862      	ldr	r2, [r4, #4]
 801056e:	0853      	lsrs	r3, r2, #1
 8010570:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010574:	fbb3 f3f2 	udiv	r3, r3, r2
 8010578:	b29b      	uxth	r3, r3
 801057a:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801057c:	2000      	movs	r0, #0
      break;
 801057e:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8010580:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8010582:	bd38      	pop	{r3, r4, r5, pc}
 8010584:	00f42400 	.word	0x00f42400

08010588 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010588:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801058a:	f013 0f01 	tst.w	r3, #1
 801058e:	d006      	beq.n	801059e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010590:	6802      	ldr	r2, [r0, #0]
 8010592:	6853      	ldr	r3, [r2, #4]
 8010594:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010598:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801059a:	430b      	orrs	r3, r1
 801059c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801059e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80105a0:	f013 0f02 	tst.w	r3, #2
 80105a4:	d006      	beq.n	80105b4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105a6:	6802      	ldr	r2, [r0, #0]
 80105a8:	6853      	ldr	r3, [r2, #4]
 80105aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80105ae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80105b0:	430b      	orrs	r3, r1
 80105b2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80105b6:	f013 0f04 	tst.w	r3, #4
 80105ba:	d006      	beq.n	80105ca <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80105bc:	6802      	ldr	r2, [r0, #0]
 80105be:	6853      	ldr	r3, [r2, #4]
 80105c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80105c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80105c6:	430b      	orrs	r3, r1
 80105c8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80105cc:	f013 0f08 	tst.w	r3, #8
 80105d0:	d006      	beq.n	80105e0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80105d2:	6802      	ldr	r2, [r0, #0]
 80105d4:	6853      	ldr	r3, [r2, #4]
 80105d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80105da:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80105dc:	430b      	orrs	r3, r1
 80105de:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80105e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80105e2:	f013 0f10 	tst.w	r3, #16
 80105e6:	d006      	beq.n	80105f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80105e8:	6802      	ldr	r2, [r0, #0]
 80105ea:	6893      	ldr	r3, [r2, #8]
 80105ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80105f0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80105f2:	430b      	orrs	r3, r1
 80105f4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80105f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80105f8:	f013 0f20 	tst.w	r3, #32
 80105fc:	d006      	beq.n	801060c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80105fe:	6802      	ldr	r2, [r0, #0]
 8010600:	6893      	ldr	r3, [r2, #8]
 8010602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010606:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8010608:	430b      	orrs	r3, r1
 801060a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801060c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801060e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010612:	d00a      	beq.n	801062a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010614:	6802      	ldr	r2, [r0, #0]
 8010616:	6853      	ldr	r3, [r2, #4]
 8010618:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801061c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801061e:	430b      	orrs	r3, r1
 8010620:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010622:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010628:	d00b      	beq.n	8010642 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801062a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801062c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010630:	d006      	beq.n	8010640 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010632:	6802      	ldr	r2, [r0, #0]
 8010634:	6853      	ldr	r3, [r2, #4]
 8010636:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801063a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801063c:	430b      	orrs	r3, r1
 801063e:	6053      	str	r3, [r2, #4]
 8010640:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010642:	6802      	ldr	r2, [r0, #0]
 8010644:	6853      	ldr	r3, [r2, #4]
 8010646:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 801064a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801064c:	430b      	orrs	r3, r1
 801064e:	6053      	str	r3, [r2, #4]
 8010650:	e7eb      	b.n	801062a <UART_AdvFeatureConfig+0xa2>

08010652 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010652:	b510      	push	{r4, lr}
 8010654:	b082      	sub	sp, #8
 8010656:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010658:	2300      	movs	r3, #0
 801065a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801065c:	f7fc fca0 	bl	800cfa0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010660:	6822      	ldr	r2, [r4, #0]
 8010662:	6812      	ldr	r2, [r2, #0]
 8010664:	f012 0f08 	tst.w	r2, #8
 8010668:	d109      	bne.n	801067e <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 801066a:	2320      	movs	r3, #32
 801066c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8010670:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010674:	2000      	movs	r0, #0
 8010676:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 801067a:	b002      	add	sp, #8
 801067c:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801067e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	4603      	mov	r3, r0
 8010686:	2200      	movs	r2, #0
 8010688:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801068c:	4620      	mov	r0, r4
 801068e:	f7ff fd28 	bl	80100e2 <UART_WaitOnFlagUntilTimeout>
 8010692:	2800      	cmp	r0, #0
 8010694:	d0e9      	beq.n	801066a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8010696:	2003      	movs	r0, #3
 8010698:	e7ef      	b.n	801067a <UART_CheckIdleState+0x28>

0801069a <HAL_UART_Init>:
  if(huart == NULL)
 801069a:	b378      	cbz	r0, 80106fc <HAL_UART_Init+0x62>
{
 801069c:	b510      	push	{r4, lr}
 801069e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80106a0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80106a4:	b30b      	cbz	r3, 80106ea <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80106a6:	2324      	movs	r3, #36	; 0x24
 80106a8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80106ac:	6822      	ldr	r2, [r4, #0]
 80106ae:	6813      	ldr	r3, [r2, #0]
 80106b0:	f023 0301 	bic.w	r3, r3, #1
 80106b4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80106b6:	4620      	mov	r0, r4
 80106b8:	f7ff fdb6 	bl	8010228 <UART_SetConfig>
 80106bc:	2801      	cmp	r0, #1
 80106be:	d01f      	beq.n	8010700 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80106c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106c2:	b9bb      	cbnz	r3, 80106f4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80106c4:	6822      	ldr	r2, [r4, #0]
 80106c6:	6853      	ldr	r3, [r2, #4]
 80106c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80106cc:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80106ce:	6822      	ldr	r2, [r4, #0]
 80106d0:	6893      	ldr	r3, [r2, #8]
 80106d2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80106d6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80106d8:	6822      	ldr	r2, [r4, #0]
 80106da:	6813      	ldr	r3, [r2, #0]
 80106dc:	f043 0301 	orr.w	r3, r3, #1
 80106e0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80106e2:	4620      	mov	r0, r4
 80106e4:	f7ff ffb5 	bl	8010652 <UART_CheckIdleState>
 80106e8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80106ea:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80106ee:	f7fc fae1 	bl	800ccb4 <HAL_UART_MspInit>
 80106f2:	e7d8      	b.n	80106a6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80106f4:	4620      	mov	r0, r4
 80106f6:	f7ff ff47 	bl	8010588 <UART_AdvFeatureConfig>
 80106fa:	e7e3      	b.n	80106c4 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80106fc:	2001      	movs	r0, #1
 80106fe:	4770      	bx	lr
}
 8010700:	bd10      	pop	{r4, pc}

08010702 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8010702:	2884      	cmp	r0, #132	; 0x84
 8010704:	d001      	beq.n	801070a <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8010706:	3003      	adds	r0, #3
 8010708:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801070a:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 801070c:	4770      	bx	lr

0801070e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801070e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8010710:	f000 ffe0 	bl	80116d4 <vTaskStartScheduler>
  
  return osOK;
}
 8010714:	2000      	movs	r0, #0
 8010716:	bd08      	pop	{r3, pc}

08010718 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801071a:	b085      	sub	sp, #20
 801071c:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801071e:	6844      	ldr	r4, [r0, #4]
 8010720:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010722:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010724:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8010728:	f7ff ffeb 	bl	8010702 <makeFreeRtosPriority>
 801072c:	ab03      	add	r3, sp, #12
 801072e:	9301      	str	r3, [sp, #4]
 8010730:	9000      	str	r0, [sp, #0]
 8010732:	463b      	mov	r3, r7
 8010734:	b2b2      	uxth	r2, r6
 8010736:	4629      	mov	r1, r5
 8010738:	4620      	mov	r0, r4
 801073a:	f000 ff99 	bl	8011670 <xTaskCreate>
 801073e:	2801      	cmp	r0, #1
 8010740:	d102      	bne.n	8010748 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010742:	9803      	ldr	r0, [sp, #12]
}
 8010744:	b005      	add	sp, #20
 8010746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8010748:	2000      	movs	r0, #0
 801074a:	e7fb      	b.n	8010744 <osThreadCreate+0x2c>

0801074c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801074c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801074e:	4603      	mov	r3, r0
 8010750:	b900      	cbnz	r0, 8010754 <osDelay+0x8>
 8010752:	2301      	movs	r3, #1
 8010754:	4618      	mov	r0, r3
 8010756:	f001 f919 	bl	801198c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801075a:	2000      	movs	r0, #0
 801075c:	bd08      	pop	{r3, pc}

0801075e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801075e:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8010760:	2001      	movs	r0, #1
 8010762:	f000 fce9 	bl	8011138 <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8010766:	bd08      	pop	{r3, pc}

08010768 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010768:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801076a:	2200      	movs	r2, #0
 801076c:	6841      	ldr	r1, [r0, #4]
 801076e:	6800      	ldr	r0, [r0, #0]
 8010770:	f000 fbe4 	bl	8010f3c <xQueueGenericCreate>
#endif
}
 8010774:	bd08      	pop	{r3, pc}
	...

08010778 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010778:	4a12      	ldr	r2, [pc, #72]	; (80107c4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801077a:	f012 0f07 	tst.w	r2, #7
 801077e:	d01e      	beq.n	80107be <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010780:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010782:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010786:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 801078a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801078c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801078e:	480e      	ldr	r0, [pc, #56]	; (80107c8 <prvHeapInit+0x50>)
 8010790:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010792:	2100      	movs	r1, #0
 8010794:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010796:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8010798:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801079a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801079e:	480b      	ldr	r0, [pc, #44]	; (80107cc <prvHeapInit+0x54>)
 80107a0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80107a2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107a4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80107a6:	1a99      	subs	r1, r3, r2
 80107a8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80107aa:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107ac:	4b08      	ldr	r3, [pc, #32]	; (80107d0 <prvHeapInit+0x58>)
 80107ae:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107b0:	4b08      	ldr	r3, [pc, #32]	; (80107d4 <prvHeapInit+0x5c>)
 80107b2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80107b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80107b8:	4b07      	ldr	r3, [pc, #28]	; (80107d8 <prvHeapInit+0x60>)
 80107ba:	601a      	str	r2, [r3, #0]
 80107bc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80107be:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80107c2:	e7e4      	b.n	801078e <prvHeapInit+0x16>
 80107c4:	20003928 	.word	0x20003928
 80107c8:	20007534 	.word	0x20007534
 80107cc:	20003924 	.word	0x20003924
 80107d0:	20007530 	.word	0x20007530
 80107d4:	2000752c 	.word	0x2000752c
 80107d8:	20007528 	.word	0x20007528

080107dc <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80107dc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107de:	4b13      	ldr	r3, [pc, #76]	; (801082c <prvInsertBlockIntoFreeList+0x50>)
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	4282      	cmp	r2, r0
 80107e4:	d31b      	bcc.n	801081e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107e6:	6859      	ldr	r1, [r3, #4]
 80107e8:	185c      	adds	r4, r3, r1
 80107ea:	42a0      	cmp	r0, r4
 80107ec:	d103      	bne.n	80107f6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107ee:	6840      	ldr	r0, [r0, #4]
 80107f0:	4401      	add	r1, r0
 80107f2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80107f4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80107f6:	6841      	ldr	r1, [r0, #4]
 80107f8:	1844      	adds	r4, r0, r1
 80107fa:	42a2      	cmp	r2, r4
 80107fc:	d113      	bne.n	8010826 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80107fe:	4c0c      	ldr	r4, [pc, #48]	; (8010830 <prvInsertBlockIntoFreeList+0x54>)
 8010800:	6824      	ldr	r4, [r4, #0]
 8010802:	42a2      	cmp	r2, r4
 8010804:	d00d      	beq.n	8010822 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010806:	6852      	ldr	r2, [r2, #4]
 8010808:	4411      	add	r1, r2
 801080a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	6812      	ldr	r2, [r2, #0]
 8010810:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010812:	4298      	cmp	r0, r3
 8010814:	d000      	beq.n	8010818 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010816:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010818:	f85d 4b04 	ldr.w	r4, [sp], #4
 801081c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801081e:	4613      	mov	r3, r2
 8010820:	e7de      	b.n	80107e0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010822:	6004      	str	r4, [r0, #0]
 8010824:	e7f5      	b.n	8010812 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010826:	6002      	str	r2, [r0, #0]
 8010828:	e7f3      	b.n	8010812 <prvInsertBlockIntoFreeList+0x36>
 801082a:	bf00      	nop
 801082c:	20007534 	.word	0x20007534
 8010830:	20003924 	.word	0x20003924

08010834 <pvPortMalloc>:
{
 8010834:	b570      	push	{r4, r5, r6, lr}
 8010836:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8010838:	f000 ff8e 	bl	8011758 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801083c:	4b3d      	ldr	r3, [pc, #244]	; (8010934 <pvPortMalloc+0x100>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	b1cb      	cbz	r3, 8010876 <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010842:	4b3d      	ldr	r3, [pc, #244]	; (8010938 <pvPortMalloc+0x104>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	421c      	tst	r4, r3
 8010848:	d169      	bne.n	801091e <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 801084a:	b1bc      	cbz	r4, 801087c <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 801084c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801084e:	f014 0f07 	tst.w	r4, #7
 8010852:	d013      	beq.n	801087c <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010854:	f024 0407 	bic.w	r4, r4, #7
 8010858:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801085a:	f004 0307 	and.w	r3, r4, #7
 801085e:	b16b      	cbz	r3, 801087c <pvPortMalloc+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010864:	b672      	cpsid	i
 8010866:	f383 8811 	msr	BASEPRI, r3
 801086a:	f3bf 8f6f 	isb	sy
 801086e:	f3bf 8f4f 	dsb	sy
 8010872:	b662      	cpsie	i
 8010874:	e7fe      	b.n	8010874 <pvPortMalloc+0x40>
			prvHeapInit();
 8010876:	f7ff ff7f 	bl	8010778 <prvHeapInit>
 801087a:	e7e2      	b.n	8010842 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801087c:	2c00      	cmp	r4, #0
 801087e:	d050      	beq.n	8010922 <pvPortMalloc+0xee>
 8010880:	4b2e      	ldr	r3, [pc, #184]	; (801093c <pvPortMalloc+0x108>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	429c      	cmp	r4, r3
 8010886:	d84e      	bhi.n	8010926 <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 8010888:	4b2d      	ldr	r3, [pc, #180]	; (8010940 <pvPortMalloc+0x10c>)
 801088a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801088c:	e001      	b.n	8010892 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 801088e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8010890:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010892:	686a      	ldr	r2, [r5, #4]
 8010894:	4294      	cmp	r4, r2
 8010896:	d902      	bls.n	801089e <pvPortMalloc+0x6a>
 8010898:	682a      	ldr	r2, [r5, #0]
 801089a:	2a00      	cmp	r2, #0
 801089c:	d1f7      	bne.n	801088e <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 801089e:	4a25      	ldr	r2, [pc, #148]	; (8010934 <pvPortMalloc+0x100>)
 80108a0:	6812      	ldr	r2, [r2, #0]
 80108a2:	4295      	cmp	r5, r2
 80108a4:	d041      	beq.n	801092a <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80108a6:	681e      	ldr	r6, [r3, #0]
 80108a8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80108aa:	682a      	ldr	r2, [r5, #0]
 80108ac:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80108ae:	686b      	ldr	r3, [r5, #4]
 80108b0:	1b1b      	subs	r3, r3, r4
 80108b2:	2b10      	cmp	r3, #16
 80108b4:	d912      	bls.n	80108dc <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80108b6:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108b8:	f010 0f07 	tst.w	r0, #7
 80108bc:	d00a      	beq.n	80108d4 <pvPortMalloc+0xa0>
 80108be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c2:	b672      	cpsid	i
 80108c4:	f383 8811 	msr	BASEPRI, r3
 80108c8:	f3bf 8f6f 	isb	sy
 80108cc:	f3bf 8f4f 	dsb	sy
 80108d0:	b662      	cpsie	i
 80108d2:	e7fe      	b.n	80108d2 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80108d4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80108d6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80108d8:	f7ff ff80 	bl	80107dc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80108dc:	686a      	ldr	r2, [r5, #4]
 80108de:	4917      	ldr	r1, [pc, #92]	; (801093c <pvPortMalloc+0x108>)
 80108e0:	680b      	ldr	r3, [r1, #0]
 80108e2:	1a9b      	subs	r3, r3, r2
 80108e4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80108e6:	4917      	ldr	r1, [pc, #92]	; (8010944 <pvPortMalloc+0x110>)
 80108e8:	6809      	ldr	r1, [r1, #0]
 80108ea:	428b      	cmp	r3, r1
 80108ec:	d201      	bcs.n	80108f2 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80108ee:	4915      	ldr	r1, [pc, #84]	; (8010944 <pvPortMalloc+0x110>)
 80108f0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80108f2:	4b11      	ldr	r3, [pc, #68]	; (8010938 <pvPortMalloc+0x104>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4313      	orrs	r3, r2
 80108f8:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80108fa:	2300      	movs	r3, #0
 80108fc:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80108fe:	f000 ffc5 	bl	801188c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010902:	f016 0f07 	tst.w	r6, #7
 8010906:	d012      	beq.n	801092e <pvPortMalloc+0xfa>
 8010908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090c:	b672      	cpsid	i
 801090e:	f383 8811 	msr	BASEPRI, r3
 8010912:	f3bf 8f6f 	isb	sy
 8010916:	f3bf 8f4f 	dsb	sy
 801091a:	b662      	cpsie	i
 801091c:	e7fe      	b.n	801091c <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 801091e:	2600      	movs	r6, #0
 8010920:	e7ed      	b.n	80108fe <pvPortMalloc+0xca>
 8010922:	2600      	movs	r6, #0
 8010924:	e7eb      	b.n	80108fe <pvPortMalloc+0xca>
 8010926:	2600      	movs	r6, #0
 8010928:	e7e9      	b.n	80108fe <pvPortMalloc+0xca>
 801092a:	2600      	movs	r6, #0
 801092c:	e7e7      	b.n	80108fe <pvPortMalloc+0xca>
}
 801092e:	4630      	mov	r0, r6
 8010930:	bd70      	pop	{r4, r5, r6, pc}
 8010932:	bf00      	nop
 8010934:	20003924 	.word	0x20003924
 8010938:	20007528 	.word	0x20007528
 801093c:	2000752c 	.word	0x2000752c
 8010940:	20007534 	.word	0x20007534
 8010944:	20007530 	.word	0x20007530

08010948 <vPortFree>:
	if( pv != NULL )
 8010948:	2800      	cmp	r0, #0
 801094a:	d034      	beq.n	80109b6 <vPortFree+0x6e>
{
 801094c:	b538      	push	{r3, r4, r5, lr}
 801094e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8010950:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010954:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010958:	4917      	ldr	r1, [pc, #92]	; (80109b8 <vPortFree+0x70>)
 801095a:	6809      	ldr	r1, [r1, #0]
 801095c:	420a      	tst	r2, r1
 801095e:	d10a      	bne.n	8010976 <vPortFree+0x2e>
 8010960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010964:	b672      	cpsid	i
 8010966:	f383 8811 	msr	BASEPRI, r3
 801096a:	f3bf 8f6f 	isb	sy
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	b662      	cpsie	i
 8010974:	e7fe      	b.n	8010974 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010976:	f850 0c08 	ldr.w	r0, [r0, #-8]
 801097a:	b150      	cbz	r0, 8010992 <vPortFree+0x4a>
 801097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010980:	b672      	cpsid	i
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	b662      	cpsie	i
 8010990:	e7fe      	b.n	8010990 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010992:	ea22 0201 	bic.w	r2, r2, r1
 8010996:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 801099a:	f000 fedd 	bl	8011758 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801099e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80109a2:	4a06      	ldr	r2, [pc, #24]	; (80109bc <vPortFree+0x74>)
 80109a4:	6813      	ldr	r3, [r2, #0]
 80109a6:	440b      	add	r3, r1
 80109a8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80109aa:	4628      	mov	r0, r5
 80109ac:	f7ff ff16 	bl	80107dc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80109b0:	f000 ff6c 	bl	801188c <xTaskResumeAll>
 80109b4:	bd38      	pop	{r3, r4, r5, pc}
 80109b6:	4770      	bx	lr
 80109b8:	20007528 	.word	0x20007528
 80109bc:	2000752c 	.word	0x2000752c

080109c0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109c0:	f100 0308 	add.w	r3, r0, #8
 80109c4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80109c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109ca:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109cc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109ce:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80109d0:	2300      	movs	r3, #0
 80109d2:	6003      	str	r3, [r0, #0]
 80109d4:	4770      	bx	lr

080109d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80109d6:	2300      	movs	r3, #0
 80109d8:	6103      	str	r3, [r0, #16]
 80109da:	4770      	bx	lr

080109dc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80109dc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80109de:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80109e0:	689a      	ldr	r2, [r3, #8]
 80109e2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80109e4:	689a      	ldr	r2, [r3, #8]
 80109e6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80109e8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80109ea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80109ec:	6803      	ldr	r3, [r0, #0]
 80109ee:	3301      	adds	r3, #1
 80109f0:	6003      	str	r3, [r0, #0]
 80109f2:	4770      	bx	lr

080109f4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80109f4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80109f6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80109f8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80109fc:	d002      	beq.n	8010a04 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109fe:	f100 0208 	add.w	r2, r0, #8
 8010a02:	e002      	b.n	8010a0a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8010a04:	6902      	ldr	r2, [r0, #16]
 8010a06:	e004      	b.n	8010a12 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a08:	461a      	mov	r2, r3
 8010a0a:	6853      	ldr	r3, [r2, #4]
 8010a0c:	681c      	ldr	r4, [r3, #0]
 8010a0e:	42a5      	cmp	r5, r4
 8010a10:	d2fa      	bcs.n	8010a08 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010a12:	6853      	ldr	r3, [r2, #4]
 8010a14:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010a16:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010a18:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8010a1a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010a1c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8010a1e:	6803      	ldr	r3, [r0, #0]
 8010a20:	3301      	adds	r3, #1
 8010a22:	6003      	str	r3, [r0, #0]
}
 8010a24:	bc30      	pop	{r4, r5}
 8010a26:	4770      	bx	lr

08010a28 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010a28:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010a2a:	6842      	ldr	r2, [r0, #4]
 8010a2c:	6881      	ldr	r1, [r0, #8]
 8010a2e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a30:	6882      	ldr	r2, [r0, #8]
 8010a32:	6841      	ldr	r1, [r0, #4]
 8010a34:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010a36:	685a      	ldr	r2, [r3, #4]
 8010a38:	4290      	cmp	r0, r2
 8010a3a:	d005      	beq.n	8010a48 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010a40:	6818      	ldr	r0, [r3, #0]
 8010a42:	3801      	subs	r0, #1
 8010a44:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8010a46:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010a48:	6882      	ldr	r2, [r0, #8]
 8010a4a:	605a      	str	r2, [r3, #4]
 8010a4c:	e7f6      	b.n	8010a3c <uxListRemove+0x14>
	...

08010a50 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010a50:	4b0d      	ldr	r3, [pc, #52]	; (8010a88 <prvTaskExitError+0x38>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a58:	d00a      	beq.n	8010a70 <prvTaskExitError+0x20>
 8010a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5e:	b672      	cpsid	i
 8010a60:	f383 8811 	msr	BASEPRI, r3
 8010a64:	f3bf 8f6f 	isb	sy
 8010a68:	f3bf 8f4f 	dsb	sy
 8010a6c:	b662      	cpsie	i
 8010a6e:	e7fe      	b.n	8010a6e <prvTaskExitError+0x1e>
 8010a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a74:	b672      	cpsid	i
 8010a76:	f383 8811 	msr	BASEPRI, r3
 8010a7a:	f3bf 8f6f 	isb	sy
 8010a7e:	f3bf 8f4f 	dsb	sy
 8010a82:	b662      	cpsie	i
 8010a84:	e7fe      	b.n	8010a84 <prvTaskExitError+0x34>
 8010a86:	bf00      	nop
 8010a88:	20000028 	.word	0x20000028

08010a8c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8010a8c:	4806      	ldr	r0, [pc, #24]	; (8010aa8 <prvPortStartFirstTask+0x1c>)
 8010a8e:	6800      	ldr	r0, [r0, #0]
 8010a90:	6800      	ldr	r0, [r0, #0]
 8010a92:	f380 8808 	msr	MSP, r0
 8010a96:	b662      	cpsie	i
 8010a98:	b661      	cpsie	f
 8010a9a:	f3bf 8f4f 	dsb	sy
 8010a9e:	f3bf 8f6f 	isb	sy
 8010aa2:	df00      	svc	0
 8010aa4:	bf00      	nop
 8010aa6:	0000      	.short	0x0000
 8010aa8:	e000ed08 	.word	0xe000ed08

08010aac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010aac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010abc <vPortEnableVFP+0x10>
 8010ab0:	6801      	ldr	r1, [r0, #0]
 8010ab2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010ab6:	6001      	str	r1, [r0, #0]
 8010ab8:	4770      	bx	lr
 8010aba:	0000      	.short	0x0000
 8010abc:	e000ed88 	.word	0xe000ed88

08010ac0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010ac4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ac8:	f021 0101 	bic.w	r1, r1, #1
 8010acc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ad0:	4b05      	ldr	r3, [pc, #20]	; (8010ae8 <pxPortInitialiseStack+0x28>)
 8010ad2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010ad6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8010ada:	f06f 0302 	mvn.w	r3, #2
 8010ade:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8010ae2:	3844      	subs	r0, #68	; 0x44
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	08010a51 	.word	0x08010a51
 8010aec:	00000000 	.word	0x00000000

08010af0 <SVC_Handler>:
	__asm volatile (
 8010af0:	4b07      	ldr	r3, [pc, #28]	; (8010b10 <pxCurrentTCBConst2>)
 8010af2:	6819      	ldr	r1, [r3, #0]
 8010af4:	6808      	ldr	r0, [r1, #0]
 8010af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010afa:	f380 8809 	msr	PSP, r0
 8010afe:	f3bf 8f6f 	isb	sy
 8010b02:	f04f 0000 	mov.w	r0, #0
 8010b06:	f380 8811 	msr	BASEPRI, r0
 8010b0a:	4770      	bx	lr
 8010b0c:	f3af 8000 	nop.w

08010b10 <pxCurrentTCBConst2>:
 8010b10:	20007544 	.word	0x20007544

08010b14 <vPortEnterCritical>:
 8010b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b18:	b672      	cpsid	i
 8010b1a:	f383 8811 	msr	BASEPRI, r3
 8010b1e:	f3bf 8f6f 	isb	sy
 8010b22:	f3bf 8f4f 	dsb	sy
 8010b26:	b662      	cpsie	i
	uxCriticalNesting++;
 8010b28:	4a0b      	ldr	r2, [pc, #44]	; (8010b58 <vPortEnterCritical+0x44>)
 8010b2a:	6813      	ldr	r3, [r2, #0]
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d10f      	bne.n	8010b54 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010b34:	4b09      	ldr	r3, [pc, #36]	; (8010b5c <vPortEnterCritical+0x48>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010b3c:	d00a      	beq.n	8010b54 <vPortEnterCritical+0x40>
 8010b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b42:	b672      	cpsid	i
 8010b44:	f383 8811 	msr	BASEPRI, r3
 8010b48:	f3bf 8f6f 	isb	sy
 8010b4c:	f3bf 8f4f 	dsb	sy
 8010b50:	b662      	cpsie	i
 8010b52:	e7fe      	b.n	8010b52 <vPortEnterCritical+0x3e>
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	20000028 	.word	0x20000028
 8010b5c:	e000ed04 	.word	0xe000ed04

08010b60 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010b60:	4b0a      	ldr	r3, [pc, #40]	; (8010b8c <vPortExitCritical+0x2c>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	b953      	cbnz	r3, 8010b7c <vPortExitCritical+0x1c>
 8010b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b6a:	b672      	cpsid	i
 8010b6c:	f383 8811 	msr	BASEPRI, r3
 8010b70:	f3bf 8f6f 	isb	sy
 8010b74:	f3bf 8f4f 	dsb	sy
 8010b78:	b662      	cpsie	i
 8010b7a:	e7fe      	b.n	8010b7a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	4a03      	ldr	r2, [pc, #12]	; (8010b8c <vPortExitCritical+0x2c>)
 8010b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b82:	b90b      	cbnz	r3, 8010b88 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010b84:	f383 8811 	msr	BASEPRI, r3
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	20000028 	.word	0x20000028

08010b90 <PendSV_Handler>:
	__asm volatile
 8010b90:	f3ef 8009 	mrs	r0, PSP
 8010b94:	f3bf 8f6f 	isb	sy
 8010b98:	4b15      	ldr	r3, [pc, #84]	; (8010bf0 <pxCurrentTCBConst>)
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	f01e 0f10 	tst.w	lr, #16
 8010ba0:	bf08      	it	eq
 8010ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010baa:	6010      	str	r0, [r2, #0]
 8010bac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8010bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010bb4:	b672      	cpsid	i
 8010bb6:	f380 8811 	msr	BASEPRI, r0
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	b662      	cpsie	i
 8010bc4:	f000 ff4e 	bl	8011a64 <vTaskSwitchContext>
 8010bc8:	f04f 0000 	mov.w	r0, #0
 8010bcc:	f380 8811 	msr	BASEPRI, r0
 8010bd0:	bc08      	pop	{r3}
 8010bd2:	6819      	ldr	r1, [r3, #0]
 8010bd4:	6808      	ldr	r0, [r1, #0]
 8010bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bda:	f01e 0f10 	tst.w	lr, #16
 8010bde:	bf08      	it	eq
 8010be0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010be4:	f380 8809 	msr	PSP, r0
 8010be8:	f3bf 8f6f 	isb	sy
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop

08010bf0 <pxCurrentTCBConst>:
 8010bf0:	20007544 	.word	0x20007544

08010bf4 <SysTick_Handler>:
{
 8010bf4:	b508      	push	{r3, lr}
	__asm volatile
 8010bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfa:	b672      	cpsid	i
 8010bfc:	f383 8811 	msr	BASEPRI, r3
 8010c00:	f3bf 8f6f 	isb	sy
 8010c04:	f3bf 8f4f 	dsb	sy
 8010c08:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8010c0a:	f000 fdad 	bl	8011768 <xTaskIncrementTick>
 8010c0e:	b118      	cbz	r0, 8010c18 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c14:	4b02      	ldr	r3, [pc, #8]	; (8010c20 <SysTick_Handler+0x2c>)
 8010c16:	601a      	str	r2, [r3, #0]
	__asm volatile
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f383 8811 	msr	BASEPRI, r3
 8010c1e:	bd08      	pop	{r3, pc}
 8010c20:	e000ed04 	.word	0xe000ed04

08010c24 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c24:	4b06      	ldr	r3, [pc, #24]	; (8010c40 <vPortSetupTimerInterrupt+0x1c>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	4a06      	ldr	r2, [pc, #24]	; (8010c44 <vPortSetupTimerInterrupt+0x20>)
 8010c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8010c2e:	099b      	lsrs	r3, r3, #6
 8010c30:	3b01      	subs	r3, #1
 8010c32:	4a05      	ldr	r2, [pc, #20]	; (8010c48 <vPortSetupTimerInterrupt+0x24>)
 8010c34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c36:	2207      	movs	r2, #7
 8010c38:	4b04      	ldr	r3, [pc, #16]	; (8010c4c <vPortSetupTimerInterrupt+0x28>)
 8010c3a:	601a      	str	r2, [r3, #0]
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop
 8010c40:	20000020 	.word	0x20000020
 8010c44:	10624dd3 	.word	0x10624dd3
 8010c48:	e000e014 	.word	0xe000e014
 8010c4c:	e000e010 	.word	0xe000e010

08010c50 <xPortStartScheduler>:
{
 8010c50:	b500      	push	{lr}
 8010c52:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c54:	4b22      	ldr	r3, [pc, #136]	; (8010ce0 <xPortStartScheduler+0x90>)
 8010c56:	781a      	ldrb	r2, [r3, #0]
 8010c58:	b2d2      	uxtb	r2, r2
 8010c5a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c5c:	22ff      	movs	r2, #255	; 0xff
 8010c5e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010c6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010c70:	4a1c      	ldr	r2, [pc, #112]	; (8010ce4 <xPortStartScheduler+0x94>)
 8010c72:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c74:	2207      	movs	r2, #7
 8010c76:	4b1c      	ldr	r3, [pc, #112]	; (8010ce8 <xPortStartScheduler+0x98>)
 8010c78:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c7a:	e009      	b.n	8010c90 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8010c7c:	4a1a      	ldr	r2, [pc, #104]	; (8010ce8 <xPortStartScheduler+0x98>)
 8010c7e:	6813      	ldr	r3, [r2, #0]
 8010c80:	3b01      	subs	r3, #1
 8010c82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c84:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	b2db      	uxtb	r3, r3
 8010c8c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c90:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010c94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010c98:	d1f0      	bne.n	8010c7c <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010c9a:	4a13      	ldr	r2, [pc, #76]	; (8010ce8 <xPortStartScheduler+0x98>)
 8010c9c:	6813      	ldr	r3, [r2, #0]
 8010c9e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010ca4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010ca6:	9b01      	ldr	r3, [sp, #4]
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	4a0d      	ldr	r2, [pc, #52]	; (8010ce0 <xPortStartScheduler+0x90>)
 8010cac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010cae:	4b0f      	ldr	r3, [pc, #60]	; (8010cec <xPortStartScheduler+0x9c>)
 8010cb0:	681a      	ldr	r2, [r3, #0]
 8010cb2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8010cb6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8010cbe:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8010cc0:	f7ff ffb0 	bl	8010c24 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	4b0a      	ldr	r3, [pc, #40]	; (8010cf0 <xPortStartScheduler+0xa0>)
 8010cc8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8010cca:	f7ff feef 	bl	8010aac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010cce:	4a09      	ldr	r2, [pc, #36]	; (8010cf4 <xPortStartScheduler+0xa4>)
 8010cd0:	6813      	ldr	r3, [r2, #0]
 8010cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010cd6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8010cd8:	f7ff fed8 	bl	8010a8c <prvPortStartFirstTask>
	prvTaskExitError();
 8010cdc:	f7ff feb8 	bl	8010a50 <prvTaskExitError>
 8010ce0:	e000e400 	.word	0xe000e400
 8010ce4:	2000753c 	.word	0x2000753c
 8010ce8:	20007540 	.word	0x20007540
 8010cec:	e000ed20 	.word	0xe000ed20
 8010cf0:	20000028 	.word	0x20000028
 8010cf4:	e000ef34 	.word	0xe000ef34

08010cf8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8010cf8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010cfc:	2b0f      	cmp	r3, #15
 8010cfe:	d911      	bls.n	8010d24 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d00:	4a12      	ldr	r2, [pc, #72]	; (8010d4c <vPortValidateInterruptPriority+0x54>)
 8010d02:	5c9b      	ldrb	r3, [r3, r2]
 8010d04:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d06:	4a12      	ldr	r2, [pc, #72]	; (8010d50 <vPortValidateInterruptPriority+0x58>)
 8010d08:	7812      	ldrb	r2, [r2, #0]
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d20a      	bcs.n	8010d24 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
 8010d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d12:	b672      	cpsid	i
 8010d14:	f383 8811 	msr	BASEPRI, r3
 8010d18:	f3bf 8f6f 	isb	sy
 8010d1c:	f3bf 8f4f 	dsb	sy
 8010d20:	b662      	cpsie	i
 8010d22:	e7fe      	b.n	8010d22 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010d24:	4b0b      	ldr	r3, [pc, #44]	; (8010d54 <vPortValidateInterruptPriority+0x5c>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d2c:	4a0a      	ldr	r2, [pc, #40]	; (8010d58 <vPortValidateInterruptPriority+0x60>)
 8010d2e:	6812      	ldr	r2, [r2, #0]
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d90a      	bls.n	8010d4a <vPortValidateInterruptPriority+0x52>
 8010d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d38:	b672      	cpsid	i
 8010d3a:	f383 8811 	msr	BASEPRI, r3
 8010d3e:	f3bf 8f6f 	isb	sy
 8010d42:	f3bf 8f4f 	dsb	sy
 8010d46:	b662      	cpsie	i
 8010d48:	e7fe      	b.n	8010d48 <vPortValidateInterruptPriority+0x50>
 8010d4a:	4770      	bx	lr
 8010d4c:	e000e3f0 	.word	0xe000e3f0
 8010d50:	2000753c 	.word	0x2000753c
 8010d54:	e000ed0c 	.word	0xe000ed0c
 8010d58:	20007540 	.word	0x20007540

08010d5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010d5c:	b510      	push	{r4, lr}
 8010d5e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d60:	f7ff fed8 	bl	8010b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010d64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010d66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d004      	beq.n	8010d76 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8010d6c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8010d6e:	f7ff fef7 	bl	8010b60 <vPortExitCritical>

	return xReturn;
}
 8010d72:	4620      	mov	r0, r4
 8010d74:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8010d76:	2401      	movs	r4, #1
 8010d78:	e7f9      	b.n	8010d6e <prvIsQueueFull+0x12>

08010d7a <prvIsQueueEmpty>:
{
 8010d7a:	b510      	push	{r4, lr}
 8010d7c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010d7e:	f7ff fec9 	bl	8010b14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010d82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010d84:	b123      	cbz	r3, 8010d90 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8010d86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010d88:	f7ff feea 	bl	8010b60 <vPortExitCritical>
}
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8010d90:	2401      	movs	r4, #1
 8010d92:	e7f9      	b.n	8010d88 <prvIsQueueEmpty+0xe>

08010d94 <prvCopyDataToQueue>:
{
 8010d94:	b570      	push	{r4, r5, r6, lr}
 8010d96:	4604      	mov	r4, r0
 8010d98:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d9a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010d9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010d9e:	b94a      	cbnz	r2, 8010db4 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010da0:	6803      	ldr	r3, [r0, #0]
 8010da2:	bb53      	cbnz	r3, 8010dfa <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8010da4:	6840      	ldr	r0, [r0, #4]
 8010da6:	f000 ffd3 	bl	8011d50 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8010daa:	2300      	movs	r3, #0
 8010dac:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8010dae:	3501      	adds	r5, #1
 8010db0:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8010db2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8010db4:	b96e      	cbnz	r6, 8010dd2 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010db6:	6880      	ldr	r0, [r0, #8]
 8010db8:	f004 fe2b 	bl	8015a12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010dbc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010dbe:	68a3      	ldr	r3, [r4, #8]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010dc4:	6862      	ldr	r2, [r4, #4]
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d319      	bcc.n	8010dfe <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010dca:	6823      	ldr	r3, [r4, #0]
 8010dcc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8010dce:	2000      	movs	r0, #0
 8010dd0:	e7ed      	b.n	8010dae <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dd2:	68c0      	ldr	r0, [r0, #12]
 8010dd4:	f004 fe1d 	bl	8015a12 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8010dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010dda:	425b      	negs	r3, r3
 8010ddc:	68e2      	ldr	r2, [r4, #12]
 8010dde:	441a      	add	r2, r3
 8010de0:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010de2:	6821      	ldr	r1, [r4, #0]
 8010de4:	428a      	cmp	r2, r1
 8010de6:	d202      	bcs.n	8010dee <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8010de8:	6862      	ldr	r2, [r4, #4]
 8010dea:	4413      	add	r3, r2
 8010dec:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8010dee:	2e02      	cmp	r6, #2
 8010df0:	d107      	bne.n	8010e02 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010df2:	b145      	cbz	r5, 8010e06 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8010df4:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8010df6:	2000      	movs	r0, #0
 8010df8:	e7d9      	b.n	8010dae <prvCopyDataToQueue+0x1a>
 8010dfa:	2000      	movs	r0, #0
 8010dfc:	e7d7      	b.n	8010dae <prvCopyDataToQueue+0x1a>
 8010dfe:	2000      	movs	r0, #0
 8010e00:	e7d5      	b.n	8010dae <prvCopyDataToQueue+0x1a>
 8010e02:	2000      	movs	r0, #0
 8010e04:	e7d3      	b.n	8010dae <prvCopyDataToQueue+0x1a>
 8010e06:	2000      	movs	r0, #0
 8010e08:	e7d1      	b.n	8010dae <prvCopyDataToQueue+0x1a>

08010e0a <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010e0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010e0c:	b172      	cbz	r2, 8010e2c <prvCopyDataFromQueue+0x22>
{
 8010e0e:	b510      	push	{r4, lr}
 8010e10:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010e12:	68c4      	ldr	r4, [r0, #12]
 8010e14:	4414      	add	r4, r2
 8010e16:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e18:	6840      	ldr	r0, [r0, #4]
 8010e1a:	4284      	cmp	r4, r0
 8010e1c:	d301      	bcc.n	8010e22 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8010e1e:	6818      	ldr	r0, [r3, #0]
 8010e20:	60d8      	str	r0, [r3, #12]
 8010e22:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010e24:	68d9      	ldr	r1, [r3, #12]
 8010e26:	f004 fdf4 	bl	8015a12 <memcpy>
 8010e2a:	bd10      	pop	{r4, pc}
 8010e2c:	4770      	bx	lr

08010e2e <prvUnlockQueue>:
{
 8010e2e:	b538      	push	{r3, r4, r5, lr}
 8010e30:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8010e32:	f7ff fe6f 	bl	8010b14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010e36:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8010e3a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e3c:	e001      	b.n	8010e42 <prvUnlockQueue+0x14>
			--cTxLock;
 8010e3e:	3c01      	subs	r4, #1
 8010e40:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e42:	2c00      	cmp	r4, #0
 8010e44:	dd0a      	ble.n	8010e5c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010e48:	b143      	cbz	r3, 8010e5c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e4a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8010e4e:	f000 fe73 	bl	8011b38 <xTaskRemoveFromEventList>
 8010e52:	2800      	cmp	r0, #0
 8010e54:	d0f3      	beq.n	8010e3e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8010e56:	f000 ff13 	bl	8011c80 <vTaskMissedYield>
 8010e5a:	e7f0      	b.n	8010e3e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8010e5c:	23ff      	movs	r3, #255	; 0xff
 8010e5e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8010e62:	f7ff fe7d 	bl	8010b60 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010e66:	f7ff fe55 	bl	8010b14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010e6a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8010e6e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e70:	e001      	b.n	8010e76 <prvUnlockQueue+0x48>
				--cRxLock;
 8010e72:	3c01      	subs	r4, #1
 8010e74:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e76:	2c00      	cmp	r4, #0
 8010e78:	dd0a      	ble.n	8010e90 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e7a:	692b      	ldr	r3, [r5, #16]
 8010e7c:	b143      	cbz	r3, 8010e90 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e7e:	f105 0010 	add.w	r0, r5, #16
 8010e82:	f000 fe59 	bl	8011b38 <xTaskRemoveFromEventList>
 8010e86:	2800      	cmp	r0, #0
 8010e88:	d0f3      	beq.n	8010e72 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8010e8a:	f000 fef9 	bl	8011c80 <vTaskMissedYield>
 8010e8e:	e7f0      	b.n	8010e72 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8010e90:	23ff      	movs	r3, #255	; 0xff
 8010e92:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8010e96:	f7ff fe63 	bl	8010b60 <vPortExitCritical>
 8010e9a:	bd38      	pop	{r3, r4, r5, pc}

08010e9c <xQueueGenericReset>:
{
 8010e9c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8010e9e:	b330      	cbz	r0, 8010eee <xQueueGenericReset+0x52>
 8010ea0:	4604      	mov	r4, r0
 8010ea2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8010ea4:	f7ff fe36 	bl	8010b14 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010ea8:	6821      	ldr	r1, [r4, #0]
 8010eaa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010eac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010eae:	fb03 1002 	mla	r0, r3, r2, r1
 8010eb2:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010eb8:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8010eba:	3a01      	subs	r2, #1
 8010ebc:	fb02 1303 	mla	r3, r2, r3, r1
 8010ec0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010ec2:	23ff      	movs	r3, #255	; 0xff
 8010ec4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010ec8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8010ecc:	b9d5      	cbnz	r5, 8010f04 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ece:	6923      	ldr	r3, [r4, #16]
 8010ed0:	b303      	cbz	r3, 8010f14 <xQueueGenericReset+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ed2:	f104 0010 	add.w	r0, r4, #16
 8010ed6:	f000 fe2f 	bl	8011b38 <xTaskRemoveFromEventList>
 8010eda:	b1d8      	cbz	r0, 8010f14 <xQueueGenericReset+0x78>
					queueYIELD_IF_USING_PREEMPTION();
 8010edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ee0:	4b0e      	ldr	r3, [pc, #56]	; (8010f1c <xQueueGenericReset+0x80>)
 8010ee2:	601a      	str	r2, [r3, #0]
 8010ee4:	f3bf 8f4f 	dsb	sy
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	e012      	b.n	8010f14 <xQueueGenericReset+0x78>
 8010eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef2:	b672      	cpsid	i
 8010ef4:	f383 8811 	msr	BASEPRI, r3
 8010ef8:	f3bf 8f6f 	isb	sy
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	b662      	cpsie	i
 8010f02:	e7fe      	b.n	8010f02 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010f04:	f104 0010 	add.w	r0, r4, #16
 8010f08:	f7ff fd5a 	bl	80109c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010f0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010f10:	f7ff fd56 	bl	80109c0 <vListInitialise>
	taskEXIT_CRITICAL();
 8010f14:	f7ff fe24 	bl	8010b60 <vPortExitCritical>
}
 8010f18:	2001      	movs	r0, #1
 8010f1a:	bd38      	pop	{r3, r4, r5, pc}
 8010f1c:	e000ed04 	.word	0xe000ed04

08010f20 <prvInitialiseNewQueue>:
{
 8010f20:	b510      	push	{r4, lr}
 8010f22:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8010f24:	460c      	mov	r4, r1
 8010f26:	b139      	cbz	r1, 8010f38 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010f28:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8010f2a:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010f2c:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010f2e:	2101      	movs	r1, #1
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7ff ffb3 	bl	8010e9c <xQueueGenericReset>
 8010f36:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010f38:	601b      	str	r3, [r3, #0]
 8010f3a:	e7f6      	b.n	8010f2a <prvInitialiseNewQueue+0xa>

08010f3c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010f3c:	b950      	cbnz	r0, 8010f54 <xQueueGenericCreate+0x18>
 8010f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f42:	b672      	cpsid	i
 8010f44:	f383 8811 	msr	BASEPRI, r3
 8010f48:	f3bf 8f6f 	isb	sy
 8010f4c:	f3bf 8f4f 	dsb	sy
 8010f50:	b662      	cpsie	i
 8010f52:	e7fe      	b.n	8010f52 <xQueueGenericCreate+0x16>
	{
 8010f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f56:	b083      	sub	sp, #12
 8010f58:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8010f5a:	b111      	cbz	r1, 8010f62 <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f5c:	fb01 f000 	mul.w	r0, r1, r0
 8010f60:	e000      	b.n	8010f64 <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 8010f62:	2000      	movs	r0, #0
 8010f64:	4617      	mov	r7, r2
 8010f66:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010f68:	3048      	adds	r0, #72	; 0x48
 8010f6a:	f7ff fc63 	bl	8010834 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010f6e:	4606      	mov	r6, r0
 8010f70:	b138      	cbz	r0, 8010f82 <xQueueGenericCreate+0x46>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010f72:	9000      	str	r0, [sp, #0]
 8010f74:	463b      	mov	r3, r7
 8010f76:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8010f7a:	4621      	mov	r1, r4
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	f7ff ffcf 	bl	8010f20 <prvInitialiseNewQueue>
	}
 8010f82:	4630      	mov	r0, r6
 8010f84:	b003      	add	sp, #12
 8010f86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f88 <xQueueGenericSend>:
{
 8010f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010f8e:	b170      	cbz	r0, 8010fae <xQueueGenericSend+0x26>
 8010f90:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f92:	b1b9      	cbz	r1, 8010fc4 <xQueueGenericSend+0x3c>
 8010f94:	2501      	movs	r5, #1
 8010f96:	b9dd      	cbnz	r5, 8010fd0 <xQueueGenericSend+0x48>
 8010f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f9c:	b672      	cpsid	i
 8010f9e:	f383 8811 	msr	BASEPRI, r3
 8010fa2:	f3bf 8f6f 	isb	sy
 8010fa6:	f3bf 8f4f 	dsb	sy
 8010faa:	b662      	cpsie	i
 8010fac:	e7fe      	b.n	8010fac <xQueueGenericSend+0x24>
 8010fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb2:	b672      	cpsid	i
 8010fb4:	f383 8811 	msr	BASEPRI, r3
 8010fb8:	f3bf 8f6f 	isb	sy
 8010fbc:	f3bf 8f4f 	dsb	sy
 8010fc0:	b662      	cpsie	i
 8010fc2:	e7fe      	b.n	8010fc2 <xQueueGenericSend+0x3a>
 8010fc4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010fc6:	b90a      	cbnz	r2, 8010fcc <xQueueGenericSend+0x44>
 8010fc8:	2501      	movs	r5, #1
 8010fca:	e7e4      	b.n	8010f96 <xQueueGenericSend+0xe>
 8010fcc:	2500      	movs	r5, #0
 8010fce:	e7e2      	b.n	8010f96 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	d00b      	beq.n	8010fec <xQueueGenericSend+0x64>
 8010fd4:	b97d      	cbnz	r5, 8010ff6 <xQueueGenericSend+0x6e>
 8010fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fda:	b672      	cpsid	i
 8010fdc:	f383 8811 	msr	BASEPRI, r3
 8010fe0:	f3bf 8f6f 	isb	sy
 8010fe4:	f3bf 8f4f 	dsb	sy
 8010fe8:	b662      	cpsie	i
 8010fea:	e7fe      	b.n	8010fea <xQueueGenericSend+0x62>
 8010fec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010fee:	2a01      	cmp	r2, #1
 8010ff0:	d0f0      	beq.n	8010fd4 <xQueueGenericSend+0x4c>
 8010ff2:	2500      	movs	r5, #0
 8010ff4:	e7ee      	b.n	8010fd4 <xQueueGenericSend+0x4c>
 8010ff6:	461e      	mov	r6, r3
 8010ff8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ffa:	f000 fe47 	bl	8011c8c <xTaskGetSchedulerState>
 8010ffe:	b910      	cbnz	r0, 8011006 <xQueueGenericSend+0x7e>
 8011000:	9b01      	ldr	r3, [sp, #4]
 8011002:	b103      	cbz	r3, 8011006 <xQueueGenericSend+0x7e>
 8011004:	2500      	movs	r5, #0
 8011006:	b955      	cbnz	r5, 801101e <xQueueGenericSend+0x96>
 8011008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801100c:	b672      	cpsid	i
 801100e:	f383 8811 	msr	BASEPRI, r3
 8011012:	f3bf 8f6f 	isb	sy
 8011016:	f3bf 8f4f 	dsb	sy
 801101a:	b662      	cpsie	i
 801101c:	e7fe      	b.n	801101c <xQueueGenericSend+0x94>
 801101e:	2500      	movs	r5, #0
 8011020:	e02c      	b.n	801107c <xQueueGenericSend+0xf4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011022:	4632      	mov	r2, r6
 8011024:	4639      	mov	r1, r7
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff feb4 	bl	8010d94 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801102c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801102e:	b18b      	cbz	r3, 8011054 <xQueueGenericSend+0xcc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011030:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011034:	f000 fd80 	bl	8011b38 <xTaskRemoveFromEventList>
 8011038:	b138      	cbz	r0, 801104a <xQueueGenericSend+0xc2>
							queueYIELD_IF_USING_PREEMPTION();
 801103a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801103e:	4b37      	ldr	r3, [pc, #220]	; (801111c <xQueueGenericSend+0x194>)
 8011040:	601a      	str	r2, [r3, #0]
 8011042:	f3bf 8f4f 	dsb	sy
 8011046:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801104a:	f7ff fd89 	bl	8010b60 <vPortExitCritical>
				return pdPASS;
 801104e:	2001      	movs	r0, #1
}
 8011050:	b005      	add	sp, #20
 8011052:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 8011054:	2800      	cmp	r0, #0
 8011056:	d0f8      	beq.n	801104a <xQueueGenericSend+0xc2>
						queueYIELD_IF_USING_PREEMPTION();
 8011058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801105c:	4b2f      	ldr	r3, [pc, #188]	; (801111c <xQueueGenericSend+0x194>)
 801105e:	601a      	str	r2, [r3, #0]
 8011060:	f3bf 8f4f 	dsb	sy
 8011064:	f3bf 8f6f 	isb	sy
 8011068:	e7ef      	b.n	801104a <xQueueGenericSend+0xc2>
					taskEXIT_CRITICAL();
 801106a:	f7ff fd79 	bl	8010b60 <vPortExitCritical>
					return errQUEUE_FULL;
 801106e:	2000      	movs	r0, #0
 8011070:	e7ee      	b.n	8011050 <xQueueGenericSend+0xc8>
				prvUnlockQueue( pxQueue );
 8011072:	4620      	mov	r0, r4
 8011074:	f7ff fedb 	bl	8010e2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011078:	f000 fc08 	bl	801188c <xTaskResumeAll>
		taskENTER_CRITICAL();
 801107c:	f7ff fd4a 	bl	8010b14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011080:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011082:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011084:	429a      	cmp	r2, r3
 8011086:	d3cc      	bcc.n	8011022 <xQueueGenericSend+0x9a>
 8011088:	2e02      	cmp	r6, #2
 801108a:	d0ca      	beq.n	8011022 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801108c:	9b01      	ldr	r3, [sp, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d0eb      	beq.n	801106a <xQueueGenericSend+0xe2>
				else if( xEntryTimeSet == pdFALSE )
 8011092:	b91d      	cbnz	r5, 801109c <xQueueGenericSend+0x114>
					vTaskSetTimeOutState( &xTimeOut );
 8011094:	a802      	add	r0, sp, #8
 8011096:	f000 fd97 	bl	8011bc8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801109a:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 801109c:	f7ff fd60 	bl	8010b60 <vPortExitCritical>
		vTaskSuspendAll();
 80110a0:	f000 fb5a 	bl	8011758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80110a4:	f7ff fd36 	bl	8010b14 <vPortEnterCritical>
 80110a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80110ac:	b25b      	sxtb	r3, r3
 80110ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110b2:	d102      	bne.n	80110ba <xQueueGenericSend+0x132>
 80110b4:	2300      	movs	r3, #0
 80110b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80110ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80110be:	b25b      	sxtb	r3, r3
 80110c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110c4:	d102      	bne.n	80110cc <xQueueGenericSend+0x144>
 80110c6:	2300      	movs	r3, #0
 80110c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80110cc:	f7ff fd48 	bl	8010b60 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80110d0:	a901      	add	r1, sp, #4
 80110d2:	a802      	add	r0, sp, #8
 80110d4:	f000 fd90 	bl	8011bf8 <xTaskCheckForTimeOut>
 80110d8:	b9c8      	cbnz	r0, 801110e <xQueueGenericSend+0x186>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80110da:	4620      	mov	r0, r4
 80110dc:	f7ff fe3e 	bl	8010d5c <prvIsQueueFull>
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d0c6      	beq.n	8011072 <xQueueGenericSend+0xea>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80110e4:	9901      	ldr	r1, [sp, #4]
 80110e6:	f104 0010 	add.w	r0, r4, #16
 80110ea:	f000 fd0b 	bl	8011b04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110ee:	4620      	mov	r0, r4
 80110f0:	f7ff fe9d 	bl	8010e2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110f4:	f000 fbca 	bl	801188c <xTaskResumeAll>
 80110f8:	2800      	cmp	r0, #0
 80110fa:	d1bf      	bne.n	801107c <xQueueGenericSend+0xf4>
					portYIELD_WITHIN_API();
 80110fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011100:	4b06      	ldr	r3, [pc, #24]	; (801111c <xQueueGenericSend+0x194>)
 8011102:	601a      	str	r2, [r3, #0]
 8011104:	f3bf 8f4f 	dsb	sy
 8011108:	f3bf 8f6f 	isb	sy
 801110c:	e7b6      	b.n	801107c <xQueueGenericSend+0xf4>
			prvUnlockQueue( pxQueue );
 801110e:	4620      	mov	r0, r4
 8011110:	f7ff fe8d 	bl	8010e2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011114:	f000 fbba 	bl	801188c <xTaskResumeAll>
			return errQUEUE_FULL;
 8011118:	2000      	movs	r0, #0
 801111a:	e799      	b.n	8011050 <xQueueGenericSend+0xc8>
 801111c:	e000ed04 	.word	0xe000ed04

08011120 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8011120:	b148      	cbz	r0, 8011136 <prvInitialiseMutex+0x16>
	{
 8011122:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8011124:	2100      	movs	r1, #0
 8011126:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011128:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 801112a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801112c:	460b      	mov	r3, r1
 801112e:	460a      	mov	r2, r1
 8011130:	f7ff ff2a 	bl	8010f88 <xQueueGenericSend>
 8011134:	bd08      	pop	{r3, pc}
 8011136:	4770      	bx	lr

08011138 <xQueueCreateMutex>:
	{
 8011138:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801113a:	4602      	mov	r2, r0
 801113c:	2100      	movs	r1, #0
 801113e:	2001      	movs	r0, #1
 8011140:	f7ff fefc 	bl	8010f3c <xQueueGenericCreate>
 8011144:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8011146:	f7ff ffeb 	bl	8011120 <prvInitialiseMutex>
	}
 801114a:	4620      	mov	r0, r4
 801114c:	bd10      	pop	{r4, pc}

0801114e <xQueueGenericSendFromISR>:
{
 801114e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8011152:	b170      	cbz	r0, 8011172 <xQueueGenericSendFromISR+0x24>
 8011154:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011156:	b1b9      	cbz	r1, 8011188 <xQueueGenericSendFromISR+0x3a>
 8011158:	2001      	movs	r0, #1
 801115a:	b9d8      	cbnz	r0, 8011194 <xQueueGenericSendFromISR+0x46>
 801115c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011160:	b672      	cpsid	i
 8011162:	f383 8811 	msr	BASEPRI, r3
 8011166:	f3bf 8f6f 	isb	sy
 801116a:	f3bf 8f4f 	dsb	sy
 801116e:	b662      	cpsie	i
 8011170:	e7fe      	b.n	8011170 <xQueueGenericSendFromISR+0x22>
 8011172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011176:	b672      	cpsid	i
 8011178:	f383 8811 	msr	BASEPRI, r3
 801117c:	f3bf 8f6f 	isb	sy
 8011180:	f3bf 8f4f 	dsb	sy
 8011184:	b662      	cpsie	i
 8011186:	e7fe      	b.n	8011186 <xQueueGenericSendFromISR+0x38>
 8011188:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801118a:	b908      	cbnz	r0, 8011190 <xQueueGenericSendFromISR+0x42>
 801118c:	2001      	movs	r0, #1
 801118e:	e7e4      	b.n	801115a <xQueueGenericSendFromISR+0xc>
 8011190:	2000      	movs	r0, #0
 8011192:	e7e2      	b.n	801115a <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011194:	2b02      	cmp	r3, #2
 8011196:	d00b      	beq.n	80111b0 <xQueueGenericSendFromISR+0x62>
 8011198:	b978      	cbnz	r0, 80111ba <xQueueGenericSendFromISR+0x6c>
 801119a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119e:	b672      	cpsid	i
 80111a0:	f383 8811 	msr	BASEPRI, r3
 80111a4:	f3bf 8f6f 	isb	sy
 80111a8:	f3bf 8f4f 	dsb	sy
 80111ac:	b662      	cpsie	i
 80111ae:	e7fe      	b.n	80111ae <xQueueGenericSendFromISR+0x60>
 80111b0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80111b2:	2d01      	cmp	r5, #1
 80111b4:	d0f0      	beq.n	8011198 <xQueueGenericSendFromISR+0x4a>
 80111b6:	2000      	movs	r0, #0
 80111b8:	e7ee      	b.n	8011198 <xQueueGenericSendFromISR+0x4a>
 80111ba:	461f      	mov	r7, r3
 80111bc:	4690      	mov	r8, r2
 80111be:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80111c0:	f7ff fd9a 	bl	8010cf8 <vPortValidateInterruptPriority>
	__asm volatile
 80111c4:	f3ef 8611 	mrs	r6, BASEPRI
 80111c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111cc:	b672      	cpsid	i
 80111ce:	f383 8811 	msr	BASEPRI, r3
 80111d2:	f3bf 8f6f 	isb	sy
 80111d6:	f3bf 8f4f 	dsb	sy
 80111da:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80111dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80111de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d301      	bcc.n	80111e8 <xQueueGenericSendFromISR+0x9a>
 80111e4:	2f02      	cmp	r7, #2
 80111e6:	d121      	bne.n	801122c <xQueueGenericSendFromISR+0xde>
			const int8_t cTxLock = pxQueue->cTxLock;
 80111e8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80111ec:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80111ee:	463a      	mov	r2, r7
 80111f0:	4649      	mov	r1, r9
 80111f2:	4620      	mov	r0, r4
 80111f4:	f7ff fdce 	bl	8010d94 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80111f8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80111fc:	d110      	bne.n	8011220 <xQueueGenericSendFromISR+0xd2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011200:	b1b3      	cbz	r3, 8011230 <xQueueGenericSendFromISR+0xe2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011202:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011206:	f000 fc97 	bl	8011b38 <xTaskRemoveFromEventList>
 801120a:	b198      	cbz	r0, 8011234 <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 801120c:	f1b8 0f00 	cmp.w	r8, #0
 8011210:	d012      	beq.n	8011238 <xQueueGenericSendFromISR+0xea>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011212:	2001      	movs	r0, #1
 8011214:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8011218:	f386 8811 	msr	BASEPRI, r6
}
 801121c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011220:	1c6b      	adds	r3, r5, #1
 8011222:	b25b      	sxtb	r3, r3
 8011224:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8011228:	2001      	movs	r0, #1
 801122a:	e7f5      	b.n	8011218 <xQueueGenericSendFromISR+0xca>
			xReturn = errQUEUE_FULL;
 801122c:	2000      	movs	r0, #0
 801122e:	e7f3      	b.n	8011218 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8011230:	2001      	movs	r0, #1
 8011232:	e7f1      	b.n	8011218 <xQueueGenericSendFromISR+0xca>
 8011234:	2001      	movs	r0, #1
 8011236:	e7ef      	b.n	8011218 <xQueueGenericSendFromISR+0xca>
 8011238:	2001      	movs	r0, #1
 801123a:	e7ed      	b.n	8011218 <xQueueGenericSendFromISR+0xca>

0801123c <xQueueGenericReceive>:
{
 801123c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011240:	b084      	sub	sp, #16
 8011242:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8011244:	b170      	cbz	r0, 8011264 <xQueueGenericReceive+0x28>
 8011246:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011248:	b1b9      	cbz	r1, 801127a <xQueueGenericReceive+0x3e>
 801124a:	2501      	movs	r5, #1
 801124c:	b9dd      	cbnz	r5, 8011286 <xQueueGenericReceive+0x4a>
	__asm volatile
 801124e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011252:	b672      	cpsid	i
 8011254:	f383 8811 	msr	BASEPRI, r3
 8011258:	f3bf 8f6f 	isb	sy
 801125c:	f3bf 8f4f 	dsb	sy
 8011260:	b662      	cpsie	i
 8011262:	e7fe      	b.n	8011262 <xQueueGenericReceive+0x26>
 8011264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011268:	b672      	cpsid	i
 801126a:	f383 8811 	msr	BASEPRI, r3
 801126e:	f3bf 8f6f 	isb	sy
 8011272:	f3bf 8f4f 	dsb	sy
 8011276:	b662      	cpsie	i
 8011278:	e7fe      	b.n	8011278 <xQueueGenericReceive+0x3c>
 801127a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801127c:	b90a      	cbnz	r2, 8011282 <xQueueGenericReceive+0x46>
 801127e:	2501      	movs	r5, #1
 8011280:	e7e4      	b.n	801124c <xQueueGenericReceive+0x10>
 8011282:	2500      	movs	r5, #0
 8011284:	e7e2      	b.n	801124c <xQueueGenericReceive+0x10>
 8011286:	461f      	mov	r7, r3
 8011288:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801128a:	f000 fcff 	bl	8011c8c <xTaskGetSchedulerState>
 801128e:	b910      	cbnz	r0, 8011296 <xQueueGenericReceive+0x5a>
 8011290:	9b01      	ldr	r3, [sp, #4]
 8011292:	b103      	cbz	r3, 8011296 <xQueueGenericReceive+0x5a>
 8011294:	2500      	movs	r5, #0
 8011296:	b955      	cbnz	r5, 80112ae <xQueueGenericReceive+0x72>
 8011298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129c:	b672      	cpsid	i
 801129e:	f383 8811 	msr	BASEPRI, r3
 80112a2:	f3bf 8f6f 	isb	sy
 80112a6:	f3bf 8f4f 	dsb	sy
 80112aa:	b662      	cpsie	i
 80112ac:	e7fe      	b.n	80112ac <xQueueGenericReceive+0x70>
 80112ae:	2600      	movs	r6, #0
 80112b0:	e05d      	b.n	801136e <xQueueGenericReceive+0x132>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80112b2:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80112b4:	4641      	mov	r1, r8
 80112b6:	4620      	mov	r0, r4
 80112b8:	f7ff fda7 	bl	8010e0a <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80112bc:	b9df      	cbnz	r7, 80112f6 <xQueueGenericReceive+0xba>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80112be:	3d01      	subs	r5, #1
 80112c0:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112c2:	6823      	ldr	r3, [r4, #0]
 80112c4:	b913      	cbnz	r3, 80112cc <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80112c6:	f000 fda1 	bl	8011e0c <pvTaskIncrementMutexHeldCount>
 80112ca:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80112cc:	6923      	ldr	r3, [r4, #16]
 80112ce:	b163      	cbz	r3, 80112ea <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80112d0:	f104 0010 	add.w	r0, r4, #16
 80112d4:	f000 fc30 	bl	8011b38 <xTaskRemoveFromEventList>
 80112d8:	b138      	cbz	r0, 80112ea <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 80112da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112de:	4b45      	ldr	r3, [pc, #276]	; (80113f4 <xQueueGenericReceive+0x1b8>)
 80112e0:	601a      	str	r2, [r3, #0]
 80112e2:	f3bf 8f4f 	dsb	sy
 80112e6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80112ea:	f7ff fc39 	bl	8010b60 <vPortExitCritical>
				return pdPASS;
 80112ee:	2001      	movs	r0, #1
}
 80112f0:	b004      	add	sp, #16
 80112f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80112f6:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80112f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d0f5      	beq.n	80112ea <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80112fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011302:	f000 fc19 	bl	8011b38 <xTaskRemoveFromEventList>
 8011306:	2800      	cmp	r0, #0
 8011308:	d0ef      	beq.n	80112ea <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 801130a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801130e:	4b39      	ldr	r3, [pc, #228]	; (80113f4 <xQueueGenericReceive+0x1b8>)
 8011310:	601a      	str	r2, [r3, #0]
 8011312:	f3bf 8f4f 	dsb	sy
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	e7e6      	b.n	80112ea <xQueueGenericReceive+0xae>
					taskEXIT_CRITICAL();
 801131c:	f7ff fc20 	bl	8010b60 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8011320:	2000      	movs	r0, #0
 8011322:	e7e5      	b.n	80112f0 <xQueueGenericReceive+0xb4>
					vTaskSetTimeOutState( &xTimeOut );
 8011324:	a802      	add	r0, sp, #8
 8011326:	f000 fc4f 	bl	8011bc8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801132a:	2601      	movs	r6, #1
 801132c:	e029      	b.n	8011382 <xQueueGenericReceive+0x146>
		prvLockQueue( pxQueue );
 801132e:	2300      	movs	r3, #0
 8011330:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011334:	e031      	b.n	801139a <xQueueGenericReceive+0x15e>
 8011336:	2300      	movs	r3, #0
 8011338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801133c:	e033      	b.n	80113a6 <xQueueGenericReceive+0x16a>
						taskENTER_CRITICAL();
 801133e:	f7ff fbe9 	bl	8010b14 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011342:	6860      	ldr	r0, [r4, #4]
 8011344:	f000 fcb2 	bl	8011cac <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8011348:	f7ff fc0a 	bl	8010b60 <vPortExitCritical>
 801134c:	e03b      	b.n	80113c6 <xQueueGenericReceive+0x18a>
				prvUnlockQueue( pxQueue );
 801134e:	4620      	mov	r0, r4
 8011350:	f7ff fd6d 	bl	8010e2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011354:	f000 fa9a 	bl	801188c <xTaskResumeAll>
 8011358:	e009      	b.n	801136e <xQueueGenericReceive+0x132>
			prvUnlockQueue( pxQueue );
 801135a:	4620      	mov	r0, r4
 801135c:	f7ff fd67 	bl	8010e2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011360:	f000 fa94 	bl	801188c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011364:	4620      	mov	r0, r4
 8011366:	f7ff fd08 	bl	8010d7a <prvIsQueueEmpty>
 801136a:	2800      	cmp	r0, #0
 801136c:	d140      	bne.n	80113f0 <xQueueGenericReceive+0x1b4>
		taskENTER_CRITICAL();
 801136e:	f7ff fbd1 	bl	8010b14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011372:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011374:	2d00      	cmp	r5, #0
 8011376:	d19c      	bne.n	80112b2 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011378:	9b01      	ldr	r3, [sp, #4]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d0ce      	beq.n	801131c <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
 801137e:	2e00      	cmp	r6, #0
 8011380:	d0d0      	beq.n	8011324 <xQueueGenericReceive+0xe8>
		taskEXIT_CRITICAL();
 8011382:	f7ff fbed 	bl	8010b60 <vPortExitCritical>
		vTaskSuspendAll();
 8011386:	f000 f9e7 	bl	8011758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801138a:	f7ff fbc3 	bl	8010b14 <vPortEnterCritical>
 801138e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011392:	b25b      	sxtb	r3, r3
 8011394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011398:	d0c9      	beq.n	801132e <xQueueGenericReceive+0xf2>
 801139a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801139e:	b25b      	sxtb	r3, r3
 80113a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113a4:	d0c7      	beq.n	8011336 <xQueueGenericReceive+0xfa>
 80113a6:	f7ff fbdb 	bl	8010b60 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80113aa:	a901      	add	r1, sp, #4
 80113ac:	a802      	add	r0, sp, #8
 80113ae:	f000 fc23 	bl	8011bf8 <xTaskCheckForTimeOut>
 80113b2:	2800      	cmp	r0, #0
 80113b4:	d1d1      	bne.n	801135a <xQueueGenericReceive+0x11e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80113b6:	4620      	mov	r0, r4
 80113b8:	f7ff fcdf 	bl	8010d7a <prvIsQueueEmpty>
 80113bc:	2800      	cmp	r0, #0
 80113be:	d0c6      	beq.n	801134e <xQueueGenericReceive+0x112>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80113c0:	6823      	ldr	r3, [r4, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d0bb      	beq.n	801133e <xQueueGenericReceive+0x102>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80113c6:	9901      	ldr	r1, [sp, #4]
 80113c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80113cc:	f000 fb9a 	bl	8011b04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80113d0:	4620      	mov	r0, r4
 80113d2:	f7ff fd2c 	bl	8010e2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80113d6:	f000 fa59 	bl	801188c <xTaskResumeAll>
 80113da:	2800      	cmp	r0, #0
 80113dc:	d1c7      	bne.n	801136e <xQueueGenericReceive+0x132>
					portYIELD_WITHIN_API();
 80113de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113e2:	4b04      	ldr	r3, [pc, #16]	; (80113f4 <xQueueGenericReceive+0x1b8>)
 80113e4:	601a      	str	r2, [r3, #0]
 80113e6:	f3bf 8f4f 	dsb	sy
 80113ea:	f3bf 8f6f 	isb	sy
 80113ee:	e7be      	b.n	801136e <xQueueGenericReceive+0x132>
				return errQUEUE_EMPTY;
 80113f0:	2000      	movs	r0, #0
 80113f2:	e77d      	b.n	80112f0 <xQueueGenericReceive+0xb4>
 80113f4:	e000ed04 	.word	0xe000ed04

080113f8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113f8:	4b0a      	ldr	r3, [pc, #40]	; (8011424 <prvResetNextTaskUnblockTime+0x2c>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	b94b      	cbnz	r3, 8011414 <prvResetNextTaskUnblockTime+0x1c>
 8011400:	2301      	movs	r3, #1
 8011402:	b94b      	cbnz	r3, 8011418 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011404:	4b07      	ldr	r3, [pc, #28]	; (8011424 <prvResetNextTaskUnblockTime+0x2c>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801140c:	685a      	ldr	r2, [r3, #4]
 801140e:	4b06      	ldr	r3, [pc, #24]	; (8011428 <prvResetNextTaskUnblockTime+0x30>)
 8011410:	601a      	str	r2, [r3, #0]
 8011412:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011414:	2300      	movs	r3, #0
 8011416:	e7f4      	b.n	8011402 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8011418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801141c:	4b02      	ldr	r3, [pc, #8]	; (8011428 <prvResetNextTaskUnblockTime+0x30>)
 801141e:	601a      	str	r2, [r3, #0]
 8011420:	4770      	bx	lr
 8011422:	bf00      	nop
 8011424:	20007548 	.word	0x20007548
 8011428:	20007620 	.word	0x20007620

0801142c <prvDeleteTCB>:
	{
 801142c:	b510      	push	{r4, lr}
 801142e:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8011430:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011432:	f7ff fa89 	bl	8010948 <vPortFree>
			vPortFree( pxTCB );
 8011436:	4620      	mov	r0, r4
 8011438:	f7ff fa86 	bl	8010948 <vPortFree>
 801143c:	bd10      	pop	{r4, pc}

0801143e <prvInitialiseNewTask>:
{
 801143e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011442:	4680      	mov	r8, r0
 8011444:	4699      	mov	r9, r3
 8011446:	9d08      	ldr	r5, [sp, #32]
 8011448:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801144a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801144c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801144e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011452:	4413      	add	r3, r2
 8011454:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011458:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801145c:	2300      	movs	r3, #0
 801145e:	2b0f      	cmp	r3, #15
 8011460:	d807      	bhi.n	8011472 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011462:	5cc8      	ldrb	r0, [r1, r3]
 8011464:	18e2      	adds	r2, r4, r3
 8011466:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 801146a:	5cca      	ldrb	r2, [r1, r3]
 801146c:	b10a      	cbz	r2, 8011472 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801146e:	3301      	adds	r3, #1
 8011470:	e7f5      	b.n	801145e <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011472:	2300      	movs	r3, #0
 8011474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011478:	2d06      	cmp	r5, #6
 801147a:	d900      	bls.n	801147e <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801147c:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 801147e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8011480:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011482:	f04f 0a00 	mov.w	sl, #0
 8011486:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801148a:	1d20      	adds	r0, r4, #4
 801148c:	f7ff faa3 	bl	80109d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011490:	f104 0018 	add.w	r0, r4, #24
 8011494:	f7ff fa9f 	bl	80109d6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011498:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801149a:	f1c5 0507 	rsb	r5, r5, #7
 801149e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80114a0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80114a2:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80114a6:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80114aa:	464a      	mov	r2, r9
 80114ac:	4641      	mov	r1, r8
 80114ae:	4630      	mov	r0, r6
 80114b0:	f7ff fb06 	bl	8010ac0 <pxPortInitialiseStack>
 80114b4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80114b6:	b107      	cbz	r7, 80114ba <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80114b8:	603c      	str	r4, [r7, #0]
 80114ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080114c0 <prvInitialiseTaskLists>:
{
 80114c0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80114c2:	2400      	movs	r4, #0
 80114c4:	e007      	b.n	80114d6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80114c6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80114ca:	0093      	lsls	r3, r2, #2
 80114cc:	480e      	ldr	r0, [pc, #56]	; (8011508 <prvInitialiseTaskLists+0x48>)
 80114ce:	4418      	add	r0, r3
 80114d0:	f7ff fa76 	bl	80109c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80114d4:	3401      	adds	r4, #1
 80114d6:	2c06      	cmp	r4, #6
 80114d8:	d9f5      	bls.n	80114c6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80114da:	4d0c      	ldr	r5, [pc, #48]	; (801150c <prvInitialiseTaskLists+0x4c>)
 80114dc:	4628      	mov	r0, r5
 80114de:	f7ff fa6f 	bl	80109c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80114e2:	4c0b      	ldr	r4, [pc, #44]	; (8011510 <prvInitialiseTaskLists+0x50>)
 80114e4:	4620      	mov	r0, r4
 80114e6:	f7ff fa6b 	bl	80109c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80114ea:	480a      	ldr	r0, [pc, #40]	; (8011514 <prvInitialiseTaskLists+0x54>)
 80114ec:	f7ff fa68 	bl	80109c0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80114f0:	4809      	ldr	r0, [pc, #36]	; (8011518 <prvInitialiseTaskLists+0x58>)
 80114f2:	f7ff fa65 	bl	80109c0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80114f6:	4809      	ldr	r0, [pc, #36]	; (801151c <prvInitialiseTaskLists+0x5c>)
 80114f8:	f7ff fa62 	bl	80109c0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80114fc:	4b08      	ldr	r3, [pc, #32]	; (8011520 <prvInitialiseTaskLists+0x60>)
 80114fe:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011500:	4b08      	ldr	r3, [pc, #32]	; (8011524 <prvInitialiseTaskLists+0x64>)
 8011502:	601c      	str	r4, [r3, #0]
 8011504:	bd38      	pop	{r3, r4, r5, pc}
 8011506:	bf00      	nop
 8011508:	20007550 	.word	0x20007550
 801150c:	200075f4 	.word	0x200075f4
 8011510:	20007608 	.word	0x20007608
 8011514:	20007628 	.word	0x20007628
 8011518:	20007654 	.word	0x20007654
 801151c:	20007640 	.word	0x20007640
 8011520:	20007548 	.word	0x20007548
 8011524:	2000754c 	.word	0x2000754c

08011528 <prvAddNewTaskToReadyList>:
{
 8011528:	b510      	push	{r4, lr}
 801152a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801152c:	f7ff faf2 	bl	8010b14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8011530:	4a20      	ldr	r2, [pc, #128]	; (80115b4 <prvAddNewTaskToReadyList+0x8c>)
 8011532:	6813      	ldr	r3, [r2, #0]
 8011534:	3301      	adds	r3, #1
 8011536:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011538:	4b1f      	ldr	r3, [pc, #124]	; (80115b8 <prvAddNewTaskToReadyList+0x90>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d031      	beq.n	80115a4 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8011540:	4b1e      	ldr	r3, [pc, #120]	; (80115bc <prvAddNewTaskToReadyList+0x94>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	b93b      	cbnz	r3, 8011556 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011546:	4b1c      	ldr	r3, [pc, #112]	; (80115b8 <prvAddNewTaskToReadyList+0x90>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801154c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801154e:	429a      	cmp	r2, r3
 8011550:	d801      	bhi.n	8011556 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 8011552:	4b19      	ldr	r3, [pc, #100]	; (80115b8 <prvAddNewTaskToReadyList+0x90>)
 8011554:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8011556:	4a1a      	ldr	r2, [pc, #104]	; (80115c0 <prvAddNewTaskToReadyList+0x98>)
 8011558:	6813      	ldr	r3, [r2, #0]
 801155a:	3301      	adds	r3, #1
 801155c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 801155e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011560:	2201      	movs	r2, #1
 8011562:	409a      	lsls	r2, r3
 8011564:	4917      	ldr	r1, [pc, #92]	; (80115c4 <prvAddNewTaskToReadyList+0x9c>)
 8011566:	6808      	ldr	r0, [r1, #0]
 8011568:	4302      	orrs	r2, r0
 801156a:	600a      	str	r2, [r1, #0]
 801156c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011570:	009a      	lsls	r2, r3, #2
 8011572:	1d21      	adds	r1, r4, #4
 8011574:	4814      	ldr	r0, [pc, #80]	; (80115c8 <prvAddNewTaskToReadyList+0xa0>)
 8011576:	4410      	add	r0, r2
 8011578:	f7ff fa30 	bl	80109dc <vListInsertEnd>
	taskEXIT_CRITICAL();
 801157c:	f7ff faf0 	bl	8010b60 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8011580:	4b0e      	ldr	r3, [pc, #56]	; (80115bc <prvAddNewTaskToReadyList+0x94>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	b16b      	cbz	r3, 80115a2 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011586:	4b0c      	ldr	r3, [pc, #48]	; (80115b8 <prvAddNewTaskToReadyList+0x90>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801158c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801158e:	429a      	cmp	r2, r3
 8011590:	d207      	bcs.n	80115a2 <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 8011592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011596:	4b0d      	ldr	r3, [pc, #52]	; (80115cc <prvAddNewTaskToReadyList+0xa4>)
 8011598:	601a      	str	r2, [r3, #0]
 801159a:	f3bf 8f4f 	dsb	sy
 801159e:	f3bf 8f6f 	isb	sy
 80115a2:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80115a4:	4b04      	ldr	r3, [pc, #16]	; (80115b8 <prvAddNewTaskToReadyList+0x90>)
 80115a6:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80115a8:	6813      	ldr	r3, [r2, #0]
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d1d3      	bne.n	8011556 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 80115ae:	f7ff ff87 	bl	80114c0 <prvInitialiseTaskLists>
 80115b2:	e7d0      	b.n	8011556 <prvAddNewTaskToReadyList+0x2e>
 80115b4:	200075dc 	.word	0x200075dc
 80115b8:	20007544 	.word	0x20007544
 80115bc:	2000763c 	.word	0x2000763c
 80115c0:	200075ec 	.word	0x200075ec
 80115c4:	200075f0 	.word	0x200075f0
 80115c8:	20007550 	.word	0x20007550
 80115cc:	e000ed04 	.word	0xe000ed04

080115d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80115d0:	b570      	push	{r4, r5, r6, lr}
 80115d2:	4604      	mov	r4, r0
 80115d4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80115d6:	4b1f      	ldr	r3, [pc, #124]	; (8011654 <prvAddCurrentTaskToDelayedList+0x84>)
 80115d8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115da:	4b1f      	ldr	r3, [pc, #124]	; (8011658 <prvAddCurrentTaskToDelayedList+0x88>)
 80115dc:	6818      	ldr	r0, [r3, #0]
 80115de:	3004      	adds	r0, #4
 80115e0:	f7ff fa22 	bl	8010a28 <uxListRemove>
 80115e4:	b950      	cbnz	r0, 80115fc <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80115e6:	4b1c      	ldr	r3, [pc, #112]	; (8011658 <prvAddCurrentTaskToDelayedList+0x88>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ec:	2301      	movs	r3, #1
 80115ee:	fa03 f202 	lsl.w	r2, r3, r2
 80115f2:	491a      	ldr	r1, [pc, #104]	; (801165c <prvAddCurrentTaskToDelayedList+0x8c>)
 80115f4:	680b      	ldr	r3, [r1, #0]
 80115f6:	ea23 0302 	bic.w	r3, r3, r2
 80115fa:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80115fc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8011600:	bf14      	ite	ne
 8011602:	2300      	movne	r3, #0
 8011604:	2301      	moveq	r3, #1
 8011606:	2e00      	cmp	r6, #0
 8011608:	bf08      	it	eq
 801160a:	2300      	moveq	r3, #0
 801160c:	b99b      	cbnz	r3, 8011636 <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 801160e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011610:	4b11      	ldr	r3, [pc, #68]	; (8011658 <prvAddCurrentTaskToDelayedList+0x88>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8011616:	42a5      	cmp	r5, r4
 8011618:	d814      	bhi.n	8011644 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801161a:	4b11      	ldr	r3, [pc, #68]	; (8011660 <prvAddCurrentTaskToDelayedList+0x90>)
 801161c:	6818      	ldr	r0, [r3, #0]
 801161e:	4b0e      	ldr	r3, [pc, #56]	; (8011658 <prvAddCurrentTaskToDelayedList+0x88>)
 8011620:	6819      	ldr	r1, [r3, #0]
 8011622:	3104      	adds	r1, #4
 8011624:	f7ff f9e6 	bl	80109f4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8011628:	4b0e      	ldr	r3, [pc, #56]	; (8011664 <prvAddCurrentTaskToDelayedList+0x94>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	429c      	cmp	r4, r3
 801162e:	d201      	bcs.n	8011634 <prvAddCurrentTaskToDelayedList+0x64>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8011630:	4b0c      	ldr	r3, [pc, #48]	; (8011664 <prvAddCurrentTaskToDelayedList+0x94>)
 8011632:	601c      	str	r4, [r3, #0]
 8011634:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011636:	4b08      	ldr	r3, [pc, #32]	; (8011658 <prvAddCurrentTaskToDelayedList+0x88>)
 8011638:	6819      	ldr	r1, [r3, #0]
 801163a:	3104      	adds	r1, #4
 801163c:	480a      	ldr	r0, [pc, #40]	; (8011668 <prvAddCurrentTaskToDelayedList+0x98>)
 801163e:	f7ff f9cd 	bl	80109dc <vListInsertEnd>
 8011642:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011644:	4b09      	ldr	r3, [pc, #36]	; (801166c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011646:	6818      	ldr	r0, [r3, #0]
 8011648:	4b03      	ldr	r3, [pc, #12]	; (8011658 <prvAddCurrentTaskToDelayedList+0x88>)
 801164a:	6819      	ldr	r1, [r3, #0]
 801164c:	3104      	adds	r1, #4
 801164e:	f7ff f9d1 	bl	80109f4 <vListInsert>
 8011652:	bd70      	pop	{r4, r5, r6, pc}
 8011654:	20007668 	.word	0x20007668
 8011658:	20007544 	.word	0x20007544
 801165c:	200075f0 	.word	0x200075f0
 8011660:	20007548 	.word	0x20007548
 8011664:	20007620 	.word	0x20007620
 8011668:	20007640 	.word	0x20007640
 801166c:	2000754c 	.word	0x2000754c

08011670 <xTaskCreate>:
	{
 8011670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011674:	b085      	sub	sp, #20
 8011676:	4606      	mov	r6, r0
 8011678:	460f      	mov	r7, r1
 801167a:	4615      	mov	r5, r2
 801167c:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801167e:	0090      	lsls	r0, r2, #2
 8011680:	f7ff f8d8 	bl	8010834 <pvPortMalloc>
			if( pxStack != NULL )
 8011684:	b300      	cbz	r0, 80116c8 <xTaskCreate+0x58>
 8011686:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8011688:	2054      	movs	r0, #84	; 0x54
 801168a:	f7ff f8d3 	bl	8010834 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801168e:	4604      	mov	r4, r0
 8011690:	b1b0      	cbz	r0, 80116c0 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8011692:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8011696:	b1cc      	cbz	r4, 80116cc <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011698:	2300      	movs	r3, #0
 801169a:	9303      	str	r3, [sp, #12]
 801169c:	9402      	str	r4, [sp, #8]
 801169e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116a0:	9301      	str	r3, [sp, #4]
 80116a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	4643      	mov	r3, r8
 80116a8:	462a      	mov	r2, r5
 80116aa:	4639      	mov	r1, r7
 80116ac:	4630      	mov	r0, r6
 80116ae:	f7ff fec6 	bl	801143e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116b2:	4620      	mov	r0, r4
 80116b4:	f7ff ff38 	bl	8011528 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80116b8:	2001      	movs	r0, #1
	}
 80116ba:	b005      	add	sp, #20
 80116bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80116c0:	4648      	mov	r0, r9
 80116c2:	f7ff f941 	bl	8010948 <vPortFree>
 80116c6:	e7e6      	b.n	8011696 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 80116c8:	2400      	movs	r4, #0
 80116ca:	e7e4      	b.n	8011696 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80116cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80116d0:	e7f3      	b.n	80116ba <xTaskCreate+0x4a>
	...

080116d4 <vTaskStartScheduler>:
{
 80116d4:	b500      	push	{lr}
 80116d6:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80116d8:	4b19      	ldr	r3, [pc, #100]	; (8011740 <vTaskStartScheduler+0x6c>)
 80116da:	9301      	str	r3, [sp, #4]
 80116dc:	2300      	movs	r3, #0
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	2280      	movs	r2, #128	; 0x80
 80116e2:	4918      	ldr	r1, [pc, #96]	; (8011744 <vTaskStartScheduler+0x70>)
 80116e4:	4818      	ldr	r0, [pc, #96]	; (8011748 <vTaskStartScheduler+0x74>)
 80116e6:	f7ff ffc3 	bl	8011670 <xTaskCreate>
	if( xReturn == pdPASS )
 80116ea:	2801      	cmp	r0, #1
 80116ec:	d005      	beq.n	80116fa <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80116ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80116f2:	d019      	beq.n	8011728 <vTaskStartScheduler+0x54>
}
 80116f4:	b003      	add	sp, #12
 80116f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80116fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116fe:	b672      	cpsid	i
 8011700:	f383 8811 	msr	BASEPRI, r3
 8011704:	f3bf 8f6f 	isb	sy
 8011708:	f3bf 8f4f 	dsb	sy
 801170c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 801170e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011712:	4b0e      	ldr	r3, [pc, #56]	; (801174c <vTaskStartScheduler+0x78>)
 8011714:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011716:	2201      	movs	r2, #1
 8011718:	4b0d      	ldr	r3, [pc, #52]	; (8011750 <vTaskStartScheduler+0x7c>)
 801171a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801171c:	2200      	movs	r2, #0
 801171e:	4b0d      	ldr	r3, [pc, #52]	; (8011754 <vTaskStartScheduler+0x80>)
 8011720:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8011722:	f7ff fa95 	bl	8010c50 <xPortStartScheduler>
 8011726:	e7e5      	b.n	80116f4 <vTaskStartScheduler+0x20>
 8011728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172c:	b672      	cpsid	i
 801172e:	f383 8811 	msr	BASEPRI, r3
 8011732:	f3bf 8f6f 	isb	sy
 8011736:	f3bf 8f4f 	dsb	sy
 801173a:	b662      	cpsie	i
 801173c:	e7fe      	b.n	801173c <vTaskStartScheduler+0x68>
 801173e:	bf00      	nop
 8011740:	2000761c 	.word	0x2000761c
 8011744:	08019cb8 	.word	0x08019cb8
 8011748:	08011a3d 	.word	0x08011a3d
 801174c:	20007620 	.word	0x20007620
 8011750:	2000763c 	.word	0x2000763c
 8011754:	20007668 	.word	0x20007668

08011758 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011758:	4a02      	ldr	r2, [pc, #8]	; (8011764 <vTaskSuspendAll+0xc>)
 801175a:	6813      	ldr	r3, [r2, #0]
 801175c:	3301      	adds	r3, #1
 801175e:	6013      	str	r3, [r2, #0]
 8011760:	4770      	bx	lr
 8011762:	bf00      	nop
 8011764:	200075e8 	.word	0x200075e8

08011768 <xTaskIncrementTick>:
{
 8011768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801176a:	4b3d      	ldr	r3, [pc, #244]	; (8011860 <xTaskIncrementTick+0xf8>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d16a      	bne.n	8011848 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + 1;
 8011772:	4b3c      	ldr	r3, [pc, #240]	; (8011864 <xTaskIncrementTick+0xfc>)
 8011774:	681d      	ldr	r5, [r3, #0]
 8011776:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8011778:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 801177a:	b9d5      	cbnz	r5, 80117b2 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 801177c:	4b3a      	ldr	r3, [pc, #232]	; (8011868 <xTaskIncrementTick+0x100>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	b153      	cbz	r3, 801179a <xTaskIncrementTick+0x32>
 8011784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011788:	b672      	cpsid	i
 801178a:	f383 8811 	msr	BASEPRI, r3
 801178e:	f3bf 8f6f 	isb	sy
 8011792:	f3bf 8f4f 	dsb	sy
 8011796:	b662      	cpsie	i
 8011798:	e7fe      	b.n	8011798 <xTaskIncrementTick+0x30>
 801179a:	4a33      	ldr	r2, [pc, #204]	; (8011868 <xTaskIncrementTick+0x100>)
 801179c:	6811      	ldr	r1, [r2, #0]
 801179e:	4b33      	ldr	r3, [pc, #204]	; (801186c <xTaskIncrementTick+0x104>)
 80117a0:	6818      	ldr	r0, [r3, #0]
 80117a2:	6010      	str	r0, [r2, #0]
 80117a4:	6019      	str	r1, [r3, #0]
 80117a6:	4a32      	ldr	r2, [pc, #200]	; (8011870 <xTaskIncrementTick+0x108>)
 80117a8:	6813      	ldr	r3, [r2, #0]
 80117aa:	3301      	adds	r3, #1
 80117ac:	6013      	str	r3, [r2, #0]
 80117ae:	f7ff fe23 	bl	80113f8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80117b2:	4b30      	ldr	r3, [pc, #192]	; (8011874 <xTaskIncrementTick+0x10c>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	429d      	cmp	r5, r3
 80117b8:	d23a      	bcs.n	8011830 <xTaskIncrementTick+0xc8>
BaseType_t xSwitchRequired = pdFALSE;
 80117ba:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80117bc:	4b2e      	ldr	r3, [pc, #184]	; (8011878 <xTaskIncrementTick+0x110>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80117c6:	009a      	lsls	r2, r3, #2
 80117c8:	4b2c      	ldr	r3, [pc, #176]	; (801187c <xTaskIncrementTick+0x114>)
 80117ca:	589b      	ldr	r3, [r3, r2]
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d940      	bls.n	8011852 <xTaskIncrementTick+0xea>
				xSwitchRequired = pdTRUE;
 80117d0:	2401      	movs	r4, #1
 80117d2:	e03e      	b.n	8011852 <xTaskIncrementTick+0xea>
							xSwitchRequired = pdTRUE;
 80117d4:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117d6:	4b24      	ldr	r3, [pc, #144]	; (8011868 <xTaskIncrementTick+0x100>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	b353      	cbz	r3, 8011834 <xTaskIncrementTick+0xcc>
 80117de:	2300      	movs	r3, #0
 80117e0:	bb53      	cbnz	r3, 8011838 <xTaskIncrementTick+0xd0>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80117e2:	4b21      	ldr	r3, [pc, #132]	; (8011868 <xTaskIncrementTick+0x100>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80117ea:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80117ec:	429d      	cmp	r5, r3
 80117ee:	d328      	bcc.n	8011842 <xTaskIncrementTick+0xda>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117f0:	1d37      	adds	r7, r6, #4
 80117f2:	4638      	mov	r0, r7
 80117f4:	f7ff f918 	bl	8010a28 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80117f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80117fa:	b11b      	cbz	r3, 8011804 <xTaskIncrementTick+0x9c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80117fc:	f106 0018 	add.w	r0, r6, #24
 8011800:	f7ff f912 	bl	8010a28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011804:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8011806:	2201      	movs	r2, #1
 8011808:	409a      	lsls	r2, r3
 801180a:	491d      	ldr	r1, [pc, #116]	; (8011880 <xTaskIncrementTick+0x118>)
 801180c:	6808      	ldr	r0, [r1, #0]
 801180e:	4302      	orrs	r2, r0
 8011810:	600a      	str	r2, [r1, #0]
 8011812:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011816:	009a      	lsls	r2, r3, #2
 8011818:	4639      	mov	r1, r7
 801181a:	4818      	ldr	r0, [pc, #96]	; (801187c <xTaskIncrementTick+0x114>)
 801181c:	4410      	add	r0, r2
 801181e:	f7ff f8dd 	bl	80109dc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011822:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8011824:	4b14      	ldr	r3, [pc, #80]	; (8011878 <xTaskIncrementTick+0x110>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801182a:	429a      	cmp	r2, r3
 801182c:	d2d2      	bcs.n	80117d4 <xTaskIncrementTick+0x6c>
 801182e:	e7d2      	b.n	80117d6 <xTaskIncrementTick+0x6e>
 8011830:	2400      	movs	r4, #0
 8011832:	e7d0      	b.n	80117d6 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011834:	2301      	movs	r3, #1
 8011836:	e7d3      	b.n	80117e0 <xTaskIncrementTick+0x78>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801183c:	4b0d      	ldr	r3, [pc, #52]	; (8011874 <xTaskIncrementTick+0x10c>)
 801183e:	601a      	str	r2, [r3, #0]
					break;
 8011840:	e7bc      	b.n	80117bc <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 8011842:	4a0c      	ldr	r2, [pc, #48]	; (8011874 <xTaskIncrementTick+0x10c>)
 8011844:	6013      	str	r3, [r2, #0]
						break;
 8011846:	e7b9      	b.n	80117bc <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8011848:	4a0e      	ldr	r2, [pc, #56]	; (8011884 <xTaskIncrementTick+0x11c>)
 801184a:	6813      	ldr	r3, [r2, #0]
 801184c:	3301      	adds	r3, #1
 801184e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8011850:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8011852:	4b0d      	ldr	r3, [pc, #52]	; (8011888 <xTaskIncrementTick+0x120>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	b103      	cbz	r3, 801185a <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 8011858:	2401      	movs	r4, #1
}
 801185a:	4620      	mov	r0, r4
 801185c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801185e:	bf00      	nop
 8011860:	200075e8 	.word	0x200075e8
 8011864:	20007668 	.word	0x20007668
 8011868:	20007548 	.word	0x20007548
 801186c:	2000754c 	.word	0x2000754c
 8011870:	20007624 	.word	0x20007624
 8011874:	20007620 	.word	0x20007620
 8011878:	20007544 	.word	0x20007544
 801187c:	20007550 	.word	0x20007550
 8011880:	200075f0 	.word	0x200075f0
 8011884:	200075e4 	.word	0x200075e4
 8011888:	2000766c 	.word	0x2000766c

0801188c <xTaskResumeAll>:
{
 801188c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 801188e:	4b36      	ldr	r3, [pc, #216]	; (8011968 <xTaskResumeAll+0xdc>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	b953      	cbnz	r3, 80118aa <xTaskResumeAll+0x1e>
 8011894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011898:	b672      	cpsid	i
 801189a:	f383 8811 	msr	BASEPRI, r3
 801189e:	f3bf 8f6f 	isb	sy
 80118a2:	f3bf 8f4f 	dsb	sy
 80118a6:	b662      	cpsie	i
 80118a8:	e7fe      	b.n	80118a8 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 80118aa:	f7ff f933 	bl	8010b14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80118ae:	4b2e      	ldr	r3, [pc, #184]	; (8011968 <xTaskResumeAll+0xdc>)
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	3a01      	subs	r2, #1
 80118b4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d150      	bne.n	801195e <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80118bc:	4b2b      	ldr	r3, [pc, #172]	; (801196c <xTaskResumeAll+0xe0>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	b923      	cbnz	r3, 80118cc <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 80118c2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80118c4:	f7ff f94c 	bl	8010b60 <vPortExitCritical>
}
 80118c8:	4620      	mov	r0, r4
 80118ca:	bd38      	pop	{r3, r4, r5, pc}
 80118cc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80118ce:	4b28      	ldr	r3, [pc, #160]	; (8011970 <xTaskResumeAll+0xe4>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	b31b      	cbz	r3, 801191c <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80118d4:	4b26      	ldr	r3, [pc, #152]	; (8011970 <xTaskResumeAll+0xe4>)
 80118d6:	68db      	ldr	r3, [r3, #12]
 80118d8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118da:	f104 0018 	add.w	r0, r4, #24
 80118de:	f7ff f8a3 	bl	8010a28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118e2:	1d25      	adds	r5, r4, #4
 80118e4:	4628      	mov	r0, r5
 80118e6:	f7ff f89f 	bl	8010a28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80118ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80118ec:	2201      	movs	r2, #1
 80118ee:	409a      	lsls	r2, r3
 80118f0:	4920      	ldr	r1, [pc, #128]	; (8011974 <xTaskResumeAll+0xe8>)
 80118f2:	6808      	ldr	r0, [r1, #0]
 80118f4:	4302      	orrs	r2, r0
 80118f6:	600a      	str	r2, [r1, #0]
 80118f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80118fc:	009a      	lsls	r2, r3, #2
 80118fe:	4629      	mov	r1, r5
 8011900:	481d      	ldr	r0, [pc, #116]	; (8011978 <xTaskResumeAll+0xec>)
 8011902:	4410      	add	r0, r2
 8011904:	f7ff f86a 	bl	80109dc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011908:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801190a:	4b1c      	ldr	r3, [pc, #112]	; (801197c <xTaskResumeAll+0xf0>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011910:	429a      	cmp	r2, r3
 8011912:	d3dc      	bcc.n	80118ce <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8011914:	2201      	movs	r2, #1
 8011916:	4b1a      	ldr	r3, [pc, #104]	; (8011980 <xTaskResumeAll+0xf4>)
 8011918:	601a      	str	r2, [r3, #0]
 801191a:	e7d8      	b.n	80118ce <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 801191c:	b10c      	cbz	r4, 8011922 <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 801191e:	f7ff fd6b 	bl	80113f8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011922:	4b18      	ldr	r3, [pc, #96]	; (8011984 <xTaskResumeAll+0xf8>)
 8011924:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011926:	b974      	cbnz	r4, 8011946 <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 8011928:	4b15      	ldr	r3, [pc, #84]	; (8011980 <xTaskResumeAll+0xf4>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	b1cb      	cbz	r3, 8011962 <xTaskResumeAll+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 801192e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011932:	4b15      	ldr	r3, [pc, #84]	; (8011988 <xTaskResumeAll+0xfc>)
 8011934:	601a      	str	r2, [r3, #0]
 8011936:	f3bf 8f4f 	dsb	sy
 801193a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801193e:	2401      	movs	r4, #1
 8011940:	e7c0      	b.n	80118c4 <xTaskResumeAll+0x38>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011942:	3c01      	subs	r4, #1
 8011944:	d007      	beq.n	8011956 <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 8011946:	f7ff ff0f 	bl	8011768 <xTaskIncrementTick>
 801194a:	2800      	cmp	r0, #0
 801194c:	d0f9      	beq.n	8011942 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 801194e:	2201      	movs	r2, #1
 8011950:	4b0b      	ldr	r3, [pc, #44]	; (8011980 <xTaskResumeAll+0xf4>)
 8011952:	601a      	str	r2, [r3, #0]
 8011954:	e7f5      	b.n	8011942 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 8011956:	2200      	movs	r2, #0
 8011958:	4b0a      	ldr	r3, [pc, #40]	; (8011984 <xTaskResumeAll+0xf8>)
 801195a:	601a      	str	r2, [r3, #0]
 801195c:	e7e4      	b.n	8011928 <xTaskResumeAll+0x9c>
BaseType_t xAlreadyYielded = pdFALSE;
 801195e:	2400      	movs	r4, #0
 8011960:	e7b0      	b.n	80118c4 <xTaskResumeAll+0x38>
 8011962:	2400      	movs	r4, #0
 8011964:	e7ae      	b.n	80118c4 <xTaskResumeAll+0x38>
 8011966:	bf00      	nop
 8011968:	200075e8 	.word	0x200075e8
 801196c:	200075dc 	.word	0x200075dc
 8011970:	20007628 	.word	0x20007628
 8011974:	200075f0 	.word	0x200075f0
 8011978:	20007550 	.word	0x20007550
 801197c:	20007544 	.word	0x20007544
 8011980:	2000766c 	.word	0x2000766c
 8011984:	200075e4 	.word	0x200075e4
 8011988:	e000ed04 	.word	0xe000ed04

0801198c <vTaskDelay>:
	{
 801198c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801198e:	b1b8      	cbz	r0, 80119c0 <vTaskDelay+0x34>
 8011990:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8011992:	4b11      	ldr	r3, [pc, #68]	; (80119d8 <vTaskDelay+0x4c>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	b153      	cbz	r3, 80119ae <vTaskDelay+0x22>
 8011998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801199c:	b672      	cpsid	i
 801199e:	f383 8811 	msr	BASEPRI, r3
 80119a2:	f3bf 8f6f 	isb	sy
 80119a6:	f3bf 8f4f 	dsb	sy
 80119aa:	b662      	cpsie	i
 80119ac:	e7fe      	b.n	80119ac <vTaskDelay+0x20>
			vTaskSuspendAll();
 80119ae:	f7ff fed3 	bl	8011758 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80119b2:	2100      	movs	r1, #0
 80119b4:	4620      	mov	r0, r4
 80119b6:	f7ff fe0b 	bl	80115d0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80119ba:	f7ff ff67 	bl	801188c <xTaskResumeAll>
 80119be:	e000      	b.n	80119c2 <vTaskDelay+0x36>
	BaseType_t xAlreadyYielded = pdFALSE;
 80119c0:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 80119c2:	b938      	cbnz	r0, 80119d4 <vTaskDelay+0x48>
			portYIELD_WITHIN_API();
 80119c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119c8:	4b04      	ldr	r3, [pc, #16]	; (80119dc <vTaskDelay+0x50>)
 80119ca:	601a      	str	r2, [r3, #0]
 80119cc:	f3bf 8f4f 	dsb	sy
 80119d0:	f3bf 8f6f 	isb	sy
 80119d4:	bd10      	pop	{r4, pc}
 80119d6:	bf00      	nop
 80119d8:	200075e8 	.word	0x200075e8
 80119dc:	e000ed04 	.word	0xe000ed04

080119e0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119e0:	4b13      	ldr	r3, [pc, #76]	; (8011a30 <prvCheckTasksWaitingTermination+0x50>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	b313      	cbz	r3, 8011a2c <prvCheckTasksWaitingTermination+0x4c>
{
 80119e6:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 80119e8:	f7ff feb6 	bl	8011758 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80119ec:	4b11      	ldr	r3, [pc, #68]	; (8011a34 <prvCheckTasksWaitingTermination+0x54>)
 80119ee:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 80119f0:	f7ff ff4c 	bl	801188c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80119f4:	b924      	cbnz	r4, 8011a00 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119f6:	4b0e      	ldr	r3, [pc, #56]	; (8011a30 <prvCheckTasksWaitingTermination+0x50>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d1f4      	bne.n	80119e8 <prvCheckTasksWaitingTermination+0x8>
}
 80119fe:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8011a00:	f7ff f888 	bl	8010b14 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011a04:	4b0b      	ldr	r3, [pc, #44]	; (8011a34 <prvCheckTasksWaitingTermination+0x54>)
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a0a:	1d20      	adds	r0, r4, #4
 8011a0c:	f7ff f80c 	bl	8010a28 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8011a10:	4a09      	ldr	r2, [pc, #36]	; (8011a38 <prvCheckTasksWaitingTermination+0x58>)
 8011a12:	6813      	ldr	r3, [r2, #0]
 8011a14:	3b01      	subs	r3, #1
 8011a16:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8011a18:	4a05      	ldr	r2, [pc, #20]	; (8011a30 <prvCheckTasksWaitingTermination+0x50>)
 8011a1a:	6813      	ldr	r3, [r2, #0]
 8011a1c:	3b01      	subs	r3, #1
 8011a1e:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8011a20:	f7ff f89e 	bl	8010b60 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8011a24:	4620      	mov	r0, r4
 8011a26:	f7ff fd01 	bl	801142c <prvDeleteTCB>
 8011a2a:	e7e4      	b.n	80119f6 <prvCheckTasksWaitingTermination+0x16>
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop
 8011a30:	200075e0 	.word	0x200075e0
 8011a34:	20007654 	.word	0x20007654
 8011a38:	200075dc 	.word	0x200075dc

08011a3c <prvIdleTask>:
{
 8011a3c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8011a3e:	f7ff ffcf 	bl	80119e0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011a42:	4b06      	ldr	r3, [pc, #24]	; (8011a5c <prvIdleTask+0x20>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d9f9      	bls.n	8011a3e <prvIdleTask+0x2>
				taskYIELD();
 8011a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a4e:	4b04      	ldr	r3, [pc, #16]	; (8011a60 <prvIdleTask+0x24>)
 8011a50:	601a      	str	r2, [r3, #0]
 8011a52:	f3bf 8f4f 	dsb	sy
 8011a56:	f3bf 8f6f 	isb	sy
 8011a5a:	e7f0      	b.n	8011a3e <prvIdleTask+0x2>
 8011a5c:	20007550 	.word	0x20007550
 8011a60:	e000ed04 	.word	0xe000ed04

08011a64 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011a64:	4b22      	ldr	r3, [pc, #136]	; (8011af0 <vTaskSwitchContext+0x8c>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	b9d3      	cbnz	r3, 8011aa0 <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	4b21      	ldr	r3, [pc, #132]	; (8011af4 <vTaskSwitchContext+0x90>)
 8011a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011a70:	4b21      	ldr	r3, [pc, #132]	; (8011af8 <vTaskSwitchContext+0x94>)
 8011a72:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8011a74:	fab3 f383 	clz	r3, r3
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	f1c3 031f 	rsb	r3, r3, #31
 8011a7e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8011a82:	008a      	lsls	r2, r1, #2
 8011a84:	491d      	ldr	r1, [pc, #116]	; (8011afc <vTaskSwitchContext+0x98>)
 8011a86:	588a      	ldr	r2, [r1, r2]
 8011a88:	b972      	cbnz	r2, 8011aa8 <vTaskSwitchContext+0x44>
	__asm volatile
 8011a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8e:	b672      	cpsid	i
 8011a90:	f383 8811 	msr	BASEPRI, r3
 8011a94:	f3bf 8f6f 	isb	sy
 8011a98:	f3bf 8f4f 	dsb	sy
 8011a9c:	b662      	cpsie	i
 8011a9e:	e7fe      	b.n	8011a9e <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
 8011aa0:	2201      	movs	r2, #1
 8011aa2:	4b14      	ldr	r3, [pc, #80]	; (8011af4 <vTaskSwitchContext+0x90>)
 8011aa4:	601a      	str	r2, [r3, #0]
 8011aa6:	4770      	bx	lr
{
 8011aa8:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011aaa:	4814      	ldr	r0, [pc, #80]	; (8011afc <vTaskSwitchContext+0x98>)
 8011aac:	009a      	lsls	r2, r3, #2
 8011aae:	18d4      	adds	r4, r2, r3
 8011ab0:	00a1      	lsls	r1, r4, #2
 8011ab2:	4401      	add	r1, r0
 8011ab4:	684c      	ldr	r4, [r1, #4]
 8011ab6:	6864      	ldr	r4, [r4, #4]
 8011ab8:	604c      	str	r4, [r1, #4]
 8011aba:	441a      	add	r2, r3
 8011abc:	0091      	lsls	r1, r2, #2
 8011abe:	3108      	adds	r1, #8
 8011ac0:	4408      	add	r0, r1
 8011ac2:	4284      	cmp	r4, r0
 8011ac4:	d00b      	beq.n	8011ade <vTaskSwitchContext+0x7a>
 8011ac6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011aca:	009a      	lsls	r2, r3, #2
 8011acc:	4b0b      	ldr	r3, [pc, #44]	; (8011afc <vTaskSwitchContext+0x98>)
 8011ace:	4413      	add	r3, r2
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	68da      	ldr	r2, [r3, #12]
 8011ad4:	4b0a      	ldr	r3, [pc, #40]	; (8011b00 <vTaskSwitchContext+0x9c>)
 8011ad6:	601a      	str	r2, [r3, #0]
}
 8011ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011adc:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011ade:	6860      	ldr	r0, [r4, #4]
 8011ae0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8011ae4:	0091      	lsls	r1, r2, #2
 8011ae6:	4a05      	ldr	r2, [pc, #20]	; (8011afc <vTaskSwitchContext+0x98>)
 8011ae8:	440a      	add	r2, r1
 8011aea:	6050      	str	r0, [r2, #4]
 8011aec:	e7eb      	b.n	8011ac6 <vTaskSwitchContext+0x62>
 8011aee:	bf00      	nop
 8011af0:	200075e8 	.word	0x200075e8
 8011af4:	2000766c 	.word	0x2000766c
 8011af8:	200075f0 	.word	0x200075f0
 8011afc:	20007550 	.word	0x20007550
 8011b00:	20007544 	.word	0x20007544

08011b04 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8011b04:	b950      	cbnz	r0, 8011b1c <vTaskPlaceOnEventList+0x18>
 8011b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b0a:	b672      	cpsid	i
 8011b0c:	f383 8811 	msr	BASEPRI, r3
 8011b10:	f3bf 8f6f 	isb	sy
 8011b14:	f3bf 8f4f 	dsb	sy
 8011b18:	b662      	cpsie	i
 8011b1a:	e7fe      	b.n	8011b1a <vTaskPlaceOnEventList+0x16>
{
 8011b1c:	b510      	push	{r4, lr}
 8011b1e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b20:	4b04      	ldr	r3, [pc, #16]	; (8011b34 <vTaskPlaceOnEventList+0x30>)
 8011b22:	6819      	ldr	r1, [r3, #0]
 8011b24:	3118      	adds	r1, #24
 8011b26:	f7fe ff65 	bl	80109f4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b2a:	2101      	movs	r1, #1
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f7ff fd4f 	bl	80115d0 <prvAddCurrentTaskToDelayedList>
 8011b32:	bd10      	pop	{r4, pc}
 8011b34:	20007544 	.word	0x20007544

08011b38 <xTaskRemoveFromEventList>:
{
 8011b38:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011b3a:	68c3      	ldr	r3, [r0, #12]
 8011b3c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8011b3e:	b324      	cbz	r4, 8011b8a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011b40:	f104 0518 	add.w	r5, r4, #24
 8011b44:	4628      	mov	r0, r5
 8011b46:	f7fe ff6f 	bl	8010a28 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b4a:	4b19      	ldr	r3, [pc, #100]	; (8011bb0 <xTaskRemoveFromEventList+0x78>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	bb3b      	cbnz	r3, 8011ba0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011b50:	1d25      	adds	r5, r4, #4
 8011b52:	4628      	mov	r0, r5
 8011b54:	f7fe ff68 	bl	8010a28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	409a      	lsls	r2, r3
 8011b5e:	4915      	ldr	r1, [pc, #84]	; (8011bb4 <xTaskRemoveFromEventList+0x7c>)
 8011b60:	6808      	ldr	r0, [r1, #0]
 8011b62:	4302      	orrs	r2, r0
 8011b64:	600a      	str	r2, [r1, #0]
 8011b66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011b6a:	009a      	lsls	r2, r3, #2
 8011b6c:	4629      	mov	r1, r5
 8011b6e:	4812      	ldr	r0, [pc, #72]	; (8011bb8 <xTaskRemoveFromEventList+0x80>)
 8011b70:	4410      	add	r0, r2
 8011b72:	f7fe ff33 	bl	80109dc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011b78:	4b10      	ldr	r3, [pc, #64]	; (8011bbc <xTaskRemoveFromEventList+0x84>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d913      	bls.n	8011baa <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8011b82:	2001      	movs	r0, #1
 8011b84:	4b0e      	ldr	r3, [pc, #56]	; (8011bc0 <xTaskRemoveFromEventList+0x88>)
 8011b86:	6018      	str	r0, [r3, #0]
 8011b88:	bd38      	pop	{r3, r4, r5, pc}
 8011b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b8e:	b672      	cpsid	i
 8011b90:	f383 8811 	msr	BASEPRI, r3
 8011b94:	f3bf 8f6f 	isb	sy
 8011b98:	f3bf 8f4f 	dsb	sy
 8011b9c:	b662      	cpsie	i
 8011b9e:	e7fe      	b.n	8011b9e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011ba0:	4629      	mov	r1, r5
 8011ba2:	4808      	ldr	r0, [pc, #32]	; (8011bc4 <xTaskRemoveFromEventList+0x8c>)
 8011ba4:	f7fe ff1a 	bl	80109dc <vListInsertEnd>
 8011ba8:	e7e5      	b.n	8011b76 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8011baa:	2000      	movs	r0, #0
}
 8011bac:	bd38      	pop	{r3, r4, r5, pc}
 8011bae:	bf00      	nop
 8011bb0:	200075e8 	.word	0x200075e8
 8011bb4:	200075f0 	.word	0x200075f0
 8011bb8:	20007550 	.word	0x20007550
 8011bbc:	20007544 	.word	0x20007544
 8011bc0:	2000766c 	.word	0x2000766c
 8011bc4:	20007628 	.word	0x20007628

08011bc8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8011bc8:	b130      	cbz	r0, 8011bd8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011bca:	4a09      	ldr	r2, [pc, #36]	; (8011bf0 <vTaskSetTimeOutState+0x28>)
 8011bcc:	6812      	ldr	r2, [r2, #0]
 8011bce:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011bd0:	4a08      	ldr	r2, [pc, #32]	; (8011bf4 <vTaskSetTimeOutState+0x2c>)
 8011bd2:	6812      	ldr	r2, [r2, #0]
 8011bd4:	6042      	str	r2, [r0, #4]
 8011bd6:	4770      	bx	lr
 8011bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bdc:	b672      	cpsid	i
 8011bde:	f383 8811 	msr	BASEPRI, r3
 8011be2:	f3bf 8f6f 	isb	sy
 8011be6:	f3bf 8f4f 	dsb	sy
 8011bea:	b662      	cpsie	i
 8011bec:	e7fe      	b.n	8011bec <vTaskSetTimeOutState+0x24>
 8011bee:	bf00      	nop
 8011bf0:	20007624 	.word	0x20007624
 8011bf4:	20007668 	.word	0x20007668

08011bf8 <xTaskCheckForTimeOut>:
{
 8011bf8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8011bfa:	b1c0      	cbz	r0, 8011c2e <xTaskCheckForTimeOut+0x36>
 8011bfc:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8011bfe:	b309      	cbz	r1, 8011c44 <xTaskCheckForTimeOut+0x4c>
 8011c00:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8011c02:	f7fe ff87 	bl	8010b14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8011c06:	4b1c      	ldr	r3, [pc, #112]	; (8011c78 <xTaskCheckForTimeOut+0x80>)
 8011c08:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8011c0a:	682b      	ldr	r3, [r5, #0]
 8011c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c10:	d02e      	beq.n	8011c70 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011c12:	6820      	ldr	r0, [r4, #0]
 8011c14:	4a19      	ldr	r2, [pc, #100]	; (8011c7c <xTaskCheckForTimeOut+0x84>)
 8011c16:	6812      	ldr	r2, [r2, #0]
 8011c18:	4290      	cmp	r0, r2
 8011c1a:	d002      	beq.n	8011c22 <xTaskCheckForTimeOut+0x2a>
 8011c1c:	6862      	ldr	r2, [r4, #4]
 8011c1e:	4291      	cmp	r1, r2
 8011c20:	d228      	bcs.n	8011c74 <xTaskCheckForTimeOut+0x7c>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011c22:	6862      	ldr	r2, [r4, #4]
 8011c24:	1a88      	subs	r0, r1, r2
 8011c26:	4283      	cmp	r3, r0
 8011c28:	d817      	bhi.n	8011c5a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 8011c2a:	2401      	movs	r4, #1
 8011c2c:	e01c      	b.n	8011c68 <xTaskCheckForTimeOut+0x70>
 8011c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c32:	b672      	cpsid	i
 8011c34:	f383 8811 	msr	BASEPRI, r3
 8011c38:	f3bf 8f6f 	isb	sy
 8011c3c:	f3bf 8f4f 	dsb	sy
 8011c40:	b662      	cpsie	i
 8011c42:	e7fe      	b.n	8011c42 <xTaskCheckForTimeOut+0x4a>
 8011c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c48:	b672      	cpsid	i
 8011c4a:	f383 8811 	msr	BASEPRI, r3
 8011c4e:	f3bf 8f6f 	isb	sy
 8011c52:	f3bf 8f4f 	dsb	sy
 8011c56:	b662      	cpsie	i
 8011c58:	e7fe      	b.n	8011c58 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8011c5a:	1a52      	subs	r2, r2, r1
 8011c5c:	4413      	add	r3, r2
 8011c5e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8011c60:	4620      	mov	r0, r4
 8011c62:	f7ff ffb1 	bl	8011bc8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8011c66:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011c68:	f7fe ff7a 	bl	8010b60 <vPortExitCritical>
}
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 8011c70:	2400      	movs	r4, #0
 8011c72:	e7f9      	b.n	8011c68 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 8011c74:	2401      	movs	r4, #1
 8011c76:	e7f7      	b.n	8011c68 <xTaskCheckForTimeOut+0x70>
 8011c78:	20007668 	.word	0x20007668
 8011c7c:	20007624 	.word	0x20007624

08011c80 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011c80:	2201      	movs	r2, #1
 8011c82:	4b01      	ldr	r3, [pc, #4]	; (8011c88 <vTaskMissedYield+0x8>)
 8011c84:	601a      	str	r2, [r3, #0]
 8011c86:	4770      	bx	lr
 8011c88:	2000766c 	.word	0x2000766c

08011c8c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011c8c:	4b05      	ldr	r3, [pc, #20]	; (8011ca4 <xTaskGetSchedulerState+0x18>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	b123      	cbz	r3, 8011c9c <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c92:	4b05      	ldr	r3, [pc, #20]	; (8011ca8 <xTaskGetSchedulerState+0x1c>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	b91b      	cbnz	r3, 8011ca0 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8011c98:	2002      	movs	r0, #2
 8011c9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011c9c:	2001      	movs	r0, #1
 8011c9e:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8011ca0:	2000      	movs	r0, #0
	}
 8011ca2:	4770      	bx	lr
 8011ca4:	2000763c 	.word	0x2000763c
 8011ca8:	200075e8 	.word	0x200075e8

08011cac <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8011cac:	2800      	cmp	r0, #0
 8011cae:	d047      	beq.n	8011d40 <vTaskPriorityInherit+0x94>
	{
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011cb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011cb6:	4923      	ldr	r1, [pc, #140]	; (8011d44 <vTaskPriorityInherit+0x98>)
 8011cb8:	6809      	ldr	r1, [r1, #0]
 8011cba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011cbc:	428b      	cmp	r3, r1
 8011cbe:	d216      	bcs.n	8011cee <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011cc0:	6981      	ldr	r1, [r0, #24]
 8011cc2:	2900      	cmp	r1, #0
 8011cc4:	db05      	blt.n	8011cd2 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cc6:	491f      	ldr	r1, [pc, #124]	; (8011d44 <vTaskPriorityInherit+0x98>)
 8011cc8:	6809      	ldr	r1, [r1, #0]
 8011cca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011ccc:	f1c1 0107 	rsb	r1, r1, #7
 8011cd0:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011cd2:	6960      	ldr	r0, [r4, #20]
 8011cd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011cd8:	0099      	lsls	r1, r3, #2
 8011cda:	4b1b      	ldr	r3, [pc, #108]	; (8011d48 <vTaskPriorityInherit+0x9c>)
 8011cdc:	440b      	add	r3, r1
 8011cde:	4298      	cmp	r0, r3
 8011ce0:	d006      	beq.n	8011cf0 <vTaskPriorityInherit+0x44>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	b933      	cbnz	r3, 8011cf4 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ce6:	4b17      	ldr	r3, [pc, #92]	; (8011d44 <vTaskPriorityInherit+0x98>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011cee:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	e7f7      	b.n	8011ce4 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cf4:	1d25      	adds	r5, r4, #4
 8011cf6:	4628      	mov	r0, r5
 8011cf8:	f7fe fe96 	bl	8010a28 <uxListRemove>
 8011cfc:	b968      	cbnz	r0, 8011d1a <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011cfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011d00:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8011d04:	008a      	lsls	r2, r1, #2
 8011d06:	4910      	ldr	r1, [pc, #64]	; (8011d48 <vTaskPriorityInherit+0x9c>)
 8011d08:	588a      	ldr	r2, [r1, r2]
 8011d0a:	b932      	cbnz	r2, 8011d1a <vTaskPriorityInherit+0x6e>
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	409a      	lsls	r2, r3
 8011d10:	490e      	ldr	r1, [pc, #56]	; (8011d4c <vTaskPriorityInherit+0xa0>)
 8011d12:	680b      	ldr	r3, [r1, #0]
 8011d14:	ea23 0302 	bic.w	r3, r3, r2
 8011d18:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011d1a:	4b0a      	ldr	r3, [pc, #40]	; (8011d44 <vTaskPriorityInherit+0x98>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d20:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8011d22:	2201      	movs	r2, #1
 8011d24:	409a      	lsls	r2, r3
 8011d26:	4909      	ldr	r1, [pc, #36]	; (8011d4c <vTaskPriorityInherit+0xa0>)
 8011d28:	6808      	ldr	r0, [r1, #0]
 8011d2a:	4302      	orrs	r2, r0
 8011d2c:	600a      	str	r2, [r1, #0]
 8011d2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011d32:	009a      	lsls	r2, r3, #2
 8011d34:	4629      	mov	r1, r5
 8011d36:	4804      	ldr	r0, [pc, #16]	; (8011d48 <vTaskPriorityInherit+0x9c>)
 8011d38:	4410      	add	r0, r2
 8011d3a:	f7fe fe4f 	bl	80109dc <vListInsertEnd>
 8011d3e:	bd38      	pop	{r3, r4, r5, pc}
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	20007544 	.word	0x20007544
 8011d48:	20007550 	.word	0x20007550
 8011d4c:	200075f0 	.word	0x200075f0

08011d50 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8011d50:	2800      	cmp	r0, #0
 8011d52:	d04e      	beq.n	8011df2 <xTaskPriorityDisinherit+0xa2>
	{
 8011d54:	b538      	push	{r3, r4, r5, lr}
 8011d56:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8011d58:	4a29      	ldr	r2, [pc, #164]	; (8011e00 <xTaskPriorityDisinherit+0xb0>)
 8011d5a:	6812      	ldr	r2, [r2, #0]
 8011d5c:	4290      	cmp	r0, r2
 8011d5e:	d00a      	beq.n	8011d76 <xTaskPriorityDisinherit+0x26>
 8011d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d64:	b672      	cpsid	i
 8011d66:	f383 8811 	msr	BASEPRI, r3
 8011d6a:	f3bf 8f6f 	isb	sy
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	b662      	cpsie	i
 8011d74:	e7fe      	b.n	8011d74 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8011d76:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8011d78:	b952      	cbnz	r2, 8011d90 <xTaskPriorityDisinherit+0x40>
 8011d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d7e:	b672      	cpsid	i
 8011d80:	f383 8811 	msr	BASEPRI, r3
 8011d84:	f3bf 8f6f 	isb	sy
 8011d88:	f3bf 8f4f 	dsb	sy
 8011d8c:	b662      	cpsie	i
 8011d8e:	e7fe      	b.n	8011d8e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 8011d90:	3a01      	subs	r2, #1
 8011d92:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011d94:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8011d96:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011d98:	4288      	cmp	r0, r1
 8011d9a:	d02c      	beq.n	8011df6 <xTaskPriorityDisinherit+0xa6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011d9c:	bb6a      	cbnz	r2, 8011dfa <xTaskPriorityDisinherit+0xaa>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d9e:	1d25      	adds	r5, r4, #4
 8011da0:	4628      	mov	r0, r5
 8011da2:	f7fe fe41 	bl	8010a28 <uxListRemove>
 8011da6:	b970      	cbnz	r0, 8011dc6 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011da8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011daa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8011dae:	008b      	lsls	r3, r1, #2
 8011db0:	4914      	ldr	r1, [pc, #80]	; (8011e04 <xTaskPriorityDisinherit+0xb4>)
 8011db2:	58cb      	ldr	r3, [r1, r3]
 8011db4:	b93b      	cbnz	r3, 8011dc6 <xTaskPriorityDisinherit+0x76>
 8011db6:	2301      	movs	r3, #1
 8011db8:	fa03 f202 	lsl.w	r2, r3, r2
 8011dbc:	4912      	ldr	r1, [pc, #72]	; (8011e08 <xTaskPriorityDisinherit+0xb8>)
 8011dbe:	680b      	ldr	r3, [r1, #0]
 8011dc0:	ea23 0302 	bic.w	r3, r3, r2
 8011dc4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dca:	f1c3 0207 	rsb	r2, r3, #7
 8011dce:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8011dd0:	2401      	movs	r4, #1
 8011dd2:	fa04 f203 	lsl.w	r2, r4, r3
 8011dd6:	490c      	ldr	r1, [pc, #48]	; (8011e08 <xTaskPriorityDisinherit+0xb8>)
 8011dd8:	6808      	ldr	r0, [r1, #0]
 8011dda:	4302      	orrs	r2, r0
 8011ddc:	600a      	str	r2, [r1, #0]
 8011dde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011de2:	009a      	lsls	r2, r3, #2
 8011de4:	4629      	mov	r1, r5
 8011de6:	4807      	ldr	r0, [pc, #28]	; (8011e04 <xTaskPriorityDisinherit+0xb4>)
 8011de8:	4410      	add	r0, r2
 8011dea:	f7fe fdf7 	bl	80109dc <vListInsertEnd>
					xReturn = pdTRUE;
 8011dee:	4620      	mov	r0, r4
 8011df0:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8011df2:	2000      	movs	r0, #0
 8011df4:	4770      	bx	lr
 8011df6:	2000      	movs	r0, #0
 8011df8:	bd38      	pop	{r3, r4, r5, pc}
 8011dfa:	2000      	movs	r0, #0
	}
 8011dfc:	bd38      	pop	{r3, r4, r5, pc}
 8011dfe:	bf00      	nop
 8011e00:	20007544 	.word	0x20007544
 8011e04:	20007550 	.word	0x20007550
 8011e08:	200075f0 	.word	0x200075f0

08011e0c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8011e0c:	4b05      	ldr	r3, [pc, #20]	; (8011e24 <pvTaskIncrementMutexHeldCount+0x18>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	b123      	cbz	r3, 8011e1c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8011e12:	4b04      	ldr	r3, [pc, #16]	; (8011e24 <pvTaskIncrementMutexHeldCount+0x18>)
 8011e14:	681a      	ldr	r2, [r3, #0]
 8011e16:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8011e18:	3301      	adds	r3, #1
 8011e1a:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8011e1c:	4b01      	ldr	r3, [pc, #4]	; (8011e24 <pvTaskIncrementMutexHeldCount+0x18>)
 8011e1e:	6818      	ldr	r0, [r3, #0]
	}
 8011e20:	4770      	bx	lr
 8011e22:	bf00      	nop
 8011e24:	20007544 	.word	0x20007544

08011e28 <_ZNK7Vector3IfErmERKS0_>:
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b08c      	sub	sp, #48	; 0x30
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6178      	str	r0, [r7, #20]
 8011e30:	6139      	str	r1, [r7, #16]
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	ed93 7a01 	vldr	s14, [r3, #4]
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8011e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	edd3 6a02 	vldr	s13, [r3, #8]
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8011e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011e52:	ee37 6a67 	vsub.f32	s12, s14, s15
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	ed93 7a02 	vldr	s14, [r3, #8]
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	edd3 7a00 	vldr	s15, [r3]
 8011e62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	edd3 6a00 	vldr	s13, [r3]
 8011e6c:	693b      	ldr	r3, [r7, #16]
 8011e6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011e76:	ee77 5a67 	vsub.f32	s11, s14, s15
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	ed93 7a00 	vldr	s14, [r3]
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	edd3 7a01 	vldr	s15, [r3, #4]
 8011e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	edd3 7a00 	vldr	s15, [r3]
 8011e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e9e:	f107 0318 	add.w	r3, r7, #24
 8011ea2:	eeb0 1a67 	vmov.f32	s2, s15
 8011ea6:	eef0 0a65 	vmov.f32	s1, s11
 8011eaa:	eeb0 0a46 	vmov.f32	s0, s12
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f000 f9ce 	bl	8012250 <_ZN7Vector3IfEC1Efff>
 8011eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011eb8:	f107 0218 	add.w	r2, r7, #24
 8011ebc:	ca07      	ldmia	r2, {r0, r1, r2}
 8011ebe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec8:	ee06 1a90 	vmov	s13, r1
 8011ecc:	ee07 2a10 	vmov	s14, r2
 8011ed0:	ee07 3a90 	vmov	s15, r3
 8011ed4:	eeb0 0a66 	vmov.f32	s0, s13
 8011ed8:	eef0 0a47 	vmov.f32	s1, s14
 8011edc:	eeb0 1a67 	vmov.f32	s2, s15
 8011ee0:	3730      	adds	r7, #48	; 0x30
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop

08011ee8 <_ZNK7Vector3IfEmlERKS0_>:
 8011ee8:	b480      	push	{r7}
 8011eea:	b083      	sub	sp, #12
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	ed93 7a00 	vldr	s14, [r3]
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	edd3 7a00 	vldr	s15, [r3]
 8011efe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	edd3 6a01 	vldr	s13, [r3, #4]
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011f12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	edd3 6a02 	vldr	s13, [r3, #8]
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8011f2e:	370c      	adds	r7, #12
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr

08011f38 <_ZN7Vector3IfEdVEf>:
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	ed87 0a00 	vstr	s0, [r7]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	edd3 6a00 	vldr	s13, [r3]
 8011f4a:	ed97 7a00 	vldr	s14, [r7]
 8011f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	edc3 7a00 	vstr	s15, [r3]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	edd3 6a01 	vldr	s13, [r3, #4]
 8011f5e:	ed97 7a00 	vldr	s14, [r7]
 8011f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	edc3 7a01 	vstr	s15, [r3, #4]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8011f72:	ed97 7a00 	vldr	s14, [r7]
 8011f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	edc3 7a02 	vstr	s15, [r3, #8]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	4618      	mov	r0, r3
 8011f84:	370c      	adds	r7, #12
 8011f86:	46bd      	mov	sp, r7
 8011f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8c:	4770      	bx	lr
 8011f8e:	bf00      	nop

08011f90 <_ZN7Vector3IfEmIERKS0_>:
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	ed93 7a00 	vldr	s14, [r3]
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	edd3 7a00 	vldr	s15, [r3]
 8011fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	edc3 7a00 	vstr	s15, [r3]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	edc3 7a01 	vstr	s15, [r3, #4]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	edd3 7a02 	vldr	s15, [r3, #8]
 8011fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	edc3 7a02 	vstr	s15, [r3, #8]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	370c      	adds	r7, #12
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop

08011fec <_ZN7Vector3IfEpLERKS0_>:
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	ed93 7a00 	vldr	s14, [r3]
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	edd3 7a00 	vldr	s15, [r3]
 8012002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	edc3 7a00 	vstr	s15, [r3]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	ed93 7a01 	vldr	s14, [r3, #4]
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	edd3 7a01 	vldr	s15, [r3, #4]
 8012018:	ee77 7a27 	vadd.f32	s15, s14, s15
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	edc3 7a01 	vstr	s15, [r3, #4]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	ed93 7a02 	vldr	s14, [r3, #8]
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	edd3 7a02 	vldr	s15, [r3, #8]
 801202e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	edc3 7a02 	vstr	s15, [r3, #8]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	4618      	mov	r0, r3
 801203c:	370c      	adds	r7, #12
 801203e:	46bd      	mov	sp, r7
 8012040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012044:	4770      	bx	lr
 8012046:	bf00      	nop

08012048 <_ZNK7Vector3IfEdvEf>:
 8012048:	b580      	push	{r7, lr}
 801204a:	b08c      	sub	sp, #48	; 0x30
 801204c:	af00      	add	r7, sp, #0
 801204e:	6178      	str	r0, [r7, #20]
 8012050:	ed87 0a04 	vstr	s0, [r7, #16]
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	ed93 7a00 	vldr	s14, [r3]
 801205a:	edd7 7a04 	vldr	s15, [r7, #16]
 801205e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	ed93 7a01 	vldr	s14, [r3, #4]
 8012068:	edd7 7a04 	vldr	s15, [r7, #16]
 801206c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	ed93 7a02 	vldr	s14, [r3, #8]
 8012076:	edd7 7a04 	vldr	s15, [r7, #16]
 801207a:	eec7 5a27 	vdiv.f32	s11, s14, s15
 801207e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012082:	eeb0 1a65 	vmov.f32	s2, s11
 8012086:	eef0 0a46 	vmov.f32	s1, s12
 801208a:	eeb0 0a66 	vmov.f32	s0, s13
 801208e:	4618      	mov	r0, r3
 8012090:	f000 f8de 	bl	8012250 <_ZN7Vector3IfEC1Efff>
 8012094:	f107 0318 	add.w	r3, r7, #24
 8012098:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801209c:	ca07      	ldmia	r2, {r0, r1, r2}
 801209e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80120a2:	69b9      	ldr	r1, [r7, #24]
 80120a4:	69fa      	ldr	r2, [r7, #28]
 80120a6:	6a3b      	ldr	r3, [r7, #32]
 80120a8:	ee06 1a90 	vmov	s13, r1
 80120ac:	ee07 2a10 	vmov	s14, r2
 80120b0:	ee07 3a90 	vmov	s15, r3
 80120b4:	eeb0 0a66 	vmov.f32	s0, s13
 80120b8:	eef0 0a47 	vmov.f32	s1, s14
 80120bc:	eeb0 1a67 	vmov.f32	s2, s15
 80120c0:	3730      	adds	r7, #48	; 0x30
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop

080120c8 <_ZNK7Vector3IfEmlEf>:
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b08c      	sub	sp, #48	; 0x30
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6178      	str	r0, [r7, #20]
 80120d0:	ed87 0a04 	vstr	s0, [r7, #16]
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	ed93 7a00 	vldr	s14, [r3]
 80120da:	edd7 7a04 	vldr	s15, [r7, #16]
 80120de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80120e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80120ec:	ee27 6a27 	vmul.f32	s12, s14, s15
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80120f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80120fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012102:	eeb0 1a67 	vmov.f32	s2, s15
 8012106:	eef0 0a46 	vmov.f32	s1, s12
 801210a:	eeb0 0a66 	vmov.f32	s0, s13
 801210e:	4618      	mov	r0, r3
 8012110:	f000 f89e 	bl	8012250 <_ZN7Vector3IfEC1Efff>
 8012114:	f107 0318 	add.w	r3, r7, #24
 8012118:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801211c:	ca07      	ldmia	r2, {r0, r1, r2}
 801211e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012122:	69b9      	ldr	r1, [r7, #24]
 8012124:	69fa      	ldr	r2, [r7, #28]
 8012126:	6a3b      	ldr	r3, [r7, #32]
 8012128:	ee06 1a90 	vmov	s13, r1
 801212c:	ee07 2a10 	vmov	s14, r2
 8012130:	ee07 3a90 	vmov	s15, r3
 8012134:	eeb0 0a66 	vmov.f32	s0, s13
 8012138:	eef0 0a47 	vmov.f32	s1, s14
 801213c:	eeb0 1a67 	vmov.f32	s2, s15
 8012140:	3730      	adds	r7, #48	; 0x30
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop

08012148 <_ZNK7Vector3IfEplERKS0_>:
 8012148:	b580      	push	{r7, lr}
 801214a:	b08c      	sub	sp, #48	; 0x30
 801214c:	af00      	add	r7, sp, #0
 801214e:	6178      	str	r0, [r7, #20]
 8012150:	6139      	str	r1, [r7, #16]
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	ed93 7a00 	vldr	s14, [r3]
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	edd3 7a00 	vldr	s15, [r3]
 801215e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	ed93 7a01 	vldr	s14, [r3, #4]
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	edd3 7a01 	vldr	s15, [r3, #4]
 801216e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	ed93 7a02 	vldr	s14, [r3, #8]
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	edd3 7a02 	vldr	s15, [r3, #8]
 801217e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012186:	eeb0 1a67 	vmov.f32	s2, s15
 801218a:	eef0 0a46 	vmov.f32	s1, s12
 801218e:	eeb0 0a66 	vmov.f32	s0, s13
 8012192:	4618      	mov	r0, r3
 8012194:	f000 f85c 	bl	8012250 <_ZN7Vector3IfEC1Efff>
 8012198:	f107 0318 	add.w	r3, r7, #24
 801219c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80121a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80121a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80121a6:	69b9      	ldr	r1, [r7, #24]
 80121a8:	69fa      	ldr	r2, [r7, #28]
 80121aa:	6a3b      	ldr	r3, [r7, #32]
 80121ac:	ee06 1a90 	vmov	s13, r1
 80121b0:	ee07 2a10 	vmov	s14, r2
 80121b4:	ee07 3a90 	vmov	s15, r3
 80121b8:	eeb0 0a66 	vmov.f32	s0, s13
 80121bc:	eef0 0a47 	vmov.f32	s1, s14
 80121c0:	eeb0 1a67 	vmov.f32	s2, s15
 80121c4:	3730      	adds	r7, #48	; 0x30
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop

080121cc <_ZNK7Vector3IfEmiERKS0_>:
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b08c      	sub	sp, #48	; 0x30
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6178      	str	r0, [r7, #20]
 80121d4:	6139      	str	r1, [r7, #16]
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	ed93 7a00 	vldr	s14, [r3]
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	edd3 7a00 	vldr	s15, [r3]
 80121e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80121f2:	ee37 6a67 	vsub.f32	s12, s14, s15
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8012202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801220a:	eeb0 1a67 	vmov.f32	s2, s15
 801220e:	eef0 0a46 	vmov.f32	s1, s12
 8012212:	eeb0 0a66 	vmov.f32	s0, s13
 8012216:	4618      	mov	r0, r3
 8012218:	f000 f81a 	bl	8012250 <_ZN7Vector3IfEC1Efff>
 801221c:	f107 0318 	add.w	r3, r7, #24
 8012220:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012224:	ca07      	ldmia	r2, {r0, r1, r2}
 8012226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801222a:	69b9      	ldr	r1, [r7, #24]
 801222c:	69fa      	ldr	r2, [r7, #28]
 801222e:	6a3b      	ldr	r3, [r7, #32]
 8012230:	ee06 1a90 	vmov	s13, r1
 8012234:	ee07 2a10 	vmov	s14, r2
 8012238:	ee07 3a90 	vmov	s15, r3
 801223c:	eeb0 0a66 	vmov.f32	s0, s13
 8012240:	eef0 0a47 	vmov.f32	s1, s14
 8012244:	eeb0 1a67 	vmov.f32	s2, s15
 8012248:	3730      	adds	r7, #48	; 0x30
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop

08012250 <_ZN7Vector3IfEC1Efff>:
 8012250:	b480      	push	{r7}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	60f8      	str	r0, [r7, #12]
 8012258:	ed87 0a02 	vstr	s0, [r7, #8]
 801225c:	edc7 0a01 	vstr	s1, [r7, #4]
 8012260:	ed87 1a00 	vstr	s2, [r7]
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	68ba      	ldr	r2, [r7, #8]
 8012268:	601a      	str	r2, [r3, #0]
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	605a      	str	r2, [r3, #4]
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	683a      	ldr	r2, [r7, #0]
 8012274:	609a      	str	r2, [r3, #8]
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	4618      	mov	r0, r3
 801227a:	3714      	adds	r7, #20
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr

08012284 <_ZN7Matrix3IfE10from_eulerEfff>:
 8012284:	b580      	push	{r7, lr}
 8012286:	b08a      	sub	sp, #40	; 0x28
 8012288:	af00      	add	r7, sp, #0
 801228a:	60f8      	str	r0, [r7, #12]
 801228c:	ed87 0a02 	vstr	s0, [r7, #8]
 8012290:	edc7 0a01 	vstr	s1, [r7, #4]
 8012294:	ed87 1a00 	vstr	s2, [r7]
 8012298:	ed97 0a01 	vldr	s0, [r7, #4]
 801229c:	f001 fa90 	bl	80137c0 <cosf>
 80122a0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80122a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80122a8:	f001 faca 	bl	8013840 <sinf>
 80122ac:	ed87 0a08 	vstr	s0, [r7, #32]
 80122b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80122b4:	f001 fac4 	bl	8013840 <sinf>
 80122b8:	ed87 0a07 	vstr	s0, [r7, #28]
 80122bc:	ed97 0a02 	vldr	s0, [r7, #8]
 80122c0:	f001 fa7e 	bl	80137c0 <cosf>
 80122c4:	ed87 0a06 	vstr	s0, [r7, #24]
 80122c8:	ed97 0a00 	vldr	s0, [r7]
 80122cc:	f001 fab8 	bl	8013840 <sinf>
 80122d0:	ed87 0a05 	vstr	s0, [r7, #20]
 80122d4:	ed97 0a00 	vldr	s0, [r7]
 80122d8:	f001 fa72 	bl	80137c0 <cosf>
 80122dc:	ed87 0a04 	vstr	s0, [r7, #16]
 80122e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80122e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80122e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	edc3 7a00 	vstr	s15, [r3]
 80122f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80122f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80122fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80122fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8012302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012306:	edd7 6a06 	vldr	s13, [r7, #24]
 801230a:	edd7 7a05 	vldr	s15, [r7, #20]
 801230e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	edc3 7a01 	vstr	s15, [r3, #4]
 801231c:	ed97 7a06 	vldr	s14, [r7, #24]
 8012320:	edd7 7a08 	vldr	s15, [r7, #32]
 8012324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012328:	edd7 7a04 	vldr	s15, [r7, #16]
 801232c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012330:	edd7 6a07 	vldr	s13, [r7, #28]
 8012334:	edd7 7a05 	vldr	s15, [r7, #20]
 8012338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801233c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	edc3 7a02 	vstr	s15, [r3, #8]
 8012346:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801234a:	edd7 7a05 	vldr	s15, [r7, #20]
 801234e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	edc3 7a03 	vstr	s15, [r3, #12]
 8012358:	ed97 7a07 	vldr	s14, [r7, #28]
 801235c:	edd7 7a08 	vldr	s15, [r7, #32]
 8012360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012364:	edd7 7a05 	vldr	s15, [r7, #20]
 8012368:	ee27 7a27 	vmul.f32	s14, s14, s15
 801236c:	edd7 6a06 	vldr	s13, [r7, #24]
 8012370:	edd7 7a04 	vldr	s15, [r7, #16]
 8012374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012378:	ee77 7a27 	vadd.f32	s15, s14, s15
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	edc3 7a04 	vstr	s15, [r3, #16]
 8012382:	ed97 7a06 	vldr	s14, [r7, #24]
 8012386:	edd7 7a08 	vldr	s15, [r7, #32]
 801238a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801238e:	edd7 7a05 	vldr	s15, [r7, #20]
 8012392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012396:	edd7 6a07 	vldr	s13, [r7, #28]
 801239a:	edd7 7a04 	vldr	s15, [r7, #16]
 801239e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80123a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	edc3 7a05 	vstr	s15, [r3, #20]
 80123ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80123b0:	eef1 7a67 	vneg.f32	s15, s15
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	edc3 7a06 	vstr	s15, [r3, #24]
 80123ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80123be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80123c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	edc3 7a07 	vstr	s15, [r3, #28]
 80123cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80123d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80123d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	edc3 7a08 	vstr	s15, [r3, #32]
 80123de:	bf00      	nop
 80123e0:	3728      	adds	r7, #40	; 0x28
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop

080123e8 <_ZNK7Matrix3IfEmlERK7Vector3IfE>:
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b08c      	sub	sp, #48	; 0x30
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6178      	str	r0, [r7, #20]
 80123f0:	6139      	str	r1, [r7, #16]
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	ed93 7a00 	vldr	s14, [r3]
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	edd3 7a00 	vldr	s15, [r3]
 80123fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	edd3 6a01 	vldr	s13, [r3, #4]
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	edd3 7a01 	vldr	s15, [r3, #4]
 801240e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	edd3 6a02 	vldr	s13, [r3, #8]
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012426:	ee37 6a27 	vadd.f32	s12, s14, s15
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	edd3 7a00 	vldr	s15, [r3]
 8012436:	ee27 7a27 	vmul.f32	s14, s14, s15
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	edd3 6a04 	vldr	s13, [r3, #16]
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	edd3 7a01 	vldr	s15, [r3, #4]
 8012446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801244a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	edd3 6a05 	vldr	s13, [r3, #20]
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	edd3 7a02 	vldr	s15, [r3, #8]
 801245a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801245e:	ee77 5a27 	vadd.f32	s11, s14, s15
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	ed93 7a06 	vldr	s14, [r3, #24]
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	edd3 7a00 	vldr	s15, [r3]
 801246e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	edd3 6a07 	vldr	s13, [r3, #28]
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	edd3 7a01 	vldr	s15, [r3, #4]
 801247e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	edd3 6a08 	vldr	s13, [r3, #32]
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012496:	ee77 7a27 	vadd.f32	s15, s14, s15
 801249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801249e:	eeb0 1a67 	vmov.f32	s2, s15
 80124a2:	eef0 0a65 	vmov.f32	s1, s11
 80124a6:	eeb0 0a46 	vmov.f32	s0, s12
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7ff fed0 	bl	8012250 <_ZN7Vector3IfEC1Efff>
 80124b0:	f107 0318 	add.w	r3, r7, #24
 80124b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80124b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80124ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80124be:	69b9      	ldr	r1, [r7, #24]
 80124c0:	69fa      	ldr	r2, [r7, #28]
 80124c2:	6a3b      	ldr	r3, [r7, #32]
 80124c4:	ee06 1a90 	vmov	s13, r1
 80124c8:	ee07 2a10 	vmov	s14, r2
 80124cc:	ee07 3a90 	vmov	s15, r3
 80124d0:	eeb0 0a66 	vmov.f32	s0, s13
 80124d4:	eef0 0a47 	vmov.f32	s1, s14
 80124d8:	eeb0 1a67 	vmov.f32	s2, s15
 80124dc:	3730      	adds	r7, #48	; 0x30
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop

080124e4 <_Z8inv_sqrtf>:
 80124e4:	b480      	push	{r7}
 80124e6:	b087      	sub	sp, #28
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80124ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80124f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80124f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124fa:	edc7 7a05 	vstr	s15, [r7, #20]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	613b      	str	r3, [r7, #16]
 8012502:	f107 0310 	add.w	r3, r7, #16
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	60fb      	str	r3, [r7, #12]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	105a      	asrs	r2, r3, #1
 801250e:	4b12      	ldr	r3, [pc, #72]	; (8012558 <_Z8inv_sqrtf+0x74>)
 8012510:	1a9b      	subs	r3, r3, r2
 8012512:	60fb      	str	r3, [r7, #12]
 8012514:	f107 030c 	add.w	r3, r7, #12
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	613b      	str	r3, [r7, #16]
 801251c:	ed97 7a04 	vldr	s14, [r7, #16]
 8012520:	edd7 7a05 	vldr	s15, [r7, #20]
 8012524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012528:	edd7 7a04 	vldr	s15, [r7, #16]
 801252c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012530:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8012534:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012538:	edd7 7a04 	vldr	s15, [r7, #16]
 801253c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012540:	edc7 7a04 	vstr	s15, [r7, #16]
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	ee07 3a90 	vmov	s15, r3
 801254a:	eeb0 0a67 	vmov.f32	s0, s15
 801254e:	371c      	adds	r7, #28
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr
 8012558:	5f3759df 	.word	0x5f3759df

0801255c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801255c:	b510      	push	{r4, lr}
 801255e:	4b03      	ldr	r3, [pc, #12]	; (801256c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8012560:	6003      	str	r3, [r0, #0]
 8012562:	4604      	mov	r4, r0
 8012564:	f000 fe3a 	bl	80131dc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012568:	4620      	mov	r0, r4
 801256a:	bd10      	pop	{r4, pc}
 801256c:	08019cfc 	.word	0x08019cfc

08012570 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8012570:	b510      	push	{r4, lr}
 8012572:	4b05      	ldr	r3, [pc, #20]	; (8012588 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8012574:	6003      	str	r3, [r0, #0]
 8012576:	4604      	mov	r4, r0
 8012578:	f000 fe30 	bl	80131dc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801257c:	4620      	mov	r0, r4
 801257e:	210c      	movs	r1, #12
 8012580:	f000 fe00 	bl	8013184 <_ZdlPvj>
 8012584:	4620      	mov	r0, r4
 8012586:	bd10      	pop	{r4, pc}
 8012588:	08019cfc 	.word	0x08019cfc

0801258c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801258c:	b570      	push	{r4, r5, r6, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	460d      	mov	r5, r1
 8012592:	9c06      	ldr	r4, [sp, #24]
 8012594:	4294      	cmp	r4, r2
 8012596:	4606      	mov	r6, r0
 8012598:	d009      	beq.n	80125ae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 801259a:	68b0      	ldr	r0, [r6, #8]
 801259c:	6806      	ldr	r6, [r0, #0]
 801259e:	9406      	str	r4, [sp, #24]
 80125a0:	6a34      	ldr	r4, [r6, #32]
 80125a2:	4629      	mov	r1, r5
 80125a4:	46a4      	mov	ip, r4
 80125a6:	b002      	add	sp, #8
 80125a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125ac:	4760      	bx	ip
 80125ae:	4619      	mov	r1, r3
 80125b0:	9201      	str	r2, [sp, #4]
 80125b2:	9300      	str	r3, [sp, #0]
 80125b4:	f000 fe70 	bl	8013298 <_ZNKSt9type_infoeqERKS_>
 80125b8:	9b00      	ldr	r3, [sp, #0]
 80125ba:	9a01      	ldr	r2, [sp, #4]
 80125bc:	2800      	cmp	r0, #0
 80125be:	d0ec      	beq.n	801259a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80125c0:	2006      	movs	r0, #6
 80125c2:	b002      	add	sp, #8
 80125c4:	bd70      	pop	{r4, r5, r6, pc}
 80125c6:	bf00      	nop

080125c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80125c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125cc:	b081      	sub	sp, #4
 80125ce:	460e      	mov	r6, r1
 80125d0:	4619      	mov	r1, r3
 80125d2:	461f      	mov	r7, r3
 80125d4:	4691      	mov	r9, r2
 80125d6:	4683      	mov	fp, r0
 80125d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80125da:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80125de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80125e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80125e4:	f000 fe58 	bl	8013298 <_ZNKSt9type_infoeqERKS_>
 80125e8:	b170      	cbz	r0, 8012608 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 80125ea:	2e00      	cmp	r6, #0
 80125ec:	602c      	str	r4, [r5, #0]
 80125ee:	f885 9004 	strb.w	r9, [r5, #4]
 80125f2:	db1f      	blt.n	8012634 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
 80125f4:	4434      	add	r4, r6
 80125f6:	45a0      	cmp	r8, r4
 80125f8:	bf0c      	ite	eq
 80125fa:	2406      	moveq	r4, #6
 80125fc:	2401      	movne	r4, #1
 80125fe:	71ac      	strb	r4, [r5, #6]
 8012600:	2000      	movs	r0, #0
 8012602:	b001      	add	sp, #4
 8012604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012608:	4544      	cmp	r4, r8
 801260a:	d018      	beq.n	801263e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
 801260c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8012610:	f8d0 e000 	ldr.w	lr, [r0]
 8012614:	950d      	str	r5, [sp, #52]	; 0x34
 8012616:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801261a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 801261e:	940a      	str	r4, [sp, #40]	; 0x28
 8012620:	f8de 401c 	ldr.w	r4, [lr, #28]
 8012624:	463b      	mov	r3, r7
 8012626:	464a      	mov	r2, r9
 8012628:	4631      	mov	r1, r6
 801262a:	46a4      	mov	ip, r4
 801262c:	b001      	add	sp, #4
 801262e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012632:	4760      	bx	ip
 8012634:	3602      	adds	r6, #2
 8012636:	d1e3      	bne.n	8012600 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8012638:	2301      	movs	r3, #1
 801263a:	71ab      	strb	r3, [r5, #6]
 801263c:	e7e0      	b.n	8012600 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801263e:	4651      	mov	r1, sl
 8012640:	4658      	mov	r0, fp
 8012642:	f000 fe29 	bl	8013298 <_ZNKSt9type_infoeqERKS_>
 8012646:	2800      	cmp	r0, #0
 8012648:	d0e0      	beq.n	801260c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 801264a:	2000      	movs	r0, #0
 801264c:	f885 9005 	strb.w	r9, [r5, #5]
 8012650:	b001      	add	sp, #4
 8012652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012656:	bf00      	nop

08012658 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8012658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801265c:	4607      	mov	r7, r0
 801265e:	460c      	mov	r4, r1
 8012660:	4615      	mov	r5, r2
 8012662:	461e      	mov	r6, r3
 8012664:	f000 fdd2 	bl	801320c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8012668:	b108      	cbz	r0, 801266e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 801266a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801266e:	68b8      	ldr	r0, [r7, #8]
 8012670:	6807      	ldr	r7, [r0, #0]
 8012672:	4621      	mov	r1, r4
 8012674:	69bc      	ldr	r4, [r7, #24]
 8012676:	4633      	mov	r3, r6
 8012678:	462a      	mov	r2, r5
 801267a:	46a4      	mov	ip, r4
 801267c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012680:	4760      	bx	ip
 8012682:	bf00      	nop

08012684 <_ZdlPv>:
 8012684:	f002 bfa0 	b.w	80155c8 <free>

08012688 <__aeabi_atexit>:
 8012688:	460b      	mov	r3, r1
 801268a:	4601      	mov	r1, r0
 801268c:	4618      	mov	r0, r3
 801268e:	f002 bd0d 	b.w	80150ac <__cxa_atexit>
 8012692:	bf00      	nop

08012694 <_Znwj>:
 8012694:	b510      	push	{r4, lr}
 8012696:	2800      	cmp	r0, #0
 8012698:	bf14      	ite	ne
 801269a:	4604      	movne	r4, r0
 801269c:	2401      	moveq	r4, #1
 801269e:	4620      	mov	r0, r4
 80126a0:	f002 ff8a 	bl	80155b8 <malloc>
 80126a4:	b100      	cbz	r0, 80126a8 <_Znwj+0x14>
 80126a6:	bd10      	pop	{r4, pc}
 80126a8:	f000 fd6e 	bl	8013188 <_ZSt15get_new_handlerv>
 80126ac:	b108      	cbz	r0, 80126b2 <_Znwj+0x1e>
 80126ae:	4780      	blx	r0
 80126b0:	e7f5      	b.n	801269e <_Znwj+0xa>
 80126b2:	2004      	movs	r0, #4
 80126b4:	f000 f87a 	bl	80127ac <__cxa_allocate_exception>
 80126b8:	4b02      	ldr	r3, [pc, #8]	; (80126c4 <_Znwj+0x30>)
 80126ba:	6003      	str	r3, [r0, #0]
 80126bc:	4a02      	ldr	r2, [pc, #8]	; (80126c8 <_Znwj+0x34>)
 80126be:	4903      	ldr	r1, [pc, #12]	; (80126cc <_Znwj+0x38>)
 80126c0:	f000 f8d2 	bl	8012868 <__cxa_throw>
 80126c4:	08019d54 	.word	0x08019d54
 80126c8:	0801295d 	.word	0x0801295d
 80126cc:	08019d30 	.word	0x08019d30

080126d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 80126d0:	b4f0      	push	{r4, r5, r6, r7}
 80126d2:	4c1b      	ldr	r4, [pc, #108]	; (8012740 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
 80126d4:	f850 7c08 	ldr.w	r7, [r0, #-8]
 80126d8:	6861      	ldr	r1, [r4, #4]
 80126da:	f1a0 0608 	sub.w	r6, r0, #8
 80126de:	b1c9      	cbz	r1, 8012714 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 80126e0:	19f5      	adds	r5, r6, r7
 80126e2:	42a9      	cmp	r1, r5
 80126e4:	d01b      	beq.n	801271e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
 80126e6:	684a      	ldr	r2, [r1, #4]
 80126e8:	b32a      	cbz	r2, 8012736 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 80126ea:	4295      	cmp	r5, r2
 80126ec:	d303      	bcc.n	80126f6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
 80126ee:	e022      	b.n	8012736 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 80126f0:	429d      	cmp	r5, r3
 80126f2:	d205      	bcs.n	8012700 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 80126f4:	461a      	mov	r2, r3
 80126f6:	6853      	ldr	r3, [r2, #4]
 80126f8:	1d0c      	adds	r4, r1, #4
 80126fa:	4611      	mov	r1, r2
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d1f7      	bne.n	80126f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
 8012700:	6811      	ldr	r1, [r2, #0]
 8012702:	1855      	adds	r5, r2, r1
 8012704:	42ae      	cmp	r6, r5
 8012706:	d013      	beq.n	8012730 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
 8012708:	f840 3c04 	str.w	r3, [r0, #-4]
 801270c:	6823      	ldr	r3, [r4, #0]
 801270e:	605e      	str	r6, [r3, #4]
 8012710:	bcf0      	pop	{r4, r5, r6, r7}
 8012712:	4770      	bx	lr
 8012714:	f840 1c04 	str.w	r1, [r0, #-4]
 8012718:	6066      	str	r6, [r4, #4]
 801271a:	bcf0      	pop	{r4, r5, r6, r7}
 801271c:	4770      	bx	lr
 801271e:	680b      	ldr	r3, [r1, #0]
 8012720:	684a      	ldr	r2, [r1, #4]
 8012722:	f840 2c04 	str.w	r2, [r0, #-4]
 8012726:	441f      	add	r7, r3
 8012728:	f840 7c08 	str.w	r7, [r0, #-8]
 801272c:	6066      	str	r6, [r4, #4]
 801272e:	e7ef      	b.n	8012710 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 8012730:	440f      	add	r7, r1
 8012732:	6017      	str	r7, [r2, #0]
 8012734:	e7ec      	b.n	8012710 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 8012736:	4613      	mov	r3, r2
 8012738:	3404      	adds	r4, #4
 801273a:	460a      	mov	r2, r1
 801273c:	e7e0      	b.n	8012700 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 801273e:	bf00      	nop
 8012740:	20007670 	.word	0x20007670

08012744 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 8012744:	b430      	push	{r4, r5}
 8012746:	4c18      	ldr	r4, [pc, #96]	; (80127a8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
 8012748:	f100 0108 	add.w	r1, r0, #8
 801274c:	6863      	ldr	r3, [r4, #4]
 801274e:	2908      	cmp	r1, #8
 8012750:	bf38      	it	cc
 8012752:	2108      	movcc	r1, #8
 8012754:	b313      	cbz	r3, 801279c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 8012756:	3107      	adds	r1, #7
 8012758:	681a      	ldr	r2, [r3, #0]
 801275a:	f021 0107 	bic.w	r1, r1, #7
 801275e:	4291      	cmp	r1, r2
 8012760:	d804      	bhi.n	801276c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 8012762:	e01d      	b.n	80127a0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
 8012764:	6802      	ldr	r2, [r0, #0]
 8012766:	4291      	cmp	r1, r2
 8012768:	d905      	bls.n	8012776 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 801276a:	4603      	mov	r3, r0
 801276c:	6858      	ldr	r0, [r3, #4]
 801276e:	2800      	cmp	r0, #0
 8012770:	d1f8      	bne.n	8012764 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 8012772:	bc30      	pop	{r4, r5}
 8012774:	4770      	bx	lr
 8012776:	3304      	adds	r3, #4
 8012778:	1a52      	subs	r2, r2, r1
 801277a:	2a07      	cmp	r2, #7
 801277c:	d90a      	bls.n	8012794 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 801277e:	1845      	adds	r5, r0, r1
 8012780:	6844      	ldr	r4, [r0, #4]
 8012782:	606c      	str	r4, [r5, #4]
 8012784:	681c      	ldr	r4, [r3, #0]
 8012786:	5042      	str	r2, [r0, r1]
 8012788:	6021      	str	r1, [r4, #0]
 801278a:	601d      	str	r5, [r3, #0]
 801278c:	f104 0008 	add.w	r0, r4, #8
 8012790:	bc30      	pop	{r4, r5}
 8012792:	4770      	bx	lr
 8012794:	6842      	ldr	r2, [r0, #4]
 8012796:	601a      	str	r2, [r3, #0]
 8012798:	4604      	mov	r4, r0
 801279a:	e7f7      	b.n	801278c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 801279c:	4618      	mov	r0, r3
 801279e:	e7e8      	b.n	8012772 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 80127a0:	4618      	mov	r0, r3
 80127a2:	1d23      	adds	r3, r4, #4
 80127a4:	e7e8      	b.n	8012778 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 80127a6:	bf00      	nop
 80127a8:	20007670 	.word	0x20007670

080127ac <__cxa_allocate_exception>:
 80127ac:	b538      	push	{r3, r4, r5, lr}
 80127ae:	f100 0580 	add.w	r5, r0, #128	; 0x80
 80127b2:	4628      	mov	r0, r5
 80127b4:	f002 ff00 	bl	80155b8 <malloc>
 80127b8:	4604      	mov	r4, r0
 80127ba:	b138      	cbz	r0, 80127cc <__cxa_allocate_exception+0x20>
 80127bc:	2280      	movs	r2, #128	; 0x80
 80127be:	2100      	movs	r1, #0
 80127c0:	4620      	mov	r0, r4
 80127c2:	f003 f94b 	bl	8015a5c <memset>
 80127c6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80127ca:	bd38      	pop	{r3, r4, r5, pc}
 80127cc:	4628      	mov	r0, r5
 80127ce:	f7ff ffb9 	bl	8012744 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 80127d2:	4604      	mov	r4, r0
 80127d4:	2800      	cmp	r0, #0
 80127d6:	d1f1      	bne.n	80127bc <__cxa_allocate_exception+0x10>
 80127d8:	f000 feba 	bl	8013550 <_ZSt9terminatev>

080127dc <__cxa_free_exception>:
 80127dc:	4a06      	ldr	r2, [pc, #24]	; (80127f8 <__cxa_free_exception+0x1c>)
 80127de:	6893      	ldr	r3, [r2, #8]
 80127e0:	3880      	subs	r0, #128	; 0x80
 80127e2:	4298      	cmp	r0, r3
 80127e4:	d905      	bls.n	80127f2 <__cxa_free_exception+0x16>
 80127e6:	68d2      	ldr	r2, [r2, #12]
 80127e8:	4413      	add	r3, r2
 80127ea:	4298      	cmp	r0, r3
 80127ec:	d201      	bcs.n	80127f2 <__cxa_free_exception+0x16>
 80127ee:	f7ff bf6f 	b.w	80126d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 80127f2:	f002 bee9 	b.w	80155c8 <free>
 80127f6:	bf00      	nop
 80127f8:	20007670 	.word	0x20007670

080127fc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	4c08      	ldr	r4, [pc, #32]	; (8012820 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8012800:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8012804:	4628      	mov	r0, r5
 8012806:	60e5      	str	r5, [r4, #12]
 8012808:	f002 fed6 	bl	80155b8 <malloc>
 801280c:	60a0      	str	r0, [r4, #8]
 801280e:	b120      	cbz	r0, 801281a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 8012810:	2300      	movs	r3, #0
 8012812:	6060      	str	r0, [r4, #4]
 8012814:	6005      	str	r5, [r0, #0]
 8012816:	6043      	str	r3, [r0, #4]
 8012818:	bd38      	pop	{r3, r4, r5, pc}
 801281a:	60e0      	str	r0, [r4, #12]
 801281c:	6060      	str	r0, [r4, #4]
 801281e:	bd38      	pop	{r3, r4, r5, pc}
 8012820:	20007670 	.word	0x20007670

08012824 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8012824:	2801      	cmp	r0, #1
 8012826:	b510      	push	{r4, lr}
 8012828:	d81a      	bhi.n	8012860 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 801282a:	f3bf 8f5b 	dmb	ish
 801282e:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8012832:	e853 2f00 	ldrex	r2, [r3]
 8012836:	3a01      	subs	r2, #1
 8012838:	e843 2000 	strex	r0, r2, [r3]
 801283c:	2800      	cmp	r0, #0
 801283e:	d1f8      	bne.n	8012832 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8012840:	f3bf 8f5b 	dmb	ish
 8012844:	b95a      	cbnz	r2, 801285e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 8012846:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 801284a:	f101 0458 	add.w	r4, r1, #88	; 0x58
 801284e:	b10b      	cbz	r3, 8012854 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 8012850:	4620      	mov	r0, r4
 8012852:	4798      	blx	r3
 8012854:	4620      	mov	r0, r4
 8012856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801285a:	f7ff bfbf 	b.w	80127dc <__cxa_free_exception>
 801285e:	bd10      	pop	{r4, pc}
 8012860:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8012864:	f000 fe60 	bl	8013528 <_ZN10__cxxabiv111__terminateEPFvvE>

08012868 <__cxa_throw>:
 8012868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801286a:	4604      	mov	r4, r0
 801286c:	460f      	mov	r7, r1
 801286e:	4616      	mov	r6, r2
 8012870:	f000 f890 	bl	8012994 <__cxa_get_globals>
 8012874:	6843      	ldr	r3, [r0, #4]
 8012876:	2501      	movs	r5, #1
 8012878:	442b      	add	r3, r5
 801287a:	6043      	str	r3, [r0, #4]
 801287c:	f844 7c78 	str.w	r7, [r4, #-120]
 8012880:	f844 6c74 	str.w	r6, [r4, #-116]
 8012884:	f844 5c80 	str.w	r5, [r4, #-128]
 8012888:	f000 fe82 	bl	8013590 <_ZSt14get_unexpectedv>
 801288c:	f844 0c70 	str.w	r0, [r4, #-112]
 8012890:	f000 fe76 	bl	8013580 <_ZSt13get_terminatev>
 8012894:	2347      	movs	r3, #71	; 0x47
 8012896:	2243      	movs	r2, #67	; 0x43
 8012898:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 801289c:	4910      	ldr	r1, [pc, #64]	; (80128e0 <__cxa_throw+0x78>)
 801289e:	f804 3c58 	strb.w	r3, [r4, #-88]
 80128a2:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 80128a6:	232b      	movs	r3, #43	; 0x2b
 80128a8:	2755      	movs	r7, #85	; 0x55
 80128aa:	2600      	movs	r6, #0
 80128ac:	f844 0c6c 	str.w	r0, [r4, #-108]
 80128b0:	f804 ec57 	strb.w	lr, [r4, #-87]
 80128b4:	f844 1c50 	str.w	r1, [r4, #-80]
 80128b8:	f804 2c55 	strb.w	r2, [r4, #-85]
 80128bc:	f804 2c54 	strb.w	r2, [r4, #-84]
 80128c0:	f804 3c53 	strb.w	r3, [r4, #-83]
 80128c4:	f804 3c52 	strb.w	r3, [r4, #-82]
 80128c8:	f804 7c56 	strb.w	r7, [r4, #-86]
 80128cc:	f804 6c51 	strb.w	r6, [r4, #-81]
 80128d0:	4628      	mov	r0, r5
 80128d2:	f7f4 ff57 	bl	8007784 <_Unwind_RaiseException>
 80128d6:	4628      	mov	r0, r5
 80128d8:	f000 fda2 	bl	8013420 <__cxa_begin_catch>
 80128dc:	f000 fe38 	bl	8013550 <_ZSt9terminatev>
 80128e0:	08012825 	.word	0x08012825

080128e4 <__cxa_rethrow>:
 80128e4:	b510      	push	{r4, lr}
 80128e6:	f000 f855 	bl	8012994 <__cxa_get_globals>
 80128ea:	6842      	ldr	r2, [r0, #4]
 80128ec:	6804      	ldr	r4, [r0, #0]
 80128ee:	3201      	adds	r2, #1
 80128f0:	6042      	str	r2, [r0, #4]
 80128f2:	b164      	cbz	r4, 801290e <__cxa_rethrow+0x2a>
 80128f4:	f894 2020 	ldrb.w	r2, [r4, #32]
 80128f8:	2a47      	cmp	r2, #71	; 0x47
 80128fa:	d00a      	beq.n	8012912 <__cxa_rethrow+0x2e>
 80128fc:	2200      	movs	r2, #0
 80128fe:	6002      	str	r2, [r0, #0]
 8012900:	3420      	adds	r4, #32
 8012902:	4620      	mov	r0, r4
 8012904:	f7f4 ff62 	bl	80077cc <_Unwind_Resume_or_Rethrow>
 8012908:	4620      	mov	r0, r4
 801290a:	f000 fd89 	bl	8013420 <__cxa_begin_catch>
 801290e:	f000 fe1f 	bl	8013550 <_ZSt9terminatev>
 8012912:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8012916:	2a4e      	cmp	r2, #78	; 0x4e
 8012918:	d1f0      	bne.n	80128fc <__cxa_rethrow+0x18>
 801291a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 801291e:	2a55      	cmp	r2, #85	; 0x55
 8012920:	d1ec      	bne.n	80128fc <__cxa_rethrow+0x18>
 8012922:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8012926:	2a43      	cmp	r2, #67	; 0x43
 8012928:	d1e8      	bne.n	80128fc <__cxa_rethrow+0x18>
 801292a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801292e:	2a43      	cmp	r2, #67	; 0x43
 8012930:	d1e4      	bne.n	80128fc <__cxa_rethrow+0x18>
 8012932:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8012936:	2a2b      	cmp	r2, #43	; 0x2b
 8012938:	d1e0      	bne.n	80128fc <__cxa_rethrow+0x18>
 801293a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 801293e:	2a2b      	cmp	r2, #43	; 0x2b
 8012940:	d1dc      	bne.n	80128fc <__cxa_rethrow+0x18>
 8012942:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8012946:	2a01      	cmp	r2, #1
 8012948:	d8d8      	bhi.n	80128fc <__cxa_rethrow+0x18>
 801294a:	6962      	ldr	r2, [r4, #20]
 801294c:	4252      	negs	r2, r2
 801294e:	6162      	str	r2, [r4, #20]
 8012950:	e7d6      	b.n	8012900 <__cxa_rethrow+0x1c>
 8012952:	bf00      	nop

08012954 <_ZNKSt9bad_alloc4whatEv>:
 8012954:	4800      	ldr	r0, [pc, #0]	; (8012958 <_ZNKSt9bad_alloc4whatEv+0x4>)
 8012956:	4770      	bx	lr
 8012958:	08019d20 	.word	0x08019d20

0801295c <_ZNSt9bad_allocD1Ev>:
 801295c:	b510      	push	{r4, lr}
 801295e:	4b03      	ldr	r3, [pc, #12]	; (801296c <_ZNSt9bad_allocD1Ev+0x10>)
 8012960:	6003      	str	r3, [r0, #0]
 8012962:	4604      	mov	r4, r0
 8012964:	f000 fcae 	bl	80132c4 <_ZNSt9exceptionD1Ev>
 8012968:	4620      	mov	r0, r4
 801296a:	bd10      	pop	{r4, pc}
 801296c:	08019d54 	.word	0x08019d54

08012970 <_ZNSt9bad_allocD0Ev>:
 8012970:	b510      	push	{r4, lr}
 8012972:	4b05      	ldr	r3, [pc, #20]	; (8012988 <_ZNSt9bad_allocD0Ev+0x18>)
 8012974:	6003      	str	r3, [r0, #0]
 8012976:	4604      	mov	r4, r0
 8012978:	f000 fca4 	bl	80132c4 <_ZNSt9exceptionD1Ev>
 801297c:	4620      	mov	r0, r4
 801297e:	2104      	movs	r1, #4
 8012980:	f000 fc00 	bl	8013184 <_ZdlPvj>
 8012984:	4620      	mov	r0, r4
 8012986:	bd10      	pop	{r4, pc}
 8012988:	08019d54 	.word	0x08019d54

0801298c <__cxa_get_globals_fast>:
 801298c:	4800      	ldr	r0, [pc, #0]	; (8012990 <__cxa_get_globals_fast+0x4>)
 801298e:	4770      	bx	lr
 8012990:	20007680 	.word	0x20007680

08012994 <__cxa_get_globals>:
 8012994:	4800      	ldr	r0, [pc, #0]	; (8012998 <__cxa_get_globals+0x4>)
 8012996:	4770      	bx	lr
 8012998:	20007680 	.word	0x20007680

0801299c <__cxa_end_cleanup>:
 801299c:	b41e      	push	{r1, r2, r3, r4}
 801299e:	f000 f891 	bl	8012ac4 <__gnu_end_cleanup>
 80129a2:	bc1e      	pop	{r1, r2, r3, r4}
 80129a4:	f7f4 ff00 	bl	80077a8 <_Unwind_Resume>

080129a8 <__cxa_type_match>:
 80129a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129aa:	7802      	ldrb	r2, [r0, #0]
 80129ac:	2a47      	cmp	r2, #71	; 0x47
 80129ae:	b083      	sub	sp, #12
 80129b0:	460d      	mov	r5, r1
 80129b2:	461f      	mov	r7, r3
 80129b4:	d01e      	beq.n	80129f4 <__cxa_type_match+0x4c>
 80129b6:	2300      	movs	r3, #0
 80129b8:	4c27      	ldr	r4, [pc, #156]	; (8012a58 <__cxa_type_match+0xb0>)
 80129ba:	9301      	str	r3, [sp, #4]
 80129bc:	6823      	ldr	r3, [r4, #0]
 80129be:	4620      	mov	r0, r4
 80129c0:	689b      	ldr	r3, [r3, #8]
 80129c2:	4798      	blx	r3
 80129c4:	b180      	cbz	r0, 80129e8 <__cxa_type_match+0x40>
 80129c6:	9b01      	ldr	r3, [sp, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	9301      	str	r3, [sp, #4]
 80129cc:	2602      	movs	r6, #2
 80129ce:	682b      	ldr	r3, [r5, #0]
 80129d0:	4621      	mov	r1, r4
 80129d2:	4628      	mov	r0, r5
 80129d4:	691c      	ldr	r4, [r3, #16]
 80129d6:	aa01      	add	r2, sp, #4
 80129d8:	2301      	movs	r3, #1
 80129da:	47a0      	blx	r4
 80129dc:	b130      	cbz	r0, 80129ec <__cxa_type_match+0x44>
 80129de:	9b01      	ldr	r3, [sp, #4]
 80129e0:	603b      	str	r3, [r7, #0]
 80129e2:	4630      	mov	r0, r6
 80129e4:	b003      	add	sp, #12
 80129e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129e8:	2601      	movs	r6, #1
 80129ea:	e7f0      	b.n	80129ce <__cxa_type_match+0x26>
 80129ec:	4606      	mov	r6, r0
 80129ee:	4630      	mov	r0, r6
 80129f0:	b003      	add	sp, #12
 80129f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129f4:	7843      	ldrb	r3, [r0, #1]
 80129f6:	2b4e      	cmp	r3, #78	; 0x4e
 80129f8:	d1dd      	bne.n	80129b6 <__cxa_type_match+0xe>
 80129fa:	7883      	ldrb	r3, [r0, #2]
 80129fc:	2b55      	cmp	r3, #85	; 0x55
 80129fe:	d1da      	bne.n	80129b6 <__cxa_type_match+0xe>
 8012a00:	78c3      	ldrb	r3, [r0, #3]
 8012a02:	2b43      	cmp	r3, #67	; 0x43
 8012a04:	d019      	beq.n	8012a3a <__cxa_type_match+0x92>
 8012a06:	78c3      	ldrb	r3, [r0, #3]
 8012a08:	2b43      	cmp	r3, #67	; 0x43
 8012a0a:	d1d4      	bne.n	80129b6 <__cxa_type_match+0xe>
 8012a0c:	7903      	ldrb	r3, [r0, #4]
 8012a0e:	2b43      	cmp	r3, #67	; 0x43
 8012a10:	d1d1      	bne.n	80129b6 <__cxa_type_match+0xe>
 8012a12:	7943      	ldrb	r3, [r0, #5]
 8012a14:	2b2b      	cmp	r3, #43	; 0x2b
 8012a16:	d1ce      	bne.n	80129b6 <__cxa_type_match+0xe>
 8012a18:	7983      	ldrb	r3, [r0, #6]
 8012a1a:	2b2b      	cmp	r3, #43	; 0x2b
 8012a1c:	d1cb      	bne.n	80129b6 <__cxa_type_match+0xe>
 8012a1e:	79c3      	ldrb	r3, [r0, #7]
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d8c8      	bhi.n	80129b6 <__cxa_type_match+0xe>
 8012a24:	d004      	beq.n	8012a30 <__cxa_type_match+0x88>
 8012a26:	f850 4c20 	ldr.w	r4, [r0, #-32]
 8012a2a:	3058      	adds	r0, #88	; 0x58
 8012a2c:	9001      	str	r0, [sp, #4]
 8012a2e:	e7c5      	b.n	80129bc <__cxa_type_match+0x14>
 8012a30:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8012a34:	f850 4c78 	ldr.w	r4, [r0, #-120]
 8012a38:	e7f8      	b.n	8012a2c <__cxa_type_match+0x84>
 8012a3a:	7903      	ldrb	r3, [r0, #4]
 8012a3c:	2b46      	cmp	r3, #70	; 0x46
 8012a3e:	d1e2      	bne.n	8012a06 <__cxa_type_match+0x5e>
 8012a40:	7943      	ldrb	r3, [r0, #5]
 8012a42:	2b4f      	cmp	r3, #79	; 0x4f
 8012a44:	d1df      	bne.n	8012a06 <__cxa_type_match+0x5e>
 8012a46:	7983      	ldrb	r3, [r0, #6]
 8012a48:	2b52      	cmp	r3, #82	; 0x52
 8012a4a:	d1dc      	bne.n	8012a06 <__cxa_type_match+0x5e>
 8012a4c:	79c3      	ldrb	r3, [r0, #7]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d1d9      	bne.n	8012a06 <__cxa_type_match+0x5e>
 8012a52:	9301      	str	r3, [sp, #4]
 8012a54:	4c01      	ldr	r4, [pc, #4]	; (8012a5c <__cxa_type_match+0xb4>)
 8012a56:	e7b1      	b.n	80129bc <__cxa_type_match+0x14>
 8012a58:	08019df0 	.word	0x08019df0
 8012a5c:	08019de8 	.word	0x08019de8

08012a60 <__cxa_begin_cleanup>:
 8012a60:	b510      	push	{r4, lr}
 8012a62:	4604      	mov	r4, r0
 8012a64:	f7ff ff96 	bl	8012994 <__cxa_get_globals>
 8012a68:	7823      	ldrb	r3, [r4, #0]
 8012a6a:	2b47      	cmp	r3, #71	; 0x47
 8012a6c:	f1a4 0220 	sub.w	r2, r4, #32
 8012a70:	d004      	beq.n	8012a7c <__cxa_begin_cleanup+0x1c>
 8012a72:	6883      	ldr	r3, [r0, #8]
 8012a74:	bb23      	cbnz	r3, 8012ac0 <__cxa_begin_cleanup+0x60>
 8012a76:	6082      	str	r2, [r0, #8]
 8012a78:	2001      	movs	r0, #1
 8012a7a:	bd10      	pop	{r4, pc}
 8012a7c:	7863      	ldrb	r3, [r4, #1]
 8012a7e:	2b4e      	cmp	r3, #78	; 0x4e
 8012a80:	d1f7      	bne.n	8012a72 <__cxa_begin_cleanup+0x12>
 8012a82:	78a3      	ldrb	r3, [r4, #2]
 8012a84:	2b55      	cmp	r3, #85	; 0x55
 8012a86:	d1f4      	bne.n	8012a72 <__cxa_begin_cleanup+0x12>
 8012a88:	78e3      	ldrb	r3, [r4, #3]
 8012a8a:	2b43      	cmp	r3, #67	; 0x43
 8012a8c:	d1f1      	bne.n	8012a72 <__cxa_begin_cleanup+0x12>
 8012a8e:	7923      	ldrb	r3, [r4, #4]
 8012a90:	2b43      	cmp	r3, #67	; 0x43
 8012a92:	d1ee      	bne.n	8012a72 <__cxa_begin_cleanup+0x12>
 8012a94:	7963      	ldrb	r3, [r4, #5]
 8012a96:	2b2b      	cmp	r3, #43	; 0x2b
 8012a98:	d1eb      	bne.n	8012a72 <__cxa_begin_cleanup+0x12>
 8012a9a:	79a3      	ldrb	r3, [r4, #6]
 8012a9c:	2b2b      	cmp	r3, #43	; 0x2b
 8012a9e:	d1e8      	bne.n	8012a72 <__cxa_begin_cleanup+0x12>
 8012aa0:	79e3      	ldrb	r3, [r4, #7]
 8012aa2:	2b01      	cmp	r3, #1
 8012aa4:	d8e5      	bhi.n	8012a72 <__cxa_begin_cleanup+0x12>
 8012aa6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012aaa:	3301      	adds	r3, #1
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ab2:	d1e1      	bne.n	8012a78 <__cxa_begin_cleanup+0x18>
 8012ab4:	6883      	ldr	r3, [r0, #8]
 8012ab6:	f844 3c08 	str.w	r3, [r4, #-8]
 8012aba:	6082      	str	r2, [r0, #8]
 8012abc:	2001      	movs	r0, #1
 8012abe:	bd10      	pop	{r4, pc}
 8012ac0:	f000 fd46 	bl	8013550 <_ZSt9terminatev>

08012ac4 <__gnu_end_cleanup>:
 8012ac4:	b508      	push	{r3, lr}
 8012ac6:	f7ff ff65 	bl	8012994 <__cxa_get_globals>
 8012aca:	6883      	ldr	r3, [r0, #8]
 8012acc:	b383      	cbz	r3, 8012b30 <__gnu_end_cleanup+0x6c>
 8012ace:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012ad2:	2a47      	cmp	r2, #71	; 0x47
 8012ad4:	d004      	beq.n	8012ae0 <__gnu_end_cleanup+0x1c>
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	6082      	str	r2, [r0, #8]
 8012ada:	f103 0020 	add.w	r0, r3, #32
 8012ade:	bd08      	pop	{r3, pc}
 8012ae0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8012ae4:	2a4e      	cmp	r2, #78	; 0x4e
 8012ae6:	d1f6      	bne.n	8012ad6 <__gnu_end_cleanup+0x12>
 8012ae8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8012aec:	2a55      	cmp	r2, #85	; 0x55
 8012aee:	d1f2      	bne.n	8012ad6 <__gnu_end_cleanup+0x12>
 8012af0:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8012af4:	2a43      	cmp	r2, #67	; 0x43
 8012af6:	d1ee      	bne.n	8012ad6 <__gnu_end_cleanup+0x12>
 8012af8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8012afc:	2a43      	cmp	r2, #67	; 0x43
 8012afe:	d1ea      	bne.n	8012ad6 <__gnu_end_cleanup+0x12>
 8012b00:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8012b04:	2a2b      	cmp	r2, #43	; 0x2b
 8012b06:	d1e6      	bne.n	8012ad6 <__gnu_end_cleanup+0x12>
 8012b08:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8012b0c:	2a2b      	cmp	r2, #43	; 0x2b
 8012b0e:	d1e2      	bne.n	8012ad6 <__gnu_end_cleanup+0x12>
 8012b10:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8012b14:	2a01      	cmp	r2, #1
 8012b16:	d8de      	bhi.n	8012ad6 <__gnu_end_cleanup+0x12>
 8012b18:	69da      	ldr	r2, [r3, #28]
 8012b1a:	3a01      	subs	r2, #1
 8012b1c:	61da      	str	r2, [r3, #28]
 8012b1e:	2a00      	cmp	r2, #0
 8012b20:	d1db      	bne.n	8012ada <__gnu_end_cleanup+0x16>
 8012b22:	699a      	ldr	r2, [r3, #24]
 8012b24:	6082      	str	r2, [r0, #8]
 8012b26:	2200      	movs	r2, #0
 8012b28:	619a      	str	r2, [r3, #24]
 8012b2a:	f103 0020 	add.w	r0, r3, #32
 8012b2e:	bd08      	pop	{r3, pc}
 8012b30:	f000 fd0e 	bl	8013550 <_ZSt9terminatev>

08012b34 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8012b34:	2850      	cmp	r0, #80	; 0x50
 8012b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b38:	d054      	beq.n	8012be4 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
 8012b3a:	f000 040f 	and.w	r4, r0, #15
 8012b3e:	2c0c      	cmp	r4, #12
 8012b40:	d84e      	bhi.n	8012be0 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
 8012b42:	e8df f004 	tbb	[pc, r4]
 8012b46:	3907      	.short	0x3907
 8012b48:	4d170749 	.word	0x4d170749
 8012b4c:	1f4d4d4d 	.word	0x1f4d4d4d
 8012b50:	071b      	.short	0x071b
 8012b52:	17          	.byte	0x17
 8012b53:	00          	.byte	0x00
 8012b54:	4615      	mov	r5, r2
 8012b56:	f855 4b04 	ldr.w	r4, [r5], #4
 8012b5a:	b144      	cbz	r4, 8012b6e <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 8012b5c:	f000 0670 	and.w	r6, r0, #112	; 0x70
 8012b60:	2e10      	cmp	r6, #16
 8012b62:	bf08      	it	eq
 8012b64:	4611      	moveq	r1, r2
 8012b66:	440c      	add	r4, r1
 8012b68:	0602      	lsls	r2, r0, #24
 8012b6a:	bf48      	it	mi
 8012b6c:	6824      	ldrmi	r4, [r4, #0]
 8012b6e:	601c      	str	r4, [r3, #0]
 8012b70:	4628      	mov	r0, r5
 8012b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b74:	4615      	mov	r5, r2
 8012b76:	f855 4b08 	ldr.w	r4, [r5], #8
 8012b7a:	e7ee      	b.n	8012b5a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8012b7c:	4615      	mov	r5, r2
 8012b7e:	f935 4b02 	ldrsh.w	r4, [r5], #2
 8012b82:	e7ea      	b.n	8012b5a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8012b84:	2400      	movs	r4, #0
 8012b86:	4627      	mov	r7, r4
 8012b88:	4615      	mov	r5, r2
 8012b8a:	f815 eb01 	ldrb.w	lr, [r5], #1
 8012b8e:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 8012b92:	40be      	lsls	r6, r7
 8012b94:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8012b98:	ea44 0406 	orr.w	r4, r4, r6
 8012b9c:	f107 0707 	add.w	r7, r7, #7
 8012ba0:	d1f3      	bne.n	8012b8a <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
 8012ba2:	2f1f      	cmp	r7, #31
 8012ba4:	d8d9      	bhi.n	8012b5a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8012ba6:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8012baa:	d0d6      	beq.n	8012b5a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8012bac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8012bb0:	fa06 f707 	lsl.w	r7, r6, r7
 8012bb4:	433c      	orrs	r4, r7
 8012bb6:	e7d1      	b.n	8012b5c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8012bb8:	2400      	movs	r4, #0
 8012bba:	4627      	mov	r7, r4
 8012bbc:	4615      	mov	r5, r2
 8012bbe:	f815 eb01 	ldrb.w	lr, [r5], #1
 8012bc2:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 8012bc6:	40be      	lsls	r6, r7
 8012bc8:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8012bcc:	ea44 0406 	orr.w	r4, r4, r6
 8012bd0:	f107 0707 	add.w	r7, r7, #7
 8012bd4:	d1f3      	bne.n	8012bbe <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
 8012bd6:	e7c0      	b.n	8012b5a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8012bd8:	4615      	mov	r5, r2
 8012bda:	f835 4b02 	ldrh.w	r4, [r5], #2
 8012bde:	e7bc      	b.n	8012b5a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8012be0:	f002 fa5d 	bl	801509e <abort>
 8012be4:	3203      	adds	r2, #3
 8012be6:	f022 0503 	bic.w	r5, r2, #3
 8012bea:	f855 4b04 	ldr.w	r4, [r5], #4
 8012bee:	601c      	str	r4, [r3, #0]
 8012bf0:	4628      	mov	r0, r5
 8012bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012bf4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8012bf4:	28ff      	cmp	r0, #255	; 0xff
 8012bf6:	d00d      	beq.n	8012c14 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8012bf8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8012bfc:	2820      	cmp	r0, #32
 8012bfe:	d015      	beq.n	8012c2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8012c00:	d90a      	bls.n	8012c18 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8012c02:	2840      	cmp	r0, #64	; 0x40
 8012c04:	d00f      	beq.n	8012c26 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8012c06:	2850      	cmp	r0, #80	; 0x50
 8012c08:	d004      	beq.n	8012c14 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8012c0a:	2830      	cmp	r0, #48	; 0x30
 8012c0c:	d108      	bne.n	8012c20 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8012c0e:	4608      	mov	r0, r1
 8012c10:	f7f4 bfce 	b.w	8007bb0 <_Unwind_GetDataRelBase>
 8012c14:	2000      	movs	r0, #0
 8012c16:	4770      	bx	lr
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	d0fb      	beq.n	8012c14 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8012c1c:	2810      	cmp	r0, #16
 8012c1e:	d0f9      	beq.n	8012c14 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8012c20:	b508      	push	{r3, lr}
 8012c22:	f002 fa3c 	bl	801509e <abort>
 8012c26:	4608      	mov	r0, r1
 8012c28:	f7f4 bfae 	b.w	8007b88 <_Unwind_GetRegionStart>
 8012c2c:	4608      	mov	r0, r1
 8012c2e:	f7f4 bfbb 	b.w	8007ba8 <_Unwind_GetTextRelBase>
 8012c32:	bf00      	nop

08012c34 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8012c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c36:	460c      	mov	r4, r1
 8012c38:	4615      	mov	r5, r2
 8012c3a:	4607      	mov	r7, r0
 8012c3c:	2800      	cmp	r0, #0
 8012c3e:	d044      	beq.n	8012cca <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
 8012c40:	f7f4 ffa2 	bl	8007b88 <_Unwind_GetRegionStart>
 8012c44:	6028      	str	r0, [r5, #0]
 8012c46:	7826      	ldrb	r6, [r4, #0]
 8012c48:	2eff      	cmp	r6, #255	; 0xff
 8012c4a:	f104 0401 	add.w	r4, r4, #1
 8012c4e:	d032      	beq.n	8012cb6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
 8012c50:	4639      	mov	r1, r7
 8012c52:	4630      	mov	r0, r6
 8012c54:	f7ff ffce 	bl	8012bf4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012c58:	4622      	mov	r2, r4
 8012c5a:	4601      	mov	r1, r0
 8012c5c:	1d2b      	adds	r3, r5, #4
 8012c5e:	4630      	mov	r0, r6
 8012c60:	f7ff ff68 	bl	8012b34 <_ZL28read_encoded_value_with_basehjPKhPj>
 8012c64:	4604      	mov	r4, r0
 8012c66:	1c60      	adds	r0, r4, #1
 8012c68:	7823      	ldrb	r3, [r4, #0]
 8012c6a:	752b      	strb	r3, [r5, #20]
 8012c6c:	2bff      	cmp	r3, #255	; 0xff
 8012c6e:	d029      	beq.n	8012cc4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
 8012c70:	2310      	movs	r3, #16
 8012c72:	2400      	movs	r4, #0
 8012c74:	752b      	strb	r3, [r5, #20]
 8012c76:	4622      	mov	r2, r4
 8012c78:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012c7c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8012c80:	4093      	lsls	r3, r2
 8012c82:	0609      	lsls	r1, r1, #24
 8012c84:	ea44 0403 	orr.w	r4, r4, r3
 8012c88:	f102 0207 	add.w	r2, r2, #7
 8012c8c:	d4f4      	bmi.n	8012c78 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
 8012c8e:	4404      	add	r4, r0
 8012c90:	60ec      	str	r4, [r5, #12]
 8012c92:	7803      	ldrb	r3, [r0, #0]
 8012c94:	756b      	strb	r3, [r5, #21]
 8012c96:	2400      	movs	r4, #0
 8012c98:	3001      	adds	r0, #1
 8012c9a:	4622      	mov	r2, r4
 8012c9c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012ca0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8012ca4:	4093      	lsls	r3, r2
 8012ca6:	431c      	orrs	r4, r3
 8012ca8:	060b      	lsls	r3, r1, #24
 8012caa:	f102 0207 	add.w	r2, r2, #7
 8012cae:	d4f5      	bmi.n	8012c9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
 8012cb0:	4404      	add	r4, r0
 8012cb2:	612c      	str	r4, [r5, #16]
 8012cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cb6:	6068      	str	r0, [r5, #4]
 8012cb8:	7823      	ldrb	r3, [r4, #0]
 8012cba:	752b      	strb	r3, [r5, #20]
 8012cbc:	2bff      	cmp	r3, #255	; 0xff
 8012cbe:	f104 0001 	add.w	r0, r4, #1
 8012cc2:	d1d5      	bne.n	8012c70 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	60eb      	str	r3, [r5, #12]
 8012cc8:	e7e3      	b.n	8012c92 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8012cca:	e7bb      	b.n	8012c44 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

08012ccc <__gxx_personality_v0>:
 8012ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd0:	f000 0403 	and.w	r4, r0, #3
 8012cd4:	b097      	sub	sp, #92	; 0x5c
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	2c01      	cmp	r4, #1
 8012cda:	4689      	mov	r9, r1
 8012cdc:	4617      	mov	r7, r2
 8012cde:	930a      	str	r3, [sp, #40]	; 0x28
 8012ce0:	d01e      	beq.n	8012d20 <__gxx_personality_v0+0x54>
 8012ce2:	d30e      	bcc.n	8012d02 <__gxx_personality_v0+0x36>
 8012ce4:	2c02      	cmp	r4, #2
 8012ce6:	d10a      	bne.n	8012cfe <__gxx_personality_v0+0x32>
 8012ce8:	4639      	mov	r1, r7
 8012cea:	4648      	mov	r0, r9
 8012cec:	f7f4 ff38 	bl	8007b60 <__gnu_unwind_frame>
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	f000 80a5 	beq.w	8012e40 <__gxx_personality_v0+0x174>
 8012cf6:	2009      	movs	r0, #9
 8012cf8:	b017      	add	sp, #92	; 0x5c
 8012cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cfe:	f002 f9ce 	bl	801509e <abort>
 8012d02:	0700      	lsls	r0, r0, #28
 8012d04:	d4f0      	bmi.n	8012ce8 <__gxx_personality_v0+0x1c>
 8012d06:	2301      	movs	r3, #1
 8012d08:	9303      	str	r3, [sp, #12]
 8012d0a:	aa16      	add	r2, sp, #88	; 0x58
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	f842 9d2c 	str.w	r9, [r2, #-44]!
 8012d12:	4619      	mov	r1, r3
 8012d14:	9200      	str	r2, [sp, #0]
 8012d16:	4638      	mov	r0, r7
 8012d18:	220c      	movs	r2, #12
 8012d1a:	f7f4 f9c5 	bl	80070a8 <_Unwind_VRS_Set>
 8012d1e:	e00f      	b.n	8012d40 <__gxx_personality_v0+0x74>
 8012d20:	f010 0408 	ands.w	r4, r0, #8
 8012d24:	f000 8090 	beq.w	8012e48 <__gxx_personality_v0+0x17c>
 8012d28:	aa16      	add	r2, sp, #88	; 0x58
 8012d2a:	f044 0402 	orr.w	r4, r4, #2
 8012d2e:	f842 1d2c 	str.w	r1, [r2, #-44]!
 8012d32:	4638      	mov	r0, r7
 8012d34:	9200      	str	r2, [sp, #0]
 8012d36:	4619      	mov	r1, r3
 8012d38:	220c      	movs	r2, #12
 8012d3a:	9403      	str	r4, [sp, #12]
 8012d3c:	f7f4 f9b4 	bl	80070a8 <_Unwind_VRS_Set>
 8012d40:	4638      	mov	r0, r7
 8012d42:	f7f4 ff27 	bl	8007b94 <_Unwind_GetLanguageSpecificData>
 8012d46:	9005      	str	r0, [sp, #20]
 8012d48:	2800      	cmp	r0, #0
 8012d4a:	d0cd      	beq.n	8012ce8 <__gxx_personality_v0+0x1c>
 8012d4c:	ab10      	add	r3, sp, #64	; 0x40
 8012d4e:	461a      	mov	r2, r3
 8012d50:	9905      	ldr	r1, [sp, #20]
 8012d52:	9306      	str	r3, [sp, #24]
 8012d54:	4638      	mov	r0, r7
 8012d56:	f7ff ff6d 	bl	8012c34 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8012d5a:	4639      	mov	r1, r7
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8012d62:	f7ff ff47 	bl	8012bf4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012d66:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	9012      	str	r0, [sp, #72]	; 0x48
 8012d6e:	4619      	mov	r1, r3
 8012d70:	220f      	movs	r2, #15
 8012d72:	f8cd b000 	str.w	fp, [sp]
 8012d76:	4638      	mov	r0, r7
 8012d78:	f7f4 f970 	bl	800705c <_Unwind_VRS_Get>
 8012d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012d80:	f023 0301 	bic.w	r3, r3, #1
 8012d84:	42a2      	cmp	r2, r4
 8012d86:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 8012d8a:	d975      	bls.n	8012e78 <__gxx_personality_v0+0x1ac>
 8012d8c:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 8012d90:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012d94:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
 8012d98:	2100      	movs	r1, #0
 8012d9a:	4628      	mov	r0, r5
 8012d9c:	f7ff ff2a 	bl	8012bf4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012da0:	4622      	mov	r2, r4
 8012da2:	4653      	mov	r3, sl
 8012da4:	4601      	mov	r1, r0
 8012da6:	4628      	mov	r0, r5
 8012da8:	f7ff fec4 	bl	8012b34 <_ZL28read_encoded_value_with_basehjPKhPj>
 8012dac:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 8012db0:	4605      	mov	r5, r0
 8012db2:	2100      	movs	r1, #0
 8012db4:	4620      	mov	r0, r4
 8012db6:	f7ff ff1d 	bl	8012bf4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012dba:	462a      	mov	r2, r5
 8012dbc:	4643      	mov	r3, r8
 8012dbe:	4601      	mov	r1, r0
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f7ff feb7 	bl	8012b34 <_ZL28read_encoded_value_with_basehjPKhPj>
 8012dc6:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 8012dca:	4605      	mov	r5, r0
 8012dcc:	2100      	movs	r1, #0
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f7ff ff10 	bl	8012bf4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012dd4:	462a      	mov	r2, r5
 8012dd6:	4601      	mov	r1, r0
 8012dd8:	465b      	mov	r3, fp
 8012dda:	4620      	mov	r0, r4
 8012ddc:	f7ff feaa 	bl	8012b34 <_ZL28read_encoded_value_with_basehjPKhPj>
 8012de0:	4604      	mov	r4, r0
 8012de2:	2000      	movs	r0, #0
 8012de4:	4602      	mov	r2, r0
 8012de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dea:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8012dee:	4093      	lsls	r3, r2
 8012df0:	0609      	lsls	r1, r1, #24
 8012df2:	ea40 0003 	orr.w	r0, r0, r3
 8012df6:	f102 0207 	add.w	r2, r2, #7
 8012dfa:	d4f4      	bmi.n	8012de6 <__gxx_personality_v0+0x11a>
 8012dfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e00:	4413      	add	r3, r2
 8012e02:	429e      	cmp	r6, r3
 8012e04:	d231      	bcs.n	8012e6a <__gxx_personality_v0+0x19e>
 8012e06:	9b03      	ldr	r3, [sp, #12]
 8012e08:	07db      	lsls	r3, r3, #31
 8012e0a:	d539      	bpl.n	8012e80 <__gxx_personality_v0+0x1b4>
 8012e0c:	2500      	movs	r5, #0
 8012e0e:	9504      	str	r5, [sp, #16]
 8012e10:	2300      	movs	r3, #0
 8012e12:	4619      	mov	r1, r3
 8012e14:	220d      	movs	r2, #13
 8012e16:	f8cd 8000 	str.w	r8, [sp]
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012e1e:	f7f4 f91d 	bl	800705c <_Unwind_VRS_Get>
 8012e22:	9a05      	ldr	r2, [sp, #20]
 8012e24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e26:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
 8012e2a:	9a04      	ldr	r2, [sp, #16]
 8012e2c:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
 8012e30:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
 8012e34:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 8012e38:	f8c9 3020 	str.w	r3, [r9, #32]
 8012e3c:	2006      	movs	r0, #6
 8012e3e:	e75b      	b.n	8012cf8 <__gxx_personality_v0+0x2c>
 8012e40:	2008      	movs	r0, #8
 8012e42:	b017      	add	sp, #92	; 0x5c
 8012e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e48:	ab10      	add	r3, sp, #64	; 0x40
 8012e4a:	9300      	str	r3, [sp, #0]
 8012e4c:	9306      	str	r3, [sp, #24]
 8012e4e:	220d      	movs	r2, #13
 8012e50:	4623      	mov	r3, r4
 8012e52:	4621      	mov	r1, r4
 8012e54:	4638      	mov	r0, r7
 8012e56:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8012e5a:	f7f4 f8ff 	bl	800705c <_Unwind_VRS_Get>
 8012e5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e60:	429d      	cmp	r5, r3
 8012e62:	d012      	beq.n	8012e8a <__gxx_personality_v0+0x1be>
 8012e64:	2302      	movs	r3, #2
 8012e66:	9303      	str	r3, [sp, #12]
 8012e68:	e74f      	b.n	8012d0a <__gxx_personality_v0+0x3e>
 8012e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e6c:	4413      	add	r3, r2
 8012e6e:	429e      	cmp	r6, r3
 8012e70:	d359      	bcc.n	8012f26 <__gxx_personality_v0+0x25a>
 8012e72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012e74:	42a3      	cmp	r3, r4
 8012e76:	d88d      	bhi.n	8012d94 <__gxx_personality_v0+0xc8>
 8012e78:	2500      	movs	r5, #0
 8012e7a:	9504      	str	r5, [sp, #16]
 8012e7c:	2401      	movs	r4, #1
 8012e7e:	e105      	b.n	801308c <__gxx_personality_v0+0x3c0>
 8012e80:	9b03      	ldr	r3, [sp, #12]
 8012e82:	071b      	lsls	r3, r3, #28
 8012e84:	d54c      	bpl.n	8012f20 <__gxx_personality_v0+0x254>
 8012e86:	f000 fb63 	bl	8013550 <_ZSt9terminatev>
 8012e8a:	aa16      	add	r2, sp, #88	; 0x58
 8012e8c:	4623      	mov	r3, r4
 8012e8e:	f842 9d2c 	str.w	r9, [r2, #-44]!
 8012e92:	4621      	mov	r1, r4
 8012e94:	9200      	str	r2, [sp, #0]
 8012e96:	4638      	mov	r0, r7
 8012e98:	220c      	movs	r2, #12
 8012e9a:	f7f4 f905 	bl	80070a8 <_Unwind_VRS_Set>
 8012e9e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8012ea2:	9304      	str	r3, [sp, #16]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d03b      	beq.n	8012f20 <__gxx_personality_v0+0x254>
 8012ea8:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
 8012eac:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8012eb0:	2403      	movs	r4, #3
 8012eb2:	2d00      	cmp	r5, #0
 8012eb4:	f2c0 8106 	blt.w	80130c4 <__gxx_personality_v0+0x3f8>
 8012eb8:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 8012ebc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012ec0:	a916      	add	r1, sp, #88	; 0x58
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	f841 9d28 	str.w	r9, [r1, #-40]!
 8012ec8:	461a      	mov	r2, r3
 8012eca:	9100      	str	r1, [sp, #0]
 8012ecc:	4638      	mov	r0, r7
 8012ece:	4619      	mov	r1, r3
 8012ed0:	f7f4 f8ea 	bl	80070a8 <_Unwind_VRS_Set>
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	2201      	movs	r2, #1
 8012eda:	f8cd a000 	str.w	sl, [sp]
 8012ede:	4638      	mov	r0, r7
 8012ee0:	950d      	str	r5, [sp, #52]	; 0x34
 8012ee2:	f7f4 f8e1 	bl	80070a8 <_Unwind_VRS_Set>
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	4619      	mov	r1, r3
 8012eea:	220f      	movs	r2, #15
 8012eec:	f8cd 8000 	str.w	r8, [sp]
 8012ef0:	4638      	mov	r0, r7
 8012ef2:	f7f4 f8b3 	bl	800705c <_Unwind_VRS_Get>
 8012ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ef8:	9a04      	ldr	r2, [sp, #16]
 8012efa:	f8cd 8000 	str.w	r8, [sp]
 8012efe:	f003 0501 	and.w	r5, r3, #1
 8012f02:	2300      	movs	r3, #0
 8012f04:	4315      	orrs	r5, r2
 8012f06:	4638      	mov	r0, r7
 8012f08:	4619      	mov	r1, r3
 8012f0a:	220f      	movs	r2, #15
 8012f0c:	950e      	str	r5, [sp, #56]	; 0x38
 8012f0e:	f7f4 f8cb 	bl	80070a8 <_Unwind_VRS_Set>
 8012f12:	2c02      	cmp	r4, #2
 8012f14:	f000 8080 	beq.w	8013018 <__gxx_personality_v0+0x34c>
 8012f18:	2007      	movs	r0, #7
 8012f1a:	b017      	add	sp, #92	; 0x5c
 8012f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f20:	4648      	mov	r0, r9
 8012f22:	f000 f9fd 	bl	8013320 <__cxa_call_terminate>
 8012f26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f28:	9304      	str	r3, [sp, #16]
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d178      	bne.n	8013022 <__gxx_personality_v0+0x356>
 8012f30:	2800      	cmp	r0, #0
 8012f32:	f43f aed9 	beq.w	8012ce8 <__gxx_personality_v0+0x1c>
 8012f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f38:	9a04      	ldr	r2, [sp, #16]
 8012f3a:	3801      	subs	r0, #1
 8012f3c:	4403      	add	r3, r0
 8012f3e:	2a00      	cmp	r2, #0
 8012f40:	f43f aed2 	beq.w	8012ce8 <__gxx_personality_v0+0x1c>
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d075      	beq.n	8013034 <__gxx_personality_v0+0x368>
 8012f48:	9a03      	ldr	r2, [sp, #12]
 8012f4a:	f012 0208 	ands.w	r2, r2, #8
 8012f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8012f50:	f000 80f6 	beq.w	8013140 <__gxx_personality_v0+0x474>
 8012f54:	2147      	movs	r1, #71	; 0x47
 8012f56:	224e      	movs	r2, #78	; 0x4e
 8012f58:	f889 1000 	strb.w	r1, [r9]
 8012f5c:	f889 2001 	strb.w	r2, [r9, #1]
 8012f60:	2155      	movs	r1, #85	; 0x55
 8012f62:	2243      	movs	r2, #67	; 0x43
 8012f64:	f889 1002 	strb.w	r1, [r9, #2]
 8012f68:	f889 2003 	strb.w	r2, [r9, #3]
 8012f6c:	2146      	movs	r1, #70	; 0x46
 8012f6e:	224f      	movs	r2, #79	; 0x4f
 8012f70:	f889 1004 	strb.w	r1, [r9, #4]
 8012f74:	f889 2005 	strb.w	r2, [r9, #5]
 8012f78:	2152      	movs	r1, #82	; 0x52
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	f889 1006 	strb.w	r1, [r9, #6]
 8012f80:	f889 2007 	strb.w	r2, [r9, #7]
 8012f84:	2200      	movs	r2, #0
 8012f86:	9208      	str	r2, [sp, #32]
 8012f88:	9707      	str	r7, [sp, #28]
 8012f8a:	2500      	movs	r5, #0
 8012f8c:	4629      	mov	r1, r5
 8012f8e:	e000      	b.n	8012f92 <__gxx_personality_v0+0x2c6>
 8012f90:	4623      	mov	r3, r4
 8012f92:	461c      	mov	r4, r3
 8012f94:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012f98:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8012f9c:	408a      	lsls	r2, r1
 8012f9e:	0606      	lsls	r6, r0, #24
 8012fa0:	ea45 0502 	orr.w	r5, r5, r2
 8012fa4:	f101 0107 	add.w	r1, r1, #7
 8012fa8:	d4f2      	bmi.n	8012f90 <__gxx_personality_v0+0x2c4>
 8012faa:	291f      	cmp	r1, #31
 8012fac:	d805      	bhi.n	8012fba <__gxx_personality_v0+0x2ee>
 8012fae:	0642      	lsls	r2, r0, #25
 8012fb0:	d503      	bpl.n	8012fba <__gxx_personality_v0+0x2ee>
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	408a      	lsls	r2, r1
 8012fb6:	4252      	negs	r2, r2
 8012fb8:	4315      	orrs	r5, r2
 8012fba:	2600      	movs	r6, #0
 8012fbc:	4631      	mov	r1, r6
 8012fbe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8012fc2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8012fc6:	408a      	lsls	r2, r1
 8012fc8:	0607      	lsls	r7, r0, #24
 8012fca:	ea46 0602 	orr.w	r6, r6, r2
 8012fce:	f101 0107 	add.w	r1, r1, #7
 8012fd2:	d4f4      	bmi.n	8012fbe <__gxx_personality_v0+0x2f2>
 8012fd4:	291f      	cmp	r1, #31
 8012fd6:	d805      	bhi.n	8012fe4 <__gxx_personality_v0+0x318>
 8012fd8:	0640      	lsls	r0, r0, #25
 8012fda:	d503      	bpl.n	8012fe4 <__gxx_personality_v0+0x318>
 8012fdc:	2301      	movs	r3, #1
 8012fde:	408b      	lsls	r3, r1
 8012fe0:	425b      	negs	r3, r3
 8012fe2:	431e      	orrs	r6, r3
 8012fe4:	2d00      	cmp	r5, #0
 8012fe6:	d05c      	beq.n	80130a2 <__gxx_personality_v0+0x3d6>
 8012fe8:	dd5e      	ble.n	80130a8 <__gxx_personality_v0+0x3dc>
 8012fea:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8012fee:	28ff      	cmp	r0, #255	; 0xff
 8012ff0:	f000 80a4 	beq.w	801313c <__gxx_personality_v0+0x470>
 8012ff4:	f000 0307 	and.w	r3, r0, #7
 8012ff8:	2b04      	cmp	r3, #4
 8012ffa:	f63f ae80 	bhi.w	8012cfe <__gxx_personality_v0+0x32>
 8012ffe:	a201      	add	r2, pc, #4	; (adr r2, 8013004 <__gxx_personality_v0+0x338>)
 8013000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013004:	0801306f 	.word	0x0801306f
 8013008:	08012cff 	.word	0x08012cff
 801300c:	08013075 	.word	0x08013075
 8013010:	0801306f 	.word	0x0801306f
 8013014:	0801304d 	.word	0x0801304d
 8013018:	4648      	mov	r0, r9
 801301a:	f7ff fd21 	bl	8012a60 <__cxa_begin_cleanup>
 801301e:	2007      	movs	r0, #7
 8013020:	e66a      	b.n	8012cf8 <__gxx_personality_v0+0x2c>
 8013022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013024:	441a      	add	r2, r3
 8013026:	9204      	str	r2, [sp, #16]
 8013028:	2800      	cmp	r0, #0
 801302a:	d184      	bne.n	8012f36 <__gxx_personality_v0+0x26a>
 801302c:	9b04      	ldr	r3, [sp, #16]
 801302e:	2b00      	cmp	r3, #0
 8013030:	f43f ae5a 	beq.w	8012ce8 <__gxx_personality_v0+0x1c>
 8013034:	9b03      	ldr	r3, [sp, #12]
 8013036:	f013 0301 	ands.w	r3, r3, #1
 801303a:	f47f ae55 	bne.w	8012ce8 <__gxx_personality_v0+0x1c>
 801303e:	9a03      	ldr	r2, [sp, #12]
 8013040:	f012 0508 	ands.w	r5, r2, #8
 8013044:	f040 8097 	bne.w	8013176 <__gxx_personality_v0+0x4aa>
 8013048:	2402      	movs	r4, #2
 801304a:	e739      	b.n	8012ec0 <__gxx_personality_v0+0x1f4>
 801304c:	00eb      	lsls	r3, r5, #3
 801304e:	425b      	negs	r3, r3
 8013050:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013052:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013054:	441a      	add	r2, r3
 8013056:	4643      	mov	r3, r8
 8013058:	f7ff fd6c 	bl	8012b34 <_ZL28read_encoded_value_with_basehjPKhPj>
 801305c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801305e:	b199      	cbz	r1, 8013088 <__gxx_personality_v0+0x3bc>
 8013060:	f1b9 0f00 	cmp.w	r9, #0
 8013064:	d109      	bne.n	801307a <__gxx_personality_v0+0x3ae>
 8013066:	2e00      	cmp	r6, #0
 8013068:	d077      	beq.n	801315a <__gxx_personality_v0+0x48e>
 801306a:	19a3      	adds	r3, r4, r6
 801306c:	e78d      	b.n	8012f8a <__gxx_personality_v0+0x2be>
 801306e:	00ab      	lsls	r3, r5, #2
 8013070:	425b      	negs	r3, r3
 8013072:	e7ed      	b.n	8013050 <__gxx_personality_v0+0x384>
 8013074:	006b      	lsls	r3, r5, #1
 8013076:	425b      	negs	r3, r3
 8013078:	e7ea      	b.n	8013050 <__gxx_personality_v0+0x384>
 801307a:	ab0a      	add	r3, sp, #40	; 0x28
 801307c:	2200      	movs	r2, #0
 801307e:	4648      	mov	r0, r9
 8013080:	f7ff fc92 	bl	80129a8 <__cxa_type_match>
 8013084:	2800      	cmp	r0, #0
 8013086:	d0ee      	beq.n	8013066 <__gxx_personality_v0+0x39a>
 8013088:	9f07      	ldr	r7, [sp, #28]
 801308a:	2403      	movs	r4, #3
 801308c:	9b03      	ldr	r3, [sp, #12]
 801308e:	07da      	lsls	r2, r3, #31
 8013090:	d460      	bmi.n	8013154 <__gxx_personality_v0+0x488>
 8013092:	9b03      	ldr	r3, [sp, #12]
 8013094:	0719      	lsls	r1, r3, #28
 8013096:	d466      	bmi.n	8013166 <__gxx_personality_v0+0x49a>
 8013098:	2c01      	cmp	r4, #1
 801309a:	f43f af41 	beq.w	8012f20 <__gxx_personality_v0+0x254>
 801309e:	9905      	ldr	r1, [sp, #20]
 80130a0:	e707      	b.n	8012eb2 <__gxx_personality_v0+0x1e6>
 80130a2:	2301      	movs	r3, #1
 80130a4:	9308      	str	r3, [sp, #32]
 80130a6:	e7de      	b.n	8013066 <__gxx_personality_v0+0x39a>
 80130a8:	f1b9 0f00 	cmp.w	r9, #0
 80130ac:	d001      	beq.n	80130b2 <__gxx_personality_v0+0x3e6>
 80130ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130b0:	b35b      	cbz	r3, 801310a <__gxx_personality_v0+0x43e>
 80130b2:	1c6b      	adds	r3, r5, #1
 80130b4:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 80130b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80130ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d1d1      	bne.n	8013066 <__gxx_personality_v0+0x39a>
 80130c2:	e7e1      	b.n	8013088 <__gxx_personality_v0+0x3bc>
 80130c4:	9a06      	ldr	r2, [sp, #24]
 80130c6:	4638      	mov	r0, r7
 80130c8:	f7ff fdb4 	bl	8012c34 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80130cc:	4639      	mov	r1, r7
 80130ce:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 80130d2:	f7ff fd8f 	bl	8012bf4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80130d6:	00aa      	lsls	r2, r5, #2
 80130d8:	f082 0203 	eor.w	r2, r2, #3
 80130dc:	43d2      	mvns	r2, r2
 80130de:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80130e0:	9012      	str	r0, [sp, #72]	; 0x48
 80130e2:	58b3      	ldr	r3, [r6, r2]
 80130e4:	4416      	add	r6, r2
 80130e6:	b133      	cbz	r3, 80130f6 <__gxx_personality_v0+0x42a>
 80130e8:	4632      	mov	r2, r6
 80130ea:	2300      	movs	r3, #0
 80130ec:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80130f0:	3301      	adds	r3, #1
 80130f2:	2900      	cmp	r1, #0
 80130f4:	d1fa      	bne.n	80130ec <__gxx_personality_v0+0x420>
 80130f6:	2204      	movs	r2, #4
 80130f8:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 80130fc:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8013100:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
 8013104:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 8013108:	e6d6      	b.n	8012eb8 <__gxx_personality_v0+0x1ec>
 801310a:	1c6f      	adds	r7, r5, #1
 801310c:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
 8013110:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8013112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013114:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8013118:	920f      	str	r2, [sp, #60]	; 0x3c
 801311a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801311e:	b921      	cbnz	r1, 801312a <__gxx_personality_v0+0x45e>
 8013120:	e7b2      	b.n	8013088 <__gxx_personality_v0+0x3bc>
 8013122:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8013126:	2900      	cmp	r1, #0
 8013128:	d0ae      	beq.n	8013088 <__gxx_personality_v0+0x3bc>
 801312a:	4439      	add	r1, r7
 801312c:	465b      	mov	r3, fp
 801312e:	2200      	movs	r2, #0
 8013130:	4648      	mov	r0, r9
 8013132:	f7ff fc39 	bl	80129a8 <__cxa_type_match>
 8013136:	2800      	cmp	r0, #0
 8013138:	d0f3      	beq.n	8013122 <__gxx_personality_v0+0x456>
 801313a:	e794      	b.n	8013066 <__gxx_personality_v0+0x39a>
 801313c:	2300      	movs	r3, #0
 801313e:	e787      	b.n	8013050 <__gxx_personality_v0+0x384>
 8013140:	f899 2007 	ldrb.w	r2, [r9, #7]
 8013144:	2a01      	cmp	r2, #1
 8013146:	bf0c      	ite	eq
 8013148:	f859 2c20 	ldreq.w	r2, [r9, #-32]
 801314c:	f109 0258 	addne.w	r2, r9, #88	; 0x58
 8013150:	920a      	str	r2, [sp, #40]	; 0x28
 8013152:	e717      	b.n	8012f84 <__gxx_personality_v0+0x2b8>
 8013154:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8013158:	e65a      	b.n	8012e10 <__gxx_personality_v0+0x144>
 801315a:	9b08      	ldr	r3, [sp, #32]
 801315c:	9f07      	ldr	r7, [sp, #28]
 801315e:	2b00      	cmp	r3, #0
 8013160:	f47f af68 	bne.w	8013034 <__gxx_personality_v0+0x368>
 8013164:	e5c0      	b.n	8012ce8 <__gxx_personality_v0+0x1c>
 8013166:	2c01      	cmp	r4, #1
 8013168:	f43f ae8d 	beq.w	8012e86 <__gxx_personality_v0+0x1ba>
 801316c:	2d00      	cmp	r5, #0
 801316e:	f6bf aea3 	bge.w	8012eb8 <__gxx_personality_v0+0x1ec>
 8013172:	f000 f9fb 	bl	801356c <_ZSt10unexpectedv>
 8013176:	461d      	mov	r5, r3
 8013178:	2402      	movs	r4, #2
 801317a:	e6a1      	b.n	8012ec0 <__gxx_personality_v0+0x1f4>
 801317c:	f000 f950 	bl	8013420 <__cxa_begin_catch>
 8013180:	e681      	b.n	8012e86 <__gxx_personality_v0+0x1ba>
 8013182:	bf00      	nop

08013184 <_ZdlPvj>:
 8013184:	f7ff ba7e 	b.w	8012684 <_ZdlPv>

08013188 <_ZSt15get_new_handlerv>:
 8013188:	4b02      	ldr	r3, [pc, #8]	; (8013194 <_ZSt15get_new_handlerv+0xc>)
 801318a:	6818      	ldr	r0, [r3, #0]
 801318c:	f3bf 8f5b 	dmb	ish
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	2000768c 	.word	0x2000768c

08013198 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8013198:	b570      	push	{r4, r5, r6, lr}
 801319a:	6803      	ldr	r3, [r0, #0]
 801319c:	b084      	sub	sp, #16
 801319e:	2400      	movs	r4, #0
 80131a0:	699e      	ldr	r6, [r3, #24]
 80131a2:	9400      	str	r4, [sp, #0]
 80131a4:	2310      	movs	r3, #16
 80131a6:	4615      	mov	r5, r2
 80131a8:	9302      	str	r3, [sp, #8]
 80131aa:	6812      	ldr	r2, [r2, #0]
 80131ac:	f88d 4004 	strb.w	r4, [sp, #4]
 80131b0:	466b      	mov	r3, sp
 80131b2:	9403      	str	r4, [sp, #12]
 80131b4:	47b0      	blx	r6
 80131b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80131ba:	f003 0306 	and.w	r3, r3, #6
 80131be:	2b06      	cmp	r3, #6
 80131c0:	bf03      	ittte	eq
 80131c2:	9b00      	ldreq	r3, [sp, #0]
 80131c4:	602b      	streq	r3, [r5, #0]
 80131c6:	2001      	moveq	r0, #1
 80131c8:	4620      	movne	r0, r4
 80131ca:	b004      	add	sp, #16
 80131cc:	bd70      	pop	{r4, r5, r6, pc}
 80131ce:	bf00      	nop

080131d0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80131d0:	9800      	ldr	r0, [sp, #0]
 80131d2:	4290      	cmp	r0, r2
 80131d4:	bf0c      	ite	eq
 80131d6:	2006      	moveq	r0, #6
 80131d8:	2001      	movne	r0, #1
 80131da:	4770      	bx	lr

080131dc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80131dc:	b510      	push	{r4, lr}
 80131de:	4b03      	ldr	r3, [pc, #12]	; (80131ec <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80131e0:	6003      	str	r3, [r0, #0]
 80131e2:	4604      	mov	r4, r0
 80131e4:	f000 f854 	bl	8013290 <_ZNSt9type_infoD1Ev>
 80131e8:	4620      	mov	r0, r4
 80131ea:	bd10      	pop	{r4, pc}
 80131ec:	08019d98 	.word	0x08019d98

080131f0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80131f0:	b510      	push	{r4, lr}
 80131f2:	4b05      	ldr	r3, [pc, #20]	; (8013208 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 80131f4:	6003      	str	r3, [r0, #0]
 80131f6:	4604      	mov	r4, r0
 80131f8:	f000 f84a 	bl	8013290 <_ZNSt9type_infoD1Ev>
 80131fc:	4620      	mov	r0, r4
 80131fe:	2108      	movs	r1, #8
 8013200:	f7ff ffc0 	bl	8013184 <_ZdlPvj>
 8013204:	4620      	mov	r0, r4
 8013206:	bd10      	pop	{r4, pc}
 8013208:	08019d98 	.word	0x08019d98

0801320c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801320c:	b538      	push	{r3, r4, r5, lr}
 801320e:	4615      	mov	r5, r2
 8013210:	461c      	mov	r4, r3
 8013212:	f000 f841 	bl	8013298 <_ZNKSt9type_infoeqERKS_>
 8013216:	b120      	cbz	r0, 8013222 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8013218:	2208      	movs	r2, #8
 801321a:	2306      	movs	r3, #6
 801321c:	6025      	str	r5, [r4, #0]
 801321e:	60e2      	str	r2, [r4, #12]
 8013220:	7123      	strb	r3, [r4, #4]
 8013222:	bd38      	pop	{r3, r4, r5, pc}

08013224 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8013224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013228:	4617      	mov	r7, r2
 801322a:	461c      	mov	r4, r3
 801322c:	4606      	mov	r6, r0
 801322e:	460d      	mov	r5, r1
 8013230:	f000 f832 	bl	8013298 <_ZNKSt9type_infoeqERKS_>
 8013234:	b908      	cbnz	r0, 801323a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 8013236:	2c03      	cmp	r4, #3
 8013238:	d901      	bls.n	801323e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 801323a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801323e:	682b      	ldr	r3, [r5, #0]
 8013240:	463a      	mov	r2, r7
 8013242:	4631      	mov	r1, r6
 8013244:	4628      	mov	r0, r5
 8013246:	695b      	ldr	r3, [r3, #20]
 8013248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801324c:	4718      	bx	r3
 801324e:	bf00      	nop

08013250 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8013250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013252:	b083      	sub	sp, #12
 8013254:	4617      	mov	r7, r2
 8013256:	9d08      	ldr	r5, [sp, #32]
 8013258:	990a      	ldr	r1, [sp, #40]	; 0x28
 801325a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801325c:	428d      	cmp	r5, r1
 801325e:	4606      	mov	r6, r0
 8013260:	d00b      	beq.n	801327a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 8013262:	4619      	mov	r1, r3
 8013264:	4630      	mov	r0, r6
 8013266:	f000 f817 	bl	8013298 <_ZNKSt9type_infoeqERKS_>
 801326a:	b118      	cbz	r0, 8013274 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 801326c:	2301      	movs	r3, #1
 801326e:	6025      	str	r5, [r4, #0]
 8013270:	7127      	strb	r7, [r4, #4]
 8013272:	71a3      	strb	r3, [r4, #6]
 8013274:	2000      	movs	r0, #0
 8013276:	b003      	add	sp, #12
 8013278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801327a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801327c:	9301      	str	r3, [sp, #4]
 801327e:	f000 f80b 	bl	8013298 <_ZNKSt9type_infoeqERKS_>
 8013282:	b118      	cbz	r0, 801328c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 8013284:	2000      	movs	r0, #0
 8013286:	7167      	strb	r7, [r4, #5]
 8013288:	b003      	add	sp, #12
 801328a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801328c:	9b01      	ldr	r3, [sp, #4]
 801328e:	e7e8      	b.n	8013262 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

08013290 <_ZNSt9type_infoD1Ev>:
 8013290:	4770      	bx	lr
 8013292:	bf00      	nop

08013294 <_ZNKSt9type_info14__is_pointer_pEv>:
 8013294:	2000      	movs	r0, #0
 8013296:	4770      	bx	lr

08013298 <_ZNKSt9type_infoeqERKS_>:
 8013298:	4281      	cmp	r1, r0
 801329a:	d011      	beq.n	80132c0 <_ZNKSt9type_infoeqERKS_+0x28>
 801329c:	b508      	push	{r3, lr}
 801329e:	6840      	ldr	r0, [r0, #4]
 80132a0:	7803      	ldrb	r3, [r0, #0]
 80132a2:	2b2a      	cmp	r3, #42	; 0x2a
 80132a4:	d00a      	beq.n	80132bc <_ZNKSt9type_infoeqERKS_+0x24>
 80132a6:	6849      	ldr	r1, [r1, #4]
 80132a8:	780b      	ldrb	r3, [r1, #0]
 80132aa:	2b2a      	cmp	r3, #42	; 0x2a
 80132ac:	bf08      	it	eq
 80132ae:	3101      	addeq	r1, #1
 80132b0:	f7f3 fb6e 	bl	8006990 <strcmp>
 80132b4:	fab0 f080 	clz	r0, r0
 80132b8:	0940      	lsrs	r0, r0, #5
 80132ba:	bd08      	pop	{r3, pc}
 80132bc:	2000      	movs	r0, #0
 80132be:	bd08      	pop	{r3, pc}
 80132c0:	2001      	movs	r0, #1
 80132c2:	4770      	bx	lr

080132c4 <_ZNSt9exceptionD1Ev>:
 80132c4:	4770      	bx	lr
 80132c6:	bf00      	nop

080132c8 <_ZNSt13bad_exceptionD1Ev>:
 80132c8:	4770      	bx	lr
 80132ca:	bf00      	nop

080132cc <_ZGTtNKSt13bad_exception4whatEv>:
 80132cc:	4800      	ldr	r0, [pc, #0]	; (80132d0 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 80132ce:	4770      	bx	lr
 80132d0:	08019dd4 	.word	0x08019dd4

080132d4 <_ZNSt13bad_exceptionD0Ev>:
 80132d4:	b510      	push	{r4, lr}
 80132d6:	2104      	movs	r1, #4
 80132d8:	4604      	mov	r4, r0
 80132da:	f7ff ff53 	bl	8013184 <_ZdlPvj>
 80132de:	4620      	mov	r0, r4
 80132e0:	bd10      	pop	{r4, pc}
 80132e2:	bf00      	nop

080132e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80132e4:	7803      	ldrb	r3, [r0, #0]
 80132e6:	2b47      	cmp	r3, #71	; 0x47
 80132e8:	d001      	beq.n	80132ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 80132ea:	2000      	movs	r0, #0
 80132ec:	4770      	bx	lr
 80132ee:	7843      	ldrb	r3, [r0, #1]
 80132f0:	2b4e      	cmp	r3, #78	; 0x4e
 80132f2:	d1fa      	bne.n	80132ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80132f4:	7883      	ldrb	r3, [r0, #2]
 80132f6:	2b55      	cmp	r3, #85	; 0x55
 80132f8:	d1f7      	bne.n	80132ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80132fa:	78c3      	ldrb	r3, [r0, #3]
 80132fc:	2b43      	cmp	r3, #67	; 0x43
 80132fe:	d1f4      	bne.n	80132ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8013300:	7903      	ldrb	r3, [r0, #4]
 8013302:	2b43      	cmp	r3, #67	; 0x43
 8013304:	d1f1      	bne.n	80132ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8013306:	7943      	ldrb	r3, [r0, #5]
 8013308:	2b2b      	cmp	r3, #43	; 0x2b
 801330a:	d1ee      	bne.n	80132ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801330c:	7983      	ldrb	r3, [r0, #6]
 801330e:	2b2b      	cmp	r3, #43	; 0x2b
 8013310:	d1eb      	bne.n	80132ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8013312:	79c0      	ldrb	r0, [r0, #7]
 8013314:	2801      	cmp	r0, #1
 8013316:	bf8c      	ite	hi
 8013318:	2000      	movhi	r0, #0
 801331a:	2001      	movls	r0, #1
 801331c:	4770      	bx	lr
 801331e:	bf00      	nop

08013320 <__cxa_call_terminate>:
 8013320:	b510      	push	{r4, lr}
 8013322:	b130      	cbz	r0, 8013332 <__cxa_call_terminate+0x12>
 8013324:	4604      	mov	r4, r0
 8013326:	f000 f87b 	bl	8013420 <__cxa_begin_catch>
 801332a:	4620      	mov	r0, r4
 801332c:	f7ff ffda 	bl	80132e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013330:	b908      	cbnz	r0, 8013336 <__cxa_call_terminate+0x16>
 8013332:	f000 f90d 	bl	8013550 <_ZSt9terminatev>
 8013336:	f854 0c14 	ldr.w	r0, [r4, #-20]
 801333a:	f000 f8f5 	bl	8013528 <_ZN10__cxxabiv111__terminateEPFvvE>
 801333e:	bf00      	nop

08013340 <__cxa_call_unexpected>:
 8013340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013344:	b085      	sub	sp, #20
 8013346:	4602      	mov	r2, r0
 8013348:	f7ff ffcc 	bl	80132e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801334c:	b160      	cbz	r0, 8013368 <__cxa_call_unexpected+0x28>
 801334e:	f852 8c18 	ldr.w	r8, [r2, #-24]
 8013352:	f852 5c14 	ldr.w	r5, [r2, #-20]
 8013356:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8013358:	6b17      	ldr	r7, [r2, #48]	; 0x30
 801335a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 801335c:	4610      	mov	r0, r2
 801335e:	f000 f85f 	bl	8013420 <__cxa_begin_catch>
 8013362:	4640      	mov	r0, r8
 8013364:	f000 f8fe 	bl	8013564 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8013368:	4610      	mov	r0, r2
 801336a:	f000 f859 	bl	8013420 <__cxa_begin_catch>
 801336e:	f000 f8fd 	bl	801356c <_ZSt10unexpectedv>
 8013372:	f000 f855 	bl	8013420 <__cxa_begin_catch>
 8013376:	f000 f8eb 	bl	8013550 <_ZSt9terminatev>
 801337a:	f000 f851 	bl	8013420 <__cxa_begin_catch>
 801337e:	f7ff fb05 	bl	801298c <__cxa_get_globals_fast>
 8013382:	6803      	ldr	r3, [r0, #0]
 8013384:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8013388:	2a01      	cmp	r2, #1
 801338a:	d036      	beq.n	80133fa <__cxa_call_unexpected+0xba>
 801338c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8013390:	f10d 0a10 	add.w	sl, sp, #16
 8013394:	f04f 0800 	mov.w	r8, #0
 8013398:	3320      	adds	r3, #32
 801339a:	f84a 2d08 	str.w	r2, [sl, #-8]!
 801339e:	f027 0b03 	bic.w	fp, r7, #3
 80133a2:	9301      	str	r3, [sp, #4]
 80133a4:	46c1      	mov	r9, r8
 80133a6:	45b1      	cmp	r9, r6
 80133a8:	da1b      	bge.n	80133e2 <__cxa_call_unexpected+0xa2>
 80133aa:	6827      	ldr	r7, [r4, #0]
 80133ac:	b107      	cbz	r7, 80133b0 <__cxa_call_unexpected+0x70>
 80133ae:	4427      	add	r7, r4
 80133b0:	4653      	mov	r3, sl
 80133b2:	2200      	movs	r2, #0
 80133b4:	4639      	mov	r1, r7
 80133b6:	9801      	ldr	r0, [sp, #4]
 80133b8:	f7ff faf6 	bl	80129a8 <__cxa_type_match>
 80133bc:	bb10      	cbnz	r0, 8013404 <__cxa_call_unexpected+0xc4>
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	4914      	ldr	r1, [pc, #80]	; (8013414 <__cxa_call_unexpected+0xd4>)
 80133c2:	691b      	ldr	r3, [r3, #16]
 80133c4:	9300      	str	r3, [sp, #0]
 80133c6:	aa04      	add	r2, sp, #16
 80133c8:	2301      	movs	r3, #1
 80133ca:	f842 0d04 	str.w	r0, [r2, #-4]!
 80133ce:	4638      	mov	r0, r7
 80133d0:	9f00      	ldr	r7, [sp, #0]
 80133d2:	47b8      	blx	r7
 80133d4:	2800      	cmp	r0, #0
 80133d6:	bf18      	it	ne
 80133d8:	4680      	movne	r8, r0
 80133da:	f109 0901 	add.w	r9, r9, #1
 80133de:	445c      	add	r4, fp
 80133e0:	e7e1      	b.n	80133a6 <__cxa_call_unexpected+0x66>
 80133e2:	f1b8 0f00 	cmp.w	r8, #0
 80133e6:	d00a      	beq.n	80133fe <__cxa_call_unexpected+0xbe>
 80133e8:	2004      	movs	r0, #4
 80133ea:	f7ff f9df 	bl	80127ac <__cxa_allocate_exception>
 80133ee:	4b0a      	ldr	r3, [pc, #40]	; (8013418 <__cxa_call_unexpected+0xd8>)
 80133f0:	6003      	str	r3, [r0, #0]
 80133f2:	4a0a      	ldr	r2, [pc, #40]	; (801341c <__cxa_call_unexpected+0xdc>)
 80133f4:	4907      	ldr	r1, [pc, #28]	; (8013414 <__cxa_call_unexpected+0xd4>)
 80133f6:	f7ff fa37 	bl	8012868 <__cxa_throw>
 80133fa:	681a      	ldr	r2, [r3, #0]
 80133fc:	e7c8      	b.n	8013390 <__cxa_call_unexpected+0x50>
 80133fe:	4628      	mov	r0, r5
 8013400:	f000 f892 	bl	8013528 <_ZN10__cxxabiv111__terminateEPFvvE>
 8013404:	f7ff fa6e 	bl	80128e4 <__cxa_rethrow>
 8013408:	f000 f848 	bl	801349c <__cxa_end_catch>
 801340c:	f000 f846 	bl	801349c <__cxa_end_catch>
 8013410:	f7ff fac4 	bl	801299c <__cxa_end_cleanup>
 8013414:	08019df8 	.word	0x08019df8
 8013418:	08019e7c 	.word	0x08019e7c
 801341c:	080132c9 	.word	0x080132c9

08013420 <__cxa_begin_catch>:
 8013420:	b538      	push	{r3, r4, r5, lr}
 8013422:	4604      	mov	r4, r0
 8013424:	f7ff fab6 	bl	8012994 <__cxa_get_globals>
 8013428:	7822      	ldrb	r2, [r4, #0]
 801342a:	6803      	ldr	r3, [r0, #0]
 801342c:	2a47      	cmp	r2, #71	; 0x47
 801342e:	f1a4 0120 	sub.w	r1, r4, #32
 8013432:	d004      	beq.n	801343e <__cxa_begin_catch+0x1e>
 8013434:	bb83      	cbnz	r3, 8013498 <__cxa_begin_catch+0x78>
 8013436:	461c      	mov	r4, r3
 8013438:	6001      	str	r1, [r0, #0]
 801343a:	4620      	mov	r0, r4
 801343c:	bd38      	pop	{r3, r4, r5, pc}
 801343e:	7862      	ldrb	r2, [r4, #1]
 8013440:	2a4e      	cmp	r2, #78	; 0x4e
 8013442:	d1f7      	bne.n	8013434 <__cxa_begin_catch+0x14>
 8013444:	78a2      	ldrb	r2, [r4, #2]
 8013446:	2a55      	cmp	r2, #85	; 0x55
 8013448:	d1f4      	bne.n	8013434 <__cxa_begin_catch+0x14>
 801344a:	78e2      	ldrb	r2, [r4, #3]
 801344c:	2a43      	cmp	r2, #67	; 0x43
 801344e:	d1f1      	bne.n	8013434 <__cxa_begin_catch+0x14>
 8013450:	7922      	ldrb	r2, [r4, #4]
 8013452:	2a43      	cmp	r2, #67	; 0x43
 8013454:	d1ee      	bne.n	8013434 <__cxa_begin_catch+0x14>
 8013456:	7962      	ldrb	r2, [r4, #5]
 8013458:	2a2b      	cmp	r2, #43	; 0x2b
 801345a:	d1eb      	bne.n	8013434 <__cxa_begin_catch+0x14>
 801345c:	79a2      	ldrb	r2, [r4, #6]
 801345e:	2a2b      	cmp	r2, #43	; 0x2b
 8013460:	d1e8      	bne.n	8013434 <__cxa_begin_catch+0x14>
 8013462:	79e2      	ldrb	r2, [r4, #7]
 8013464:	2a01      	cmp	r2, #1
 8013466:	d8e5      	bhi.n	8013434 <__cxa_begin_catch+0x14>
 8013468:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 801346c:	2a00      	cmp	r2, #0
 801346e:	db10      	blt.n	8013492 <__cxa_begin_catch+0x72>
 8013470:	3201      	adds	r2, #1
 8013472:	6845      	ldr	r5, [r0, #4]
 8013474:	f844 2c0c 	str.w	r2, [r4, #-12]
 8013478:	3d01      	subs	r5, #1
 801347a:	6045      	str	r5, [r0, #4]
 801347c:	428b      	cmp	r3, r1
 801347e:	bf1c      	itt	ne
 8013480:	f844 3c10 	strne.w	r3, [r4, #-16]
 8013484:	6001      	strne	r1, [r0, #0]
 8013486:	4620      	mov	r0, r4
 8013488:	6a64      	ldr	r4, [r4, #36]	; 0x24
 801348a:	f7f3 fddf 	bl	800704c <_Unwind_Complete>
 801348e:	4620      	mov	r0, r4
 8013490:	bd38      	pop	{r3, r4, r5, pc}
 8013492:	f1c2 0201 	rsb	r2, r2, #1
 8013496:	e7ec      	b.n	8013472 <__cxa_begin_catch+0x52>
 8013498:	f000 f85a 	bl	8013550 <_ZSt9terminatev>

0801349c <__cxa_end_catch>:
 801349c:	b508      	push	{r3, lr}
 801349e:	f7ff fa75 	bl	801298c <__cxa_get_globals_fast>
 80134a2:	4602      	mov	r2, r0
 80134a4:	6800      	ldr	r0, [r0, #0]
 80134a6:	2800      	cmp	r0, #0
 80134a8:	d03d      	beq.n	8013526 <__cxa_end_catch+0x8a>
 80134aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80134ae:	2b47      	cmp	r3, #71	; 0x47
 80134b0:	d006      	beq.n	80134c0 <__cxa_end_catch+0x24>
 80134b2:	2300      	movs	r3, #0
 80134b4:	6013      	str	r3, [r2, #0]
 80134b6:	3020      	adds	r0, #32
 80134b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80134bc:	f7f3 bdc8 	b.w	8007050 <_Unwind_DeleteException>
 80134c0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80134c4:	2b4e      	cmp	r3, #78	; 0x4e
 80134c6:	d1f4      	bne.n	80134b2 <__cxa_end_catch+0x16>
 80134c8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80134cc:	2b55      	cmp	r3, #85	; 0x55
 80134ce:	d1f0      	bne.n	80134b2 <__cxa_end_catch+0x16>
 80134d0:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80134d4:	2b43      	cmp	r3, #67	; 0x43
 80134d6:	d1ec      	bne.n	80134b2 <__cxa_end_catch+0x16>
 80134d8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80134dc:	2b43      	cmp	r3, #67	; 0x43
 80134de:	d1e8      	bne.n	80134b2 <__cxa_end_catch+0x16>
 80134e0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80134e4:	2b2b      	cmp	r3, #43	; 0x2b
 80134e6:	d1e4      	bne.n	80134b2 <__cxa_end_catch+0x16>
 80134e8:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80134ec:	2b2b      	cmp	r3, #43	; 0x2b
 80134ee:	d1e0      	bne.n	80134b2 <__cxa_end_catch+0x16>
 80134f0:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80134f4:	2b01      	cmp	r3, #1
 80134f6:	d8dc      	bhi.n	80134b2 <__cxa_end_catch+0x16>
 80134f8:	6943      	ldr	r3, [r0, #20]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	db05      	blt.n	801350a <__cxa_end_catch+0x6e>
 80134fe:	3b01      	subs	r3, #1
 8013500:	d008      	beq.n	8013514 <__cxa_end_catch+0x78>
 8013502:	1c5a      	adds	r2, r3, #1
 8013504:	d00d      	beq.n	8013522 <__cxa_end_catch+0x86>
 8013506:	6143      	str	r3, [r0, #20]
 8013508:	bd08      	pop	{r3, pc}
 801350a:	3301      	adds	r3, #1
 801350c:	d1fb      	bne.n	8013506 <__cxa_end_catch+0x6a>
 801350e:	6901      	ldr	r1, [r0, #16]
 8013510:	6011      	str	r1, [r2, #0]
 8013512:	e7f8      	b.n	8013506 <__cxa_end_catch+0x6a>
 8013514:	6903      	ldr	r3, [r0, #16]
 8013516:	6013      	str	r3, [r2, #0]
 8013518:	3020      	adds	r0, #32
 801351a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801351e:	f7f3 bd97 	b.w	8007050 <_Unwind_DeleteException>
 8013522:	f000 f815 	bl	8013550 <_ZSt9terminatev>
 8013526:	bd08      	pop	{r3, pc}

08013528 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013528:	b508      	push	{r3, lr}
 801352a:	4780      	blx	r0
 801352c:	f001 fdb7 	bl	801509e <abort>
 8013530:	f7ff ff76 	bl	8013420 <__cxa_begin_catch>
 8013534:	f001 fdb3 	bl	801509e <abort>
 8013538:	460d      	mov	r5, r1
 801353a:	4604      	mov	r4, r0
 801353c:	f7ff ffae 	bl	801349c <__cxa_end_catch>
 8013540:	3501      	adds	r5, #1
 8013542:	d001      	beq.n	8013548 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 8013544:	f7ff fa2a 	bl	801299c <__cxa_end_cleanup>
 8013548:	4620      	mov	r0, r4
 801354a:	f7ff fef9 	bl	8013340 <__cxa_call_unexpected>
 801354e:	bf00      	nop

08013550 <_ZSt9terminatev>:
 8013550:	b508      	push	{r3, lr}
 8013552:	4b03      	ldr	r3, [pc, #12]	; (8013560 <_ZSt9terminatev+0x10>)
 8013554:	6818      	ldr	r0, [r3, #0]
 8013556:	f3bf 8f5b 	dmb	ish
 801355a:	f7ff ffe5 	bl	8013528 <_ZN10__cxxabiv111__terminateEPFvvE>
 801355e:	bf00      	nop
 8013560:	2000002c 	.word	0x2000002c

08013564 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8013564:	b508      	push	{r3, lr}
 8013566:	4780      	blx	r0
 8013568:	f7ff fff2 	bl	8013550 <_ZSt9terminatev>

0801356c <_ZSt10unexpectedv>:
 801356c:	b508      	push	{r3, lr}
 801356e:	4b03      	ldr	r3, [pc, #12]	; (801357c <_ZSt10unexpectedv+0x10>)
 8013570:	6818      	ldr	r0, [r3, #0]
 8013572:	f3bf 8f5b 	dmb	ish
 8013576:	f7ff fff5 	bl	8013564 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 801357a:	bf00      	nop
 801357c:	20000030 	.word	0x20000030

08013580 <_ZSt13get_terminatev>:
 8013580:	4b02      	ldr	r3, [pc, #8]	; (801358c <_ZSt13get_terminatev+0xc>)
 8013582:	6818      	ldr	r0, [r3, #0]
 8013584:	f3bf 8f5b 	dmb	ish
 8013588:	4770      	bx	lr
 801358a:	bf00      	nop
 801358c:	2000002c 	.word	0x2000002c

08013590 <_ZSt14get_unexpectedv>:
 8013590:	4b02      	ldr	r3, [pc, #8]	; (801359c <_ZSt14get_unexpectedv+0xc>)
 8013592:	6818      	ldr	r0, [r3, #0]
 8013594:	f3bf 8f5b 	dmb	ish
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	20000030 	.word	0x20000030

080135a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 80135a0:	b570      	push	{r4, r5, r6, lr}
 80135a2:	4b3c      	ldr	r3, [pc, #240]	; (8013694 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 80135a4:	781a      	ldrb	r2, [r3, #0]
 80135a6:	b082      	sub	sp, #8
 80135a8:	2a00      	cmp	r2, #0
 80135aa:	d135      	bne.n	8013618 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 80135ac:	2401      	movs	r4, #1
 80135ae:	701c      	strb	r4, [r3, #0]
 80135b0:	f000 f87e 	bl	80136b0 <__cxa_current_exception_type>
 80135b4:	2800      	cmp	r0, #0
 80135b6:	d05b      	beq.n	8013670 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
 80135b8:	6844      	ldr	r4, [r0, #4]
 80135ba:	4d37      	ldr	r5, [pc, #220]	; (8013698 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 80135bc:	7823      	ldrb	r3, [r4, #0]
 80135be:	2b2a      	cmp	r3, #42	; 0x2a
 80135c0:	ab02      	add	r3, sp, #8
 80135c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135c6:	bf08      	it	eq
 80135c8:	3401      	addeq	r4, #1
 80135ca:	f843 2d04 	str.w	r2, [r3, #-4]!
 80135ce:	2200      	movs	r2, #0
 80135d0:	4611      	mov	r1, r2
 80135d2:	4620      	mov	r0, r4
 80135d4:	f7f3 f91a 	bl	800680c <__cxa_demangle>
 80135d8:	682b      	ldr	r3, [r5, #0]
 80135da:	4606      	mov	r6, r0
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	482f      	ldr	r0, [pc, #188]	; (801369c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 80135e0:	2230      	movs	r2, #48	; 0x30
 80135e2:	2101      	movs	r1, #1
 80135e4:	f001 ffb0 	bl	8015548 <fwrite>
 80135e8:	9b01      	ldr	r3, [sp, #4]
 80135ea:	b17b      	cbz	r3, 801360c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 80135ec:	682b      	ldr	r3, [r5, #0]
 80135ee:	4620      	mov	r0, r4
 80135f0:	68d9      	ldr	r1, [r3, #12]
 80135f2:	f001 fdf5 	bl	80151e0 <fputs>
 80135f6:	682b      	ldr	r3, [r5, #0]
 80135f8:	4829      	ldr	r0, [pc, #164]	; (80136a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 80135fa:	68db      	ldr	r3, [r3, #12]
 80135fc:	2202      	movs	r2, #2
 80135fe:	2101      	movs	r1, #1
 8013600:	f001 ffa2 	bl	8015548 <fwrite>
 8013604:	9b01      	ldr	r3, [sp, #4]
 8013606:	b18b      	cbz	r3, 801362c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 8013608:	f7ff f96c 	bl	80128e4 <__cxa_rethrow>
 801360c:	682b      	ldr	r3, [r5, #0]
 801360e:	4630      	mov	r0, r6
 8013610:	68d9      	ldr	r1, [r3, #12]
 8013612:	f001 fde5 	bl	80151e0 <fputs>
 8013616:	e7ee      	b.n	80135f6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 8013618:	4b1f      	ldr	r3, [pc, #124]	; (8013698 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 801361a:	4822      	ldr	r0, [pc, #136]	; (80136a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	221d      	movs	r2, #29
 8013620:	68db      	ldr	r3, [r3, #12]
 8013622:	2101      	movs	r1, #1
 8013624:	f001 ff90 	bl	8015548 <fwrite>
 8013628:	f001 fd39 	bl	801509e <abort>
 801362c:	4630      	mov	r0, r6
 801362e:	f001 ffcb 	bl	80155c8 <free>
 8013632:	e7e9      	b.n	8013608 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 8013634:	2901      	cmp	r1, #1
 8013636:	460c      	mov	r4, r1
 8013638:	d127      	bne.n	801368a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
 801363a:	f7ff fef1 	bl	8013420 <__cxa_begin_catch>
 801363e:	6803      	ldr	r3, [r0, #0]
 8013640:	689b      	ldr	r3, [r3, #8]
 8013642:	4798      	blx	r3
 8013644:	682b      	ldr	r3, [r5, #0]
 8013646:	4606      	mov	r6, r0
 8013648:	68db      	ldr	r3, [r3, #12]
 801364a:	4817      	ldr	r0, [pc, #92]	; (80136a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 801364c:	4621      	mov	r1, r4
 801364e:	220b      	movs	r2, #11
 8013650:	f001 ff7a 	bl	8015548 <fwrite>
 8013654:	682b      	ldr	r3, [r5, #0]
 8013656:	4630      	mov	r0, r6
 8013658:	68d9      	ldr	r1, [r3, #12]
 801365a:	f001 fdc1 	bl	80151e0 <fputs>
 801365e:	682b      	ldr	r3, [r5, #0]
 8013660:	200a      	movs	r0, #10
 8013662:	68d9      	ldr	r1, [r3, #12]
 8013664:	f001 fd66 	bl	8015134 <fputc>
 8013668:	f7ff ff18 	bl	801349c <__cxa_end_catch>
 801366c:	f001 fd17 	bl	801509e <abort>
 8013670:	4b09      	ldr	r3, [pc, #36]	; (8013698 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8013672:	480e      	ldr	r0, [pc, #56]	; (80136ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	4621      	mov	r1, r4
 8013678:	68db      	ldr	r3, [r3, #12]
 801367a:	222d      	movs	r2, #45	; 0x2d
 801367c:	f001 ff64 	bl	8015548 <fwrite>
 8013680:	e7f4      	b.n	801366c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 8013682:	f7ff ff0b 	bl	801349c <__cxa_end_catch>
 8013686:	f7ff f989 	bl	801299c <__cxa_end_cleanup>
 801368a:	f7ff fec9 	bl	8013420 <__cxa_begin_catch>
 801368e:	f7ff ff05 	bl	801349c <__cxa_end_catch>
 8013692:	e7eb      	b.n	801366c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 8013694:	20007690 	.word	0x20007690
 8013698:	20000034 	.word	0x20000034
 801369c:	08019ea8 	.word	0x08019ea8
 80136a0:	08019edc 	.word	0x08019edc
 80136a4:	08019e88 	.word	0x08019e88
 80136a8:	08019f10 	.word	0x08019f10
 80136ac:	08019ee0 	.word	0x08019ee0

080136b0 <__cxa_current_exception_type>:
 80136b0:	b508      	push	{r3, lr}
 80136b2:	f7ff f96f 	bl	8012994 <__cxa_get_globals>
 80136b6:	6800      	ldr	r0, [r0, #0]
 80136b8:	b130      	cbz	r0, 80136c8 <__cxa_current_exception_type+0x18>
 80136ba:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80136be:	2b01      	cmp	r3, #1
 80136c0:	bf04      	itt	eq
 80136c2:	6800      	ldreq	r0, [r0, #0]
 80136c4:	3878      	subeq	r0, #120	; 0x78
 80136c6:	6800      	ldr	r0, [r0, #0]
 80136c8:	bd08      	pop	{r3, pc}
 80136ca:	bf00      	nop
 80136cc:	0000      	movs	r0, r0
	...

080136d0 <cos>:
 80136d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136d2:	eeb0 7b40 	vmov.f64	d7, d0
 80136d6:	ee17 3a90 	vmov	r3, s15
 80136da:	4a19      	ldr	r2, [pc, #100]	; (8013740 <cos+0x70>)
 80136dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136e0:	4293      	cmp	r3, r2
 80136e2:	dc04      	bgt.n	80136ee <cos+0x1e>
 80136e4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8013738 <cos+0x68>
 80136e8:	f000 fc0a 	bl	8013f00 <__kernel_cos>
 80136ec:	e004      	b.n	80136f8 <cos+0x28>
 80136ee:	4a15      	ldr	r2, [pc, #84]	; (8013744 <cos+0x74>)
 80136f0:	4293      	cmp	r3, r2
 80136f2:	dd04      	ble.n	80136fe <cos+0x2e>
 80136f4:	ee30 0b40 	vsub.f64	d0, d0, d0
 80136f8:	b005      	add	sp, #20
 80136fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80136fe:	4668      	mov	r0, sp
 8013700:	f000 f8e2 	bl	80138c8 <__ieee754_rem_pio2>
 8013704:	f000 0003 	and.w	r0, r0, #3
 8013708:	2801      	cmp	r0, #1
 801370a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801370e:	ed9d 0b00 	vldr	d0, [sp]
 8013712:	d007      	beq.n	8013724 <cos+0x54>
 8013714:	2802      	cmp	r0, #2
 8013716:	d00a      	beq.n	801372e <cos+0x5e>
 8013718:	2800      	cmp	r0, #0
 801371a:	d0e5      	beq.n	80136e8 <cos+0x18>
 801371c:	2001      	movs	r0, #1
 801371e:	f000 fecf 	bl	80144c0 <__kernel_sin>
 8013722:	e7e9      	b.n	80136f8 <cos+0x28>
 8013724:	f000 fecc 	bl	80144c0 <__kernel_sin>
 8013728:	eeb1 0b40 	vneg.f64	d0, d0
 801372c:	e7e4      	b.n	80136f8 <cos+0x28>
 801372e:	f000 fbe7 	bl	8013f00 <__kernel_cos>
 8013732:	e7f9      	b.n	8013728 <cos+0x58>
 8013734:	f3af 8000 	nop.w
	...
 8013740:	3fe921fb 	.word	0x3fe921fb
 8013744:	7fefffff 	.word	0x7fefffff

08013748 <sin>:
 8013748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801374a:	eeb0 7b40 	vmov.f64	d7, d0
 801374e:	ee17 3a90 	vmov	r3, s15
 8013752:	4a19      	ldr	r2, [pc, #100]	; (80137b8 <sin+0x70>)
 8013754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013758:	4293      	cmp	r3, r2
 801375a:	dc05      	bgt.n	8013768 <sin+0x20>
 801375c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80137b0 <sin+0x68>
 8013760:	2000      	movs	r0, #0
 8013762:	f000 fead 	bl	80144c0 <__kernel_sin>
 8013766:	e004      	b.n	8013772 <sin+0x2a>
 8013768:	4a14      	ldr	r2, [pc, #80]	; (80137bc <sin+0x74>)
 801376a:	4293      	cmp	r3, r2
 801376c:	dd04      	ble.n	8013778 <sin+0x30>
 801376e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013772:	b005      	add	sp, #20
 8013774:	f85d fb04 	ldr.w	pc, [sp], #4
 8013778:	4668      	mov	r0, sp
 801377a:	f000 f8a5 	bl	80138c8 <__ieee754_rem_pio2>
 801377e:	f000 0003 	and.w	r0, r0, #3
 8013782:	2801      	cmp	r0, #1
 8013784:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013788:	ed9d 0b00 	vldr	d0, [sp]
 801378c:	d004      	beq.n	8013798 <sin+0x50>
 801378e:	2802      	cmp	r0, #2
 8013790:	d005      	beq.n	801379e <sin+0x56>
 8013792:	b950      	cbnz	r0, 80137aa <sin+0x62>
 8013794:	2001      	movs	r0, #1
 8013796:	e7e4      	b.n	8013762 <sin+0x1a>
 8013798:	f000 fbb2 	bl	8013f00 <__kernel_cos>
 801379c:	e7e9      	b.n	8013772 <sin+0x2a>
 801379e:	2001      	movs	r0, #1
 80137a0:	f000 fe8e 	bl	80144c0 <__kernel_sin>
 80137a4:	eeb1 0b40 	vneg.f64	d0, d0
 80137a8:	e7e3      	b.n	8013772 <sin+0x2a>
 80137aa:	f000 fba9 	bl	8013f00 <__kernel_cos>
 80137ae:	e7f9      	b.n	80137a4 <sin+0x5c>
	...
 80137b8:	3fe921fb 	.word	0x3fe921fb
 80137bc:	7fefffff 	.word	0x7fefffff

080137c0 <cosf>:
 80137c0:	ee10 3a10 	vmov	r3, s0
 80137c4:	b507      	push	{r0, r1, r2, lr}
 80137c6:	4a1c      	ldr	r2, [pc, #112]	; (8013838 <cosf+0x78>)
 80137c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137cc:	4293      	cmp	r3, r2
 80137ce:	dc04      	bgt.n	80137da <cosf+0x1a>
 80137d0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801383c <cosf+0x7c>
 80137d4:	f000 fecc 	bl	8014570 <__kernel_cosf>
 80137d8:	e004      	b.n	80137e4 <cosf+0x24>
 80137da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80137de:	db04      	blt.n	80137ea <cosf+0x2a>
 80137e0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80137e4:	b003      	add	sp, #12
 80137e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80137ea:	4668      	mov	r0, sp
 80137ec:	f000 fa5a 	bl	8013ca4 <__ieee754_rem_pio2f>
 80137f0:	f000 0003 	and.w	r0, r0, #3
 80137f4:	2801      	cmp	r0, #1
 80137f6:	d007      	beq.n	8013808 <cosf+0x48>
 80137f8:	2802      	cmp	r0, #2
 80137fa:	d00e      	beq.n	801381a <cosf+0x5a>
 80137fc:	b9a0      	cbnz	r0, 8013828 <cosf+0x68>
 80137fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8013802:	ed9d 0a00 	vldr	s0, [sp]
 8013806:	e7e5      	b.n	80137d4 <cosf+0x14>
 8013808:	eddd 0a01 	vldr	s1, [sp, #4]
 801380c:	ed9d 0a00 	vldr	s0, [sp]
 8013810:	f001 f96a 	bl	8014ae8 <__kernel_sinf>
 8013814:	eeb1 0a40 	vneg.f32	s0, s0
 8013818:	e7e4      	b.n	80137e4 <cosf+0x24>
 801381a:	eddd 0a01 	vldr	s1, [sp, #4]
 801381e:	ed9d 0a00 	vldr	s0, [sp]
 8013822:	f000 fea5 	bl	8014570 <__kernel_cosf>
 8013826:	e7f5      	b.n	8013814 <cosf+0x54>
 8013828:	2001      	movs	r0, #1
 801382a:	eddd 0a01 	vldr	s1, [sp, #4]
 801382e:	ed9d 0a00 	vldr	s0, [sp]
 8013832:	f001 f959 	bl	8014ae8 <__kernel_sinf>
 8013836:	e7d5      	b.n	80137e4 <cosf+0x24>
 8013838:	3f490fd8 	.word	0x3f490fd8
 801383c:	00000000 	.word	0x00000000

08013840 <sinf>:
 8013840:	ee10 3a10 	vmov	r3, s0
 8013844:	b507      	push	{r0, r1, r2, lr}
 8013846:	4a1d      	ldr	r2, [pc, #116]	; (80138bc <sinf+0x7c>)
 8013848:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801384c:	4293      	cmp	r3, r2
 801384e:	dc05      	bgt.n	801385c <sinf+0x1c>
 8013850:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80138c0 <sinf+0x80>
 8013854:	2000      	movs	r0, #0
 8013856:	f001 f947 	bl	8014ae8 <__kernel_sinf>
 801385a:	e004      	b.n	8013866 <sinf+0x26>
 801385c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013860:	db04      	blt.n	801386c <sinf+0x2c>
 8013862:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013866:	b003      	add	sp, #12
 8013868:	f85d fb04 	ldr.w	pc, [sp], #4
 801386c:	4668      	mov	r0, sp
 801386e:	f000 fa19 	bl	8013ca4 <__ieee754_rem_pio2f>
 8013872:	f000 0003 	and.w	r0, r0, #3
 8013876:	2801      	cmp	r0, #1
 8013878:	d008      	beq.n	801388c <sinf+0x4c>
 801387a:	2802      	cmp	r0, #2
 801387c:	d00d      	beq.n	801389a <sinf+0x5a>
 801387e:	b9b0      	cbnz	r0, 80138ae <sinf+0x6e>
 8013880:	2001      	movs	r0, #1
 8013882:	eddd 0a01 	vldr	s1, [sp, #4]
 8013886:	ed9d 0a00 	vldr	s0, [sp]
 801388a:	e7e4      	b.n	8013856 <sinf+0x16>
 801388c:	eddd 0a01 	vldr	s1, [sp, #4]
 8013890:	ed9d 0a00 	vldr	s0, [sp]
 8013894:	f000 fe6c 	bl	8014570 <__kernel_cosf>
 8013898:	e7e5      	b.n	8013866 <sinf+0x26>
 801389a:	2001      	movs	r0, #1
 801389c:	eddd 0a01 	vldr	s1, [sp, #4]
 80138a0:	ed9d 0a00 	vldr	s0, [sp]
 80138a4:	f001 f920 	bl	8014ae8 <__kernel_sinf>
 80138a8:	eeb1 0a40 	vneg.f32	s0, s0
 80138ac:	e7db      	b.n	8013866 <sinf+0x26>
 80138ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80138b2:	ed9d 0a00 	vldr	s0, [sp]
 80138b6:	f000 fe5b 	bl	8014570 <__kernel_cosf>
 80138ba:	e7f5      	b.n	80138a8 <sinf+0x68>
 80138bc:	3f490fd8 	.word	0x3f490fd8
 80138c0:	00000000 	.word	0x00000000

080138c4 <atan2f>:
 80138c4:	f000 b940 	b.w	8013b48 <__ieee754_atan2f>

080138c8 <__ieee754_rem_pio2>:
 80138c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138ca:	eeb0 7b40 	vmov.f64	d7, d0
 80138ce:	ee17 5a90 	vmov	r5, s15
 80138d2:	4b97      	ldr	r3, [pc, #604]	; (8013b30 <__ieee754_rem_pio2+0x268>)
 80138d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80138d8:	429e      	cmp	r6, r3
 80138da:	b089      	sub	sp, #36	; 0x24
 80138dc:	4604      	mov	r4, r0
 80138de:	dc07      	bgt.n	80138f0 <__ieee754_rem_pio2+0x28>
 80138e0:	2200      	movs	r2, #0
 80138e2:	2300      	movs	r3, #0
 80138e4:	ed84 0b00 	vstr	d0, [r4]
 80138e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80138ec:	2000      	movs	r0, #0
 80138ee:	e01b      	b.n	8013928 <__ieee754_rem_pio2+0x60>
 80138f0:	4b90      	ldr	r3, [pc, #576]	; (8013b34 <__ieee754_rem_pio2+0x26c>)
 80138f2:	429e      	cmp	r6, r3
 80138f4:	dc3b      	bgt.n	801396e <__ieee754_rem_pio2+0xa6>
 80138f6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80138fa:	2d00      	cmp	r5, #0
 80138fc:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8013af0 <__ieee754_rem_pio2+0x228>
 8013900:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8013904:	dd19      	ble.n	801393a <__ieee754_rem_pio2+0x72>
 8013906:	ee30 7b46 	vsub.f64	d7, d0, d6
 801390a:	429e      	cmp	r6, r3
 801390c:	d00e      	beq.n	801392c <__ieee754_rem_pio2+0x64>
 801390e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8013af8 <__ieee754_rem_pio2+0x230>
 8013912:	ee37 5b46 	vsub.f64	d5, d7, d6
 8013916:	ee37 7b45 	vsub.f64	d7, d7, d5
 801391a:	ed84 5b00 	vstr	d5, [r4]
 801391e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013922:	ed84 7b02 	vstr	d7, [r4, #8]
 8013926:	2001      	movs	r0, #1
 8013928:	b009      	add	sp, #36	; 0x24
 801392a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801392c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8013b00 <__ieee754_rem_pio2+0x238>
 8013930:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013934:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8013b08 <__ieee754_rem_pio2+0x240>
 8013938:	e7eb      	b.n	8013912 <__ieee754_rem_pio2+0x4a>
 801393a:	429e      	cmp	r6, r3
 801393c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013940:	d00e      	beq.n	8013960 <__ieee754_rem_pio2+0x98>
 8013942:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8013af8 <__ieee754_rem_pio2+0x230>
 8013946:	ee37 5b06 	vadd.f64	d5, d7, d6
 801394a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801394e:	ed84 5b00 	vstr	d5, [r4]
 8013952:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801395a:	ed84 7b02 	vstr	d7, [r4, #8]
 801395e:	e7e3      	b.n	8013928 <__ieee754_rem_pio2+0x60>
 8013960:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8013b00 <__ieee754_rem_pio2+0x238>
 8013964:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013968:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8013b08 <__ieee754_rem_pio2+0x240>
 801396c:	e7eb      	b.n	8013946 <__ieee754_rem_pio2+0x7e>
 801396e:	4b72      	ldr	r3, [pc, #456]	; (8013b38 <__ieee754_rem_pio2+0x270>)
 8013970:	429e      	cmp	r6, r3
 8013972:	dc6e      	bgt.n	8013a52 <__ieee754_rem_pio2+0x18a>
 8013974:	f001 f900 	bl	8014b78 <fabs>
 8013978:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801397c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8013b10 <__ieee754_rem_pio2+0x248>
 8013980:	eea0 7b06 	vfma.f64	d7, d0, d6
 8013984:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013988:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801398c:	ee17 0a90 	vmov	r0, s15
 8013990:	eeb1 5b44 	vneg.f64	d5, d4
 8013994:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8013af0 <__ieee754_rem_pio2+0x228>
 8013998:	eea5 0b07 	vfma.f64	d0, d5, d7
 801399c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8013af8 <__ieee754_rem_pio2+0x230>
 80139a0:	281f      	cmp	r0, #31
 80139a2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80139a6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80139aa:	dc1b      	bgt.n	80139e4 <__ieee754_rem_pio2+0x11c>
 80139ac:	1e42      	subs	r2, r0, #1
 80139ae:	4b63      	ldr	r3, [pc, #396]	; (8013b3c <__ieee754_rem_pio2+0x274>)
 80139b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139b4:	429e      	cmp	r6, r3
 80139b6:	d015      	beq.n	80139e4 <__ieee754_rem_pio2+0x11c>
 80139b8:	ed84 6b00 	vstr	d6, [r4]
 80139bc:	ed94 6b00 	vldr	d6, [r4]
 80139c0:	2d00      	cmp	r5, #0
 80139c2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80139c6:	ee30 7b47 	vsub.f64	d7, d0, d7
 80139ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80139ce:	daab      	bge.n	8013928 <__ieee754_rem_pio2+0x60>
 80139d0:	eeb1 6b46 	vneg.f64	d6, d6
 80139d4:	ed84 6b00 	vstr	d6, [r4]
 80139d8:	eeb1 7b47 	vneg.f64	d7, d7
 80139dc:	4240      	negs	r0, r0
 80139de:	ed84 7b02 	vstr	d7, [r4, #8]
 80139e2:	e7a1      	b.n	8013928 <__ieee754_rem_pio2+0x60>
 80139e4:	ee16 3a90 	vmov	r3, s13
 80139e8:	1536      	asrs	r6, r6, #20
 80139ea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80139ee:	1af3      	subs	r3, r6, r3
 80139f0:	2b10      	cmp	r3, #16
 80139f2:	ed84 6b00 	vstr	d6, [r4]
 80139f6:	dde1      	ble.n	80139bc <__ieee754_rem_pio2+0xf4>
 80139f8:	eeb0 6b40 	vmov.f64	d6, d0
 80139fc:	ed9f 3b40 	vldr	d3, [pc, #256]	; 8013b00 <__ieee754_rem_pio2+0x238>
 8013a00:	eea5 6b03 	vfma.f64	d6, d5, d3
 8013a04:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013a08:	eea5 7b03 	vfma.f64	d7, d5, d3
 8013a0c:	ed9f 3b3e 	vldr	d3, [pc, #248]	; 8013b08 <__ieee754_rem_pio2+0x240>
 8013a10:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8013a14:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013a18:	ee13 3a90 	vmov	r3, s7
 8013a1c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013a20:	1af6      	subs	r6, r6, r3
 8013a22:	2e31      	cmp	r6, #49	; 0x31
 8013a24:	ed84 3b00 	vstr	d3, [r4]
 8013a28:	dd10      	ble.n	8013a4c <__ieee754_rem_pio2+0x184>
 8013a2a:	eeb0 0b46 	vmov.f64	d0, d6
 8013a2e:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8013b18 <__ieee754_rem_pio2+0x250>
 8013a32:	eea5 0b03 	vfma.f64	d0, d5, d3
 8013a36:	ee36 7b40 	vsub.f64	d7, d6, d0
 8013a3a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8013b20 <__ieee754_rem_pio2+0x258>
 8013a3e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8013a42:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8013a46:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013a4a:	e7b5      	b.n	80139b8 <__ieee754_rem_pio2+0xf0>
 8013a4c:	eeb0 0b46 	vmov.f64	d0, d6
 8013a50:	e7b4      	b.n	80139bc <__ieee754_rem_pio2+0xf4>
 8013a52:	4b3b      	ldr	r3, [pc, #236]	; (8013b40 <__ieee754_rem_pio2+0x278>)
 8013a54:	429e      	cmp	r6, r3
 8013a56:	dd06      	ble.n	8013a66 <__ieee754_rem_pio2+0x19e>
 8013a58:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013a5c:	ed80 7b02 	vstr	d7, [r0, #8]
 8013a60:	ed80 7b00 	vstr	d7, [r0]
 8013a64:	e742      	b.n	80138ec <__ieee754_rem_pio2+0x24>
 8013a66:	ee10 3a10 	vmov	r3, s0
 8013a6a:	1532      	asrs	r2, r6, #20
 8013a6c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8013a70:	4618      	mov	r0, r3
 8013a72:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013a76:	ec41 0b17 	vmov	d7, r0, r1
 8013a7a:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013a7e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8013b28 <__ieee754_rem_pio2+0x260>
 8013a82:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013a86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013a8a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013a8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013a92:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013a96:	a908      	add	r1, sp, #32
 8013a98:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013a9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013aa0:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013aa4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013aa8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013aac:	2303      	movs	r3, #3
 8013aae:	ed31 7b02 	vldmdb	r1!, {d7}
 8013ab2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aba:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8013abe:	d013      	beq.n	8013ae8 <__ieee754_rem_pio2+0x220>
 8013ac0:	4920      	ldr	r1, [pc, #128]	; (8013b44 <__ieee754_rem_pio2+0x27c>)
 8013ac2:	9101      	str	r1, [sp, #4]
 8013ac4:	2102      	movs	r1, #2
 8013ac6:	9100      	str	r1, [sp, #0]
 8013ac8:	a802      	add	r0, sp, #8
 8013aca:	4621      	mov	r1, r4
 8013acc:	f000 fa84 	bl	8013fd8 <__kernel_rem_pio2>
 8013ad0:	2d00      	cmp	r5, #0
 8013ad2:	f6bf af29 	bge.w	8013928 <__ieee754_rem_pio2+0x60>
 8013ad6:	ed94 7b00 	vldr	d7, [r4]
 8013ada:	eeb1 7b47 	vneg.f64	d7, d7
 8013ade:	ed84 7b00 	vstr	d7, [r4]
 8013ae2:	ed94 7b02 	vldr	d7, [r4, #8]
 8013ae6:	e777      	b.n	80139d8 <__ieee754_rem_pio2+0x110>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	e7e0      	b.n	8013aae <__ieee754_rem_pio2+0x1e6>
 8013aec:	f3af 8000 	nop.w
 8013af0:	54400000 	.word	0x54400000
 8013af4:	3ff921fb 	.word	0x3ff921fb
 8013af8:	1a626331 	.word	0x1a626331
 8013afc:	3dd0b461 	.word	0x3dd0b461
 8013b00:	1a600000 	.word	0x1a600000
 8013b04:	3dd0b461 	.word	0x3dd0b461
 8013b08:	2e037073 	.word	0x2e037073
 8013b0c:	3ba3198a 	.word	0x3ba3198a
 8013b10:	6dc9c883 	.word	0x6dc9c883
 8013b14:	3fe45f30 	.word	0x3fe45f30
 8013b18:	2e000000 	.word	0x2e000000
 8013b1c:	3ba3198a 	.word	0x3ba3198a
 8013b20:	252049c1 	.word	0x252049c1
 8013b24:	397b839a 	.word	0x397b839a
 8013b28:	00000000 	.word	0x00000000
 8013b2c:	41700000 	.word	0x41700000
 8013b30:	3fe921fb 	.word	0x3fe921fb
 8013b34:	4002d97b 	.word	0x4002d97b
 8013b38:	413921fb 	.word	0x413921fb
 8013b3c:	0801a76c 	.word	0x0801a76c
 8013b40:	7fefffff 	.word	0x7fefffff
 8013b44:	0801a7ec 	.word	0x0801a7ec

08013b48 <__ieee754_atan2f>:
 8013b48:	ee10 2a90 	vmov	r2, s1
 8013b4c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013b50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013b54:	b510      	push	{r4, lr}
 8013b56:	eef0 7a40 	vmov.f32	s15, s0
 8013b5a:	dc06      	bgt.n	8013b6a <__ieee754_atan2f+0x22>
 8013b5c:	ee10 0a10 	vmov	r0, s0
 8013b60:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013b64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013b68:	dd04      	ble.n	8013b74 <__ieee754_atan2f+0x2c>
 8013b6a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8013b72:	bd10      	pop	{r4, pc}
 8013b74:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013b78:	d103      	bne.n	8013b82 <__ieee754_atan2f+0x3a>
 8013b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b7e:	f001 b8f9 	b.w	8014d74 <atanf>
 8013b82:	1794      	asrs	r4, r2, #30
 8013b84:	f004 0402 	and.w	r4, r4, #2
 8013b88:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013b8c:	b943      	cbnz	r3, 8013ba0 <__ieee754_atan2f+0x58>
 8013b8e:	2c02      	cmp	r4, #2
 8013b90:	d033      	beq.n	8013bfa <__ieee754_atan2f+0xb2>
 8013b92:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8013c78 <__ieee754_atan2f+0x130>
 8013b96:	2c03      	cmp	r4, #3
 8013b98:	bf08      	it	eq
 8013b9a:	eef0 7a47 	vmoveq.f32	s15, s14
 8013b9e:	e7e6      	b.n	8013b6e <__ieee754_atan2f+0x26>
 8013ba0:	b941      	cbnz	r1, 8013bb4 <__ieee754_atan2f+0x6c>
 8013ba2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013c7c <__ieee754_atan2f+0x134>
 8013ba6:	eddf 7a36 	vldr	s15, [pc, #216]	; 8013c80 <__ieee754_atan2f+0x138>
 8013baa:	2800      	cmp	r0, #0
 8013bac:	bfb8      	it	lt
 8013bae:	eef0 7a47 	vmovlt.f32	s15, s14
 8013bb2:	e7dc      	b.n	8013b6e <__ieee754_atan2f+0x26>
 8013bb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013bb8:	d125      	bne.n	8013c06 <__ieee754_atan2f+0xbe>
 8013bba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013bbe:	d112      	bne.n	8013be6 <__ieee754_atan2f+0x9e>
 8013bc0:	2c02      	cmp	r4, #2
 8013bc2:	d00a      	beq.n	8013bda <__ieee754_atan2f+0x92>
 8013bc4:	2c03      	cmp	r4, #3
 8013bc6:	d00b      	beq.n	8013be0 <__ieee754_atan2f+0x98>
 8013bc8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8013c84 <__ieee754_atan2f+0x13c>
 8013bcc:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8013c88 <__ieee754_atan2f+0x140>
 8013bd0:	2c01      	cmp	r4, #1
 8013bd2:	bf18      	it	ne
 8013bd4:	eef0 7a47 	vmovne.f32	s15, s14
 8013bd8:	e7c9      	b.n	8013b6e <__ieee754_atan2f+0x26>
 8013bda:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8013c8c <__ieee754_atan2f+0x144>
 8013bde:	e7c6      	b.n	8013b6e <__ieee754_atan2f+0x26>
 8013be0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013c90 <__ieee754_atan2f+0x148>
 8013be4:	e7c3      	b.n	8013b6e <__ieee754_atan2f+0x26>
 8013be6:	2c02      	cmp	r4, #2
 8013be8:	d007      	beq.n	8013bfa <__ieee754_atan2f+0xb2>
 8013bea:	2c03      	cmp	r4, #3
 8013bec:	d008      	beq.n	8013c00 <__ieee754_atan2f+0xb8>
 8013bee:	2c01      	cmp	r4, #1
 8013bf0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013c94 <__ieee754_atan2f+0x14c>
 8013bf4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013c98 <__ieee754_atan2f+0x150>
 8013bf8:	e7eb      	b.n	8013bd2 <__ieee754_atan2f+0x8a>
 8013bfa:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013c9c <__ieee754_atan2f+0x154>
 8013bfe:	e7b6      	b.n	8013b6e <__ieee754_atan2f+0x26>
 8013c00:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8013c78 <__ieee754_atan2f+0x130>
 8013c04:	e7b3      	b.n	8013b6e <__ieee754_atan2f+0x26>
 8013c06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013c0a:	d0ca      	beq.n	8013ba2 <__ieee754_atan2f+0x5a>
 8013c0c:	1a5b      	subs	r3, r3, r1
 8013c0e:	15db      	asrs	r3, r3, #23
 8013c10:	2b3c      	cmp	r3, #60	; 0x3c
 8013c12:	dc1a      	bgt.n	8013c4a <__ieee754_atan2f+0x102>
 8013c14:	2a00      	cmp	r2, #0
 8013c16:	da01      	bge.n	8013c1c <__ieee754_atan2f+0xd4>
 8013c18:	333c      	adds	r3, #60	; 0x3c
 8013c1a:	db19      	blt.n	8013c50 <__ieee754_atan2f+0x108>
 8013c1c:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013c20:	f001 f97a 	bl	8014f18 <fabsf>
 8013c24:	f001 f8a6 	bl	8014d74 <atanf>
 8013c28:	eef0 7a40 	vmov.f32	s15, s0
 8013c2c:	2c01      	cmp	r4, #1
 8013c2e:	d012      	beq.n	8013c56 <__ieee754_atan2f+0x10e>
 8013c30:	2c02      	cmp	r4, #2
 8013c32:	d017      	beq.n	8013c64 <__ieee754_atan2f+0x11c>
 8013c34:	2c00      	cmp	r4, #0
 8013c36:	d09a      	beq.n	8013b6e <__ieee754_atan2f+0x26>
 8013c38:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8013ca0 <__ieee754_atan2f+0x158>
 8013c3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c40:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8013c9c <__ieee754_atan2f+0x154>
 8013c44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c48:	e791      	b.n	8013b6e <__ieee754_atan2f+0x26>
 8013c4a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013c80 <__ieee754_atan2f+0x138>
 8013c4e:	e7ed      	b.n	8013c2c <__ieee754_atan2f+0xe4>
 8013c50:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013c94 <__ieee754_atan2f+0x14c>
 8013c54:	e7ea      	b.n	8013c2c <__ieee754_atan2f+0xe4>
 8013c56:	ee17 3a90 	vmov	r3, s15
 8013c5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013c5e:	ee07 3a90 	vmov	s15, r3
 8013c62:	e784      	b.n	8013b6e <__ieee754_atan2f+0x26>
 8013c64:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8013ca0 <__ieee754_atan2f+0x158>
 8013c68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c6c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8013c9c <__ieee754_atan2f+0x154>
 8013c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c74:	e77b      	b.n	8013b6e <__ieee754_atan2f+0x26>
 8013c76:	bf00      	nop
 8013c78:	c0490fdb 	.word	0xc0490fdb
 8013c7c:	bfc90fdb 	.word	0xbfc90fdb
 8013c80:	3fc90fdb 	.word	0x3fc90fdb
 8013c84:	3f490fdb 	.word	0x3f490fdb
 8013c88:	bf490fdb 	.word	0xbf490fdb
 8013c8c:	4016cbe4 	.word	0x4016cbe4
 8013c90:	c016cbe4 	.word	0xc016cbe4
 8013c94:	00000000 	.word	0x00000000
 8013c98:	80000000 	.word	0x80000000
 8013c9c:	40490fdb 	.word	0x40490fdb
 8013ca0:	33bbbd2e 	.word	0x33bbbd2e

08013ca4 <__ieee754_rem_pio2f>:
 8013ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ca6:	ee10 6a10 	vmov	r6, s0
 8013caa:	4b86      	ldr	r3, [pc, #536]	; (8013ec4 <__ieee754_rem_pio2f+0x220>)
 8013cac:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8013cb0:	429c      	cmp	r4, r3
 8013cb2:	b087      	sub	sp, #28
 8013cb4:	4605      	mov	r5, r0
 8013cb6:	dc05      	bgt.n	8013cc4 <__ieee754_rem_pio2f+0x20>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	ed85 0a00 	vstr	s0, [r5]
 8013cbe:	6043      	str	r3, [r0, #4]
 8013cc0:	2000      	movs	r0, #0
 8013cc2:	e020      	b.n	8013d06 <__ieee754_rem_pio2f+0x62>
 8013cc4:	4b80      	ldr	r3, [pc, #512]	; (8013ec8 <__ieee754_rem_pio2f+0x224>)
 8013cc6:	429c      	cmp	r4, r3
 8013cc8:	dc38      	bgt.n	8013d3c <__ieee754_rem_pio2f+0x98>
 8013cca:	2e00      	cmp	r6, #0
 8013ccc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8013ecc <__ieee754_rem_pio2f+0x228>
 8013cd0:	4b7f      	ldr	r3, [pc, #508]	; (8013ed0 <__ieee754_rem_pio2f+0x22c>)
 8013cd2:	f024 040f 	bic.w	r4, r4, #15
 8013cd6:	dd18      	ble.n	8013d0a <__ieee754_rem_pio2f+0x66>
 8013cd8:	429c      	cmp	r4, r3
 8013cda:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013cde:	bf09      	itett	eq
 8013ce0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8013ed4 <__ieee754_rem_pio2f+0x230>
 8013ce4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8013ed8 <__ieee754_rem_pio2f+0x234>
 8013ce8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013cec:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8013edc <__ieee754_rem_pio2f+0x238>
 8013cf0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013cf4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013cf8:	edc0 6a00 	vstr	s13, [r0]
 8013cfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d00:	edc0 7a01 	vstr	s15, [r0, #4]
 8013d04:	2001      	movs	r0, #1
 8013d06:	b007      	add	sp, #28
 8013d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d0a:	429c      	cmp	r4, r3
 8013d0c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013d10:	bf09      	itett	eq
 8013d12:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8013ed4 <__ieee754_rem_pio2f+0x230>
 8013d16:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8013ed8 <__ieee754_rem_pio2f+0x234>
 8013d1a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013d1e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8013edc <__ieee754_rem_pio2f+0x238>
 8013d22:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013d26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013d2a:	edc0 6a00 	vstr	s13, [r0]
 8013d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d32:	edc0 7a01 	vstr	s15, [r0, #4]
 8013d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d3a:	e7e4      	b.n	8013d06 <__ieee754_rem_pio2f+0x62>
 8013d3c:	4b68      	ldr	r3, [pc, #416]	; (8013ee0 <__ieee754_rem_pio2f+0x23c>)
 8013d3e:	429c      	cmp	r4, r3
 8013d40:	dc71      	bgt.n	8013e26 <__ieee754_rem_pio2f+0x182>
 8013d42:	f001 f8e9 	bl	8014f18 <fabsf>
 8013d46:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013ee4 <__ieee754_rem_pio2f+0x240>
 8013d4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013d4e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013d56:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8013d5a:	ee17 0a90 	vmov	r0, s15
 8013d5e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013ecc <__ieee754_rem_pio2f+0x228>
 8013d62:	eeb1 7a46 	vneg.f32	s14, s12
 8013d66:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013d6a:	281f      	cmp	r0, #31
 8013d6c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013ed8 <__ieee754_rem_pio2f+0x234>
 8013d70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013d74:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013d78:	ee16 3a90 	vmov	r3, s13
 8013d7c:	dc1c      	bgt.n	8013db8 <__ieee754_rem_pio2f+0x114>
 8013d7e:	1e47      	subs	r7, r0, #1
 8013d80:	4959      	ldr	r1, [pc, #356]	; (8013ee8 <__ieee754_rem_pio2f+0x244>)
 8013d82:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013d86:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8013d8a:	428a      	cmp	r2, r1
 8013d8c:	d014      	beq.n	8013db8 <__ieee754_rem_pio2f+0x114>
 8013d8e:	602b      	str	r3, [r5, #0]
 8013d90:	ed95 7a00 	vldr	s14, [r5]
 8013d94:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013d98:	2e00      	cmp	r6, #0
 8013d9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013d9e:	ed85 0a01 	vstr	s0, [r5, #4]
 8013da2:	dab0      	bge.n	8013d06 <__ieee754_rem_pio2f+0x62>
 8013da4:	eeb1 7a47 	vneg.f32	s14, s14
 8013da8:	eeb1 0a40 	vneg.f32	s0, s0
 8013dac:	ed85 7a00 	vstr	s14, [r5]
 8013db0:	ed85 0a01 	vstr	s0, [r5, #4]
 8013db4:	4240      	negs	r0, r0
 8013db6:	e7a6      	b.n	8013d06 <__ieee754_rem_pio2f+0x62>
 8013db8:	15e4      	asrs	r4, r4, #23
 8013dba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013dbe:	1aa2      	subs	r2, r4, r2
 8013dc0:	2a08      	cmp	r2, #8
 8013dc2:	dde4      	ble.n	8013d8e <__ieee754_rem_pio2f+0xea>
 8013dc4:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013ed4 <__ieee754_rem_pio2f+0x230>
 8013dc8:	eef0 6a40 	vmov.f32	s13, s0
 8013dcc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013dd0:	ee30 0a66 	vsub.f32	s0, s0, s13
 8013dd4:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013dd8:	eddf 7a40 	vldr	s15, [pc, #256]	; 8013edc <__ieee754_rem_pio2f+0x238>
 8013ddc:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8013de0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8013de4:	eef0 7a40 	vmov.f32	s15, s0
 8013de8:	ee15 3a90 	vmov	r3, s11
 8013dec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013df0:	1aa4      	subs	r4, r4, r2
 8013df2:	2c19      	cmp	r4, #25
 8013df4:	dc04      	bgt.n	8013e00 <__ieee754_rem_pio2f+0x15c>
 8013df6:	edc5 5a00 	vstr	s11, [r5]
 8013dfa:	eeb0 0a66 	vmov.f32	s0, s13
 8013dfe:	e7c7      	b.n	8013d90 <__ieee754_rem_pio2f+0xec>
 8013e00:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013eec <__ieee754_rem_pio2f+0x248>
 8013e04:	eeb0 0a66 	vmov.f32	s0, s13
 8013e08:	eea7 0a25 	vfma.f32	s0, s14, s11
 8013e0c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013e10:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013e14:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013ef0 <__ieee754_rem_pio2f+0x24c>
 8013e18:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8013e1c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013e20:	ed85 7a00 	vstr	s14, [r5]
 8013e24:	e7b4      	b.n	8013d90 <__ieee754_rem_pio2f+0xec>
 8013e26:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013e2a:	db06      	blt.n	8013e3a <__ieee754_rem_pio2f+0x196>
 8013e2c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013e30:	edc0 7a01 	vstr	s15, [r0, #4]
 8013e34:	edc0 7a00 	vstr	s15, [r0]
 8013e38:	e742      	b.n	8013cc0 <__ieee754_rem_pio2f+0x1c>
 8013e3a:	15e2      	asrs	r2, r4, #23
 8013e3c:	3a86      	subs	r2, #134	; 0x86
 8013e3e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8013e42:	ee07 3a90 	vmov	s15, r3
 8013e46:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013e4a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8013ef4 <__ieee754_rem_pio2f+0x250>
 8013e4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e56:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013e5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013e5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013e62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e6a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013e6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013e72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e7a:	edcd 7a05 	vstr	s15, [sp, #20]
 8013e7e:	d11e      	bne.n	8013ebe <__ieee754_rem_pio2f+0x21a>
 8013e80:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e88:	bf14      	ite	ne
 8013e8a:	2302      	movne	r3, #2
 8013e8c:	2301      	moveq	r3, #1
 8013e8e:	491a      	ldr	r1, [pc, #104]	; (8013ef8 <__ieee754_rem_pio2f+0x254>)
 8013e90:	9101      	str	r1, [sp, #4]
 8013e92:	2102      	movs	r1, #2
 8013e94:	9100      	str	r1, [sp, #0]
 8013e96:	a803      	add	r0, sp, #12
 8013e98:	4629      	mov	r1, r5
 8013e9a:	f000 fbc7 	bl	801462c <__kernel_rem_pio2f>
 8013e9e:	2e00      	cmp	r6, #0
 8013ea0:	f6bf af31 	bge.w	8013d06 <__ieee754_rem_pio2f+0x62>
 8013ea4:	edd5 7a00 	vldr	s15, [r5]
 8013ea8:	eef1 7a67 	vneg.f32	s15, s15
 8013eac:	edc5 7a00 	vstr	s15, [r5]
 8013eb0:	edd5 7a01 	vldr	s15, [r5, #4]
 8013eb4:	eef1 7a67 	vneg.f32	s15, s15
 8013eb8:	edc5 7a01 	vstr	s15, [r5, #4]
 8013ebc:	e77a      	b.n	8013db4 <__ieee754_rem_pio2f+0x110>
 8013ebe:	2303      	movs	r3, #3
 8013ec0:	e7e5      	b.n	8013e8e <__ieee754_rem_pio2f+0x1ea>
 8013ec2:	bf00      	nop
 8013ec4:	3f490fd8 	.word	0x3f490fd8
 8013ec8:	4016cbe3 	.word	0x4016cbe3
 8013ecc:	3fc90f80 	.word	0x3fc90f80
 8013ed0:	3fc90fd0 	.word	0x3fc90fd0
 8013ed4:	37354400 	.word	0x37354400
 8013ed8:	37354443 	.word	0x37354443
 8013edc:	2e85a308 	.word	0x2e85a308
 8013ee0:	43490f80 	.word	0x43490f80
 8013ee4:	3f22f984 	.word	0x3f22f984
 8013ee8:	0801a8f4 	.word	0x0801a8f4
 8013eec:	2e85a300 	.word	0x2e85a300
 8013ef0:	248d3132 	.word	0x248d3132
 8013ef4:	43800000 	.word	0x43800000
 8013ef8:	0801a974 	.word	0x0801a974
 8013efc:	00000000 	.word	0x00000000

08013f00 <__kernel_cos>:
 8013f00:	ee10 1a90 	vmov	r1, s1
 8013f04:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8013f08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013f0c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8013f10:	da05      	bge.n	8013f1e <__kernel_cos+0x1e>
 8013f12:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8013f16:	ee17 3a90 	vmov	r3, s15
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d03d      	beq.n	8013f9a <__kernel_cos+0x9a>
 8013f1e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8013f22:	ee20 1b01 	vmul.f64	d1, d0, d1
 8013f26:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8013fa0 <__kernel_cos+0xa0>
 8013f2a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013f2e:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8013fa8 <__kernel_cos+0xa8>
 8013f32:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013f36:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8013fb0 <__kernel_cos+0xb0>
 8013f3a:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013f3e:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8013fb8 <__kernel_cos+0xb8>
 8013f42:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013f46:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8013fc0 <__kernel_cos+0xc0>
 8013f4a:	4b21      	ldr	r3, [pc, #132]	; (8013fd0 <__kernel_cos+0xd0>)
 8013f4c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013f50:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8013fc8 <__kernel_cos+0xc8>
 8013f54:	4299      	cmp	r1, r3
 8013f56:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013f5a:	ee24 4b06 	vmul.f64	d4, d4, d6
 8013f5e:	dc06      	bgt.n	8013f6e <__kernel_cos+0x6e>
 8013f60:	ee96 1b04 	vfnms.f64	d1, d6, d4
 8013f64:	ee96 1b03 	vfnms.f64	d1, d6, d3
 8013f68:	ee35 0b41 	vsub.f64	d0, d5, d1
 8013f6c:	4770      	bx	lr
 8013f6e:	4b19      	ldr	r3, [pc, #100]	; (8013fd4 <__kernel_cos+0xd4>)
 8013f70:	4299      	cmp	r1, r3
 8013f72:	dc0f      	bgt.n	8013f94 <__kernel_cos+0x94>
 8013f74:	2200      	movs	r2, #0
 8013f76:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8013f7a:	ec43 2b17 	vmov	d7, r2, r3
 8013f7e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013f82:	ee96 1b04 	vfnms.f64	d1, d6, d4
 8013f86:	ee96 7b03 	vfnms.f64	d7, d6, d3
 8013f8a:	ee37 0b41 	vsub.f64	d0, d7, d1
 8013f8e:	ee35 0b40 	vsub.f64	d0, d5, d0
 8013f92:	4770      	bx	lr
 8013f94:	eeb5 7b02 	vmov.f64	d7, #82	; 0x3e900000  0.2812500
 8013f98:	e7f1      	b.n	8013f7e <__kernel_cos+0x7e>
 8013f9a:	eeb0 0b45 	vmov.f64	d0, d5
 8013f9e:	4770      	bx	lr
 8013fa0:	be8838d4 	.word	0xbe8838d4
 8013fa4:	bda8fae9 	.word	0xbda8fae9
 8013fa8:	bdb4b1c4 	.word	0xbdb4b1c4
 8013fac:	3e21ee9e 	.word	0x3e21ee9e
 8013fb0:	809c52ad 	.word	0x809c52ad
 8013fb4:	be927e4f 	.word	0xbe927e4f
 8013fb8:	19cb1590 	.word	0x19cb1590
 8013fbc:	3efa01a0 	.word	0x3efa01a0
 8013fc0:	16c15177 	.word	0x16c15177
 8013fc4:	bf56c16c 	.word	0xbf56c16c
 8013fc8:	5555554c 	.word	0x5555554c
 8013fcc:	3fa55555 	.word	0x3fa55555
 8013fd0:	3fd33332 	.word	0x3fd33332
 8013fd4:	3fe90000 	.word	0x3fe90000

08013fd8 <__kernel_rem_pio2>:
 8013fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fdc:	ed2d 8b06 	vpush	{d8-d10}
 8013fe0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8013fe4:	468b      	mov	fp, r1
 8013fe6:	9301      	str	r3, [sp, #4]
 8013fe8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8013fea:	4bcf      	ldr	r3, [pc, #828]	; (8014328 <__kernel_rem_pio2+0x350>)
 8013fec:	9002      	str	r0, [sp, #8]
 8013fee:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8013ff2:	9b01      	ldr	r3, [sp, #4]
 8013ff4:	9ca3      	ldr	r4, [sp, #652]	; 0x28c
 8013ff6:	3b01      	subs	r3, #1
 8013ff8:	1ed0      	subs	r0, r2, #3
 8013ffa:	2518      	movs	r5, #24
 8013ffc:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8014310 <__kernel_rem_pio2+0x338>
 8014000:	fb90 f0f5 	sdiv	r0, r0, r5
 8014004:	f06f 0517 	mvn.w	r5, #23
 8014008:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801400c:	fb00 5505 	mla	r5, r0, r5, r5
 8014010:	1ac7      	subs	r7, r0, r3
 8014012:	4415      	add	r5, r2
 8014014:	eb0a 0e03 	add.w	lr, sl, r3
 8014018:	ae1a      	add	r6, sp, #104	; 0x68
 801401a:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
 801401e:	2200      	movs	r2, #0
 8014020:	4572      	cmp	r2, lr
 8014022:	dd0f      	ble.n	8014044 <__kernel_rem_pio2+0x6c>
 8014024:	f50d 7ed4 	add.w	lr, sp, #424	; 0x1a8
 8014028:	2600      	movs	r6, #0
 801402a:	4556      	cmp	r6, sl
 801402c:	dc27      	bgt.n	801407e <__kernel_rem_pio2+0xa6>
 801402e:	9a01      	ldr	r2, [sp, #4]
 8014030:	9f02      	ldr	r7, [sp, #8]
 8014032:	4432      	add	r2, r6
 8014034:	a91a      	add	r1, sp, #104	; 0x68
 8014036:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801403a:	ed9f 7bb5 	vldr	d7, [pc, #724]	; 8014310 <__kernel_rem_pio2+0x338>
 801403e:	f04f 0c00 	mov.w	ip, #0
 8014042:	e016      	b.n	8014072 <__kernel_rem_pio2+0x9a>
 8014044:	42d7      	cmn	r7, r2
 8014046:	d409      	bmi.n	801405c <__kernel_rem_pio2+0x84>
 8014048:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801404c:	ee07 1a90 	vmov	s15, r1
 8014050:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014054:	eca6 7b02 	vstmia	r6!, {d7}
 8014058:	3201      	adds	r2, #1
 801405a:	e7e1      	b.n	8014020 <__kernel_rem_pio2+0x48>
 801405c:	eeb0 7b46 	vmov.f64	d7, d6
 8014060:	e7f8      	b.n	8014054 <__kernel_rem_pio2+0x7c>
 8014062:	ecb7 5b02 	vldmia	r7!, {d5}
 8014066:	ed32 6b02 	vldmdb	r2!, {d6}
 801406a:	f10c 0c01 	add.w	ip, ip, #1
 801406e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014072:	459c      	cmp	ip, r3
 8014074:	ddf5      	ble.n	8014062 <__kernel_rem_pio2+0x8a>
 8014076:	ecae 7b02 	vstmia	lr!, {d7}
 801407a:	3601      	adds	r6, #1
 801407c:	e7d5      	b.n	801402a <__kernel_rem_pio2+0x52>
 801407e:	aa06      	add	r2, sp, #24
 8014080:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014084:	ed9f 9ba4 	vldr	d9, [pc, #656]	; 8014318 <__kernel_rem_pio2+0x340>
 8014088:	ed9f aba5 	vldr	d10, [pc, #660]	; 8014320 <__kernel_rem_pio2+0x348>
 801408c:	9204      	str	r2, [sp, #16]
 801408e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8014092:	9203      	str	r2, [sp, #12]
 8014094:	4657      	mov	r7, sl
 8014096:	aa92      	add	r2, sp, #584	; 0x248
 8014098:	f107 5800 	add.w	r8, r7, #536870912	; 0x20000000
 801409c:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 80140a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80140a4:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80140a8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80140ac:	aa92      	add	r2, sp, #584	; 0x248
 80140ae:	eb02 0008 	add.w	r0, r2, r8
 80140b2:	3898      	subs	r0, #152	; 0x98
 80140b4:	2200      	movs	r2, #0
 80140b6:	1abc      	subs	r4, r7, r2
 80140b8:	2c00      	cmp	r4, #0
 80140ba:	dc4c      	bgt.n	8014156 <__kernel_rem_pio2+0x17e>
 80140bc:	4628      	mov	r0, r5
 80140be:	9305      	str	r3, [sp, #20]
 80140c0:	f000 fdda 	bl	8014c78 <scalbn>
 80140c4:	eeb0 8b40 	vmov.f64	d8, d0
 80140c8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80140cc:	ee28 0b00 	vmul.f64	d0, d8, d0
 80140d0:	f000 fd5a 	bl	8014b88 <floor>
 80140d4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80140d8:	eea0 8b47 	vfms.f64	d8, d0, d7
 80140dc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80140e0:	2d00      	cmp	r5, #0
 80140e2:	ee17 9a90 	vmov	r9, s15
 80140e6:	9b05      	ldr	r3, [sp, #20]
 80140e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80140ec:	ee38 8b47 	vsub.f64	d8, d8, d7
 80140f0:	dd46      	ble.n	8014180 <__kernel_rem_pio2+0x1a8>
 80140f2:	1e78      	subs	r0, r7, #1
 80140f4:	aa06      	add	r2, sp, #24
 80140f6:	f1c5 0418 	rsb	r4, r5, #24
 80140fa:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80140fe:	fa46 f204 	asr.w	r2, r6, r4
 8014102:	4491      	add	r9, r2
 8014104:	40a2      	lsls	r2, r4
 8014106:	1ab6      	subs	r6, r6, r2
 8014108:	aa06      	add	r2, sp, #24
 801410a:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801410e:	f1c5 0217 	rsb	r2, r5, #23
 8014112:	4116      	asrs	r6, r2
 8014114:	2e00      	cmp	r6, #0
 8014116:	dd42      	ble.n	801419e <__kernel_rem_pio2+0x1c6>
 8014118:	2400      	movs	r4, #0
 801411a:	f109 0901 	add.w	r9, r9, #1
 801411e:	4620      	mov	r0, r4
 8014120:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8014124:	42a7      	cmp	r7, r4
 8014126:	dc75      	bgt.n	8014214 <__kernel_rem_pio2+0x23c>
 8014128:	2d00      	cmp	r5, #0
 801412a:	dd05      	ble.n	8014138 <__kernel_rem_pio2+0x160>
 801412c:	2d01      	cmp	r5, #1
 801412e:	f000 8086 	beq.w	801423e <__kernel_rem_pio2+0x266>
 8014132:	2d02      	cmp	r5, #2
 8014134:	f000 808d 	beq.w	8014252 <__kernel_rem_pio2+0x27a>
 8014138:	2e02      	cmp	r6, #2
 801413a:	d130      	bne.n	801419e <__kernel_rem_pio2+0x1c6>
 801413c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014140:	ee30 8b48 	vsub.f64	d8, d0, d8
 8014144:	b358      	cbz	r0, 801419e <__kernel_rem_pio2+0x1c6>
 8014146:	4628      	mov	r0, r5
 8014148:	9305      	str	r3, [sp, #20]
 801414a:	f000 fd95 	bl	8014c78 <scalbn>
 801414e:	9b05      	ldr	r3, [sp, #20]
 8014150:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014154:	e023      	b.n	801419e <__kernel_rem_pio2+0x1c6>
 8014156:	ee20 7b09 	vmul.f64	d7, d0, d9
 801415a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801415e:	ac06      	add	r4, sp, #24
 8014160:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8014164:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8014168:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801416c:	ee10 1a10 	vmov	r1, s0
 8014170:	ed30 0b02 	vldmdb	r0!, {d0}
 8014174:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014178:	ee37 0b00 	vadd.f64	d0, d7, d0
 801417c:	3201      	adds	r2, #1
 801417e:	e79a      	b.n	80140b6 <__kernel_rem_pio2+0xde>
 8014180:	d105      	bne.n	801418e <__kernel_rem_pio2+0x1b6>
 8014182:	1e7a      	subs	r2, r7, #1
 8014184:	a906      	add	r1, sp, #24
 8014186:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801418a:	15f6      	asrs	r6, r6, #23
 801418c:	e7c2      	b.n	8014114 <__kernel_rem_pio2+0x13c>
 801418e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014192:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801419a:	da39      	bge.n	8014210 <__kernel_rem_pio2+0x238>
 801419c:	2600      	movs	r6, #0
 801419e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80141a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a6:	f040 808e 	bne.w	80142c6 <__kernel_rem_pio2+0x2ee>
 80141aa:	1e7c      	subs	r4, r7, #1
 80141ac:	4620      	mov	r0, r4
 80141ae:	2200      	movs	r2, #0
 80141b0:	4550      	cmp	r0, sl
 80141b2:	da55      	bge.n	8014260 <__kernel_rem_pio2+0x288>
 80141b4:	2a00      	cmp	r2, #0
 80141b6:	d164      	bne.n	8014282 <__kernel_rem_pio2+0x2aa>
 80141b8:	2401      	movs	r4, #1
 80141ba:	f06f 0003 	mvn.w	r0, #3
 80141be:	fb00 f204 	mul.w	r2, r0, r4
 80141c2:	9904      	ldr	r1, [sp, #16]
 80141c4:	588a      	ldr	r2, [r1, r2]
 80141c6:	2a00      	cmp	r2, #0
 80141c8:	d050      	beq.n	801426c <__kernel_rem_pio2+0x294>
 80141ca:	aa92      	add	r2, sp, #584	; 0x248
 80141cc:	4490      	add	r8, r2
 80141ce:	9a01      	ldr	r2, [sp, #4]
 80141d0:	a91a      	add	r1, sp, #104	; 0x68
 80141d2:	443a      	add	r2, r7
 80141d4:	1c78      	adds	r0, r7, #1
 80141d6:	f1a8 0890 	sub.w	r8, r8, #144	; 0x90
 80141da:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80141de:	4427      	add	r7, r4
 80141e0:	42b8      	cmp	r0, r7
 80141e2:	f73f af58 	bgt.w	8014096 <__kernel_rem_pio2+0xbe>
 80141e6:	9903      	ldr	r1, [sp, #12]
 80141e8:	9e02      	ldr	r6, [sp, #8]
 80141ea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80141ee:	9105      	str	r1, [sp, #20]
 80141f0:	ee07 1a90 	vmov	s15, r1
 80141f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80141f8:	2400      	movs	r4, #0
 80141fa:	eca2 7b02 	vstmia	r2!, {d7}
 80141fe:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8014310 <__kernel_rem_pio2+0x338>
 8014202:	4696      	mov	lr, r2
 8014204:	429c      	cmp	r4, r3
 8014206:	dd33      	ble.n	8014270 <__kernel_rem_pio2+0x298>
 8014208:	eca8 7b02 	vstmia	r8!, {d7}
 801420c:	3001      	adds	r0, #1
 801420e:	e7e7      	b.n	80141e0 <__kernel_rem_pio2+0x208>
 8014210:	2602      	movs	r6, #2
 8014212:	e781      	b.n	8014118 <__kernel_rem_pio2+0x140>
 8014214:	aa06      	add	r2, sp, #24
 8014216:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801421a:	b948      	cbnz	r0, 8014230 <__kernel_rem_pio2+0x258>
 801421c:	b12a      	cbz	r2, 801422a <__kernel_rem_pio2+0x252>
 801421e:	a906      	add	r1, sp, #24
 8014220:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8014224:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8014228:	2201      	movs	r2, #1
 801422a:	3401      	adds	r4, #1
 801422c:	4610      	mov	r0, r2
 801422e:	e779      	b.n	8014124 <__kernel_rem_pio2+0x14c>
 8014230:	a906      	add	r1, sp, #24
 8014232:	ebae 0202 	sub.w	r2, lr, r2
 8014236:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 801423a:	4602      	mov	r2, r0
 801423c:	e7f5      	b.n	801422a <__kernel_rem_pio2+0x252>
 801423e:	1e7c      	subs	r4, r7, #1
 8014240:	aa06      	add	r2, sp, #24
 8014242:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8014246:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801424a:	a906      	add	r1, sp, #24
 801424c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8014250:	e772      	b.n	8014138 <__kernel_rem_pio2+0x160>
 8014252:	1e7c      	subs	r4, r7, #1
 8014254:	aa06      	add	r2, sp, #24
 8014256:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801425a:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801425e:	e7f4      	b.n	801424a <__kernel_rem_pio2+0x272>
 8014260:	a906      	add	r1, sp, #24
 8014262:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014266:	3801      	subs	r0, #1
 8014268:	430a      	orrs	r2, r1
 801426a:	e7a1      	b.n	80141b0 <__kernel_rem_pio2+0x1d8>
 801426c:	3401      	adds	r4, #1
 801426e:	e7a6      	b.n	80141be <__kernel_rem_pio2+0x1e6>
 8014270:	ecb6 5b02 	vldmia	r6!, {d5}
 8014274:	ed3e 6b02 	vldmdb	lr!, {d6}
 8014278:	3401      	adds	r4, #1
 801427a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801427e:	e7c1      	b.n	8014204 <__kernel_rem_pio2+0x22c>
 8014280:	3c01      	subs	r4, #1
 8014282:	ab06      	add	r3, sp, #24
 8014284:	3d18      	subs	r5, #24
 8014286:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d0f8      	beq.n	8014280 <__kernel_rem_pio2+0x2a8>
 801428e:	4628      	mov	r0, r5
 8014290:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014294:	f000 fcf0 	bl	8014c78 <scalbn>
 8014298:	00e3      	lsls	r3, r4, #3
 801429a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8014318 <__kernel_rem_pio2+0x340>
 801429e:	aa6a      	add	r2, sp, #424	; 0x1a8
 80142a0:	3308      	adds	r3, #8
 80142a2:	18d0      	adds	r0, r2, r3
 80142a4:	4622      	mov	r2, r4
 80142a6:	2a00      	cmp	r2, #0
 80142a8:	da4b      	bge.n	8014342 <__kernel_rem_pio2+0x36a>
 80142aa:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 80142ae:	2200      	movs	r2, #0
 80142b0:	4677      	mov	r7, lr
 80142b2:	1aa5      	subs	r5, r4, r2
 80142b4:	d464      	bmi.n	8014380 <__kernel_rem_pio2+0x3a8>
 80142b6:	a86a      	add	r0, sp, #424	; 0x1a8
 80142b8:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80142bc:	491b      	ldr	r1, [pc, #108]	; (801432c <__kernel_rem_pio2+0x354>)
 80142be:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014310 <__kernel_rem_pio2+0x338>
 80142c2:	2000      	movs	r0, #0
 80142c4:	e054      	b.n	8014370 <__kernel_rem_pio2+0x398>
 80142c6:	4268      	negs	r0, r5
 80142c8:	eeb0 0b48 	vmov.f64	d0, d8
 80142cc:	f000 fcd4 	bl	8014c78 <scalbn>
 80142d0:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8014320 <__kernel_rem_pio2+0x348>
 80142d4:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80142d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142dc:	db28      	blt.n	8014330 <__kernel_rem_pio2+0x358>
 80142de:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014318 <__kernel_rem_pio2+0x340>
 80142e2:	ee20 7b07 	vmul.f64	d7, d0, d7
 80142e6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80142ea:	aa06      	add	r2, sp, #24
 80142ec:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80142f0:	eea5 0b46 	vfms.f64	d0, d5, d6
 80142f4:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80142f8:	1c7c      	adds	r4, r7, #1
 80142fa:	ee10 3a10 	vmov	r3, s0
 80142fe:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8014302:	ee17 3a10 	vmov	r3, s14
 8014306:	3518      	adds	r5, #24
 8014308:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801430c:	e7bf      	b.n	801428e <__kernel_rem_pio2+0x2b6>
 801430e:	bf00      	nop
	...
 801431c:	3e700000 	.word	0x3e700000
 8014320:	00000000 	.word	0x00000000
 8014324:	41700000 	.word	0x41700000
 8014328:	0801acd0 	.word	0x0801acd0
 801432c:	0801ac90 	.word	0x0801ac90
 8014330:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014334:	aa06      	add	r2, sp, #24
 8014336:	ee10 3a10 	vmov	r3, s0
 801433a:	463c      	mov	r4, r7
 801433c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8014340:	e7a5      	b.n	801428e <__kernel_rem_pio2+0x2b6>
 8014342:	a906      	add	r1, sp, #24
 8014344:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014348:	9101      	str	r1, [sp, #4]
 801434a:	ee07 1a90 	vmov	s15, r1
 801434e:	3a01      	subs	r2, #1
 8014350:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014354:	ee27 7b00 	vmul.f64	d7, d7, d0
 8014358:	ee20 0b06 	vmul.f64	d0, d0, d6
 801435c:	ed20 7b02 	vstmdb	r0!, {d7}
 8014360:	e7a1      	b.n	80142a6 <__kernel_rem_pio2+0x2ce>
 8014362:	ecb1 5b02 	vldmia	r1!, {d5}
 8014366:	ecb5 6b02 	vldmia	r5!, {d6}
 801436a:	3001      	adds	r0, #1
 801436c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014370:	4550      	cmp	r0, sl
 8014372:	dc01      	bgt.n	8014378 <__kernel_rem_pio2+0x3a0>
 8014374:	4290      	cmp	r0, r2
 8014376:	ddf4      	ble.n	8014362 <__kernel_rem_pio2+0x38a>
 8014378:	ecae 7b02 	vstmia	lr!, {d7}
 801437c:	3201      	adds	r2, #1
 801437e:	e798      	b.n	80142b2 <__kernel_rem_pio2+0x2da>
 8014380:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8014382:	2a03      	cmp	r2, #3
 8014384:	d843      	bhi.n	801440e <__kernel_rem_pio2+0x436>
 8014386:	e8df f002 	tbb	[pc, r2]
 801438a:	1d37      	.short	0x1d37
 801438c:	021d      	.short	0x021d
 801438e:	aa42      	add	r2, sp, #264	; 0x108
 8014390:	4413      	add	r3, r2
 8014392:	461a      	mov	r2, r3
 8014394:	4620      	mov	r0, r4
 8014396:	2800      	cmp	r0, #0
 8014398:	dc56      	bgt.n	8014448 <__kernel_rem_pio2+0x470>
 801439a:	461a      	mov	r2, r3
 801439c:	4620      	mov	r0, r4
 801439e:	2801      	cmp	r0, #1
 80143a0:	dc62      	bgt.n	8014468 <__kernel_rem_pio2+0x490>
 80143a2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80144b8 <__kernel_rem_pio2+0x4e0>
 80143a6:	2c01      	cmp	r4, #1
 80143a8:	dc6e      	bgt.n	8014488 <__kernel_rem_pio2+0x4b0>
 80143aa:	2e00      	cmp	r6, #0
 80143ac:	d172      	bne.n	8014494 <__kernel_rem_pio2+0x4bc>
 80143ae:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 80143b2:	e9cb 2300 	strd	r2, r3, [fp]
 80143b6:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 80143ba:	e9cb 2302 	strd	r2, r3, [fp, #8]
 80143be:	ed8b 7b04 	vstr	d7, [fp, #16]
 80143c2:	e024      	b.n	801440e <__kernel_rem_pio2+0x436>
 80143c4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80144b8 <__kernel_rem_pio2+0x4e0>
 80143c8:	aa42      	add	r2, sp, #264	; 0x108
 80143ca:	4413      	add	r3, r2
 80143cc:	4622      	mov	r2, r4
 80143ce:	2a00      	cmp	r2, #0
 80143d0:	da2b      	bge.n	801442a <__kernel_rem_pio2+0x452>
 80143d2:	b386      	cbz	r6, 8014436 <__kernel_rem_pio2+0x45e>
 80143d4:	eeb1 7b46 	vneg.f64	d7, d6
 80143d8:	ed8b 7b00 	vstr	d7, [fp]
 80143dc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80143e0:	aa44      	add	r2, sp, #272	; 0x110
 80143e2:	2301      	movs	r3, #1
 80143e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80143e8:	429c      	cmp	r4, r3
 80143ea:	da27      	bge.n	801443c <__kernel_rem_pio2+0x464>
 80143ec:	b10e      	cbz	r6, 80143f2 <__kernel_rem_pio2+0x41a>
 80143ee:	eeb1 7b47 	vneg.f64	d7, d7
 80143f2:	ed8b 7b02 	vstr	d7, [fp, #8]
 80143f6:	e00a      	b.n	801440e <__kernel_rem_pio2+0x436>
 80143f8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80144b8 <__kernel_rem_pio2+0x4e0>
 80143fc:	aa42      	add	r2, sp, #264	; 0x108
 80143fe:	4413      	add	r3, r2
 8014400:	2c00      	cmp	r4, #0
 8014402:	da0c      	bge.n	801441e <__kernel_rem_pio2+0x446>
 8014404:	b10e      	cbz	r6, 801440a <__kernel_rem_pio2+0x432>
 8014406:	eeb1 7b47 	vneg.f64	d7, d7
 801440a:	ed8b 7b00 	vstr	d7, [fp]
 801440e:	f009 0007 	and.w	r0, r9, #7
 8014412:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8014416:	ecbd 8b06 	vpop	{d8-d10}
 801441a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801441e:	ed33 6b02 	vldmdb	r3!, {d6}
 8014422:	3c01      	subs	r4, #1
 8014424:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014428:	e7ea      	b.n	8014400 <__kernel_rem_pio2+0x428>
 801442a:	ed33 7b02 	vldmdb	r3!, {d7}
 801442e:	3a01      	subs	r2, #1
 8014430:	ee36 6b07 	vadd.f64	d6, d6, d7
 8014434:	e7cb      	b.n	80143ce <__kernel_rem_pio2+0x3f6>
 8014436:	eeb0 7b46 	vmov.f64	d7, d6
 801443a:	e7cd      	b.n	80143d8 <__kernel_rem_pio2+0x400>
 801443c:	ecb2 6b02 	vldmia	r2!, {d6}
 8014440:	3301      	adds	r3, #1
 8014442:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014446:	e7cf      	b.n	80143e8 <__kernel_rem_pio2+0x410>
 8014448:	ed12 5b02 	vldr	d5, [r2, #-8]
 801444c:	ed12 7b04 	vldr	d7, [r2, #-16]
 8014450:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014454:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014458:	ee37 7b05 	vadd.f64	d7, d7, d5
 801445c:	ed22 7b02 	vstmdb	r2!, {d7}
 8014460:	3801      	subs	r0, #1
 8014462:	ed02 6b02 	vstr	d6, [r2, #-8]
 8014466:	e796      	b.n	8014396 <__kernel_rem_pio2+0x3be>
 8014468:	ed12 5b02 	vldr	d5, [r2, #-8]
 801446c:	ed12 7b04 	vldr	d7, [r2, #-16]
 8014470:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014474:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014478:	ee37 7b05 	vadd.f64	d7, d7, d5
 801447c:	ed22 7b02 	vstmdb	r2!, {d7}
 8014480:	3801      	subs	r0, #1
 8014482:	ed02 6b02 	vstr	d6, [r2, #-8]
 8014486:	e78a      	b.n	801439e <__kernel_rem_pio2+0x3c6>
 8014488:	ed33 6b02 	vldmdb	r3!, {d6}
 801448c:	3c01      	subs	r4, #1
 801448e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014492:	e788      	b.n	80143a6 <__kernel_rem_pio2+0x3ce>
 8014494:	ed97 6b00 	vldr	d6, [r7]
 8014498:	eeb1 7b47 	vneg.f64	d7, d7
 801449c:	eeb1 6b46 	vneg.f64	d6, d6
 80144a0:	ed8b 6b00 	vstr	d6, [fp]
 80144a4:	ed97 6b02 	vldr	d6, [r7, #8]
 80144a8:	eeb1 6b46 	vneg.f64	d6, d6
 80144ac:	ed8b 6b02 	vstr	d6, [fp, #8]
 80144b0:	e785      	b.n	80143be <__kernel_rem_pio2+0x3e6>
 80144b2:	bf00      	nop
 80144b4:	f3af 8000 	nop.w
	...

080144c0 <__kernel_sin>:
 80144c0:	ee10 3a90 	vmov	r3, s1
 80144c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80144c8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80144cc:	da04      	bge.n	80144d8 <__kernel_sin+0x18>
 80144ce:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80144d2:	ee17 3a90 	vmov	r3, s15
 80144d6:	b35b      	cbz	r3, 8014530 <__kernel_sin+0x70>
 80144d8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80144dc:	ee20 5b06 	vmul.f64	d5, d0, d6
 80144e0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8014538 <__kernel_sin+0x78>
 80144e4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014540 <__kernel_sin+0x80>
 80144e8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80144ec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014548 <__kernel_sin+0x88>
 80144f0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80144f4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014550 <__kernel_sin+0x90>
 80144f8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80144fc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014558 <__kernel_sin+0x98>
 8014500:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014504:	b930      	cbnz	r0, 8014514 <__kernel_sin+0x54>
 8014506:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014560 <__kernel_sin+0xa0>
 801450a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801450e:	eea5 0b04 	vfma.f64	d0, d5, d4
 8014512:	4770      	bx	lr
 8014514:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8014518:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801451c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8014520:	ee96 1b07 	vfnms.f64	d1, d6, d7
 8014524:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8014568 <__kernel_sin+0xa8>
 8014528:	eea5 1b07 	vfma.f64	d1, d5, d7
 801452c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	f3af 8000 	nop.w
 8014538:	5acfd57c 	.word	0x5acfd57c
 801453c:	3de5d93a 	.word	0x3de5d93a
 8014540:	8a2b9ceb 	.word	0x8a2b9ceb
 8014544:	be5ae5e6 	.word	0xbe5ae5e6
 8014548:	57b1fe7d 	.word	0x57b1fe7d
 801454c:	3ec71de3 	.word	0x3ec71de3
 8014550:	19c161d5 	.word	0x19c161d5
 8014554:	bf2a01a0 	.word	0xbf2a01a0
 8014558:	1110f8a6 	.word	0x1110f8a6
 801455c:	3f811111 	.word	0x3f811111
 8014560:	55555549 	.word	0x55555549
 8014564:	bfc55555 	.word	0xbfc55555
 8014568:	55555549 	.word	0x55555549
 801456c:	3fc55555 	.word	0x3fc55555

08014570 <__kernel_cosf>:
 8014570:	ee10 3a10 	vmov	r3, s0
 8014574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014578:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801457c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014580:	da05      	bge.n	801458e <__kernel_cosf+0x1e>
 8014582:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014586:	ee17 2a90 	vmov	r2, s15
 801458a:	2a00      	cmp	r2, #0
 801458c:	d03b      	beq.n	8014606 <__kernel_cosf+0x96>
 801458e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014592:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801460c <__kernel_cosf+0x9c>
 8014596:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014610 <__kernel_cosf+0xa0>
 801459a:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8014614 <__kernel_cosf+0xa4>
 801459e:	4a1e      	ldr	r2, [pc, #120]	; (8014618 <__kernel_cosf+0xa8>)
 80145a0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80145a4:	4293      	cmp	r3, r2
 80145a6:	ee60 0a20 	vmul.f32	s1, s0, s1
 80145aa:	eee7 5a06 	vfma.f32	s11, s14, s12
 80145ae:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 801461c <__kernel_cosf+0xac>
 80145b2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80145b6:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8014620 <__kernel_cosf+0xb0>
 80145ba:	eee7 5a06 	vfma.f32	s11, s14, s12
 80145be:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8014624 <__kernel_cosf+0xb4>
 80145c2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80145c6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80145ca:	ee26 6a07 	vmul.f32	s12, s12, s14
 80145ce:	dc06      	bgt.n	80145de <__kernel_cosf+0x6e>
 80145d0:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80145d4:	eed7 0a25 	vfnms.f32	s1, s14, s11
 80145d8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80145dc:	4770      	bx	lr
 80145de:	4a12      	ldr	r2, [pc, #72]	; (8014628 <__kernel_cosf+0xb8>)
 80145e0:	4293      	cmp	r3, r2
 80145e2:	bfda      	itte	le
 80145e4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80145e8:	ee07 3a90 	vmovle	s15, r3
 80145ec:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 80145f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80145f4:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80145f8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80145fc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014600:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8014604:	4770      	bx	lr
 8014606:	eeb0 0a66 	vmov.f32	s0, s13
 801460a:	4770      	bx	lr
 801460c:	310f74f6 	.word	0x310f74f6
 8014610:	ad47d74e 	.word	0xad47d74e
 8014614:	b493f27c 	.word	0xb493f27c
 8014618:	3e999999 	.word	0x3e999999
 801461c:	37d00d01 	.word	0x37d00d01
 8014620:	bab60b61 	.word	0xbab60b61
 8014624:	3d2aaaab 	.word	0x3d2aaaab
 8014628:	3f480000 	.word	0x3f480000

0801462c <__kernel_rem_pio2f>:
 801462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014630:	ed2d 8b04 	vpush	{d8-d9}
 8014634:	b0d7      	sub	sp, #348	; 0x15c
 8014636:	468b      	mov	fp, r1
 8014638:	9301      	str	r3, [sp, #4]
 801463a:	9964      	ldr	r1, [sp, #400]	; 0x190
 801463c:	4bcb      	ldr	r3, [pc, #812]	; (801496c <__kernel_rem_pio2f+0x340>)
 801463e:	9002      	str	r0, [sp, #8]
 8014640:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8014644:	9b01      	ldr	r3, [sp, #4]
 8014646:	9e65      	ldr	r6, [sp, #404]	; 0x194
 8014648:	ed9f 7acc 	vldr	s14, [pc, #816]	; 801497c <__kernel_rem_pio2f+0x350>
 801464c:	3b01      	subs	r3, #1
 801464e:	1ed0      	subs	r0, r2, #3
 8014650:	2408      	movs	r4, #8
 8014652:	fb90 f0f4 	sdiv	r0, r0, r4
 8014656:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801465a:	1c45      	adds	r5, r0, #1
 801465c:	1ac7      	subs	r7, r0, r3
 801465e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8014662:	eb0a 0e03 	add.w	lr, sl, r3
 8014666:	ac1a      	add	r4, sp, #104	; 0x68
 8014668:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 801466c:	2200      	movs	r2, #0
 801466e:	4572      	cmp	r2, lr
 8014670:	dd0f      	ble.n	8014692 <__kernel_rem_pio2f+0x66>
 8014672:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 8014676:	2400      	movs	r4, #0
 8014678:	4554      	cmp	r4, sl
 801467a:	dc26      	bgt.n	80146ca <__kernel_rem_pio2f+0x9e>
 801467c:	9a01      	ldr	r2, [sp, #4]
 801467e:	9f02      	ldr	r7, [sp, #8]
 8014680:	eddf 7abe 	vldr	s15, [pc, #760]	; 801497c <__kernel_rem_pio2f+0x350>
 8014684:	4422      	add	r2, r4
 8014686:	a91a      	add	r1, sp, #104	; 0x68
 8014688:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801468c:	f04f 0c00 	mov.w	ip, #0
 8014690:	e015      	b.n	80146be <__kernel_rem_pio2f+0x92>
 8014692:	42d7      	cmn	r7, r2
 8014694:	bf5d      	ittte	pl
 8014696:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 801469a:	ee07 1a90 	vmovpl	s15, r1
 801469e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80146a2:	eef0 7a47 	vmovmi.f32	s15, s14
 80146a6:	ece4 7a01 	vstmia	r4!, {s15}
 80146aa:	3201      	adds	r2, #1
 80146ac:	e7df      	b.n	801466e <__kernel_rem_pio2f+0x42>
 80146ae:	ecf7 6a01 	vldmia	r7!, {s13}
 80146b2:	ed32 7a01 	vldmdb	r2!, {s14}
 80146b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80146ba:	f10c 0c01 	add.w	ip, ip, #1
 80146be:	459c      	cmp	ip, r3
 80146c0:	ddf5      	ble.n	80146ae <__kernel_rem_pio2f+0x82>
 80146c2:	ecee 7a01 	vstmia	lr!, {s15}
 80146c6:	3401      	adds	r4, #1
 80146c8:	e7d6      	b.n	8014678 <__kernel_rem_pio2f+0x4c>
 80146ca:	aa06      	add	r2, sp, #24
 80146cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80146d0:	9204      	str	r2, [sp, #16]
 80146d2:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8014970 <__kernel_rem_pio2f+0x344>
 80146d6:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 8014974 <__kernel_rem_pio2f+0x348>
 80146da:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 80146de:	9203      	str	r2, [sp, #12]
 80146e0:	4657      	mov	r7, sl
 80146e2:	aa56      	add	r2, sp, #344	; 0x158
 80146e4:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 80146e8:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80146ec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80146f0:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 80146f4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80146f8:	aa56      	add	r2, sp, #344	; 0x158
 80146fa:	eb02 0008 	add.w	r0, r2, r8
 80146fe:	384c      	subs	r0, #76	; 0x4c
 8014700:	2200      	movs	r2, #0
 8014702:	1abc      	subs	r4, r7, r2
 8014704:	2c00      	cmp	r4, #0
 8014706:	dc4a      	bgt.n	801479e <__kernel_rem_pio2f+0x172>
 8014708:	4628      	mov	r0, r5
 801470a:	9305      	str	r3, [sp, #20]
 801470c:	f000 fc4e 	bl	8014fac <scalbnf>
 8014710:	eeb0 8a40 	vmov.f32	s16, s0
 8014714:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8014718:	ee28 0a00 	vmul.f32	s0, s16, s0
 801471c:	f000 fc04 	bl	8014f28 <floorf>
 8014720:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8014724:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014728:	2d00      	cmp	r5, #0
 801472a:	9b05      	ldr	r3, [sp, #20]
 801472c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014730:	ee17 9a90 	vmov	r9, s15
 8014734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014738:	ee38 8a67 	vsub.f32	s16, s16, s15
 801473c:	dd44      	ble.n	80147c8 <__kernel_rem_pio2f+0x19c>
 801473e:	1e78      	subs	r0, r7, #1
 8014740:	aa06      	add	r2, sp, #24
 8014742:	f1c5 0408 	rsb	r4, r5, #8
 8014746:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801474a:	fa46 f204 	asr.w	r2, r6, r4
 801474e:	4491      	add	r9, r2
 8014750:	40a2      	lsls	r2, r4
 8014752:	1ab6      	subs	r6, r6, r2
 8014754:	aa06      	add	r2, sp, #24
 8014756:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801475a:	f1c5 0207 	rsb	r2, r5, #7
 801475e:	4116      	asrs	r6, r2
 8014760:	2e00      	cmp	r6, #0
 8014762:	dd40      	ble.n	80147e6 <__kernel_rem_pio2f+0x1ba>
 8014764:	2400      	movs	r4, #0
 8014766:	f109 0901 	add.w	r9, r9, #1
 801476a:	4620      	mov	r0, r4
 801476c:	42a7      	cmp	r7, r4
 801476e:	dc75      	bgt.n	801485c <__kernel_rem_pio2f+0x230>
 8014770:	2d00      	cmp	r5, #0
 8014772:	dd05      	ble.n	8014780 <__kernel_rem_pio2f+0x154>
 8014774:	2d01      	cmp	r5, #1
 8014776:	f000 8086 	beq.w	8014886 <__kernel_rem_pio2f+0x25a>
 801477a:	2d02      	cmp	r5, #2
 801477c:	f000 808d 	beq.w	801489a <__kernel_rem_pio2f+0x26e>
 8014780:	2e02      	cmp	r6, #2
 8014782:	d130      	bne.n	80147e6 <__kernel_rem_pio2f+0x1ba>
 8014784:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014788:	ee30 8a48 	vsub.f32	s16, s0, s16
 801478c:	b358      	cbz	r0, 80147e6 <__kernel_rem_pio2f+0x1ba>
 801478e:	4628      	mov	r0, r5
 8014790:	9305      	str	r3, [sp, #20]
 8014792:	f000 fc0b 	bl	8014fac <scalbnf>
 8014796:	9b05      	ldr	r3, [sp, #20]
 8014798:	ee38 8a40 	vsub.f32	s16, s16, s0
 801479c:	e023      	b.n	80147e6 <__kernel_rem_pio2f+0x1ba>
 801479e:	ee60 7a28 	vmul.f32	s15, s0, s17
 80147a2:	ac06      	add	r4, sp, #24
 80147a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147ac:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80147b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80147b4:	ee10 1a10 	vmov	r1, s0
 80147b8:	ed30 0a01 	vldmdb	r0!, {s0}
 80147bc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80147c0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80147c4:	3201      	adds	r2, #1
 80147c6:	e79c      	b.n	8014702 <__kernel_rem_pio2f+0xd6>
 80147c8:	d105      	bne.n	80147d6 <__kernel_rem_pio2f+0x1aa>
 80147ca:	1e7a      	subs	r2, r7, #1
 80147cc:	a906      	add	r1, sp, #24
 80147ce:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80147d2:	1236      	asrs	r6, r6, #8
 80147d4:	e7c4      	b.n	8014760 <__kernel_rem_pio2f+0x134>
 80147d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80147da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80147de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e2:	da39      	bge.n	8014858 <__kernel_rem_pio2f+0x22c>
 80147e4:	2600      	movs	r6, #0
 80147e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80147ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ee:	f040 808d 	bne.w	801490c <__kernel_rem_pio2f+0x2e0>
 80147f2:	1e7c      	subs	r4, r7, #1
 80147f4:	4620      	mov	r0, r4
 80147f6:	2200      	movs	r2, #0
 80147f8:	4550      	cmp	r0, sl
 80147fa:	da55      	bge.n	80148a8 <__kernel_rem_pio2f+0x27c>
 80147fc:	2a00      	cmp	r2, #0
 80147fe:	d164      	bne.n	80148ca <__kernel_rem_pio2f+0x29e>
 8014800:	2401      	movs	r4, #1
 8014802:	f06f 0003 	mvn.w	r0, #3
 8014806:	fb00 f204 	mul.w	r2, r0, r4
 801480a:	9904      	ldr	r1, [sp, #16]
 801480c:	588a      	ldr	r2, [r1, r2]
 801480e:	2a00      	cmp	r2, #0
 8014810:	d050      	beq.n	80148b4 <__kernel_rem_pio2f+0x288>
 8014812:	aa56      	add	r2, sp, #344	; 0x158
 8014814:	4490      	add	r8, r2
 8014816:	9a01      	ldr	r2, [sp, #4]
 8014818:	a91a      	add	r1, sp, #104	; 0x68
 801481a:	443a      	add	r2, r7
 801481c:	1c78      	adds	r0, r7, #1
 801481e:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 8014822:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8014826:	4427      	add	r7, r4
 8014828:	42b8      	cmp	r0, r7
 801482a:	f73f af5a 	bgt.w	80146e2 <__kernel_rem_pio2f+0xb6>
 801482e:	9903      	ldr	r1, [sp, #12]
 8014830:	9e02      	ldr	r6, [sp, #8]
 8014832:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014836:	9105      	str	r1, [sp, #20]
 8014838:	ee07 1a90 	vmov	s15, r1
 801483c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014840:	2400      	movs	r4, #0
 8014842:	ece2 7a01 	vstmia	r2!, {s15}
 8014846:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801497c <__kernel_rem_pio2f+0x350>
 801484a:	4696      	mov	lr, r2
 801484c:	429c      	cmp	r4, r3
 801484e:	dd33      	ble.n	80148b8 <__kernel_rem_pio2f+0x28c>
 8014850:	ece8 7a01 	vstmia	r8!, {s15}
 8014854:	3001      	adds	r0, #1
 8014856:	e7e7      	b.n	8014828 <__kernel_rem_pio2f+0x1fc>
 8014858:	2602      	movs	r6, #2
 801485a:	e783      	b.n	8014764 <__kernel_rem_pio2f+0x138>
 801485c:	aa06      	add	r2, sp, #24
 801485e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8014862:	b948      	cbnz	r0, 8014878 <__kernel_rem_pio2f+0x24c>
 8014864:	b12a      	cbz	r2, 8014872 <__kernel_rem_pio2f+0x246>
 8014866:	a906      	add	r1, sp, #24
 8014868:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801486c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8014870:	2201      	movs	r2, #1
 8014872:	3401      	adds	r4, #1
 8014874:	4610      	mov	r0, r2
 8014876:	e779      	b.n	801476c <__kernel_rem_pio2f+0x140>
 8014878:	a906      	add	r1, sp, #24
 801487a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801487e:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8014882:	4602      	mov	r2, r0
 8014884:	e7f5      	b.n	8014872 <__kernel_rem_pio2f+0x246>
 8014886:	1e7c      	subs	r4, r7, #1
 8014888:	aa06      	add	r2, sp, #24
 801488a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801488e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014892:	a906      	add	r1, sp, #24
 8014894:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8014898:	e772      	b.n	8014780 <__kernel_rem_pio2f+0x154>
 801489a:	1e7c      	subs	r4, r7, #1
 801489c:	aa06      	add	r2, sp, #24
 801489e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80148a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80148a6:	e7f4      	b.n	8014892 <__kernel_rem_pio2f+0x266>
 80148a8:	a906      	add	r1, sp, #24
 80148aa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80148ae:	3801      	subs	r0, #1
 80148b0:	430a      	orrs	r2, r1
 80148b2:	e7a1      	b.n	80147f8 <__kernel_rem_pio2f+0x1cc>
 80148b4:	3401      	adds	r4, #1
 80148b6:	e7a6      	b.n	8014806 <__kernel_rem_pio2f+0x1da>
 80148b8:	ecf6 6a01 	vldmia	r6!, {s13}
 80148bc:	ed3e 7a01 	vldmdb	lr!, {s14}
 80148c0:	3401      	adds	r4, #1
 80148c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80148c6:	e7c1      	b.n	801484c <__kernel_rem_pio2f+0x220>
 80148c8:	3c01      	subs	r4, #1
 80148ca:	ab06      	add	r3, sp, #24
 80148cc:	3d08      	subs	r5, #8
 80148ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d0f8      	beq.n	80148c8 <__kernel_rem_pio2f+0x29c>
 80148d6:	4628      	mov	r0, r5
 80148d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80148dc:	f000 fb66 	bl	8014fac <scalbnf>
 80148e0:	00a3      	lsls	r3, r4, #2
 80148e2:	aa42      	add	r2, sp, #264	; 0x108
 80148e4:	3304      	adds	r3, #4
 80148e6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8014970 <__kernel_rem_pio2f+0x344>
 80148ea:	18d0      	adds	r0, r2, r3
 80148ec:	4622      	mov	r2, r4
 80148ee:	2a00      	cmp	r2, #0
 80148f0:	da46      	bge.n	8014980 <__kernel_rem_pio2f+0x354>
 80148f2:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 80148f6:	2200      	movs	r2, #0
 80148f8:	1aa5      	subs	r5, r4, r2
 80148fa:	d460      	bmi.n	80149be <__kernel_rem_pio2f+0x392>
 80148fc:	a942      	add	r1, sp, #264	; 0x108
 80148fe:	4f1e      	ldr	r7, [pc, #120]	; (8014978 <__kernel_rem_pio2f+0x34c>)
 8014900:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801497c <__kernel_rem_pio2f+0x350>
 8014904:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8014908:	2000      	movs	r0, #0
 801490a:	e050      	b.n	80149ae <__kernel_rem_pio2f+0x382>
 801490c:	4268      	negs	r0, r5
 801490e:	eeb0 0a48 	vmov.f32	s0, s16
 8014912:	f000 fb4b 	bl	8014fac <scalbnf>
 8014916:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8014974 <__kernel_rem_pio2f+0x348>
 801491a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014922:	db19      	blt.n	8014958 <__kernel_rem_pio2f+0x32c>
 8014924:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014970 <__kernel_rem_pio2f+0x344>
 8014928:	ee60 7a27 	vmul.f32	s15, s0, s15
 801492c:	aa06      	add	r2, sp, #24
 801492e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014932:	1c7c      	adds	r4, r7, #1
 8014934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014938:	3508      	adds	r5, #8
 801493a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801493e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014942:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014946:	ee10 3a10 	vmov	r3, s0
 801494a:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801494e:	ee17 3a90 	vmov	r3, s15
 8014952:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014956:	e7be      	b.n	80148d6 <__kernel_rem_pio2f+0x2aa>
 8014958:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801495c:	aa06      	add	r2, sp, #24
 801495e:	ee10 3a10 	vmov	r3, s0
 8014962:	463c      	mov	r4, r7
 8014964:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8014968:	e7b5      	b.n	80148d6 <__kernel_rem_pio2f+0x2aa>
 801496a:	bf00      	nop
 801496c:	0801ad0c 	.word	0x0801ad0c
 8014970:	3b800000 	.word	0x3b800000
 8014974:	43800000 	.word	0x43800000
 8014978:	0801ace0 	.word	0x0801ace0
 801497c:	00000000 	.word	0x00000000
 8014980:	a906      	add	r1, sp, #24
 8014982:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014986:	9101      	str	r1, [sp, #4]
 8014988:	ee07 1a90 	vmov	s15, r1
 801498c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014990:	3a01      	subs	r2, #1
 8014992:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014996:	ee20 0a07 	vmul.f32	s0, s0, s14
 801499a:	ed60 7a01 	vstmdb	r0!, {s15}
 801499e:	e7a6      	b.n	80148ee <__kernel_rem_pio2f+0x2c2>
 80149a0:	ecf7 6a01 	vldmia	r7!, {s13}
 80149a4:	ecb5 7a01 	vldmia	r5!, {s14}
 80149a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80149ac:	3001      	adds	r0, #1
 80149ae:	4550      	cmp	r0, sl
 80149b0:	dc01      	bgt.n	80149b6 <__kernel_rem_pio2f+0x38a>
 80149b2:	4290      	cmp	r0, r2
 80149b4:	ddf4      	ble.n	80149a0 <__kernel_rem_pio2f+0x374>
 80149b6:	ecee 7a01 	vstmia	lr!, {s15}
 80149ba:	3201      	adds	r2, #1
 80149bc:	e79c      	b.n	80148f8 <__kernel_rem_pio2f+0x2cc>
 80149be:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80149c0:	2a03      	cmp	r2, #3
 80149c2:	d843      	bhi.n	8014a4c <__kernel_rem_pio2f+0x420>
 80149c4:	e8df f002 	tbb	[pc, r2]
 80149c8:	021d1d37 	.word	0x021d1d37
 80149cc:	aa2e      	add	r2, sp, #184	; 0xb8
 80149ce:	4413      	add	r3, r2
 80149d0:	461a      	mov	r2, r3
 80149d2:	4620      	mov	r0, r4
 80149d4:	2800      	cmp	r0, #0
 80149d6:	dc55      	bgt.n	8014a84 <__kernel_rem_pio2f+0x458>
 80149d8:	461a      	mov	r2, r3
 80149da:	4620      	mov	r0, r4
 80149dc:	2801      	cmp	r0, #1
 80149de:	dc61      	bgt.n	8014aa4 <__kernel_rem_pio2f+0x478>
 80149e0:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 801497c <__kernel_rem_pio2f+0x350>
 80149e4:	2c01      	cmp	r4, #1
 80149e6:	dc6d      	bgt.n	8014ac4 <__kernel_rem_pio2f+0x498>
 80149e8:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80149ec:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80149f0:	2e00      	cmp	r6, #0
 80149f2:	d16d      	bne.n	8014ad0 <__kernel_rem_pio2f+0x4a4>
 80149f4:	edcb 6a00 	vstr	s13, [fp]
 80149f8:	ed8b 7a01 	vstr	s14, [fp, #4]
 80149fc:	edcb 7a02 	vstr	s15, [fp, #8]
 8014a00:	e024      	b.n	8014a4c <__kernel_rem_pio2f+0x420>
 8014a02:	aa2e      	add	r2, sp, #184	; 0xb8
 8014a04:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 801497c <__kernel_rem_pio2f+0x350>
 8014a08:	4413      	add	r3, r2
 8014a0a:	4622      	mov	r2, r4
 8014a0c:	2a00      	cmp	r2, #0
 8014a0e:	da2a      	bge.n	8014a66 <__kernel_rem_pio2f+0x43a>
 8014a10:	b37e      	cbz	r6, 8014a72 <__kernel_rem_pio2f+0x446>
 8014a12:	eef1 7a47 	vneg.f32	s15, s14
 8014a16:	edcb 7a00 	vstr	s15, [fp]
 8014a1a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8014a1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a22:	aa2f      	add	r2, sp, #188	; 0xbc
 8014a24:	2301      	movs	r3, #1
 8014a26:	429c      	cmp	r4, r3
 8014a28:	da26      	bge.n	8014a78 <__kernel_rem_pio2f+0x44c>
 8014a2a:	b10e      	cbz	r6, 8014a30 <__kernel_rem_pio2f+0x404>
 8014a2c:	eef1 7a67 	vneg.f32	s15, s15
 8014a30:	edcb 7a01 	vstr	s15, [fp, #4]
 8014a34:	e00a      	b.n	8014a4c <__kernel_rem_pio2f+0x420>
 8014a36:	aa2e      	add	r2, sp, #184	; 0xb8
 8014a38:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 801497c <__kernel_rem_pio2f+0x350>
 8014a3c:	4413      	add	r3, r2
 8014a3e:	2c00      	cmp	r4, #0
 8014a40:	da0b      	bge.n	8014a5a <__kernel_rem_pio2f+0x42e>
 8014a42:	b10e      	cbz	r6, 8014a48 <__kernel_rem_pio2f+0x41c>
 8014a44:	eef1 7a67 	vneg.f32	s15, s15
 8014a48:	edcb 7a00 	vstr	s15, [fp]
 8014a4c:	f009 0007 	and.w	r0, r9, #7
 8014a50:	b057      	add	sp, #348	; 0x15c
 8014a52:	ecbd 8b04 	vpop	{d8-d9}
 8014a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a5a:	ed33 7a01 	vldmdb	r3!, {s14}
 8014a5e:	3c01      	subs	r4, #1
 8014a60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a64:	e7eb      	b.n	8014a3e <__kernel_rem_pio2f+0x412>
 8014a66:	ed73 7a01 	vldmdb	r3!, {s15}
 8014a6a:	3a01      	subs	r2, #1
 8014a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014a70:	e7cc      	b.n	8014a0c <__kernel_rem_pio2f+0x3e0>
 8014a72:	eef0 7a47 	vmov.f32	s15, s14
 8014a76:	e7ce      	b.n	8014a16 <__kernel_rem_pio2f+0x3ea>
 8014a78:	ecb2 7a01 	vldmia	r2!, {s14}
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a82:	e7d0      	b.n	8014a26 <__kernel_rem_pio2f+0x3fa>
 8014a84:	ed52 6a01 	vldr	s13, [r2, #-4]
 8014a88:	ed52 7a02 	vldr	s15, [r2, #-8]
 8014a8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014a90:	3801      	subs	r0, #1
 8014a92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014a9a:	ed62 7a01 	vstmdb	r2!, {s15}
 8014a9e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8014aa2:	e797      	b.n	80149d4 <__kernel_rem_pio2f+0x3a8>
 8014aa4:	ed52 6a01 	vldr	s13, [r2, #-4]
 8014aa8:	ed52 7a02 	vldr	s15, [r2, #-8]
 8014aac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014ab0:	3801      	subs	r0, #1
 8014ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014aba:	ed62 7a01 	vstmdb	r2!, {s15}
 8014abe:	ed02 7a01 	vstr	s14, [r2, #-4]
 8014ac2:	e78b      	b.n	80149dc <__kernel_rem_pio2f+0x3b0>
 8014ac4:	ed33 7a01 	vldmdb	r3!, {s14}
 8014ac8:	3c01      	subs	r4, #1
 8014aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014ace:	e789      	b.n	80149e4 <__kernel_rem_pio2f+0x3b8>
 8014ad0:	eef1 6a66 	vneg.f32	s13, s13
 8014ad4:	eeb1 7a47 	vneg.f32	s14, s14
 8014ad8:	edcb 6a00 	vstr	s13, [fp]
 8014adc:	ed8b 7a01 	vstr	s14, [fp, #4]
 8014ae0:	eef1 7a67 	vneg.f32	s15, s15
 8014ae4:	e78a      	b.n	80149fc <__kernel_rem_pio2f+0x3d0>
 8014ae6:	bf00      	nop

08014ae8 <__kernel_sinf>:
 8014ae8:	ee10 3a10 	vmov	r3, s0
 8014aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014af0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014af4:	da04      	bge.n	8014b00 <__kernel_sinf+0x18>
 8014af6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014afa:	ee17 3a90 	vmov	r3, s15
 8014afe:	b35b      	cbz	r3, 8014b58 <__kernel_sinf+0x70>
 8014b00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014b04:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014b5c <__kernel_sinf+0x74>
 8014b08:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014b60 <__kernel_sinf+0x78>
 8014b0c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014b10:	eddf 7a14 	vldr	s15, [pc, #80]	; 8014b64 <__kernel_sinf+0x7c>
 8014b14:	eee7 7a06 	vfma.f32	s15, s14, s12
 8014b18:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014b68 <__kernel_sinf+0x80>
 8014b1c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014b20:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014b6c <__kernel_sinf+0x84>
 8014b24:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014b28:	eee7 7a06 	vfma.f32	s15, s14, s12
 8014b2c:	b930      	cbnz	r0, 8014b3c <__kernel_sinf+0x54>
 8014b2e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8014b70 <__kernel_sinf+0x88>
 8014b32:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014b36:	eea6 0a86 	vfma.f32	s0, s13, s12
 8014b3a:	4770      	bx	lr
 8014b3c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014b40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014b44:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014b48:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8014b4c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014b74 <__kernel_sinf+0x8c>
 8014b50:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014b54:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014b58:	4770      	bx	lr
 8014b5a:	bf00      	nop
 8014b5c:	2f2ec9d3 	.word	0x2f2ec9d3
 8014b60:	b2d72f34 	.word	0xb2d72f34
 8014b64:	3638ef1b 	.word	0x3638ef1b
 8014b68:	b9500d01 	.word	0xb9500d01
 8014b6c:	3c088889 	.word	0x3c088889
 8014b70:	be2aaaab 	.word	0xbe2aaaab
 8014b74:	3e2aaaab 	.word	0x3e2aaaab

08014b78 <fabs>:
 8014b78:	ec53 2b10 	vmov	r2, r3, d0
 8014b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b80:	ec43 2b10 	vmov	d0, r2, r3
 8014b84:	4770      	bx	lr
	...

08014b88 <floor>:
 8014b88:	ee10 1a90 	vmov	r1, s1
 8014b8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014b90:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8014b94:	2b13      	cmp	r3, #19
 8014b96:	b530      	push	{r4, r5, lr}
 8014b98:	ee10 0a10 	vmov	r0, s0
 8014b9c:	ee10 5a10 	vmov	r5, s0
 8014ba0:	dc33      	bgt.n	8014c0a <floor+0x82>
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	da17      	bge.n	8014bd6 <floor+0x4e>
 8014ba6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8014c68 <floor+0xe0>
 8014baa:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014bae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb6:	dd09      	ble.n	8014bcc <floor+0x44>
 8014bb8:	2900      	cmp	r1, #0
 8014bba:	da50      	bge.n	8014c5e <floor+0xd6>
 8014bbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014bc0:	432b      	orrs	r3, r5
 8014bc2:	4b2b      	ldr	r3, [pc, #172]	; (8014c70 <floor+0xe8>)
 8014bc4:	f04f 0000 	mov.w	r0, #0
 8014bc8:	bf18      	it	ne
 8014bca:	4619      	movne	r1, r3
 8014bcc:	460b      	mov	r3, r1
 8014bce:	4602      	mov	r2, r0
 8014bd0:	ec43 2b10 	vmov	d0, r2, r3
 8014bd4:	bd30      	pop	{r4, r5, pc}
 8014bd6:	4a27      	ldr	r2, [pc, #156]	; (8014c74 <floor+0xec>)
 8014bd8:	411a      	asrs	r2, r3
 8014bda:	ea01 0402 	and.w	r4, r1, r2
 8014bde:	432c      	orrs	r4, r5
 8014be0:	d0f8      	beq.n	8014bd4 <floor+0x4c>
 8014be2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8014c68 <floor+0xe0>
 8014be6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014bea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bf2:	ddeb      	ble.n	8014bcc <floor+0x44>
 8014bf4:	2900      	cmp	r1, #0
 8014bf6:	bfbe      	ittt	lt
 8014bf8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8014bfc:	fa40 f303 	asrlt.w	r3, r0, r3
 8014c00:	18c9      	addlt	r1, r1, r3
 8014c02:	ea21 0102 	bic.w	r1, r1, r2
 8014c06:	2000      	movs	r0, #0
 8014c08:	e7e0      	b.n	8014bcc <floor+0x44>
 8014c0a:	2b33      	cmp	r3, #51	; 0x33
 8014c0c:	dd05      	ble.n	8014c1a <floor+0x92>
 8014c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014c12:	d1df      	bne.n	8014bd4 <floor+0x4c>
 8014c14:	ee30 0b00 	vadd.f64	d0, d0, d0
 8014c18:	bd30      	pop	{r4, r5, pc}
 8014c1a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8014c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c22:	40e2      	lsrs	r2, r4
 8014c24:	4215      	tst	r5, r2
 8014c26:	d0d5      	beq.n	8014bd4 <floor+0x4c>
 8014c28:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8014c68 <floor+0xe0>
 8014c2c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014c30:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c38:	ddc8      	ble.n	8014bcc <floor+0x44>
 8014c3a:	2900      	cmp	r1, #0
 8014c3c:	da02      	bge.n	8014c44 <floor+0xbc>
 8014c3e:	2b14      	cmp	r3, #20
 8014c40:	d103      	bne.n	8014c4a <floor+0xc2>
 8014c42:	3101      	adds	r1, #1
 8014c44:	ea20 0002 	bic.w	r0, r0, r2
 8014c48:	e7c0      	b.n	8014bcc <floor+0x44>
 8014c4a:	2401      	movs	r4, #1
 8014c4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014c50:	fa04 f303 	lsl.w	r3, r4, r3
 8014c54:	4418      	add	r0, r3
 8014c56:	4285      	cmp	r5, r0
 8014c58:	bf88      	it	hi
 8014c5a:	1909      	addhi	r1, r1, r4
 8014c5c:	e7f2      	b.n	8014c44 <floor+0xbc>
 8014c5e:	2000      	movs	r0, #0
 8014c60:	4601      	mov	r1, r0
 8014c62:	e7b3      	b.n	8014bcc <floor+0x44>
 8014c64:	f3af 8000 	nop.w
 8014c68:	8800759c 	.word	0x8800759c
 8014c6c:	7e37e43c 	.word	0x7e37e43c
 8014c70:	bff00000 	.word	0xbff00000
 8014c74:	000fffff 	.word	0x000fffff

08014c78 <scalbn>:
 8014c78:	b500      	push	{lr}
 8014c7a:	ed2d 8b02 	vpush	{d8}
 8014c7e:	b083      	sub	sp, #12
 8014c80:	ed8d 0b00 	vstr	d0, [sp]
 8014c84:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8014c88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014c8c:	b9a2      	cbnz	r2, 8014cb8 <scalbn+0x40>
 8014c8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014c92:	430b      	orrs	r3, r1
 8014c94:	d03a      	beq.n	8014d0c <scalbn+0x94>
 8014c96:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014d50 <scalbn+0xd8>
 8014c9a:	4a35      	ldr	r2, [pc, #212]	; (8014d70 <scalbn+0xf8>)
 8014c9c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014ca0:	4290      	cmp	r0, r2
 8014ca2:	ed8d 7b00 	vstr	d7, [sp]
 8014ca6:	9b01      	ldr	r3, [sp, #4]
 8014ca8:	da11      	bge.n	8014cce <scalbn+0x56>
 8014caa:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8014d58 <scalbn+0xe0>
 8014cae:	ed9d 6b00 	vldr	d6, [sp]
 8014cb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014cb6:	e007      	b.n	8014cc8 <scalbn+0x50>
 8014cb8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014cbc:	428a      	cmp	r2, r1
 8014cbe:	d109      	bne.n	8014cd4 <scalbn+0x5c>
 8014cc0:	ed9d 7b00 	vldr	d7, [sp]
 8014cc4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014cc8:	ed8d 7b00 	vstr	d7, [sp]
 8014ccc:	e01e      	b.n	8014d0c <scalbn+0x94>
 8014cce:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014cd2:	3a36      	subs	r2, #54	; 0x36
 8014cd4:	4402      	add	r2, r0
 8014cd6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014cda:	428a      	cmp	r2, r1
 8014cdc:	dd0a      	ble.n	8014cf4 <scalbn+0x7c>
 8014cde:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8014d60 <scalbn+0xe8>
 8014ce2:	eeb0 0b48 	vmov.f64	d0, d8
 8014ce6:	ed9d 1b00 	vldr	d1, [sp]
 8014cea:	f000 f9bf 	bl	801506c <copysign>
 8014cee:	ee20 7b08 	vmul.f64	d7, d0, d8
 8014cf2:	e7e9      	b.n	8014cc8 <scalbn+0x50>
 8014cf4:	2a00      	cmp	r2, #0
 8014cf6:	dd10      	ble.n	8014d1a <scalbn+0xa2>
 8014cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014cfc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014d00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014d04:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014d08:	e9cd 0100 	strd	r0, r1, [sp]
 8014d0c:	ed9d 0b00 	vldr	d0, [sp]
 8014d10:	b003      	add	sp, #12
 8014d12:	ecbd 8b02 	vpop	{d8}
 8014d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d1a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014d1e:	da06      	bge.n	8014d2e <scalbn+0xb6>
 8014d20:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014d24:	4298      	cmp	r0, r3
 8014d26:	dcda      	bgt.n	8014cde <scalbn+0x66>
 8014d28:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8014d58 <scalbn+0xe0>
 8014d2c:	e7d9      	b.n	8014ce2 <scalbn+0x6a>
 8014d2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014d36:	3236      	adds	r2, #54	; 0x36
 8014d38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014d3c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014d40:	ec41 0b17 	vmov	d7, r0, r1
 8014d44:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8014d68 <scalbn+0xf0>
 8014d48:	e7b3      	b.n	8014cb2 <scalbn+0x3a>
 8014d4a:	bf00      	nop
 8014d4c:	f3af 8000 	nop.w
 8014d50:	00000000 	.word	0x00000000
 8014d54:	43500000 	.word	0x43500000
 8014d58:	c2f8f359 	.word	0xc2f8f359
 8014d5c:	01a56e1f 	.word	0x01a56e1f
 8014d60:	8800759c 	.word	0x8800759c
 8014d64:	7e37e43c 	.word	0x7e37e43c
 8014d68:	00000000 	.word	0x00000000
 8014d6c:	3c900000 	.word	0x3c900000
 8014d70:	ffff3cb0 	.word	0xffff3cb0

08014d74 <atanf>:
 8014d74:	b538      	push	{r3, r4, r5, lr}
 8014d76:	ee10 5a10 	vmov	r5, s0
 8014d7a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014d7e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8014d82:	eef0 7a40 	vmov.f32	s15, s0
 8014d86:	db10      	blt.n	8014daa <atanf+0x36>
 8014d88:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014d8c:	dd04      	ble.n	8014d98 <atanf+0x24>
 8014d8e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014d92:	eeb0 0a67 	vmov.f32	s0, s15
 8014d96:	bd38      	pop	{r3, r4, r5, pc}
 8014d98:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8014ecc <atanf+0x158>
 8014d9c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8014ed0 <atanf+0x15c>
 8014da0:	2d00      	cmp	r5, #0
 8014da2:	bfc8      	it	gt
 8014da4:	eef0 7a47 	vmovgt.f32	s15, s14
 8014da8:	e7f3      	b.n	8014d92 <atanf+0x1e>
 8014daa:	4b4a      	ldr	r3, [pc, #296]	; (8014ed4 <atanf+0x160>)
 8014dac:	429c      	cmp	r4, r3
 8014dae:	dc10      	bgt.n	8014dd2 <atanf+0x5e>
 8014db0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014db4:	da0a      	bge.n	8014dcc <atanf+0x58>
 8014db6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8014ed8 <atanf+0x164>
 8014dba:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014dc2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dca:	dce2      	bgt.n	8014d92 <atanf+0x1e>
 8014dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dd0:	e013      	b.n	8014dfa <atanf+0x86>
 8014dd2:	f000 f8a1 	bl	8014f18 <fabsf>
 8014dd6:	4b41      	ldr	r3, [pc, #260]	; (8014edc <atanf+0x168>)
 8014dd8:	429c      	cmp	r4, r3
 8014dda:	dc4d      	bgt.n	8014e78 <atanf+0x104>
 8014ddc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014de0:	429c      	cmp	r4, r3
 8014de2:	dc3f      	bgt.n	8014e64 <atanf+0xf0>
 8014de4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014de8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014dec:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014df0:	2300      	movs	r3, #0
 8014df2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014df6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014dfa:	1c5a      	adds	r2, r3, #1
 8014dfc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014e00:	eddf 6a37 	vldr	s13, [pc, #220]	; 8014ee0 <atanf+0x16c>
 8014e04:	eddf 5a37 	vldr	s11, [pc, #220]	; 8014ee4 <atanf+0x170>
 8014e08:	ed9f 5a37 	vldr	s10, [pc, #220]	; 8014ee8 <atanf+0x174>
 8014e0c:	ee26 7a06 	vmul.f32	s14, s12, s12
 8014e10:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014e14:	eddf 6a35 	vldr	s13, [pc, #212]	; 8014eec <atanf+0x178>
 8014e18:	eee7 6a25 	vfma.f32	s13, s14, s11
 8014e1c:	eddf 5a34 	vldr	s11, [pc, #208]	; 8014ef0 <atanf+0x17c>
 8014e20:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014e24:	eddf 6a33 	vldr	s13, [pc, #204]	; 8014ef4 <atanf+0x180>
 8014e28:	eee7 6a25 	vfma.f32	s13, s14, s11
 8014e2c:	eddf 5a32 	vldr	s11, [pc, #200]	; 8014ef8 <atanf+0x184>
 8014e30:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014e34:	eddf 6a31 	vldr	s13, [pc, #196]	; 8014efc <atanf+0x188>
 8014e38:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014e3c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014f00 <atanf+0x18c>
 8014e40:	eee7 6a05 	vfma.f32	s13, s14, s10
 8014e44:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 8014f04 <atanf+0x190>
 8014e48:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014e4c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8014f08 <atanf+0x194>
 8014e50:	eee7 6a05 	vfma.f32	s13, s14, s10
 8014e54:	ee26 7a87 	vmul.f32	s14, s13, s14
 8014e58:	ee05 7a86 	vmla.f32	s14, s11, s12
 8014e5c:	d121      	bne.n	8014ea2 <atanf+0x12e>
 8014e5e:	eee7 7ac7 	vfms.f32	s15, s15, s14
 8014e62:	e796      	b.n	8014d92 <atanf+0x1e>
 8014e64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e68:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014e6c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014e70:	2301      	movs	r3, #1
 8014e72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014e76:	e7c0      	b.n	8014dfa <atanf+0x86>
 8014e78:	4b24      	ldr	r3, [pc, #144]	; (8014f0c <atanf+0x198>)
 8014e7a:	429c      	cmp	r4, r3
 8014e7c:	dc0b      	bgt.n	8014e96 <atanf+0x122>
 8014e7e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014e86:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014e8a:	2302      	movs	r3, #2
 8014e8c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014e94:	e7b1      	b.n	8014dfa <atanf+0x86>
 8014e96:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014e9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014e9e:	2303      	movs	r3, #3
 8014ea0:	e7ab      	b.n	8014dfa <atanf+0x86>
 8014ea2:	4a1b      	ldr	r2, [pc, #108]	; (8014f10 <atanf+0x19c>)
 8014ea4:	491b      	ldr	r1, [pc, #108]	; (8014f14 <atanf+0x1a0>)
 8014ea6:	009b      	lsls	r3, r3, #2
 8014ea8:	441a      	add	r2, r3
 8014eaa:	440b      	add	r3, r1
 8014eac:	edd3 6a00 	vldr	s13, [r3]
 8014eb0:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8014eb4:	2d00      	cmp	r5, #0
 8014eb6:	ed92 7a00 	vldr	s14, [r2]
 8014eba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ec2:	bfb8      	it	lt
 8014ec4:	eef1 7a67 	vneglt.f32	s15, s15
 8014ec8:	e763      	b.n	8014d92 <atanf+0x1e>
 8014eca:	bf00      	nop
 8014ecc:	bfc90fdb 	.word	0xbfc90fdb
 8014ed0:	3fc90fdb 	.word	0x3fc90fdb
 8014ed4:	3edfffff 	.word	0x3edfffff
 8014ed8:	7149f2ca 	.word	0x7149f2ca
 8014edc:	3f97ffff 	.word	0x3f97ffff
 8014ee0:	3c8569d7 	.word	0x3c8569d7
 8014ee4:	3d4bda59 	.word	0x3d4bda59
 8014ee8:	bd6ef16b 	.word	0xbd6ef16b
 8014eec:	3d886b35 	.word	0x3d886b35
 8014ef0:	3dba2e6e 	.word	0x3dba2e6e
 8014ef4:	3e124925 	.word	0x3e124925
 8014ef8:	3eaaaaab 	.word	0x3eaaaaab
 8014efc:	bd15a221 	.word	0xbd15a221
 8014f00:	bd9d8795 	.word	0xbd9d8795
 8014f04:	bde38e38 	.word	0xbde38e38
 8014f08:	be4ccccd 	.word	0xbe4ccccd
 8014f0c:	401bffff 	.word	0x401bffff
 8014f10:	0801ad18 	.word	0x0801ad18
 8014f14:	0801ad28 	.word	0x0801ad28

08014f18 <fabsf>:
 8014f18:	ee10 3a10 	vmov	r3, s0
 8014f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014f20:	ee00 3a10 	vmov	s0, r3
 8014f24:	4770      	bx	lr
	...

08014f28 <floorf>:
 8014f28:	ee10 3a10 	vmov	r3, s0
 8014f2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014f30:	0dca      	lsrs	r2, r1, #23
 8014f32:	3a7f      	subs	r2, #127	; 0x7f
 8014f34:	2a16      	cmp	r2, #22
 8014f36:	dc2a      	bgt.n	8014f8e <floorf+0x66>
 8014f38:	2a00      	cmp	r2, #0
 8014f3a:	da11      	bge.n	8014f60 <floorf+0x38>
 8014f3c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014fa0 <floorf+0x78>
 8014f40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014f44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f4c:	dd05      	ble.n	8014f5a <floorf+0x32>
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	da23      	bge.n	8014f9a <floorf+0x72>
 8014f52:	4a14      	ldr	r2, [pc, #80]	; (8014fa4 <floorf+0x7c>)
 8014f54:	2900      	cmp	r1, #0
 8014f56:	bf18      	it	ne
 8014f58:	4613      	movne	r3, r2
 8014f5a:	ee00 3a10 	vmov	s0, r3
 8014f5e:	4770      	bx	lr
 8014f60:	4911      	ldr	r1, [pc, #68]	; (8014fa8 <floorf+0x80>)
 8014f62:	4111      	asrs	r1, r2
 8014f64:	420b      	tst	r3, r1
 8014f66:	d0fa      	beq.n	8014f5e <floorf+0x36>
 8014f68:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014fa0 <floorf+0x78>
 8014f6c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014f70:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f78:	ddef      	ble.n	8014f5a <floorf+0x32>
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	bfbe      	ittt	lt
 8014f7e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014f82:	fa40 f202 	asrlt.w	r2, r0, r2
 8014f86:	189b      	addlt	r3, r3, r2
 8014f88:	ea23 0301 	bic.w	r3, r3, r1
 8014f8c:	e7e5      	b.n	8014f5a <floorf+0x32>
 8014f8e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014f92:	d3e4      	bcc.n	8014f5e <floorf+0x36>
 8014f94:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014f98:	4770      	bx	lr
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	e7dd      	b.n	8014f5a <floorf+0x32>
 8014f9e:	bf00      	nop
 8014fa0:	7149f2ca 	.word	0x7149f2ca
 8014fa4:	bf800000 	.word	0xbf800000
 8014fa8:	007fffff 	.word	0x007fffff

08014fac <scalbnf>:
 8014fac:	b508      	push	{r3, lr}
 8014fae:	ee10 2a10 	vmov	r2, s0
 8014fb2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8014fb6:	ed2d 8b02 	vpush	{d8}
 8014fba:	eef0 0a40 	vmov.f32	s1, s0
 8014fbe:	d004      	beq.n	8014fca <scalbnf+0x1e>
 8014fc0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014fc4:	d306      	bcc.n	8014fd4 <scalbnf+0x28>
 8014fc6:	ee70 0a00 	vadd.f32	s1, s0, s0
 8014fca:	ecbd 8b02 	vpop	{d8}
 8014fce:	eeb0 0a60 	vmov.f32	s0, s1
 8014fd2:	bd08      	pop	{r3, pc}
 8014fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014fd8:	d21c      	bcs.n	8015014 <scalbnf+0x68>
 8014fda:	4b1f      	ldr	r3, [pc, #124]	; (8015058 <scalbnf+0xac>)
 8014fdc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801505c <scalbnf+0xb0>
 8014fe0:	4298      	cmp	r0, r3
 8014fe2:	ee60 0a27 	vmul.f32	s1, s0, s15
 8014fe6:	db10      	blt.n	801500a <scalbnf+0x5e>
 8014fe8:	ee10 2a90 	vmov	r2, s1
 8014fec:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8014ff0:	3b19      	subs	r3, #25
 8014ff2:	4403      	add	r3, r0
 8014ff4:	2bfe      	cmp	r3, #254	; 0xfe
 8014ff6:	dd0f      	ble.n	8015018 <scalbnf+0x6c>
 8014ff8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8015060 <scalbnf+0xb4>
 8014ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8015000:	f000 f841 	bl	8015086 <copysignf>
 8015004:	ee60 0a08 	vmul.f32	s1, s0, s16
 8015008:	e7df      	b.n	8014fca <scalbnf+0x1e>
 801500a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015064 <scalbnf+0xb8>
 801500e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015012:	e7da      	b.n	8014fca <scalbnf+0x1e>
 8015014:	0ddb      	lsrs	r3, r3, #23
 8015016:	e7ec      	b.n	8014ff2 <scalbnf+0x46>
 8015018:	2b00      	cmp	r3, #0
 801501a:	dd06      	ble.n	801502a <scalbnf+0x7e>
 801501c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8015020:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8015024:	ee00 3a90 	vmov	s1, r3
 8015028:	e7cf      	b.n	8014fca <scalbnf+0x1e>
 801502a:	f113 0f16 	cmn.w	r3, #22
 801502e:	da06      	bge.n	801503e <scalbnf+0x92>
 8015030:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015034:	4298      	cmp	r0, r3
 8015036:	dcdf      	bgt.n	8014ff8 <scalbnf+0x4c>
 8015038:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8015064 <scalbnf+0xb8>
 801503c:	e7de      	b.n	8014ffc <scalbnf+0x50>
 801503e:	3319      	adds	r3, #25
 8015040:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8015044:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8015048:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015068 <scalbnf+0xbc>
 801504c:	ee07 3a10 	vmov	s14, r3
 8015050:	ee67 0a27 	vmul.f32	s1, s14, s15
 8015054:	e7b9      	b.n	8014fca <scalbnf+0x1e>
 8015056:	bf00      	nop
 8015058:	ffff3cb0 	.word	0xffff3cb0
 801505c:	4c000000 	.word	0x4c000000
 8015060:	7149f2ca 	.word	0x7149f2ca
 8015064:	0da24260 	.word	0x0da24260
 8015068:	33000000 	.word	0x33000000

0801506c <copysign>:
 801506c:	ec53 2b10 	vmov	r2, r3, d0
 8015070:	ee11 0a90 	vmov	r0, s3
 8015074:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015078:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801507c:	ea41 0300 	orr.w	r3, r1, r0
 8015080:	ec43 2b10 	vmov	d0, r2, r3
 8015084:	4770      	bx	lr

08015086 <copysignf>:
 8015086:	ee10 3a10 	vmov	r3, s0
 801508a:	ee10 2a90 	vmov	r2, s1
 801508e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015092:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8015096:	4313      	orrs	r3, r2
 8015098:	ee00 3a10 	vmov	s0, r3
 801509c:	4770      	bx	lr

0801509e <abort>:
 801509e:	b508      	push	{r3, lr}
 80150a0:	2006      	movs	r0, #6
 80150a2:	f000 fef7 	bl	8015e94 <raise>
 80150a6:	2001      	movs	r0, #1
 80150a8:	f7f2 fdbb 	bl	8007c22 <_exit>

080150ac <__cxa_atexit>:
 80150ac:	4613      	mov	r3, r2
 80150ae:	460a      	mov	r2, r1
 80150b0:	4601      	mov	r1, r0
 80150b2:	2002      	movs	r0, #2
 80150b4:	f001 bfda 	b.w	801706c <__register_exitproc>

080150b8 <__errno>:
 80150b8:	4b01      	ldr	r3, [pc, #4]	; (80150c0 <__errno+0x8>)
 80150ba:	6818      	ldr	r0, [r3, #0]
 80150bc:	4770      	bx	lr
 80150be:	bf00      	nop
 80150c0:	20000034 	.word	0x20000034

080150c4 <_fputc_r>:
 80150c4:	b570      	push	{r4, r5, r6, lr}
 80150c6:	460e      	mov	r6, r1
 80150c8:	4614      	mov	r4, r2
 80150ca:	4605      	mov	r5, r0
 80150cc:	b118      	cbz	r0, 80150d6 <_fputc_r+0x12>
 80150ce:	6983      	ldr	r3, [r0, #24]
 80150d0:	b90b      	cbnz	r3, 80150d6 <_fputc_r+0x12>
 80150d2:	f002 ff5f 	bl	8017f94 <__sinit>
 80150d6:	4b14      	ldr	r3, [pc, #80]	; (8015128 <_fputc_r+0x64>)
 80150d8:	429c      	cmp	r4, r3
 80150da:	d11a      	bne.n	8015112 <_fputc_r+0x4e>
 80150dc:	686c      	ldr	r4, [r5, #4]
 80150de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150e0:	07d8      	lsls	r0, r3, #31
 80150e2:	d405      	bmi.n	80150f0 <_fputc_r+0x2c>
 80150e4:	89a3      	ldrh	r3, [r4, #12]
 80150e6:	0599      	lsls	r1, r3, #22
 80150e8:	d402      	bmi.n	80150f0 <_fputc_r+0x2c>
 80150ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150ec:	f000 fa60 	bl	80155b0 <__retarget_lock_acquire_recursive>
 80150f0:	4622      	mov	r2, r4
 80150f2:	4628      	mov	r0, r5
 80150f4:	4631      	mov	r1, r6
 80150f6:	f000 fcc5 	bl	8015a84 <_putc_r>
 80150fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150fc:	07da      	lsls	r2, r3, #31
 80150fe:	4605      	mov	r5, r0
 8015100:	d405      	bmi.n	801510e <_fputc_r+0x4a>
 8015102:	89a3      	ldrh	r3, [r4, #12]
 8015104:	059b      	lsls	r3, r3, #22
 8015106:	d402      	bmi.n	801510e <_fputc_r+0x4a>
 8015108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801510a:	f000 fa53 	bl	80155b4 <__retarget_lock_release_recursive>
 801510e:	4628      	mov	r0, r5
 8015110:	bd70      	pop	{r4, r5, r6, pc}
 8015112:	4b06      	ldr	r3, [pc, #24]	; (801512c <_fputc_r+0x68>)
 8015114:	429c      	cmp	r4, r3
 8015116:	d101      	bne.n	801511c <_fputc_r+0x58>
 8015118:	68ac      	ldr	r4, [r5, #8]
 801511a:	e7e0      	b.n	80150de <_fputc_r+0x1a>
 801511c:	4b04      	ldr	r3, [pc, #16]	; (8015130 <_fputc_r+0x6c>)
 801511e:	429c      	cmp	r4, r3
 8015120:	bf08      	it	eq
 8015122:	68ec      	ldreq	r4, [r5, #12]
 8015124:	e7db      	b.n	80150de <_fputc_r+0x1a>
 8015126:	bf00      	nop
 8015128:	0801adc4 	.word	0x0801adc4
 801512c:	0801ade4 	.word	0x0801ade4
 8015130:	0801ada4 	.word	0x0801ada4

08015134 <fputc>:
 8015134:	4b02      	ldr	r3, [pc, #8]	; (8015140 <fputc+0xc>)
 8015136:	460a      	mov	r2, r1
 8015138:	4601      	mov	r1, r0
 801513a:	6818      	ldr	r0, [r3, #0]
 801513c:	f7ff bfc2 	b.w	80150c4 <_fputc_r>
 8015140:	20000034 	.word	0x20000034

08015144 <_fputs_r>:
 8015144:	b530      	push	{r4, r5, lr}
 8015146:	b087      	sub	sp, #28
 8015148:	4605      	mov	r5, r0
 801514a:	4608      	mov	r0, r1
 801514c:	4614      	mov	r4, r2
 801514e:	9101      	str	r1, [sp, #4]
 8015150:	f7f1 fc28 	bl	80069a4 <strlen>
 8015154:	ab01      	add	r3, sp, #4
 8015156:	9303      	str	r3, [sp, #12]
 8015158:	2301      	movs	r3, #1
 801515a:	9005      	str	r0, [sp, #20]
 801515c:	9002      	str	r0, [sp, #8]
 801515e:	9304      	str	r3, [sp, #16]
 8015160:	b125      	cbz	r5, 801516c <_fputs_r+0x28>
 8015162:	69ab      	ldr	r3, [r5, #24]
 8015164:	b913      	cbnz	r3, 801516c <_fputs_r+0x28>
 8015166:	4628      	mov	r0, r5
 8015168:	f002 ff14 	bl	8017f94 <__sinit>
 801516c:	4b19      	ldr	r3, [pc, #100]	; (80151d4 <_fputs_r+0x90>)
 801516e:	429c      	cmp	r4, r3
 8015170:	d126      	bne.n	80151c0 <_fputs_r+0x7c>
 8015172:	686c      	ldr	r4, [r5, #4]
 8015174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015176:	07db      	lsls	r3, r3, #31
 8015178:	d405      	bmi.n	8015186 <_fputs_r+0x42>
 801517a:	89a3      	ldrh	r3, [r4, #12]
 801517c:	0598      	lsls	r0, r3, #22
 801517e:	d402      	bmi.n	8015186 <_fputs_r+0x42>
 8015180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015182:	f000 fa15 	bl	80155b0 <__retarget_lock_acquire_recursive>
 8015186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801518a:	0499      	lsls	r1, r3, #18
 801518c:	d406      	bmi.n	801519c <_fputs_r+0x58>
 801518e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015192:	81a3      	strh	r3, [r4, #12]
 8015194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801519a:	6663      	str	r3, [r4, #100]	; 0x64
 801519c:	aa03      	add	r2, sp, #12
 801519e:	4628      	mov	r0, r5
 80151a0:	4621      	mov	r1, r4
 80151a2:	f000 f825 	bl	80151f0 <__sfvwrite_r>
 80151a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80151a8:	07da      	lsls	r2, r3, #31
 80151aa:	4605      	mov	r5, r0
 80151ac:	d405      	bmi.n	80151ba <_fputs_r+0x76>
 80151ae:	89a3      	ldrh	r3, [r4, #12]
 80151b0:	059b      	lsls	r3, r3, #22
 80151b2:	d402      	bmi.n	80151ba <_fputs_r+0x76>
 80151b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80151b6:	f000 f9fd 	bl	80155b4 <__retarget_lock_release_recursive>
 80151ba:	4628      	mov	r0, r5
 80151bc:	b007      	add	sp, #28
 80151be:	bd30      	pop	{r4, r5, pc}
 80151c0:	4b05      	ldr	r3, [pc, #20]	; (80151d8 <_fputs_r+0x94>)
 80151c2:	429c      	cmp	r4, r3
 80151c4:	d101      	bne.n	80151ca <_fputs_r+0x86>
 80151c6:	68ac      	ldr	r4, [r5, #8]
 80151c8:	e7d4      	b.n	8015174 <_fputs_r+0x30>
 80151ca:	4b04      	ldr	r3, [pc, #16]	; (80151dc <_fputs_r+0x98>)
 80151cc:	429c      	cmp	r4, r3
 80151ce:	bf08      	it	eq
 80151d0:	68ec      	ldreq	r4, [r5, #12]
 80151d2:	e7cf      	b.n	8015174 <_fputs_r+0x30>
 80151d4:	0801adc4 	.word	0x0801adc4
 80151d8:	0801ade4 	.word	0x0801ade4
 80151dc:	0801ada4 	.word	0x0801ada4

080151e0 <fputs>:
 80151e0:	4b02      	ldr	r3, [pc, #8]	; (80151ec <fputs+0xc>)
 80151e2:	460a      	mov	r2, r1
 80151e4:	4601      	mov	r1, r0
 80151e6:	6818      	ldr	r0, [r3, #0]
 80151e8:	f7ff bfac 	b.w	8015144 <_fputs_r>
 80151ec:	20000034 	.word	0x20000034

080151f0 <__sfvwrite_r>:
 80151f0:	6893      	ldr	r3, [r2, #8]
 80151f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151f6:	4607      	mov	r7, r0
 80151f8:	460c      	mov	r4, r1
 80151fa:	4690      	mov	r8, r2
 80151fc:	b91b      	cbnz	r3, 8015206 <__sfvwrite_r+0x16>
 80151fe:	2000      	movs	r0, #0
 8015200:	b003      	add	sp, #12
 8015202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015206:	898b      	ldrh	r3, [r1, #12]
 8015208:	0718      	lsls	r0, r3, #28
 801520a:	d526      	bpl.n	801525a <__sfvwrite_r+0x6a>
 801520c:	690b      	ldr	r3, [r1, #16]
 801520e:	b323      	cbz	r3, 801525a <__sfvwrite_r+0x6a>
 8015210:	89a3      	ldrh	r3, [r4, #12]
 8015212:	f8d8 6000 	ldr.w	r6, [r8]
 8015216:	f013 0902 	ands.w	r9, r3, #2
 801521a:	d02d      	beq.n	8015278 <__sfvwrite_r+0x88>
 801521c:	f04f 0a00 	mov.w	sl, #0
 8015220:	f8df b264 	ldr.w	fp, [pc, #612]	; 8015488 <__sfvwrite_r+0x298>
 8015224:	46d1      	mov	r9, sl
 8015226:	f1b9 0f00 	cmp.w	r9, #0
 801522a:	d01f      	beq.n	801526c <__sfvwrite_r+0x7c>
 801522c:	45d9      	cmp	r9, fp
 801522e:	464b      	mov	r3, r9
 8015230:	4652      	mov	r2, sl
 8015232:	bf28      	it	cs
 8015234:	465b      	movcs	r3, fp
 8015236:	6a21      	ldr	r1, [r4, #32]
 8015238:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801523a:	4638      	mov	r0, r7
 801523c:	47a8      	blx	r5
 801523e:	2800      	cmp	r0, #0
 8015240:	f340 8089 	ble.w	8015356 <__sfvwrite_r+0x166>
 8015244:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015248:	4482      	add	sl, r0
 801524a:	eba9 0900 	sub.w	r9, r9, r0
 801524e:	1a18      	subs	r0, r3, r0
 8015250:	f8c8 0008 	str.w	r0, [r8, #8]
 8015254:	2800      	cmp	r0, #0
 8015256:	d1e6      	bne.n	8015226 <__sfvwrite_r+0x36>
 8015258:	e7d1      	b.n	80151fe <__sfvwrite_r+0xe>
 801525a:	4621      	mov	r1, r4
 801525c:	4638      	mov	r0, r7
 801525e:	f001 fe97 	bl	8016f90 <__swsetup_r>
 8015262:	2800      	cmp	r0, #0
 8015264:	d0d4      	beq.n	8015210 <__sfvwrite_r+0x20>
 8015266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801526a:	e7c9      	b.n	8015200 <__sfvwrite_r+0x10>
 801526c:	f8d6 a000 	ldr.w	sl, [r6]
 8015270:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8015274:	3608      	adds	r6, #8
 8015276:	e7d6      	b.n	8015226 <__sfvwrite_r+0x36>
 8015278:	f013 0301 	ands.w	r3, r3, #1
 801527c:	d043      	beq.n	8015306 <__sfvwrite_r+0x116>
 801527e:	4648      	mov	r0, r9
 8015280:	46ca      	mov	sl, r9
 8015282:	46cb      	mov	fp, r9
 8015284:	f1bb 0f00 	cmp.w	fp, #0
 8015288:	f000 80d9 	beq.w	801543e <__sfvwrite_r+0x24e>
 801528c:	b950      	cbnz	r0, 80152a4 <__sfvwrite_r+0xb4>
 801528e:	465a      	mov	r2, fp
 8015290:	210a      	movs	r1, #10
 8015292:	4650      	mov	r0, sl
 8015294:	f7f1 fb2c 	bl	80068f0 <memchr>
 8015298:	2800      	cmp	r0, #0
 801529a:	f000 80d5 	beq.w	8015448 <__sfvwrite_r+0x258>
 801529e:	3001      	adds	r0, #1
 80152a0:	eba0 090a 	sub.w	r9, r0, sl
 80152a4:	6820      	ldr	r0, [r4, #0]
 80152a6:	6921      	ldr	r1, [r4, #16]
 80152a8:	6962      	ldr	r2, [r4, #20]
 80152aa:	45d9      	cmp	r9, fp
 80152ac:	464b      	mov	r3, r9
 80152ae:	bf28      	it	cs
 80152b0:	465b      	movcs	r3, fp
 80152b2:	4288      	cmp	r0, r1
 80152b4:	f240 80cb 	bls.w	801544e <__sfvwrite_r+0x25e>
 80152b8:	68a5      	ldr	r5, [r4, #8]
 80152ba:	4415      	add	r5, r2
 80152bc:	42ab      	cmp	r3, r5
 80152be:	f340 80c6 	ble.w	801544e <__sfvwrite_r+0x25e>
 80152c2:	4651      	mov	r1, sl
 80152c4:	462a      	mov	r2, r5
 80152c6:	f000 fbaf 	bl	8015a28 <memmove>
 80152ca:	6823      	ldr	r3, [r4, #0]
 80152cc:	442b      	add	r3, r5
 80152ce:	6023      	str	r3, [r4, #0]
 80152d0:	4621      	mov	r1, r4
 80152d2:	4638      	mov	r0, r7
 80152d4:	f002 fdca 	bl	8017e6c <_fflush_r>
 80152d8:	2800      	cmp	r0, #0
 80152da:	d13c      	bne.n	8015356 <__sfvwrite_r+0x166>
 80152dc:	ebb9 0905 	subs.w	r9, r9, r5
 80152e0:	f040 80cf 	bne.w	8015482 <__sfvwrite_r+0x292>
 80152e4:	4621      	mov	r1, r4
 80152e6:	4638      	mov	r0, r7
 80152e8:	f002 fdc0 	bl	8017e6c <_fflush_r>
 80152ec:	2800      	cmp	r0, #0
 80152ee:	d132      	bne.n	8015356 <__sfvwrite_r+0x166>
 80152f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80152f4:	44aa      	add	sl, r5
 80152f6:	ebab 0b05 	sub.w	fp, fp, r5
 80152fa:	1b5d      	subs	r5, r3, r5
 80152fc:	f8c8 5008 	str.w	r5, [r8, #8]
 8015300:	2d00      	cmp	r5, #0
 8015302:	d1bf      	bne.n	8015284 <__sfvwrite_r+0x94>
 8015304:	e77b      	b.n	80151fe <__sfvwrite_r+0xe>
 8015306:	4699      	mov	r9, r3
 8015308:	469a      	mov	sl, r3
 801530a:	f1ba 0f00 	cmp.w	sl, #0
 801530e:	d027      	beq.n	8015360 <__sfvwrite_r+0x170>
 8015310:	89a2      	ldrh	r2, [r4, #12]
 8015312:	68a5      	ldr	r5, [r4, #8]
 8015314:	0591      	lsls	r1, r2, #22
 8015316:	d565      	bpl.n	80153e4 <__sfvwrite_r+0x1f4>
 8015318:	45aa      	cmp	sl, r5
 801531a:	d33b      	bcc.n	8015394 <__sfvwrite_r+0x1a4>
 801531c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015320:	d036      	beq.n	8015390 <__sfvwrite_r+0x1a0>
 8015322:	6921      	ldr	r1, [r4, #16]
 8015324:	6823      	ldr	r3, [r4, #0]
 8015326:	1a5b      	subs	r3, r3, r1
 8015328:	9301      	str	r3, [sp, #4]
 801532a:	6963      	ldr	r3, [r4, #20]
 801532c:	2002      	movs	r0, #2
 801532e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015332:	fb93 fbf0 	sdiv	fp, r3, r0
 8015336:	9b01      	ldr	r3, [sp, #4]
 8015338:	1c58      	adds	r0, r3, #1
 801533a:	4450      	add	r0, sl
 801533c:	4583      	cmp	fp, r0
 801533e:	bf38      	it	cc
 8015340:	4683      	movcc	fp, r0
 8015342:	0553      	lsls	r3, r2, #21
 8015344:	d53e      	bpl.n	80153c4 <__sfvwrite_r+0x1d4>
 8015346:	4659      	mov	r1, fp
 8015348:	4638      	mov	r0, r7
 801534a:	f000 f945 	bl	80155d8 <_malloc_r>
 801534e:	4605      	mov	r5, r0
 8015350:	b950      	cbnz	r0, 8015368 <__sfvwrite_r+0x178>
 8015352:	230c      	movs	r3, #12
 8015354:	603b      	str	r3, [r7, #0]
 8015356:	89a3      	ldrh	r3, [r4, #12]
 8015358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801535c:	81a3      	strh	r3, [r4, #12]
 801535e:	e782      	b.n	8015266 <__sfvwrite_r+0x76>
 8015360:	e896 0600 	ldmia.w	r6, {r9, sl}
 8015364:	3608      	adds	r6, #8
 8015366:	e7d0      	b.n	801530a <__sfvwrite_r+0x11a>
 8015368:	9a01      	ldr	r2, [sp, #4]
 801536a:	6921      	ldr	r1, [r4, #16]
 801536c:	f000 fb51 	bl	8015a12 <memcpy>
 8015370:	89a2      	ldrh	r2, [r4, #12]
 8015372:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8015376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801537a:	81a2      	strh	r2, [r4, #12]
 801537c:	9b01      	ldr	r3, [sp, #4]
 801537e:	6125      	str	r5, [r4, #16]
 8015380:	441d      	add	r5, r3
 8015382:	ebab 0303 	sub.w	r3, fp, r3
 8015386:	6025      	str	r5, [r4, #0]
 8015388:	f8c4 b014 	str.w	fp, [r4, #20]
 801538c:	4655      	mov	r5, sl
 801538e:	60a3      	str	r3, [r4, #8]
 8015390:	45aa      	cmp	sl, r5
 8015392:	d200      	bcs.n	8015396 <__sfvwrite_r+0x1a6>
 8015394:	4655      	mov	r5, sl
 8015396:	462a      	mov	r2, r5
 8015398:	4649      	mov	r1, r9
 801539a:	6820      	ldr	r0, [r4, #0]
 801539c:	f000 fb44 	bl	8015a28 <memmove>
 80153a0:	68a3      	ldr	r3, [r4, #8]
 80153a2:	1b5b      	subs	r3, r3, r5
 80153a4:	60a3      	str	r3, [r4, #8]
 80153a6:	6823      	ldr	r3, [r4, #0]
 80153a8:	441d      	add	r5, r3
 80153aa:	6025      	str	r5, [r4, #0]
 80153ac:	4655      	mov	r5, sl
 80153ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153b2:	44a9      	add	r9, r5
 80153b4:	ebaa 0a05 	sub.w	sl, sl, r5
 80153b8:	1b5d      	subs	r5, r3, r5
 80153ba:	f8c8 5008 	str.w	r5, [r8, #8]
 80153be:	2d00      	cmp	r5, #0
 80153c0:	d1a3      	bne.n	801530a <__sfvwrite_r+0x11a>
 80153c2:	e71c      	b.n	80151fe <__sfvwrite_r+0xe>
 80153c4:	465a      	mov	r2, fp
 80153c6:	4638      	mov	r0, r7
 80153c8:	f000 fbac 	bl	8015b24 <_realloc_r>
 80153cc:	4605      	mov	r5, r0
 80153ce:	2800      	cmp	r0, #0
 80153d0:	d1d4      	bne.n	801537c <__sfvwrite_r+0x18c>
 80153d2:	6921      	ldr	r1, [r4, #16]
 80153d4:	4638      	mov	r0, r7
 80153d6:	f002 feb3 	bl	8018140 <_free_r>
 80153da:	89a3      	ldrh	r3, [r4, #12]
 80153dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80153e0:	81a3      	strh	r3, [r4, #12]
 80153e2:	e7b6      	b.n	8015352 <__sfvwrite_r+0x162>
 80153e4:	6820      	ldr	r0, [r4, #0]
 80153e6:	6923      	ldr	r3, [r4, #16]
 80153e8:	4298      	cmp	r0, r3
 80153ea:	d802      	bhi.n	80153f2 <__sfvwrite_r+0x202>
 80153ec:	6962      	ldr	r2, [r4, #20]
 80153ee:	4592      	cmp	sl, r2
 80153f0:	d215      	bcs.n	801541e <__sfvwrite_r+0x22e>
 80153f2:	4555      	cmp	r5, sl
 80153f4:	bf28      	it	cs
 80153f6:	4655      	movcs	r5, sl
 80153f8:	462a      	mov	r2, r5
 80153fa:	4649      	mov	r1, r9
 80153fc:	f000 fb14 	bl	8015a28 <memmove>
 8015400:	68a3      	ldr	r3, [r4, #8]
 8015402:	6822      	ldr	r2, [r4, #0]
 8015404:	1b5b      	subs	r3, r3, r5
 8015406:	442a      	add	r2, r5
 8015408:	60a3      	str	r3, [r4, #8]
 801540a:	6022      	str	r2, [r4, #0]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d1ce      	bne.n	80153ae <__sfvwrite_r+0x1be>
 8015410:	4621      	mov	r1, r4
 8015412:	4638      	mov	r0, r7
 8015414:	f002 fd2a 	bl	8017e6c <_fflush_r>
 8015418:	2800      	cmp	r0, #0
 801541a:	d0c8      	beq.n	80153ae <__sfvwrite_r+0x1be>
 801541c:	e79b      	b.n	8015356 <__sfvwrite_r+0x166>
 801541e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015422:	4553      	cmp	r3, sl
 8015424:	bf28      	it	cs
 8015426:	4653      	movcs	r3, sl
 8015428:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801542a:	fb93 f3f2 	sdiv	r3, r3, r2
 801542e:	6a21      	ldr	r1, [r4, #32]
 8015430:	4353      	muls	r3, r2
 8015432:	4638      	mov	r0, r7
 8015434:	464a      	mov	r2, r9
 8015436:	47a8      	blx	r5
 8015438:	1e05      	subs	r5, r0, #0
 801543a:	dcb8      	bgt.n	80153ae <__sfvwrite_r+0x1be>
 801543c:	e78b      	b.n	8015356 <__sfvwrite_r+0x166>
 801543e:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8015442:	2000      	movs	r0, #0
 8015444:	3608      	adds	r6, #8
 8015446:	e71d      	b.n	8015284 <__sfvwrite_r+0x94>
 8015448:	f10b 0901 	add.w	r9, fp, #1
 801544c:	e72a      	b.n	80152a4 <__sfvwrite_r+0xb4>
 801544e:	4293      	cmp	r3, r2
 8015450:	db09      	blt.n	8015466 <__sfvwrite_r+0x276>
 8015452:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8015454:	6a21      	ldr	r1, [r4, #32]
 8015456:	4613      	mov	r3, r2
 8015458:	4638      	mov	r0, r7
 801545a:	4652      	mov	r2, sl
 801545c:	47a8      	blx	r5
 801545e:	1e05      	subs	r5, r0, #0
 8015460:	f73f af3c 	bgt.w	80152dc <__sfvwrite_r+0xec>
 8015464:	e777      	b.n	8015356 <__sfvwrite_r+0x166>
 8015466:	461a      	mov	r2, r3
 8015468:	4651      	mov	r1, sl
 801546a:	9301      	str	r3, [sp, #4]
 801546c:	f000 fadc 	bl	8015a28 <memmove>
 8015470:	9b01      	ldr	r3, [sp, #4]
 8015472:	68a2      	ldr	r2, [r4, #8]
 8015474:	1ad2      	subs	r2, r2, r3
 8015476:	60a2      	str	r2, [r4, #8]
 8015478:	6822      	ldr	r2, [r4, #0]
 801547a:	441a      	add	r2, r3
 801547c:	6022      	str	r2, [r4, #0]
 801547e:	461d      	mov	r5, r3
 8015480:	e72c      	b.n	80152dc <__sfvwrite_r+0xec>
 8015482:	2001      	movs	r0, #1
 8015484:	e734      	b.n	80152f0 <__sfvwrite_r+0x100>
 8015486:	bf00      	nop
 8015488:	7ffffc00 	.word	0x7ffffc00

0801548c <_fwrite_r>:
 801548c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015490:	b086      	sub	sp, #24
 8015492:	fb02 f503 	mul.w	r5, r2, r3
 8015496:	461f      	mov	r7, r3
 8015498:	ab01      	add	r3, sp, #4
 801549a:	9303      	str	r3, [sp, #12]
 801549c:	2301      	movs	r3, #1
 801549e:	4690      	mov	r8, r2
 80154a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80154a2:	9101      	str	r1, [sp, #4]
 80154a4:	9502      	str	r5, [sp, #8]
 80154a6:	9505      	str	r5, [sp, #20]
 80154a8:	9304      	str	r3, [sp, #16]
 80154aa:	4606      	mov	r6, r0
 80154ac:	b118      	cbz	r0, 80154b6 <_fwrite_r+0x2a>
 80154ae:	6983      	ldr	r3, [r0, #24]
 80154b0:	b90b      	cbnz	r3, 80154b6 <_fwrite_r+0x2a>
 80154b2:	f002 fd6f 	bl	8017f94 <__sinit>
 80154b6:	4b21      	ldr	r3, [pc, #132]	; (801553c <_fwrite_r+0xb0>)
 80154b8:	429c      	cmp	r4, r3
 80154ba:	d127      	bne.n	801550c <_fwrite_r+0x80>
 80154bc:	6874      	ldr	r4, [r6, #4]
 80154be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154c0:	07d8      	lsls	r0, r3, #31
 80154c2:	d405      	bmi.n	80154d0 <_fwrite_r+0x44>
 80154c4:	89a3      	ldrh	r3, [r4, #12]
 80154c6:	0599      	lsls	r1, r3, #22
 80154c8:	d402      	bmi.n	80154d0 <_fwrite_r+0x44>
 80154ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154cc:	f000 f870 	bl	80155b0 <__retarget_lock_acquire_recursive>
 80154d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154d4:	049a      	lsls	r2, r3, #18
 80154d6:	d406      	bmi.n	80154e6 <_fwrite_r+0x5a>
 80154d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80154dc:	81a3      	strh	r3, [r4, #12]
 80154de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80154e4:	6663      	str	r3, [r4, #100]	; 0x64
 80154e6:	aa03      	add	r2, sp, #12
 80154e8:	4621      	mov	r1, r4
 80154ea:	4630      	mov	r0, r6
 80154ec:	f7ff fe80 	bl	80151f0 <__sfvwrite_r>
 80154f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154f2:	b9a8      	cbnz	r0, 8015520 <_fwrite_r+0x94>
 80154f4:	07d8      	lsls	r0, r3, #31
 80154f6:	d405      	bmi.n	8015504 <_fwrite_r+0x78>
 80154f8:	89a3      	ldrh	r3, [r4, #12]
 80154fa:	0599      	lsls	r1, r3, #22
 80154fc:	d402      	bmi.n	8015504 <_fwrite_r+0x78>
 80154fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015500:	f000 f858 	bl	80155b4 <__retarget_lock_release_recursive>
 8015504:	4638      	mov	r0, r7
 8015506:	b006      	add	sp, #24
 8015508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801550c:	4b0c      	ldr	r3, [pc, #48]	; (8015540 <_fwrite_r+0xb4>)
 801550e:	429c      	cmp	r4, r3
 8015510:	d101      	bne.n	8015516 <_fwrite_r+0x8a>
 8015512:	68b4      	ldr	r4, [r6, #8]
 8015514:	e7d3      	b.n	80154be <_fwrite_r+0x32>
 8015516:	4b0b      	ldr	r3, [pc, #44]	; (8015544 <_fwrite_r+0xb8>)
 8015518:	429c      	cmp	r4, r3
 801551a:	bf08      	it	eq
 801551c:	68f4      	ldreq	r4, [r6, #12]
 801551e:	e7ce      	b.n	80154be <_fwrite_r+0x32>
 8015520:	07da      	lsls	r2, r3, #31
 8015522:	d405      	bmi.n	8015530 <_fwrite_r+0xa4>
 8015524:	89a3      	ldrh	r3, [r4, #12]
 8015526:	059b      	lsls	r3, r3, #22
 8015528:	d402      	bmi.n	8015530 <_fwrite_r+0xa4>
 801552a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801552c:	f000 f842 	bl	80155b4 <__retarget_lock_release_recursive>
 8015530:	9b05      	ldr	r3, [sp, #20]
 8015532:	1aed      	subs	r5, r5, r3
 8015534:	fbb5 f7f8 	udiv	r7, r5, r8
 8015538:	e7e4      	b.n	8015504 <_fwrite_r+0x78>
 801553a:	bf00      	nop
 801553c:	0801adc4 	.word	0x0801adc4
 8015540:	0801ade4 	.word	0x0801ade4
 8015544:	0801ada4 	.word	0x0801ada4

08015548 <fwrite>:
 8015548:	b507      	push	{r0, r1, r2, lr}
 801554a:	9300      	str	r3, [sp, #0]
 801554c:	4613      	mov	r3, r2
 801554e:	460a      	mov	r2, r1
 8015550:	4601      	mov	r1, r0
 8015552:	4803      	ldr	r0, [pc, #12]	; (8015560 <fwrite+0x18>)
 8015554:	6800      	ldr	r0, [r0, #0]
 8015556:	f7ff ff99 	bl	801548c <_fwrite_r>
 801555a:	b003      	add	sp, #12
 801555c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015560:	20000034 	.word	0x20000034

08015564 <__libc_init_array>:
 8015564:	b570      	push	{r4, r5, r6, lr}
 8015566:	4e0d      	ldr	r6, [pc, #52]	; (801559c <__libc_init_array+0x38>)
 8015568:	4c0d      	ldr	r4, [pc, #52]	; (80155a0 <__libc_init_array+0x3c>)
 801556a:	1ba4      	subs	r4, r4, r6
 801556c:	10a4      	asrs	r4, r4, #2
 801556e:	2500      	movs	r5, #0
 8015570:	42a5      	cmp	r5, r4
 8015572:	d109      	bne.n	8015588 <__libc_init_array+0x24>
 8015574:	4e0b      	ldr	r6, [pc, #44]	; (80155a4 <__libc_init_array+0x40>)
 8015576:	4c0c      	ldr	r4, [pc, #48]	; (80155a8 <__libc_init_array+0x44>)
 8015578:	f003 fbd2 	bl	8018d20 <_init>
 801557c:	1ba4      	subs	r4, r4, r6
 801557e:	10a4      	asrs	r4, r4, #2
 8015580:	2500      	movs	r5, #0
 8015582:	42a5      	cmp	r5, r4
 8015584:	d105      	bne.n	8015592 <__libc_init_array+0x2e>
 8015586:	bd70      	pop	{r4, r5, r6, pc}
 8015588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801558c:	4798      	blx	r3
 801558e:	3501      	adds	r5, #1
 8015590:	e7ee      	b.n	8015570 <__libc_init_array+0xc>
 8015592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015596:	4798      	blx	r3
 8015598:	3501      	adds	r5, #1
 801559a:	e7f2      	b.n	8015582 <__libc_init_array+0x1e>
 801559c:	0801b3d8 	.word	0x0801b3d8
 80155a0:	0801b3d8 	.word	0x0801b3d8
 80155a4:	0801b3d8 	.word	0x0801b3d8
 80155a8:	0801b3e4 	.word	0x0801b3e4

080155ac <__retarget_lock_init_recursive>:
 80155ac:	4770      	bx	lr

080155ae <__retarget_lock_close_recursive>:
 80155ae:	4770      	bx	lr

080155b0 <__retarget_lock_acquire_recursive>:
 80155b0:	4770      	bx	lr

080155b2 <__retarget_lock_release>:
 80155b2:	4770      	bx	lr

080155b4 <__retarget_lock_release_recursive>:
 80155b4:	4770      	bx	lr
	...

080155b8 <malloc>:
 80155b8:	4b02      	ldr	r3, [pc, #8]	; (80155c4 <malloc+0xc>)
 80155ba:	4601      	mov	r1, r0
 80155bc:	6818      	ldr	r0, [r3, #0]
 80155be:	f000 b80b 	b.w	80155d8 <_malloc_r>
 80155c2:	bf00      	nop
 80155c4:	20000034 	.word	0x20000034

080155c8 <free>:
 80155c8:	4b02      	ldr	r3, [pc, #8]	; (80155d4 <free+0xc>)
 80155ca:	4601      	mov	r1, r0
 80155cc:	6818      	ldr	r0, [r3, #0]
 80155ce:	f002 bdb7 	b.w	8018140 <_free_r>
 80155d2:	bf00      	nop
 80155d4:	20000034 	.word	0x20000034

080155d8 <_malloc_r>:
 80155d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155dc:	f101 040b 	add.w	r4, r1, #11
 80155e0:	2c16      	cmp	r4, #22
 80155e2:	4681      	mov	r9, r0
 80155e4:	d907      	bls.n	80155f6 <_malloc_r+0x1e>
 80155e6:	f034 0407 	bics.w	r4, r4, #7
 80155ea:	d505      	bpl.n	80155f8 <_malloc_r+0x20>
 80155ec:	230c      	movs	r3, #12
 80155ee:	f8c9 3000 	str.w	r3, [r9]
 80155f2:	2600      	movs	r6, #0
 80155f4:	e131      	b.n	801585a <_malloc_r+0x282>
 80155f6:	2410      	movs	r4, #16
 80155f8:	428c      	cmp	r4, r1
 80155fa:	d3f7      	bcc.n	80155ec <_malloc_r+0x14>
 80155fc:	4648      	mov	r0, r9
 80155fe:	f000 fa35 	bl	8015a6c <__malloc_lock>
 8015602:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8015606:	4d9c      	ldr	r5, [pc, #624]	; (8015878 <_malloc_r+0x2a0>)
 8015608:	d236      	bcs.n	8015678 <_malloc_r+0xa0>
 801560a:	f104 0208 	add.w	r2, r4, #8
 801560e:	442a      	add	r2, r5
 8015610:	f1a2 0108 	sub.w	r1, r2, #8
 8015614:	6856      	ldr	r6, [r2, #4]
 8015616:	428e      	cmp	r6, r1
 8015618:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 801561c:	d102      	bne.n	8015624 <_malloc_r+0x4c>
 801561e:	68d6      	ldr	r6, [r2, #12]
 8015620:	42b2      	cmp	r2, r6
 8015622:	d010      	beq.n	8015646 <_malloc_r+0x6e>
 8015624:	6873      	ldr	r3, [r6, #4]
 8015626:	68f2      	ldr	r2, [r6, #12]
 8015628:	68b1      	ldr	r1, [r6, #8]
 801562a:	f023 0303 	bic.w	r3, r3, #3
 801562e:	60ca      	str	r2, [r1, #12]
 8015630:	4433      	add	r3, r6
 8015632:	6091      	str	r1, [r2, #8]
 8015634:	685a      	ldr	r2, [r3, #4]
 8015636:	f042 0201 	orr.w	r2, r2, #1
 801563a:	605a      	str	r2, [r3, #4]
 801563c:	4648      	mov	r0, r9
 801563e:	f000 fa1b 	bl	8015a78 <__malloc_unlock>
 8015642:	3608      	adds	r6, #8
 8015644:	e109      	b.n	801585a <_malloc_r+0x282>
 8015646:	3302      	adds	r3, #2
 8015648:	4a8c      	ldr	r2, [pc, #560]	; (801587c <_malloc_r+0x2a4>)
 801564a:	692e      	ldr	r6, [r5, #16]
 801564c:	4296      	cmp	r6, r2
 801564e:	4611      	mov	r1, r2
 8015650:	d06d      	beq.n	801572e <_malloc_r+0x156>
 8015652:	6870      	ldr	r0, [r6, #4]
 8015654:	f020 0003 	bic.w	r0, r0, #3
 8015658:	1b07      	subs	r7, r0, r4
 801565a:	2f0f      	cmp	r7, #15
 801565c:	dd47      	ble.n	80156ee <_malloc_r+0x116>
 801565e:	1933      	adds	r3, r6, r4
 8015660:	f044 0401 	orr.w	r4, r4, #1
 8015664:	6074      	str	r4, [r6, #4]
 8015666:	616b      	str	r3, [r5, #20]
 8015668:	612b      	str	r3, [r5, #16]
 801566a:	60da      	str	r2, [r3, #12]
 801566c:	609a      	str	r2, [r3, #8]
 801566e:	f047 0201 	orr.w	r2, r7, #1
 8015672:	605a      	str	r2, [r3, #4]
 8015674:	5037      	str	r7, [r6, r0]
 8015676:	e7e1      	b.n	801563c <_malloc_r+0x64>
 8015678:	0a63      	lsrs	r3, r4, #9
 801567a:	d02a      	beq.n	80156d2 <_malloc_r+0xfa>
 801567c:	2b04      	cmp	r3, #4
 801567e:	d812      	bhi.n	80156a6 <_malloc_r+0xce>
 8015680:	09a3      	lsrs	r3, r4, #6
 8015682:	3338      	adds	r3, #56	; 0x38
 8015684:	1c5a      	adds	r2, r3, #1
 8015686:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801568a:	f1a2 0008 	sub.w	r0, r2, #8
 801568e:	6856      	ldr	r6, [r2, #4]
 8015690:	4286      	cmp	r6, r0
 8015692:	d006      	beq.n	80156a2 <_malloc_r+0xca>
 8015694:	6872      	ldr	r2, [r6, #4]
 8015696:	f022 0203 	bic.w	r2, r2, #3
 801569a:	1b11      	subs	r1, r2, r4
 801569c:	290f      	cmp	r1, #15
 801569e:	dd1c      	ble.n	80156da <_malloc_r+0x102>
 80156a0:	3b01      	subs	r3, #1
 80156a2:	3301      	adds	r3, #1
 80156a4:	e7d0      	b.n	8015648 <_malloc_r+0x70>
 80156a6:	2b14      	cmp	r3, #20
 80156a8:	d801      	bhi.n	80156ae <_malloc_r+0xd6>
 80156aa:	335b      	adds	r3, #91	; 0x5b
 80156ac:	e7ea      	b.n	8015684 <_malloc_r+0xac>
 80156ae:	2b54      	cmp	r3, #84	; 0x54
 80156b0:	d802      	bhi.n	80156b8 <_malloc_r+0xe0>
 80156b2:	0b23      	lsrs	r3, r4, #12
 80156b4:	336e      	adds	r3, #110	; 0x6e
 80156b6:	e7e5      	b.n	8015684 <_malloc_r+0xac>
 80156b8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80156bc:	d802      	bhi.n	80156c4 <_malloc_r+0xec>
 80156be:	0be3      	lsrs	r3, r4, #15
 80156c0:	3377      	adds	r3, #119	; 0x77
 80156c2:	e7df      	b.n	8015684 <_malloc_r+0xac>
 80156c4:	f240 5254 	movw	r2, #1364	; 0x554
 80156c8:	4293      	cmp	r3, r2
 80156ca:	d804      	bhi.n	80156d6 <_malloc_r+0xfe>
 80156cc:	0ca3      	lsrs	r3, r4, #18
 80156ce:	337c      	adds	r3, #124	; 0x7c
 80156d0:	e7d8      	b.n	8015684 <_malloc_r+0xac>
 80156d2:	233f      	movs	r3, #63	; 0x3f
 80156d4:	e7d6      	b.n	8015684 <_malloc_r+0xac>
 80156d6:	237e      	movs	r3, #126	; 0x7e
 80156d8:	e7d4      	b.n	8015684 <_malloc_r+0xac>
 80156da:	2900      	cmp	r1, #0
 80156dc:	68f1      	ldr	r1, [r6, #12]
 80156de:	db04      	blt.n	80156ea <_malloc_r+0x112>
 80156e0:	68b3      	ldr	r3, [r6, #8]
 80156e2:	60d9      	str	r1, [r3, #12]
 80156e4:	608b      	str	r3, [r1, #8]
 80156e6:	18b3      	adds	r3, r6, r2
 80156e8:	e7a4      	b.n	8015634 <_malloc_r+0x5c>
 80156ea:	460e      	mov	r6, r1
 80156ec:	e7d0      	b.n	8015690 <_malloc_r+0xb8>
 80156ee:	2f00      	cmp	r7, #0
 80156f0:	616a      	str	r2, [r5, #20]
 80156f2:	612a      	str	r2, [r5, #16]
 80156f4:	db05      	blt.n	8015702 <_malloc_r+0x12a>
 80156f6:	4430      	add	r0, r6
 80156f8:	6843      	ldr	r3, [r0, #4]
 80156fa:	f043 0301 	orr.w	r3, r3, #1
 80156fe:	6043      	str	r3, [r0, #4]
 8015700:	e79c      	b.n	801563c <_malloc_r+0x64>
 8015702:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8015706:	d244      	bcs.n	8015792 <_malloc_r+0x1ba>
 8015708:	08c0      	lsrs	r0, r0, #3
 801570a:	1087      	asrs	r7, r0, #2
 801570c:	2201      	movs	r2, #1
 801570e:	fa02 f707 	lsl.w	r7, r2, r7
 8015712:	686a      	ldr	r2, [r5, #4]
 8015714:	3001      	adds	r0, #1
 8015716:	433a      	orrs	r2, r7
 8015718:	606a      	str	r2, [r5, #4]
 801571a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801571e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8015722:	60b7      	str	r7, [r6, #8]
 8015724:	3a08      	subs	r2, #8
 8015726:	60f2      	str	r2, [r6, #12]
 8015728:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 801572c:	60fe      	str	r6, [r7, #12]
 801572e:	2001      	movs	r0, #1
 8015730:	109a      	asrs	r2, r3, #2
 8015732:	fa00 f202 	lsl.w	r2, r0, r2
 8015736:	6868      	ldr	r0, [r5, #4]
 8015738:	4282      	cmp	r2, r0
 801573a:	f200 80a1 	bhi.w	8015880 <_malloc_r+0x2a8>
 801573e:	4202      	tst	r2, r0
 8015740:	d106      	bne.n	8015750 <_malloc_r+0x178>
 8015742:	f023 0303 	bic.w	r3, r3, #3
 8015746:	0052      	lsls	r2, r2, #1
 8015748:	4202      	tst	r2, r0
 801574a:	f103 0304 	add.w	r3, r3, #4
 801574e:	d0fa      	beq.n	8015746 <_malloc_r+0x16e>
 8015750:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8015754:	46e0      	mov	r8, ip
 8015756:	469e      	mov	lr, r3
 8015758:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801575c:	4546      	cmp	r6, r8
 801575e:	d153      	bne.n	8015808 <_malloc_r+0x230>
 8015760:	f10e 0e01 	add.w	lr, lr, #1
 8015764:	f01e 0f03 	tst.w	lr, #3
 8015768:	f108 0808 	add.w	r8, r8, #8
 801576c:	d1f4      	bne.n	8015758 <_malloc_r+0x180>
 801576e:	0798      	lsls	r0, r3, #30
 8015770:	d179      	bne.n	8015866 <_malloc_r+0x28e>
 8015772:	686b      	ldr	r3, [r5, #4]
 8015774:	ea23 0302 	bic.w	r3, r3, r2
 8015778:	606b      	str	r3, [r5, #4]
 801577a:	6868      	ldr	r0, [r5, #4]
 801577c:	0052      	lsls	r2, r2, #1
 801577e:	4282      	cmp	r2, r0
 8015780:	d87e      	bhi.n	8015880 <_malloc_r+0x2a8>
 8015782:	2a00      	cmp	r2, #0
 8015784:	d07c      	beq.n	8015880 <_malloc_r+0x2a8>
 8015786:	4673      	mov	r3, lr
 8015788:	4202      	tst	r2, r0
 801578a:	d1e1      	bne.n	8015750 <_malloc_r+0x178>
 801578c:	3304      	adds	r3, #4
 801578e:	0052      	lsls	r2, r2, #1
 8015790:	e7fa      	b.n	8015788 <_malloc_r+0x1b0>
 8015792:	0a42      	lsrs	r2, r0, #9
 8015794:	2a04      	cmp	r2, #4
 8015796:	d815      	bhi.n	80157c4 <_malloc_r+0x1ec>
 8015798:	0982      	lsrs	r2, r0, #6
 801579a:	3238      	adds	r2, #56	; 0x38
 801579c:	1c57      	adds	r7, r2, #1
 801579e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80157a2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80157a6:	45be      	cmp	lr, r7
 80157a8:	d126      	bne.n	80157f8 <_malloc_r+0x220>
 80157aa:	2001      	movs	r0, #1
 80157ac:	1092      	asrs	r2, r2, #2
 80157ae:	fa00 f202 	lsl.w	r2, r0, r2
 80157b2:	6868      	ldr	r0, [r5, #4]
 80157b4:	4310      	orrs	r0, r2
 80157b6:	6068      	str	r0, [r5, #4]
 80157b8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80157bc:	60b7      	str	r7, [r6, #8]
 80157be:	f8ce 6008 	str.w	r6, [lr, #8]
 80157c2:	e7b3      	b.n	801572c <_malloc_r+0x154>
 80157c4:	2a14      	cmp	r2, #20
 80157c6:	d801      	bhi.n	80157cc <_malloc_r+0x1f4>
 80157c8:	325b      	adds	r2, #91	; 0x5b
 80157ca:	e7e7      	b.n	801579c <_malloc_r+0x1c4>
 80157cc:	2a54      	cmp	r2, #84	; 0x54
 80157ce:	d802      	bhi.n	80157d6 <_malloc_r+0x1fe>
 80157d0:	0b02      	lsrs	r2, r0, #12
 80157d2:	326e      	adds	r2, #110	; 0x6e
 80157d4:	e7e2      	b.n	801579c <_malloc_r+0x1c4>
 80157d6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80157da:	d802      	bhi.n	80157e2 <_malloc_r+0x20a>
 80157dc:	0bc2      	lsrs	r2, r0, #15
 80157de:	3277      	adds	r2, #119	; 0x77
 80157e0:	e7dc      	b.n	801579c <_malloc_r+0x1c4>
 80157e2:	f240 5754 	movw	r7, #1364	; 0x554
 80157e6:	42ba      	cmp	r2, r7
 80157e8:	bf9a      	itte	ls
 80157ea:	0c82      	lsrls	r2, r0, #18
 80157ec:	327c      	addls	r2, #124	; 0x7c
 80157ee:	227e      	movhi	r2, #126	; 0x7e
 80157f0:	e7d4      	b.n	801579c <_malloc_r+0x1c4>
 80157f2:	68bf      	ldr	r7, [r7, #8]
 80157f4:	45be      	cmp	lr, r7
 80157f6:	d004      	beq.n	8015802 <_malloc_r+0x22a>
 80157f8:	687a      	ldr	r2, [r7, #4]
 80157fa:	f022 0203 	bic.w	r2, r2, #3
 80157fe:	4290      	cmp	r0, r2
 8015800:	d3f7      	bcc.n	80157f2 <_malloc_r+0x21a>
 8015802:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8015806:	e7d7      	b.n	80157b8 <_malloc_r+0x1e0>
 8015808:	6870      	ldr	r0, [r6, #4]
 801580a:	68f7      	ldr	r7, [r6, #12]
 801580c:	f020 0003 	bic.w	r0, r0, #3
 8015810:	eba0 0a04 	sub.w	sl, r0, r4
 8015814:	f1ba 0f0f 	cmp.w	sl, #15
 8015818:	dd10      	ble.n	801583c <_malloc_r+0x264>
 801581a:	68b2      	ldr	r2, [r6, #8]
 801581c:	1933      	adds	r3, r6, r4
 801581e:	f044 0401 	orr.w	r4, r4, #1
 8015822:	6074      	str	r4, [r6, #4]
 8015824:	60d7      	str	r7, [r2, #12]
 8015826:	60ba      	str	r2, [r7, #8]
 8015828:	f04a 0201 	orr.w	r2, sl, #1
 801582c:	616b      	str	r3, [r5, #20]
 801582e:	612b      	str	r3, [r5, #16]
 8015830:	60d9      	str	r1, [r3, #12]
 8015832:	6099      	str	r1, [r3, #8]
 8015834:	605a      	str	r2, [r3, #4]
 8015836:	f846 a000 	str.w	sl, [r6, r0]
 801583a:	e6ff      	b.n	801563c <_malloc_r+0x64>
 801583c:	f1ba 0f00 	cmp.w	sl, #0
 8015840:	db0f      	blt.n	8015862 <_malloc_r+0x28a>
 8015842:	4430      	add	r0, r6
 8015844:	6843      	ldr	r3, [r0, #4]
 8015846:	f043 0301 	orr.w	r3, r3, #1
 801584a:	6043      	str	r3, [r0, #4]
 801584c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8015850:	4648      	mov	r0, r9
 8015852:	60df      	str	r7, [r3, #12]
 8015854:	60bb      	str	r3, [r7, #8]
 8015856:	f000 f90f 	bl	8015a78 <__malloc_unlock>
 801585a:	4630      	mov	r0, r6
 801585c:	b003      	add	sp, #12
 801585e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015862:	463e      	mov	r6, r7
 8015864:	e77a      	b.n	801575c <_malloc_r+0x184>
 8015866:	f85c 0908 	ldr.w	r0, [ip], #-8
 801586a:	4584      	cmp	ip, r0
 801586c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015870:	f43f af7d 	beq.w	801576e <_malloc_r+0x196>
 8015874:	e781      	b.n	801577a <_malloc_r+0x1a2>
 8015876:	bf00      	nop
 8015878:	20000128 	.word	0x20000128
 801587c:	20000130 	.word	0x20000130
 8015880:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8015884:	f8db 6004 	ldr.w	r6, [fp, #4]
 8015888:	f026 0603 	bic.w	r6, r6, #3
 801588c:	42b4      	cmp	r4, r6
 801588e:	d803      	bhi.n	8015898 <_malloc_r+0x2c0>
 8015890:	1b33      	subs	r3, r6, r4
 8015892:	2b0f      	cmp	r3, #15
 8015894:	f300 8096 	bgt.w	80159c4 <_malloc_r+0x3ec>
 8015898:	4a4f      	ldr	r2, [pc, #316]	; (80159d8 <_malloc_r+0x400>)
 801589a:	6817      	ldr	r7, [r2, #0]
 801589c:	4a4f      	ldr	r2, [pc, #316]	; (80159dc <_malloc_r+0x404>)
 801589e:	6811      	ldr	r1, [r2, #0]
 80158a0:	3710      	adds	r7, #16
 80158a2:	3101      	adds	r1, #1
 80158a4:	eb0b 0306 	add.w	r3, fp, r6
 80158a8:	4427      	add	r7, r4
 80158aa:	d005      	beq.n	80158b8 <_malloc_r+0x2e0>
 80158ac:	494c      	ldr	r1, [pc, #304]	; (80159e0 <_malloc_r+0x408>)
 80158ae:	3901      	subs	r1, #1
 80158b0:	440f      	add	r7, r1
 80158b2:	3101      	adds	r1, #1
 80158b4:	4249      	negs	r1, r1
 80158b6:	400f      	ands	r7, r1
 80158b8:	4639      	mov	r1, r7
 80158ba:	4648      	mov	r0, r9
 80158bc:	9201      	str	r2, [sp, #4]
 80158be:	9300      	str	r3, [sp, #0]
 80158c0:	f000 fab0 	bl	8015e24 <_sbrk_r>
 80158c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80158c8:	4680      	mov	r8, r0
 80158ca:	d056      	beq.n	801597a <_malloc_r+0x3a2>
 80158cc:	9b00      	ldr	r3, [sp, #0]
 80158ce:	9a01      	ldr	r2, [sp, #4]
 80158d0:	4283      	cmp	r3, r0
 80158d2:	d901      	bls.n	80158d8 <_malloc_r+0x300>
 80158d4:	45ab      	cmp	fp, r5
 80158d6:	d150      	bne.n	801597a <_malloc_r+0x3a2>
 80158d8:	4842      	ldr	r0, [pc, #264]	; (80159e4 <_malloc_r+0x40c>)
 80158da:	6801      	ldr	r1, [r0, #0]
 80158dc:	4543      	cmp	r3, r8
 80158de:	eb07 0e01 	add.w	lr, r7, r1
 80158e2:	f8c0 e000 	str.w	lr, [r0]
 80158e6:	4940      	ldr	r1, [pc, #256]	; (80159e8 <_malloc_r+0x410>)
 80158e8:	4682      	mov	sl, r0
 80158ea:	d113      	bne.n	8015914 <_malloc_r+0x33c>
 80158ec:	420b      	tst	r3, r1
 80158ee:	d111      	bne.n	8015914 <_malloc_r+0x33c>
 80158f0:	68ab      	ldr	r3, [r5, #8]
 80158f2:	443e      	add	r6, r7
 80158f4:	f046 0601 	orr.w	r6, r6, #1
 80158f8:	605e      	str	r6, [r3, #4]
 80158fa:	4a3c      	ldr	r2, [pc, #240]	; (80159ec <_malloc_r+0x414>)
 80158fc:	f8da 3000 	ldr.w	r3, [sl]
 8015900:	6811      	ldr	r1, [r2, #0]
 8015902:	428b      	cmp	r3, r1
 8015904:	bf88      	it	hi
 8015906:	6013      	strhi	r3, [r2, #0]
 8015908:	4a39      	ldr	r2, [pc, #228]	; (80159f0 <_malloc_r+0x418>)
 801590a:	6811      	ldr	r1, [r2, #0]
 801590c:	428b      	cmp	r3, r1
 801590e:	bf88      	it	hi
 8015910:	6013      	strhi	r3, [r2, #0]
 8015912:	e032      	b.n	801597a <_malloc_r+0x3a2>
 8015914:	6810      	ldr	r0, [r2, #0]
 8015916:	3001      	adds	r0, #1
 8015918:	bf1b      	ittet	ne
 801591a:	eba8 0303 	subne.w	r3, r8, r3
 801591e:	4473      	addne	r3, lr
 8015920:	f8c2 8000 	streq.w	r8, [r2]
 8015924:	f8ca 3000 	strne.w	r3, [sl]
 8015928:	f018 0007 	ands.w	r0, r8, #7
 801592c:	bf1c      	itt	ne
 801592e:	f1c0 0008 	rsbne	r0, r0, #8
 8015932:	4480      	addne	r8, r0
 8015934:	4b2a      	ldr	r3, [pc, #168]	; (80159e0 <_malloc_r+0x408>)
 8015936:	4447      	add	r7, r8
 8015938:	4418      	add	r0, r3
 801593a:	400f      	ands	r7, r1
 801593c:	1bc7      	subs	r7, r0, r7
 801593e:	4639      	mov	r1, r7
 8015940:	4648      	mov	r0, r9
 8015942:	f000 fa6f 	bl	8015e24 <_sbrk_r>
 8015946:	1c43      	adds	r3, r0, #1
 8015948:	bf08      	it	eq
 801594a:	4640      	moveq	r0, r8
 801594c:	f8da 3000 	ldr.w	r3, [sl]
 8015950:	f8c5 8008 	str.w	r8, [r5, #8]
 8015954:	bf08      	it	eq
 8015956:	2700      	moveq	r7, #0
 8015958:	eba0 0008 	sub.w	r0, r0, r8
 801595c:	443b      	add	r3, r7
 801595e:	4407      	add	r7, r0
 8015960:	f047 0701 	orr.w	r7, r7, #1
 8015964:	45ab      	cmp	fp, r5
 8015966:	f8ca 3000 	str.w	r3, [sl]
 801596a:	f8c8 7004 	str.w	r7, [r8, #4]
 801596e:	d0c4      	beq.n	80158fa <_malloc_r+0x322>
 8015970:	2e0f      	cmp	r6, #15
 8015972:	d810      	bhi.n	8015996 <_malloc_r+0x3be>
 8015974:	2301      	movs	r3, #1
 8015976:	f8c8 3004 	str.w	r3, [r8, #4]
 801597a:	68ab      	ldr	r3, [r5, #8]
 801597c:	685a      	ldr	r2, [r3, #4]
 801597e:	f022 0203 	bic.w	r2, r2, #3
 8015982:	4294      	cmp	r4, r2
 8015984:	eba2 0304 	sub.w	r3, r2, r4
 8015988:	d801      	bhi.n	801598e <_malloc_r+0x3b6>
 801598a:	2b0f      	cmp	r3, #15
 801598c:	dc1a      	bgt.n	80159c4 <_malloc_r+0x3ec>
 801598e:	4648      	mov	r0, r9
 8015990:	f000 f872 	bl	8015a78 <__malloc_unlock>
 8015994:	e62d      	b.n	80155f2 <_malloc_r+0x1a>
 8015996:	f8db 3004 	ldr.w	r3, [fp, #4]
 801599a:	3e0c      	subs	r6, #12
 801599c:	f026 0607 	bic.w	r6, r6, #7
 80159a0:	f003 0301 	and.w	r3, r3, #1
 80159a4:	4333      	orrs	r3, r6
 80159a6:	f8cb 3004 	str.w	r3, [fp, #4]
 80159aa:	eb0b 0306 	add.w	r3, fp, r6
 80159ae:	2205      	movs	r2, #5
 80159b0:	2e0f      	cmp	r6, #15
 80159b2:	605a      	str	r2, [r3, #4]
 80159b4:	609a      	str	r2, [r3, #8]
 80159b6:	d9a0      	bls.n	80158fa <_malloc_r+0x322>
 80159b8:	f10b 0108 	add.w	r1, fp, #8
 80159bc:	4648      	mov	r0, r9
 80159be:	f002 fbbf 	bl	8018140 <_free_r>
 80159c2:	e79a      	b.n	80158fa <_malloc_r+0x322>
 80159c4:	68ae      	ldr	r6, [r5, #8]
 80159c6:	f044 0201 	orr.w	r2, r4, #1
 80159ca:	4434      	add	r4, r6
 80159cc:	f043 0301 	orr.w	r3, r3, #1
 80159d0:	6072      	str	r2, [r6, #4]
 80159d2:	60ac      	str	r4, [r5, #8]
 80159d4:	6063      	str	r3, [r4, #4]
 80159d6:	e631      	b.n	801563c <_malloc_r+0x64>
 80159d8:	200076c4 	.word	0x200076c4
 80159dc:	20000530 	.word	0x20000530
 80159e0:	00001000 	.word	0x00001000
 80159e4:	20007694 	.word	0x20007694
 80159e8:	00000fff 	.word	0x00000fff
 80159ec:	200076bc 	.word	0x200076bc
 80159f0:	200076c0 	.word	0x200076c0

080159f4 <memcmp>:
 80159f4:	b510      	push	{r4, lr}
 80159f6:	3901      	subs	r1, #1
 80159f8:	4402      	add	r2, r0
 80159fa:	4290      	cmp	r0, r2
 80159fc:	d101      	bne.n	8015a02 <memcmp+0xe>
 80159fe:	2000      	movs	r0, #0
 8015a00:	bd10      	pop	{r4, pc}
 8015a02:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015a06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015a0a:	42a3      	cmp	r3, r4
 8015a0c:	d0f5      	beq.n	80159fa <memcmp+0x6>
 8015a0e:	1b18      	subs	r0, r3, r4
 8015a10:	bd10      	pop	{r4, pc}

08015a12 <memcpy>:
 8015a12:	b510      	push	{r4, lr}
 8015a14:	1e43      	subs	r3, r0, #1
 8015a16:	440a      	add	r2, r1
 8015a18:	4291      	cmp	r1, r2
 8015a1a:	d100      	bne.n	8015a1e <memcpy+0xc>
 8015a1c:	bd10      	pop	{r4, pc}
 8015a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a26:	e7f7      	b.n	8015a18 <memcpy+0x6>

08015a28 <memmove>:
 8015a28:	4288      	cmp	r0, r1
 8015a2a:	b510      	push	{r4, lr}
 8015a2c:	eb01 0302 	add.w	r3, r1, r2
 8015a30:	d803      	bhi.n	8015a3a <memmove+0x12>
 8015a32:	1e42      	subs	r2, r0, #1
 8015a34:	4299      	cmp	r1, r3
 8015a36:	d10c      	bne.n	8015a52 <memmove+0x2a>
 8015a38:	bd10      	pop	{r4, pc}
 8015a3a:	4298      	cmp	r0, r3
 8015a3c:	d2f9      	bcs.n	8015a32 <memmove+0xa>
 8015a3e:	1881      	adds	r1, r0, r2
 8015a40:	1ad2      	subs	r2, r2, r3
 8015a42:	42d3      	cmn	r3, r2
 8015a44:	d100      	bne.n	8015a48 <memmove+0x20>
 8015a46:	bd10      	pop	{r4, pc}
 8015a48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015a50:	e7f7      	b.n	8015a42 <memmove+0x1a>
 8015a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a56:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015a5a:	e7eb      	b.n	8015a34 <memmove+0xc>

08015a5c <memset>:
 8015a5c:	4402      	add	r2, r0
 8015a5e:	4603      	mov	r3, r0
 8015a60:	4293      	cmp	r3, r2
 8015a62:	d100      	bne.n	8015a66 <memset+0xa>
 8015a64:	4770      	bx	lr
 8015a66:	f803 1b01 	strb.w	r1, [r3], #1
 8015a6a:	e7f9      	b.n	8015a60 <memset+0x4>

08015a6c <__malloc_lock>:
 8015a6c:	4801      	ldr	r0, [pc, #4]	; (8015a74 <__malloc_lock+0x8>)
 8015a6e:	f7ff bd9f 	b.w	80155b0 <__retarget_lock_acquire_recursive>
 8015a72:	bf00      	nop
 8015a74:	20007ea0 	.word	0x20007ea0

08015a78 <__malloc_unlock>:
 8015a78:	4801      	ldr	r0, [pc, #4]	; (8015a80 <__malloc_unlock+0x8>)
 8015a7a:	f7ff bd9b 	b.w	80155b4 <__retarget_lock_release_recursive>
 8015a7e:	bf00      	nop
 8015a80:	20007ea0 	.word	0x20007ea0

08015a84 <_putc_r>:
 8015a84:	b570      	push	{r4, r5, r6, lr}
 8015a86:	460d      	mov	r5, r1
 8015a88:	4614      	mov	r4, r2
 8015a8a:	4606      	mov	r6, r0
 8015a8c:	b118      	cbz	r0, 8015a96 <_putc_r+0x12>
 8015a8e:	6983      	ldr	r3, [r0, #24]
 8015a90:	b90b      	cbnz	r3, 8015a96 <_putc_r+0x12>
 8015a92:	f002 fa7f 	bl	8017f94 <__sinit>
 8015a96:	4b1c      	ldr	r3, [pc, #112]	; (8015b08 <_putc_r+0x84>)
 8015a98:	429c      	cmp	r4, r3
 8015a9a:	d124      	bne.n	8015ae6 <_putc_r+0x62>
 8015a9c:	6874      	ldr	r4, [r6, #4]
 8015a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015aa0:	07d8      	lsls	r0, r3, #31
 8015aa2:	d405      	bmi.n	8015ab0 <_putc_r+0x2c>
 8015aa4:	89a3      	ldrh	r3, [r4, #12]
 8015aa6:	0599      	lsls	r1, r3, #22
 8015aa8:	d402      	bmi.n	8015ab0 <_putc_r+0x2c>
 8015aaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015aac:	f7ff fd80 	bl	80155b0 <__retarget_lock_acquire_recursive>
 8015ab0:	68a3      	ldr	r3, [r4, #8]
 8015ab2:	3b01      	subs	r3, #1
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	60a3      	str	r3, [r4, #8]
 8015ab8:	da05      	bge.n	8015ac6 <_putc_r+0x42>
 8015aba:	69a2      	ldr	r2, [r4, #24]
 8015abc:	4293      	cmp	r3, r2
 8015abe:	db1c      	blt.n	8015afa <_putc_r+0x76>
 8015ac0:	b2eb      	uxtb	r3, r5
 8015ac2:	2b0a      	cmp	r3, #10
 8015ac4:	d019      	beq.n	8015afa <_putc_r+0x76>
 8015ac6:	6823      	ldr	r3, [r4, #0]
 8015ac8:	1c5a      	adds	r2, r3, #1
 8015aca:	6022      	str	r2, [r4, #0]
 8015acc:	701d      	strb	r5, [r3, #0]
 8015ace:	b2ed      	uxtb	r5, r5
 8015ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ad2:	07da      	lsls	r2, r3, #31
 8015ad4:	d405      	bmi.n	8015ae2 <_putc_r+0x5e>
 8015ad6:	89a3      	ldrh	r3, [r4, #12]
 8015ad8:	059b      	lsls	r3, r3, #22
 8015ada:	d402      	bmi.n	8015ae2 <_putc_r+0x5e>
 8015adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ade:	f7ff fd69 	bl	80155b4 <__retarget_lock_release_recursive>
 8015ae2:	4628      	mov	r0, r5
 8015ae4:	bd70      	pop	{r4, r5, r6, pc}
 8015ae6:	4b09      	ldr	r3, [pc, #36]	; (8015b0c <_putc_r+0x88>)
 8015ae8:	429c      	cmp	r4, r3
 8015aea:	d101      	bne.n	8015af0 <_putc_r+0x6c>
 8015aec:	68b4      	ldr	r4, [r6, #8]
 8015aee:	e7d6      	b.n	8015a9e <_putc_r+0x1a>
 8015af0:	4b07      	ldr	r3, [pc, #28]	; (8015b10 <_putc_r+0x8c>)
 8015af2:	429c      	cmp	r4, r3
 8015af4:	bf08      	it	eq
 8015af6:	68f4      	ldreq	r4, [r6, #12]
 8015af8:	e7d1      	b.n	8015a9e <_putc_r+0x1a>
 8015afa:	4629      	mov	r1, r5
 8015afc:	4622      	mov	r2, r4
 8015afe:	4630      	mov	r0, r6
 8015b00:	f001 f9d6 	bl	8016eb0 <__swbuf_r>
 8015b04:	4605      	mov	r5, r0
 8015b06:	e7e3      	b.n	8015ad0 <_putc_r+0x4c>
 8015b08:	0801adc4 	.word	0x0801adc4
 8015b0c:	0801ade4 	.word	0x0801ade4
 8015b10:	0801ada4 	.word	0x0801ada4

08015b14 <realloc>:
 8015b14:	4b02      	ldr	r3, [pc, #8]	; (8015b20 <realloc+0xc>)
 8015b16:	460a      	mov	r2, r1
 8015b18:	4601      	mov	r1, r0
 8015b1a:	6818      	ldr	r0, [r3, #0]
 8015b1c:	f000 b802 	b.w	8015b24 <_realloc_r>
 8015b20:	20000034 	.word	0x20000034

08015b24 <_realloc_r>:
 8015b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b28:	4682      	mov	sl, r0
 8015b2a:	460c      	mov	r4, r1
 8015b2c:	b929      	cbnz	r1, 8015b3a <_realloc_r+0x16>
 8015b2e:	4611      	mov	r1, r2
 8015b30:	b003      	add	sp, #12
 8015b32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b36:	f7ff bd4f 	b.w	80155d8 <_malloc_r>
 8015b3a:	9201      	str	r2, [sp, #4]
 8015b3c:	f7ff ff96 	bl	8015a6c <__malloc_lock>
 8015b40:	9a01      	ldr	r2, [sp, #4]
 8015b42:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8015b46:	f102 080b 	add.w	r8, r2, #11
 8015b4a:	f1b8 0f16 	cmp.w	r8, #22
 8015b4e:	f1a4 0908 	sub.w	r9, r4, #8
 8015b52:	f025 0603 	bic.w	r6, r5, #3
 8015b56:	d90a      	bls.n	8015b6e <_realloc_r+0x4a>
 8015b58:	f038 0807 	bics.w	r8, r8, #7
 8015b5c:	d509      	bpl.n	8015b72 <_realloc_r+0x4e>
 8015b5e:	230c      	movs	r3, #12
 8015b60:	f8ca 3000 	str.w	r3, [sl]
 8015b64:	2700      	movs	r7, #0
 8015b66:	4638      	mov	r0, r7
 8015b68:	b003      	add	sp, #12
 8015b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b6e:	f04f 0810 	mov.w	r8, #16
 8015b72:	4590      	cmp	r8, r2
 8015b74:	d3f3      	bcc.n	8015b5e <_realloc_r+0x3a>
 8015b76:	45b0      	cmp	r8, r6
 8015b78:	f340 8145 	ble.w	8015e06 <_realloc_r+0x2e2>
 8015b7c:	4ba8      	ldr	r3, [pc, #672]	; (8015e20 <_realloc_r+0x2fc>)
 8015b7e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8015b82:	eb09 0106 	add.w	r1, r9, r6
 8015b86:	4571      	cmp	r1, lr
 8015b88:	469b      	mov	fp, r3
 8015b8a:	684b      	ldr	r3, [r1, #4]
 8015b8c:	d005      	beq.n	8015b9a <_realloc_r+0x76>
 8015b8e:	f023 0001 	bic.w	r0, r3, #1
 8015b92:	4408      	add	r0, r1
 8015b94:	6840      	ldr	r0, [r0, #4]
 8015b96:	07c7      	lsls	r7, r0, #31
 8015b98:	d447      	bmi.n	8015c2a <_realloc_r+0x106>
 8015b9a:	f023 0303 	bic.w	r3, r3, #3
 8015b9e:	4571      	cmp	r1, lr
 8015ba0:	eb06 0703 	add.w	r7, r6, r3
 8015ba4:	d119      	bne.n	8015bda <_realloc_r+0xb6>
 8015ba6:	f108 0010 	add.w	r0, r8, #16
 8015baa:	4287      	cmp	r7, r0
 8015bac:	db3f      	blt.n	8015c2e <_realloc_r+0x10a>
 8015bae:	eb09 0308 	add.w	r3, r9, r8
 8015bb2:	eba7 0708 	sub.w	r7, r7, r8
 8015bb6:	f047 0701 	orr.w	r7, r7, #1
 8015bba:	f8cb 3008 	str.w	r3, [fp, #8]
 8015bbe:	605f      	str	r7, [r3, #4]
 8015bc0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015bc4:	f003 0301 	and.w	r3, r3, #1
 8015bc8:	ea43 0308 	orr.w	r3, r3, r8
 8015bcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8015bd0:	4650      	mov	r0, sl
 8015bd2:	f7ff ff51 	bl	8015a78 <__malloc_unlock>
 8015bd6:	4627      	mov	r7, r4
 8015bd8:	e7c5      	b.n	8015b66 <_realloc_r+0x42>
 8015bda:	45b8      	cmp	r8, r7
 8015bdc:	dc27      	bgt.n	8015c2e <_realloc_r+0x10a>
 8015bde:	68cb      	ldr	r3, [r1, #12]
 8015be0:	688a      	ldr	r2, [r1, #8]
 8015be2:	60d3      	str	r3, [r2, #12]
 8015be4:	609a      	str	r2, [r3, #8]
 8015be6:	eba7 0008 	sub.w	r0, r7, r8
 8015bea:	280f      	cmp	r0, #15
 8015bec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015bf0:	eb09 0207 	add.w	r2, r9, r7
 8015bf4:	f240 8109 	bls.w	8015e0a <_realloc_r+0x2e6>
 8015bf8:	eb09 0108 	add.w	r1, r9, r8
 8015bfc:	f003 0301 	and.w	r3, r3, #1
 8015c00:	ea43 0308 	orr.w	r3, r3, r8
 8015c04:	f040 0001 	orr.w	r0, r0, #1
 8015c08:	f8c9 3004 	str.w	r3, [r9, #4]
 8015c0c:	6048      	str	r0, [r1, #4]
 8015c0e:	6853      	ldr	r3, [r2, #4]
 8015c10:	f043 0301 	orr.w	r3, r3, #1
 8015c14:	6053      	str	r3, [r2, #4]
 8015c16:	3108      	adds	r1, #8
 8015c18:	4650      	mov	r0, sl
 8015c1a:	f002 fa91 	bl	8018140 <_free_r>
 8015c1e:	4650      	mov	r0, sl
 8015c20:	f7ff ff2a 	bl	8015a78 <__malloc_unlock>
 8015c24:	f109 0708 	add.w	r7, r9, #8
 8015c28:	e79d      	b.n	8015b66 <_realloc_r+0x42>
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	4619      	mov	r1, r3
 8015c2e:	07e8      	lsls	r0, r5, #31
 8015c30:	f100 8084 	bmi.w	8015d3c <_realloc_r+0x218>
 8015c34:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8015c38:	eba9 0505 	sub.w	r5, r9, r5
 8015c3c:	6868      	ldr	r0, [r5, #4]
 8015c3e:	f020 0003 	bic.w	r0, r0, #3
 8015c42:	4430      	add	r0, r6
 8015c44:	2900      	cmp	r1, #0
 8015c46:	d076      	beq.n	8015d36 <_realloc_r+0x212>
 8015c48:	4571      	cmp	r1, lr
 8015c4a:	d150      	bne.n	8015cee <_realloc_r+0x1ca>
 8015c4c:	4403      	add	r3, r0
 8015c4e:	f108 0110 	add.w	r1, r8, #16
 8015c52:	428b      	cmp	r3, r1
 8015c54:	db6f      	blt.n	8015d36 <_realloc_r+0x212>
 8015c56:	462f      	mov	r7, r5
 8015c58:	68ea      	ldr	r2, [r5, #12]
 8015c5a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8015c5e:	60ca      	str	r2, [r1, #12]
 8015c60:	6091      	str	r1, [r2, #8]
 8015c62:	1f32      	subs	r2, r6, #4
 8015c64:	2a24      	cmp	r2, #36	; 0x24
 8015c66:	d83b      	bhi.n	8015ce0 <_realloc_r+0x1bc>
 8015c68:	2a13      	cmp	r2, #19
 8015c6a:	d936      	bls.n	8015cda <_realloc_r+0x1b6>
 8015c6c:	6821      	ldr	r1, [r4, #0]
 8015c6e:	60a9      	str	r1, [r5, #8]
 8015c70:	6861      	ldr	r1, [r4, #4]
 8015c72:	60e9      	str	r1, [r5, #12]
 8015c74:	2a1b      	cmp	r2, #27
 8015c76:	d81c      	bhi.n	8015cb2 <_realloc_r+0x18e>
 8015c78:	f105 0210 	add.w	r2, r5, #16
 8015c7c:	f104 0108 	add.w	r1, r4, #8
 8015c80:	6808      	ldr	r0, [r1, #0]
 8015c82:	6010      	str	r0, [r2, #0]
 8015c84:	6848      	ldr	r0, [r1, #4]
 8015c86:	6050      	str	r0, [r2, #4]
 8015c88:	6889      	ldr	r1, [r1, #8]
 8015c8a:	6091      	str	r1, [r2, #8]
 8015c8c:	eb05 0208 	add.w	r2, r5, r8
 8015c90:	eba3 0308 	sub.w	r3, r3, r8
 8015c94:	f043 0301 	orr.w	r3, r3, #1
 8015c98:	f8cb 2008 	str.w	r2, [fp, #8]
 8015c9c:	6053      	str	r3, [r2, #4]
 8015c9e:	686b      	ldr	r3, [r5, #4]
 8015ca0:	f003 0301 	and.w	r3, r3, #1
 8015ca4:	ea43 0308 	orr.w	r3, r3, r8
 8015ca8:	606b      	str	r3, [r5, #4]
 8015caa:	4650      	mov	r0, sl
 8015cac:	f7ff fee4 	bl	8015a78 <__malloc_unlock>
 8015cb0:	e759      	b.n	8015b66 <_realloc_r+0x42>
 8015cb2:	68a1      	ldr	r1, [r4, #8]
 8015cb4:	6129      	str	r1, [r5, #16]
 8015cb6:	68e1      	ldr	r1, [r4, #12]
 8015cb8:	6169      	str	r1, [r5, #20]
 8015cba:	2a24      	cmp	r2, #36	; 0x24
 8015cbc:	bf01      	itttt	eq
 8015cbe:	6922      	ldreq	r2, [r4, #16]
 8015cc0:	61aa      	streq	r2, [r5, #24]
 8015cc2:	6960      	ldreq	r0, [r4, #20]
 8015cc4:	61e8      	streq	r0, [r5, #28]
 8015cc6:	bf19      	ittee	ne
 8015cc8:	f105 0218 	addne.w	r2, r5, #24
 8015ccc:	f104 0110 	addne.w	r1, r4, #16
 8015cd0:	f105 0220 	addeq.w	r2, r5, #32
 8015cd4:	f104 0118 	addeq.w	r1, r4, #24
 8015cd8:	e7d2      	b.n	8015c80 <_realloc_r+0x15c>
 8015cda:	463a      	mov	r2, r7
 8015cdc:	4621      	mov	r1, r4
 8015cde:	e7cf      	b.n	8015c80 <_realloc_r+0x15c>
 8015ce0:	4621      	mov	r1, r4
 8015ce2:	4638      	mov	r0, r7
 8015ce4:	9301      	str	r3, [sp, #4]
 8015ce6:	f7ff fe9f 	bl	8015a28 <memmove>
 8015cea:	9b01      	ldr	r3, [sp, #4]
 8015cec:	e7ce      	b.n	8015c8c <_realloc_r+0x168>
 8015cee:	18c7      	adds	r7, r0, r3
 8015cf0:	45b8      	cmp	r8, r7
 8015cf2:	dc20      	bgt.n	8015d36 <_realloc_r+0x212>
 8015cf4:	68cb      	ldr	r3, [r1, #12]
 8015cf6:	688a      	ldr	r2, [r1, #8]
 8015cf8:	60d3      	str	r3, [r2, #12]
 8015cfa:	609a      	str	r2, [r3, #8]
 8015cfc:	4628      	mov	r0, r5
 8015cfe:	68eb      	ldr	r3, [r5, #12]
 8015d00:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8015d04:	60d3      	str	r3, [r2, #12]
 8015d06:	609a      	str	r2, [r3, #8]
 8015d08:	1f32      	subs	r2, r6, #4
 8015d0a:	2a24      	cmp	r2, #36	; 0x24
 8015d0c:	d842      	bhi.n	8015d94 <_realloc_r+0x270>
 8015d0e:	2a13      	cmp	r2, #19
 8015d10:	d93e      	bls.n	8015d90 <_realloc_r+0x26c>
 8015d12:	6823      	ldr	r3, [r4, #0]
 8015d14:	60ab      	str	r3, [r5, #8]
 8015d16:	6863      	ldr	r3, [r4, #4]
 8015d18:	60eb      	str	r3, [r5, #12]
 8015d1a:	2a1b      	cmp	r2, #27
 8015d1c:	d824      	bhi.n	8015d68 <_realloc_r+0x244>
 8015d1e:	f105 0010 	add.w	r0, r5, #16
 8015d22:	f104 0308 	add.w	r3, r4, #8
 8015d26:	681a      	ldr	r2, [r3, #0]
 8015d28:	6002      	str	r2, [r0, #0]
 8015d2a:	685a      	ldr	r2, [r3, #4]
 8015d2c:	6042      	str	r2, [r0, #4]
 8015d2e:	689b      	ldr	r3, [r3, #8]
 8015d30:	6083      	str	r3, [r0, #8]
 8015d32:	46a9      	mov	r9, r5
 8015d34:	e757      	b.n	8015be6 <_realloc_r+0xc2>
 8015d36:	4580      	cmp	r8, r0
 8015d38:	4607      	mov	r7, r0
 8015d3a:	dddf      	ble.n	8015cfc <_realloc_r+0x1d8>
 8015d3c:	4611      	mov	r1, r2
 8015d3e:	4650      	mov	r0, sl
 8015d40:	f7ff fc4a 	bl	80155d8 <_malloc_r>
 8015d44:	4607      	mov	r7, r0
 8015d46:	2800      	cmp	r0, #0
 8015d48:	d0af      	beq.n	8015caa <_realloc_r+0x186>
 8015d4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015d4e:	f023 0301 	bic.w	r3, r3, #1
 8015d52:	f1a0 0208 	sub.w	r2, r0, #8
 8015d56:	444b      	add	r3, r9
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d11f      	bne.n	8015d9c <_realloc_r+0x278>
 8015d5c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8015d60:	f027 0703 	bic.w	r7, r7, #3
 8015d64:	4437      	add	r7, r6
 8015d66:	e73e      	b.n	8015be6 <_realloc_r+0xc2>
 8015d68:	68a3      	ldr	r3, [r4, #8]
 8015d6a:	612b      	str	r3, [r5, #16]
 8015d6c:	68e3      	ldr	r3, [r4, #12]
 8015d6e:	616b      	str	r3, [r5, #20]
 8015d70:	2a24      	cmp	r2, #36	; 0x24
 8015d72:	bf01      	itttt	eq
 8015d74:	6923      	ldreq	r3, [r4, #16]
 8015d76:	61ab      	streq	r3, [r5, #24]
 8015d78:	6962      	ldreq	r2, [r4, #20]
 8015d7a:	61ea      	streq	r2, [r5, #28]
 8015d7c:	bf19      	ittee	ne
 8015d7e:	f105 0018 	addne.w	r0, r5, #24
 8015d82:	f104 0310 	addne.w	r3, r4, #16
 8015d86:	f105 0020 	addeq.w	r0, r5, #32
 8015d8a:	f104 0318 	addeq.w	r3, r4, #24
 8015d8e:	e7ca      	b.n	8015d26 <_realloc_r+0x202>
 8015d90:	4623      	mov	r3, r4
 8015d92:	e7c8      	b.n	8015d26 <_realloc_r+0x202>
 8015d94:	4621      	mov	r1, r4
 8015d96:	f7ff fe47 	bl	8015a28 <memmove>
 8015d9a:	e7ca      	b.n	8015d32 <_realloc_r+0x20e>
 8015d9c:	1f32      	subs	r2, r6, #4
 8015d9e:	2a24      	cmp	r2, #36	; 0x24
 8015da0:	d82d      	bhi.n	8015dfe <_realloc_r+0x2da>
 8015da2:	2a13      	cmp	r2, #19
 8015da4:	d928      	bls.n	8015df8 <_realloc_r+0x2d4>
 8015da6:	6823      	ldr	r3, [r4, #0]
 8015da8:	6003      	str	r3, [r0, #0]
 8015daa:	6863      	ldr	r3, [r4, #4]
 8015dac:	6043      	str	r3, [r0, #4]
 8015dae:	2a1b      	cmp	r2, #27
 8015db0:	d80e      	bhi.n	8015dd0 <_realloc_r+0x2ac>
 8015db2:	f100 0308 	add.w	r3, r0, #8
 8015db6:	f104 0208 	add.w	r2, r4, #8
 8015dba:	6811      	ldr	r1, [r2, #0]
 8015dbc:	6019      	str	r1, [r3, #0]
 8015dbe:	6851      	ldr	r1, [r2, #4]
 8015dc0:	6059      	str	r1, [r3, #4]
 8015dc2:	6892      	ldr	r2, [r2, #8]
 8015dc4:	609a      	str	r2, [r3, #8]
 8015dc6:	4621      	mov	r1, r4
 8015dc8:	4650      	mov	r0, sl
 8015dca:	f002 f9b9 	bl	8018140 <_free_r>
 8015dce:	e76c      	b.n	8015caa <_realloc_r+0x186>
 8015dd0:	68a3      	ldr	r3, [r4, #8]
 8015dd2:	6083      	str	r3, [r0, #8]
 8015dd4:	68e3      	ldr	r3, [r4, #12]
 8015dd6:	60c3      	str	r3, [r0, #12]
 8015dd8:	2a24      	cmp	r2, #36	; 0x24
 8015dda:	bf01      	itttt	eq
 8015ddc:	6923      	ldreq	r3, [r4, #16]
 8015dde:	6103      	streq	r3, [r0, #16]
 8015de0:	6961      	ldreq	r1, [r4, #20]
 8015de2:	6141      	streq	r1, [r0, #20]
 8015de4:	bf19      	ittee	ne
 8015de6:	f100 0310 	addne.w	r3, r0, #16
 8015dea:	f104 0210 	addne.w	r2, r4, #16
 8015dee:	f100 0318 	addeq.w	r3, r0, #24
 8015df2:	f104 0218 	addeq.w	r2, r4, #24
 8015df6:	e7e0      	b.n	8015dba <_realloc_r+0x296>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	4622      	mov	r2, r4
 8015dfc:	e7dd      	b.n	8015dba <_realloc_r+0x296>
 8015dfe:	4621      	mov	r1, r4
 8015e00:	f7ff fe12 	bl	8015a28 <memmove>
 8015e04:	e7df      	b.n	8015dc6 <_realloc_r+0x2a2>
 8015e06:	4637      	mov	r7, r6
 8015e08:	e6ed      	b.n	8015be6 <_realloc_r+0xc2>
 8015e0a:	f003 0301 	and.w	r3, r3, #1
 8015e0e:	431f      	orrs	r7, r3
 8015e10:	f8c9 7004 	str.w	r7, [r9, #4]
 8015e14:	6853      	ldr	r3, [r2, #4]
 8015e16:	f043 0301 	orr.w	r3, r3, #1
 8015e1a:	6053      	str	r3, [r2, #4]
 8015e1c:	e6ff      	b.n	8015c1e <_realloc_r+0xfa>
 8015e1e:	bf00      	nop
 8015e20:	20000128 	.word	0x20000128

08015e24 <_sbrk_r>:
 8015e24:	b538      	push	{r3, r4, r5, lr}
 8015e26:	4c06      	ldr	r4, [pc, #24]	; (8015e40 <_sbrk_r+0x1c>)
 8015e28:	2300      	movs	r3, #0
 8015e2a:	4605      	mov	r5, r0
 8015e2c:	4608      	mov	r0, r1
 8015e2e:	6023      	str	r3, [r4, #0]
 8015e30:	f7f1 ff1a 	bl	8007c68 <_sbrk>
 8015e34:	1c43      	adds	r3, r0, #1
 8015e36:	d102      	bne.n	8015e3e <_sbrk_r+0x1a>
 8015e38:	6823      	ldr	r3, [r4, #0]
 8015e3a:	b103      	cbz	r3, 8015e3e <_sbrk_r+0x1a>
 8015e3c:	602b      	str	r3, [r5, #0]
 8015e3e:	bd38      	pop	{r3, r4, r5, pc}
 8015e40:	20007ea8 	.word	0x20007ea8

08015e44 <_raise_r>:
 8015e44:	291f      	cmp	r1, #31
 8015e46:	b538      	push	{r3, r4, r5, lr}
 8015e48:	4604      	mov	r4, r0
 8015e4a:	460d      	mov	r5, r1
 8015e4c:	d904      	bls.n	8015e58 <_raise_r+0x14>
 8015e4e:	2316      	movs	r3, #22
 8015e50:	6003      	str	r3, [r0, #0]
 8015e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e56:	bd38      	pop	{r3, r4, r5, pc}
 8015e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015e5a:	b112      	cbz	r2, 8015e62 <_raise_r+0x1e>
 8015e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015e60:	b94b      	cbnz	r3, 8015e76 <_raise_r+0x32>
 8015e62:	4620      	mov	r0, r4
 8015e64:	f000 f830 	bl	8015ec8 <_getpid_r>
 8015e68:	462a      	mov	r2, r5
 8015e6a:	4601      	mov	r1, r0
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e72:	f000 b817 	b.w	8015ea4 <_kill_r>
 8015e76:	2b01      	cmp	r3, #1
 8015e78:	d00a      	beq.n	8015e90 <_raise_r+0x4c>
 8015e7a:	1c59      	adds	r1, r3, #1
 8015e7c:	d103      	bne.n	8015e86 <_raise_r+0x42>
 8015e7e:	2316      	movs	r3, #22
 8015e80:	6003      	str	r3, [r0, #0]
 8015e82:	2001      	movs	r0, #1
 8015e84:	bd38      	pop	{r3, r4, r5, pc}
 8015e86:	2400      	movs	r4, #0
 8015e88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	4798      	blx	r3
 8015e90:	2000      	movs	r0, #0
 8015e92:	bd38      	pop	{r3, r4, r5, pc}

08015e94 <raise>:
 8015e94:	4b02      	ldr	r3, [pc, #8]	; (8015ea0 <raise+0xc>)
 8015e96:	4601      	mov	r1, r0
 8015e98:	6818      	ldr	r0, [r3, #0]
 8015e9a:	f7ff bfd3 	b.w	8015e44 <_raise_r>
 8015e9e:	bf00      	nop
 8015ea0:	20000034 	.word	0x20000034

08015ea4 <_kill_r>:
 8015ea4:	b538      	push	{r3, r4, r5, lr}
 8015ea6:	4c07      	ldr	r4, [pc, #28]	; (8015ec4 <_kill_r+0x20>)
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	4605      	mov	r5, r0
 8015eac:	4608      	mov	r0, r1
 8015eae:	4611      	mov	r1, r2
 8015eb0:	6023      	str	r3, [r4, #0]
 8015eb2:	f7f1 feae 	bl	8007c12 <_kill>
 8015eb6:	1c43      	adds	r3, r0, #1
 8015eb8:	d102      	bne.n	8015ec0 <_kill_r+0x1c>
 8015eba:	6823      	ldr	r3, [r4, #0]
 8015ebc:	b103      	cbz	r3, 8015ec0 <_kill_r+0x1c>
 8015ebe:	602b      	str	r3, [r5, #0]
 8015ec0:	bd38      	pop	{r3, r4, r5, pc}
 8015ec2:	bf00      	nop
 8015ec4:	20007ea8 	.word	0x20007ea8

08015ec8 <_getpid_r>:
 8015ec8:	f7f1 bea1 	b.w	8007c0e <_getpid>

08015ecc <sprintf>:
 8015ecc:	b40e      	push	{r1, r2, r3}
 8015ece:	b500      	push	{lr}
 8015ed0:	b09c      	sub	sp, #112	; 0x70
 8015ed2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8015ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8015ed8:	f8ad 1014 	strh.w	r1, [sp, #20]
 8015edc:	9002      	str	r0, [sp, #8]
 8015ede:	9006      	str	r0, [sp, #24]
 8015ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015ee4:	480a      	ldr	r0, [pc, #40]	; (8015f10 <sprintf+0x44>)
 8015ee6:	9104      	str	r1, [sp, #16]
 8015ee8:	9107      	str	r1, [sp, #28]
 8015eea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ef2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8015ef6:	6800      	ldr	r0, [r0, #0]
 8015ef8:	9301      	str	r3, [sp, #4]
 8015efa:	a902      	add	r1, sp, #8
 8015efc:	f000 f81c 	bl	8015f38 <_svfprintf_r>
 8015f00:	9b02      	ldr	r3, [sp, #8]
 8015f02:	2200      	movs	r2, #0
 8015f04:	701a      	strb	r2, [r3, #0]
 8015f06:	b01c      	add	sp, #112	; 0x70
 8015f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f0c:	b003      	add	sp, #12
 8015f0e:	4770      	bx	lr
 8015f10:	20000034 	.word	0x20000034

08015f14 <strncmp>:
 8015f14:	b510      	push	{r4, lr}
 8015f16:	b16a      	cbz	r2, 8015f34 <strncmp+0x20>
 8015f18:	3901      	subs	r1, #1
 8015f1a:	1884      	adds	r4, r0, r2
 8015f1c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015f20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015f24:	4293      	cmp	r3, r2
 8015f26:	d103      	bne.n	8015f30 <strncmp+0x1c>
 8015f28:	42a0      	cmp	r0, r4
 8015f2a:	d001      	beq.n	8015f30 <strncmp+0x1c>
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d1f5      	bne.n	8015f1c <strncmp+0x8>
 8015f30:	1a98      	subs	r0, r3, r2
 8015f32:	bd10      	pop	{r4, pc}
 8015f34:	4610      	mov	r0, r2
 8015f36:	bd10      	pop	{r4, pc}

08015f38 <_svfprintf_r>:
 8015f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f3c:	ed2d 8b04 	vpush	{d8-d9}
 8015f40:	b0b7      	sub	sp, #220	; 0xdc
 8015f42:	468b      	mov	fp, r1
 8015f44:	4615      	mov	r5, r2
 8015f46:	461e      	mov	r6, r3
 8015f48:	4682      	mov	sl, r0
 8015f4a:	f002 f9d3 	bl	80182f4 <_localeconv_r>
 8015f4e:	6803      	ldr	r3, [r0, #0]
 8015f50:	930a      	str	r3, [sp, #40]	; 0x28
 8015f52:	4618      	mov	r0, r3
 8015f54:	f7f0 fd26 	bl	80069a4 <strlen>
 8015f58:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8015f5c:	9006      	str	r0, [sp, #24]
 8015f5e:	0619      	lsls	r1, r3, #24
 8015f60:	d51a      	bpl.n	8015f98 <_svfprintf_r+0x60>
 8015f62:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015f66:	b9bb      	cbnz	r3, 8015f98 <_svfprintf_r+0x60>
 8015f68:	2140      	movs	r1, #64	; 0x40
 8015f6a:	4650      	mov	r0, sl
 8015f6c:	f7ff fb34 	bl	80155d8 <_malloc_r>
 8015f70:	f8cb 0000 	str.w	r0, [fp]
 8015f74:	f8cb 0010 	str.w	r0, [fp, #16]
 8015f78:	b958      	cbnz	r0, 8015f92 <_svfprintf_r+0x5a>
 8015f7a:	230c      	movs	r3, #12
 8015f7c:	f8ca 3000 	str.w	r3, [sl]
 8015f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f84:	9307      	str	r3, [sp, #28]
 8015f86:	9807      	ldr	r0, [sp, #28]
 8015f88:	b037      	add	sp, #220	; 0xdc
 8015f8a:	ecbd 8b04 	vpop	{d8-d9}
 8015f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f92:	2340      	movs	r3, #64	; 0x40
 8015f94:	f8cb 3014 	str.w	r3, [fp, #20]
 8015f98:	ed9f 8b99 	vldr	d8, [pc, #612]	; 8016200 <_svfprintf_r+0x2c8>
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	ac26      	add	r4, sp, #152	; 0x98
 8015fa0:	9419      	str	r4, [sp, #100]	; 0x64
 8015fa2:	931b      	str	r3, [sp, #108]	; 0x6c
 8015fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8015fa6:	9505      	str	r5, [sp, #20]
 8015fa8:	9303      	str	r3, [sp, #12]
 8015faa:	930c      	str	r3, [sp, #48]	; 0x30
 8015fac:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fae:	9307      	str	r3, [sp, #28]
 8015fb0:	9f05      	ldr	r7, [sp, #20]
 8015fb2:	463d      	mov	r5, r7
 8015fb4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015fb8:	b113      	cbz	r3, 8015fc0 <_svfprintf_r+0x88>
 8015fba:	2b25      	cmp	r3, #37	; 0x25
 8015fbc:	f040 8086 	bne.w	80160cc <_svfprintf_r+0x194>
 8015fc0:	9b05      	ldr	r3, [sp, #20]
 8015fc2:	ebb7 0803 	subs.w	r8, r7, r3
 8015fc6:	d00d      	beq.n	8015fe4 <_svfprintf_r+0xac>
 8015fc8:	e884 0108 	stmia.w	r4, {r3, r8}
 8015fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fce:	4443      	add	r3, r8
 8015fd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8015fd2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015fd4:	3301      	adds	r3, #1
 8015fd6:	2b07      	cmp	r3, #7
 8015fd8:	931a      	str	r3, [sp, #104]	; 0x68
 8015fda:	dc79      	bgt.n	80160d0 <_svfprintf_r+0x198>
 8015fdc:	3408      	adds	r4, #8
 8015fde:	9b07      	ldr	r3, [sp, #28]
 8015fe0:	4443      	add	r3, r8
 8015fe2:	9307      	str	r3, [sp, #28]
 8015fe4:	783b      	ldrb	r3, [r7, #0]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	f000 8711 	beq.w	8016e0e <_svfprintf_r+0xed6>
 8015fec:	f04f 0300 	mov.w	r3, #0
 8015ff0:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	4629      	mov	r1, r5
 8015ff8:	461a      	mov	r2, r3
 8015ffa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8015ffe:	9308      	str	r3, [sp, #32]
 8016000:	461d      	mov	r5, r3
 8016002:	200a      	movs	r0, #10
 8016004:	1c4f      	adds	r7, r1, #1
 8016006:	7809      	ldrb	r1, [r1, #0]
 8016008:	9705      	str	r7, [sp, #20]
 801600a:	9102      	str	r1, [sp, #8]
 801600c:	9902      	ldr	r1, [sp, #8]
 801600e:	3920      	subs	r1, #32
 8016010:	2958      	cmp	r1, #88	; 0x58
 8016012:	f200 83fa 	bhi.w	801680a <_svfprintf_r+0x8d2>
 8016016:	e8df f011 	tbh	[pc, r1, lsl #1]
 801601a:	00a6      	.short	0x00a6
 801601c:	03f803f8 	.word	0x03f803f8
 8016020:	03f800ab 	.word	0x03f800ab
 8016024:	03f803f8 	.word	0x03f803f8
 8016028:	03f803f8 	.word	0x03f803f8
 801602c:	00ae03f8 	.word	0x00ae03f8
 8016030:	03f80065 	.word	0x03f80065
 8016034:	00b900b6 	.word	0x00b900b6
 8016038:	00d603f8 	.word	0x00d603f8
 801603c:	00d900d9 	.word	0x00d900d9
 8016040:	00d900d9 	.word	0x00d900d9
 8016044:	00d900d9 	.word	0x00d900d9
 8016048:	00d900d9 	.word	0x00d900d9
 801604c:	03f800d9 	.word	0x03f800d9
 8016050:	03f803f8 	.word	0x03f803f8
 8016054:	03f803f8 	.word	0x03f803f8
 8016058:	03f803f8 	.word	0x03f803f8
 801605c:	03f803f8 	.word	0x03f803f8
 8016060:	011603f8 	.word	0x011603f8
 8016064:	03f8012c 	.word	0x03f8012c
 8016068:	03f8012c 	.word	0x03f8012c
 801606c:	03f803f8 	.word	0x03f803f8
 8016070:	00ec03f8 	.word	0x00ec03f8
 8016074:	03f803f8 	.word	0x03f803f8
 8016078:	03f80320 	.word	0x03f80320
 801607c:	03f803f8 	.word	0x03f803f8
 8016080:	03f803f8 	.word	0x03f803f8
 8016084:	03f8038a 	.word	0x03f8038a
 8016088:	008603f8 	.word	0x008603f8
 801608c:	03f803f8 	.word	0x03f803f8
 8016090:	03f803f8 	.word	0x03f803f8
 8016094:	03f803f8 	.word	0x03f803f8
 8016098:	03f803f8 	.word	0x03f803f8
 801609c:	03f803f8 	.word	0x03f803f8
 80160a0:	006b0106 	.word	0x006b0106
 80160a4:	012c012c 	.word	0x012c012c
 80160a8:	00ef012c 	.word	0x00ef012c
 80160ac:	03f8006b 	.word	0x03f8006b
 80160b0:	00f903f8 	.word	0x00f903f8
 80160b4:	030203f8 	.word	0x030203f8
 80160b8:	03570322 	.word	0x03570322
 80160bc:	03f80100 	.word	0x03f80100
 80160c0:	03f80368 	.word	0x03f80368
 80160c4:	03f8038c 	.word	0x03f8038c
 80160c8:	03a403f8 	.word	0x03a403f8
 80160cc:	462f      	mov	r7, r5
 80160ce:	e770      	b.n	8015fb2 <_svfprintf_r+0x7a>
 80160d0:	aa19      	add	r2, sp, #100	; 0x64
 80160d2:	4659      	mov	r1, fp
 80160d4:	4650      	mov	r0, sl
 80160d6:	f002 fc9a 	bl	8018a0e <__ssprint_r>
 80160da:	2800      	cmp	r0, #0
 80160dc:	f040 8678 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 80160e0:	ac26      	add	r4, sp, #152	; 0x98
 80160e2:	e77c      	b.n	8015fde <_svfprintf_r+0xa6>
 80160e4:	2301      	movs	r3, #1
 80160e6:	222b      	movs	r2, #43	; 0x2b
 80160e8:	9905      	ldr	r1, [sp, #20]
 80160ea:	e78b      	b.n	8016004 <_svfprintf_r+0xcc>
 80160ec:	460e      	mov	r6, r1
 80160ee:	e7fb      	b.n	80160e8 <_svfprintf_r+0x1b0>
 80160f0:	b10b      	cbz	r3, 80160f6 <_svfprintf_r+0x1be>
 80160f2:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 80160f6:	06aa      	lsls	r2, r5, #26
 80160f8:	f140 80ab 	bpl.w	8016252 <_svfprintf_r+0x31a>
 80160fc:	3607      	adds	r6, #7
 80160fe:	f026 0607 	bic.w	r6, r6, #7
 8016102:	f106 0308 	add.w	r3, r6, #8
 8016106:	e9d6 6700 	ldrd	r6, r7, [r6]
 801610a:	9304      	str	r3, [sp, #16]
 801610c:	2e00      	cmp	r6, #0
 801610e:	f177 0300 	sbcs.w	r3, r7, #0
 8016112:	da06      	bge.n	8016122 <_svfprintf_r+0x1ea>
 8016114:	4276      	negs	r6, r6
 8016116:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801611a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801611e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 8016122:	2301      	movs	r3, #1
 8016124:	e2ab      	b.n	801667e <_svfprintf_r+0x746>
 8016126:	b10b      	cbz	r3, 801612c <_svfprintf_r+0x1f4>
 8016128:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 801612c:	4b36      	ldr	r3, [pc, #216]	; (8016208 <_svfprintf_r+0x2d0>)
 801612e:	930c      	str	r3, [sp, #48]	; 0x30
 8016130:	06ab      	lsls	r3, r5, #26
 8016132:	f140 831b 	bpl.w	801676c <_svfprintf_r+0x834>
 8016136:	3607      	adds	r6, #7
 8016138:	f026 0607 	bic.w	r6, r6, #7
 801613c:	f106 0308 	add.w	r3, r6, #8
 8016140:	e9d6 6700 	ldrd	r6, r7, [r6]
 8016144:	9304      	str	r3, [sp, #16]
 8016146:	07e8      	lsls	r0, r5, #31
 8016148:	d50b      	bpl.n	8016162 <_svfprintf_r+0x22a>
 801614a:	ea56 0307 	orrs.w	r3, r6, r7
 801614e:	d008      	beq.n	8016162 <_svfprintf_r+0x22a>
 8016150:	2330      	movs	r3, #48	; 0x30
 8016152:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8016156:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801615a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 801615e:	f045 0502 	orr.w	r5, r5, #2
 8016162:	2302      	movs	r3, #2
 8016164:	e287      	b.n	8016676 <_svfprintf_r+0x73e>
 8016166:	2a00      	cmp	r2, #0
 8016168:	d1be      	bne.n	80160e8 <_svfprintf_r+0x1b0>
 801616a:	2301      	movs	r3, #1
 801616c:	2220      	movs	r2, #32
 801616e:	e7bb      	b.n	80160e8 <_svfprintf_r+0x1b0>
 8016170:	f045 0501 	orr.w	r5, r5, #1
 8016174:	e7b8      	b.n	80160e8 <_svfprintf_r+0x1b0>
 8016176:	1d31      	adds	r1, r6, #4
 8016178:	6836      	ldr	r6, [r6, #0]
 801617a:	9608      	str	r6, [sp, #32]
 801617c:	2e00      	cmp	r6, #0
 801617e:	dab5      	bge.n	80160ec <_svfprintf_r+0x1b4>
 8016180:	4276      	negs	r6, r6
 8016182:	9608      	str	r6, [sp, #32]
 8016184:	460e      	mov	r6, r1
 8016186:	f045 0504 	orr.w	r5, r5, #4
 801618a:	e7ad      	b.n	80160e8 <_svfprintf_r+0x1b0>
 801618c:	9905      	ldr	r1, [sp, #20]
 801618e:	1c4f      	adds	r7, r1, #1
 8016190:	7809      	ldrb	r1, [r1, #0]
 8016192:	9102      	str	r1, [sp, #8]
 8016194:	292a      	cmp	r1, #42	; 0x2a
 8016196:	d010      	beq.n	80161ba <_svfprintf_r+0x282>
 8016198:	f04f 0900 	mov.w	r9, #0
 801619c:	9705      	str	r7, [sp, #20]
 801619e:	9902      	ldr	r1, [sp, #8]
 80161a0:	3930      	subs	r1, #48	; 0x30
 80161a2:	2909      	cmp	r1, #9
 80161a4:	f63f af32 	bhi.w	801600c <_svfprintf_r+0xd4>
 80161a8:	fb00 1909 	mla	r9, r0, r9, r1
 80161ac:	9905      	ldr	r1, [sp, #20]
 80161ae:	460f      	mov	r7, r1
 80161b0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80161b4:	9102      	str	r1, [sp, #8]
 80161b6:	9705      	str	r7, [sp, #20]
 80161b8:	e7f1      	b.n	801619e <_svfprintf_r+0x266>
 80161ba:	6831      	ldr	r1, [r6, #0]
 80161bc:	9705      	str	r7, [sp, #20]
 80161be:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 80161c2:	3604      	adds	r6, #4
 80161c4:	e790      	b.n	80160e8 <_svfprintf_r+0x1b0>
 80161c6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80161ca:	e78d      	b.n	80160e8 <_svfprintf_r+0x1b0>
 80161cc:	2100      	movs	r1, #0
 80161ce:	9108      	str	r1, [sp, #32]
 80161d0:	9902      	ldr	r1, [sp, #8]
 80161d2:	9f08      	ldr	r7, [sp, #32]
 80161d4:	3930      	subs	r1, #48	; 0x30
 80161d6:	fb00 1107 	mla	r1, r0, r7, r1
 80161da:	9108      	str	r1, [sp, #32]
 80161dc:	9905      	ldr	r1, [sp, #20]
 80161de:	460f      	mov	r7, r1
 80161e0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80161e4:	9102      	str	r1, [sp, #8]
 80161e6:	9902      	ldr	r1, [sp, #8]
 80161e8:	9705      	str	r7, [sp, #20]
 80161ea:	3930      	subs	r1, #48	; 0x30
 80161ec:	2909      	cmp	r1, #9
 80161ee:	d9ef      	bls.n	80161d0 <_svfprintf_r+0x298>
 80161f0:	e70c      	b.n	801600c <_svfprintf_r+0xd4>
 80161f2:	f045 0508 	orr.w	r5, r5, #8
 80161f6:	e777      	b.n	80160e8 <_svfprintf_r+0x1b0>
 80161f8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80161fc:	e774      	b.n	80160e8 <_svfprintf_r+0x1b0>
 80161fe:	bf00      	nop
	...
 8016208:	0801ad50 	.word	0x0801ad50
 801620c:	9905      	ldr	r1, [sp, #20]
 801620e:	7809      	ldrb	r1, [r1, #0]
 8016210:	296c      	cmp	r1, #108	; 0x6c
 8016212:	d105      	bne.n	8016220 <_svfprintf_r+0x2e8>
 8016214:	9905      	ldr	r1, [sp, #20]
 8016216:	3101      	adds	r1, #1
 8016218:	9105      	str	r1, [sp, #20]
 801621a:	f045 0520 	orr.w	r5, r5, #32
 801621e:	e763      	b.n	80160e8 <_svfprintf_r+0x1b0>
 8016220:	f045 0510 	orr.w	r5, r5, #16
 8016224:	e760      	b.n	80160e8 <_svfprintf_r+0x1b0>
 8016226:	1d33      	adds	r3, r6, #4
 8016228:	9304      	str	r3, [sp, #16]
 801622a:	6833      	ldr	r3, [r6, #0]
 801622c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8016230:	f04f 0300 	mov.w	r3, #0
 8016234:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 8016238:	2600      	movs	r6, #0
 801623a:	f04f 0901 	mov.w	r9, #1
 801623e:	4637      	mov	r7, r6
 8016240:	f10d 0870 	add.w	r8, sp, #112	; 0x70
 8016244:	e0f3      	b.n	801642e <_svfprintf_r+0x4f6>
 8016246:	b10b      	cbz	r3, 801624c <_svfprintf_r+0x314>
 8016248:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 801624c:	f045 0510 	orr.w	r5, r5, #16
 8016250:	e751      	b.n	80160f6 <_svfprintf_r+0x1be>
 8016252:	f015 0f10 	tst.w	r5, #16
 8016256:	f106 0304 	add.w	r3, r6, #4
 801625a:	d003      	beq.n	8016264 <_svfprintf_r+0x32c>
 801625c:	6836      	ldr	r6, [r6, #0]
 801625e:	9304      	str	r3, [sp, #16]
 8016260:	17f7      	asrs	r7, r6, #31
 8016262:	e753      	b.n	801610c <_svfprintf_r+0x1d4>
 8016264:	6836      	ldr	r6, [r6, #0]
 8016266:	9304      	str	r3, [sp, #16]
 8016268:	f015 0f40 	tst.w	r5, #64	; 0x40
 801626c:	bf18      	it	ne
 801626e:	b236      	sxthne	r6, r6
 8016270:	e7f6      	b.n	8016260 <_svfprintf_r+0x328>
 8016272:	b10b      	cbz	r3, 8016278 <_svfprintf_r+0x340>
 8016274:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8016278:	3607      	adds	r6, #7
 801627a:	f026 0607 	bic.w	r6, r6, #7
 801627e:	f106 0308 	add.w	r3, r6, #8
 8016282:	9304      	str	r3, [sp, #16]
 8016284:	ed96 8b00 	vldr	d8, [r6]
 8016288:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8016320 <_svfprintf_r+0x3e8>
 801628c:	eeb0 7bc8 	vabs.f64	d7, d8
 8016290:	eeb4 7b46 	vcmp.f64	d7, d6
 8016294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016298:	f340 85c2 	ble.w	8016e20 <_svfprintf_r+0xee8>
 801629c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80162a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162a4:	d502      	bpl.n	80162ac <_svfprintf_r+0x374>
 80162a6:	232d      	movs	r3, #45	; 0x2d
 80162a8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 80162ac:	4b1e      	ldr	r3, [pc, #120]	; (8016328 <_svfprintf_r+0x3f0>)
 80162ae:	4a1f      	ldr	r2, [pc, #124]	; (801632c <_svfprintf_r+0x3f4>)
 80162b0:	9902      	ldr	r1, [sp, #8]
 80162b2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80162b6:	2947      	cmp	r1, #71	; 0x47
 80162b8:	bfcc      	ite	gt
 80162ba:	4690      	movgt	r8, r2
 80162bc:	4698      	movle	r8, r3
 80162be:	f04f 0903 	mov.w	r9, #3
 80162c2:	2600      	movs	r6, #0
 80162c4:	4637      	mov	r7, r6
 80162c6:	e0b2      	b.n	801642e <_svfprintf_r+0x4f6>
 80162c8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80162cc:	d020      	beq.n	8016310 <_svfprintf_r+0x3d8>
 80162ce:	9b02      	ldr	r3, [sp, #8]
 80162d0:	f023 0320 	bic.w	r3, r3, #32
 80162d4:	2b47      	cmp	r3, #71	; 0x47
 80162d6:	d104      	bne.n	80162e2 <_svfprintf_r+0x3aa>
 80162d8:	f1b9 0f00 	cmp.w	r9, #0
 80162dc:	bf08      	it	eq
 80162de:	f04f 0901 	moveq.w	r9, #1
 80162e2:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80162e6:	930d      	str	r3, [sp, #52]	; 0x34
 80162e8:	ee18 3a90 	vmov	r3, s17
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	da12      	bge.n	8016316 <_svfprintf_r+0x3de>
 80162f0:	eeb1 9b48 	vneg.f64	d9, d8
 80162f4:	232d      	movs	r3, #45	; 0x2d
 80162f6:	9309      	str	r3, [sp, #36]	; 0x24
 80162f8:	9b02      	ldr	r3, [sp, #8]
 80162fa:	f023 0720 	bic.w	r7, r3, #32
 80162fe:	2f46      	cmp	r7, #70	; 0x46
 8016300:	d016      	beq.n	8016330 <_svfprintf_r+0x3f8>
 8016302:	2f45      	cmp	r7, #69	; 0x45
 8016304:	f040 813d 	bne.w	8016582 <_svfprintf_r+0x64a>
 8016308:	f109 0601 	add.w	r6, r9, #1
 801630c:	2102      	movs	r1, #2
 801630e:	e011      	b.n	8016334 <_svfprintf_r+0x3fc>
 8016310:	f04f 0906 	mov.w	r9, #6
 8016314:	e7e5      	b.n	80162e2 <_svfprintf_r+0x3aa>
 8016316:	eeb0 9b48 	vmov.f64	d9, d8
 801631a:	2300      	movs	r3, #0
 801631c:	e7eb      	b.n	80162f6 <_svfprintf_r+0x3be>
 801631e:	bf00      	nop
 8016320:	ffffffff 	.word	0xffffffff
 8016324:	7fefffff 	.word	0x7fefffff
 8016328:	0801ad40 	.word	0x0801ad40
 801632c:	0801ad44 	.word	0x0801ad44
 8016330:	464e      	mov	r6, r9
 8016332:	2103      	movs	r1, #3
 8016334:	ab17      	add	r3, sp, #92	; 0x5c
 8016336:	9301      	str	r3, [sp, #4]
 8016338:	ab14      	add	r3, sp, #80	; 0x50
 801633a:	9300      	str	r3, [sp, #0]
 801633c:	4632      	mov	r2, r6
 801633e:	ab13      	add	r3, sp, #76	; 0x4c
 8016340:	eeb0 0b49 	vmov.f64	d0, d9
 8016344:	4650      	mov	r0, sl
 8016346:	f000 ff93 	bl	8017270 <_dtoa_r>
 801634a:	2f47      	cmp	r7, #71	; 0x47
 801634c:	4680      	mov	r8, r0
 801634e:	d102      	bne.n	8016356 <_svfprintf_r+0x41e>
 8016350:	07eb      	lsls	r3, r5, #31
 8016352:	f140 856f 	bpl.w	8016e34 <_svfprintf_r+0xefc>
 8016356:	2f46      	cmp	r7, #70	; 0x46
 8016358:	eb08 0306 	add.w	r3, r8, r6
 801635c:	d10d      	bne.n	801637a <_svfprintf_r+0x442>
 801635e:	f898 2000 	ldrb.w	r2, [r8]
 8016362:	2a30      	cmp	r2, #48	; 0x30
 8016364:	d107      	bne.n	8016376 <_svfprintf_r+0x43e>
 8016366:	eeb5 9b40 	vcmp.f64	d9, #0.0
 801636a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801636e:	bf1c      	itt	ne
 8016370:	f1c6 0601 	rsbne	r6, r6, #1
 8016374:	9613      	strne	r6, [sp, #76]	; 0x4c
 8016376:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016378:	4413      	add	r3, r2
 801637a:	eeb5 9b40 	vcmp.f64	d9, #0.0
 801637e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016382:	f040 8107 	bne.w	8016594 <_svfprintf_r+0x65c>
 8016386:	9317      	str	r3, [sp, #92]	; 0x5c
 8016388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801638a:	2f47      	cmp	r7, #71	; 0x47
 801638c:	eba3 0308 	sub.w	r3, r3, r8
 8016390:	9303      	str	r3, [sp, #12]
 8016392:	f040 8101 	bne.w	8016598 <_svfprintf_r+0x660>
 8016396:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016398:	1cd8      	adds	r0, r3, #3
 801639a:	db02      	blt.n	80163a2 <_svfprintf_r+0x46a>
 801639c:	4599      	cmp	r9, r3
 801639e:	f280 8127 	bge.w	80165f0 <_svfprintf_r+0x6b8>
 80163a2:	9b02      	ldr	r3, [sp, #8]
 80163a4:	3b02      	subs	r3, #2
 80163a6:	9302      	str	r3, [sp, #8]
 80163a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80163aa:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80163ae:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
 80163b2:	1e53      	subs	r3, r2, #1
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80163b8:	bfb6      	itet	lt
 80163ba:	f1c2 0301 	rsblt	r3, r2, #1
 80163be:	222b      	movge	r2, #43	; 0x2b
 80163c0:	222d      	movlt	r2, #45	; 0x2d
 80163c2:	2b09      	cmp	r3, #9
 80163c4:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
 80163c8:	f340 8102 	ble.w	80165d0 <_svfprintf_r+0x698>
 80163cc:	f10d 0263 	add.w	r2, sp, #99	; 0x63
 80163d0:	260a      	movs	r6, #10
 80163d2:	fb93 f0f6 	sdiv	r0, r3, r6
 80163d6:	fb06 3310 	mls	r3, r6, r0, r3
 80163da:	3330      	adds	r3, #48	; 0x30
 80163dc:	2809      	cmp	r0, #9
 80163de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80163e2:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 80163e6:	4603      	mov	r3, r0
 80163e8:	f300 80eb 	bgt.w	80165c2 <_svfprintf_r+0x68a>
 80163ec:	3330      	adds	r3, #48	; 0x30
 80163ee:	f801 3c01 	strb.w	r3, [r1, #-1]
 80163f2:	3a02      	subs	r2, #2
 80163f4:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 80163f8:	f10d 0063 	add.w	r0, sp, #99	; 0x63
 80163fc:	4282      	cmp	r2, r0
 80163fe:	4619      	mov	r1, r3
 8016400:	f0c0 80e1 	bcc.w	80165c6 <_svfprintf_r+0x68e>
 8016404:	9a03      	ldr	r2, [sp, #12]
 8016406:	ab15      	add	r3, sp, #84	; 0x54
 8016408:	1acb      	subs	r3, r1, r3
 801640a:	2a01      	cmp	r2, #1
 801640c:	930b      	str	r3, [sp, #44]	; 0x2c
 801640e:	eb03 0902 	add.w	r9, r3, r2
 8016412:	dc02      	bgt.n	801641a <_svfprintf_r+0x4e2>
 8016414:	f015 0701 	ands.w	r7, r5, #1
 8016418:	d002      	beq.n	8016420 <_svfprintf_r+0x4e8>
 801641a:	9b06      	ldr	r3, [sp, #24]
 801641c:	2700      	movs	r7, #0
 801641e:	4499      	add	r9, r3
 8016420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016422:	b113      	cbz	r3, 801642a <_svfprintf_r+0x4f2>
 8016424:	232d      	movs	r3, #45	; 0x2d
 8016426:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 801642a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801642c:	2600      	movs	r6, #0
 801642e:	454e      	cmp	r6, r9
 8016430:	4633      	mov	r3, r6
 8016432:	bfb8      	it	lt
 8016434:	464b      	movlt	r3, r9
 8016436:	9309      	str	r3, [sp, #36]	; 0x24
 8016438:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 801643c:	b113      	cbz	r3, 8016444 <_svfprintf_r+0x50c>
 801643e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016440:	3301      	adds	r3, #1
 8016442:	9309      	str	r3, [sp, #36]	; 0x24
 8016444:	f015 0302 	ands.w	r3, r5, #2
 8016448:	930d      	str	r3, [sp, #52]	; 0x34
 801644a:	bf1e      	ittt	ne
 801644c:	9b09      	ldrne	r3, [sp, #36]	; 0x24
 801644e:	3302      	addne	r3, #2
 8016450:	9309      	strne	r3, [sp, #36]	; 0x24
 8016452:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8016456:	930e      	str	r3, [sp, #56]	; 0x38
 8016458:	d114      	bne.n	8016484 <_svfprintf_r+0x54c>
 801645a:	9b08      	ldr	r3, [sp, #32]
 801645c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801645e:	1a9b      	subs	r3, r3, r2
 8016460:	2b00      	cmp	r3, #0
 8016462:	dd0f      	ble.n	8016484 <_svfprintf_r+0x54c>
 8016464:	4aac      	ldr	r2, [pc, #688]	; (8016718 <_svfprintf_r+0x7e0>)
 8016466:	6022      	str	r2, [r4, #0]
 8016468:	2b10      	cmp	r3, #16
 801646a:	f300 81e1 	bgt.w	8016830 <_svfprintf_r+0x8f8>
 801646e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016470:	6063      	str	r3, [r4, #4]
 8016472:	4413      	add	r3, r2
 8016474:	931b      	str	r3, [sp, #108]	; 0x6c
 8016476:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016478:	3301      	adds	r3, #1
 801647a:	2b07      	cmp	r3, #7
 801647c:	931a      	str	r3, [sp, #104]	; 0x68
 801647e:	f300 81f0 	bgt.w	8016862 <_svfprintf_r+0x92a>
 8016482:	3408      	adds	r4, #8
 8016484:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8016488:	b173      	cbz	r3, 80164a8 <_svfprintf_r+0x570>
 801648a:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 801648e:	6023      	str	r3, [r4, #0]
 8016490:	2301      	movs	r3, #1
 8016492:	6063      	str	r3, [r4, #4]
 8016494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016496:	3301      	adds	r3, #1
 8016498:	931b      	str	r3, [sp, #108]	; 0x6c
 801649a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801649c:	3301      	adds	r3, #1
 801649e:	2b07      	cmp	r3, #7
 80164a0:	931a      	str	r3, [sp, #104]	; 0x68
 80164a2:	f300 81e8 	bgt.w	8016876 <_svfprintf_r+0x93e>
 80164a6:	3408      	adds	r4, #8
 80164a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164aa:	b16b      	cbz	r3, 80164c8 <_svfprintf_r+0x590>
 80164ac:	ab12      	add	r3, sp, #72	; 0x48
 80164ae:	6023      	str	r3, [r4, #0]
 80164b0:	2302      	movs	r3, #2
 80164b2:	6063      	str	r3, [r4, #4]
 80164b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164b6:	3302      	adds	r3, #2
 80164b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80164ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80164bc:	3301      	adds	r3, #1
 80164be:	2b07      	cmp	r3, #7
 80164c0:	931a      	str	r3, [sp, #104]	; 0x68
 80164c2:	f300 81e2 	bgt.w	801688a <_svfprintf_r+0x952>
 80164c6:	3408      	adds	r4, #8
 80164c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164ca:	2b80      	cmp	r3, #128	; 0x80
 80164cc:	d114      	bne.n	80164f8 <_svfprintf_r+0x5c0>
 80164ce:	9b08      	ldr	r3, [sp, #32]
 80164d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164d2:	1a9b      	subs	r3, r3, r2
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	dd0f      	ble.n	80164f8 <_svfprintf_r+0x5c0>
 80164d8:	4a90      	ldr	r2, [pc, #576]	; (801671c <_svfprintf_r+0x7e4>)
 80164da:	6022      	str	r2, [r4, #0]
 80164dc:	2b10      	cmp	r3, #16
 80164de:	f300 81de 	bgt.w	801689e <_svfprintf_r+0x966>
 80164e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80164e4:	6063      	str	r3, [r4, #4]
 80164e6:	4413      	add	r3, r2
 80164e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80164ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80164ec:	3301      	adds	r3, #1
 80164ee:	2b07      	cmp	r3, #7
 80164f0:	931a      	str	r3, [sp, #104]	; 0x68
 80164f2:	f300 81ed 	bgt.w	80168d0 <_svfprintf_r+0x998>
 80164f6:	3408      	adds	r4, #8
 80164f8:	eba6 0609 	sub.w	r6, r6, r9
 80164fc:	2e00      	cmp	r6, #0
 80164fe:	dd0f      	ble.n	8016520 <_svfprintf_r+0x5e8>
 8016500:	4b86      	ldr	r3, [pc, #536]	; (801671c <_svfprintf_r+0x7e4>)
 8016502:	6023      	str	r3, [r4, #0]
 8016504:	2e10      	cmp	r6, #16
 8016506:	f300 81ed 	bgt.w	80168e4 <_svfprintf_r+0x9ac>
 801650a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801650c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801650e:	6066      	str	r6, [r4, #4]
 8016510:	3301      	adds	r3, #1
 8016512:	4406      	add	r6, r0
 8016514:	2b07      	cmp	r3, #7
 8016516:	961b      	str	r6, [sp, #108]	; 0x6c
 8016518:	931a      	str	r3, [sp, #104]	; 0x68
 801651a:	f300 81fa 	bgt.w	8016912 <_svfprintf_r+0x9da>
 801651e:	3408      	adds	r4, #8
 8016520:	05eb      	lsls	r3, r5, #23
 8016522:	f100 8200 	bmi.w	8016926 <_svfprintf_r+0x9ee>
 8016526:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016528:	e884 0300 	stmia.w	r4, {r8, r9}
 801652c:	444b      	add	r3, r9
 801652e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016530:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016532:	3301      	adds	r3, #1
 8016534:	2b07      	cmp	r3, #7
 8016536:	931a      	str	r3, [sp, #104]	; 0x68
 8016538:	f340 842a 	ble.w	8016d90 <_svfprintf_r+0xe58>
 801653c:	aa19      	add	r2, sp, #100	; 0x64
 801653e:	4659      	mov	r1, fp
 8016540:	4650      	mov	r0, sl
 8016542:	f002 fa64 	bl	8018a0e <__ssprint_r>
 8016546:	2800      	cmp	r0, #0
 8016548:	f040 8442 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 801654c:	ac26      	add	r4, sp, #152	; 0x98
 801654e:	076b      	lsls	r3, r5, #29
 8016550:	f100 8421 	bmi.w	8016d96 <_svfprintf_r+0xe5e>
 8016554:	9b07      	ldr	r3, [sp, #28]
 8016556:	9a08      	ldr	r2, [sp, #32]
 8016558:	9909      	ldr	r1, [sp, #36]	; 0x24
 801655a:	428a      	cmp	r2, r1
 801655c:	bfac      	ite	ge
 801655e:	189b      	addge	r3, r3, r2
 8016560:	185b      	addlt	r3, r3, r1
 8016562:	9307      	str	r3, [sp, #28]
 8016564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016566:	b13b      	cbz	r3, 8016578 <_svfprintf_r+0x640>
 8016568:	aa19      	add	r2, sp, #100	; 0x64
 801656a:	4659      	mov	r1, fp
 801656c:	4650      	mov	r0, sl
 801656e:	f002 fa4e 	bl	8018a0e <__ssprint_r>
 8016572:	2800      	cmp	r0, #0
 8016574:	f040 842c 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016578:	2300      	movs	r3, #0
 801657a:	931a      	str	r3, [sp, #104]	; 0x68
 801657c:	9e04      	ldr	r6, [sp, #16]
 801657e:	ac26      	add	r4, sp, #152	; 0x98
 8016580:	e516      	b.n	8015fb0 <_svfprintf_r+0x78>
 8016582:	464e      	mov	r6, r9
 8016584:	e6c2      	b.n	801630c <_svfprintf_r+0x3d4>
 8016586:	1c50      	adds	r0, r2, #1
 8016588:	9017      	str	r0, [sp, #92]	; 0x5c
 801658a:	7011      	strb	r1, [r2, #0]
 801658c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801658e:	4293      	cmp	r3, r2
 8016590:	d8f9      	bhi.n	8016586 <_svfprintf_r+0x64e>
 8016592:	e6f9      	b.n	8016388 <_svfprintf_r+0x450>
 8016594:	2130      	movs	r1, #48	; 0x30
 8016596:	e7f9      	b.n	801658c <_svfprintf_r+0x654>
 8016598:	9b02      	ldr	r3, [sp, #8]
 801659a:	2b65      	cmp	r3, #101	; 0x65
 801659c:	f77f af04 	ble.w	80163a8 <_svfprintf_r+0x470>
 80165a0:	9b02      	ldr	r3, [sp, #8]
 80165a2:	2b66      	cmp	r3, #102	; 0x66
 80165a4:	d124      	bne.n	80165f0 <_svfprintf_r+0x6b8>
 80165a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	dd19      	ble.n	80165e0 <_svfprintf_r+0x6a8>
 80165ac:	f1b9 0f00 	cmp.w	r9, #0
 80165b0:	d101      	bne.n	80165b6 <_svfprintf_r+0x67e>
 80165b2:	07e9      	lsls	r1, r5, #31
 80165b4:	d502      	bpl.n	80165bc <_svfprintf_r+0x684>
 80165b6:	9a06      	ldr	r2, [sp, #24]
 80165b8:	4413      	add	r3, r2
 80165ba:	444b      	add	r3, r9
 80165bc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80165be:	4699      	mov	r9, r3
 80165c0:	e72e      	b.n	8016420 <_svfprintf_r+0x4e8>
 80165c2:	460a      	mov	r2, r1
 80165c4:	e705      	b.n	80163d2 <_svfprintf_r+0x49a>
 80165c6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80165ca:	f803 1b01 	strb.w	r1, [r3], #1
 80165ce:	e715      	b.n	80163fc <_svfprintf_r+0x4c4>
 80165d0:	2230      	movs	r2, #48	; 0x30
 80165d2:	4413      	add	r3, r2
 80165d4:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
 80165d8:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 80165dc:	a916      	add	r1, sp, #88	; 0x58
 80165de:	e711      	b.n	8016404 <_svfprintf_r+0x4cc>
 80165e0:	f1b9 0f00 	cmp.w	r9, #0
 80165e4:	d101      	bne.n	80165ea <_svfprintf_r+0x6b2>
 80165e6:	07ea      	lsls	r2, r5, #31
 80165e8:	d515      	bpl.n	8016616 <_svfprintf_r+0x6de>
 80165ea:	9b06      	ldr	r3, [sp, #24]
 80165ec:	3301      	adds	r3, #1
 80165ee:	e7e4      	b.n	80165ba <_svfprintf_r+0x682>
 80165f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80165f2:	9b03      	ldr	r3, [sp, #12]
 80165f4:	429a      	cmp	r2, r3
 80165f6:	db06      	blt.n	8016606 <_svfprintf_r+0x6ce>
 80165f8:	07eb      	lsls	r3, r5, #31
 80165fa:	d50e      	bpl.n	801661a <_svfprintf_r+0x6e2>
 80165fc:	9b06      	ldr	r3, [sp, #24]
 80165fe:	4413      	add	r3, r2
 8016600:	2267      	movs	r2, #103	; 0x67
 8016602:	9202      	str	r2, [sp, #8]
 8016604:	e7da      	b.n	80165bc <_svfprintf_r+0x684>
 8016606:	9b03      	ldr	r3, [sp, #12]
 8016608:	9906      	ldr	r1, [sp, #24]
 801660a:	2a00      	cmp	r2, #0
 801660c:	440b      	add	r3, r1
 801660e:	dcf7      	bgt.n	8016600 <_svfprintf_r+0x6c8>
 8016610:	f1c2 0201 	rsb	r2, r2, #1
 8016614:	e7f3      	b.n	80165fe <_svfprintf_r+0x6c6>
 8016616:	2301      	movs	r3, #1
 8016618:	e7d0      	b.n	80165bc <_svfprintf_r+0x684>
 801661a:	4613      	mov	r3, r2
 801661c:	e7f0      	b.n	8016600 <_svfprintf_r+0x6c8>
 801661e:	b10b      	cbz	r3, 8016624 <_svfprintf_r+0x6ec>
 8016620:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8016624:	f015 0f20 	tst.w	r5, #32
 8016628:	f106 0304 	add.w	r3, r6, #4
 801662c:	d008      	beq.n	8016640 <_svfprintf_r+0x708>
 801662e:	9907      	ldr	r1, [sp, #28]
 8016630:	6832      	ldr	r2, [r6, #0]
 8016632:	17ce      	asrs	r6, r1, #31
 8016634:	4608      	mov	r0, r1
 8016636:	4631      	mov	r1, r6
 8016638:	e9c2 0100 	strd	r0, r1, [r2]
 801663c:	461e      	mov	r6, r3
 801663e:	e4b7      	b.n	8015fb0 <_svfprintf_r+0x78>
 8016640:	06ef      	lsls	r7, r5, #27
 8016642:	d503      	bpl.n	801664c <_svfprintf_r+0x714>
 8016644:	6832      	ldr	r2, [r6, #0]
 8016646:	9907      	ldr	r1, [sp, #28]
 8016648:	6011      	str	r1, [r2, #0]
 801664a:	e7f7      	b.n	801663c <_svfprintf_r+0x704>
 801664c:	0668      	lsls	r0, r5, #25
 801664e:	d5f9      	bpl.n	8016644 <_svfprintf_r+0x70c>
 8016650:	6832      	ldr	r2, [r6, #0]
 8016652:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016656:	8011      	strh	r1, [r2, #0]
 8016658:	e7f0      	b.n	801663c <_svfprintf_r+0x704>
 801665a:	f045 0510 	orr.w	r5, r5, #16
 801665e:	f015 0320 	ands.w	r3, r5, #32
 8016662:	d023      	beq.n	80166ac <_svfprintf_r+0x774>
 8016664:	3607      	adds	r6, #7
 8016666:	f026 0607 	bic.w	r6, r6, #7
 801666a:	f106 0308 	add.w	r3, r6, #8
 801666e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8016672:	9304      	str	r3, [sp, #16]
 8016674:	2300      	movs	r3, #0
 8016676:	f04f 0200 	mov.w	r2, #0
 801667a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 801667e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8016682:	f000 83dc 	beq.w	8016e3e <_svfprintf_r+0xf06>
 8016686:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 801668a:	9209      	str	r2, [sp, #36]	; 0x24
 801668c:	ea56 0207 	orrs.w	r2, r6, r7
 8016690:	f040 83da 	bne.w	8016e48 <_svfprintf_r+0xf10>
 8016694:	f1b9 0f00 	cmp.w	r9, #0
 8016698:	f000 80ab 	beq.w	80167f2 <_svfprintf_r+0x8ba>
 801669c:	2b01      	cmp	r3, #1
 801669e:	d077      	beq.n	8016790 <_svfprintf_r+0x858>
 80166a0:	2b02      	cmp	r3, #2
 80166a2:	f000 8092 	beq.w	80167ca <_svfprintf_r+0x892>
 80166a6:	2600      	movs	r6, #0
 80166a8:	2700      	movs	r7, #0
 80166aa:	e3d3      	b.n	8016e54 <_svfprintf_r+0xf1c>
 80166ac:	1d32      	adds	r2, r6, #4
 80166ae:	f015 0110 	ands.w	r1, r5, #16
 80166b2:	9204      	str	r2, [sp, #16]
 80166b4:	d002      	beq.n	80166bc <_svfprintf_r+0x784>
 80166b6:	6836      	ldr	r6, [r6, #0]
 80166b8:	2700      	movs	r7, #0
 80166ba:	e7dc      	b.n	8016676 <_svfprintf_r+0x73e>
 80166bc:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80166c0:	d0f9      	beq.n	80166b6 <_svfprintf_r+0x77e>
 80166c2:	8836      	ldrh	r6, [r6, #0]
 80166c4:	2700      	movs	r7, #0
 80166c6:	e7d5      	b.n	8016674 <_svfprintf_r+0x73c>
 80166c8:	1d33      	adds	r3, r6, #4
 80166ca:	9304      	str	r3, [sp, #16]
 80166cc:	2330      	movs	r3, #48	; 0x30
 80166ce:	2278      	movs	r2, #120	; 0x78
 80166d0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 80166d4:	4b12      	ldr	r3, [pc, #72]	; (8016720 <_svfprintf_r+0x7e8>)
 80166d6:	930c      	str	r3, [sp, #48]	; 0x30
 80166d8:	6836      	ldr	r6, [r6, #0]
 80166da:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
 80166de:	2700      	movs	r7, #0
 80166e0:	f045 0502 	orr.w	r5, r5, #2
 80166e4:	2302      	movs	r3, #2
 80166e6:	9202      	str	r2, [sp, #8]
 80166e8:	e7c5      	b.n	8016676 <_svfprintf_r+0x73e>
 80166ea:	1d33      	adds	r3, r6, #4
 80166ec:	9304      	str	r3, [sp, #16]
 80166ee:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80166f2:	f04f 0300 	mov.w	r3, #0
 80166f6:	f8d6 8000 	ldr.w	r8, [r6]
 80166fa:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 80166fe:	d011      	beq.n	8016724 <_svfprintf_r+0x7ec>
 8016700:	464a      	mov	r2, r9
 8016702:	2100      	movs	r1, #0
 8016704:	4640      	mov	r0, r8
 8016706:	f7f0 f8f3 	bl	80068f0 <memchr>
 801670a:	2800      	cmp	r0, #0
 801670c:	f000 808e 	beq.w	801682c <_svfprintf_r+0x8f4>
 8016710:	eba0 0908 	sub.w	r9, r0, r8
 8016714:	e5d5      	b.n	80162c2 <_svfprintf_r+0x38a>
 8016716:	bf00      	nop
 8016718:	0801ad74 	.word	0x0801ad74
 801671c:	0801ad84 	.word	0x0801ad84
 8016720:	0801ad61 	.word	0x0801ad61
 8016724:	4640      	mov	r0, r8
 8016726:	f7f0 f93d 	bl	80069a4 <strlen>
 801672a:	4681      	mov	r9, r0
 801672c:	e5c9      	b.n	80162c2 <_svfprintf_r+0x38a>
 801672e:	f045 0510 	orr.w	r5, r5, #16
 8016732:	06a9      	lsls	r1, r5, #26
 8016734:	d509      	bpl.n	801674a <_svfprintf_r+0x812>
 8016736:	3607      	adds	r6, #7
 8016738:	f026 0607 	bic.w	r6, r6, #7
 801673c:	f106 0308 	add.w	r3, r6, #8
 8016740:	e9d6 6700 	ldrd	r6, r7, [r6]
 8016744:	9304      	str	r3, [sp, #16]
 8016746:	2301      	movs	r3, #1
 8016748:	e795      	b.n	8016676 <_svfprintf_r+0x73e>
 801674a:	1d33      	adds	r3, r6, #4
 801674c:	f015 0f10 	tst.w	r5, #16
 8016750:	9304      	str	r3, [sp, #16]
 8016752:	d001      	beq.n	8016758 <_svfprintf_r+0x820>
 8016754:	6836      	ldr	r6, [r6, #0]
 8016756:	e002      	b.n	801675e <_svfprintf_r+0x826>
 8016758:	066a      	lsls	r2, r5, #25
 801675a:	d5fb      	bpl.n	8016754 <_svfprintf_r+0x81c>
 801675c:	8836      	ldrh	r6, [r6, #0]
 801675e:	2700      	movs	r7, #0
 8016760:	e7f1      	b.n	8016746 <_svfprintf_r+0x80e>
 8016762:	b10b      	cbz	r3, 8016768 <_svfprintf_r+0x830>
 8016764:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8016768:	4ba2      	ldr	r3, [pc, #648]	; (80169f4 <_svfprintf_r+0xabc>)
 801676a:	e4e0      	b.n	801612e <_svfprintf_r+0x1f6>
 801676c:	1d33      	adds	r3, r6, #4
 801676e:	f015 0f10 	tst.w	r5, #16
 8016772:	9304      	str	r3, [sp, #16]
 8016774:	d001      	beq.n	801677a <_svfprintf_r+0x842>
 8016776:	6836      	ldr	r6, [r6, #0]
 8016778:	e002      	b.n	8016780 <_svfprintf_r+0x848>
 801677a:	066f      	lsls	r7, r5, #25
 801677c:	d5fb      	bpl.n	8016776 <_svfprintf_r+0x83e>
 801677e:	8836      	ldrh	r6, [r6, #0]
 8016780:	2700      	movs	r7, #0
 8016782:	e4e0      	b.n	8016146 <_svfprintf_r+0x20e>
 8016784:	4643      	mov	r3, r8
 8016786:	e366      	b.n	8016e56 <_svfprintf_r+0xf1e>
 8016788:	2f00      	cmp	r7, #0
 801678a:	bf08      	it	eq
 801678c:	2e0a      	cmpeq	r6, #10
 801678e:	d205      	bcs.n	801679c <_svfprintf_r+0x864>
 8016790:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
 8016794:	3630      	adds	r6, #48	; 0x30
 8016796:	f808 6d41 	strb.w	r6, [r8, #-65]!
 801679a:	e377      	b.n	8016e8c <_svfprintf_r+0xf54>
 801679c:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 80167a0:	4630      	mov	r0, r6
 80167a2:	4639      	mov	r1, r7
 80167a4:	220a      	movs	r2, #10
 80167a6:	2300      	movs	r3, #0
 80167a8:	f7f0 f904 	bl	80069b4 <__aeabi_uldivmod>
 80167ac:	3230      	adds	r2, #48	; 0x30
 80167ae:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80167b2:	2300      	movs	r3, #0
 80167b4:	4630      	mov	r0, r6
 80167b6:	4639      	mov	r1, r7
 80167b8:	220a      	movs	r2, #10
 80167ba:	f7f0 f8fb 	bl	80069b4 <__aeabi_uldivmod>
 80167be:	4606      	mov	r6, r0
 80167c0:	460f      	mov	r7, r1
 80167c2:	ea56 0307 	orrs.w	r3, r6, r7
 80167c6:	d1eb      	bne.n	80167a0 <_svfprintf_r+0x868>
 80167c8:	e360      	b.n	8016e8c <_svfprintf_r+0xf54>
 80167ca:	2600      	movs	r6, #0
 80167cc:	2700      	movs	r7, #0
 80167ce:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 80167d2:	f006 030f 	and.w	r3, r6, #15
 80167d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80167d8:	5cd3      	ldrb	r3, [r2, r3]
 80167da:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80167de:	0933      	lsrs	r3, r6, #4
 80167e0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80167e4:	093a      	lsrs	r2, r7, #4
 80167e6:	461e      	mov	r6, r3
 80167e8:	4617      	mov	r7, r2
 80167ea:	ea56 0307 	orrs.w	r3, r6, r7
 80167ee:	d1f0      	bne.n	80167d2 <_svfprintf_r+0x89a>
 80167f0:	e34c      	b.n	8016e8c <_svfprintf_r+0xf54>
 80167f2:	b93b      	cbnz	r3, 8016804 <_svfprintf_r+0x8cc>
 80167f4:	07ea      	lsls	r2, r5, #31
 80167f6:	d505      	bpl.n	8016804 <_svfprintf_r+0x8cc>
 80167f8:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
 80167fc:	2330      	movs	r3, #48	; 0x30
 80167fe:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8016802:	e343      	b.n	8016e8c <_svfprintf_r+0xf54>
 8016804:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 8016808:	e340      	b.n	8016e8c <_svfprintf_r+0xf54>
 801680a:	b10b      	cbz	r3, 8016810 <_svfprintf_r+0x8d8>
 801680c:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8016810:	9b02      	ldr	r3, [sp, #8]
 8016812:	2b00      	cmp	r3, #0
 8016814:	f000 82fb 	beq.w	8016e0e <_svfprintf_r+0xed6>
 8016818:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801681c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8016820:	f04f 0300 	mov.w	r3, #0
 8016824:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 8016828:	9604      	str	r6, [sp, #16]
 801682a:	e505      	b.n	8016238 <_svfprintf_r+0x300>
 801682c:	4606      	mov	r6, r0
 801682e:	e549      	b.n	80162c4 <_svfprintf_r+0x38c>
 8016830:	2210      	movs	r2, #16
 8016832:	6062      	str	r2, [r4, #4]
 8016834:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016836:	3210      	adds	r2, #16
 8016838:	921b      	str	r2, [sp, #108]	; 0x6c
 801683a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801683c:	3201      	adds	r2, #1
 801683e:	2a07      	cmp	r2, #7
 8016840:	921a      	str	r2, [sp, #104]	; 0x68
 8016842:	dc02      	bgt.n	801684a <_svfprintf_r+0x912>
 8016844:	3408      	adds	r4, #8
 8016846:	3b10      	subs	r3, #16
 8016848:	e60c      	b.n	8016464 <_svfprintf_r+0x52c>
 801684a:	aa19      	add	r2, sp, #100	; 0x64
 801684c:	4659      	mov	r1, fp
 801684e:	4650      	mov	r0, sl
 8016850:	930f      	str	r3, [sp, #60]	; 0x3c
 8016852:	f002 f8dc 	bl	8018a0e <__ssprint_r>
 8016856:	2800      	cmp	r0, #0
 8016858:	f040 82ba 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 801685c:	ac26      	add	r4, sp, #152	; 0x98
 801685e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016860:	e7f1      	b.n	8016846 <_svfprintf_r+0x90e>
 8016862:	aa19      	add	r2, sp, #100	; 0x64
 8016864:	4659      	mov	r1, fp
 8016866:	4650      	mov	r0, sl
 8016868:	f002 f8d1 	bl	8018a0e <__ssprint_r>
 801686c:	2800      	cmp	r0, #0
 801686e:	f040 82af 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016872:	ac26      	add	r4, sp, #152	; 0x98
 8016874:	e606      	b.n	8016484 <_svfprintf_r+0x54c>
 8016876:	aa19      	add	r2, sp, #100	; 0x64
 8016878:	4659      	mov	r1, fp
 801687a:	4650      	mov	r0, sl
 801687c:	f002 f8c7 	bl	8018a0e <__ssprint_r>
 8016880:	2800      	cmp	r0, #0
 8016882:	f040 82a5 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016886:	ac26      	add	r4, sp, #152	; 0x98
 8016888:	e60e      	b.n	80164a8 <_svfprintf_r+0x570>
 801688a:	aa19      	add	r2, sp, #100	; 0x64
 801688c:	4659      	mov	r1, fp
 801688e:	4650      	mov	r0, sl
 8016890:	f002 f8bd 	bl	8018a0e <__ssprint_r>
 8016894:	2800      	cmp	r0, #0
 8016896:	f040 829b 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 801689a:	ac26      	add	r4, sp, #152	; 0x98
 801689c:	e614      	b.n	80164c8 <_svfprintf_r+0x590>
 801689e:	2210      	movs	r2, #16
 80168a0:	6062      	str	r2, [r4, #4]
 80168a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80168a4:	3210      	adds	r2, #16
 80168a6:	921b      	str	r2, [sp, #108]	; 0x6c
 80168a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80168aa:	3201      	adds	r2, #1
 80168ac:	2a07      	cmp	r2, #7
 80168ae:	921a      	str	r2, [sp, #104]	; 0x68
 80168b0:	dc02      	bgt.n	80168b8 <_svfprintf_r+0x980>
 80168b2:	3408      	adds	r4, #8
 80168b4:	3b10      	subs	r3, #16
 80168b6:	e60f      	b.n	80164d8 <_svfprintf_r+0x5a0>
 80168b8:	aa19      	add	r2, sp, #100	; 0x64
 80168ba:	4659      	mov	r1, fp
 80168bc:	4650      	mov	r0, sl
 80168be:	930d      	str	r3, [sp, #52]	; 0x34
 80168c0:	f002 f8a5 	bl	8018a0e <__ssprint_r>
 80168c4:	2800      	cmp	r0, #0
 80168c6:	f040 8283 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 80168ca:	ac26      	add	r4, sp, #152	; 0x98
 80168cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168ce:	e7f1      	b.n	80168b4 <_svfprintf_r+0x97c>
 80168d0:	aa19      	add	r2, sp, #100	; 0x64
 80168d2:	4659      	mov	r1, fp
 80168d4:	4650      	mov	r0, sl
 80168d6:	f002 f89a 	bl	8018a0e <__ssprint_r>
 80168da:	2800      	cmp	r0, #0
 80168dc:	f040 8278 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 80168e0:	ac26      	add	r4, sp, #152	; 0x98
 80168e2:	e609      	b.n	80164f8 <_svfprintf_r+0x5c0>
 80168e4:	2310      	movs	r3, #16
 80168e6:	6063      	str	r3, [r4, #4]
 80168e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168ea:	3310      	adds	r3, #16
 80168ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80168ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80168f0:	3301      	adds	r3, #1
 80168f2:	2b07      	cmp	r3, #7
 80168f4:	931a      	str	r3, [sp, #104]	; 0x68
 80168f6:	dc02      	bgt.n	80168fe <_svfprintf_r+0x9c6>
 80168f8:	3408      	adds	r4, #8
 80168fa:	3e10      	subs	r6, #16
 80168fc:	e600      	b.n	8016500 <_svfprintf_r+0x5c8>
 80168fe:	aa19      	add	r2, sp, #100	; 0x64
 8016900:	4659      	mov	r1, fp
 8016902:	4650      	mov	r0, sl
 8016904:	f002 f883 	bl	8018a0e <__ssprint_r>
 8016908:	2800      	cmp	r0, #0
 801690a:	f040 8261 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 801690e:	ac26      	add	r4, sp, #152	; 0x98
 8016910:	e7f3      	b.n	80168fa <_svfprintf_r+0x9c2>
 8016912:	aa19      	add	r2, sp, #100	; 0x64
 8016914:	4659      	mov	r1, fp
 8016916:	4650      	mov	r0, sl
 8016918:	f002 f879 	bl	8018a0e <__ssprint_r>
 801691c:	2800      	cmp	r0, #0
 801691e:	f040 8257 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016922:	ac26      	add	r4, sp, #152	; 0x98
 8016924:	e5fc      	b.n	8016520 <_svfprintf_r+0x5e8>
 8016926:	9b02      	ldr	r3, [sp, #8]
 8016928:	2b65      	cmp	r3, #101	; 0x65
 801692a:	f340 81a7 	ble.w	8016c7c <_svfprintf_r+0xd44>
 801692e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016936:	d163      	bne.n	8016a00 <_svfprintf_r+0xac8>
 8016938:	4b2f      	ldr	r3, [pc, #188]	; (80169f8 <_svfprintf_r+0xac0>)
 801693a:	6023      	str	r3, [r4, #0]
 801693c:	2301      	movs	r3, #1
 801693e:	6063      	str	r3, [r4, #4]
 8016940:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016942:	3301      	adds	r3, #1
 8016944:	931b      	str	r3, [sp, #108]	; 0x6c
 8016946:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016948:	3301      	adds	r3, #1
 801694a:	2b07      	cmp	r3, #7
 801694c:	931a      	str	r3, [sp, #104]	; 0x68
 801694e:	dc25      	bgt.n	801699c <_svfprintf_r+0xa64>
 8016950:	3408      	adds	r4, #8
 8016952:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016954:	9a03      	ldr	r2, [sp, #12]
 8016956:	4293      	cmp	r3, r2
 8016958:	db02      	blt.n	8016960 <_svfprintf_r+0xa28>
 801695a:	07ee      	lsls	r6, r5, #31
 801695c:	f57f adf7 	bpl.w	801654e <_svfprintf_r+0x616>
 8016960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016962:	6023      	str	r3, [r4, #0]
 8016964:	9b06      	ldr	r3, [sp, #24]
 8016966:	6063      	str	r3, [r4, #4]
 8016968:	9a06      	ldr	r2, [sp, #24]
 801696a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801696c:	4413      	add	r3, r2
 801696e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016970:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016972:	3301      	adds	r3, #1
 8016974:	2b07      	cmp	r3, #7
 8016976:	931a      	str	r3, [sp, #104]	; 0x68
 8016978:	dc1a      	bgt.n	80169b0 <_svfprintf_r+0xa78>
 801697a:	3408      	adds	r4, #8
 801697c:	9b03      	ldr	r3, [sp, #12]
 801697e:	1e5e      	subs	r6, r3, #1
 8016980:	2e00      	cmp	r6, #0
 8016982:	f77f ade4 	ble.w	801654e <_svfprintf_r+0x616>
 8016986:	4f1d      	ldr	r7, [pc, #116]	; (80169fc <_svfprintf_r+0xac4>)
 8016988:	f04f 0810 	mov.w	r8, #16
 801698c:	2e10      	cmp	r6, #16
 801698e:	6027      	str	r7, [r4, #0]
 8016990:	dc18      	bgt.n	80169c4 <_svfprintf_r+0xa8c>
 8016992:	6066      	str	r6, [r4, #4]
 8016994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016996:	441e      	add	r6, r3
 8016998:	961b      	str	r6, [sp, #108]	; 0x6c
 801699a:	e5c9      	b.n	8016530 <_svfprintf_r+0x5f8>
 801699c:	aa19      	add	r2, sp, #100	; 0x64
 801699e:	4659      	mov	r1, fp
 80169a0:	4650      	mov	r0, sl
 80169a2:	f002 f834 	bl	8018a0e <__ssprint_r>
 80169a6:	2800      	cmp	r0, #0
 80169a8:	f040 8212 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 80169ac:	ac26      	add	r4, sp, #152	; 0x98
 80169ae:	e7d0      	b.n	8016952 <_svfprintf_r+0xa1a>
 80169b0:	aa19      	add	r2, sp, #100	; 0x64
 80169b2:	4659      	mov	r1, fp
 80169b4:	4650      	mov	r0, sl
 80169b6:	f002 f82a 	bl	8018a0e <__ssprint_r>
 80169ba:	2800      	cmp	r0, #0
 80169bc:	f040 8208 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 80169c0:	ac26      	add	r4, sp, #152	; 0x98
 80169c2:	e7db      	b.n	801697c <_svfprintf_r+0xa44>
 80169c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169c6:	f8c4 8004 	str.w	r8, [r4, #4]
 80169ca:	3310      	adds	r3, #16
 80169cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80169ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80169d0:	3301      	adds	r3, #1
 80169d2:	2b07      	cmp	r3, #7
 80169d4:	931a      	str	r3, [sp, #104]	; 0x68
 80169d6:	dc02      	bgt.n	80169de <_svfprintf_r+0xaa6>
 80169d8:	3408      	adds	r4, #8
 80169da:	3e10      	subs	r6, #16
 80169dc:	e7d6      	b.n	801698c <_svfprintf_r+0xa54>
 80169de:	aa19      	add	r2, sp, #100	; 0x64
 80169e0:	4659      	mov	r1, fp
 80169e2:	4650      	mov	r0, sl
 80169e4:	f002 f813 	bl	8018a0e <__ssprint_r>
 80169e8:	2800      	cmp	r0, #0
 80169ea:	f040 81f1 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 80169ee:	ac26      	add	r4, sp, #152	; 0x98
 80169f0:	e7f3      	b.n	80169da <_svfprintf_r+0xaa2>
 80169f2:	bf00      	nop
 80169f4:	0801ad61 	.word	0x0801ad61
 80169f8:	0801ad72 	.word	0x0801ad72
 80169fc:	0801ad84 	.word	0x0801ad84
 8016a00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	dc7a      	bgt.n	8016afc <_svfprintf_r+0xbc4>
 8016a06:	4b9b      	ldr	r3, [pc, #620]	; (8016c74 <_svfprintf_r+0xd3c>)
 8016a08:	6023      	str	r3, [r4, #0]
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	6063      	str	r3, [r4, #4]
 8016a0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a10:	3301      	adds	r3, #1
 8016a12:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016a16:	3301      	adds	r3, #1
 8016a18:	2b07      	cmp	r3, #7
 8016a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8016a1c:	dc44      	bgt.n	8016aa8 <_svfprintf_r+0xb70>
 8016a1e:	3408      	adds	r4, #8
 8016a20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a22:	b923      	cbnz	r3, 8016a2e <_svfprintf_r+0xaf6>
 8016a24:	9b03      	ldr	r3, [sp, #12]
 8016a26:	b913      	cbnz	r3, 8016a2e <_svfprintf_r+0xaf6>
 8016a28:	07e8      	lsls	r0, r5, #31
 8016a2a:	f57f ad90 	bpl.w	801654e <_svfprintf_r+0x616>
 8016a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a30:	6023      	str	r3, [r4, #0]
 8016a32:	9b06      	ldr	r3, [sp, #24]
 8016a34:	6063      	str	r3, [r4, #4]
 8016a36:	9a06      	ldr	r2, [sp, #24]
 8016a38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a3a:	4413      	add	r3, r2
 8016a3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a3e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016a40:	3301      	adds	r3, #1
 8016a42:	2b07      	cmp	r3, #7
 8016a44:	931a      	str	r3, [sp, #104]	; 0x68
 8016a46:	dc39      	bgt.n	8016abc <_svfprintf_r+0xb84>
 8016a48:	f104 0308 	add.w	r3, r4, #8
 8016a4c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016a4e:	2e00      	cmp	r6, #0
 8016a50:	da19      	bge.n	8016a86 <_svfprintf_r+0xb4e>
 8016a52:	4f89      	ldr	r7, [pc, #548]	; (8016c78 <_svfprintf_r+0xd40>)
 8016a54:	4276      	negs	r6, r6
 8016a56:	2410      	movs	r4, #16
 8016a58:	2e10      	cmp	r6, #16
 8016a5a:	601f      	str	r7, [r3, #0]
 8016a5c:	dc38      	bgt.n	8016ad0 <_svfprintf_r+0xb98>
 8016a5e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016a60:	605e      	str	r6, [r3, #4]
 8016a62:	4416      	add	r6, r2
 8016a64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016a66:	961b      	str	r6, [sp, #108]	; 0x6c
 8016a68:	3201      	adds	r2, #1
 8016a6a:	2a07      	cmp	r2, #7
 8016a6c:	f103 0308 	add.w	r3, r3, #8
 8016a70:	921a      	str	r2, [sp, #104]	; 0x68
 8016a72:	dd08      	ble.n	8016a86 <_svfprintf_r+0xb4e>
 8016a74:	aa19      	add	r2, sp, #100	; 0x64
 8016a76:	4659      	mov	r1, fp
 8016a78:	4650      	mov	r0, sl
 8016a7a:	f001 ffc8 	bl	8018a0e <__ssprint_r>
 8016a7e:	2800      	cmp	r0, #0
 8016a80:	f040 81a6 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016a84:	ab26      	add	r3, sp, #152	; 0x98
 8016a86:	9a03      	ldr	r2, [sp, #12]
 8016a88:	605a      	str	r2, [r3, #4]
 8016a8a:	9903      	ldr	r1, [sp, #12]
 8016a8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016a8e:	f8c3 8000 	str.w	r8, [r3]
 8016a92:	440a      	add	r2, r1
 8016a94:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016a98:	3201      	adds	r2, #1
 8016a9a:	2a07      	cmp	r2, #7
 8016a9c:	921a      	str	r2, [sp, #104]	; 0x68
 8016a9e:	f73f ad4d 	bgt.w	801653c <_svfprintf_r+0x604>
 8016aa2:	f103 0408 	add.w	r4, r3, #8
 8016aa6:	e552      	b.n	801654e <_svfprintf_r+0x616>
 8016aa8:	aa19      	add	r2, sp, #100	; 0x64
 8016aaa:	4659      	mov	r1, fp
 8016aac:	4650      	mov	r0, sl
 8016aae:	f001 ffae 	bl	8018a0e <__ssprint_r>
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	f040 818c 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016ab8:	ac26      	add	r4, sp, #152	; 0x98
 8016aba:	e7b1      	b.n	8016a20 <_svfprintf_r+0xae8>
 8016abc:	aa19      	add	r2, sp, #100	; 0x64
 8016abe:	4659      	mov	r1, fp
 8016ac0:	4650      	mov	r0, sl
 8016ac2:	f001 ffa4 	bl	8018a0e <__ssprint_r>
 8016ac6:	2800      	cmp	r0, #0
 8016ac8:	f040 8182 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016acc:	ab26      	add	r3, sp, #152	; 0x98
 8016ace:	e7bd      	b.n	8016a4c <_svfprintf_r+0xb14>
 8016ad0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016ad2:	605c      	str	r4, [r3, #4]
 8016ad4:	3210      	adds	r2, #16
 8016ad6:	921b      	str	r2, [sp, #108]	; 0x6c
 8016ad8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016ada:	3201      	adds	r2, #1
 8016adc:	2a07      	cmp	r2, #7
 8016ade:	921a      	str	r2, [sp, #104]	; 0x68
 8016ae0:	dc02      	bgt.n	8016ae8 <_svfprintf_r+0xbb0>
 8016ae2:	3308      	adds	r3, #8
 8016ae4:	3e10      	subs	r6, #16
 8016ae6:	e7b7      	b.n	8016a58 <_svfprintf_r+0xb20>
 8016ae8:	aa19      	add	r2, sp, #100	; 0x64
 8016aea:	4659      	mov	r1, fp
 8016aec:	4650      	mov	r0, sl
 8016aee:	f001 ff8e 	bl	8018a0e <__ssprint_r>
 8016af2:	2800      	cmp	r0, #0
 8016af4:	f040 816c 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016af8:	ab26      	add	r3, sp, #152	; 0x98
 8016afa:	e7f3      	b.n	8016ae4 <_svfprintf_r+0xbac>
 8016afc:	9b03      	ldr	r3, [sp, #12]
 8016afe:	42bb      	cmp	r3, r7
 8016b00:	bfa8      	it	ge
 8016b02:	463b      	movge	r3, r7
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	461e      	mov	r6, r3
 8016b08:	dd0b      	ble.n	8016b22 <_svfprintf_r+0xbea>
 8016b0a:	6063      	str	r3, [r4, #4]
 8016b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b0e:	f8c4 8000 	str.w	r8, [r4]
 8016b12:	4433      	add	r3, r6
 8016b14:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b16:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016b18:	3301      	adds	r3, #1
 8016b1a:	2b07      	cmp	r3, #7
 8016b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8016b1e:	dc5f      	bgt.n	8016be0 <_svfprintf_r+0xca8>
 8016b20:	3408      	adds	r4, #8
 8016b22:	2e00      	cmp	r6, #0
 8016b24:	bfac      	ite	ge
 8016b26:	1bbe      	subge	r6, r7, r6
 8016b28:	463e      	movlt	r6, r7
 8016b2a:	2e00      	cmp	r6, #0
 8016b2c:	dd0f      	ble.n	8016b4e <_svfprintf_r+0xc16>
 8016b2e:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8016c78 <_svfprintf_r+0xd40>
 8016b32:	f8c4 9000 	str.w	r9, [r4]
 8016b36:	2e10      	cmp	r6, #16
 8016b38:	dc5c      	bgt.n	8016bf4 <_svfprintf_r+0xcbc>
 8016b3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b3c:	6066      	str	r6, [r4, #4]
 8016b3e:	441e      	add	r6, r3
 8016b40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016b42:	961b      	str	r6, [sp, #108]	; 0x6c
 8016b44:	3301      	adds	r3, #1
 8016b46:	2b07      	cmp	r3, #7
 8016b48:	931a      	str	r3, [sp, #104]	; 0x68
 8016b4a:	dc6a      	bgt.n	8016c22 <_svfprintf_r+0xcea>
 8016b4c:	3408      	adds	r4, #8
 8016b4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b50:	9a03      	ldr	r2, [sp, #12]
 8016b52:	4293      	cmp	r3, r2
 8016b54:	db01      	blt.n	8016b5a <_svfprintf_r+0xc22>
 8016b56:	07e9      	lsls	r1, r5, #31
 8016b58:	d50d      	bpl.n	8016b76 <_svfprintf_r+0xc3e>
 8016b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b5c:	6023      	str	r3, [r4, #0]
 8016b5e:	9b06      	ldr	r3, [sp, #24]
 8016b60:	6063      	str	r3, [r4, #4]
 8016b62:	9a06      	ldr	r2, [sp, #24]
 8016b64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b66:	4413      	add	r3, r2
 8016b68:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016b6c:	3301      	adds	r3, #1
 8016b6e:	2b07      	cmp	r3, #7
 8016b70:	931a      	str	r3, [sp, #104]	; 0x68
 8016b72:	dc60      	bgt.n	8016c36 <_svfprintf_r+0xcfe>
 8016b74:	3408      	adds	r4, #8
 8016b76:	9b03      	ldr	r3, [sp, #12]
 8016b78:	9a03      	ldr	r2, [sp, #12]
 8016b7a:	1bde      	subs	r6, r3, r7
 8016b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b7e:	1ad3      	subs	r3, r2, r3
 8016b80:	429e      	cmp	r6, r3
 8016b82:	bfa8      	it	ge
 8016b84:	461e      	movge	r6, r3
 8016b86:	2e00      	cmp	r6, #0
 8016b88:	dd0b      	ble.n	8016ba2 <_svfprintf_r+0xc6a>
 8016b8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b8c:	6066      	str	r6, [r4, #4]
 8016b8e:	4433      	add	r3, r6
 8016b90:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016b94:	3301      	adds	r3, #1
 8016b96:	4447      	add	r7, r8
 8016b98:	2b07      	cmp	r3, #7
 8016b9a:	6027      	str	r7, [r4, #0]
 8016b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8016b9e:	dc54      	bgt.n	8016c4a <_svfprintf_r+0xd12>
 8016ba0:	3408      	adds	r4, #8
 8016ba2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ba4:	9a03      	ldr	r2, [sp, #12]
 8016ba6:	2e00      	cmp	r6, #0
 8016ba8:	eba2 0303 	sub.w	r3, r2, r3
 8016bac:	bfac      	ite	ge
 8016bae:	1b9e      	subge	r6, r3, r6
 8016bb0:	461e      	movlt	r6, r3
 8016bb2:	2e00      	cmp	r6, #0
 8016bb4:	f77f accb 	ble.w	801654e <_svfprintf_r+0x616>
 8016bb8:	4f2f      	ldr	r7, [pc, #188]	; (8016c78 <_svfprintf_r+0xd40>)
 8016bba:	f04f 0810 	mov.w	r8, #16
 8016bbe:	2e10      	cmp	r6, #16
 8016bc0:	6027      	str	r7, [r4, #0]
 8016bc2:	f77f aee6 	ble.w	8016992 <_svfprintf_r+0xa5a>
 8016bc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016bc8:	f8c4 8004 	str.w	r8, [r4, #4]
 8016bcc:	3310      	adds	r3, #16
 8016bce:	931b      	str	r3, [sp, #108]	; 0x6c
 8016bd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016bd2:	3301      	adds	r3, #1
 8016bd4:	2b07      	cmp	r3, #7
 8016bd6:	931a      	str	r3, [sp, #104]	; 0x68
 8016bd8:	dc41      	bgt.n	8016c5e <_svfprintf_r+0xd26>
 8016bda:	3408      	adds	r4, #8
 8016bdc:	3e10      	subs	r6, #16
 8016bde:	e7ee      	b.n	8016bbe <_svfprintf_r+0xc86>
 8016be0:	aa19      	add	r2, sp, #100	; 0x64
 8016be2:	4659      	mov	r1, fp
 8016be4:	4650      	mov	r0, sl
 8016be6:	f001 ff12 	bl	8018a0e <__ssprint_r>
 8016bea:	2800      	cmp	r0, #0
 8016bec:	f040 80f0 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016bf0:	ac26      	add	r4, sp, #152	; 0x98
 8016bf2:	e796      	b.n	8016b22 <_svfprintf_r+0xbea>
 8016bf4:	2310      	movs	r3, #16
 8016bf6:	6063      	str	r3, [r4, #4]
 8016bf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016bfa:	3310      	adds	r3, #16
 8016bfc:	931b      	str	r3, [sp, #108]	; 0x6c
 8016bfe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016c00:	3301      	adds	r3, #1
 8016c02:	2b07      	cmp	r3, #7
 8016c04:	931a      	str	r3, [sp, #104]	; 0x68
 8016c06:	dc02      	bgt.n	8016c0e <_svfprintf_r+0xcd6>
 8016c08:	3408      	adds	r4, #8
 8016c0a:	3e10      	subs	r6, #16
 8016c0c:	e791      	b.n	8016b32 <_svfprintf_r+0xbfa>
 8016c0e:	aa19      	add	r2, sp, #100	; 0x64
 8016c10:	4659      	mov	r1, fp
 8016c12:	4650      	mov	r0, sl
 8016c14:	f001 fefb 	bl	8018a0e <__ssprint_r>
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	f040 80d9 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016c1e:	ac26      	add	r4, sp, #152	; 0x98
 8016c20:	e7f3      	b.n	8016c0a <_svfprintf_r+0xcd2>
 8016c22:	aa19      	add	r2, sp, #100	; 0x64
 8016c24:	4659      	mov	r1, fp
 8016c26:	4650      	mov	r0, sl
 8016c28:	f001 fef1 	bl	8018a0e <__ssprint_r>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	f040 80cf 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016c32:	ac26      	add	r4, sp, #152	; 0x98
 8016c34:	e78b      	b.n	8016b4e <_svfprintf_r+0xc16>
 8016c36:	aa19      	add	r2, sp, #100	; 0x64
 8016c38:	4659      	mov	r1, fp
 8016c3a:	4650      	mov	r0, sl
 8016c3c:	f001 fee7 	bl	8018a0e <__ssprint_r>
 8016c40:	2800      	cmp	r0, #0
 8016c42:	f040 80c5 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016c46:	ac26      	add	r4, sp, #152	; 0x98
 8016c48:	e795      	b.n	8016b76 <_svfprintf_r+0xc3e>
 8016c4a:	aa19      	add	r2, sp, #100	; 0x64
 8016c4c:	4659      	mov	r1, fp
 8016c4e:	4650      	mov	r0, sl
 8016c50:	f001 fedd 	bl	8018a0e <__ssprint_r>
 8016c54:	2800      	cmp	r0, #0
 8016c56:	f040 80bb 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016c5a:	ac26      	add	r4, sp, #152	; 0x98
 8016c5c:	e7a1      	b.n	8016ba2 <_svfprintf_r+0xc6a>
 8016c5e:	aa19      	add	r2, sp, #100	; 0x64
 8016c60:	4659      	mov	r1, fp
 8016c62:	4650      	mov	r0, sl
 8016c64:	f001 fed3 	bl	8018a0e <__ssprint_r>
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	f040 80b1 	bne.w	8016dd0 <_svfprintf_r+0xe98>
 8016c6e:	ac26      	add	r4, sp, #152	; 0x98
 8016c70:	e7b4      	b.n	8016bdc <_svfprintf_r+0xca4>
 8016c72:	bf00      	nop
 8016c74:	0801ad72 	.word	0x0801ad72
 8016c78:	0801ad84 	.word	0x0801ad84
 8016c7c:	9b03      	ldr	r3, [sp, #12]
 8016c7e:	2b01      	cmp	r3, #1
 8016c80:	dc01      	bgt.n	8016c86 <_svfprintf_r+0xd4e>
 8016c82:	07ea      	lsls	r2, r5, #31
 8016c84:	d573      	bpl.n	8016d6e <_svfprintf_r+0xe36>
 8016c86:	2301      	movs	r3, #1
 8016c88:	6063      	str	r3, [r4, #4]
 8016c8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c8c:	f8c4 8000 	str.w	r8, [r4]
 8016c90:	3301      	adds	r3, #1
 8016c92:	931b      	str	r3, [sp, #108]	; 0x6c
 8016c94:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016c96:	3301      	adds	r3, #1
 8016c98:	2b07      	cmp	r3, #7
 8016c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8016c9c:	dc34      	bgt.n	8016d08 <_svfprintf_r+0xdd0>
 8016c9e:	3408      	adds	r4, #8
 8016ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ca2:	6023      	str	r3, [r4, #0]
 8016ca4:	9b06      	ldr	r3, [sp, #24]
 8016ca6:	6063      	str	r3, [r4, #4]
 8016ca8:	9a06      	ldr	r2, [sp, #24]
 8016caa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cac:	4413      	add	r3, r2
 8016cae:	931b      	str	r3, [sp, #108]	; 0x6c
 8016cb0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016cb2:	3301      	adds	r3, #1
 8016cb4:	2b07      	cmp	r3, #7
 8016cb6:	931a      	str	r3, [sp, #104]	; 0x68
 8016cb8:	dc2f      	bgt.n	8016d1a <_svfprintf_r+0xde2>
 8016cba:	f104 0308 	add.w	r3, r4, #8
 8016cbe:	9a03      	ldr	r2, [sp, #12]
 8016cc0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cc8:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8016ccc:	d02e      	beq.n	8016d2c <_svfprintf_r+0xdf4>
 8016cce:	f108 0201 	add.w	r2, r8, #1
 8016cd2:	e883 0044 	stmia.w	r3, {r2, r6}
 8016cd6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016cd8:	9903      	ldr	r1, [sp, #12]
 8016cda:	3a01      	subs	r2, #1
 8016cdc:	440a      	add	r2, r1
 8016cde:	921b      	str	r2, [sp, #108]	; 0x6c
 8016ce0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016ce2:	3201      	adds	r2, #1
 8016ce4:	2a07      	cmp	r2, #7
 8016ce6:	921a      	str	r2, [sp, #104]	; 0x68
 8016ce8:	dd50      	ble.n	8016d8c <_svfprintf_r+0xe54>
 8016cea:	aa19      	add	r2, sp, #100	; 0x64
 8016cec:	4659      	mov	r1, fp
 8016cee:	4650      	mov	r0, sl
 8016cf0:	f001 fe8d 	bl	8018a0e <__ssprint_r>
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	d16b      	bne.n	8016dd0 <_svfprintf_r+0xe98>
 8016cf8:	ab26      	add	r3, sp, #152	; 0x98
 8016cfa:	aa15      	add	r2, sp, #84	; 0x54
 8016cfc:	601a      	str	r2, [r3, #0]
 8016cfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016d00:	605a      	str	r2, [r3, #4]
 8016d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016d06:	e6c4      	b.n	8016a92 <_svfprintf_r+0xb5a>
 8016d08:	aa19      	add	r2, sp, #100	; 0x64
 8016d0a:	4659      	mov	r1, fp
 8016d0c:	4650      	mov	r0, sl
 8016d0e:	f001 fe7e 	bl	8018a0e <__ssprint_r>
 8016d12:	2800      	cmp	r0, #0
 8016d14:	d15c      	bne.n	8016dd0 <_svfprintf_r+0xe98>
 8016d16:	ac26      	add	r4, sp, #152	; 0x98
 8016d18:	e7c2      	b.n	8016ca0 <_svfprintf_r+0xd68>
 8016d1a:	aa19      	add	r2, sp, #100	; 0x64
 8016d1c:	4659      	mov	r1, fp
 8016d1e:	4650      	mov	r0, sl
 8016d20:	f001 fe75 	bl	8018a0e <__ssprint_r>
 8016d24:	2800      	cmp	r0, #0
 8016d26:	d153      	bne.n	8016dd0 <_svfprintf_r+0xe98>
 8016d28:	ab26      	add	r3, sp, #152	; 0x98
 8016d2a:	e7c8      	b.n	8016cbe <_svfprintf_r+0xd86>
 8016d2c:	2e00      	cmp	r6, #0
 8016d2e:	dde4      	ble.n	8016cfa <_svfprintf_r+0xdc2>
 8016d30:	4f5b      	ldr	r7, [pc, #364]	; (8016ea0 <_svfprintf_r+0xf68>)
 8016d32:	2410      	movs	r4, #16
 8016d34:	2e10      	cmp	r6, #16
 8016d36:	601f      	str	r7, [r3, #0]
 8016d38:	dc04      	bgt.n	8016d44 <_svfprintf_r+0xe0c>
 8016d3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016d3c:	605e      	str	r6, [r3, #4]
 8016d3e:	4416      	add	r6, r2
 8016d40:	961b      	str	r6, [sp, #108]	; 0x6c
 8016d42:	e7cd      	b.n	8016ce0 <_svfprintf_r+0xda8>
 8016d44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016d46:	605c      	str	r4, [r3, #4]
 8016d48:	3210      	adds	r2, #16
 8016d4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8016d4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016d4e:	3201      	adds	r2, #1
 8016d50:	2a07      	cmp	r2, #7
 8016d52:	921a      	str	r2, [sp, #104]	; 0x68
 8016d54:	dc02      	bgt.n	8016d5c <_svfprintf_r+0xe24>
 8016d56:	3308      	adds	r3, #8
 8016d58:	3e10      	subs	r6, #16
 8016d5a:	e7eb      	b.n	8016d34 <_svfprintf_r+0xdfc>
 8016d5c:	aa19      	add	r2, sp, #100	; 0x64
 8016d5e:	4659      	mov	r1, fp
 8016d60:	4650      	mov	r0, sl
 8016d62:	f001 fe54 	bl	8018a0e <__ssprint_r>
 8016d66:	2800      	cmp	r0, #0
 8016d68:	d132      	bne.n	8016dd0 <_svfprintf_r+0xe98>
 8016d6a:	ab26      	add	r3, sp, #152	; 0x98
 8016d6c:	e7f4      	b.n	8016d58 <_svfprintf_r+0xe20>
 8016d6e:	2301      	movs	r3, #1
 8016d70:	6063      	str	r3, [r4, #4]
 8016d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d74:	f8c4 8000 	str.w	r8, [r4]
 8016d78:	3301      	adds	r3, #1
 8016d7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016d7e:	3301      	adds	r3, #1
 8016d80:	2b07      	cmp	r3, #7
 8016d82:	931a      	str	r3, [sp, #104]	; 0x68
 8016d84:	dcb1      	bgt.n	8016cea <_svfprintf_r+0xdb2>
 8016d86:	f104 0308 	add.w	r3, r4, #8
 8016d8a:	e7b6      	b.n	8016cfa <_svfprintf_r+0xdc2>
 8016d8c:	3308      	adds	r3, #8
 8016d8e:	e7b4      	b.n	8016cfa <_svfprintf_r+0xdc2>
 8016d90:	3408      	adds	r4, #8
 8016d92:	f7ff bbdc 	b.w	801654e <_svfprintf_r+0x616>
 8016d96:	9b08      	ldr	r3, [sp, #32]
 8016d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d9a:	1a9d      	subs	r5, r3, r2
 8016d9c:	2d00      	cmp	r5, #0
 8016d9e:	f77f abd9 	ble.w	8016554 <_svfprintf_r+0x61c>
 8016da2:	4e40      	ldr	r6, [pc, #256]	; (8016ea4 <_svfprintf_r+0xf6c>)
 8016da4:	2710      	movs	r7, #16
 8016da6:	2d10      	cmp	r5, #16
 8016da8:	6026      	str	r6, [r4, #0]
 8016daa:	dc1b      	bgt.n	8016de4 <_svfprintf_r+0xeac>
 8016dac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dae:	6065      	str	r5, [r4, #4]
 8016db0:	441d      	add	r5, r3
 8016db2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016db4:	951b      	str	r5, [sp, #108]	; 0x6c
 8016db6:	3301      	adds	r3, #1
 8016db8:	2b07      	cmp	r3, #7
 8016dba:	931a      	str	r3, [sp, #104]	; 0x68
 8016dbc:	f77f abca 	ble.w	8016554 <_svfprintf_r+0x61c>
 8016dc0:	aa19      	add	r2, sp, #100	; 0x64
 8016dc2:	4659      	mov	r1, fp
 8016dc4:	4650      	mov	r0, sl
 8016dc6:	f001 fe22 	bl	8018a0e <__ssprint_r>
 8016dca:	2800      	cmp	r0, #0
 8016dcc:	f43f abc2 	beq.w	8016554 <_svfprintf_r+0x61c>
 8016dd0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8016dd4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016dd8:	9b07      	ldr	r3, [sp, #28]
 8016dda:	bf18      	it	ne
 8016ddc:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8016de0:	f7ff b8d0 	b.w	8015f84 <_svfprintf_r+0x4c>
 8016de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016de6:	6067      	str	r7, [r4, #4]
 8016de8:	3310      	adds	r3, #16
 8016dea:	931b      	str	r3, [sp, #108]	; 0x6c
 8016dec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016dee:	3301      	adds	r3, #1
 8016df0:	2b07      	cmp	r3, #7
 8016df2:	931a      	str	r3, [sp, #104]	; 0x68
 8016df4:	dc02      	bgt.n	8016dfc <_svfprintf_r+0xec4>
 8016df6:	3408      	adds	r4, #8
 8016df8:	3d10      	subs	r5, #16
 8016dfa:	e7d4      	b.n	8016da6 <_svfprintf_r+0xe6e>
 8016dfc:	aa19      	add	r2, sp, #100	; 0x64
 8016dfe:	4659      	mov	r1, fp
 8016e00:	4650      	mov	r0, sl
 8016e02:	f001 fe04 	bl	8018a0e <__ssprint_r>
 8016e06:	2800      	cmp	r0, #0
 8016e08:	d1e2      	bne.n	8016dd0 <_svfprintf_r+0xe98>
 8016e0a:	ac26      	add	r4, sp, #152	; 0x98
 8016e0c:	e7f4      	b.n	8016df8 <_svfprintf_r+0xec0>
 8016e0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d0dd      	beq.n	8016dd0 <_svfprintf_r+0xe98>
 8016e14:	aa19      	add	r2, sp, #100	; 0x64
 8016e16:	4659      	mov	r1, fp
 8016e18:	4650      	mov	r0, sl
 8016e1a:	f001 fdf8 	bl	8018a0e <__ssprint_r>
 8016e1e:	e7d7      	b.n	8016dd0 <_svfprintf_r+0xe98>
 8016e20:	eeb4 8b48 	vcmp.f64	d8, d8
 8016e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e28:	f5ff aa4e 	bvc.w	80162c8 <_svfprintf_r+0x390>
 8016e2c:	4b1e      	ldr	r3, [pc, #120]	; (8016ea8 <_svfprintf_r+0xf70>)
 8016e2e:	4a1f      	ldr	r2, [pc, #124]	; (8016eac <_svfprintf_r+0xf74>)
 8016e30:	f7ff ba3e 	b.w	80162b0 <_svfprintf_r+0x378>
 8016e34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e36:	1a1b      	subs	r3, r3, r0
 8016e38:	9303      	str	r3, [sp, #12]
 8016e3a:	f7ff baac 	b.w	8016396 <_svfprintf_r+0x45e>
 8016e3e:	ea56 0207 	orrs.w	r2, r6, r7
 8016e42:	9509      	str	r5, [sp, #36]	; 0x24
 8016e44:	f43f ac2a 	beq.w	801669c <_svfprintf_r+0x764>
 8016e48:	2b01      	cmp	r3, #1
 8016e4a:	f43f ac9d 	beq.w	8016788 <_svfprintf_r+0x850>
 8016e4e:	2b02      	cmp	r3, #2
 8016e50:	f43f acbd 	beq.w	80167ce <_svfprintf_r+0x896>
 8016e54:	ab26      	add	r3, sp, #152	; 0x98
 8016e56:	08f1      	lsrs	r1, r6, #3
 8016e58:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8016e5c:	08f8      	lsrs	r0, r7, #3
 8016e5e:	f006 0207 	and.w	r2, r6, #7
 8016e62:	4607      	mov	r7, r0
 8016e64:	460e      	mov	r6, r1
 8016e66:	3230      	adds	r2, #48	; 0x30
 8016e68:	ea56 0107 	orrs.w	r1, r6, r7
 8016e6c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8016e70:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016e74:	f47f ac86 	bne.w	8016784 <_svfprintf_r+0x84c>
 8016e78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016e7a:	07c9      	lsls	r1, r1, #31
 8016e7c:	d506      	bpl.n	8016e8c <_svfprintf_r+0xf54>
 8016e7e:	2a30      	cmp	r2, #48	; 0x30
 8016e80:	d004      	beq.n	8016e8c <_svfprintf_r+0xf54>
 8016e82:	2230      	movs	r2, #48	; 0x30
 8016e84:	f808 2c01 	strb.w	r2, [r8, #-1]
 8016e88:	f1a3 0802 	sub.w	r8, r3, #2
 8016e8c:	464e      	mov	r6, r9
 8016e8e:	f10d 0998 	add.w	r9, sp, #152	; 0x98
 8016e92:	eba9 0908 	sub.w	r9, r9, r8
 8016e96:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016e98:	2700      	movs	r7, #0
 8016e9a:	f7ff bac8 	b.w	801642e <_svfprintf_r+0x4f6>
 8016e9e:	bf00      	nop
 8016ea0:	0801ad84 	.word	0x0801ad84
 8016ea4:	0801ad74 	.word	0x0801ad74
 8016ea8:	0801ad48 	.word	0x0801ad48
 8016eac:	0801ad4c 	.word	0x0801ad4c

08016eb0 <__swbuf_r>:
 8016eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eb2:	460e      	mov	r6, r1
 8016eb4:	4614      	mov	r4, r2
 8016eb6:	4605      	mov	r5, r0
 8016eb8:	b118      	cbz	r0, 8016ec2 <__swbuf_r+0x12>
 8016eba:	6983      	ldr	r3, [r0, #24]
 8016ebc:	b90b      	cbnz	r3, 8016ec2 <__swbuf_r+0x12>
 8016ebe:	f001 f869 	bl	8017f94 <__sinit>
 8016ec2:	4b27      	ldr	r3, [pc, #156]	; (8016f60 <__swbuf_r+0xb0>)
 8016ec4:	429c      	cmp	r4, r3
 8016ec6:	d12f      	bne.n	8016f28 <__swbuf_r+0x78>
 8016ec8:	686c      	ldr	r4, [r5, #4]
 8016eca:	69a3      	ldr	r3, [r4, #24]
 8016ecc:	60a3      	str	r3, [r4, #8]
 8016ece:	89a3      	ldrh	r3, [r4, #12]
 8016ed0:	0719      	lsls	r1, r3, #28
 8016ed2:	d533      	bpl.n	8016f3c <__swbuf_r+0x8c>
 8016ed4:	6923      	ldr	r3, [r4, #16]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d030      	beq.n	8016f3c <__swbuf_r+0x8c>
 8016eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ede:	b2f6      	uxtb	r6, r6
 8016ee0:	049a      	lsls	r2, r3, #18
 8016ee2:	4637      	mov	r7, r6
 8016ee4:	d534      	bpl.n	8016f50 <__swbuf_r+0xa0>
 8016ee6:	6923      	ldr	r3, [r4, #16]
 8016ee8:	6820      	ldr	r0, [r4, #0]
 8016eea:	1ac0      	subs	r0, r0, r3
 8016eec:	6963      	ldr	r3, [r4, #20]
 8016eee:	4298      	cmp	r0, r3
 8016ef0:	db04      	blt.n	8016efc <__swbuf_r+0x4c>
 8016ef2:	4621      	mov	r1, r4
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	f000 ffb9 	bl	8017e6c <_fflush_r>
 8016efa:	bb28      	cbnz	r0, 8016f48 <__swbuf_r+0x98>
 8016efc:	68a3      	ldr	r3, [r4, #8]
 8016efe:	3b01      	subs	r3, #1
 8016f00:	60a3      	str	r3, [r4, #8]
 8016f02:	6823      	ldr	r3, [r4, #0]
 8016f04:	1c5a      	adds	r2, r3, #1
 8016f06:	6022      	str	r2, [r4, #0]
 8016f08:	701e      	strb	r6, [r3, #0]
 8016f0a:	6963      	ldr	r3, [r4, #20]
 8016f0c:	3001      	adds	r0, #1
 8016f0e:	4298      	cmp	r0, r3
 8016f10:	d004      	beq.n	8016f1c <__swbuf_r+0x6c>
 8016f12:	89a3      	ldrh	r3, [r4, #12]
 8016f14:	07db      	lsls	r3, r3, #31
 8016f16:	d519      	bpl.n	8016f4c <__swbuf_r+0x9c>
 8016f18:	2e0a      	cmp	r6, #10
 8016f1a:	d117      	bne.n	8016f4c <__swbuf_r+0x9c>
 8016f1c:	4621      	mov	r1, r4
 8016f1e:	4628      	mov	r0, r5
 8016f20:	f000 ffa4 	bl	8017e6c <_fflush_r>
 8016f24:	b190      	cbz	r0, 8016f4c <__swbuf_r+0x9c>
 8016f26:	e00f      	b.n	8016f48 <__swbuf_r+0x98>
 8016f28:	4b0e      	ldr	r3, [pc, #56]	; (8016f64 <__swbuf_r+0xb4>)
 8016f2a:	429c      	cmp	r4, r3
 8016f2c:	d101      	bne.n	8016f32 <__swbuf_r+0x82>
 8016f2e:	68ac      	ldr	r4, [r5, #8]
 8016f30:	e7cb      	b.n	8016eca <__swbuf_r+0x1a>
 8016f32:	4b0d      	ldr	r3, [pc, #52]	; (8016f68 <__swbuf_r+0xb8>)
 8016f34:	429c      	cmp	r4, r3
 8016f36:	bf08      	it	eq
 8016f38:	68ec      	ldreq	r4, [r5, #12]
 8016f3a:	e7c6      	b.n	8016eca <__swbuf_r+0x1a>
 8016f3c:	4621      	mov	r1, r4
 8016f3e:	4628      	mov	r0, r5
 8016f40:	f000 f826 	bl	8016f90 <__swsetup_r>
 8016f44:	2800      	cmp	r0, #0
 8016f46:	d0c8      	beq.n	8016eda <__swbuf_r+0x2a>
 8016f48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016f4c:	4638      	mov	r0, r7
 8016f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016f54:	81a3      	strh	r3, [r4, #12]
 8016f56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016f5c:	6663      	str	r3, [r4, #100]	; 0x64
 8016f5e:	e7c2      	b.n	8016ee6 <__swbuf_r+0x36>
 8016f60:	0801adc4 	.word	0x0801adc4
 8016f64:	0801ade4 	.word	0x0801ade4
 8016f68:	0801ada4 	.word	0x0801ada4

08016f6c <_write_r>:
 8016f6c:	b538      	push	{r3, r4, r5, lr}
 8016f6e:	4c07      	ldr	r4, [pc, #28]	; (8016f8c <_write_r+0x20>)
 8016f70:	4605      	mov	r5, r0
 8016f72:	4608      	mov	r0, r1
 8016f74:	4611      	mov	r1, r2
 8016f76:	2200      	movs	r2, #0
 8016f78:	6022      	str	r2, [r4, #0]
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	f7f0 fe66 	bl	8007c4c <_write>
 8016f80:	1c43      	adds	r3, r0, #1
 8016f82:	d102      	bne.n	8016f8a <_write_r+0x1e>
 8016f84:	6823      	ldr	r3, [r4, #0]
 8016f86:	b103      	cbz	r3, 8016f8a <_write_r+0x1e>
 8016f88:	602b      	str	r3, [r5, #0]
 8016f8a:	bd38      	pop	{r3, r4, r5, pc}
 8016f8c:	20007ea8 	.word	0x20007ea8

08016f90 <__swsetup_r>:
 8016f90:	4b32      	ldr	r3, [pc, #200]	; (801705c <__swsetup_r+0xcc>)
 8016f92:	b570      	push	{r4, r5, r6, lr}
 8016f94:	681d      	ldr	r5, [r3, #0]
 8016f96:	4606      	mov	r6, r0
 8016f98:	460c      	mov	r4, r1
 8016f9a:	b125      	cbz	r5, 8016fa6 <__swsetup_r+0x16>
 8016f9c:	69ab      	ldr	r3, [r5, #24]
 8016f9e:	b913      	cbnz	r3, 8016fa6 <__swsetup_r+0x16>
 8016fa0:	4628      	mov	r0, r5
 8016fa2:	f000 fff7 	bl	8017f94 <__sinit>
 8016fa6:	4b2e      	ldr	r3, [pc, #184]	; (8017060 <__swsetup_r+0xd0>)
 8016fa8:	429c      	cmp	r4, r3
 8016faa:	d10f      	bne.n	8016fcc <__swsetup_r+0x3c>
 8016fac:	686c      	ldr	r4, [r5, #4]
 8016fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fb2:	b29a      	uxth	r2, r3
 8016fb4:	0715      	lsls	r5, r2, #28
 8016fb6:	d42c      	bmi.n	8017012 <__swsetup_r+0x82>
 8016fb8:	06d0      	lsls	r0, r2, #27
 8016fba:	d411      	bmi.n	8016fe0 <__swsetup_r+0x50>
 8016fbc:	2209      	movs	r2, #9
 8016fbe:	6032      	str	r2, [r6, #0]
 8016fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fc4:	81a3      	strh	r3, [r4, #12]
 8016fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fca:	bd70      	pop	{r4, r5, r6, pc}
 8016fcc:	4b25      	ldr	r3, [pc, #148]	; (8017064 <__swsetup_r+0xd4>)
 8016fce:	429c      	cmp	r4, r3
 8016fd0:	d101      	bne.n	8016fd6 <__swsetup_r+0x46>
 8016fd2:	68ac      	ldr	r4, [r5, #8]
 8016fd4:	e7eb      	b.n	8016fae <__swsetup_r+0x1e>
 8016fd6:	4b24      	ldr	r3, [pc, #144]	; (8017068 <__swsetup_r+0xd8>)
 8016fd8:	429c      	cmp	r4, r3
 8016fda:	bf08      	it	eq
 8016fdc:	68ec      	ldreq	r4, [r5, #12]
 8016fde:	e7e6      	b.n	8016fae <__swsetup_r+0x1e>
 8016fe0:	0751      	lsls	r1, r2, #29
 8016fe2:	d512      	bpl.n	801700a <__swsetup_r+0x7a>
 8016fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fe6:	b141      	cbz	r1, 8016ffa <__swsetup_r+0x6a>
 8016fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fec:	4299      	cmp	r1, r3
 8016fee:	d002      	beq.n	8016ff6 <__swsetup_r+0x66>
 8016ff0:	4630      	mov	r0, r6
 8016ff2:	f001 f8a5 	bl	8018140 <_free_r>
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8016ffa:	89a3      	ldrh	r3, [r4, #12]
 8016ffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017000:	81a3      	strh	r3, [r4, #12]
 8017002:	2300      	movs	r3, #0
 8017004:	6063      	str	r3, [r4, #4]
 8017006:	6923      	ldr	r3, [r4, #16]
 8017008:	6023      	str	r3, [r4, #0]
 801700a:	89a3      	ldrh	r3, [r4, #12]
 801700c:	f043 0308 	orr.w	r3, r3, #8
 8017010:	81a3      	strh	r3, [r4, #12]
 8017012:	6923      	ldr	r3, [r4, #16]
 8017014:	b94b      	cbnz	r3, 801702a <__swsetup_r+0x9a>
 8017016:	89a3      	ldrh	r3, [r4, #12]
 8017018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801701c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017020:	d003      	beq.n	801702a <__swsetup_r+0x9a>
 8017022:	4621      	mov	r1, r4
 8017024:	4630      	mov	r0, r6
 8017026:	f001 f99f 	bl	8018368 <__smakebuf_r>
 801702a:	89a2      	ldrh	r2, [r4, #12]
 801702c:	f012 0301 	ands.w	r3, r2, #1
 8017030:	d00c      	beq.n	801704c <__swsetup_r+0xbc>
 8017032:	2300      	movs	r3, #0
 8017034:	60a3      	str	r3, [r4, #8]
 8017036:	6963      	ldr	r3, [r4, #20]
 8017038:	425b      	negs	r3, r3
 801703a:	61a3      	str	r3, [r4, #24]
 801703c:	6923      	ldr	r3, [r4, #16]
 801703e:	b953      	cbnz	r3, 8017056 <__swsetup_r+0xc6>
 8017040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017044:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017048:	d1ba      	bne.n	8016fc0 <__swsetup_r+0x30>
 801704a:	bd70      	pop	{r4, r5, r6, pc}
 801704c:	0792      	lsls	r2, r2, #30
 801704e:	bf58      	it	pl
 8017050:	6963      	ldrpl	r3, [r4, #20]
 8017052:	60a3      	str	r3, [r4, #8]
 8017054:	e7f2      	b.n	801703c <__swsetup_r+0xac>
 8017056:	2000      	movs	r0, #0
 8017058:	e7f7      	b.n	801704a <__swsetup_r+0xba>
 801705a:	bf00      	nop
 801705c:	20000034 	.word	0x20000034
 8017060:	0801adc4 	.word	0x0801adc4
 8017064:	0801ade4 	.word	0x0801ade4
 8017068:	0801ada4 	.word	0x0801ada4

0801706c <__register_exitproc>:
 801706c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017070:	4d35      	ldr	r5, [pc, #212]	; (8017148 <__register_exitproc+0xdc>)
 8017072:	4680      	mov	r8, r0
 8017074:	6828      	ldr	r0, [r5, #0]
 8017076:	4699      	mov	r9, r3
 8017078:	460f      	mov	r7, r1
 801707a:	4692      	mov	sl, r2
 801707c:	f7fe fa98 	bl	80155b0 <__retarget_lock_acquire_recursive>
 8017080:	4b32      	ldr	r3, [pc, #200]	; (801714c <__register_exitproc+0xe0>)
 8017082:	681e      	ldr	r6, [r3, #0]
 8017084:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8017086:	b93c      	cbnz	r4, 8017098 <__register_exitproc+0x2c>
 8017088:	4b31      	ldr	r3, [pc, #196]	; (8017150 <__register_exitproc+0xe4>)
 801708a:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 801708e:	64b4      	str	r4, [r6, #72]	; 0x48
 8017090:	b113      	cbz	r3, 8017098 <__register_exitproc+0x2c>
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8017098:	6863      	ldr	r3, [r4, #4]
 801709a:	2b1f      	cmp	r3, #31
 801709c:	dd46      	ble.n	801712c <__register_exitproc+0xc0>
 801709e:	4b2d      	ldr	r3, [pc, #180]	; (8017154 <__register_exitproc+0xe8>)
 80170a0:	b933      	cbnz	r3, 80170b0 <__register_exitproc+0x44>
 80170a2:	6828      	ldr	r0, [r5, #0]
 80170a4:	f7fe fa86 	bl	80155b4 <__retarget_lock_release_recursive>
 80170a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170b0:	208c      	movs	r0, #140	; 0x8c
 80170b2:	f7fe fa81 	bl	80155b8 <malloc>
 80170b6:	4604      	mov	r4, r0
 80170b8:	2800      	cmp	r0, #0
 80170ba:	d0f2      	beq.n	80170a2 <__register_exitproc+0x36>
 80170bc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80170be:	6003      	str	r3, [r0, #0]
 80170c0:	2200      	movs	r2, #0
 80170c2:	6042      	str	r2, [r0, #4]
 80170c4:	64b0      	str	r0, [r6, #72]	; 0x48
 80170c6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 80170ca:	f1b8 0f00 	cmp.w	r8, #0
 80170ce:	d021      	beq.n	8017114 <__register_exitproc+0xa8>
 80170d0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80170d4:	f7fe fa70 	bl	80155b8 <malloc>
 80170d8:	b390      	cbz	r0, 8017140 <__register_exitproc+0xd4>
 80170da:	2300      	movs	r3, #0
 80170dc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80170e0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80170e4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80170e8:	6862      	ldr	r2, [r4, #4]
 80170ea:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 80170ee:	2301      	movs	r3, #1
 80170f0:	4093      	lsls	r3, r2
 80170f2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80170f6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80170fa:	431a      	orrs	r2, r3
 80170fc:	f1b8 0f02 	cmp.w	r8, #2
 8017100:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8017104:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 8017108:	bf02      	ittt	eq
 801710a:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801710e:	4313      	orreq	r3, r2
 8017110:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8017114:	6863      	ldr	r3, [r4, #4]
 8017116:	6828      	ldr	r0, [r5, #0]
 8017118:	1c5a      	adds	r2, r3, #1
 801711a:	3302      	adds	r3, #2
 801711c:	6062      	str	r2, [r4, #4]
 801711e:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8017122:	f7fe fa47 	bl	80155b4 <__retarget_lock_release_recursive>
 8017126:	2000      	movs	r0, #0
 8017128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801712c:	f1b8 0f00 	cmp.w	r8, #0
 8017130:	d0f0      	beq.n	8017114 <__register_exitproc+0xa8>
 8017132:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8017136:	2800      	cmp	r0, #0
 8017138:	d1d6      	bne.n	80170e8 <__register_exitproc+0x7c>
 801713a:	4b06      	ldr	r3, [pc, #24]	; (8017154 <__register_exitproc+0xe8>)
 801713c:	2b00      	cmp	r3, #0
 801713e:	d1c7      	bne.n	80170d0 <__register_exitproc+0x64>
 8017140:	6828      	ldr	r0, [r5, #0]
 8017142:	f7fe fa36 	bl	80155b2 <__retarget_lock_release>
 8017146:	e7af      	b.n	80170a8 <__register_exitproc+0x3c>
 8017148:	20000538 	.word	0x20000538
 801714c:	0801ad38 	.word	0x0801ad38
 8017150:	0801ad3c 	.word	0x0801ad3c
 8017154:	080155b9 	.word	0x080155b9

08017158 <quorem>:
 8017158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801715c:	6903      	ldr	r3, [r0, #16]
 801715e:	690c      	ldr	r4, [r1, #16]
 8017160:	429c      	cmp	r4, r3
 8017162:	4680      	mov	r8, r0
 8017164:	f300 8082 	bgt.w	801726c <quorem+0x114>
 8017168:	3c01      	subs	r4, #1
 801716a:	f101 0714 	add.w	r7, r1, #20
 801716e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8017172:	f100 0614 	add.w	r6, r0, #20
 8017176:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801717a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801717e:	eb06 030e 	add.w	r3, r6, lr
 8017182:	3501      	adds	r5, #1
 8017184:	eb07 090e 	add.w	r9, r7, lr
 8017188:	9301      	str	r3, [sp, #4]
 801718a:	fbb0 f5f5 	udiv	r5, r0, r5
 801718e:	b395      	cbz	r5, 80171f6 <quorem+0x9e>
 8017190:	f04f 0a00 	mov.w	sl, #0
 8017194:	4638      	mov	r0, r7
 8017196:	46b4      	mov	ip, r6
 8017198:	46d3      	mov	fp, sl
 801719a:	f850 2b04 	ldr.w	r2, [r0], #4
 801719e:	b293      	uxth	r3, r2
 80171a0:	fb05 a303 	mla	r3, r5, r3, sl
 80171a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80171a8:	b29b      	uxth	r3, r3
 80171aa:	ebab 0303 	sub.w	r3, fp, r3
 80171ae:	0c12      	lsrs	r2, r2, #16
 80171b0:	f8bc b000 	ldrh.w	fp, [ip]
 80171b4:	fb05 a202 	mla	r2, r5, r2, sl
 80171b8:	fa13 f38b 	uxtah	r3, r3, fp
 80171bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80171c0:	fa1f fb82 	uxth.w	fp, r2
 80171c4:	f8dc 2000 	ldr.w	r2, [ip]
 80171c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80171cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80171d0:	b29b      	uxth	r3, r3
 80171d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80171d6:	4581      	cmp	r9, r0
 80171d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80171dc:	f84c 3b04 	str.w	r3, [ip], #4
 80171e0:	d2db      	bcs.n	801719a <quorem+0x42>
 80171e2:	f856 300e 	ldr.w	r3, [r6, lr]
 80171e6:	b933      	cbnz	r3, 80171f6 <quorem+0x9e>
 80171e8:	9b01      	ldr	r3, [sp, #4]
 80171ea:	3b04      	subs	r3, #4
 80171ec:	429e      	cmp	r6, r3
 80171ee:	461a      	mov	r2, r3
 80171f0:	d330      	bcc.n	8017254 <quorem+0xfc>
 80171f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80171f6:	4640      	mov	r0, r8
 80171f8:	f001 faff 	bl	80187fa <__mcmp>
 80171fc:	2800      	cmp	r0, #0
 80171fe:	db25      	blt.n	801724c <quorem+0xf4>
 8017200:	3501      	adds	r5, #1
 8017202:	4630      	mov	r0, r6
 8017204:	f04f 0e00 	mov.w	lr, #0
 8017208:	f857 2b04 	ldr.w	r2, [r7], #4
 801720c:	f8d0 c000 	ldr.w	ip, [r0]
 8017210:	b293      	uxth	r3, r2
 8017212:	ebae 0303 	sub.w	r3, lr, r3
 8017216:	0c12      	lsrs	r2, r2, #16
 8017218:	fa13 f38c 	uxtah	r3, r3, ip
 801721c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017224:	b29b      	uxth	r3, r3
 8017226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801722a:	45b9      	cmp	r9, r7
 801722c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017230:	f840 3b04 	str.w	r3, [r0], #4
 8017234:	d2e8      	bcs.n	8017208 <quorem+0xb0>
 8017236:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801723a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801723e:	b92a      	cbnz	r2, 801724c <quorem+0xf4>
 8017240:	3b04      	subs	r3, #4
 8017242:	429e      	cmp	r6, r3
 8017244:	461a      	mov	r2, r3
 8017246:	d30b      	bcc.n	8017260 <quorem+0x108>
 8017248:	f8c8 4010 	str.w	r4, [r8, #16]
 801724c:	4628      	mov	r0, r5
 801724e:	b003      	add	sp, #12
 8017250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017254:	6812      	ldr	r2, [r2, #0]
 8017256:	3b04      	subs	r3, #4
 8017258:	2a00      	cmp	r2, #0
 801725a:	d1ca      	bne.n	80171f2 <quorem+0x9a>
 801725c:	3c01      	subs	r4, #1
 801725e:	e7c5      	b.n	80171ec <quorem+0x94>
 8017260:	6812      	ldr	r2, [r2, #0]
 8017262:	3b04      	subs	r3, #4
 8017264:	2a00      	cmp	r2, #0
 8017266:	d1ef      	bne.n	8017248 <quorem+0xf0>
 8017268:	3c01      	subs	r4, #1
 801726a:	e7ea      	b.n	8017242 <quorem+0xea>
 801726c:	2000      	movs	r0, #0
 801726e:	e7ee      	b.n	801724e <quorem+0xf6>

08017270 <_dtoa_r>:
 8017270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017274:	ec57 6b10 	vmov	r6, r7, d0
 8017278:	b095      	sub	sp, #84	; 0x54
 801727a:	e9cd 6700 	strd	r6, r7, [sp]
 801727e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017280:	9107      	str	r1, [sp, #28]
 8017282:	4605      	mov	r5, r0
 8017284:	920b      	str	r2, [sp, #44]	; 0x2c
 8017286:	9310      	str	r3, [sp, #64]	; 0x40
 8017288:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801728a:	b93e      	cbnz	r6, 801729c <_dtoa_r+0x2c>
 801728c:	2010      	movs	r0, #16
 801728e:	f7fe f993 	bl	80155b8 <malloc>
 8017292:	6268      	str	r0, [r5, #36]	; 0x24
 8017294:	6046      	str	r6, [r0, #4]
 8017296:	6086      	str	r6, [r0, #8]
 8017298:	6006      	str	r6, [r0, #0]
 801729a:	60c6      	str	r6, [r0, #12]
 801729c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801729e:	6819      	ldr	r1, [r3, #0]
 80172a0:	b151      	cbz	r1, 80172b8 <_dtoa_r+0x48>
 80172a2:	685a      	ldr	r2, [r3, #4]
 80172a4:	604a      	str	r2, [r1, #4]
 80172a6:	2301      	movs	r3, #1
 80172a8:	4093      	lsls	r3, r2
 80172aa:	608b      	str	r3, [r1, #8]
 80172ac:	4628      	mov	r0, r5
 80172ae:	f001 f8cf 	bl	8018450 <_Bfree>
 80172b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80172b4:	2200      	movs	r2, #0
 80172b6:	601a      	str	r2, [r3, #0]
 80172b8:	9b01      	ldr	r3, [sp, #4]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	bfbf      	itttt	lt
 80172be:	2301      	movlt	r3, #1
 80172c0:	6023      	strlt	r3, [r4, #0]
 80172c2:	9b01      	ldrlt	r3, [sp, #4]
 80172c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80172c8:	bfb2      	itee	lt
 80172ca:	9301      	strlt	r3, [sp, #4]
 80172cc:	2300      	movge	r3, #0
 80172ce:	6023      	strge	r3, [r4, #0]
 80172d0:	9c01      	ldr	r4, [sp, #4]
 80172d2:	4b73      	ldr	r3, [pc, #460]	; (80174a0 <_dtoa_r+0x230>)
 80172d4:	43a3      	bics	r3, r4
 80172d6:	d118      	bne.n	801730a <_dtoa_r+0x9a>
 80172d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80172da:	f242 730f 	movw	r3, #9999	; 0x270f
 80172de:	6013      	str	r3, [r2, #0]
 80172e0:	9b00      	ldr	r3, [sp, #0]
 80172e2:	b923      	cbnz	r3, 80172ee <_dtoa_r+0x7e>
 80172e4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80172e8:	2c00      	cmp	r4, #0
 80172ea:	f000 8518 	beq.w	8017d1e <_dtoa_r+0xaae>
 80172ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80172f0:	b93b      	cbnz	r3, 8017302 <_dtoa_r+0x92>
 80172f2:	4b6c      	ldr	r3, [pc, #432]	; (80174a4 <_dtoa_r+0x234>)
 80172f4:	e01d      	b.n	8017332 <_dtoa_r+0xc2>
 80172f6:	4b6c      	ldr	r3, [pc, #432]	; (80174a8 <_dtoa_r+0x238>)
 80172f8:	9304      	str	r3, [sp, #16]
 80172fa:	3308      	adds	r3, #8
 80172fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80172fe:	6013      	str	r3, [r2, #0]
 8017300:	e2a6      	b.n	8017850 <_dtoa_r+0x5e0>
 8017302:	4b68      	ldr	r3, [pc, #416]	; (80174a4 <_dtoa_r+0x234>)
 8017304:	9304      	str	r3, [sp, #16]
 8017306:	3303      	adds	r3, #3
 8017308:	e7f8      	b.n	80172fc <_dtoa_r+0x8c>
 801730a:	ed9d 7b00 	vldr	d7, [sp]
 801730e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017316:	ed8d 7b04 	vstr	d7, [sp, #16]
 801731a:	d10c      	bne.n	8017336 <_dtoa_r+0xc6>
 801731c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801731e:	2301      	movs	r3, #1
 8017320:	6013      	str	r3, [r2, #0]
 8017322:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017324:	2b00      	cmp	r3, #0
 8017326:	f000 84f7 	beq.w	8017d18 <_dtoa_r+0xaa8>
 801732a:	4b60      	ldr	r3, [pc, #384]	; (80174ac <_dtoa_r+0x23c>)
 801732c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801732e:	6013      	str	r3, [r2, #0]
 8017330:	3b01      	subs	r3, #1
 8017332:	9304      	str	r3, [sp, #16]
 8017334:	e28c      	b.n	8017850 <_dtoa_r+0x5e0>
 8017336:	a913      	add	r1, sp, #76	; 0x4c
 8017338:	aa12      	add	r2, sp, #72	; 0x48
 801733a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801733e:	4628      	mov	r0, r5
 8017340:	f001 fad3 	bl	80188ea <__d2b>
 8017344:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8017348:	9003      	str	r0, [sp, #12]
 801734a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801734c:	2900      	cmp	r1, #0
 801734e:	d046      	beq.n	80173de <_dtoa_r+0x16e>
 8017350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017354:	f3c3 0413 	ubfx	r4, r3, #0, #20
 8017358:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801735c:	f2a1 3aff 	subw	sl, r1, #1023	; 0x3ff
 8017360:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017364:	2100      	movs	r1, #0
 8017366:	ee07 aa90 	vmov	s15, sl
 801736a:	ec43 2b16 	vmov	d6, r2, r3
 801736e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017372:	ed9f 4b45 	vldr	d4, [pc, #276]	; 8017488 <_dtoa_r+0x218>
 8017376:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801737a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801737e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8017490 <_dtoa_r+0x220>
 8017382:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017386:	eeb0 7b46 	vmov.f64	d7, d6
 801738a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8017498 <_dtoa_r+0x228>
 801738e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017392:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017396:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801739a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801739e:	9111      	str	r1, [sp, #68]	; 0x44
 80173a0:	ee16 ba90 	vmov	fp, s13
 80173a4:	d508      	bpl.n	80173b8 <_dtoa_r+0x148>
 80173a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80173aa:	eeb4 7b46 	vcmp.f64	d7, d6
 80173ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173b2:	bf18      	it	ne
 80173b4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80173b8:	f1bb 0f16 	cmp.w	fp, #22
 80173bc:	d831      	bhi.n	8017422 <_dtoa_r+0x1b2>
 80173be:	4b3c      	ldr	r3, [pc, #240]	; (80174b0 <_dtoa_r+0x240>)
 80173c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80173c4:	ed93 7b00 	vldr	d7, [r3]
 80173c8:	ed9d 6b00 	vldr	d6, [sp]
 80173cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80173d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173d4:	dd01      	ble.n	80173da <_dtoa_r+0x16a>
 80173d6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80173da:	2300      	movs	r3, #0
 80173dc:	e022      	b.n	8017424 <_dtoa_r+0x1b4>
 80173de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80173e0:	4401      	add	r1, r0
 80173e2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80173e6:	2b20      	cmp	r3, #32
 80173e8:	dd15      	ble.n	8017416 <_dtoa_r+0x1a6>
 80173ea:	9e00      	ldr	r6, [sp, #0]
 80173ec:	f201 4212 	addw	r2, r1, #1042	; 0x412
 80173f0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80173f4:	fa26 f202 	lsr.w	r2, r6, r2
 80173f8:	fa04 f303 	lsl.w	r3, r4, r3
 80173fc:	431a      	orrs	r2, r3
 80173fe:	ee07 2a90 	vmov	s15, r2
 8017402:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017406:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 801740a:	ec53 2b17 	vmov	r2, r3, d7
 801740e:	2101      	movs	r1, #1
 8017410:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 8017414:	e7a7      	b.n	8017366 <_dtoa_r+0xf6>
 8017416:	f1c3 0220 	rsb	r2, r3, #32
 801741a:	9b00      	ldr	r3, [sp, #0]
 801741c:	fa03 f202 	lsl.w	r2, r3, r2
 8017420:	e7ed      	b.n	80173fe <_dtoa_r+0x18e>
 8017422:	2301      	movs	r3, #1
 8017424:	eba0 0a0a 	sub.w	sl, r0, sl
 8017428:	f1ba 0701 	subs.w	r7, sl, #1
 801742c:	bf46      	itte	mi
 801742e:	f1ca 0a01 	rsbmi	sl, sl, #1
 8017432:	2700      	movmi	r7, #0
 8017434:	f04f 0a00 	movpl.w	sl, #0
 8017438:	f1bb 0f00 	cmp.w	fp, #0
 801743c:	930d      	str	r3, [sp, #52]	; 0x34
 801743e:	bfbc      	itt	lt
 8017440:	2300      	movlt	r3, #0
 8017442:	930c      	strlt	r3, [sp, #48]	; 0x30
 8017444:	9b07      	ldr	r3, [sp, #28]
 8017446:	bfa3      	ittte	ge
 8017448:	f8cd b030 	strge.w	fp, [sp, #48]	; 0x30
 801744c:	445f      	addge	r7, fp
 801744e:	f04f 0800 	movge.w	r8, #0
 8017452:	ebaa 0a0b 	sublt.w	sl, sl, fp
 8017456:	bfb8      	it	lt
 8017458:	f1cb 0800 	rsblt	r8, fp, #0
 801745c:	2b09      	cmp	r3, #9
 801745e:	f200 80f8 	bhi.w	8017652 <_dtoa_r+0x3e2>
 8017462:	2b05      	cmp	r3, #5
 8017464:	bfc4      	itt	gt
 8017466:	3b04      	subgt	r3, #4
 8017468:	9307      	strgt	r3, [sp, #28]
 801746a:	9b07      	ldr	r3, [sp, #28]
 801746c:	f1a3 0302 	sub.w	r3, r3, #2
 8017470:	bfcc      	ite	gt
 8017472:	2400      	movgt	r4, #0
 8017474:	2401      	movle	r4, #1
 8017476:	2b03      	cmp	r3, #3
 8017478:	f200 80f7 	bhi.w	801766a <_dtoa_r+0x3fa>
 801747c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017480:	00e700e5 	.word	0x00e700e5
 8017484:	00d9001a 	.word	0x00d9001a
 8017488:	636f4361 	.word	0x636f4361
 801748c:	3fd287a7 	.word	0x3fd287a7
 8017490:	8b60c8b3 	.word	0x8b60c8b3
 8017494:	3fc68a28 	.word	0x3fc68a28
 8017498:	509f79fb 	.word	0x509f79fb
 801749c:	3fd34413 	.word	0x3fd34413
 80174a0:	7ff00000 	.word	0x7ff00000
 80174a4:	0801ad9d 	.word	0x0801ad9d
 80174a8:	0801ad94 	.word	0x0801ad94
 80174ac:	0801ad73 	.word	0x0801ad73
 80174b0:	0801ae30 	.word	0x0801ae30
 80174b4:	2301      	movs	r3, #1
 80174b6:	930a      	str	r3, [sp, #40]	; 0x28
 80174b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	f340 80d8 	ble.w	8017670 <_dtoa_r+0x400>
 80174c0:	9306      	str	r3, [sp, #24]
 80174c2:	4699      	mov	r9, r3
 80174c4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80174c6:	2200      	movs	r2, #0
 80174c8:	6072      	str	r2, [r6, #4]
 80174ca:	2104      	movs	r1, #4
 80174cc:	f101 0214 	add.w	r2, r1, #20
 80174d0:	429a      	cmp	r2, r3
 80174d2:	f240 80d2 	bls.w	801767a <_dtoa_r+0x40a>
 80174d6:	6871      	ldr	r1, [r6, #4]
 80174d8:	4628      	mov	r0, r5
 80174da:	f000 ff85 	bl	80183e8 <_Balloc>
 80174de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80174e0:	6030      	str	r0, [r6, #0]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	9304      	str	r3, [sp, #16]
 80174e6:	f1b9 0f0e 	cmp.w	r9, #14
 80174ea:	d875      	bhi.n	80175d8 <_dtoa_r+0x368>
 80174ec:	2c00      	cmp	r4, #0
 80174ee:	d073      	beq.n	80175d8 <_dtoa_r+0x368>
 80174f0:	ed9d 7b00 	vldr	d7, [sp]
 80174f4:	f1bb 0f00 	cmp.w	fp, #0
 80174f8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80174fc:	f340 80ce 	ble.w	801769c <_dtoa_r+0x42c>
 8017500:	4ab5      	ldr	r2, [pc, #724]	; (80177d8 <_dtoa_r+0x568>)
 8017502:	f00b 030f 	and.w	r3, fp, #15
 8017506:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801750a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801750e:	ed93 7b00 	vldr	d7, [r3]
 8017512:	06d3      	lsls	r3, r2, #27
 8017514:	f140 80b6 	bpl.w	8017684 <_dtoa_r+0x414>
 8017518:	4bb0      	ldr	r3, [pc, #704]	; (80177dc <_dtoa_r+0x56c>)
 801751a:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
 801751e:	ed93 6b08 	vldr	d6, [r3, #32]
 8017522:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8017526:	ed8d 5b00 	vstr	d5, [sp]
 801752a:	f002 020f 	and.w	r2, r2, #15
 801752e:	2303      	movs	r3, #3
 8017530:	49aa      	ldr	r1, [pc, #680]	; (80177dc <_dtoa_r+0x56c>)
 8017532:	2a00      	cmp	r2, #0
 8017534:	f040 80a8 	bne.w	8017688 <_dtoa_r+0x418>
 8017538:	ed9d 5b00 	vldr	d5, [sp]
 801753c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8017540:	ed8d 6b00 	vstr	d6, [sp]
 8017544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017546:	2a00      	cmp	r2, #0
 8017548:	f000 80da 	beq.w	8017700 <_dtoa_r+0x490>
 801754c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017550:	ed9d 7b00 	vldr	d7, [sp]
 8017554:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801755c:	f140 80d0 	bpl.w	8017700 <_dtoa_r+0x490>
 8017560:	f1b9 0f00 	cmp.w	r9, #0
 8017564:	f000 80cc 	beq.w	8017700 <_dtoa_r+0x490>
 8017568:	9a06      	ldr	r2, [sp, #24]
 801756a:	2a00      	cmp	r2, #0
 801756c:	dd30      	ble.n	80175d0 <_dtoa_r+0x360>
 801756e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8017572:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017576:	ed8d 7b00 	vstr	d7, [sp]
 801757a:	9c06      	ldr	r4, [sp, #24]
 801757c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8017580:	3301      	adds	r3, #1
 8017582:	ed9d 6b00 	vldr	d6, [sp]
 8017586:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801758a:	ee07 3a90 	vmov	s15, r3
 801758e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017592:	eea7 5b06 	vfma.f64	d5, d7, d6
 8017596:	ed8d 5b00 	vstr	d5, [sp]
 801759a:	9b01      	ldr	r3, [sp, #4]
 801759c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80175a0:	9301      	str	r3, [sp, #4]
 80175a2:	2c00      	cmp	r4, #0
 80175a4:	f040 80af 	bne.w	8017706 <_dtoa_r+0x496>
 80175a8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80175ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80175b0:	ed9d 7b00 	vldr	d7, [sp]
 80175b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80175b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175bc:	f300 8300 	bgt.w	8017bc0 <_dtoa_r+0x950>
 80175c0:	eeb1 7b47 	vneg.f64	d7, d7
 80175c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80175c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175cc:	f100 82f6 	bmi.w	8017bbc <_dtoa_r+0x94c>
 80175d0:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 80175d4:	e88d 0018 	stmia.w	sp, {r3, r4}
 80175d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80175da:	2b00      	cmp	r3, #0
 80175dc:	f2c0 8158 	blt.w	8017890 <_dtoa_r+0x620>
 80175e0:	f1bb 0f0e 	cmp.w	fp, #14
 80175e4:	f300 8154 	bgt.w	8017890 <_dtoa_r+0x620>
 80175e8:	4b7b      	ldr	r3, [pc, #492]	; (80177d8 <_dtoa_r+0x568>)
 80175ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80175ee:	ed93 6b00 	vldr	d6, [r3]
 80175f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	f280 80f3 	bge.w	80177e0 <_dtoa_r+0x570>
 80175fa:	f1b9 0f00 	cmp.w	r9, #0
 80175fe:	f300 80ef 	bgt.w	80177e0 <_dtoa_r+0x570>
 8017602:	f040 82da 	bne.w	8017bba <_dtoa_r+0x94a>
 8017606:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801760a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801760e:	ed9d 7b00 	vldr	d7, [sp]
 8017612:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801761a:	464c      	mov	r4, r9
 801761c:	464e      	mov	r6, r9
 801761e:	f280 82ac 	bge.w	8017b7a <_dtoa_r+0x90a>
 8017622:	9b04      	ldr	r3, [sp, #16]
 8017624:	9904      	ldr	r1, [sp, #16]
 8017626:	2231      	movs	r2, #49	; 0x31
 8017628:	3301      	adds	r3, #1
 801762a:	700a      	strb	r2, [r1, #0]
 801762c:	f10b 0b01 	add.w	fp, fp, #1
 8017630:	e2a7      	b.n	8017b82 <_dtoa_r+0x912>
 8017632:	2301      	movs	r3, #1
 8017634:	930a      	str	r3, [sp, #40]	; 0x28
 8017636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017638:	445b      	add	r3, fp
 801763a:	f103 0901 	add.w	r9, r3, #1
 801763e:	9306      	str	r3, [sp, #24]
 8017640:	464b      	mov	r3, r9
 8017642:	2b01      	cmp	r3, #1
 8017644:	bfb8      	it	lt
 8017646:	2301      	movlt	r3, #1
 8017648:	e73c      	b.n	80174c4 <_dtoa_r+0x254>
 801764a:	2300      	movs	r3, #0
 801764c:	e733      	b.n	80174b6 <_dtoa_r+0x246>
 801764e:	2300      	movs	r3, #0
 8017650:	e7f0      	b.n	8017634 <_dtoa_r+0x3c4>
 8017652:	2401      	movs	r4, #1
 8017654:	2300      	movs	r3, #0
 8017656:	9307      	str	r3, [sp, #28]
 8017658:	940a      	str	r4, [sp, #40]	; 0x28
 801765a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801765e:	9306      	str	r3, [sp, #24]
 8017660:	4699      	mov	r9, r3
 8017662:	2200      	movs	r2, #0
 8017664:	2312      	movs	r3, #18
 8017666:	920b      	str	r2, [sp, #44]	; 0x2c
 8017668:	e72c      	b.n	80174c4 <_dtoa_r+0x254>
 801766a:	2301      	movs	r3, #1
 801766c:	930a      	str	r3, [sp, #40]	; 0x28
 801766e:	e7f4      	b.n	801765a <_dtoa_r+0x3ea>
 8017670:	2301      	movs	r3, #1
 8017672:	9306      	str	r3, [sp, #24]
 8017674:	4699      	mov	r9, r3
 8017676:	461a      	mov	r2, r3
 8017678:	e7f5      	b.n	8017666 <_dtoa_r+0x3f6>
 801767a:	6872      	ldr	r2, [r6, #4]
 801767c:	3201      	adds	r2, #1
 801767e:	6072      	str	r2, [r6, #4]
 8017680:	0049      	lsls	r1, r1, #1
 8017682:	e723      	b.n	80174cc <_dtoa_r+0x25c>
 8017684:	2302      	movs	r3, #2
 8017686:	e753      	b.n	8017530 <_dtoa_r+0x2c0>
 8017688:	07d6      	lsls	r6, r2, #31
 801768a:	d504      	bpl.n	8017696 <_dtoa_r+0x426>
 801768c:	ed91 6b00 	vldr	d6, [r1]
 8017690:	3301      	adds	r3, #1
 8017692:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017696:	1052      	asrs	r2, r2, #1
 8017698:	3108      	adds	r1, #8
 801769a:	e74a      	b.n	8017532 <_dtoa_r+0x2c2>
 801769c:	d02e      	beq.n	80176fc <_dtoa_r+0x48c>
 801769e:	f1cb 0200 	rsb	r2, fp, #0
 80176a2:	4b4d      	ldr	r3, [pc, #308]	; (80177d8 <_dtoa_r+0x568>)
 80176a4:	f002 010f 	and.w	r1, r2, #15
 80176a8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80176ac:	ed93 7b00 	vldr	d7, [r3]
 80176b0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80176b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80176b8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80176bc:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80176c0:	4946      	ldr	r1, [pc, #280]	; (80177dc <_dtoa_r+0x56c>)
 80176c2:	e88d 0018 	stmia.w	sp, {r3, r4}
 80176c6:	1112      	asrs	r2, r2, #4
 80176c8:	2000      	movs	r0, #0
 80176ca:	2302      	movs	r3, #2
 80176cc:	b93a      	cbnz	r2, 80176de <_dtoa_r+0x46e>
 80176ce:	2800      	cmp	r0, #0
 80176d0:	f43f af38 	beq.w	8017544 <_dtoa_r+0x2d4>
 80176d4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80176d8:	e88d 0006 	stmia.w	sp, {r1, r2}
 80176dc:	e732      	b.n	8017544 <_dtoa_r+0x2d4>
 80176de:	07d4      	lsls	r4, r2, #31
 80176e0:	d509      	bpl.n	80176f6 <_dtoa_r+0x486>
 80176e2:	ed9d 6b08 	vldr	d6, [sp, #32]
 80176e6:	ed91 7b00 	vldr	d7, [r1]
 80176ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80176ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80176f2:	3301      	adds	r3, #1
 80176f4:	2001      	movs	r0, #1
 80176f6:	1052      	asrs	r2, r2, #1
 80176f8:	3108      	adds	r1, #8
 80176fa:	e7e7      	b.n	80176cc <_dtoa_r+0x45c>
 80176fc:	2302      	movs	r3, #2
 80176fe:	e721      	b.n	8017544 <_dtoa_r+0x2d4>
 8017700:	465a      	mov	r2, fp
 8017702:	464c      	mov	r4, r9
 8017704:	e73d      	b.n	8017582 <_dtoa_r+0x312>
 8017706:	9804      	ldr	r0, [sp, #16]
 8017708:	4b33      	ldr	r3, [pc, #204]	; (80177d8 <_dtoa_r+0x568>)
 801770a:	1e61      	subs	r1, r4, #1
 801770c:	4404      	add	r4, r0
 801770e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017710:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8017714:	ed93 5b00 	vldr	d5, [r3]
 8017718:	b358      	cbz	r0, 8017772 <_dtoa_r+0x502>
 801771a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801771e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8017722:	ed9d 5b00 	vldr	d5, [sp]
 8017726:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801772a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801772e:	9b04      	ldr	r3, [sp, #16]
 8017730:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017734:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017738:	ee14 1a90 	vmov	r1, s9
 801773c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017740:	3130      	adds	r1, #48	; 0x30
 8017742:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017746:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801774a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801774e:	f803 1b01 	strb.w	r1, [r3], #1
 8017752:	d439      	bmi.n	80177c8 <_dtoa_r+0x558>
 8017754:	ee32 5b46 	vsub.f64	d5, d2, d6
 8017758:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801775c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017760:	d47b      	bmi.n	801785a <_dtoa_r+0x5ea>
 8017762:	42a3      	cmp	r3, r4
 8017764:	f43f af34 	beq.w	80175d0 <_dtoa_r+0x360>
 8017768:	ee27 7b03 	vmul.f64	d7, d7, d3
 801776c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017770:	e7e0      	b.n	8017734 <_dtoa_r+0x4c4>
 8017772:	ed9d 7b00 	vldr	d7, [sp]
 8017776:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801777a:	9b04      	ldr	r3, [sp, #16]
 801777c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8017780:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017784:	ee14 1a90 	vmov	r1, s9
 8017788:	3130      	adds	r1, #48	; 0x30
 801778a:	f803 1b01 	strb.w	r1, [r3], #1
 801778e:	429c      	cmp	r4, r3
 8017790:	eeb8 7be4 	vcvt.f64.s32	d7, s9
 8017794:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017798:	d11a      	bne.n	80177d0 <_dtoa_r+0x560>
 801779a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801779e:	ee35 4b07 	vadd.f64	d4, d5, d7
 80177a2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80177a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177aa:	dc56      	bgt.n	801785a <_dtoa_r+0x5ea>
 80177ac:	ee37 5b45 	vsub.f64	d5, d7, d5
 80177b0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80177b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b8:	f57f af0a 	bpl.w	80175d0 <_dtoa_r+0x360>
 80177bc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80177c0:	2930      	cmp	r1, #48	; 0x30
 80177c2:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80177c6:	d001      	beq.n	80177cc <_dtoa_r+0x55c>
 80177c8:	4693      	mov	fp, r2
 80177ca:	e031      	b.n	8017830 <_dtoa_r+0x5c0>
 80177cc:	4603      	mov	r3, r0
 80177ce:	e7f5      	b.n	80177bc <_dtoa_r+0x54c>
 80177d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80177d4:	e7d4      	b.n	8017780 <_dtoa_r+0x510>
 80177d6:	bf00      	nop
 80177d8:	0801ae30 	.word	0x0801ae30
 80177dc:	0801ae08 	.word	0x0801ae08
 80177e0:	ed9d 7b00 	vldr	d7, [sp]
 80177e4:	eeb1 3b46 	vneg.f64	d3, d6
 80177e8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80177ec:	9b04      	ldr	r3, [sp, #16]
 80177ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80177f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80177f6:	ee15 2a10 	vmov	r2, s10
 80177fa:	3230      	adds	r2, #48	; 0x30
 80177fc:	f803 2b01 	strb.w	r2, [r3], #1
 8017800:	9a04      	ldr	r2, [sp, #16]
 8017802:	1a9a      	subs	r2, r3, r2
 8017804:	4591      	cmp	r9, r2
 8017806:	eeb8 2bc5 	vcvt.f64.s32	d2, s10
 801780a:	eea3 7b02 	vfma.f64	d7, d3, d2
 801780e:	d137      	bne.n	8017880 <_dtoa_r+0x610>
 8017810:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017814:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801781c:	d41c      	bmi.n	8017858 <_dtoa_r+0x5e8>
 801781e:	eeb4 6b47 	vcmp.f64	d6, d7
 8017822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017826:	d103      	bne.n	8017830 <_dtoa_r+0x5c0>
 8017828:	ee15 2a10 	vmov	r2, s10
 801782c:	07d2      	lsls	r2, r2, #31
 801782e:	d413      	bmi.n	8017858 <_dtoa_r+0x5e8>
 8017830:	9903      	ldr	r1, [sp, #12]
 8017832:	9300      	str	r3, [sp, #0]
 8017834:	4628      	mov	r0, r5
 8017836:	f000 fe0b 	bl	8018450 <_Bfree>
 801783a:	9b00      	ldr	r3, [sp, #0]
 801783c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801783e:	2200      	movs	r2, #0
 8017840:	701a      	strb	r2, [r3, #0]
 8017842:	f10b 0201 	add.w	r2, fp, #1
 8017846:	600a      	str	r2, [r1, #0]
 8017848:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801784a:	2a00      	cmp	r2, #0
 801784c:	f47f ad57 	bne.w	80172fe <_dtoa_r+0x8e>
 8017850:	9804      	ldr	r0, [sp, #16]
 8017852:	b015      	add	sp, #84	; 0x54
 8017854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017858:	465a      	mov	r2, fp
 801785a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 801785e:	2839      	cmp	r0, #57	; 0x39
 8017860:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8017864:	d106      	bne.n	8017874 <_dtoa_r+0x604>
 8017866:	9804      	ldr	r0, [sp, #16]
 8017868:	4288      	cmp	r0, r1
 801786a:	d107      	bne.n	801787c <_dtoa_r+0x60c>
 801786c:	2130      	movs	r1, #48	; 0x30
 801786e:	7001      	strb	r1, [r0, #0]
 8017870:	3201      	adds	r2, #1
 8017872:	4601      	mov	r1, r0
 8017874:	7808      	ldrb	r0, [r1, #0]
 8017876:	3001      	adds	r0, #1
 8017878:	7008      	strb	r0, [r1, #0]
 801787a:	e7a5      	b.n	80177c8 <_dtoa_r+0x558>
 801787c:	460b      	mov	r3, r1
 801787e:	e7ec      	b.n	801785a <_dtoa_r+0x5ea>
 8017880:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017884:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801788c:	d1af      	bne.n	80177ee <_dtoa_r+0x57e>
 801788e:	e7cf      	b.n	8017830 <_dtoa_r+0x5c0>
 8017890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017892:	2a00      	cmp	r2, #0
 8017894:	f000 8129 	beq.w	8017aea <_dtoa_r+0x87a>
 8017898:	9a07      	ldr	r2, [sp, #28]
 801789a:	2a01      	cmp	r2, #1
 801789c:	f300 810b 	bgt.w	8017ab6 <_dtoa_r+0x846>
 80178a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80178a2:	2a00      	cmp	r2, #0
 80178a4:	f000 8103 	beq.w	8017aae <_dtoa_r+0x83e>
 80178a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80178ac:	4644      	mov	r4, r8
 80178ae:	f8cd a020 	str.w	sl, [sp, #32]
 80178b2:	2101      	movs	r1, #1
 80178b4:	4628      	mov	r0, r5
 80178b6:	449a      	add	sl, r3
 80178b8:	441f      	add	r7, r3
 80178ba:	f000 fe69 	bl	8018590 <__i2b>
 80178be:	4606      	mov	r6, r0
 80178c0:	9b08      	ldr	r3, [sp, #32]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	dd0a      	ble.n	80178dc <_dtoa_r+0x66c>
 80178c6:	2f00      	cmp	r7, #0
 80178c8:	dd08      	ble.n	80178dc <_dtoa_r+0x66c>
 80178ca:	42bb      	cmp	r3, r7
 80178cc:	9a08      	ldr	r2, [sp, #32]
 80178ce:	bfa8      	it	ge
 80178d0:	463b      	movge	r3, r7
 80178d2:	1ad2      	subs	r2, r2, r3
 80178d4:	ebaa 0a03 	sub.w	sl, sl, r3
 80178d8:	9208      	str	r2, [sp, #32]
 80178da:	1aff      	subs	r7, r7, r3
 80178dc:	f1b8 0f00 	cmp.w	r8, #0
 80178e0:	d01f      	beq.n	8017922 <_dtoa_r+0x6b2>
 80178e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	f000 8105 	beq.w	8017af4 <_dtoa_r+0x884>
 80178ea:	2c00      	cmp	r4, #0
 80178ec:	dd11      	ble.n	8017912 <_dtoa_r+0x6a2>
 80178ee:	4631      	mov	r1, r6
 80178f0:	4622      	mov	r2, r4
 80178f2:	4628      	mov	r0, r5
 80178f4:	f000 fee2 	bl	80186bc <__pow5mult>
 80178f8:	9a03      	ldr	r2, [sp, #12]
 80178fa:	4601      	mov	r1, r0
 80178fc:	4606      	mov	r6, r0
 80178fe:	4628      	mov	r0, r5
 8017900:	f000 fe4f 	bl	80185a2 <__multiply>
 8017904:	9903      	ldr	r1, [sp, #12]
 8017906:	900e      	str	r0, [sp, #56]	; 0x38
 8017908:	4628      	mov	r0, r5
 801790a:	f000 fda1 	bl	8018450 <_Bfree>
 801790e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017910:	9303      	str	r3, [sp, #12]
 8017912:	ebb8 0204 	subs.w	r2, r8, r4
 8017916:	d004      	beq.n	8017922 <_dtoa_r+0x6b2>
 8017918:	9903      	ldr	r1, [sp, #12]
 801791a:	4628      	mov	r0, r5
 801791c:	f000 fece 	bl	80186bc <__pow5mult>
 8017920:	9003      	str	r0, [sp, #12]
 8017922:	2101      	movs	r1, #1
 8017924:	4628      	mov	r0, r5
 8017926:	f000 fe33 	bl	8018590 <__i2b>
 801792a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801792c:	2b00      	cmp	r3, #0
 801792e:	4604      	mov	r4, r0
 8017930:	f340 80e2 	ble.w	8017af8 <_dtoa_r+0x888>
 8017934:	461a      	mov	r2, r3
 8017936:	4601      	mov	r1, r0
 8017938:	4628      	mov	r0, r5
 801793a:	f000 febf 	bl	80186bc <__pow5mult>
 801793e:	9b07      	ldr	r3, [sp, #28]
 8017940:	2b01      	cmp	r3, #1
 8017942:	4604      	mov	r4, r0
 8017944:	f340 80db 	ble.w	8017afe <_dtoa_r+0x88e>
 8017948:	f04f 0800 	mov.w	r8, #0
 801794c:	6923      	ldr	r3, [r4, #16]
 801794e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017952:	6918      	ldr	r0, [r3, #16]
 8017954:	f000 fdce 	bl	80184f4 <__hi0bits>
 8017958:	f1c0 0020 	rsb	r0, r0, #32
 801795c:	4438      	add	r0, r7
 801795e:	f010 001f 	ands.w	r0, r0, #31
 8017962:	f000 80f1 	beq.w	8017b48 <_dtoa_r+0x8d8>
 8017966:	f1c0 0320 	rsb	r3, r0, #32
 801796a:	2b04      	cmp	r3, #4
 801796c:	f340 80e3 	ble.w	8017b36 <_dtoa_r+0x8c6>
 8017970:	9b08      	ldr	r3, [sp, #32]
 8017972:	f1c0 001c 	rsb	r0, r0, #28
 8017976:	4403      	add	r3, r0
 8017978:	4482      	add	sl, r0
 801797a:	9308      	str	r3, [sp, #32]
 801797c:	4407      	add	r7, r0
 801797e:	f1ba 0f00 	cmp.w	sl, #0
 8017982:	dd05      	ble.n	8017990 <_dtoa_r+0x720>
 8017984:	4652      	mov	r2, sl
 8017986:	9903      	ldr	r1, [sp, #12]
 8017988:	4628      	mov	r0, r5
 801798a:	f000 fee5 	bl	8018758 <__lshift>
 801798e:	9003      	str	r0, [sp, #12]
 8017990:	2f00      	cmp	r7, #0
 8017992:	dd05      	ble.n	80179a0 <_dtoa_r+0x730>
 8017994:	4621      	mov	r1, r4
 8017996:	463a      	mov	r2, r7
 8017998:	4628      	mov	r0, r5
 801799a:	f000 fedd 	bl	8018758 <__lshift>
 801799e:	4604      	mov	r4, r0
 80179a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	f000 80d2 	beq.w	8017b4c <_dtoa_r+0x8dc>
 80179a8:	4621      	mov	r1, r4
 80179aa:	9803      	ldr	r0, [sp, #12]
 80179ac:	f000 ff25 	bl	80187fa <__mcmp>
 80179b0:	2800      	cmp	r0, #0
 80179b2:	f280 80cb 	bge.w	8017b4c <_dtoa_r+0x8dc>
 80179b6:	2300      	movs	r3, #0
 80179b8:	220a      	movs	r2, #10
 80179ba:	9903      	ldr	r1, [sp, #12]
 80179bc:	4628      	mov	r0, r5
 80179be:	f000 fd5e 	bl	801847e <__multadd>
 80179c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179c4:	9003      	str	r0, [sp, #12]
 80179c6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	f000 81ae 	beq.w	8017d2c <_dtoa_r+0xabc>
 80179d0:	2300      	movs	r3, #0
 80179d2:	4631      	mov	r1, r6
 80179d4:	220a      	movs	r2, #10
 80179d6:	4628      	mov	r0, r5
 80179d8:	f000 fd51 	bl	801847e <__multadd>
 80179dc:	9b06      	ldr	r3, [sp, #24]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	4606      	mov	r6, r0
 80179e2:	dc03      	bgt.n	80179ec <_dtoa_r+0x77c>
 80179e4:	9b07      	ldr	r3, [sp, #28]
 80179e6:	2b02      	cmp	r3, #2
 80179e8:	f300 80b8 	bgt.w	8017b5c <_dtoa_r+0x8ec>
 80179ec:	9b08      	ldr	r3, [sp, #32]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	dd05      	ble.n	80179fe <_dtoa_r+0x78e>
 80179f2:	4631      	mov	r1, r6
 80179f4:	461a      	mov	r2, r3
 80179f6:	4628      	mov	r0, r5
 80179f8:	f000 feae 	bl	8018758 <__lshift>
 80179fc:	4606      	mov	r6, r0
 80179fe:	f1b8 0f00 	cmp.w	r8, #0
 8017a02:	f000 8115 	beq.w	8017c30 <_dtoa_r+0x9c0>
 8017a06:	6871      	ldr	r1, [r6, #4]
 8017a08:	4628      	mov	r0, r5
 8017a0a:	f000 fced 	bl	80183e8 <_Balloc>
 8017a0e:	6932      	ldr	r2, [r6, #16]
 8017a10:	3202      	adds	r2, #2
 8017a12:	4607      	mov	r7, r0
 8017a14:	0092      	lsls	r2, r2, #2
 8017a16:	f106 010c 	add.w	r1, r6, #12
 8017a1a:	300c      	adds	r0, #12
 8017a1c:	f7fd fff9 	bl	8015a12 <memcpy>
 8017a20:	2201      	movs	r2, #1
 8017a22:	4639      	mov	r1, r7
 8017a24:	4628      	mov	r0, r5
 8017a26:	f000 fe97 	bl	8018758 <__lshift>
 8017a2a:	9b00      	ldr	r3, [sp, #0]
 8017a2c:	9f04      	ldr	r7, [sp, #16]
 8017a2e:	f003 0301 	and.w	r3, r3, #1
 8017a32:	46b1      	mov	r9, r6
 8017a34:	9308      	str	r3, [sp, #32]
 8017a36:	4606      	mov	r6, r0
 8017a38:	4621      	mov	r1, r4
 8017a3a:	9803      	ldr	r0, [sp, #12]
 8017a3c:	f7ff fb8c 	bl	8017158 <quorem>
 8017a40:	4649      	mov	r1, r9
 8017a42:	4682      	mov	sl, r0
 8017a44:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017a48:	9803      	ldr	r0, [sp, #12]
 8017a4a:	f000 fed6 	bl	80187fa <__mcmp>
 8017a4e:	4632      	mov	r2, r6
 8017a50:	9000      	str	r0, [sp, #0]
 8017a52:	4621      	mov	r1, r4
 8017a54:	4628      	mov	r0, r5
 8017a56:	f000 feea 	bl	801882e <__mdiff>
 8017a5a:	68c3      	ldr	r3, [r0, #12]
 8017a5c:	4602      	mov	r2, r0
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	f040 80e8 	bne.w	8017c34 <_dtoa_r+0x9c4>
 8017a64:	4601      	mov	r1, r0
 8017a66:	900a      	str	r0, [sp, #40]	; 0x28
 8017a68:	9803      	ldr	r0, [sp, #12]
 8017a6a:	f000 fec6 	bl	80187fa <__mcmp>
 8017a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a70:	4603      	mov	r3, r0
 8017a72:	4611      	mov	r1, r2
 8017a74:	4628      	mov	r0, r5
 8017a76:	930a      	str	r3, [sp, #40]	; 0x28
 8017a78:	f000 fcea 	bl	8018450 <_Bfree>
 8017a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	f040 80da 	bne.w	8017c38 <_dtoa_r+0x9c8>
 8017a84:	9a07      	ldr	r2, [sp, #28]
 8017a86:	2a00      	cmp	r2, #0
 8017a88:	f040 80d6 	bne.w	8017c38 <_dtoa_r+0x9c8>
 8017a8c:	9a08      	ldr	r2, [sp, #32]
 8017a8e:	2a00      	cmp	r2, #0
 8017a90:	f040 80d2 	bne.w	8017c38 <_dtoa_r+0x9c8>
 8017a94:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017a98:	f000 80ee 	beq.w	8017c78 <_dtoa_r+0xa08>
 8017a9c:	9b00      	ldr	r3, [sp, #0]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	dd01      	ble.n	8017aa6 <_dtoa_r+0x836>
 8017aa2:	f10a 0831 	add.w	r8, sl, #49	; 0x31
 8017aa6:	1c7b      	adds	r3, r7, #1
 8017aa8:	f887 8000 	strb.w	r8, [r7]
 8017aac:	e06b      	b.n	8017b86 <_dtoa_r+0x916>
 8017aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017ab0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017ab4:	e6fa      	b.n	80178ac <_dtoa_r+0x63c>
 8017ab6:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8017aba:	45a0      	cmp	r8, r4
 8017abc:	bfbf      	itttt	lt
 8017abe:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8017ac0:	eba4 0808 	sublt.w	r8, r4, r8
 8017ac4:	4443      	addlt	r3, r8
 8017ac6:	930c      	strlt	r3, [sp, #48]	; 0x30
 8017ac8:	bfb6      	itet	lt
 8017aca:	46a0      	movlt	r8, r4
 8017acc:	eba8 0404 	subge.w	r4, r8, r4
 8017ad0:	2400      	movlt	r4, #0
 8017ad2:	f1b9 0f00 	cmp.w	r9, #0
 8017ad6:	bfbb      	ittet	lt
 8017ad8:	ebaa 0309 	sublt.w	r3, sl, r9
 8017adc:	9308      	strlt	r3, [sp, #32]
 8017ade:	f8cd a020 	strge.w	sl, [sp, #32]
 8017ae2:	2300      	movlt	r3, #0
 8017ae4:	bfa8      	it	ge
 8017ae6:	464b      	movge	r3, r9
 8017ae8:	e6e3      	b.n	80178b2 <_dtoa_r+0x642>
 8017aea:	4644      	mov	r4, r8
 8017aec:	f8cd a020 	str.w	sl, [sp, #32]
 8017af0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017af2:	e6e5      	b.n	80178c0 <_dtoa_r+0x650>
 8017af4:	4642      	mov	r2, r8
 8017af6:	e70f      	b.n	8017918 <_dtoa_r+0x6a8>
 8017af8:	9b07      	ldr	r3, [sp, #28]
 8017afa:	2b01      	cmp	r3, #1
 8017afc:	dc16      	bgt.n	8017b2c <_dtoa_r+0x8bc>
 8017afe:	9b00      	ldr	r3, [sp, #0]
 8017b00:	b9a3      	cbnz	r3, 8017b2c <_dtoa_r+0x8bc>
 8017b02:	9b01      	ldr	r3, [sp, #4]
 8017b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017b08:	b983      	cbnz	r3, 8017b2c <_dtoa_r+0x8bc>
 8017b0a:	9b01      	ldr	r3, [sp, #4]
 8017b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017b10:	0d1b      	lsrs	r3, r3, #20
 8017b12:	051b      	lsls	r3, r3, #20
 8017b14:	b16b      	cbz	r3, 8017b32 <_dtoa_r+0x8c2>
 8017b16:	f10a 0a01 	add.w	sl, sl, #1
 8017b1a:	3701      	adds	r7, #1
 8017b1c:	f04f 0801 	mov.w	r8, #1
 8017b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	f47f af12 	bne.w	801794c <_dtoa_r+0x6dc>
 8017b28:	2001      	movs	r0, #1
 8017b2a:	e717      	b.n	801795c <_dtoa_r+0x6ec>
 8017b2c:	f04f 0800 	mov.w	r8, #0
 8017b30:	e7f6      	b.n	8017b20 <_dtoa_r+0x8b0>
 8017b32:	4698      	mov	r8, r3
 8017b34:	e7f4      	b.n	8017b20 <_dtoa_r+0x8b0>
 8017b36:	f43f af22 	beq.w	801797e <_dtoa_r+0x70e>
 8017b3a:	9a08      	ldr	r2, [sp, #32]
 8017b3c:	331c      	adds	r3, #28
 8017b3e:	441a      	add	r2, r3
 8017b40:	449a      	add	sl, r3
 8017b42:	9208      	str	r2, [sp, #32]
 8017b44:	441f      	add	r7, r3
 8017b46:	e71a      	b.n	801797e <_dtoa_r+0x70e>
 8017b48:	4603      	mov	r3, r0
 8017b4a:	e7f6      	b.n	8017b3a <_dtoa_r+0x8ca>
 8017b4c:	f1b9 0f00 	cmp.w	r9, #0
 8017b50:	dc39      	bgt.n	8017bc6 <_dtoa_r+0x956>
 8017b52:	9b07      	ldr	r3, [sp, #28]
 8017b54:	2b02      	cmp	r3, #2
 8017b56:	dd36      	ble.n	8017bc6 <_dtoa_r+0x956>
 8017b58:	f8cd 9018 	str.w	r9, [sp, #24]
 8017b5c:	9b06      	ldr	r3, [sp, #24]
 8017b5e:	b963      	cbnz	r3, 8017b7a <_dtoa_r+0x90a>
 8017b60:	4621      	mov	r1, r4
 8017b62:	2205      	movs	r2, #5
 8017b64:	4628      	mov	r0, r5
 8017b66:	f000 fc8a 	bl	801847e <__multadd>
 8017b6a:	4601      	mov	r1, r0
 8017b6c:	4604      	mov	r4, r0
 8017b6e:	9803      	ldr	r0, [sp, #12]
 8017b70:	f000 fe43 	bl	80187fa <__mcmp>
 8017b74:	2800      	cmp	r0, #0
 8017b76:	f73f ad54 	bgt.w	8017622 <_dtoa_r+0x3b2>
 8017b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b7c:	ea6f 0b03 	mvn.w	fp, r3
 8017b80:	9b04      	ldr	r3, [sp, #16]
 8017b82:	f04f 0900 	mov.w	r9, #0
 8017b86:	4621      	mov	r1, r4
 8017b88:	4628      	mov	r0, r5
 8017b8a:	9300      	str	r3, [sp, #0]
 8017b8c:	f000 fc60 	bl	8018450 <_Bfree>
 8017b90:	9b00      	ldr	r3, [sp, #0]
 8017b92:	2e00      	cmp	r6, #0
 8017b94:	f43f ae4c 	beq.w	8017830 <_dtoa_r+0x5c0>
 8017b98:	f1b9 0f00 	cmp.w	r9, #0
 8017b9c:	d006      	beq.n	8017bac <_dtoa_r+0x93c>
 8017b9e:	45b1      	cmp	r9, r6
 8017ba0:	d004      	beq.n	8017bac <_dtoa_r+0x93c>
 8017ba2:	4649      	mov	r1, r9
 8017ba4:	4628      	mov	r0, r5
 8017ba6:	f000 fc53 	bl	8018450 <_Bfree>
 8017baa:	9b00      	ldr	r3, [sp, #0]
 8017bac:	9300      	str	r3, [sp, #0]
 8017bae:	4631      	mov	r1, r6
 8017bb0:	4628      	mov	r0, r5
 8017bb2:	f000 fc4d 	bl	8018450 <_Bfree>
 8017bb6:	9b00      	ldr	r3, [sp, #0]
 8017bb8:	e63a      	b.n	8017830 <_dtoa_r+0x5c0>
 8017bba:	2400      	movs	r4, #0
 8017bbc:	4626      	mov	r6, r4
 8017bbe:	e7dc      	b.n	8017b7a <_dtoa_r+0x90a>
 8017bc0:	4693      	mov	fp, r2
 8017bc2:	4626      	mov	r6, r4
 8017bc4:	e52d      	b.n	8017622 <_dtoa_r+0x3b2>
 8017bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bc8:	f8cd 9018 	str.w	r9, [sp, #24]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	f47f af0d 	bne.w	80179ec <_dtoa_r+0x77c>
 8017bd2:	9f04      	ldr	r7, [sp, #16]
 8017bd4:	9803      	ldr	r0, [sp, #12]
 8017bd6:	4621      	mov	r1, r4
 8017bd8:	f7ff fabe 	bl	8017158 <quorem>
 8017bdc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017be0:	f807 8b01 	strb.w	r8, [r7], #1
 8017be4:	9b04      	ldr	r3, [sp, #16]
 8017be6:	9a06      	ldr	r2, [sp, #24]
 8017be8:	1afb      	subs	r3, r7, r3
 8017bea:	429a      	cmp	r2, r3
 8017bec:	f300 8081 	bgt.w	8017cf2 <_dtoa_r+0xa82>
 8017bf0:	9b04      	ldr	r3, [sp, #16]
 8017bf2:	2a01      	cmp	r2, #1
 8017bf4:	bfac      	ite	ge
 8017bf6:	189b      	addge	r3, r3, r2
 8017bf8:	3301      	addlt	r3, #1
 8017bfa:	461f      	mov	r7, r3
 8017bfc:	f04f 0900 	mov.w	r9, #0
 8017c00:	2201      	movs	r2, #1
 8017c02:	9903      	ldr	r1, [sp, #12]
 8017c04:	4628      	mov	r0, r5
 8017c06:	f000 fda7 	bl	8018758 <__lshift>
 8017c0a:	4621      	mov	r1, r4
 8017c0c:	9003      	str	r0, [sp, #12]
 8017c0e:	f000 fdf4 	bl	80187fa <__mcmp>
 8017c12:	2800      	cmp	r0, #0
 8017c14:	dc33      	bgt.n	8017c7e <_dtoa_r+0xa0e>
 8017c16:	d102      	bne.n	8017c1e <_dtoa_r+0x9ae>
 8017c18:	f018 0f01 	tst.w	r8, #1
 8017c1c:	d12f      	bne.n	8017c7e <_dtoa_r+0xa0e>
 8017c1e:	463b      	mov	r3, r7
 8017c20:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8017c24:	2a30      	cmp	r2, #48	; 0x30
 8017c26:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8017c2a:	d1ac      	bne.n	8017b86 <_dtoa_r+0x916>
 8017c2c:	460b      	mov	r3, r1
 8017c2e:	e7f7      	b.n	8017c20 <_dtoa_r+0x9b0>
 8017c30:	4630      	mov	r0, r6
 8017c32:	e6fa      	b.n	8017a2a <_dtoa_r+0x7ba>
 8017c34:	2301      	movs	r3, #1
 8017c36:	e71c      	b.n	8017a72 <_dtoa_r+0x802>
 8017c38:	9a00      	ldr	r2, [sp, #0]
 8017c3a:	2a00      	cmp	r2, #0
 8017c3c:	db04      	blt.n	8017c48 <_dtoa_r+0x9d8>
 8017c3e:	d127      	bne.n	8017c90 <_dtoa_r+0xa20>
 8017c40:	9a07      	ldr	r2, [sp, #28]
 8017c42:	bb2a      	cbnz	r2, 8017c90 <_dtoa_r+0xa20>
 8017c44:	9a08      	ldr	r2, [sp, #32]
 8017c46:	bb1a      	cbnz	r2, 8017c90 <_dtoa_r+0xa20>
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	f77f af2c 	ble.w	8017aa6 <_dtoa_r+0x836>
 8017c4e:	2201      	movs	r2, #1
 8017c50:	9903      	ldr	r1, [sp, #12]
 8017c52:	4628      	mov	r0, r5
 8017c54:	f000 fd80 	bl	8018758 <__lshift>
 8017c58:	4621      	mov	r1, r4
 8017c5a:	9003      	str	r0, [sp, #12]
 8017c5c:	f000 fdcd 	bl	80187fa <__mcmp>
 8017c60:	2800      	cmp	r0, #0
 8017c62:	dc05      	bgt.n	8017c70 <_dtoa_r+0xa00>
 8017c64:	f47f af1f 	bne.w	8017aa6 <_dtoa_r+0x836>
 8017c68:	f018 0f01 	tst.w	r8, #1
 8017c6c:	f43f af1b 	beq.w	8017aa6 <_dtoa_r+0x836>
 8017c70:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017c74:	f47f af15 	bne.w	8017aa2 <_dtoa_r+0x832>
 8017c78:	2339      	movs	r3, #57	; 0x39
 8017c7a:	703b      	strb	r3, [r7, #0]
 8017c7c:	3701      	adds	r7, #1
 8017c7e:	463b      	mov	r3, r7
 8017c80:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8017c84:	2a39      	cmp	r2, #57	; 0x39
 8017c86:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8017c8a:	d03a      	beq.n	8017d02 <_dtoa_r+0xa92>
 8017c8c:	3201      	adds	r2, #1
 8017c8e:	e03f      	b.n	8017d10 <_dtoa_r+0xaa0>
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	f107 0301 	add.w	r3, r7, #1
 8017c96:	dd05      	ble.n	8017ca4 <_dtoa_r+0xa34>
 8017c98:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017c9c:	d0ec      	beq.n	8017c78 <_dtoa_r+0xa08>
 8017c9e:	f108 0801 	add.w	r8, r8, #1
 8017ca2:	e701      	b.n	8017aa8 <_dtoa_r+0x838>
 8017ca4:	461f      	mov	r7, r3
 8017ca6:	f803 8c01 	strb.w	r8, [r3, #-1]
 8017caa:	9b04      	ldr	r3, [sp, #16]
 8017cac:	9a06      	ldr	r2, [sp, #24]
 8017cae:	1afb      	subs	r3, r7, r3
 8017cb0:	4293      	cmp	r3, r2
 8017cb2:	d0a5      	beq.n	8017c00 <_dtoa_r+0x990>
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	220a      	movs	r2, #10
 8017cb8:	9903      	ldr	r1, [sp, #12]
 8017cba:	4628      	mov	r0, r5
 8017cbc:	f000 fbdf 	bl	801847e <__multadd>
 8017cc0:	45b1      	cmp	r9, r6
 8017cc2:	9003      	str	r0, [sp, #12]
 8017cc4:	f04f 0300 	mov.w	r3, #0
 8017cc8:	f04f 020a 	mov.w	r2, #10
 8017ccc:	4649      	mov	r1, r9
 8017cce:	4628      	mov	r0, r5
 8017cd0:	d104      	bne.n	8017cdc <_dtoa_r+0xa6c>
 8017cd2:	f000 fbd4 	bl	801847e <__multadd>
 8017cd6:	4681      	mov	r9, r0
 8017cd8:	4606      	mov	r6, r0
 8017cda:	e6ad      	b.n	8017a38 <_dtoa_r+0x7c8>
 8017cdc:	f000 fbcf 	bl	801847e <__multadd>
 8017ce0:	4631      	mov	r1, r6
 8017ce2:	4681      	mov	r9, r0
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	220a      	movs	r2, #10
 8017ce8:	4628      	mov	r0, r5
 8017cea:	f000 fbc8 	bl	801847e <__multadd>
 8017cee:	4606      	mov	r6, r0
 8017cf0:	e6a2      	b.n	8017a38 <_dtoa_r+0x7c8>
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	220a      	movs	r2, #10
 8017cf6:	9903      	ldr	r1, [sp, #12]
 8017cf8:	4628      	mov	r0, r5
 8017cfa:	f000 fbc0 	bl	801847e <__multadd>
 8017cfe:	9003      	str	r0, [sp, #12]
 8017d00:	e768      	b.n	8017bd4 <_dtoa_r+0x964>
 8017d02:	9a04      	ldr	r2, [sp, #16]
 8017d04:	428a      	cmp	r2, r1
 8017d06:	d105      	bne.n	8017d14 <_dtoa_r+0xaa4>
 8017d08:	9904      	ldr	r1, [sp, #16]
 8017d0a:	f10b 0b01 	add.w	fp, fp, #1
 8017d0e:	2231      	movs	r2, #49	; 0x31
 8017d10:	700a      	strb	r2, [r1, #0]
 8017d12:	e738      	b.n	8017b86 <_dtoa_r+0x916>
 8017d14:	460b      	mov	r3, r1
 8017d16:	e7b3      	b.n	8017c80 <_dtoa_r+0xa10>
 8017d18:	4b09      	ldr	r3, [pc, #36]	; (8017d40 <_dtoa_r+0xad0>)
 8017d1a:	f7ff bb0a 	b.w	8017332 <_dtoa_r+0xc2>
 8017d1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	f47f aae8 	bne.w	80172f6 <_dtoa_r+0x86>
 8017d26:	4b07      	ldr	r3, [pc, #28]	; (8017d44 <_dtoa_r+0xad4>)
 8017d28:	f7ff bb03 	b.w	8017332 <_dtoa_r+0xc2>
 8017d2c:	9b06      	ldr	r3, [sp, #24]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	f73f af4f 	bgt.w	8017bd2 <_dtoa_r+0x962>
 8017d34:	9b07      	ldr	r3, [sp, #28]
 8017d36:	2b02      	cmp	r3, #2
 8017d38:	f77f af4b 	ble.w	8017bd2 <_dtoa_r+0x962>
 8017d3c:	e70e      	b.n	8017b5c <_dtoa_r+0x8ec>
 8017d3e:	bf00      	nop
 8017d40:	0801ad72 	.word	0x0801ad72
 8017d44:	0801ad94 	.word	0x0801ad94

08017d48 <__sflush_r>:
 8017d48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d4c:	b293      	uxth	r3, r2
 8017d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d52:	4605      	mov	r5, r0
 8017d54:	0718      	lsls	r0, r3, #28
 8017d56:	460c      	mov	r4, r1
 8017d58:	d461      	bmi.n	8017e1e <__sflush_r+0xd6>
 8017d5a:	684b      	ldr	r3, [r1, #4]
 8017d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	818a      	strh	r2, [r1, #12]
 8017d64:	dc05      	bgt.n	8017d72 <__sflush_r+0x2a>
 8017d66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	dc02      	bgt.n	8017d72 <__sflush_r+0x2a>
 8017d6c:	2000      	movs	r0, #0
 8017d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d74:	2e00      	cmp	r6, #0
 8017d76:	d0f9      	beq.n	8017d6c <__sflush_r+0x24>
 8017d78:	2300      	movs	r3, #0
 8017d7a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017d7e:	682f      	ldr	r7, [r5, #0]
 8017d80:	602b      	str	r3, [r5, #0]
 8017d82:	d037      	beq.n	8017df4 <__sflush_r+0xac>
 8017d84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d86:	89a3      	ldrh	r3, [r4, #12]
 8017d88:	075a      	lsls	r2, r3, #29
 8017d8a:	d505      	bpl.n	8017d98 <__sflush_r+0x50>
 8017d8c:	6863      	ldr	r3, [r4, #4]
 8017d8e:	1ac0      	subs	r0, r0, r3
 8017d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d92:	b10b      	cbz	r3, 8017d98 <__sflush_r+0x50>
 8017d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d96:	1ac0      	subs	r0, r0, r3
 8017d98:	2300      	movs	r3, #0
 8017d9a:	4602      	mov	r2, r0
 8017d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d9e:	6a21      	ldr	r1, [r4, #32]
 8017da0:	4628      	mov	r0, r5
 8017da2:	47b0      	blx	r6
 8017da4:	1c43      	adds	r3, r0, #1
 8017da6:	89a3      	ldrh	r3, [r4, #12]
 8017da8:	d106      	bne.n	8017db8 <__sflush_r+0x70>
 8017daa:	6829      	ldr	r1, [r5, #0]
 8017dac:	291d      	cmp	r1, #29
 8017dae:	d84f      	bhi.n	8017e50 <__sflush_r+0x108>
 8017db0:	4a2d      	ldr	r2, [pc, #180]	; (8017e68 <__sflush_r+0x120>)
 8017db2:	40ca      	lsrs	r2, r1
 8017db4:	07d6      	lsls	r6, r2, #31
 8017db6:	d54b      	bpl.n	8017e50 <__sflush_r+0x108>
 8017db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017dbc:	b21b      	sxth	r3, r3
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	6062      	str	r2, [r4, #4]
 8017dc2:	04d9      	lsls	r1, r3, #19
 8017dc4:	6922      	ldr	r2, [r4, #16]
 8017dc6:	81a3      	strh	r3, [r4, #12]
 8017dc8:	6022      	str	r2, [r4, #0]
 8017dca:	d504      	bpl.n	8017dd6 <__sflush_r+0x8e>
 8017dcc:	1c42      	adds	r2, r0, #1
 8017dce:	d101      	bne.n	8017dd4 <__sflush_r+0x8c>
 8017dd0:	682b      	ldr	r3, [r5, #0]
 8017dd2:	b903      	cbnz	r3, 8017dd6 <__sflush_r+0x8e>
 8017dd4:	6560      	str	r0, [r4, #84]	; 0x54
 8017dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017dd8:	602f      	str	r7, [r5, #0]
 8017dda:	2900      	cmp	r1, #0
 8017ddc:	d0c6      	beq.n	8017d6c <__sflush_r+0x24>
 8017dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017de2:	4299      	cmp	r1, r3
 8017de4:	d002      	beq.n	8017dec <__sflush_r+0xa4>
 8017de6:	4628      	mov	r0, r5
 8017de8:	f000 f9aa 	bl	8018140 <_free_r>
 8017dec:	2000      	movs	r0, #0
 8017dee:	6360      	str	r0, [r4, #52]	; 0x34
 8017df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017df4:	6a21      	ldr	r1, [r4, #32]
 8017df6:	2301      	movs	r3, #1
 8017df8:	4628      	mov	r0, r5
 8017dfa:	47b0      	blx	r6
 8017dfc:	1c41      	adds	r1, r0, #1
 8017dfe:	d1c2      	bne.n	8017d86 <__sflush_r+0x3e>
 8017e00:	682b      	ldr	r3, [r5, #0]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d0bf      	beq.n	8017d86 <__sflush_r+0x3e>
 8017e06:	2b1d      	cmp	r3, #29
 8017e08:	d001      	beq.n	8017e0e <__sflush_r+0xc6>
 8017e0a:	2b16      	cmp	r3, #22
 8017e0c:	d101      	bne.n	8017e12 <__sflush_r+0xca>
 8017e0e:	602f      	str	r7, [r5, #0]
 8017e10:	e7ac      	b.n	8017d6c <__sflush_r+0x24>
 8017e12:	89a3      	ldrh	r3, [r4, #12]
 8017e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e18:	81a3      	strh	r3, [r4, #12]
 8017e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e1e:	690f      	ldr	r7, [r1, #16]
 8017e20:	2f00      	cmp	r7, #0
 8017e22:	d0a3      	beq.n	8017d6c <__sflush_r+0x24>
 8017e24:	079b      	lsls	r3, r3, #30
 8017e26:	680e      	ldr	r6, [r1, #0]
 8017e28:	bf08      	it	eq
 8017e2a:	694b      	ldreq	r3, [r1, #20]
 8017e2c:	600f      	str	r7, [r1, #0]
 8017e2e:	bf18      	it	ne
 8017e30:	2300      	movne	r3, #0
 8017e32:	eba6 0807 	sub.w	r8, r6, r7
 8017e36:	608b      	str	r3, [r1, #8]
 8017e38:	f1b8 0f00 	cmp.w	r8, #0
 8017e3c:	dd96      	ble.n	8017d6c <__sflush_r+0x24>
 8017e3e:	4643      	mov	r3, r8
 8017e40:	463a      	mov	r2, r7
 8017e42:	6a21      	ldr	r1, [r4, #32]
 8017e44:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e46:	4628      	mov	r0, r5
 8017e48:	47b0      	blx	r6
 8017e4a:	2800      	cmp	r0, #0
 8017e4c:	dc07      	bgt.n	8017e5e <__sflush_r+0x116>
 8017e4e:	89a3      	ldrh	r3, [r4, #12]
 8017e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e54:	81a3      	strh	r3, [r4, #12]
 8017e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e5e:	4407      	add	r7, r0
 8017e60:	eba8 0800 	sub.w	r8, r8, r0
 8017e64:	e7e8      	b.n	8017e38 <__sflush_r+0xf0>
 8017e66:	bf00      	nop
 8017e68:	20400001 	.word	0x20400001

08017e6c <_fflush_r>:
 8017e6c:	b538      	push	{r3, r4, r5, lr}
 8017e6e:	690b      	ldr	r3, [r1, #16]
 8017e70:	4605      	mov	r5, r0
 8017e72:	460c      	mov	r4, r1
 8017e74:	b913      	cbnz	r3, 8017e7c <_fflush_r+0x10>
 8017e76:	2500      	movs	r5, #0
 8017e78:	4628      	mov	r0, r5
 8017e7a:	bd38      	pop	{r3, r4, r5, pc}
 8017e7c:	b118      	cbz	r0, 8017e86 <_fflush_r+0x1a>
 8017e7e:	6983      	ldr	r3, [r0, #24]
 8017e80:	b90b      	cbnz	r3, 8017e86 <_fflush_r+0x1a>
 8017e82:	f000 f887 	bl	8017f94 <__sinit>
 8017e86:	4b14      	ldr	r3, [pc, #80]	; (8017ed8 <_fflush_r+0x6c>)
 8017e88:	429c      	cmp	r4, r3
 8017e8a:	d11b      	bne.n	8017ec4 <_fflush_r+0x58>
 8017e8c:	686c      	ldr	r4, [r5, #4]
 8017e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d0ef      	beq.n	8017e76 <_fflush_r+0xa>
 8017e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017e98:	07d0      	lsls	r0, r2, #31
 8017e9a:	d404      	bmi.n	8017ea6 <_fflush_r+0x3a>
 8017e9c:	0599      	lsls	r1, r3, #22
 8017e9e:	d402      	bmi.n	8017ea6 <_fflush_r+0x3a>
 8017ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ea2:	f7fd fb85 	bl	80155b0 <__retarget_lock_acquire_recursive>
 8017ea6:	4628      	mov	r0, r5
 8017ea8:	4621      	mov	r1, r4
 8017eaa:	f7ff ff4d 	bl	8017d48 <__sflush_r>
 8017eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017eb0:	07da      	lsls	r2, r3, #31
 8017eb2:	4605      	mov	r5, r0
 8017eb4:	d4e0      	bmi.n	8017e78 <_fflush_r+0xc>
 8017eb6:	89a3      	ldrh	r3, [r4, #12]
 8017eb8:	059b      	lsls	r3, r3, #22
 8017eba:	d4dd      	bmi.n	8017e78 <_fflush_r+0xc>
 8017ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ebe:	f7fd fb79 	bl	80155b4 <__retarget_lock_release_recursive>
 8017ec2:	e7d9      	b.n	8017e78 <_fflush_r+0xc>
 8017ec4:	4b05      	ldr	r3, [pc, #20]	; (8017edc <_fflush_r+0x70>)
 8017ec6:	429c      	cmp	r4, r3
 8017ec8:	d101      	bne.n	8017ece <_fflush_r+0x62>
 8017eca:	68ac      	ldr	r4, [r5, #8]
 8017ecc:	e7df      	b.n	8017e8e <_fflush_r+0x22>
 8017ece:	4b04      	ldr	r3, [pc, #16]	; (8017ee0 <_fflush_r+0x74>)
 8017ed0:	429c      	cmp	r4, r3
 8017ed2:	bf08      	it	eq
 8017ed4:	68ec      	ldreq	r4, [r5, #12]
 8017ed6:	e7da      	b.n	8017e8e <_fflush_r+0x22>
 8017ed8:	0801adc4 	.word	0x0801adc4
 8017edc:	0801ade4 	.word	0x0801ade4
 8017ee0:	0801ada4 	.word	0x0801ada4

08017ee4 <_cleanup_r>:
 8017ee4:	4901      	ldr	r1, [pc, #4]	; (8017eec <_cleanup_r+0x8>)
 8017ee6:	f000 b9e7 	b.w	80182b8 <_fwalk_reent>
 8017eea:	bf00      	nop
 8017eec:	08018b7d 	.word	0x08018b7d

08017ef0 <std.isra.0>:
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	b510      	push	{r4, lr}
 8017ef4:	4604      	mov	r4, r0
 8017ef6:	6003      	str	r3, [r0, #0]
 8017ef8:	6043      	str	r3, [r0, #4]
 8017efa:	6083      	str	r3, [r0, #8]
 8017efc:	8181      	strh	r1, [r0, #12]
 8017efe:	6643      	str	r3, [r0, #100]	; 0x64
 8017f00:	81c2      	strh	r2, [r0, #14]
 8017f02:	6103      	str	r3, [r0, #16]
 8017f04:	6143      	str	r3, [r0, #20]
 8017f06:	6183      	str	r3, [r0, #24]
 8017f08:	4619      	mov	r1, r3
 8017f0a:	2208      	movs	r2, #8
 8017f0c:	305c      	adds	r0, #92	; 0x5c
 8017f0e:	f7fd fda5 	bl	8015a5c <memset>
 8017f12:	4b05      	ldr	r3, [pc, #20]	; (8017f28 <std.isra.0+0x38>)
 8017f14:	6263      	str	r3, [r4, #36]	; 0x24
 8017f16:	4b05      	ldr	r3, [pc, #20]	; (8017f2c <std.isra.0+0x3c>)
 8017f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f1a:	4b05      	ldr	r3, [pc, #20]	; (8017f30 <std.isra.0+0x40>)
 8017f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f1e:	4b05      	ldr	r3, [pc, #20]	; (8017f34 <std.isra.0+0x44>)
 8017f20:	6224      	str	r4, [r4, #32]
 8017f22:	6323      	str	r3, [r4, #48]	; 0x30
 8017f24:	bd10      	pop	{r4, pc}
 8017f26:	bf00      	nop
 8017f28:	08018989 	.word	0x08018989
 8017f2c:	080189ab 	.word	0x080189ab
 8017f30:	080189e3 	.word	0x080189e3
 8017f34:	08018a07 	.word	0x08018a07

08017f38 <__sfmoreglue>:
 8017f38:	b570      	push	{r4, r5, r6, lr}
 8017f3a:	1e4a      	subs	r2, r1, #1
 8017f3c:	2568      	movs	r5, #104	; 0x68
 8017f3e:	4355      	muls	r5, r2
 8017f40:	460e      	mov	r6, r1
 8017f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017f46:	f7fd fb47 	bl	80155d8 <_malloc_r>
 8017f4a:	4604      	mov	r4, r0
 8017f4c:	b140      	cbz	r0, 8017f60 <__sfmoreglue+0x28>
 8017f4e:	2100      	movs	r1, #0
 8017f50:	e880 0042 	stmia.w	r0, {r1, r6}
 8017f54:	300c      	adds	r0, #12
 8017f56:	60a0      	str	r0, [r4, #8]
 8017f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017f5c:	f7fd fd7e 	bl	8015a5c <memset>
 8017f60:	4620      	mov	r0, r4
 8017f62:	bd70      	pop	{r4, r5, r6, pc}

08017f64 <__sfp_lock_acquire>:
 8017f64:	4801      	ldr	r0, [pc, #4]	; (8017f6c <__sfp_lock_acquire+0x8>)
 8017f66:	f7fd bb23 	b.w	80155b0 <__retarget_lock_acquire_recursive>
 8017f6a:	bf00      	nop
 8017f6c:	20007ea4 	.word	0x20007ea4

08017f70 <__sfp_lock_release>:
 8017f70:	4801      	ldr	r0, [pc, #4]	; (8017f78 <__sfp_lock_release+0x8>)
 8017f72:	f7fd bb1f 	b.w	80155b4 <__retarget_lock_release_recursive>
 8017f76:	bf00      	nop
 8017f78:	20007ea4 	.word	0x20007ea4

08017f7c <__sinit_lock_acquire>:
 8017f7c:	4801      	ldr	r0, [pc, #4]	; (8017f84 <__sinit_lock_acquire+0x8>)
 8017f7e:	f7fd bb17 	b.w	80155b0 <__retarget_lock_acquire_recursive>
 8017f82:	bf00      	nop
 8017f84:	20007e9f 	.word	0x20007e9f

08017f88 <__sinit_lock_release>:
 8017f88:	4801      	ldr	r0, [pc, #4]	; (8017f90 <__sinit_lock_release+0x8>)
 8017f8a:	f7fd bb13 	b.w	80155b4 <__retarget_lock_release_recursive>
 8017f8e:	bf00      	nop
 8017f90:	20007e9f 	.word	0x20007e9f

08017f94 <__sinit>:
 8017f94:	b510      	push	{r4, lr}
 8017f96:	4604      	mov	r4, r0
 8017f98:	f7ff fff0 	bl	8017f7c <__sinit_lock_acquire>
 8017f9c:	69a3      	ldr	r3, [r4, #24]
 8017f9e:	b11b      	cbz	r3, 8017fa8 <__sinit+0x14>
 8017fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fa4:	f7ff bff0 	b.w	8017f88 <__sinit_lock_release>
 8017fa8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8017fac:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8017fb0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8017fb4:	4b12      	ldr	r3, [pc, #72]	; (8018000 <__sinit+0x6c>)
 8017fb6:	4a13      	ldr	r2, [pc, #76]	; (8018004 <__sinit+0x70>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	62a2      	str	r2, [r4, #40]	; 0x28
 8017fbc:	429c      	cmp	r4, r3
 8017fbe:	bf04      	itt	eq
 8017fc0:	2301      	moveq	r3, #1
 8017fc2:	61a3      	streq	r3, [r4, #24]
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	f000 f81f 	bl	8018008 <__sfp>
 8017fca:	6060      	str	r0, [r4, #4]
 8017fcc:	4620      	mov	r0, r4
 8017fce:	f000 f81b 	bl	8018008 <__sfp>
 8017fd2:	60a0      	str	r0, [r4, #8]
 8017fd4:	4620      	mov	r0, r4
 8017fd6:	f000 f817 	bl	8018008 <__sfp>
 8017fda:	2200      	movs	r2, #0
 8017fdc:	60e0      	str	r0, [r4, #12]
 8017fde:	2104      	movs	r1, #4
 8017fe0:	6860      	ldr	r0, [r4, #4]
 8017fe2:	f7ff ff85 	bl	8017ef0 <std.isra.0>
 8017fe6:	2201      	movs	r2, #1
 8017fe8:	2109      	movs	r1, #9
 8017fea:	68a0      	ldr	r0, [r4, #8]
 8017fec:	f7ff ff80 	bl	8017ef0 <std.isra.0>
 8017ff0:	2202      	movs	r2, #2
 8017ff2:	2112      	movs	r1, #18
 8017ff4:	68e0      	ldr	r0, [r4, #12]
 8017ff6:	f7ff ff7b 	bl	8017ef0 <std.isra.0>
 8017ffa:	2301      	movs	r3, #1
 8017ffc:	61a3      	str	r3, [r4, #24]
 8017ffe:	e7cf      	b.n	8017fa0 <__sinit+0xc>
 8018000:	0801ad38 	.word	0x0801ad38
 8018004:	08017ee5 	.word	0x08017ee5

08018008 <__sfp>:
 8018008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801800a:	4607      	mov	r7, r0
 801800c:	f7ff ffaa 	bl	8017f64 <__sfp_lock_acquire>
 8018010:	4b1f      	ldr	r3, [pc, #124]	; (8018090 <__sfp+0x88>)
 8018012:	681e      	ldr	r6, [r3, #0]
 8018014:	69b3      	ldr	r3, [r6, #24]
 8018016:	b913      	cbnz	r3, 801801e <__sfp+0x16>
 8018018:	4630      	mov	r0, r6
 801801a:	f7ff ffbb 	bl	8017f94 <__sinit>
 801801e:	36d8      	adds	r6, #216	; 0xd8
 8018020:	68b4      	ldr	r4, [r6, #8]
 8018022:	6873      	ldr	r3, [r6, #4]
 8018024:	3b01      	subs	r3, #1
 8018026:	d503      	bpl.n	8018030 <__sfp+0x28>
 8018028:	6833      	ldr	r3, [r6, #0]
 801802a:	b133      	cbz	r3, 801803a <__sfp+0x32>
 801802c:	6836      	ldr	r6, [r6, #0]
 801802e:	e7f7      	b.n	8018020 <__sfp+0x18>
 8018030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018034:	b17d      	cbz	r5, 8018056 <__sfp+0x4e>
 8018036:	3468      	adds	r4, #104	; 0x68
 8018038:	e7f4      	b.n	8018024 <__sfp+0x1c>
 801803a:	2104      	movs	r1, #4
 801803c:	4638      	mov	r0, r7
 801803e:	f7ff ff7b 	bl	8017f38 <__sfmoreglue>
 8018042:	4604      	mov	r4, r0
 8018044:	6030      	str	r0, [r6, #0]
 8018046:	2800      	cmp	r0, #0
 8018048:	d1f0      	bne.n	801802c <__sfp+0x24>
 801804a:	f7ff ff91 	bl	8017f70 <__sfp_lock_release>
 801804e:	230c      	movs	r3, #12
 8018050:	603b      	str	r3, [r7, #0]
 8018052:	4620      	mov	r0, r4
 8018054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801805a:	81e3      	strh	r3, [r4, #14]
 801805c:	2301      	movs	r3, #1
 801805e:	81a3      	strh	r3, [r4, #12]
 8018060:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018064:	6665      	str	r5, [r4, #100]	; 0x64
 8018066:	f7fd faa1 	bl	80155ac <__retarget_lock_init_recursive>
 801806a:	f7ff ff81 	bl	8017f70 <__sfp_lock_release>
 801806e:	6025      	str	r5, [r4, #0]
 8018070:	60a5      	str	r5, [r4, #8]
 8018072:	6065      	str	r5, [r4, #4]
 8018074:	6125      	str	r5, [r4, #16]
 8018076:	6165      	str	r5, [r4, #20]
 8018078:	61a5      	str	r5, [r4, #24]
 801807a:	2208      	movs	r2, #8
 801807c:	4629      	mov	r1, r5
 801807e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018082:	f7fd fceb 	bl	8015a5c <memset>
 8018086:	6365      	str	r5, [r4, #52]	; 0x34
 8018088:	63a5      	str	r5, [r4, #56]	; 0x38
 801808a:	64a5      	str	r5, [r4, #72]	; 0x48
 801808c:	64e5      	str	r5, [r4, #76]	; 0x4c
 801808e:	e7e0      	b.n	8018052 <__sfp+0x4a>
 8018090:	0801ad38 	.word	0x0801ad38

08018094 <_malloc_trim_r>:
 8018094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018098:	4f25      	ldr	r7, [pc, #148]	; (8018130 <_malloc_trim_r+0x9c>)
 801809a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801813c <_malloc_trim_r+0xa8>
 801809e:	4689      	mov	r9, r1
 80180a0:	4606      	mov	r6, r0
 80180a2:	f7fd fce3 	bl	8015a6c <__malloc_lock>
 80180a6:	68bb      	ldr	r3, [r7, #8]
 80180a8:	685d      	ldr	r5, [r3, #4]
 80180aa:	f1a8 0411 	sub.w	r4, r8, #17
 80180ae:	f025 0503 	bic.w	r5, r5, #3
 80180b2:	eba4 0409 	sub.w	r4, r4, r9
 80180b6:	442c      	add	r4, r5
 80180b8:	fbb4 f4f8 	udiv	r4, r4, r8
 80180bc:	3c01      	subs	r4, #1
 80180be:	fb08 f404 	mul.w	r4, r8, r4
 80180c2:	4544      	cmp	r4, r8
 80180c4:	da05      	bge.n	80180d2 <_malloc_trim_r+0x3e>
 80180c6:	4630      	mov	r0, r6
 80180c8:	f7fd fcd6 	bl	8015a78 <__malloc_unlock>
 80180cc:	2000      	movs	r0, #0
 80180ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180d2:	2100      	movs	r1, #0
 80180d4:	4630      	mov	r0, r6
 80180d6:	f7fd fea5 	bl	8015e24 <_sbrk_r>
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	442b      	add	r3, r5
 80180de:	4298      	cmp	r0, r3
 80180e0:	d1f1      	bne.n	80180c6 <_malloc_trim_r+0x32>
 80180e2:	4261      	negs	r1, r4
 80180e4:	4630      	mov	r0, r6
 80180e6:	f7fd fe9d 	bl	8015e24 <_sbrk_r>
 80180ea:	3001      	adds	r0, #1
 80180ec:	d110      	bne.n	8018110 <_malloc_trim_r+0x7c>
 80180ee:	2100      	movs	r1, #0
 80180f0:	4630      	mov	r0, r6
 80180f2:	f7fd fe97 	bl	8015e24 <_sbrk_r>
 80180f6:	68ba      	ldr	r2, [r7, #8]
 80180f8:	1a83      	subs	r3, r0, r2
 80180fa:	2b0f      	cmp	r3, #15
 80180fc:	dde3      	ble.n	80180c6 <_malloc_trim_r+0x32>
 80180fe:	490d      	ldr	r1, [pc, #52]	; (8018134 <_malloc_trim_r+0xa0>)
 8018100:	6809      	ldr	r1, [r1, #0]
 8018102:	1a40      	subs	r0, r0, r1
 8018104:	490c      	ldr	r1, [pc, #48]	; (8018138 <_malloc_trim_r+0xa4>)
 8018106:	f043 0301 	orr.w	r3, r3, #1
 801810a:	6008      	str	r0, [r1, #0]
 801810c:	6053      	str	r3, [r2, #4]
 801810e:	e7da      	b.n	80180c6 <_malloc_trim_r+0x32>
 8018110:	68bb      	ldr	r3, [r7, #8]
 8018112:	4a09      	ldr	r2, [pc, #36]	; (8018138 <_malloc_trim_r+0xa4>)
 8018114:	1b2d      	subs	r5, r5, r4
 8018116:	f045 0501 	orr.w	r5, r5, #1
 801811a:	605d      	str	r5, [r3, #4]
 801811c:	6813      	ldr	r3, [r2, #0]
 801811e:	4630      	mov	r0, r6
 8018120:	1b1c      	subs	r4, r3, r4
 8018122:	6014      	str	r4, [r2, #0]
 8018124:	f7fd fca8 	bl	8015a78 <__malloc_unlock>
 8018128:	2001      	movs	r0, #1
 801812a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801812e:	bf00      	nop
 8018130:	20000128 	.word	0x20000128
 8018134:	20000530 	.word	0x20000530
 8018138:	20007694 	.word	0x20007694
 801813c:	00001000 	.word	0x00001000

08018140 <_free_r>:
 8018140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018144:	4604      	mov	r4, r0
 8018146:	4688      	mov	r8, r1
 8018148:	2900      	cmp	r1, #0
 801814a:	f000 80ab 	beq.w	80182a4 <_free_r+0x164>
 801814e:	f7fd fc8d 	bl	8015a6c <__malloc_lock>
 8018152:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8018156:	4d54      	ldr	r5, [pc, #336]	; (80182a8 <_free_r+0x168>)
 8018158:	f022 0001 	bic.w	r0, r2, #1
 801815c:	f1a8 0308 	sub.w	r3, r8, #8
 8018160:	181f      	adds	r7, r3, r0
 8018162:	68a9      	ldr	r1, [r5, #8]
 8018164:	687e      	ldr	r6, [r7, #4]
 8018166:	428f      	cmp	r7, r1
 8018168:	f026 0603 	bic.w	r6, r6, #3
 801816c:	f002 0201 	and.w	r2, r2, #1
 8018170:	d11b      	bne.n	80181aa <_free_r+0x6a>
 8018172:	4430      	add	r0, r6
 8018174:	b93a      	cbnz	r2, 8018186 <_free_r+0x46>
 8018176:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801817a:	1a9b      	subs	r3, r3, r2
 801817c:	4410      	add	r0, r2
 801817e:	6899      	ldr	r1, [r3, #8]
 8018180:	68da      	ldr	r2, [r3, #12]
 8018182:	60ca      	str	r2, [r1, #12]
 8018184:	6091      	str	r1, [r2, #8]
 8018186:	f040 0201 	orr.w	r2, r0, #1
 801818a:	605a      	str	r2, [r3, #4]
 801818c:	60ab      	str	r3, [r5, #8]
 801818e:	4b47      	ldr	r3, [pc, #284]	; (80182ac <_free_r+0x16c>)
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	4298      	cmp	r0, r3
 8018194:	d304      	bcc.n	80181a0 <_free_r+0x60>
 8018196:	4b46      	ldr	r3, [pc, #280]	; (80182b0 <_free_r+0x170>)
 8018198:	4620      	mov	r0, r4
 801819a:	6819      	ldr	r1, [r3, #0]
 801819c:	f7ff ff7a 	bl	8018094 <_malloc_trim_r>
 80181a0:	4620      	mov	r0, r4
 80181a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181a6:	f7fd bc67 	b.w	8015a78 <__malloc_unlock>
 80181aa:	607e      	str	r6, [r7, #4]
 80181ac:	2a00      	cmp	r2, #0
 80181ae:	d139      	bne.n	8018224 <_free_r+0xe4>
 80181b0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80181b4:	1a5b      	subs	r3, r3, r1
 80181b6:	4408      	add	r0, r1
 80181b8:	6899      	ldr	r1, [r3, #8]
 80181ba:	f105 0e08 	add.w	lr, r5, #8
 80181be:	4571      	cmp	r1, lr
 80181c0:	d032      	beq.n	8018228 <_free_r+0xe8>
 80181c2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80181c6:	f8c1 e00c 	str.w	lr, [r1, #12]
 80181ca:	f8ce 1008 	str.w	r1, [lr, #8]
 80181ce:	19b9      	adds	r1, r7, r6
 80181d0:	6849      	ldr	r1, [r1, #4]
 80181d2:	07c9      	lsls	r1, r1, #31
 80181d4:	d40a      	bmi.n	80181ec <_free_r+0xac>
 80181d6:	4430      	add	r0, r6
 80181d8:	68b9      	ldr	r1, [r7, #8]
 80181da:	bb3a      	cbnz	r2, 801822c <_free_r+0xec>
 80181dc:	4e35      	ldr	r6, [pc, #212]	; (80182b4 <_free_r+0x174>)
 80181de:	42b1      	cmp	r1, r6
 80181e0:	d124      	bne.n	801822c <_free_r+0xec>
 80181e2:	616b      	str	r3, [r5, #20]
 80181e4:	612b      	str	r3, [r5, #16]
 80181e6:	2201      	movs	r2, #1
 80181e8:	60d9      	str	r1, [r3, #12]
 80181ea:	6099      	str	r1, [r3, #8]
 80181ec:	f040 0101 	orr.w	r1, r0, #1
 80181f0:	6059      	str	r1, [r3, #4]
 80181f2:	5018      	str	r0, [r3, r0]
 80181f4:	2a00      	cmp	r2, #0
 80181f6:	d1d3      	bne.n	80181a0 <_free_r+0x60>
 80181f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80181fc:	d21a      	bcs.n	8018234 <_free_r+0xf4>
 80181fe:	08c0      	lsrs	r0, r0, #3
 8018200:	1081      	asrs	r1, r0, #2
 8018202:	2201      	movs	r2, #1
 8018204:	408a      	lsls	r2, r1
 8018206:	6869      	ldr	r1, [r5, #4]
 8018208:	3001      	adds	r0, #1
 801820a:	430a      	orrs	r2, r1
 801820c:	606a      	str	r2, [r5, #4]
 801820e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8018212:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8018216:	6099      	str	r1, [r3, #8]
 8018218:	3a08      	subs	r2, #8
 801821a:	60da      	str	r2, [r3, #12]
 801821c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8018220:	60cb      	str	r3, [r1, #12]
 8018222:	e7bd      	b.n	80181a0 <_free_r+0x60>
 8018224:	2200      	movs	r2, #0
 8018226:	e7d2      	b.n	80181ce <_free_r+0x8e>
 8018228:	2201      	movs	r2, #1
 801822a:	e7d0      	b.n	80181ce <_free_r+0x8e>
 801822c:	68fe      	ldr	r6, [r7, #12]
 801822e:	60ce      	str	r6, [r1, #12]
 8018230:	60b1      	str	r1, [r6, #8]
 8018232:	e7db      	b.n	80181ec <_free_r+0xac>
 8018234:	0a42      	lsrs	r2, r0, #9
 8018236:	2a04      	cmp	r2, #4
 8018238:	d813      	bhi.n	8018262 <_free_r+0x122>
 801823a:	0982      	lsrs	r2, r0, #6
 801823c:	3238      	adds	r2, #56	; 0x38
 801823e:	1c51      	adds	r1, r2, #1
 8018240:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8018244:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8018248:	428e      	cmp	r6, r1
 801824a:	d124      	bne.n	8018296 <_free_r+0x156>
 801824c:	2001      	movs	r0, #1
 801824e:	1092      	asrs	r2, r2, #2
 8018250:	fa00 f202 	lsl.w	r2, r0, r2
 8018254:	6868      	ldr	r0, [r5, #4]
 8018256:	4302      	orrs	r2, r0
 8018258:	606a      	str	r2, [r5, #4]
 801825a:	60de      	str	r6, [r3, #12]
 801825c:	6099      	str	r1, [r3, #8]
 801825e:	60b3      	str	r3, [r6, #8]
 8018260:	e7de      	b.n	8018220 <_free_r+0xe0>
 8018262:	2a14      	cmp	r2, #20
 8018264:	d801      	bhi.n	801826a <_free_r+0x12a>
 8018266:	325b      	adds	r2, #91	; 0x5b
 8018268:	e7e9      	b.n	801823e <_free_r+0xfe>
 801826a:	2a54      	cmp	r2, #84	; 0x54
 801826c:	d802      	bhi.n	8018274 <_free_r+0x134>
 801826e:	0b02      	lsrs	r2, r0, #12
 8018270:	326e      	adds	r2, #110	; 0x6e
 8018272:	e7e4      	b.n	801823e <_free_r+0xfe>
 8018274:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8018278:	d802      	bhi.n	8018280 <_free_r+0x140>
 801827a:	0bc2      	lsrs	r2, r0, #15
 801827c:	3277      	adds	r2, #119	; 0x77
 801827e:	e7de      	b.n	801823e <_free_r+0xfe>
 8018280:	f240 5154 	movw	r1, #1364	; 0x554
 8018284:	428a      	cmp	r2, r1
 8018286:	bf9a      	itte	ls
 8018288:	0c82      	lsrls	r2, r0, #18
 801828a:	327c      	addls	r2, #124	; 0x7c
 801828c:	227e      	movhi	r2, #126	; 0x7e
 801828e:	e7d6      	b.n	801823e <_free_r+0xfe>
 8018290:	6889      	ldr	r1, [r1, #8]
 8018292:	428e      	cmp	r6, r1
 8018294:	d004      	beq.n	80182a0 <_free_r+0x160>
 8018296:	684a      	ldr	r2, [r1, #4]
 8018298:	f022 0203 	bic.w	r2, r2, #3
 801829c:	4290      	cmp	r0, r2
 801829e:	d3f7      	bcc.n	8018290 <_free_r+0x150>
 80182a0:	68ce      	ldr	r6, [r1, #12]
 80182a2:	e7da      	b.n	801825a <_free_r+0x11a>
 80182a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182a8:	20000128 	.word	0x20000128
 80182ac:	20000534 	.word	0x20000534
 80182b0:	200076c4 	.word	0x200076c4
 80182b4:	20000130 	.word	0x20000130

080182b8 <_fwalk_reent>:
 80182b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182bc:	4680      	mov	r8, r0
 80182be:	4689      	mov	r9, r1
 80182c0:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80182c4:	2600      	movs	r6, #0
 80182c6:	b914      	cbnz	r4, 80182ce <_fwalk_reent+0x16>
 80182c8:	4630      	mov	r0, r6
 80182ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182ce:	68a5      	ldr	r5, [r4, #8]
 80182d0:	6867      	ldr	r7, [r4, #4]
 80182d2:	3f01      	subs	r7, #1
 80182d4:	d501      	bpl.n	80182da <_fwalk_reent+0x22>
 80182d6:	6824      	ldr	r4, [r4, #0]
 80182d8:	e7f5      	b.n	80182c6 <_fwalk_reent+0xe>
 80182da:	89ab      	ldrh	r3, [r5, #12]
 80182dc:	2b01      	cmp	r3, #1
 80182de:	d907      	bls.n	80182f0 <_fwalk_reent+0x38>
 80182e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80182e4:	3301      	adds	r3, #1
 80182e6:	d003      	beq.n	80182f0 <_fwalk_reent+0x38>
 80182e8:	4629      	mov	r1, r5
 80182ea:	4640      	mov	r0, r8
 80182ec:	47c8      	blx	r9
 80182ee:	4306      	orrs	r6, r0
 80182f0:	3568      	adds	r5, #104	; 0x68
 80182f2:	e7ee      	b.n	80182d2 <_fwalk_reent+0x1a>

080182f4 <_localeconv_r>:
 80182f4:	4b04      	ldr	r3, [pc, #16]	; (8018308 <_localeconv_r+0x14>)
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	6a18      	ldr	r0, [r3, #32]
 80182fa:	4b04      	ldr	r3, [pc, #16]	; (801830c <_localeconv_r+0x18>)
 80182fc:	2800      	cmp	r0, #0
 80182fe:	bf08      	it	eq
 8018300:	4618      	moveq	r0, r3
 8018302:	30f0      	adds	r0, #240	; 0xf0
 8018304:	4770      	bx	lr
 8018306:	bf00      	nop
 8018308:	20000034 	.word	0x20000034
 801830c:	2000053c 	.word	0x2000053c

08018310 <__swhatbuf_r>:
 8018310:	b570      	push	{r4, r5, r6, lr}
 8018312:	460e      	mov	r6, r1
 8018314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018318:	2900      	cmp	r1, #0
 801831a:	b090      	sub	sp, #64	; 0x40
 801831c:	4614      	mov	r4, r2
 801831e:	461d      	mov	r5, r3
 8018320:	da09      	bge.n	8018336 <__swhatbuf_r+0x26>
 8018322:	89b3      	ldrh	r3, [r6, #12]
 8018324:	2200      	movs	r2, #0
 8018326:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801832a:	602a      	str	r2, [r5, #0]
 801832c:	d116      	bne.n	801835c <__swhatbuf_r+0x4c>
 801832e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018332:	6023      	str	r3, [r4, #0]
 8018334:	e015      	b.n	8018362 <__swhatbuf_r+0x52>
 8018336:	aa01      	add	r2, sp, #4
 8018338:	f000 fc8c 	bl	8018c54 <_fstat_r>
 801833c:	2800      	cmp	r0, #0
 801833e:	dbf0      	blt.n	8018322 <__swhatbuf_r+0x12>
 8018340:	9a02      	ldr	r2, [sp, #8]
 8018342:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018346:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801834a:	425a      	negs	r2, r3
 801834c:	415a      	adcs	r2, r3
 801834e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018352:	602a      	str	r2, [r5, #0]
 8018354:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018358:	6023      	str	r3, [r4, #0]
 801835a:	e002      	b.n	8018362 <__swhatbuf_r+0x52>
 801835c:	2340      	movs	r3, #64	; 0x40
 801835e:	6023      	str	r3, [r4, #0]
 8018360:	4610      	mov	r0, r2
 8018362:	b010      	add	sp, #64	; 0x40
 8018364:	bd70      	pop	{r4, r5, r6, pc}
	...

08018368 <__smakebuf_r>:
 8018368:	898b      	ldrh	r3, [r1, #12]
 801836a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801836c:	079d      	lsls	r5, r3, #30
 801836e:	4606      	mov	r6, r0
 8018370:	460c      	mov	r4, r1
 8018372:	d507      	bpl.n	8018384 <__smakebuf_r+0x1c>
 8018374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018378:	6023      	str	r3, [r4, #0]
 801837a:	6123      	str	r3, [r4, #16]
 801837c:	2301      	movs	r3, #1
 801837e:	6163      	str	r3, [r4, #20]
 8018380:	b002      	add	sp, #8
 8018382:	bd70      	pop	{r4, r5, r6, pc}
 8018384:	ab01      	add	r3, sp, #4
 8018386:	466a      	mov	r2, sp
 8018388:	f7ff ffc2 	bl	8018310 <__swhatbuf_r>
 801838c:	9900      	ldr	r1, [sp, #0]
 801838e:	4605      	mov	r5, r0
 8018390:	4630      	mov	r0, r6
 8018392:	f7fd f921 	bl	80155d8 <_malloc_r>
 8018396:	b948      	cbnz	r0, 80183ac <__smakebuf_r+0x44>
 8018398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801839c:	059a      	lsls	r2, r3, #22
 801839e:	d4ef      	bmi.n	8018380 <__smakebuf_r+0x18>
 80183a0:	f023 0303 	bic.w	r3, r3, #3
 80183a4:	f043 0302 	orr.w	r3, r3, #2
 80183a8:	81a3      	strh	r3, [r4, #12]
 80183aa:	e7e3      	b.n	8018374 <__smakebuf_r+0xc>
 80183ac:	4b0d      	ldr	r3, [pc, #52]	; (80183e4 <__smakebuf_r+0x7c>)
 80183ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80183b0:	89a3      	ldrh	r3, [r4, #12]
 80183b2:	6020      	str	r0, [r4, #0]
 80183b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183b8:	81a3      	strh	r3, [r4, #12]
 80183ba:	9b00      	ldr	r3, [sp, #0]
 80183bc:	6163      	str	r3, [r4, #20]
 80183be:	9b01      	ldr	r3, [sp, #4]
 80183c0:	6120      	str	r0, [r4, #16]
 80183c2:	b15b      	cbz	r3, 80183dc <__smakebuf_r+0x74>
 80183c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183c8:	4630      	mov	r0, r6
 80183ca:	f000 fc55 	bl	8018c78 <_isatty_r>
 80183ce:	b128      	cbz	r0, 80183dc <__smakebuf_r+0x74>
 80183d0:	89a3      	ldrh	r3, [r4, #12]
 80183d2:	f023 0303 	bic.w	r3, r3, #3
 80183d6:	f043 0301 	orr.w	r3, r3, #1
 80183da:	81a3      	strh	r3, [r4, #12]
 80183dc:	89a3      	ldrh	r3, [r4, #12]
 80183de:	431d      	orrs	r5, r3
 80183e0:	81a5      	strh	r5, [r4, #12]
 80183e2:	e7cd      	b.n	8018380 <__smakebuf_r+0x18>
 80183e4:	08017ee5 	.word	0x08017ee5

080183e8 <_Balloc>:
 80183e8:	b570      	push	{r4, r5, r6, lr}
 80183ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80183ec:	4604      	mov	r4, r0
 80183ee:	460e      	mov	r6, r1
 80183f0:	b93d      	cbnz	r5, 8018402 <_Balloc+0x1a>
 80183f2:	2010      	movs	r0, #16
 80183f4:	f7fd f8e0 	bl	80155b8 <malloc>
 80183f8:	6260      	str	r0, [r4, #36]	; 0x24
 80183fa:	6045      	str	r5, [r0, #4]
 80183fc:	6085      	str	r5, [r0, #8]
 80183fe:	6005      	str	r5, [r0, #0]
 8018400:	60c5      	str	r5, [r0, #12]
 8018402:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018404:	68eb      	ldr	r3, [r5, #12]
 8018406:	b183      	cbz	r3, 801842a <_Balloc+0x42>
 8018408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801840a:	68db      	ldr	r3, [r3, #12]
 801840c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018410:	b9b8      	cbnz	r0, 8018442 <_Balloc+0x5a>
 8018412:	2101      	movs	r1, #1
 8018414:	fa01 f506 	lsl.w	r5, r1, r6
 8018418:	1d6a      	adds	r2, r5, #5
 801841a:	0092      	lsls	r2, r2, #2
 801841c:	4620      	mov	r0, r4
 801841e:	f000 fb70 	bl	8018b02 <_calloc_r>
 8018422:	b160      	cbz	r0, 801843e <_Balloc+0x56>
 8018424:	6046      	str	r6, [r0, #4]
 8018426:	6085      	str	r5, [r0, #8]
 8018428:	e00e      	b.n	8018448 <_Balloc+0x60>
 801842a:	2221      	movs	r2, #33	; 0x21
 801842c:	2104      	movs	r1, #4
 801842e:	4620      	mov	r0, r4
 8018430:	f000 fb67 	bl	8018b02 <_calloc_r>
 8018434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018436:	60e8      	str	r0, [r5, #12]
 8018438:	68db      	ldr	r3, [r3, #12]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d1e4      	bne.n	8018408 <_Balloc+0x20>
 801843e:	2000      	movs	r0, #0
 8018440:	bd70      	pop	{r4, r5, r6, pc}
 8018442:	6802      	ldr	r2, [r0, #0]
 8018444:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018448:	2300      	movs	r3, #0
 801844a:	6103      	str	r3, [r0, #16]
 801844c:	60c3      	str	r3, [r0, #12]
 801844e:	bd70      	pop	{r4, r5, r6, pc}

08018450 <_Bfree>:
 8018450:	b570      	push	{r4, r5, r6, lr}
 8018452:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018454:	4606      	mov	r6, r0
 8018456:	460d      	mov	r5, r1
 8018458:	b93c      	cbnz	r4, 801846a <_Bfree+0x1a>
 801845a:	2010      	movs	r0, #16
 801845c:	f7fd f8ac 	bl	80155b8 <malloc>
 8018460:	6270      	str	r0, [r6, #36]	; 0x24
 8018462:	6044      	str	r4, [r0, #4]
 8018464:	6084      	str	r4, [r0, #8]
 8018466:	6004      	str	r4, [r0, #0]
 8018468:	60c4      	str	r4, [r0, #12]
 801846a:	b13d      	cbz	r5, 801847c <_Bfree+0x2c>
 801846c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801846e:	686a      	ldr	r2, [r5, #4]
 8018470:	68db      	ldr	r3, [r3, #12]
 8018472:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018476:	6029      	str	r1, [r5, #0]
 8018478:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801847c:	bd70      	pop	{r4, r5, r6, pc}

0801847e <__multadd>:
 801847e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018482:	690d      	ldr	r5, [r1, #16]
 8018484:	461f      	mov	r7, r3
 8018486:	4606      	mov	r6, r0
 8018488:	460c      	mov	r4, r1
 801848a:	f101 0e14 	add.w	lr, r1, #20
 801848e:	2300      	movs	r3, #0
 8018490:	f8de 0000 	ldr.w	r0, [lr]
 8018494:	b281      	uxth	r1, r0
 8018496:	fb02 7101 	mla	r1, r2, r1, r7
 801849a:	0c0f      	lsrs	r7, r1, #16
 801849c:	0c00      	lsrs	r0, r0, #16
 801849e:	fb02 7000 	mla	r0, r2, r0, r7
 80184a2:	b289      	uxth	r1, r1
 80184a4:	3301      	adds	r3, #1
 80184a6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80184aa:	429d      	cmp	r5, r3
 80184ac:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80184b0:	f84e 1b04 	str.w	r1, [lr], #4
 80184b4:	dcec      	bgt.n	8018490 <__multadd+0x12>
 80184b6:	b1d7      	cbz	r7, 80184ee <__multadd+0x70>
 80184b8:	68a3      	ldr	r3, [r4, #8]
 80184ba:	429d      	cmp	r5, r3
 80184bc:	db12      	blt.n	80184e4 <__multadd+0x66>
 80184be:	6861      	ldr	r1, [r4, #4]
 80184c0:	4630      	mov	r0, r6
 80184c2:	3101      	adds	r1, #1
 80184c4:	f7ff ff90 	bl	80183e8 <_Balloc>
 80184c8:	6922      	ldr	r2, [r4, #16]
 80184ca:	3202      	adds	r2, #2
 80184cc:	f104 010c 	add.w	r1, r4, #12
 80184d0:	4680      	mov	r8, r0
 80184d2:	0092      	lsls	r2, r2, #2
 80184d4:	300c      	adds	r0, #12
 80184d6:	f7fd fa9c 	bl	8015a12 <memcpy>
 80184da:	4621      	mov	r1, r4
 80184dc:	4630      	mov	r0, r6
 80184de:	f7ff ffb7 	bl	8018450 <_Bfree>
 80184e2:	4644      	mov	r4, r8
 80184e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80184e8:	3501      	adds	r5, #1
 80184ea:	615f      	str	r7, [r3, #20]
 80184ec:	6125      	str	r5, [r4, #16]
 80184ee:	4620      	mov	r0, r4
 80184f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080184f4 <__hi0bits>:
 80184f4:	0c02      	lsrs	r2, r0, #16
 80184f6:	0412      	lsls	r2, r2, #16
 80184f8:	4603      	mov	r3, r0
 80184fa:	b9b2      	cbnz	r2, 801852a <__hi0bits+0x36>
 80184fc:	0403      	lsls	r3, r0, #16
 80184fe:	2010      	movs	r0, #16
 8018500:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018504:	bf04      	itt	eq
 8018506:	021b      	lsleq	r3, r3, #8
 8018508:	3008      	addeq	r0, #8
 801850a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801850e:	bf04      	itt	eq
 8018510:	011b      	lsleq	r3, r3, #4
 8018512:	3004      	addeq	r0, #4
 8018514:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018518:	bf04      	itt	eq
 801851a:	009b      	lsleq	r3, r3, #2
 801851c:	3002      	addeq	r0, #2
 801851e:	2b00      	cmp	r3, #0
 8018520:	db06      	blt.n	8018530 <__hi0bits+0x3c>
 8018522:	005b      	lsls	r3, r3, #1
 8018524:	d503      	bpl.n	801852e <__hi0bits+0x3a>
 8018526:	3001      	adds	r0, #1
 8018528:	4770      	bx	lr
 801852a:	2000      	movs	r0, #0
 801852c:	e7e8      	b.n	8018500 <__hi0bits+0xc>
 801852e:	2020      	movs	r0, #32
 8018530:	4770      	bx	lr

08018532 <__lo0bits>:
 8018532:	6803      	ldr	r3, [r0, #0]
 8018534:	f013 0207 	ands.w	r2, r3, #7
 8018538:	4601      	mov	r1, r0
 801853a:	d00b      	beq.n	8018554 <__lo0bits+0x22>
 801853c:	07da      	lsls	r2, r3, #31
 801853e:	d423      	bmi.n	8018588 <__lo0bits+0x56>
 8018540:	0798      	lsls	r0, r3, #30
 8018542:	bf49      	itett	mi
 8018544:	085b      	lsrmi	r3, r3, #1
 8018546:	089b      	lsrpl	r3, r3, #2
 8018548:	2001      	movmi	r0, #1
 801854a:	600b      	strmi	r3, [r1, #0]
 801854c:	bf5c      	itt	pl
 801854e:	600b      	strpl	r3, [r1, #0]
 8018550:	2002      	movpl	r0, #2
 8018552:	4770      	bx	lr
 8018554:	b298      	uxth	r0, r3
 8018556:	b9a8      	cbnz	r0, 8018584 <__lo0bits+0x52>
 8018558:	0c1b      	lsrs	r3, r3, #16
 801855a:	2010      	movs	r0, #16
 801855c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018560:	bf04      	itt	eq
 8018562:	0a1b      	lsreq	r3, r3, #8
 8018564:	3008      	addeq	r0, #8
 8018566:	071a      	lsls	r2, r3, #28
 8018568:	bf04      	itt	eq
 801856a:	091b      	lsreq	r3, r3, #4
 801856c:	3004      	addeq	r0, #4
 801856e:	079a      	lsls	r2, r3, #30
 8018570:	bf04      	itt	eq
 8018572:	089b      	lsreq	r3, r3, #2
 8018574:	3002      	addeq	r0, #2
 8018576:	07da      	lsls	r2, r3, #31
 8018578:	d402      	bmi.n	8018580 <__lo0bits+0x4e>
 801857a:	085b      	lsrs	r3, r3, #1
 801857c:	d006      	beq.n	801858c <__lo0bits+0x5a>
 801857e:	3001      	adds	r0, #1
 8018580:	600b      	str	r3, [r1, #0]
 8018582:	4770      	bx	lr
 8018584:	4610      	mov	r0, r2
 8018586:	e7e9      	b.n	801855c <__lo0bits+0x2a>
 8018588:	2000      	movs	r0, #0
 801858a:	4770      	bx	lr
 801858c:	2020      	movs	r0, #32
 801858e:	4770      	bx	lr

08018590 <__i2b>:
 8018590:	b510      	push	{r4, lr}
 8018592:	460c      	mov	r4, r1
 8018594:	2101      	movs	r1, #1
 8018596:	f7ff ff27 	bl	80183e8 <_Balloc>
 801859a:	2201      	movs	r2, #1
 801859c:	6144      	str	r4, [r0, #20]
 801859e:	6102      	str	r2, [r0, #16]
 80185a0:	bd10      	pop	{r4, pc}

080185a2 <__multiply>:
 80185a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185a6:	4614      	mov	r4, r2
 80185a8:	690a      	ldr	r2, [r1, #16]
 80185aa:	6923      	ldr	r3, [r4, #16]
 80185ac:	429a      	cmp	r2, r3
 80185ae:	bfb8      	it	lt
 80185b0:	460b      	movlt	r3, r1
 80185b2:	4689      	mov	r9, r1
 80185b4:	bfbc      	itt	lt
 80185b6:	46a1      	movlt	r9, r4
 80185b8:	461c      	movlt	r4, r3
 80185ba:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80185be:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80185c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80185c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80185ca:	eb07 060a 	add.w	r6, r7, sl
 80185ce:	429e      	cmp	r6, r3
 80185d0:	bfc8      	it	gt
 80185d2:	3101      	addgt	r1, #1
 80185d4:	f7ff ff08 	bl	80183e8 <_Balloc>
 80185d8:	f100 0514 	add.w	r5, r0, #20
 80185dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80185e0:	462b      	mov	r3, r5
 80185e2:	2200      	movs	r2, #0
 80185e4:	4543      	cmp	r3, r8
 80185e6:	d316      	bcc.n	8018616 <__multiply+0x74>
 80185e8:	f104 0214 	add.w	r2, r4, #20
 80185ec:	f109 0114 	add.w	r1, r9, #20
 80185f0:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80185f4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80185f8:	9301      	str	r3, [sp, #4]
 80185fa:	9c01      	ldr	r4, [sp, #4]
 80185fc:	4294      	cmp	r4, r2
 80185fe:	4613      	mov	r3, r2
 8018600:	d80c      	bhi.n	801861c <__multiply+0x7a>
 8018602:	2e00      	cmp	r6, #0
 8018604:	dd03      	ble.n	801860e <__multiply+0x6c>
 8018606:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801860a:	2b00      	cmp	r3, #0
 801860c:	d054      	beq.n	80186b8 <__multiply+0x116>
 801860e:	6106      	str	r6, [r0, #16]
 8018610:	b003      	add	sp, #12
 8018612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018616:	f843 2b04 	str.w	r2, [r3], #4
 801861a:	e7e3      	b.n	80185e4 <__multiply+0x42>
 801861c:	f8b3 a000 	ldrh.w	sl, [r3]
 8018620:	3204      	adds	r2, #4
 8018622:	f1ba 0f00 	cmp.w	sl, #0
 8018626:	d020      	beq.n	801866a <__multiply+0xc8>
 8018628:	46ae      	mov	lr, r5
 801862a:	4689      	mov	r9, r1
 801862c:	f04f 0c00 	mov.w	ip, #0
 8018630:	f859 4b04 	ldr.w	r4, [r9], #4
 8018634:	f8be b000 	ldrh.w	fp, [lr]
 8018638:	b2a3      	uxth	r3, r4
 801863a:	fb0a b303 	mla	r3, sl, r3, fp
 801863e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8018642:	f8de 4000 	ldr.w	r4, [lr]
 8018646:	4463      	add	r3, ip
 8018648:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801864c:	fb0a c40b 	mla	r4, sl, fp, ip
 8018650:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018654:	b29b      	uxth	r3, r3
 8018656:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801865a:	454f      	cmp	r7, r9
 801865c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8018660:	f84e 3b04 	str.w	r3, [lr], #4
 8018664:	d8e4      	bhi.n	8018630 <__multiply+0x8e>
 8018666:	f8ce c000 	str.w	ip, [lr]
 801866a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801866e:	f1b9 0f00 	cmp.w	r9, #0
 8018672:	d01f      	beq.n	80186b4 <__multiply+0x112>
 8018674:	682b      	ldr	r3, [r5, #0]
 8018676:	46ae      	mov	lr, r5
 8018678:	468c      	mov	ip, r1
 801867a:	f04f 0a00 	mov.w	sl, #0
 801867e:	f8bc 4000 	ldrh.w	r4, [ip]
 8018682:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018686:	fb09 b404 	mla	r4, r9, r4, fp
 801868a:	44a2      	add	sl, r4
 801868c:	b29b      	uxth	r3, r3
 801868e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8018692:	f84e 3b04 	str.w	r3, [lr], #4
 8018696:	f85c 3b04 	ldr.w	r3, [ip], #4
 801869a:	f8be 4000 	ldrh.w	r4, [lr]
 801869e:	0c1b      	lsrs	r3, r3, #16
 80186a0:	fb09 4303 	mla	r3, r9, r3, r4
 80186a4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80186a8:	4567      	cmp	r7, ip
 80186aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80186ae:	d8e6      	bhi.n	801867e <__multiply+0xdc>
 80186b0:	f8ce 3000 	str.w	r3, [lr]
 80186b4:	3504      	adds	r5, #4
 80186b6:	e7a0      	b.n	80185fa <__multiply+0x58>
 80186b8:	3e01      	subs	r6, #1
 80186ba:	e7a2      	b.n	8018602 <__multiply+0x60>

080186bc <__pow5mult>:
 80186bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186c0:	4615      	mov	r5, r2
 80186c2:	f012 0203 	ands.w	r2, r2, #3
 80186c6:	4606      	mov	r6, r0
 80186c8:	460f      	mov	r7, r1
 80186ca:	d007      	beq.n	80186dc <__pow5mult+0x20>
 80186cc:	3a01      	subs	r2, #1
 80186ce:	4c21      	ldr	r4, [pc, #132]	; (8018754 <__pow5mult+0x98>)
 80186d0:	2300      	movs	r3, #0
 80186d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80186d6:	f7ff fed2 	bl	801847e <__multadd>
 80186da:	4607      	mov	r7, r0
 80186dc:	10ad      	asrs	r5, r5, #2
 80186de:	d035      	beq.n	801874c <__pow5mult+0x90>
 80186e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80186e2:	b93c      	cbnz	r4, 80186f4 <__pow5mult+0x38>
 80186e4:	2010      	movs	r0, #16
 80186e6:	f7fc ff67 	bl	80155b8 <malloc>
 80186ea:	6270      	str	r0, [r6, #36]	; 0x24
 80186ec:	6044      	str	r4, [r0, #4]
 80186ee:	6084      	str	r4, [r0, #8]
 80186f0:	6004      	str	r4, [r0, #0]
 80186f2:	60c4      	str	r4, [r0, #12]
 80186f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80186f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80186fc:	b94c      	cbnz	r4, 8018712 <__pow5mult+0x56>
 80186fe:	f240 2171 	movw	r1, #625	; 0x271
 8018702:	4630      	mov	r0, r6
 8018704:	f7ff ff44 	bl	8018590 <__i2b>
 8018708:	2300      	movs	r3, #0
 801870a:	f8c8 0008 	str.w	r0, [r8, #8]
 801870e:	4604      	mov	r4, r0
 8018710:	6003      	str	r3, [r0, #0]
 8018712:	f04f 0800 	mov.w	r8, #0
 8018716:	07eb      	lsls	r3, r5, #31
 8018718:	d50a      	bpl.n	8018730 <__pow5mult+0x74>
 801871a:	4639      	mov	r1, r7
 801871c:	4622      	mov	r2, r4
 801871e:	4630      	mov	r0, r6
 8018720:	f7ff ff3f 	bl	80185a2 <__multiply>
 8018724:	4639      	mov	r1, r7
 8018726:	4681      	mov	r9, r0
 8018728:	4630      	mov	r0, r6
 801872a:	f7ff fe91 	bl	8018450 <_Bfree>
 801872e:	464f      	mov	r7, r9
 8018730:	106d      	asrs	r5, r5, #1
 8018732:	d00b      	beq.n	801874c <__pow5mult+0x90>
 8018734:	6820      	ldr	r0, [r4, #0]
 8018736:	b938      	cbnz	r0, 8018748 <__pow5mult+0x8c>
 8018738:	4622      	mov	r2, r4
 801873a:	4621      	mov	r1, r4
 801873c:	4630      	mov	r0, r6
 801873e:	f7ff ff30 	bl	80185a2 <__multiply>
 8018742:	6020      	str	r0, [r4, #0]
 8018744:	f8c0 8000 	str.w	r8, [r0]
 8018748:	4604      	mov	r4, r0
 801874a:	e7e4      	b.n	8018716 <__pow5mult+0x5a>
 801874c:	4638      	mov	r0, r7
 801874e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018752:	bf00      	nop
 8018754:	0801aef8 	.word	0x0801aef8

08018758 <__lshift>:
 8018758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801875c:	460c      	mov	r4, r1
 801875e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018762:	6923      	ldr	r3, [r4, #16]
 8018764:	6849      	ldr	r1, [r1, #4]
 8018766:	eb0a 0903 	add.w	r9, sl, r3
 801876a:	68a3      	ldr	r3, [r4, #8]
 801876c:	4607      	mov	r7, r0
 801876e:	4616      	mov	r6, r2
 8018770:	f109 0501 	add.w	r5, r9, #1
 8018774:	42ab      	cmp	r3, r5
 8018776:	db31      	blt.n	80187dc <__lshift+0x84>
 8018778:	4638      	mov	r0, r7
 801877a:	f7ff fe35 	bl	80183e8 <_Balloc>
 801877e:	2200      	movs	r2, #0
 8018780:	4680      	mov	r8, r0
 8018782:	f100 0314 	add.w	r3, r0, #20
 8018786:	4611      	mov	r1, r2
 8018788:	4552      	cmp	r2, sl
 801878a:	db2a      	blt.n	80187e2 <__lshift+0x8a>
 801878c:	6920      	ldr	r0, [r4, #16]
 801878e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018792:	f104 0114 	add.w	r1, r4, #20
 8018796:	f016 021f 	ands.w	r2, r6, #31
 801879a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801879e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80187a2:	d022      	beq.n	80187ea <__lshift+0x92>
 80187a4:	f1c2 0c20 	rsb	ip, r2, #32
 80187a8:	2000      	movs	r0, #0
 80187aa:	680e      	ldr	r6, [r1, #0]
 80187ac:	4096      	lsls	r6, r2
 80187ae:	4330      	orrs	r0, r6
 80187b0:	f843 0b04 	str.w	r0, [r3], #4
 80187b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80187b8:	458e      	cmp	lr, r1
 80187ba:	fa20 f00c 	lsr.w	r0, r0, ip
 80187be:	d8f4      	bhi.n	80187aa <__lshift+0x52>
 80187c0:	6018      	str	r0, [r3, #0]
 80187c2:	b108      	cbz	r0, 80187c8 <__lshift+0x70>
 80187c4:	f109 0502 	add.w	r5, r9, #2
 80187c8:	3d01      	subs	r5, #1
 80187ca:	4638      	mov	r0, r7
 80187cc:	f8c8 5010 	str.w	r5, [r8, #16]
 80187d0:	4621      	mov	r1, r4
 80187d2:	f7ff fe3d 	bl	8018450 <_Bfree>
 80187d6:	4640      	mov	r0, r8
 80187d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187dc:	3101      	adds	r1, #1
 80187de:	005b      	lsls	r3, r3, #1
 80187e0:	e7c8      	b.n	8018774 <__lshift+0x1c>
 80187e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80187e6:	3201      	adds	r2, #1
 80187e8:	e7ce      	b.n	8018788 <__lshift+0x30>
 80187ea:	3b04      	subs	r3, #4
 80187ec:	f851 2b04 	ldr.w	r2, [r1], #4
 80187f0:	f843 2f04 	str.w	r2, [r3, #4]!
 80187f4:	458e      	cmp	lr, r1
 80187f6:	d8f9      	bhi.n	80187ec <__lshift+0x94>
 80187f8:	e7e6      	b.n	80187c8 <__lshift+0x70>

080187fa <__mcmp>:
 80187fa:	6903      	ldr	r3, [r0, #16]
 80187fc:	690a      	ldr	r2, [r1, #16]
 80187fe:	1a9b      	subs	r3, r3, r2
 8018800:	b530      	push	{r4, r5, lr}
 8018802:	d10c      	bne.n	801881e <__mcmp+0x24>
 8018804:	0092      	lsls	r2, r2, #2
 8018806:	3014      	adds	r0, #20
 8018808:	3114      	adds	r1, #20
 801880a:	1884      	adds	r4, r0, r2
 801880c:	4411      	add	r1, r2
 801880e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018812:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018816:	4295      	cmp	r5, r2
 8018818:	d003      	beq.n	8018822 <__mcmp+0x28>
 801881a:	d305      	bcc.n	8018828 <__mcmp+0x2e>
 801881c:	2301      	movs	r3, #1
 801881e:	4618      	mov	r0, r3
 8018820:	bd30      	pop	{r4, r5, pc}
 8018822:	42a0      	cmp	r0, r4
 8018824:	d3f3      	bcc.n	801880e <__mcmp+0x14>
 8018826:	e7fa      	b.n	801881e <__mcmp+0x24>
 8018828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801882c:	e7f7      	b.n	801881e <__mcmp+0x24>

0801882e <__mdiff>:
 801882e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018832:	460d      	mov	r5, r1
 8018834:	4607      	mov	r7, r0
 8018836:	4611      	mov	r1, r2
 8018838:	4628      	mov	r0, r5
 801883a:	4614      	mov	r4, r2
 801883c:	f7ff ffdd 	bl	80187fa <__mcmp>
 8018840:	1e06      	subs	r6, r0, #0
 8018842:	d108      	bne.n	8018856 <__mdiff+0x28>
 8018844:	4631      	mov	r1, r6
 8018846:	4638      	mov	r0, r7
 8018848:	f7ff fdce 	bl	80183e8 <_Balloc>
 801884c:	2301      	movs	r3, #1
 801884e:	6103      	str	r3, [r0, #16]
 8018850:	6146      	str	r6, [r0, #20]
 8018852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018856:	bfa4      	itt	ge
 8018858:	4623      	movge	r3, r4
 801885a:	462c      	movge	r4, r5
 801885c:	4638      	mov	r0, r7
 801885e:	6861      	ldr	r1, [r4, #4]
 8018860:	bfa6      	itte	ge
 8018862:	461d      	movge	r5, r3
 8018864:	2600      	movge	r6, #0
 8018866:	2601      	movlt	r6, #1
 8018868:	f7ff fdbe 	bl	80183e8 <_Balloc>
 801886c:	692b      	ldr	r3, [r5, #16]
 801886e:	60c6      	str	r6, [r0, #12]
 8018870:	6926      	ldr	r6, [r4, #16]
 8018872:	f105 0914 	add.w	r9, r5, #20
 8018876:	f104 0214 	add.w	r2, r4, #20
 801887a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801887e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018882:	f100 0514 	add.w	r5, r0, #20
 8018886:	f04f 0c00 	mov.w	ip, #0
 801888a:	f852 ab04 	ldr.w	sl, [r2], #4
 801888e:	f859 4b04 	ldr.w	r4, [r9], #4
 8018892:	fa1c f18a 	uxtah	r1, ip, sl
 8018896:	b2a3      	uxth	r3, r4
 8018898:	1ac9      	subs	r1, r1, r3
 801889a:	0c23      	lsrs	r3, r4, #16
 801889c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80188a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80188a4:	b289      	uxth	r1, r1
 80188a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80188aa:	45c8      	cmp	r8, r9
 80188ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80188b0:	4696      	mov	lr, r2
 80188b2:	f845 3b04 	str.w	r3, [r5], #4
 80188b6:	d8e8      	bhi.n	801888a <__mdiff+0x5c>
 80188b8:	45be      	cmp	lr, r7
 80188ba:	d305      	bcc.n	80188c8 <__mdiff+0x9a>
 80188bc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80188c0:	b18b      	cbz	r3, 80188e6 <__mdiff+0xb8>
 80188c2:	6106      	str	r6, [r0, #16]
 80188c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188c8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80188cc:	fa1c f381 	uxtah	r3, ip, r1
 80188d0:	141a      	asrs	r2, r3, #16
 80188d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80188d6:	b29b      	uxth	r3, r3
 80188d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80188dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80188e0:	f845 3b04 	str.w	r3, [r5], #4
 80188e4:	e7e8      	b.n	80188b8 <__mdiff+0x8a>
 80188e6:	3e01      	subs	r6, #1
 80188e8:	e7e8      	b.n	80188bc <__mdiff+0x8e>

080188ea <__d2b>:
 80188ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80188ee:	460e      	mov	r6, r1
 80188f0:	2101      	movs	r1, #1
 80188f2:	ec59 8b10 	vmov	r8, r9, d0
 80188f6:	4615      	mov	r5, r2
 80188f8:	f7ff fd76 	bl	80183e8 <_Balloc>
 80188fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018900:	4607      	mov	r7, r0
 8018902:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018906:	bb34      	cbnz	r4, 8018956 <__d2b+0x6c>
 8018908:	9301      	str	r3, [sp, #4]
 801890a:	f1b8 0f00 	cmp.w	r8, #0
 801890e:	d027      	beq.n	8018960 <__d2b+0x76>
 8018910:	a802      	add	r0, sp, #8
 8018912:	f840 8d08 	str.w	r8, [r0, #-8]!
 8018916:	f7ff fe0c 	bl	8018532 <__lo0bits>
 801891a:	9900      	ldr	r1, [sp, #0]
 801891c:	b1f0      	cbz	r0, 801895c <__d2b+0x72>
 801891e:	9a01      	ldr	r2, [sp, #4]
 8018920:	f1c0 0320 	rsb	r3, r0, #32
 8018924:	fa02 f303 	lsl.w	r3, r2, r3
 8018928:	430b      	orrs	r3, r1
 801892a:	40c2      	lsrs	r2, r0
 801892c:	617b      	str	r3, [r7, #20]
 801892e:	9201      	str	r2, [sp, #4]
 8018930:	9b01      	ldr	r3, [sp, #4]
 8018932:	61bb      	str	r3, [r7, #24]
 8018934:	2b00      	cmp	r3, #0
 8018936:	bf14      	ite	ne
 8018938:	2102      	movne	r1, #2
 801893a:	2101      	moveq	r1, #1
 801893c:	6139      	str	r1, [r7, #16]
 801893e:	b1c4      	cbz	r4, 8018972 <__d2b+0x88>
 8018940:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018944:	4404      	add	r4, r0
 8018946:	6034      	str	r4, [r6, #0]
 8018948:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801894c:	6028      	str	r0, [r5, #0]
 801894e:	4638      	mov	r0, r7
 8018950:	b003      	add	sp, #12
 8018952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801895a:	e7d5      	b.n	8018908 <__d2b+0x1e>
 801895c:	6179      	str	r1, [r7, #20]
 801895e:	e7e7      	b.n	8018930 <__d2b+0x46>
 8018960:	a801      	add	r0, sp, #4
 8018962:	f7ff fde6 	bl	8018532 <__lo0bits>
 8018966:	9b01      	ldr	r3, [sp, #4]
 8018968:	617b      	str	r3, [r7, #20]
 801896a:	2101      	movs	r1, #1
 801896c:	6139      	str	r1, [r7, #16]
 801896e:	3020      	adds	r0, #32
 8018970:	e7e5      	b.n	801893e <__d2b+0x54>
 8018972:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018976:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801897a:	6030      	str	r0, [r6, #0]
 801897c:	6918      	ldr	r0, [r3, #16]
 801897e:	f7ff fdb9 	bl	80184f4 <__hi0bits>
 8018982:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018986:	e7e1      	b.n	801894c <__d2b+0x62>

08018988 <__sread>:
 8018988:	b510      	push	{r4, lr}
 801898a:	460c      	mov	r4, r1
 801898c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018990:	f000 f9a6 	bl	8018ce0 <_read_r>
 8018994:	2800      	cmp	r0, #0
 8018996:	bfab      	itete	ge
 8018998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801899a:	89a3      	ldrhlt	r3, [r4, #12]
 801899c:	181b      	addge	r3, r3, r0
 801899e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80189a2:	bfac      	ite	ge
 80189a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80189a6:	81a3      	strhlt	r3, [r4, #12]
 80189a8:	bd10      	pop	{r4, pc}

080189aa <__swrite>:
 80189aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189ae:	461f      	mov	r7, r3
 80189b0:	898b      	ldrh	r3, [r1, #12]
 80189b2:	05db      	lsls	r3, r3, #23
 80189b4:	4605      	mov	r5, r0
 80189b6:	460c      	mov	r4, r1
 80189b8:	4616      	mov	r6, r2
 80189ba:	d505      	bpl.n	80189c8 <__swrite+0x1e>
 80189bc:	2302      	movs	r3, #2
 80189be:	2200      	movs	r2, #0
 80189c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189c4:	f000 f968 	bl	8018c98 <_lseek_r>
 80189c8:	89a3      	ldrh	r3, [r4, #12]
 80189ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80189d2:	81a3      	strh	r3, [r4, #12]
 80189d4:	4632      	mov	r2, r6
 80189d6:	463b      	mov	r3, r7
 80189d8:	4628      	mov	r0, r5
 80189da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189de:	f7fe bac5 	b.w	8016f6c <_write_r>

080189e2 <__sseek>:
 80189e2:	b510      	push	{r4, lr}
 80189e4:	460c      	mov	r4, r1
 80189e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189ea:	f000 f955 	bl	8018c98 <_lseek_r>
 80189ee:	1c43      	adds	r3, r0, #1
 80189f0:	89a3      	ldrh	r3, [r4, #12]
 80189f2:	bf15      	itete	ne
 80189f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80189f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80189fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80189fe:	81a3      	strheq	r3, [r4, #12]
 8018a00:	bf18      	it	ne
 8018a02:	81a3      	strhne	r3, [r4, #12]
 8018a04:	bd10      	pop	{r4, pc}

08018a06 <__sclose>:
 8018a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a0a:	f000 b8a7 	b.w	8018b5c <_close_r>

08018a0e <__ssprint_r>:
 8018a0e:	6893      	ldr	r3, [r2, #8]
 8018a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a14:	4681      	mov	r9, r0
 8018a16:	460c      	mov	r4, r1
 8018a18:	4617      	mov	r7, r2
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d060      	beq.n	8018ae0 <__ssprint_r+0xd2>
 8018a1e:	f04f 0b00 	mov.w	fp, #0
 8018a22:	f8d2 a000 	ldr.w	sl, [r2]
 8018a26:	465e      	mov	r6, fp
 8018a28:	b356      	cbz	r6, 8018a80 <__ssprint_r+0x72>
 8018a2a:	68a3      	ldr	r3, [r4, #8]
 8018a2c:	429e      	cmp	r6, r3
 8018a2e:	d344      	bcc.n	8018aba <__ssprint_r+0xac>
 8018a30:	89a2      	ldrh	r2, [r4, #12]
 8018a32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018a36:	d03e      	beq.n	8018ab6 <__ssprint_r+0xa8>
 8018a38:	6825      	ldr	r5, [r4, #0]
 8018a3a:	6921      	ldr	r1, [r4, #16]
 8018a3c:	eba5 0801 	sub.w	r8, r5, r1
 8018a40:	6965      	ldr	r5, [r4, #20]
 8018a42:	2302      	movs	r3, #2
 8018a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018a48:	fb95 f5f3 	sdiv	r5, r5, r3
 8018a4c:	f108 0301 	add.w	r3, r8, #1
 8018a50:	4433      	add	r3, r6
 8018a52:	429d      	cmp	r5, r3
 8018a54:	bf38      	it	cc
 8018a56:	461d      	movcc	r5, r3
 8018a58:	0553      	lsls	r3, r2, #21
 8018a5a:	d546      	bpl.n	8018aea <__ssprint_r+0xdc>
 8018a5c:	4629      	mov	r1, r5
 8018a5e:	4648      	mov	r0, r9
 8018a60:	f7fc fdba 	bl	80155d8 <_malloc_r>
 8018a64:	b998      	cbnz	r0, 8018a8e <__ssprint_r+0x80>
 8018a66:	230c      	movs	r3, #12
 8018a68:	f8c9 3000 	str.w	r3, [r9]
 8018a6c:	89a3      	ldrh	r3, [r4, #12]
 8018a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a72:	81a3      	strh	r3, [r4, #12]
 8018a74:	2300      	movs	r3, #0
 8018a76:	60bb      	str	r3, [r7, #8]
 8018a78:	607b      	str	r3, [r7, #4]
 8018a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a7e:	e031      	b.n	8018ae4 <__ssprint_r+0xd6>
 8018a80:	f8da b000 	ldr.w	fp, [sl]
 8018a84:	f8da 6004 	ldr.w	r6, [sl, #4]
 8018a88:	f10a 0a08 	add.w	sl, sl, #8
 8018a8c:	e7cc      	b.n	8018a28 <__ssprint_r+0x1a>
 8018a8e:	4642      	mov	r2, r8
 8018a90:	6921      	ldr	r1, [r4, #16]
 8018a92:	9001      	str	r0, [sp, #4]
 8018a94:	f7fc ffbd 	bl	8015a12 <memcpy>
 8018a98:	89a2      	ldrh	r2, [r4, #12]
 8018a9a:	9b01      	ldr	r3, [sp, #4]
 8018a9c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8018aa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018aa4:	81a2      	strh	r2, [r4, #12]
 8018aa6:	6123      	str	r3, [r4, #16]
 8018aa8:	6165      	str	r5, [r4, #20]
 8018aaa:	4443      	add	r3, r8
 8018aac:	eba5 0508 	sub.w	r5, r5, r8
 8018ab0:	6023      	str	r3, [r4, #0]
 8018ab2:	60a5      	str	r5, [r4, #8]
 8018ab4:	4633      	mov	r3, r6
 8018ab6:	429e      	cmp	r6, r3
 8018ab8:	d200      	bcs.n	8018abc <__ssprint_r+0xae>
 8018aba:	4633      	mov	r3, r6
 8018abc:	461a      	mov	r2, r3
 8018abe:	4659      	mov	r1, fp
 8018ac0:	6820      	ldr	r0, [r4, #0]
 8018ac2:	9301      	str	r3, [sp, #4]
 8018ac4:	f7fc ffb0 	bl	8015a28 <memmove>
 8018ac8:	68a2      	ldr	r2, [r4, #8]
 8018aca:	9b01      	ldr	r3, [sp, #4]
 8018acc:	1ad2      	subs	r2, r2, r3
 8018ace:	60a2      	str	r2, [r4, #8]
 8018ad0:	6822      	ldr	r2, [r4, #0]
 8018ad2:	4413      	add	r3, r2
 8018ad4:	6023      	str	r3, [r4, #0]
 8018ad6:	68bb      	ldr	r3, [r7, #8]
 8018ad8:	1b9e      	subs	r6, r3, r6
 8018ada:	60be      	str	r6, [r7, #8]
 8018adc:	2e00      	cmp	r6, #0
 8018ade:	d1cf      	bne.n	8018a80 <__ssprint_r+0x72>
 8018ae0:	2000      	movs	r0, #0
 8018ae2:	6078      	str	r0, [r7, #4]
 8018ae4:	b003      	add	sp, #12
 8018ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aea:	462a      	mov	r2, r5
 8018aec:	4648      	mov	r0, r9
 8018aee:	f7fd f819 	bl	8015b24 <_realloc_r>
 8018af2:	4603      	mov	r3, r0
 8018af4:	2800      	cmp	r0, #0
 8018af6:	d1d6      	bne.n	8018aa6 <__ssprint_r+0x98>
 8018af8:	6921      	ldr	r1, [r4, #16]
 8018afa:	4648      	mov	r0, r9
 8018afc:	f7ff fb20 	bl	8018140 <_free_r>
 8018b00:	e7b1      	b.n	8018a66 <__ssprint_r+0x58>

08018b02 <_calloc_r>:
 8018b02:	b510      	push	{r4, lr}
 8018b04:	4351      	muls	r1, r2
 8018b06:	f7fc fd67 	bl	80155d8 <_malloc_r>
 8018b0a:	4604      	mov	r4, r0
 8018b0c:	b198      	cbz	r0, 8018b36 <_calloc_r+0x34>
 8018b0e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018b12:	f022 0203 	bic.w	r2, r2, #3
 8018b16:	3a04      	subs	r2, #4
 8018b18:	2a24      	cmp	r2, #36	; 0x24
 8018b1a:	d81b      	bhi.n	8018b54 <_calloc_r+0x52>
 8018b1c:	2a13      	cmp	r2, #19
 8018b1e:	d917      	bls.n	8018b50 <_calloc_r+0x4e>
 8018b20:	2100      	movs	r1, #0
 8018b22:	2a1b      	cmp	r2, #27
 8018b24:	6001      	str	r1, [r0, #0]
 8018b26:	6041      	str	r1, [r0, #4]
 8018b28:	d807      	bhi.n	8018b3a <_calloc_r+0x38>
 8018b2a:	f100 0308 	add.w	r3, r0, #8
 8018b2e:	2200      	movs	r2, #0
 8018b30:	601a      	str	r2, [r3, #0]
 8018b32:	605a      	str	r2, [r3, #4]
 8018b34:	609a      	str	r2, [r3, #8]
 8018b36:	4620      	mov	r0, r4
 8018b38:	bd10      	pop	{r4, pc}
 8018b3a:	2a24      	cmp	r2, #36	; 0x24
 8018b3c:	6081      	str	r1, [r0, #8]
 8018b3e:	60c1      	str	r1, [r0, #12]
 8018b40:	bf11      	iteee	ne
 8018b42:	f100 0310 	addne.w	r3, r0, #16
 8018b46:	6101      	streq	r1, [r0, #16]
 8018b48:	f100 0318 	addeq.w	r3, r0, #24
 8018b4c:	6141      	streq	r1, [r0, #20]
 8018b4e:	e7ee      	b.n	8018b2e <_calloc_r+0x2c>
 8018b50:	4603      	mov	r3, r0
 8018b52:	e7ec      	b.n	8018b2e <_calloc_r+0x2c>
 8018b54:	2100      	movs	r1, #0
 8018b56:	f7fc ff81 	bl	8015a5c <memset>
 8018b5a:	e7ec      	b.n	8018b36 <_calloc_r+0x34>

08018b5c <_close_r>:
 8018b5c:	b538      	push	{r3, r4, r5, lr}
 8018b5e:	4c06      	ldr	r4, [pc, #24]	; (8018b78 <_close_r+0x1c>)
 8018b60:	2300      	movs	r3, #0
 8018b62:	4605      	mov	r5, r0
 8018b64:	4608      	mov	r0, r1
 8018b66:	6023      	str	r3, [r4, #0]
 8018b68:	f7ef f89c 	bl	8007ca4 <_close>
 8018b6c:	1c43      	adds	r3, r0, #1
 8018b6e:	d102      	bne.n	8018b76 <_close_r+0x1a>
 8018b70:	6823      	ldr	r3, [r4, #0]
 8018b72:	b103      	cbz	r3, 8018b76 <_close_r+0x1a>
 8018b74:	602b      	str	r3, [r5, #0]
 8018b76:	bd38      	pop	{r3, r4, r5, pc}
 8018b78:	20007ea8 	.word	0x20007ea8

08018b7c <_fclose_r>:
 8018b7c:	b570      	push	{r4, r5, r6, lr}
 8018b7e:	4605      	mov	r5, r0
 8018b80:	460c      	mov	r4, r1
 8018b82:	b911      	cbnz	r1, 8018b8a <_fclose_r+0xe>
 8018b84:	2600      	movs	r6, #0
 8018b86:	4630      	mov	r0, r6
 8018b88:	bd70      	pop	{r4, r5, r6, pc}
 8018b8a:	b118      	cbz	r0, 8018b94 <_fclose_r+0x18>
 8018b8c:	6983      	ldr	r3, [r0, #24]
 8018b8e:	b90b      	cbnz	r3, 8018b94 <_fclose_r+0x18>
 8018b90:	f7ff fa00 	bl	8017f94 <__sinit>
 8018b94:	4b2c      	ldr	r3, [pc, #176]	; (8018c48 <_fclose_r+0xcc>)
 8018b96:	429c      	cmp	r4, r3
 8018b98:	d114      	bne.n	8018bc4 <_fclose_r+0x48>
 8018b9a:	686c      	ldr	r4, [r5, #4]
 8018b9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018b9e:	07d8      	lsls	r0, r3, #31
 8018ba0:	d405      	bmi.n	8018bae <_fclose_r+0x32>
 8018ba2:	89a3      	ldrh	r3, [r4, #12]
 8018ba4:	0599      	lsls	r1, r3, #22
 8018ba6:	d402      	bmi.n	8018bae <_fclose_r+0x32>
 8018ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018baa:	f7fc fd01 	bl	80155b0 <__retarget_lock_acquire_recursive>
 8018bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bb2:	b98b      	cbnz	r3, 8018bd8 <_fclose_r+0x5c>
 8018bb4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8018bb6:	f016 0601 	ands.w	r6, r6, #1
 8018bba:	d1e3      	bne.n	8018b84 <_fclose_r+0x8>
 8018bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018bbe:	f7fc fcf9 	bl	80155b4 <__retarget_lock_release_recursive>
 8018bc2:	e7e0      	b.n	8018b86 <_fclose_r+0xa>
 8018bc4:	4b21      	ldr	r3, [pc, #132]	; (8018c4c <_fclose_r+0xd0>)
 8018bc6:	429c      	cmp	r4, r3
 8018bc8:	d101      	bne.n	8018bce <_fclose_r+0x52>
 8018bca:	68ac      	ldr	r4, [r5, #8]
 8018bcc:	e7e6      	b.n	8018b9c <_fclose_r+0x20>
 8018bce:	4b20      	ldr	r3, [pc, #128]	; (8018c50 <_fclose_r+0xd4>)
 8018bd0:	429c      	cmp	r4, r3
 8018bd2:	bf08      	it	eq
 8018bd4:	68ec      	ldreq	r4, [r5, #12]
 8018bd6:	e7e1      	b.n	8018b9c <_fclose_r+0x20>
 8018bd8:	4621      	mov	r1, r4
 8018bda:	4628      	mov	r0, r5
 8018bdc:	f7ff f8b4 	bl	8017d48 <__sflush_r>
 8018be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018be2:	4606      	mov	r6, r0
 8018be4:	b133      	cbz	r3, 8018bf4 <_fclose_r+0x78>
 8018be6:	6a21      	ldr	r1, [r4, #32]
 8018be8:	4628      	mov	r0, r5
 8018bea:	4798      	blx	r3
 8018bec:	2800      	cmp	r0, #0
 8018bee:	bfb8      	it	lt
 8018bf0:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8018bf4:	89a3      	ldrh	r3, [r4, #12]
 8018bf6:	061a      	lsls	r2, r3, #24
 8018bf8:	d503      	bpl.n	8018c02 <_fclose_r+0x86>
 8018bfa:	6921      	ldr	r1, [r4, #16]
 8018bfc:	4628      	mov	r0, r5
 8018bfe:	f7ff fa9f 	bl	8018140 <_free_r>
 8018c02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c04:	b141      	cbz	r1, 8018c18 <_fclose_r+0x9c>
 8018c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c0a:	4299      	cmp	r1, r3
 8018c0c:	d002      	beq.n	8018c14 <_fclose_r+0x98>
 8018c0e:	4628      	mov	r0, r5
 8018c10:	f7ff fa96 	bl	8018140 <_free_r>
 8018c14:	2300      	movs	r3, #0
 8018c16:	6363      	str	r3, [r4, #52]	; 0x34
 8018c18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018c1a:	b121      	cbz	r1, 8018c26 <_fclose_r+0xaa>
 8018c1c:	4628      	mov	r0, r5
 8018c1e:	f7ff fa8f 	bl	8018140 <_free_r>
 8018c22:	2300      	movs	r3, #0
 8018c24:	64a3      	str	r3, [r4, #72]	; 0x48
 8018c26:	f7ff f99d 	bl	8017f64 <__sfp_lock_acquire>
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	81a3      	strh	r3, [r4, #12]
 8018c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c30:	07db      	lsls	r3, r3, #31
 8018c32:	d402      	bmi.n	8018c3a <_fclose_r+0xbe>
 8018c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c36:	f7fc fcbd 	bl	80155b4 <__retarget_lock_release_recursive>
 8018c3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c3c:	f7fc fcb7 	bl	80155ae <__retarget_lock_close_recursive>
 8018c40:	f7ff f996 	bl	8017f70 <__sfp_lock_release>
 8018c44:	e79f      	b.n	8018b86 <_fclose_r+0xa>
 8018c46:	bf00      	nop
 8018c48:	0801adc4 	.word	0x0801adc4
 8018c4c:	0801ade4 	.word	0x0801ade4
 8018c50:	0801ada4 	.word	0x0801ada4

08018c54 <_fstat_r>:
 8018c54:	b538      	push	{r3, r4, r5, lr}
 8018c56:	4c07      	ldr	r4, [pc, #28]	; (8018c74 <_fstat_r+0x20>)
 8018c58:	2300      	movs	r3, #0
 8018c5a:	4605      	mov	r5, r0
 8018c5c:	4608      	mov	r0, r1
 8018c5e:	4611      	mov	r1, r2
 8018c60:	6023      	str	r3, [r4, #0]
 8018c62:	f7ef f822 	bl	8007caa <_fstat>
 8018c66:	1c43      	adds	r3, r0, #1
 8018c68:	d102      	bne.n	8018c70 <_fstat_r+0x1c>
 8018c6a:	6823      	ldr	r3, [r4, #0]
 8018c6c:	b103      	cbz	r3, 8018c70 <_fstat_r+0x1c>
 8018c6e:	602b      	str	r3, [r5, #0]
 8018c70:	bd38      	pop	{r3, r4, r5, pc}
 8018c72:	bf00      	nop
 8018c74:	20007ea8 	.word	0x20007ea8

08018c78 <_isatty_r>:
 8018c78:	b538      	push	{r3, r4, r5, lr}
 8018c7a:	4c06      	ldr	r4, [pc, #24]	; (8018c94 <_isatty_r+0x1c>)
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	4605      	mov	r5, r0
 8018c80:	4608      	mov	r0, r1
 8018c82:	6023      	str	r3, [r4, #0]
 8018c84:	f7ef f816 	bl	8007cb4 <_isatty>
 8018c88:	1c43      	adds	r3, r0, #1
 8018c8a:	d102      	bne.n	8018c92 <_isatty_r+0x1a>
 8018c8c:	6823      	ldr	r3, [r4, #0]
 8018c8e:	b103      	cbz	r3, 8018c92 <_isatty_r+0x1a>
 8018c90:	602b      	str	r3, [r5, #0]
 8018c92:	bd38      	pop	{r3, r4, r5, pc}
 8018c94:	20007ea8 	.word	0x20007ea8

08018c98 <_lseek_r>:
 8018c98:	b538      	push	{r3, r4, r5, lr}
 8018c9a:	4c07      	ldr	r4, [pc, #28]	; (8018cb8 <_lseek_r+0x20>)
 8018c9c:	4605      	mov	r5, r0
 8018c9e:	4608      	mov	r0, r1
 8018ca0:	4611      	mov	r1, r2
 8018ca2:	2200      	movs	r2, #0
 8018ca4:	6022      	str	r2, [r4, #0]
 8018ca6:	461a      	mov	r2, r3
 8018ca8:	f7ef f806 	bl	8007cb8 <_lseek>
 8018cac:	1c43      	adds	r3, r0, #1
 8018cae:	d102      	bne.n	8018cb6 <_lseek_r+0x1e>
 8018cb0:	6823      	ldr	r3, [r4, #0]
 8018cb2:	b103      	cbz	r3, 8018cb6 <_lseek_r+0x1e>
 8018cb4:	602b      	str	r3, [r5, #0]
 8018cb6:	bd38      	pop	{r3, r4, r5, pc}
 8018cb8:	20007ea8 	.word	0x20007ea8

08018cbc <__ascii_mbtowc>:
 8018cbc:	b082      	sub	sp, #8
 8018cbe:	b901      	cbnz	r1, 8018cc2 <__ascii_mbtowc+0x6>
 8018cc0:	a901      	add	r1, sp, #4
 8018cc2:	b142      	cbz	r2, 8018cd6 <__ascii_mbtowc+0x1a>
 8018cc4:	b14b      	cbz	r3, 8018cda <__ascii_mbtowc+0x1e>
 8018cc6:	7813      	ldrb	r3, [r2, #0]
 8018cc8:	600b      	str	r3, [r1, #0]
 8018cca:	7812      	ldrb	r2, [r2, #0]
 8018ccc:	1c10      	adds	r0, r2, #0
 8018cce:	bf18      	it	ne
 8018cd0:	2001      	movne	r0, #1
 8018cd2:	b002      	add	sp, #8
 8018cd4:	4770      	bx	lr
 8018cd6:	4610      	mov	r0, r2
 8018cd8:	e7fb      	b.n	8018cd2 <__ascii_mbtowc+0x16>
 8018cda:	f06f 0001 	mvn.w	r0, #1
 8018cde:	e7f8      	b.n	8018cd2 <__ascii_mbtowc+0x16>

08018ce0 <_read_r>:
 8018ce0:	b538      	push	{r3, r4, r5, lr}
 8018ce2:	4c07      	ldr	r4, [pc, #28]	; (8018d00 <_read_r+0x20>)
 8018ce4:	4605      	mov	r5, r0
 8018ce6:	4608      	mov	r0, r1
 8018ce8:	4611      	mov	r1, r2
 8018cea:	2200      	movs	r2, #0
 8018cec:	6022      	str	r2, [r4, #0]
 8018cee:	461a      	mov	r2, r3
 8018cf0:	f7ee ff9d 	bl	8007c2e <_read>
 8018cf4:	1c43      	adds	r3, r0, #1
 8018cf6:	d102      	bne.n	8018cfe <_read_r+0x1e>
 8018cf8:	6823      	ldr	r3, [r4, #0]
 8018cfa:	b103      	cbz	r3, 8018cfe <_read_r+0x1e>
 8018cfc:	602b      	str	r3, [r5, #0]
 8018cfe:	bd38      	pop	{r3, r4, r5, pc}
 8018d00:	20007ea8 	.word	0x20007ea8

08018d04 <__ascii_wctomb>:
 8018d04:	b149      	cbz	r1, 8018d1a <__ascii_wctomb+0x16>
 8018d06:	2aff      	cmp	r2, #255	; 0xff
 8018d08:	bf85      	ittet	hi
 8018d0a:	238a      	movhi	r3, #138	; 0x8a
 8018d0c:	6003      	strhi	r3, [r0, #0]
 8018d0e:	700a      	strbls	r2, [r1, #0]
 8018d10:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8018d14:	bf98      	it	ls
 8018d16:	2001      	movls	r0, #1
 8018d18:	4770      	bx	lr
 8018d1a:	4608      	mov	r0, r1
 8018d1c:	4770      	bx	lr
	...

08018d20 <_init>:
 8018d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d22:	bf00      	nop
 8018d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d26:	bc08      	pop	{r3}
 8018d28:	469e      	mov	lr, r3
 8018d2a:	4770      	bx	lr

08018d2c <_fini>:
 8018d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d2e:	bf00      	nop
 8018d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d32:	bc08      	pop	{r3}
 8018d34:	469e      	mov	lr, r3
 8018d36:	4770      	bx	lr
