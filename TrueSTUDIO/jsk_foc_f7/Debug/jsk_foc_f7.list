
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dd8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08007fd8  08007fd8  00017fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  080083d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000047bc  20000018  080083f0  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200047d4  080083f0  000247d4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_line   000139ce  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00044cbe  00000000  00000000  00033a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000075fa  00000000  00000000  000786d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001870  00000000  00000000  0007fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004d60  00000000  00000000  00081540  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001fb43  00000000  00000000  000862a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000096f4  00000000  00000000  000a5de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000af4d7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000054d0  00000000  00000000  000af554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000018 	.word	0x20000018
 800021c:	00000000 	.word	0x00000000
 8000220:	08007fc0 	.word	0x08007fc0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000001c 	.word	0x2000001c
 800023c:	08007fc0 	.word	0x08007fc0

08000240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
  ldr  r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800025e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800026a:	f002 f971 	bl	8002550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f007 fe6f 	bl	8007f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000272:	f001 fca3 	bl	8001bbc <main>
  bx  lr    
 8000276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000278:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800027c:	080083d8 	.word	0x080083d8
  ldr  r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000284:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000288:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 800028c:	200047d4 	.word	0x200047d4

08000290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC_IRQHandler>
 8000292:	0000      	movs	r0, r0
 8000294:	0000      	movs	r0, r0
	...

08000298 <StartcontrolTask>:
 * Start FOC control task...
 * clark -> park -> control -> rev park -> rev clark -> PWM
 *
 */
void StartcontrolTask(void const * argument)
{
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	ed2d 8b10 	vpush	{d8-d15}
	float integra_Cd = 0;
	float integra_Cq = 0;
	float vd_st = 0, vq_st = 0;
 800029e:	eddf faf2 	vldr	s31, [pc, #968]	; 8000668 <StartcontrolTask+0x3d0>
{
 80002a2:	b0a1      	sub	sp, #132	; 0x84
 80002a4:	4cf1      	ldr	r4, [pc, #964]	; (800066c <StartcontrolTask+0x3d4>)
	float vd_st = 0, vq_st = 0;
 80002a6:	eeb0 fa6f 	vmov.f32	s30, s31
 80002aa:	4df1      	ldr	r5, [pc, #964]	; (8000670 <StartcontrolTask+0x3d8>)
	float integra_Cq = 0;
 80002ac:	eef0 ea6f 	vmov.f32	s29, s31
	float integra_Cd = 0;
 80002b0:	eeb0 ea6f 	vmov.f32	s28, s31
				integra_Cd = 1000;
			if(integra_Cd<-1000)
				integra_Cd = -1000;

			//get the control voltage
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 80002b4:	ed9f abde 	vldr	d10, [pc, #888]	; 8000630 <StartcontrolTask+0x398>
			volatile float v_q = shuntdata.Kp * er_q + shuntdata.Ki * integra_Cq * 51.2 * 1e-6;
			v_d *= 0.1; v_q *=0.1;
 80002b8:	ed9f 9bdf 	vldr	d9, [pc, #892]	; 8000638 <StartcontrolTask+0x3a0>
	*vb = -apha/3 + beta/sq3;
 80002bc:	ed9f 8be0 	vldr	d8, [pc, #896]	; 8000640 <StartcontrolTask+0x3a8>
		if(xQueueReceive(shuntQueueHandle,&shuntdata,2)==pdPASS)
 80002c0:	2300      	movs	r3, #0
 80002c2:	2202      	movs	r2, #2
 80002c4:	a91c      	add	r1, sp, #112	; 0x70
 80002c6:	6820      	ldr	r0, [r4, #0]
 80002c8:	f006 f964 	bl	8006594 <xQueueGenericReceive>
 80002cc:	2801      	cmp	r0, #1
 80002ce:	f040 826d 	bne.w	80007ac <StartcontrolTask+0x514>
			volatile float c_a = ((float)shuntdata.cur_a)/100;
 80002d2:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80002d6:	4603      	mov	r3, r0
			volatile float c_a = ((float)shuntdata.cur_a)/100;
 80002d8:	ed9f 6ae6 	vldr	s12, [pc, #920]	; 8000674 <StartcontrolTask+0x3dc>
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80002dc:	2200      	movs	r2, #0
			volatile float c_a = ((float)shuntdata.cur_a)/100;
 80002de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
			volatile float c_b = ((float)shuntdata.cur_b)/100;
 80002e2:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80002e6:	a918      	add	r1, sp, #96	; 0x60
 80002e8:	6828      	ldr	r0, [r5, #0]
			volatile float c_b = ((float)shuntdata.cur_b)/100;
 80002ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			volatile float c_c = ((float)shuntdata.cur_c)/100;
 80002ee:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
			volatile float c_a = ((float)shuntdata.cur_a)/100;
 80002f2:	ee66 6a86 	vmul.f32	s13, s13, s12
			volatile float c_c = ((float)shuntdata.cur_c)/100;
 80002f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			volatile float c_b = ((float)shuntdata.cur_b)/100;
 80002fa:	ee27 7a06 	vmul.f32	s14, s14, s12
			volatile float c_a = ((float)shuntdata.cur_a)/100;
 80002fe:	edcd 6a04 	vstr	s13, [sp, #16]
			volatile float c_c = ((float)shuntdata.cur_c)/100;
 8000302:	ee67 7a86 	vmul.f32	s15, s15, s12
			volatile float c_b = ((float)shuntdata.cur_b)/100;
 8000306:	ed8d 7a05 	vstr	s14, [sp, #20]
			volatile float c_c = ((float)shuntdata.cur_c)/100;
 800030a:	edcd 7a06 	vstr	s15, [sp, #24]
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 800030e:	f006 f941 	bl	8006594 <xQueueGenericReceive>
 8000312:	2801      	cmp	r0, #1
 8000314:	f040 8254 	bne.w	80007c0 <StartcontrolTask+0x528>
	*apha = 1.5 * a;
 8000318:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
			ClarkeTrans(c_a, c_b, &c_apha, &c_beta);
 800031c:	eddd 7a04 	vldr	s15, [sp, #16]
			volatile float theta = 4 * PI * (encdata.recon_counter-CENTERCOUNT) / MAXCOUNT;
 8000320:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
	*beta = sq3 * b + (sq3 * a)/2;
 8000324:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			ClarkeTrans(c_a, c_b, &c_apha, &c_beta);
 8000328:	ed9d 5a05 	vldr	s10, [sp, #20]
	*apha = 1.5 * a;
 800032c:	ee67 7aa4 	vmul.f32	s15, s15, s9
			volatile float theta = 4 * PI * (encdata.recon_counter-CENTERCOUNT) / MAXCOUNT;
 8000330:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
	*beta = sq3 * b + (sq3 * a)/2;
 8000334:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
			volatile float theta = 4 * PI * (encdata.recon_counter-CENTERCOUNT) / MAXCOUNT;
 8000338:	ee07 3a10 	vmov	s14, r3
	*apha = 1.5 * a;
 800033c:	edcd 7a07 	vstr	s15, [sp, #28]
			volatile float theta = 4 * PI * (encdata.recon_counter-CENTERCOUNT) / MAXCOUNT;
 8000340:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
	*beta = sq3 * b + (sq3 * a)/2;
 8000344:	ed9f 4bc0 	vldr	d4, [pc, #768]	; 8000648 <StartcontrolTask+0x3b0>
 8000348:	ee26 6b04 	vmul.f64	d6, d6, d4
 800034c:	ed9f 4bc0 	vldr	d4, [pc, #768]	; 8000650 <StartcontrolTask+0x3b8>
 8000350:	eea5 6b04 	vfma.f64	d6, d5, d4
			volatile float theta = 4 * PI * (encdata.recon_counter-CENTERCOUNT) / MAXCOUNT;
 8000354:	ed9f 5bc0 	vldr	d5, [pc, #768]	; 8000658 <StartcontrolTask+0x3c0>
 8000358:	ee27 7b05 	vmul.f64	d7, d7, d5
	*beta = sq3 * b + (sq3 * a)/2;
 800035c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			volatile float theta = 4 * PI * (encdata.recon_counter-CENTERCOUNT) / MAXCOUNT;
 8000360:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	*beta = sq3 * b + (sq3 * a)/2;
 8000364:	ed8d 6a08 	vstr	s12, [sp, #32]
			volatile float theta = 4 * PI * (encdata.recon_counter-CENTERCOUNT) / MAXCOUNT;
 8000368:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
			ParkTrans(c_apha,c_beta,theta,&c_d,&c_q);
 800036c:	ed9d ca07 	vldr	s24, [sp, #28]
 8000370:	ed9d 7a08 	vldr	s14, [sp, #32]
 8000374:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
	*i_d = apha*cos(theta) + beta*sin(theta);
 8000378:	eeb7 dac7 	vcvt.f64.f32	d13, s14
 800037c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000380:	eeb0 0b46 	vmov.f64	d0, d6
 8000384:	ed8d 6b00 	vstr	d6, [sp]
 8000388:	f006 ffe6 	bl	8007358 <cos>
 800038c:	eeb0 bb40 	vmov.f64	d11, d0
 8000390:	ed9d 6b00 	vldr	d6, [sp]
 8000394:	eeb0 0b46 	vmov.f64	d0, d6
 8000398:	f007 f81a 	bl	80073d0 <sin>
	*i_q = -apha*sin(theta) + beta*cos(theta);
 800039c:	eeb1 5a4c 	vneg.f32	s10, s24
 80003a0:	ee2b 6b0d 	vmul.f64	d6, d11, d13
			volatile float er_q = shuntdata.target_cur - c_q;
 80003a4:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 80003a8:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
			volatile float er_q = shuntdata.target_cur - c_q;
 80003ac:	ee07 2a90 	vmov	s15, r2
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80003b0:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
	*i_d = apha*cos(theta) + beta*sin(theta);
 80003b4:	ee2d 3b00 	vmul.f64	d3, d13, d0
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80003b8:	eea0 6b05 	vfma.f64	d6, d0, d5
	*i_d = apha*cos(theta) + beta*sin(theta);
 80003bc:	eeb7 5acc 	vcvt.f64.f32	d5, s24
			volatile float er_q = shuntdata.target_cur - c_q;
 80003c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	*i_d = apha*cos(theta) + beta*sin(theta);
 80003c4:	eea5 3b0b 	vfma.f64	d3, d5, d11
 80003c8:	ed9f 5aab 	vldr	s10, [pc, #684]	; 8000678 <StartcontrolTask+0x3e0>

#define MAXVqd 4000000
			if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 80003cc:	eddf 5aab 	vldr	s11, [pc, #684]	; 800067c <StartcontrolTask+0x3e4>
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80003d0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 80003d4:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8000680 <StartcontrolTask+0x3e8>
 80003d8:	ed8d 6a0b 	vstr	s12, [sp, #44]	; 0x2c
			volatile float er_q = shuntdata.target_cur - c_q;
 80003dc:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
	*i_d = apha*cos(theta) + beta*sin(theta);
 80003e0:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
			volatile float er_q = shuntdata.target_cur - c_q;
 80003e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
	*i_d = apha*cos(theta) + beta*sin(theta);
 80003e8:	ed8d 3a0a 	vstr	s6, [sp, #40]	; 0x28
			volatile float er_q = shuntdata.target_cur - c_q;
 80003ec:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
			volatile float er_d = T_ID - c_d;
 80003f0:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80003f4:	eef1 7a67 	vneg.f32	s15, s15
 80003f8:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 80003fc:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8000400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000404:	ee17 3a90 	vmov	r3, s15
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000408:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 800040c:	fa01 f383 	sxtah	r3, r1, r3
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000414:	f9bd 1056 	ldrsh.w	r1, [sp, #86]	; 0x56
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 8000418:	2b00      	cmp	r3, #0
 800041a:	bfb8      	it	lt
 800041c:	3301      	addlt	r3, #1
 800041e:	105a      	asrs	r2, r3, #1
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000420:	ee17 3a90 	vmov	r3, s15
			integra_Cd +=  er_d;
 8000424:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 8000428:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 800042c:	fa01 f383 	sxtah	r3, r1, r3
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 8000430:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
			integra_Cd +=  er_d;
 8000434:	ee3e ea27 	vadd.f32	s28, s28, s15
			integra_Cq +=  er_q;
 8000438:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 800043c:	2b00      	cmp	r3, #0
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 800043e:	ee04 2a10 	vmov	s8, r2
 8000442:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8000446:	ed9d 6a0d 	vldr	s12, [sp, #52]	; 0x34
			integra_Cq +=  er_q;
 800044a:	ee7e eaa7 	vadd.f32	s29, s29, s15
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 800044e:	ee07 2a10 	vmov	s14, r2
 8000452:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8000456:	fe8e ea45 	vminnm.f32	s28, s28, s10
 800045a:	fe8e ea26 	vmaxnm.f32	s28, s28, s13
 800045e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000462:	fece eac5 	vminnm.f32	s29, s29, s10
 8000466:	ee24 3a0e 	vmul.f32	s6, s8, s28
 800046a:	fece eaa6 	vmaxnm.f32	s29, s29, s13
			volatile float v_q = shuntdata.Kp * er_q + shuntdata.Ki * integra_Cq * 51.2 * 1e-6;
 800046e:	ee24 4a2e 	vmul.f32	s8, s8, s29
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000472:	bfb8      	it	lt
 8000474:	3301      	addlt	r3, #1
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 8000476:	ee27 6a06 	vmul.f32	s12, s14, s12
 800047a:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 800047e:	105b      	asrs	r3, r3, #1
			volatile float v_q = shuntdata.Kp * er_q + shuntdata.Ki * integra_Cq * 51.2 * 1e-6;
 8000480:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 8000484:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000488:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
			volatile float v_d = shuntdata.Kp * er_d + shuntdata.Ki * integra_Cd * 51.2 * 1e-6;
 800048c:	eea3 6b0a 	vfma.f64	d6, d3, d10
 8000490:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8000494:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
			volatile float v_q = shuntdata.Kp * er_q + shuntdata.Ki * integra_Cq * 51.2 * 1e-6;
 8000498:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800049c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80004a0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80004a4:	eea4 7b0a 	vfma.f64	d7, d4, d10
 80004a8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80004ac:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
			v_d *= 0.1; v_q *=0.1;
 80004b0:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 80004b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80004b8:	ee27 7b09 	vmul.f64	d7, d7, d9
 80004bc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80004c0:	ed8d 7a0e 	vstr	s14, [sp, #56]	; 0x38
 80004c4:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 80004c8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80004cc:	ee27 7b09 	vmul.f64	d7, d7, d9
 80004d0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80004d4:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
			if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 80004d8:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80004dc:	ee7f 7a27 	vadd.f32	s15, s30, s15
 80004e0:	eef4 7ae5 	vcmpe.f32	s15, s11
 80004e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004e8:	d524      	bpl.n	8000534 <StartcontrolTask+0x29c>
 80004ea:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80004ee:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000684 <StartcontrolTask+0x3ec>
 80004f2:	ee7f 7a27 	vadd.f32	s15, s30, s15
 80004f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004fe:	dd19      	ble.n	8000534 <StartcontrolTask+0x29c>
					(vq_st + v_q)<MAXVqd && (vq_st + v_q)>-MAXVqd)
 8000500:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8000504:	ee7f 7aa7 	vadd.f32	s15, s31, s15
			if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 8000508:	eef4 7ae5 	vcmpe.f32	s15, s11
 800050c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000510:	d510      	bpl.n	8000534 <StartcontrolTask+0x29c>
					(vq_st + v_q)<MAXVqd && (vq_st + v_q)>-MAXVqd)
 8000512:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8000516:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 800051a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800051e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000522:	dd07      	ble.n	8000534 <StartcontrolTask+0x29c>
			{
				vd_st += v_d;  //equals to Kp..
 8000524:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
				vq_st += v_q;
 8000528:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
				vd_st += v_d;  //equals to Kp..
 800052c:	ee3f fa07 	vadd.f32	s30, s30, s14
				vq_st += v_q;
 8000530:	ee7f faa7 	vadd.f32	s31, s31, s15
			}

			//reverse park...
			volatile float v_apha,v_beta;
			RevParkTrans(&v_apha,&v_beta,theta,vd_st,vq_st);
 8000534:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
	*apha = v_d*cos(theta) - v_q*sin(theta);
 8000538:	eeb7 daef 	vcvt.f64.f32	d13, s31
 800053c:	eeb7 cacf 	vcvt.f64.f32	d12, s30
 8000540:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8000544:	eeb0 0b45 	vmov.f64	d0, d5
 8000548:	ed8d 5b00 	vstr	d5, [sp]
 800054c:	f006 ff04 	bl	8007358 <cos>
 8000550:	eeb0 bb40 	vmov.f64	d11, d0
 8000554:	ed9d 5b00 	vldr	d5, [sp]
 8000558:	eeb0 0b45 	vmov.f64	d0, d5
 800055c:	f006 ff38 	bl	80073d0 <sin>
 8000560:	ee20 3b4d 	vnmul.f64	d3, d0, d13
	*vb = -apha/3 + beta/sq3;
 8000564:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000688 <StartcontrolTask+0x3f0>
	*va = 2*apha/3;
 8000568:	eddf 7a48 	vldr	s15, [pc, #288]	; 800068c <StartcontrolTask+0x3f4>
	*beta = v_d*sin(theta) + v_q*cos(theta);
 800056c:	ee2b 5b0d 	vmul.f64	d5, d11, d13
	*apha = v_d*cos(theta) - v_q*sin(theta);
 8000570:	eeac 3b0b 	vfma.f64	d3, d12, d11
	*beta = v_d*sin(theta) + v_q*cos(theta);
 8000574:	eeac 5b00 	vfma.f64	d5, d12, d0
			//reverse clarke
			volatile float v_a,v_b,v_c;
			RevClarkeTrans(&v_a,&v_b,&v_c,v_apha,v_beta);

			//mapping the v_a v_b v_c to the real voltage and to the max duty of 2160
			v_a *= VOLTSUP * PHASERES/1000;  //because of 1 is 1 mv
 8000578:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8000660 <StartcontrolTask+0x3c8>
	*apha = v_d*cos(theta) - v_q*sin(theta);
 800057c:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
 8000580:	ed8d 3a10 	vstr	s6, [sp, #64]	; 0x40
	*beta = v_d*sin(theta) + v_q*cos(theta);
 8000584:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
			RevClarkeTrans(&v_a,&v_b,&v_c,v_apha,v_beta);
 8000588:	eddd 5a10 	vldr	s11, [sp, #64]	; 0x40
	*vb = -apha/3 + beta/sq3;
 800058c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
	*va = 2*apha/3;
 8000590:	ee65 4aa7 	vmul.f32	s9, s11, s15
	*beta = v_d*sin(theta) + v_q*cos(theta);
 8000594:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
			RevClarkeTrans(&v_a,&v_b,&v_c,v_apha,v_beta);
 8000598:	ed9d 5a11 	vldr	s10, [sp, #68]	; 0x44
	*vb = -apha/3 + beta/sq3;
 800059c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	*va = 2*apha/3;
 80005a0:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
	*vb = -apha/3 + beta/sq3;
 80005a4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80005a8:	eeb0 4b47 	vmov.f64	d4, d7
	*vc = -apha/3 - beta/sq3;
 80005ac:	eea5 7b48 	vfms.f64	d7, d5, d8
	*vb = -apha/3 + beta/sq3;
 80005b0:	eea5 4b08 	vfma.f64	d4, d5, d8
	*vc = -apha/3 - beta/sq3;
 80005b4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	*vb = -apha/3 + beta/sq3;
 80005b8:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
 80005bc:	ed8d 4a13 	vstr	s8, [sp, #76]	; 0x4c
	*vc = -apha/3 - beta/sq3;
 80005c0:	ed8d 7a14 	vstr	s14, [sp, #80]	; 0x50
			v_a *= VOLTSUP * PHASERES/1000;  //because of 1 is 1 mv
 80005c4:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 80005c8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80005cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005d0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80005d4:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
			v_b *= VOLTSUP * PHASERES/1000;
 80005d8:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 80005dc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80005e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005e4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80005e8:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
			v_c *= VOLTSUP * PHASERES/1000;
 80005ec:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 80005f0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80005f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80005f8:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 80005fc:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
	v_big = *v_a>*v_b?*v_a:*v_b;
 8000600:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 8000604:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8000608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000610:	f340 80d3 	ble.w	80007ba <StartcontrolTask+0x522>
 8000614:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
	v_big = v_big>*v_c?v_big:*v_c;
 8000618:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 800061c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000624:	db36      	blt.n	8000694 <StartcontrolTask+0x3fc>
 8000626:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 800062a:	e033      	b.n	8000694 <StartcontrolTask+0x3fc>
 800062c:	f3af 8000 	nop.w
 8000630:	9abcaf48 	.word	0x9abcaf48
 8000634:	3f0ad7f2 	.word	0x3f0ad7f2
 8000638:	9999999a 	.word	0x9999999a
 800063c:	3fb99999 	.word	0x3fb99999
 8000640:	23205b49 	.word	0x23205b49
 8000644:	3fe279a7 	.word	0x3fe279a7
 8000648:	1c0010c7 	.word	0x1c0010c7
 800064c:	3febb67b 	.word	0x3febb67b
 8000650:	1c0010c7 	.word	0x1c0010c7
 8000654:	3ffbb67b 	.word	0x3ffbb67b
 8000658:	a83a464d 	.word	0xa83a464d
 800065c:	3f79bc69 	.word	0x3f79bc69
 8000660:	43aa79bb 	.word	0x43aa79bb
 8000664:	3f4b866e 	.word	0x3f4b866e
 8000668:	00000000 	.word	0x00000000
 800066c:	20003fd4 	.word	0x20003fd4
 8000670:	20003fc4 	.word	0x20003fc4
 8000674:	3c23d70a 	.word	0x3c23d70a
 8000678:	447a0000 	.word	0x447a0000
 800067c:	4a742400 	.word	0x4a742400
 8000680:	c47a0000 	.word	0xc47a0000
 8000684:	ca742400 	.word	0xca742400
 8000688:	3eaaaaab 	.word	0x3eaaaaab
 800068c:	3f2aaaab 	.word	0x3f2aaaab
 8000690:	c506f000 	.word	0xc506f000
	*v_a -= v_big;
 8000694:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 8000698:	ee37 7a67 	vsub.f32	s14, s14, s15
 800069c:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
	*v_b -= v_big;
 80006a0:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 80006a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006a8:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
	*v_c -= v_big;
 80006ac:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 80006b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b4:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
	v_small = *v_a<*v_b?*v_a:*v_b;
 80006b8:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 80006bc:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80006c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c8:	d574      	bpl.n	80007b4 <StartcontrolTask+0x51c>
 80006ca:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
	v_small = v_small<*v_c?v_small:*v_c;
 80006ce:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 80006d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006da:	d801      	bhi.n	80006e0 <StartcontrolTask+0x448>
 80006dc:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
	if(v_small<-MAXDUTY+1) // <-2159..
 80006e0:	ed5f 6a15 	vldr	s13, [pc, #-84]	; 8000690 <StartcontrolTask+0x3f8>
 80006e4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80006e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ec:	d513      	bpl.n	8000716 <StartcontrolTask+0x47e>
		*v_a *= -(MAXDUTY-1)/v_small;
 80006ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006f2:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 80006f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006fa:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		*v_b *= -(MAXDUTY-1)/v_small;
 80006fe:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8000702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000706:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
		*v_c *= -(MAXDUTY-1)/v_small;  //then the data is proportional under maxduty
 800070a:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 800070e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000712:	ed8d 7a14 	vstr	s14, [sp, #80]	; 0x50

			//find the bigest one.. sent the duty to 0;
			SVMDuty(&v_a,&v_b,&v_c);
			volatile uint16_t cont_a = (uint16_t)(-v_a);
 8000716:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
			volatile uint16_t cont_b = (uint16_t)(-v_b);
			volatile uint16_t cont_c = (uint16_t)(-v_c);
			setMotorDuty(cont_a, cont_b, cont_c);
			//for debug view..
			conres.duty_a = cont_a;conres.duty_b = cont_b;conres.duty_c = cont_c;
			xQueueOverwrite(conresQueueHandle,&conres);
 800071a:	2302      	movs	r3, #2
			setMotorDuty(cont_a, cont_b, cont_c);
 800071c:	492a      	ldr	r1, [pc, #168]	; (80007c8 <StartcontrolTask+0x530>)
			xQueueOverwrite(conresQueueHandle,&conres);
 800071e:	2200      	movs	r2, #0
			volatile uint16_t cont_a = (uint16_t)(-v_a);
 8000720:	eef1 7a67 	vneg.f32	s15, s15
			xQueueOverwrite(conresQueueHandle,&conres);
 8000724:	4829      	ldr	r0, [pc, #164]	; (80007cc <StartcontrolTask+0x534>)
			setMotorDuty(cont_a, cont_b, cont_c);
 8000726:	680e      	ldr	r6, [r1, #0]
			xQueueOverwrite(conresQueueHandle,&conres);
 8000728:	a915      	add	r1, sp, #84	; 0x54
 800072a:	6800      	ldr	r0, [r0, #0]
			volatile uint16_t cont_a = (uint16_t)(-v_a);
 800072c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000730:	edcd 7a00 	vstr	s15, [sp]
 8000734:	f8bd 7000 	ldrh.w	r7, [sp]
 8000738:	f8ad 700a 	strh.w	r7, [sp, #10]
			volatile uint16_t cont_b = (uint16_t)(-v_b);
 800073c:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8000740:	eef1 7a67 	vneg.f32	s15, s15
 8000744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000748:	edcd 7a00 	vstr	s15, [sp]
 800074c:	f8bd 7000 	ldrh.w	r7, [sp]
 8000750:	f8ad 700c 	strh.w	r7, [sp, #12]
			volatile uint16_t cont_c = (uint16_t)(-v_c);
 8000754:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 8000758:	eef1 7a67 	vneg.f32	s15, s15
 800075c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000760:	edcd 7a00 	vstr	s15, [sp]
 8000764:	f8bd 7000 	ldrh.w	r7, [sp]
 8000768:	f8ad 700e 	strh.w	r7, [sp, #14]
			setMotorDuty(cont_a, cont_b, cont_c);
 800076c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8000770:	b2bf      	uxth	r7, r7
 8000772:	6377      	str	r7, [r6, #52]	; 0x34
 8000774:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8000778:	b2bf      	uxth	r7, r7
 800077a:	63b7      	str	r7, [r6, #56]	; 0x38
 800077c:	f8bd 700e 	ldrh.w	r7, [sp, #14]
 8000780:	b2bf      	uxth	r7, r7
 8000782:	63f7      	str	r7, [r6, #60]	; 0x3c
			conres.duty_a = cont_a;conres.duty_b = cont_b;conres.duty_c = cont_c;
 8000784:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8000788:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 800078c:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 8000790:	f8ad e058 	strh.w	lr, [sp, #88]	; 0x58
 8000794:	f8ad 705a 	strh.w	r7, [sp, #90]	; 0x5a
 8000798:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
			xQueueOverwrite(conresQueueHandle,&conres);
 800079c:	f005 fcf0 	bl	8006180 <xQueueGenericSend>
			//to test the control frequency
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	480a      	ldr	r0, [pc, #40]	; (80007d0 <StartcontrolTask+0x538>)
 80007a6:	f002 fc87 	bl	80030b8 <HAL_GPIO_TogglePin>
 80007aa:	e589      	b.n	80002c0 <StartcontrolTask+0x28>
		}
		else
		{
			//1ms no current data was receieved...something is wrong...error handle
			//  _Error_Handler("controlFOC, 1ms no data receved.",500);
			osDelay(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f005 f923 	bl	80059f8 <osDelay>
	{
 80007b2:	e585      	b.n	80002c0 <StartcontrolTask+0x28>
	v_small = *v_a<*v_b?*v_a:*v_b;
 80007b4:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80007b8:	e789      	b.n	80006ce <StartcontrolTask+0x436>
	v_big = *v_a>*v_b?*v_a:*v_b;
 80007ba:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80007be:	e72b      	b.n	8000618 <StartcontrolTask+0x380>
		}
  }
}
 80007c0:	b021      	add	sp, #132	; 0x84
 80007c2:	ecbd 8b10 	vpop	{d8-d15}
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	200040d0 	.word	0x200040d0
 80007cc:	20003fac 	.word	0x20003fac
 80007d0:	40020800 	.word	0x40020800

080007d4 <HAL_UART_ErrorCallback>:
 * UART4 error handler
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	//error...
	_Error_Handler("isrSensors.c, uart error",53);
 80007d4:	2135      	movs	r1, #53	; 0x35
 80007d6:	4801      	ldr	r0, [pc, #4]	; (80007dc <HAL_UART_ErrorCallback+0x8>)
 80007d8:	f001 ba5a 	b.w	8001c90 <_Error_Handler>
 80007dc:	080080bc 	.word	0x080080bc

080007e0 <HAL_UART_RxCpltCallback>:
	 * if some other task B that has higher priority than A are being woken by the passing queue or semaphore,
	 * the xHigherPriorityTaskWoken will be set to pdTrue and we can directly perform a context switch and thus
	 * leaves the ISR and go to task B, if not so, we need to go back to task A and wait for a tick to switch to B.
	 */

	if(huart->Instance==huart4.Instance) //not necessary to check..
 80007e0:	4ad1      	ldr	r2, [pc, #836]	; (8000b28 <HAL_UART_RxCpltCallback+0x348>)
 80007e2:	6803      	ldr	r3, [r0, #0]
 80007e4:	6812      	ldr	r2, [r2, #0]
 80007e6:	4293      	cmp	r3, r2
{
 80007e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007ec:	b083      	sub	sp, #12
	if(huart->Instance==huart4.Instance) //not necessary to check..
 80007ee:	d03a      	beq.n	8000866 <HAL_UART_RxCpltCallback+0x86>
			//call a context switch if needed..
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

	//USART 1 DMA interrupt
	else if(huart->Instance==huart1.Instance)
 80007f0:	4ace      	ldr	r2, [pc, #824]	; (8000b2c <HAL_UART_RxCpltCallback+0x34c>)
 80007f2:	6812      	ldr	r2, [r2, #0]
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d002      	beq.n	80007fe <HAL_UART_RxCpltCallback+0x1e>
			}
		}
		//continue DMA
		HAL_UART_DMAResume(&huart1);
	}
}
 80007f8:	b003      	add	sp, #12
 80007fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(order_buff[i] == TXHEADER)
 80007fe:	4bcc      	ldr	r3, [pc, #816]	; (8000b30 <HAL_UART_RxCpltCallback+0x350>)
 8000800:	49cc      	ldr	r1, [pc, #816]	; (8000b34 <HAL_UART_RxCpltCallback+0x354>)
 8000802:	7818      	ldrb	r0, [r3, #0]
 8000804:	4acc      	ldr	r2, [pc, #816]	; (8000b38 <HAL_UART_RxCpltCallback+0x358>)
 8000806:	28f8      	cmp	r0, #248	; 0xf8
 8000808:	7b0e      	ldrb	r6, [r1, #12]
 800080a:	7b4d      	ldrb	r5, [r1, #13]
 800080c:	f9b1 400e 	ldrsh.w	r4, [r1, #14]
 8000810:	f892 800a 	ldrb.w	r8, [r2, #10]
 8000814:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8000818:	f9b2 e00c 	ldrsh.w	lr, [r2, #12]
 800081c:	f000 813b 	beq.w	8000a96 <HAL_UART_RxCpltCallback+0x2b6>
 8000820:	785f      	ldrb	r7, [r3, #1]
 8000822:	2ff8      	cmp	r7, #248	; 0xf8
 8000824:	f000 8119 	beq.w	8000a5a <HAL_UART_RxCpltCallback+0x27a>
 8000828:	f893 9002 	ldrb.w	r9, [r3, #2]
 800082c:	f1b9 0ff8 	cmp.w	r9, #248	; 0xf8
 8000830:	f000 80f6 	beq.w	8000a20 <HAL_UART_RxCpltCallback+0x240>
 8000834:	f893 a003 	ldrb.w	sl, [r3, #3]
 8000838:	f1ba 0ff8 	cmp.w	sl, #248	; 0xf8
 800083c:	f000 80d4 	beq.w	80009e8 <HAL_UART_RxCpltCallback+0x208>
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	2bf8      	cmp	r3, #248	; 0xf8
 8000844:	f000 80b7 	beq.w	80009b6 <HAL_UART_RxCpltCallback+0x1d6>
		HAL_UART_DMAResume(&huart1);
 8000848:	48b8      	ldr	r0, [pc, #736]	; (8000b2c <HAL_UART_RxCpltCallback+0x34c>)
 800084a:	730e      	strb	r6, [r1, #12]
 800084c:	734d      	strb	r5, [r1, #13]
 800084e:	81cc      	strh	r4, [r1, #14]
 8000850:	f882 800a 	strb.w	r8, [r2, #10]
 8000854:	f882 c00b 	strb.w	ip, [r2, #11]
 8000858:	f8a2 e00c 	strh.w	lr, [r2, #12]
}
 800085c:	b003      	add	sp, #12
 800085e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_UART_DMAResume(&huart1);
 8000862:	f004 bb47 	b.w	8004ef4 <HAL_UART_DMAResume>
 8000866:	4eb5      	ldr	r6, [pc, #724]	; (8000b3c <HAL_UART_RxCpltCallback+0x35c>)
	if(huart->Instance==huart4.Instance) //not necessary to check..
 8000868:	2401      	movs	r4, #1
 800086a:	4fb5      	ldr	r7, [pc, #724]	; (8000b40 <HAL_UART_RxCpltCallback+0x360>)
 800086c:	4635      	mov	r5, r6
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 800086e:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8000b38 <HAL_UART_RxCpltCallback+0x358>
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000872:	46b9      	mov	r9, r7
 8000874:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 8000b60 <HAL_UART_RxCpltCallback+0x380>
			if(enchall_buff[i] == TXHEADER)
 8000878:	f815 3b01 	ldrb.w	r3, [r5], #1
 800087c:	2bf8      	cmp	r3, #248	; 0xf8
 800087e:	d011      	beq.n	80008a4 <HAL_UART_RxCpltCallback+0xc4>
 8000880:	3401      	adds	r4, #1
		for(int i=0; i<5; i++)
 8000882:	2c06      	cmp	r4, #6
 8000884:	d1f8      	bne.n	8000878 <HAL_UART_RxCpltCallback+0x98>
		HAL_UART_DMAResume(&huart4);
 8000886:	48a8      	ldr	r0, [pc, #672]	; (8000b28 <HAL_UART_RxCpltCallback+0x348>)
 8000888:	f004 fb34 	bl	8004ef4 <HAL_UART_DMAResume>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0b2      	beq.n	80007f8 <HAL_UART_RxCpltCallback+0x18>
 8000892:	4bac      	ldr	r3, [pc, #688]	; (8000b44 <HAL_UART_RxCpltCallback+0x364>)
 8000894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	f3bf 8f4f 	dsb	sy
 800089e:	f3bf 8f6f 	isb	sy
 80008a2:	e7a9      	b.n	80007f8 <HAL_UART_RxCpltCallback+0x18>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80008a4:	2c05      	cmp	r4, #5
 80008a6:	f000 8167 	beq.w	8000b78 <HAL_UART_RxCpltCallback+0x398>
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80008aa:	2c04      	cmp	r4, #4
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 80008ac:	b2e3      	uxtb	r3, r4
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80008ae:	d07f      	beq.n	80009b0 <HAL_UART_RxCpltCallback+0x1d0>
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	b2d2      	uxtb	r2, r2
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 80008b4:	5cf3      	ldrb	r3, [r6, r3]
 80008b6:	0619      	lsls	r1, r3, #24
 80008b8:	d5e2      	bpl.n	8000880 <HAL_UART_RxCpltCallback+0xa0>
 80008ba:	5cb1      	ldrb	r1, [r6, r2]
 80008bc:	f011 0f60 	tst.w	r1, #96	; 0x60
 80008c0:	d0de      	beq.n	8000880 <HAL_UART_RxCpltCallback+0xa0>
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 80008c2:	f3c3 1c80 	ubfx	ip, r3, #6, #1
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 80008c6:	f3c3 1e40 	ubfx	lr, r3, #5, #1
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 80008ca:	f3c3 0082 	ubfx	r0, r3, #2, #3
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 80008ce:	f001 011f 	and.w	r1, r1, #31
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 80008d2:	f003 0303 	and.w	r3, r3, #3
					uint8_t b1 = t==4?0:t+1;
 80008d6:	2a04      	cmp	r2, #4
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 80008d8:	f888 1004 	strb.w	r1, [r8, #4]
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 80008dc:	f888 c000 	strb.w	ip, [r8]
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 80008e0:	f888 e001 	strb.w	lr, [r8, #1]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 80008e4:	f888 0002 	strb.w	r0, [r8, #2]
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 80008e8:	f888 3003 	strb.w	r3, [r8, #3]
					uint8_t b1 = t==4?0:t+1;
 80008ec:	f000 80f8 	beq.w	8000ae0 <HAL_UART_RxCpltCallback+0x300>
 80008f0:	1c50      	adds	r0, r2, #1
 80008f2:	b2c0      	uxtb	r0, r0
					uint8_t b2 = b1==4?0:b1+1;
 80008f4:	2804      	cmp	r0, #4
 80008f6:	f000 8103 	beq.w	8000b00 <HAL_UART_RxCpltCallback+0x320>
 80008fa:	3202      	adds	r2, #2
 80008fc:	b2d2      	uxtb	r2, r2
					enchall.enc_high = enchall_buff[b1]&0xff;
 80008fe:	5c30      	ldrb	r0, [r6, r0]
					if(enchall.calc_tag == 2) //all 0
 8000900:	2b02      	cmp	r3, #2
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000902:	5cb2      	ldrb	r2, [r6, r2]
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000904:	f888 0005 	strb.w	r0, [r8, #5]
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000908:	f888 2006 	strb.w	r2, [r8, #6]
					if(enchall.calc_tag == 2) //all 0
 800090c:	f000 80e2 	beq.w	8000ad4 <HAL_UART_RxCpltCallback+0x2f4>
					else if(enchall.calc_tag == 3) //all 1
 8000910:	2b03      	cmp	r3, #3
 8000912:	f000 80f7 	beq.w	8000b04 <HAL_UART_RxCpltCallback+0x324>
						if(enchall.enc_counter-last5bitsdata>16) //overflowed..
 8000916:	488c      	ldr	r0, [pc, #560]	; (8000b48 <HAL_UART_RxCpltCallback+0x368>)
 8000918:	8803      	ldrh	r3, [r0, #0]
 800091a:	1acb      	subs	r3, r1, r3
 800091c:	2b10      	cmp	r3, #16
 800091e:	f340 80e2 	ble.w	8000ae6 <HAL_UART_RxCpltCallback+0x306>
							enchall.recon_counter = (enchall.recon_counter - 32)&0xFFE0|enchall.enc_counter;
 8000922:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8000926:	fa1f fe81 	uxth.w	lr, r1
 800092a:	3b20      	subs	r3, #32
 800092c:	f023 031f 	bic.w	r3, r3, #31
 8000930:	4319      	orrs	r1, r3
 8000932:	f8a8 1008 	strh.w	r1, [r8, #8]
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000936:	4641      	mov	r1, r8
					last5bitsdata = enchall.enc_counter;
 8000938:	f8a0 e000 	strh.w	lr, [r0]
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 800093c:	2302      	movs	r3, #2
 800093e:	464a      	mov	r2, r9
 8000940:	f8da 0000 	ldr.w	r0, [sl]
 8000944:	f005 fdb6 	bl	80064b4 <xQueueGenericSendFromISR>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 8000948:	2100      	movs	r1, #0
 800094a:	4880      	ldr	r0, [pc, #512]	; (8000b4c <HAL_UART_RxCpltCallback+0x36c>)
 800094c:	f002 f882 	bl	8002a54 <HAL_DFSDM_FilterPollForRegConversion>
 8000950:	2800      	cmp	r0, #0
 8000952:	d195      	bne.n	8000880 <HAL_UART_RxCpltCallback+0xa0>
							HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter1,0) == HAL_OK)
 8000954:	4601      	mov	r1, r0
 8000956:	487e      	ldr	r0, [pc, #504]	; (8000b50 <HAL_UART_RxCpltCallback+0x370>)
 8000958:	f002 f87c 	bl	8002a54 <HAL_DFSDM_FilterPollForRegConversion>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 800095c:	2800      	cmp	r0, #0
 800095e:	d18f      	bne.n	8000880 <HAL_UART_RxCpltCallback+0xa0>
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000960:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 8000b34 <HAL_UART_RxCpltCallback+0x354>
 8000964:	9001      	str	r0, [sp, #4]
 8000966:	497b      	ldr	r1, [pc, #492]	; (8000b54 <HAL_UART_RxCpltCallback+0x374>)
 8000968:	4878      	ldr	r0, [pc, #480]	; (8000b4c <HAL_UART_RxCpltCallback+0x36c>)
 800096a:	f002 f869 	bl	8002a40 <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 800096e:	497a      	ldr	r1, [pc, #488]	; (8000b58 <HAL_UART_RxCpltCallback+0x378>)
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000970:	f8cb 0004 	str.w	r0, [fp, #4]
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 8000974:	4876      	ldr	r0, [pc, #472]	; (8000b50 <HAL_UART_RxCpltCallback+0x370>)
 8000976:	f002 f863 	bl	8002a40 <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_b -= 18400;
 800097a:	f8db 1004 	ldr.w	r1, [fp, #4]
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 800097e:	f242 1298 	movw	r2, #8600	; 0x2198
						motorcurrent.cur_b -= 18400;
 8000982:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 8000b64 <HAL_UART_RxCpltCallback+0x384>
						motorcurrent.cur_a -= 8600;
 8000986:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8000b68 <HAL_UART_RxCpltCallback+0x388>
						motorcurrent.cur_b -= 18400;
 800098a:	448e      	add	lr, r1
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 800098c:	1a12      	subs	r2, r2, r0
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 800098e:	4973      	ldr	r1, [pc, #460]	; (8000b5c <HAL_UART_RxCpltCallback+0x37c>)
						motorcurrent.cur_a -= 8600;
 8000990:	4484      	add	ip, r0
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 8000992:	eba2 020e 	sub.w	r2, r2, lr
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000996:	9b01      	ldr	r3, [sp, #4]
 8000998:	6808      	ldr	r0, [r1, #0]
 800099a:	4659      	mov	r1, fp
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 800099c:	f8cb 2008 	str.w	r2, [fp, #8]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80009a0:	464a      	mov	r2, r9
						motorcurrent.cur_a -= 8600;
 80009a2:	f8cb c000 	str.w	ip, [fp]
						motorcurrent.cur_b -= 18400;
 80009a6:	f8cb e004 	str.w	lr, [fp, #4]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80009aa:	f005 fd83 	bl	80064b4 <xQueueGenericSendFromISR>
 80009ae:	e767      	b.n	8000880 <HAL_UART_RxCpltCallback+0xa0>
 80009b0:	4623      	mov	r3, r4
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 80009b2:	2200      	movs	r2, #0
 80009b4:	e77e      	b.n	80008b4 <HAL_UART_RxCpltCallback+0xd4>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 80009b6:	0603      	lsls	r3, r0, #24
 80009b8:	f57f af46 	bpl.w	8000848 <HAL_UART_RxCpltCallback+0x68>
 80009bc:	f017 0f60 	tst.w	r7, #96	; 0x60
 80009c0:	f43f af42 	beq.w	8000848 <HAL_UART_RxCpltCallback+0x68>
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 80009c4:	ea4f 240a 	mov.w	r4, sl, lsl #8
					if(order_buff[b2]&0x80) //minus
 80009c8:	f01a 0f80 	tst.w	sl, #128	; 0x80
					motorcurrent.Kp = order_buff[s] & 0x7f;
 80009cc:	f000 067f 	and.w	r6, r0, #127	; 0x7f
					motorcurrent.Ki = order_buff[t] & 0x1f;
 80009d0:	f007 051f 	and.w	r5, r7, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 80009d4:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 80009d8:	ea44 0409 	orr.w	r4, r4, r9
					if(order_buff[b2]&0x80) //minus
 80009dc:	f040 809a 	bne.w	8000b14 <HAL_UART_RxCpltCallback+0x334>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 80009e0:	46a6      	mov	lr, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 80009e2:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 80009e4:	46b0      	mov	r8, r6
 80009e6:	e72f      	b.n	8000848 <HAL_UART_RxCpltCallback+0x68>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 80009e8:	f893 b004 	ldrb.w	fp, [r3, #4]
 80009ec:	f01b 0f80 	tst.w	fp, #128	; 0x80
 80009f0:	f43f af26 	beq.w	8000840 <HAL_UART_RxCpltCallback+0x60>
 80009f4:	f010 0f60 	tst.w	r0, #96	; 0x60
 80009f8:	f43f af22 	beq.w	8000840 <HAL_UART_RxCpltCallback+0x60>
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 80009fc:	ea4f 2409 	mov.w	r4, r9, lsl #8
					if(order_buff[b2]&0x80) //minus
 8000a00:	f019 0f80 	tst.w	r9, #128	; 0x80
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a04:	f00b 067f 	and.w	r6, fp, #127	; 0x7f
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000a08:	f000 051f 	and.w	r5, r0, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000a0c:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 8000a10:	ea44 0407 	orr.w	r4, r4, r7
					if(order_buff[b2]&0x80) //minus
 8000a14:	f040 8084 	bne.w	8000b20 <HAL_UART_RxCpltCallback+0x340>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a18:	46a6      	mov	lr, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000a1a:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a1c:	46b0      	mov	r8, r6
 8000a1e:	e70f      	b.n	8000840 <HAL_UART_RxCpltCallback+0x60>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000a20:	f893 a003 	ldrb.w	sl, [r3, #3]
 8000a24:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8000a28:	f43f af04 	beq.w	8000834 <HAL_UART_RxCpltCallback+0x54>
 8000a2c:	f893 b004 	ldrb.w	fp, [r3, #4]
 8000a30:	f01b 0f60 	tst.w	fp, #96	; 0x60
 8000a34:	f43f aefe 	beq.w	8000834 <HAL_UART_RxCpltCallback+0x54>
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000a38:	023c      	lsls	r4, r7, #8
					if(order_buff[b2]&0x80) //minus
 8000a3a:	f017 0f80 	tst.w	r7, #128	; 0x80
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a3e:	f00a 067f 	and.w	r6, sl, #127	; 0x7f
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000a42:	f00b 051f 	and.w	r5, fp, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000a46:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 8000a4a:	ea44 0400 	orr.w	r4, r4, r0
					if(order_buff[b2]&0x80) //minus
 8000a4e:	f040 8090 	bne.w	8000b72 <HAL_UART_RxCpltCallback+0x392>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a52:	46a6      	mov	lr, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000a54:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a56:	46b0      	mov	r8, r6
 8000a58:	e6ec      	b.n	8000834 <HAL_UART_RxCpltCallback+0x54>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000a5a:	f893 9002 	ldrb.w	r9, [r3, #2]
 8000a5e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000a62:	f43f aee1 	beq.w	8000828 <HAL_UART_RxCpltCallback+0x48>
 8000a66:	f893 a003 	ldrb.w	sl, [r3, #3]
 8000a6a:	f01a 0f60 	tst.w	sl, #96	; 0x60
 8000a6e:	f43f aedb 	beq.w	8000828 <HAL_UART_RxCpltCallback+0x48>
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000a72:	0204      	lsls	r4, r0, #8
 8000a74:	f893 e004 	ldrb.w	lr, [r3, #4]
					if(order_buff[b2]&0x80) //minus
 8000a78:	f010 0f80 	tst.w	r0, #128	; 0x80
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a7c:	f009 067f 	and.w	r6, r9, #127	; 0x7f
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000a80:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000a84:	f00a 051f 	and.w	r5, sl, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000a88:	ea4e 0404 	orr.w	r4, lr, r4
					if(order_buff[b2]&0x80) //minus
 8000a8c:	d16e      	bne.n	8000b6c <HAL_UART_RxCpltCallback+0x38c>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a8e:	46a6      	mov	lr, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000a90:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000a92:	46b0      	mov	r8, r6
 8000a94:	e6c8      	b.n	8000828 <HAL_UART_RxCpltCallback+0x48>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000a96:	785f      	ldrb	r7, [r3, #1]
 8000a98:	f017 0f80 	tst.w	r7, #128	; 0x80
 8000a9c:	f43f aec0 	beq.w	8000820 <HAL_UART_RxCpltCallback+0x40>
 8000aa0:	f893 9002 	ldrb.w	r9, [r3, #2]
 8000aa4:	f019 0f60 	tst.w	r9, #96	; 0x60
 8000aa8:	f43f aeba 	beq.w	8000820 <HAL_UART_RxCpltCallback+0x40>
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000aac:	f893 e004 	ldrb.w	lr, [r3, #4]
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000ab0:	f007 067f 	and.w	r6, r7, #127	; 0x7f
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000ab4:	78df      	ldrb	r7, [r3, #3]
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000ab6:	f009 051f 	and.w	r5, r9, #31
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000aba:	ea4f 240e 	mov.w	r4, lr, lsl #8
					if(order_buff[b2]&0x80) //minus
 8000abe:	f01e 0f80 	tst.w	lr, #128	; 0x80
					motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000ac2:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 8000ac6:	ea44 0407 	orr.w	r4, r4, r7
					if(order_buff[b2]&0x80) //minus
 8000aca:	d126      	bne.n	8000b1a <HAL_UART_RxCpltCallback+0x33a>
 8000acc:	46a6      	mov	lr, r4
					motorcurrent.Ki = order_buff[t] & 0x1f;
 8000ace:	46ac      	mov	ip, r5
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000ad0:	46b0      	mov	r8, r6
 8000ad2:	e6a5      	b.n	8000820 <HAL_UART_RxCpltCallback+0x40>
						enchall.recon_counter = enchall.enc_counter;  //only 5bits OK
 8000ad4:	fa1f fe81 	uxth.w	lr, r1
 8000ad8:	481b      	ldr	r0, [pc, #108]	; (8000b48 <HAL_UART_RxCpltCallback+0x368>)
 8000ada:	f8a8 e008 	strh.w	lr, [r8, #8]
 8000ade:	e72a      	b.n	8000936 <HAL_UART_RxCpltCallback+0x156>
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e70b      	b.n	80008fe <HAL_UART_RxCpltCallback+0x11e>
						else if(enchall.enc_counter-last5bitsdata<-16)
 8000ae6:	3310      	adds	r3, #16
							enchall.recon_counter = (enchall.recon_counter + 32)&0xFFE0|enchall.enc_counter;
 8000ae8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8000aec:	fa1f fe81 	uxth.w	lr, r1
 8000af0:	bfb8      	it	lt
 8000af2:	3320      	addlt	r3, #32
							enchall.recon_counter = enchall.recon_counter&0xFFE0|enchall.enc_counter;
 8000af4:	f023 031f 	bic.w	r3, r3, #31
 8000af8:	4319      	orrs	r1, r3
 8000afa:	f8a8 1008 	strh.w	r1, [r8, #8]
 8000afe:	e71a      	b.n	8000936 <HAL_UART_RxCpltCallback+0x156>
 8000b00:	2200      	movs	r2, #0
 8000b02:	e6fc      	b.n	80008fe <HAL_UART_RxCpltCallback+0x11e>
						enchall.recon_counter = ALLONECOUNT + enchall.enc_counter;
 8000b04:	fa1f fe81 	uxth.w	lr, r1
 8000b08:	480f      	ldr	r0, [pc, #60]	; (8000b48 <HAL_UART_RxCpltCallback+0x368>)
 8000b0a:	f50e 63f8 	add.w	r3, lr, #1984	; 0x7c0
 8000b0e:	f8a8 3008 	strh.w	r3, [r8, #8]
 8000b12:	e710      	b.n	8000936 <HAL_UART_RxCpltCallback+0x156>
						motorcurrent.target_cur = -motorcurrent.target_cur;
 8000b14:	4264      	negs	r4, r4
 8000b16:	b224      	sxth	r4, r4
 8000b18:	e762      	b.n	80009e0 <HAL_UART_RxCpltCallback+0x200>
 8000b1a:	4264      	negs	r4, r4
 8000b1c:	b224      	sxth	r4, r4
 8000b1e:	e7d5      	b.n	8000acc <HAL_UART_RxCpltCallback+0x2ec>
 8000b20:	4264      	negs	r4, r4
 8000b22:	b224      	sxth	r4, r4
 8000b24:	e778      	b.n	8000a18 <HAL_UART_RxCpltCallback+0x238>
 8000b26:	bf00      	nop
 8000b28:	20004360 	.word	0x20004360
 8000b2c:	20004280 	.word	0x20004280
 8000b30:	20003dcc 	.word	0x20003dcc
 8000b34:	20000038 	.word	0x20000038
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20003dc4 	.word	0x20003dc4
 8000b40:	20000048 	.word	0x20000048
 8000b44:	e000ed04 	.word	0xe000ed04
 8000b48:	20000034 	.word	0x20000034
 8000b4c:	20003dd4 	.word	0x20003dd4
 8000b50:	20003f20 	.word	0x20003f20
 8000b54:	20003f74 	.word	0x20003f74
 8000b58:	20003e28 	.word	0x20003e28
 8000b5c:	20003fd4 	.word	0x20003fd4
 8000b60:	20003fc4 	.word	0x20003fc4
 8000b64:	ffffb820 	.word	0xffffb820
 8000b68:	ffffde68 	.word	0xffffde68
 8000b6c:	4264      	negs	r4, r4
 8000b6e:	b224      	sxth	r4, r4
 8000b70:	e78d      	b.n	8000a8e <HAL_UART_RxCpltCallback+0x2ae>
 8000b72:	4264      	negs	r4, r4
 8000b74:	b224      	sxth	r4, r4
 8000b76:	e76c      	b.n	8000a52 <HAL_UART_RxCpltCallback+0x272>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e699      	b.n	80008b0 <HAL_UART_RxCpltCallback+0xd0>

08000b7c <StartledblueTask>:
/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000b7c:	4c05      	ldr	r4, [pc, #20]	; (8000b94 <StartledblueTask+0x18>)
{
 8000b7e:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000b80:	4620      	mov	r0, r4
 8000b82:	2104      	movs	r1, #4
 8000b84:	f002 fa98 	bl	80030b8 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000b88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b8c:	f004 ff34 	bl	80059f8 <osDelay>
 8000b90:	e7f6      	b.n	8000b80 <StartledblueTask+0x4>
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <StartledgreenTask>:
/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000b98:	4c05      	ldr	r4, [pc, #20]	; (8000bb0 <StartledgreenTask+0x18>)
{
 8000b9a:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	f002 fa8a 	bl	80030b8 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000ba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba8:	f004 ff26 	bl	80059f8 <osDelay>
 8000bac:	e7f6      	b.n	8000b9c <StartledgreenTask+0x4>
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 8000bb4:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 8000bb6:	2032      	movs	r0, #50	; 0x32
 8000bb8:	f004 ff1e 	bl	80059f8 <osDelay>
 8000bbc:	e7fb      	b.n	8000bb6 <StartiwdgTask+0x2>
 8000bbe:	bf00      	nop

08000bc0 <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000bc4:	22c8      	movs	r2, #200	; 0xc8
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	f240 37f5 	movw	r7, #1013	; 0x3f5
 8000bcc:	a802      	add	r0, sp, #8
 8000bce:	f240 36f7 	movw	r6, #1015	; 0x3f7
 8000bd2:	f007 f9ec 	bl	8007fae <memset>
 8000bd6:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8000bda:	f240 72df 	movw	r2, #2015	; 0x7df
 8000bde:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000be2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000be6:	f240 7edc 	movw	lr, #2012	; 0x7dc
 8000bea:	f8ad 7008 	strh.w	r7, [sp, #8]
 8000bee:	f240 38f3 	movw	r8, #1011	; 0x3f3
 8000bf2:	f8ad 7016 	strh.w	r7, [sp, #22]
 8000bf6:	f240 7cdb 	movw	ip, #2011	; 0x7db
 8000bfa:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
 8000bfe:	f44f 777d 	mov.w	r7, #1012	; 0x3f4
 8000c02:	f8ad 100a 	strh.w	r1, [sp, #10]
 8000c06:	f8ad 1018 	strh.w	r1, [sp, #24]
 8000c0a:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8000c0e:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8000c12:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 8000c16:	f240 71e5 	movw	r1, #2021	; 0x7e5
 8000c1a:	f8ad 200c 	strh.w	r2, [sp, #12]
 8000c1e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8000c22:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8000c26:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8000c2a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8000c2e:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8000c32:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000c36:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8000c3a:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
 8000c3e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000c42:	f8ad 0014 	strh.w	r0, [sp, #20]
 8000c46:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8000c4a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8000c4e:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8000c52:	f8ad 300e 	strh.w	r3, [sp, #14]
 8000c56:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000c5a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8000c5e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8000c62:	f8ad e01a 	strh.w	lr, [sp, #26]
 8000c66:	f8ad e026 	strh.w	lr, [sp, #38]	; 0x26
 8000c6a:	f240 3eff 	movw	lr, #1023	; 0x3ff
 8000c6e:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8000c72:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
 8000c76:	f240 77e7 	movw	r7, #2023	; 0x7e7
 8000c7a:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 8000c7e:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 8000c82:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8000c86:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8000c8a:	f8ad 801e 	strh.w	r8, [sp, #30]
 8000c8e:	f8ad c020 	strh.w	ip, [sp, #32]
 8000c92:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8000c96:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8000c9a:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8000c9e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8000ca2:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
 8000ca6:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 8000caa:	f44f 617b 	mov.w	r1, #4016	; 0xfb0
 8000cae:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 8000cb2:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
			1013, 2013, 2012, 8000, 1011, 2011, 4000, 1012, 2012, 2013, 8000, 1015, 2015, 2013, 1012, 1000,
			1013, 2013, 2015, 8000, 1015, 2015, 4000,
			1021, 2021, 2022, 8000, 1023, 2023, 2000,
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4c1f      	ldr	r4, [pc, #124]	; (8000d38 <StartbuzzerrythmTask+0x178>)
 8000cba:	4d20      	ldr	r5, [pc, #128]	; (8000d3c <StartbuzzerrythmTask+0x17c>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000cbc:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
 8000cc0:	f8ad 704e 	strh.w	r7, [sp, #78]	; 0x4e
 8000cc4:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 8000cc8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 8000ccc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8000cd0:	f8ad 005a 	strh.w	r0, [sp, #90]	; 0x5a
 8000cd4:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
	volatile uint16_t i = 0;
 8000cd8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8000cdc:	e002      	b.n	8000ce4 <StartbuzzerrythmTask+0x124>
			{
				i=i==SONGLENGTH-1?0:i+1;
			}
			xSemaphoreGive(buzzerMutexHandle);
		}
		osDelay(10);
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f004 fe8a 	bl	80059f8 <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	6820      	ldr	r0, [r4, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4619      	mov	r1, r3
 8000cec:	f005 fc52 	bl	8006594 <xQueueGenericReceive>
 8000cf0:	2801      	cmp	r0, #1
 8000cf2:	d1f4      	bne.n	8000cde <StartbuzzerrythmTask+0x11e>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 8000cf4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	ae02      	add	r6, sp, #8
 8000cfc:	6828      	ldr	r0, [r5, #0]
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	461a      	mov	r2, r3
 8000d02:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8000d06:	f005 fa3b 	bl	8006180 <xQueueGenericSend>
 8000d0a:	2801      	cmp	r0, #1
 8000d0c:	d006      	beq.n	8000d1c <StartbuzzerrythmTask+0x15c>
			xSemaphoreGive(buzzerMutexHandle);
 8000d0e:	2300      	movs	r3, #0
 8000d10:	6820      	ldr	r0, [r4, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	f005 fa33 	bl	8006180 <xQueueGenericSend>
 8000d1a:	e7e0      	b.n	8000cde <StartbuzzerrythmTask+0x11e>
				i=i==SONGLENGTH-1?0:i+1;
 8000d1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	2b31      	cmp	r3, #49	; 0x31
 8000d24:	d006      	beq.n	8000d34 <StartbuzzerrythmTask+0x174>
 8000d26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000d32:	e7ec      	b.n	8000d0e <StartbuzzerrythmTask+0x14e>
 8000d34:	2300      	movs	r3, #0
 8000d36:	e7fa      	b.n	8000d2e <StartbuzzerrythmTask+0x16e>
 8000d38:	20003fc0 	.word	0x20003fc0
 8000d3c:	20003fb4 	.word	0x20003fb4

08000d40 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 8000d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000d44:	4d5c      	ldr	r5, [pc, #368]	; (8000eb8 <StartbuzzertoneTask+0x178>)
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 8000d46:	f04f 0a00 	mov.w	sl, #0
 8000d4a:	4c5c      	ldr	r4, [pc, #368]	; (8000ebc <StartbuzzertoneTask+0x17c>)
			//if all is 0 then no sound...
			//like 512 should be black[5-1] = 466.16/4   la+
			//013 should be white[3-1] = 329.63/4    mi
			//023 should be 2 * white[3-1] = 329.63/2
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
			time = tonedata/1000;
 8000d4c:	4f5c      	ldr	r7, [pc, #368]	; (8000ec0 <StartbuzzertoneTask+0x180>)
			black = (tonedata%1000)/100;
 8000d4e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8000ed0 <StartbuzzertoneTask+0x190>
			num = (tonedata%100)/10;
 8000d52:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8000ed4 <StartbuzzertoneTask+0x194>
{
 8000d56:	ed2d 8b04 	vpush	{d8-d9}
 8000d5a:	b090      	sub	sp, #64	; 0x40
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
				osDelay(500/time); //time is used to shorter the sound..
 8000d5c:	ed9f 9a59 	vldr	s18, [pc, #356]	; 8000ec4 <StartbuzzertoneTask+0x184>
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d62:	ae09      	add	r6, sp, #36	; 0x24
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000d64:	f10d 0e10 	add.w	lr, sp, #16
	volatile float tonefreq = 0, time = 0;;
 8000d68:	f8cd a008 	str.w	sl, [sp, #8]
 8000d6c:	f8cd a00c 	str.w	sl, [sp, #12]
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000d70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000d76:	350c      	adds	r5, #12
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000d78:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7e:	f8d5 c000 	ldr.w	ip, [r5]
 8000d82:	4e51      	ldr	r6, [pc, #324]	; (8000ec8 <StartbuzzertoneTask+0x188>)
 8000d84:	4d51      	ldr	r5, [pc, #324]	; (8000ecc <StartbuzzertoneTask+0x18c>)
 8000d86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
				SetbuzzerFreq(tonefreq);
 8000d8a:	ed9f 8b49 	vldr	d8, [pc, #292]	; 8000eb0 <StartbuzzertoneTask+0x170>
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000d8e:	f8ce c000 	str.w	ip, [lr]
 8000d92:	e003      	b.n	8000d9c <StartbuzzertoneTask+0x5c>
			xSemaphoreGive(buzzerMutexHandle);
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	f10d 0106 	add.w	r1, sp, #6
 8000da4:	6820      	ldr	r0, [r4, #0]
 8000da6:	f005 fbf5 	bl	8006594 <xQueueGenericReceive>
 8000daa:	2801      	cmp	r0, #1
 8000dac:	d1f2      	bne.n	8000d94 <StartbuzzertoneTask+0x54>
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 8000dae:	2300      	movs	r3, #0
 8000db0:	4602      	mov	r2, r0
 8000db2:	6830      	ldr	r0, [r6, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f005 fbed 	bl	8006594 <xQueueGenericReceive>
			time = tonedata/1000;
 8000dba:	f8bd 1006 	ldrh.w	r1, [sp, #6]
			black = (tonedata%1000)/100;
 8000dbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			time = tonedata/1000;
 8000dc2:	fba7 0301 	umull	r0, r3, r7, r1
 8000dc6:	099b      	lsrs	r3, r3, #6
 8000dc8:	ee07 3a90 	vmov	s15, r3
			black = (tonedata%1000)/100;
 8000dcc:	fb02 1213 	mls	r2, r2, r3, r1
			time = tonedata/1000;
 8000dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			black = (tonedata%1000)/100;
 8000dd4:	b292      	uxth	r2, r2
			time = tonedata/1000;
 8000dd6:	edcd 7a03 	vstr	s15, [sp, #12]
			if((tonedata%1000) != 0)
 8000dda:	b3c2      	cbz	r2, 8000e4e <StartbuzzertoneTask+0x10e>
			num = (tonedata%100)/10;
 8000ddc:	fba8 0301 	umull	r0, r3, r8, r1
 8000de0:	2064      	movs	r0, #100	; 0x64
			black = (tonedata%1000)/100;
 8000de2:	fba8 e202 	umull	lr, r2, r8, r2
			num = (tonedata%100)/10;
 8000de6:	095b      	lsrs	r3, r3, #5
				if(black)
 8000de8:	0952      	lsrs	r2, r2, #5
			num = (tonedata%100)/10;
 8000dea:	fb00 1313 	mls	r3, r0, r3, r1
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	fba9 0303 	umull	r0, r3, r9, r3
 8000df4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
				if(black)
 8000df8:	d040      	beq.n	8000e7c <StartbuzzertoneTask+0x13c>
					tonefreq = tonetable_black[black-1] * num *2 ;
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	ab10      	add	r3, sp, #64	; 0x40
 8000e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e04:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000e08:	ed12 7a0d 	vldr	s14, [r2, #-52]	; 0xffffffcc
 8000e0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e14:	edcd 7a02 	vstr	s15, [sp, #8]
				SetbuzzerFreq(tonefreq);
 8000e18:	ed9d 6a02 	vldr	s12, [sp, #8]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	682b      	ldr	r3, [r5, #0]
 8000e20:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000e24:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000e28:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8000e2c:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 8000e30:	635a      	str	r2, [r3, #52]	; 0x34
			if(time!=0)
 8000e32:	eddd 7a03 	vldr	s15, [sp, #12]
 8000e36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3e:	d112      	bne.n	8000e66 <StartbuzzertoneTask+0x126>
			xSemaphoreGive(buzzerMutexHandle);
 8000e40:	2300      	movs	r3, #0
 8000e42:	6830      	ldr	r0, [r6, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	f005 f99a 	bl	8006180 <xQueueGenericSend>
 8000e4c:	e7a6      	b.n	8000d9c <StartbuzzertoneTask+0x5c>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000e4e:	682b      	ldr	r3, [r5, #0]
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
 8000e52:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 8000e54:	f8cd a008 	str.w	sl, [sp, #8]
			if(time!=0)
 8000e58:	eddd 7a03 	vldr	s15, [sp, #12]
 8000e5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e64:	d0ec      	beq.n	8000e40 <StartbuzzertoneTask+0x100>
				osDelay(500/time); //time is used to shorter the sound..
 8000e66:	ed9d 7a03 	vldr	s14, [sp, #12]
 8000e6a:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8000e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e72:	ee17 0a90 	vmov	r0, s15
 8000e76:	f004 fdbf 	bl	80059f8 <osDelay>
 8000e7a:	e7e1      	b.n	8000e40 <StartbuzzertoneTask+0x100>
			white  = tonedata%10;
 8000e7c:	fba9 0201 	umull	r0, r2, r9, r1
					tonefreq = tonetable_white[white-1] * num *2;
 8000e80:	ee07 3a90 	vmov	s15, r3
			white  = tonedata%10;
 8000e84:	08d3      	lsrs	r3, r2, #3
					tonefreq = tonetable_white[white-1] * num *2;
 8000e86:	aa10      	add	r2, sp, #64	; 0x40
 8000e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			white  = tonedata%10;
 8000e8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e90:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
					tonefreq = tonetable_white[white-1] * num *2;
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000e9a:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8000e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ea6:	edcd 7a02 	vstr	s15, [sp, #8]
 8000eaa:	e7b5      	b.n	8000e18 <StartbuzzertoneTask+0xd8>
 8000eac:	f3af 8000 	nop.w
 8000eb0:	00000000 	.word	0x00000000
 8000eb4:	412e8480 	.word	0x412e8480
 8000eb8:	08007fd8 	.word	0x08007fd8
 8000ebc:	20003fb4 	.word	0x20003fb4
 8000ec0:	10624dd3 	.word	0x10624dd3
 8000ec4:	43fa0000 	.word	0x43fa0000
 8000ec8:	20003fc0 	.word	0x20003fc0
 8000ecc:	20004110 	.word	0x20004110
 8000ed0:	51eb851f 	.word	0x51eb851f
 8000ed4:	cccccccd 	.word	0xcccccccd

08000ed8 <SystemInitialization>:
extern uint8_t order_buff[5];
//int32_t cur_u;
//int32_t cur_v;

void SystemInitialization(void)
{
 8000ed8:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);

	/*
	 * tim1 pwm initialization
	 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000eda:	4c17      	ldr	r4, [pc, #92]	; (8000f38 <SystemInitialization+0x60>)
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000edc:	2100      	movs	r1, #0
 8000ede:	4817      	ldr	r0, [pc, #92]	; (8000f3c <SystemInitialization+0x64>)
 8000ee0:	f003 fb5c 	bl	800459c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f003 fb58 	bl	800459c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8000eec:	4620      	mov	r0, r4
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f003 fdc6 	bl	8004a80 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	f003 fb50 	bl	800459c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8000efc:	4620      	mov	r0, r4
 8000efe:	2104      	movs	r1, #4
 8000f00:	f003 fdbe 	bl	8004a80 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000f04:	4620      	mov	r0, r4
 8000f06:	2108      	movs	r1, #8
 8000f08:	f003 fb48 	bl	800459c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	2108      	movs	r1, #8
 8000f10:	f003 fdb6 	bl	8004a80 <HAL_TIMEx_PWMN_Start>

	/*
	 * register the call back of uart4 transmit..
	 */
	//HAL_DMA_RegisterCallback(&hdma_uart4_rx,HAL_DMA_XFER_CPLTUART4_DMA2_Cplt_Callback);
	HAL_UART_Receive_DMA(&huart4,enchall_buff,5);
 8000f14:	2205      	movs	r2, #5
 8000f16:	490a      	ldr	r1, [pc, #40]	; (8000f40 <SystemInitialization+0x68>)
 8000f18:	480a      	ldr	r0, [pc, #40]	; (8000f44 <SystemInitialization+0x6c>)
 8000f1a:	f003 ffa3 	bl	8004e64 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1,order_buff,5);
 8000f1e:	2205      	movs	r2, #5
 8000f20:	4909      	ldr	r1, [pc, #36]	; (8000f48 <SystemInitialization+0x70>)
 8000f22:	480a      	ldr	r0, [pc, #40]	; (8000f4c <SystemInitialization+0x74>)
 8000f24:	f003 ff9e 	bl	8004e64 <HAL_UART_Receive_DMA>

	/*
	 * DFSDM initial
	 */
	//polling mode
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0);
 8000f28:	4809      	ldr	r0, [pc, #36]	; (8000f50 <SystemInitialization+0x78>)
 8000f2a:	f001 fd4f 	bl	80029cc <HAL_DFSDM_FilterRegularStart>
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 8000f2e:	4809      	ldr	r0, [pc, #36]	; (8000f54 <SystemInitialization+0x7c>)
	//DMA mode
//	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,&cur_u,1);
//	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,&cur_v,1);
}
 8000f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 8000f34:	f001 bd4a 	b.w	80029cc <HAL_DFSDM_FilterRegularStart>
 8000f38:	200040d0 	.word	0x200040d0
 8000f3c:	20004110 	.word	0x20004110
 8000f40:	20003dc4 	.word	0x20003dc4
 8000f44:	20004360 	.word	0x20004360
 8000f48:	20003dcc 	.word	0x20003dcc
 8000f4c:	20004280 	.word	0x20004280
 8000f50:	20003dd4 	.word	0x20003dd4
 8000f54:	20003f20 	.word	0x20003f20

08000f58 <StartenchallTask>:
#include "main.h"
extern osMessageQId enchallQueueHandle;
extern osMessageQId conresQueueHandle;

void StartenchallTask(void const * argument)
{
 8000f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f5c:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8000f70 <StartenchallTask+0x18>
 8000f60:	b0a3      	sub	sp, #140	; 0x8c
//		  datatosend[++i] = '\t';
		  //datatosend[++i] = encdata.enc_counter/10 + 0x30; //msb unit
		  //datatosend[++i] = encdata.enc_counter%10 + 0x30; //lsb unit
		  //datatosend[++i] = '\t';
		  datatosend[++i] = 'E';datatosend[++i] = ':';
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8000f62:	f8df 8010 	ldr.w	r8, [pc, #16]	; 8000f74 <StartenchallTask+0x1c>
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8000f66:	f8df a010 	ldr.w	sl, [pc, #16]	; 8000f78 <StartenchallTask+0x20>
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8000f6a:	f8df b010 	ldr.w	fp, [pc, #16]	; 8000f7c <StartenchallTask+0x24>
 8000f6e:	e02b      	b.n	8000fc8 <StartenchallTask+0x70>
 8000f70:	20004280 	.word	0x20004280
 8000f74:	10624dd3 	.word	0x10624dd3
 8000f78:	51eb851f 	.word	0x51eb851f
 8000f7c:	cccccccd 	.word	0xcccccccd
 8000f80:	2221      	movs	r2, #33	; 0x21
 8000f82:	2320      	movs	r3, #32
 8000f84:	211f      	movs	r1, #31
 8000f86:	4616      	mov	r6, r2
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
		  }


		  datatosend[++i] = '\t';
 8000f88:	a822      	add	r0, sp, #136	; 0x88
 8000f8a:	2409      	movs	r4, #9
		  datatosend[++i] = '\r';
		  datatosend[++i] = '\n';
 8000f8c:	250a      	movs	r5, #10
		  datatosend[++i] = '\t';
 8000f8e:	4401      	add	r1, r0
		  datatosend[++i] = '\r';
 8000f90:	4403      	add	r3, r0
		  datatosend[++i] = '\n';
 8000f92:	4430      	add	r0, r6
		  datatosend[++i] = '\r';
 8000f94:	260d      	movs	r6, #13
		  datatosend[++i] = '\t';
 8000f96:	f801 4c50 	strb.w	r4, [r1, #-80]
		  __HAL_UNLOCK(&huart1);
 8000f9a:	2400      	movs	r4, #0
		  datatosend[++i] = '\r';
 8000f9c:	f803 6c50 	strb.w	r6, [r3, #-80]
		  HAL_UART_Transmit(&huart1,datatosend,i,50);
 8000fa0:	a90e      	add	r1, sp, #56	; 0x38
 8000fa2:	2332      	movs	r3, #50	; 0x32
		  datatosend[++i] = '\n';
 8000fa4:	f800 5c50 	strb.w	r5, [r0, #-80]
		  HAL_UART_Transmit(&huart1,datatosend,i,50);
 8000fa8:	48e8      	ldr	r0, [pc, #928]	; (800134c <StartenchallTask+0x3f4>)
		  __HAL_UNLOCK(&huart1);
 8000faa:	f889 4068 	strb.w	r4, [r9, #104]	; 0x68
		  HAL_UART_Transmit(&huart1,datatosend,i,50);
 8000fae:	f003 fed9 	bl	8004d64 <HAL_UART_Transmit>
		  __HAL_LOCK(&huart1);
 8000fb2:	f899 3068 	ldrb.w	r3, [r9, #104]	; 0x68
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f000 824a 	beq.w	8001450 <StartenchallTask+0x4f8>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
	  }
	  //every 5 mini
	  osDelay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f004 fd18 	bl	80059f8 <osDelay>
	  if(xQueuePeek(enchallQueueHandle,&encdata,0)==pdPASS)
 8000fc8:	48e1      	ldr	r0, [pc, #900]	; (8001350 <StartenchallTask+0x3f8>)
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	a90a      	add	r1, sp, #40	; 0x28
 8000fd0:	6800      	ldr	r0, [r0, #0]
 8000fd2:	f005 fadf 	bl	8006594 <xQueueGenericReceive>
 8000fd6:	2801      	cmp	r0, #1
 8000fd8:	d1f3      	bne.n	8000fc2 <StartenchallTask+0x6a>
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8000fda:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8000fde:	2464      	movs	r4, #100	; 0x64
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8000fe0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		  datatosend[++i] = encdata.Kp/10 + 0x30;
 8000fe4:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8000fe8:	fbaa 1203 	umull	r1, r2, sl, r3
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8000fec:	fba8 5103 	umull	r5, r1, r8, r3
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8000ff0:	0952      	lsrs	r2, r2, #5
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 8000ff2:	fbab 7503 	umull	r7, r5, fp, r3
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8000ff6:	0989      	lsrs	r1, r1, #6
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8000ff8:	fb04 3212 	mls	r2, r4, r2, r3
		  datatosend[++i] = encdata.Ki/10 + 0x30;
 8000ffc:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8001000:	fb06 3611 	mls	r6, r6, r1, r3
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 8001004:	3130      	adds	r1, #48	; 0x30
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8001006:	b292      	uxth	r2, r2
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8001008:	b2b6      	uxth	r6, r6
		  datatosend[++i] = encdata.recon_counter/1000 + 0x30; //msb unit
 800100a:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 800100e:	08e9      	lsrs	r1, r5, #3
		  datatosend[++i] = encdata.Kp/10 + 0x30;
 8001010:	fbab 5700 	umull	r5, r7, fp, r0
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 8001014:	fbab 5202 	umull	r5, r2, fp, r2
		  datatosend[++i] = encdata.Kp/10 + 0x30;
 8001018:	08ff      	lsrs	r7, r7, #3
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 800101a:	fbaa 6506 	umull	r6, r5, sl, r6
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 800101e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
		  datatosend[++i] = encdata.Ki/10 + 0x30;
 8001022:	fbab e604 	umull	lr, r6, fp, r4
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 8001026:	096d      	lsrs	r5, r5, #5
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 8001028:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
		  datatosend[++i] = encdata.Ki/10 + 0x30;
 800102c:	08f6      	lsrs	r6, r6, #3
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 800102e:	f105 0130 	add.w	r1, r5, #48	; 0x30
		  datatosend[++i] = encdata.Kp%10 + 0x30;
 8001032:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 8001036:	f103 0530 	add.w	r5, r3, #48	; 0x30
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 800103a:	08d2      	lsrs	r2, r2, #3
		  datatosend[++i] = encdata.recon_counter%1000/100 + 0x30;
 800103c:	f88d 103f 	strb.w	r1, [sp, #63]	; 0x3f
		  datatosend[++i] = encdata.Ki%10 + 0x30;
 8001040:	eb06 0386 	add.w	r3, r6, r6, lsl #2
		  datatosend[++i] = encdata.hole_in + 0x30; //3bits
 8001044:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
		  datatosend[++i] = encdata.Kp%10 + 0x30;
 8001048:	eba0 004e 	sub.w	r0, r0, lr, lsl #1
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 800104c:	3230      	adds	r2, #48	; 0x30
		  datatosend[++i] = encdata.Ki%10 + 0x30;
 800104e:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
		  datatosend[++i] = encdata.recon_counter%10 + 0x30;
 8001052:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
		  datatosend[++i] = encdata.Kp%10 + 0x30;
 8001056:	3030      	adds	r0, #48	; 0x30
		  datatosend[++i] = 'E';datatosend[++i] = ':';
 8001058:	2545      	movs	r5, #69	; 0x45
		  datatosend[++i] = encdata.Ki%10 + 0x30;
 800105a:	3330      	adds	r3, #48	; 0x30
		  datatosend[++i] = encdata.hole_in + 0x30; //3bits
 800105c:	3130      	adds	r1, #48	; 0x30
		  datatosend[++i] = encdata.recon_counter%100/10 + 0x30;
 800105e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		  datatosend[i] = 'H';datatosend[++i] = ':';
 8001062:	223a      	movs	r2, #58	; 0x3a
		  datatosend[++i] = encdata.Kp%10 + 0x30;
 8001064:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
		  datatosend[i] = 'H';datatosend[++i] = ':';
 8001068:	2048      	movs	r0, #72	; 0x48
		  datatosend[++i] = 'E';datatosend[++i] = ':';
 800106a:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
		  datatosend[++i] = encdata.Kp/10 + 0x30;
 800106e:	3730      	adds	r7, #48	; 0x30
		  if(encdata.target_cur<0) //minus
 8001070:	f9bd 5034 	ldrsh.w	r5, [sp, #52]	; 0x34
		  datatosend[++i] = encdata.Ki/10 + 0x30;
 8001074:	3630      	adds	r6, #48	; 0x30
		  datatosend[++i] = encdata.Ki%10 + 0x30;
 8001076:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		  datatosend[++i] = 'P';datatosend[++i] = ':';
 800107a:	2450      	movs	r4, #80	; 0x50
		  datatosend[++i] = '\t';
 800107c:	2309      	movs	r3, #9
		  datatosend[++i] = encdata.hole_in + 0x30; //3bits
 800107e:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
		  datatosend[i] = 'H';datatosend[++i] = ':';
 8001082:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
		  datatosend[++i] = 'T';datatosend[++i] = 'Q';datatosend[++i] = ':';
 8001086:	2154      	movs	r1, #84	; 0x54
		  datatosend[++i] = 'I';datatosend[++i] = ':';
 8001088:	2049      	movs	r0, #73	; 0x49
		  datatosend[i] = 'H';datatosend[++i] = ':';
 800108a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		  datatosend[++i] = 'E';datatosend[++i] = ':';
 800108e:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
		  if(encdata.target_cur<0) //minus
 8001092:	2d00      	cmp	r5, #0
		  datatosend[++i] = 'P';datatosend[++i] = ':';
 8001094:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
		  datatosend[++i] = 'I';datatosend[++i] = ':';
 8001098:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		  datatosend[++i] = 'T';datatosend[++i] = 'Q';datatosend[++i] = ':';
 800109c:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 80010a0:	f04f 0251 	mov.w	r2, #81	; 0x51
		  datatosend[++i] = encdata.Kp/10 + 0x30;
 80010a4:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
		  datatosend[++i] = encdata.Ki/10 + 0x30;
 80010a8:	f88d 604a 	strb.w	r6, [sp, #74]	; 0x4a
		  datatosend[++i] = '\t';
 80010ac:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		  datatosend[++i] = '\t';
 80010b0:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		  datatosend[++i] = '\t';
 80010b4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
		  datatosend[++i] = '\t';
 80010b8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		  datatosend[++i] = 'P';datatosend[++i] = ':';
 80010bc:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
		  datatosend[++i] = 'I';datatosend[++i] = ':';
 80010c0:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		  datatosend[++i] = 'T';datatosend[++i] = 'Q';datatosend[++i] = ':';
 80010c4:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 80010c8:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
		  if(encdata.target_cur<0) //minus
 80010cc:	f2c0 81ba 	blt.w	8001444 <StartenchallTask+0x4ec>
			  datatosend[++i] = '+';
 80010d0:	262b      	movs	r6, #43	; 0x2b
		  datatosend[++i] = encdata.target_cur/10000 + 0x30;
 80010d2:	4ba0      	ldr	r3, [pc, #640]	; (8001354 <StartenchallTask+0x3fc>)
 80010d4:	17ec      	asrs	r4, r5, #31
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 80010d6:	f242 7110 	movw	r1, #10000	; 0x2710
 80010da:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
		  datatosend[++i] = encdata.target_cur/10000 + 0x30;
 80010de:	fb83 3005 	smull	r3, r0, r3, r5
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 80010e2:	fb88 3205 	smull	r3, r2, r8, r5
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 80010e6:	fb8a 7305 	smull	r7, r3, sl, r5
		  datatosend[++i] = encdata.target_cur/10000 + 0x30;
 80010ea:	ebc4 3020 	rsb	r0, r4, r0, asr #12
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 80010ee:	ebc4 12a2 	rsb	r2, r4, r2, asr #6
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 80010f2:	ebc4 1363 	rsb	r3, r4, r3, asr #5
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 80010f6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 80010fa:	fb01 5110 	mls	r1, r1, r0, r5
		  datatosend[++i] = encdata.target_cur/10000 + 0x30;
 80010fe:	3030      	adds	r0, #48	; 0x30
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001100:	fb04 5212 	mls	r2, r4, r2, r5
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 8001104:	2464      	movs	r4, #100	; 0x64
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 8001106:	b209      	sxth	r1, r1
		  datatosend[++i] = encdata.target_cur/10000 + 0x30;
 8001108:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 800110c:	fb04 5313 	mls	r3, r4, r3, r5
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001110:	b212      	sxth	r2, r2
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 8001112:	fb88 0401 	smull	r0, r4, r8, r1
 8001116:	17c8      	asrs	r0, r1, #31
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 8001118:	b21b      	sxth	r3, r3
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 800111a:	fb8a 1502 	smull	r1, r5, sl, r2
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 800111e:	498e      	ldr	r1, [pc, #568]	; (8001358 <StartenchallTask+0x400>)
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 8001120:	ebc0 10a4 	rsb	r0, r0, r4, asr #6
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001124:	17d2      	asrs	r2, r2, #31
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 8001126:	fb81 1403 	smull	r1, r4, r1, r3
 800112a:	17d9      	asrs	r1, r3, #31
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 800112c:	ebc2 1265 	rsb	r2, r2, r5, asr #5
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 8001130:	3030      	adds	r0, #48	; 0x30
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 8001132:	ebc1 01a4 	rsb	r1, r1, r4, asr #2
		  datatosend[++i] = '.';
 8001136:	252e      	movs	r5, #46	; 0x2e
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001138:	3230      	adds	r2, #48	; 0x30
		  datatosend[++i] = encdata.target_cur%10000/1000 + 0x30;
 800113a:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 800113e:	3130      	adds	r1, #48	; 0x30
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 8001140:	4886      	ldr	r0, [pc, #536]	; (800135c <StartenchallTask+0x404>)
		  datatosend[++i] = 'A';
 8001142:	2441      	movs	r4, #65	; 0x41
		  datatosend[++i] = encdata.target_cur%1000/100 + 0x30;
 8001144:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
		  datatosend[++i] = encdata.target_cur%100/10 + 0x30;
 8001148:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 800114c:	2301      	movs	r3, #1
 800114e:	2200      	movs	r2, #0
 8001150:	a907      	add	r1, sp, #28
 8001152:	6800      	ldr	r0, [r0, #0]
		  datatosend[++i] = '.';
 8001154:	f88d 5053 	strb.w	r5, [sp, #83]	; 0x53
		  datatosend[++i] = 'A';
 8001158:	f88d 4056 	strb.w	r4, [sp, #86]	; 0x56
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 800115c:	f005 fa1a 	bl	8006594 <xQueueGenericReceive>
 8001160:	2801      	cmp	r0, #1
 8001162:	f47f af0d 	bne.w	8000f80 <StartenchallTask+0x28>
			  if(conresdata.feedback_cq<0) //minus
 8001166:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
			  datatosend[++i] = '\t';
 800116a:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <StartenchallTask+0x408>)
			  if(conresdata.feedback_cq<0) //minus
 800116c:	2d00      	cmp	r5, #0
			  datatosend[++i] = '\t';
 800116e:	f8cd 3057 	str.w	r3, [sp, #87]	; 0x57
			  if(conresdata.feedback_cq<0) //minus
 8001172:	f2c0 8176 	blt.w	8001462 <StartenchallTask+0x50a>
				  datatosend[++i] = '+';
 8001176:	262b      	movs	r6, #43	; 0x2b
			  datatosend[++i] = conresdata.feedback_cq/10000 + 0x30;
 8001178:	4b76      	ldr	r3, [pc, #472]	; (8001354 <StartenchallTask+0x3fc>)
 800117a:	17ec      	asrs	r4, r5, #31
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 800117c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001180:	f88d 605b 	strb.w	r6, [sp, #91]	; 0x5b
			  datatosend[++i] = conresdata.feedback_cq/10000 + 0x30;
 8001184:	fb83 3005 	smull	r3, r0, r3, r5
			  datatosend[++i] = '.';
 8001188:	262e      	movs	r6, #46	; 0x2e
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 800118a:	fb88 3205 	smull	r3, r2, r8, r5
			  datatosend[++i] = conresdata.feedback_cq/10000 + 0x30;
 800118e:	ebc4 3020 	rsb	r0, r4, r0, asr #12
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 8001192:	fb8a 7305 	smull	r7, r3, sl, r5
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 8001196:	ebc4 12a2 	rsb	r2, r4, r2, asr #6
			  datatosend[++i] = '.';
 800119a:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 800119e:	fb01 5110 	mls	r1, r1, r0, r5
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 80011a2:	ebc4 1363 	rsb	r3, r4, r3, asr #5
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 80011a6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
			  datatosend[++i] = conresdata.feedback_cq/10000 + 0x30;
 80011aa:	3030      	adds	r0, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 80011ac:	b209      	sxth	r1, r1
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 80011ae:	fb04 5212 	mls	r2, r4, r2, r5
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 80011b2:	2464      	movs	r4, #100	; 0x64
			  datatosend[++i] = conresdata.feedback_cq/10000 + 0x30;
 80011b4:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 80011b8:	fb04 5313 	mls	r3, r4, r3, r5
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 80011bc:	b212      	sxth	r2, r2
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 80011be:	fb88 4001 	smull	r4, r0, r8, r1
 80011c2:	17c9      	asrs	r1, r1, #31
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 80011c4:	b21b      	sxth	r3, r3
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 80011c6:	fb8a 5402 	smull	r5, r4, sl, r2
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 80011ca:	ebc1 11a0 	rsb	r1, r1, r0, asr #6
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 80011ce:	4862      	ldr	r0, [pc, #392]	; (8001358 <StartenchallTask+0x400>)
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 80011d0:	17d2      	asrs	r2, r2, #31
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 80011d2:	fb80 5003 	smull	r5, r0, r0, r3
 80011d6:	17db      	asrs	r3, r3, #31
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 80011d8:	ebc2 1264 	rsb	r2, r2, r4, asr #5
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 80011dc:	3130      	adds	r1, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 80011de:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
			  datatosend[++i] = 'A';
 80011e2:	2541      	movs	r5, #65	; 0x41
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 80011e4:	3230      	adds	r2, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cq%10000/1000 + 0x30;
 80011e6:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 80011ea:	3330      	adds	r3, #48	; 0x30
			  if(conresdata.feedback_cd<0) //minus
 80011ec:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
			  datatosend[++i] = '\t';
 80011f0:	2409      	movs	r4, #9
			  datatosend[++i] = conresdata.feedback_cq%1000/100 + 0x30;
 80011f2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
			  datatosend[++i] = 'F';datatosend[++i] = 'D';datatosend[++i] = ':';
 80011f6:	2046      	movs	r0, #70	; 0x46
			  datatosend[++i] = conresdata.feedback_cq%100/10 + 0x30;
 80011f8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
			  datatosend[++i] = 'F';datatosend[++i] = 'D';datatosend[++i] = ':';
 80011fc:	2244      	movs	r2, #68	; 0x44
 80011fe:	233a      	movs	r3, #58	; 0x3a
			  if(conresdata.feedback_cd<0) //minus
 8001200:	2900      	cmp	r1, #0
			  datatosend[++i] = 'A';
 8001202:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
			  datatosend[++i] = '\t';
 8001206:	f88d 4062 	strb.w	r4, [sp, #98]	; 0x62
			  datatosend[++i] = 'F';datatosend[++i] = 'D';datatosend[++i] = ':';
 800120a:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
 800120e:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
 8001212:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
			  if(conresdata.feedback_cd<0) //minus
 8001216:	f2c0 811e 	blt.w	8001456 <StartenchallTask+0x4fe>
				  datatosend[++i] = '+';
 800121a:	222b      	movs	r2, #43	; 0x2b
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 800121c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 8001220:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 8001224:	9300      	str	r3, [sp, #0]
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 8001226:	17cb      	asrs	r3, r1, #31
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 8001228:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 800122c:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 8001230:	461c      	mov	r4, r3
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 8001232:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 8001236:	9a00      	ldr	r2, [sp, #0]
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 8001238:	461d      	mov	r5, r3
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 800123a:	fb88 3700 	smull	r3, r7, r8, r0
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 800123e:	fb8a 6300 	smull	r6, r3, sl, r0
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 8001242:	ebcc 17a7 	rsb	r7, ip, r7, asr #6
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 8001246:	fba8 6202 	umull	r6, r2, r8, r2
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 800124a:	ebcc 1363 	rsb	r3, ip, r3, asr #5
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 800124e:	9401      	str	r4, [sp, #4]
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 8001250:	0992      	lsrs	r2, r2, #6
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 8001252:	9302      	str	r3, [sp, #8]
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 8001258:	9204      	str	r2, [sp, #16]
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 800125a:	fb03 0617 	mls	r6, r3, r7, r0
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 800125e:	9b00      	ldr	r3, [sp, #0]
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 8001260:	3730      	adds	r7, #48	; 0x30
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 8001262:	fbaa 3203 	umull	r3, r2, sl, r3
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 8001266:	b236      	sxth	r6, r6
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 8001268:	fba8 3e05 	umull	r3, lr, r8, r5
			  datatosend[++i] = conresdata.duty_a/1000 + 0x30;
 800126c:	f88d 7073 	strb.w	r7, [sp, #115]	; 0x73
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 8001270:	17f7      	asrs	r7, r6, #31
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 8001272:	ea4f 139e 	mov.w	r3, lr, lsr #6
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 8001276:	0952      	lsrs	r2, r2, #5
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 8001278:	9305      	str	r3, [sp, #20]
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 800127a:	fb88 3e01 	smull	r3, lr, r8, r1
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 800127e:	fb8a 3606 	smull	r3, r6, sl, r6
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 8001282:	9b02      	ldr	r3, [sp, #8]
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 8001284:	ebc4 1eae 	rsb	lr, r4, lr, asr #6
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 8001288:	9c00      	ldr	r4, [sp, #0]
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 800128a:	ebc7 1766 	rsb	r7, r7, r6, asr #5
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 800128e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 8001292:	3730      	adds	r7, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 8001294:	fb06 1e1e 	mls	lr, r6, lr, r1
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 8001298:	2664      	movs	r6, #100	; 0x64
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 800129a:	fa0f fe8e 	sxth.w	lr, lr
			  datatosend[++i] = conresdata.duty_a%1000/100 + 0x30;
 800129e:	f88d 7074 	strb.w	r7, [sp, #116]	; 0x74
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 80012a2:	4f2d      	ldr	r7, [pc, #180]	; (8001358 <StartenchallTask+0x400>)
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 80012a4:	fb06 4212 	mls	r2, r6, r2, r4
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 80012a8:	f8cd e00c 	str.w	lr, [sp, #12]
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 80012ac:	fb87 e700 	smull	lr, r7, r7, r0
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 80012b0:	9c01      	ldr	r4, [sp, #4]
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80012b2:	fb06 0313 	mls	r3, r6, r3, r0
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 80012b6:	b292      	uxth	r2, r2
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 80012b8:	ebcc 0ca7 	rsb	ip, ip, r7, asr #2
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 80012bc:	462f      	mov	r7, r5
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 80012be:	b21b      	sxth	r3, r3
			  datatosend[++i] = 'd';datatosend[++i] = 'u';
 80012c0:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 80012c4:	fbaa 7e07 	umull	r7, lr, sl, r7
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 80012c8:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 80012cc:	fbab 7202 	umull	r7, r2, fp, r2
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 80012d0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 80012d4:	9501      	str	r5, [sp, #4]
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 80012d6:	eba0 0c4c 	sub.w	ip, r0, ip, lsl #1
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 80012da:	fb8a 7001 	smull	r7, r0, sl, r1
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 80012de:	fb06 5e1e 	mls	lr, r6, lr, r5
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 80012e2:	08d2      	lsrs	r2, r2, #3
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 80012e4:	ebc4 1760 	rsb	r7, r4, r0, asr #5
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 80012e8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 80012ec:	fa1f fe8e 	uxth.w	lr, lr
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 80012f0:	3230      	adds	r2, #48	; 0x30
			  datatosend[++i] = conresdata.duty_a%10 + 0x30;
 80012f2:	f88d c076 	strb.w	ip, [sp, #118]	; 0x76
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 80012f6:	fbab 0e0e 	umull	r0, lr, fp, lr
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 80012fa:	fb06 1017 	mls	r0, r6, r7, r1
			  datatosend[++i] = conresdata.duty_b%100/10 + 0x30;
 80012fe:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 8001302:	f242 7210 	movw	r2, #10000	; 0x2710
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 8001306:	fa0f fc80 	sxth.w	ip, r0
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 800130a:	4812      	ldr	r0, [pc, #72]	; (8001354 <StartenchallTask+0x3fc>)
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 800130c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 8001310:	fb80 7001 	smull	r7, r0, r0, r1
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 8001314:	4f10      	ldr	r7, [pc, #64]	; (8001358 <StartenchallTask+0x400>)
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 8001316:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 800131a:	ebc4 3020 	rsb	r0, r4, r0, asr #12
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 800131e:	fb87 6703 	smull	r6, r7, r7, r3
 8001322:	17db      	asrs	r3, r3, #31
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 8001324:	9c04      	ldr	r4, [sp, #16]
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 8001326:	fb02 1110 	mls	r1, r2, r0, r1
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 800132a:	3030      	adds	r0, #48	; 0x30
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 800132c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 8001330:	ebc3 03a7 	rsb	r3, r3, r7, asr #2
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 8001334:	9002      	str	r0, [sp, #8]
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 8001336:	b209      	sxth	r1, r1
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 8001338:	9f05      	ldr	r7, [sp, #20]
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 800133a:	3330      	adds	r3, #48	; 0x30
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 800133c:	9800      	ldr	r0, [sp, #0]
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 800133e:	fb06 5217 	mls	r2, r6, r7, r5
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 8001342:	fb06 0014 	mls	r0, r6, r4, r0
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 8001346:	4626      	mov	r6, r4
 8001348:	e00c      	b.n	8001364 <StartenchallTask+0x40c>
 800134a:	bf00      	nop
 800134c:	20004280 	.word	0x20004280
 8001350:	20003fc4 	.word	0x20003fc4
 8001354:	68db8bad 	.word	0x68db8bad
 8001358:	66666667 	.word	0x66666667
 800135c:	20003fac 	.word	0x20003fac
 8001360:	3a514609 	.word	0x3a514609
			  datatosend[++i] = conresdata.duty_c%100/10 + 0x30;
 8001364:	f88d e07f 	strb.w	lr, [sp, #127]	; 0x7f
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 8001368:	f107 0e30 	add.w	lr, r7, #48	; 0x30
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 800136c:	b280      	uxth	r0, r0
			  datatosend[++i] = conresdata.duty_a%100/10 + 0x30;
 800136e:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 8001372:	b297      	uxth	r7, r2
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 8001374:	9a00      	ldr	r2, [sp, #0]
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 8001376:	fbab 4305 	umull	r4, r3, fp, r5
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 800137a:	3630      	adds	r6, #48	; 0x30
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 800137c:	fbab 4202 	umull	r4, r2, fp, r2
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 8001380:	fbaa 4000 	umull	r4, r0, sl, r0
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 8001384:	08db      	lsrs	r3, r3, #3
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 8001386:	fbaa 4707 	umull	r4, r7, sl, r7
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 800138a:	08d2      	lsrs	r2, r2, #3
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 800138c:	0940      	lsrs	r0, r0, #5
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 800138e:	9c00      	ldr	r4, [sp, #0]
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 8001390:	097f      	lsrs	r7, r7, #5
			  datatosend[++i] = conresdata.duty_b/1000 + 0x30;
 8001392:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 8001396:	3030      	adds	r0, #48	; 0x30
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 8001398:	eb02 0282 	add.w	r2, r2, r2, lsl #2
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 800139c:	3730      	adds	r7, #48	; 0x30
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 800139e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 80013a2:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
			  datatosend[++i] = conresdata.duty_b%1000/100 + 0x30;
 80013a6:	f88d 0079 	strb.w	r0, [sp, #121]	; 0x79
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 80013aa:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
			  datatosend[++i] = conresdata.duty_c%1000/100 + 0x30;
 80013ae:	f88d 707e 	strb.w	r7, [sp, #126]	; 0x7e
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 80013b2:	9c03      	ldr	r4, [sp, #12]
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 80013b4:	fb88 6001 	smull	r6, r0, r8, r1
 80013b8:	17c9      	asrs	r1, r1, #31
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 80013ba:	3230      	adds	r2, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 80013bc:	fb8a 6504 	smull	r6, r5, sl, r4
 80013c0:	17e7      	asrs	r7, r4, #31
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 80013c2:	f103 0430 	add.w	r4, r3, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <StartenchallTask+0x518>)
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 80013c8:	ebc1 11a0 	rsb	r1, r1, r0, asr #6
			  datatosend[++i] = conresdata.duty_c/1000 + 0x30;
 80013cc:	f88d e07d 	strb.w	lr, [sp, #125]	; 0x7d
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 80013d0:	fb83 630c 	smull	r6, r3, r3, ip
 80013d4:	ea4f 70ec 	mov.w	r0, ip, asr #31
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 80013d8:	ebc7 1e65 	rsb	lr, r7, r5, asr #5
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 80013dc:	3130      	adds	r1, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 80013de:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 80013e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			  datatosend[++i] = 'd';datatosend[++i] = 'u';
 80013e6:	2675      	movs	r6, #117	; 0x75
			  datatosend[++i] = '.';
 80013e8:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 80013ec:	3030      	adds	r0, #48	; 0x30
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 80013ee:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
			  datatosend[++i] = 'A';
 80013f2:	2741      	movs	r7, #65	; 0x41
			  datatosend[++i] = conresdata.feedback_cd/10000 + 0x30;
 80013f4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
			  datatosend[++i] = conresdata.feedback_cd%10000/1000 + 0x30;
 80013f8:	f88d 1068 	strb.w	r1, [sp, #104]	; 0x68
			  datatosend[++i] = '\t';
 80013fc:	2309      	movs	r3, #9
			  datatosend[++i] = 't';datatosend[++i] = 'y';datatosend[++i] = ':';
 80013fe:	2174      	movs	r1, #116	; 0x74
			  datatosend[++i] = conresdata.feedback_cd%100/10 + 0x30;
 8001400:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
			  datatosend[++i] = 't';datatosend[++i] = 'y';datatosend[++i] = ':';
 8001404:	2579      	movs	r5, #121	; 0x79
			  datatosend[++i] = conresdata.duty_b%10 + 0x30;
 8001406:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
			  datatosend[++i] = 't';datatosend[++i] = 'y';datatosend[++i] = ':';
 800140a:	203a      	movs	r0, #58	; 0x3a
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 800140c:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
 8001410:	224b      	movs	r2, #75	; 0x4b
			  datatosend[++i] = ',';
 8001412:	242c      	movs	r4, #44	; 0x2c
			  datatosend[++i] = '\t';
 8001414:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 8001418:	234a      	movs	r3, #74	; 0x4a
			  datatosend[++i] = 'd';datatosend[++i] = 'u';
 800141a:	f88d 606f 	strb.w	r6, [sp, #111]	; 0x6f
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 800141e:	4616      	mov	r6, r2
			  datatosend[++i] = 't';datatosend[++i] = 'y';datatosend[++i] = ':';
 8001420:	f88d 1070 	strb.w	r1, [sp, #112]	; 0x70
			  datatosend[++i] = conresdata.duty_c%10 + 0x30;
 8001424:	2149      	movs	r1, #73	; 0x49
			  datatosend[++i] = conresdata.feedback_cd%1000/100 + 0x30;
 8001426:	f88d e06a 	strb.w	lr, [sp, #106]	; 0x6a
			  datatosend[++i] = '.';
 800142a:	f88d c069 	strb.w	ip, [sp, #105]	; 0x69
			  datatosend[++i] = 'A';
 800142e:	f88d 706c 	strb.w	r7, [sp, #108]	; 0x6c
			  datatosend[++i] = 't';datatosend[++i] = 'y';datatosend[++i] = ':';
 8001432:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
 8001436:	f88d 0072 	strb.w	r0, [sp, #114]	; 0x72
			  datatosend[++i] = ',';
 800143a:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
			  datatosend[++i] = ',';
 800143e:	f88d 407c 	strb.w	r4, [sp, #124]	; 0x7c
 8001442:	e5a1      	b.n	8000f88 <StartenchallTask+0x30>
			  encdata.target_cur = ~(encdata.target_cur - 1);
 8001444:	426b      	negs	r3, r5
			  datatosend[++i] = '-';
 8001446:	262d      	movs	r6, #45	; 0x2d
			  encdata.target_cur = ~(encdata.target_cur - 1);
 8001448:	b21d      	sxth	r5, r3
 800144a:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
 800144e:	e640      	b.n	80010d2 <StartenchallTask+0x17a>
  }
}
 8001450:	b023      	add	sp, #140	; 0x8c
 8001452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  conresdata.feedback_cd = ~(conresdata.feedback_cd - 1);
 8001456:	4249      	negs	r1, r1
				  datatosend[++i] = '-';
 8001458:	222d      	movs	r2, #45	; 0x2d
				  conresdata.feedback_cd = ~(conresdata.feedback_cd - 1);
 800145a:	b209      	sxth	r1, r1
 800145c:	f8ad 101e 	strh.w	r1, [sp, #30]
 8001460:	e6dc      	b.n	800121c <StartenchallTask+0x2c4>
				  conresdata.feedback_cq = ~(conresdata.feedback_cq - 1);
 8001462:	426b      	negs	r3, r5
				  datatosend[++i] = '-';
 8001464:	262d      	movs	r6, #45	; 0x2d
				  conresdata.feedback_cq = ~(conresdata.feedback_cq - 1);
 8001466:	b21d      	sxth	r5, r3
 8001468:	f8ad 501c 	strh.w	r5, [sp, #28]
 800146c:	e684      	b.n	8001178 <StartenchallTask+0x220>
 800146e:	bf00      	nop
 8001470:	66666667 	.word	0x66666667

08001474 <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001474:	4b32      	ldr	r3, [pc, #200]	; (8001540 <MX_DFSDM1_Init+0xcc>)
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <MX_DFSDM1_Init+0xd0>)
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8001478:	4618      	mov	r0, r3
{
 800147a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800147e:	2400      	movs	r4, #0
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001480:	2501      	movs	r5, #1
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 8001482:	2602      	movs	r6, #2
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001484:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 8001488:	f44f 7780 	mov.w	r7, #256	; 0x100
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800148c:	721d      	strb	r5, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800148e:	725d      	strb	r5, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001490:	f8c3 801c 	str.w	r8, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 8001494:	621f      	str	r7, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 8001496:	625e      	str	r6, [r3, #36]	; 0x24
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001498:	e883 0014 	stmia.w	r3, {r2, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 800149c:	f001 f9f6 	bl	800288c <HAL_DFSDM_FilterInit>

  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80014a0:	4b29      	ldr	r3, [pc, #164]	; (8001548 <MX_DFSDM1_Init+0xd4>)
 80014a2:	4a2a      	ldr	r2, [pc, #168]	; (800154c <MX_DFSDM1_Init+0xd8>)
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80014a4:	4618      	mov	r0, r3
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80014a6:	f8c3 801c 	str.w	r8, [r3, #28]
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80014aa:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80014ac:	605c      	str	r4, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80014ae:	721d      	strb	r5, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80014b0:	725d      	strb	r5, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
 80014b2:	621f      	str	r7, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
 80014b4:	625e      	str	r6, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80014b6:	f001 f9e9 	bl	800288c <HAL_DFSDM_FilterInit>

  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014bc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80014c0:	4924      	ldr	r1, [pc, #144]	; (8001554 <MX_DFSDM1_Init+0xe0>)
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
  hdfsdm1_channel0.Init.Offset = 0;
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80014c2:	4618      	mov	r0, r3
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80014c4:	60de      	str	r6, [r3, #12]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80014c6:	711c      	strb	r4, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80014c8:	609c      	str	r4, [r3, #8]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80014ca:	611c      	str	r4, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80014cc:	615c      	str	r4, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80014ce:	619c      	str	r4, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80014d0:	61dc      	str	r4, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80014d2:	621c      	str	r4, [r3, #32]
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80014d4:	629d      	str	r5, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80014d6:	62dc      	str	r4, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80014d8:	631c      	str	r4, [r3, #48]	; 0x30
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80014da:	6019      	str	r1, [r3, #0]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80014de:	f001 f90b 	bl	80026f8 <HAL_DFSDM_ChannelInit>
 80014e2:	bb38      	cbnz	r0, 8001534 <MX_DFSDM1_Init+0xc0>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_DFSDM1_Init+0xe4>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 80014e6:	2200      	movs	r2, #0
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 80014e8:	2502      	movs	r5, #2
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80014ea:	4e1c      	ldr	r6, [pc, #112]	; (800155c <MX_DFSDM1_Init+0xe8>)
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014ec:	f44f 0440 	mov.w	r4, #12582912	; 0xc00000
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80014f0:	2101      	movs	r1, #1
  hdfsdm1_channel3.Init.Offset = 0;
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 80014f2:	4618      	mov	r0, r3
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80014f4:	601e      	str	r6, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 80014f6:	60dd      	str	r5, [r3, #12]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014f8:	625c      	str	r4, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80014fa:	6299      	str	r1, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 80014fc:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80014fe:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001500:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001502:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001504:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001506:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001508:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Offset = 0;
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 800150e:	f001 f8f3 	bl	80026f8 <HAL_DFSDM_ChannelInit>
 8001512:	b118      	cbz	r0, 800151c <MX_DFSDM1_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001514:	217a      	movs	r1, #122	; 0x7a
 8001516:	4812      	ldr	r0, [pc, #72]	; (8001560 <MX_DFSDM1_Init+0xec>)
 8001518:	f000 fbba 	bl	8001c90 <_Error_Handler>
  }

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 800151c:	2201      	movs	r2, #1
 800151e:	4808      	ldr	r0, [pc, #32]	; (8001540 <MX_DFSDM1_Init+0xcc>)
 8001520:	4611      	mov	r1, r2
 8001522:	f001 fa29 	bl	8002978 <HAL_DFSDM_FilterConfigRegChannel>

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 8001526:	2201      	movs	r2, #1
 8001528:	490e      	ldr	r1, [pc, #56]	; (8001564 <MX_DFSDM1_Init+0xf0>)
 800152a:	4807      	ldr	r0, [pc, #28]	; (8001548 <MX_DFSDM1_Init+0xd4>)

}
 800152c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 8001530:	f001 ba22 	b.w	8002978 <HAL_DFSDM_FilterConfigRegChannel>
    _Error_Handler(__FILE__, __LINE__);
 8001534:	2168      	movs	r1, #104	; 0x68
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <MX_DFSDM1_Init+0xec>)
 8001538:	f000 fbaa 	bl	8001c90 <_Error_Handler>
 800153c:	e7d2      	b.n	80014e4 <MX_DFSDM1_Init+0x70>
 800153e:	bf00      	nop
 8001540:	20003dd4 	.word	0x20003dd4
 8001544:	40017500 	.word	0x40017500
 8001548:	20003f20 	.word	0x20003f20
 800154c:	40017580 	.word	0x40017580
 8001550:	20003f74 	.word	0x20003f74
 8001554:	40017400 	.word	0x40017400
 8001558:	20003e28 	.word	0x20003e28
 800155c:	40017460 	.word	0x40017460
 8001560:	080080d8 	.word	0x080080d8
 8001564:	00030008 	.word	0x00030008

08001568 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 800156a:	4c46      	ldr	r4, [pc, #280]	; (8001684 <HAL_DFSDM_FilterMspInit+0x11c>)
{
 800156c:	b087      	sub	sp, #28
 800156e:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	bb03      	cbnz	r3, 80015b6 <HAL_DFSDM_FilterMspInit+0x4e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001574:	4a44      	ldr	r2, [pc, #272]	; (8001688 <HAL_DFSDM_FilterMspInit+0x120>)
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800157a:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800157c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800157e:	d023      	beq.n	80015c8 <HAL_DFSDM_FilterMspInit+0x60>
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001582:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001584:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001588:	a901      	add	r1, sp, #4
 800158a:	4840      	ldr	r0, [pc, #256]	; (800168c <HAL_DFSDM_FilterMspInit+0x124>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800158c:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800158e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001596:	f001 fc61 	bl	8002e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800159a:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800159c:	2218      	movs	r2, #24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159e:	a901      	add	r1, sp, #4
 80015a0:	483b      	ldr	r0, [pc, #236]	; (8001690 <HAL_DFSDM_FilterMspInit+0x128>)
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015a2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80015aa:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ac:	f001 fc56 	bl	8002e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80015b6:	682b      	ldr	r3, [r5, #0]
 80015b8:	4a36      	ldr	r2, [pc, #216]	; (8001694 <HAL_DFSDM_FilterMspInit+0x12c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d034      	beq.n	8001628 <HAL_DFSDM_FilterMspInit+0xc0>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 80015be:	4a36      	ldr	r2, [pc, #216]	; (8001698 <HAL_DFSDM_FilterMspInit+0x130>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d00c      	beq.n	80015de <HAL_DFSDM_FilterMspInit+0x76>
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
  }

}
 80015c4:	b007      	add	sp, #28
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015c8:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_DFSDM_FilterMspInit+0x134>)
 80015ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015cc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	9b00      	ldr	r3, [sp, #0]
 80015dc:	e7d0      	b.n	8001580 <HAL_DFSDM_FilterMspInit+0x18>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80015de:	f502 426e 	add.w	r2, r2, #60928	; 0xee00
 80015e2:	4c2f      	ldr	r4, [pc, #188]	; (80016a0 <HAL_DFSDM_FilterMspInit+0x138>)
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80015e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80015e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80015ec:	32a8      	adds	r2, #168	; 0xa8
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ee:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015f2:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80015f6:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80015fa:	6022      	str	r2, [r4, #0]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8001600:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001602:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001604:	6120      	str	r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001606:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001608:	6167      	str	r7, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800160a:	61a6      	str	r6, [r4, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800160c:	61e1      	str	r1, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800160e:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001610:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001612:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001614:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001616:	f001 fa57 	bl	8002ac8 <HAL_DMA_Init>
 800161a:	2800      	cmp	r0, #0
 800161c:	d12d      	bne.n	800167a <HAL_DFSDM_FilterMspInit+0x112>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 800161e:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8001620:	62ac      	str	r4, [r5, #40]	; 0x28
 8001622:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8001624:	b007      	add	sp, #28
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001628:	f502 426f 	add.w	r2, r2, #61184	; 0xef00
 800162c:	4c1d      	ldr	r4, [pc, #116]	; (80016a4 <HAL_DFSDM_FilterMspInit+0x13c>)
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800162e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001632:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001636:	3210      	adds	r2, #16
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001638:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800163c:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001640:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001644:	6022      	str	r2, [r4, #0]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800164a:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164c:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800164e:	6120      	str	r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001650:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001652:	6167      	str	r7, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001654:	61a6      	str	r6, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001656:	61e1      	str	r1, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001658:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165a:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800165c:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001660:	f001 fa32 	bl	8002ac8 <HAL_DMA_Init>
 8001664:	b920      	cbnz	r0, 8001670 <HAL_DFSDM_FilterMspInit+0x108>
 8001666:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8001668:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800166a:	62ac      	str	r4, [r5, #40]	; 0x28
 800166c:	63a5      	str	r5, [r4, #56]	; 0x38
 800166e:	e7a6      	b.n	80015be <HAL_DFSDM_FilterMspInit+0x56>
      _Error_Handler(__FILE__, __LINE__);
 8001670:	21bf      	movs	r1, #191	; 0xbf
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <HAL_DFSDM_FilterMspInit+0x140>)
 8001674:	f000 fb0c 	bl	8001c90 <_Error_Handler>
 8001678:	e7f5      	b.n	8001666 <HAL_DFSDM_FilterMspInit+0xfe>
      _Error_Handler(__FILE__, __LINE__);
 800167a:	21d6      	movs	r1, #214	; 0xd6
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <HAL_DFSDM_FilterMspInit+0x140>)
 800167e:	f000 fb07 	bl	8001c90 <_Error_Handler>
 8001682:	e7cc      	b.n	800161e <HAL_DFSDM_FilterMspInit+0xb6>
 8001684:	2000004c 	.word	0x2000004c
 8001688:	20000050 	.word	0x20000050
 800168c:	40021000 	.word	0x40021000
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40017500 	.word	0x40017500
 8001698:	40017580 	.word	0x40017580
 800169c:	40023800 	.word	0x40023800
 80016a0:	20003e60 	.word	0x20003e60
 80016a4:	20003ec0 	.word	0x20003ec0
 80016a8:	080080d8 	.word	0x080080d8

080016ac <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80016ac:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 80016ae:	4c19      	ldr	r4, [pc, #100]	; (8001714 <HAL_DFSDM_ChannelMspInit+0x68>)
{
 80016b0:	b086      	sub	sp, #24
  if(DFSDM1_Init == 0)
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	bb03      	cbnz	r3, 80016f8 <HAL_DFSDM_ChannelMspInit+0x4c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <HAL_DFSDM_ChannelMspInit+0x6c>)
 80016b8:	6813      	ldr	r3, [r2, #0]
 80016ba:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016bc:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016c0:	d01c      	beq.n	80016fc <HAL_DFSDM_ChannelMspInit+0x50>
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016c4:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80016c6:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ca:	a901      	add	r1, sp, #4
 80016cc:	4813      	ldr	r0, [pc, #76]	; (800171c <HAL_DFSDM_ChannelMspInit+0x70>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016ce:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80016d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d8:	f001 fbc0 	bl	8002e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016dc:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80016de:	2218      	movs	r2, #24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e0:	a901      	add	r1, sp, #4
 80016e2:	480f      	ldr	r0, [pc, #60]	; (8001720 <HAL_DFSDM_ChannelMspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80016ec:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	f001 fbb5 	bl	8002e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	3301      	adds	r3, #1
 80016f6:	6023      	str	r3, [r4, #0]
  }
}
 80016f8:	b006      	add	sp, #24
 80016fa:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_DFSDM_ChannelMspInit+0x78>)
 80016fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001700:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001704:	645a      	str	r2, [r3, #68]	; 0x44
 8001706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	9b00      	ldr	r3, [sp, #0]
 8001710:	e7d7      	b.n	80016c2 <HAL_DFSDM_ChannelMspInit+0x16>
 8001712:	bf00      	nop
 8001714:	2000004c 	.word	0x2000004c
 8001718:	20000050 	.word	0x20000050
 800171c:	40021000 	.word	0x40021000
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40023800 	.word	0x40023800

08001728 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_DMA_Init+0x70>)
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2105      	movs	r1, #5
 800172e:	200d      	movs	r0, #13
{
 8001730:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001732:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 8001734:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001736:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 800173a:	631c      	str	r4, [r3, #48]	; 0x30
 800173c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800173e:	f404 0480 	and.w	r4, r4, #4194304	; 0x400000
 8001742:	9400      	str	r4, [sp, #0]
 8001744:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001746:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001748:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 800174c:	631c      	str	r4, [r3, #48]	; 0x30
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001758:	f000 ff64 	bl	8002624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800175c:	200d      	movs	r0, #13
 800175e:	f000 ff9b 	bl	8002698 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2105      	movs	r1, #5
 8001766:	2038      	movs	r0, #56	; 0x38
 8001768:	f000 ff5c 	bl	8002624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800176c:	2038      	movs	r0, #56	; 0x38
 800176e:	f000 ff93 	bl	8002698 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2105      	movs	r1, #5
 8001776:	2039      	movs	r0, #57	; 0x39
 8001778:	f000 ff54 	bl	8002624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800177c:	2039      	movs	r0, #57	; 0x39
 800177e:	f000 ff8b 	bl	8002698 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2105      	movs	r1, #5
 8001786:	203a      	movs	r0, #58	; 0x3a
 8001788:	f000 ff4c 	bl	8002624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800178c:	203a      	movs	r0, #58	; 0x3a
 800178e:	f000 ff83 	bl	8002698 <HAL_NVIC_EnableIRQ>

}
 8001792:	b002      	add	sp, #8
 8001794:	bd10      	pop	{r4, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	b0af      	sub	sp, #188	; 0xbc
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of buzzerMutex */
  osMutexDef(buzzerMutex);
 80017a0:	2500      	movs	r5, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of enchallTask */
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 80017a2:	4c52      	ldr	r4, [pc, #328]	; (80018ec <MX_FREERTOS_Init+0x150>)
  osMutexDef(buzzerMutex);
 80017a4:	a82e      	add	r0, sp, #184	; 0xb8
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 80017a6:	ae0b      	add	r6, sp, #44	; 0x2c
 80017a8:	4627      	mov	r7, r4
  osMutexDef(buzzerMutex);
 80017aa:	f840 5db8 	str.w	r5, [r0, #-184]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 80017ae:	f004 f92b 	bl	8005a08 <osMutexCreate>
 80017b2:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <MX_FREERTOS_Init+0x154>)
 80017b4:	6018      	str	r0, [r3, #0]
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 80017b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80017b8:	683f      	ldr	r7, [r7, #0]
 80017ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80017bc:	4629      	mov	r1, r5
 80017be:	a80b      	add	r0, sp, #44	; 0x2c
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 80017c0:	6037      	str	r7, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80017c2:	f004 f901 	bl	80059c8 <osThreadCreate>

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 80017c6:	f104 0714 	add.w	r7, r4, #20
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80017ca:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <MX_FREERTOS_Init+0x158>)
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 80017cc:	ae10      	add	r6, sp, #64	; 0x40
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80017ce:	6018      	str	r0, [r3, #0]
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 80017d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80017d2:	683f      	ldr	r7, [r7, #0]
 80017d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80017d6:	4629      	mov	r1, r5
 80017d8:	a810      	add	r0, sp, #64	; 0x40
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 80017da:	6037      	str	r7, [r6, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80017dc:	f004 f8f4 	bl	80059c8 <osThreadCreate>

  /* definition and creation of ledblueTask */
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 80017e0:	f104 0728 	add.w	r7, r4, #40	; 0x28
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <MX_FREERTOS_Init+0x15c>)
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 80017e6:	ae15      	add	r6, sp, #84	; 0x54
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80017e8:	6018      	str	r0, [r3, #0]
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 80017ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80017ec:	683f      	ldr	r7, [r7, #0]
 80017ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 80017f0:	4629      	mov	r1, r5
 80017f2:	a815      	add	r0, sp, #84	; 0x54
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 80017f4:	6037      	str	r7, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 80017f6:	f004 f8e7 	bl	80059c8 <osThreadCreate>

  /* definition and creation of ledgreenTask */
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 80017fa:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <MX_FREERTOS_Init+0x160>)
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8001800:	ae1a      	add	r6, sp, #104	; 0x68
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8001802:	6018      	str	r0, [r3, #0]
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8001804:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001806:	683f      	ldr	r7, [r7, #0]
 8001808:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 800180a:	4629      	mov	r1, r5
 800180c:	a81a      	add	r0, sp, #104	; 0x68
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 800180e:	6037      	str	r7, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8001810:	f004 f8da 	bl	80059c8 <osThreadCreate>

  /* definition and creation of iwdgTask */
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8001814:	f104 0750 	add.w	r7, r4, #80	; 0x50
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8001818:	4b39      	ldr	r3, [pc, #228]	; (8001900 <MX_FREERTOS_Init+0x164>)
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 800181a:	ae1f      	add	r6, sp, #124	; 0x7c
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 800181c:	6018      	str	r0, [r3, #0]
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 800181e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001820:	683f      	ldr	r7, [r7, #0]
 8001822:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8001824:	4629      	mov	r1, r5
 8001826:	a81f      	add	r0, sp, #124	; 0x7c
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8001828:	6037      	str	r7, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 800182a:	f004 f8cd 	bl	80059c8 <osThreadCreate>

  /* definition and creation of buzzertoneTask */
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 800182e:	f104 0764 	add.w	r7, r4, #100	; 0x64
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <MX_FREERTOS_Init+0x168>)
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8001834:	ae24      	add	r6, sp, #144	; 0x90
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8001836:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8001838:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800183a:	683f      	ldr	r7, [r7, #0]
 800183c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 800183e:	4629      	mov	r1, r5
 8001840:	a824      	add	r0, sp, #144	; 0x90
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8001842:	6037      	str	r7, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8001844:	f004 f8c0 	bl	80059c8 <osThreadCreate>

  /* definition and creation of buzzerrythmTask */
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8001848:	f104 0778 	add.w	r7, r4, #120	; 0x78
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <MX_FREERTOS_Init+0x16c>)
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 800184e:	ae29      	add	r6, sp, #164	; 0xa4
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8001850:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8001852:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001854:	683f      	ldr	r7, [r7, #0]
 8001856:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8001858:	4629      	mov	r1, r5
 800185a:	a829      	add	r0, sp, #164	; 0xa4
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 800185c:	6037      	str	r7, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 800185e:	f004 f8b3 	bl	80059c8 <osThreadCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of buzzerQueue */
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8001862:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8001866:	4929      	ldr	r1, [pc, #164]	; (800190c <MX_FREERTOS_Init+0x170>)
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8001868:	ab01      	add	r3, sp, #4
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 800186a:	6008      	str	r0, [r1, #0]
  osMessageQDef(buzzerQueue, 1, uint16_t);
 800186c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001870:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8001874:	4629      	mov	r1, r5
 8001876:	4618      	mov	r0, r3
 8001878:	f004 f8ca 	bl	8005a10 <osMessageCreate>

  /* definition and creation of rythmQueue */
  osMessageQDef(rythmQueue, 32, uint16_t);
 800187c:	f104 0294 	add.w	r2, r4, #148	; 0x94
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8001880:	4923      	ldr	r1, [pc, #140]	; (8001910 <MX_FREERTOS_Init+0x174>)
  osMessageQDef(rythmQueue, 32, uint16_t);
 8001882:	ab03      	add	r3, sp, #12
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8001884:	6008      	str	r0, [r1, #0]
  osMessageQDef(rythmQueue, 32, uint16_t);
 8001886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800188a:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 800188e:	4629      	mov	r1, r5
 8001890:	4618      	mov	r0, r3
 8001892:	f004 f8bd 	bl	8005a10 <osMessageCreate>

  /* definition and creation of enchallQueue */
  osMessageQDef(enchallQueue, 1, ENCHD);
 8001896:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 800189a:	491e      	ldr	r1, [pc, #120]	; (8001914 <MX_FREERTOS_Init+0x178>)
  osMessageQDef(enchallQueue, 1, ENCHD);
 800189c:	ab05      	add	r3, sp, #20
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 800189e:	6008      	str	r0, [r1, #0]
  osMessageQDef(enchallQueue, 1, ENCHD);
 80018a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a4:	e883 0003 	stmia.w	r3, {r0, r1}
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 80018a8:	4629      	mov	r1, r5
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 f8b0 	bl	8005a10 <osMessageCreate>

  /* definition and creation of shuntQueue */
  osMessageQDef(shuntQueue, 1, CURDATA);
 80018b0:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 80018b4:	4918      	ldr	r1, [pc, #96]	; (8001918 <MX_FREERTOS_Init+0x17c>)
  osMessageQDef(shuntQueue, 1, CURDATA);
 80018b6:	ab07      	add	r3, sp, #28
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);

  /* definition and creation of conresQueue */
  osMessageQDef(conresQueue, 1, CONRES);
 80018b8:	34ac      	adds	r4, #172	; 0xac
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 80018ba:	6008      	str	r0, [r1, #0]
  osMessageQDef(shuntQueue, 1, CURDATA);
 80018bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c0:	e883 0003 	stmia.w	r3, {r0, r1}
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 80018c4:	4629      	mov	r1, r5
 80018c6:	4618      	mov	r0, r3
 80018c8:	f004 f8a2 	bl	8005a10 <osMessageCreate>
 80018cc:	4a13      	ldr	r2, [pc, #76]	; (800191c <MX_FREERTOS_Init+0x180>)
  osMessageQDef(conresQueue, 1, CONRES);
 80018ce:	ab09      	add	r3, sp, #36	; 0x24
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 80018d0:	6010      	str	r0, [r2, #0]
  osMessageQDef(conresQueue, 1, CONRES);
 80018d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018d6:	e883 0003 	stmia.w	r3, {r0, r1}
  conresQueueHandle = osMessageCreate(osMessageQ(conresQueue), NULL);
 80018da:	4629      	mov	r1, r5
 80018dc:	4618      	mov	r0, r3
 80018de:	f004 f897 	bl	8005a10 <osMessageCreate>
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_FREERTOS_Init+0x184>)
 80018e4:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  /* USER CODE END RTOS_QUEUES */
}
 80018e6:	b02f      	add	sp, #188	; 0xbc
 80018e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	08008008 	.word	0x08008008
 80018f0:	20003fc0 	.word	0x20003fc0
 80018f4:	20003fbc 	.word	0x20003fbc
 80018f8:	20003fc8 	.word	0x20003fc8
 80018fc:	20003fd0 	.word	0x20003fd0
 8001900:	20003fcc 	.word	0x20003fcc
 8001904:	20003fd8 	.word	0x20003fd8
 8001908:	20003fb0 	.word	0x20003fb0
 800190c:	20003fdc 	.word	0x20003fdc
 8001910:	20003fb4 	.word	0x20003fb4
 8001914:	20003fb8 	.word	0x20003fb8
 8001918:	20003fc4 	.word	0x20003fc4
 800191c:	20003fd4 	.word	0x20003fd4
 8001920:	20003fac 	.word	0x20003fac

08001924 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001924:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	210c      	movs	r1, #12
{
 800192a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800192e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 8001930:	b08c      	sub	sp, #48	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001932:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8001a14 <MX_GPIO_Init+0xf0>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	4615      	mov	r5, r2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001938:	f044 0410 	orr.w	r4, r4, #16
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800193c:	4f33      	ldr	r7, [pc, #204]	; (8001a0c <MX_GPIO_Init+0xe8>)
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 800193e:	4640      	mov	r0, r8
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8001940:	4e33      	ldr	r6, [pc, #204]	; (8001a10 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	631c      	str	r4, [r3, #48]	; 0x30
 8001944:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001946:	f004 0410 	and.w	r4, r4, #16
 800194a:	9401      	str	r4, [sp, #4]
 800194c:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800194e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001950:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001954:	631c      	str	r4, [r3, #48]	; 0x30
 8001956:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001958:	f004 0480 	and.w	r4, r4, #128	; 0x80
 800195c:	9402      	str	r4, [sp, #8]
 800195e:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001960:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001962:	f044 0404 	orr.w	r4, r4, #4
 8001966:	631c      	str	r4, [r3, #48]	; 0x30
 8001968:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800196a:	f004 0404 	and.w	r4, r4, #4
 800196e:	9403      	str	r4, [sp, #12]
 8001970:	9c03      	ldr	r4, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001974:	f044 0401 	orr.w	r4, r4, #1
 8001978:	631c      	str	r4, [r3, #48]	; 0x30
 800197a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800197c:	f004 0401 	and.w	r4, r4, #1
 8001980:	9404      	str	r4, [sp, #16]
 8001982:	9c04      	ldr	r4, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001986:	f044 0402 	orr.w	r4, r4, #2
 800198a:	631c      	str	r4, [r3, #48]	; 0x30
 800198c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800198e:	f004 0402 	and.w	r4, r4, #2
 8001992:	9405      	str	r4, [sp, #20]
 8001994:	9c05      	ldr	r4, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001996:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001998:	f044 0408 	orr.w	r4, r4, #8
 800199c:	631c      	str	r4, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2401      	movs	r4, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	9306      	str	r3, [sp, #24]
 80019a8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 80019aa:	f001 fb81 	bl	80030b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80019ae:	4638      	mov	r0, r7
 80019b0:	462a      	mov	r2, r5
 80019b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b6:	f001 fb7b 	bl	80030b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 80019ba:	4630      	mov	r0, r6
 80019bc:	462a      	mov	r2, r5
 80019be:	2140      	movs	r1, #64	; 0x40
 80019c0:	f001 fb76 	bl	80030b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 80019c4:	220c      	movs	r2, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019c6:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c8:	4640      	mov	r0, r8
 80019ca:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 80019cc:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019ce:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d4:	f001 fa42 	bl	8002e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019dc:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019de:	4638      	mov	r0, r7
 80019e0:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019e2:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019e4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	f001 fa37 	bl	8002e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 80019ee:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 80019f0:	a907      	add	r1, sp, #28
 80019f2:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80019f8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = IMUCS_Pin;
 80019fa:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f001 fa2e 	bl	8002e5c <HAL_GPIO_Init>

}
 8001a00:	b00c      	add	sp, #48	; 0x30
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40021000 	.word	0x40021000

08001a18 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001a18:	b538      	push	{r3, r4, r5, lr}

  hi2c4.Instance = I2C4;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_I2C4_Init+0x5c>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
 8001a1c:	2200      	movs	r2, #0
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1e:	2101      	movs	r1, #1
  hi2c4.Instance = I2C4;
 8001a20:	4d15      	ldr	r5, [pc, #84]	; (8001a78 <MX_I2C4_Init+0x60>)
  hi2c4.Init.Timing = 0x20404768;
 8001a22:	4c16      	ldr	r4, [pc, #88]	; (8001a7c <MX_I2C4_Init+0x64>)
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a24:	4618      	mov	r0, r3
  hi2c4.Instance = I2C4;
 8001a26:	601d      	str	r5, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001a28:	605c      	str	r4, [r3, #4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a2a:	60d9      	str	r1, [r3, #12]
  hi2c4.Init.OwnAddress1 = 0;
 8001a2c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a2e:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001a30:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a32:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a38:	f001 fb42 	bl	80030c0 <HAL_I2C_Init>
 8001a3c:	b9a8      	cbnz	r0, 8001a6a <MX_I2C4_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_I2C4_Init+0x5c>)
 8001a42:	f001 fb93 	bl	800316c <HAL_I2CEx_ConfigAnalogFilter>
 8001a46:	b958      	cbnz	r0, 8001a60 <MX_I2C4_Init+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	480a      	ldr	r0, [pc, #40]	; (8001a74 <MX_I2C4_Init+0x5c>)
 8001a4c:	f001 fbb6 	bl	80031bc <HAL_I2CEx_ConfigDigitalFilter>
 8001a50:	b900      	cbnz	r0, 8001a54 <MX_I2C4_Init+0x3c>
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a54:	215a      	movs	r1, #90	; 0x5a
 8001a56:	480a      	ldr	r0, [pc, #40]	; (8001a80 <MX_I2C4_Init+0x68>)
  }

}
 8001a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001a5c:	f000 b918 	b.w	8001c90 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001a60:	2153      	movs	r1, #83	; 0x53
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <MX_I2C4_Init+0x68>)
 8001a64:	f000 f914 	bl	8001c90 <_Error_Handler>
 8001a68:	e7ee      	b.n	8001a48 <MX_I2C4_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8001a6a:	214c      	movs	r1, #76	; 0x4c
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_I2C4_Init+0x68>)
 8001a6e:	f000 f90f 	bl	8001c90 <_Error_Handler>
 8001a72:	e7e4      	b.n	8001a3e <MX_I2C4_Init+0x26>
 8001a74:	20003fe0 	.word	0x20003fe0
 8001a78:	40006000 	.word	0x40006000
 8001a7c:	20404768 	.word	0x20404768
 8001a80:	08008150 	.word	0x08008150

08001a84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C4)
 8001a84:	6802      	ldr	r2, [r0, #0]
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_I2C_MspInit+0x48>)
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d000      	beq.n	8001a8e <HAL_I2C_MspInit+0xa>
 8001a8c:	4770      	bx	lr
{
 8001a8e:	b570      	push	{r4, r5, r6, lr}
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001a90:	2304      	movs	r3, #4
{
 8001a92:	b086      	sub	sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a96:	f44f 5640 	mov.w	r6, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9a:	2512      	movs	r5, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9c:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9e:	eb0d 0103 	add.w	r1, sp, r3
 8001aa2:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001aa6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001aa8:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aaa:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aac:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aae:	f001 f9d5 	bl	8002e5c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_I2C_MspInit+0x50>)
 8001ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001ac6:	b006      	add	sp, #24
 8001ac8:	bd70      	pop	{r4, r5, r6, pc}
 8001aca:	bf00      	nop
 8001acc:	40006000 	.word	0x40006000
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	4a34      	ldr	r2, [pc, #208]	; (8001bac <SystemClock_Config+0xd4>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001ada:	21d8      	movs	r1, #216	; 0xd8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001adc:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <SystemClock_Config+0xd8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001ae0:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
{
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	6410      	str	r0, [r2, #64]	; 0x40
{
 8001ae8:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	6c12      	ldr	r2, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aec:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001aee:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af0:	2601      	movs	r6, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af6:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001afa:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afe:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	9200      	str	r2, [sp, #0]
 8001b02:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b0e:	9607      	str	r6, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b14:	f8cd e020 	str.w	lr, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b18:	950d      	str	r5, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b1e:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b20:	970e      	str	r7, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b22:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b24:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b26:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b28:	f001 fdde 	bl	80036e8 <HAL_RCC_OscConfig>
 8001b2c:	b100      	cbz	r0, 8001b30 <SystemClock_Config+0x58>
 8001b2e:	e7fe      	b.n	8001b2e <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b30:	f001 fd9e 	bl	8003670 <HAL_PWREx_EnableOverDrive>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b100      	cbz	r0, 8001b3a <SystemClock_Config+0x62>
 8001b38:	e7fe      	b.n	8001b38 <SystemClock_Config+0x60>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b3a:	f44f 5ea0 	mov.w	lr, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b42:	270f      	movs	r7, #15

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001b44:	2107      	movs	r1, #7
 8001b46:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b48:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4a:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4c:	9702      	str	r7, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b4e:	f8cd e014 	str.w	lr, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b52:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001b54:	f001 ffa0 	bl	8003a98 <HAL_RCC_ClockConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b100      	cbz	r0, 8001b5e <SystemClock_Config+0x86>
 8001b5c:	e7fe      	b.n	8001b5c <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8001b5e:	f8df e058 	ldr.w	lr, [pc, #88]	; 8001bb8 <SystemClock_Config+0xe0>
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001b62:	2510      	movs	r5, #16
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001b64:	2140      	movs	r1, #64	; 0x40
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8001b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b6a:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001b6c:	9527      	str	r5, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001b6e:	9625      	str	r6, [sp, #148]	; 0x94
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001b70:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b72:	9336      	str	r3, [sp, #216]	; 0xd8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8001b74:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001b78:	9128      	str	r1, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8001b7a:	922c      	str	r2, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7c:	f002 f8b2 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001b80:	4605      	mov	r5, r0
 8001b82:	b100      	cbz	r0, 8001b86 <SystemClock_Config+0xae>
 8001b84:	e7fe      	b.n	8001b84 <SystemClock_Config+0xac>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001b86:	f002 f865 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <SystemClock_Config+0xdc>)
 8001b8c:	fba3 3000 	umull	r3, r0, r3, r0
 8001b90:	0980      	lsrs	r0, r0, #6
 8001b92:	f000 fd8d 	bl	80026b0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b96:	4620      	mov	r0, r4
 8001b98:	f000 fda2 	bl	80026e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001b9c:	462a      	mov	r2, r5
 8001b9e:	4639      	mov	r1, r7
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 fd3e 	bl	8002624 <HAL_NVIC_SetPriority>
}
 8001ba8:	b039      	add	sp, #228	; 0xe4
 8001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	10624dd3 	.word	0x10624dd3
 8001bb8:	08022340 	.word	0x08022340

08001bbc <main>:
{
 8001bbc:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001bc2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bc6:	482c      	ldr	r0, [pc, #176]	; (8001c78 <main+0xbc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bce:	6943      	ldr	r3, [r0, #20]
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001bda:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8001bde:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001be2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001be6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8001bea:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
 8001bee:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001bf2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001bf6:	07b7      	lsls	r7, r6, #30
 8001bf8:	015d      	lsls	r5, r3, #5
 8001bfa:	ea05 040e 	and.w	r4, r5, lr
 8001bfe:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c00:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c02:	ea44 0301 	orr.w	r3, r4, r1
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8001c06:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c08:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8001c0c:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways--);
 8001c10:	1c53      	adds	r3, r2, #1
 8001c12:	d1f6      	bne.n	8001c02 <main+0x46>
 8001c14:	3d20      	subs	r5, #32
    } while(sets--);
 8001c16:	f115 0f20 	cmn.w	r5, #32
 8001c1a:	d1ee      	bne.n	8001bfa <main+0x3e>
 8001c1c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001c20:	6943      	ldr	r3, [r0, #20]
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c26:	6143      	str	r3, [r0, #20]
 8001c28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c2c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001c30:	f000 fcb6 	bl	80025a0 <HAL_Init>
  SystemClock_Config();
 8001c34:	f7ff ff50 	bl	8001ad8 <SystemClock_Config>
  MX_GPIO_Init();
 8001c38:	f7ff fe74 	bl	8001924 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c3c:	f7ff fd74 	bl	8001728 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8001c40:	f7ff fc18 	bl	8001474 <MX_DFSDM1_Init>
  MX_I2C4_Init();
 8001c44:	f7ff fee8 	bl	8001a18 <MX_I2C4_Init>
  MX_SPI1_Init();
 8001c48:	f000 f824 	bl	8001c94 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001c4c:	f000 f920 	bl	8001e90 <MX_TIM1_Init>
  MX_UART4_Init();
 8001c50:	f000 fa98 	bl	8002184 <MX_UART4_Init>
  MX_UART8_Init();
 8001c54:	f000 fac0 	bl	80021d8 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001c58:	f000 fae4 	bl	8002224 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c5c:	f000 fb08 	bl	8002270 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8001c60:	f000 fc0a 	bl	8002478 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8001c64:	f000 f9dc 	bl	8002020 <MX_TIM2_Init>
  SystemInitialization();
 8001c68:	f7ff f936 	bl	8000ed8 <SystemInitialization>
  MX_FREERTOS_Init();
 8001c6c:	f7ff fd96 	bl	800179c <MX_FREERTOS_Init>
  osKernelStart();
 8001c70:	f003 fea4 	bl	80059bc <osKernelStart>
 8001c74:	e7fe      	b.n	8001c74 <main+0xb8>
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001c7c:	6802      	ldr	r2, [r0, #0]
 8001c7e:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d000      	beq.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001c84:	4770      	bx	lr
    HAL_IncTick();
 8001c86:	f000 bc9d 	b.w	80025c4 <HAL_IncTick>
 8001c8a:	bf00      	nop
 8001c8c:	40000800 	.word	0x40000800

08001c90 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001c90:	e7fe      	b.n	8001c90 <_Error_Handler>
 8001c92:	bf00      	nop

08001c94 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hspi1.Instance = SPI1;
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c98:	f44f 7082 	mov.w	r0, #260	; 0x104
  hspi1.Instance = SPI1;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_SPI1_Init+0x50>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c9e:	f44f 67e0 	mov.w	r7, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca2:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ca6:	2530      	movs	r5, #48	; 0x30
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001ca8:	2407      	movs	r4, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001caa:	2108      	movs	r1, #8
  hspi1.Instance = SPI1;
 8001cac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cae:	2200      	movs	r2, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cb0:	6058      	str	r0, [r3, #4]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cb2:	4618      	mov	r0, r3
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb4:	60df      	str	r7, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cb6:	619e      	str	r6, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001cb8:	61dd      	str	r5, [r3, #28]
  hspi1.Init.CRCPolynomial = 7;
 8001cba:	62dc      	str	r4, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cbc:	6359      	str	r1, [r3, #52]	; 0x34
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc2:	615a      	str	r2, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ccc:	f002 faaa 	bl	8004224 <HAL_SPI_Init>
 8001cd0:	b900      	cbnz	r0, 8001cd4 <MX_SPI1_Init+0x40>
 8001cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001cd4:	2151      	movs	r1, #81	; 0x51
 8001cd6:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_SPI1_Init+0x54>)
  }

}
 8001cd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001cdc:	f7ff bfd8 	b.w	8001c90 <_Error_Handler>
 8001ce0:	40013000 	.word	0x40013000
 8001ce4:	2000402c 	.word	0x2000402c
 8001ce8:	08008164 	.word	0x08008164

08001cec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8001cec:	6802      	ldr	r2, [r0, #0]
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_SPI_MspInit+0x58>)
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d000      	beq.n	8001cf6 <HAL_SPI_MspInit+0xa>
 8001cf4:	4770      	bx	lr
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cf6:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    /**SPI1 GPIO Configuration    
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cfa:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 8001d02:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
{
 8001d06:	b087      	sub	sp, #28
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d14:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d16:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d18:	9001      	str	r0, [sp, #4]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d1a:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1c:	480a      	ldr	r0, [pc, #40]	; (8001d48 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d1e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d26:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d28:	f001 f898 	bl	8002e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001d2c:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	a901      	add	r1, sp, #4
 8001d30:	4806      	ldr	r0, [pc, #24]	; (8001d4c <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d38:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001d3a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f001 f88e 	bl	8002e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d40:	b007      	add	sp, #28
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	40013000 	.word	0x40013000
 8001d48:	40020c00 	.word	0x40020c00
 8001d4c:	40020400 	.word	0x40020400

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d52:	2003      	movs	r0, #3
 8001d54:	f000 fc52 	bl	80025fc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f06f 000b 	mvn.w	r0, #11
 8001d5e:	4611      	mov	r1, r2
 8001d60:	f000 fc60 	bl	8002624 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f06f 000a 	mvn.w	r0, #10
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	f000 fc5a 	bl	8002624 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f06f 0009 	mvn.w	r0, #9
 8001d76:	4611      	mov	r1, r2
 8001d78:	f000 fc54 	bl	8002624 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f06f 0004 	mvn.w	r0, #4
 8001d82:	4611      	mov	r1, r2
 8001d84:	f000 fc4e 	bl	8002624 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f06f 0003 	mvn.w	r0, #3
 8001d8e:	4611      	mov	r1, r2
 8001d90:	f000 fc48 	bl	8002624 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	210f      	movs	r1, #15
 8001d98:	f06f 0001 	mvn.w	r0, #1
 8001d9c:	f000 fc42 	bl	8002624 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	210f      	movs	r1, #15
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001dac:	f000 bc3a 	b.w	8002624 <HAL_NVIC_SetPriority>

08001db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001db2:	4601      	mov	r1, r0
{
 8001db4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001db6:	2200      	movs	r2, #0
 8001db8:	201e      	movs	r0, #30
 8001dba:	f000 fc33 	bl	8002624 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001dbe:	201e      	movs	r0, #30
 8001dc0:	f000 fc6a 	bl	8002698 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc6:	a901      	add	r1, sp, #4
 8001dc8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001dcc:	4e14      	ldr	r6, [pc, #80]	; (8001e20 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001dce:	f042 0204 	orr.w	r2, r2, #4
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001dd2:	4c14      	ldr	r4, [pc, #80]	; (8001e24 <HAL_InitTick+0x74>)
 8001dd4:	4d14      	ldr	r5, [pc, #80]	; (8001e28 <HAL_InitTick+0x78>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de2:	f001 ff5d 	bl	8003ca0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001de6:	f001 ff3b 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8001dea:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001dec:	0043      	lsls	r3, r0, #1
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001dee:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim4.Instance = TIM4;
 8001df2:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001df4:	fba6 0303 	umull	r0, r3, r6, r3
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001df8:	4620      	mov	r0, r4
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001dfa:	60e1      	str	r1, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001dfc:	0c9b      	lsrs	r3, r3, #18
  htim4.Init.ClockDivision = 0;
 8001dfe:	6122      	str	r2, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e02:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e04:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001e06:	f002 fa6f 	bl	80042e8 <HAL_TIM_Base_Init>
 8001e0a:	b110      	cbz	r0, 8001e12 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e0c:	2001      	movs	r0, #1
}
 8001e0e:	b008      	add	sp, #32
 8001e10:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim4);
 8001e12:	4620      	mov	r0, r4
 8001e14:	f002 fb0e 	bl	8004434 <HAL_TIM_Base_Start_IT>
}
 8001e18:	b008      	add	sp, #32
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	20004090 	.word	0x20004090
 8001e28:	40000800 	.word	0x40000800

08001e2c <NMI_Handler>:
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001e30:	e7fe      	b.n	8001e30 <HardFault_Handler>
 8001e32:	bf00      	nop

08001e34 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler>
 8001e36:	bf00      	nop

08001e38 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001e38:	e7fe      	b.n	8001e38 <BusFault_Handler>
 8001e3a:	bf00      	nop

08001e3c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001e3c:	e7fe      	b.n	8001e3c <UsageFault_Handler>
 8001e3e:	bf00      	nop

08001e40 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop

08001e44 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001e44:	f003 bde8 	b.w	8005a18 <osSystickHandler>

08001e48 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e48:	4801      	ldr	r0, [pc, #4]	; (8001e50 <DMA1_Stream2_IRQHandler+0x8>)
 8001e4a:	f000 bf33 	b.w	8002cb4 <HAL_DMA_IRQHandler>
 8001e4e:	bf00      	nop
 8001e50:	20004150 	.word	0x20004150

08001e54 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e54:	4801      	ldr	r0, [pc, #4]	; (8001e5c <TIM4_IRQHandler+0x8>)
 8001e56:	f002 bc95 	b.w	8004784 <HAL_TIM_IRQHandler>
 8001e5a:	bf00      	nop
 8001e5c:	20004090 	.word	0x20004090

08001e60 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e60:	4801      	ldr	r0, [pc, #4]	; (8001e68 <UART4_IRQHandler+0x8>)
 8001e62:	f003 b8db 	b.w	800501c <HAL_UART_IRQHandler>
 8001e66:	bf00      	nop
 8001e68:	20004360 	.word	0x20004360

08001e6c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001e6c:	4801      	ldr	r0, [pc, #4]	; (8001e74 <DMA2_Stream0_IRQHandler+0x8>)
 8001e6e:	f000 bf21 	b.w	8002cb4 <HAL_DMA_IRQHandler>
 8001e72:	bf00      	nop
 8001e74:	20003ec0 	.word	0x20003ec0

08001e78 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001e78:	4801      	ldr	r0, [pc, #4]	; (8001e80 <DMA2_Stream1_IRQHandler+0x8>)
 8001e7a:	f000 bf1b 	b.w	8002cb4 <HAL_DMA_IRQHandler>
 8001e7e:	bf00      	nop
 8001e80:	20003e60 	.word	0x20003e60

08001e84 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e84:	4801      	ldr	r0, [pc, #4]	; (8001e8c <DMA2_Stream2_IRQHandler+0x8>)
 8001e86:	f000 bf15 	b.w	8002cb4 <HAL_DMA_IRQHandler>
 8001e8a:	bf00      	nop
 8001e8c:	20004220 	.word	0x20004220

08001e90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8001e92:	4c5e      	ldr	r4, [pc, #376]	; (800200c <MX_TIM1_Init+0x17c>)
  htim1.Init.Prescaler = 0;
 8001e94:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e96:	2120      	movs	r1, #32
  htim1.Instance = TIM1;
 8001e98:	4d5d      	ldr	r5, [pc, #372]	; (8002010 <MX_TIM1_Init+0x180>)
  htim1.Init.Period = 2160;
 8001e9a:	f44f 6207 	mov.w	r2, #2160	; 0x870
{
 8001e9e:	b09f      	sub	sp, #124	; 0x7c
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ea0:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 8001ea2:	6025      	str	r5, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ea4:	60a1      	str	r1, [r4, #8]
  htim1.Init.Period = 2160;
 8001ea6:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = 0;
 8001ea8:	6063      	str	r3, [r4, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eac:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eae:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eb0:	f002 fa1a 	bl	80042e8 <HAL_TIM_Base_Init>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d17c      	bne.n	8001fb2 <MX_TIM1_Init+0x122>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebc:	a91e      	add	r1, sp, #120	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ebe:	4853      	ldr	r0, [pc, #332]	; (800200c <MX_TIM1_Init+0x17c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec0:	f841 3d6c 	str.w	r3, [r1, #-108]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ec4:	f002 fb8e 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d16d      	bne.n	8001fa8 <MX_TIM1_Init+0x118>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ecc:	484f      	ldr	r0, [pc, #316]	; (800200c <MX_TIM1_Init+0x17c>)
 8001ece:	f002 fabf 	bl	8004450 <HAL_TIM_PWM_Init>
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d163      	bne.n	8001f9e <MX_TIM1_Init+0x10e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed6:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ed8:	4669      	mov	r1, sp
 8001eda:	484c      	ldr	r0, [pc, #304]	; (800200c <MX_TIM1_Init+0x17c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001edc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ede:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee0:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ee2:	f002 fde5 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d154      	bne.n	8001f94 <MX_TIM1_Init+0x104>
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 580;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eea:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eec:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 580;
 8001eee:	f44f 7511 	mov.w	r5, #580	; 0x244
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef2:	a90c      	add	r1, sp, #48	; 0x30
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4845      	ldr	r0, [pc, #276]	; (800200c <MX_TIM1_Init+0x17c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef8:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001efa:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001efc:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001efe:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f00:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f02:	960c      	str	r6, [sp, #48]	; 0x30
  sConfigOC.Pulse = 580;
 8001f04:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f06:	f002 fe4f 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	d13d      	bne.n	8001f8a <MX_TIM1_Init+0xfa>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.Pulse = 0;
 8001f0e:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f10:	2204      	movs	r2, #4
 8001f12:	a90c      	add	r1, sp, #48	; 0x30
 8001f14:	483d      	ldr	r0, [pc, #244]	; (800200c <MX_TIM1_Init+0x17c>)
  sConfigOC.Pulse = 0;
 8001f16:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f18:	f002 fe46 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d12f      	bne.n	8001f80 <MX_TIM1_Init+0xf0>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f20:	a90c      	add	r1, sp, #48	; 0x30
 8001f22:	2208      	movs	r2, #8
 8001f24:	4839      	ldr	r0, [pc, #228]	; (800200c <MX_TIM1_Init+0x17c>)
 8001f26:	f002 fe3f 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 8001f2a:	bb20      	cbnz	r0, 8001f76 <MX_TIM1_Init+0xe6>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f2c:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 2;
 8001f2e:	2702      	movs	r7, #2
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f30:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f34:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001f38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f3c:	a913      	add	r1, sp, #76	; 0x4c
 8001f3e:	4833      	ldr	r0, [pc, #204]	; (800200c <MX_TIM1_Init+0x17c>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f40:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f42:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f44:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f46:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f48:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f4a:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f4c:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.DeadTime = 2;
 8001f4e:	9716      	str	r7, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f50:	9618      	str	r6, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f52:	951b      	str	r5, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001f54:	921d      	str	r2, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f56:	f002 fdd7 	bl	8004b08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f5a:	b118      	cbz	r0, 8001f64 <MX_TIM1_Init+0xd4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f5c:	2187      	movs	r1, #135	; 0x87
 8001f5e:	482d      	ldr	r0, [pc, #180]	; (8002014 <MX_TIM1_Init+0x184>)
 8001f60:	f7ff fe96 	bl	8001c90 <_Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <MX_TIM1_Init+0x180>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d036      	beq.n	8001fda <MX_TIM1_Init+0x14a>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d024      	beq.n	8001fbc <MX_TIM1_Init+0x12c>
}
 8001f72:	b01f      	add	sp, #124	; 0x7c
 8001f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001f76:	2177      	movs	r1, #119	; 0x77
 8001f78:	4826      	ldr	r0, [pc, #152]	; (8002014 <MX_TIM1_Init+0x184>)
 8001f7a:	f7ff fe89 	bl	8001c90 <_Error_Handler>
 8001f7e:	e7d5      	b.n	8001f2c <MX_TIM1_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8001f80:	2172      	movs	r1, #114	; 0x72
 8001f82:	4824      	ldr	r0, [pc, #144]	; (8002014 <MX_TIM1_Init+0x184>)
 8001f84:	f7ff fe84 	bl	8001c90 <_Error_Handler>
 8001f88:	e7ca      	b.n	8001f20 <MX_TIM1_Init+0x90>
    _Error_Handler(__FILE__, __LINE__);
 8001f8a:	216c      	movs	r1, #108	; 0x6c
 8001f8c:	4821      	ldr	r0, [pc, #132]	; (8002014 <MX_TIM1_Init+0x184>)
 8001f8e:	f7ff fe7f 	bl	8001c90 <_Error_Handler>
 8001f92:	e7bc      	b.n	8001f0e <MX_TIM1_Init+0x7e>
    _Error_Handler(__FILE__, __LINE__);
 8001f94:	2160      	movs	r1, #96	; 0x60
 8001f96:	481f      	ldr	r0, [pc, #124]	; (8002014 <MX_TIM1_Init+0x184>)
 8001f98:	f7ff fe7a 	bl	8001c90 <_Error_Handler>
 8001f9c:	e7a5      	b.n	8001eea <MX_TIM1_Init+0x5a>
    _Error_Handler(__FILE__, __LINE__);
 8001f9e:	2158      	movs	r1, #88	; 0x58
 8001fa0:	481c      	ldr	r0, [pc, #112]	; (8002014 <MX_TIM1_Init+0x184>)
 8001fa2:	f7ff fe75 	bl	8001c90 <_Error_Handler>
 8001fa6:	e796      	b.n	8001ed6 <MX_TIM1_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 8001fa8:	2153      	movs	r1, #83	; 0x53
 8001faa:	481a      	ldr	r0, [pc, #104]	; (8002014 <MX_TIM1_Init+0x184>)
 8001fac:	f7ff fe70 	bl	8001c90 <_Error_Handler>
 8001fb0:	e78c      	b.n	8001ecc <MX_TIM1_Init+0x3c>
    _Error_Handler(__FILE__, __LINE__);
 8001fb2:	214d      	movs	r1, #77	; 0x4d
 8001fb4:	4817      	ldr	r0, [pc, #92]	; (8002014 <MX_TIM1_Init+0x184>)
 8001fb6:	f7ff fe6b 	bl	8001c90 <_Error_Handler>
 8001fba:	e77d      	b.n	8001eb8 <MX_TIM1_Init+0x28>
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001fbc:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fbe:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	a907      	add	r1, sp, #28
 8001fc8:	4813      	ldr	r0, [pc, #76]	; (8002018 <MX_TIM1_Init+0x188>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fca:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001fd0:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f000 ff42 	bl	8002e5c <HAL_GPIO_Init>
}
 8001fd8:	e7cb      	b.n	8001f72 <MX_TIM1_Init+0xe2>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fdc:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fe0:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	a907      	add	r1, sp, #28
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <MX_TIM1_Init+0x188>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fe6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fee:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f000 ff34 	bl	8002e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8001ff4:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff8:	a907      	add	r1, sp, #28
 8001ffa:	4808      	ldr	r0, [pc, #32]	; (800201c <MX_TIM1_Init+0x18c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002002:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8002004:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002006:	f000 ff29 	bl	8002e5c <HAL_GPIO_Init>
 800200a:	e7b2      	b.n	8001f72 <MX_TIM1_Init+0xe2>
 800200c:	200040d0 	.word	0x200040d0
 8002010:	40010000 	.word	0x40010000
 8002014:	08008178 	.word	0x08008178
 8002018:	40020000 	.word	0x40020000
 800201c:	40021000 	.word	0x40021000

08002020 <MX_TIM2_Init>:
{
 8002020:	b570      	push	{r4, r5, r6, lr}
  htim2.Instance = TIM2;
 8002022:	4c3f      	ldr	r4, [pc, #252]	; (8002120 <MX_TIM2_Init+0x100>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002024:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 8002026:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 107;
 800202a:	256b      	movs	r5, #107	; 0x6b
  htim2.Init.Period = 50000;
 800202c:	f24c 3150 	movw	r1, #50000	; 0xc350
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002030:	2280      	movs	r2, #128	; 0x80
{
 8002032:	b094      	sub	sp, #80	; 0x50
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002034:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8002036:	6026      	str	r6, [r4, #0]
  htim2.Init.Prescaler = 107;
 8002038:	6065      	str	r5, [r4, #4]
  htim2.Init.Period = 50000;
 800203a:	60e1      	str	r1, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800203c:	61a2      	str	r2, [r4, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203e:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002040:	6123      	str	r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002042:	f002 f951 	bl	80042e8 <HAL_TIM_Base_Init>
 8002046:	2800      	cmp	r0, #0
 8002048:	d13d      	bne.n	80020c6 <MX_TIM2_Init+0xa6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800204a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204e:	a914      	add	r1, sp, #80	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002050:	4833      	ldr	r0, [pc, #204]	; (8002120 <MX_TIM2_Init+0x100>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002052:	f841 3d40 	str.w	r3, [r1, #-64]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002056:	f002 fac5 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 800205a:	2800      	cmp	r0, #0
 800205c:	d12e      	bne.n	80020bc <MX_TIM2_Init+0x9c>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800205e:	4830      	ldr	r0, [pc, #192]	; (8002120 <MX_TIM2_Init+0x100>)
 8002060:	f002 f9f6 	bl	8004450 <HAL_TIM_PWM_Init>
 8002064:	bb28      	cbnz	r0, 80020b2 <MX_TIM2_Init+0x92>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002066:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002068:	a901      	add	r1, sp, #4
 800206a:	482d      	ldr	r0, [pc, #180]	; (8002120 <MX_TIM2_Init+0x100>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800206c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002070:	f002 fd1e 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002074:	b9c0      	cbnz	r0, 80020a8 <MX_TIM2_Init+0x88>
  sConfigOC.Pulse = 0;
 8002076:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002078:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800207a:	a90d      	add	r1, sp, #52	; 0x34
 800207c:	4828      	ldr	r0, [pc, #160]	; (8002120 <MX_TIM2_Init+0x100>)
 800207e:	461a      	mov	r2, r3
  sConfigOC.Pulse = 0;
 8002080:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002082:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002084:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002086:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002088:	f002 fd8e 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 800208c:	b118      	cbz	r0, 8002096 <MX_TIM2_Init+0x76>
    _Error_Handler(__FILE__, __LINE__);
 800208e:	21b7      	movs	r1, #183	; 0xb7
 8002090:	4824      	ldr	r0, [pc, #144]	; (8002124 <MX_TIM2_Init+0x104>)
 8002092:	f7ff fdfd 	bl	8001c90 <_Error_Handler>
  if(timHandle->Instance==TIM1)
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	4a23      	ldr	r2, [pc, #140]	; (8002128 <MX_TIM2_Init+0x108>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d027      	beq.n	80020ee <MX_TIM2_Init+0xce>
  else if(timHandle->Instance==TIM2)
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d015      	beq.n	80020d0 <MX_TIM2_Init+0xb0>
}
 80020a4:	b014      	add	sp, #80	; 0x50
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
    _Error_Handler(__FILE__, __LINE__);
 80020a8:	21ae      	movs	r1, #174	; 0xae
 80020aa:	481e      	ldr	r0, [pc, #120]	; (8002124 <MX_TIM2_Init+0x104>)
 80020ac:	f7ff fdf0 	bl	8001c90 <_Error_Handler>
 80020b0:	e7e1      	b.n	8002076 <MX_TIM2_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 80020b2:	21a7      	movs	r1, #167	; 0xa7
 80020b4:	481b      	ldr	r0, [pc, #108]	; (8002124 <MX_TIM2_Init+0x104>)
 80020b6:	f7ff fdeb 	bl	8001c90 <_Error_Handler>
 80020ba:	e7d4      	b.n	8002066 <MX_TIM2_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 80020bc:	21a2      	movs	r1, #162	; 0xa2
 80020be:	4819      	ldr	r0, [pc, #100]	; (8002124 <MX_TIM2_Init+0x104>)
 80020c0:	f7ff fde6 	bl	8001c90 <_Error_Handler>
 80020c4:	e7cb      	b.n	800205e <MX_TIM2_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 80020c6:	219c      	movs	r1, #156	; 0x9c
 80020c8:	4816      	ldr	r0, [pc, #88]	; (8002124 <MX_TIM2_Init+0x104>)
 80020ca:	f7ff fde1 	bl	8001c90 <_Error_Handler>
 80020ce:	e7bc      	b.n	800204a <MX_TIM2_Init+0x2a>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80020d0:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020d2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	a908      	add	r1, sp, #32
 80020dc:	4813      	ldr	r0, [pc, #76]	; (800212c <MX_TIM2_Init+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020de:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80020e4:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020e6:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f000 feb8 	bl	8002e5c <HAL_GPIO_Init>
}
 80020ec:	e7da      	b.n	80020a4 <MX_TIM2_Init+0x84>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020f0:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020f4:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	a908      	add	r1, sp, #32
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_TIM2_Init+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020fa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002102:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f000 feaa 	bl	8002e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8002108:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800210c:	a908      	add	r1, sp, #32
 800210e:	4808      	ldr	r0, [pc, #32]	; (8002130 <MX_TIM2_Init+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002116:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8002118:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800211a:	f000 fe9f 	bl	8002e5c <HAL_GPIO_Init>
 800211e:	e7c1      	b.n	80020a4 <MX_TIM2_Init+0x84>
 8002120:	20004110 	.word	0x20004110
 8002124:	08008178 	.word	0x08008178
 8002128:	40010000 	.word	0x40010000
 800212c:	40020000 	.word	0x40020000
 8002130:	40021000 	.word	0x40021000

08002134 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 8002134:	6803      	ldr	r3, [r0, #0]
{
 8002136:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8002138:	4a10      	ldr	r2, [pc, #64]	; (800217c <HAL_TIM_Base_MspInit+0x48>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d011      	beq.n	8002162 <HAL_TIM_Base_MspInit+0x2e>
  else if(tim_baseHandle->Instance==TIM2)
 800213e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002142:	d001      	beq.n	8002148 <HAL_TIM_Base_MspInit+0x14>
}
 8002144:	b002      	add	sp, #8
 8002146:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002148:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800214c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	9b01      	ldr	r3, [sp, #4]
}
 800215e:	b002      	add	sp, #8
 8002160:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_TIM_Base_MspInit+0x4c>)
 8002164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	645a      	str	r2, [r3, #68]	; 0x44
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	9b00      	ldr	r3, [sp, #0]
}
 8002176:	b002      	add	sp, #8
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40010000 	.word	0x40010000
 8002180:	40023800 	.word	0x40023800

08002184 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart4.Instance = UART4;
 8002186:	4810      	ldr	r0, [pc, #64]	; (80021c8 <MX_UART4_Init+0x44>)
  huart4.Init.BaudRate = 8000000;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002188:	2200      	movs	r2, #0
  huart4.Instance = UART4;
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <MX_UART4_Init+0x48>)
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_RX;
 800218c:	2604      	movs	r6, #4
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_MSBFIRST_INIT;
 800218e:	2590      	movs	r5, #144	; 0x90
  huart4.Init.BaudRate = 8000000;
 8002190:	4f0f      	ldr	r7, [pc, #60]	; (80021d0 <MX_UART4_Init+0x4c>)
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002192:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8002196:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  huart4.Instance = UART4;
 800219a:	6018      	str	r0, [r3, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800219c:	4618      	mov	r0, r3
  huart4.Init.BaudRate = 8000000;
 800219e:	605f      	str	r7, [r3, #4]
  huart4.Init.Mode = UART_MODE_RX;
 80021a0:	615e      	str	r6, [r3, #20]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_MSBFIRST_INIT;
 80021a2:	625d      	str	r5, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80021a4:	639c      	str	r4, [r3, #56]	; 0x38
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 80021a6:	6499      	str	r1, [r3, #72]	; 0x48
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021a8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021aa:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80021ac:	611a      	str	r2, [r3, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021b2:	621a      	str	r2, [r3, #32]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80021b4:	f003 f8dc 	bl	8005370 <HAL_UART_Init>
 80021b8:	b900      	cbnz	r0, 80021bc <MX_UART4_Init+0x38>
 80021ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 80021bc:	2155      	movs	r1, #85	; 0x55
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_UART4_Init+0x50>)
  }

}
 80021c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 80021c4:	f7ff bd64 	b.w	8001c90 <_Error_Handler>
 80021c8:	40004c00 	.word	0x40004c00
 80021cc:	20004360 	.word	0x20004360
 80021d0:	007a1200 	.word	0x007a1200
 80021d4:	0800818c 	.word	0x0800818c

080021d8 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{

  huart8.Instance = UART8;
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_UART8_Init+0x3c>)
  huart8.Init.BaudRate = 26666666;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	2200      	movs	r2, #0
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 80021dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80021e0:	4618      	mov	r0, r3
{
 80021e2:	b570      	push	{r4, r5, r6, lr}
  huart8.Init.Mode = UART_MODE_TX_RX;
 80021e4:	240c      	movs	r4, #12
  huart8.Instance = UART8;
 80021e6:	4e0c      	ldr	r6, [pc, #48]	; (8002218 <MX_UART8_Init+0x40>)
  huart8.Init.BaudRate = 26666666;
 80021e8:	4d0c      	ldr	r5, [pc, #48]	; (800221c <MX_UART8_Init+0x44>)
  huart8.Instance = UART8;
 80021ea:	601e      	str	r6, [r3, #0]
  huart8.Init.BaudRate = 26666666;
 80021ec:	605d      	str	r5, [r3, #4]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80021ee:	615c      	str	r4, [r3, #20]
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 80021f0:	61d9      	str	r1, [r3, #28]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80021f2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80021f4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80021f6:	611a      	str	r2, [r3, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f8:	619a      	str	r2, [r3, #24]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fa:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80021fe:	f003 f8b7 	bl	8005370 <HAL_UART_Init>
 8002202:	b900      	cbnz	r0, 8002206 <MX_UART8_Init+0x2e>
 8002204:	bd70      	pop	{r4, r5, r6, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8002206:	2169      	movs	r1, #105	; 0x69
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_UART8_Init+0x48>)
  }

}
 800220a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _Error_Handler(__FILE__, __LINE__);
 800220e:	f7ff bd3f 	b.w	8001c90 <_Error_Handler>
 8002212:	bf00      	nop
 8002214:	200042f0 	.word	0x200042f0
 8002218:	40007c00 	.word	0x40007c00
 800221c:	0196e6aa 	.word	0x0196e6aa
 8002220:	0800818c 	.word	0x0800818c

08002224 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart1.Instance = USART1;
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_USART1_UART_Init+0x40>)
  huart1.Init.BaudRate = 921600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002228:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 921600;
 800222a:	f44f 2661 	mov.w	r6, #921600	; 0xe1000
  huart1.Instance = USART1;
 800222e:	4f0e      	ldr	r7, [pc, #56]	; (8002268 <MX_USART1_UART_Init+0x44>)
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002230:	250c      	movs	r5, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002232:	2410      	movs	r4, #16
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002238:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 800223a:	601f      	str	r7, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800223c:	605e      	str	r6, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800223e:	615d      	str	r5, [r3, #20]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002240:	625c      	str	r4, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002242:	6399      	str	r1, [r3, #56]	; 0x38
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002244:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002246:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002248:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800224e:	621a      	str	r2, [r3, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002250:	f003 f88e 	bl	8005370 <HAL_UART_Init>
 8002254:	b900      	cbnz	r0, 8002258 <MX_USART1_UART_Init+0x34>
 8002256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8002258:	217f      	movs	r1, #127	; 0x7f
 800225a:	4804      	ldr	r0, [pc, #16]	; (800226c <MX_USART1_UART_Init+0x48>)
  }

}
 800225c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002260:	f7ff bd16 	b.w	8001c90 <_Error_Handler>
 8002264:	20004280 	.word	0x20004280
 8002268:	40011000 	.word	0x40011000
 800226c:	0800818c 	.word	0x0800818c

08002270 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 26666666;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002272:	2200      	movs	r2, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8002274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002278:	4618      	mov	r0, r3
{
 800227a:	b570      	push	{r4, r5, r6, lr}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800227c:	240c      	movs	r4, #12
  huart3.Instance = USART3;
 800227e:	4e0c      	ldr	r6, [pc, #48]	; (80022b0 <MX_USART3_UART_Init+0x40>)
  huart3.Init.BaudRate = 26666666;
 8002280:	4d0c      	ldr	r5, [pc, #48]	; (80022b4 <MX_USART3_UART_Init+0x44>)
  huart3.Instance = USART3;
 8002282:	601e      	str	r6, [r3, #0]
  huart3.Init.BaudRate = 26666666;
 8002284:	605d      	str	r5, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002286:	615c      	str	r4, [r3, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8002288:	61d9      	str	r1, [r3, #28]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800228a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800228c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800228e:	611a      	str	r2, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002290:	619a      	str	r2, [r3, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002292:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002296:	f003 f86b 	bl	8005370 <HAL_UART_Init>
 800229a:	b900      	cbnz	r0, 800229e <MX_USART3_UART_Init+0x2e>
 800229c:	bd70      	pop	{r4, r5, r6, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 800229e:	2194      	movs	r1, #148	; 0x94
 80022a0:	4805      	ldr	r0, [pc, #20]	; (80022b8 <MX_USART3_UART_Init+0x48>)
  }

}
 80022a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _Error_Handler(__FILE__, __LINE__);
 80022a6:	f7ff bcf3 	b.w	8001c90 <_Error_Handler>
 80022aa:	bf00      	nop
 80022ac:	200041b0 	.word	0x200041b0
 80022b0:	40004800 	.word	0x40004800
 80022b4:	0196e6aa 	.word	0x0196e6aa
 80022b8:	0800818c 	.word	0x0800818c

080022bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 80022bc:	4a61      	ldr	r2, [pc, #388]	; (8002444 <HAL_UART_MspInit+0x188>)
 80022be:	6803      	ldr	r3, [r0, #0]
 80022c0:	4293      	cmp	r3, r2
{
 80022c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c4:	4604      	mov	r4, r0
 80022c6:	b08b      	sub	sp, #44	; 0x2c
  if(uartHandle->Instance==UART4)
 80022c8:	d026      	beq.n	8002318 <HAL_UART_MspInit+0x5c>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 80022ca:	4a5f      	ldr	r2, [pc, #380]	; (8002448 <HAL_UART_MspInit+0x18c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f000 80a1 	beq.w	8002414 <HAL_UART_MspInit+0x158>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 80022d2:	4a5e      	ldr	r2, [pc, #376]	; (800244c <HAL_UART_MspInit+0x190>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d05d      	beq.n	8002394 <HAL_UART_MspInit+0xd8>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80022d8:	4a5d      	ldr	r2, [pc, #372]	; (8002450 <HAL_UART_MspInit+0x194>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d001      	beq.n	80022e2 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022de:	b00b      	add	sp, #44	; 0x2c
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80022e2:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <HAL_UART_MspInit+0x198>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022e4:	f44f 7e40 	mov.w	lr, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ea:	2601      	movs	r6, #1
    __HAL_RCC_USART3_CLK_ENABLE();
 80022ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022f0:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f2:	a905      	add	r1, sp, #20
    __HAL_RCC_USART3_CLK_ENABLE();
 80022f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f8:	4857      	ldr	r0, [pc, #348]	; (8002458 <HAL_UART_MspInit+0x19c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022fe:	f8cd e014 	str.w	lr, [sp, #20]
    __HAL_RCC_USART3_CLK_ENABLE();
 8002302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002308:	9607      	str	r6, [sp, #28]
    __HAL_RCC_USART3_CLK_ENABLE();
 800230a:	9304      	str	r3, [sp, #16]
 800230c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002310:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002312:	f000 fda3 	bl	8002e5c <HAL_GPIO_Init>
}
 8002316:	e7e2      	b.n	80022de <HAL_UART_MspInit+0x22>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002318:	4b4e      	ldr	r3, [pc, #312]	; (8002454 <HAL_UART_MspInit+0x198>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800231a:	2503      	movs	r5, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	f04f 0e02 	mov.w	lr, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002320:	2701      	movs	r7, #1
    __HAL_RCC_UART4_CLK_ENABLE();
 8002322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002324:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	a905      	add	r1, sp, #20
 8002328:	484c      	ldr	r0, [pc, #304]	; (800245c <HAL_UART_MspInit+0x1a0>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800232a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002332:	9505      	str	r5, [sp, #20]
    __HAL_RCC_UART4_CLK_ENABLE();
 8002334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233a:	9707      	str	r7, [sp, #28]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800233c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    __HAL_RCC_UART4_CLK_ENABLE();
 8002340:	9301      	str	r3, [sp, #4]
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002342:	4d47      	ldr	r5, [pc, #284]	; (8002460 <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8002344:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002346:	9609      	str	r6, [sp, #36]	; 0x24
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002348:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	f8cd e018 	str.w	lr, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f000 fd84 	bl	8002e5c <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002354:	4843      	ldr	r0, [pc, #268]	; (8002464 <HAL_UART_MspInit+0x1a8>)
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002356:	2300      	movs	r3, #0
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002358:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800235c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002360:	6028      	str	r0, [r5, #0]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002362:	4628      	mov	r0, r5
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002364:	606f      	str	r7, [r5, #4]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002366:	612e      	str	r6, [r5, #16]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002368:	61e9      	str	r1, [r5, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800236a:	622a      	str	r2, [r5, #32]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800236c:	60ab      	str	r3, [r5, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800236e:	60eb      	str	r3, [r5, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002370:	616b      	str	r3, [r5, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002372:	61ab      	str	r3, [r5, #24]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002374:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002376:	f000 fba7 	bl	8002ac8 <HAL_DMA_Init>
 800237a:	2800      	cmp	r0, #0
 800237c:	d13f      	bne.n	80023fe <HAL_UART_MspInit+0x142>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800237e:	6665      	str	r5, [r4, #100]	; 0x64
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	2105      	movs	r1, #5
 8002384:	2034      	movs	r0, #52	; 0x34
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002386:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002388:	f000 f94c 	bl	8002624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800238c:	2034      	movs	r0, #52	; 0x34
 800238e:	f000 f983 	bl	8002698 <HAL_NVIC_EnableIRQ>
 8002392:	e7a4      	b.n	80022de <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <HAL_UART_MspInit+0x198>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002396:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800239c:	f04f 0e01 	mov.w	lr, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023a4:	2607      	movs	r6, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a8:	f042 0210 	orr.w	r2, r2, #16
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023b0:	9005      	str	r0, [sp, #20]
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b2:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	4829      	ldr	r0, [pc, #164]	; (800245c <HAL_UART_MspInit+0x1a0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	9506      	str	r5, [sp, #24]
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ba:	9303      	str	r3, [sp, #12]
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80023bc:	4d2a      	ldr	r5, [pc, #168]	; (8002468 <HAL_UART_MspInit+0x1ac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80023be:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c2:	9609      	str	r6, [sp, #36]	; 0x24
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80023c4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c8:	f8cd e01c 	str.w	lr, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f000 fd46 	bl	8002e5c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80023d0:	4f26      	ldr	r7, [pc, #152]	; (800246c <HAL_UART_MspInit+0x1b0>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d2:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80023d8:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023dc:	4628      	mov	r0, r5
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80023de:	602f      	str	r7, [r5, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80023e0:	606e      	str	r6, [r5, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023e2:	6129      	str	r1, [r5, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80023e4:	61ea      	str	r2, [r5, #28]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023e6:	60ab      	str	r3, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e8:	60eb      	str	r3, [r5, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ea:	616b      	str	r3, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ec:	61ab      	str	r3, [r5, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023ee:	622b      	str	r3, [r5, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023f0:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023f2:	f000 fb69 	bl	8002ac8 <HAL_DMA_Init>
 80023f6:	b938      	cbnz	r0, 8002408 <HAL_UART_MspInit+0x14c>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80023f8:	6665      	str	r5, [r4, #100]	; 0x64
 80023fa:	63ac      	str	r4, [r5, #56]	; 0x38
 80023fc:	e76f      	b.n	80022de <HAL_UART_MspInit+0x22>
      _Error_Handler(__FILE__, __LINE__);
 80023fe:	21be      	movs	r1, #190	; 0xbe
 8002400:	481b      	ldr	r0, [pc, #108]	; (8002470 <HAL_UART_MspInit+0x1b4>)
 8002402:	f7ff fc45 	bl	8001c90 <_Error_Handler>
 8002406:	e7ba      	b.n	800237e <HAL_UART_MspInit+0xc2>
      _Error_Handler(__FILE__, __LINE__);
 8002408:	f44f 7181 	mov.w	r1, #258	; 0x102
 800240c:	4818      	ldr	r0, [pc, #96]	; (8002470 <HAL_UART_MspInit+0x1b4>)
 800240e:	f7ff fc3f 	bl	8001c90 <_Error_Handler>
 8002412:	e7f1      	b.n	80023f8 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_UART_MspInit+0x198>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002416:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800241a:	2601      	movs	r6, #1
    __HAL_RCC_UART8_CLK_ENABLE();
 800241c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800241e:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002420:	a905      	add	r1, sp, #20
 8002422:	4814      	ldr	r0, [pc, #80]	; (8002474 <HAL_UART_MspInit+0x1b8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8002424:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800242c:	9405      	str	r4, [sp, #20]
    __HAL_RCC_UART8_CLK_ENABLE();
 800242e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	9706      	str	r7, [sp, #24]
    __HAL_RCC_UART8_CLK_ENABLE();
 8002436:	9302      	str	r3, [sp, #8]
 8002438:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800243a:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800243c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800243e:	f000 fd0d 	bl	8002e5c <HAL_GPIO_Init>
 8002442:	e74c      	b.n	80022de <HAL_UART_MspInit+0x22>
 8002444:	40004c00 	.word	0x40004c00
 8002448:	40007c00 	.word	0x40007c00
 800244c:	40011000 	.word	0x40011000
 8002450:	40004800 	.word	0x40004800
 8002454:	40023800 	.word	0x40023800
 8002458:	40020c00 	.word	0x40020c00
 800245c:	40020000 	.word	0x40020000
 8002460:	20004150 	.word	0x20004150
 8002464:	40026040 	.word	0x40026040
 8002468:	20004220 	.word	0x20004220
 800246c:	40026440 	.word	0x40026440
 8002470:	0800818c 	.word	0x0800818c
 8002474:	40021000 	.word	0x40021000

08002478 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8002478:	b538      	push	{r3, r4, r5, lr}

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <MX_USB_OTG_HS_PCD_Init+0x38>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800247c:	2200      	movs	r2, #0
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800247e:	2409      	movs	r4, #9
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002480:	4d0c      	ldr	r5, [pc, #48]	; (80024b4 <MX_USB_OTG_HS_PCD_Init+0x3c>)
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8002482:	2101      	movs	r1, #1
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8002484:	4618      	mov	r0, r3
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002486:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8002488:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800248a:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800248c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 800248e:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8002490:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002492:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800249a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800249c:	f000 feb6 	bl	800320c <HAL_PCD_Init>
 80024a0:	b900      	cbnz	r0, 80024a4 <MX_USB_OTG_HS_PCD_Init+0x2c>
 80024a2:	bd38      	pop	{r3, r4, r5, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 80024a4:	214f      	movs	r1, #79	; 0x4f
 80024a6:	4804      	ldr	r0, [pc, #16]	; (80024b8 <MX_USB_OTG_HS_PCD_Init+0x40>)
  }

}
 80024a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _Error_Handler(__FILE__, __LINE__);
 80024ac:	f7ff bbf0 	b.w	8001c90 <_Error_Handler>
 80024b0:	200043d0 	.word	0x200043d0
 80024b4:	40040000 	.word	0x40040000
 80024b8:	080081a4 	.word	0x080081a4

080024bc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 80024bc:	6802      	ldr	r2, [r0, #0]
 80024be:	4b1f      	ldr	r3, [pc, #124]	; (800253c <HAL_PCD_MspInit+0x80>)
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d000      	beq.n	80024c6 <HAL_PCD_MspInit+0xa>
 80024c4:	4770      	bx	lr
{
 80024c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c8:	b089      	sub	sp, #36	; 0x24
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024d0:	240a      	movs	r4, #10
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80024d2:	230d      	movs	r3, #13
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d4:	a903      	add	r1, sp, #12
 80024d6:	481a      	ldr	r0, [pc, #104]	; (8002540 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80024d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024de:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024e0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e2:	f000 fcbb 	bl	8002e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80024e6:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	a903      	add	r1, sp, #12
 80024ea:	4816      	ldr	r0, [pc, #88]	; (8002544 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80024ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024f4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f000 fcb1 	bl	8002e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80024fa:	f643 4323 	movw	r3, #15395	; 0x3c23
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	a903      	add	r1, sp, #12
 8002500:	4811      	ldr	r0, [pc, #68]	; (8002548 <HAL_PCD_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8002502:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800250a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f000 fca6 	bl	8002e5c <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_PCD_MspInit+0x90>)
 8002512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002514:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
 800251a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8002520:	9201      	str	r2, [sp, #4]
 8002522:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8002524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002526:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8002536:	b009      	add	sp, #36	; 0x24
 8002538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253a:	bf00      	nop
 800253c:	40040000 	.word	0x40040000
 8002540:	40020800 	.word	0x40020800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40023800 	.word	0x40023800

08002550 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002550:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002554:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002558:	490f      	ldr	r1, [pc, #60]	; (8002598 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800255a:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 800255e:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002560:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8002564:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002566:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002568:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 800256c:	4e0b      	ldr	r6, [pc, #44]	; (800259c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800256e:	f040 0001 	orr.w	r0, r0, #1
 8002572:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002574:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	4001      	ands	r1, r0
 800257a:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 800257c:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002584:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8002586:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002588:	6095      	str	r5, [r2, #8]
#endif
}
 800258a:	bc70      	pop	{r4, r5, r6}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00
 8002594:	40023800 	.word	0x40023800
 8002598:	fef6ffff 	.word	0xfef6ffff
 800259c:	24003010 	.word	0x24003010

080025a0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80025a0:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <HAL_Init+0x20>)
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a2:	2003      	movs	r0, #3
{
 80025a4:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80025a6:	6813      	ldr	r3, [r2, #0]
 80025a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ae:	f000 f825 	bl	80025fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7ff fbfc 	bl	8001db0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff fbca 	bl	8001d50 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80025bc:	2000      	movs	r0, #0
 80025be:	bd08      	pop	{r3, pc}
 80025c0:	40023c00 	.word	0x40023c00

080025c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80025c4:	4a02      	ldr	r2, [pc, #8]	; (80025d0 <HAL_IncTick+0xc>)
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	200047d0 	.word	0x200047d0

080025d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025d4:	4b01      	ldr	r3, [pc, #4]	; (80025dc <HAL_GetTick+0x8>)
 80025d6:	6818      	ldr	r0, [r3, #0]
}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	200047d0 	.word	0x200047d0

080025e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80025e0:	b510      	push	{r4, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80025e6:	f7ff fff5 	bl	80025d4 <HAL_GetTick>
 80025ea:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80025ec:	f7ff fff2 	bl	80025d4 <HAL_GetTick>
 80025f0:	9b01      	ldr	r3, [sp, #4]
 80025f2:	1b00      	subs	r0, r0, r4
 80025f4:	4298      	cmp	r0, r3
 80025f6:	d3f9      	bcc.n	80025ec <HAL_Delay+0xc>
  {
  }
}
 80025f8:	b002      	add	sp, #8
 80025fa:	bd10      	pop	{r4, pc}

080025fc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80025fe:	0200      	lsls	r0, r0, #8
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002602:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002604:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800260e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002614:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002616:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8002618:	60c8      	str	r0, [r1, #12]
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00
 8002620:	05fa0000 	.word	0x05fa0000

08002624 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002626:	b470      	push	{r4, r5, r6}
 8002628:	68dc      	ldr	r4, [r3, #12]
 800262a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262e:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	2e04      	cmp	r6, #4
 8002636:	bf28      	it	cs
 8002638:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	2b06      	cmp	r3, #6
 800263c:	d919      	bls.n	8002672 <HAL_NVIC_SetPriority+0x4e>
 800263e:	3c03      	subs	r4, #3
 8002640:	2501      	movs	r5, #1
 8002642:	40a5      	lsls	r5, r4
 8002644:	3d01      	subs	r5, #1
 8002646:	402a      	ands	r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) < 0)
 800264a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	fa03 f306 	lsl.w	r3, r3, r6
 8002650:	f103 33ff 	add.w	r3, r3, #4294967295
 8002654:	ea01 0103 	and.w	r1, r1, r3
 8002658:	fa01 f104 	lsl.w	r1, r1, r4
 800265c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8002660:	db0a      	blt.n	8002678 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002662:	0109      	lsls	r1, r1, #4
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_NVIC_SetPriority+0x6c>)
 8002666:	b2c9      	uxtb	r1, r1
 8002668:	4403      	add	r3, r0
 800266a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800266e:	bc70      	pop	{r4, r5, r6}
 8002670:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	2200      	movs	r2, #0
 8002674:	4614      	mov	r4, r2
 8002676:	e7e7      	b.n	8002648 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	f000 000f 	and.w	r0, r0, #15
 800267c:	0109      	lsls	r1, r1, #4
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_NVIC_SetPriority+0x70>)
 8002680:	b2c9      	uxtb	r1, r1
 8002682:	4403      	add	r3, r0
 8002684:	7619      	strb	r1, [r3, #24]
 8002686:	bc70      	pop	{r4, r5, r6}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ecfc 	.word	0xe000ecfc

08002698 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002698:	f000 011f 	and.w	r1, r0, #31
 800269c:	2301      	movs	r3, #1
 800269e:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_NVIC_EnableIRQ+0x14>)
 80026a0:	0940      	lsrs	r0, r0, #5
 80026a2:	408b      	lsls	r3, r1
 80026a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	3801      	subs	r0, #1
 80026b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80026b6:	d20d      	bcs.n	80026d4 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ba:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026bc:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	25f0      	movs	r5, #240	; 0xf0
 80026c2:	4c06      	ldr	r4, [pc, #24]	; (80026dc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c4:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c6:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80026d0:	bc30      	pop	{r4, r5}
 80026d2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80026d4:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80026d6:	4770      	bx	lr
 80026d8:	e000e010 	.word	0xe000e010
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80026e2:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	bf0c      	ite	eq
 80026e8:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80026ec:	f023 0304 	bicne.w	r3, r3, #4
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4770      	bx	lr
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_DFSDM_ChannelInit>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80026f8:	b350      	cbz	r0, 8002750 <HAL_DFSDM_ChannelInit+0x58>
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80026fa:	4a5f      	ldr	r2, [pc, #380]	; (8002878 <HAL_DFSDM_ChannelInit+0x180>)
{
 80026fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80026fe:	6803      	ldr	r3, [r0, #0]
  if(Instance == DFSDM1_Channel0)
 8002700:	4293      	cmp	r3, r2
 8002702:	d027      	beq.n	8002754 <HAL_DFSDM_ChannelInit+0x5c>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 8002704:	3220      	adds	r2, #32
 8002706:	4293      	cmp	r3, r2
 8002708:	f000 8087 	beq.w	800281a <HAL_DFSDM_ChannelInit+0x122>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 800270c:	3220      	adds	r2, #32
 800270e:	4293      	cmp	r3, r2
 8002710:	d01a      	beq.n	8002748 <HAL_DFSDM_ChannelInit+0x50>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 8002712:	3220      	adds	r2, #32
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_DFSDM_ChannelInit+0x48>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 8002718:	3220      	adds	r2, #32
 800271a:	4293      	cmp	r3, r2
 800271c:	d016      	beq.n	800274c <HAL_DFSDM_ChannelInit+0x54>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 800271e:	3220      	adds	r2, #32
 8002720:	4293      	cmp	r3, r2
 8002722:	d07c      	beq.n	800281e <HAL_DFSDM_ChannelInit+0x126>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 8002724:	3220      	adds	r2, #32
 8002726:	4293      	cmp	r3, r2
 8002728:	d00c      	beq.n	8002744 <HAL_DFSDM_ChannelInit+0x4c>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
 800272a:	3220      	adds	r2, #32
  {
    channel = 7;
 800272c:	4293      	cmp	r3, r2
 800272e:	bf14      	ite	ne
 8002730:	23ff      	movne	r3, #255	; 0xff
 8002732:	2307      	moveq	r3, #7
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002734:	4d51      	ldr	r5, [pc, #324]	; (800287c <HAL_DFSDM_ChannelInit+0x184>)
 8002736:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800273a:	b16b      	cbz	r3, 8002758 <HAL_DFSDM_ChannelInit+0x60>
    return HAL_ERROR;
 800273c:	2001      	movs	r0, #1
}
 800273e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    channel = 3;
 8002740:	2303      	movs	r3, #3
 8002742:	e7f7      	b.n	8002734 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 6;
 8002744:	2306      	movs	r3, #6
 8002746:	e7f5      	b.n	8002734 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 2;
 8002748:	2302      	movs	r3, #2
 800274a:	e7f3      	b.n	8002734 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 4;
 800274c:	2304      	movs	r3, #4
 800274e:	e7f1      	b.n	8002734 <HAL_DFSDM_ChannelInit+0x3c>
    return HAL_ERROR;
 8002750:	2001      	movs	r0, #1
 8002752:	4770      	bx	lr
    channel = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	e7ed      	b.n	8002734 <HAL_DFSDM_ChannelInit+0x3c>
 8002758:	4604      	mov	r4, r0
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800275a:	f7fe ffa7 	bl	80016ac <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 800275e:	4b48      	ldr	r3, [pc, #288]	; (8002880 <HAL_DFSDM_ChannelInit+0x188>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	3201      	adds	r2, #1
 8002764:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d05c      	beq.n	8002826 <HAL_DFSDM_ChannelInit+0x12e>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800276c:	6823      	ldr	r3, [r4, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800276e:	2001      	movs	r0, #1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002770:	6966      	ldr	r6, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002772:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002774:	6922      	ldr	r2, [r4, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002776:	69a7      	ldr	r7, [r4, #24]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002778:	f421 4171 	bic.w	r1, r1, #61696	; 0xf100
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800277c:	4332      	orrs	r2, r6
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800277e:	69e6      	ldr	r6, [r4, #28]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002780:	6019      	str	r1, [r3, #0]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002782:	433a      	orrs	r2, r7
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002784:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002786:	6a27      	ldr	r7, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002788:	430a      	orrs	r2, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800278a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800278e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002790:	433e      	orrs	r6, r7
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002792:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002794:	681f      	ldr	r7, [r3, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002796:	1e4a      	subs	r2, r1, #1
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002798:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800279c:	f027 070f 	bic.w	r7, r7, #15
 80027a0:	601f      	str	r7, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027a2:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80027a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027a6:	430e      	orrs	r6, r1
 80027a8:	601e      	str	r6, [r3, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027aa:	6899      	ldr	r1, [r3, #8]
  if(Instance == DFSDM1_Channel0)
 80027ac:	4e32      	ldr	r6, [pc, #200]	; (8002878 <HAL_DFSDM_ChannelInit+0x180>)
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027ae:	f421 015f 	bic.w	r1, r1, #14614528	; 0xdf0000
  if(Instance == DFSDM1_Channel0)
 80027b2:	42b3      	cmp	r3, r6
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027b4:	6099      	str	r1, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	ea41 010c 	orr.w	r1, r1, ip
 80027bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80027c0:	6099      	str	r1, [r3, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	f001 0107 	and.w	r1, r1, #7
 80027c8:	6059      	str	r1, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	ea42 02ce 	orr.w	r2, r2, lr, lsl #3
 80027d0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80027d4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027dc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027de:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(Instance == DFSDM1_Channel0)
 80027e2:	d03b      	beq.n	800285c <HAL_DFSDM_ChannelInit+0x164>
  else if(Instance == DFSDM1_Channel1)
 80027e4:	4a27      	ldr	r2, [pc, #156]	; (8002884 <HAL_DFSDM_ChannelInit+0x18c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_DFSDM_ChannelInit+0x11a>
  else if(Instance == DFSDM1_Channel2)
 80027ea:	3220      	adds	r2, #32
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d031      	beq.n	8002854 <HAL_DFSDM_ChannelInit+0x15c>
  else if(Instance == DFSDM1_Channel3)
 80027f0:	3220      	adds	r2, #32
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d015      	beq.n	8002822 <HAL_DFSDM_ChannelInit+0x12a>
  else if(Instance == DFSDM1_Channel4)
 80027f6:	3220      	adds	r2, #32
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d02d      	beq.n	8002858 <HAL_DFSDM_ChannelInit+0x160>
  else if(Instance == DFSDM1_Channel5)
 80027fc:	3220      	adds	r2, #32
 80027fe:	4293      	cmp	r3, r2
 8002800:	d02e      	beq.n	8002860 <HAL_DFSDM_ChannelInit+0x168>
  else if(Instance == DFSDM1_Channel6)
 8002802:	3220      	adds	r2, #32
 8002804:	4293      	cmp	r3, r2
 8002806:	d034      	beq.n	8002872 <HAL_DFSDM_ChannelInit+0x17a>
  else if(Instance == DFSDM1_Channel7)
 8002808:	481f      	ldr	r0, [pc, #124]	; (8002888 <HAL_DFSDM_ChannelInit+0x190>)
    channel = 7;
 800280a:	4283      	cmp	r3, r0
 800280c:	bf14      	ite	ne
 800280e:	20ff      	movne	r0, #255	; 0xff
 8002810:	2007      	moveq	r0, #7
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002812:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8002816:	2000      	movs	r0, #0
 8002818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    channel = 1;
 800281a:	2301      	movs	r3, #1
 800281c:	e78a      	b.n	8002734 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 5;
 800281e:	2305      	movs	r3, #5
 8002820:	e788      	b.n	8002734 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 3;
 8002822:	2003      	movs	r0, #3
 8002824:	e7f5      	b.n	8002812 <HAL_DFSDM_ChannelInit+0x11a>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_DFSDM_ChannelInit+0x180>)
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002828:	7921      	ldrb	r1, [r4, #4]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800282a:	681a      	ldr	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800282c:	2901      	cmp	r1, #1
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800282e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002832:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68a0      	ldr	r0, [r4, #8]
 8002838:	ea42 0200 	orr.w	r2, r2, r0
 800283c:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002844:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002846:	d00d      	beq.n	8002864 <HAL_DFSDM_ChannelInit+0x16c>
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <HAL_DFSDM_ChannelInit+0x180>)
 800284a:	6813      	ldr	r3, [r2, #0]
 800284c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e78b      	b.n	800276c <HAL_DFSDM_ChannelInit+0x74>
    channel = 2;
 8002854:	2002      	movs	r0, #2
 8002856:	e7dc      	b.n	8002812 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 4;
 8002858:	2004      	movs	r0, #4
 800285a:	e7da      	b.n	8002812 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 0;
 800285c:	2000      	movs	r0, #0
 800285e:	e7d8      	b.n	8002812 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 5;
 8002860:	2005      	movs	r0, #5
 8002862:	e7d6      	b.n	8002812 <HAL_DFSDM_ChannelInit+0x11a>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8002864:	68e1      	ldr	r1, [r4, #12]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	3901      	subs	r1, #1
 800286a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e7ea      	b.n	8002848 <HAL_DFSDM_ChannelInit+0x150>
    channel = 6;
 8002872:	2006      	movs	r0, #6
 8002874:	e7cd      	b.n	8002812 <HAL_DFSDM_ChannelInit+0x11a>
 8002876:	bf00      	nop
 8002878:	40017400 	.word	0x40017400
 800287c:	20000054 	.word	0x20000054
 8002880:	20000074 	.word	0x20000074
 8002884:	40017420 	.word	0x40017420
 8002888:	400174e0 	.word	0x400174e0

0800288c <HAL_DFSDM_FilterInit>:
  if(hdfsdm_filter == NULL)
 800288c:	2800      	cmp	r0, #0
 800288e:	d06b      	beq.n	8002968 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002890:	6802      	ldr	r2, [r0, #0]
{
 8002892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002894:	4b35      	ldr	r3, [pc, #212]	; (800296c <HAL_DFSDM_FilterInit+0xe0>)
 8002896:	429a      	cmp	r2, r3
 8002898:	d059      	beq.n	800294e <HAL_DFSDM_FilterInit+0xc2>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800289a:	2200      	movs	r2, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800289c:	2301      	movs	r3, #1
 800289e:	4604      	mov	r4, r0
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80028a0:	6302      	str	r2, [r0, #48]	; 0x30
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80028a2:	6502      	str	r2, [r0, #80]	; 0x50
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80028a4:	6443      	str	r3, [r0, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80028a6:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80028a8:	f7fe fe5e 	bl	8001568 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028ac:	6823      	ldr	r3, [r4, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80028ae:	7a21      	ldrb	r1, [r4, #8]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028b0:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80028b2:	2901      	cmp	r1, #1
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028b4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80028b8:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	bf0c      	ite	eq
 80028be:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80028c2:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 80028c6:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80028c8:	7a62      	ldrb	r2, [r4, #9]
 80028ca:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	bf0c      	ite	eq
 80028d0:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80028d4:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 80028d8:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80028da:	4a25      	ldr	r2, [pc, #148]	; (8002970 <HAL_DFSDM_FilterInit+0xe4>)
 80028dc:	6819      	ldr	r1, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80028de:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80028e2:	400a      	ands	r2, r1
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80028e4:	f1be 0f02 	cmp.w	lr, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80028e8:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80028ea:	d038      	beq.n	800295e <HAL_DFSDM_FilterInit+0xd2>
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80028ec:	7c25      	ldrb	r5, [r4, #16]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80028ee:	2601      	movs	r6, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80028f0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80028f2:	2000      	movs	r0, #0
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80028f4:	2d01      	cmp	r5, #1
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80028f6:	491f      	ldr	r1, [pc, #124]	; (8002974 <HAL_DFSDM_FilterInit+0xe8>)
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80028f8:	bf0c      	ite	eq
 80028fa:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80028fe:	f022 0210 	bicne.w	r2, r2, #16
 8002902:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002904:	7c62      	ldrb	r2, [r4, #17]
 8002906:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	bf0c      	ite	eq
 800290c:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002910:	f022 0220 	bicne.w	r2, r2, #32
 8002914:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002916:	695a      	ldr	r2, [r3, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002918:	69e7      	ldr	r7, [r4, #28]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800291a:	4011      	ands	r1, r2
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800291c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800291e:	6159      	str	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8002920:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002922:	6959      	ldr	r1, [r3, #20]
 8002924:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002926:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002928:	433a      	orrs	r2, r7
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800292a:	3901      	subs	r1, #1
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800292c:	6867      	ldr	r7, [r4, #4]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800292e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002932:	69a1      	ldr	r1, [r4, #24]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002934:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002936:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002938:	f8c4 e038 	str.w	lr, [r4, #56]	; 0x38
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800293c:	4332      	orrs	r2, r6
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800293e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002942:	6367      	str	r7, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002944:	63e1      	str	r1, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002946:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002948:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
  return HAL_OK;
 800294c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800294e:	6843      	ldr	r3, [r0, #4]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d002      	beq.n	800295a <HAL_DFSDM_FilterInit+0xce>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002954:	68c3      	ldr	r3, [r0, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d19f      	bne.n	800289a <HAL_DFSDM_FilterInit+0xe>
    return HAL_ERROR;
 800295a:	4618      	mov	r0, r3
}
 800295c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	6961      	ldr	r1, [r4, #20]
 8002962:	430a      	orrs	r2, r1
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e7c1      	b.n	80028ec <HAL_DFSDM_FilterInit+0x60>
    return HAL_ERROR;
 8002968:	2001      	movs	r0, #1
 800296a:	4770      	bx	lr
 800296c:	40017500 	.word	0x40017500
 8002970:	ffff80f7 	.word	0xffff80f7
 8002974:	1c00ff00 	.word	0x1c00ff00

08002978 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002978:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800297c:	3b01      	subs	r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2bfd      	cmp	r3, #253	; 0xfd
 8002982:	d812      	bhi.n	80029aa <HAL_DFSDM_FilterConfigRegChannel+0x32>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002984:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_DFSDM_FilterConfigRegChannel+0x50>)
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002986:	2a01      	cmp	r2, #1
{
 8002988:	b430      	push	{r4, r5}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800298a:	6804      	ldr	r4, [r0, #0]
 800298c:	6825      	ldr	r5, [r4, #0]
 800298e:	ea03 0305 	and.w	r3, r3, r5
 8002992:	6023      	str	r3, [r4, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002994:	d00b      	beq.n	80029ae <HAL_DFSDM_FilterConfigRegChannel+0x36>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002996:	0209      	lsls	r1, r1, #8
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800299e:	4319      	orrs	r1, r3
 80029a0:	6021      	str	r1, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80029a2:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80029a4:	2000      	movs	r0, #0
}
 80029a6:	bc30      	pop	{r4, r5}
 80029a8:	4770      	bx	lr
    status = HAL_ERROR;
 80029aa:	2001      	movs	r0, #1
 80029ac:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80029ae:	020b      	lsls	r3, r1, #8
 80029b0:	6821      	ldr	r1, [r4, #0]
 80029b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ba:	430b      	orrs	r3, r1
 80029bc:	6023      	str	r3, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80029be:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2000      	movs	r0, #0
}
 80029c2:	bc30      	pop	{r4, r5}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	f8fbffff 	.word	0xf8fbffff

080029cc <HAL_DFSDM_FilterRegularStart>:
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80029cc:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80029d0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80029d4:	2a01      	cmp	r2, #1
 80029d6:	d001      	beq.n	80029dc <HAL_DFSDM_FilterRegularStart+0x10>
    status = HAL_ERROR;
 80029d8:	2001      	movs	r0, #1
}
 80029da:	4770      	bx	lr
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80029dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80029de:	b19a      	cbz	r2, 8002a08 <HAL_DFSDM_FilterRegularStart+0x3c>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80029e0:	6802      	ldr	r2, [r0, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80029e2:	2b03      	cmp	r3, #3
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80029e4:	6811      	ldr	r1, [r2, #0]
 80029e6:	f021 0101 	bic.w	r1, r1, #1
 80029ea:	6011      	str	r1, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80029ec:	6811      	ldr	r1, [r2, #0]
 80029ee:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 80029f2:	6011      	str	r1, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80029f4:	6811      	ldr	r1, [r2, #0]
 80029f6:	f041 0101 	orr.w	r1, r1, #1
 80029fa:	6011      	str	r1, [r2, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80029fc:	d010      	beq.n	8002a20 <HAL_DFSDM_FilterRegularStart+0x54>
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80029fe:	2302      	movs	r3, #2
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002a00:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2000      	movs	r0, #0
 8002a06:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002a08:	6801      	ldr	r1, [r0, #0]
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a0a:	2b01      	cmp	r3, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002a0c:	680a      	ldr	r2, [r1, #0]
 8002a0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a12:	600a      	str	r2, [r1, #0]
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a14:	d0f3      	beq.n	80029fe <HAL_DFSDM_FilterRegularStart+0x32>
 8002a16:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002a18:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	4770      	bx	lr
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002a20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a22:	b91b      	cbnz	r3, 8002a2c <HAL_DFSDM_FilterRegularStart+0x60>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002a24:	6813      	ldr	r3, [r2, #0]
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	6013      	str	r3, [r2, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8002a2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a30:	2b01      	cmp	r3, #1
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a32:	f04f 0304 	mov.w	r3, #4
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8002a36:	bf0c      	ite	eq
 8002a38:	6c42      	ldreq	r2, [r0, #68]	; 0x44
 8002a3a:	2201      	movne	r2, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002a3c:	6482      	str	r2, [r0, #72]	; 0x48
 8002a3e:	e7df      	b.n	8002a00 <HAL_DFSDM_FilterRegularStart+0x34>

08002a40 <HAL_DFSDM_FilterGetRegularValue>:
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8002a40:	6803      	ldr	r3, [r0, #0]
 8002a42:	69d8      	ldr	r0, [r3, #28]
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8002a44:	f000 0307 	and.w	r3, r0, #7
}
 8002a48:	1200      	asrs	r0, r0, #8
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8002a4a:	600b      	str	r3, [r1, #0]
}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop

08002a50 <HAL_DFSDM_FilterErrorCallback>:
{
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop

08002a54 <HAL_DFSDM_FilterPollForRegConversion>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002a54:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d003      	beq.n	8002a64 <HAL_DFSDM_FilterPollForRegConversion+0x10>
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d001      	beq.n	8002a64 <HAL_DFSDM_FilterPollForRegConversion+0x10>
    return HAL_ERROR;
 8002a60:	2001      	movs	r0, #1
 8002a62:	4770      	bx	lr
{
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	460c      	mov	r4, r1
 8002a68:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();  
 8002a6a:	f7ff fdb3 	bl	80025d4 <HAL_GetTick>
 8002a6e:	4606      	mov	r6, r0
 8002a70:	1c63      	adds	r3, r4, #1
 8002a72:	682a      	ldr	r2, [r5, #0]
 8002a74:	d114      	bne.n	8002aa0 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002a76:	6893      	ldr	r3, [r2, #8]
 8002a78:	0798      	lsls	r0, r3, #30
 8002a7a:	d5fc      	bpl.n	8002a76 <HAL_DFSDM_FilterPollForRegConversion+0x22>
    if((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 8002a7c:	6893      	ldr	r3, [r2, #8]
 8002a7e:	071b      	lsls	r3, r3, #28
 8002a80:	d419      	bmi.n	8002ab6 <HAL_DFSDM_FilterPollForRegConversion+0x62>
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002a82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a84:	b953      	cbnz	r3, 8002a9c <HAL_DFSDM_FilterPollForRegConversion+0x48>
 8002a86:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8002a88:	b940      	cbnz	r0, 8002a9c <HAL_DFSDM_FilterPollForRegConversion+0x48>
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8002a8a:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	bf14      	ite	ne
 8002a92:	2303      	movne	r3, #3
 8002a94:	2301      	moveq	r3, #1
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002a96:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_OK;
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002aa0:	6893      	ldr	r3, [r2, #8]
 8002aa2:	0799      	lsls	r1, r3, #30
 8002aa4:	d4ea      	bmi.n	8002a7c <HAL_DFSDM_FilterPollForRegConversion+0x28>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002aa6:	b124      	cbz	r4, 8002ab2 <HAL_DFSDM_FilterPollForRegConversion+0x5e>
 8002aa8:	f7ff fd94 	bl	80025d4 <HAL_GetTick>
 8002aac:	1b80      	subs	r0, r0, r6
 8002aae:	4284      	cmp	r4, r0
 8002ab0:	d2de      	bcs.n	8002a70 <HAL_DFSDM_FilterPollForRegConversion+0x1c>
          return HAL_TIMEOUT;
 8002ab2:	2003      	movs	r0, #3
 8002ab4:	bd70      	pop	{r4, r5, r6, pc}
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8002ab6:	2301      	movs	r3, #1
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002ab8:	4628      	mov	r0, r5
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8002aba:	652b      	str	r3, [r5, #80]	; 0x50
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002abc:	f7ff ffc8 	bl	8002a50 <HAL_DFSDM_FilterErrorCallback>
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8002ac0:	682b      	ldr	r3, [r5, #0]
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	e7dc      	b.n	8002a82 <HAL_DFSDM_FilterPollForRegConversion+0x2e>

08002ac8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff fd82 	bl	80025d4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ad0:	2c00      	cmp	r4, #0
 8002ad2:	d076      	beq.n	8002bc2 <HAL_DMA_Init+0xfa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad4:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ad6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002adc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002ae0:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8002ae2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aec:	e005      	b.n	8002afa <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aee:	f7ff fd71 	bl	80025d4 <HAL_GetTick>
 8002af2:	1b40      	subs	r0, r0, r5
 8002af4:	2805      	cmp	r0, #5
 8002af6:	d83e      	bhi.n	8002b76 <HAL_DMA_Init+0xae>
 8002af8:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	07d1      	lsls	r1, r2, #31
 8002afe:	d4f6      	bmi.n	8002aee <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b00:	68a1      	ldr	r1, [r4, #8]
 8002b02:	6862      	ldr	r2, [r4, #4]
 8002b04:	68e0      	ldr	r0, [r4, #12]
 8002b06:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b08:	6921      	ldr	r1, [r4, #16]
 8002b0a:	6965      	ldr	r5, [r4, #20]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b0c:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0e:	69a6      	ldr	r6, [r4, #24]
 8002b10:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b12:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b14:	4f37      	ldr	r7, [pc, #220]	; (8002bf4 <HAL_DMA_Init+0x12c>)
  tmp = hdma->Instance->CR;
 8002b16:	6819      	ldr	r1, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b18:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b1c:	400f      	ands	r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1e:	6a21      	ldr	r1, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b20:	4332      	orrs	r2, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b22:	2d04      	cmp	r5, #4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b24:	ea42 0200 	orr.w	r2, r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b28:	ea42 0201 	orr.w	r2, r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b2c:	ea42 0207 	orr.w	r2, r2, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b30:	d028      	beq.n	8002b84 <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b34:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b36:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b3a:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	482e      	ldr	r0, [pc, #184]	; (8002bf8 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b40:	492e      	ldr	r1, [pc, #184]	; (8002bfc <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b42:	3a10      	subs	r2, #16
  hdma->Instance->FCR = tmp;
 8002b44:	615d      	str	r5, [r3, #20]
  hdma->State = HAL_DMA_STATE_READY;
 8002b46:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b48:	fba0 0202 	umull	r0, r2, r0, r2
 8002b4c:	0912      	lsrs	r2, r2, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b4e:	5c88      	ldrb	r0, [r1, r2]
  
  if (stream_number > 3U)
 8002b50:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b52:	4a2b      	ldr	r2, [pc, #172]	; (8002c00 <HAL_DMA_Init+0x138>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b54:	f04f 0100 	mov.w	r1, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b58:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b5a:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b5e:	f04f 033f 	mov.w	r3, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b62:	bf88      	it	hi
 8002b64:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b66:	4083      	lsls	r3, r0
  return HAL_OK;
 8002b68:	4608      	mov	r0, r1
 8002b6a:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6c:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6e:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002b70:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8002b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b78:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8002b7a:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b7c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b7e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002b86:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmp |= hdma->Init.FIFOThreshold;
 8002b88:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b8a:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8002b8c:	f047 0504 	orr.w	r5, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b90:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8002b92:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002b94:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b96:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8002b9a:	4315      	orrs	r5, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d0cd      	beq.n	8002b3c <HAL_DMA_Init+0x74>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ba0:	b18e      	cbz	r6, 8002bc6 <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ba2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002ba6:	d018      	beq.n	8002bda <HAL_DMA_Init+0x112>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ba8:	2f02      	cmp	r7, #2
 8002baa:	d903      	bls.n	8002bb4 <HAL_DMA_Init+0xec>
 8002bac:	2f03      	cmp	r7, #3
 8002bae:	d1c5      	bne.n	8002b3c <HAL_DMA_Init+0x74>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb0:	01c2      	lsls	r2, r0, #7
 8002bb2:	d5c3      	bpl.n	8002b3c <HAL_DMA_Init+0x74>
        hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bb6:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8002bb8:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bba:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8002bc6:	2f01      	cmp	r7, #1
 8002bc8:	d003      	beq.n	8002bd2 <HAL_DMA_Init+0x10a>
 8002bca:	d3f1      	bcc.n	8002bb0 <HAL_DMA_Init+0xe8>
 8002bcc:	2f02      	cmp	r7, #2
 8002bce:	d1b5      	bne.n	8002b3c <HAL_DMA_Init+0x74>
 8002bd0:	e7ee      	b.n	8002bb0 <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bd2:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002bd6:	d1b1      	bne.n	8002b3c <HAL_DMA_Init+0x74>
 8002bd8:	e7ec      	b.n	8002bb4 <HAL_DMA_Init+0xec>
    switch (tmp)
 8002bda:	2f03      	cmp	r7, #3
 8002bdc:	d8ae      	bhi.n	8002b3c <HAL_DMA_Init+0x74>
 8002bde:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <HAL_DMA_Init+0x11c>)
 8002be0:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8002be4:	08002bb5 	.word	0x08002bb5
 8002be8:	08002bb1 	.word	0x08002bb1
 8002bec:	08002bb5 	.word	0x08002bb5
 8002bf0:	08002bd3 	.word	0x08002bd3
 8002bf4:	e010803f 	.word	0xe010803f
 8002bf8:	aaaaaaab 	.word	0xaaaaaaab
 8002bfc:	080081d4 	.word	0x080081d4
 8002c00:	fffffc00 	.word	0xfffffc00

08002c04 <HAL_DMA_Start_IT>:
{
 8002c04:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8002c06:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002c0a:	2c01      	cmp	r4, #1
 8002c0c:	d00e      	beq.n	8002c2c <HAL_DMA_Start_IT+0x28>
 8002c0e:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c10:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c14:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c16:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8002c18:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c1c:	d00a      	beq.n	8002c34 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8002c1e:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 8002c22:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002c2c:	2302      	movs	r3, #2
}
 8002c2e:	bcf0      	pop	{r4, r5, r6, r7}
 8002c30:	4618      	mov	r0, r3
 8002c32:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c34:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c36:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c38:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c3a:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3e:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c40:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c42:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c44:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c46:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002c4a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002c4c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c4e:	d019      	beq.n	8002c84 <HAL_DMA_Start_IT+0x80>
    hdma->Instance->PAR = SrcAddress;
 8002c50:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c52:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c54:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002c56:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8002c58:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5a:	408b      	lsls	r3, r1
 8002c5c:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	f043 0316 	orr.w	r3, r3, #22
 8002c64:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c66:	6963      	ldr	r3, [r4, #20]
 8002c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6c:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002c6e:	b11a      	cbz	r2, 8002c78 <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	f043 0308 	orr.w	r3, r3, #8
 8002c76:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002c78:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	6022      	str	r2, [r4, #0]
 8002c82:	e7d0      	b.n	8002c26 <HAL_DMA_Start_IT+0x22>
    hdma->Instance->PAR = DstAddress;
 8002c84:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002c86:	60e1      	str	r1, [r4, #12]
 8002c88:	e7e4      	b.n	8002c54 <HAL_DMA_Start_IT+0x50>
 8002c8a:	bf00      	nop

08002c8c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c8c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8002c90:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c92:	2a02      	cmp	r2, #2
 8002c94:	d003      	beq.n	8002c9e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c96:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8002c98:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c9c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002c9e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ca0:	2105      	movs	r1, #5
  return HAL_OK;
 8002ca2:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ca4:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop

08002cb4 <HAL_DMA_IRQHandler>:
{
 8002cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb6:	4604      	mov	r4, r0
 8002cb8:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8002cba:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	2208      	movs	r2, #8
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cbe:	6da7      	ldr	r7, [r4, #88]	; 0x58
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  __IO uint32_t count = 0;
 8002cc2:	9001      	str	r0, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc4:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8002cc6:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cc8:	4960      	ldr	r1, [pc, #384]	; (8002e4c <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cca:	4215      	tst	r5, r2
  uint32_t timeout = SystemCoreClock / 9600;
 8002ccc:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cce:	d003      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cd0:	6821      	ldr	r1, [r4, #0]
 8002cd2:	6808      	ldr	r0, [r1, #0]
 8002cd4:	0740      	lsls	r0, r0, #29
 8002cd6:	d476      	bmi.n	8002dc6 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd8:	4a5d      	ldr	r2, [pc, #372]	; (8002e50 <HAL_DMA_IRQHandler+0x19c>)
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	4215      	tst	r5, r2
 8002cde:	d003      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ce0:	6821      	ldr	r1, [r4, #0]
 8002ce2:	6949      	ldr	r1, [r1, #20]
 8002ce4:	0608      	lsls	r0, r1, #24
 8002ce6:	d468      	bmi.n	8002dba <HAL_DMA_IRQHandler+0x106>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce8:	4a5a      	ldr	r2, [pc, #360]	; (8002e54 <HAL_DMA_IRQHandler+0x1a0>)
 8002cea:	409a      	lsls	r2, r3
 8002cec:	4215      	tst	r5, r2
 8002cee:	d003      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cf0:	6821      	ldr	r1, [r4, #0]
 8002cf2:	6809      	ldr	r1, [r1, #0]
 8002cf4:	0789      	lsls	r1, r1, #30
 8002cf6:	d45a      	bmi.n	8002dae <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	4215      	tst	r5, r2
 8002cfe:	d003      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d00:	6821      	ldr	r1, [r4, #0]
 8002d02:	6808      	ldr	r0, [r1, #0]
 8002d04:	0700      	lsls	r0, r0, #28
 8002d06:	d43f      	bmi.n	8002d88 <HAL_DMA_IRQHandler+0xd4>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d08:	2220      	movs	r2, #32
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	4215      	tst	r5, r2
 8002d0e:	d003      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d10:	6821      	ldr	r1, [r4, #0]
 8002d12:	6808      	ldr	r0, [r1, #0]
 8002d14:	06c0      	lsls	r0, r0, #27
 8002d16:	d425      	bmi.n	8002d64 <HAL_DMA_IRQHandler+0xb0>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d1a:	b30b      	cbz	r3, 8002d60 <HAL_DMA_IRQHandler+0xac>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d1e:	07da      	lsls	r2, r3, #31
 8002d20:	d51a      	bpl.n	8002d58 <HAL_DMA_IRQHandler+0xa4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d22:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8002d24:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d26:	4a4c      	ldr	r2, [pc, #304]	; (8002e58 <HAL_DMA_IRQHandler+0x1a4>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8002d2c:	fba2 3206 	umull	r3, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 8002d30:	680b      	ldr	r3, [r1, #0]
 8002d32:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8002d36:	0a92      	lsrs	r2, r2, #10
      __HAL_DMA_DISABLE(hdma);
 8002d38:	600b      	str	r3, [r1, #0]
 8002d3a:	e002      	b.n	8002d42 <HAL_DMA_IRQHandler+0x8e>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d3c:	680b      	ldr	r3, [r1, #0]
 8002d3e:	07db      	lsls	r3, r3, #31
 8002d40:	d504      	bpl.n	8002d4c <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 8002d42:	9b01      	ldr	r3, [sp, #4]
 8002d44:	3301      	adds	r3, #1
 8002d46:	429a      	cmp	r2, r3
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	d2f7      	bcs.n	8002d3c <HAL_DMA_IRQHandler+0x88>
      __HAL_UNLOCK(hdma);
 8002d4c:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8002d50:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002d54:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002d58:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d5a:	b10b      	cbz	r3, 8002d60 <HAL_DMA_IRQHandler+0xac>
      hdma->XferErrorCallback(hdma);
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	4798      	blx	r3
}
 8002d60:	b003      	add	sp, #12
 8002d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d64:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d66:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002d6a:	2a05      	cmp	r2, #5
 8002d6c:	d03b      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d6e:	680b      	ldr	r3, [r1, #0]
 8002d70:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d74:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d76:	d054      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d78:	0319      	lsls	r1, r3, #12
 8002d7a:	d55f      	bpl.n	8002e3c <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 8002d7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0ca      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 8002d82:	4620      	mov	r0, r4
 8002d84:	4798      	blx	r3
 8002d86:	e7c7      	b.n	8002d18 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d88:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d8a:	680a      	ldr	r2, [r1, #0]
 8002d8c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d90:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d92:	d122      	bne.n	8002dda <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d94:	05d2      	lsls	r2, r2, #23
 8002d96:	d403      	bmi.n	8002da0 <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d98:	680a      	ldr	r2, [r1, #0]
 8002d9a:	f022 0208 	bic.w	r2, r2, #8
 8002d9e:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002da0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002da2:	2a00      	cmp	r2, #0
 8002da4:	d0b0      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8002da6:	4620      	mov	r0, r4
 8002da8:	4790      	blx	r2
 8002daa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002dac:	e7ac      	b.n	8002d08 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dae:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002db0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002db2:	f042 0204 	orr.w	r2, r2, #4
 8002db6:	6562      	str	r2, [r4, #84]	; 0x54
 8002db8:	e79e      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dba:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dbc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002dbe:	f042 0202 	orr.w	r2, r2, #2
 8002dc2:	6562      	str	r2, [r4, #84]	; 0x54
 8002dc4:	e790      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dc6:	6808      	ldr	r0, [r1, #0]
 8002dc8:	f020 0004 	bic.w	r0, r0, #4
 8002dcc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dce:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	6562      	str	r2, [r4, #84]	; 0x54
 8002dd8:	e77e      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dda:	0311      	lsls	r1, r2, #12
 8002ddc:	d5e0      	bpl.n	8002da0 <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dde:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002de0:	2a00      	cmp	r2, #0
 8002de2:	d1e0      	bne.n	8002da6 <HAL_DMA_IRQHandler+0xf2>
 8002de4:	e790      	b.n	8002d08 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002de6:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002de8:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dea:	f022 0216 	bic.w	r2, r2, #22
 8002dee:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002df0:	694a      	ldr	r2, [r1, #20]
 8002df2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df6:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df8:	b320      	cbz	r0, 8002e44 <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfa:	680a      	ldr	r2, [r1, #0]
 8002dfc:	f022 0208 	bic.w	r2, r2, #8
 8002e00:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e02:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8002e04:	2500      	movs	r5, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002e06:	2001      	movs	r0, #1
        if(hdma->XferAbortCallback != NULL)
 8002e08:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002e10:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002e14:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	d0a1      	beq.n	8002d60 <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	4788      	blx	r1
 8002e20:	e79e      	b.n	8002d60 <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e22:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002e26:	d1a9      	bne.n	8002d7c <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e28:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e2c:	f022 0210 	bic.w	r2, r2, #16
 8002e30:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8002e32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002e36:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8002e3a:	e79f      	b.n	8002d7c <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 8002e3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d19f      	bne.n	8002d82 <HAL_DMA_IRQHandler+0xce>
 8002e42:	e769      	b.n	8002d18 <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e44:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e46:	2a00      	cmp	r2, #0
 8002e48:	d1d7      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x146>
 8002e4a:	e7da      	b.n	8002e02 <HAL_DMA_IRQHandler+0x14e>
 8002e4c:	20000010 	.word	0x20000010
 8002e50:	00800001 	.word	0x00800001
 8002e54:	00800004 	.word	0x00800004
 8002e58:	1b4e81b5 	.word	0x1b4e81b5

08002e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e60:	f8d1 c000 	ldr.w	ip, [r1]
 8002e64:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e66:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e68:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8003098 <HAL_GPIO_Init+0x23c>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	f8df e22c 	ldr.w	lr, [pc, #556]	; 800309c <HAL_GPIO_Init+0x240>
 8002e70:	e003      	b.n	8002e7a <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e72:	3501      	adds	r5, #1
 8002e74:	2d10      	cmp	r5, #16
 8002e76:	f000 80bf 	beq.w	8002ff8 <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e7e:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d1f5      	bne.n	8002e72 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e86:	684e      	ldr	r6, [r1, #4]
 8002e88:	f026 0910 	bic.w	r9, r6, #16
 8002e8c:	f1b9 0f02 	cmp.w	r9, #2
 8002e90:	f040 80b5 	bne.w	8002ffe <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 8002e94:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e98:	f005 0a07 	and.w	sl, r5, #7
 8002e9c:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ea0:	690c      	ldr	r4, [r1, #16]
 8002ea2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ea6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002eaa:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eae:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002eb2:	fa04 f40a 	lsl.w	r4, r4, sl
 8002eb6:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eba:	ea27 070b 	bic.w	r7, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ebe:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ec2:	433c      	orrs	r4, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ec4:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ec8:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3] = temp;
 8002ecc:	f8c9 4020 	str.w	r4, [r9, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ed0:	ea6f 040b 	mvn.w	r4, fp
      temp = GPIOx->MODER;
 8002ed4:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ed8:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002edc:	ea04 0909 	and.w	r9, r4, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ee0:	ea47 0709 	orr.w	r7, r7, r9
      GPIOx->MODER = temp;
 8002ee4:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8002ee6:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ee8:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002eec:	ea07 0b04 	and.w	fp, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ef0:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ef2:	fa09 f905 	lsl.w	r9, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ef6:	fa07 f70a 	lsl.w	r7, r7, sl
 8002efa:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8002efe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002f00:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f02:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f06:	ea49 0303 	orr.w	r3, r9, r3
        GPIOx->OTYPER = temp;
 8002f0a:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8002f0c:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f0e:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f10:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f12:	fa03 f30a 	lsl.w	r3, r3, sl
 8002f16:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8002f18:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f1a:	00f3      	lsls	r3, r6, #3
 8002f1c:	d5a9      	bpl.n	8002e72 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1e:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8002f22:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f26:	f005 0303 	and.w	r3, r5, #3
 8002f2a:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002f32:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f36:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f38:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
 8002f3c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002f40:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f44:	fa09 f903 	lsl.w	r9, r9, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f48:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8002f4c:	9401      	str	r4, [sp, #4]
 8002f4e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002f50:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f52:	ea24 0a09 	bic.w	sl, r4, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f56:	4c4b      	ldr	r4, [pc, #300]	; (8003084 <HAL_GPIO_Init+0x228>)
 8002f58:	42a0      	cmp	r0, r4
 8002f5a:	d069      	beq.n	8003030 <HAL_GPIO_Init+0x1d4>
 8002f5c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f60:	42a0      	cmp	r0, r4
 8002f62:	d067      	beq.n	8003034 <HAL_GPIO_Init+0x1d8>
 8002f64:	4c48      	ldr	r4, [pc, #288]	; (8003088 <HAL_GPIO_Init+0x22c>)
 8002f66:	42a0      	cmp	r0, r4
 8002f68:	d069      	beq.n	800303e <HAL_GPIO_Init+0x1e2>
 8002f6a:	4c48      	ldr	r4, [pc, #288]	; (800308c <HAL_GPIO_Init+0x230>)
 8002f6c:	42a0      	cmp	r0, r4
 8002f6e:	d06b      	beq.n	8003048 <HAL_GPIO_Init+0x1ec>
 8002f70:	4c47      	ldr	r4, [pc, #284]	; (8003090 <HAL_GPIO_Init+0x234>)
 8002f72:	42a0      	cmp	r0, r4
 8002f74:	d06d      	beq.n	8003052 <HAL_GPIO_Init+0x1f6>
 8002f76:	4c47      	ldr	r4, [pc, #284]	; (8003094 <HAL_GPIO_Init+0x238>)
 8002f78:	42a0      	cmp	r0, r4
 8002f7a:	d06f      	beq.n	800305c <HAL_GPIO_Init+0x200>
 8002f7c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80030a0 <HAL_GPIO_Init+0x244>
 8002f80:	4548      	cmp	r0, r9
 8002f82:	d070      	beq.n	8003066 <HAL_GPIO_Init+0x20a>
 8002f84:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80030a4 <HAL_GPIO_Init+0x248>
 8002f88:	4548      	cmp	r0, r9
 8002f8a:	d071      	beq.n	8003070 <HAL_GPIO_Init+0x214>
 8002f8c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80030a8 <HAL_GPIO_Init+0x24c>
 8002f90:	4548      	cmp	r0, r9
 8002f92:	d072      	beq.n	800307a <HAL_GPIO_Init+0x21e>
 8002f94:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80030ac <HAL_GPIO_Init+0x250>
 8002f98:	4548      	cmp	r0, r9
 8002f9a:	bf0c      	ite	eq
 8002f9c:	f04f 0909 	moveq.w	r9, #9
 8002fa0:	f04f 090a 	movne.w	r9, #10
 8002fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8002fa8:	ea43 030a 	orr.w	r3, r3, sl
        temp &= ~((uint32_t)iocurrent);
 8002fac:	43d4      	mvns	r4, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fae:	3501      	adds	r5, #1
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fb0:	60bb      	str	r3, [r7, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fb2:	03f7      	lsls	r7, r6, #15
        temp = EXTI->IMR;
 8002fb4:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8002fb8:	bf54      	ite	pl
 8002fba:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002fbc:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fbe:	03b7      	lsls	r7, r6, #14
        EXTI->IMR = temp;
 8002fc0:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 8002fc4:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	bf54      	ite	pl
 8002fca:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002fcc:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fce:	02f7      	lsls	r7, r6, #11
        EXTI->EMR = temp;
 8002fd0:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 8002fd4:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	bf54      	ite	pl
 8002fda:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002fdc:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fde:	02b6      	lsls	r6, r6, #10
        EXTI->RTSR = temp;
 8002fe0:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 8002fe4:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8002fe8:	bf54      	ite	pl
 8002fea:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002fec:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fee:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8002ff0:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ff4:	f47f af41 	bne.w	8002e7a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8002ff8:	b003      	add	sp, #12
 8002ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ffe:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003002:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8003004:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003008:	f109 39ff 	add.w	r9, r9, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800300c:	ea06 0704 	and.w	r7, r6, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003010:	fa04 f40a 	lsl.w	r4, r4, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003014:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003018:	ea6f 0404 	mvn.w	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800301c:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003020:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003024:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 8003028:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800302a:	f63f af6f 	bhi.w	8002f0c <HAL_GPIO_Init+0xb0>
 800302e:	e75a      	b.n	8002ee6 <HAL_GPIO_Init+0x8a>
 8003030:	2300      	movs	r3, #0
 8003032:	e7b9      	b.n	8002fa8 <HAL_GPIO_Init+0x14c>
 8003034:	f04f 0901 	mov.w	r9, #1
 8003038:	fa09 f303 	lsl.w	r3, r9, r3
 800303c:	e7b4      	b.n	8002fa8 <HAL_GPIO_Init+0x14c>
 800303e:	f04f 0902 	mov.w	r9, #2
 8003042:	fa09 f303 	lsl.w	r3, r9, r3
 8003046:	e7af      	b.n	8002fa8 <HAL_GPIO_Init+0x14c>
 8003048:	f04f 0903 	mov.w	r9, #3
 800304c:	fa09 f303 	lsl.w	r3, r9, r3
 8003050:	e7aa      	b.n	8002fa8 <HAL_GPIO_Init+0x14c>
 8003052:	f04f 0904 	mov.w	r9, #4
 8003056:	fa09 f303 	lsl.w	r3, r9, r3
 800305a:	e7a5      	b.n	8002fa8 <HAL_GPIO_Init+0x14c>
 800305c:	f04f 0905 	mov.w	r9, #5
 8003060:	fa09 f303 	lsl.w	r3, r9, r3
 8003064:	e7a0      	b.n	8002fa8 <HAL_GPIO_Init+0x14c>
 8003066:	f04f 0906 	mov.w	r9, #6
 800306a:	fa09 f303 	lsl.w	r3, r9, r3
 800306e:	e79b      	b.n	8002fa8 <HAL_GPIO_Init+0x14c>
 8003070:	f04f 0907 	mov.w	r9, #7
 8003074:	fa09 f303 	lsl.w	r3, r9, r3
 8003078:	e796      	b.n	8002fa8 <HAL_GPIO_Init+0x14c>
 800307a:	f04f 0908 	mov.w	r9, #8
 800307e:	fa09 f303 	lsl.w	r3, r9, r3
 8003082:	e791      	b.n	8002fa8 <HAL_GPIO_Init+0x14c>
 8003084:	40020000 	.word	0x40020000
 8003088:	40020800 	.word	0x40020800
 800308c:	40020c00 	.word	0x40020c00
 8003090:	40021000 	.word	0x40021000
 8003094:	40021400 	.word	0x40021400
 8003098:	40023800 	.word	0x40023800
 800309c:	40013c00 	.word	0x40013c00
 80030a0:	40021800 	.word	0x40021800
 80030a4:	40021c00 	.word	0x40021c00
 80030a8:	40022000 	.word	0x40022000
 80030ac:	40022400 	.word	0x40022400

080030b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b0:	b902      	cbnz	r2, 80030b4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030b2:	0409      	lsls	r1, r1, #16
 80030b4:	6181      	str	r1, [r0, #24]
 80030b6:	4770      	bx	lr

080030b8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80030b8:	6943      	ldr	r3, [r0, #20]
 80030ba:	4059      	eors	r1, r3
 80030bc:	6141      	str	r1, [r0, #20]
 80030be:	4770      	bx	lr

080030c0 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d04f      	beq.n	8003164 <HAL_I2C_Init+0xa4>
{
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80030c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80030ca:	4604      	mov	r4, r0
 80030cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d03e      	beq.n	8003152 <HAL_I2C_Init+0x92>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d6:	2124      	movs	r1, #36	; 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030d8:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030da:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80030de:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030e4:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80030e6:	f021 0101 	bic.w	r1, r1, #1
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ea:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 80030ec:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030ee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f6:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030f8:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030fa:	d02f      	beq.n	800315c <HAL_I2C_Init+0x9c>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030fc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003100:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003102:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003104:	d021      	beq.n	800314a <HAL_I2C_Init+0x8a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003106:	685e      	ldr	r6, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800310a:	4d17      	ldr	r5, [pc, #92]	; (8003168 <HAL_I2C_Init+0xa8>)
  hi2c->State = HAL_I2C_STATE_READY;
 800310c:	f04f 0e20 	mov.w	lr, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003110:	6922      	ldr	r2, [r4, #16]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8003112:	4608      	mov	r0, r1
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003114:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003116:	6966      	ldr	r6, [r4, #20]
 8003118:	69a7      	ldr	r7, [r4, #24]
 800311a:	4332      	orrs	r2, r6
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800311c:	605d      	str	r5, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800311e:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003120:	68de      	ldr	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003122:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003126:	6a27      	ldr	r7, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003128:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800312c:	433d      	orrs	r5, r7
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800312e:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003130:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003132:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800313e:	f884 e041 	strb.w	lr, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003142:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  return HAL_OK;
 8003148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800314a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	e7d9      	b.n	8003106 <HAL_I2C_Init+0x46>
    hi2c->Lock = HAL_UNLOCKED;
 8003152:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003156:	f7fe fc95 	bl	8001a84 <HAL_I2C_MspInit>
 800315a:	e7bb      	b.n	80030d4 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800315c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	e7d0      	b.n	8003106 <HAL_I2C_Init+0x46>
    return HAL_ERROR;
 8003164:	2001      	movs	r0, #1
 8003166:	4770      	bx	lr
 8003168:	02008000 	.word	0x02008000

0800316c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800316c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	d001      	beq.n	800317a <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003176:	2002      	movs	r0, #2
 8003178:	4770      	bx	lr
 800317a:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 800317c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003180:	2801      	cmp	r0, #1
 8003182:	d0f8      	beq.n	8003176 <HAL_I2CEx_ConfigAnalogFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003184:	2024      	movs	r0, #36	; 0x24
{
 8003186:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 8003188:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800318a:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800318c:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003190:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 8003192:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8003194:	f025 0501 	bic.w	r5, r5, #1
 8003198:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800319a:	6825      	ldr	r5, [r4, #0]
 800319c:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80031a0:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80031a2:	6825      	ldr	r5, [r4, #0]
 80031a4:	4329      	orrs	r1, r5
 80031a6:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 80031a8:	6821      	ldr	r1, [r4, #0]
 80031aa:	f041 0101 	orr.w	r1, r1, #1
 80031ae:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80031b0:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 80031b8:	bc70      	pop	{r4, r5, r6}
 80031ba:	4770      	bx	lr

080031bc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80031bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d001      	beq.n	80031ca <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2002      	movs	r0, #2
 80031c8:	4770      	bx	lr
 80031ca:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 80031cc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80031d0:	2801      	cmp	r0, #1
 80031d2:	d0f8      	beq.n	80031c6 <HAL_I2CEx_ConfigDigitalFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d4:	2024      	movs	r0, #36	; 0x24
{
 80031d6:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 80031d8:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80031da:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031dc:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80031e0:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 80031e2:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 80031e4:	f025 0501 	bic.w	r5, r5, #1
 80031e8:	6025      	str	r5, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 80031ea:	6825      	ldr	r5, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80031ec:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80031f0:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80031f4:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 80031f6:	6821      	ldr	r1, [r4, #0]
 80031f8:	f041 0101 	orr.w	r1, r1, #1
 80031fc:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80031fe:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003202:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003206:	bc70      	pop	{r4, r5, r6}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop

0800320c <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t i = 0;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800320c:	2800      	cmp	r0, #0
 800320e:	f000 8213 	beq.w	8003638 <HAL_PCD_Init+0x42c>
{
 8003212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003216:	f04f 0803 	mov.w	r8, #3
 800321a:	4604      	mov	r4, r0
{
 800321c:	b08b      	sub	sp, #44	; 0x2c

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800321e:	4606      	mov	r6, r0
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003220:	f880 83b9 	strb.w	r8, [r0, #953]	; 0x3b9

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003224:	2501      	movs	r5, #1
  HAL_PCD_MspInit(hpcd);
 8003226:	f7ff f949 	bl	80024bc <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 800322a:	6820      	ldr	r0, [r4, #0]
 800322c:	f002 fac0 	bl	80057b0 <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003230:	f856 eb10 	ldr.w	lr, [r6], #16
 8003234:	466f      	mov	r7, sp
   hpcd->IN_ep[i].num = i;
 8003236:	f04f 0a04 	mov.w	sl, #4
 800323a:	f04f 0b02 	mov.w	fp, #2
 800323e:	f04f 0905 	mov.w	r9, #5
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003242:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003244:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003246:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003248:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800324a:	1d22      	adds	r2, r4, #4
 800324c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003250:	e887 0003 	stmia.w	r7, {r0, r1}
 8003254:	4670      	mov	r0, lr
   hpcd->IN_ep[i].num = i;
 8003256:	f04f 0709 	mov.w	r7, #9
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800325a:	ca0e      	ldmia	r2, {r1, r2, r3}
 800325c:	f002 fa4c 	bl	80056f8 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8003260:	2100      	movs	r1, #0
 8003262:	6820      	ldr	r0, [r4, #0]
 8003264:	f002 faac 	bl	80057c0 <USB_SetCurrentMode>
   hpcd->IN_ep[i].num = i;
 8003268:	2300      	movs	r3, #0
 800326a:	f04f 0107 	mov.w	r1, #7
 800326e:	2006      	movs	r0, #6
 8003270:	2208      	movs	r2, #8
 8003272:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003276:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b

   hpcd->Instance->DIEPTXF[i] = 0;
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 800327a:	f104 0c10 	add.w	ip, r4, #16
   hpcd->IN_ep[i].maxpacket =  0;
 800327e:	6423      	str	r3, [r4, #64]	; 0x40
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8003280:	46ee      	mov	lr, sp
   hpcd->IN_ep[i].xfer_buff = 0;
 8003282:	6463      	str	r3, [r4, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0;
 8003284:	64e3      	str	r3, [r4, #76]	; 0x4c
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003286:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
   hpcd->IN_ep[i].maxpacket =  0;
 800328a:	65e3      	str	r3, [r4, #92]	; 0x5c
   hpcd->IN_ep[i].xfer_buff = 0;
 800328c:	6623      	str	r3, [r4, #96]	; 0x60
   hpcd->IN_ep[i].xfer_len = 0;
 800328e:	66a3      	str	r3, [r4, #104]	; 0x68
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003290:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
   hpcd->IN_ep[i].maxpacket =  0;
 8003294:	67a3      	str	r3, [r4, #120]	; 0x78
   hpcd->IN_ep[i].xfer_buff = 0;
 8003296:	67e3      	str	r3, [r4, #124]	; 0x7c
   hpcd->IN_ep[i].xfer_len = 0;
 8003298:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800329c:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
   hpcd->IN_ep[i].maxpacket =  0;
 80032a0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   hpcd->IN_ep[i].xfer_buff = 0;
 80032a4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
   hpcd->IN_ep[i].xfer_len = 0;
 80032a8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032ac:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
   hpcd->IN_ep[i].maxpacket =  0;
 80032b0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   hpcd->IN_ep[i].xfer_buff = 0;
 80032b4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   hpcd->IN_ep[i].xfer_len = 0;
 80032b8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   hpcd->IN_ep[i].num = i;
 80032bc:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   hpcd->IN_ep[i].is_in = 1;
 80032c0:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80032c4:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
   hpcd->IN_ep[i].num = i;
 80032c8:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
   hpcd->IN_ep[i].is_in = 1;
 80032cc:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
 80032d0:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
 80032d4:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
 80032d8:	f884 50c5 	strb.w	r5, [r4, #197]	; 0xc5
   hpcd->IN_ep[i].num = i;
 80032dc:	f884 b070 	strb.w	fp, [r4, #112]	; 0x70
 80032e0:	f884 a0a8 	strb.w	sl, [r4, #168]	; 0xa8
 80032e4:	f884 90c4 	strb.w	r9, [r4, #196]	; 0xc4
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032e8:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
   hpcd->IN_ep[i].num = i;
 80032ec:	f884 10fc 	strb.w	r1, [r4, #252]	; 0xfc
 80032f0:	f04f 010b 	mov.w	r1, #11
 80032f4:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
 80032f8:	f04f 070a 	mov.w	r7, #10
   hpcd->IN_ep[i].maxpacket =  0;
 80032fc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
   hpcd->IN_ep[i].xfer_buff = 0;
 8003300:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
   hpcd->IN_ep[i].xfer_len = 0;
 8003304:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003308:	f884 30e3 	strb.w	r3, [r4, #227]	; 0xe3
   hpcd->IN_ep[i].maxpacket =  0;
 800330c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
   hpcd->IN_ep[i].xfer_buff = 0;
 8003310:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   hpcd->IN_ep[i].xfer_len = 0;
 8003314:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003318:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   hpcd->IN_ep[i].maxpacket =  0;
 800331c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   hpcd->IN_ep[i].xfer_buff = 0;
 8003320:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   hpcd->IN_ep[i].xfer_len = 0;
 8003324:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003328:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
   hpcd->IN_ep[i].maxpacket =  0;
 800332c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   hpcd->IN_ep[i].xfer_buff = 0;
 8003330:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   hpcd->IN_ep[i].xfer_len = 0;
 8003334:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003338:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
   hpcd->IN_ep[i].maxpacket =  0;
 800333c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
   hpcd->IN_ep[i].xfer_buff = 0;
 8003340:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   hpcd->IN_ep[i].xfer_len = 0;
 8003344:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003348:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
   hpcd->IN_ep[i].maxpacket =  0;
 800334c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   hpcd->IN_ep[i].xfer_buff = 0;
 8003350:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
   hpcd->IN_ep[i].num = i;
 8003354:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
 8003358:	f884 2118 	strb.w	r2, [r4, #280]	; 0x118
 800335c:	f884 7150 	strb.w	r7, [r4, #336]	; 0x150
   hpcd->IN_ep[i].is_in = 1;
 8003360:	f884 50e1 	strb.w	r5, [r4, #225]	; 0xe1
 8003364:	f884 50fd 	strb.w	r5, [r4, #253]	; 0xfd
 8003368:	f884 5119 	strb.w	r5, [r4, #281]	; 0x119
 800336c:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8003370:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
   hpcd->IN_ep[i].xfer_len = 0;
 8003374:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
   hpcd->IN_ep[i].num = i;
 8003378:	f884 116c 	strb.w	r1, [r4, #364]	; 0x16c
 800337c:	f04f 010c 	mov.w	r1, #12
 8003380:	6827      	ldr	r7, [r4, #0]
 8003382:	f884 1188 	strb.w	r1, [r4, #392]	; 0x188
 8003386:	f04f 010d 	mov.w	r1, #13
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800338a:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
   hpcd->IN_ep[i].num = i;
 800338e:	f884 11a4 	strb.w	r1, [r4, #420]	; 0x1a4
 8003392:	f04f 010e 	mov.w	r1, #14
   hpcd->IN_ep[i].maxpacket =  0;
 8003396:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
   hpcd->IN_ep[i].num = i;
 800339a:	f884 11c0 	strb.w	r1, [r4, #448]	; 0x1c0
   hpcd->OUT_ep[i].num = i;
 800339e:	f04f 0107 	mov.w	r1, #7
   hpcd->IN_ep[i].xfer_buff = 0;
 80033a2:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
   hpcd->IN_ep[i].xfer_len = 0;
 80033a6:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033aa:	f884 318b 	strb.w	r3, [r4, #395]	; 0x18b
   hpcd->IN_ep[i].maxpacket =  0;
 80033ae:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
   hpcd->IN_ep[i].xfer_buff = 0;
 80033b2:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
   hpcd->IN_ep[i].xfer_len = 0;
 80033b6:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ba:	f884 31a7 	strb.w	r3, [r4, #423]	; 0x1a7
   hpcd->IN_ep[i].maxpacket =  0;
 80033be:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
   hpcd->IN_ep[i].xfer_buff = 0;
 80033c2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
   hpcd->IN_ep[i].xfer_len = 0;
 80033c6:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ca:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
   hpcd->IN_ep[i].maxpacket =  0;
 80033ce:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   hpcd->IN_ep[i].xfer_buff = 0;
 80033d2:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
   hpcd->IN_ep[i].xfer_len = 0;
 80033d6:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   hpcd->OUT_ep[i].is_in = 0;
 80033da:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
   hpcd->OUT_ep[i].num = i;
 80033de:	f884 31f8 	strb.w	r3, [r4, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80033e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033e4:	f884 31fb 	strb.w	r3, [r4, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 80033e8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0;
 80033ec:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0;
 80033f0:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
   hpcd->IN_ep[i].is_in = 1;
 80033f4:	f884 516d 	strb.w	r5, [r4, #365]	; 0x16d
 80033f8:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
 80033fc:	f884 51a5 	strb.w	r5, [r4, #421]	; 0x1a5
 8003400:	f884 51c1 	strb.w	r5, [r4, #449]	; 0x1c1
   hpcd->Instance->DIEPTXF[i] = 0;
 8003404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   hpcd->OUT_ep[i].is_in = 0;
 8003408:	f884 3215 	strb.w	r3, [r4, #533]	; 0x215
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800340c:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
   hpcd->OUT_ep[i].maxpacket = 0;
 8003410:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003414:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
   hpcd->OUT_ep[i].xfer_len = 0;
 8003418:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
   hpcd->OUT_ep[i].num = i;
 800341c:	f884 5214 	strb.w	r5, [r4, #532]	; 0x214
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003420:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
   hpcd->Instance->DIEPTXF[i] = 0;
 8003424:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   hpcd->OUT_ep[i].is_in = 0;
 8003428:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800342c:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
   hpcd->OUT_ep[i].maxpacket = 0;
 8003430:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003434:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
   hpcd->OUT_ep[i].xfer_len = 0;
 8003438:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
   hpcd->OUT_ep[i].num = i;
 800343c:	f884 b230 	strb.w	fp, [r4, #560]	; 0x230
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003440:	f8a4 b076 	strh.w	fp, [r4, #118]	; 0x76
   hpcd->Instance->DIEPTXF[i] = 0;
 8003444:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   hpcd->OUT_ep[i].is_in = 0;
 8003448:	f884 324d 	strb.w	r3, [r4, #589]	; 0x24d
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800344c:	f884 324f 	strb.w	r3, [r4, #591]	; 0x24f
   hpcd->OUT_ep[i].maxpacket = 0;
 8003450:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003454:	f8c4 3258 	str.w	r3, [r4, #600]	; 0x258
   hpcd->OUT_ep[i].xfer_len = 0;
 8003458:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
   hpcd->OUT_ep[i].num = i;
 800345c:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003460:	f8a4 8092 	strh.w	r8, [r4, #146]	; 0x92
   hpcd->Instance->DIEPTXF[i] = 0;
 8003464:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   hpcd->OUT_ep[i].is_in = 0;
 8003468:	f884 3269 	strb.w	r3, [r4, #617]	; 0x269
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800346c:	f884 326b 	strb.w	r3, [r4, #619]	; 0x26b
   hpcd->OUT_ep[i].maxpacket = 0;
 8003470:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003474:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
   hpcd->OUT_ep[i].xfer_len = 0;
 8003478:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
   hpcd->OUT_ep[i].num = i;
 800347c:	f884 a268 	strb.w	sl, [r4, #616]	; 0x268
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003480:	f8a4 a0ae 	strh.w	sl, [r4, #174]	; 0xae
   hpcd->Instance->DIEPTXF[i] = 0;
 8003484:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   hpcd->OUT_ep[i].is_in = 0;
 8003488:	f884 3285 	strb.w	r3, [r4, #645]	; 0x285
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800348c:	f884 3287 	strb.w	r3, [r4, #647]	; 0x287
   hpcd->OUT_ep[i].maxpacket = 0;
 8003490:	f8c4 328c 	str.w	r3, [r4, #652]	; 0x28c
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003494:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
   hpcd->OUT_ep[i].xfer_len = 0;
 8003498:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
   hpcd->OUT_ep[i].num = i;
 800349c:	f884 9284 	strb.w	r9, [r4, #644]	; 0x284
   hpcd->IN_ep[i].tx_fifo_num = i;
 80034a0:	f8a4 90ca 	strh.w	r9, [r4, #202]	; 0xca
   hpcd->Instance->DIEPTXF[i] = 0;
 80034a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   hpcd->OUT_ep[i].is_in = 0;
 80034a8:	f884 32a1 	strb.w	r3, [r4, #673]	; 0x2a1
   hpcd->OUT_ep[i].num = i;
 80034ac:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
   hpcd->IN_ep[i].tx_fifo_num = i;
 80034b0:	f8a4 00e6 	strh.w	r0, [r4, #230]	; 0xe6
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034b4:	f884 32a3 	strb.w	r3, [r4, #675]	; 0x2a3
   hpcd->OUT_ep[i].maxpacket = 0;
 80034b8:	f8c4 32a8 	str.w	r3, [r4, #680]	; 0x2a8
   hpcd->OUT_ep[i].xfer_buff = 0;
 80034bc:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
   hpcd->OUT_ep[i].xfer_len = 0;
 80034c0:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
   hpcd->Instance->DIEPTXF[i] = 0;
 80034c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
   hpcd->OUT_ep[i].num = i;
 80034c8:	f884 12bc 	strb.w	r1, [r4, #700]	; 0x2bc
   hpcd->IN_ep[i].tx_fifo_num = i;
 80034cc:	f04f 0107 	mov.w	r1, #7
   hpcd->OUT_ep[i].is_in = 0;
 80034d0:	f884 32bd 	strb.w	r3, [r4, #701]	; 0x2bd
   hpcd->IN_ep[i].tx_fifo_num = i;
 80034d4:	f8a4 1102 	strh.w	r1, [r4, #258]	; 0x102
   hpcd->OUT_ep[i].num = i;
 80034d8:	f04f 0109 	mov.w	r1, #9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034dc:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
   hpcd->OUT_ep[i].maxpacket = 0;
 80034e0:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   hpcd->OUT_ep[i].xfer_buff = 0;
 80034e4:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
   hpcd->OUT_ep[i].xfer_len = 0;
 80034e8:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
   hpcd->Instance->DIEPTXF[i] = 0;
 80034ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   hpcd->OUT_ep[i].is_in = 0;
 80034f0:	f884 32d9 	strb.w	r3, [r4, #729]	; 0x2d9
   hpcd->OUT_ep[i].num = i;
 80034f4:	f884 22d8 	strb.w	r2, [r4, #728]	; 0x2d8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80034f8:	f8a4 211e 	strh.w	r2, [r4, #286]	; 0x11e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034fc:	f884 32db 	strb.w	r3, [r4, #731]	; 0x2db
   hpcd->OUT_ep[i].maxpacket = 0;
 8003500:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003504:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
   hpcd->OUT_ep[i].xfer_len = 0;
 8003508:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
   hpcd->Instance->DIEPTXF[i] = 0;
 800350c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
   hpcd->OUT_ep[i].is_in = 0;
 8003510:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
   hpcd->OUT_ep[i].num = i;
 8003514:	f884 12f4 	strb.w	r1, [r4, #756]	; 0x2f4
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003518:	f04f 0109 	mov.w	r1, #9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800351c:	f884 32f7 	strb.w	r3, [r4, #759]	; 0x2f7
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003520:	f8a4 113a 	strh.w	r1, [r4, #314]	; 0x13a
   hpcd->OUT_ep[i].num = i;
 8003524:	f04f 010a 	mov.w	r1, #10
   hpcd->OUT_ep[i].maxpacket = 0;
 8003528:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
   hpcd->OUT_ep[i].xfer_buff = 0;
 800352c:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
   hpcd->OUT_ep[i].xfer_len = 0;
 8003530:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   hpcd->Instance->DIEPTXF[i] = 0;
 8003534:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   hpcd->OUT_ep[i].num = i;
 8003538:	f884 1310 	strb.w	r1, [r4, #784]	; 0x310
   hpcd->IN_ep[i].tx_fifo_num = i;
 800353c:	f04f 010a 	mov.w	r1, #10
   hpcd->OUT_ep[i].is_in = 0;
 8003540:	f884 3311 	strb.w	r3, [r4, #785]	; 0x311
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003544:	f8a4 1156 	strh.w	r1, [r4, #342]	; 0x156
   hpcd->OUT_ep[i].num = i;
 8003548:	f04f 010b 	mov.w	r1, #11
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800354c:	f884 3313 	strb.w	r3, [r4, #787]	; 0x313
   hpcd->OUT_ep[i].maxpacket = 0;
 8003550:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003554:	f8c4 331c 	str.w	r3, [r4, #796]	; 0x31c
   hpcd->OUT_ep[i].xfer_len = 0;
 8003558:	f8c4 3324 	str.w	r3, [r4, #804]	; 0x324
   hpcd->Instance->DIEPTXF[i] = 0;
 800355c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   hpcd->OUT_ep[i].num = i;
 8003560:	f884 132c 	strb.w	r1, [r4, #812]	; 0x32c
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003564:	f04f 010b 	mov.w	r1, #11
   hpcd->OUT_ep[i].is_in = 0;
 8003568:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
   hpcd->IN_ep[i].tx_fifo_num = i;
 800356c:	f8a4 1172 	strh.w	r1, [r4, #370]	; 0x172
   hpcd->OUT_ep[i].num = i;
 8003570:	f04f 010c 	mov.w	r1, #12
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003574:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
   hpcd->OUT_ep[i].maxpacket = 0;
 8003578:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
   hpcd->OUT_ep[i].xfer_buff = 0;
 800357c:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
   hpcd->OUT_ep[i].xfer_len = 0;
 8003580:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
   hpcd->Instance->DIEPTXF[i] = 0;
 8003584:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   hpcd->OUT_ep[i].num = i;
 8003588:	f884 1348 	strb.w	r1, [r4, #840]	; 0x348
   hpcd->IN_ep[i].tx_fifo_num = i;
 800358c:	f04f 010c 	mov.w	r1, #12
   hpcd->OUT_ep[i].is_in = 0;
 8003590:	f884 3349 	strb.w	r3, [r4, #841]	; 0x349
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003594:	f8a4 118e 	strh.w	r1, [r4, #398]	; 0x18e
   hpcd->OUT_ep[i].num = i;
 8003598:	f04f 010d 	mov.w	r1, #13
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800359c:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
   hpcd->OUT_ep[i].maxpacket = 0;
 80035a0:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
   hpcd->OUT_ep[i].xfer_buff = 0;
 80035a4:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
   hpcd->OUT_ep[i].xfer_len = 0;
 80035a8:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   hpcd->Instance->DIEPTXF[i] = 0;
 80035ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   hpcd->OUT_ep[i].num = i;
 80035b0:	f884 1364 	strb.w	r1, [r4, #868]	; 0x364
   hpcd->IN_ep[i].tx_fifo_num = i;
 80035b4:	f04f 010d 	mov.w	r1, #13
   hpcd->OUT_ep[i].is_in = 0;
 80035b8:	f884 3365 	strb.w	r3, [r4, #869]	; 0x365
   hpcd->IN_ep[i].tx_fifo_num = i;
 80035bc:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
   hpcd->OUT_ep[i].num = i;
 80035c0:	f04f 010e 	mov.w	r1, #14
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035c4:	f884 3367 	strb.w	r3, [r4, #871]	; 0x367
   hpcd->OUT_ep[i].maxpacket = 0;
 80035c8:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
   hpcd->OUT_ep[i].xfer_buff = 0;
 80035cc:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
   hpcd->OUT_ep[i].xfer_len = 0;
 80035d0:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
   hpcd->Instance->DIEPTXF[i] = 0;
 80035d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   hpcd->OUT_ep[i].num = i;
 80035d8:	f884 1380 	strb.w	r1, [r4, #896]	; 0x380
   hpcd->IN_ep[i].tx_fifo_num = i;
 80035dc:	f04f 010e 	mov.w	r1, #14
   hpcd->OUT_ep[i].is_in = 0;
 80035e0:	f884 3381 	strb.w	r3, [r4, #897]	; 0x381
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035e4:	f884 3383 	strb.w	r3, [r4, #899]	; 0x383
   hpcd->IN_ep[i].tx_fifo_num = i;
 80035e8:	f8a4 11c6 	strh.w	r1, [r4, #454]	; 0x1c6
   hpcd->OUT_ep[i].maxpacket = 0;
 80035ec:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
   hpcd->OUT_ep[i].xfer_buff = 0;
 80035f0:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
   hpcd->OUT_ep[i].xfer_len = 0;
 80035f4:	f8c4 3394 	str.w	r3, [r4, #916]	; 0x394
   hpcd->Instance->DIEPTXF[i] = 0;
 80035f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80035fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003600:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003604:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003608:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800360c:	eb04 020a 	add.w	r2, r4, sl
 8003610:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003614:	e88e 0003 	stmia.w	lr, {r0, r1}
 8003618:	ca0e      	ldmia	r2, {r1, r2, r3}
 800361a:	4638      	mov	r0, r7
 800361c:	f002 f8ea 	bl	80057f4 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8003620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 hpcd->State= HAL_PCD_STATE_READY;
 8003622:	f884 53b9 	strb.w	r5, [r4, #953]	; 0x3b9
 if (hpcd->Init.lpm_enable ==1)
 8003626:	42ab      	cmp	r3, r5
 8003628:	d008      	beq.n	800363c <HAL_PCD_Init+0x430>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 800362a:	6820      	ldr	r0, [r4, #0]
 800362c:	f002 f9ba 	bl	80059a4 <USB_DevDisconnect>
 return HAL_OK;
 8003630:	2000      	movs	r0, #0
}
 8003632:	b00b      	add	sp, #44	; 0x2c
 8003634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8003638:	2001      	movs	r0, #1
 800363a:	4770      	bx	lr
   HAL_PCDEx_ActivateLPM(hpcd);
 800363c:	4620      	mov	r0, r4
 800363e:	f000 f801 	bl	8003644 <HAL_PCDEx_ActivateLPM>
 8003642:	e7f2      	b.n	800362a <HAL_PCD_Init+0x41e>

08003644 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8003644:	6803      	ldr	r3, [r0, #0]
  
  hpcd->lpm_active = ENABLE;
 8003646:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <HAL_PCDEx_ActivateLPM+0x28>)
{
 800364a:	b430      	push	{r4, r5}
  hpcd->lpm_active = ENABLE;
 800364c:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
{
 8003650:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003652:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8003654:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003656:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 800365a:	f884 53ec 	strb.w	r5, [r4, #1004]	; 0x3ec
  
  return HAL_OK;  
}
 800365e:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003660:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003662:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003664:	430a      	orrs	r2, r1
}
 8003666:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
}
 800366a:	4770      	bx	lr
 800366c:	10000003 	.word	0x10000003

08003670 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003670:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003672:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003674:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003676:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800367a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800367c:	6411      	str	r1, [r2, #64]	; 0x40
{
 800367e:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8003680:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003682:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003684:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003688:	9201      	str	r2, [sp, #4]
 800368a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003692:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003694:	f7fe ff9e 	bl	80025d4 <HAL_GetTick>
 8003698:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800369a:	e005      	b.n	80036a8 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800369c:	f7fe ff9a 	bl	80025d4 <HAL_GetTick>
 80036a0:	1b40      	subs	r0, r0, r5
 80036a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036a6:	d817      	bhi.n	80036d8 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036a8:	6863      	ldr	r3, [r4, #4]
 80036aa:	03da      	lsls	r2, r3, #15
 80036ac:	d5f6      	bpl.n	800369c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036ae:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036b0:	4d0c      	ldr	r5, [pc, #48]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b6:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80036b8:	f7fe ff8c 	bl	80025d4 <HAL_GetTick>
 80036bc:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036be:	e005      	b.n	80036cc <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036c0:	f7fe ff88 	bl	80025d4 <HAL_GetTick>
 80036c4:	1b00      	subs	r0, r0, r4
 80036c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036ca:	d805      	bhi.n	80036d8 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036cc:	686b      	ldr	r3, [r5, #4]
 80036ce:	039b      	lsls	r3, r3, #14
 80036d0:	d5f6      	bpl.n	80036c0 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80036d2:	2000      	movs	r0, #0
}
 80036d4:	b003      	add	sp, #12
 80036d6:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80036d8:	2003      	movs	r0, #3
}
 80036da:	b003      	add	sp, #12
 80036dc:	bd30      	pop	{r4, r5, pc}
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40007000 	.word	0x40007000

080036e8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e8:	2800      	cmp	r0, #0
 80036ea:	f000 81d0 	beq.w	8003a8e <HAL_RCC_OscConfig+0x3a6>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ee:	6803      	ldr	r3, [r0, #0]
{
 80036f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f4:	07dd      	lsls	r5, r3, #31
{
 80036f6:	b082      	sub	sp, #8
 80036f8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fa:	d530      	bpl.n	800375e <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036fc:	49aa      	ldr	r1, [pc, #680]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 80036fe:	688a      	ldr	r2, [r1, #8]
 8003700:	f002 020c 	and.w	r2, r2, #12
 8003704:	2a04      	cmp	r2, #4
 8003706:	f000 8119 	beq.w	800393c <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370a:	688a      	ldr	r2, [r1, #8]
 800370c:	f002 020c 	and.w	r2, r2, #12
 8003710:	2a08      	cmp	r2, #8
 8003712:	f000 810f 	beq.w	8003934 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003716:	6863      	ldr	r3, [r4, #4]
 8003718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371c:	f000 8152 	beq.w	80039c4 <HAL_RCC_OscConfig+0x2dc>
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80db 	beq.w	80038dc <HAL_RCC_OscConfig+0x1f4>
 8003726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800372a:	4b9f      	ldr	r3, [pc, #636]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	f000 81a6 	beq.w	8003a7e <HAL_RCC_OscConfig+0x396>
 8003732:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800373e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe ff48 	bl	80025d4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003744:	4d98      	ldr	r5, [pc, #608]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 8003746:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003748:	e005      	b.n	8003756 <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800374a:	f7fe ff43 	bl	80025d4 <HAL_GetTick>
 800374e:	1b80      	subs	r0, r0, r6
 8003750:	2864      	cmp	r0, #100	; 0x64
 8003752:	f200 80eb 	bhi.w	800392c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	682b      	ldr	r3, [r5, #0]
 8003758:	039a      	lsls	r2, r3, #14
 800375a:	d5f6      	bpl.n	800374a <HAL_RCC_OscConfig+0x62>
 800375c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	079f      	lsls	r7, r3, #30
 8003760:	d529      	bpl.n	80037b6 <HAL_RCC_OscConfig+0xce>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003762:	4a91      	ldr	r2, [pc, #580]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 8003764:	6891      	ldr	r1, [r2, #8]
 8003766:	f011 0f0c 	tst.w	r1, #12
 800376a:	f000 8082 	beq.w	8003872 <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376e:	6891      	ldr	r1, [r2, #8]
 8003770:	f001 010c 	and.w	r1, r1, #12
 8003774:	2908      	cmp	r1, #8
 8003776:	d079      	beq.n	800386c <HAL_RCC_OscConfig+0x184>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003778:	68e3      	ldr	r3, [r4, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8109 	beq.w	8003992 <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003780:	4b89      	ldr	r3, [pc, #548]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 8003782:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003784:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800378c:	f7fe ff22 	bl	80025d4 <HAL_GetTick>
 8003790:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003792:	e005      	b.n	80037a0 <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003794:	f7fe ff1e 	bl	80025d4 <HAL_GetTick>
 8003798:	1b80      	subs	r0, r0, r6
 800379a:	2802      	cmp	r0, #2
 800379c:	f200 80c6 	bhi.w	800392c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	0798      	lsls	r0, r3, #30
 80037a4:	d5f6      	bpl.n	8003794 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a6:	682b      	ldr	r3, [r5, #0]
 80037a8:	6922      	ldr	r2, [r4, #16]
 80037aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80037ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80037b2:	602b      	str	r3, [r5, #0]
 80037b4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b6:	071a      	lsls	r2, r3, #28
 80037b8:	d41f      	bmi.n	80037fa <HAL_RCC_OscConfig+0x112>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ba:	075d      	lsls	r5, r3, #29
 80037bc:	d536      	bpl.n	800382c <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4b7a      	ldr	r3, [pc, #488]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 80037c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c2:	00d0      	lsls	r0, r2, #3
 80037c4:	d573      	bpl.n	80038ae <HAL_RCC_OscConfig+0x1c6>
  FlagStatus pwrclkchanged = RESET;
 80037c6:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c8:	4b78      	ldr	r3, [pc, #480]	; (80039ac <HAL_RCC_OscConfig+0x2c4>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	05d1      	lsls	r1, r2, #23
 80037ce:	f140 809c 	bpl.w	800390a <HAL_RCC_OscConfig+0x222>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d2:	68a3      	ldr	r3, [r4, #8]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	f000 80fb 	beq.w	80039d0 <HAL_RCC_OscConfig+0x2e8>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80b8 	beq.w	8003950 <HAL_RCC_OscConfig+0x268>
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	4b71      	ldr	r3, [pc, #452]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 80037e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037e6:	f000 810c 	beq.w	8003a02 <HAL_RCC_OscConfig+0x31a>
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	671a      	str	r2, [r3, #112]	; 0x70
 80037f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037f2:	f022 0204 	bic.w	r2, r2, #4
 80037f6:	671a      	str	r2, [r3, #112]	; 0x70
 80037f8:	e0ef      	b.n	80039da <HAL_RCC_OscConfig+0x2f2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037fa:	6963      	ldr	r3, [r4, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d043      	beq.n	8003888 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 8003800:	4b69      	ldr	r3, [pc, #420]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 8003802:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003804:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800380c:	f7fe fee2 	bl	80025d4 <HAL_GetTick>
 8003810:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	e005      	b.n	8003820 <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003814:	f7fe fede 	bl	80025d4 <HAL_GetTick>
 8003818:	1b80      	subs	r0, r0, r6
 800381a:	2802      	cmp	r0, #2
 800381c:	f200 8086 	bhi.w	800392c <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003820:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003822:	079b      	lsls	r3, r3, #30
 8003824:	d5f6      	bpl.n	8003814 <HAL_RCC_OscConfig+0x12c>
 8003826:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003828:	075d      	lsls	r5, r3, #29
 800382a:	d4c8      	bmi.n	80037be <HAL_RCC_OscConfig+0xd6>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382c:	69a2      	ldr	r2, [r4, #24]
 800382e:	b1ca      	cbz	r2, 8003864 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003830:	4b5d      	ldr	r3, [pc, #372]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	f001 010c 	and.w	r1, r1, #12
 8003838:	2908      	cmp	r1, #8
 800383a:	d021      	beq.n	8003880 <HAL_RCC_OscConfig+0x198>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800383c:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003840:	f000 80e7 	beq.w	8003a12 <HAL_RCC_OscConfig+0x32a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003844:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003848:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 800384a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800384c:	f7fe fec2 	bl	80025d4 <HAL_GetTick>
 8003850:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	e004      	b.n	800385e <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe febe 	bl	80025d4 <HAL_GetTick>
 8003858:	1b40      	subs	r0, r0, r5
 800385a:	2802      	cmp	r0, #2
 800385c:	d866      	bhi.n	800392c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	d4f7      	bmi.n	8003854 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003864:	2000      	movs	r0, #0
}
 8003866:	b002      	add	sp, #8
 8003868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386c:	6852      	ldr	r2, [r2, #4]
 800386e:	0256      	lsls	r6, r2, #9
 8003870:	d482      	bmi.n	8003778 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	4a4d      	ldr	r2, [pc, #308]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	0795      	lsls	r5, r2, #30
 8003878:	d524      	bpl.n	80038c4 <HAL_RCC_OscConfig+0x1dc>
 800387a:	68e2      	ldr	r2, [r4, #12]
 800387c:	2a01      	cmp	r2, #1
 800387e:	d021      	beq.n	80038c4 <HAL_RCC_OscConfig+0x1dc>
    return HAL_ERROR;
 8003880:	2001      	movs	r0, #1
}
 8003882:	b002      	add	sp, #8
 8003884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003888:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 800388a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003894:	f7fe fe9e 	bl	80025d4 <HAL_GetTick>
 8003898:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389a:	e004      	b.n	80038a6 <HAL_RCC_OscConfig+0x1be>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389c:	f7fe fe9a 	bl	80025d4 <HAL_GetTick>
 80038a0:	1b80      	subs	r0, r0, r6
 80038a2:	2802      	cmp	r0, #2
 80038a4:	d842      	bhi.n	800392c <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80038a8:	079f      	lsls	r7, r3, #30
 80038aa:	d4f7      	bmi.n	800389c <HAL_RCC_OscConfig+0x1b4>
 80038ac:	e7bb      	b.n	8003826 <HAL_RCC_OscConfig+0x13e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80038b0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	9b01      	ldr	r3, [sp, #4]
 80038c2:	e781      	b.n	80037c8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4938      	ldr	r1, [pc, #224]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 80038c6:	6920      	ldr	r0, [r4, #16]
 80038c8:	680a      	ldr	r2, [r1, #0]
 80038ca:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80038ce:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80038d2:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d4:	071a      	lsls	r2, r3, #28
 80038d6:	f57f af70 	bpl.w	80037ba <HAL_RCC_OscConfig+0xd2>
 80038da:	e78e      	b.n	80037fa <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038dc:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 80038de:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e0:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038f0:	f7fe fe70 	bl	80025d4 <HAL_GetTick>
 80038f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	e004      	b.n	8003902 <HAL_RCC_OscConfig+0x21a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe fe6c 	bl	80025d4 <HAL_GetTick>
 80038fc:	1b80      	subs	r0, r0, r6
 80038fe:	2864      	cmp	r0, #100	; 0x64
 8003900:	d814      	bhi.n	800392c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003902:	682b      	ldr	r3, [r5, #0]
 8003904:	039b      	lsls	r3, r3, #14
 8003906:	d4f7      	bmi.n	80038f8 <HAL_RCC_OscConfig+0x210>
 8003908:	e728      	b.n	800375c <HAL_RCC_OscConfig+0x74>
      PWR->CR1 |= PWR_CR1_DBP;
 800390a:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390c:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800390e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003912:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003914:	f7fe fe5e 	bl	80025d4 <HAL_GetTick>
 8003918:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391a:	6833      	ldr	r3, [r6, #0]
 800391c:	05da      	lsls	r2, r3, #23
 800391e:	f53f af58 	bmi.w	80037d2 <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7fe fe57 	bl	80025d4 <HAL_GetTick>
 8003926:	1bc0      	subs	r0, r0, r7
 8003928:	2864      	cmp	r0, #100	; 0x64
 800392a:	d9f6      	bls.n	800391a <HAL_RCC_OscConfig+0x232>
            return HAL_TIMEOUT;
 800392c:	2003      	movs	r0, #3
}
 800392e:	b002      	add	sp, #8
 8003930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003934:	684a      	ldr	r2, [r1, #4]
 8003936:	0250      	lsls	r0, r2, #9
 8003938:	f57f aeed 	bpl.w	8003716 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	0391      	lsls	r1, r2, #14
 8003942:	f57f af0c 	bpl.w	800375e <HAL_RCC_OscConfig+0x76>
 8003946:	6862      	ldr	r2, [r4, #4]
 8003948:	2a00      	cmp	r2, #0
 800394a:	f47f af08 	bne.w	800375e <HAL_RCC_OscConfig+0x76>
 800394e:	e797      	b.n	8003880 <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003956:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003958:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	671a      	str	r2, [r3, #112]	; 0x70
 8003960:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003962:	f022 0204 	bic.w	r2, r2, #4
 8003966:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003968:	f7fe fe34 	bl	80025d4 <HAL_GetTick>
 800396c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396e:	e004      	b.n	800397a <HAL_RCC_OscConfig+0x292>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fe fe30 	bl	80025d4 <HAL_GetTick>
 8003974:	1bc0      	subs	r0, r0, r7
 8003976:	4540      	cmp	r0, r8
 8003978:	d8d8      	bhi.n	800392c <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800397c:	0798      	lsls	r0, r3, #30
 800397e:	d4f7      	bmi.n	8003970 <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 8003980:	2d00      	cmp	r5, #0
 8003982:	f43f af53 	beq.w	800382c <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003986:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 8003988:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800398a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398e:	6413      	str	r3, [r2, #64]	; 0x40
 8003990:	e74c      	b.n	800382c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_OscConfig+0x2c0>)
 8003994:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8003998:	f022 0201 	bic.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800399e:	f7fe fe19 	bl	80025d4 <HAL_GetTick>
 80039a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a4:	e009      	b.n	80039ba <HAL_RCC_OscConfig+0x2d2>
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b0:	f7fe fe10 	bl	80025d4 <HAL_GetTick>
 80039b4:	1b80      	subs	r0, r0, r6
 80039b6:	2802      	cmp	r0, #2
 80039b8:	d8b8      	bhi.n	800392c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	682b      	ldr	r3, [r5, #0]
 80039bc:	0799      	lsls	r1, r3, #30
 80039be:	d4f7      	bmi.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	e6f8      	b.n	80037b6 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	4a33      	ldr	r2, [pc, #204]	; (8003a94 <HAL_RCC_OscConfig+0x3ac>)
 80039c6:	6813      	ldr	r3, [r2, #0]
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e6b7      	b.n	8003740 <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	4a30      	ldr	r2, [pc, #192]	; (8003a94 <HAL_RCC_OscConfig+0x3ac>)
 80039d2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80039da:	f7fe fdfb 	bl	80025d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039de:	4e2d      	ldr	r6, [pc, #180]	; (8003a94 <HAL_RCC_OscConfig+0x3ac>)
      tickstart = HAL_GetTick();
 80039e0:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e6:	e005      	b.n	80039f4 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e8:	f7fe fdf4 	bl	80025d4 <HAL_GetTick>
 80039ec:	eba0 0008 	sub.w	r0, r0, r8
 80039f0:	42b8      	cmp	r0, r7
 80039f2:	d89b      	bhi.n	800392c <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80039f6:	079b      	lsls	r3, r3, #30
 80039f8:	d5f6      	bpl.n	80039e8 <HAL_RCC_OscConfig+0x300>
    if(pwrclkchanged == SET)
 80039fa:	2d00      	cmp	r5, #0
 80039fc:	f43f af16 	beq.w	800382c <HAL_RCC_OscConfig+0x144>
 8003a00:	e7c1      	b.n	8003986 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a02:	f042 0204 	orr.w	r2, r2, #4
 8003a06:	671a      	str	r2, [r3, #112]	; 0x70
 8003a08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	671a      	str	r2, [r3, #112]	; 0x70
 8003a10:	e7e3      	b.n	80039da <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 8003a12:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8003a18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a1a:	f7fe fddb 	bl	80025d4 <HAL_GetTick>
 8003a1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a20:	e005      	b.n	8003a2e <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fe fdd7 	bl	80025d4 <HAL_GetTick>
 8003a26:	1b80      	subs	r0, r0, r6
 8003a28:	2802      	cmp	r0, #2
 8003a2a:	f63f af7f 	bhi.w	800392c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	0199      	lsls	r1, r3, #6
 8003a32:	d4f6      	bmi.n	8003a22 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a34:	6a22      	ldr	r2, [r4, #32]
 8003a36:	69e3      	ldr	r3, [r4, #28]
 8003a38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003a3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a40:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003a44:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003a46:	0852      	lsrs	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a48:	4c12      	ldr	r4, [pc, #72]	; (8003a94 <HAL_RCC_OscConfig+0x3ac>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a4a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003a4e:	3a01      	subs	r2, #1
 8003a50:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003a54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a58:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a5a:	682b      	ldr	r3, [r5, #0]
 8003a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a62:	f7fe fdb7 	bl	80025d4 <HAL_GetTick>
 8003a66:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a68:	e005      	b.n	8003a76 <HAL_RCC_OscConfig+0x38e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fe fdb3 	bl	80025d4 <HAL_GetTick>
 8003a6e:	1b40      	subs	r0, r0, r5
 8003a70:	2802      	cmp	r0, #2
 8003a72:	f63f af5b 	bhi.w	800392c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	019a      	lsls	r2, r3, #6
 8003a7a:	d5f6      	bpl.n	8003a6a <HAL_RCC_OscConfig+0x382>
 8003a7c:	e6f2      	b.n	8003864 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e658      	b.n	8003740 <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 8003a8e:	2001      	movs	r0, #1
}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800

08003a98 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a98:	b178      	cbz	r0, 8003aba <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9a:	4a53      	ldr	r2, [pc, #332]	; (8003be8 <HAL_RCC_ClockConfig+0x150>)
 8003a9c:	6813      	ldr	r3, [r2, #0]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	428b      	cmp	r3, r1
 8003aa4:	d20b      	bcs.n	8003abe <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	f023 030f 	bic.w	r3, r3, #15
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab0:	6813      	ldr	r3, [r2, #0]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	4299      	cmp	r1, r3
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8003aba:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8003abc:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003abe:	6803      	ldr	r3, [r0, #0]
 8003ac0:	079a      	lsls	r2, r3, #30
{
 8003ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac6:	d506      	bpl.n	8003ad6 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4c48      	ldr	r4, [pc, #288]	; (8003bec <HAL_RCC_ClockConfig+0x154>)
 8003aca:	6885      	ldr	r5, [r0, #8]
 8003acc:	68a2      	ldr	r2, [r4, #8]
 8003ace:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ad2:	432a      	orrs	r2, r5
 8003ad4:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	07db      	lsls	r3, r3, #31
 8003ad8:	4604      	mov	r4, r0
 8003ada:	460d      	mov	r5, r1
 8003adc:	d521      	bpl.n	8003b22 <HAL_RCC_ClockConfig+0x8a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ade:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae0:	4b42      	ldr	r3, [pc, #264]	; (8003bec <HAL_RCC_ClockConfig+0x154>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae4:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae6:	d07b      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x148>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae8:	2a02      	cmp	r2, #2
 8003aea:	d071      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	0798      	lsls	r0, r3, #30
 8003aee:	d528      	bpl.n	8003b42 <HAL_RCC_ClockConfig+0xaa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af0:	493e      	ldr	r1, [pc, #248]	; (8003bec <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af8:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	f023 0303 	bic.w	r3, r3, #3
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003b02:	f7fe fd67 	bl	80025d4 <HAL_GetTick>
 8003b06:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b08:	e004      	b.n	8003b14 <HAL_RCC_ClockConfig+0x7c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0a:	f7fe fd63 	bl	80025d4 <HAL_GetTick>
 8003b0e:	1bc0      	subs	r0, r0, r7
 8003b10:	4540      	cmp	r0, r8
 8003b12:	d862      	bhi.n	8003bda <HAL_RCC_ClockConfig+0x142>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b14:	68b3      	ldr	r3, [r6, #8]
 8003b16:	6862      	ldr	r2, [r4, #4]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b20:	d1f3      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x72>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b22:	4a31      	ldr	r2, [pc, #196]	; (8003be8 <HAL_RCC_ClockConfig+0x150>)
 8003b24:	6813      	ldr	r3, [r2, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	429d      	cmp	r5, r3
 8003b2c:	d20c      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	6813      	ldr	r3, [r2, #0]
 8003b30:	f023 030f 	bic.w	r3, r3, #15
 8003b34:	432b      	orrs	r3, r5
 8003b36:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b38:	6813      	ldr	r3, [r2, #0]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	429d      	cmp	r5, r3
 8003b40:	d002      	beq.n	8003b48 <HAL_RCC_ClockConfig+0xb0>
    return HAL_ERROR;
 8003b42:	2001      	movs	r0, #1
 8003b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	0759      	lsls	r1, r3, #29
 8003b4c:	d506      	bpl.n	8003b5c <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b4e:	4927      	ldr	r1, [pc, #156]	; (8003bec <HAL_RCC_ClockConfig+0x154>)
 8003b50:	68e0      	ldr	r0, [r4, #12]
 8003b52:	688a      	ldr	r2, [r1, #8]
 8003b54:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003b58:	4302      	orrs	r2, r0
 8003b5a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5c:	071a      	lsls	r2, r3, #28
 8003b5e:	d507      	bpl.n	8003b70 <HAL_RCC_ClockConfig+0xd8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b60:	4a22      	ldr	r2, [pc, #136]	; (8003bec <HAL_RCC_ClockConfig+0x154>)
 8003b62:	6921      	ldr	r1, [r4, #16]
 8003b64:	6893      	ldr	r3, [r2, #8]
 8003b66:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b6e:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b70:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <HAL_RCC_ClockConfig+0x154>)
 8003b72:	6893      	ldr	r3, [r2, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d027      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x134>
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d12a      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0x13e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b80:	6851      	ldr	r1, [r2, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b82:	6850      	ldr	r0, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b84:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003b88:	6852      	ldr	r2, [r2, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b8a:	0243      	lsls	r3, r0, #9
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003b8c:	f3c2 1288 	ubfx	r2, r2, #6, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003b90:	bf4c      	ite	mi
 8003b92:	4b17      	ldrmi	r3, [pc, #92]	; (8003bf0 <HAL_RCC_ClockConfig+0x158>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003b94:	4b17      	ldrpl	r3, [pc, #92]	; (8003bf4 <HAL_RCC_ClockConfig+0x15c>)
 8003b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b9a:	fb03 f302 	mul.w	r3, r3, r2
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003b9e:	4a13      	ldr	r2, [pc, #76]	; (8003bec <HAL_RCC_ClockConfig+0x154>)
 8003ba0:	6852      	ldr	r2, [r2, #4]
 8003ba2:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8003ba6:	3201      	adds	r2, #1
 8003ba8:	0052      	lsls	r2, r2, #1
      
      sysclockfreq = pllvco/pllp;
 8003baa:	fbb3 f3f2 	udiv	r3, r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bae:	4a0f      	ldr	r2, [pc, #60]	; (8003bec <HAL_RCC_ClockConfig+0x154>)
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bb0:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bb2:	4c11      	ldr	r4, [pc, #68]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003bb4:	6892      	ldr	r2, [r2, #8]
 8003bb6:	4911      	ldr	r1, [pc, #68]	; (8003bfc <HAL_RCC_ClockConfig+0x164>)
 8003bb8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003bbc:	5ca2      	ldrb	r2, [r4, r2]
 8003bbe:	40d3      	lsrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bc2:	f7fe f8f5 	bl	8001db0 <HAL_InitTick>
  return HAL_OK;
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_RCC_ClockConfig+0x158>)
 8003bce:	e7ee      	b.n	8003bae <HAL_RCC_ClockConfig+0x116>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd0:	019e      	lsls	r6, r3, #6
 8003bd2:	d48d      	bmi.n	8003af0 <HAL_RCC_ClockConfig+0x58>
 8003bd4:	e7b5      	b.n	8003b42 <HAL_RCC_ClockConfig+0xaa>
      sysclockfreq = HSI_VALUE;
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <HAL_RCC_ClockConfig+0x15c>)
 8003bd8:	e7e9      	b.n	8003bae <HAL_RCC_ClockConfig+0x116>
        return HAL_TIMEOUT;
 8003bda:	2003      	movs	r0, #3
}
 8003bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be0:	039f      	lsls	r7, r3, #14
 8003be2:	d485      	bmi.n	8003af0 <HAL_RCC_ClockConfig+0x58>
 8003be4:	e7ad      	b.n	8003b42 <HAL_RCC_ClockConfig+0xaa>
 8003be6:	bf00      	nop
 8003be8:	40023c00 	.word	0x40023c00
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	007a1200 	.word	0x007a1200
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	080081bc 	.word	0x080081bc
 8003bfc:	20000010 	.word	0x20000010

08003c00 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c00:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x48>)
 8003c02:	6893      	ldr	r3, [r2, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d01b      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x44>
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d117      	bne.n	8003c40 <HAL_RCC_GetSysClockFreq+0x40>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c10:	6853      	ldr	r3, [r2, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c12:	6851      	ldr	r1, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003c18:	6852      	ldr	r2, [r2, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c1a:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003c1c:	bf4c      	ite	mi
 8003c1e:	480b      	ldrmi	r0, [pc, #44]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x4c>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003c20:	480b      	ldrpl	r0, [pc, #44]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x50>)
 8003c22:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c26:	f3c2 1388 	ubfx	r3, r2, #6, #9
 8003c2a:	fb00 f003 	mul.w	r0, r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x48>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003c36:	3301      	adds	r3, #1
 8003c38:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003c3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c3e:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 8003c40:	4803      	ldr	r0, [pc, #12]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003c42:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x4c>)
 8003c46:	4770      	bx	lr
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	007a1200 	.word	0x007a1200
 8003c50:	00f42400 	.word	0x00f42400

08003c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003c54:	4b01      	ldr	r3, [pc, #4]	; (8003c5c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000010 	.word	0x20000010

08003c60 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c60:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003c62:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003c64:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003c66:	4905      	ldr	r1, [pc, #20]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003c6c:	6808      	ldr	r0, [r1, #0]
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003c70:	40d8      	lsrs	r0, r3
 8003c72:	4770      	bx	lr
 8003c74:	40023800 	.word	0x40023800
 8003c78:	080081cc 	.word	0x080081cc
 8003c7c:	20000010 	.word	0x20000010

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003c82:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003c84:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003c86:	4905      	ldr	r1, [pc, #20]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c88:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003c8c:	6808      	ldr	r0, [r1, #0]
 8003c8e:	5cd3      	ldrb	r3, [r2, r3]
} 
 8003c90:	40d8      	lsrs	r0, r3
 8003c92:	4770      	bx	lr
 8003c94:	40023800 	.word	0x40023800
 8003c98:	080081cc 	.word	0x080081cc
 8003c9c:	20000010 	.word	0x20000010

08003ca0 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ca0:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	f002 0203 	and.w	r2, r2, #3
 8003cac:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003cb4:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003cbc:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	08db      	lsrs	r3, r3, #3
{
 8003cc2:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cc4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003cc8:	4c05      	ldr	r4, [pc, #20]	; (8003ce0 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cca:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003ccc:	6823      	ldr	r3, [r4, #0]
}
 8003cce:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	600b      	str	r3, [r1, #0]
}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40023c00 	.word	0x40023c00

08003ce4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ce4:	6803      	ldr	r3, [r0, #0]
{
 8003ce6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cea:	f013 0501 	ands.w	r5, r3, #1
{
 8003cee:	b083      	sub	sp, #12
 8003cf0:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cf2:	d00b      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cf4:	4a9d      	ldr	r2, [pc, #628]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003cf6:	6891      	ldr	r1, [r2, #8]
 8003cf8:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003cfc:	6091      	str	r1, [r2, #8]
 8003cfe:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8003d00:	6891      	ldr	r1, [r2, #8]
 8003d02:	4329      	orrs	r1, r5
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d04:	fab5 f585 	clz	r5, r5
 8003d08:	096d      	lsrs	r5, r5, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d0a:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d0c:	f413 2600 	ands.w	r6, r3, #524288	; 0x80000
 8003d10:	d010      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d12:	4996      	ldr	r1, [pc, #600]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d14:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8003d16:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d1a:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003d22:	ea42 0206 	orr.w	r2, r2, r6
 8003d26:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d2a:	f000 81c0 	beq.w	80040ae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d2e:	fab6 f686 	clz	r6, r6
 8003d32:	0976      	lsrs	r6, r6, #5
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d34:	02d9      	lsls	r1, r3, #11
 8003d36:	d510      	bpl.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d38:	488c      	ldr	r0, [pc, #560]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003d3c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d40:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d44:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003d48:	ea42 0201 	orr.w	r2, r2, r1
 8003d4c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d50:	f000 81ab 	beq.w	80040aa <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8003d54:	2900      	cmp	r1, #0
 8003d56:	bf08      	it	eq
 8003d58:	2601      	moveq	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8003d5a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003d5e:	bf18      	it	ne
 8003d60:	2501      	movne	r5, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d62:	069a      	lsls	r2, r3, #26
 8003d64:	f100 815a 	bmi.w	800401c <HAL_RCCEx_PeriphCLKConfig+0x338>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d68:	06da      	lsls	r2, r3, #27
 8003d6a:	d50c      	bpl.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d6c:	4a7f      	ldr	r2, [pc, #508]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d6e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003d72:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003d76:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003d7a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003d7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d80:	4301      	orrs	r1, r0
 8003d82:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d86:	045f      	lsls	r7, r3, #17
 8003d88:	d508      	bpl.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d8a:	4978      	ldr	r1, [pc, #480]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d8c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003d8e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d92:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003d96:	4302      	orrs	r2, r0
 8003d98:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d9c:	0418      	lsls	r0, r3, #16
 8003d9e:	d508      	bpl.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003da0:	4972      	ldr	r1, [pc, #456]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003da2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003da4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003da8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003dac:	4302      	orrs	r2, r0
 8003dae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003db2:	03d9      	lsls	r1, r3, #15
 8003db4:	d508      	bpl.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003db6:	496d      	ldr	r1, [pc, #436]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003db8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003dba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003dbe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003dc2:	4302      	orrs	r2, r0
 8003dc4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dc8:	039a      	lsls	r2, r3, #14
 8003dca:	d508      	bpl.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dcc:	4967      	ldr	r1, [pc, #412]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003dce:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003dd0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003dd4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003dd8:	4302      	orrs	r2, r0
 8003dda:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dde:	065f      	lsls	r7, r3, #25
 8003de0:	d508      	bpl.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003de2:	4962      	ldr	r1, [pc, #392]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003de4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003de6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003dea:	f022 0203 	bic.w	r2, r2, #3
 8003dee:	4302      	orrs	r2, r0
 8003df0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df4:	0618      	lsls	r0, r3, #24
 8003df6:	d508      	bpl.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003df8:	495c      	ldr	r1, [pc, #368]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003dfa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003dfc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e00:	f022 020c 	bic.w	r2, r2, #12
 8003e04:	4302      	orrs	r2, r0
 8003e06:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e0a:	05d9      	lsls	r1, r3, #23
 8003e0c:	d508      	bpl.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e0e:	4957      	ldr	r1, [pc, #348]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e10:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003e12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e16:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003e1a:	4302      	orrs	r2, r0
 8003e1c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e20:	059a      	lsls	r2, r3, #22
 8003e22:	d508      	bpl.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e24:	4951      	ldr	r1, [pc, #324]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e26:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003e28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e2c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003e30:	4302      	orrs	r2, r0
 8003e32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e36:	055f      	lsls	r7, r3, #21
 8003e38:	d508      	bpl.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e3a:	494c      	ldr	r1, [pc, #304]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e46:	4302      	orrs	r2, r0
 8003e48:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e4c:	0518      	lsls	r0, r3, #20
 8003e4e:	d508      	bpl.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e50:	4946      	ldr	r1, [pc, #280]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e5c:	4302      	orrs	r2, r0
 8003e5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e62:	04d9      	lsls	r1, r3, #19
 8003e64:	d508      	bpl.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e66:	4941      	ldr	r1, [pc, #260]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e68:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003e6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e6e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003e72:	4302      	orrs	r2, r0
 8003e74:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e78:	049a      	lsls	r2, r3, #18
 8003e7a:	d508      	bpl.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e7c:	493b      	ldr	r1, [pc, #236]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e7e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003e80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e84:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003e88:	4302      	orrs	r2, r0
 8003e8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e8e:	025f      	lsls	r7, r3, #9
 8003e90:	d508      	bpl.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e92:	4936      	ldr	r1, [pc, #216]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e94:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003e96:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e9a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003e9e:	4302      	orrs	r2, r0
 8003ea0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ea4:	0298      	lsls	r0, r3, #10
 8003ea6:	d50c      	bpl.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ea8:	4930      	ldr	r1, [pc, #192]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003eaa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003eac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8003eb0:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003eb4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8003eb8:	bf08      	it	eq
 8003eba:	2601      	moveq	r6, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ebc:	4302      	orrs	r2, r0
 8003ebe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ec2:	0359      	lsls	r1, r3, #13
 8003ec4:	d508      	bpl.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ec6:	4929      	ldr	r1, [pc, #164]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ec8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003eca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ece:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ed2:	4302      	orrs	r2, r0
 8003ed4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ed8:	021a      	lsls	r2, r3, #8
 8003eda:	d509      	bpl.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003edc:	4923      	ldr	r1, [pc, #140]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ede:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003ee2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ee6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003eea:	4302      	orrs	r2, r0
 8003eec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ef0:	015f      	lsls	r7, r3, #5
 8003ef2:	d509      	bpl.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ef4:	491d      	ldr	r1, [pc, #116]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ef6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003efa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003efe:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003f02:	4302      	orrs	r2, r0
 8003f04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f08:	0118      	lsls	r0, r3, #4
 8003f0a:	d509      	bpl.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f0c:	4917      	ldr	r1, [pc, #92]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f0e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003f12:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003f16:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003f1a:	4302      	orrs	r2, r0
 8003f1c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f20:	00d9      	lsls	r1, r3, #3
 8003f22:	d40b      	bmi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x258>
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f28:	d016      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003f2a:	07ea      	lsls	r2, r5, #31
 8003f2c:	d414      	bmi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x274>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f2e:	2e01      	cmp	r6, #1
 8003f30:	f000 80c0 	beq.w	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003f34:	2000      	movs	r0, #0
}
 8003f36:	b003      	add	sp, #12
 8003f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f3c:	490b      	ldr	r1, [pc, #44]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f42:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003f46:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003f4a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003f4e:	ea42 0200 	orr.w	r2, r2, r0
 8003f52:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f56:	d1e8      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_PLLI2S_DISABLE();  
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f5c:	461d      	mov	r5, r3
    __HAL_RCC_PLLI2S_DISABLE();  
 8003f5e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003f62:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003f64:	f7fe fb36 	bl	80025d4 <HAL_GetTick>
 8003f68:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f6a:	e006      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003f6c:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f70:	f7fe fb30 	bl	80025d4 <HAL_GetTick>
 8003f74:	1bc0      	subs	r0, r0, r7
 8003f76:	2864      	cmp	r0, #100	; 0x64
 8003f78:	d84c      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x330>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f7a:	682b      	ldr	r3, [r5, #0]
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	d4f7      	bmi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	07df      	lsls	r7, r3, #31
 8003f84:	d503      	bpl.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003f86:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003f88:	2a00      	cmp	r2, #0
 8003f8a:	f000 80e1 	beq.w	8004150 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f8e:	031d      	lsls	r5, r3, #12
 8003f90:	d504      	bpl.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003f92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003f94:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003f98:	f000 8105 	beq.w	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003f9c:	02d8      	lsls	r0, r3, #11
 8003f9e:	d504      	bpl.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8003fa0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003fa2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003fa6:	f000 80fe 	beq.w	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003faa:	01d9      	lsls	r1, r3, #7
 8003fac:	d511      	bpl.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fae:	4d9a      	ldr	r5, [pc, #616]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fb0:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fb2:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fb6:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fba:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003fbe:	6921      	ldr	r1, [r4, #16]
 8003fc0:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8003fc4:	433a      	orrs	r2, r7
 8003fc6:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003fca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003fce:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fd2:	019a      	lsls	r2, r3, #6
 8003fd4:	d50d      	bpl.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd6:	6923      	ldr	r3, [r4, #16]
 8003fd8:	6862      	ldr	r2, [r4, #4]
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	68e0      	ldr	r0, [r4, #12]
 8003fde:	68a1      	ldr	r1, [r4, #8]
 8003fe0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003fe4:	4a8c      	ldr	r2, [pc, #560]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003fe6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003fea:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003fee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003ff2:	4b89      	ldr	r3, [pc, #548]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ff6:	461d      	mov	r5, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8003ff8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ffc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003ffe:	f7fe fae9 	bl	80025d4 <HAL_GetTick>
 8004002:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	d491      	bmi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800400a:	f7fe fae3 	bl	80025d4 <HAL_GetTick>
 800400e:	1bc0      	subs	r0, r0, r7
 8004010:	2864      	cmp	r0, #100	; 0x64
 8004012:	d9f7      	bls.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x320>
        return HAL_TIMEOUT;
 8004014:	2003      	movs	r0, #3
}
 8004016:	b003      	add	sp, #12
 8004018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	4a7e      	ldr	r2, [pc, #504]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 800401e:	4b7f      	ldr	r3, [pc, #508]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004020:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004022:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 8004024:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004028:	6411      	str	r1, [r2, #64]	; 0x40
 800402a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800402c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004030:	9201      	str	r2, [sp, #4]
 8004032:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800403c:	f7fe faca 	bl	80025d4 <HAL_GetTick>
 8004040:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004042:	e005      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x36c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fe fac6 	bl	80025d4 <HAL_GetTick>
 8004048:	eba0 0008 	sub.w	r0, r0, r8
 800404c:	2864      	cmp	r0, #100	; 0x64
 800404e:	d8e1      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	05db      	lsls	r3, r3, #23
 8004054:	d5f6      	bpl.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x360>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004056:	4a70      	ldr	r2, [pc, #448]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004058:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800405a:	6f11      	ldr	r1, [r2, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800405c:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8004060:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 8004064:	d010      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004066:	4281      	cmp	r1, r0
 8004068:	d00e      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800406a:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800406c:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800406e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004072:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 8004076:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004078:	6f17      	ldr	r7, [r2, #112]	; 0x70
 800407a:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 800407e:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004080:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004082:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004084:	07cf      	lsls	r7, r1, #31
 8004086:	d479      	bmi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x498>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004088:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800408c:	f000 80a7 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004090:	4961      	ldr	r1, [pc, #388]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004092:	688a      	ldr	r2, [r1, #8]
 8004094:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004098:	608a      	str	r2, [r1, #8]
 800409a:	4a5f      	ldr	r2, [pc, #380]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80040a2:	430b      	orrs	r3, r1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	e65e      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1; 
 80040aa:	2501      	movs	r5, #1
 80040ac:	e655      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 80040ae:	2600      	movs	r6, #0
      plli2sused = 1; 
 80040b0:	2501      	movs	r5, #1
 80040b2:	e63f      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE(); 
 80040b4:	4b58      	ldr	r3, [pc, #352]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80040b6:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040b8:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE(); 
 80040ba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80040be:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80040c0:	f7fe fa88 	bl	80025d4 <HAL_GetTick>
 80040c4:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040c6:	e004      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040c8:	f7fe fa84 	bl	80025d4 <HAL_GetTick>
 80040cc:	1b80      	subs	r0, r0, r6
 80040ce:	2864      	cmp	r0, #100	; 0x64
 80040d0:	d8a0      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x330>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040d2:	682b      	ldr	r3, [r5, #0]
 80040d4:	009f      	lsls	r7, r3, #2
 80040d6:	d4f7      	bmi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040d8:	6822      	ldr	r2, [r4, #0]
 80040da:	0310      	lsls	r0, r2, #12
 80040dc:	d44a      	bmi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>
 80040de:	02d1      	lsls	r1, r2, #11
 80040e0:	d51d      	bpl.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040e4:	b9db      	cbnz	r3, 800411e <HAL_RCCEx_PeriphCLKConfig+0x43a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040e6:	494c      	ldr	r1, [pc, #304]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040e8:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040ee:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040f6:	69a0      	ldr	r0, [r4, #24]
 80040f8:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80040fc:	4333      	orrs	r3, r6
 80040fe:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004102:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800410a:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800410e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004110:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004114:	3801      	subs	r0, #1
 8004116:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800411a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800411e:	0292      	lsls	r2, r2, #10
 8004120:	d503      	bpl.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004122:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004128:	d062      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    __HAL_RCC_PLLSAI_ENABLE();
 800412a:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800412c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800412e:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8004130:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004134:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004136:	f7fe fa4d 	bl	80025d4 <HAL_GetTick>
 800413a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	f53f aef8 	bmi.w	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x250>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004144:	f7fe fa46 	bl	80025d4 <HAL_GetTick>
 8004148:	1b40      	subs	r0, r0, r5
 800414a:	2864      	cmp	r0, #100	; 0x64
 800414c:	d9f6      	bls.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x458>
 800414e:	e761      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x330>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004150:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004154:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004158:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800415c:	6860      	ldr	r0, [r4, #4]
 800415e:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8004162:	68a1      	ldr	r1, [r4, #8]
 8004164:	433a      	orrs	r2, r7
 8004166:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800416a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800416e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 8004172:	e70c      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004174:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0b5      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x402>
 800417a:	e7b0      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417c:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800417e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004182:	f7fe fa27 	bl	80025d4 <HAL_GetTick>
 8004186:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	e006      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418a:	f7fe fa23 	bl	80025d4 <HAL_GetTick>
 800418e:	eba0 0009 	sub.w	r0, r0, r9
 8004192:	4540      	cmp	r0, r8
 8004194:	f63f af3e 	bhi.w	8004014 <HAL_RCCEx_PeriphCLKConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800419a:	0799      	lsls	r1, r3, #30
 800419c:	d5f5      	bpl.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800419e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041a0:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80041a4:	e770      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041a6:	4d1c      	ldr	r5, [pc, #112]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041a8:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041aa:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041ae:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041b2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80041b6:	68e1      	ldr	r1, [r4, #12]
 80041b8:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 80041bc:	433a      	orrs	r2, r7
 80041be:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80041c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80041c6:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80041ca:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80041ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041d0:	f021 011f 	bic.w	r1, r1, #31
 80041d4:	3a01      	subs	r2, #1
 80041d6:	430a      	orrs	r2, r1
 80041d8:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 80041dc:	e6e5      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041de:	480e      	ldr	r0, [pc, #56]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80041e0:	490f      	ldr	r1, [pc, #60]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80041e2:	6882      	ldr	r2, [r0, #8]
 80041e4:	4019      	ands	r1, r3
 80041e6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80041ea:	430a      	orrs	r2, r1
 80041ec:	6082      	str	r2, [r0, #8]
 80041ee:	e754      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041f0:	4a09      	ldr	r2, [pc, #36]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80041f2:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041f8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80041fc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004200:	6a20      	ldr	r0, [r4, #32]
 8004202:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004206:	430b      	orrs	r3, r1
 8004208:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800420c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004214:	e789      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800
 800421c:	40007000 	.word	0x40007000
 8004220:	0ffffcff 	.word	0x0ffffcff

08004224 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004224:	2800      	cmp	r0, #0
 8004226:	d05d      	beq.n	80042e4 <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004228:	2200      	movs	r2, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800422a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
{
 800422e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004232:	6282      	str	r2, [r0, #40]	; 0x28
 8004234:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004236:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800423a:	2b00      	cmp	r3, #0
 800423c:	d04d      	beq.n	80042da <HAL_SPI_Init+0xb6>

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800423e:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004240:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004242:	6822      	ldr	r2, [r4, #0]
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004244:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 8004248:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800424c:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 8004250:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004252:	bf94      	ite	ls
 8004254:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 8004258:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 800425a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800425e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004262:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004264:	d135      	bne.n	80042d2 <HAL_SPI_Init+0xae>
 8004266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004268:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800426a:	b92b      	cbnz	r3, 8004278 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800426c:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004270:	bf8c      	ite	hi
 8004272:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004274:	2301      	movls	r3, #1
 8004276:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004278:	68a1      	ldr	r1, [r4, #8]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800427a:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	6920      	ldr	r0, [r4, #16]
 8004282:	430b      	orrs	r3, r1
 8004284:	6961      	ldr	r1, [r4, #20]
 8004286:	4303      	orrs	r3, r0
 8004288:	69a0      	ldr	r0, [r4, #24]
 800428a:	430b      	orrs	r3, r1
 800428c:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800428e:	ea4f 4e10 	mov.w	lr, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004292:	f400 7c00 	and.w	ip, r0, #512	; 0x200
 8004296:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004298:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800429a:	f00e 0e04 	and.w	lr, lr, #4
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 800429e:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80042a0:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80042a2:	6a21      	ldr	r1, [r4, #32]
 80042a4:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80042a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042a8:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80042aa:	ea43 030c 	orr.w	r3, r3, ip
  hspi->State     = HAL_SPI_STATE_READY;
 80042ae:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80042b2:	ea47 070e 	orr.w	r7, r7, lr
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80042b6:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80042b8:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80042ba:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80042bc:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042be:	69d3      	ldr	r3, [r2, #28]
 80042c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042c4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042c6:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042ca:	f884 c05d 	strb.w	ip, [r4, #93]	; 0x5d
  return HAL_OK;
 80042ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	461e      	mov	r6, r3
 80042d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80042d8:	e7c6      	b.n	8004268 <HAL_SPI_Init+0x44>
    hspi->Lock = HAL_UNLOCKED;
 80042da:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80042de:	f7fd fd05 	bl	8001cec <HAL_SPI_MspInit>
 80042e2:	e7ac      	b.n	800423e <HAL_SPI_Init+0x1a>
    return HAL_ERROR;
 80042e4:	2001      	movs	r0, #1
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80042e8:	2800      	cmp	r0, #0
 80042ea:	f000 808d 	beq.w	8004408 <HAL_TIM_Base_Init+0x120>
{ 
 80042ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80042f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042f4:	4604      	mov	r4, r0
 80042f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d077      	beq.n	80043ee <HAL_TIM_Base_Init+0x106>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80042fe:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004300:	2302      	movs	r3, #2
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004302:	4943      	ldr	r1, [pc, #268]	; (8004410 <HAL_TIM_Base_Init+0x128>)
 8004304:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;
 8004308:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800430c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8004310:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004312:	fab1 f181 	clz	r1, r1
 8004316:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800431a:	d047      	beq.n	80043ac <HAL_TIM_Base_Init+0xc4>
 800431c:	2900      	cmp	r1, #0
 800431e:	d145      	bne.n	80043ac <HAL_TIM_Base_Init+0xc4>
 8004320:	483c      	ldr	r0, [pc, #240]	; (8004414 <HAL_TIM_Base_Init+0x12c>)
 8004322:	4282      	cmp	r2, r0
 8004324:	d068      	beq.n	80043f8 <HAL_TIM_Base_Init+0x110>
 8004326:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800432a:	4282      	cmp	r2, r0
 800432c:	d064      	beq.n	80043f8 <HAL_TIM_Base_Init+0x110>
 800432e:	4d3a      	ldr	r5, [pc, #232]	; (8004418 <HAL_TIM_Base_Init+0x130>)
 8004330:	4e3a      	ldr	r6, [pc, #232]	; (800441c <HAL_TIM_Base_Init+0x134>)
 8004332:	1b50      	subs	r0, r2, r5
 8004334:	42aa      	cmp	r2, r5
 8004336:	bf18      	it	ne
 8004338:	42b2      	cmpne	r2, r6
 800433a:	fab0 f080 	clz	r0, r0
 800433e:	ea4f 1050 	mov.w	r0, r0, lsr #5
 8004342:	d15f      	bne.n	8004404 <HAL_TIM_Base_Init+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004344:	4d36      	ldr	r5, [pc, #216]	; (8004420 <HAL_TIM_Base_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800434a:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800434c:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 800434e:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004352:	d034      	beq.n	80043be <HAL_TIM_Base_Init+0xd6>
 8004354:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 8004358:	42aa      	cmp	r2, r5
 800435a:	d030      	beq.n	80043be <HAL_TIM_Base_Init+0xd6>
 800435c:	4d2f      	ldr	r5, [pc, #188]	; (800441c <HAL_TIM_Base_Init+0x134>)
 800435e:	42aa      	cmp	r2, r5
 8004360:	bf14      	ite	ne
 8004362:	4605      	movne	r5, r0
 8004364:	f040 0501 	orreq.w	r5, r0, #1
 8004368:	bb4d      	cbnz	r5, 80043be <HAL_TIM_Base_Init+0xd6>
 800436a:	482e      	ldr	r0, [pc, #184]	; (8004424 <HAL_TIM_Base_Init+0x13c>)
 800436c:	4e2e      	ldr	r6, [pc, #184]	; (8004428 <HAL_TIM_Base_Init+0x140>)
 800436e:	4282      	cmp	r2, r0
 8004370:	bf18      	it	ne
 8004372:	42b2      	cmpne	r2, r6
 8004374:	bf0c      	ite	eq
 8004376:	2001      	moveq	r0, #1
 8004378:	2000      	movne	r0, #0
 800437a:	d047      	beq.n	800440c <HAL_TIM_Base_Init+0x124>
 800437c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004380:	4d2a      	ldr	r5, [pc, #168]	; (800442c <HAL_TIM_Base_Init+0x144>)
 8004382:	42aa      	cmp	r2, r5
 8004384:	bf18      	it	ne
 8004386:	42b2      	cmpne	r2, r6
 8004388:	d019      	beq.n	80043be <HAL_TIM_Base_Init+0xd6>
 800438a:	4829      	ldr	r0, [pc, #164]	; (8004430 <HAL_TIM_Base_Init+0x148>)
 800438c:	4282      	cmp	r2, r0
 800438e:	d03d      	beq.n	800440c <HAL_TIM_Base_Init+0x124>
 8004390:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004394:	4282      	cmp	r2, r0
 8004396:	d039      	beq.n	800440c <HAL_TIM_Base_Init+0x124>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004398:	69a1      	ldr	r1, [r4, #24]
 800439a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800439e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a0:	430b      	orrs	r3, r1
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80043a2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80043a4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80043a8:	6291      	str	r1, [r2, #40]	; 0x28
 80043aa:	e017      	b.n	80043dc <HAL_TIM_Base_Init+0xf4>
 80043ac:	481a      	ldr	r0, [pc, #104]	; (8004418 <HAL_TIM_Base_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80043b2:	68a5      	ldr	r5, [r4, #8]
 80043b4:	1a10      	subs	r0, r2, r0
 80043b6:	432b      	orrs	r3, r5
 80043b8:	fab0 f080 	clz	r0, r0
 80043bc:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043be:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c4:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c8:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80043ca:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80043d2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d4:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80043d6:	6296      	str	r6, [r2, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80043d8:	b931      	cbnz	r1, 80043e8 <HAL_TIM_Base_Init+0x100>
 80043da:	b928      	cbnz	r0, 80043e8 <HAL_TIM_Base_Init+0x100>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043dc:	2301      	movs	r3, #1
  return HAL_OK;
 80043de:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80043e0:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 80043e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80043e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 80043e8:	6963      	ldr	r3, [r4, #20]
 80043ea:	6313      	str	r3, [r2, #48]	; 0x30
 80043ec:	e7f6      	b.n	80043dc <HAL_TIM_Base_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;
 80043ee:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80043f2:	f7fd fe9f 	bl	8002134 <HAL_TIM_Base_MspInit>
 80043f6:	e782      	b.n	80042fe <HAL_TIM_Base_Init+0x16>
 80043f8:	4807      	ldr	r0, [pc, #28]	; (8004418 <HAL_TIM_Base_Init+0x130>)
 80043fa:	1a10      	subs	r0, r2, r0
 80043fc:	fab0 f080 	clz	r0, r0
 8004400:	0940      	lsrs	r0, r0, #5
 8004402:	e79f      	b.n	8004344 <HAL_TIM_Base_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004404:	4608      	mov	r0, r1
 8004406:	e7a9      	b.n	800435c <HAL_TIM_Base_Init+0x74>
    return HAL_ERROR;
 8004408:	2001      	movs	r0, #1
 800440a:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800440c:	2000      	movs	r0, #0
 800440e:	e7d6      	b.n	80043be <HAL_TIM_Base_Init+0xd6>
 8004410:	40010000 	.word	0x40010000
 8004414:	40000400 	.word	0x40000400
 8004418:	40010400 	.word	0x40010400
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40000800 	.word	0x40000800
 8004424:	40014400 	.word	0x40014400
 8004428:	40014000 	.word	0x40014000
 800442c:	40001800 	.word	0x40001800
 8004430:	40001c00 	.word	0x40001c00

08004434 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004434:	6803      	ldr	r3, [r0, #0]
}
 8004436:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]
}
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop

0800444c <HAL_TIM_PWM_MspInit>:
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8004450:	2800      	cmp	r0, #0
 8004452:	f000 808d 	beq.w	8004570 <HAL_TIM_PWM_Init+0x120>
{
 8004456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8004458:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800445c:	4604      	mov	r4, r0
 800445e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004462:	2b00      	cmp	r3, #0
 8004464:	d077      	beq.n	8004556 <HAL_TIM_PWM_Init+0x106>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004466:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;  
 8004468:	2302      	movs	r3, #2
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800446a:	4943      	ldr	r1, [pc, #268]	; (8004578 <HAL_TIM_PWM_Init+0x128>)
 800446c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;  
 8004470:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004474:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8004478:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800447a:	fab1 f181 	clz	r1, r1
 800447e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8004482:	d047      	beq.n	8004514 <HAL_TIM_PWM_Init+0xc4>
 8004484:	2900      	cmp	r1, #0
 8004486:	d145      	bne.n	8004514 <HAL_TIM_PWM_Init+0xc4>
 8004488:	483c      	ldr	r0, [pc, #240]	; (800457c <HAL_TIM_PWM_Init+0x12c>)
 800448a:	4282      	cmp	r2, r0
 800448c:	d068      	beq.n	8004560 <HAL_TIM_PWM_Init+0x110>
 800448e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004492:	4282      	cmp	r2, r0
 8004494:	d064      	beq.n	8004560 <HAL_TIM_PWM_Init+0x110>
 8004496:	4d3a      	ldr	r5, [pc, #232]	; (8004580 <HAL_TIM_PWM_Init+0x130>)
 8004498:	4e3a      	ldr	r6, [pc, #232]	; (8004584 <HAL_TIM_PWM_Init+0x134>)
 800449a:	1b50      	subs	r0, r2, r5
 800449c:	42aa      	cmp	r2, r5
 800449e:	bf18      	it	ne
 80044a0:	42b2      	cmpne	r2, r6
 80044a2:	fab0 f080 	clz	r0, r0
 80044a6:	ea4f 1050 	mov.w	r0, r0, lsr #5
 80044aa:	d15f      	bne.n	800456c <HAL_TIM_PWM_Init+0x11c>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80044ac:	4d36      	ldr	r5, [pc, #216]	; (8004588 <HAL_TIM_PWM_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044b2:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80044b4:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 80044b6:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80044ba:	d034      	beq.n	8004526 <HAL_TIM_PWM_Init+0xd6>
 80044bc:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 80044c0:	42aa      	cmp	r2, r5
 80044c2:	d030      	beq.n	8004526 <HAL_TIM_PWM_Init+0xd6>
 80044c4:	4d2f      	ldr	r5, [pc, #188]	; (8004584 <HAL_TIM_PWM_Init+0x134>)
 80044c6:	42aa      	cmp	r2, r5
 80044c8:	bf14      	ite	ne
 80044ca:	4605      	movne	r5, r0
 80044cc:	f040 0501 	orreq.w	r5, r0, #1
 80044d0:	bb4d      	cbnz	r5, 8004526 <HAL_TIM_PWM_Init+0xd6>
 80044d2:	482e      	ldr	r0, [pc, #184]	; (800458c <HAL_TIM_PWM_Init+0x13c>)
 80044d4:	4e2e      	ldr	r6, [pc, #184]	; (8004590 <HAL_TIM_PWM_Init+0x140>)
 80044d6:	4282      	cmp	r2, r0
 80044d8:	bf18      	it	ne
 80044da:	42b2      	cmpne	r2, r6
 80044dc:	bf0c      	ite	eq
 80044de:	2001      	moveq	r0, #1
 80044e0:	2000      	movne	r0, #0
 80044e2:	d047      	beq.n	8004574 <HAL_TIM_PWM_Init+0x124>
 80044e4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80044e8:	4d2a      	ldr	r5, [pc, #168]	; (8004594 <HAL_TIM_PWM_Init+0x144>)
 80044ea:	42aa      	cmp	r2, r5
 80044ec:	bf18      	it	ne
 80044ee:	42b2      	cmpne	r2, r6
 80044f0:	d019      	beq.n	8004526 <HAL_TIM_PWM_Init+0xd6>
 80044f2:	4829      	ldr	r0, [pc, #164]	; (8004598 <HAL_TIM_PWM_Init+0x148>)
 80044f4:	4282      	cmp	r2, r0
 80044f6:	d03d      	beq.n	8004574 <HAL_TIM_PWM_Init+0x124>
 80044f8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80044fc:	4282      	cmp	r2, r0
 80044fe:	d039      	beq.n	8004574 <HAL_TIM_PWM_Init+0x124>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004500:	69a1      	ldr	r1, [r4, #24]
 8004502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004506:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004508:	430b      	orrs	r3, r1
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800450a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800450c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800450e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004510:	6291      	str	r1, [r2, #40]	; 0x28
 8004512:	e017      	b.n	8004544 <HAL_TIM_PWM_Init+0xf4>
 8004514:	481a      	ldr	r0, [pc, #104]	; (8004580 <HAL_TIM_PWM_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800451a:	68a5      	ldr	r5, [r4, #8]
 800451c:	1a10      	subs	r0, r2, r0
 800451e:	432b      	orrs	r3, r5
 8004520:	fab0 f080 	clz	r0, r0
 8004524:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004526:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800452c:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800452e:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004530:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004532:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004538:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800453a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800453c:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800453e:	6296      	str	r6, [r2, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004540:	b931      	cbnz	r1, 8004550 <HAL_TIM_PWM_Init+0x100>
 8004542:	b928      	cbnz	r0, 8004550 <HAL_TIM_PWM_Init+0x100>
  TIMx->EGR = TIM_EGR_UG;
 8004544:	2301      	movs	r3, #1
  return HAL_OK;
 8004546:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004548:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 800454a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800454e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8004550:	6963      	ldr	r3, [r4, #20]
 8004552:	6313      	str	r3, [r2, #48]	; 0x30
 8004554:	e7f6      	b.n	8004544 <HAL_TIM_PWM_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;  
 8004556:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800455a:	f7ff ff77 	bl	800444c <HAL_TIM_PWM_MspInit>
 800455e:	e782      	b.n	8004466 <HAL_TIM_PWM_Init+0x16>
 8004560:	4807      	ldr	r0, [pc, #28]	; (8004580 <HAL_TIM_PWM_Init+0x130>)
 8004562:	1a10      	subs	r0, r2, r0
 8004564:	fab0 f080 	clz	r0, r0
 8004568:	0940      	lsrs	r0, r0, #5
 800456a:	e79f      	b.n	80044ac <HAL_TIM_PWM_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800456c:	4608      	mov	r0, r1
 800456e:	e7a9      	b.n	80044c4 <HAL_TIM_PWM_Init+0x74>
    return HAL_ERROR;
 8004570:	2001      	movs	r0, #1
 8004572:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004574:	2000      	movs	r0, #0
 8004576:	e7d6      	b.n	8004526 <HAL_TIM_PWM_Init+0xd6>
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40010400 	.word	0x40010400
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40000800 	.word	0x40000800
 800458c:	40014400 	.word	0x40014400
 8004590:	40014000 	.word	0x40014000
 8004594:	40001800 	.word	0x40001800
 8004598:	40001c00 	.word	0x40001c00

0800459c <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800459c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800459e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045a0:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80045a2:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80045a6:	ea20 0001 	bic.w	r0, r0, r1
{
 80045aa:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 80045ac:	6218      	str	r0, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80045ae:	4c0b      	ldr	r4, [pc, #44]	; (80045dc <HAL_TIM_PWM_Start+0x40>)

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80045b0:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80045b2:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80045b4:	ea41 0102 	orr.w	r1, r1, r2
 80045b8:	6219      	str	r1, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80045ba:	d00a      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x36>
 80045bc:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <HAL_TIM_PWM_Start+0x44>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d007      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x36>
  __HAL_TIM_ENABLE(htim);
 80045c2:	681a      	ldr	r2, [r3, #0]
} 
 80045c4:	2000      	movs	r0, #0
 80045c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_TIM_ENABLE(htim);
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
} 
 80045d0:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80045d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
 80045da:	e7f2      	b.n	80045c2 <HAL_TIM_PWM_Start+0x26>
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40010400 	.word	0x40010400

080045e4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80045e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d03f      	beq.n	800466c <HAL_TIM_ConfigClockSource+0x88>
  tmpsmcr = htim->Instance->SMCR;
 80045ec:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ee:	4a5e      	ldr	r2, [pc, #376]	; (8004768 <HAL_TIM_ConfigClockSource+0x184>)
{
 80045f0:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80045f2:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80045f4:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80045f6:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  switch (sClockSourceConfig->ClockSource)
 80045fa:	680c      	ldr	r4, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80045fc:	689e      	ldr	r6, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80045fe:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8004600:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004604:	ea02 0206 	and.w	r2, r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8004608:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800460a:	d076      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x116>
 800460c:	d918      	bls.n	8004640 <HAL_TIM_ConfigClockSource+0x5c>
 800460e:	2c70      	cmp	r4, #112	; 0x70
 8004610:	d061      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0xf2>
 8004612:	d92e      	bls.n	8004672 <HAL_TIM_ConfigClockSource+0x8e>
 8004614:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004618:	d058      	beq.n	80046cc <HAL_TIM_ConfigClockSource+0xe8>
 800461a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800461e:	d11c      	bne.n	800465a <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004620:	688a      	ldr	r2, [r1, #8]
 8004622:	684d      	ldr	r5, [r1, #4]
 8004624:	68cc      	ldr	r4, [r1, #12]
 8004626:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 8004628:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800462a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004632:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004634:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800463c:	609a      	str	r2, [r3, #8]
    break;
 800463e:	e00c      	b.n	800465a <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8004640:	2c10      	cmp	r4, #16
 8004642:	d033      	beq.n	80046ac <HAL_TIM_ConfigClockSource+0xc8>
 8004644:	d939      	bls.n	80046ba <HAL_TIM_ConfigClockSource+0xd6>
 8004646:	2c20      	cmp	r4, #32
 8004648:	d06f      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x146>
 800464a:	2c30      	cmp	r4, #48	; 0x30
 800464c:	d105      	bne.n	800465a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800464e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004650:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004654:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8004658:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800465a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800465c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800465e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004662:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004666:	4610      	mov	r0, r2
 8004668:	bcf0      	pop	{r4, r5, r6, r7}
 800466a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800466c:	2302      	movs	r3, #2
}
 800466e:	4618      	mov	r0, r3
 8004670:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004672:	2c50      	cmp	r4, #80	; 0x50
 8004674:	d060      	beq.n	8004738 <HAL_TIM_ConfigClockSource+0x154>
 8004676:	2c60      	cmp	r4, #96	; 0x60
 8004678:	d1ef      	bne.n	800465a <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800467c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8004682:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004684:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004686:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004688:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800468a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800468e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8004692:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8004696:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800469a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800469c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800469e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80046a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80046a4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	e7d6      	b.n	800465a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 80046ac:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80046ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80046b2:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	e7cf      	b.n	800465a <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 80046ba:	2c00      	cmp	r4, #0
 80046bc:	d1cd      	bne.n	800465a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 80046be:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80046c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80046c4:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80046c8:	609a      	str	r2, [r3, #8]
 80046ca:	e7c6      	b.n	800465a <HAL_TIM_ConfigClockSource+0x76>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80046cc:	6899      	ldr	r1, [r3, #8]
 80046ce:	4a27      	ldr	r2, [pc, #156]	; (800476c <HAL_TIM_ConfigClockSource+0x188>)
 80046d0:	400a      	ands	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]
    break;
 80046d4:	e7c1      	b.n	800465a <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80046d6:	684c      	ldr	r4, [r1, #4]
 80046d8:	688a      	ldr	r2, [r1, #8]
 80046da:	68cd      	ldr	r5, [r1, #12]
 80046dc:	4322      	orrs	r2, r4
  tmpsmcr = TIMx->SMCR;
 80046de:	689c      	ldr	r4, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e0:	4923      	ldr	r1, [pc, #140]	; (8004770 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80046e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80046ea:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80046ec:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80046ee:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046f0:	4011      	ands	r1, r2
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046f2:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80046f6:	6099      	str	r1, [r3, #8]
    break;
 80046f8:	e7af      	b.n	800465a <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 80046fa:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fc:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80046fe:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004700:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004704:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004708:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800470a:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800470e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004710:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8004714:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004718:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471a:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800471c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800471e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004722:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	e797      	b.n	800465a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800472a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800472c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004730:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	e790      	b.n	800465a <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 8004738:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473a:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800473c:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473e:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004742:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004746:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8004748:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800474c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800474e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8004752:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004758:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800475a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800475c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004760:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8004764:	609a      	str	r2, [r3, #8]
 8004766:	e778      	b.n	800465a <HAL_TIM_ConfigClockSource+0x76>
 8004768:	fffe0088 	.word	0xfffe0088
 800476c:	fffefff8 	.word	0xfffefff8
 8004770:	fffeff88 	.word	0xfffeff88

08004774 <HAL_TIM_OC_DelayElapsedCallback>:
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop

08004778 <HAL_TIM_IC_CaptureCallback>:
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <HAL_TIM_PWM_PulseFinishedCallback>:
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop

08004780 <HAL_TIM_TriggerCallback>:
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop

08004784 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004784:	6803      	ldr	r3, [r0, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	0791      	lsls	r1, r2, #30
{
 800478a:	b510      	push	{r4, lr}
 800478c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800478e:	d502      	bpl.n	8004796 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	0792      	lsls	r2, r2, #30
 8004794:	d465      	bmi.n	8004862 <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	0752      	lsls	r2, r2, #29
 800479a:	d502      	bpl.n	80047a2 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	0750      	lsls	r0, r2, #29
 80047a0:	d44c      	bmi.n	800483c <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	0711      	lsls	r1, r2, #28
 80047a6:	d502      	bpl.n	80047ae <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	0712      	lsls	r2, r2, #28
 80047ac:	d434      	bmi.n	8004818 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	06d0      	lsls	r0, r2, #27
 80047b2:	d502      	bpl.n	80047ba <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	06d1      	lsls	r1, r2, #27
 80047b8:	d41e      	bmi.n	80047f8 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	07d2      	lsls	r2, r2, #31
 80047be:	d502      	bpl.n	80047c6 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	07d0      	lsls	r0, r2, #31
 80047c4:	d46b      	bmi.n	800489e <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	0611      	lsls	r1, r2, #24
 80047ca:	d502      	bpl.n	80047d2 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	0612      	lsls	r2, r2, #24
 80047d0:	d46d      	bmi.n	80048ae <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	05d0      	lsls	r0, r2, #23
 80047d6:	d502      	bpl.n	80047de <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	0611      	lsls	r1, r2, #24
 80047dc:	d46f      	bmi.n	80048be <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	0652      	lsls	r2, r2, #25
 80047e2:	d502      	bpl.n	80047ea <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	0650      	lsls	r0, r2, #25
 80047e8:	d451      	bmi.n	800488e <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	0691      	lsls	r1, r2, #26
 80047ee:	d502      	bpl.n	80047f6 <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	0692      	lsls	r2, r2, #26
 80047f4:	d443      	bmi.n	800487e <HAL_TIM_IRQHandler+0xfa>
 80047f6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047f8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047fc:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004800:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004802:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004804:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004806:	f413 7f40 	tst.w	r3, #768	; 0x300
 800480a:	d06c      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 800480c:	f7ff ffb4 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004810:	2200      	movs	r2, #0
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	7722      	strb	r2, [r4, #28]
 8004816:	e7d0      	b.n	80047ba <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004818:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800481c:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004820:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004822:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004824:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004826:	079b      	lsls	r3, r3, #30
 8004828:	d15a      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	f7ff ffa3 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800482e:	4620      	mov	r0, r4
 8004830:	f7ff ffa4 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004834:	2200      	movs	r2, #0
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	7722      	strb	r2, [r4, #28]
 800483a:	e7b8      	b.n	80047ae <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800483c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004840:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004844:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004846:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004848:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800484a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800484e:	d144      	bne.n	80048da <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004850:	f7ff ff90 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	4620      	mov	r0, r4
 8004856:	f7ff ff91 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	2200      	movs	r2, #0
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	7722      	strb	r2, [r4, #28]
 8004860:	e79f      	b.n	80047a2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004862:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004866:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004868:	6119      	str	r1, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800486a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800486e:	0799      	lsls	r1, r3, #30
 8004870:	d02d      	beq.n	80048ce <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8004872:	f7ff ff81 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	2200      	movs	r2, #0
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	7722      	strb	r2, [r4, #28]
 800487c:	e78b      	b.n	8004796 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800487e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8004882:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004884:	611a      	str	r2, [r3, #16]
}
 8004886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800488a:	f000 b989 	b.w	8004ba0 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800488e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004892:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004894:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004896:	f7ff ff73 	bl	8004780 <HAL_TIM_TriggerCallback>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	e7a5      	b.n	80047ea <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800489e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80048a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80048a6:	f7fd f9e9 	bl	8001c7c <HAL_TIM_PeriodElapsedCallback>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	e78b      	b.n	80047c6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80048b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80048b6:	f000 f975 	bl	8004ba4 <HAL_TIMEx_BreakCallback>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	e789      	b.n	80047d2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048be:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80048c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80048c6:	f000 f96d 	bl	8004ba4 <HAL_TIMEx_BreakCallback>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	e787      	b.n	80047de <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ce:	f7ff ff51 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d2:	4620      	mov	r0, r4
 80048d4:	f7ff ff52 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
 80048d8:	e7cd      	b.n	8004876 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80048da:	f7ff ff4d 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 80048de:	e7bc      	b.n	800485a <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 80048e0:	f7ff ff4a 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 80048e4:	e7a6      	b.n	8004834 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	f7ff ff45 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ea:	4620      	mov	r0, r4
 80048ec:	f7ff ff46 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
 80048f0:	e78e      	b.n	8004810 <HAL_TIM_IRQHandler+0x8c>
 80048f2:	bf00      	nop

080048f4 <TIM_OC1_SetConfig>:
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f6:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 80048f8:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048fa:	f024 0401 	bic.w	r4, r4, #1
  tmpccmrx |= OC_Config->OCMode;
 80048fe:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004900:	4a13      	ldr	r2, [pc, #76]	; (8004950 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004902:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004904:	4d13      	ldr	r5, [pc, #76]	; (8004954 <TIM_OC1_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8004906:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004908:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800490a:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 800490c:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004910:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004914:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= OC_Config->OCPolarity;
 8004918:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 800491c:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004920:	d009      	beq.n	8004936 <TIM_OC1_SetConfig+0x42>
 8004922:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004926:	42a8      	cmp	r0, r5
 8004928:	d005      	beq.n	8004936 <TIM_OC1_SetConfig+0x42>
  TIMx->CCR1 = OC_Config->Pulse;
 800492a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800492c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800492e:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004930:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8004932:	6203      	str	r3, [r0, #32]
 8004934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8004936:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800493a:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800493c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800493e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004942:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004944:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8004946:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004948:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800494c:	432c      	orrs	r4, r5
 800494e:	e7ec      	b.n	800492a <TIM_OC1_SetConfig+0x36>
 8004950:	fffeff8c 	.word	0xfffeff8c
 8004954:	40010000 	.word	0x40010000

08004958 <TIM_OC2_SetConfig>:
{
 8004958:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4);
 800495c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495e:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004962:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004964:	4a14      	ldr	r2, [pc, #80]	; (80049b8 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004966:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004968:	4d14      	ldr	r5, [pc, #80]	; (80049bc <TIM_OC2_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 800496a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800496c:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800496e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 8004970:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004974:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004978:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 4);
 800497c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004980:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004984:	d009      	beq.n	800499a <TIM_OC2_SetConfig+0x42>
 8004986:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800498a:	42a8      	cmp	r0, r5
 800498c:	d005      	beq.n	800499a <TIM_OC2_SetConfig+0x42>
  TIMx->CCR2 = OC_Config->Pulse;
 800498e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004990:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004992:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004994:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004996:	6203      	str	r3, [r0, #32]
 8004998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 800499a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800499e:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80049a0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80049a6:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80049a8:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80049ac:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80049ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80049b2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80049b6:	e7ea      	b.n	800498e <TIM_OC2_SetConfig+0x36>
 80049b8:	feff8cff 	.word	0xfeff8cff
 80049bc:	40010000 	.word	0x40010000

080049c0 <TIM_OC3_SetConfig>:
{
 80049c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c2:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8);
 80049c4:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 80049ca:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ce:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80049d0:	4d14      	ldr	r5, [pc, #80]	; (8004a24 <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 80049d2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80049d4:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80049d6:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 80049d8:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80049dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80049e0:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 8);
 80049e4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80049e8:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80049ec:	d009      	beq.n	8004a02 <TIM_OC3_SetConfig+0x42>
 80049ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80049f2:	42a8      	cmp	r0, r5
 80049f4:	d005      	beq.n	8004a02 <TIM_OC3_SetConfig+0x42>
  TIMx->CCR3 = OC_Config->Pulse;
 80049f6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80049f8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80049fa:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80049fc:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80049fe:	6203      	str	r3, [r0, #32]
 8004a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004a06:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8004a08:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a0a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004a0e:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004a10:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004a14:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004a1a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8004a1e:	e7ea      	b.n	80049f6 <TIM_OC3_SetConfig+0x36>
 8004a20:	fffeff8c 	.word	0xfffeff8c
 8004a24:	40010000 	.word	0x40010000

08004a28 <TIM_OC4_SetConfig>:
{
 8004a28:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a2a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12);
 8004a2c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a2e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004a32:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a34:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a36:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004a38:	4d10      	ldr	r5, [pc, #64]	; (8004a7c <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 8004a3a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004a3c:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004a3e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 8004a40:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004a44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a48:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 12);
 8004a4c:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004a50:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004a54:	d009      	beq.n	8004a6a <TIM_OC4_SetConfig+0x42>
 8004a56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a5a:	42a8      	cmp	r0, r5
 8004a5c:	d005      	beq.n	8004a6a <TIM_OC4_SetConfig+0x42>
  TIMx->CCR4 = OC_Config->Pulse;
 8004a5e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a60:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004a62:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004a64:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004a66:	6203      	str	r3, [r0, #32]
 8004a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a6a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8004a6e:	694d      	ldr	r5, [r1, #20]
 8004a70:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004a74:	e7f3      	b.n	8004a5e <TIM_OC4_SetConfig+0x36>
 8004a76:	bf00      	nop
 8004a78:	feff8cff 	.word	0xfeff8cff
 8004a7c:	40010000 	.word	0x40010000

08004a80 <HAL_TIMEx_PWMN_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004a80:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8004a82:	2204      	movs	r2, #4
} 
 8004a84:	2000      	movs	r0, #0
  tmp = TIM_CCER_CC1NE << Channel;
 8004a86:	fa02 f101 	lsl.w	r1, r2, r1
{
 8004a8a:	b410      	push	{r4}

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8004a8c:	6a1c      	ldr	r4, [r3, #32]
 8004a8e:	ea24 0401 	bic.w	r4, r4, r1
 8004a92:	621c      	str	r4, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8004a94:	6a1a      	ldr	r2, [r3, #32]
} 
 8004a96:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8004a9a:	4311      	orrs	r1, r2
 8004a9c:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8004a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	f042 0201 	orr.w	r2, r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
} 
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004ab0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004ab4:	2b01      	cmp	r3, #1
{
 8004ab6:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8004ab8:	d01f      	beq.n	8004afa <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  tmpcr2 = htim->Instance->CR2;
 8004aba:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004abc:	4d11      	ldr	r5, [pc, #68]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 8004abe:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ac0:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8004ac2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ac4:	d014      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004ac6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004aca:	42aa      	cmp	r2, r5
 8004acc:	d010      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ace:	680d      	ldr	r5, [r1, #0]
  __HAL_UNLOCK(htim);
 8004ad0:	2600      	movs	r6, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ad2:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004ad4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004adc:	4321      	orrs	r1, r4
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ade:	432b      	orrs	r3, r5
  return HAL_OK;
 8004ae0:	4635      	mov	r5, r6
  htim->Instance->CR2 = tmpcr2;
 8004ae2:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8004ae4:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8004ae6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
} 
 8004aea:	4628      	mov	r0, r5
 8004aec:	bc70      	pop	{r4, r5, r6}
 8004aee:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004af0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004af4:	684d      	ldr	r5, [r1, #4]
 8004af6:	432b      	orrs	r3, r5
 8004af8:	e7e9      	b.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x1e>
  __HAL_LOCK(htim);
 8004afa:	2502      	movs	r5, #2
} 
 8004afc:	4628      	mov	r0, r5
 8004afe:	bc70      	pop	{r4, r5, r6}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40010000 	.word	0x40010000

08004b08 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8004b08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d040      	beq.n	8004b92 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b10:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b12:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
{
 8004b18:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b1a:	688d      	ldr	r5, [r1, #8]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	2402      	movs	r4, #2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b1e:	680f      	ldr	r7, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b20:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b22:	690e      	ldr	r6, [r1, #16]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b2c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b2e:	6805      	ldr	r5, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004b32:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b38:	433b      	orrs	r3, r7
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b3a:	4f17      	ldr	r7, [pc, #92]	; (8004b98 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b40:	42bd      	cmp	r5, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b42:	ea43 0306 	orr.w	r3, r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b46:	694e      	ldr	r6, [r1, #20]
 8004b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b4c:	ea43 0306 	orr.w	r3, r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004b54:	ea43 0304 	orr.w	r3, r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004b58:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004b5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b60:	d009      	beq.n	8004b76 <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
 8004b62:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8004b64:	4295      	cmp	r5, r2
 8004b66:	d006      	beq.n	8004b76 <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
  __HAL_UNLOCK(htim);
 8004b68:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 8004b6a:	646b      	str	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004b6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8004b70:	4610      	mov	r0, r2
 8004b72:	bcf0      	pop	{r4, r5, r6, r7}
 8004b74:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004b76:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004b78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b7c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004b7e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b82:	6a0a      	ldr	r2, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b88:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	e7ea      	b.n	8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8004b92:	2302      	movs	r3, #2
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	4770      	bx	lr
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40010400 	.word	0x40010400

08004ba0 <HAL_TIMEx_CommutationCallback>:
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop

08004ba4 <HAL_TIMEx_BreakCallback>:
{
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop

08004ba8 <HAL_TIM_PWM_ConfigChannel>:
{
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004baa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d030      	beq.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8004bb2:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8004bba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004bbe:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  switch (Channel)
 8004bc2:	2a14      	cmp	r2, #20
 8004bc4:	d81e      	bhi.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8004bc6:	e8df f002 	tbb	[pc, r2]
 8004bca:	1d56      	.short	0x1d56
 8004bcc:	1d681d1d 	.word	0x1d681d1d
 8004bd0:	1d7b1d1d 	.word	0x1d7b1d1d
 8004bd4:	1d0b1d1d 	.word	0x1d0b1d1d
 8004bd8:	1d8d1d1d 	.word	0x1d8d1d1d
 8004bdc:	1d1d      	.short	0x1d1d
 8004bde:	27          	.byte	0x27
 8004bdf:	00          	.byte	0x00
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be0:	4629      	mov	r1, r5
 8004be2:	6800      	ldr	r0, [r0, #0]
 8004be4:	f7ff ff20 	bl	8004a28 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004bea:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bec:	69d9      	ldr	r1, [r3, #28]
 8004bee:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004bf2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf4:	69d9      	ldr	r1, [r3, #28]
 8004bf6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004bfa:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004c02:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004c04:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004c06:	2201      	movs	r2, #1
  return HAL_OK;
 8004c08:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8004c0a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004c0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8004c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8004c14:	2002      	movs	r0, #2
}
 8004c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c18:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8004c1a:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c1c:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004c1e:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c20:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c24:	494c      	ldr	r1, [pc, #304]	; (8004d58 <HAL_TIM_PWM_ConfigChannel+0x1b0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c26:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004c28:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8004c2a:	6858      	ldr	r0, [r3, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c2c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 8004c30:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20);
 8004c34:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004c38:	4e48      	ldr	r6, [pc, #288]	; (8004d5c <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c3a:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3e:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004c40:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	f000 8081 	beq.w	8004d4a <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8004c48:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004c4c:	42b3      	cmp	r3, r6
 8004c4e:	d07c      	beq.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x1a2>
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c50:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004c52:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004c54:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004c56:	65de      	str	r6, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004c58:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c5a:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004c5c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c5e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004c62:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c66:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004c6a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c6e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004c74:	e7c6      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c76:	4629      	mov	r1, r5
 8004c78:	6800      	ldr	r0, [r0, #0]
 8004c7a:	f7ff fe3b 	bl	80048f4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c7e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c80:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c82:	6999      	ldr	r1, [r3, #24]
 8004c84:	f041 0108 	orr.w	r1, r1, #8
 8004c88:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c8a:	6999      	ldr	r1, [r3, #24]
 8004c8c:	f021 0104 	bic.w	r1, r1, #4
 8004c90:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c92:	699a      	ldr	r2, [r3, #24]
 8004c94:	4302      	orrs	r2, r0
 8004c96:	619a      	str	r2, [r3, #24]
    break;
 8004c98:	e7b4      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	6800      	ldr	r0, [r0, #0]
 8004c9e:	f7ff fe5b 	bl	8004958 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ca2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004ca4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ca6:	6999      	ldr	r1, [r3, #24]
 8004ca8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004cac:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cae:	6999      	ldr	r1, [r3, #24]
 8004cb0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004cb4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004cb6:	699a      	ldr	r2, [r3, #24]
 8004cb8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004cbc:	619a      	str	r2, [r3, #24]
    break;
 8004cbe:	e7a1      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	6800      	ldr	r0, [r0, #0]
 8004cc4:	f7ff fe7c 	bl	80049c0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cc8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8004cca:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ccc:	69d9      	ldr	r1, [r3, #28]
 8004cce:	f041 0108 	orr.w	r1, r1, #8
 8004cd2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cd4:	69d9      	ldr	r1, [r3, #28]
 8004cd6:	f021 0104 	bic.w	r1, r1, #4
 8004cda:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	4302      	orrs	r2, r0
 8004ce0:	61da      	str	r2, [r3, #28]
    break;
 8004ce2:	e78f      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ce4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16);
 8004ce6:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ce8:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004cea:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cec:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cf0:	491b      	ldr	r1, [pc, #108]	; (8004d60 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cf2:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004cf4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8004cf6:	6858      	ldr	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 8004cf8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 8004cfc:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16);
 8004d00:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004d04:	4e15      	ldr	r6, [pc, #84]	; (8004d5c <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d06:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0a:	42b3      	cmp	r3, r6
  tmpccmrx |= OC_Config->OCMode;
 8004d0c:	ea41 0107 	orr.w	r1, r1, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004d10:	d015      	beq.n	8004d3e <HAL_TIM_PWM_ConfigChannel+0x196>
 8004d12:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d16:	42b3      	cmp	r3, r6
 8004d18:	d011      	beq.n	8004d3e <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CCR5 = OC_Config->Pulse;
 8004d1a:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004d1c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004d1e:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004d20:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 8004d22:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d24:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004d26:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d28:	f041 0108 	orr.w	r1, r1, #8
 8004d2c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d2e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d30:	f021 0104 	bic.w	r1, r1, #4
 8004d34:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004d36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d38:	4302      	orrs	r2, r0
 8004d3a:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004d3c:	e762      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d3e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8004d42:	696e      	ldr	r6, [r5, #20]
 8004d44:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8004d48:	e7e7      	b.n	8004d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d4a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8004d4e:	696e      	ldr	r6, [r5, #20]
 8004d50:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004d54:	e77c      	b.n	8004c50 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8004d56:	bf00      	nop
 8004d58:	feff8fff 	.word	0xfeff8fff
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	fffeff8f 	.word	0xfffeff8f

08004d64 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d68:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004d6a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8004d6e:	b082      	sub	sp, #8
  if(huart->gState == HAL_UART_STATE_READY)
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d003      	beq.n	8004d7c <HAL_UART_Transmit+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004d74:	2002      	movs	r0, #2
  }
}
 8004d76:	b002      	add	sp, #8
 8004d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d7c:	4688      	mov	r8, r1
    if((pData == NULL ) || (Size == 0U))
 8004d7e:	b391      	cbz	r1, 8004de6 <HAL_UART_Transmit+0x82>
 8004d80:	fab2 f382 	clz	r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	bb73      	cbnz	r3, 8004de6 <HAL_UART_Transmit+0x82>
    __HAL_LOCK(huart);
 8004d88:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	2901      	cmp	r1, #1
 8004d90:	d0f0      	beq.n	8004d74 <HAL_UART_Transmit+0x10>
 8004d92:	2001      	movs	r0, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d94:	2121      	movs	r1, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d96:	66eb      	str	r3, [r5, #108]	; 0x6c
    __HAL_LOCK(huart);
 8004d98:	f885 0068 	strb.w	r0, [r5, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d9c:	f885 1069 	strb.w	r1, [r5, #105]	; 0x69
 8004da0:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8004da2:	f7fd fc17 	bl	80025d4 <HAL_GetTick>
    huart->TxXferSize = Size;
 8004da6:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8004da8:	4607      	mov	r7, r0
 8004daa:	682c      	ldr	r4, [r5, #0]
    huart->TxXferSize = Size;
 8004dac:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
    huart->TxXferCount = Size;
 8004db0:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8004db4:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	b303      	cbz	r3, 8004dfe <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 8004dbc:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
 8004dc8:	1c72      	adds	r2, r6, #1
 8004dca:	d125      	bne.n	8004e18 <HAL_UART_Transmit+0xb4>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dcc:	69e2      	ldr	r2, [r4, #28]
 8004dce:	0613      	lsls	r3, r2, #24
 8004dd0:	d5fc      	bpl.n	8004dcc <HAL_UART_Transmit+0x68>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd2:	68ab      	ldr	r3, [r5, #8]
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd8:	d03a      	beq.n	8004e50 <HAL_UART_Transmit+0xec>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004dda:	f898 3000 	ldrb.w	r3, [r8]
 8004dde:	f108 0801 	add.w	r8, r8, #1
 8004de2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004de4:	e7e6      	b.n	8004db4 <HAL_UART_Transmit+0x50>
      return  HAL_ERROR;
 8004de6:	2001      	movs	r0, #1
 8004de8:	e7c5      	b.n	8004d76 <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dea:	69e3      	ldr	r3, [r4, #28]
 8004dec:	065b      	lsls	r3, r3, #25
 8004dee:	d40b      	bmi.n	8004e08 <HAL_UART_Transmit+0xa4>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004df0:	b1e6      	cbz	r6, 8004e2c <HAL_UART_Transmit+0xc8>
 8004df2:	f7fd fbef 	bl	80025d4 <HAL_GetTick>
 8004df6:	1bc0      	subs	r0, r0, r7
 8004df8:	682c      	ldr	r4, [r5, #0]
 8004dfa:	4286      	cmp	r6, r0
 8004dfc:	d916      	bls.n	8004e2c <HAL_UART_Transmit+0xc8>
 8004dfe:	1c71      	adds	r1, r6, #1
 8004e00:	d1f3      	bne.n	8004dea <HAL_UART_Transmit+0x86>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e02:	69e3      	ldr	r3, [r4, #28]
 8004e04:	065a      	lsls	r2, r3, #25
 8004e06:	d5fc      	bpl.n	8004e02 <HAL_UART_Transmit+0x9e>
    __HAL_UNLOCK(huart);
 8004e08:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_READY;
 8004e0a:	2220      	movs	r2, #32
    return HAL_OK;
 8004e0c:	4618      	mov	r0, r3
    __HAL_UNLOCK(huart);
 8004e0e:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8004e12:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
    return HAL_OK;
 8004e16:	e7ae      	b.n	8004d76 <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e18:	69e3      	ldr	r3, [r4, #28]
 8004e1a:	0618      	lsls	r0, r3, #24
 8004e1c:	d4d9      	bmi.n	8004dd2 <HAL_UART_Transmit+0x6e>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004e1e:	b12e      	cbz	r6, 8004e2c <HAL_UART_Transmit+0xc8>
 8004e20:	f7fd fbd8 	bl	80025d4 <HAL_GetTick>
 8004e24:	1bc0      	subs	r0, r0, r7
 8004e26:	682c      	ldr	r4, [r5, #0]
 8004e28:	4286      	cmp	r6, r0
 8004e2a:	d8cd      	bhi.n	8004dc8 <HAL_UART_Transmit+0x64>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e2c:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

        huart->gState = HAL_UART_STATE_READY;
 8004e2e:	2220      	movs	r2, #32
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e30:	2100      	movs	r1, #0
      return HAL_TIMEOUT;
 8004e32:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e38:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3a:	68a3      	ldr	r3, [r4, #8]
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004e42:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8004e46:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
 8004e4e:	e792      	b.n	8004d76 <HAL_UART_Transmit+0x12>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e50:	692b      	ldr	r3, [r5, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1c1      	bne.n	8004dda <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004e56:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5e:	62a3      	str	r3, [r4, #40]	; 0x28
        pData += 2;
 8004e60:	e7a8      	b.n	8004db4 <HAL_UART_Transmit+0x50>
 8004e62:	bf00      	nop

08004e64 <HAL_UART_Receive_DMA>:
{
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8004e66:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 8004e6a:	2c20      	cmp	r4, #32
 8004e6c:	d001      	beq.n	8004e72 <HAL_UART_Receive_DMA+0xe>
    return HAL_BUSY;
 8004e6e:	2002      	movs	r0, #2
}
 8004e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 8004e72:	2900      	cmp	r1, #0
 8004e74:	d035      	beq.n	8004ee2 <HAL_UART_Receive_DMA+0x7e>
 8004e76:	fab2 f482 	clz	r4, r2
 8004e7a:	0964      	lsrs	r4, r4, #5
 8004e7c:	2c00      	cmp	r4, #0
 8004e7e:	d130      	bne.n	8004ee2 <HAL_UART_Receive_DMA+0x7e>
    __HAL_LOCK(huart);
 8004e80:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d0f2      	beq.n	8004e6e <HAL_UART_Receive_DMA+0xa>
 8004e88:	4605      	mov	r5, r0
 8004e8a:	4616      	mov	r6, r2
 8004e8c:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e8e:	2122      	movs	r1, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e90:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_LOCK(huart);
 8004e92:	f04f 0e01 	mov.w	lr, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e96:	66c4      	str	r4, [r0, #108]	; 0x6c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004e98:	4633      	mov	r3, r6
    huart->pRxBuffPtr = pData;
 8004e9a:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8004e9c:	f8a0 6058 	strh.w	r6, [r0, #88]	; 0x58
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004ea0:	4638      	mov	r0, r7
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ea2:	f885 106a 	strb.w	r1, [r5, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ea6:	4e10      	ldr	r6, [pc, #64]	; (8004ee8 <HAL_UART_Receive_DMA+0x84>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ea8:	4910      	ldr	r1, [pc, #64]	; (8004eec <HAL_UART_Receive_DMA+0x88>)
    __HAL_LOCK(huart);
 8004eaa:	f885 e068 	strb.w	lr, [r5, #104]	; 0x68
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004eae:	63fe      	str	r6, [r7, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004eb0:	6439      	str	r1, [r7, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004eb2:	4e0f      	ldr	r6, [pc, #60]	; (8004ef0 <HAL_UART_Receive_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004eb4:	6829      	ldr	r1, [r5, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8004eb6:	653c      	str	r4, [r7, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004eb8:	64fe      	str	r6, [r7, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004eba:	3124      	adds	r1, #36	; 0x24
 8004ebc:	f7fd fea2 	bl	8002c04 <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ec0:	682b      	ldr	r3, [r5, #0]
    __HAL_UNLOCK(huart);
 8004ec2:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
    return HAL_OK;
 8004ec6:	4620      	mov	r0, r4
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ece:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ede:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8004ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	08004f6d 	.word	0x08004f6d
 8004eec:	08004fa9 	.word	0x08004fa9
 8004ef0:	08004fb5 	.word	0x08004fb5

08004ef4 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8004ef4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d016      	beq.n	8004f2a <HAL_UART_DMAResume+0x36>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004efc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  __HAL_LOCK(huart);
 8004f00:	2201      	movs	r2, #1
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f02:	2b21      	cmp	r3, #33	; 0x21
  __HAL_LOCK(huart);
 8004f04:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f08:	6803      	ldr	r3, [r0, #0]
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f0a:	d023      	beq.n	8004f54 <HAL_UART_DMAResume+0x60>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f0c:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8004f10:	2a22      	cmp	r2, #34	; 0x22
 8004f12:	d00c      	beq.n	8004f2e <HAL_UART_DMAResume+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	f010 0001 	ands.w	r0, r0, #1
 8004f1a:	d104      	bne.n	8004f26 <HAL_UART_DMAResume+0x32>
    __HAL_UART_ENABLE(huart);
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	4770      	bx	lr
  return HAL_OK;
 8004f26:	2000      	movs	r0, #0
}
 8004f28:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	4770      	bx	lr
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8004f2e:	2208      	movs	r2, #8
 8004f30:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f38:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f48:	609a      	str	r2, [r3, #8]
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	f010 0001 	ands.w	r0, r0, #1
 8004f50:	d0e4      	beq.n	8004f1c <HAL_UART_DMAResume+0x28>
 8004f52:	e7e8      	b.n	8004f26 <HAL_UART_DMAResume+0x32>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f5a:	609a      	str	r2, [r3, #8]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f5c:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8004f60:	2a22      	cmp	r2, #34	; 0x22
 8004f62:	d1d7      	bne.n	8004f14 <HAL_UART_DMAResume+0x20>
 8004f64:	e7e3      	b.n	8004f2e <HAL_UART_DMAResume+0x3a>
 8004f66:	bf00      	nop

08004f68 <HAL_UART_TxCpltCallback>:
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback
  * @param hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* DMA Normal mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004f6e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f70:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8004f78:	d111      	bne.n	8004f9e <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f7a:	6802      	ldr	r2, [r0, #0]
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

	/* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f7c:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 8004f7e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f88:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	6893      	ldr	r3, [r2, #8]
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f92:	6893      	ldr	r3, [r2, #8]
 8004f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f98:	6093      	str	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8004f9a:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
  }
  HAL_UART_RxCpltCallback(huart);
 8004f9e:	f7fb fc1f 	bl	80007e0 <HAL_UART_RxCpltCallback>
 8004fa2:	bd08      	pop	{r3, pc}

08004fa4 <HAL_UART_RxHalfCpltCallback>:
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop

08004fa8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback
  * @param hdma : DMA handle
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8004faa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004fac:	f7ff fffa 	bl	8004fa4 <HAL_UART_RxHalfCpltCallback>
 8004fb0:	bd08      	pop	{r3, pc}
 8004fb2:	bf00      	nop

08004fb4 <UART_DMAError>:
  * @brief DMA UART communication error callback
  * @param hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fb4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0U;
 8004fb6:	2200      	movs	r2, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8004fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004fbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fc2:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8004fc6:	2a21      	cmp	r2, #33	; 0x21
 8004fc8:	d01b      	beq.n	8005002 <UART_DMAError+0x4e>
  {
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fca:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8004fce:	2a22      	cmp	r2, #34	; 0x22
 8004fd0:	d007      	beq.n	8004fe2 <UART_DMAError+0x2e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
  {
    UART_EndRxTransfer(huart);
  }
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8004fd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8004fd4:	4618      	mov	r0, r3
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8004fd6:	f042 0210 	orr.w	r2, r2, #16
 8004fda:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8004fdc:	f7fb fbfa 	bl	80007d4 <HAL_UART_ErrorCallback>
 8004fe0:	bd08      	pop	{r3, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	6891      	ldr	r1, [r2, #8]
 8004fe6:	0649      	lsls	r1, r1, #25
 8004fe8:	d5f3      	bpl.n	8004fd2 <UART_DMAError+0x1e>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fea:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fec:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fee:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8004ff2:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff4:	6891      	ldr	r1, [r2, #8]
 8004ff6:	f021 0101 	bic.w	r1, r1, #1
 8004ffa:	6091      	str	r1, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	f883 006a 	strb.w	r0, [r3, #106]	; 0x6a
 8005000:	e7e7      	b.n	8004fd2 <UART_DMAError+0x1e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	6891      	ldr	r1, [r2, #8]
 8005006:	0608      	lsls	r0, r1, #24
 8005008:	d5df      	bpl.n	8004fca <UART_DMAError+0x16>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800500a:	6811      	ldr	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800500c:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800500e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005012:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005014:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
 8005018:	e7d7      	b.n	8004fca <UART_DMAError+0x16>
 800501a:	bf00      	nop

0800501c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800501c:	6803      	ldr	r3, [r0, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
{
 8005020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == RESET)
 8005024:	0716      	lsls	r6, r2, #28
{
 8005026:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005028:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800502a:	6899      	ldr	r1, [r3, #8]
  if (errorflags == RESET)
 800502c:	d10e      	bne.n	800504c <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800502e:	0695      	lsls	r5, r2, #26
 8005030:	d502      	bpl.n	8005038 <HAL_UART_IRQHandler+0x1c>
 8005032:	0681      	lsls	r1, r0, #26
 8005034:	f100 8098 	bmi.w	8005168 <HAL_UART_IRQHandler+0x14c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005038:	0616      	lsls	r6, r2, #24
 800503a:	d501      	bpl.n	8005040 <HAL_UART_IRQHandler+0x24>
 800503c:	0605      	lsls	r5, r0, #24
 800503e:	d478      	bmi.n	8005132 <HAL_UART_IRQHandler+0x116>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005040:	0651      	lsls	r1, r2, #25
 8005042:	d501      	bpl.n	8005048 <HAL_UART_IRQHandler+0x2c>
 8005044:	0642      	lsls	r2, r0, #25
 8005046:	d468      	bmi.n	800511a <HAL_UART_IRQHandler+0xfe>
 8005048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800504c:	f011 0101 	ands.w	r1, r1, #1
 8005050:	461d      	mov	r5, r3
 8005052:	d14a      	bne.n	80050ea <HAL_UART_IRQHandler+0xce>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8005054:	f410 7f90 	tst.w	r0, #288	; 0x120
 8005058:	d0ee      	beq.n	8005038 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800505a:	f012 0601 	ands.w	r6, r2, #1
 800505e:	f000 8094 	beq.w	800518a <HAL_UART_IRQHandler+0x16e>
 8005062:	f410 7680 	ands.w	r6, r0, #256	; 0x100
 8005066:	d144      	bne.n	80050f2 <HAL_UART_IRQHandler+0xd6>
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005068:	4631      	mov	r1, r6
 800506a:	ea01 0692 	and.w	r6, r1, r2, lsr #2
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800506e:	b12e      	cbz	r6, 800507c <HAL_UART_IRQHandler+0x60>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8005070:	2604      	movs	r6, #4
 8005072:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005074:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8005076:	f046 0602 	orr.w	r6, r6, #2
 800507a:	66e6      	str	r6, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800507c:	0717      	lsls	r7, r2, #28
 800507e:	d503      	bpl.n	8005088 <HAL_UART_IRQHandler+0x6c>
 8005080:	0686      	lsls	r6, r0, #26
 8005082:	d47b      	bmi.n	800517c <HAL_UART_IRQHandler+0x160>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005084:	2900      	cmp	r1, #0
 8005086:	d179      	bne.n	800517c <HAL_UART_IRQHandler+0x160>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005088:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800508a:	2900      	cmp	r1, #0
 800508c:	d0dc      	beq.n	8005048 <HAL_UART_IRQHandler+0x2c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800508e:	0691      	lsls	r1, r2, #26
 8005090:	d502      	bpl.n	8005098 <HAL_UART_IRQHandler+0x7c>
 8005092:	0682      	lsls	r2, r0, #26
 8005094:	f100 80a6 	bmi.w	80051e4 <HAL_UART_IRQHandler+0x1c8>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005098:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800509a:	071b      	lsls	r3, r3, #28
 800509c:	d404      	bmi.n	80050a8 <HAL_UART_IRQHandler+0x8c>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800509e:	68ae      	ldr	r6, [r5, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80050a0:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 80050a4:	f000 80a7 	beq.w	80051f6 <HAL_UART_IRQHandler+0x1da>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a8:	682b      	ldr	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80050aa:	2220      	movs	r2, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050b0:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b2:	68ab      	ldr	r3, [r5, #8]
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	60ab      	str	r3, [r5, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80050ba:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050be:	68ab      	ldr	r3, [r5, #8]
 80050c0:	065f      	lsls	r7, r3, #25
 80050c2:	d564      	bpl.n	800518e <HAL_UART_IRQHandler+0x172>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c4:	68ab      	ldr	r3, [r5, #8]
          if(huart->hdmarx != NULL)
 80050c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050cc:	60ab      	str	r3, [r5, #8]
          if(huart->hdmarx != NULL)
 80050ce:	2a00      	cmp	r2, #0
 80050d0:	d05d      	beq.n	800518e <HAL_UART_IRQHandler+0x172>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050d2:	4b74      	ldr	r3, [pc, #464]	; (80052a4 <HAL_UART_IRQHandler+0x288>)
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050d4:	4610      	mov	r0, r2
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050d6:	6513      	str	r3, [r2, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050d8:	f7fd fdd8 	bl	8002c8c <HAL_DMA_Abort_IT>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d0b3      	beq.n	8005048 <HAL_UART_IRQHandler+0x2c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050e0:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80050e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80050e8:	4718      	bx	r3
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050ea:	07d7      	lsls	r7, r2, #31
 80050ec:	d507      	bpl.n	80050fe <HAL_UART_IRQHandler+0xe2>
 80050ee:	05c6      	lsls	r6, r0, #23
 80050f0:	d505      	bpl.n	80050fe <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80050f2:	2601      	movs	r6, #1
 80050f4:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050f6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80050f8:	f046 0601 	orr.w	r6, r6, #1
 80050fc:	66e6      	str	r6, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050fe:	b2c9      	uxtb	r1, r1
 8005100:	ea11 0652 	ands.w	r6, r1, r2, lsr #1
 8005104:	d0b1      	beq.n	800506a <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8005106:	2702      	movs	r7, #2
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005108:	4631      	mov	r1, r6
 800510a:	f3c2 0680 	ubfx	r6, r2, #2, #1
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800510e:	621f      	str	r7, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005110:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8005112:	f047 0704 	orr.w	r7, r7, #4
 8005116:	66e7      	str	r7, [r4, #108]	; 0x6c
 8005118:	e7a9      	b.n	800506e <HAL_UART_IRQHandler+0x52>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800511a:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800511c:	2120      	movs	r1, #32
  HAL_UART_TxCpltCallback(huart);
 800511e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005124:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005126:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 800512a:	f7ff ff1d 	bl	8004f68 <HAL_UART_TxCpltCallback>
 800512e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005132:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8005136:	2a21      	cmp	r2, #33	; 0x21
 8005138:	d186      	bne.n	8005048 <HAL_UART_IRQHandler+0x2c>
    if(huart->TxXferCount == 0U)
 800513a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800513e:	b292      	uxth	r2, r2
 8005140:	2a00      	cmp	r2, #0
 8005142:	d074      	beq.n	800522e <HAL_UART_IRQHandler+0x212>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005144:	68a2      	ldr	r2, [r4, #8]
 8005146:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800514a:	f000 8084 	beq.w	8005256 <HAL_UART_IRQHandler+0x23a>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800514e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005150:	1c51      	adds	r1, r2, #1
 8005152:	64e1      	str	r1, [r4, #76]	; 0x4c
 8005154:	7812      	ldrb	r2, [r2, #0]
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8005158:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800515c:	3b01      	subs	r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8005164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005168:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 800516c:	2a22      	cmp	r2, #34	; 0x22
 800516e:	d013      	beq.n	8005198 <HAL_UART_IRQHandler+0x17c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	f042 0208 	orr.w	r2, r2, #8
 8005176:	619a      	str	r2, [r3, #24]
 8005178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800517c:	2108      	movs	r1, #8
 800517e:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005180:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005182:	f041 0108 	orr.w	r1, r1, #8
 8005186:	66e1      	str	r1, [r4, #108]	; 0x6c
 8005188:	e77e      	b.n	8005088 <HAL_UART_IRQHandler+0x6c>
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800518a:	4631      	mov	r1, r6
 800518c:	e776      	b.n	800507c <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 800518e:	4620      	mov	r0, r4
 8005190:	f7fb fb20 	bl	80007d4 <HAL_UART_ErrorCallback>
 8005194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005198:	68a2      	ldr	r2, [r4, #8]
  uint16_t uhMask = huart->Mask;
 800519a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80051a2:	d04e      	beq.n	8005242 <HAL_UART_IRQHandler+0x226>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80051a8:	400b      	ands	r3, r1
 80051aa:	1c51      	adds	r1, r2, #1
 80051ac:	6561      	str	r1, [r4, #84]	; 0x54
 80051ae:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 80051b0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f47f af43 	bne.w	8005048 <HAL_UART_IRQHandler+0x2c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c2:	6823      	ldr	r3, [r4, #0]
      huart->RxState = HAL_UART_STATE_READY;
 80051c4:	2120      	movs	r1, #32
      HAL_UART_RxCpltCallback(huart);
 80051c6:	4620      	mov	r0, r4
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051ce:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80051d8:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80051dc:	f7fb fb00 	bl	80007e0 <HAL_UART_RxCpltCallback>
 80051e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051e4:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 80051e8:	2a22      	cmp	r2, #34	; 0x22
 80051ea:	d00a      	beq.n	8005202 <HAL_UART_IRQHandler+0x1e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	f042 0208 	orr.w	r2, r2, #8
 80051f2:	619a      	str	r2, [r3, #24]
 80051f4:	e750      	b.n	8005098 <HAL_UART_IRQHandler+0x7c>
        HAL_UART_ErrorCallback(huart);
 80051f6:	4620      	mov	r0, r4
 80051f8:	f7fb faec 	bl	80007d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	66e6      	str	r6, [r4, #108]	; 0x6c
 80051fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005202:	68a2      	ldr	r2, [r4, #8]
  uint16_t uhMask = huart->Mask;
 8005204:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005208:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800520c:	d03f      	beq.n	800528e <HAL_UART_IRQHandler+0x272>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005212:	400b      	ands	r3, r1
 8005214:	1c51      	adds	r1, r2, #1
 8005216:	6561      	str	r1, [r4, #84]	; 0x54
 8005218:	7013      	strb	r3, [r2, #0]
 800521a:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0)
 800521c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8005220:	3a01      	subs	r2, #1
 8005222:	b292      	uxth	r2, r2
 8005224:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8005228:	b30a      	cbz	r2, 800526e <HAL_UART_IRQHandler+0x252>
 800522a:	461d      	mov	r5, r3
 800522c:	e734      	b.n	8005098 <HAL_UART_IRQHandler+0x7c>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005234:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005242:	6922      	ldr	r2, [r4, #16]
 8005244:	2a00      	cmp	r2, #0
 8005246:	d1ad      	bne.n	80051a4 <HAL_UART_IRQHandler+0x188>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800524c:	400b      	ands	r3, r1
 800524e:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2;
 8005252:	6562      	str	r2, [r4, #84]	; 0x54
 8005254:	e7ac      	b.n	80051b0 <HAL_UART_IRQHandler+0x194>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005256:	6922      	ldr	r2, [r4, #16]
 8005258:	2a00      	cmp	r2, #0
 800525a:	f47f af78 	bne.w	800514e <HAL_UART_IRQHandler+0x132>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800525e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005260:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005264:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005268:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800526a:	64e2      	str	r2, [r4, #76]	; 0x4c
 800526c:	e774      	b.n	8005158 <HAL_UART_IRQHandler+0x13c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800526e:	681a      	ldr	r2, [r3, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8005270:	2120      	movs	r1, #32
      HAL_UART_RxCpltCallback(huart);
 8005272:	4620      	mov	r0, r4
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005274:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005278:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8005282:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8005286:	f7fb faab 	bl	80007e0 <HAL_UART_RxCpltCallback>
 800528a:	6825      	ldr	r5, [r4, #0]
 800528c:	e704      	b.n	8005098 <HAL_UART_IRQHandler+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800528e:	6922      	ldr	r2, [r4, #16]
 8005290:	2a00      	cmp	r2, #0
 8005292:	d1bc      	bne.n	800520e <HAL_UART_IRQHandler+0x1f2>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8005294:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005296:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005298:	4001      	ands	r1, r0
 800529a:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr +=2;
 800529e:	6562      	str	r2, [r4, #84]	; 0x54
 80052a0:	e7bc      	b.n	800521c <HAL_UART_IRQHandler+0x200>
 80052a2:	bf00      	nop
 80052a4:	080052a9 	.word	0x080052a9

080052a8 <UART_DMAAbortOnError>:
{
 80052a8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 80052aa:	2200      	movs	r2, #0
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80052ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80052ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  HAL_UART_ErrorCallback(huart);
 80052b2:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 80052b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80052b8:	f7fb fa8c 	bl	80007d4 <HAL_UART_ErrorCallback>
 80052bc:	bd08      	pop	{r3, pc}
 80052be:	bf00      	nop

080052c0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80052c2:	07da      	lsls	r2, r3, #31
{
 80052c4:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052c6:	d506      	bpl.n	80052d6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c8:	6801      	ldr	r1, [r0, #0]
 80052ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80052cc:	684a      	ldr	r2, [r1, #4]
 80052ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80052d2:	4322      	orrs	r2, r4
 80052d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d6:	079c      	lsls	r4, r3, #30
 80052d8:	d506      	bpl.n	80052e8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052da:	6801      	ldr	r1, [r0, #0]
 80052dc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80052de:	684a      	ldr	r2, [r1, #4]
 80052e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052e4:	4322      	orrs	r2, r4
 80052e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e8:	0759      	lsls	r1, r3, #29
 80052ea:	d506      	bpl.n	80052fa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052ec:	6801      	ldr	r1, [r0, #0]
 80052ee:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80052f0:	684a      	ldr	r2, [r1, #4]
 80052f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052f6:	4322      	orrs	r2, r4
 80052f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052fa:	071a      	lsls	r2, r3, #28
 80052fc:	d506      	bpl.n	800530c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052fe:	6801      	ldr	r1, [r0, #0]
 8005300:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005302:	684a      	ldr	r2, [r1, #4]
 8005304:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005308:	4322      	orrs	r2, r4
 800530a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800530c:	06dc      	lsls	r4, r3, #27
 800530e:	d506      	bpl.n	800531e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005310:	6801      	ldr	r1, [r0, #0]
 8005312:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005314:	688a      	ldr	r2, [r1, #8]
 8005316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800531a:	4322      	orrs	r2, r4
 800531c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800531e:	0699      	lsls	r1, r3, #26
 8005320:	d506      	bpl.n	8005330 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005322:	6801      	ldr	r1, [r0, #0]
 8005324:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005326:	688a      	ldr	r2, [r1, #8]
 8005328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800532c:	4322      	orrs	r2, r4
 800532e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005330:	065a      	lsls	r2, r3, #25
 8005332:	d50a      	bpl.n	800534a <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005334:	6801      	ldr	r1, [r0, #0]
 8005336:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005338:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800533a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800533e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005342:	ea42 0204 	orr.w	r2, r2, r4
 8005346:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005348:	d00b      	beq.n	8005362 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800534a:	061b      	lsls	r3, r3, #24
 800534c:	d506      	bpl.n	800535c <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800534e:	6802      	ldr	r2, [r0, #0]
 8005350:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005352:	6853      	ldr	r3, [r2, #4]
 8005354:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005358:	430b      	orrs	r3, r1
 800535a:	6053      	str	r3, [r2, #4]
  }
}
 800535c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005360:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005362:	684a      	ldr	r2, [r1, #4]
 8005364:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005366:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800536a:	4322      	orrs	r2, r4
 800536c:	604a      	str	r2, [r1, #4]
 800536e:	e7ec      	b.n	800534a <UART_AdvFeatureConfig+0x8a>

08005370 <HAL_UART_Init>:
  if(huart == NULL)
 8005370:	2800      	cmp	r0, #0
 8005372:	f000 81be 	beq.w	80056f2 <HAL_UART_Init+0x382>
{
 8005376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8005378:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800537c:	4604      	mov	r4, r0
 800537e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005382:	2b00      	cmp	r3, #0
 8005384:	d047      	beq.n	8005416 <HAL_UART_Init+0xa6>
  __HAL_UART_DISABLE(huart);
 8005386:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005388:	2224      	movs	r2, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800538a:	6921      	ldr	r1, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800538c:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005390:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8005392:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005394:	430b      	orrs	r3, r1
 8005396:	6961      	ldr	r1, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8005398:	f022 0201 	bic.w	r2, r2, #1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800539c:	48b8      	ldr	r0, [pc, #736]	; (8005680 <HAL_UART_Init+0x310>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800539e:	430b      	orrs	r3, r1
 80053a0:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 80053a2:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80053a4:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053a6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a8:	68e7      	ldr	r7, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80053aa:	4010      	ands	r0, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80053ac:	6a26      	ldr	r6, [r4, #32]
 80053ae:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80053b0:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b2:	48b4      	ldr	r0, [pc, #720]	; (8005684 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80053b4:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80053b6:	602b      	str	r3, [r5, #0]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b8:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ba:	686b      	ldr	r3, [r5, #4]
 80053bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053c0:	ea43 0307 	orr.w	r3, r3, r7
 80053c4:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80053c6:	68ab      	ldr	r3, [r5, #8]
 80053c8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80053cc:	ea42 0203 	orr.w	r2, r2, r3
 80053d0:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053d2:	f000 8094 	beq.w	80054fe <HAL_UART_Init+0x18e>
 80053d6:	4bac      	ldr	r3, [pc, #688]	; (8005688 <HAL_UART_Init+0x318>)
 80053d8:	429d      	cmp	r5, r3
 80053da:	f000 80a4 	beq.w	8005526 <HAL_UART_Init+0x1b6>
 80053de:	4bab      	ldr	r3, [pc, #684]	; (800568c <HAL_UART_Init+0x31c>)
 80053e0:	429d      	cmp	r5, r3
 80053e2:	f000 80a9 	beq.w	8005538 <HAL_UART_Init+0x1c8>
 80053e6:	4baa      	ldr	r3, [pc, #680]	; (8005690 <HAL_UART_Init+0x320>)
 80053e8:	429d      	cmp	r5, r3
 80053ea:	d019      	beq.n	8005420 <HAL_UART_Init+0xb0>
 80053ec:	4ba9      	ldr	r3, [pc, #676]	; (8005694 <HAL_UART_Init+0x324>)
 80053ee:	429d      	cmp	r5, r3
 80053f0:	d027      	beq.n	8005442 <HAL_UART_Init+0xd2>
 80053f2:	4ba9      	ldr	r3, [pc, #676]	; (8005698 <HAL_UART_Init+0x328>)
 80053f4:	429d      	cmp	r5, r3
 80053f6:	f000 80c8 	beq.w	800558a <HAL_UART_Init+0x21a>
 80053fa:	4ba8      	ldr	r3, [pc, #672]	; (800569c <HAL_UART_Init+0x32c>)
 80053fc:	429d      	cmp	r5, r3
 80053fe:	f000 80b5 	beq.w	800556c <HAL_UART_Init+0x1fc>
 8005402:	4ba7      	ldr	r3, [pc, #668]	; (80056a0 <HAL_UART_Init+0x330>)
 8005404:	429d      	cmp	r5, r3
 8005406:	f000 8159 	beq.w	80056bc <HAL_UART_Init+0x34c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800540a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800540e:	f000 8168 	beq.w	80056e2 <HAL_UART_Init+0x372>
    return HAL_ERROR;
 8005412:	2001      	movs	r0, #1
 8005414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8005416:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800541a:	f7fc ff4f 	bl	80022bc <HAL_UART_MspInit>
 800541e:	e7b2      	b.n	8005386 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005420:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005428:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	f000 80a6 	beq.w	800557e <HAL_UART_Init+0x20e>
 8005432:	d912      	bls.n	800545a <HAL_UART_Init+0xea>
 8005434:	2b80      	cmp	r3, #128	; 0x80
 8005436:	f000 8103 	beq.w	8005640 <HAL_UART_Init+0x2d0>
 800543a:	2bc0      	cmp	r3, #192	; 0xc0
 800543c:	f000 808a 	beq.w	8005554 <HAL_UART_Init+0x1e4>
 8005440:	e7e3      	b.n	800540a <HAL_UART_Init+0x9a>
 8005442:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005452:	f000 8094 	beq.w	800557e <HAL_UART_Init+0x20e>
 8005456:	f200 80e6 	bhi.w	8005626 <HAL_UART_Init+0x2b6>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1d5      	bne.n	800540a <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800545e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005462:	f000 80e7 	beq.w	8005634 <HAL_UART_Init+0x2c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005466:	f7fe fbfb 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800546a:	6862      	ldr	r2, [r4, #4]
 800546c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005470:	fbb3 f3f2 	udiv	r3, r3, r2
 8005474:	b29b      	uxth	r3, r3
 8005476:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800547a:	2b00      	cmp	r3, #0
 800547c:	d13b      	bne.n	80054f6 <HAL_UART_Init+0x186>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800547e:	6823      	ldr	r3, [r4, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005480:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005488:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005490:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549a:	66e1      	str	r1, [r4, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800549c:	f7fd f89a 	bl	80025d4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80054a2:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	0712      	lsls	r2, r2, #28
 80054a8:	d409      	bmi.n	80054be <HAL_UART_Init+0x14e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80054aa:	2220      	movs	r2, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ac:	2300      	movs	r3, #0
  huart->gState= HAL_UART_STATE_READY;
 80054ae:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69

  return HAL_OK;
 80054b2:	4618      	mov	r0, r3
  huart->RxState= HAL_UART_STATE_READY;
 80054b4:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 80054b8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80054bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80054be:	4f79      	ldr	r7, [pc, #484]	; (80056a4 <HAL_UART_Init+0x334>)
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c0:	69dd      	ldr	r5, [r3, #28]
 80054c2:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80054c6:	d1f0      	bne.n	80054aa <HAL_UART_Init+0x13a>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80054c8:	f7fd f884 	bl	80025d4 <HAL_GetTick>
 80054cc:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ce:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80054d0:	42b8      	cmp	r0, r7
 80054d2:	d9f5      	bls.n	80054c0 <HAL_UART_Init+0x150>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054d4:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80054d6:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 80054d8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054de:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80054e8:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 80054ec:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 80054f0:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 80054f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UART_AdvFeatureConfig(huart);
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff fee2 	bl	80052c0 <UART_AdvFeatureConfig>
 80054fc:	e7bf      	b.n	800547e <HAL_UART_Init+0x10e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054fe:	4b6a      	ldr	r3, [pc, #424]	; (80056a8 <HAL_UART_Init+0x338>)
 8005500:	4a6a      	ldr	r2, [pc, #424]	; (80056ac <HAL_UART_Init+0x33c>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800550c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005510:	d159      	bne.n	80055c6 <HAL_UART_Init+0x256>
    switch (clocksource)
 8005512:	2b08      	cmp	r3, #8
 8005514:	f200 80e5 	bhi.w	80056e2 <HAL_UART_Init+0x372>
 8005518:	e8df f003 	tbb	[pc, r3]
 800551c:	e395748c 	.word	0xe395748c
 8005520:	e3e3e38f 	.word	0xe3e3e38f
 8005524:	9d          	.byte	0x9d
 8005525:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005526:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800552a:	4a61      	ldr	r2, [pc, #388]	; (80056b0 <HAL_UART_Init+0x340>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	5cd3      	ldrb	r3, [r2, r3]
 8005536:	e7e9      	b.n	800550c <HAL_UART_Init+0x19c>
 8005538:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005540:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005544:	2b10      	cmp	r3, #16
 8005546:	d01a      	beq.n	800557e <HAL_UART_Init+0x20e>
 8005548:	d987      	bls.n	800545a <HAL_UART_Init+0xea>
 800554a:	2b20      	cmp	r3, #32
 800554c:	d078      	beq.n	8005640 <HAL_UART_Init+0x2d0>
 800554e:	2b30      	cmp	r3, #48	; 0x30
 8005550:	f47f af5b 	bne.w	800540a <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005554:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005558:	d07d      	beq.n	8005656 <HAL_UART_Init+0x2e6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800555a:	6862      	ldr	r2, [r4, #4]
 800555c:	0853      	lsrs	r3, r2, #1
 800555e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005562:	fbb3 f3f2 	udiv	r3, r3, r2
 8005566:	b29b      	uxth	r3, r3
 8005568:	60eb      	str	r3, [r5, #12]
 800556a:	e785      	b.n	8005478 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800556c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005574:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557c:	d116      	bne.n	80055ac <HAL_UART_Init+0x23c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800557e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005582:	d05a      	beq.n	800563a <HAL_UART_Init+0x2ca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005584:	f7fe fb3c 	bl	8003c00 <HAL_RCC_GetSysClockFreq>
 8005588:	e76f      	b.n	800546a <HAL_UART_Init+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800558a:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559a:	d0f0      	beq.n	800557e <HAL_UART_Init+0x20e>
 800559c:	d92c      	bls.n	80055f8 <HAL_UART_Init+0x288>
 800559e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a2:	d04d      	beq.n	8005640 <HAL_UART_Init+0x2d0>
 80055a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055a8:	d0d4      	beq.n	8005554 <HAL_UART_Init+0x1e4>
 80055aa:	e72e      	b.n	800540a <HAL_UART_Init+0x9a>
 80055ac:	f240 809d 	bls.w	80056ea <HAL_UART_Init+0x37a>
 80055b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b4:	d044      	beq.n	8005640 <HAL_UART_Init+0x2d0>
 80055b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055ba:	d0cb      	beq.n	8005554 <HAL_UART_Init+0x1e4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055bc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80055c0:	f000 808f 	beq.w	80056e2 <HAL_UART_Init+0x372>
 80055c4:	2310      	movs	r3, #16
    switch (clocksource)
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	f63f af23 	bhi.w	8005412 <HAL_UART_Init+0xa2>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_UART_Init+0x264>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	08005467 	.word	0x08005467
 80055d8:	08005667 	.word	0x08005667
 80055dc:	0800566d 	.word	0x0800566d
 80055e0:	08005413 	.word	0x08005413
 80055e4:	08005585 	.word	0x08005585
 80055e8:	08005413 	.word	0x08005413
 80055ec:	08005413 	.word	0x08005413
 80055f0:	08005413 	.word	0x08005413
 80055f4:	0800555b 	.word	0x0800555b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f47f af06 	bne.w	800540a <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005602:	d130      	bne.n	8005666 <HAL_UART_Init+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005604:	f7fe fb3c 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005608:	6862      	ldr	r2, [r4, #4]
 800560a:	6825      	ldr	r5, [r4, #0]
 800560c:	0853      	lsrs	r3, r2, #1
 800560e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005612:	fbb3 f3f2 	udiv	r3, r3, r2
 8005616:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8005618:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800561c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8005620:	4313      	orrs	r3, r2
 8005622:	60eb      	str	r3, [r5, #12]
 8005624:	e728      	b.n	8005478 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562a:	d009      	beq.n	8005640 <HAL_UART_Init+0x2d0>
 800562c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005630:	d090      	beq.n	8005554 <HAL_UART_Init+0x1e4>
 8005632:	e6ea      	b.n	800540a <HAL_UART_Init+0x9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005634:	f7fe fb14 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8005638:	e7e6      	b.n	8005608 <HAL_UART_Init+0x298>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800563a:	f7fe fae1 	bl	8003c00 <HAL_RCC_GetSysClockFreq>
 800563e:	e7e3      	b.n	8005608 <HAL_UART_Init+0x298>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005640:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005644:	d112      	bne.n	800566c <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005646:	6862      	ldr	r2, [r4, #4]
 8005648:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <HAL_UART_Init+0x344>)
 800564a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800564e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	e7e0      	b.n	8005618 <HAL_UART_Init+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005656:	6862      	ldr	r2, [r4, #4]
 8005658:	0853      	lsrs	r3, r2, #1
 800565a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800565e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005662:	b29b      	uxth	r3, r3
 8005664:	e7d8      	b.n	8005618 <HAL_UART_Init+0x2a8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005666:	f7fe fb0b 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 800566a:	e6fe      	b.n	800546a <HAL_UART_Init+0xfa>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800566c:	6862      	ldr	r2, [r4, #4]
 800566e:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <HAL_UART_Init+0x348>)
 8005670:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005674:	fbb3 f3f2 	udiv	r3, r3, r2
 8005678:	b29b      	uxth	r3, r3
 800567a:	60eb      	str	r3, [r5, #12]
 800567c:	e6fc      	b.n	8005478 <HAL_UART_Init+0x108>
 800567e:	bf00      	nop
 8005680:	efff69f3 	.word	0xefff69f3
 8005684:	40011000 	.word	0x40011000
 8005688:	40004400 	.word	0x40004400
 800568c:	40004800 	.word	0x40004800
 8005690:	40004c00 	.word	0x40004c00
 8005694:	40005000 	.word	0x40005000
 8005698:	40011400 	.word	0x40011400
 800569c:	40007800 	.word	0x40007800
 80056a0:	40007c00 	.word	0x40007c00
 80056a4:	01fffffe 	.word	0x01fffffe
 80056a8:	40023800 	.word	0x40023800
 80056ac:	080081dc 	.word	0x080081dc
 80056b0:	080081e0 	.word	0x080081e0
 80056b4:	01e84800 	.word	0x01e84800
 80056b8:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056bc:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056cc:	f43f af57 	beq.w	800557e <HAL_UART_Init+0x20e>
 80056d0:	d90b      	bls.n	80056ea <HAL_UART_Init+0x37a>
 80056d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d6:	d0b3      	beq.n	8005640 <HAL_UART_Init+0x2d0>
 80056d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056dc:	f43f af3a 	beq.w	8005554 <HAL_UART_Init+0x1e4>
 80056e0:	e76c      	b.n	80055bc <HAL_UART_Init+0x24c>
    huart->Instance->BRR = brrtemp;
 80056e2:	2300      	movs	r3, #0
    return HAL_ERROR;
 80056e4:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80056e6:	60eb      	str	r3, [r5, #12]
 80056e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f43f aeb7 	beq.w	800545e <HAL_UART_Init+0xee>
 80056f0:	e764      	b.n	80055bc <HAL_UART_Init+0x24c>
    return HAL_ERROR;
 80056f2:	2001      	movs	r0, #1
}
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop

080056f8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f8:	b084      	sub	sp, #16
 80056fa:	b430      	push	{r4, r5}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056fc:	9d08      	ldr	r5, [sp, #32]
{
 80056fe:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005700:	2d01      	cmp	r5, #1
{
 8005702:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005706:	d027      	beq.n	8005758 <USB_CoreInit+0x60>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005708:	68c2      	ldr	r2, [r0, #12]
 800570a:	4b27      	ldr	r3, [pc, #156]	; (80057a8 <USB_CoreInit+0xb0>)
 800570c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005710:	60c2      	str	r2, [r0, #12]
 8005712:	e001      	b.n	8005718 <USB_CoreInit+0x20>
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8005714:	3b01      	subs	r3, #1
 8005716:	d00d      	beq.n	8005734 <USB_CoreInit+0x3c>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8005718:	6902      	ldr	r2, [r0, #16]
 800571a:	2a00      	cmp	r2, #0
 800571c:	dafa      	bge.n	8005714 <USB_CoreInit+0x1c>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800571e:	6902      	ldr	r2, [r0, #16]
 8005720:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <USB_CoreInit+0xb0>)
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	6102      	str	r2, [r0, #16]
 8005728:	e001      	b.n	800572e <USB_CoreInit+0x36>

  do
  {
    if (++count > 200000)
 800572a:	3b01      	subs	r3, #1
 800572c:	d002      	beq.n	8005734 <USB_CoreInit+0x3c>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800572e:	6902      	ldr	r2, [r0, #16]
 8005730:	07d2      	lsls	r2, r2, #31
 8005732:	d4fa      	bmi.n	800572a <USB_CoreInit+0x32>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8005734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005738:	6383      	str	r3, [r0, #56]	; 0x38
  if(cfg.dma_enable == ENABLE)
 800573a:	9b06      	ldr	r3, [sp, #24]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d107      	bne.n	8005750 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005740:	6883      	ldr	r3, [r0, #8]
 8005742:	f043 0306 	orr.w	r3, r3, #6
 8005746:	6083      	str	r3, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005748:	6883      	ldr	r3, [r0, #8]
 800574a:	f043 0320 	orr.w	r3, r3, #32
 800574e:	6083      	str	r3, [r0, #8]
}
 8005750:	2000      	movs	r0, #0
 8005752:	bc30      	pop	{r4, r5}
 8005754:	b004      	add	sp, #16
 8005756:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005758:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800575a:	4b14      	ldr	r3, [pc, #80]	; (80057ac <USB_CoreInit+0xb4>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800575c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if(cfg.use_external_vbus == 1)
 8005760:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005762:	6382      	str	r2, [r0, #56]	; 0x38
    if(cfg.use_external_vbus == 1)
 8005764:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005766:	68c2      	ldr	r2, [r0, #12]
 8005768:	ea03 0302 	and.w	r3, r3, r2
 800576c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800576e:	68c3      	ldr	r3, [r0, #12]
 8005770:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005774:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 8005776:	d012      	beq.n	800579e <USB_CoreInit+0xa6>
{
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <USB_CoreInit+0xb0>)
 800577a:	e001      	b.n	8005780 <USB_CoreInit+0x88>
    if (++count > 200000)
 800577c:	3b01      	subs	r3, #1
 800577e:	d0dc      	beq.n	800573a <USB_CoreInit+0x42>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8005780:	6902      	ldr	r2, [r0, #16]
 8005782:	2a00      	cmp	r2, #0
 8005784:	dafa      	bge.n	800577c <USB_CoreInit+0x84>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005786:	6902      	ldr	r2, [r0, #16]
 8005788:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <USB_CoreInit+0xb0>)
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	6102      	str	r2, [r0, #16]
 8005790:	e001      	b.n	8005796 <USB_CoreInit+0x9e>
    if (++count > 200000)
 8005792:	3b01      	subs	r3, #1
 8005794:	d0d1      	beq.n	800573a <USB_CoreInit+0x42>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005796:	6902      	ldr	r2, [r0, #16]
 8005798:	07d1      	lsls	r1, r2, #31
 800579a:	d4fa      	bmi.n	8005792 <USB_CoreInit+0x9a>
 800579c:	e7cd      	b.n	800573a <USB_CoreInit+0x42>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800579e:	68c3      	ldr	r3, [r0, #12]
 80057a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057a4:	60c3      	str	r3, [r0, #12]
 80057a6:	e7e7      	b.n	8005778 <USB_CoreInit+0x80>
 80057a8:	00030d40 	.word	0x00030d40
 80057ac:	ffbdffbf 	.word	0xffbdffbf

080057b0 <USB_DisableGlobalInt>:
{
 80057b0:	4602      	mov	r2, r0
}
 80057b2:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057b4:	6893      	ldr	r3, [r2, #8]
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	6093      	str	r3, [r2, #8]
}
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop

080057c0 <USB_SetCurrentMode>:
{
 80057c0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057c2:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80057c4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057c6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057ca:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80057cc:	d009      	beq.n	80057e2 <USB_SetCurrentMode+0x22>
  else if ( mode == USB_OTG_DEVICE_MODE)
 80057ce:	b919      	cbnz	r1, 80057d8 <USB_SetCurrentMode+0x18>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057d0:	68c3      	ldr	r3, [r0, #12]
 80057d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057d6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 80057d8:	2032      	movs	r0, #50	; 0x32
 80057da:	f7fc ff01 	bl	80025e0 <HAL_Delay>
}
 80057de:	2000      	movs	r0, #0
 80057e0:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057e2:	68c3      	ldr	r3, [r0, #12]
 80057e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057e8:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 80057ea:	2032      	movs	r0, #50	; 0x32
 80057ec:	f7fc fef8 	bl	80025e0 <HAL_Delay>
}
 80057f0:	2000      	movs	r0, #0
 80057f2:	bd08      	pop	{r3, pc}

080057f4 <USB_DevInit>:
{
 80057f4:	b084      	sub	sp, #16
 80057f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057fa:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80057fc:	af07      	add	r7, sp, #28
 80057fe:	9c11      	ldr	r4, [sp, #68]	; 0x44
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005800:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
 8005804:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005808:	6386      	str	r6, [r0, #56]	; 0x38
{
 800580a:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800580e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  if (cfg.vbus_sensing_enable == 0)
 8005812:	b95c      	cbnz	r4, 800582c <USB_DevInit+0x38>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8005814:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005816:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800581a:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800581c:	6802      	ldr	r2, [r0, #0]
 800581e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005822:	6002      	str	r2, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005824:	6802      	ldr	r2, [r0, #0]
 8005826:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800582a:	6002      	str	r2, [r0, #0]
  USBx_PCGCCTL = 0;
 800582c:	2200      	movs	r2, #0
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800582e:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005830:	f500 6600 	add.w	r6, r0, #2048	; 0x800
  USBx_PCGCCTL = 0;
 8005834:	f8c0 2e00 	str.w	r2, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005838:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
 800583c:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8005840:	f000 8094 	beq.w	800596c <USB_DevInit+0x178>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 8005844:	2b03      	cmp	r3, #3
  USBx_DEVICE->DCFG |= speed;
 8005846:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 800584a:	f000 8099 	beq.w	8005980 <USB_DevInit+0x18c>
  USBx_DEVICE->DCFG |= speed;
 800584e:	f043 0303 	orr.w	r3, r3, #3
 8005852:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8005856:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800585a:	4b4d      	ldr	r3, [pc, #308]	; (8005990 <USB_DevInit+0x19c>)
 800585c:	6102      	str	r2, [r0, #16]
 800585e:	e001      	b.n	8005864 <USB_DevInit+0x70>
    if (++count > 200000)
 8005860:	3b01      	subs	r3, #1
 8005862:	d002      	beq.n	800586a <USB_DevInit+0x76>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005864:	6902      	ldr	r2, [r0, #16]
 8005866:	0695      	lsls	r5, r2, #26
 8005868:	d4fa      	bmi.n	8005860 <USB_DevInit+0x6c>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800586a:	2210      	movs	r2, #16
 800586c:	4b48      	ldr	r3, [pc, #288]	; (8005990 <USB_DevInit+0x19c>)
 800586e:	6102      	str	r2, [r0, #16]
 8005870:	e001      	b.n	8005876 <USB_DevInit+0x82>
    if (++count > 200000)
 8005872:	3b01      	subs	r3, #1
 8005874:	d002      	beq.n	800587c <USB_DevInit+0x88>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005876:	6902      	ldr	r2, [r0, #16]
 8005878:	06d2      	lsls	r2, r2, #27
 800587a:	d4fa      	bmi.n	8005872 <USB_DevInit+0x7e>
  USBx_DEVICE->DIEPMSK = 0;
 800587c:	2200      	movs	r2, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 8005882:	6132      	str	r2, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0;
 8005884:	6172      	str	r2, [r6, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8005886:	61b3      	str	r3, [r6, #24]
  USBx_DEVICE->DAINTMSK = 0;
 8005888:	61f2      	str	r2, [r6, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800588a:	b381      	cbz	r1, 80058ee <USB_DevInit+0xfa>
 800588c:	f500 6310 	add.w	r3, r0, #2304	; 0x900
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8005890:	f04f 0cff 	mov.w	ip, #255	; 0xff
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8005894:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0;
 8005898:	4615      	mov	r5, r2
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800589a:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800589c:	3201      	adds	r2, #1
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800589e:	2f00      	cmp	r7, #0
 80058a0:	db4d      	blt.n	800593e <USB_DevInit+0x14a>
  for (i = 0; i < cfg.dev_endpoints; i++)
 80058a2:	428a      	cmp	r2, r1
      USBx_INEP(i)->DIEPCTL = 0;
 80058a4:	601d      	str	r5, [r3, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 80058a6:	611d      	str	r5, [r3, #16]
 80058a8:	f103 0320 	add.w	r3, r3, #32
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80058ac:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80058b0:	d1f3      	bne.n	800589a <USB_DevInit+0xa6>
 80058b2:	2200      	movs	r2, #0
 80058b4:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80058b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80058bc:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
      USBx_OUTEP(i)->DOEPCTL = 0;
 80058c0:	4615      	mov	r5, r2
 80058c2:	e007      	b.n	80058d4 <USB_DevInit+0xe0>
  for (i = 0; i < cfg.dev_endpoints; i++)
 80058c4:	428a      	cmp	r2, r1
      USBx_OUTEP(i)->DOEPCTL = 0;
 80058c6:	601d      	str	r5, [r3, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 80058c8:	611d      	str	r5, [r3, #16]
 80058ca:	f103 0320 	add.w	r3, r3, #32
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80058ce:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80058d2:	d00c      	beq.n	80058ee <USB_DevInit+0xfa>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058d4:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80058d6:	3201      	adds	r2, #1
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058d8:	2f00      	cmp	r7, #0
 80058da:	daf3      	bge.n	80058c4 <USB_DevInit+0xd0>
  for (i = 0; i < cfg.dev_endpoints; i++)
 80058dc:	428a      	cmp	r2, r1
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80058de:	f8c3 8000 	str.w	r8, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 80058e2:	611d      	str	r5, [r3, #16]
 80058e4:	f103 0320 	add.w	r3, r3, #32
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80058e8:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80058ec:	d1f2      	bne.n	80058d4 <USB_DevInit+0xe0>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058ee:	6933      	ldr	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 80058f0:	f1be 0f01 	cmp.w	lr, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f8:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 80058fa:	d02a      	beq.n	8005952 <USB_DevInit+0x15e>
  USBx->GINTMSK = 0;
 80058fc:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFF;
 80058fe:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0;
 8005902:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 8005904:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == DISABLE)
 8005906:	f1be 0f00 	cmp.w	lr, #0
 800590a:	d103      	bne.n	8005914 <USB_DevInit+0x120>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800590c:	6983      	ldr	r3, [r0, #24]
 800590e:	f043 0310 	orr.w	r3, r3, #16
 8005912:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8005914:	6981      	ldr	r1, [r0, #24]
 8005916:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <USB_DevInit+0x1a0>)
  if(cfg.Sof_enable)
 8005918:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800591a:	430b      	orrs	r3, r1
 800591c:	6183      	str	r3, [r0, #24]
  if(cfg.Sof_enable)
 800591e:	b11a      	cbz	r2, 8005928 <USB_DevInit+0x134>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005920:	6983      	ldr	r3, [r0, #24]
 8005922:	f043 0308 	orr.w	r3, r3, #8
 8005926:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 8005928:	2c01      	cmp	r4, #1
 800592a:	d103      	bne.n	8005934 <USB_DevInit+0x140>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800592c:	6982      	ldr	r2, [r0, #24]
 800592e:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <USB_DevInit+0x1a4>)
 8005930:	4313      	orrs	r3, r2
 8005932:	6183      	str	r3, [r0, #24]
}
 8005934:	2000      	movs	r0, #0
 8005936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800593a:	b004      	add	sp, #16
 800593c:	4770      	bx	lr
  for (i = 0; i < cfg.dev_endpoints; i++)
 800593e:	4291      	cmp	r1, r2
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8005940:	f8c3 8000 	str.w	r8, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0;
 8005944:	611d      	str	r5, [r3, #16]
 8005946:	f103 0320 	add.w	r3, r3, #32
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800594a:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800594e:	d1a4      	bne.n	800589a <USB_DevInit+0xa6>
 8005950:	e7af      	b.n	80058b2 <USB_DevInit+0xbe>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8005952:	4d12      	ldr	r5, [pc, #72]	; (800599c <USB_DevInit+0x1a8>)
  USBx->GINTMSK = 0;
 8005954:	2100      	movs	r1, #0
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8005956:	4b12      	ldr	r3, [pc, #72]	; (80059a0 <USB_DevInit+0x1ac>)
  USBx->GINTSTS = 0xBFFFFFFF;
 8005958:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800595c:	6335      	str	r5, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800595e:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8005960:	432b      	orrs	r3, r5
 8005962:	6333      	str	r3, [r6, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 8005964:	6b33      	ldr	r3, [r6, #48]	; 0x30
  USBx->GINTMSK = 0;
 8005966:	6181      	str	r1, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 8005968:	6142      	str	r2, [r0, #20]
 800596a:	e7d3      	b.n	8005914 <USB_DevInit+0x120>
  USBx_DEVICE->DCFG |= speed;
 800596c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8005970:	2f00      	cmp	r7, #0
 8005972:	f43f af6e 	beq.w	8005852 <USB_DevInit+0x5e>
  USBx_DEVICE->DCFG |= speed;
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 800597e:	e76a      	b.n	8005856 <USB_DevInit+0x62>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8005980:	2f00      	cmp	r7, #0
 8005982:	f43f af66 	beq.w	8005852 <USB_DevInit+0x5e>
  USBx_DEVICE->DCFG |= speed;
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 800598e:	e762      	b.n	8005856 <USB_DevInit+0x62>
 8005990:	00030d40 	.word	0x00030d40
 8005994:	803c3800 	.word	0x803c3800
 8005998:	40000004 	.word	0x40000004
 800599c:	00800100 	.word	0x00800100
 80059a0:	00010003 	.word	0x00010003

080059a4 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80059a4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3);
 80059a8:	2003      	movs	r0, #3
{
 80059aa:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80059ac:	6853      	ldr	r3, [r2, #4]
 80059ae:	f043 0302 	orr.w	r3, r3, #2
 80059b2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 80059b4:	f7fc fe14 	bl	80025e0 <HAL_Delay>
}
 80059b8:	2000      	movs	r0, #0
 80059ba:	bd08      	pop	{r3, pc}

080059bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80059bc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80059be:	f001 f8c9 	bl	8006b54 <vTaskStartScheduler>
  
  return osOK;
}
 80059c2:	2000      	movs	r0, #0
 80059c4:	bd08      	pop	{r3, pc}
 80059c6:	bf00      	nop

080059c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80059c8:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059ca:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80059ce:	b085      	sub	sp, #20
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 80059d4:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059d6:	ad03      	add	r5, sp, #12
 80059d8:	6811      	ldr	r1, [r2, #0]
    fpriority += (priority - osPriorityIdle);
 80059da:	bf14      	ite	ne
 80059dc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059de:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059e0:	8a12      	ldrh	r2, [r2, #16]
 80059e2:	6840      	ldr	r0, [r0, #4]
 80059e4:	e88d 0030 	stmia.w	sp, {r4, r5}
 80059e8:	f000 ff84 	bl	80068f4 <xTaskCreate>
 80059ec:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80059ee:	bf0c      	ite	eq
 80059f0:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80059f2:	2000      	movne	r0, #0
}
 80059f4:	b005      	add	sp, #20
 80059f6:	bd30      	pop	{r4, r5, pc}

080059f8 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80059f8:	2800      	cmp	r0, #0
 80059fa:	bf08      	it	eq
 80059fc:	2001      	moveq	r0, #1
{
 80059fe:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a00:	f001 fa30 	bl	8006e64 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a04:	2000      	movs	r0, #0
 8005a06:	bd08      	pop	{r3, pc}

08005a08 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8005a08:	2001      	movs	r0, #1
 8005a0a:	f000 bd1f 	b.w	800644c <xQueueCreateMutex>
 8005a0e:	bf00      	nop

08005a10 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005a10:	2200      	movs	r2, #0
 8005a12:	c803      	ldmia	r0, {r0, r1}
 8005a14:	f000 bb76 	b.w	8006104 <xQueueGenericCreate>

08005a18 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8005a18:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005a1a:	f001 fbd3 	bl	80071c4 <xTaskGetSchedulerState>
 8005a1e:	2801      	cmp	r0, #1
 8005a20:	d003      	beq.n	8005a2a <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8005a22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8005a26:	f000 ba25 	b.w	8005e74 <xPortSysTickHandler>
 8005a2a:	bd08      	pop	{r3, pc}

08005a2c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a2c:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <prvInsertBlockIntoFreeList+0x48>)
{
 8005a2e:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	4282      	cmp	r2, r0
 8005a34:	d201      	bcs.n	8005a3a <prvInsertBlockIntoFreeList+0xe>
 8005a36:	4613      	mov	r3, r2
 8005a38:	e7fa      	b.n	8005a30 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a3a:	685c      	ldr	r4, [r3, #4]
 8005a3c:	1919      	adds	r1, r3, r4
 8005a3e:	4288      	cmp	r0, r1
 8005a40:	d103      	bne.n	8005a4a <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a42:	6841      	ldr	r1, [r0, #4]
 8005a44:	4618      	mov	r0, r3
 8005a46:	4421      	add	r1, r4
 8005a48:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a4a:	6844      	ldr	r4, [r0, #4]
 8005a4c:	1901      	adds	r1, r0, r4
 8005a4e:	428a      	cmp	r2, r1
 8005a50:	d109      	bne.n	8005a66 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a52:	4909      	ldr	r1, [pc, #36]	; (8005a78 <prvInsertBlockIntoFreeList+0x4c>)
 8005a54:	6809      	ldr	r1, [r1, #0]
 8005a56:	428a      	cmp	r2, r1
 8005a58:	d005      	beq.n	8005a66 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a5a:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a5c:	6815      	ldr	r5, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a5e:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a60:	6005      	str	r5, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a62:	6041      	str	r1, [r0, #4]
 8005a64:	e000      	b.n	8005a68 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a66:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a68:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a6a:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a6c:	bf18      	it	ne
 8005a6e:	6018      	strne	r0, [r3, #0]
}
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20003c88 	.word	0x20003c88
 8005a78:	20000078 	.word	0x20000078

08005a7c <pvPortMalloc>:
{
 8005a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8005a80:	4e47      	ldr	r6, [pc, #284]	; (8005ba0 <pvPortMalloc+0x124>)
{
 8005a82:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005a84:	f001 f8a6 	bl	8006bd4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005a88:	6833      	ldr	r3, [r6, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d05e      	beq.n	8005b4c <pvPortMalloc+0xd0>
 8005a8e:	4a45      	ldr	r2, [pc, #276]	; (8005ba4 <pvPortMalloc+0x128>)
 8005a90:	6816      	ldr	r6, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a92:	4234      	tst	r4, r6
 8005a94:	d154      	bne.n	8005b40 <pvPortMalloc+0xc4>
			if( xWantedSize > 0 )
 8005a96:	2c00      	cmp	r4, #0
 8005a98:	d052      	beq.n	8005b40 <pvPortMalloc+0xc4>
				xWantedSize += xHeapStructSize;
 8005a9a:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a9e:	0750      	lsls	r0, r2, #29
 8005aa0:	d002      	beq.n	8005aa8 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aa2:	f022 0207 	bic.w	r2, r2, #7
 8005aa6:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aa8:	2a00      	cmp	r2, #0
 8005aaa:	d049      	beq.n	8005b40 <pvPortMalloc+0xc4>
 8005aac:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005bb4 <pvPortMalloc+0x138>
 8005ab0:	f8d8 5000 	ldr.w	r5, [r8]
 8005ab4:	42aa      	cmp	r2, r5
 8005ab6:	d843      	bhi.n	8005b40 <pvPortMalloc+0xc4>
				pxBlock = xStart.pxNextFreeBlock;
 8005ab8:	483b      	ldr	r0, [pc, #236]	; (8005ba8 <pvPortMalloc+0x12c>)
 8005aba:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005abc:	e006      	b.n	8005acc <pvPortMalloc+0x50>
 8005abe:	f8d4 e000 	ldr.w	lr, [r4]
 8005ac2:	f1be 0f00 	cmp.w	lr, #0
 8005ac6:	d004      	beq.n	8005ad2 <pvPortMalloc+0x56>
 8005ac8:	4620      	mov	r0, r4
 8005aca:	4674      	mov	r4, lr
 8005acc:	6861      	ldr	r1, [r4, #4]
 8005ace:	428a      	cmp	r2, r1
 8005ad0:	d8f5      	bhi.n	8005abe <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8005ad2:	429c      	cmp	r4, r3
 8005ad4:	d034      	beq.n	8005b40 <pvPortMalloc+0xc4>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ad6:	1a8b      	subs	r3, r1, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ad8:	6827      	ldr	r7, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ada:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005adc:	6007      	str	r7, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ade:	d912      	bls.n	8005b06 <pvPortMalloc+0x8a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ae0:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ae2:	0741      	lsls	r1, r0, #29
 8005ae4:	d00a      	beq.n	8005afc <pvPortMalloc+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	b672      	cpsid	i
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	b662      	cpsie	i
 8005afa:	e7fe      	b.n	8005afa <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005afc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005afe:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b00:	f7ff ff94 	bl	8005a2c <prvInsertBlockIntoFreeList>
 8005b04:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b06:	4a29      	ldr	r2, [pc, #164]	; (8005bac <pvPortMalloc+0x130>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b08:	1a6d      	subs	r5, r5, r1
					pxBlock->pxNextFreeBlock = NULL;
 8005b0a:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b0c:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b0e:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b10:	f8c8 5000 	str.w	r5, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b14:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 8005b16:	6023      	str	r3, [r4, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b18:	6061      	str	r1, [r4, #4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b1a:	bf38      	it	cc
 8005b1c:	6015      	strcc	r5, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b1e:	f104 0508 	add.w	r5, r4, #8
	( void ) xTaskResumeAll();
 8005b22:	f001 f90f 	bl	8006d44 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b26:	076b      	lsls	r3, r5, #29
 8005b28:	d00d      	beq.n	8005b46 <pvPortMalloc+0xca>
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	b672      	cpsid	i
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	b662      	cpsie	i
 8005b3e:	e7fe      	b.n	8005b3e <pvPortMalloc+0xc2>
	( void ) xTaskResumeAll();
 8005b40:	2500      	movs	r5, #0
 8005b42:	f001 f8ff 	bl	8006d44 <xTaskResumeAll>
}
 8005b46:	4628      	mov	r0, r5
 8005b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 8005b4c:	4918      	ldr	r1, [pc, #96]	; (8005bb0 <pvPortMalloc+0x134>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b4e:	074d      	lsls	r5, r1, #29
 8005b50:	d023      	beq.n	8005b9a <pvPortMalloc+0x11e>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b52:	1dca      	adds	r2, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b54:	f501 5370 	add.w	r3, r1, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b58:	f022 0107 	bic.w	r1, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b5c:	1a5b      	subs	r3, r3, r1
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b5e:	440b      	add	r3, r1
	xStart.xBlockSize = ( size_t ) 0;
 8005b60:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b62:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b66:	4f10      	ldr	r7, [pc, #64]	; (8005ba8 <pvPortMalloc+0x12c>)
	uxAddress -= xHeapStructSize;
 8005b68:	3b08      	subs	r3, #8
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b6a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8005bac <pvPortMalloc+0x130>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b6e:	f8df c044 	ldr.w	ip, [pc, #68]	; 8005bb4 <pvPortMalloc+0x138>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b72:	f023 0307 	bic.w	r3, r3, #7
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b76:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8005ba4 <pvPortMalloc+0x128>
	xStart.xBlockSize = ( size_t ) 0;
 8005b7a:	6078      	str	r0, [r7, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b7c:	1a5a      	subs	r2, r3, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b7e:	6039      	str	r1, [r7, #0]
	pxEnd->xBlockSize = 0;
 8005b80:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b82:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8005b84:	6033      	str	r3, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b86:	462e      	mov	r6, r5
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b88:	f8c8 2000 	str.w	r2, [r8]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b8c:	f8cc 2000 	str.w	r2, [ip]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b90:	f8ce 5000 	str.w	r5, [lr]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b94:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b96:	600b      	str	r3, [r1, #0]
 8005b98:	e77b      	b.n	8005a92 <pvPortMalloc+0x16>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b9e:	e7de      	b.n	8005b5e <pvPortMalloc+0xe2>
 8005ba0:	20000078 	.word	0x20000078
 8005ba4:	20003c7c 	.word	0x20003c7c
 8005ba8:	20003c88 	.word	0x20003c88
 8005bac:	20003c84 	.word	0x20003c84
 8005bb0:	2000007c 	.word	0x2000007c
 8005bb4:	20003c80 	.word	0x20003c80

08005bb8 <vPortFree>:
	if( pv != NULL )
 8005bb8:	b1f0      	cbz	r0, 8005bf8 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bba:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <vPortFree+0x70>)
 8005bbc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	4213      	tst	r3, r2
 8005bc4:	d10a      	bne.n	8005bdc <vPortFree+0x24>
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	b672      	cpsid	i
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	b662      	cpsie	i
 8005bda:	e7fe      	b.n	8005bda <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bdc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005be0:	b159      	cbz	r1, 8005bfa <vPortFree+0x42>
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	b672      	cpsid	i
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	b662      	cpsie	i
 8005bf6:	e7fe      	b.n	8005bf6 <vPortFree+0x3e>
 8005bf8:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bfa:	ea23 0302 	bic.w	r3, r3, r2
{
 8005bfe:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c00:	f840 3c04 	str.w	r3, [r0, #-4]
 8005c04:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8005c06:	f000 ffe5 	bl	8006bd4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c0a:	4a08      	ldr	r2, [pc, #32]	; (8005c2c <vPortFree+0x74>)
 8005c0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c10:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c14:	6811      	ldr	r1, [r2, #0]
 8005c16:	440b      	add	r3, r1
 8005c18:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c1a:	f7ff ff07 	bl	8005a2c <prvInsertBlockIntoFreeList>
}
 8005c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005c22:	f001 b88f 	b.w	8006d44 <xTaskResumeAll>
 8005c26:	bf00      	nop
 8005c28:	20003c7c 	.word	0x20003c7c
 8005c2c:	20003c80 	.word	0x20003c80

08005c30 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c30:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c34:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c38:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c3a:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c3c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c3e:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c40:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop

08005c48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	6103      	str	r3, [r0, #16]
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop

08005c50 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005c50:	e890 000c 	ldmia.w	r0, {r2, r3}
{
 8005c54:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c56:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8005c58:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8005c5a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c5c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c5e:	689c      	ldr	r4, [r3, #8]
 8005c60:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c62:	6099      	str	r1, [r3, #8]
}
 8005c64:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c68:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005c6a:	6002      	str	r2, [r0, #0]
}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop

08005c70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c70:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c72:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c74:	1c6b      	adds	r3, r5, #1
 8005c76:	d011      	beq.n	8005c9c <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c78:	f100 0208 	add.w	r2, r0, #8
 8005c7c:	e000      	b.n	8005c80 <vListInsert+0x10>
 8005c7e:	461a      	mov	r2, r3
 8005c80:	6853      	ldr	r3, [r2, #4]
 8005c82:	681c      	ldr	r4, [r3, #0]
 8005c84:	42a5      	cmp	r5, r4
 8005c86:	d2fa      	bcs.n	8005c7e <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005c88:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c8a:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005c8c:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c8e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c90:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c92:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c94:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005c96:	6004      	str	r4, [r0, #0]
}
 8005c98:	bc30      	pop	{r4, r5}
 8005c9a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c9c:	6902      	ldr	r2, [r0, #16]
 8005c9e:	6853      	ldr	r3, [r2, #4]
 8005ca0:	e7f2      	b.n	8005c88 <vListInsert+0x18>
 8005ca2:	bf00      	nop

08005ca4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ca4:	6902      	ldr	r2, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ca6:	6843      	ldr	r3, [r0, #4]
 8005ca8:	6881      	ldr	r1, [r0, #8]
{
 8005caa:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cac:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cae:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cb0:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8005cb2:	42a0      	cmp	r0, r4

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8005cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cb8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )--;
 8005cba:	6813      	ldr	r3, [r2, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cbc:	bf08      	it	eq
 8005cbe:	6051      	streq	r1, [r2, #4]
	pxItemToRemove->pvContainer = NULL;
 8005cc0:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8005cc2:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 8005cc4:	6101      	str	r1, [r0, #16]
}
 8005cc6:	4618      	mov	r0, r3
	( pxList->uxNumberOfItems )--;
 8005cc8:	6013      	str	r3, [r2, #0]
}
 8005cca:	4770      	bx	lr

08005ccc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <prvTaskExitError+0x34>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	d00a      	beq.n	8005cea <prvTaskExitError+0x1e>
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	b672      	cpsid	i
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	b662      	cpsie	i
 8005ce8:	e7fe      	b.n	8005ce8 <prvTaskExitError+0x1c>
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	b672      	cpsid	i
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	b662      	cpsie	i
 8005cfe:	e7fe      	b.n	8005cfe <prvTaskExitError+0x32>
 8005d00:	20000014 	.word	0x20000014

08005d04 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005d04:	4806      	ldr	r0, [pc, #24]	; (8005d20 <prvPortStartFirstTask+0x1c>)
 8005d06:	6800      	ldr	r0, [r0, #0]
 8005d08:	6800      	ldr	r0, [r0, #0]
 8005d0a:	f380 8808 	msr	MSP, r0
 8005d0e:	b662      	cpsie	i
 8005d10:	b661      	cpsie	f
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	df00      	svc	0
 8005d1c:	bf00      	nop
 8005d1e:	0000      	.short	0x0000
 8005d20:	e000ed08 	.word	0xe000ed08

08005d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d34 <vPortEnableVFP+0x10>
 8005d28:	6801      	ldr	r1, [r0, #0]
 8005d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d2e:	6001      	str	r1, [r0, #0]
 8005d30:	4770      	bx	lr
 8005d32:	0000      	.short	0x0000
 8005d34:	e000ed88 	.word	0xe000ed88

08005d38 <pxPortInitialiseStack>:
{
 8005d38:	b470      	push	{r4, r5, r6}
 8005d3a:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d3c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d40:	4d08      	ldr	r5, [pc, #32]	; (8005d64 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005d42:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d46:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d4a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005d4e:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d50:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d52:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d56:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005d5a:	f843 4c24 	str.w	r4, [r3, #-36]
}
 8005d5e:	bc70      	pop	{r4, r5, r6}
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	08005ccd 	.word	0x08005ccd
	...

08005d70 <SVC_Handler>:
	__asm volatile (
 8005d70:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <pxCurrentTCBConst2>)
 8005d72:	6819      	ldr	r1, [r3, #0]
 8005d74:	6808      	ldr	r0, [r1, #0]
 8005d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	f380 8809 	msr	PSP, r0
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f380 8811 	msr	BASEPRI, r0
 8005d8a:	4770      	bx	lr
 8005d8c:	f3af 8000 	nop.w

08005d90 <pxCurrentTCBConst2>:
 8005d90:	20003c98 	.word	0x20003c98

08005d94 <vPortEnterCritical>:
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	b672      	cpsid	i
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	b662      	cpsie	i
	uxCriticalNesting++;
 8005da8:	4a0b      	ldr	r2, [pc, #44]	; (8005dd8 <vPortEnterCritical+0x44>)
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005dae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005db2:	d000      	beq.n	8005db6 <vPortEnterCritical+0x22>
 8005db4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005db6:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <vPortEnterCritical+0x48>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005dbe:	d0f9      	beq.n	8005db4 <vPortEnterCritical+0x20>
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	b672      	cpsid	i
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	b662      	cpsie	i
 8005dd4:	e7fe      	b.n	8005dd4 <vPortEnterCritical+0x40>
 8005dd6:	bf00      	nop
 8005dd8:	20000014 	.word	0x20000014
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005de0:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <vPortExitCritical+0x28>)
 8005de2:	6813      	ldr	r3, [r2, #0]
 8005de4:	b953      	cbnz	r3, 8005dfc <vPortExitCritical+0x1c>
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	b672      	cpsid	i
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	b662      	cpsie	i
 8005dfa:	e7fe      	b.n	8005dfa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e00:	b90b      	cbnz	r3, 8005e06 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	4770      	bx	lr
 8005e08:	20000014 	.word	0x20000014
 8005e0c:	00000000 	.word	0x00000000

08005e10 <PendSV_Handler>:
	__asm volatile
 8005e10:	f3ef 8009 	mrs	r0, PSP
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <pxCurrentTCBConst>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	f01e 0f10 	tst.w	lr, #16
 8005e20:	bf08      	it	eq
 8005e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2a:	6010      	str	r0, [r2, #0]
 8005e2c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e34:	b672      	cpsid	i
 8005e36:	f380 8811 	msr	BASEPRI, r0
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	b662      	cpsie	i
 8005e44:	f001 f87e 	bl	8006f44 <vTaskSwitchContext>
 8005e48:	f04f 0000 	mov.w	r0, #0
 8005e4c:	f380 8811 	msr	BASEPRI, r0
 8005e50:	bc08      	pop	{r3}
 8005e52:	6819      	ldr	r1, [r3, #0]
 8005e54:	6808      	ldr	r0, [r1, #0]
 8005e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5a:	f01e 0f10 	tst.w	lr, #16
 8005e5e:	bf08      	it	eq
 8005e60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e64:	f380 8809 	msr	PSP, r0
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop

08005e70 <pxCurrentTCBConst>:
 8005e70:	20003c98 	.word	0x20003c98

08005e74 <xPortSysTickHandler>:
{
 8005e74:	b508      	push	{r3, lr}
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	b672      	cpsid	i
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8005e8a:	f000 feab 	bl	8006be4 <xTaskIncrementTick>
 8005e8e:	b118      	cbz	r0, 8005e98 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e90:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <xPortSysTickHandler+0x2c>)
 8005e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e96:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	bd08      	pop	{r3, pc}
 8005ea0:	e000ed04 	.word	0xe000ed04

08005ea4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ea4:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ea6:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ea8:	4a06      	ldr	r2, [pc, #24]	; (8005ec4 <vPortSetupTimerInterrupt+0x20>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4806      	ldr	r0, [pc, #24]	; (8005ec8 <vPortSetupTimerInterrupt+0x24>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eb2:	4a06      	ldr	r2, [pc, #24]	; (8005ecc <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005eb4:	099b      	lsrs	r3, r3, #6
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eba:	6011      	str	r1, [r2, #0]
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20000010 	.word	0x20000010
 8005ec4:	10624dd3 	.word	0x10624dd3
 8005ec8:	e000e014 	.word	0xe000e014
 8005ecc:	e000e010 	.word	0xe000e010

08005ed0 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ed0:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ed2:	2207      	movs	r2, #7
 8005ed4:	4823      	ldr	r0, [pc, #140]	; (8005f64 <xPortStartScheduler+0x94>)
{
 8005ed6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ed8:	7819      	ldrb	r1, [r3, #0]
{
 8005eda:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005edc:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ede:	4c22      	ldr	r4, [pc, #136]	; (8005f68 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ee0:	b2c9      	uxtb	r1, r1
 8005ee2:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ee4:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ee6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ee8:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ef0:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ef4:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ef8:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005efc:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005efe:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f00:	d50d      	bpl.n	8005f1e <xPortStartScheduler+0x4e>
 8005f02:	2206      	movs	r2, #6
 8005f04:	e000      	b.n	8005f08 <xPortStartScheduler+0x38>
 8005f06:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f08:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005f0c:	1e51      	subs	r1, r2, #1
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f16:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005f1a:	061b      	lsls	r3, r3, #24
 8005f1c:	d4f3      	bmi.n	8005f06 <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f1e:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f20:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f22:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <xPortStartScheduler+0x9c>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f24:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f26:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f2a:	4c0d      	ldr	r4, [pc, #52]	; (8005f60 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f2c:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f2e:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005f36:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005f3e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005f40:	f7ff ffb0 	bl	8005ea4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005f44:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <xPortStartScheduler+0xa0>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8005f4a:	f7ff feeb 	bl	8005d24 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f4e:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <xPortStartScheduler+0xa4>)
 8005f50:	6813      	ldr	r3, [r2, #0]
 8005f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f56:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005f58:	f7ff fed4 	bl	8005d04 <prvPortStartFirstTask>
	prvTaskExitError();
 8005f5c:	f7ff feb6 	bl	8005ccc <prvTaskExitError>
 8005f60:	e000e400 	.word	0xe000e400
 8005f64:	20003c94 	.word	0x20003c94
 8005f68:	20003c90 	.word	0x20003c90
 8005f6c:	e000ed20 	.word	0xe000ed20
 8005f70:	20000014 	.word	0x20000014
 8005f74:	e000ef34 	.word	0xe000ef34

08005f78 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8005f78:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f7c:	2b0f      	cmp	r3, #15
 8005f7e:	d910      	bls.n	8005fa2 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f80:	4912      	ldr	r1, [pc, #72]	; (8005fcc <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f82:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f84:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f86:	7812      	ldrb	r2, [r2, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d90a      	bls.n	8005fa2 <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	b672      	cpsid	i
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	b662      	cpsie	i
 8005fa0:	e7fe      	b.n	8005fa0 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fa2:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <vPortValidateInterruptPriority+0x5c>)
 8005fa4:	4a0c      	ldr	r2, [pc, #48]	; (8005fd8 <vPortValidateInterruptPriority+0x60>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d90a      	bls.n	8005fc8 <vPortValidateInterruptPriority+0x50>
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	b672      	cpsid	i
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	b662      	cpsie	i
 8005fc6:	e7fe      	b.n	8005fc6 <vPortValidateInterruptPriority+0x4e>
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	e000e3f0 	.word	0xe000e3f0
 8005fd0:	20003c90 	.word	0x20003c90
 8005fd4:	e000ed0c 	.word	0xe000ed0c
 8005fd8:	20003c94 	.word	0x20003c94

08005fdc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fe0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8005fe2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fe4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fe6:	b932      	cbnz	r2, 8005ff6 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fe8:	6805      	ldr	r5, [r0, #0]
 8005fea:	bb3d      	cbnz	r5, 800603c <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005fec:	6840      	ldr	r0, [r0, #4]
 8005fee:	f001 f947 	bl	8007280 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005ff2:	6065      	str	r5, [r4, #4]
 8005ff4:	e025      	b.n	8006042 <prvCopyDataToQueue+0x66>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ff6:	b96d      	cbnz	r5, 8006014 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005ff8:	6880      	ldr	r0, [r0, #8]
 8005ffa:	f001 ffcd 	bl	8007f98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006002:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006004:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006006:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006008:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800600a:	d317      	bcc.n	800603c <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800600c:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800600e:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006010:	60a3      	str	r3, [r4, #8]
 8006012:	e016      	b.n	8006042 <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006014:	68c0      	ldr	r0, [r0, #12]
 8006016:	f001 ffbf 	bl	8007f98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800601a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800601c:	68e2      	ldr	r2, [r4, #12]
 800601e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006020:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006022:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006024:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006026:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006028:	d202      	bcs.n	8006030 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800602a:	6862      	ldr	r2, [r4, #4]
 800602c:	4413      	add	r3, r2
 800602e:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006030:	2d02      	cmp	r5, #2
 8006032:	d103      	bne.n	800603c <prvCopyDataToQueue+0x60>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006034:	b126      	cbz	r6, 8006040 <prvCopyDataToQueue+0x64>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006036:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8006038:	2000      	movs	r0, #0
 800603a:	e002      	b.n	8006042 <prvCopyDataToQueue+0x66>
 800603c:	2000      	movs	r0, #0
 800603e:	e000      	b.n	8006042 <prvCopyDataToQueue+0x66>
 8006040:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8006042:	3601      	adds	r6, #1
 8006044:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8006046:	bd70      	pop	{r4, r5, r6, pc}

08006048 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006048:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800604a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800604c:	b172      	cbz	r2, 800606c <prvCopyDataFromQueue+0x24>
 800604e:	4608      	mov	r0, r1
{
 8006050:	b410      	push	{r4}
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006052:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006054:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006056:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006058:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800605a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800605c:	d301      	bcc.n	8006062 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006062:	68d9      	ldr	r1, [r3, #12]
	}
}
 8006064:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006068:	f001 bf96 	b.w	8007f98 <memcpy>
 800606c:	4770      	bx	lr
	...

08006070 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006074:	f7ff fe8e 	bl	8005d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006078:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800607c:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800607e:	2c00      	cmp	r4, #0
 8006080:	dd16      	ble.n	80060b0 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006082:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006084:	b1a3      	cbz	r3, 80060b0 <prvUnlockQueue+0x40>
 8006086:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800608a:	e005      	b.n	8006098 <prvUnlockQueue+0x28>
 800608c:	3c01      	subs	r4, #1
 800608e:	b2e3      	uxtb	r3, r4
 8006090:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006092:	b16b      	cbz	r3, 80060b0 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006094:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006096:	b15b      	cbz	r3, 80060b0 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006098:	4630      	mov	r0, r6
 800609a:	f000 ffe5 	bl	8007068 <xTaskRemoveFromEventList>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d0f4      	beq.n	800608c <prvUnlockQueue+0x1c>
 80060a2:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060a4:	f001 f888 	bl	80071b8 <vTaskMissedYield>
 80060a8:	b2e3      	uxtb	r3, r4
 80060aa:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f1      	bne.n	8006094 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060b0:	23ff      	movs	r3, #255	; 0xff
 80060b2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060b6:	f7ff fe93 	bl	8005de0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060ba:	f7ff fe6b 	bl	8005d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060be:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80060c2:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060c4:	2c00      	cmp	r4, #0
 80060c6:	dd16      	ble.n	80060f6 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c8:	692b      	ldr	r3, [r5, #16]
 80060ca:	b1a3      	cbz	r3, 80060f6 <prvUnlockQueue+0x86>
 80060cc:	f105 0610 	add.w	r6, r5, #16
 80060d0:	e005      	b.n	80060de <prvUnlockQueue+0x6e>
 80060d2:	3c01      	subs	r4, #1
 80060d4:	b2e3      	uxtb	r3, r4
 80060d6:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060d8:	b16b      	cbz	r3, 80060f6 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060da:	692b      	ldr	r3, [r5, #16]
 80060dc:	b15b      	cbz	r3, 80060f6 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060de:	4630      	mov	r0, r6
 80060e0:	f000 ffc2 	bl	8007068 <xTaskRemoveFromEventList>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d0f4      	beq.n	80060d2 <prvUnlockQueue+0x62>
 80060e8:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 80060ea:	f001 f865 	bl	80071b8 <vTaskMissedYield>
 80060ee:	b2e3      	uxtb	r3, r4
 80060f0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f1      	bne.n	80060da <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060f6:	23ff      	movs	r3, #255	; 0xff
 80060f8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80060fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006100:	f7ff be6e 	b.w	8005de0 <vPortExitCritical>

08006104 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006104:	b950      	cbnz	r0, 800611c <xQueueGenericCreate+0x18>
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	b672      	cpsid	i
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	b662      	cpsie	i
 800611a:	e7fe      	b.n	800611a <xQueueGenericCreate+0x16>
	{
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006120:	fb01 f000 	mul.w	r0, r1, r0
 8006124:	460d      	mov	r5, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006126:	3048      	adds	r0, #72	; 0x48
 8006128:	f7ff fca8 	bl	8005a7c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800612c:	4604      	mov	r4, r0
 800612e:	b318      	cbz	r0, 8006178 <xQueueGenericCreate+0x74>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006130:	b325      	cbz	r5, 800617c <xQueueGenericCreate+0x78>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006132:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8006136:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8006138:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800613a:	2600      	movs	r6, #0
	pxNewQueue->uxItemSize = uxItemSize;
 800613c:	6425      	str	r5, [r4, #64]	; 0x40
		pxQueue->cRxLock = queueUNLOCKED;
 800613e:	25ff      	movs	r5, #255	; 0xff
	taskENTER_CRITICAL();
 8006140:	f7ff fe28 	bl	8005d94 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006144:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006146:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006148:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800614c:	6822      	ldr	r2, [r4, #0]
 800614e:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006152:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006154:	1a59      	subs	r1, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006156:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006158:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800615a:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800615c:	6063      	str	r3, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 800615e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006162:	60e2      	str	r2, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8006164:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006168:	f7ff fd62 	bl	8005c30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800616c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006170:	f7ff fd5e 	bl	8005c30 <vListInitialise>
	taskEXIT_CRITICAL();
 8006174:	f7ff fe34 	bl	8005de0 <vPortExitCritical>
	}
 8006178:	4620      	mov	r0, r4
 800617a:	bd70      	pop	{r4, r5, r6, pc}
	if( uxItemSize == ( UBaseType_t ) 0 )
 800617c:	4603      	mov	r3, r0
 800617e:	e7da      	b.n	8006136 <xQueueGenericCreate+0x32>

08006180 <xQueueGenericSend>:
{
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	b085      	sub	sp, #20
 8006186:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006188:	2800      	cmp	r0, #0
 800618a:	f000 810a 	beq.w	80063a2 <xQueueGenericSend+0x222>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800618e:	2900      	cmp	r1, #0
 8006190:	f000 814b 	beq.w	800642a <xQueueGenericSend+0x2aa>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006194:	2b02      	cmp	r3, #2
 8006196:	f000 8139 	beq.w	800640c <xQueueGenericSend+0x28c>
 800619a:	4604      	mov	r4, r0
 800619c:	461f      	mov	r7, r3
 800619e:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061a0:	f001 f810 	bl	80071c4 <xTaskGetSchedulerState>
 80061a4:	b918      	cbnz	r0, 80061ae <xQueueGenericSend+0x2e>
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 8124 	bne.w	80063f6 <xQueueGenericSend+0x276>
		taskENTER_CRITICAL();
 80061ae:	f7ff fdf1 	bl	8005d94 <vPortEnterCritical>
 80061b2:	f1a7 0602 	sub.w	r6, r7, #2
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
{
 80061b8:	2500      	movs	r5, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061bc:	fab6 f686 	clz	r6, r6
		prvLockQueue( pxQueue );
 80061c0:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061c2:	429a      	cmp	r2, r3
 80061c4:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80061c8:	d378      	bcc.n	80062bc <xQueueGenericSend+0x13c>
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	d176      	bne.n	80062bc <xQueueGenericSend+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80061ce:	9b01      	ldr	r3, [sp, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8104 	beq.w	80063de <xQueueGenericSend+0x25e>
				else if( xEntryTimeSet == pdFALSE )
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	f000 80fd 	beq.w	80063d6 <xQueueGenericSend+0x256>
		taskEXIT_CRITICAL();
 80061dc:	f7ff fe00 	bl	8005de0 <vPortExitCritical>
		vTaskSuspendAll();
 80061e0:	f000 fcf8 	bl	8006bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061e4:	f7ff fdd6 	bl	8005d94 <vPortEnterCritical>
 80061e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80061ec:	2bff      	cmp	r3, #255	; 0xff
 80061ee:	f000 80ef 	beq.w	80063d0 <xQueueGenericSend+0x250>
 80061f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80061f6:	2bff      	cmp	r3, #255	; 0xff
 80061f8:	f000 80e7 	beq.w	80063ca <xQueueGenericSend+0x24a>
 80061fc:	f7ff fdf0 	bl	8005de0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006200:	a901      	add	r1, sp, #4
 8006202:	a802      	add	r0, sp, #8
 8006204:	f000 ff90 	bl	8007128 <xTaskCheckForTimeOut>
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 80d5 	bne.w	80063b8 <xQueueGenericSend+0x238>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800620e:	f7ff fdc1 	bl	8005d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006212:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006214:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006216:	429a      	cmp	r2, r3
 8006218:	d066      	beq.n	80062e8 <xQueueGenericSend+0x168>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800621a:	f7ff fde1 	bl	8005de0 <vPortExitCritical>
	taskENTER_CRITICAL();
 800621e:	f7ff fdb9 	bl	8005d94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006222:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8006226:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006228:	2d00      	cmp	r5, #0
 800622a:	dd16      	ble.n	800625a <xQueueGenericSend+0xda>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800622c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800622e:	b1a3      	cbz	r3, 800625a <xQueueGenericSend+0xda>
 8006230:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 8006234:	e005      	b.n	8006242 <xQueueGenericSend+0xc2>
 8006236:	3d01      	subs	r5, #1
 8006238:	b2eb      	uxtb	r3, r5
 800623a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800623c:	b16b      	cbz	r3, 800625a <xQueueGenericSend+0xda>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800623e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006240:	b15b      	cbz	r3, 800625a <xQueueGenericSend+0xda>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006242:	4658      	mov	r0, fp
 8006244:	f000 ff10 	bl	8007068 <xTaskRemoveFromEventList>
 8006248:	2800      	cmp	r0, #0
 800624a:	d0f4      	beq.n	8006236 <xQueueGenericSend+0xb6>
 800624c:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800624e:	f000 ffb3 	bl	80071b8 <vTaskMissedYield>
 8006252:	b2eb      	uxtb	r3, r5
 8006254:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f1      	bne.n	800623e <xQueueGenericSend+0xbe>
		pxQueue->cTxLock = queueUNLOCKED;
 800625a:	23ff      	movs	r3, #255	; 0xff
 800625c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006260:	f7ff fdbe 	bl	8005de0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006264:	f7ff fd96 	bl	8005d94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006268:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800626c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800626e:	2d00      	cmp	r5, #0
 8006270:	dd16      	ble.n	80062a0 <xQueueGenericSend+0x120>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	b1a3      	cbz	r3, 80062a0 <xQueueGenericSend+0x120>
 8006276:	f104 0b10 	add.w	fp, r4, #16
 800627a:	e005      	b.n	8006288 <xQueueGenericSend+0x108>
 800627c:	3d01      	subs	r5, #1
 800627e:	b2eb      	uxtb	r3, r5
 8006280:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006282:	b16b      	cbz	r3, 80062a0 <xQueueGenericSend+0x120>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006284:	6923      	ldr	r3, [r4, #16]
 8006286:	b15b      	cbz	r3, 80062a0 <xQueueGenericSend+0x120>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006288:	4658      	mov	r0, fp
 800628a:	f000 feed 	bl	8007068 <xTaskRemoveFromEventList>
 800628e:	2800      	cmp	r0, #0
 8006290:	d0f4      	beq.n	800627c <xQueueGenericSend+0xfc>
 8006292:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8006294:	f000 ff90 	bl	80071b8 <vTaskMissedYield>
 8006298:	b2eb      	uxtb	r3, r5
 800629a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f1      	bne.n	8006284 <xQueueGenericSend+0x104>
		pxQueue->cRxLock = queueUNLOCKED;
 80062a0:	23ff      	movs	r3, #255	; 0xff
 80062a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80062a6:	f7ff fd9b 	bl	8005de0 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80062aa:	f000 fd4b 	bl	8006d44 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80062ae:	f7ff fd71 	bl	8005d94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80062b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062b6:	2501      	movs	r5, #1
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d286      	bcs.n	80061ca <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062bc:	463a      	mov	r2, r7
 80062be:	4641      	mov	r1, r8
 80062c0:	4620      	mov	r0, r4
 80062c2:	f7ff fe8b 	bl	8005fdc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f040 808c 	bne.w	80063e6 <xQueueGenericSend+0x266>
					else if( xYieldRequired != pdFALSE )
 80062ce:	b138      	cbz	r0, 80062e0 <xQueueGenericSend+0x160>
						queueYIELD_IF_USING_PREEMPTION();
 80062d0:	4b5d      	ldr	r3, [pc, #372]	; (8006448 <xQueueGenericSend+0x2c8>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80062e0:	f7ff fd7e 	bl	8005de0 <vPortExitCritical>
				return pdPASS;
 80062e4:	2001      	movs	r0, #1
 80062e6:	e06d      	b.n	80063c4 <xQueueGenericSend+0x244>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062e8:	f104 0b10 	add.w	fp, r4, #16
	taskEXIT_CRITICAL();
 80062ec:	f7ff fd78 	bl	8005de0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062f0:	9901      	ldr	r1, [sp, #4]
 80062f2:	4658      	mov	r0, fp
 80062f4:	f000 fe64 	bl	8006fc0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80062f8:	f7ff fd4c 	bl	8005d94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80062fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006300:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006304:	f1ba 0f00 	cmp.w	sl, #0
 8006308:	dd1a      	ble.n	8006340 <xQueueGenericSend+0x1c0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800630a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800630c:	b1c2      	cbz	r2, 8006340 <xQueueGenericSend+0x1c0>
 800630e:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8006312:	e007      	b.n	8006324 <xQueueGenericSend+0x1a4>
 8006314:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006318:	b2db      	uxtb	r3, r3
 800631a:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800631e:	b17b      	cbz	r3, 8006340 <xQueueGenericSend+0x1c0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006320:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006322:	b16a      	cbz	r2, 8006340 <xQueueGenericSend+0x1c0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006324:	4628      	mov	r0, r5
 8006326:	f000 fe9f 	bl	8007068 <xTaskRemoveFromEventList>
 800632a:	2800      	cmp	r0, #0
 800632c:	d0f2      	beq.n	8006314 <xQueueGenericSend+0x194>
						vTaskMissedYield();
 800632e:	f000 ff43 	bl	80071b8 <vTaskMissedYield>
 8006332:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006336:	b2db      	uxtb	r3, r3
 8006338:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1ef      	bne.n	8006320 <xQueueGenericSend+0x1a0>
		pxQueue->cTxLock = queueUNLOCKED;
 8006340:	23ff      	movs	r3, #255	; 0xff
 8006342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006346:	f7ff fd4b 	bl	8005de0 <vPortExitCritical>
	taskENTER_CRITICAL();
 800634a:	f7ff fd23 	bl	8005d94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800634e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8006352:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006354:	2d00      	cmp	r5, #0
 8006356:	dc04      	bgt.n	8006362 <xQueueGenericSend+0x1e2>
 8006358:	e011      	b.n	800637e <xQueueGenericSend+0x1fe>
 800635a:	3d01      	subs	r5, #1
 800635c:	b2eb      	uxtb	r3, r5
 800635e:	b25d      	sxtb	r5, r3
 8006360:	b16b      	cbz	r3, 800637e <xQueueGenericSend+0x1fe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006362:	6923      	ldr	r3, [r4, #16]
 8006364:	b15b      	cbz	r3, 800637e <xQueueGenericSend+0x1fe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006366:	4658      	mov	r0, fp
 8006368:	f000 fe7e 	bl	8007068 <xTaskRemoveFromEventList>
 800636c:	2800      	cmp	r0, #0
 800636e:	d0f4      	beq.n	800635a <xQueueGenericSend+0x1da>
 8006370:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8006372:	f000 ff21 	bl	80071b8 <vTaskMissedYield>
 8006376:	b2eb      	uxtb	r3, r5
 8006378:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f1      	bne.n	8006362 <xQueueGenericSend+0x1e2>
		pxQueue->cRxLock = queueUNLOCKED;
 800637e:	23ff      	movs	r3, #255	; 0xff
 8006380:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006384:	f7ff fd2c 	bl	8005de0 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8006388:	f000 fcdc 	bl	8006d44 <xTaskResumeAll>
 800638c:	2800      	cmp	r0, #0
 800638e:	d18e      	bne.n	80062ae <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8006390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006394:	4a2c      	ldr	r2, [pc, #176]	; (8006448 <xQueueGenericSend+0x2c8>)
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	e785      	b.n	80062ae <xQueueGenericSend+0x12e>
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	b672      	cpsid	i
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	b662      	cpsie	i
 80063b6:	e7fe      	b.n	80063b6 <xQueueGenericSend+0x236>
			prvUnlockQueue( pxQueue );
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7ff fe59 	bl	8006070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063be:	f000 fcc1 	bl	8006d44 <xTaskResumeAll>
			return errQUEUE_FULL;
 80063c2:	2000      	movs	r0, #0
}
 80063c4:	b005      	add	sp, #20
 80063c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		prvLockQueue( pxQueue );
 80063ca:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80063ce:	e715      	b.n	80061fc <xQueueGenericSend+0x7c>
 80063d0:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80063d4:	e70d      	b.n	80061f2 <xQueueGenericSend+0x72>
					vTaskSetTimeOutState( &xTimeOut );
 80063d6:	a802      	add	r0, sp, #8
 80063d8:	f000 fe8e 	bl	80070f8 <vTaskSetTimeOutState>
 80063dc:	e6fe      	b.n	80061dc <xQueueGenericSend+0x5c>
					taskEXIT_CRITICAL();
 80063de:	f7ff fcff 	bl	8005de0 <vPortExitCritical>
					return errQUEUE_FULL;
 80063e2:	4630      	mov	r0, r6
 80063e4:	e7ee      	b.n	80063c4 <xQueueGenericSend+0x244>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80063ea:	f000 fe3d 	bl	8007068 <xTaskRemoveFromEventList>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	f47f af6e 	bne.w	80062d0 <xQueueGenericSend+0x150>
 80063f4:	e774      	b.n	80062e0 <xQueueGenericSend+0x160>
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	b672      	cpsid	i
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	b662      	cpsie	i
 800640a:	e7fe      	b.n	800640a <xQueueGenericSend+0x28a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800640c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800640e:	2a01      	cmp	r2, #1
 8006410:	f43f aec3 	beq.w	800619a <xQueueGenericSend+0x1a>
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	b672      	cpsid	i
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	b662      	cpsie	i
 8006428:	e7fe      	b.n	8006428 <xQueueGenericSend+0x2a8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800642a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800642c:	2a00      	cmp	r2, #0
 800642e:	f43f aeb1 	beq.w	8006194 <xQueueGenericSend+0x14>
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	b672      	cpsid	i
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	b662      	cpsie	i
 8006446:	e7fe      	b.n	8006446 <xQueueGenericSend+0x2c6>
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <xQueueCreateMutex>:
	{
 800644c:	b570      	push	{r4, r5, r6, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800644e:	2048      	movs	r0, #72	; 0x48
 8006450:	f7ff fb14 	bl	8005a7c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006454:	4604      	mov	r4, r0
 8006456:	b350      	cbz	r0, 80064ae <xQueueCreateMutex+0x62>
	pxNewQueue->uxItemSize = uxItemSize;
 8006458:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800645a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800645c:	6020      	str	r0, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
 800645e:	26ff      	movs	r6, #255	; 0xff
	pxNewQueue->uxLength = uxQueueLength;
 8006460:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006462:	6405      	str	r5, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
 8006464:	f7ff fc96 	bl	8005d94 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006468:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800646a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800646c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	fb02 f201 	mul.w	r2, r2, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006476:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006478:	1a51      	subs	r1, r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800647a:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800647c:	63a5      	str	r5, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800647e:	440b      	add	r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006480:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8006482:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006486:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8006488:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800648c:	f7ff fbd0 	bl	8005c30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006490:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006494:	f7ff fbcc 	bl	8005c30 <vListInitialise>
	taskEXIT_CRITICAL();
 8006498:	f7ff fca2 	bl	8005de0 <vPortExitCritical>
			pxNewQueue->pxMutexHolder = NULL;
 800649c:	6065      	str	r5, [r4, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800649e:	6025      	str	r5, [r4, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80064a0:	462b      	mov	r3, r5
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80064a2:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80064a4:	462a      	mov	r2, r5
 80064a6:	4629      	mov	r1, r5
 80064a8:	4620      	mov	r0, r4
 80064aa:	f7ff fe69 	bl	8006180 <xQueueGenericSend>
	}
 80064ae:	4620      	mov	r0, r4
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	bf00      	nop

080064b4 <xQueueGenericSendFromISR>:
{
 80064b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80064b8:	b318      	cbz	r0, 8006502 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064ba:	2900      	cmp	r1, #0
 80064bc:	d04a      	beq.n	8006554 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d03a      	beq.n	8006538 <xQueueGenericSendFromISR+0x84>
 80064c2:	4604      	mov	r4, r0
 80064c4:	461f      	mov	r7, r3
 80064c6:	4690      	mov	r8, r2
 80064c8:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064ca:	f7ff fd55 	bl	8005f78 <vPortValidateInterruptPriority>
	__asm volatile
 80064ce:	f3ef 8611 	mrs	r6, BASEPRI
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	b672      	cpsid	i
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80064e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d314      	bcc.n	8006518 <xQueueGenericSendFromISR+0x64>
 80064ee:	f1a7 0002 	sub.w	r0, r7, #2
 80064f2:	fab0 f080 	clz	r0, r0
 80064f6:	0940      	lsrs	r0, r0, #5
 80064f8:	b970      	cbnz	r0, 8006518 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80064fa:	f386 8811 	msr	BASEPRI, r6
}
 80064fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	b672      	cpsid	i
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	b662      	cpsie	i
 8006516:	e7fe      	b.n	8006516 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006518:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800651c:	463a      	mov	r2, r7
 800651e:	4649      	mov	r1, r9
 8006520:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8006522:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006524:	f7ff fd5a 	bl	8005fdc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006528:	1c6b      	adds	r3, r5, #1
 800652a:	d021      	beq.n	8006570 <xQueueGenericSendFromISR+0xbc>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800652c:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 800652e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006530:	b25b      	sxtb	r3, r3
 8006532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006536:	e7e0      	b.n	80064fa <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006538:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800653a:	2c01      	cmp	r4, #1
 800653c:	d0c1      	beq.n	80064c2 <xQueueGenericSendFromISR+0xe>
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	b672      	cpsid	i
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	b662      	cpsie	i
 8006552:	e7fe      	b.n	8006552 <xQueueGenericSendFromISR+0x9e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006554:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006556:	2c00      	cmp	r4, #0
 8006558:	d0b1      	beq.n	80064be <xQueueGenericSendFromISR+0xa>
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	b672      	cpsid	i
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	b662      	cpsie	i
 800656e:	e7fe      	b.n	800656e <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006572:	b90b      	cbnz	r3, 8006578 <xQueueGenericSendFromISR+0xc4>
			xReturn = pdPASS;
 8006574:	2001      	movs	r0, #1
 8006576:	e7c0      	b.n	80064fa <xQueueGenericSendFromISR+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006578:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800657c:	f000 fd74 	bl	8007068 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8006580:	2800      	cmp	r0, #0
 8006582:	d0f7      	beq.n	8006574 <xQueueGenericSendFromISR+0xc0>
 8006584:	f1b8 0f00 	cmp.w	r8, #0
 8006588:	d0f4      	beq.n	8006574 <xQueueGenericSendFromISR+0xc0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800658a:	2001      	movs	r0, #1
 800658c:	f8c8 0000 	str.w	r0, [r8]
 8006590:	e7b3      	b.n	80064fa <xQueueGenericSendFromISR+0x46>
 8006592:	bf00      	nop

08006594 <xQueueGenericReceive>:
{
 8006594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800659c:	2800      	cmp	r0, #0
 800659e:	f000 811e 	beq.w	80067de <xQueueGenericReceive+0x24a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a2:	2900      	cmp	r1, #0
 80065a4:	f000 814f 	beq.w	8006846 <xQueueGenericReceive+0x2b2>
 80065a8:	4604      	mov	r4, r0
 80065aa:	461f      	mov	r7, r3
 80065ac:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065ae:	f000 fe09 	bl	80071c4 <xTaskGetSchedulerState>
 80065b2:	b960      	cbnz	r0, 80065ce <xQueueGenericReceive+0x3a>
 80065b4:	9d01      	ldr	r5, [sp, #4]
 80065b6:	b15d      	cbz	r5, 80065d0 <xQueueGenericReceive+0x3c>
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	b672      	cpsid	i
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	b662      	cpsie	i
 80065cc:	e7fe      	b.n	80065cc <xQueueGenericReceive+0x38>
 80065ce:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
 80065d0:	f7ff fbe0 	bl	8005d94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065d4:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 80065d8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80065dc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8006864 <xQueueGenericReceive+0x2d0>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065e0:	f1ba 0f00 	cmp.w	sl, #0
 80065e4:	f040 808a 	bne.w	80066fc <xQueueGenericReceive+0x168>
				if( xTicksToWait == ( TickType_t ) 0 )
 80065e8:	9b01      	ldr	r3, [sp, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 810a 	beq.w	8006804 <xQueueGenericReceive+0x270>
				else if( xEntryTimeSet == pdFALSE )
 80065f0:	b915      	cbnz	r5, 80065f8 <xQueueGenericReceive+0x64>
					vTaskSetTimeOutState( &xTimeOut );
 80065f2:	a802      	add	r0, sp, #8
 80065f4:	f000 fd80 	bl	80070f8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80065f8:	f7ff fbf2 	bl	8005de0 <vPortExitCritical>
		vTaskSuspendAll();
 80065fc:	f000 faea 	bl	8006bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006600:	f7ff fbc8 	bl	8005d94 <vPortEnterCritical>
 8006604:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006608:	2bff      	cmp	r3, #255	; 0xff
 800660a:	d101      	bne.n	8006610 <xQueueGenericReceive+0x7c>
 800660c:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8006610:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006614:	2bff      	cmp	r3, #255	; 0xff
 8006616:	d101      	bne.n	800661c <xQueueGenericReceive+0x88>
 8006618:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800661c:	f7ff fbe0 	bl	8005de0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006620:	a901      	add	r1, sp, #4
 8006622:	a802      	add	r0, sp, #8
 8006624:	f000 fd80 	bl	8007128 <xTaskCheckForTimeOut>
 8006628:	2800      	cmp	r0, #0
 800662a:	f040 8088 	bne.w	800673e <xQueueGenericReceive+0x1aa>
	taskENTER_CRITICAL();
 800662e:	f7ff fbb1 	bl	8005d94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006634:	2b00      	cmp	r3, #0
 8006636:	d179      	bne.n	800672c <xQueueGenericReceive+0x198>
	taskEXIT_CRITICAL();
 8006638:	f7ff fbd2 	bl	8005de0 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80d8 	beq.w	80067f4 <xQueueGenericReceive+0x260>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006644:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8006648:	9901      	ldr	r1, [sp, #4]
 800664a:	4650      	mov	r0, sl
 800664c:	f000 fcb8 	bl	8006fc0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8006650:	f7ff fba0 	bl	8005d94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006654:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8006658:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800665a:	2d00      	cmp	r5, #0
 800665c:	dc04      	bgt.n	8006668 <xQueueGenericReceive+0xd4>
 800665e:	e011      	b.n	8006684 <xQueueGenericReceive+0xf0>
 8006660:	3d01      	subs	r5, #1
 8006662:	b2eb      	uxtb	r3, r5
 8006664:	b25d      	sxtb	r5, r3
 8006666:	b16b      	cbz	r3, 8006684 <xQueueGenericReceive+0xf0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800666a:	b15b      	cbz	r3, 8006684 <xQueueGenericReceive+0xf0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800666c:	4650      	mov	r0, sl
 800666e:	f000 fcfb 	bl	8007068 <xTaskRemoveFromEventList>
 8006672:	2800      	cmp	r0, #0
 8006674:	d0f4      	beq.n	8006660 <xQueueGenericReceive+0xcc>
 8006676:	3d01      	subs	r5, #1
						vTaskMissedYield();
 8006678:	f000 fd9e 	bl	80071b8 <vTaskMissedYield>
 800667c:	b2eb      	uxtb	r3, r5
 800667e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f1      	bne.n	8006668 <xQueueGenericReceive+0xd4>
		pxQueue->cTxLock = queueUNLOCKED;
 8006684:	23ff      	movs	r3, #255	; 0xff
 8006686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800668a:	f7ff fba9 	bl	8005de0 <vPortExitCritical>
	taskENTER_CRITICAL();
 800668e:	f7ff fb81 	bl	8005d94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006692:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8006696:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006698:	2d00      	cmp	r5, #0
 800669a:	dd16      	ble.n	80066ca <xQueueGenericReceive+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	b1a3      	cbz	r3, 80066ca <xQueueGenericReceive+0x136>
 80066a0:	f104 0a10 	add.w	sl, r4, #16
 80066a4:	e005      	b.n	80066b2 <xQueueGenericReceive+0x11e>
 80066a6:	3d01      	subs	r5, #1
 80066a8:	b2eb      	uxtb	r3, r5
 80066aa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066ac:	b16b      	cbz	r3, 80066ca <xQueueGenericReceive+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	b15b      	cbz	r3, 80066ca <xQueueGenericReceive+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066b2:	4650      	mov	r0, sl
 80066b4:	f000 fcd8 	bl	8007068 <xTaskRemoveFromEventList>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d0f4      	beq.n	80066a6 <xQueueGenericReceive+0x112>
 80066bc:	3d01      	subs	r5, #1
					vTaskMissedYield();
 80066be:	f000 fd7b 	bl	80071b8 <vTaskMissedYield>
 80066c2:	b2eb      	uxtb	r3, r5
 80066c4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f1      	bne.n	80066ae <xQueueGenericReceive+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 80066ca:	23ff      	movs	r3, #255	; 0xff
 80066cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80066d0:	f7ff fb86 	bl	8005de0 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80066d4:	f000 fb36 	bl	8006d44 <xTaskResumeAll>
 80066d8:	b938      	cbnz	r0, 80066ea <xQueueGenericReceive+0x156>
					portYIELD_WITHIN_API();
 80066da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066de:	f8c9 3000 	str.w	r3, [r9]
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80066ec:	f7ff fb52 	bl	8005d94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066f0:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066f4:	f1ba 0f00 	cmp.w	sl, #0
 80066f8:	f43f af76 	beq.w	80065e8 <xQueueGenericReceive+0x54>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066fc:	4631      	mov	r1, r6
 80066fe:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8006700:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006702:	f7ff fca1 	bl	8006048 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8006706:	2f00      	cmp	r7, #0
 8006708:	f040 8082 	bne.w	8006810 <xQueueGenericReceive+0x27c>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800670c:	f10a 33ff 	add.w	r3, sl, #4294967295
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006710:	6822      	ldr	r2, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006712:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006714:	b912      	cbnz	r2, 800671c <xQueueGenericReceive+0x188>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006716:	f000 fe11 	bl	800733c <pvTaskIncrementMutexHeldCount>
 800671a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 808a 	bne.w	8006838 <xQueueGenericReceive+0x2a4>
				taskEXIT_CRITICAL();
 8006724:	f7ff fb5c 	bl	8005de0 <vPortExitCritical>
				return pdPASS;
 8006728:	2001      	movs	r0, #1
 800672a:	e06e      	b.n	800680a <xQueueGenericReceive+0x276>
	taskEXIT_CRITICAL();
 800672c:	f7ff fb58 	bl	8005de0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006730:	4620      	mov	r0, r4
 8006732:	f7ff fc9d 	bl	8006070 <prvUnlockQueue>
 8006736:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 8006738:	f000 fb04 	bl	8006d44 <xTaskResumeAll>
 800673c:	e7d6      	b.n	80066ec <xQueueGenericReceive+0x158>
	taskENTER_CRITICAL();
 800673e:	f7ff fb29 	bl	8005d94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006742:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8006746:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006748:	2d00      	cmp	r5, #0
 800674a:	dd16      	ble.n	800677a <xQueueGenericReceive+0x1e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800674c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800674e:	b1a3      	cbz	r3, 800677a <xQueueGenericReceive+0x1e6>
 8006750:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8006754:	e005      	b.n	8006762 <xQueueGenericReceive+0x1ce>
 8006756:	3d01      	subs	r5, #1
 8006758:	b2eb      	uxtb	r3, r5
 800675a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800675c:	b16b      	cbz	r3, 800677a <xQueueGenericReceive+0x1e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800675e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006760:	b15b      	cbz	r3, 800677a <xQueueGenericReceive+0x1e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006762:	4650      	mov	r0, sl
 8006764:	f000 fc80 	bl	8007068 <xTaskRemoveFromEventList>
 8006768:	2800      	cmp	r0, #0
 800676a:	d0f4      	beq.n	8006756 <xQueueGenericReceive+0x1c2>
 800676c:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800676e:	f000 fd23 	bl	80071b8 <vTaskMissedYield>
 8006772:	b2eb      	uxtb	r3, r5
 8006774:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f1      	bne.n	800675e <xQueueGenericReceive+0x1ca>
		pxQueue->cTxLock = queueUNLOCKED;
 800677a:	23ff      	movs	r3, #255	; 0xff
 800677c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006780:	f7ff fb2e 	bl	8005de0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006784:	f7ff fb06 	bl	8005d94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006788:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800678c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800678e:	2d00      	cmp	r5, #0
 8006790:	dd16      	ble.n	80067c0 <xQueueGenericReceive+0x22c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	b1a3      	cbz	r3, 80067c0 <xQueueGenericReceive+0x22c>
 8006796:	f104 0a10 	add.w	sl, r4, #16
 800679a:	e005      	b.n	80067a8 <xQueueGenericReceive+0x214>
 800679c:	3d01      	subs	r5, #1
 800679e:	b2eb      	uxtb	r3, r5
 80067a0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067a2:	b16b      	cbz	r3, 80067c0 <xQueueGenericReceive+0x22c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067a4:	6923      	ldr	r3, [r4, #16]
 80067a6:	b15b      	cbz	r3, 80067c0 <xQueueGenericReceive+0x22c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067a8:	4650      	mov	r0, sl
 80067aa:	f000 fc5d 	bl	8007068 <xTaskRemoveFromEventList>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d0f4      	beq.n	800679c <xQueueGenericReceive+0x208>
 80067b2:	3d01      	subs	r5, #1
					vTaskMissedYield();
 80067b4:	f000 fd00 	bl	80071b8 <vTaskMissedYield>
 80067b8:	b2eb      	uxtb	r3, r5
 80067ba:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f1      	bne.n	80067a4 <xQueueGenericReceive+0x210>
		pxQueue->cRxLock = queueUNLOCKED;
 80067c0:	23ff      	movs	r3, #255	; 0xff
 80067c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80067c6:	f7ff fb0b 	bl	8005de0 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80067ca:	f000 fabb 	bl	8006d44 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80067ce:	f7ff fae1 	bl	8005d94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067d4:	b1b3      	cbz	r3, 8006804 <xQueueGenericReceive+0x270>
	taskEXIT_CRITICAL();
 80067d6:	f7ff fb03 	bl	8005de0 <vPortExitCritical>
 80067da:	2501      	movs	r5, #1
 80067dc:	e786      	b.n	80066ec <xQueueGenericReceive+0x158>
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	b672      	cpsid	i
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	b662      	cpsie	i
 80067f2:	e7fe      	b.n	80067f2 <xQueueGenericReceive+0x25e>
						taskENTER_CRITICAL();
 80067f4:	f7ff face 	bl	8005d94 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80067f8:	6860      	ldr	r0, [r4, #4]
 80067fa:	f000 fcf3 	bl	80071e4 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80067fe:	f7ff faef 	bl	8005de0 <vPortExitCritical>
 8006802:	e71f      	b.n	8006644 <xQueueGenericReceive+0xb0>
					taskEXIT_CRITICAL();
 8006804:	f7ff faec 	bl	8005de0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006808:	2000      	movs	r0, #0
}
 800680a:	b004      	add	sp, #16
 800680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006810:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8006812:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006814:	2b00      	cmp	r3, #0
 8006816:	d085      	beq.n	8006724 <xQueueGenericReceive+0x190>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006818:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800681c:	f000 fc24 	bl	8007068 <xTaskRemoveFromEventList>
 8006820:	2800      	cmp	r0, #0
 8006822:	f43f af7f 	beq.w	8006724 <xQueueGenericReceive+0x190>
							queueYIELD_IF_USING_PREEMPTION();
 8006826:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <xQueueGenericReceive+0x2d0>)
 8006828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	e775      	b.n	8006724 <xQueueGenericReceive+0x190>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006838:	f104 0010 	add.w	r0, r4, #16
 800683c:	f000 fc14 	bl	8007068 <xTaskRemoveFromEventList>
 8006840:	2800      	cmp	r0, #0
 8006842:	d1f0      	bne.n	8006826 <xQueueGenericReceive+0x292>
 8006844:	e76e      	b.n	8006724 <xQueueGenericReceive+0x190>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006846:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006848:	2a00      	cmp	r2, #0
 800684a:	f43f aead 	beq.w	80065a8 <xQueueGenericReceive+0x14>
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	b672      	cpsid	i
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	b662      	cpsie	i
 8006862:	e7fe      	b.n	8006862 <xQueueGenericReceive+0x2ce>
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800686a:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800686c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800686e:	4d1b      	ldr	r5, [pc, #108]	; (80068dc <prvAddCurrentTaskToDelayedList+0x74>)
{
 8006870:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8006872:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006874:	6828      	ldr	r0, [r5, #0]
 8006876:	3004      	adds	r0, #4
 8006878:	f7ff fa14 	bl	8005ca4 <uxListRemove>
 800687c:	b940      	cbnz	r0, 8006890 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	2201      	movs	r2, #1
 8006882:	4917      	ldr	r1, [pc, #92]	; (80068e0 <prvAddCurrentTaskToDelayedList+0x78>)
 8006884:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006886:	680b      	ldr	r3, [r1, #0]
 8006888:	4082      	lsls	r2, r0
 800688a:	ea23 0302 	bic.w	r3, r3, r2
 800688e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006890:	1c63      	adds	r3, r4, #1
 8006892:	d100      	bne.n	8006896 <prvAddCurrentTaskToDelayedList+0x2e>
 8006894:	b9c7      	cbnz	r7, 80068c8 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006896:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006898:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 800689a:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800689c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800689e:	d80b      	bhi.n	80068b8 <prvAddCurrentTaskToDelayedList+0x50>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068a0:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <prvAddCurrentTaskToDelayedList+0x7c>)
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	6829      	ldr	r1, [r5, #0]
 80068a6:	3104      	adds	r1, #4
 80068a8:	f7ff f9e2 	bl	8005c70 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80068ac:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <prvAddCurrentTaskToDelayedList+0x80>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	4294      	cmp	r4, r2
 80068b2:	d200      	bcs.n	80068b6 <prvAddCurrentTaskToDelayedList+0x4e>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80068b4:	601c      	str	r4, [r3, #0]
 80068b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068b8:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <prvAddCurrentTaskToDelayedList+0x84>)
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068c2:	3104      	adds	r1, #4
 80068c4:	f7ff b9d4 	b.w	8005c70 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068c8:	6829      	ldr	r1, [r5, #0]
 80068ca:	4809      	ldr	r0, [pc, #36]	; (80068f0 <prvAddCurrentTaskToDelayedList+0x88>)
 80068cc:	3104      	adds	r1, #4
}
 80068ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068d2:	f7ff b9bd 	b.w	8005c50 <vListInsertEnd>
 80068d6:	bf00      	nop
 80068d8:	20003dbc 	.word	0x20003dbc
 80068dc:	20003c98 	.word	0x20003c98
 80068e0:	20003d44 	.word	0x20003d44
 80068e4:	20003c9c 	.word	0x20003c9c
 80068e8:	20003d74 	.word	0x20003d74
 80068ec:	20003ca0 	.word	0x20003ca0
 80068f0:	20003d94 	.word	0x20003d94

080068f4 <xTaskCreate>:
	{
 80068f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80068fc:	4680      	mov	r8, r0
 80068fe:	460d      	mov	r5, r1
 8006900:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006902:	4650      	mov	r0, sl
	{
 8006904:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006906:	f7ff f8b9 	bl	8005a7c <pvPortMalloc>
			if( pxStack != NULL )
 800690a:	2800      	cmp	r0, #0
 800690c:	f000 80cc 	beq.w	8006aa8 <xTaskCreate+0x1b4>
 8006910:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006912:	2054      	movs	r0, #84	; 0x54
 8006914:	f7ff f8b2 	bl	8005a7c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006918:	4604      	mov	r4, r0
 800691a:	2800      	cmp	r0, #0
 800691c:	f000 80d1 	beq.w	8006ac2 <xTaskCreate+0x1ce>
					pxNewTCB->pxStack = pxStack;
 8006920:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006922:	f1aa 0a04 	sub.w	sl, sl, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006926:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006928:	4456      	add	r6, sl
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800692a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800692e:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006930:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8006934:	2b00      	cmp	r3, #0
 8006936:	d047      	beq.n	80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006938:	786b      	ldrb	r3, [r5, #1]
 800693a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 800693e:	786b      	ldrb	r3, [r5, #1]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d041      	beq.n	80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006944:	78ab      	ldrb	r3, [r5, #2]
 8006946:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800694a:	78ab      	ldrb	r3, [r5, #2]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d03b      	beq.n	80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006950:	78eb      	ldrb	r3, [r5, #3]
 8006952:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8006956:	78eb      	ldrb	r3, [r5, #3]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d035      	beq.n	80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800695c:	792b      	ldrb	r3, [r5, #4]
 800695e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8006962:	792b      	ldrb	r3, [r5, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d02f      	beq.n	80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006968:	796b      	ldrb	r3, [r5, #5]
 800696a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 800696e:	796b      	ldrb	r3, [r5, #5]
 8006970:	b353      	cbz	r3, 80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006972:	79ab      	ldrb	r3, [r5, #6]
 8006974:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 8006978:	79ab      	ldrb	r3, [r5, #6]
 800697a:	b32b      	cbz	r3, 80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800697c:	79eb      	ldrb	r3, [r5, #7]
 800697e:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8006982:	79eb      	ldrb	r3, [r5, #7]
 8006984:	b303      	cbz	r3, 80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006986:	7a2b      	ldrb	r3, [r5, #8]
 8006988:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800698c:	7a2b      	ldrb	r3, [r5, #8]
 800698e:	b1db      	cbz	r3, 80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006990:	7a6b      	ldrb	r3, [r5, #9]
 8006992:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8006996:	7a6b      	ldrb	r3, [r5, #9]
 8006998:	b1b3      	cbz	r3, 80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800699a:	7aab      	ldrb	r3, [r5, #10]
 800699c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 80069a0:	7aab      	ldrb	r3, [r5, #10]
 80069a2:	b18b      	cbz	r3, 80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069a4:	7aeb      	ldrb	r3, [r5, #11]
 80069a6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 80069aa:	7aeb      	ldrb	r3, [r5, #11]
 80069ac:	b163      	cbz	r3, 80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069ae:	7b2b      	ldrb	r3, [r5, #12]
 80069b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 80069b4:	7b2b      	ldrb	r3, [r5, #12]
 80069b6:	b13b      	cbz	r3, 80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069b8:	7b6b      	ldrb	r3, [r5, #13]
 80069ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 80069be:	7b6b      	ldrb	r3, [r5, #13]
 80069c0:	b113      	cbz	r3, 80069c8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069c2:	7bab      	ldrb	r3, [r5, #14]
 80069c4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80069c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069ca:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069ce:	f104 0a04 	add.w	sl, r4, #4
 80069d2:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069d4:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069d8:	4650      	mov	r0, sl
		pxNewTCB->uxMutexesHeld = 0;
 80069da:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 80069de:	bf28      	it	cs
 80069e0:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80069e2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80069e4:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e6:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069ea:	f7ff f92d 	bl	8005c48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069ee:	f104 0018 	add.w	r0, r4, #24
 80069f2:	f7ff f929 	bl	8005c48 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80069f6:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069fa:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069fc:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069fe:	4641      	mov	r1, r8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a00:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a04:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a06:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a08:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a0a:	f7ff f995 	bl	8005d38 <pxPortInitialiseStack>
 8006a0e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006a10:	b107      	cbz	r7, 8006a14 <xTaskCreate+0x120>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a12:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 8006a14:	f7ff f9be 	bl	8005d94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006a18:	4a40      	ldr	r2, [pc, #256]	; (8006b1c <xTaskCreate+0x228>)
		if( pxCurrentTCB == NULL )
 8006a1a:	4e41      	ldr	r6, [pc, #260]	; (8006b20 <xTaskCreate+0x22c>)
		uxCurrentNumberOfTasks++;
 8006a1c:	6813      	ldr	r3, [r2, #0]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a22:	6833      	ldr	r3, [r6, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d043      	beq.n	8006ab0 <xTaskCreate+0x1bc>
			if( xSchedulerRunning == pdFALSE )
 8006a28:	4f3e      	ldr	r7, [pc, #248]	; (8006b24 <xTaskCreate+0x230>)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	b383      	cbz	r3, 8006a90 <xTaskCreate+0x19c>
 8006a2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a30:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8006b44 <xTaskCreate+0x250>
		uxTaskNumber++;
 8006a34:	f8df c110 	ldr.w	ip, [pc, #272]	; 8006b48 <xTaskCreate+0x254>
		prvAddTaskToReadyList( pxNewTCB );
 8006a38:	f04f 0b01 	mov.w	fp, #1
 8006a3c:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8006b4c <xTaskCreate+0x258>
 8006a40:	4651      	mov	r1, sl
		uxTaskNumber++;
 8006a42:	f8dc 5000 	ldr.w	r5, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8006a46:	fa0b f203 	lsl.w	r2, fp, r3
 8006a4a:	f8de 0000 	ldr.w	r0, [lr]
 8006a4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 8006a52:	eb05 090b 	add.w	r9, r5, fp
		prvAddTaskToReadyList( pxNewTCB );
 8006a56:	4302      	orrs	r2, r0
 8006a58:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 8006a5c:	f8cc 9000 	str.w	r9, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8006a60:	f8ce 2000 	str.w	r2, [lr]
 8006a64:	f7ff f8f4 	bl	8005c50 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006a68:	f7ff f9ba 	bl	8005de0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	b1c3      	cbz	r3, 8006aa2 <xTaskCreate+0x1ae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a70:	6832      	ldr	r2, [r6, #0]
 8006a72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d213      	bcs.n	8006aa2 <xTaskCreate+0x1ae>
			taskYIELD_IF_USING_PREEMPTION();
 8006a7a:	4b2b      	ldr	r3, [pc, #172]	; (8006b28 <xTaskCreate+0x234>)
 8006a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8006a8a:	4658      	mov	r0, fp
 8006a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a90:	6832      	ldr	r2, [r6, #0]
 8006a92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a96:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006b44 <xTaskCreate+0x250>
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d8ca      	bhi.n	8006a34 <xTaskCreate+0x140>
					pxCurrentTCB = pxNewTCB;
 8006a9e:	6034      	str	r4, [r6, #0]
 8006aa0:	e7c8      	b.n	8006a34 <xTaskCreate+0x140>
			xReturn = pdPASS;
 8006aa2:	4658      	mov	r0, fp
	}
 8006aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 8006ab0:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ab2:	6813      	ldr	r3, [r2, #0]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d00b      	beq.n	8006ad0 <xTaskCreate+0x1dc>
 8006ab8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006aba:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8006b44 <xTaskCreate+0x250>
 8006abe:	4f19      	ldr	r7, [pc, #100]	; (8006b24 <xTaskCreate+0x230>)
 8006ac0:	e7b8      	b.n	8006a34 <xTaskCreate+0x140>
					vPortFree( pxStack );
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff f878 	bl	8005bb8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8006b44 <xTaskCreate+0x250>
 8006ad4:	4645      	mov	r5, r8
 8006ad6:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ada:	4628      	mov	r0, r5
 8006adc:	3514      	adds	r5, #20
 8006ade:	f7ff f8a7 	bl	8005c30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ae2:	42bd      	cmp	r5, r7
 8006ae4:	d1f9      	bne.n	8006ada <xTaskCreate+0x1e6>
	vListInitialise( &xDelayedTaskList1 );
 8006ae6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8006b50 <xTaskCreate+0x25c>
	vListInitialise( &xDelayedTaskList2 );
 8006aea:	4d10      	ldr	r5, [pc, #64]	; (8006b2c <xTaskCreate+0x238>)
	vListInitialise( &xDelayedTaskList1 );
 8006aec:	4648      	mov	r0, r9
 8006aee:	4f0d      	ldr	r7, [pc, #52]	; (8006b24 <xTaskCreate+0x230>)
 8006af0:	f7ff f89e 	bl	8005c30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006af4:	4628      	mov	r0, r5
 8006af6:	f7ff f89b 	bl	8005c30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006afa:	480d      	ldr	r0, [pc, #52]	; (8006b30 <xTaskCreate+0x23c>)
 8006afc:	f7ff f898 	bl	8005c30 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006b00:	480c      	ldr	r0, [pc, #48]	; (8006b34 <xTaskCreate+0x240>)
 8006b02:	f7ff f895 	bl	8005c30 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006b06:	480c      	ldr	r0, [pc, #48]	; (8006b38 <xTaskCreate+0x244>)
 8006b08:	f7ff f892 	bl	8005c30 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <xTaskCreate+0x248>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b0e:	4a0c      	ldr	r2, [pc, #48]	; (8006b40 <xTaskCreate+0x24c>)
 8006b10:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b14:	601d      	str	r5, [r3, #0]
 8006b16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b18:	e78c      	b.n	8006a34 <xTaskCreate+0x140>
 8006b1a:	bf00      	nop
 8006b1c:	20003d30 	.word	0x20003d30
 8006b20:	20003c98 	.word	0x20003c98
 8006b24:	20003d90 	.word	0x20003d90
 8006b28:	e000ed04 	.word	0xe000ed04
 8006b2c:	20003d5c 	.word	0x20003d5c
 8006b30:	20003d7c 	.word	0x20003d7c
 8006b34:	20003da8 	.word	0x20003da8
 8006b38:	20003d94 	.word	0x20003d94
 8006b3c:	20003ca0 	.word	0x20003ca0
 8006b40:	20003c9c 	.word	0x20003c9c
 8006b44:	20003ca4 	.word	0x20003ca4
 8006b48:	20003d40 	.word	0x20003d40
 8006b4c:	20003d44 	.word	0x20003d44
 8006b50:	20003d48 	.word	0x20003d48

08006b54 <vTaskStartScheduler>:
{
 8006b54:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8006b56:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <vTaskStartScheduler+0x68>)
{
 8006b58:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8006b5a:	2400      	movs	r4, #0
 8006b5c:	2280      	movs	r2, #128	; 0x80
 8006b5e:	9301      	str	r3, [sp, #4]
 8006b60:	4917      	ldr	r1, [pc, #92]	; (8006bc0 <vTaskStartScheduler+0x6c>)
 8006b62:	4623      	mov	r3, r4
 8006b64:	9400      	str	r4, [sp, #0]
 8006b66:	4817      	ldr	r0, [pc, #92]	; (8006bc4 <vTaskStartScheduler+0x70>)
 8006b68:	f7ff fec4 	bl	80068f4 <xTaskCreate>
	if( xReturn == pdPASS )
 8006b6c:	2801      	cmp	r0, #1
 8006b6e:	d00e      	beq.n	8006b8e <vTaskStartScheduler+0x3a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b70:	3001      	adds	r0, #1
 8006b72:	d001      	beq.n	8006b78 <vTaskStartScheduler+0x24>
}
 8006b74:	b003      	add	sp, #12
 8006b76:	bd30      	pop	{r4, r5, pc}
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	b672      	cpsid	i
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	b662      	cpsie	i
 8006b8c:	e7fe      	b.n	8006b8c <vTaskStartScheduler+0x38>
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	b672      	cpsid	i
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ba2:	4909      	ldr	r1, [pc, #36]	; (8006bc8 <vTaskStartScheduler+0x74>)
 8006ba4:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8006ba8:	4a08      	ldr	r2, [pc, #32]	; (8006bcc <vTaskStartScheduler+0x78>)
		xTickCount = ( TickType_t ) 0U;
 8006baa:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <vTaskStartScheduler+0x7c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bac:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8006bae:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8006bb0:	601c      	str	r4, [r3, #0]
}
 8006bb2:	b003      	add	sp, #12
 8006bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006bb8:	f7ff b98a 	b.w	8005ed0 <xPortStartScheduler>
 8006bbc:	20003d70 	.word	0x20003d70
 8006bc0:	080081f0 	.word	0x080081f0
 8006bc4:	08006eb5 	.word	0x08006eb5
 8006bc8:	20003d74 	.word	0x20003d74
 8006bcc:	20003d90 	.word	0x20003d90
 8006bd0:	20003dbc 	.word	0x20003dbc

08006bd4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006bd4:	4a02      	ldr	r2, [pc, #8]	; (8006be0 <vTaskSuspendAll+0xc>)
 8006bd6:	6813      	ldr	r3, [r2, #0]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	20003d3c 	.word	0x20003d3c

08006be4 <xTaskIncrementTick>:
{
 8006be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006be8:	4b4b      	ldr	r3, [pc, #300]	; (8006d18 <xTaskIncrementTick+0x134>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d153      	bne.n	8006c98 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8006bf0:	4b4a      	ldr	r3, [pc, #296]	; (8006d1c <xTaskIncrementTick+0x138>)
 8006bf2:	681e      	ldr	r6, [r3, #0]
 8006bf4:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006bf6:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8006bf8:	2e00      	cmp	r6, #0
 8006bfa:	d05a      	beq.n	8006cb2 <xTaskIncrementTick+0xce>
 8006bfc:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8006d3c <xTaskIncrementTick+0x158>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c00:	f8db 2000 	ldr.w	r2, [fp]
 8006c04:	2400      	movs	r4, #0
 8006c06:	4296      	cmp	r6, r2
 8006c08:	d362      	bcc.n	8006cd0 <xTaskIncrementTick+0xec>
 8006c0a:	4d45      	ldr	r5, [pc, #276]	; (8006d20 <xTaskIncrementTick+0x13c>)
 8006c0c:	4f45      	ldr	r7, [pc, #276]	; (8006d24 <xTaskIncrementTick+0x140>)
 8006c0e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8006d40 <xTaskIncrementTick+0x15c>
 8006c12:	e02e      	b.n	8006c72 <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c14:	682a      	ldr	r2, [r5, #0]
 8006c16:	68d2      	ldr	r2, [r2, #12]
 8006c18:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c20:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8006c24:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c26:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8006c28:	d36b      	bcc.n	8006d02 <xTaskIncrementTick+0x11e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c2a:	f7ff f83b 	bl	8005ca4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c2e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c32:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c36:	b109      	cbz	r1, 8006c3c <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c38:	f7ff f834 	bl	8005ca4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c3c:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8006c40:	2201      	movs	r2, #1
 8006c42:	4b39      	ldr	r3, [pc, #228]	; (8006d28 <xTaskIncrementTick+0x144>)
 8006c44:	4651      	mov	r1, sl
 8006c46:	fa02 fe00 	lsl.w	lr, r2, r0
 8006c4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006c54:	ea4e 0e03 	orr.w	lr, lr, r3
 8006c58:	4b33      	ldr	r3, [pc, #204]	; (8006d28 <xTaskIncrementTick+0x144>)
 8006c5a:	f8c3 e000 	str.w	lr, [r3]
 8006c5e:	f7fe fff7 	bl	8005c50 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c62:	f8d8 0000 	ldr.w	r0, [r8]
 8006c66:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8006c6a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006c6c:	4291      	cmp	r1, r2
 8006c6e:	bf28      	it	cs
 8006c70:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c72:	682a      	ldr	r2, [r5, #0]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	2a00      	cmp	r2, #0
 8006c78:	d1cc      	bne.n	8006c14 <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7e:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c82:	f8d8 3000 	ldr.w	r3, [r8]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c8c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	bf28      	it	cs
 8006c94:	2401      	movcs	r4, #1
 8006c96:	e004      	b.n	8006ca2 <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 8006c98:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 8006c9a:	2400      	movs	r4, #0
		++uxPendedTicks;
 8006c9c:	6813      	ldr	r3, [r2, #0]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8006ca2:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <xTaskIncrementTick+0x14c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bf18      	it	ne
 8006caa:	2401      	movne	r4, #1
}
 8006cac:	4620      	mov	r0, r4
 8006cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006cb2:	4d1b      	ldr	r5, [pc, #108]	; (8006d20 <xTaskIncrementTick+0x13c>)
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	b173      	cbz	r3, 8006cd8 <xTaskIncrementTick+0xf4>
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	b672      	cpsid	i
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	b662      	cpsie	i
 8006cce:	e7fe      	b.n	8006cce <xTaskIncrementTick+0xea>
 8006cd0:	4f14      	ldr	r7, [pc, #80]	; (8006d24 <xTaskIncrementTick+0x140>)
 8006cd2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006d40 <xTaskIncrementTick+0x15c>
 8006cd6:	e7d4      	b.n	8006c82 <xTaskIncrementTick+0x9e>
 8006cd8:	4b16      	ldr	r3, [pc, #88]	; (8006d34 <xTaskIncrementTick+0x150>)
 8006cda:	6829      	ldr	r1, [r5, #0]
 8006cdc:	4a16      	ldr	r2, [pc, #88]	; (8006d38 <xTaskIncrementTick+0x154>)
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	6028      	str	r0, [r5, #0]
 8006ce2:	6019      	str	r1, [r3, #0]
 8006ce4:	6813      	ldr	r3, [r2, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	b15b      	cbz	r3, 8006d08 <xTaskIncrementTick+0x124>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006cf0:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cf2:	f8df b048 	ldr.w	fp, [pc, #72]	; 8006d3c <xTaskIncrementTick+0x158>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006cf6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cf8:	68d2      	ldr	r2, [r2, #12]
 8006cfa:	6852      	ldr	r2, [r2, #4]
 8006cfc:	f8cb 2000 	str.w	r2, [fp]
 8006d00:	e77e      	b.n	8006c00 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 8006d02:	f8cb 1000 	str.w	r1, [fp]
						break;
 8006d06:	e7bc      	b.n	8006c82 <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d08:	f8df b030 	ldr.w	fp, [pc, #48]	; 8006d3c <xTaskIncrementTick+0x158>
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	f8cb 2000 	str.w	r2, [fp]
 8006d14:	e774      	b.n	8006c00 <xTaskIncrementTick+0x1c>
 8006d16:	bf00      	nop
 8006d18:	20003d3c 	.word	0x20003d3c
 8006d1c:	20003dbc 	.word	0x20003dbc
 8006d20:	20003c9c 	.word	0x20003c9c
 8006d24:	20003ca4 	.word	0x20003ca4
 8006d28:	20003d44 	.word	0x20003d44
 8006d2c:	20003d38 	.word	0x20003d38
 8006d30:	20003dc0 	.word	0x20003dc0
 8006d34:	20003ca0 	.word	0x20003ca0
 8006d38:	20003d78 	.word	0x20003d78
 8006d3c:	20003d74 	.word	0x20003d74
 8006d40:	20003c98 	.word	0x20003c98

08006d44 <xTaskResumeAll>:
{
 8006d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8006d48:	4c3b      	ldr	r4, [pc, #236]	; (8006e38 <xTaskResumeAll+0xf4>)
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	b953      	cbnz	r3, 8006d64 <xTaskResumeAll+0x20>
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	b672      	cpsid	i
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	b662      	cpsie	i
 8006d62:	e7fe      	b.n	8006d62 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8006d64:	f7ff f816 	bl	8005d94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d6e:	6824      	ldr	r4, [r4, #0]
 8006d70:	2c00      	cmp	r4, #0
 8006d72:	d153      	bne.n	8006e1c <xTaskResumeAll+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d74:	4b31      	ldr	r3, [pc, #196]	; (8006e3c <xTaskResumeAll+0xf8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d04f      	beq.n	8006e1c <xTaskResumeAll+0xd8>
 8006d7c:	4d30      	ldr	r5, [pc, #192]	; (8006e40 <xTaskResumeAll+0xfc>)
 8006d7e:	4f31      	ldr	r7, [pc, #196]	; (8006e44 <xTaskResumeAll+0x100>)
					prvAddTaskToReadyList( pxTCB );
 8006d80:	4e31      	ldr	r6, [pc, #196]	; (8006e48 <xTaskResumeAll+0x104>)
 8006d82:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8006e5c <xTaskResumeAll+0x118>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d86:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8006e60 <xTaskResumeAll+0x11c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d8a:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 8006d8c:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d90:	b323      	cbz	r3, 8006ddc <xTaskResumeAll+0x98>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d96:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d9a:	f104 0018 	add.w	r0, r4, #24
 8006d9e:	f7fe ff81 	bl	8005ca4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006da2:	4650      	mov	r0, sl
 8006da4:	f7fe ff7e 	bl	8005ca4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006da8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006daa:	6832      	ldr	r2, [r6, #0]
 8006dac:	4651      	mov	r1, sl
 8006dae:	fa08 f300 	lsl.w	r3, r8, r0
 8006db2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006db6:	4313      	orrs	r3, r2
 8006db8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8006dbc:	6033      	str	r3, [r6, #0]
 8006dbe:	f7fe ff47 	bl	8005c50 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dc2:	f8db 3000 	ldr.w	r3, [fp]
 8006dc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d3dd      	bcc.n	8006d8a <xTaskResumeAll+0x46>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dce:	683b      	ldr	r3, [r7, #0]
						xYieldPending = pdTRUE;
 8006dd0:	f8c5 8000 	str.w	r8, [r5]
					prvAddTaskToReadyList( pxTCB );
 8006dd4:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1da      	bne.n	8006d92 <xTaskResumeAll+0x4e>
				if( pxTCB != NULL )
 8006ddc:	b13c      	cbz	r4, 8006dee <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dde:	4b1b      	ldr	r3, [pc, #108]	; (8006e4c <xTaskResumeAll+0x108>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	bb02      	cbnz	r2, 8006e28 <xTaskResumeAll+0xe4>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006de6:	4b1a      	ldr	r3, [pc, #104]	; (8006e50 <xTaskResumeAll+0x10c>)
 8006de8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dec:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dee:	4e19      	ldr	r6, [pc, #100]	; (8006e54 <xTaskResumeAll+0x110>)
 8006df0:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006df2:	b13c      	cbz	r4, 8006e04 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 8006df4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006df6:	f7ff fef5 	bl	8006be4 <xTaskIncrementTick>
 8006dfa:	b100      	cbz	r0, 8006dfe <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8006dfc:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006dfe:	3c01      	subs	r4, #1
 8006e00:	d1f9      	bne.n	8006df6 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8006e02:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	b14b      	cbz	r3, 8006e1c <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 8006e08:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <xTaskResumeAll+0x114>)
 8006e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006e18:	2401      	movs	r4, #1
 8006e1a:	e000      	b.n	8006e1e <xTaskResumeAll+0xda>
BaseType_t xAlreadyYielded = pdFALSE;
 8006e1c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006e1e:	f7fe ffdf 	bl	8005de0 <vPortExitCritical>
}
 8006e22:	4620      	mov	r0, r4
 8006e24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e28:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <xTaskResumeAll+0x10c>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e2c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e2e:	68d2      	ldr	r2, [r2, #12]
 8006e30:	6852      	ldr	r2, [r2, #4]
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e7db      	b.n	8006dee <xTaskResumeAll+0xaa>
 8006e36:	bf00      	nop
 8006e38:	20003d3c 	.word	0x20003d3c
 8006e3c:	20003d30 	.word	0x20003d30
 8006e40:	20003dc0 	.word	0x20003dc0
 8006e44:	20003d7c 	.word	0x20003d7c
 8006e48:	20003d44 	.word	0x20003d44
 8006e4c:	20003c9c 	.word	0x20003c9c
 8006e50:	20003d74 	.word	0x20003d74
 8006e54:	20003d38 	.word	0x20003d38
 8006e58:	e000ed04 	.word	0xe000ed04
 8006e5c:	20003ca4 	.word	0x20003ca4
 8006e60:	20003c98 	.word	0x20003c98

08006e64 <vTaskDelay>:
	{
 8006e64:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e66:	b168      	cbz	r0, 8006e84 <vTaskDelay+0x20>
			configASSERT( uxSchedulerSuspended == 0 );
 8006e68:	4b10      	ldr	r3, [pc, #64]	; (8006eac <vTaskDelay+0x48>)
 8006e6a:	6819      	ldr	r1, [r3, #0]
 8006e6c:	b199      	cbz	r1, 8006e96 <vTaskDelay+0x32>
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	b672      	cpsid	i
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	b662      	cpsie	i
 8006e82:	e7fe      	b.n	8006e82 <vTaskDelay+0x1e>
			portYIELD_WITHIN_API();
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <vTaskDelay+0x4c>)
 8006e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	3201      	adds	r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e9c:	f7ff fce4 	bl	8006868 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006ea0:	f7ff ff50 	bl	8006d44 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d0ed      	beq.n	8006e84 <vTaskDelay+0x20>
 8006ea8:	bd08      	pop	{r3, pc}
 8006eaa:	bf00      	nop
 8006eac:	20003d3c 	.word	0x20003d3c
 8006eb0:	e000ed04 	.word	0xe000ed04

08006eb4 <prvIdleTask>:
{
 8006eb4:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8006eb8:	4c1c      	ldr	r4, [pc, #112]	; (8006f2c <prvIdleTask+0x78>)
				taskYIELD();
 8006eba:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8006ebe:	4e1c      	ldr	r6, [pc, #112]	; (8006f30 <prvIdleTask+0x7c>)
 8006ec0:	4d1c      	ldr	r5, [pc, #112]	; (8006f34 <prvIdleTask+0x80>)
 8006ec2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8006f3c <prvIdleTask+0x88>
 8006ec6:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006f40 <prvIdleTask+0x8c>
 8006eca:	e006      	b.n	8006eda <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 8006ecc:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006ece:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 8006ed4:	f7ff ff36 	bl	8006d44 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8006ed8:	b96f      	cbnz	r7, 8006ef6 <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eda:	682b      	ldr	r3, [r5, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f5      	bne.n	8006ecc <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d9f8      	bls.n	8006eda <prvIdleTask+0x26>
				taskYIELD();
 8006ee8:	f8c9 a000 	str.w	sl, [r9]
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	e7f1      	b.n	8006eda <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 8006ef6:	f7fe ff4d 	bl	8005d94 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006efa:	68f3      	ldr	r3, [r6, #12]
 8006efc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f00:	f10b 0004 	add.w	r0, fp, #4
 8006f04:	f7fe fece 	bl	8005ca4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006f08:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <prvIdleTask+0x84>)
 8006f0a:	4a0b      	ldr	r2, [pc, #44]	; (8006f38 <prvIdleTask+0x84>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006f12:	682b      	ldr	r3, [r5, #0]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 8006f18:	f7fe ff62 	bl	8005de0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8006f1c:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 8006f20:	f7fe fe4a 	bl	8005bb8 <vPortFree>
			vPortFree( pxTCB );
 8006f24:	4658      	mov	r0, fp
 8006f26:	f7fe fe47 	bl	8005bb8 <vPortFree>
 8006f2a:	e7d6      	b.n	8006eda <prvIdleTask+0x26>
 8006f2c:	20003d3c 	.word	0x20003d3c
 8006f30:	20003da8 	.word	0x20003da8
 8006f34:	20003d34 	.word	0x20003d34
 8006f38:	20003d30 	.word	0x20003d30
 8006f3c:	20003ca4 	.word	0x20003ca4
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f44:	4b19      	ldr	r3, [pc, #100]	; (8006fac <vTaskSwitchContext+0x68>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	bb2b      	cbnz	r3, 8006f96 <vTaskSwitchContext+0x52>
		xYieldPending = pdFALSE;
 8006f4a:	4919      	ldr	r1, [pc, #100]	; (8006fb0 <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f4c:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 8006f4e:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f50:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006f52:	fab3 f383 	clz	r3, r3
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	4a17      	ldr	r2, [pc, #92]	; (8006fb8 <vTaskSwitchContext+0x74>)
 8006f5a:	f1c3 031f 	rsb	r3, r3, #31
 8006f5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	58d0      	ldr	r0, [r2, r3]
 8006f66:	18d1      	adds	r1, r2, r3
 8006f68:	b950      	cbnz	r0, 8006f80 <vTaskSwitchContext+0x3c>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	b672      	cpsid	i
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	b662      	cpsie	i
 8006f7e:	e7fe      	b.n	8006f7e <vTaskSwitchContext+0x3a>
 8006f80:	3308      	adds	r3, #8
 8006f82:	6848      	ldr	r0, [r1, #4]
 8006f84:	441a      	add	r2, r3
 8006f86:	6843      	ldr	r3, [r0, #4]
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	604b      	str	r3, [r1, #4]
 8006f8c:	d007      	beq.n	8006f9e <vTaskSwitchContext+0x5a>
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <vTaskSwitchContext+0x78>)
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8006f96:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <vTaskSwitchContext+0x6c>)
 8006f98:	2201      	movs	r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	604b      	str	r3, [r1, #4]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <vTaskSwitchContext+0x78>)
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20003d3c 	.word	0x20003d3c
 8006fb0:	20003dc0 	.word	0x20003dc0
 8006fb4:	20003d44 	.word	0x20003d44
 8006fb8:	20003ca4 	.word	0x20003ca4
 8006fbc:	20003c98 	.word	0x20003c98

08006fc0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006fc0:	b348      	cbz	r0, 8007016 <vTaskPlaceOnEventList+0x56>
{
 8006fc2:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fc4:	4d21      	ldr	r5, [pc, #132]	; (800704c <vTaskPlaceOnEventList+0x8c>)
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	6829      	ldr	r1, [r5, #0]
 8006fca:	3118      	adds	r1, #24
 8006fcc:	f7fe fe50 	bl	8005c70 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8006fd0:	4b1f      	ldr	r3, [pc, #124]	; (8007050 <vTaskPlaceOnEventList+0x90>)
 8006fd2:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fd4:	6828      	ldr	r0, [r5, #0]
 8006fd6:	3004      	adds	r0, #4
 8006fd8:	f7fe fe64 	bl	8005ca4 <uxListRemove>
 8006fdc:	b940      	cbnz	r0, 8006ff0 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006fde:	682b      	ldr	r3, [r5, #0]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	491c      	ldr	r1, [pc, #112]	; (8007054 <vTaskPlaceOnEventList+0x94>)
 8006fe4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006fe6:	680b      	ldr	r3, [r1, #0]
 8006fe8:	4082      	lsls	r2, r0
 8006fea:	ea23 0302 	bic.w	r3, r3, r2
 8006fee:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ff0:	1c63      	adds	r3, r4, #1
 8006ff2:	d01b      	beq.n	800702c <vTaskPlaceOnEventList+0x6c>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ff4:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ff6:	682b      	ldr	r3, [r5, #0]
			if( xTimeToWake < xConstTickCount )
 8006ff8:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ffa:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ffc:	d81d      	bhi.n	800703a <vTaskPlaceOnEventList+0x7a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ffe:	4b16      	ldr	r3, [pc, #88]	; (8007058 <vTaskPlaceOnEventList+0x98>)
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	6829      	ldr	r1, [r5, #0]
 8007004:	3104      	adds	r1, #4
 8007006:	f7fe fe33 	bl	8005c70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800700a:	4b14      	ldr	r3, [pc, #80]	; (800705c <vTaskPlaceOnEventList+0x9c>)
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	4294      	cmp	r4, r2
 8007010:	d200      	bcs.n	8007014 <vTaskPlaceOnEventList+0x54>
					xNextTaskUnblockTime = xTimeToWake;
 8007012:	601c      	str	r4, [r3, #0]
 8007014:	bd70      	pop	{r4, r5, r6, pc}
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	b672      	cpsid	i
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	b662      	cpsie	i
 800702a:	e7fe      	b.n	800702a <vTaskPlaceOnEventList+0x6a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800702c:	6829      	ldr	r1, [r5, #0]
 800702e:	480c      	ldr	r0, [pc, #48]	; (8007060 <vTaskPlaceOnEventList+0xa0>)
 8007030:	3104      	adds	r1, #4
}
 8007032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007036:	f7fe be0b 	b.w	8005c50 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800703a:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <vTaskPlaceOnEventList+0xa4>)
 800703c:	6818      	ldr	r0, [r3, #0]
 800703e:	6829      	ldr	r1, [r5, #0]
}
 8007040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007044:	3104      	adds	r1, #4
 8007046:	f7fe be13 	b.w	8005c70 <vListInsert>
 800704a:	bf00      	nop
 800704c:	20003c98 	.word	0x20003c98
 8007050:	20003dbc 	.word	0x20003dbc
 8007054:	20003d44 	.word	0x20003d44
 8007058:	20003c9c 	.word	0x20003c9c
 800705c:	20003d74 	.word	0x20003d74
 8007060:	20003d94 	.word	0x20003d94
 8007064:	20003ca0 	.word	0x20003ca0

08007068 <xTaskRemoveFromEventList>:
{
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800706a:	68c3      	ldr	r3, [r0, #12]
 800706c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800706e:	b324      	cbz	r4, 80070ba <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007070:	f104 0518 	add.w	r5, r4, #24
 8007074:	4628      	mov	r0, r5
 8007076:	f7fe fe15 	bl	8005ca4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800707a:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <xTaskRemoveFromEventList+0x78>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	bb4b      	cbnz	r3, 80070d4 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007080:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007082:	4d18      	ldr	r5, [pc, #96]	; (80070e4 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007084:	4630      	mov	r0, r6
 8007086:	f7fe fe0d 	bl	8005ca4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800708a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800708c:	2301      	movs	r3, #1
 800708e:	4816      	ldr	r0, [pc, #88]	; (80070e8 <xTaskRemoveFromEventList+0x80>)
 8007090:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8007094:	4631      	mov	r1, r6
 8007096:	4093      	lsls	r3, r2
 8007098:	682a      	ldr	r2, [r5, #0]
 800709a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800709e:	4313      	orrs	r3, r2
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	f7fe fdd5 	bl	8005c50 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070a6:	4b11      	ldr	r3, [pc, #68]	; (80070ec <xTaskRemoveFromEventList+0x84>)
 80070a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d90e      	bls.n	80070d0 <xTaskRemoveFromEventList+0x68>
		xYieldPending = pdTRUE;
 80070b2:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <xTaskRemoveFromEventList+0x88>)
 80070b4:	2001      	movs	r0, #1
 80070b6:	6018      	str	r0, [r3, #0]
 80070b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	b672      	cpsid	i
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	b662      	cpsie	i
 80070ce:	e7fe      	b.n	80070ce <xTaskRemoveFromEventList+0x66>
		xReturn = pdFALSE;
 80070d0:	2000      	movs	r0, #0
}
 80070d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070d4:	4629      	mov	r1, r5
 80070d6:	4807      	ldr	r0, [pc, #28]	; (80070f4 <xTaskRemoveFromEventList+0x8c>)
 80070d8:	f7fe fdba 	bl	8005c50 <vListInsertEnd>
 80070dc:	e7e3      	b.n	80070a6 <xTaskRemoveFromEventList+0x3e>
 80070de:	bf00      	nop
 80070e0:	20003d3c 	.word	0x20003d3c
 80070e4:	20003d44 	.word	0x20003d44
 80070e8:	20003ca4 	.word	0x20003ca4
 80070ec:	20003c98 	.word	0x20003c98
 80070f0:	20003dc0 	.word	0x20003dc0
 80070f4:	20003d7c 	.word	0x20003d7c

080070f8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 80070f8:	b130      	cbz	r0, 8007108 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070fa:	4a09      	ldr	r2, [pc, #36]	; (8007120 <vTaskSetTimeOutState+0x28>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070fc:	4b09      	ldr	r3, [pc, #36]	; (8007124 <vTaskSetTimeOutState+0x2c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070fe:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	e880 000c 	stmia.w	r0, {r2, r3}
 8007106:	4770      	bx	lr
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	b672      	cpsid	i
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	b662      	cpsie	i
 800711c:	e7fe      	b.n	800711c <vTaskSetTimeOutState+0x24>
 800711e:	bf00      	nop
 8007120:	20003d78 	.word	0x20003d78
 8007124:	20003dbc 	.word	0x20003dbc

08007128 <xTaskCheckForTimeOut>:
{
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800712a:	2800      	cmp	r0, #0
 800712c:	d030      	beq.n	8007190 <xTaskCheckForTimeOut+0x68>
	configASSERT( pxTicksToWait );
 800712e:	b321      	cbz	r1, 800717a <xTaskCheckForTimeOut+0x52>
 8007130:	460d      	mov	r5, r1
 8007132:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007134:	f7fe fe2e 	bl	8005d94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007138:	481d      	ldr	r0, [pc, #116]	; (80071b0 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 800713a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800713c:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	d031      	beq.n	80071a6 <xTaskCheckForTimeOut+0x7e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007142:	4e1c      	ldr	r6, [pc, #112]	; (80071b4 <xTaskCheckForTimeOut+0x8c>)
 8007144:	6827      	ldr	r7, [r4, #0]
 8007146:	6832      	ldr	r2, [r6, #0]
 8007148:	4297      	cmp	r7, r2
 800714a:	6862      	ldr	r2, [r4, #4]
 800714c:	d006      	beq.n	800715c <xTaskCheckForTimeOut+0x34>
 800714e:	4291      	cmp	r1, r2
 8007150:	d304      	bcc.n	800715c <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 8007152:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 8007154:	f7fe fe44 	bl	8005de0 <vPortExitCritical>
}
 8007158:	4630      	mov	r0, r6
 800715a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800715c:	1a8f      	subs	r7, r1, r2
 800715e:	42bb      	cmp	r3, r7
 8007160:	d9f7      	bls.n	8007152 <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007162:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007164:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007166:	6801      	ldr	r1, [r0, #0]
			xReturn = pdFALSE;
 8007168:	2600      	movs	r6, #0
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800716a:	4413      	add	r3, r2
 800716c:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800716e:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007170:	6061      	str	r1, [r4, #4]
	taskEXIT_CRITICAL();
 8007172:	f7fe fe35 	bl	8005de0 <vPortExitCritical>
}
 8007176:	4630      	mov	r0, r6
 8007178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	b672      	cpsid	i
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	b662      	cpsie	i
 800718e:	e7fe      	b.n	800718e <xTaskCheckForTimeOut+0x66>
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	b672      	cpsid	i
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	b662      	cpsie	i
 80071a4:	e7fe      	b.n	80071a4 <xTaskCheckForTimeOut+0x7c>
				xReturn = pdFALSE;
 80071a6:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 80071a8:	f7fe fe1a 	bl	8005de0 <vPortExitCritical>
}
 80071ac:	4630      	mov	r0, r6
 80071ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b0:	20003dbc 	.word	0x20003dbc
 80071b4:	20003d78 	.word	0x20003d78

080071b8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80071b8:	4b01      	ldr	r3, [pc, #4]	; (80071c0 <vTaskMissedYield+0x8>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	4770      	bx	lr
 80071c0:	20003dc0 	.word	0x20003dc0

080071c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <xTaskGetSchedulerState+0x18>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	b133      	cbz	r3, 80071d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <xTaskGetSchedulerState+0x1c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80071d0:	bf0c      	ite	eq
 80071d2:	2002      	moveq	r0, #2
 80071d4:	2000      	movne	r0, #0
 80071d6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071d8:	2001      	movs	r0, #1
	}
 80071da:	4770      	bx	lr
 80071dc:	20003d90 	.word	0x20003d90
 80071e0:	20003d3c 	.word	0x20003d3c

080071e4 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d042      	beq.n	800726e <vTaskPriorityInherit+0x8a>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80071e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	{
 80071ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80071ee:	4c21      	ldr	r4, [pc, #132]	; (8007274 <vTaskPriorityInherit+0x90>)
 80071f0:	6822      	ldr	r2, [r4, #0]
 80071f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d212      	bcs.n	800721e <vTaskPriorityInherit+0x3a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071f8:	6982      	ldr	r2, [r0, #24]
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	db04      	blt.n	8007208 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007202:	f1c2 0207 	rsb	r2, r2, #7
 8007206:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007208:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800720c:	4d1a      	ldr	r5, [pc, #104]	; (8007278 <vTaskPriorityInherit+0x94>)
 800720e:	6942      	ldr	r2, [r0, #20]
 8007210:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007214:	429a      	cmp	r2, r3
 8007216:	d004      	beq.n	8007222 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800721e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007222:	f100 0804 	add.w	r8, r0, #4
 8007226:	4607      	mov	r7, r0
 8007228:	4640      	mov	r0, r8
 800722a:	f7fe fd3b 	bl	8005ca4 <uxListRemove>
 800722e:	b9f8      	cbnz	r0, 8007270 <vTaskPriorityInherit+0x8c>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	4e12      	ldr	r6, [pc, #72]	; (800727c <vTaskPriorityInherit+0x98>)
 8007234:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007238:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800723c:	b932      	cbnz	r2, 800724c <vTaskPriorityInherit+0x68>
 800723e:	2101      	movs	r1, #1
 8007240:	6832      	ldr	r2, [r6, #0]
 8007242:	fa01 f303 	lsl.w	r3, r1, r3
 8007246:	ea22 0303 	bic.w	r3, r2, r3
 800724a:	6033      	str	r3, [r6, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800724c:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 800724e:	2301      	movs	r3, #1
 8007250:	6834      	ldr	r4, [r6, #0]
 8007252:	4641      	mov	r1, r8
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007254:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007256:	4093      	lsls	r3, r2
 8007258:	eb02 0082 	add.w	r0, r2, r2, lsl #2
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800725c:	62fa      	str	r2, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800725e:	4323      	orrs	r3, r4
 8007260:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8007264:	6033      	str	r3, [r6, #0]
	}
 8007266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 800726a:	f7fe bcf1 	b.w	8005c50 <vListInsertEnd>
 800726e:	4770      	bx	lr
 8007270:	4e02      	ldr	r6, [pc, #8]	; (800727c <vTaskPriorityInherit+0x98>)
 8007272:	e7eb      	b.n	800724c <vTaskPriorityInherit+0x68>
 8007274:	20003c98 	.word	0x20003c98
 8007278:	20003ca4 	.word	0x20003ca4
 800727c:	20003d44 	.word	0x20003d44

08007280 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007280:	2800      	cmp	r0, #0
 8007282:	d041      	beq.n	8007308 <xTaskPriorityDisinherit+0x88>
	{
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8007286:	4b2a      	ldr	r3, [pc, #168]	; (8007330 <xTaskPriorityDisinherit+0xb0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4298      	cmp	r0, r3
 800728c:	d00a      	beq.n	80072a4 <xTaskPriorityDisinherit+0x24>
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	b672      	cpsid	i
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	b662      	cpsie	i
 80072a2:	e7fe      	b.n	80072a2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80072a4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80072a6:	b953      	cbnz	r3, 80072be <xTaskPriorityDisinherit+0x3e>
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	b672      	cpsid	i
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	b662      	cpsie	i
 80072bc:	e7fe      	b.n	80072bc <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072be:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80072c0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80072c4:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072c6:	4291      	cmp	r1, r2
 80072c8:	d030      	beq.n	800732c <xTaskPriorityDisinherit+0xac>
 80072ca:	bb7b      	cbnz	r3, 800732c <xTaskPriorityDisinherit+0xac>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072cc:	1d07      	adds	r7, r0, #4
 80072ce:	4604      	mov	r4, r0
 80072d0:	4638      	mov	r0, r7
 80072d2:	f7fe fce7 	bl	8005ca4 <uxListRemove>
 80072d6:	b1c8      	cbz	r0, 800730c <xTaskPriorityDisinherit+0x8c>
 80072d8:	4816      	ldr	r0, [pc, #88]	; (8007334 <xTaskPriorityDisinherit+0xb4>)
 80072da:	4a17      	ldr	r2, [pc, #92]	; (8007338 <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 80072de:	2501      	movs	r5, #1
 80072e0:	f8d2 e000 	ldr.w	lr, [r2]
 80072e4:	4639      	mov	r1, r7
 80072e6:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ea:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072ee:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80072f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80072f4:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f8:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80072fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80072fe:	6016      	str	r6, [r2, #0]
 8007300:	f7fe fca6 	bl	8005c50 <vListInsertEnd>
					xReturn = pdTRUE;
 8007304:	4628      	mov	r0, r5
	}
 8007306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 8007308:	2000      	movs	r0, #0
	}
 800730a:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800730c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800730e:	4809      	ldr	r0, [pc, #36]	; (8007334 <xTaskPriorityDisinherit+0xb4>)
 8007310:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8007314:	4a08      	ldr	r2, [pc, #32]	; (8007338 <xTaskPriorityDisinherit+0xb8>)
 8007316:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1de      	bne.n	80072dc <xTaskPriorityDisinherit+0x5c>
 800731e:	2501      	movs	r5, #1
 8007320:	6813      	ldr	r3, [r2, #0]
 8007322:	40b5      	lsls	r5, r6
 8007324:	ea23 0305 	bic.w	r3, r3, r5
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	e7d7      	b.n	80072dc <xTaskPriorityDisinherit+0x5c>
	BaseType_t xReturn = pdFALSE;
 800732c:	2000      	movs	r0, #0
 800732e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007330:	20003c98 	.word	0x20003c98
 8007334:	20003ca4 	.word	0x20003ca4
 8007338:	20003d44 	.word	0x20003d44

0800733c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800733c:	4b04      	ldr	r3, [pc, #16]	; (8007350 <pvTaskIncrementMutexHeldCount+0x14>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	b11a      	cbz	r2, 800734a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007342:	6819      	ldr	r1, [r3, #0]
 8007344:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8007346:	3201      	adds	r2, #1
 8007348:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800734a:	6818      	ldr	r0, [r3, #0]
	}
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20003c98 	.word	0x20003c98
 8007354:	00000000 	.word	0x00000000

08007358 <cos>:
 8007358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800735a:	eeb0 7b40 	vmov.f64	d7, d0
 800735e:	ee17 3a90 	vmov	r3, s15
 8007362:	4a19      	ldr	r2, [pc, #100]	; (80073c8 <cos+0x70>)
 8007364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007368:	4293      	cmp	r3, r2
 800736a:	dc04      	bgt.n	8007376 <cos+0x1e>
 800736c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80073c0 <cos+0x68>
 8007370:	f000 f9aa 	bl	80076c8 <__kernel_cos>
 8007374:	e004      	b.n	8007380 <cos+0x28>
 8007376:	4a15      	ldr	r2, [pc, #84]	; (80073cc <cos+0x74>)
 8007378:	4293      	cmp	r3, r2
 800737a:	dd04      	ble.n	8007386 <cos+0x2e>
 800737c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8007380:	b005      	add	sp, #20
 8007382:	f85d fb04 	ldr.w	pc, [sp], #4
 8007386:	4668      	mov	r0, sp
 8007388:	f000 f85e 	bl	8007448 <__ieee754_rem_pio2>
 800738c:	f000 0003 	and.w	r0, r0, #3
 8007390:	2801      	cmp	r0, #1
 8007392:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007396:	ed9d 0b00 	vldr	d0, [sp]
 800739a:	d007      	beq.n	80073ac <cos+0x54>
 800739c:	2802      	cmp	r0, #2
 800739e:	d00a      	beq.n	80073b6 <cos+0x5e>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d0e5      	beq.n	8007370 <cos+0x18>
 80073a4:	2001      	movs	r0, #1
 80073a6:	f000 fc6f 	bl	8007c88 <__kernel_sin>
 80073aa:	e7e9      	b.n	8007380 <cos+0x28>
 80073ac:	f000 fc6c 	bl	8007c88 <__kernel_sin>
 80073b0:	eeb1 0b40 	vneg.f64	d0, d0
 80073b4:	e7e4      	b.n	8007380 <cos+0x28>
 80073b6:	f000 f987 	bl	80076c8 <__kernel_cos>
 80073ba:	e7f9      	b.n	80073b0 <cos+0x58>
 80073bc:	f3af 8000 	nop.w
	...
 80073c8:	3fe921fb 	.word	0x3fe921fb
 80073cc:	7fefffff 	.word	0x7fefffff

080073d0 <sin>:
 80073d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073d2:	eeb0 7b40 	vmov.f64	d7, d0
 80073d6:	ee17 3a90 	vmov	r3, s15
 80073da:	4a19      	ldr	r2, [pc, #100]	; (8007440 <sin+0x70>)
 80073dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073e0:	4293      	cmp	r3, r2
 80073e2:	dc05      	bgt.n	80073f0 <sin+0x20>
 80073e4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8007438 <sin+0x68>
 80073e8:	2000      	movs	r0, #0
 80073ea:	f000 fc4d 	bl	8007c88 <__kernel_sin>
 80073ee:	e004      	b.n	80073fa <sin+0x2a>
 80073f0:	4a14      	ldr	r2, [pc, #80]	; (8007444 <sin+0x74>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	dd04      	ble.n	8007400 <sin+0x30>
 80073f6:	ee30 0b40 	vsub.f64	d0, d0, d0
 80073fa:	b005      	add	sp, #20
 80073fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007400:	4668      	mov	r0, sp
 8007402:	f000 f821 	bl	8007448 <__ieee754_rem_pio2>
 8007406:	f000 0003 	and.w	r0, r0, #3
 800740a:	2801      	cmp	r0, #1
 800740c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007410:	ed9d 0b00 	vldr	d0, [sp]
 8007414:	d004      	beq.n	8007420 <sin+0x50>
 8007416:	2802      	cmp	r0, #2
 8007418:	d005      	beq.n	8007426 <sin+0x56>
 800741a:	b950      	cbnz	r0, 8007432 <sin+0x62>
 800741c:	2001      	movs	r0, #1
 800741e:	e7e4      	b.n	80073ea <sin+0x1a>
 8007420:	f000 f952 	bl	80076c8 <__kernel_cos>
 8007424:	e7e9      	b.n	80073fa <sin+0x2a>
 8007426:	2001      	movs	r0, #1
 8007428:	f000 fc2e 	bl	8007c88 <__kernel_sin>
 800742c:	eeb1 0b40 	vneg.f64	d0, d0
 8007430:	e7e3      	b.n	80073fa <sin+0x2a>
 8007432:	f000 f949 	bl	80076c8 <__kernel_cos>
 8007436:	e7f9      	b.n	800742c <sin+0x5c>
	...
 8007440:	3fe921fb 	.word	0x3fe921fb
 8007444:	7fefffff 	.word	0x7fefffff

08007448 <__ieee754_rem_pio2>:
 8007448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744a:	eeb0 7b40 	vmov.f64	d7, d0
 800744e:	ee17 5a90 	vmov	r5, s15
 8007452:	4b97      	ldr	r3, [pc, #604]	; (80076b0 <__ieee754_rem_pio2+0x268>)
 8007454:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007458:	429e      	cmp	r6, r3
 800745a:	b089      	sub	sp, #36	; 0x24
 800745c:	4604      	mov	r4, r0
 800745e:	dc07      	bgt.n	8007470 <__ieee754_rem_pio2+0x28>
 8007460:	2200      	movs	r2, #0
 8007462:	2300      	movs	r3, #0
 8007464:	ed84 0b00 	vstr	d0, [r4]
 8007468:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800746c:	2000      	movs	r0, #0
 800746e:	e01b      	b.n	80074a8 <__ieee754_rem_pio2+0x60>
 8007470:	4b90      	ldr	r3, [pc, #576]	; (80076b4 <__ieee754_rem_pio2+0x26c>)
 8007472:	429e      	cmp	r6, r3
 8007474:	dc3b      	bgt.n	80074ee <__ieee754_rem_pio2+0xa6>
 8007476:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800747a:	2d00      	cmp	r5, #0
 800747c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8007670 <__ieee754_rem_pio2+0x228>
 8007480:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8007484:	dd19      	ble.n	80074ba <__ieee754_rem_pio2+0x72>
 8007486:	ee30 7b46 	vsub.f64	d7, d0, d6
 800748a:	429e      	cmp	r6, r3
 800748c:	d00e      	beq.n	80074ac <__ieee754_rem_pio2+0x64>
 800748e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8007678 <__ieee754_rem_pio2+0x230>
 8007492:	ee37 5b46 	vsub.f64	d5, d7, d6
 8007496:	ee37 7b45 	vsub.f64	d7, d7, d5
 800749a:	ed84 5b00 	vstr	d5, [r4]
 800749e:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074a2:	ed84 7b02 	vstr	d7, [r4, #8]
 80074a6:	2001      	movs	r0, #1
 80074a8:	b009      	add	sp, #36	; 0x24
 80074aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ac:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8007680 <__ieee754_rem_pio2+0x238>
 80074b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074b4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8007688 <__ieee754_rem_pio2+0x240>
 80074b8:	e7eb      	b.n	8007492 <__ieee754_rem_pio2+0x4a>
 80074ba:	429e      	cmp	r6, r3
 80074bc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80074c0:	d00e      	beq.n	80074e0 <__ieee754_rem_pio2+0x98>
 80074c2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8007678 <__ieee754_rem_pio2+0x230>
 80074c6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80074ca:	ee37 7b45 	vsub.f64	d7, d7, d5
 80074ce:	ed84 5b00 	vstr	d5, [r4]
 80074d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295
 80074da:	ed84 7b02 	vstr	d7, [r4, #8]
 80074de:	e7e3      	b.n	80074a8 <__ieee754_rem_pio2+0x60>
 80074e0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8007680 <__ieee754_rem_pio2+0x238>
 80074e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80074e8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8007688 <__ieee754_rem_pio2+0x240>
 80074ec:	e7eb      	b.n	80074c6 <__ieee754_rem_pio2+0x7e>
 80074ee:	4b72      	ldr	r3, [pc, #456]	; (80076b8 <__ieee754_rem_pio2+0x270>)
 80074f0:	429e      	cmp	r6, r3
 80074f2:	dc6e      	bgt.n	80075d2 <__ieee754_rem_pio2+0x18a>
 80074f4:	f000 fc20 	bl	8007d38 <fabs>
 80074f8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80074fc:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8007690 <__ieee754_rem_pio2+0x248>
 8007500:	eea0 7b06 	vfma.f64	d7, d0, d6
 8007504:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007508:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800750c:	ee17 0a90 	vmov	r0, s15
 8007510:	eeb1 5b44 	vneg.f64	d5, d4
 8007514:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8007670 <__ieee754_rem_pio2+0x228>
 8007518:	eea5 0b07 	vfma.f64	d0, d5, d7
 800751c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8007678 <__ieee754_rem_pio2+0x230>
 8007520:	281f      	cmp	r0, #31
 8007522:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007526:	ee30 6b47 	vsub.f64	d6, d0, d7
 800752a:	dc1b      	bgt.n	8007564 <__ieee754_rem_pio2+0x11c>
 800752c:	1e42      	subs	r2, r0, #1
 800752e:	4b63      	ldr	r3, [pc, #396]	; (80076bc <__ieee754_rem_pio2+0x274>)
 8007530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007534:	429e      	cmp	r6, r3
 8007536:	d015      	beq.n	8007564 <__ieee754_rem_pio2+0x11c>
 8007538:	ed84 6b00 	vstr	d6, [r4]
 800753c:	ed94 6b00 	vldr	d6, [r4]
 8007540:	2d00      	cmp	r5, #0
 8007542:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007546:	ee30 7b47 	vsub.f64	d7, d0, d7
 800754a:	ed84 7b02 	vstr	d7, [r4, #8]
 800754e:	daab      	bge.n	80074a8 <__ieee754_rem_pio2+0x60>
 8007550:	eeb1 6b46 	vneg.f64	d6, d6
 8007554:	ed84 6b00 	vstr	d6, [r4]
 8007558:	eeb1 7b47 	vneg.f64	d7, d7
 800755c:	4240      	negs	r0, r0
 800755e:	ed84 7b02 	vstr	d7, [r4, #8]
 8007562:	e7a1      	b.n	80074a8 <__ieee754_rem_pio2+0x60>
 8007564:	ee16 3a90 	vmov	r3, s13
 8007568:	1536      	asrs	r6, r6, #20
 800756a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800756e:	1af3      	subs	r3, r6, r3
 8007570:	2b10      	cmp	r3, #16
 8007572:	ed84 6b00 	vstr	d6, [r4]
 8007576:	dde1      	ble.n	800753c <__ieee754_rem_pio2+0xf4>
 8007578:	eeb0 6b40 	vmov.f64	d6, d0
 800757c:	ed9f 3b40 	vldr	d3, [pc, #256]	; 8007680 <__ieee754_rem_pio2+0x238>
 8007580:	eea5 6b03 	vfma.f64	d6, d5, d3
 8007584:	ee30 7b46 	vsub.f64	d7, d0, d6
 8007588:	eea5 7b03 	vfma.f64	d7, d5, d3
 800758c:	ed9f 3b3e 	vldr	d3, [pc, #248]	; 8007688 <__ieee754_rem_pio2+0x240>
 8007590:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8007594:	ee36 3b47 	vsub.f64	d3, d6, d7
 8007598:	ee13 3a90 	vmov	r3, s7
 800759c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80075a0:	1af6      	subs	r6, r6, r3
 80075a2:	2e31      	cmp	r6, #49	; 0x31
 80075a4:	ed84 3b00 	vstr	d3, [r4]
 80075a8:	dd10      	ble.n	80075cc <__ieee754_rem_pio2+0x184>
 80075aa:	eeb0 0b46 	vmov.f64	d0, d6
 80075ae:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8007698 <__ieee754_rem_pio2+0x250>
 80075b2:	eea5 0b03 	vfma.f64	d0, d5, d3
 80075b6:	ee36 7b40 	vsub.f64	d7, d6, d0
 80075ba:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80076a0 <__ieee754_rem_pio2+0x258>
 80075be:	eea5 7b03 	vfma.f64	d7, d5, d3
 80075c2:	ee94 7b06 	vfnms.f64	d7, d4, d6
 80075c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80075ca:	e7b5      	b.n	8007538 <__ieee754_rem_pio2+0xf0>
 80075cc:	eeb0 0b46 	vmov.f64	d0, d6
 80075d0:	e7b4      	b.n	800753c <__ieee754_rem_pio2+0xf4>
 80075d2:	4b3b      	ldr	r3, [pc, #236]	; (80076c0 <__ieee754_rem_pio2+0x278>)
 80075d4:	429e      	cmp	r6, r3
 80075d6:	dd06      	ble.n	80075e6 <__ieee754_rem_pio2+0x19e>
 80075d8:	ee30 7b40 	vsub.f64	d7, d0, d0
 80075dc:	ed80 7b02 	vstr	d7, [r0, #8]
 80075e0:	ed80 7b00 	vstr	d7, [r0]
 80075e4:	e742      	b.n	800746c <__ieee754_rem_pio2+0x24>
 80075e6:	ee10 3a10 	vmov	r3, s0
 80075ea:	1532      	asrs	r2, r6, #20
 80075ec:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80075f0:	4618      	mov	r0, r3
 80075f2:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80075f6:	ec41 0b17 	vmov	d7, r0, r1
 80075fa:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80075fe:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80076a8 <__ieee754_rem_pio2+0x260>
 8007602:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8007606:	ee37 7b46 	vsub.f64	d7, d7, d6
 800760a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800760e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007612:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8007616:	a908      	add	r1, sp, #32
 8007618:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800761c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007620:	ed8d 6b04 	vstr	d6, [sp, #16]
 8007624:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007628:	ed8d 7b06 	vstr	d7, [sp, #24]
 800762c:	2303      	movs	r3, #3
 800762e:	ed31 7b02 	vldmdb	r1!, {d7}
 8007632:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763a:	f103 30ff 	add.w	r0, r3, #4294967295
 800763e:	d013      	beq.n	8007668 <__ieee754_rem_pio2+0x220>
 8007640:	4920      	ldr	r1, [pc, #128]	; (80076c4 <__ieee754_rem_pio2+0x27c>)
 8007642:	9101      	str	r1, [sp, #4]
 8007644:	2102      	movs	r1, #2
 8007646:	9100      	str	r1, [sp, #0]
 8007648:	a802      	add	r0, sp, #8
 800764a:	4621      	mov	r1, r4
 800764c:	f000 f8a8 	bl	80077a0 <__kernel_rem_pio2>
 8007650:	2d00      	cmp	r5, #0
 8007652:	f6bf af29 	bge.w	80074a8 <__ieee754_rem_pio2+0x60>
 8007656:	ed94 7b00 	vldr	d7, [r4]
 800765a:	eeb1 7b47 	vneg.f64	d7, d7
 800765e:	ed84 7b00 	vstr	d7, [r4]
 8007662:	ed94 7b02 	vldr	d7, [r4, #8]
 8007666:	e777      	b.n	8007558 <__ieee754_rem_pio2+0x110>
 8007668:	4603      	mov	r3, r0
 800766a:	e7e0      	b.n	800762e <__ieee754_rem_pio2+0x1e6>
 800766c:	f3af 8000 	nop.w
 8007670:	54400000 	.word	0x54400000
 8007674:	3ff921fb 	.word	0x3ff921fb
 8007678:	1a626331 	.word	0x1a626331
 800767c:	3dd0b461 	.word	0x3dd0b461
 8007680:	1a600000 	.word	0x1a600000
 8007684:	3dd0b461 	.word	0x3dd0b461
 8007688:	2e037073 	.word	0x2e037073
 800768c:	3ba3198a 	.word	0x3ba3198a
 8007690:	6dc9c883 	.word	0x6dc9c883
 8007694:	3fe45f30 	.word	0x3fe45f30
 8007698:	2e000000 	.word	0x2e000000
 800769c:	3ba3198a 	.word	0x3ba3198a
 80076a0:	252049c1 	.word	0x252049c1
 80076a4:	397b839a 	.word	0x397b839a
 80076a8:	00000000 	.word	0x00000000
 80076ac:	41700000 	.word	0x41700000
 80076b0:	3fe921fb 	.word	0x3fe921fb
 80076b4:	4002d97b 	.word	0x4002d97b
 80076b8:	413921fb 	.word	0x413921fb
 80076bc:	080081f8 	.word	0x080081f8
 80076c0:	7fefffff 	.word	0x7fefffff
 80076c4:	08008278 	.word	0x08008278

080076c8 <__kernel_cos>:
 80076c8:	ee10 1a90 	vmov	r1, s1
 80076cc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80076d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80076d4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80076d8:	da05      	bge.n	80076e6 <__kernel_cos+0x1e>
 80076da:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80076de:	ee17 3a90 	vmov	r3, s15
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d03d      	beq.n	8007762 <__kernel_cos+0x9a>
 80076e6:	ee20 6b00 	vmul.f64	d6, d0, d0
 80076ea:	ee20 1b01 	vmul.f64	d1, d0, d1
 80076ee:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8007768 <__kernel_cos+0xa0>
 80076f2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80076f6:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8007770 <__kernel_cos+0xa8>
 80076fa:	eea6 4b07 	vfma.f64	d4, d6, d7
 80076fe:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8007778 <__kernel_cos+0xb0>
 8007702:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007706:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8007780 <__kernel_cos+0xb8>
 800770a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800770e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8007788 <__kernel_cos+0xc0>
 8007712:	4b21      	ldr	r3, [pc, #132]	; (8007798 <__kernel_cos+0xd0>)
 8007714:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007718:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8007790 <__kernel_cos+0xc8>
 800771c:	4299      	cmp	r1, r3
 800771e:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007722:	ee24 4b06 	vmul.f64	d4, d4, d6
 8007726:	dc06      	bgt.n	8007736 <__kernel_cos+0x6e>
 8007728:	ee96 1b04 	vfnms.f64	d1, d6, d4
 800772c:	ee96 1b03 	vfnms.f64	d1, d6, d3
 8007730:	ee35 0b41 	vsub.f64	d0, d5, d1
 8007734:	4770      	bx	lr
 8007736:	4b19      	ldr	r3, [pc, #100]	; (800779c <__kernel_cos+0xd4>)
 8007738:	4299      	cmp	r1, r3
 800773a:	dc0f      	bgt.n	800775c <__kernel_cos+0x94>
 800773c:	2200      	movs	r2, #0
 800773e:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8007742:	ec43 2b17 	vmov	d7, r2, r3
 8007746:	ee35 5b47 	vsub.f64	d5, d5, d7
 800774a:	ee96 1b04 	vfnms.f64	d1, d6, d4
 800774e:	ee96 7b03 	vfnms.f64	d7, d6, d3
 8007752:	ee37 0b41 	vsub.f64	d0, d7, d1
 8007756:	ee35 0b40 	vsub.f64	d0, d5, d0
 800775a:	4770      	bx	lr
 800775c:	eeb5 7b02 	vmov.f64	d7, #82	; 0x3e900000  0.2812500
 8007760:	e7f1      	b.n	8007746 <__kernel_cos+0x7e>
 8007762:	eeb0 0b45 	vmov.f64	d0, d5
 8007766:	4770      	bx	lr
 8007768:	be8838d4 	.word	0xbe8838d4
 800776c:	bda8fae9 	.word	0xbda8fae9
 8007770:	bdb4b1c4 	.word	0xbdb4b1c4
 8007774:	3e21ee9e 	.word	0x3e21ee9e
 8007778:	809c52ad 	.word	0x809c52ad
 800777c:	be927e4f 	.word	0xbe927e4f
 8007780:	19cb1590 	.word	0x19cb1590
 8007784:	3efa01a0 	.word	0x3efa01a0
 8007788:	16c15177 	.word	0x16c15177
 800778c:	bf56c16c 	.word	0xbf56c16c
 8007790:	5555554c 	.word	0x5555554c
 8007794:	3fa55555 	.word	0x3fa55555
 8007798:	3fd33332 	.word	0x3fd33332
 800779c:	3fe90000 	.word	0x3fe90000

080077a0 <__kernel_rem_pio2>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	ed2d 8b06 	vpush	{d8-d10}
 80077a8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80077ac:	468b      	mov	fp, r1
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80077b2:	4bcf      	ldr	r3, [pc, #828]	; (8007af0 <__kernel_rem_pio2+0x350>)
 80077b4:	9002      	str	r0, [sp, #8]
 80077b6:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	9ca3      	ldr	r4, [sp, #652]	; 0x28c
 80077be:	3b01      	subs	r3, #1
 80077c0:	1ed0      	subs	r0, r2, #3
 80077c2:	2518      	movs	r5, #24
 80077c4:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8007ad8 <__kernel_rem_pio2+0x338>
 80077c8:	fb90 f0f5 	sdiv	r0, r0, r5
 80077cc:	f06f 0517 	mvn.w	r5, #23
 80077d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80077d4:	fb00 5505 	mla	r5, r0, r5, r5
 80077d8:	1ac7      	subs	r7, r0, r3
 80077da:	4415      	add	r5, r2
 80077dc:	eb0a 0e03 	add.w	lr, sl, r3
 80077e0:	ae1a      	add	r6, sp, #104	; 0x68
 80077e2:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
 80077e6:	2200      	movs	r2, #0
 80077e8:	4572      	cmp	r2, lr
 80077ea:	dd0f      	ble.n	800780c <__kernel_rem_pio2+0x6c>
 80077ec:	f50d 7ed4 	add.w	lr, sp, #424	; 0x1a8
 80077f0:	2600      	movs	r6, #0
 80077f2:	4556      	cmp	r6, sl
 80077f4:	dc27      	bgt.n	8007846 <__kernel_rem_pio2+0xa6>
 80077f6:	9a01      	ldr	r2, [sp, #4]
 80077f8:	9f02      	ldr	r7, [sp, #8]
 80077fa:	4432      	add	r2, r6
 80077fc:	a91a      	add	r1, sp, #104	; 0x68
 80077fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007802:	ed9f 7bb5 	vldr	d7, [pc, #724]	; 8007ad8 <__kernel_rem_pio2+0x338>
 8007806:	f04f 0c00 	mov.w	ip, #0
 800780a:	e016      	b.n	800783a <__kernel_rem_pio2+0x9a>
 800780c:	42d7      	cmn	r7, r2
 800780e:	d409      	bmi.n	8007824 <__kernel_rem_pio2+0x84>
 8007810:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8007814:	ee07 1a90 	vmov	s15, r1
 8007818:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800781c:	eca6 7b02 	vstmia	r6!, {d7}
 8007820:	3201      	adds	r2, #1
 8007822:	e7e1      	b.n	80077e8 <__kernel_rem_pio2+0x48>
 8007824:	eeb0 7b46 	vmov.f64	d7, d6
 8007828:	e7f8      	b.n	800781c <__kernel_rem_pio2+0x7c>
 800782a:	ecb7 5b02 	vldmia	r7!, {d5}
 800782e:	ed32 6b02 	vldmdb	r2!, {d6}
 8007832:	f10c 0c01 	add.w	ip, ip, #1
 8007836:	eea5 7b06 	vfma.f64	d7, d5, d6
 800783a:	459c      	cmp	ip, r3
 800783c:	ddf5      	ble.n	800782a <__kernel_rem_pio2+0x8a>
 800783e:	ecae 7b02 	vstmia	lr!, {d7}
 8007842:	3601      	adds	r6, #1
 8007844:	e7d5      	b.n	80077f2 <__kernel_rem_pio2+0x52>
 8007846:	aa06      	add	r2, sp, #24
 8007848:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800784c:	ed9f 9ba4 	vldr	d9, [pc, #656]	; 8007ae0 <__kernel_rem_pio2+0x340>
 8007850:	ed9f aba5 	vldr	d10, [pc, #660]	; 8007ae8 <__kernel_rem_pio2+0x348>
 8007854:	9204      	str	r2, [sp, #16]
 8007856:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 800785a:	9203      	str	r2, [sp, #12]
 800785c:	4657      	mov	r7, sl
 800785e:	aa92      	add	r2, sp, #584	; 0x248
 8007860:	f107 5800 	add.w	r8, r7, #536870912	; 0x20000000
 8007864:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8007868:	f108 38ff 	add.w	r8, r8, #4294967295
 800786c:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8007870:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8007874:	aa92      	add	r2, sp, #584	; 0x248
 8007876:	eb02 0008 	add.w	r0, r2, r8
 800787a:	3898      	subs	r0, #152	; 0x98
 800787c:	2200      	movs	r2, #0
 800787e:	1abc      	subs	r4, r7, r2
 8007880:	2c00      	cmp	r4, #0
 8007882:	dc4c      	bgt.n	800791e <__kernel_rem_pio2+0x17e>
 8007884:	4628      	mov	r0, r5
 8007886:	9305      	str	r3, [sp, #20]
 8007888:	f000 fad6 	bl	8007e38 <scalbn>
 800788c:	eeb0 8b40 	vmov.f64	d8, d0
 8007890:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8007894:	ee28 0b00 	vmul.f64	d0, d8, d0
 8007898:	f000 fa56 	bl	8007d48 <floor>
 800789c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80078a0:	eea0 8b47 	vfms.f64	d8, d0, d7
 80078a4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	ee17 9a90 	vmov	r9, s15
 80078ae:	9b05      	ldr	r3, [sp, #20]
 80078b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80078b4:	ee38 8b47 	vsub.f64	d8, d8, d7
 80078b8:	dd46      	ble.n	8007948 <__kernel_rem_pio2+0x1a8>
 80078ba:	1e78      	subs	r0, r7, #1
 80078bc:	aa06      	add	r2, sp, #24
 80078be:	f1c5 0418 	rsb	r4, r5, #24
 80078c2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80078c6:	fa46 f204 	asr.w	r2, r6, r4
 80078ca:	4491      	add	r9, r2
 80078cc:	40a2      	lsls	r2, r4
 80078ce:	1ab6      	subs	r6, r6, r2
 80078d0:	aa06      	add	r2, sp, #24
 80078d2:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 80078d6:	f1c5 0217 	rsb	r2, r5, #23
 80078da:	4116      	asrs	r6, r2
 80078dc:	2e00      	cmp	r6, #0
 80078de:	dd42      	ble.n	8007966 <__kernel_rem_pio2+0x1c6>
 80078e0:	2400      	movs	r4, #0
 80078e2:	f109 0901 	add.w	r9, r9, #1
 80078e6:	4620      	mov	r0, r4
 80078e8:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80078ec:	42a7      	cmp	r7, r4
 80078ee:	dc75      	bgt.n	80079dc <__kernel_rem_pio2+0x23c>
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	dd05      	ble.n	8007900 <__kernel_rem_pio2+0x160>
 80078f4:	2d01      	cmp	r5, #1
 80078f6:	f000 8086 	beq.w	8007a06 <__kernel_rem_pio2+0x266>
 80078fa:	2d02      	cmp	r5, #2
 80078fc:	f000 808d 	beq.w	8007a1a <__kernel_rem_pio2+0x27a>
 8007900:	2e02      	cmp	r6, #2
 8007902:	d130      	bne.n	8007966 <__kernel_rem_pio2+0x1c6>
 8007904:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007908:	ee30 8b48 	vsub.f64	d8, d0, d8
 800790c:	b358      	cbz	r0, 8007966 <__kernel_rem_pio2+0x1c6>
 800790e:	4628      	mov	r0, r5
 8007910:	9305      	str	r3, [sp, #20]
 8007912:	f000 fa91 	bl	8007e38 <scalbn>
 8007916:	9b05      	ldr	r3, [sp, #20]
 8007918:	ee38 8b40 	vsub.f64	d8, d8, d0
 800791c:	e023      	b.n	8007966 <__kernel_rem_pio2+0x1c6>
 800791e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8007922:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007926:	ac06      	add	r4, sp, #24
 8007928:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800792c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8007930:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007934:	ee10 1a10 	vmov	r1, s0
 8007938:	ed30 0b02 	vldmdb	r0!, {d0}
 800793c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8007940:	ee37 0b00 	vadd.f64	d0, d7, d0
 8007944:	3201      	adds	r2, #1
 8007946:	e79a      	b.n	800787e <__kernel_rem_pio2+0xde>
 8007948:	d105      	bne.n	8007956 <__kernel_rem_pio2+0x1b6>
 800794a:	1e7a      	subs	r2, r7, #1
 800794c:	a906      	add	r1, sp, #24
 800794e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8007952:	15f6      	asrs	r6, r6, #23
 8007954:	e7c2      	b.n	80078dc <__kernel_rem_pio2+0x13c>
 8007956:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800795a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007962:	da39      	bge.n	80079d8 <__kernel_rem_pio2+0x238>
 8007964:	2600      	movs	r6, #0
 8007966:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800796a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796e:	f040 808e 	bne.w	8007a8e <__kernel_rem_pio2+0x2ee>
 8007972:	1e7c      	subs	r4, r7, #1
 8007974:	4620      	mov	r0, r4
 8007976:	2200      	movs	r2, #0
 8007978:	4550      	cmp	r0, sl
 800797a:	da55      	bge.n	8007a28 <__kernel_rem_pio2+0x288>
 800797c:	2a00      	cmp	r2, #0
 800797e:	d164      	bne.n	8007a4a <__kernel_rem_pio2+0x2aa>
 8007980:	2401      	movs	r4, #1
 8007982:	f06f 0003 	mvn.w	r0, #3
 8007986:	fb00 f204 	mul.w	r2, r0, r4
 800798a:	9904      	ldr	r1, [sp, #16]
 800798c:	588a      	ldr	r2, [r1, r2]
 800798e:	2a00      	cmp	r2, #0
 8007990:	d050      	beq.n	8007a34 <__kernel_rem_pio2+0x294>
 8007992:	aa92      	add	r2, sp, #584	; 0x248
 8007994:	4490      	add	r8, r2
 8007996:	9a01      	ldr	r2, [sp, #4]
 8007998:	a91a      	add	r1, sp, #104	; 0x68
 800799a:	443a      	add	r2, r7
 800799c:	1c78      	adds	r0, r7, #1
 800799e:	f1a8 0890 	sub.w	r8, r8, #144	; 0x90
 80079a2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80079a6:	4427      	add	r7, r4
 80079a8:	42b8      	cmp	r0, r7
 80079aa:	f73f af58 	bgt.w	800785e <__kernel_rem_pio2+0xbe>
 80079ae:	9903      	ldr	r1, [sp, #12]
 80079b0:	9e02      	ldr	r6, [sp, #8]
 80079b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80079b6:	9105      	str	r1, [sp, #20]
 80079b8:	ee07 1a90 	vmov	s15, r1
 80079bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80079c0:	2400      	movs	r4, #0
 80079c2:	eca2 7b02 	vstmia	r2!, {d7}
 80079c6:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8007ad8 <__kernel_rem_pio2+0x338>
 80079ca:	4696      	mov	lr, r2
 80079cc:	429c      	cmp	r4, r3
 80079ce:	dd33      	ble.n	8007a38 <__kernel_rem_pio2+0x298>
 80079d0:	eca8 7b02 	vstmia	r8!, {d7}
 80079d4:	3001      	adds	r0, #1
 80079d6:	e7e7      	b.n	80079a8 <__kernel_rem_pio2+0x208>
 80079d8:	2602      	movs	r6, #2
 80079da:	e781      	b.n	80078e0 <__kernel_rem_pio2+0x140>
 80079dc:	aa06      	add	r2, sp, #24
 80079de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80079e2:	b948      	cbnz	r0, 80079f8 <__kernel_rem_pio2+0x258>
 80079e4:	b12a      	cbz	r2, 80079f2 <__kernel_rem_pio2+0x252>
 80079e6:	a906      	add	r1, sp, #24
 80079e8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80079ec:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80079f0:	2201      	movs	r2, #1
 80079f2:	3401      	adds	r4, #1
 80079f4:	4610      	mov	r0, r2
 80079f6:	e779      	b.n	80078ec <__kernel_rem_pio2+0x14c>
 80079f8:	a906      	add	r1, sp, #24
 80079fa:	ebae 0202 	sub.w	r2, lr, r2
 80079fe:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8007a02:	4602      	mov	r2, r0
 8007a04:	e7f5      	b.n	80079f2 <__kernel_rem_pio2+0x252>
 8007a06:	1e7c      	subs	r4, r7, #1
 8007a08:	aa06      	add	r2, sp, #24
 8007a0a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007a0e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007a12:	a906      	add	r1, sp, #24
 8007a14:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8007a18:	e772      	b.n	8007900 <__kernel_rem_pio2+0x160>
 8007a1a:	1e7c      	subs	r4, r7, #1
 8007a1c:	aa06      	add	r2, sp, #24
 8007a1e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007a22:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8007a26:	e7f4      	b.n	8007a12 <__kernel_rem_pio2+0x272>
 8007a28:	a906      	add	r1, sp, #24
 8007a2a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007a2e:	3801      	subs	r0, #1
 8007a30:	430a      	orrs	r2, r1
 8007a32:	e7a1      	b.n	8007978 <__kernel_rem_pio2+0x1d8>
 8007a34:	3401      	adds	r4, #1
 8007a36:	e7a6      	b.n	8007986 <__kernel_rem_pio2+0x1e6>
 8007a38:	ecb6 5b02 	vldmia	r6!, {d5}
 8007a3c:	ed3e 6b02 	vldmdb	lr!, {d6}
 8007a40:	3401      	adds	r4, #1
 8007a42:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007a46:	e7c1      	b.n	80079cc <__kernel_rem_pio2+0x22c>
 8007a48:	3c01      	subs	r4, #1
 8007a4a:	ab06      	add	r3, sp, #24
 8007a4c:	3d18      	subs	r5, #24
 8007a4e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0f8      	beq.n	8007a48 <__kernel_rem_pio2+0x2a8>
 8007a56:	4628      	mov	r0, r5
 8007a58:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007a5c:	f000 f9ec 	bl	8007e38 <scalbn>
 8007a60:	00e3      	lsls	r3, r4, #3
 8007a62:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8007ae0 <__kernel_rem_pio2+0x340>
 8007a66:	aa6a      	add	r2, sp, #424	; 0x1a8
 8007a68:	3308      	adds	r3, #8
 8007a6a:	18d0      	adds	r0, r2, r3
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	da4b      	bge.n	8007b0a <__kernel_rem_pio2+0x36a>
 8007a72:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 8007a76:	2200      	movs	r2, #0
 8007a78:	4677      	mov	r7, lr
 8007a7a:	1aa5      	subs	r5, r4, r2
 8007a7c:	d464      	bmi.n	8007b48 <__kernel_rem_pio2+0x3a8>
 8007a7e:	a86a      	add	r0, sp, #424	; 0x1a8
 8007a80:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8007a84:	491b      	ldr	r1, [pc, #108]	; (8007af4 <__kernel_rem_pio2+0x354>)
 8007a86:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007ad8 <__kernel_rem_pio2+0x338>
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	e054      	b.n	8007b38 <__kernel_rem_pio2+0x398>
 8007a8e:	4268      	negs	r0, r5
 8007a90:	eeb0 0b48 	vmov.f64	d0, d8
 8007a94:	f000 f9d0 	bl	8007e38 <scalbn>
 8007a98:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8007ae8 <__kernel_rem_pio2+0x348>
 8007a9c:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8007aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa4:	db28      	blt.n	8007af8 <__kernel_rem_pio2+0x358>
 8007aa6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8007ae0 <__kernel_rem_pio2+0x340>
 8007aaa:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007aae:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007ab2:	aa06      	add	r2, sp, #24
 8007ab4:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8007ab8:	eea5 0b46 	vfms.f64	d0, d5, d6
 8007abc:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007ac0:	1c7c      	adds	r4, r7, #1
 8007ac2:	ee10 3a10 	vmov	r3, s0
 8007ac6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8007aca:	ee17 3a10 	vmov	r3, s14
 8007ace:	3518      	adds	r5, #24
 8007ad0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007ad4:	e7bf      	b.n	8007a56 <__kernel_rem_pio2+0x2b6>
 8007ad6:	bf00      	nop
	...
 8007ae4:	3e700000 	.word	0x3e700000
 8007ae8:	00000000 	.word	0x00000000
 8007aec:	41700000 	.word	0x41700000
 8007af0:	080083c0 	.word	0x080083c0
 8007af4:	08008380 	.word	0x08008380
 8007af8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007afc:	aa06      	add	r2, sp, #24
 8007afe:	ee10 3a10 	vmov	r3, s0
 8007b02:	463c      	mov	r4, r7
 8007b04:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8007b08:	e7a5      	b.n	8007a56 <__kernel_rem_pio2+0x2b6>
 8007b0a:	a906      	add	r1, sp, #24
 8007b0c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8007b10:	9101      	str	r1, [sp, #4]
 8007b12:	ee07 1a90 	vmov	s15, r1
 8007b16:	3a01      	subs	r2, #1
 8007b18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007b1c:	ee27 7b00 	vmul.f64	d7, d7, d0
 8007b20:	ee20 0b06 	vmul.f64	d0, d0, d6
 8007b24:	ed20 7b02 	vstmdb	r0!, {d7}
 8007b28:	e7a1      	b.n	8007a6e <__kernel_rem_pio2+0x2ce>
 8007b2a:	ecb1 5b02 	vldmia	r1!, {d5}
 8007b2e:	ecb5 6b02 	vldmia	r5!, {d6}
 8007b32:	3001      	adds	r0, #1
 8007b34:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007b38:	4550      	cmp	r0, sl
 8007b3a:	dc01      	bgt.n	8007b40 <__kernel_rem_pio2+0x3a0>
 8007b3c:	4290      	cmp	r0, r2
 8007b3e:	ddf4      	ble.n	8007b2a <__kernel_rem_pio2+0x38a>
 8007b40:	ecae 7b02 	vstmia	lr!, {d7}
 8007b44:	3201      	adds	r2, #1
 8007b46:	e798      	b.n	8007a7a <__kernel_rem_pio2+0x2da>
 8007b48:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8007b4a:	2a03      	cmp	r2, #3
 8007b4c:	d843      	bhi.n	8007bd6 <__kernel_rem_pio2+0x436>
 8007b4e:	e8df f002 	tbb	[pc, r2]
 8007b52:	1d37      	.short	0x1d37
 8007b54:	021d      	.short	0x021d
 8007b56:	aa42      	add	r2, sp, #264	; 0x108
 8007b58:	4413      	add	r3, r2
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	dc56      	bgt.n	8007c10 <__kernel_rem_pio2+0x470>
 8007b62:	461a      	mov	r2, r3
 8007b64:	4620      	mov	r0, r4
 8007b66:	2801      	cmp	r0, #1
 8007b68:	dc62      	bgt.n	8007c30 <__kernel_rem_pio2+0x490>
 8007b6a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8007c80 <__kernel_rem_pio2+0x4e0>
 8007b6e:	2c01      	cmp	r4, #1
 8007b70:	dc6e      	bgt.n	8007c50 <__kernel_rem_pio2+0x4b0>
 8007b72:	2e00      	cmp	r6, #0
 8007b74:	d172      	bne.n	8007c5c <__kernel_rem_pio2+0x4bc>
 8007b76:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 8007b7a:	e9cb 2300 	strd	r2, r3, [fp]
 8007b7e:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 8007b82:	e9cb 2302 	strd	r2, r3, [fp, #8]
 8007b86:	ed8b 7b04 	vstr	d7, [fp, #16]
 8007b8a:	e024      	b.n	8007bd6 <__kernel_rem_pio2+0x436>
 8007b8c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007c80 <__kernel_rem_pio2+0x4e0>
 8007b90:	aa42      	add	r2, sp, #264	; 0x108
 8007b92:	4413      	add	r3, r2
 8007b94:	4622      	mov	r2, r4
 8007b96:	2a00      	cmp	r2, #0
 8007b98:	da2b      	bge.n	8007bf2 <__kernel_rem_pio2+0x452>
 8007b9a:	b386      	cbz	r6, 8007bfe <__kernel_rem_pio2+0x45e>
 8007b9c:	eeb1 7b46 	vneg.f64	d7, d6
 8007ba0:	ed8b 7b00 	vstr	d7, [fp]
 8007ba4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8007ba8:	aa44      	add	r2, sp, #272	; 0x110
 8007baa:	2301      	movs	r3, #1
 8007bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007bb0:	429c      	cmp	r4, r3
 8007bb2:	da27      	bge.n	8007c04 <__kernel_rem_pio2+0x464>
 8007bb4:	b10e      	cbz	r6, 8007bba <__kernel_rem_pio2+0x41a>
 8007bb6:	eeb1 7b47 	vneg.f64	d7, d7
 8007bba:	ed8b 7b02 	vstr	d7, [fp, #8]
 8007bbe:	e00a      	b.n	8007bd6 <__kernel_rem_pio2+0x436>
 8007bc0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007c80 <__kernel_rem_pio2+0x4e0>
 8007bc4:	aa42      	add	r2, sp, #264	; 0x108
 8007bc6:	4413      	add	r3, r2
 8007bc8:	2c00      	cmp	r4, #0
 8007bca:	da0c      	bge.n	8007be6 <__kernel_rem_pio2+0x446>
 8007bcc:	b10e      	cbz	r6, 8007bd2 <__kernel_rem_pio2+0x432>
 8007bce:	eeb1 7b47 	vneg.f64	d7, d7
 8007bd2:	ed8b 7b00 	vstr	d7, [fp]
 8007bd6:	f009 0007 	and.w	r0, r9, #7
 8007bda:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8007bde:	ecbd 8b06 	vpop	{d8-d10}
 8007be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be6:	ed33 6b02 	vldmdb	r3!, {d6}
 8007bea:	3c01      	subs	r4, #1
 8007bec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007bf0:	e7ea      	b.n	8007bc8 <__kernel_rem_pio2+0x428>
 8007bf2:	ed33 7b02 	vldmdb	r3!, {d7}
 8007bf6:	3a01      	subs	r2, #1
 8007bf8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007bfc:	e7cb      	b.n	8007b96 <__kernel_rem_pio2+0x3f6>
 8007bfe:	eeb0 7b46 	vmov.f64	d7, d6
 8007c02:	e7cd      	b.n	8007ba0 <__kernel_rem_pio2+0x400>
 8007c04:	ecb2 6b02 	vldmia	r2!, {d6}
 8007c08:	3301      	adds	r3, #1
 8007c0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007c0e:	e7cf      	b.n	8007bb0 <__kernel_rem_pio2+0x410>
 8007c10:	ed12 5b02 	vldr	d5, [r2, #-8]
 8007c14:	ed12 7b04 	vldr	d7, [r2, #-16]
 8007c18:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007c1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007c20:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007c24:	ed22 7b02 	vstmdb	r2!, {d7}
 8007c28:	3801      	subs	r0, #1
 8007c2a:	ed02 6b02 	vstr	d6, [r2, #-8]
 8007c2e:	e796      	b.n	8007b5e <__kernel_rem_pio2+0x3be>
 8007c30:	ed12 5b02 	vldr	d5, [r2, #-8]
 8007c34:	ed12 7b04 	vldr	d7, [r2, #-16]
 8007c38:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007c3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007c40:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007c44:	ed22 7b02 	vstmdb	r2!, {d7}
 8007c48:	3801      	subs	r0, #1
 8007c4a:	ed02 6b02 	vstr	d6, [r2, #-8]
 8007c4e:	e78a      	b.n	8007b66 <__kernel_rem_pio2+0x3c6>
 8007c50:	ed33 6b02 	vldmdb	r3!, {d6}
 8007c54:	3c01      	subs	r4, #1
 8007c56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007c5a:	e788      	b.n	8007b6e <__kernel_rem_pio2+0x3ce>
 8007c5c:	ed97 6b00 	vldr	d6, [r7]
 8007c60:	eeb1 7b47 	vneg.f64	d7, d7
 8007c64:	eeb1 6b46 	vneg.f64	d6, d6
 8007c68:	ed8b 6b00 	vstr	d6, [fp]
 8007c6c:	ed97 6b02 	vldr	d6, [r7, #8]
 8007c70:	eeb1 6b46 	vneg.f64	d6, d6
 8007c74:	ed8b 6b02 	vstr	d6, [fp, #8]
 8007c78:	e785      	b.n	8007b86 <__kernel_rem_pio2+0x3e6>
 8007c7a:	bf00      	nop
 8007c7c:	f3af 8000 	nop.w
	...

08007c88 <__kernel_sin>:
 8007c88:	ee10 3a90 	vmov	r3, s1
 8007c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c90:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007c94:	da04      	bge.n	8007ca0 <__kernel_sin+0x18>
 8007c96:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8007c9a:	ee17 3a90 	vmov	r3, s15
 8007c9e:	b35b      	cbz	r3, 8007cf8 <__kernel_sin+0x70>
 8007ca0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8007ca4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8007ca8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8007d00 <__kernel_sin+0x78>
 8007cac:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007d08 <__kernel_sin+0x80>
 8007cb0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007cb4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007d10 <__kernel_sin+0x88>
 8007cb8:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007cbc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007d18 <__kernel_sin+0x90>
 8007cc0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007cc4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007d20 <__kernel_sin+0x98>
 8007cc8:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007ccc:	b930      	cbnz	r0, 8007cdc <__kernel_sin+0x54>
 8007cce:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007d28 <__kernel_sin+0xa0>
 8007cd2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007cd6:	eea5 0b04 	vfma.f64	d0, d5, d4
 8007cda:	4770      	bx	lr
 8007cdc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8007ce0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007ce4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8007ce8:	ee96 1b07 	vfnms.f64	d1, d6, d7
 8007cec:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007d30 <__kernel_sin+0xa8>
 8007cf0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8007cf4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	f3af 8000 	nop.w
 8007d00:	5acfd57c 	.word	0x5acfd57c
 8007d04:	3de5d93a 	.word	0x3de5d93a
 8007d08:	8a2b9ceb 	.word	0x8a2b9ceb
 8007d0c:	be5ae5e6 	.word	0xbe5ae5e6
 8007d10:	57b1fe7d 	.word	0x57b1fe7d
 8007d14:	3ec71de3 	.word	0x3ec71de3
 8007d18:	19c161d5 	.word	0x19c161d5
 8007d1c:	bf2a01a0 	.word	0xbf2a01a0
 8007d20:	1110f8a6 	.word	0x1110f8a6
 8007d24:	3f811111 	.word	0x3f811111
 8007d28:	55555549 	.word	0x55555549
 8007d2c:	bfc55555 	.word	0xbfc55555
 8007d30:	55555549 	.word	0x55555549
 8007d34:	3fc55555 	.word	0x3fc55555

08007d38 <fabs>:
 8007d38:	ec53 2b10 	vmov	r2, r3, d0
 8007d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d40:	ec43 2b10 	vmov	d0, r2, r3
 8007d44:	4770      	bx	lr
	...

08007d48 <floor>:
 8007d48:	ee10 1a90 	vmov	r1, s1
 8007d4c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d50:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8007d54:	2b13      	cmp	r3, #19
 8007d56:	b530      	push	{r4, r5, lr}
 8007d58:	ee10 0a10 	vmov	r0, s0
 8007d5c:	ee10 5a10 	vmov	r5, s0
 8007d60:	dc33      	bgt.n	8007dca <floor+0x82>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	da17      	bge.n	8007d96 <floor+0x4e>
 8007d66:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007e28 <floor+0xe0>
 8007d6a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007d6e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d76:	dd09      	ble.n	8007d8c <floor+0x44>
 8007d78:	2900      	cmp	r1, #0
 8007d7a:	da50      	bge.n	8007e1e <floor+0xd6>
 8007d7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d80:	432b      	orrs	r3, r5
 8007d82:	4b2b      	ldr	r3, [pc, #172]	; (8007e30 <floor+0xe8>)
 8007d84:	f04f 0000 	mov.w	r0, #0
 8007d88:	bf18      	it	ne
 8007d8a:	4619      	movne	r1, r3
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4602      	mov	r2, r0
 8007d90:	ec43 2b10 	vmov	d0, r2, r3
 8007d94:	bd30      	pop	{r4, r5, pc}
 8007d96:	4a27      	ldr	r2, [pc, #156]	; (8007e34 <floor+0xec>)
 8007d98:	411a      	asrs	r2, r3
 8007d9a:	ea01 0402 	and.w	r4, r1, r2
 8007d9e:	432c      	orrs	r4, r5
 8007da0:	d0f8      	beq.n	8007d94 <floor+0x4c>
 8007da2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007e28 <floor+0xe0>
 8007da6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007daa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db2:	ddeb      	ble.n	8007d8c <floor+0x44>
 8007db4:	2900      	cmp	r1, #0
 8007db6:	bfbe      	ittt	lt
 8007db8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8007dbc:	fa40 f303 	asrlt.w	r3, r0, r3
 8007dc0:	18c9      	addlt	r1, r1, r3
 8007dc2:	ea21 0102 	bic.w	r1, r1, r2
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	e7e0      	b.n	8007d8c <floor+0x44>
 8007dca:	2b33      	cmp	r3, #51	; 0x33
 8007dcc:	dd05      	ble.n	8007dda <floor+0x92>
 8007dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd2:	d1df      	bne.n	8007d94 <floor+0x4c>
 8007dd4:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007dd8:	bd30      	pop	{r4, r5, pc}
 8007dda:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8007dde:	f04f 32ff 	mov.w	r2, #4294967295
 8007de2:	40e2      	lsrs	r2, r4
 8007de4:	4215      	tst	r5, r2
 8007de6:	d0d5      	beq.n	8007d94 <floor+0x4c>
 8007de8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007e28 <floor+0xe0>
 8007dec:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007df0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df8:	ddc8      	ble.n	8007d8c <floor+0x44>
 8007dfa:	2900      	cmp	r1, #0
 8007dfc:	da02      	bge.n	8007e04 <floor+0xbc>
 8007dfe:	2b14      	cmp	r3, #20
 8007e00:	d103      	bne.n	8007e0a <floor+0xc2>
 8007e02:	3101      	adds	r1, #1
 8007e04:	ea20 0002 	bic.w	r0, r0, r2
 8007e08:	e7c0      	b.n	8007d8c <floor+0x44>
 8007e0a:	2401      	movs	r4, #1
 8007e0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007e10:	fa04 f303 	lsl.w	r3, r4, r3
 8007e14:	4418      	add	r0, r3
 8007e16:	4285      	cmp	r5, r0
 8007e18:	bf88      	it	hi
 8007e1a:	1909      	addhi	r1, r1, r4
 8007e1c:	e7f2      	b.n	8007e04 <floor+0xbc>
 8007e1e:	2000      	movs	r0, #0
 8007e20:	4601      	mov	r1, r0
 8007e22:	e7b3      	b.n	8007d8c <floor+0x44>
 8007e24:	f3af 8000 	nop.w
 8007e28:	8800759c 	.word	0x8800759c
 8007e2c:	7e37e43c 	.word	0x7e37e43c
 8007e30:	bff00000 	.word	0xbff00000
 8007e34:	000fffff 	.word	0x000fffff

08007e38 <scalbn>:
 8007e38:	b500      	push	{lr}
 8007e3a:	ed2d 8b02 	vpush	{d8}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	ed8d 0b00 	vstr	d0, [sp]
 8007e44:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8007e48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007e4c:	b9a2      	cbnz	r2, 8007e78 <scalbn+0x40>
 8007e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e52:	430b      	orrs	r3, r1
 8007e54:	d03a      	beq.n	8007ecc <scalbn+0x94>
 8007e56:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007f10 <scalbn+0xd8>
 8007e5a:	4a35      	ldr	r2, [pc, #212]	; (8007f30 <scalbn+0xf8>)
 8007e5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007e60:	4290      	cmp	r0, r2
 8007e62:	ed8d 7b00 	vstr	d7, [sp]
 8007e66:	9b01      	ldr	r3, [sp, #4]
 8007e68:	da11      	bge.n	8007e8e <scalbn+0x56>
 8007e6a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8007f18 <scalbn+0xe0>
 8007e6e:	ed9d 6b00 	vldr	d6, [sp]
 8007e72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e76:	e007      	b.n	8007e88 <scalbn+0x50>
 8007e78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007e7c:	428a      	cmp	r2, r1
 8007e7e:	d109      	bne.n	8007e94 <scalbn+0x5c>
 8007e80:	ed9d 7b00 	vldr	d7, [sp]
 8007e84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007e88:	ed8d 7b00 	vstr	d7, [sp]
 8007e8c:	e01e      	b.n	8007ecc <scalbn+0x94>
 8007e8e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007e92:	3a36      	subs	r2, #54	; 0x36
 8007e94:	4402      	add	r2, r0
 8007e96:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007e9a:	428a      	cmp	r2, r1
 8007e9c:	dd0a      	ble.n	8007eb4 <scalbn+0x7c>
 8007e9e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8007f20 <scalbn+0xe8>
 8007ea2:	eeb0 0b48 	vmov.f64	d0, d8
 8007ea6:	ed9d 1b00 	vldr	d1, [sp]
 8007eaa:	f000 f843 	bl	8007f34 <copysign>
 8007eae:	ee20 7b08 	vmul.f64	d7, d0, d8
 8007eb2:	e7e9      	b.n	8007e88 <scalbn+0x50>
 8007eb4:	2a00      	cmp	r2, #0
 8007eb6:	dd10      	ble.n	8007eda <scalbn+0xa2>
 8007eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ebc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ec0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ec4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8007ecc:	ed9d 0b00 	vldr	d0, [sp]
 8007ed0:	b003      	add	sp, #12
 8007ed2:	ecbd 8b02 	vpop	{d8}
 8007ed6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007eda:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007ede:	da06      	bge.n	8007eee <scalbn+0xb6>
 8007ee0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007ee4:	4298      	cmp	r0, r3
 8007ee6:	dcda      	bgt.n	8007e9e <scalbn+0x66>
 8007ee8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8007f18 <scalbn+0xe0>
 8007eec:	e7d9      	b.n	8007ea2 <scalbn+0x6a>
 8007eee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ef2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ef6:	3236      	adds	r2, #54	; 0x36
 8007ef8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007efc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007f00:	ec41 0b17 	vmov	d7, r0, r1
 8007f04:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8007f28 <scalbn+0xf0>
 8007f08:	e7b3      	b.n	8007e72 <scalbn+0x3a>
 8007f0a:	bf00      	nop
 8007f0c:	f3af 8000 	nop.w
 8007f10:	00000000 	.word	0x00000000
 8007f14:	43500000 	.word	0x43500000
 8007f18:	c2f8f359 	.word	0xc2f8f359
 8007f1c:	01a56e1f 	.word	0x01a56e1f
 8007f20:	8800759c 	.word	0x8800759c
 8007f24:	7e37e43c 	.word	0x7e37e43c
 8007f28:	00000000 	.word	0x00000000
 8007f2c:	3c900000 	.word	0x3c900000
 8007f30:	ffff3cb0 	.word	0xffff3cb0

08007f34 <copysign>:
 8007f34:	ec53 2b10 	vmov	r2, r3, d0
 8007f38:	ee11 0a90 	vmov	r0, s3
 8007f3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007f44:	ea41 0300 	orr.w	r3, r1, r0
 8007f48:	ec43 2b10 	vmov	d0, r2, r3
 8007f4c:	4770      	bx	lr
	...

08007f50 <__libc_init_array>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	4e0d      	ldr	r6, [pc, #52]	; (8007f88 <__libc_init_array+0x38>)
 8007f54:	4c0d      	ldr	r4, [pc, #52]	; (8007f8c <__libc_init_array+0x3c>)
 8007f56:	1ba4      	subs	r4, r4, r6
 8007f58:	10a4      	asrs	r4, r4, #2
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	42a5      	cmp	r5, r4
 8007f5e:	d109      	bne.n	8007f74 <__libc_init_array+0x24>
 8007f60:	4e0b      	ldr	r6, [pc, #44]	; (8007f90 <__libc_init_array+0x40>)
 8007f62:	4c0c      	ldr	r4, [pc, #48]	; (8007f94 <__libc_init_array+0x44>)
 8007f64:	f000 f82c 	bl	8007fc0 <_init>
 8007f68:	1ba4      	subs	r4, r4, r6
 8007f6a:	10a4      	asrs	r4, r4, #2
 8007f6c:	2500      	movs	r5, #0
 8007f6e:	42a5      	cmp	r5, r4
 8007f70:	d105      	bne.n	8007f7e <__libc_init_array+0x2e>
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
 8007f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f78:	4798      	blx	r3
 8007f7a:	3501      	adds	r5, #1
 8007f7c:	e7ee      	b.n	8007f5c <__libc_init_array+0xc>
 8007f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f82:	4798      	blx	r3
 8007f84:	3501      	adds	r5, #1
 8007f86:	e7f2      	b.n	8007f6e <__libc_init_array+0x1e>
 8007f88:	080083d0 	.word	0x080083d0
 8007f8c:	080083d0 	.word	0x080083d0
 8007f90:	080083d0 	.word	0x080083d0
 8007f94:	080083d4 	.word	0x080083d4

08007f98 <memcpy>:
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	1e43      	subs	r3, r0, #1
 8007f9c:	440a      	add	r2, r1
 8007f9e:	4291      	cmp	r1, r2
 8007fa0:	d100      	bne.n	8007fa4 <memcpy+0xc>
 8007fa2:	bd10      	pop	{r4, pc}
 8007fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fac:	e7f7      	b.n	8007f9e <memcpy+0x6>

08007fae <memset>:
 8007fae:	4402      	add	r2, r0
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d100      	bne.n	8007fb8 <memset+0xa>
 8007fb6:	4770      	bx	lr
 8007fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8007fbc:	e7f9      	b.n	8007fb2 <memset+0x4>
	...

08007fc0 <_init>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	bf00      	nop
 8007fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc6:	bc08      	pop	{r3}
 8007fc8:	469e      	mov	lr, r3
 8007fca:	4770      	bx	lr

08007fcc <_fini>:
 8007fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fce:	bf00      	nop
 8007fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd2:	bc08      	pop	{r3}
 8007fd4:	469e      	mov	lr, r3
 8007fd6:	4770      	bx	lr
