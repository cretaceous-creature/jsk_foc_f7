
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007438  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08007638  08007638  00017638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000000  080079a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004490  20000028  080079c8  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200044b8  080079c8  000244b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_line   00011473  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0003ec6a  00000000  00000000  000314c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006b61  00000000  00000000  00070133  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000015f0  00000000  00000000  00076c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004e10  00000000  00000000  00078288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ca9d  00000000  00000000  0007d098  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008c8b  00000000  00000000  00099b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000a27c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004dd4  00000000  00000000  000a283c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000028 	.word	0x20000028
 800021c:	00000000 	.word	0x00000000
 8000220:	08007620 	.word	0x08007620

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000002c 	.word	0x2000002c
 800023c:	08007620 	.word	0x08007620

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b97a 	b.w	800054c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	468c      	mov	ip, r1
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	9e08      	ldr	r6, [sp, #32]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d151      	bne.n	8000324 <__udivmoddi4+0xb4>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d96d      	bls.n	8000362 <__udivmoddi4+0xf2>
 8000286:	fab2 fe82 	clz	lr, r2
 800028a:	f1be 0f00 	cmp.w	lr, #0
 800028e:	d00b      	beq.n	80002a8 <__udivmoddi4+0x38>
 8000290:	f1ce 0c20 	rsb	ip, lr, #32
 8000294:	fa01 f50e 	lsl.w	r5, r1, lr
 8000298:	fa20 fc0c 	lsr.w	ip, r0, ip
 800029c:	fa02 f70e 	lsl.w	r7, r2, lr
 80002a0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002a4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ac:	0c25      	lsrs	r5, r4, #16
 80002ae:	fbbc f8fa 	udiv	r8, ip, sl
 80002b2:	fa1f f987 	uxth.w	r9, r7
 80002b6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002be:	fb08 f309 	mul.w	r3, r8, r9
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x6c>
 80002c6:	19ed      	adds	r5, r5, r7
 80002c8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002cc:	f080 8123 	bcs.w	8000516 <__udivmoddi4+0x2a6>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	f240 8120 	bls.w	8000516 <__udivmoddi4+0x2a6>
 80002d6:	f1a8 0802 	sub.w	r8, r8, #2
 80002da:	443d      	add	r5, r7
 80002dc:	1aed      	subs	r5, r5, r3
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002e4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	fb00 f909 	mul.w	r9, r0, r9
 80002f0:	45a1      	cmp	r9, r4
 80002f2:	d909      	bls.n	8000308 <__udivmoddi4+0x98>
 80002f4:	19e4      	adds	r4, r4, r7
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	f080 810a 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 80002fe:	45a1      	cmp	r9, r4
 8000300:	f240 8107 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000304:	3802      	subs	r0, #2
 8000306:	443c      	add	r4, r7
 8000308:	eba4 0409 	sub.w	r4, r4, r9
 800030c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000310:	2100      	movs	r1, #0
 8000312:	2e00      	cmp	r6, #0
 8000314:	d061      	beq.n	80003da <__udivmoddi4+0x16a>
 8000316:	fa24 f40e 	lsr.w	r4, r4, lr
 800031a:	2300      	movs	r3, #0
 800031c:	6034      	str	r4, [r6, #0]
 800031e:	6073      	str	r3, [r6, #4]
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	428b      	cmp	r3, r1
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0xc8>
 8000328:	2e00      	cmp	r6, #0
 800032a:	d054      	beq.n	80003d6 <__udivmoddi4+0x166>
 800032c:	2100      	movs	r1, #0
 800032e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000332:	4608      	mov	r0, r1
 8000334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000338:	fab3 f183 	clz	r1, r3
 800033c:	2900      	cmp	r1, #0
 800033e:	f040 808e 	bne.w	800045e <__udivmoddi4+0x1ee>
 8000342:	42ab      	cmp	r3, r5
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xdc>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80fa 	bhi.w	8000540 <__udivmoddi4+0x2d0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb65 0503 	sbc.w	r5, r5, r3
 8000352:	2001      	movs	r0, #1
 8000354:	46ac      	mov	ip, r5
 8000356:	2e00      	cmp	r6, #0
 8000358:	d03f      	beq.n	80003da <__udivmoddi4+0x16a>
 800035a:	e886 1010 	stmia.w	r6, {r4, ip}
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	b912      	cbnz	r2, 800036a <__udivmoddi4+0xfa>
 8000364:	2701      	movs	r7, #1
 8000366:	fbb7 f7f2 	udiv	r7, r7, r2
 800036a:	fab7 fe87 	clz	lr, r7
 800036e:	f1be 0f00 	cmp.w	lr, #0
 8000372:	d134      	bne.n	80003de <__udivmoddi4+0x16e>
 8000374:	1beb      	subs	r3, r5, r7
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	2101      	movs	r1, #1
 800037e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000382:	0c25      	lsrs	r5, r4, #16
 8000384:	fb02 3318 	mls	r3, r2, r8, r3
 8000388:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038c:	fb0c f308 	mul.w	r3, ip, r8
 8000390:	42ab      	cmp	r3, r5
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x134>
 8000394:	19ed      	adds	r5, r5, r7
 8000396:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x132>
 800039c:	42ab      	cmp	r3, r5
 800039e:	f200 80d1 	bhi.w	8000544 <__udivmoddi4+0x2d4>
 80003a2:	4680      	mov	r8, r0
 80003a4:	1aed      	subs	r5, r5, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ac:	fb02 5510 	mls	r5, r2, r0, r5
 80003b0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003b4:	fb0c fc00 	mul.w	ip, ip, r0
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x15c>
 80003bc:	19e4      	adds	r4, r4, r7
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x15a>
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	f200 80b8 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 040c 	sub.w	r4, r4, ip
 80003d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003d4:	e79d      	b.n	8000312 <__udivmoddi4+0xa2>
 80003d6:	4631      	mov	r1, r6
 80003d8:	4630      	mov	r0, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	f1ce 0420 	rsb	r4, lr, #32
 80003e2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ea:	fa20 f804 	lsr.w	r8, r0, r4
 80003ee:	0c3a      	lsrs	r2, r7, #16
 80003f0:	fa25 f404 	lsr.w	r4, r5, r4
 80003f4:	ea48 0803 	orr.w	r8, r8, r3
 80003f8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003fc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000400:	fb02 4411 	mls	r4, r2, r1, r4
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800040c:	fb01 f30c 	mul.w	r3, r1, ip
 8000410:	42ab      	cmp	r3, r5
 8000412:	fa00 f40e 	lsl.w	r4, r0, lr
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x1bc>
 8000418:	19ed      	adds	r5, r5, r7
 800041a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800041e:	f080 808a 	bcs.w	8000536 <__udivmoddi4+0x2c6>
 8000422:	42ab      	cmp	r3, r5
 8000424:	f240 8087 	bls.w	8000536 <__udivmoddi4+0x2c6>
 8000428:	3902      	subs	r1, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aeb      	subs	r3, r5, r3
 800042e:	fa1f f588 	uxth.w	r5, r8
 8000432:	fbb3 f0f2 	udiv	r0, r3, r2
 8000436:	fb02 3310 	mls	r3, r2, r0, r3
 800043a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043e:	fb00 f30c 	mul.w	r3, r0, ip
 8000442:	42ab      	cmp	r3, r5
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x1e6>
 8000446:	19ed      	adds	r5, r5, r7
 8000448:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044c:	d26f      	bcs.n	800052e <__udivmoddi4+0x2be>
 800044e:	42ab      	cmp	r3, r5
 8000450:	d96d      	bls.n	800052e <__udivmoddi4+0x2be>
 8000452:	3802      	subs	r0, #2
 8000454:	443d      	add	r5, r7
 8000456:	1aeb      	subs	r3, r5, r3
 8000458:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045c:	e78f      	b.n	800037e <__udivmoddi4+0x10e>
 800045e:	f1c1 0720 	rsb	r7, r1, #32
 8000462:	fa22 f807 	lsr.w	r8, r2, r7
 8000466:	408b      	lsls	r3, r1
 8000468:	fa05 f401 	lsl.w	r4, r5, r1
 800046c:	ea48 0303 	orr.w	r3, r8, r3
 8000470:	fa20 fe07 	lsr.w	lr, r0, r7
 8000474:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000478:	40fd      	lsrs	r5, r7
 800047a:	ea4e 0e04 	orr.w	lr, lr, r4
 800047e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000482:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000486:	fb0c 5519 	mls	r5, ip, r9, r5
 800048a:	fa1f f883 	uxth.w	r8, r3
 800048e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000492:	fb09 f408 	mul.w	r4, r9, r8
 8000496:	42ac      	cmp	r4, r5
 8000498:	fa02 f201 	lsl.w	r2, r2, r1
 800049c:	fa00 fa01 	lsl.w	sl, r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x244>
 80004a2:	18ed      	adds	r5, r5, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	d243      	bcs.n	8000532 <__udivmoddi4+0x2c2>
 80004aa:	42ac      	cmp	r4, r5
 80004ac:	d941      	bls.n	8000532 <__udivmoddi4+0x2c2>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	441d      	add	r5, r3
 80004b4:	1b2d      	subs	r5, r5, r4
 80004b6:	fa1f fe8e 	uxth.w	lr, lr
 80004ba:	fbb5 f0fc 	udiv	r0, r5, ip
 80004be:	fb0c 5510 	mls	r5, ip, r0, r5
 80004c2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45a0      	cmp	r8, r4
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x26e>
 80004ce:	18e4      	adds	r4, r4, r3
 80004d0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80004d4:	d229      	bcs.n	800052a <__udivmoddi4+0x2ba>
 80004d6:	45a0      	cmp	r8, r4
 80004d8:	d927      	bls.n	800052a <__udivmoddi4+0x2ba>
 80004da:	3802      	subs	r0, #2
 80004dc:	441c      	add	r4, r3
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba4 0408 	sub.w	r4, r4, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454c      	cmp	r4, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	464d      	mov	r5, r9
 80004f0:	d315      	bcc.n	800051e <__udivmoddi4+0x2ae>
 80004f2:	d012      	beq.n	800051a <__udivmoddi4+0x2aa>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x29c>
 80004f6:	ebba 030e 	subs.w	r3, sl, lr
 80004fa:	eb64 0405 	sbc.w	r4, r4, r5
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40cb      	lsrs	r3, r1
 8000504:	431f      	orrs	r7, r3
 8000506:	40cc      	lsrs	r4, r1
 8000508:	6037      	str	r7, [r6, #0]
 800050a:	6074      	str	r4, [r6, #4]
 800050c:	2100      	movs	r1, #0
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	4618      	mov	r0, r3
 8000514:	e6f8      	b.n	8000308 <__udivmoddi4+0x98>
 8000516:	4690      	mov	r8, r2
 8000518:	e6e0      	b.n	80002dc <__udivmoddi4+0x6c>
 800051a:	45c2      	cmp	sl, r8
 800051c:	d2ea      	bcs.n	80004f4 <__udivmoddi4+0x284>
 800051e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000522:	eb69 0503 	sbc.w	r5, r9, r3
 8000526:	3801      	subs	r0, #1
 8000528:	e7e4      	b.n	80004f4 <__udivmoddi4+0x284>
 800052a:	4628      	mov	r0, r5
 800052c:	e7d7      	b.n	80004de <__udivmoddi4+0x26e>
 800052e:	4640      	mov	r0, r8
 8000530:	e791      	b.n	8000456 <__udivmoddi4+0x1e6>
 8000532:	4681      	mov	r9, r0
 8000534:	e7be      	b.n	80004b4 <__udivmoddi4+0x244>
 8000536:	4601      	mov	r1, r0
 8000538:	e778      	b.n	800042c <__udivmoddi4+0x1bc>
 800053a:	3802      	subs	r0, #2
 800053c:	443c      	add	r4, r7
 800053e:	e745      	b.n	80003cc <__udivmoddi4+0x15c>
 8000540:	4608      	mov	r0, r1
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xe6>
 8000544:	f1a8 0802 	sub.w	r8, r8, #2
 8000548:	443d      	add	r5, r7
 800054a:	e72b      	b.n	80003a4 <__udivmoddi4+0x134>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000588 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000554:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000556:	e003      	b.n	8000560 <LoopCopyDataInit>

08000558 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800055a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800055c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800055e:	3104      	adds	r1, #4

08000560 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000564:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000566:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000568:	d3f6      	bcc.n	8000558 <CopyDataInit>
  ldr  r2, =_sbss
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800056c:	e002      	b.n	8000574 <LoopFillZerobss>

0800056e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800056e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000570:	f842 3b04 	str.w	r3, [r2], #4

08000574 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000576:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000578:	d3f9      	bcc.n	800056e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800057a:	f002 f823 	bl	80025c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057e:	f006 fa19 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000582:	f001 fb33 	bl	8001bec <main>
  bx  lr    
 8000586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000588:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800058c:	080079a0 	.word	0x080079a0
  ldr  r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000594:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8000598:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 800059c:	200044b8 	.word	0x200044b8

080005a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC_IRQHandler>
 80005a2:	0000      	movs	r0, r0
 80005a4:	0000      	movs	r0, r0
	...

080005a8 <StartcontrolTask>:
 * Start FOC control task...
 * clark -> park -> control -> rev park -> rev clark -> PWM
 *
 */
void StartcontrolTask(void const * argument)
{
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005aa:	ed2d 8b10 	vpush	{d8-d15}
	float integra_Cd = 0;
	float integra_Cq = 0;
	float lastq = 0, lastd = 0;  //incremental control
	float vd_st = 0, vq_st = 0;
 80005ae:	eddf aada 	vldr	s21, [pc, #872]	; 8000918 <StartcontrolTask+0x370>
{
 80005b2:	b093      	sub	sp, #76	; 0x4c
 80005b4:	4cd9      	ldr	r4, [pc, #868]	; (800091c <StartcontrolTask+0x374>)
	float vd_st = 0, vq_st = 0;
 80005b6:	eeb0 aa6a 	vmov.f32	s20, s21
 80005ba:	4dd9      	ldr	r5, [pc, #868]	; (8000920 <StartcontrolTask+0x378>)
	float lastq = 0, lastd = 0;  //incremental control
 80005bc:	eeb0 ca6a 	vmov.f32	s24, s21
 80005c0:	eef0 ca6a 	vmov.f32	s25, s21
				float eer_d = er_d - lastd;
				float eer_q = er_q - lastq;
				lastd = er_d; lastq = er_q;
				//get the control voltage

				float v_d = shuntdata.Kp * eer_d + shuntdata.Ki * er_d * 1e-1;
 80005c4:	ed9f 9bc6 	vldr	d9, [pc, #792]	; 80008e0 <StartcontrolTask+0x338>
			//reverse clarke
			float v_a,v_b,v_c;
			RevClarkeTrans(&v_a,&v_b,&v_c,v_apha,v_beta);

			//mapping the v_a v_b v_c to the real voltage and to the max duty of 2160
			v_a *= 1e-3;  //because of 1 is 1 mv
 80005c8:	ed9f 8bc7 	vldr	d8, [pc, #796]	; 80008e8 <StartcontrolTask+0x340>
		if(xQueueReceive(shuntQueueHandle,&shuntdata,2)==pdPASS)
 80005cc:	2300      	movs	r3, #0
 80005ce:	2202      	movs	r2, #2
 80005d0:	a907      	add	r1, sp, #28
 80005d2:	6820      	ldr	r0, [r4, #0]
 80005d4:	f005 fb0e 	bl	8005bf4 <xQueueGenericReceive>
 80005d8:	2801      	cmp	r0, #1
 80005da:	f040 8173 	bne.w	80008c4 <StartcontrolTask+0x31c>
			float c_a = ((float)shuntdata.cur_a)/1000;
 80005de:	eddd 7a07 	vldr	s15, [sp, #28]
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80005e2:	4603      	mov	r3, r0
			float c_b = ((float)shuntdata.cur_b)/1000;
 80005e4:	ed9d 7a08 	vldr	s14, [sp, #32]
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80005e8:	2200      	movs	r2, #0
			float c_a = ((float)shuntdata.cur_a)/1000;
 80005ea:	eeb8 fae7 	vcvt.f32.s32	s30, s15
 80005ee:	eddf 7acd 	vldr	s15, [pc, #820]	; 8000924 <StartcontrolTask+0x37c>
			float c_b = ((float)shuntdata.cur_b)/1000;
 80005f2:	eef8 fac7 	vcvt.f32.s32	s31, s14
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 80005f6:	a90c      	add	r1, sp, #48	; 0x30
 80005f8:	6828      	ldr	r0, [r5, #0]
			float c_a = ((float)shuntdata.cur_a)/1000;
 80005fa:	ee2f fa27 	vmul.f32	s30, s30, s15
			float c_b = ((float)shuntdata.cur_b)/1000;
 80005fe:	ee6f faa7 	vmul.f32	s31, s31, s15
			if(xQueuePeek(enchallQueueHandle,&encdata,0)!=pdPASS)
 8000602:	f005 faf7 	bl	8005bf4 <xQueueGenericReceive>
 8000606:	2801      	cmp	r0, #1
 8000608:	f040 8163 	bne.w	80008d2 <StartcontrolTask+0x32a>
			float theta = 4 * PI * (encdata.recon_counter - CENTERCOUNT
 800060c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	*apha = 1.5 * a;
 8000610:	eeb7 4a08 	vmov.f32	s8, #120	; 0x3fc00000  1.5
					+ shuntdata.centeroffset) / MAXCOUNT;
 8000614:	f99d 202a 	ldrsb.w	r2, [sp, #42]	; 0x2a
			float theta = 4 * PI * (encdata.recon_counter - CENTERCOUNT
 8000618:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
	*apha = 1.5 * a;
 800061c:	ee2f da04 	vmul.f32	s26, s30, s8
					+ shuntdata.centeroffset) / MAXCOUNT;
 8000620:	4413      	add	r3, r2
 8000622:	ee06 3a10 	vmov	s12, r3
 8000626:	ed9f 7bb2 	vldr	d7, [pc, #712]	; 80008f0 <StartcontrolTask+0x348>
 800062a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800062e:	ee26 6b07 	vmul.f64	d6, d6, d7
			float theta = 4 * PI * (encdata.recon_counter - CENTERCOUNT
 8000632:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	*i_d = apha*cos(theta) + beta*sin(theta);
 8000636:	eeb7 eac6 	vcvt.f64.f32	d14, s12
 800063a:	eeb0 0b4e 	vmov.f64	d0, d14
 800063e:	f006 f9f3 	bl	8006a28 <cos>
	*beta = sq3 * b + (sq3 * a)/2;
 8000642:	eeb7 7acf 	vcvt.f64.f32	d7, s30
 8000646:	eeb7 5aef 	vcvt.f64.f32	d5, s31
	*i_d = apha*cos(theta) + beta*sin(theta);
 800064a:	eeb0 bb40 	vmov.f64	d11, d0
 800064e:	eeb0 0b4e 	vmov.f64	d0, d14
	*beta = sq3 * b + (sq3 * a)/2;
 8000652:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 80008f8 <StartcontrolTask+0x350>
 8000656:	ee27 fb06 	vmul.f64	d15, d7, d6
 800065a:	ed9f 7ba9 	vldr	d7, [pc, #676]	; 8000900 <StartcontrolTask+0x358>
 800065e:	eea5 fb07 	vfma.f64	d15, d5, d7
	*i_d = apha*cos(theta) + beta*sin(theta);
 8000662:	f006 fa1d 	bl	8006aa0 <sin>
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 8000666:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
			float er_q = shuntdata.target_cur - c_q;
 800066a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 800066e:	ee05 3a10 	vmov	s10, r3
 8000672:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
	*i_d = apha*cos(theta) + beta*sin(theta);
 8000676:	eeb7 3acd 	vcvt.f64.f32	d3, s26
	*i_q = -apha*sin(theta) + beta*cos(theta);
 800067a:	eeb1 4a4d 	vneg.f32	s8, s26
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 800067e:	2b00      	cmp	r3, #0
 8000680:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000684:	bfb8      	it	lt
 8000686:	425b      	neglt	r3, r3
	*i_q = -apha*sin(theta) + beta*cos(theta);
 8000688:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
	*beta = sq3 * b + (sq3 * a)/2;
 800068c:	eeb7 fbcf 	vcvt.f32.f64	s30, d15
	*i_d = apha*cos(theta) + beta*sin(theta);
 8000690:	eeb7 facf 	vcvt.f64.f32	d15, s30
 8000694:	ee2f 6b00 	vmul.f64	d6, d15, d0
	*i_q = -apha*sin(theta) + beta*cos(theta);
 8000698:	ee2b 7b0f 	vmul.f64	d7, d11, d15
	*i_d = apha*cos(theta) + beta*sin(theta);
 800069c:	eea3 6b0b 	vfma.f64	d6, d3, d11
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80006a0:	eea0 7b04 	vfma.f64	d7, d0, d4
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 80006a4:	ed9f 3b98 	vldr	d3, [pc, #608]	; 8000908 <StartcontrolTask+0x360>
	*i_d = apha*cos(theta) + beta*sin(theta);
 80006a8:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 80006ac:	ee06 3a90 	vmov	s13, r3
 80006b0:	ee25 5b03 	vmul.f64	d5, d5, d3
 80006b4:	eeb8 4be6 	vcvt.f64.s32	d4, s13
			float er_d = T_ID - c_d;
 80006b8:	eeb1 3a46 	vneg.f32	s6, s12
	*i_q = -apha*sin(theta) + beta*cos(theta);
 80006bc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if(abs(encdata.w)>encdata.MAX_W*62.8)
 80006c0:	eeb4 4bc5 	vcmpe.f64	d4, d5
 80006c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c8:	f300 8100 	bgt.w	80008cc <StartcontrolTask+0x324>
			float er_q = shuntdata.target_cur - c_q;
 80006cc:	ee07 2a90 	vmov	s15, r2
 80006d0:	eef8 3ae7 	vcvt.f32.s32	s7, s15
 80006d4:	ee73 3ac7 	vsub.f32	s7, s7, s14
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 80006d8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80006dc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
				float eer_d = er_d - lastd;
 80006e0:	ee33 7a4c 	vsub.f32	s14, s6, s24
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 80006e4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
				if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 80006e8:	eddf 4a8f 	vldr	s9, [pc, #572]	; 8000928 <StartcontrolTask+0x380>
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 80006ec:	ee17 2a90 	vmov	r2, s15
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 80006f0:	eefd 7ac6 	vcvt.s32.f32	s15, s12
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 80006f4:	fa03 f282 	sxtah	r2, r3, r2
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 80006f8:	ee17 3a90 	vmov	r3, s15
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 80006fc:	2a00      	cmp	r2, #0
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 80006fe:	fa01 f383 	sxtah	r3, r1, r3
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 8000702:	bfb8      	it	lt
 8000704:	3201      	addlt	r2, #1
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000706:	2b00      	cmp	r3, #0
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 8000708:	ea4f 0262 	mov.w	r2, r2, asr #1
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 800070c:	bfb8      	it	lt
 800070e:	3301      	addlt	r3, #1
			conres.feedback_cq = ((int16_t)c_q + conres.feedback_cq)/2;
 8000710:	f8ad 2010 	strh.w	r2, [sp, #16]
				float v_d = shuntdata.Kp * eer_d + shuntdata.Ki * er_d * 1e-1;
 8000714:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000718:	105b      	asrs	r3, r3, #1
				float v_d = shuntdata.Kp * eer_d + shuntdata.Ki * er_d * 1e-1;
 800071a:	ee06 2a90 	vmov	s13, r2
 800071e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
			conres.feedback_cd = ((int16_t)c_d + conres.feedback_cd)/2;
 8000722:	f8ad 3012 	strh.w	r3, [sp, #18]
				float v_d = shuntdata.Kp * eer_d + shuntdata.Ki * er_d * 1e-1;
 8000726:	ee06 2a10 	vmov	s12, r2
 800072a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800072e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000732:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000736:	ee23 5a06 	vmul.f32	s10, s6, s12
 800073a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800073e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8000742:	eea5 7b09 	vfma.f64	d7, d5, d9
 8000746:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
				if((vd_st + v_d) <MAXVqd && (vd_st +v_d)>-MAXVqd &&
 800074a:	ee7a 5a07 	vadd.f32	s11, s20, s14
 800074e:	eef4 5a64 	vcmp.f32	s11, s9
 8000752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000756:	dd26      	ble.n	80007a6 <StartcontrolTask+0x1fe>
 8000758:	eddf 7a74 	vldr	s15, [pc, #464]	; 800092c <StartcontrolTask+0x384>
 800075c:	eef4 5a67 	vcmp.f32	s11, s15
 8000760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000764:	d51f      	bpl.n	80007a6 <StartcontrolTask+0x1fe>
				float eer_q = er_q - lastq;
 8000766:	ee33 5aec 	vsub.f32	s10, s7, s25
				float v_q = shuntdata.Kp * eer_q + shuntdata.Ki * er_q * 1e-1;
 800076a:	ee23 6a86 	vmul.f32	s12, s7, s12
 800076e:	ee25 5a26 	vmul.f32	s10, s10, s13
 8000772:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000776:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 800077a:	eea6 5b09 	vfma.f64	d5, d6, d9
 800077e:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
						(vq_st + v_q)<MAXVqd && (vq_st + v_q)>-MAXVqd)
 8000782:	ee7a 6a85 	vadd.f32	s13, s21, s10
 8000786:	eef4 6a64 	vcmp.f32	s13, s9
 800078a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078e:	dd0a      	ble.n	80007a6 <StartcontrolTask+0x1fe>
 8000790:	eef4 6a67 	vcmp.f32	s13, s15
 8000794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000798:	d505      	bpl.n	80007a6 <StartcontrolTask+0x1fe>
					vd_st += v_d + v_d;  //equals to Kp..
 800079a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800079e:	eea7 aa27 	vfma.f32	s20, s14, s15
					vq_st += v_q + v_q;
 80007a2:	eee5 aa27 	vfma.f32	s21, s10, s15
	*apha = v_d*cos(theta) - v_q*sin(theta);
 80007a6:	eeb7 5aea 	vcvt.f64.f32	d5, s21
	*vb = -apha/3 + beta/sq3;
 80007aa:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8000930 <StartcontrolTask+0x388>
	*apha = v_d*cos(theta) - v_q*sin(theta);
 80007ae:	eeb7 4aca 	vcvt.f64.f32	d4, s20
	*va = 2*apha/3;
 80007b2:	eddf 7a60 	vldr	s15, [pc, #384]	; 8000934 <StartcontrolTask+0x38c>
	if(v_small<-MAXDUTY) // <-2159..
 80007b6:	eddf 1a60 	vldr	s3, [pc, #384]	; 8000938 <StartcontrolTask+0x390>
	*apha = v_d*cos(theta) - v_q*sin(theta);
 80007ba:	ee25 6b40 	vnmul.f64	d6, d5, d0
	*beta = v_d*sin(theta) + v_q*cos(theta);
 80007be:	ee2b 5b05 	vmul.f64	d5, d11, d5
	*apha = v_d*cos(theta) - v_q*sin(theta);
 80007c2:	eeab 6b04 	vfma.f64	d6, d11, d4
	*beta = v_d*sin(theta) + v_q*cos(theta);
 80007c6:	eea0 5b04 	vfma.f64	d5, d0, d4
	*vb = -apha/3 + beta/sq3;
 80007ca:	ed9f 4b51 	vldr	d4, [pc, #324]	; 8000910 <StartcontrolTask+0x368>
	*apha = v_d*cos(theta) - v_q*sin(theta);
 80007ce:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	*vb = -apha/3 + beta/sq3;
 80007d2:	ee26 7a47 	vnmul.f32	s14, s12, s14
	*beta = v_d*sin(theta) + v_q*cos(theta);
 80007d6:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
	*va = 2*apha/3;
 80007da:	ee26 6a27 	vmul.f32	s12, s12, s15
	*vb = -apha/3 + beta/sq3;
 80007de:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80007e2:	eeb7 2ac5 	vcvt.f64.f32	d2, s10
			v_a *= 1e-3;  //because of 1 is 1 mv
 80007e6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	*vb = -apha/3 + beta/sq3;
 80007ea:	eeb0 5b47 	vmov.f64	d5, d7
	*vc = -apha/3 - beta/sq3;
 80007ee:	eea2 7b44 	vfms.f64	d7, d2, d4
	*vb = -apha/3 + beta/sq3;
 80007f2:	eea2 5b04 	vfma.f64	d5, d2, d4
			v_a *= 1e-3;  //because of 1 is 1 mv
 80007f6:	ee26 6b08 	vmul.f64	d6, d6, d8
	*vc = -apha/3 - beta/sq3;
 80007fa:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	*vb = -apha/3 + beta/sq3;
 80007fe:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
			v_b *= 1e-3;
			v_c *= 1e-3;
 8000802:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
			v_a *= 1e-3;  //because of 1 is 1 mv
 8000806:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			v_b *= 1e-3;
 800080a:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
			v_c *= 1e-3;
 800080e:	ee27 7b08 	vmul.f64	d7, d7, d8
			v_b *= 1e-3;
 8000812:	ee25 5b08 	vmul.f64	d5, d5, d8
			v_c *= 1e-3;
 8000816:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			v_b *= 1e-3;
 800081a:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
	v_big = v_big>*v_c?v_big:*v_c;
 800081e:	fec5 7a07 	vmaxnm.f32	s15, s10, s14
 8000822:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
	*v_c -= v_big;
 8000826:	ee37 7a67 	vsub.f32	s14, s14, s15
	*v_a -= v_big;
 800082a:	ee36 6a67 	vsub.f32	s12, s12, s15
	*v_b -= v_big;
 800082e:	ee35 5a67 	vsub.f32	s10, s10, s15
	v_small = *v_a<*v_b?*v_a:*v_b;
 8000832:	fec6 7a45 	vminnm.f32	s15, s12, s10
	v_small = v_small<*v_c?v_small:*v_c;
 8000836:	fec7 7a67 	vminnm.f32	s15, s14, s15
	if(v_small<-MAXDUTY) // <-2159..
 800083a:	eef4 7ae1 	vcmpe.f32	s15, s3
 800083e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000842:	d507      	bpl.n	8000854 <StartcontrolTask+0x2ac>
		*v_a *= -(MAXDUTY)/v_small;
 8000844:	eec1 6aa7 	vdiv.f32	s13, s3, s15
 8000848:	ee26 6a26 	vmul.f32	s12, s12, s13
		*v_b *= -(MAXDUTY)/v_small;
 800084c:	ee25 5a26 	vmul.f32	s10, s10, s13
		*v_c *= -(MAXDUTY)/v_small;  //then the data is proportional under maxduty
 8000850:	ee27 7a26 	vmul.f32	s14, s14, s13

			//find the bigest one.. sent the duty to 0;
			SVMDuty(&v_a,&v_b,&v_c);
			uint16_t cont_a = (uint16_t)(-v_a);
 8000854:	eeb1 6a46 	vneg.f32	s12, s12


			/******
			 * control the motor
			 */
			setMotorDuty(cont_a, cont_b, cont_c);
 8000858:	4a38      	ldr	r2, [pc, #224]	; (800093c <StartcontrolTask+0x394>)
			uint16_t cont_b = (uint16_t)(-v_b);
 800085a:	eeb1 5a45 	vneg.f32	s10, s10



			//for debug view..
			conres.duty_a = cont_a;conres.duty_b = cont_b;conres.duty_c = cont_c;
			xQueueOverwrite(conresQueueHandle,&conres);
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <StartcontrolTask+0x398>)
			uint16_t cont_c = (uint16_t)(-v_c);
 8000860:	eeb1 7a47 	vneg.f32	s14, s14
			setMotorDuty(cont_a, cont_b, cont_c);
 8000864:	f8d2 c000 	ldr.w	ip, [r2]
			uint16_t cont_a = (uint16_t)(-v_a);
 8000868:	eefc 7ac6 	vcvt.u32.f32	s15, s12
			xQueueOverwrite(conresQueueHandle,&conres);
 800086c:	a904      	add	r1, sp, #16
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	2200      	movs	r2, #0
 8000872:	2302      	movs	r3, #2
				lastd = er_d; lastq = er_q;
 8000874:	eeb0 ca43 	vmov.f32	s24, s6
			uint16_t cont_a = (uint16_t)(-v_a);
 8000878:	edcd 7a01 	vstr	s15, [sp, #4]
			uint16_t cont_b = (uint16_t)(-v_b);
 800087c:	eefc 7ac5 	vcvt.u32.f32	s15, s10
			uint16_t cont_a = (uint16_t)(-v_a);
 8000880:	f8bd e004 	ldrh.w	lr, [sp, #4]
				lastd = er_d; lastq = er_q;
 8000884:	eef0 ca63 	vmov.f32	s25, s7
			uint16_t cont_b = (uint16_t)(-v_b);
 8000888:	edcd 7a02 	vstr	s15, [sp, #8]
			uint16_t cont_c = (uint16_t)(-v_c);
 800088c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
			uint16_t cont_b = (uint16_t)(-v_b);
 8000890:	f8bd 7008 	ldrh.w	r7, [sp, #8]
			setMotorDuty(cont_a, cont_b, cont_c);
 8000894:	f8cc e034 	str.w	lr, [ip, #52]	; 0x34
			uint16_t cont_c = (uint16_t)(-v_c);
 8000898:	edcd 7a03 	vstr	s15, [sp, #12]
 800089c:	f8bd 600c 	ldrh.w	r6, [sp, #12]
			setMotorDuty(cont_a, cont_b, cont_c);
 80008a0:	f8cc 7038 	str.w	r7, [ip, #56]	; 0x38
 80008a4:	f8cc 603c 	str.w	r6, [ip, #60]	; 0x3c
			conres.duty_a = cont_a;conres.duty_b = cont_b;conres.duty_c = cont_c;
 80008a8:	f8ad e014 	strh.w	lr, [sp, #20]
 80008ac:	f8ad 7016 	strh.w	r7, [sp, #22]
 80008b0:	f8ad 6018 	strh.w	r6, [sp, #24]
			xQueueOverwrite(conresQueueHandle,&conres);
 80008b4:	f004 ff94 	bl	80057e0 <xQueueGenericSend>
			//to test the control frequency
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80008b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008bc:	4821      	ldr	r0, [pc, #132]	; (8000944 <StartcontrolTask+0x39c>)
 80008be:	f002 fbf3 	bl	80030a8 <HAL_GPIO_TogglePin>
 80008c2:	e683      	b.n	80005cc <StartcontrolTask+0x24>
//				shuntdata.cur_a -= 8600;
//				shuntdata.cur_b -= 18400;
//				shuntdata.cur_c = -shuntdata.cur_a - shuntdata.cur_b;
//				volatile float cc = ((float)shuntdata.cur_a)/100;
//			}
			osDelay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f004 fbd3 	bl	8005070 <osDelay>
	{
 80008ca:	e67f      	b.n	80005cc <StartcontrolTask+0x24>
				er_q = 0 - c_q;
 80008cc:	eef1 3a47 	vneg.f32	s7, s14
 80008d0:	e702      	b.n	80006d8 <StartcontrolTask+0x130>
		}
  }
}
 80008d2:	b013      	add	sp, #76	; 0x4c
 80008d4:	ecbd 8b10 	vpop	{d8-d15}
 80008d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008da:	bf00      	nop
 80008dc:	f3af 8000 	nop.w
 80008e0:	9999999a 	.word	0x9999999a
 80008e4:	3fb99999 	.word	0x3fb99999
 80008e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80008ec:	3f50624d 	.word	0x3f50624d
 80008f0:	a83a464d 	.word	0xa83a464d
 80008f4:	3f79bc69 	.word	0x3f79bc69
 80008f8:	1c0010c7 	.word	0x1c0010c7
 80008fc:	3febb67b 	.word	0x3febb67b
 8000900:	1c0010c7 	.word	0x1c0010c7
 8000904:	3ffbb67b 	.word	0x3ffbb67b
 8000908:	66666666 	.word	0x66666666
 800090c:	404f6666 	.word	0x404f6666
 8000910:	23205b49 	.word	0x23205b49
 8000914:	3fe279a7 	.word	0x3fe279a7
 8000918:	00000000 	.word	0x00000000
 800091c:	20004078 	.word	0x20004078
 8000920:	20004068 	.word	0x20004068
 8000924:	3a83126f 	.word	0x3a83126f
 8000928:	c9742400 	.word	0xc9742400
 800092c:	49742400 	.word	0x49742400
 8000930:	3eaaaaab 	.word	0x3eaaaaab
 8000934:	3f2aaaab 	.word	0x3f2aaaab
 8000938:	c5070000 	.word	0xc5070000
 800093c:	200041b4 	.word	0x200041b4
 8000940:	20004050 	.word	0x20004050
 8000944:	40020800 	.word	0x40020800

08000948 <HAL_UART_ErrorCallback>:
 * UART4 error handler
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	//error...
	Error_Handler();
 8000948:	f001 b9ba 	b.w	8001cc0 <Error_Handler>
 800094c:	0000      	movs	r0, r0
	...

08000950 <HAL_UART_RxCpltCallback>:
	 * if some other task B that has higher priority than A are being woken by the passing queue or semaphore,
	 * the xHigherPriorityTaskWoken will be set to pdTrue and we can directly perform a context switch and thus
	 * leaves the ISR and go to task B, if not so, we need to go back to task A and wait for a tick to switch to B.
	 */

	if(huart->Instance==huart4.Instance) //not necessary to check..
 8000950:	4ab1      	ldr	r2, [pc, #708]	; (8000c18 <HAL_UART_RxCpltCallback+0x2c8>)
 8000952:	6803      	ldr	r3, [r0, #0]
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	4293      	cmp	r3, r2
{
 8000958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800095c:	ed2d 8b04 	vpush	{d8-d9}
 8000960:	b087      	sub	sp, #28
	if(huart->Instance==huart4.Instance) //not necessary to check..
 8000962:	d055      	beq.n	8000a10 <HAL_UART_RxCpltCallback+0xc0>
			//call a context switch if needed..
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

	//USART 1 DMA interrupt
	else if(huart->Instance==huart1.Instance)
 8000964:	4aad      	ldr	r2, [pc, #692]	; (8000c1c <HAL_UART_RxCpltCallback+0x2cc>)
 8000966:	6812      	ldr	r2, [r2, #0]
 8000968:	4293      	cmp	r3, r2
 800096a:	d004      	beq.n	8000976 <HAL_UART_RxCpltCallback+0x26>
		}
		//continue DMA
		HAL_UART_DMAResume(&huart1);
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 800096c:	b007      	add	sp, #28
 800096e:	ecbd 8b04 	vpop	{d8-d9}
 8000972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(order_buff[i] == TXHEADER || order_buff[i] == TXHEADER +1)
 8000976:	4baa      	ldr	r3, [pc, #680]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d0>)
 8000978:	781a      	ldrb	r2, [r3, #0]
 800097a:	2af8      	cmp	r2, #248	; 0xf8
 800097c:	f000 80d9 	beq.w	8000b32 <HAL_UART_RxCpltCallback+0x1e2>
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	2af9      	cmp	r2, #249	; 0xf9
 8000984:	f000 80d5 	beq.w	8000b32 <HAL_UART_RxCpltCallback+0x1e2>
 8000988:	785a      	ldrb	r2, [r3, #1]
 800098a:	2af8      	cmp	r2, #248	; 0xf8
 800098c:	f000 8131 	beq.w	8000bf2 <HAL_UART_RxCpltCallback+0x2a2>
 8000990:	785a      	ldrb	r2, [r3, #1]
 8000992:	2af9      	cmp	r2, #249	; 0xf9
 8000994:	f000 812d 	beq.w	8000bf2 <HAL_UART_RxCpltCallback+0x2a2>
 8000998:	789a      	ldrb	r2, [r3, #2]
 800099a:	2af8      	cmp	r2, #248	; 0xf8
 800099c:	f000 812b 	beq.w	8000bf6 <HAL_UART_RxCpltCallback+0x2a6>
 80009a0:	789a      	ldrb	r2, [r3, #2]
 80009a2:	2af9      	cmp	r2, #249	; 0xf9
 80009a4:	f000 8127 	beq.w	8000bf6 <HAL_UART_RxCpltCallback+0x2a6>
 80009a8:	78da      	ldrb	r2, [r3, #3]
 80009aa:	2af8      	cmp	r2, #248	; 0xf8
 80009ac:	f000 8125 	beq.w	8000bfa <HAL_UART_RxCpltCallback+0x2aa>
 80009b0:	78da      	ldrb	r2, [r3, #3]
 80009b2:	2af9      	cmp	r2, #249	; 0xf9
 80009b4:	f000 8121 	beq.w	8000bfa <HAL_UART_RxCpltCallback+0x2aa>
 80009b8:	791a      	ldrb	r2, [r3, #4]
 80009ba:	2af8      	cmp	r2, #248	; 0xf8
 80009bc:	f000 811f 	beq.w	8000bfe <HAL_UART_RxCpltCallback+0x2ae>
 80009c0:	791a      	ldrb	r2, [r3, #4]
 80009c2:	2af9      	cmp	r2, #249	; 0xf9
 80009c4:	f000 811b 	beq.w	8000bfe <HAL_UART_RxCpltCallback+0x2ae>
 80009c8:	795a      	ldrb	r2, [r3, #5]
 80009ca:	2af8      	cmp	r2, #248	; 0xf8
 80009cc:	f000 816b 	beq.w	8000ca6 <HAL_UART_RxCpltCallback+0x356>
 80009d0:	795a      	ldrb	r2, [r3, #5]
 80009d2:	2af9      	cmp	r2, #249	; 0xf9
 80009d4:	f000 8167 	beq.w	8000ca6 <HAL_UART_RxCpltCallback+0x356>
 80009d8:	799a      	ldrb	r2, [r3, #6]
 80009da:	2af8      	cmp	r2, #248	; 0xf8
 80009dc:	f000 81a2 	beq.w	8000d24 <HAL_UART_RxCpltCallback+0x3d4>
 80009e0:	799a      	ldrb	r2, [r3, #6]
 80009e2:	2af9      	cmp	r2, #249	; 0xf9
 80009e4:	f000 819e 	beq.w	8000d24 <HAL_UART_RxCpltCallback+0x3d4>
		HAL_UART_DMAResume(&huart1);
 80009e8:	488c      	ldr	r0, [pc, #560]	; (8000c1c <HAL_UART_RxCpltCallback+0x2cc>)
 80009ea:	f004 f875 	bl	8004ad8 <HAL_UART_DMAResume>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80009ee:	4b8d      	ldr	r3, [pc, #564]	; (8000c24 <HAL_UART_RxCpltCallback+0x2d4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0ba      	beq.n	800096c <HAL_UART_RxCpltCallback+0x1c>
 80009f6:	4b8c      	ldr	r3, [pc, #560]	; (8000c28 <HAL_UART_RxCpltCallback+0x2d8>)
 80009f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	f3bf 8f4f 	dsb	sy
 8000a02:	f3bf 8f6f 	isb	sy
}
 8000a06:	b007      	add	sp, #28
 8000a08:	ecbd 8b04 	vpop	{d8-d9}
 8000a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000a10:	ed9f 9b7d 	vldr	d9, [pc, #500]	; 8000c08 <HAL_UART_RxCpltCallback+0x2b8>
							enchall.w = (int16_t)(PI*v_all/100);
 8000a14:	ed9f 8b7e 	vldr	d8, [pc, #504]	; 8000c10 <HAL_UART_RxCpltCallback+0x2c0>
 8000a18:	2501      	movs	r5, #1
 8000a1a:	2400      	movs	r4, #0
 8000a1c:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8000c50 <HAL_UART_RxCpltCallback+0x300>
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000a20:	f8df a228 	ldr.w	sl, [pc, #552]	; 8000c4c <HAL_UART_RxCpltCallback+0x2fc>
			if(enchall_buff[i] == TXHEADER)
 8000a24:	f818 3004 	ldrb.w	r3, [r8, r4]
 8000a28:	2bf8      	cmp	r3, #248	; 0xf8
 8000a2a:	d00b      	beq.n	8000a44 <HAL_UART_RxCpltCallback+0xf4>
		for(int i=0; i<UART4BYTE; i++)
 8000a2c:	3401      	adds	r4, #1
 8000a2e:	3501      	adds	r5, #1
 8000a30:	2c05      	cmp	r4, #5
 8000a32:	d1f7      	bne.n	8000a24 <HAL_UART_RxCpltCallback+0xd4>
		HAL_UART_DMAResume(&huart4);
 8000a34:	4878      	ldr	r0, [pc, #480]	; (8000c18 <HAL_UART_RxCpltCallback+0x2c8>)
 8000a36:	f004 f84f 	bl	8004ad8 <HAL_UART_DMAResume>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a3a:	4b7c      	ldr	r3, [pc, #496]	; (8000c2c <HAL_UART_RxCpltCallback+0x2dc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d094      	beq.n	800096c <HAL_UART_RxCpltCallback+0x1c>
 8000a42:	e7d8      	b.n	80009f6 <HAL_UART_RxCpltCallback+0xa6>
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 8000a44:	2c04      	cmp	r4, #4
 8000a46:	f000 82a3 	beq.w	8000f90 <HAL_UART_RxCpltCallback+0x640>
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 8000a4a:	2d04      	cmp	r5, #4
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 8000a4c:	b2eb      	uxtb	r3, r5
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 8000a4e:	d06d      	beq.n	8000b2c <HAL_UART_RxCpltCallback+0x1dc>
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	b2d2      	uxtb	r2, r2
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 8000a54:	f818 1003 	ldrb.w	r1, [r8, r3]
 8000a58:	060e      	lsls	r6, r1, #24
 8000a5a:	d5e7      	bpl.n	8000a2c <HAL_UART_RxCpltCallback+0xdc>
 8000a5c:	f818 1002 	ldrb.w	r1, [r8, r2]
 8000a60:	f011 0f60 	tst.w	r1, #96	; 0x60
 8000a64:	d0e2      	beq.n	8000a2c <HAL_UART_RxCpltCallback+0xdc>
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000a66:	f818 7003 	ldrb.w	r7, [r8, r3]
					uint8_t b1 = t==UART4BYTE-1?0:t+1;
 8000a6a:	2a04      	cmp	r2, #4
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 8000a6c:	f818 6003 	ldrb.w	r6, [r8, r3]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 8000a70:	f818 1003 	ldrb.w	r1, [r8, r3]
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000a74:	f3c7 1780 	ubfx	r7, r7, #6, #1
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 8000a78:	f818 0003 	ldrb.w	r0, [r8, r3]
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 8000a7c:	f3c6 1640 	ubfx	r6, r6, #5, #1
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 8000a80:	f3c1 0382 	ubfx	r3, r1, #2, #3
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 8000a84:	f818 1002 	ldrb.w	r1, [r8, r2]
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 8000a88:	f000 0003 	and.w	r0, r0, #3
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000a8c:	f88a 7000 	strb.w	r7, [sl]
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 8000a90:	f001 011f 	and.w	r1, r1, #31
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 8000a94:	f88a 6001 	strb.w	r6, [sl, #1]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 8000a98:	f88a 3002 	strb.w	r3, [sl, #2]
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 8000a9c:	f88a 0003 	strb.w	r0, [sl, #3]
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 8000aa0:	f88a 1004 	strb.w	r1, [sl, #4]
					uint8_t b1 = t==UART4BYTE-1?0:t+1;
 8000aa4:	f000 810d 	beq.w	8000cc2 <HAL_UART_RxCpltCallback+0x372>
 8000aa8:	1c56      	adds	r6, r2, #1
 8000aaa:	b2f6      	uxtb	r6, r6
					uint8_t b2 = b1==UART4BYTE-1?0:b1+1;
 8000aac:	2e04      	cmp	r6, #4
 8000aae:	f000 815a 	beq.w	8000d66 <HAL_UART_RxCpltCallback+0x416>
 8000ab2:	1c93      	adds	r3, r2, #2
 8000ab4:	b2db      	uxtb	r3, r3
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000ab6:	f818 2006 	ldrb.w	r2, [r8, r6]
					if(enchall.calc_tag == 2) //all 0
 8000aba:	2802      	cmp	r0, #2
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000abc:	f818 3003 	ldrb.w	r3, [r8, r3]
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000ac0:	f88a 2005 	strb.w	r2, [sl, #5]
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000ac4:	f88a 3006 	strb.w	r3, [sl, #6]
					if(enchall.calc_tag == 2) //all 0
 8000ac8:	f000 80ef 	beq.w	8000caa <HAL_UART_RxCpltCallback+0x35a>
					else if(enchall.calc_tag == 3) //all 1    except the last 5 bits... other bits are 1
 8000acc:	2803      	cmp	r0, #3
 8000ace:	f000 813d 	beq.w	8000d4c <HAL_UART_RxCpltCallback+0x3fc>
						if(enchall.enc_counter-last5bitsdata>16) //overflowed..
 8000ad2:	4857      	ldr	r0, [pc, #348]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e0>)
						flag = 0;
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	4a57      	ldr	r2, [pc, #348]	; (8000c34 <HAL_UART_RxCpltCallback+0x2e4>)
						if(enchall.enc_counter-last5bitsdata>16) //overflowed..
 8000ad8:	8803      	ldrh	r3, [r0, #0]
						flag = 0;
 8000ada:	7016      	strb	r6, [r2, #0]
						if(enchall.enc_counter-last5bitsdata>16) //overflowed..
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	1acb      	subs	r3, r1, r3
 8000ae0:	2b10      	cmp	r3, #16
 8000ae2:	f340 8123 	ble.w	8000d2c <HAL_UART_RxCpltCallback+0x3dc>
							enchall.recon_counter = (enchall.recon_counter - 32)&0xFFE0|enchall.enc_counter;
 8000ae6:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8000aea:	b28e      	uxth	r6, r1
 8000aec:	3b20      	subs	r3, #32
 8000aee:	f023 031f 	bic.w	r3, r3, #31
 8000af2:	430b      	orrs	r3, r1
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	f8aa 3008 	strh.w	r3, [sl, #8]
					if(fivetimecount--<=0&&cnt==lasttick)
 8000afa:	4a4f      	ldr	r2, [pc, #316]	; (8000c38 <HAL_UART_RxCpltCallback+0x2e8>)
					last5bitsdata = enchall.enc_counter;
 8000afc:	8006      	strh	r6, [r0, #0]
					if(fivetimecount--<=0&&cnt==lasttick)
 8000afe:	7811      	ldrb	r1, [r2, #0]
 8000b00:	b249      	sxtb	r1, r1
 8000b02:	1e48      	subs	r0, r1, #1
 8000b04:	2900      	cmp	r1, #0
 8000b06:	b240      	sxtb	r0, r0
 8000b08:	7010      	strb	r0, [r2, #0]
 8000b0a:	f340 80dd 	ble.w	8000cc8 <HAL_UART_RxCpltCallback+0x378>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 8000b0e:	2100      	movs	r1, #0
 8000b10:	484a      	ldr	r0, [pc, #296]	; (8000c3c <HAL_UART_RxCpltCallback+0x2ec>)
 8000b12:	f001 ffaf 	bl	8002a74 <HAL_DFSDM_FilterPollForRegConversion>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	f000 809c 	beq.w	8000c54 <HAL_UART_RxCpltCallback+0x304>
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000b1c:	4848      	ldr	r0, [pc, #288]	; (8000c40 <HAL_UART_RxCpltCallback+0x2f0>)
 8000b1e:	2302      	movs	r3, #2
 8000b20:	4a42      	ldr	r2, [pc, #264]	; (8000c2c <HAL_UART_RxCpltCallback+0x2dc>)
 8000b22:	4651      	mov	r1, sl
 8000b24:	6800      	ldr	r0, [r0, #0]
 8000b26:	f004 fff5 	bl	8005b14 <xQueueGenericSendFromISR>
 8000b2a:	e77f      	b.n	8000a2c <HAL_UART_RxCpltCallback+0xdc>
 8000b2c:	462b      	mov	r3, r5
				uint8_t t = s==UART4BYTE-1?0:s+1; //third byte   011x|xxxx
 8000b2e:	2200      	movs	r2, #0
 8000b30:	e790      	b.n	8000a54 <HAL_UART_RxCpltCallback+0x104>
			if(order_buff[i] == TXHEADER || order_buff[i] == TXHEADER +1)
 8000b32:	2400      	movs	r4, #0
				uint8_t s = i==UART1BYTE-1?0:i+1; //second byte  1xxx|xxxx
 8000b34:	b2e1      	uxtb	r1, r4
 8000b36:	1c4a      	adds	r2, r1, #1
				uint8_t t = s==UART1BYTE-1?0:s+1; //third byte   011x|xxxx
 8000b38:	2a06      	cmp	r2, #6
 8000b3a:	d012      	beq.n	8000b62 <HAL_UART_RxCpltCallback+0x212>
 8000b3c:	3102      	adds	r1, #2
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000b3e:	5c98      	ldrb	r0, [r3, r2]
 8000b40:	0600      	lsls	r0, r0, #24
 8000b42:	d410      	bmi.n	8000b66 <HAL_UART_RxCpltCallback+0x216>
				xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000b44:	493f      	ldr	r1, [pc, #252]	; (8000c44 <HAL_UART_RxCpltCallback+0x2f4>)
 8000b46:	2300      	movs	r3, #0
 8000b48:	4a36      	ldr	r2, [pc, #216]	; (8000c24 <HAL_UART_RxCpltCallback+0x2d4>)
 8000b4a:	6808      	ldr	r0, [r1, #0]
 8000b4c:	493e      	ldr	r1, [pc, #248]	; (8000c48 <HAL_UART_RxCpltCallback+0x2f8>)
 8000b4e:	f004 ffe1 	bl	8005b14 <xQueueGenericSendFromISR>
				xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000b52:	493b      	ldr	r1, [pc, #236]	; (8000c40 <HAL_UART_RxCpltCallback+0x2f0>)
 8000b54:	2302      	movs	r3, #2
 8000b56:	4a33      	ldr	r2, [pc, #204]	; (8000c24 <HAL_UART_RxCpltCallback+0x2d4>)
 8000b58:	6808      	ldr	r0, [r1, #0]
 8000b5a:	493c      	ldr	r1, [pc, #240]	; (8000c4c <HAL_UART_RxCpltCallback+0x2fc>)
 8000b5c:	f004 ffda 	bl	8005b14 <xQueueGenericSendFromISR>
				break;
 8000b60:	e742      	b.n	80009e8 <HAL_UART_RxCpltCallback+0x98>
				uint8_t t = s==UART1BYTE-1?0:s+1; //third byte   011x|xxxx
 8000b62:	2100      	movs	r1, #0
 8000b64:	e7eb      	b.n	8000b3e <HAL_UART_RxCpltCallback+0x1ee>
				if(order_buff[s]&0x80&&order_buff[t]&0x60)
 8000b66:	5c58      	ldrb	r0, [r3, r1]
 8000b68:	f010 0f60 	tst.w	r0, #96	; 0x60
 8000b6c:	d0ea      	beq.n	8000b44 <HAL_UART_RxCpltCallback+0x1f4>
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000b6e:	5c9e      	ldrb	r6, [r3, r2]
					volatile uint8_t b1 = t==UART1BYTE-1?0:t+1;
 8000b70:	2906      	cmp	r1, #6
					motorcurrent.Ki = order_buff[t] & 0x9f;
 8000b72:	5c5d      	ldrb	r5, [r3, r1]
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000b74:	4834      	ldr	r0, [pc, #208]	; (8000c48 <HAL_UART_RxCpltCallback+0x2f8>)
 8000b76:	f006 067f 	and.w	r6, r6, #127	; 0x7f
					motorcurrent.Ki = order_buff[t] & 0x9f;
 8000b7a:	f005 059f 	and.w	r5, r5, #159	; 0x9f
					motorcurrent.Kp = order_buff[s] & 0x7f;
 8000b7e:	7306      	strb	r6, [r0, #12]
					motorcurrent.Ki = order_buff[t] & 0x9f;
 8000b80:	7345      	strb	r5, [r0, #13]
					volatile uint8_t b1 = t==UART1BYTE-1?0:t+1;
 8000b82:	f000 8123 	beq.w	8000dcc <HAL_UART_RxCpltCallback+0x47c>
 8000b86:	3101      	adds	r1, #1
 8000b88:	b2ca      	uxtb	r2, r1
 8000b8a:	f88d 200f 	strb.w	r2, [sp, #15]
					volatile uint8_t b2 = b1==UART1BYTE-1?0:b1+1;
 8000b8e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000b92:	2a06      	cmp	r2, #6
 8000b94:	f000 8118 	beq.w	8000dc8 <HAL_UART_RxCpltCallback+0x478>
 8000b98:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000b9c:	3201      	adds	r2, #1
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	f88d 2010 	strb.w	r2, [sp, #16]
					volatile uint8_t b3 = b2==UART1BYTE-1?0:b2+1;
 8000ba4:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000ba8:	2a06      	cmp	r2, #6
 8000baa:	f000 810b 	beq.w	8000dc4 <HAL_UART_RxCpltCallback+0x474>
 8000bae:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	f88d 2011 	strb.w	r2, [sp, #17]
					if(order_buff[i] == TXHEADER)
 8000bba:	5d1a      	ldrb	r2, [r3, r4]
 8000bbc:	2af8      	cmp	r2, #248	; 0xf8
 8000bbe:	f000 80dc 	beq.w	8000d7a <HAL_UART_RxCpltCallback+0x42a>
						motorcurrent.target_cur  =  *(int16_t *)(&order_buff[b1]);
 8000bc2:	f89d 200f 	ldrb.w	r2, [sp, #15]
						motorcurrent.centeroffset = *(int8_t*)&order_buff[b3];
 8000bc6:	f89d 1011 	ldrb.w	r1, [sp, #17]
						motorcurrent.target_cur  =  *(int16_t *)(&order_buff[b1]);
 8000bca:	5e9a      	ldrsh	r2, [r3, r2]
						motorcurrent.centeroffset = *(int8_t*)&order_buff[b3];
 8000bcc:	5c59      	ldrb	r1, [r3, r1]
						motorcurrent.target_cur  =  *(int16_t *)(&order_buff[b1]);
 8000bce:	8202      	strh	r2, [r0, #16]
						motorcurrent.centeroffset = *(int8_t*)&order_buff[b3];
 8000bd0:	7381      	strb	r1, [r0, #14]
					uint8_t b4 = b3==UART1BYTE-1?0:b3+1;
 8000bd2:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8000bd6:	2906      	cmp	r1, #6
 8000bd8:	f000 80cd 	beq.w	8000d76 <HAL_UART_RxCpltCallback+0x426>
 8000bdc:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8000be0:	3101      	adds	r1, #1
 8000be2:	b2c9      	uxtb	r1, r1
					enchall.MAX_W = order_buff[b4];
 8000be4:	5c59      	ldrb	r1, [r3, r1]
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_UART_RxCpltCallback+0x2fc>)
 8000be8:	7599      	strb	r1, [r3, #22]
					enchall.Kp = motorcurrent.Kp;
 8000bea:	729e      	strb	r6, [r3, #10]
					enchall.Ki = motorcurrent.Ki;
 8000bec:	72dd      	strb	r5, [r3, #11]
					enchall.target_cur = motorcurrent.target_cur;
 8000bee:	819a      	strh	r2, [r3, #12]
 8000bf0:	e7a8      	b.n	8000b44 <HAL_UART_RxCpltCallback+0x1f4>
		for(int i=0; i<UART1BYTE; i++)
 8000bf2:	2401      	movs	r4, #1
 8000bf4:	e79e      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x1e4>
 8000bf6:	2402      	movs	r4, #2
 8000bf8:	e79c      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x1e4>
 8000bfa:	2403      	movs	r4, #3
 8000bfc:	e79a      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x1e4>
 8000bfe:	2404      	movs	r4, #4
 8000c00:	e798      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x1e4>
 8000c02:	bf00      	nop
 8000c04:	f3af 8000 	nop.w
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	412e8480 	.word	0x412e8480
 8000c10:	09246bf0 	.word	0x09246bf0
 8000c14:	3fa015c2 	.word	0x3fa015c2
 8000c18:	20004444 	.word	0x20004444
 8000c1c:	20004364 	.word	0x20004364
 8000c20:	20003e70 	.word	0x20003e70
 8000c24:	200000ec 	.word	0x200000ec
 8000c28:	e000ed04 	.word	0xe000ed04
 8000c2c:	200000e8 	.word	0x200000e8
 8000c30:	2000004e 	.word	0x2000004e
 8000c34:	2000004c 	.word	0x2000004c
 8000c38:	20000018 	.word	0x20000018
 8000c3c:	20003e78 	.word	0x20003e78
 8000c40:	20004068 	.word	0x20004068
 8000c44:	20004078 	.word	0x20004078
 8000c48:	20000058 	.word	0x20000058
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20003e68 	.word	0x20003e68
							HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter1,0) == HAL_OK)
 8000c54:	4601      	mov	r1, r0
 8000c56:	48b8      	ldr	r0, [pc, #736]	; (8000f38 <HAL_UART_RxCpltCallback+0x5e8>)
 8000c58:	f001 ff0c 	bl	8002a74 <HAL_DFSDM_FilterPollForRegConversion>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	f47f af5c 	bne.w	8000b1c <HAL_UART_RxCpltCallback+0x1cc>
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000c64:	4fb5      	ldr	r7, [pc, #724]	; (8000f3c <HAL_UART_RxCpltCallback+0x5ec>)
 8000c66:	49b6      	ldr	r1, [pc, #728]	; (8000f40 <HAL_UART_RxCpltCallback+0x5f0>)
 8000c68:	48b6      	ldr	r0, [pc, #728]	; (8000f44 <HAL_UART_RxCpltCallback+0x5f4>)
 8000c6a:	f001 fef9 	bl	8002a60 <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 8000c6e:	49b6      	ldr	r1, [pc, #728]	; (8000f48 <HAL_UART_RxCpltCallback+0x5f8>)
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000c70:	6078      	str	r0, [r7, #4]
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 8000c72:	48b1      	ldr	r0, [pc, #708]	; (8000f38 <HAL_UART_RxCpltCallback+0x5e8>)
 8000c74:	f001 fef4 	bl	8002a60 <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_b -= 18400;
 8000c78:	6879      	ldr	r1, [r7, #4]
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 8000c7a:	f242 1298 	movw	r2, #8600	; 0x2198
						motorcurrent.cur_b -= 18400;
 8000c7e:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 8000f74 <HAL_UART_RxCpltCallback+0x624>
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000c82:	4633      	mov	r3, r6
						motorcurrent.cur_a -= 8600;
 8000c84:	4eb1      	ldr	r6, [pc, #708]	; (8000f4c <HAL_UART_RxCpltCallback+0x5fc>)
						motorcurrent.cur_b -= 18400;
 8000c86:	448e      	add	lr, r1
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 8000c88:	1a12      	subs	r2, r2, r0
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000c8a:	49b1      	ldr	r1, [pc, #708]	; (8000f50 <HAL_UART_RxCpltCallback+0x600>)
						motorcurrent.cur_a -= 8600;
 8000c8c:	4406      	add	r6, r0
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 8000c8e:	eba2 020e 	sub.w	r2, r2, lr
						motorcurrent.cur_b -= 18400;
 8000c92:	f8c7 e004 	str.w	lr, [r7, #4]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000c96:	6808      	ldr	r0, [r1, #0]
 8000c98:	4639      	mov	r1, r7
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 8000c9a:	60ba      	str	r2, [r7, #8]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000c9c:	4aad      	ldr	r2, [pc, #692]	; (8000f54 <HAL_UART_RxCpltCallback+0x604>)
						motorcurrent.cur_a -= 8600;
 8000c9e:	603e      	str	r6, [r7, #0]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 8000ca0:	f004 ff38 	bl	8005b14 <xQueueGenericSendFromISR>
 8000ca4:	e73a      	b.n	8000b1c <HAL_UART_RxCpltCallback+0x1cc>
		for(int i=0; i<UART1BYTE; i++)
 8000ca6:	2405      	movs	r4, #5
 8000ca8:	e744      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x1e4>
						if(flag==2)
 8000caa:	4aab      	ldr	r2, [pc, #684]	; (8000f58 <HAL_UART_RxCpltCallback+0x608>)
						enchall.recon_counter = enchall.enc_counter;  //only 5bit has number, other bits are 0
 8000cac:	b28e      	uxth	r6, r1
						if(flag==2)
 8000cae:	7813      	ldrb	r3, [r2, #0]
						enchall.recon_counter = enchall.enc_counter;  //only 5bit has number, other bits are 0
 8000cb0:	f8aa 6008 	strh.w	r6, [sl, #8]
						if(flag==2)
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d058      	beq.n	8000d6a <HAL_UART_RxCpltCallback+0x41a>
						flag = 1;
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4633      	mov	r3, r6
 8000cbc:	48a7      	ldr	r0, [pc, #668]	; (8000f5c <HAL_UART_RxCpltCallback+0x60c>)
 8000cbe:	7011      	strb	r1, [r2, #0]
 8000cc0:	e71b      	b.n	8000afa <HAL_UART_RxCpltCallback+0x1aa>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e6f6      	b.n	8000ab6 <HAL_UART_RxCpltCallback+0x166>
					if(fivetimecount--<=0&&cnt==lasttick)
 8000cc8:	49a5      	ldr	r1, [pc, #660]	; (8000f60 <HAL_UART_RxCpltCallback+0x610>)
 8000cca:	48a6      	ldr	r0, [pc, #664]	; (8000f64 <HAL_UART_RxCpltCallback+0x614>)
 8000ccc:	680f      	ldr	r7, [r1, #0]
 8000cce:	6806      	ldr	r6, [r0, #0]
 8000cd0:	42b7      	cmp	r7, r6
 8000cd2:	f47f af1c 	bne.w	8000b0e <HAL_UART_RxCpltCallback+0x1be>
						cnt = (int32_t)htim3.Instance->CNT;
 8000cd6:	4ea4      	ldr	r6, [pc, #656]	; (8000f68 <HAL_UART_RxCpltCallback+0x618>)
						cnt_e = cnt-lasttick;
 8000cd8:	f8df e29c 	ldr.w	lr, [pc, #668]	; 8000f78 <HAL_UART_RxCpltCallback+0x628>
						cnt = (int32_t)htim3.Instance->CNT;
 8000cdc:	6836      	ldr	r6, [r6, #0]
 8000cde:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8000ce0:	600e      	str	r6, [r1, #0]
						cnt_e = cnt-lasttick;
 8000ce2:	680e      	ldr	r6, [r1, #0]
 8000ce4:	6807      	ldr	r7, [r0, #0]
 8000ce6:	1bf6      	subs	r6, r6, r7
 8000ce8:	f8ce 6000 	str.w	r6, [lr]
						cnt_e = cnt_e<0?cnt_e+50000:cnt_e;
 8000cec:	f8de 6000 	ldr.w	r6, [lr]
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	f2c0 8115 	blt.w	8000f20 <HAL_UART_RxCpltCallback+0x5d0>
 8000cf6:	f8de 6000 	ldr.w	r6, [lr]
 8000cfa:	f8ce 6000 	str.w	r6, [lr]
						if(cnt_e>390&&cnt_e<400)
 8000cfe:	f8de 6000 	ldr.w	r6, [lr]
 8000d02:	f5b6 7fc3 	cmp.w	r6, #390	; 0x186
 8000d06:	dc69      	bgt.n	8000ddc <HAL_UART_RxCpltCallback+0x48c>
 8000d08:	f8df c270 	ldr.w	ip, [pc, #624]	; 8000f7c <HAL_UART_RxCpltCallback+0x62c>
						lasttick = cnt;
 8000d0c:	680e      	ldr	r6, [r1, #0]
						last_recon = enchall.recon_counter;
 8000d0e:	b21b      	sxth	r3, r3
						fivetimecount = 51;
 8000d10:	2133      	movs	r1, #51	; 0x33
						lasttick = cnt;
 8000d12:	6006      	str	r6, [r0, #0]
						last_recon = enchall.recon_counter;
 8000d14:	f8ac 3000 	strh.w	r3, [ip]
						enchall.timetick = cnt_e;
 8000d18:	f8de 3000 	ldr.w	r3, [lr]
						fivetimecount = 51;
 8000d1c:	7011      	strb	r1, [r2, #0]
						enchall.timetick = cnt_e;
 8000d1e:	f8ca 3010 	str.w	r3, [sl, #16]
 8000d22:	e6f4      	b.n	8000b0e <HAL_UART_RxCpltCallback+0x1be>
		for(int i=0; i<UART1BYTE; i++)
 8000d24:	2406      	movs	r4, #6
 8000d26:	2200      	movs	r2, #0
 8000d28:	2101      	movs	r1, #1
 8000d2a:	e708      	b.n	8000b3e <HAL_UART_RxCpltCallback+0x1ee>
						else if(enchall.enc_counter-last5bitsdata<-16)
 8000d2c:	8803      	ldrh	r3, [r0, #0]
 8000d2e:	b28e      	uxth	r6, r1
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	3310      	adds	r3, #16
							enchall.recon_counter = (enchall.recon_counter + 32)&0xFFE0|enchall.enc_counter;
 8000d36:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8000d3a:	bfb8      	it	lt
 8000d3c:	3320      	addlt	r3, #32
							enchall.recon_counter = enchall.recon_counter&0xFFE0|enchall.enc_counter;
 8000d3e:	f023 031f 	bic.w	r3, r3, #31
 8000d42:	430b      	orrs	r3, r1
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	f8aa 3008 	strh.w	r3, [sl, #8]
 8000d4a:	e6d6      	b.n	8000afa <HAL_UART_RxCpltCallback+0x1aa>
						if(flag==1)
 8000d4c:	4a82      	ldr	r2, [pc, #520]	; (8000f58 <HAL_UART_RxCpltCallback+0x608>)
						enchall.recon_counter = ALLONECOUNT + enchall.enc_counter;
 8000d4e:	b28e      	uxth	r6, r1
						if(flag==1)
 8000d50:	7811      	ldrb	r1, [r2, #0]
						enchall.recon_counter = ALLONECOUNT + enchall.enc_counter;
 8000d52:	f506 63f8 	add.w	r3, r6, #1984	; 0x7c0
						if(flag==1)
 8000d56:	2901      	cmp	r1, #1
						enchall.recon_counter = ALLONECOUNT + enchall.enc_counter;
 8000d58:	f8aa 3008 	strh.w	r3, [sl, #8]
						if(flag==1)
 8000d5c:	d038      	beq.n	8000dd0 <HAL_UART_RxCpltCallback+0x480>
						flag = 2;
 8000d5e:	2102      	movs	r1, #2
 8000d60:	487e      	ldr	r0, [pc, #504]	; (8000f5c <HAL_UART_RxCpltCallback+0x60c>)
 8000d62:	7011      	strb	r1, [r2, #0]
 8000d64:	e6c9      	b.n	8000afa <HAL_UART_RxCpltCallback+0x1aa>
 8000d66:	2300      	movs	r3, #0
 8000d68:	e6a5      	b.n	8000ab6 <HAL_UART_RxCpltCallback+0x166>
							enchall.z_count++;
 8000d6a:	f8ba 300e 	ldrh.w	r3, [sl, #14]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f8aa 300e 	strh.w	r3, [sl, #14]
 8000d74:	e7a0      	b.n	8000cb8 <HAL_UART_RxCpltCallback+0x368>
 8000d76:	2100      	movs	r1, #0
 8000d78:	e734      	b.n	8000be4 <HAL_UART_RxCpltCallback+0x294>
						motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000d7a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	5c9a      	ldrb	r2, [r3, r2]
 8000d82:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8000d86:	0212      	lsls	r2, r2, #8
 8000d88:	b2c9      	uxtb	r1, r1
 8000d8a:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8000d8e:	5c5c      	ldrb	r4, [r3, r1]
						if(order_buff[b2]&0x80) //minus
 8000d90:	f89d 1010 	ldrb.w	r1, [sp, #16]
						motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000d94:	4322      	orrs	r2, r4
						if(order_buff[b2]&0x80) //minus
 8000d96:	b2c9      	uxtb	r1, r1
						motorcurrent.target_cur =  (((int16_t)order_buff[b2]&0x7f) << 8) | order_buff[b1];
 8000d98:	8202      	strh	r2, [r0, #16]
						if(order_buff[b2]&0x80) //minus
 8000d9a:	5c59      	ldrb	r1, [r3, r1]
 8000d9c:	060f      	lsls	r7, r1, #24
 8000d9e:	f100 80c5 	bmi.w	8000f2c <HAL_UART_RxCpltCallback+0x5dc>
						motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000da2:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8000da6:	b2c9      	uxtb	r1, r1
 8000da8:	5c59      	ldrb	r1, [r3, r1]
						if(order_buff[b3]&0x80) //minus
 8000daa:	f89d 4011 	ldrb.w	r4, [sp, #17]
						motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000dae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
						if(order_buff[b3]&0x80) //minus
 8000db2:	b2e4      	uxtb	r4, r4
						motorcurrent.centeroffset = order_buff[b3]&0x7f;
 8000db4:	7381      	strb	r1, [r0, #14]
						if(order_buff[b3]&0x80) //minus
 8000db6:	5d1c      	ldrb	r4, [r3, r4]
 8000db8:	0624      	lsls	r4, r4, #24
 8000dba:	f57f af0a 	bpl.w	8000bd2 <HAL_UART_RxCpltCallback+0x282>
							motorcurrent.centeroffset = -motorcurrent.centeroffset;
 8000dbe:	4249      	negs	r1, r1
 8000dc0:	7381      	strb	r1, [r0, #14]
 8000dc2:	e706      	b.n	8000bd2 <HAL_UART_RxCpltCallback+0x282>
					volatile uint8_t b3 = b2==UART1BYTE-1?0:b2+1;
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e6f6      	b.n	8000bb6 <HAL_UART_RxCpltCallback+0x266>
					volatile uint8_t b2 = b1==UART1BYTE-1?0:b1+1;
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e6e9      	b.n	8000ba0 <HAL_UART_RxCpltCallback+0x250>
					volatile uint8_t b1 = t==UART1BYTE-1?0:t+1;
 8000dcc:	2200      	movs	r2, #0
 8000dce:	e6dc      	b.n	8000b8a <HAL_UART_RxCpltCallback+0x23a>
							enchall.z_count--;
 8000dd0:	f8ba 100e 	ldrh.w	r1, [sl, #14]
 8000dd4:	3901      	subs	r1, #1
 8000dd6:	f8aa 100e 	strh.w	r1, [sl, #14]
 8000dda:	e7c0      	b.n	8000d5e <HAL_UART_RxCpltCallback+0x40e>
						if(cnt_e>390&&cnt_e<400)
 8000ddc:	f8de 6000 	ldr.w	r6, [lr]
							volatile int16_t ct = enchall.recon_counter - last_recon;
 8000de0:	f8df c198 	ldr.w	ip, [pc, #408]	; 8000f7c <HAL_UART_RxCpltCallback+0x62c>
						if(cnt_e>390&&cnt_e<400)
 8000de4:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
 8000de8:	da90      	bge.n	8000d0c <HAL_UART_RxCpltCallback+0x3bc>
							volatile int16_t ct = enchall.recon_counter - last_recon;
 8000dea:	f8bc 6000 	ldrh.w	r6, [ip]
 8000dee:	1b9e      	subs	r6, r3, r6
 8000df0:	b236      	sxth	r6, r6
 8000df2:	f8ad 6012 	strh.w	r6, [sp, #18]
							ct = ct>1000?enchall.recon_counter-last_recon-2000:ct;
 8000df6:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000dfa:	b236      	sxth	r6, r6
 8000dfc:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 8000e00:	f340 80c2 	ble.w	8000f88 <HAL_UART_RxCpltCallback+0x638>
 8000e04:	f8bc 6000 	ldrh.w	r6, [ip]
 8000e08:	f5c6 4678 	rsb	r6, r6, #63488	; 0xf800
 8000e0c:	3630      	adds	r6, #48	; 0x30
 8000e0e:	441e      	add	r6, r3
 8000e10:	b236      	sxth	r6, r6
 8000e12:	f8ad 6012 	strh.w	r6, [sp, #18]
							ct = ct<-1000?enchall.recon_counter-last_recon+2000:ct;
 8000e16:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000e1a:	b236      	sxth	r6, r6
 8000e1c:	f516 7f7a 	cmn.w	r6, #1000	; 0x3e8
 8000e20:	f280 80ae 	bge.w	8000f80 <HAL_UART_RxCpltCallback+0x630>
 8000e24:	f8bc 6000 	ldrh.w	r6, [ip]
 8000e28:	f5c6 66fa 	rsb	r6, r6, #2000	; 0x7d0
 8000e2c:	441e      	add	r6, r3
 8000e2e:	b236      	sxth	r6, r6
 8000e30:	f8ad 6012 	strh.w	r6, [sp, #18]
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e34:	270c      	movs	r7, #12
 8000e36:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8000e3a:	f8de 6000 	ldr.w	r6, [lr]
 8000e3e:	fa0f fb8b 	sxth.w	fp, fp
 8000e42:	9601      	str	r6, [sp, #4]
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000e44:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000e48:	ed9e 5a00 	vldr	s10, [lr]
 8000e4c:	fa0f f986 	sxth.w	r9, r6
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e50:	4e46      	ldr	r6, [pc, #280]	; (8000f6c <HAL_UART_RxCpltCallback+0x61c>)
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000e52:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000e56:	ee07 9a10 	vmov	s14, r9
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e5a:	f896 9000 	ldrb.w	r9, [r6]
							volatile int32_t v_all = 0;
 8000e5e:	2600      	movs	r6, #0
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000e60:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e64:	fb07 f709 	mul.w	r7, r7, r9
							volatile int32_t v_all = 0;
 8000e68:	9605      	str	r6, [sp, #20]
							v_index = v_index+1>=MAX_V_FRAME?0:v_index+1;
 8000e6a:	f1b9 0f08 	cmp.w	r9, #8
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e6e:	4e40      	ldr	r6, [pc, #256]	; (8000f70 <HAL_UART_RxCpltCallback+0x620>)
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000e70:	ee27 7b09 	vmul.f64	d7, d7, d9
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e74:	f846 b007 	str.w	fp, [r6, r7]
 8000e78:	4437      	add	r7, r6
 8000e7a:	9e01      	ldr	r6, [sp, #4]
								v_all += v_buff[i][2];
 8000e7c:	f8dd b014 	ldr.w	fp, [sp, #20]
							v_buff[v_index][0] = ct;v_buff[v_index][1] = cnt_e;
 8000e80:	607e      	str	r6, [r7, #4]
								v_all += v_buff[i][2];
 8000e82:	4e3b      	ldr	r6, [pc, #236]	; (8000f70 <HAL_UART_RxCpltCallback+0x620>)
							v_buff[v_index][2] = 1e+6 * (int32_t)ct/cnt_e;
 8000e84:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000e88:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 8000e8c:	ed87 6a02 	vstr	s12, [r7, #8]
								v_all += v_buff[i][2];
 8000e90:	68b7      	ldr	r7, [r6, #8]
 8000e92:	6976      	ldr	r6, [r6, #20]
 8000e94:	445f      	add	r7, fp
 8000e96:	9705      	str	r7, [sp, #20]
 8000e98:	9f05      	ldr	r7, [sp, #20]
 8000e9a:	4437      	add	r7, r6
 8000e9c:	4e34      	ldr	r6, [pc, #208]	; (8000f70 <HAL_UART_RxCpltCallback+0x620>)
 8000e9e:	9705      	str	r7, [sp, #20]
 8000ea0:	9f05      	ldr	r7, [sp, #20]
 8000ea2:	6a36      	ldr	r6, [r6, #32]
 8000ea4:	4437      	add	r7, r6
 8000ea6:	4e32      	ldr	r6, [pc, #200]	; (8000f70 <HAL_UART_RxCpltCallback+0x620>)
 8000ea8:	9705      	str	r7, [sp, #20]
 8000eaa:	9f05      	ldr	r7, [sp, #20]
 8000eac:	6af6      	ldr	r6, [r6, #44]	; 0x2c
 8000eae:	4437      	add	r7, r6
 8000eb0:	4e2f      	ldr	r6, [pc, #188]	; (8000f70 <HAL_UART_RxCpltCallback+0x620>)
 8000eb2:	9705      	str	r7, [sp, #20]
 8000eb4:	9f05      	ldr	r7, [sp, #20]
 8000eb6:	6bb6      	ldr	r6, [r6, #56]	; 0x38
 8000eb8:	4437      	add	r7, r6
 8000eba:	4e2d      	ldr	r6, [pc, #180]	; (8000f70 <HAL_UART_RxCpltCallback+0x620>)
 8000ebc:	9705      	str	r7, [sp, #20]
 8000ebe:	9f05      	ldr	r7, [sp, #20]
 8000ec0:	6c76      	ldr	r6, [r6, #68]	; 0x44
 8000ec2:	4437      	add	r7, r6
 8000ec4:	4e2a      	ldr	r6, [pc, #168]	; (8000f70 <HAL_UART_RxCpltCallback+0x620>)
 8000ec6:	9705      	str	r7, [sp, #20]
 8000ec8:	6d36      	ldr	r6, [r6, #80]	; 0x50
 8000eca:	9f05      	ldr	r7, [sp, #20]
 8000ecc:	4437      	add	r7, r6
 8000ece:	4e28      	ldr	r6, [pc, #160]	; (8000f70 <HAL_UART_RxCpltCallback+0x620>)
 8000ed0:	9705      	str	r7, [sp, #20]
 8000ed2:	9f05      	ldr	r7, [sp, #20]
 8000ed4:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 8000ed6:	4437      	add	r7, r6
 8000ed8:	4e25      	ldr	r6, [pc, #148]	; (8000f70 <HAL_UART_RxCpltCallback+0x620>)
 8000eda:	9705      	str	r7, [sp, #20]
 8000edc:	9f05      	ldr	r7, [sp, #20]
 8000ede:	f8d6 b068 	ldr.w	fp, [r6, #104]	; 0x68
 8000ee2:	6f76      	ldr	r6, [r6, #116]	; 0x74
 8000ee4:	445f      	add	r7, fp
 8000ee6:	9705      	str	r7, [sp, #20]
 8000ee8:	9f05      	ldr	r7, [sp, #20]
 8000eea:	443e      	add	r6, r7
							v_all /= MAX_V_FRAME;
 8000eec:	f04f 070a 	mov.w	r7, #10
								v_all += v_buff[i][2];
 8000ef0:	9605      	str	r6, [sp, #20]
							v_all /= MAX_V_FRAME;
 8000ef2:	9e05      	ldr	r6, [sp, #20]
 8000ef4:	fb96 f6f7 	sdiv	r6, r6, r7
 8000ef8:	9605      	str	r6, [sp, #20]
							enchall.w = (int16_t)(PI*v_all/100);
 8000efa:	ed9d 7a05 	vldr	s14, [sp, #20]
 8000efe:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000f02:	ee27 7b08 	vmul.f64	d7, d7, d8
 8000f06:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f0a:	ee17 6a90 	vmov	r6, s15
 8000f0e:	f8aa 6014 	strh.w	r6, [sl, #20]
							v_index = v_index+1>=MAX_V_FRAME?0:v_index+1;
 8000f12:	dc0f      	bgt.n	8000f34 <HAL_UART_RxCpltCallback+0x5e4>
 8000f14:	f109 0601 	add.w	r6, r9, #1
 8000f18:	b2f6      	uxtb	r6, r6
 8000f1a:	4f14      	ldr	r7, [pc, #80]	; (8000f6c <HAL_UART_RxCpltCallback+0x61c>)
 8000f1c:	703e      	strb	r6, [r7, #0]
 8000f1e:	e6f5      	b.n	8000d0c <HAL_UART_RxCpltCallback+0x3bc>
						cnt_e = cnt_e<0?cnt_e+50000:cnt_e;
 8000f20:	f8de 7000 	ldr.w	r7, [lr]
 8000f24:	f24c 3650 	movw	r6, #50000	; 0xc350
 8000f28:	443e      	add	r6, r7
 8000f2a:	e6e6      	b.n	8000cfa <HAL_UART_RxCpltCallback+0x3aa>
							motorcurrent.target_cur = -motorcurrent.target_cur;
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	b212      	sxth	r2, r2
 8000f30:	8202      	strh	r2, [r0, #16]
 8000f32:	e736      	b.n	8000da2 <HAL_UART_RxCpltCallback+0x452>
							v_index = v_index+1>=MAX_V_FRAME?0:v_index+1;
 8000f34:	2600      	movs	r6, #0
 8000f36:	e7f0      	b.n	8000f1a <HAL_UART_RxCpltCallback+0x5ca>
 8000f38:	20003fc4 	.word	0x20003fc4
 8000f3c:	20000058 	.word	0x20000058
 8000f40:	20004018 	.word	0x20004018
 8000f44:	20003e78 	.word	0x20003e78
 8000f48:	20003ecc 	.word	0x20003ecc
 8000f4c:	ffffde68 	.word	0xffffde68
 8000f50:	20004078 	.word	0x20004078
 8000f54:	200000e8 	.word	0x200000e8
 8000f58:	2000004c 	.word	0x2000004c
 8000f5c:	2000004e 	.word	0x2000004e
 8000f60:	20000044 	.word	0x20000044
 8000f64:	20000054 	.word	0x20000054
 8000f68:	20004174 	.word	0x20004174
 8000f6c:	200000e4 	.word	0x200000e4
 8000f70:	2000006c 	.word	0x2000006c
 8000f74:	ffffb820 	.word	0xffffb820
 8000f78:	20000048 	.word	0x20000048
 8000f7c:	20000050 	.word	0x20000050
							ct = ct<-1000?enchall.recon_counter-last_recon+2000:ct;
 8000f80:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000f84:	b236      	sxth	r6, r6
 8000f86:	e753      	b.n	8000e30 <HAL_UART_RxCpltCallback+0x4e0>
							ct = ct>1000?enchall.recon_counter-last_recon-2000:ct;
 8000f88:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8000f8c:	b236      	sxth	r6, r6
 8000f8e:	e740      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x4c2>
				uint8_t s = i==UART4BYTE-1?0:i+1; //second byte  1xxx|xxxx
 8000f90:	2300      	movs	r3, #0
 8000f92:	e55d      	b.n	8000a50 <HAL_UART_RxCpltCallback+0x100>

08000f94 <StartledblueTask>:
/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000f94:	4c05      	ldr	r4, [pc, #20]	; (8000fac <StartledblueTask+0x18>)
{
 8000f96:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000f98:	4620      	mov	r0, r4
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	f002 f884 	bl	80030a8 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000fa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa4:	f004 f864 	bl	8005070 <osDelay>
 8000fa8:	e7f6      	b.n	8000f98 <StartledblueTask+0x4>
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <StartledgreenTask>:
/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000fb0:	4c05      	ldr	r4, [pc, #20]	; (8000fc8 <StartledgreenTask+0x18>)
{
 8000fb2:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	f002 f876 	bl	80030a8 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc0:	f004 f856 	bl	8005070 <osDelay>
 8000fc4:	e7f6      	b.n	8000fb4 <StartledgreenTask+0x4>
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 8000fcc:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 8000fce:	2032      	movs	r0, #50	; 0x32
 8000fd0:	f004 f84e 	bl	8005070 <osDelay>
 8000fd4:	e7fb      	b.n	8000fce <StartiwdgTask+0x2>
 8000fd6:	bf00      	nop

08000fd8 <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000fdc:	22c8      	movs	r2, #200	; 0xc8
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f240 37f5 	movw	r7, #1013	; 0x3f5
 8000fe4:	a802      	add	r0, sp, #8
 8000fe6:	f240 36f7 	movw	r6, #1015	; 0x3f7
 8000fea:	f005 fd12 	bl	8006a12 <memset>
 8000fee:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8000ff2:	f240 72df 	movw	r2, #2015	; 0x7df
 8000ff6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000ffa:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000ffe:	f240 7edc 	movw	lr, #2012	; 0x7dc
 8001002:	f8ad 7008 	strh.w	r7, [sp, #8]
 8001006:	f240 38f3 	movw	r8, #1011	; 0x3f3
 800100a:	f8ad 7016 	strh.w	r7, [sp, #22]
 800100e:	f240 7cdb 	movw	ip, #2011	; 0x7db
 8001012:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
 8001016:	f44f 777d 	mov.w	r7, #1012	; 0x3f4
 800101a:	f8ad 100a 	strh.w	r1, [sp, #10]
 800101e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8001022:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8001026:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800102a:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 800102e:	f240 71e5 	movw	r1, #2021	; 0x7e5
 8001032:	f8ad 200c 	strh.w	r2, [sp, #12]
 8001036:	f8ad 2012 	strh.w	r2, [sp, #18]
 800103a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800103e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8001042:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8001046:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800104a:	f8ad 6010 	strh.w	r6, [sp, #16]
 800104e:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8001052:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
 8001056:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800105a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800105e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8001062:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8001066:	f240 70e6 	movw	r0, #2022	; 0x7e6
 800106a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800106e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8001072:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8001076:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 800107a:	f8ad e01a 	strh.w	lr, [sp, #26]
 800107e:	f8ad e026 	strh.w	lr, [sp, #38]	; 0x26
 8001082:	f240 3eff 	movw	lr, #1023	; 0x3ff
 8001086:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800108a:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
 800108e:	f240 77e7 	movw	r7, #2023	; 0x7e7
 8001092:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 8001096:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 800109a:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 800109e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 80010a2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80010a6:	f8ad c020 	strh.w	ip, [sp, #32]
 80010aa:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 80010ae:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80010b2:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80010b6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80010ba:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
 80010be:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 80010c2:	f44f 617b 	mov.w	r1, #4016	; 0xfb0
 80010c6:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 80010ca:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
			1013, 2013, 2012, 8000, 1011, 2011, 4000, 1012, 2012, 2013, 8000, 1015, 2015, 2013, 1012, 1000,
			1013, 2013, 2015, 8000, 1015, 2015, 4000,
			1021, 2021, 2022, 8000, 1023, 2023, 2000,
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
 80010ce:	2200      	movs	r2, #0
 80010d0:	4c1f      	ldr	r4, [pc, #124]	; (8001150 <StartbuzzerrythmTask+0x178>)
 80010d2:	4d20      	ldr	r5, [pc, #128]	; (8001154 <StartbuzzerrythmTask+0x17c>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 80010d4:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
 80010d8:	f8ad 704e 	strh.w	r7, [sp, #78]	; 0x4e
 80010dc:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 80010e0:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 80010e4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 80010e8:	f8ad 005a 	strh.w	r0, [sp, #90]	; 0x5a
 80010ec:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
	volatile uint16_t i = 0;
 80010f0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80010f4:	e002      	b.n	80010fc <StartbuzzerrythmTask+0x124>
			{
				i=i==SONGLENGTH-1?0:i+1;
			}
			xSemaphoreGive(buzzerMutexHandle);
		}
		osDelay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f003 ffba 	bl	8005070 <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 80010fc:	2300      	movs	r3, #0
 80010fe:	6820      	ldr	r0, [r4, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4619      	mov	r1, r3
 8001104:	f004 fd76 	bl	8005bf4 <xQueueGenericReceive>
 8001108:	2801      	cmp	r0, #1
 800110a:	d1f4      	bne.n	80010f6 <StartbuzzerrythmTask+0x11e>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 800110c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8001110:	2300      	movs	r3, #0
 8001112:	ae02      	add	r6, sp, #8
 8001114:	6828      	ldr	r0, [r5, #0]
 8001116:	b289      	uxth	r1, r1
 8001118:	461a      	mov	r2, r3
 800111a:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800111e:	f004 fb5f 	bl	80057e0 <xQueueGenericSend>
 8001122:	2801      	cmp	r0, #1
 8001124:	d006      	beq.n	8001134 <StartbuzzerrythmTask+0x15c>
			xSemaphoreGive(buzzerMutexHandle);
 8001126:	2300      	movs	r3, #0
 8001128:	6820      	ldr	r0, [r4, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4619      	mov	r1, r3
 800112e:	f004 fb57 	bl	80057e0 <xQueueGenericSend>
 8001132:	e7e0      	b.n	80010f6 <StartbuzzerrythmTask+0x11e>
				i=i==SONGLENGTH-1?0:i+1;
 8001134:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001138:	b29b      	uxth	r3, r3
 800113a:	2b31      	cmp	r3, #49	; 0x31
 800113c:	d006      	beq.n	800114c <StartbuzzerrythmTask+0x174>
 800113e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001142:	3301      	adds	r3, #1
 8001144:	b29b      	uxth	r3, r3
 8001146:	f8ad 3006 	strh.w	r3, [sp, #6]
 800114a:	e7ec      	b.n	8001126 <StartbuzzerrythmTask+0x14e>
 800114c:	2300      	movs	r3, #0
 800114e:	e7fa      	b.n	8001146 <StartbuzzerrythmTask+0x16e>
 8001150:	20004064 	.word	0x20004064
 8001154:	20004058 	.word	0x20004058

08001158 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 8001158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800115c:	4c5e      	ldr	r4, [pc, #376]	; (80012d8 <StartbuzzertoneTask+0x180>)
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 800115e:	f04f 0a00 	mov.w	sl, #0
 8001162:	4d5e      	ldr	r5, [pc, #376]	; (80012dc <StartbuzzertoneTask+0x184>)
			//if all is 0 then no sound...
			//like 512 should be black[5-1] = 466.16/4   la+
			//013 should be white[3-1] = 329.63/4    mi
			//023 should be 2 * white[3-1] = 329.63/2
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
			time = tonedata/1000;
 8001164:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80012f0 <StartbuzzertoneTask+0x198>
			black = (tonedata%1000)/100;
 8001168:	4f5d      	ldr	r7, [pc, #372]	; (80012e0 <StartbuzzertoneTask+0x188>)
			num = (tonedata%100)/10;
 800116a:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80012f4 <StartbuzzertoneTask+0x19c>
{
 800116e:	ed2d 8b04 	vpush	{d8-d9}
 8001172:	b090      	sub	sp, #64	; 0x40
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
				osDelay(500/time); //time is used to shorter the sound..
 8001174:	ed9f 9a5b 	vldr	s18, [pc, #364]	; 80012e4 <StartbuzzertoneTask+0x18c>
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8001178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117a:	ae09      	add	r6, sp, #36	; 0x24
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 800117c:	f10d 0e10 	add.w	lr, sp, #16
	volatile float tonefreq = 0, time = 0;;
 8001180:	f8cd a008 	str.w	sl, [sp, #8]
 8001184:	f8cd a00c 	str.w	sl, [sp, #12]
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8001188:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800118a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 800118e:	340c      	adds	r4, #12
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8001190:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
				SetbuzzerFreq(tonefreq);
 8001196:	ed9f 8b4e 	vldr	d8, [pc, #312]	; 80012d0 <StartbuzzertoneTask+0x178>
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 800119a:	f8d4 c000 	ldr.w	ip, [r4]
 800119e:	4e52      	ldr	r6, [pc, #328]	; (80012e8 <StartbuzzertoneTask+0x190>)
 80011a0:	4c52      	ldr	r4, [pc, #328]	; (80012ec <StartbuzzertoneTask+0x194>)
 80011a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80011a6:	f8ce c000 	str.w	ip, [lr]
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 80011aa:	2300      	movs	r3, #0
 80011ac:	220a      	movs	r2, #10
 80011ae:	f10d 0106 	add.w	r1, sp, #6
 80011b2:	6828      	ldr	r0, [r5, #0]
 80011b4:	f004 fd1e 	bl	8005bf4 <xQueueGenericReceive>
 80011b8:	2801      	cmp	r0, #1
 80011ba:	d007      	beq.n	80011cc <StartbuzzertoneTask+0x74>
			xSemaphoreGive(buzzerMutexHandle);
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	2200      	movs	r2, #0
			osDelay(10);
 80011c0:	200a      	movs	r0, #10
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34
			osDelay(10);
 80011c6:	f003 ff53 	bl	8005070 <osDelay>
 80011ca:	e7ee      	b.n	80011aa <StartbuzzertoneTask+0x52>
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 80011cc:	2300      	movs	r3, #0
 80011ce:	4602      	mov	r2, r0
 80011d0:	6830      	ldr	r0, [r6, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	f004 fd0e 	bl	8005bf4 <xQueueGenericReceive>
			time = tonedata/1000;
 80011d8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
			black = (tonedata%1000)/100;
 80011dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			time = tonedata/1000;
 80011e0:	fba8 0301 	umull	r0, r3, r8, r1
 80011e4:	099b      	lsrs	r3, r3, #6
 80011e6:	ee07 3a90 	vmov	s15, r3
			black = (tonedata%1000)/100;
 80011ea:	fb02 1213 	mls	r2, r2, r3, r1
			time = tonedata/1000;
 80011ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			black = (tonedata%1000)/100;
 80011f2:	b292      	uxth	r2, r2
			time = tonedata/1000;
 80011f4:	edcd 7a03 	vstr	s15, [sp, #12]
			if((tonedata%1000) != 0)
 80011f8:	b3c2      	cbz	r2, 800126c <StartbuzzertoneTask+0x114>
			num = (tonedata%100)/10;
 80011fa:	fba7 0301 	umull	r0, r3, r7, r1
 80011fe:	2064      	movs	r0, #100	; 0x64
			black = (tonedata%1000)/100;
 8001200:	fba7 e202 	umull	lr, r2, r7, r2
			num = (tonedata%100)/10;
 8001204:	095b      	lsrs	r3, r3, #5
				if(black)
 8001206:	0952      	lsrs	r2, r2, #5
			num = (tonedata%100)/10;
 8001208:	fb00 1313 	mls	r3, r0, r3, r1
 800120c:	b29b      	uxth	r3, r3
 800120e:	fba9 0303 	umull	r0, r3, r9, r3
 8001212:	ea4f 03d3 	mov.w	r3, r3, lsr #3
				if(black)
 8001216:	d040      	beq.n	800129a <StartbuzzertoneTask+0x142>
					tonefreq = tonetable_black[black-1] * num *2 ;
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	ab10      	add	r3, sp, #64	; 0x40
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001226:	ed12 7a0d 	vldr	s14, [r2, #-52]	; 0xffffffcc
 800122a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800122e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001232:	edcd 7a02 	vstr	s15, [sp, #8]
				SetbuzzerFreq(tonefreq);
 8001236:	ed9d 6a02 	vldr	s12, [sp, #8]
 800123a:	2200      	movs	r2, #0
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8001242:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001246:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 800124a:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
			if(time!=0)
 8001250:	eddd 7a03 	vldr	s15, [sp, #12]
 8001254:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d112      	bne.n	8001284 <StartbuzzertoneTask+0x12c>
			xSemaphoreGive(buzzerMutexHandle);
 800125e:	2300      	movs	r3, #0
 8001260:	6830      	ldr	r0, [r6, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	4619      	mov	r1, r3
 8001266:	f004 fabb 	bl	80057e0 <xQueueGenericSend>
 800126a:	e79e      	b.n	80011aa <StartbuzzertoneTask+0x52>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	635a      	str	r2, [r3, #52]	; 0x34
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 8001272:	f8cd a008 	str.w	sl, [sp, #8]
			if(time!=0)
 8001276:	eddd 7a03 	vldr	s15, [sp, #12]
 800127a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d0ec      	beq.n	800125e <StartbuzzertoneTask+0x106>
				osDelay(500/time); //time is used to shorter the sound..
 8001284:	ed9d 7a03 	vldr	s14, [sp, #12]
 8001288:	eec9 7a07 	vdiv.f32	s15, s18, s14
 800128c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001290:	ee17 0a90 	vmov	r0, s15
 8001294:	f003 feec 	bl	8005070 <osDelay>
 8001298:	e7e1      	b.n	800125e <StartbuzzertoneTask+0x106>
			white  = tonedata%10;
 800129a:	fba9 0201 	umull	r0, r2, r9, r1
					tonefreq = tonetable_white[white-1] * num *2;
 800129e:	ee07 3a90 	vmov	s15, r3
			white  = tonedata%10;
 80012a2:	08d3      	lsrs	r3, r2, #3
					tonefreq = tonetable_white[white-1] * num *2;
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			white  = tonedata%10;
 80012a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012ac:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
					tonefreq = tonetable_white[white-1] * num *2;
 80012b0:	ab10      	add	r3, sp, #64	; 0x40
 80012b2:	b289      	uxth	r1, r1
 80012b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80012b8:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 80012bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012c4:	edcd 7a02 	vstr	s15, [sp, #8]
 80012c8:	e7b5      	b.n	8001236 <StartbuzzertoneTask+0xde>
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	00000000 	.word	0x00000000
 80012d4:	412e8480 	.word	0x412e8480
 80012d8:	08007638 	.word	0x08007638
 80012dc:	20004058 	.word	0x20004058
 80012e0:	51eb851f 	.word	0x51eb851f
 80012e4:	43fa0000 	.word	0x43fa0000
 80012e8:	20004064 	.word	0x20004064
 80012ec:	200041f4 	.word	0x200041f4
 80012f0:	10624dd3 	.word	0x10624dd3
 80012f4:	cccccccd 	.word	0xcccccccd

080012f8 <SystemInitialization>:
extern void UART4_DMA2_Cplt_Callback(DMA_HandleTypeDef *_hdma);
//int32_t cur_u;
//int32_t cur_v;

void SystemInitialization(void)
{
 80012f8:	b510      	push	{r4, lr}
	/*
	 * start tim2 for BUZZER
	 */
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80012fa:	2100      	movs	r1, #0
	 * thus if we consider the driver delay and blabla...
	 * we choose the dead time to be 300ns~...
	 * lookinto the tim.c file the dead time is calculated by
	 * 1/216mhz * DeadTime,  thus we choose DeadTime to be 66~
	 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80012fc:	4c18      	ldr	r4, [pc, #96]	; (8001360 <SystemInitialization+0x68>)
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80012fe:	4819      	ldr	r0, [pc, #100]	; (8001364 <SystemInitialization+0x6c>)
 8001300:	f002 ff3c 	bl	800417c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 8001304:	4818      	ldr	r0, [pc, #96]	; (8001368 <SystemInitialization+0x70>)
 8001306:	f002 fe75 	bl	8003ff4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800130a:	4620      	mov	r0, r4
 800130c:	2100      	movs	r1, #0
 800130e:	f002 ff35 	bl	800417c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8001312:	4620      	mov	r0, r4
 8001314:	2100      	movs	r1, #0
 8001316:	f003 f9a3 	bl	8004660 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800131a:	4620      	mov	r0, r4
 800131c:	2104      	movs	r1, #4
 800131e:	f002 ff2d 	bl	800417c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8001322:	4620      	mov	r0, r4
 8001324:	2104      	movs	r1, #4
 8001326:	f003 f99b 	bl	8004660 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800132a:	4620      	mov	r0, r4
 800132c:	2108      	movs	r1, #8
 800132e:	f002 ff25 	bl	800417c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8001332:	4620      	mov	r0, r4
 8001334:	2108      	movs	r1, #8
 8001336:	f003 f993 	bl	8004660 <HAL_TIMEx_PWMN_Start>

	/*
	 * register the call back of uart4 transmit..
	 */

	HAL_UART_Receive_DMA(&huart4,enchall_buff,5);
 800133a:	2205      	movs	r2, #5
 800133c:	490b      	ldr	r1, [pc, #44]	; (800136c <SystemInitialization+0x74>)
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <SystemInitialization+0x78>)
 8001340:	f003 fb82 	bl	8004a48 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1,order_buff,7);
 8001344:	2207      	movs	r2, #7
 8001346:	490b      	ldr	r1, [pc, #44]	; (8001374 <SystemInitialization+0x7c>)
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <SystemInitialization+0x80>)
 800134a:	f003 fb7d 	bl	8004a48 <HAL_UART_Receive_DMA>
//HAL_DMA_RegisterCallback(&hdma_uart4_rx,HAL_DMA_XFER_CPLT_CB_ID,UART4_DMA2_Cplt_Callback);
	/*
	 * DFSDM initial
	 */
	//polling mode
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0);
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <SystemInitialization+0x84>)
 8001350:	f001 fb4c 	bl	80029ec <HAL_DFSDM_FilterRegularStart>
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <SystemInitialization+0x88>)
}
 8001356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 800135a:	f001 bb47 	b.w	80029ec <HAL_DFSDM_FilterRegularStart>
 800135e:	bf00      	nop
 8001360:	200041b4 	.word	0x200041b4
 8001364:	200041f4 	.word	0x200041f4
 8001368:	20004174 	.word	0x20004174
 800136c:	20003e68 	.word	0x20003e68
 8001370:	20004444 	.word	0x20004444
 8001374:	20003e70 	.word	0x20003e70
 8001378:	20004364 	.word	0x20004364
 800137c:	20003e78 	.word	0x20003e78
 8001380:	20003fc4 	.word	0x20003fc4

08001384 <StartenchallTask>:
// debug view for visualization
//#define DVIEW


void StartenchallTask(void const * argument)
{
 8001384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001388:	4d2b      	ldr	r5, [pc, #172]	; (8001438 <StartenchallTask+0xb4>)
 800138a:	b09e      	sub	sp, #120	; 0x78
 800138c:	4c2b      	ldr	r4, [pc, #172]	; (800143c <StartenchallTask+0xb8>)
		  datatosend[++i] = '\r';datatosend[++i] = '\n';


#endif
		  __HAL_UNLOCK(&huart1);
		  HAL_UART_Transmit(&huart1,datatosend,i,1);
 800138e:	462f      	mov	r7, r5
 8001390:	4e2b      	ldr	r6, [pc, #172]	; (8001440 <StartenchallTask+0xbc>)
 8001392:	e002      	b.n	800139a <StartenchallTask+0x16>
	  }
	  //every 100mini
#ifdef DVIEW
	  osDelay(100);
#else
	  osDelay(5);
 8001394:	2005      	movs	r0, #5
 8001396:	f003 fe6b 	bl	8005070 <osDelay>
	  if(xQueuePeek(enchallQueueHandle,&encdata,0)==pdPASS)
 800139a:	2301      	movs	r3, #1
 800139c:	2200      	movs	r2, #0
 800139e:	a904      	add	r1, sp, #16
 80013a0:	6820      	ldr	r0, [r4, #0]
 80013a2:	f004 fc27 	bl	8005bf4 <xQueueGenericReceive>
 80013a6:	2801      	cmp	r0, #1
 80013a8:	d1f4      	bne.n	8001394 <StartenchallTask+0x10>
		  memcpy(&datatosend[i],&encdata.recon_counter,sizeof(encdata.recon_counter)); //uint16
 80013aa:	f8bd c018 	ldrh.w	ip, [sp, #24]
		  datatosend[i] = Header1; datatosend[++i] = Header2; i+=2;
 80013ae:	f04f 0a54 	mov.w	sl, #84	; 0x54
		  memcpy(&datatosend[i],&encdata.z_count,sizeof(encdata.z_count));   //int16
 80013b2:	f8bd 801e 	ldrh.w	r8, [sp, #30]
		  datatosend[i] = Header1; datatosend[++i] = Header2; i+=2;
 80013b6:	f04f 0945 	mov.w	r9, #69	; 0x45
		  memcpy(&datatosend[i],&encdata.w,sizeof(encdata.w));                 //int16
 80013ba:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 80013be:	4603      	mov	r3, r0
 80013c0:	2200      	movs	r2, #0
 80013c2:	a901      	add	r1, sp, #4
 80013c4:	6830      	ldr	r0, [r6, #0]
		  memcpy(&datatosend[i],&encdata.recon_counter,sizeof(encdata.recon_counter)); //uint16
 80013c6:	f8ad c02d 	strh.w	ip, [sp, #45]	; 0x2d
		  datatosend[i] = Header1; datatosend[++i] = Header2; i+=2;
 80013ca:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80013ce:	f88d 9029 	strb.w	r9, [sp, #41]	; 0x29
		  memcpy(&datatosend[i],&encdata.z_count,sizeof(encdata.z_count));   //int16
 80013d2:	f8ad 802b 	strh.w	r8, [sp, #43]	; 0x2b
		  memcpy(&datatosend[i],&encdata.w,sizeof(encdata.w));                 //int16
 80013d6:	f8ad e02f 	strh.w	lr, [sp, #47]	; 0x2f
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 80013da:	f004 fc0b 	bl	8005bf4 <xQueueGenericReceive>
 80013de:	220b      	movs	r2, #11
 80013e0:	2309      	movs	r3, #9
 80013e2:	2801      	cmp	r0, #1
 80013e4:	f04f 000a 	mov.w	r0, #10
 80013e8:	4611      	mov	r1, r2
		  i += sizeof(encdata.w);
 80013ea:	469c      	mov	ip, r3
		  if(xQueuePeek(conresQueueHandle,&conresdata,0)==pdPASS)
 80013ec:	d01b      	beq.n	8001426 <StartenchallTask+0xa2>
		  datatosend[i] = Tail;
 80013ee:	f10d 0e78 	add.w	lr, sp, #120	; 0x78
 80013f2:	f04f 084e 	mov.w	r8, #78	; 0x4e
		  datatosend[++i] = '\r';datatosend[++i] = '\n';
 80013f6:	f04f 090a 	mov.w	r9, #10
		  datatosend[i] = Tail;
 80013fa:	4473      	add	r3, lr
		  datatosend[++i] = '\r';datatosend[++i] = '\n';
 80013fc:	4470      	add	r0, lr
 80013fe:	448e      	add	lr, r1
 8001400:	210d      	movs	r1, #13
		  datatosend[i] = Tail;
 8001402:	f803 8c50 	strb.w	r8, [r3, #-80]
		  __HAL_UNLOCK(&huart1);
 8001406:	f04f 0800 	mov.w	r8, #0
		  datatosend[2] = i;
 800140a:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
		  HAL_UART_Transmit(&huart1,datatosend,i,1);
 800140e:	2301      	movs	r3, #1
		  datatosend[++i] = '\r';datatosend[++i] = '\n';
 8001410:	f800 1c50 	strb.w	r1, [r0, #-80]
		  HAL_UART_Transmit(&huart1,datatosend,i,1);
 8001414:	a90a      	add	r1, sp, #40	; 0x28
 8001416:	4638      	mov	r0, r7
		  datatosend[++i] = '\r';datatosend[++i] = '\n';
 8001418:	f80e 9c50 	strb.w	r9, [lr, #-80]
		  __HAL_UNLOCK(&huart1);
 800141c:	f885 8068 	strb.w	r8, [r5, #104]	; 0x68
		  HAL_UART_Transmit(&huart1,datatosend,i,1);
 8001420:	f003 fa92 	bl	8004948 <HAL_UART_Transmit>
 8001424:	e7b6      	b.n	8001394 <StartenchallTask+0x10>
			  memcpy(&datatosend[i],&conresdata.feedback_cq,sizeof(conresdata.feedback_cq)); //int16
 8001426:	9901      	ldr	r1, [sp, #4]
 8001428:	220f      	movs	r2, #15
 800142a:	230d      	movs	r3, #13
 800142c:	200e      	movs	r0, #14
 800142e:	f8cd 1031 	str.w	r1, [sp, #49]	; 0x31
 8001432:	4611      	mov	r1, r2
			  i += sizeof(conresdata.feedback_cd);
 8001434:	469c      	mov	ip, r3
 8001436:	e7da      	b.n	80013ee <StartenchallTask+0x6a>
 8001438:	20004364 	.word	0x20004364
 800143c:	20004068 	.word	0x20004068
 8001440:	20004050 	.word	0x20004050

08001444 <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <MX_DFSDM1_Init+0xc4>)
 8001446:	4a31      	ldr	r2, [pc, #196]	; (800150c <MX_DFSDM1_Init+0xc8>)
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8001448:	4618      	mov	r0, r3
{
 800144a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800144e:	2400      	movs	r4, #0
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001450:	2501      	movs	r5, #1
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 8001452:	2602      	movs	r6, #2
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001454:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 8001458:	f44f 7780 	mov.w	r7, #256	; 0x100
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800145c:	721d      	strb	r5, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800145e:	725d      	strb	r5, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001460:	f8c3 801c 	str.w	r8, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 8001464:	621f      	str	r7, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 8001466:	625e      	str	r6, [r3, #36]	; 0x24
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001468:	e883 0014 	stmia.w	r3, {r2, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 800146c:	f001 fa1e 	bl	80028ac <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_DFSDM1_Init+0xcc>)
 8001472:	4a28      	ldr	r2, [pc, #160]	; (8001514 <MX_DFSDM1_Init+0xd0>)
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 8001474:	4618      	mov	r0, r3
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001476:	f8c3 801c 	str.w	r8, [r3, #28]
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 800147a:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800147c:	605c      	str	r4, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800147e:	721d      	strb	r5, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8001480:	725d      	strb	r5, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
 8001482:	621f      	str	r7, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
 8001484:	625e      	str	r6, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 8001486:	f001 fa11 	bl	80028ac <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MX_DFSDM1_Init+0xd4>)
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800148c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8001490:	4922      	ldr	r1, [pc, #136]	; (800151c <MX_DFSDM1_Init+0xd8>)
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
  hdfsdm1_channel0.Init.Offset = 0;
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8001492:	4618      	mov	r0, r3
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8001494:	60de      	str	r6, [r3, #12]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8001496:	711c      	strb	r4, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001498:	609c      	str	r4, [r3, #8]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800149a:	611c      	str	r4, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800149c:	615c      	str	r4, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800149e:	619c      	str	r4, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80014a0:	61dc      	str	r4, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80014a2:	621c      	str	r4, [r3, #32]
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80014a4:	629d      	str	r5, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80014a6:	62dc      	str	r4, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80014a8:	631c      	str	r4, [r3, #48]	; 0x30
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80014aa:	6019      	str	r1, [r3, #0]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80014ae:	f001 f933 	bl	8002718 <HAL_DFSDM_ChannelInit>
 80014b2:	bb28      	cbnz	r0, 8001500 <MX_DFSDM1_Init+0xbc>
  {
    Error_Handler();
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 80014b6:	2200      	movs	r2, #0
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 80014b8:	2502      	movs	r5, #2
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80014ba:	4e1a      	ldr	r6, [pc, #104]	; (8001524 <MX_DFSDM1_Init+0xe0>)
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014bc:	f44f 0440 	mov.w	r4, #12582912	; 0xc00000
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80014c0:	2101      	movs	r1, #1
  hdfsdm1_channel3.Init.Offset = 0;
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 80014c2:	4618      	mov	r0, r3
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80014c4:	601e      	str	r6, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 80014c6:	60dd      	str	r5, [r3, #12]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80014c8:	625c      	str	r4, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80014ca:	6299      	str	r1, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 80014cc:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80014ce:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80014d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80014d2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80014d4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80014d6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80014d8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Offset = 0;
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 80014de:	f001 f91b 	bl	8002718 <HAL_DFSDM_ChannelInit>
 80014e2:	b108      	cbz	r0, 80014e8 <MX_DFSDM1_Init+0xa4>
  {
    Error_Handler();
 80014e4:	f000 fbec 	bl	8001cc0 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 80014e8:	2201      	movs	r2, #1
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_DFSDM1_Init+0xc4>)
 80014ec:	4611      	mov	r1, r2
 80014ee:	f001 fa53 	bl	8002998 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 80014f2:	2201      	movs	r2, #1
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <MX_DFSDM1_Init+0xe4>)
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_DFSDM1_Init+0xcc>)

}
 80014f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 80014fc:	f001 ba4c 	b.w	8002998 <HAL_DFSDM_FilterConfigRegChannel>
    Error_Handler();
 8001500:	f000 fbde 	bl	8001cc0 <Error_Handler>
 8001504:	e7d6      	b.n	80014b4 <MX_DFSDM1_Init+0x70>
 8001506:	bf00      	nop
 8001508:	20003e78 	.word	0x20003e78
 800150c:	40017500 	.word	0x40017500
 8001510:	20003fc4 	.word	0x20003fc4
 8001514:	40017580 	.word	0x40017580
 8001518:	20004018 	.word	0x20004018
 800151c:	40017400 	.word	0x40017400
 8001520:	20003ecc 	.word	0x20003ecc
 8001524:	40017460 	.word	0x40017460
 8001528:	00030008 	.word	0x00030008

0800152c <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 800152e:	4c50      	ldr	r4, [pc, #320]	; (8001670 <HAL_DFSDM_FilterMspInit+0x144>)
{
 8001530:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	2300      	movs	r3, #0
{
 8001534:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 8001536:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	9304      	str	r3, [sp, #16]
 800153a:	9303      	str	r3, [sp, #12]
 800153c:	9305      	str	r3, [sp, #20]
 800153e:	9306      	str	r3, [sp, #24]
 8001540:	9307      	str	r3, [sp, #28]
  if(DFSDM1_Init == 0)
 8001542:	2a00      	cmp	r2, #0
 8001544:	d131      	bne.n	80015aa <HAL_DFSDM_FilterMspInit+0x7e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001546:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <HAL_DFSDM_FilterMspInit+0x148>)
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800154c:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800154e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001550:	d034      	beq.n	80015bc <HAL_DFSDM_FilterMspInit+0x90>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <HAL_DFSDM_FilterMspInit+0x14c>)
    PE4     ------> DFSDM1_DATIN3
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001554:	2030      	movs	r0, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001558:	270a      	movs	r7, #10
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800155a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800155e:	f042 0210 	orr.w	r2, r2, #16
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
 8001564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001566:	f002 0210 	and.w	r2, r2, #16
 800156a:	9201      	str	r2, [sp, #4]
 800156c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001570:	f042 0208 	orr.w	r2, r2, #8
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001578:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157e:	483f      	ldr	r0, [pc, #252]	; (800167c <HAL_DFSDM_FilterMspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001580:	9707      	str	r7, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001582:	2718      	movs	r7, #24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001584:	9302      	str	r3, [sp, #8]
 8001586:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158a:	f001 fc5f 	bl	8002e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001590:	2206      	movs	r2, #6
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001592:	a903      	add	r1, sp, #12
 8001594:	483a      	ldr	r0, [pc, #232]	; (8001680 <HAL_DFSDM_FilterMspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800159c:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800159e:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a0:	f001 fc54 	bl	8002e4c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	4a35      	ldr	r2, [pc, #212]	; (8001684 <HAL_DFSDM_FilterMspInit+0x158>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d033      	beq.n	800161a <HAL_DFSDM_FilterMspInit+0xee>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 80015b2:	4a35      	ldr	r2, [pc, #212]	; (8001688 <HAL_DFSDM_FilterMspInit+0x15c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d00c      	beq.n	80015d2 <HAL_DFSDM_FilterMspInit+0xa6>
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
  }

}
 80015b8:	b009      	add	sp, #36	; 0x24
 80015ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015bc:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <HAL_DFSDM_FilterMspInit+0x14c>)
 80015be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	9b00      	ldr	r3, [sp, #0]
 80015d0:	e7bf      	b.n	8001552 <HAL_DFSDM_FilterMspInit+0x26>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80015d2:	f502 426e 	add.w	r2, r2, #60928	; 0xee00
 80015d6:	4c2d      	ldr	r4, [pc, #180]	; (800168c <HAL_DFSDM_FilterMspInit+0x160>)
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80015d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80015dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80015e0:	32a8      	adds	r2, #168	; 0xa8
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015e2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015e6:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80015ea:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80015ee:	6022      	str	r2, [r4, #0]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80015f4:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f6:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80015f8:	6120      	str	r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80015fa:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015fc:	6167      	str	r7, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015fe:	61a6      	str	r6, [r4, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001600:	61e1      	str	r1, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001602:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001604:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001606:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001608:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 800160a:	f001 fa6d 	bl	8002ae8 <HAL_DMA_Init>
 800160e:	bb58      	cbnz	r0, 8001668 <HAL_DFSDM_FilterMspInit+0x13c>
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8001610:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8001612:	62ac      	str	r4, [r5, #40]	; 0x28
 8001614:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8001616:	b009      	add	sp, #36	; 0x24
 8001618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800161a:	f502 426f 	add.w	r2, r2, #61184	; 0xef00
 800161e:	4c1c      	ldr	r4, [pc, #112]	; (8001690 <HAL_DFSDM_FilterMspInit+0x164>)
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8001620:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001624:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001628:	3210      	adds	r2, #16
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800162a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800162e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001632:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001636:	6022      	str	r2, [r4, #0]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001638:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800163c:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163e:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001640:	6120      	str	r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001642:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001644:	6167      	str	r7, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001646:	61a6      	str	r6, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001648:	61e1      	str	r1, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 800164a:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164c:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800164e:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001652:	f001 fa49 	bl	8002ae8 <HAL_DMA_Init>
 8001656:	b920      	cbnz	r0, 8001662 <HAL_DFSDM_FilterMspInit+0x136>
 8001658:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800165a:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800165c:	62ac      	str	r4, [r5, #40]	; 0x28
 800165e:	63a5      	str	r5, [r4, #56]	; 0x38
 8001660:	e7a7      	b.n	80015b2 <HAL_DFSDM_FilterMspInit+0x86>
      Error_Handler();
 8001662:	f000 fb2d 	bl	8001cc0 <Error_Handler>
 8001666:	e7f7      	b.n	8001658 <HAL_DFSDM_FilterMspInit+0x12c>
      Error_Handler();
 8001668:	f000 fb2a 	bl	8001cc0 <Error_Handler>
 800166c:	e7d0      	b.n	8001610 <HAL_DFSDM_FilterMspInit+0xe4>
 800166e:	bf00      	nop
 8001670:	200000f0 	.word	0x200000f0
 8001674:	200000f4 	.word	0x200000f4
 8001678:	40023800 	.word	0x40023800
 800167c:	40021000 	.word	0x40021000
 8001680:	40020c00 	.word	0x40020c00
 8001684:	40017500 	.word	0x40017500
 8001688:	40017580 	.word	0x40017580
 800168c:	20003f04 	.word	0x20003f04
 8001690:	20003f64 	.word	0x20003f64

08001694 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 8001696:	4c25      	ldr	r4, [pc, #148]	; (800172c <HAL_DFSDM_ChannelMspInit+0x98>)
{
 8001698:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	2300      	movs	r3, #0
  if(DFSDM1_Init == 0)
 800169c:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	9304      	str	r3, [sp, #16]
 80016a0:	9303      	str	r3, [sp, #12]
 80016a2:	9305      	str	r3, [sp, #20]
 80016a4:	9306      	str	r3, [sp, #24]
 80016a6:	9307      	str	r3, [sp, #28]
  if(DFSDM1_Init == 0)
 80016a8:	2a00      	cmp	r2, #0
 80016aa:	d131      	bne.n	8001710 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016ac:	4a20      	ldr	r2, [pc, #128]	; (8001730 <HAL_DFSDM_ChannelMspInit+0x9c>)
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016b2:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016b6:	d02d      	beq.n	8001714 <HAL_DFSDM_ChannelMspInit+0x80>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_DFSDM_ChannelMspInit+0xa0>)
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80016bc:	260a      	movs	r6, #10
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016be:	2730      	movs	r7, #48	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c2:	a903      	add	r1, sp, #12
 80016c4:	481c      	ldr	r0, [pc, #112]	; (8001738 <HAL_DFSDM_ChannelMspInit+0xa4>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c6:	f042 0210 	orr.w	r2, r2, #16
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
 80016cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ce:	f002 0210 	and.w	r2, r2, #16
 80016d2:	9201      	str	r2, [sp, #4]
 80016d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d8:	f042 0208 	orr.w	r2, r2, #8
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80016e0:	9607      	str	r6, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80016e2:	2618      	movs	r6, #24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e4:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016e8:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f0:	f001 fbac 	bl	8002e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016f6:	2206      	movs	r2, #6
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f8:	a903      	add	r1, sp, #12
 80016fa:	4810      	ldr	r0, [pc, #64]	; (800173c <HAL_DFSDM_ChannelMspInit+0xa8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001702:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001704:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001706:	f001 fba1 	bl	8002e4c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	6023      	str	r3, [r4, #0]
  }
}
 8001710:	b009      	add	sp, #36	; 0x24
 8001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8001716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001718:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800171c:	645a      	str	r2, [r3, #68]	; 0x44
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	9b00      	ldr	r3, [sp, #0]
 8001728:	e7c6      	b.n	80016b8 <HAL_DFSDM_ChannelMspInit+0x24>
 800172a:	bf00      	nop
 800172c:	200000f0 	.word	0x200000f0
 8001730:	200000f4 	.word	0x200000f4
 8001734:	40023800 	.word	0x40023800
 8001738:	40021000 	.word	0x40021000
 800173c:	40020c00 	.word	0x40020c00

08001740 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_DMA_Init+0x70>)
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2105      	movs	r1, #5
 8001746:	200d      	movs	r0, #13
{
 8001748:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 800174a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 800174c:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800174e:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 8001752:	631c      	str	r4, [r3, #48]	; 0x30
 8001754:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001756:	f404 0480 	and.w	r4, r4, #4194304	; 0x400000
 800175a:	9400      	str	r4, [sp, #0]
 800175c:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800175e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001760:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8001764:	631c      	str	r4, [r3, #48]	; 0x30
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001770:	f000 ff8c 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001774:	200d      	movs	r0, #13
 8001776:	f000 ffc3 	bl	8002700 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2106      	movs	r1, #6
 800177e:	2038      	movs	r0, #56	; 0x38
 8001780:	f000 ff84 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001784:	2038      	movs	r0, #56	; 0x38
 8001786:	f000 ffbb 	bl	8002700 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2106      	movs	r1, #6
 800178e:	2039      	movs	r0, #57	; 0x39
 8001790:	f000 ff7c 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001794:	2039      	movs	r0, #57	; 0x39
 8001796:	f000 ffb3 	bl	8002700 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2105      	movs	r1, #5
 800179e:	203a      	movs	r0, #58	; 0x3a
 80017a0:	f000 ff74 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017a4:	203a      	movs	r0, #58	; 0x3a
 80017a6:	f000 ffab 	bl	8002700 <HAL_NVIC_EnableIRQ>

}
 80017aa:	b002      	add	sp, #8
 80017ac:	bd10      	pop	{r4, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	b0af      	sub	sp, #188	; 0xbc
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of buzzerMutex */
  osMutexDef(buzzerMutex);
 80017b8:	2500      	movs	r5, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of enchallTask */
  osThreadDef(enchallTask, StartenchallTask, osPriorityIdle, 0, 128);
 80017ba:	4c52      	ldr	r4, [pc, #328]	; (8001904 <MX_FREERTOS_Init+0x150>)
  osMutexDef(buzzerMutex);
 80017bc:	a82e      	add	r0, sp, #184	; 0xb8
  osThreadDef(enchallTask, StartenchallTask, osPriorityIdle, 0, 128);
 80017be:	ae0b      	add	r6, sp, #44	; 0x2c
 80017c0:	4627      	mov	r7, r4
  osMutexDef(buzzerMutex);
 80017c2:	f840 5db8 	str.w	r5, [r0, #-184]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 80017c6:	f003 fc5b 	bl	8005080 <osMutexCreate>
 80017ca:	4b4f      	ldr	r3, [pc, #316]	; (8001908 <MX_FREERTOS_Init+0x154>)
 80017cc:	6018      	str	r0, [r3, #0]
  osThreadDef(enchallTask, StartenchallTask, osPriorityIdle, 0, 128);
 80017ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80017d0:	683f      	ldr	r7, [r7, #0]
 80017d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80017d4:	4629      	mov	r1, r5
 80017d6:	a80b      	add	r0, sp, #44	; 0x2c
  osThreadDef(enchallTask, StartenchallTask, osPriorityIdle, 0, 128);
 80017d8:	6037      	str	r7, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80017da:	f003 fc31 	bl	8005040 <osThreadCreate>

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartcontrolTask, osPriorityIdle, 0, 128);
 80017de:	f104 0714 	add.w	r7, r4, #20
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80017e2:	4b4a      	ldr	r3, [pc, #296]	; (800190c <MX_FREERTOS_Init+0x158>)
  osThreadDef(controlTask, StartcontrolTask, osPriorityIdle, 0, 128);
 80017e4:	ae10      	add	r6, sp, #64	; 0x40
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 80017e6:	6018      	str	r0, [r3, #0]
  osThreadDef(controlTask, StartcontrolTask, osPriorityIdle, 0, 128);
 80017e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80017ea:	683f      	ldr	r7, [r7, #0]
 80017ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80017ee:	4629      	mov	r1, r5
 80017f0:	a810      	add	r0, sp, #64	; 0x40
  osThreadDef(controlTask, StartcontrolTask, osPriorityIdle, 0, 128);
 80017f2:	6037      	str	r7, [r6, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80017f4:	f003 fc24 	bl	8005040 <osThreadCreate>

  /* definition and creation of ledblueTask */
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 80017f8:	f104 0728 	add.w	r7, r4, #40	; 0x28
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80017fc:	4b44      	ldr	r3, [pc, #272]	; (8001910 <MX_FREERTOS_Init+0x15c>)
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 80017fe:	ae15      	add	r6, sp, #84	; 0x54
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8001800:	6018      	str	r0, [r3, #0]
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8001802:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001804:	683f      	ldr	r7, [r7, #0]
 8001806:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8001808:	4629      	mov	r1, r5
 800180a:	a815      	add	r0, sp, #84	; 0x54
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 800180c:	6037      	str	r7, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 800180e:	f003 fc17 	bl	8005040 <osThreadCreate>

  /* definition and creation of ledgreenTask */
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8001812:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8001816:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <MX_FREERTOS_Init+0x160>)
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8001818:	ae1a      	add	r6, sp, #104	; 0x68
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 800181a:	6018      	str	r0, [r3, #0]
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 800181c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800181e:	683f      	ldr	r7, [r7, #0]
 8001820:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8001822:	4629      	mov	r1, r5
 8001824:	a81a      	add	r0, sp, #104	; 0x68
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8001826:	6037      	str	r7, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8001828:	f003 fc0a 	bl	8005040 <osThreadCreate>

  /* definition and creation of iwdgTask */
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 800182c:	f104 0750 	add.w	r7, r4, #80	; 0x50
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <MX_FREERTOS_Init+0x164>)
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8001832:	ae1f      	add	r6, sp, #124	; 0x7c
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8001834:	6018      	str	r0, [r3, #0]
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8001836:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001838:	683f      	ldr	r7, [r7, #0]
 800183a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 800183c:	4629      	mov	r1, r5
 800183e:	a81f      	add	r0, sp, #124	; 0x7c
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8001840:	6037      	str	r7, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8001842:	f003 fbfd 	bl	8005040 <osThreadCreate>

  /* definition and creation of buzzertoneTask */
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8001846:	f104 0764 	add.w	r7, r4, #100	; 0x64
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <MX_FREERTOS_Init+0x168>)
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 800184c:	ae24      	add	r6, sp, #144	; 0x90
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 800184e:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8001850:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001852:	683f      	ldr	r7, [r7, #0]
 8001854:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8001856:	4629      	mov	r1, r5
 8001858:	a824      	add	r0, sp, #144	; 0x90
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 800185a:	6037      	str	r7, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 800185c:	f003 fbf0 	bl	8005040 <osThreadCreate>

  /* definition and creation of buzzerrythmTask */
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8001860:	f104 0778 	add.w	r7, r4, #120	; 0x78
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <MX_FREERTOS_Init+0x16c>)
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8001866:	ae29      	add	r6, sp, #164	; 0xa4
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8001868:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 800186a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800186c:	683f      	ldr	r7, [r7, #0]
 800186e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8001870:	4629      	mov	r1, r5
 8001872:	a829      	add	r0, sp, #164	; 0xa4
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8001874:	6037      	str	r7, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8001876:	f003 fbe3 	bl	8005040 <osThreadCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of buzzerQueue */
  osMessageQDef(buzzerQueue, 1, uint16_t);
 800187a:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 800187e:	4929      	ldr	r1, [pc, #164]	; (8001924 <MX_FREERTOS_Init+0x170>)
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8001880:	ab01      	add	r3, sp, #4
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8001882:	6008      	str	r0, [r1, #0]
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8001884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001888:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 800188c:	4629      	mov	r1, r5
 800188e:	4618      	mov	r0, r3
 8001890:	f003 fbfa 	bl	8005088 <osMessageCreate>

  /* definition and creation of rythmQueue */
  osMessageQDef(rythmQueue, 32, uint16_t);
 8001894:	f104 0294 	add.w	r2, r4, #148	; 0x94
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8001898:	4923      	ldr	r1, [pc, #140]	; (8001928 <MX_FREERTOS_Init+0x174>)
  osMessageQDef(rythmQueue, 32, uint16_t);
 800189a:	ab03      	add	r3, sp, #12
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 800189c:	6008      	str	r0, [r1, #0]
  osMessageQDef(rythmQueue, 32, uint16_t);
 800189e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a2:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 80018a6:	4629      	mov	r1, r5
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fbed 	bl	8005088 <osMessageCreate>

  /* definition and creation of enchallQueue */
  osMessageQDef(enchallQueue, 1, ENCHD);
 80018ae:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 80018b2:	491e      	ldr	r1, [pc, #120]	; (800192c <MX_FREERTOS_Init+0x178>)
  osMessageQDef(enchallQueue, 1, ENCHD);
 80018b4:	ab05      	add	r3, sp, #20
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 80018b6:	6008      	str	r0, [r1, #0]
  osMessageQDef(enchallQueue, 1, ENCHD);
 80018b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018bc:	e883 0003 	stmia.w	r3, {r0, r1}
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 80018c0:	4629      	mov	r1, r5
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fbe0 	bl	8005088 <osMessageCreate>

  /* definition and creation of shuntQueue */
  osMessageQDef(shuntQueue, 1, CURDATA);
 80018c8:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 80018cc:	4918      	ldr	r1, [pc, #96]	; (8001930 <MX_FREERTOS_Init+0x17c>)
  osMessageQDef(shuntQueue, 1, CURDATA);
 80018ce:	ab07      	add	r3, sp, #28
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);

  /* definition and creation of conresQueue */
  osMessageQDef(conresQueue, 1, CONRES);
 80018d0:	34ac      	adds	r4, #172	; 0xac
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 80018d2:	6008      	str	r0, [r1, #0]
  osMessageQDef(shuntQueue, 1, CURDATA);
 80018d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d8:	e883 0003 	stmia.w	r3, {r0, r1}
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 80018dc:	4629      	mov	r1, r5
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 fbd2 	bl	8005088 <osMessageCreate>
 80018e4:	4a13      	ldr	r2, [pc, #76]	; (8001934 <MX_FREERTOS_Init+0x180>)
  osMessageQDef(conresQueue, 1, CONRES);
 80018e6:	ab09      	add	r3, sp, #36	; 0x24
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 80018e8:	6010      	str	r0, [r2, #0]
  osMessageQDef(conresQueue, 1, CONRES);
 80018ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ee:	e883 0003 	stmia.w	r3, {r0, r1}
  conresQueueHandle = osMessageCreate(osMessageQ(conresQueue), NULL);
 80018f2:	4629      	mov	r1, r5
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 fbc7 	bl	8005088 <osMessageCreate>
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_FREERTOS_Init+0x184>)
 80018fc:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  /* USER CODE END RTOS_QUEUES */
}
 80018fe:	b02f      	add	sp, #188	; 0xbc
 8001900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001902:	bf00      	nop
 8001904:	08007668 	.word	0x08007668
 8001908:	20004064 	.word	0x20004064
 800190c:	20004060 	.word	0x20004060
 8001910:	2000406c 	.word	0x2000406c
 8001914:	20004074 	.word	0x20004074
 8001918:	20004070 	.word	0x20004070
 800191c:	2000407c 	.word	0x2000407c
 8001920:	20004054 	.word	0x20004054
 8001924:	20004080 	.word	0x20004080
 8001928:	20004058 	.word	0x20004058
 800192c:	2000405c 	.word	0x2000405c
 8001930:	20004068 	.word	0x20004068
 8001934:	20004078 	.word	0x20004078
 8001938:	20004050 	.word	0x20004050

0800193c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800193c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <MX_GPIO_Init+0xfc>)
{
 8001942:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001948:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8001a44 <MX_GPIO_Init+0x108>
 800194c:	210c      	movs	r1, #12
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001950:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	9407      	str	r4, [sp, #28]
 8001954:	9409      	str	r4, [sp, #36]	; 0x24
 8001956:	940a      	str	r4, [sp, #40]	; 0x28
 8001958:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800195a:	6b18      	ldr	r0, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800195c:	4e37      	ldr	r6, [pc, #220]	; (8001a3c <MX_GPIO_Init+0x100>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800195e:	f040 0010 	orr.w	r0, r0, #16
 8001962:	6318      	str	r0, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8001964:	4640      	mov	r0, r8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001966:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001968:	f007 0710 	and.w	r7, r7, #16
 800196c:	9701      	str	r7, [sp, #4]
 800196e:	9f01      	ldr	r7, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001970:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001972:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8001976:	631f      	str	r7, [r3, #48]	; 0x30
 8001978:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800197a:	f007 0780 	and.w	r7, r7, #128	; 0x80
 800197e:	9702      	str	r7, [sp, #8]
 8001980:	9f02      	ldr	r7, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001984:	f047 0704 	orr.w	r7, r7, #4
 8001988:	631f      	str	r7, [r3, #48]	; 0x30
 800198a:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800198c:	f007 0704 	and.w	r7, r7, #4
 8001990:	9703      	str	r7, [sp, #12]
 8001992:	9f03      	ldr	r7, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001996:	432f      	orrs	r7, r5
 8001998:	631f      	str	r7, [r3, #48]	; 0x30
 800199a:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800199c:	402f      	ands	r7, r5
 800199e:	9704      	str	r7, [sp, #16]
 80019a0:	9f04      	ldr	r7, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019a4:	f047 0702 	orr.w	r7, r7, #2
 80019a8:	631f      	str	r7, [r3, #48]	; 0x30
 80019aa:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019ac:	f007 0702 	and.w	r7, r7, #2
 80019b0:	9705      	str	r7, [sp, #20]
 80019b2:	9f05      	ldr	r7, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b4:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80019b6:	f047 0708 	orr.w	r7, r7, #8
 80019ba:	631f      	str	r7, [r3, #48]	; 0x30
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 80019be:	4f20      	ldr	r7, [pc, #128]	; (8001a40 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	9306      	str	r3, [sp, #24]
 80019c6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 80019c8:	f001 fb6a 	bl	80030a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80019cc:	4622      	mov	r2, r4
 80019ce:	4630      	mov	r0, r6
 80019d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80019d4:	f001 fb64 	bl	80030a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 80019d8:	4622      	mov	r2, r4
 80019da:	4638      	mov	r0, r7
 80019dc:	2140      	movs	r1, #64	; 0x40
 80019de:	f001 fb5f 	bl	80030a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 80019e2:	220c      	movs	r2, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019e4:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e6:	4640      	mov	r0, r8
 80019e8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 80019ea:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019ec:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f2:	f001 fa2b 	bl	8002e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fa:	a907      	add	r1, sp, #28
 80019fc:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a00:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a06:	f001 fa21 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a0e:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	4630      	mov	r0, r6
 8001a12:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a14:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a16:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1c:	f001 fa16 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8001a20:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8001a22:	a907      	add	r1, sp, #28
 8001a24:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a28:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a2a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8001a2c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f001 fa0d 	bl	8002e4c <HAL_GPIO_Init>

}
 8001a32:	b00c      	add	sp, #48	; 0x30
 8001a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40021000 	.word	0x40021000

08001a48 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001a48:	b538      	push	{r3, r4, r5, lr}

  hi2c4.Instance = I2C4;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_I2C4_Init+0x50>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
 8001a4c:	2200      	movs	r2, #0
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4e:	2101      	movs	r1, #1
  hi2c4.Instance = I2C4;
 8001a50:	4d12      	ldr	r5, [pc, #72]	; (8001a9c <MX_I2C4_Init+0x54>)
  hi2c4.Init.Timing = 0x20404768;
 8001a52:	4c13      	ldr	r4, [pc, #76]	; (8001aa0 <MX_I2C4_Init+0x58>)
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a54:	4618      	mov	r0, r3
  hi2c4.Instance = I2C4;
 8001a56:	601d      	str	r5, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001a58:	605c      	str	r4, [r3, #4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5a:	60d9      	str	r1, [r3, #12]
  hi2c4.Init.OwnAddress1 = 0;
 8001a5c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a5e:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001a60:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a62:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a64:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a68:	f001 fb22 	bl	80030b0 <HAL_I2C_Init>
 8001a6c:	b988      	cbnz	r0, 8001a92 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4809      	ldr	r0, [pc, #36]	; (8001a98 <MX_I2C4_Init+0x50>)
 8001a72:	f001 fb73 	bl	800315c <HAL_I2CEx_ConfigAnalogFilter>
 8001a76:	b948      	cbnz	r0, 8001a8c <MX_I2C4_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4807      	ldr	r0, [pc, #28]	; (8001a98 <MX_I2C4_Init+0x50>)
 8001a7c:	f001 fb96 	bl	80031ac <HAL_I2CEx_ConfigDigitalFilter>
 8001a80:	b900      	cbnz	r0, 8001a84 <MX_I2C4_Init+0x3c>
 8001a82:	bd38      	pop	{r3, r4, r5, pc}
  {
    Error_Handler();
  }

}
 8001a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001a88:	f000 b91a 	b.w	8001cc0 <Error_Handler>
    Error_Handler();
 8001a8c:	f000 f918 	bl	8001cc0 <Error_Handler>
 8001a90:	e7f2      	b.n	8001a78 <MX_I2C4_Init+0x30>
    Error_Handler();
 8001a92:	f000 f915 	bl	8001cc0 <Error_Handler>
 8001a96:	e7ea      	b.n	8001a6e <MX_I2C4_Init+0x26>
 8001a98:	20004084 	.word	0x20004084
 8001a9c:	40006000 	.word	0x40006000
 8001aa0:	20404768 	.word	0x20404768

08001aa4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C4)
 8001aa4:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	2300      	movs	r3, #0
  if(i2cHandle->Instance==I2C4)
 8001aa8:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <HAL_I2C_MspInit+0x68>)
{
 8001aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(i2cHandle->Instance==I2C4)
 8001aac:	4291      	cmp	r1, r2
{
 8001aae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	9304      	str	r3, [sp, #16]
 8001ab2:	9303      	str	r3, [sp, #12]
 8001ab4:	9305      	str	r3, [sp, #20]
 8001ab6:	9306      	str	r3, [sp, #24]
 8001ab8:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C4)
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001abc:	b009      	add	sp, #36	; 0x24
 8001abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac0:	4c13      	ldr	r4, [pc, #76]	; (8001b10 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ac2:	f44f 5e40 	mov.w	lr, #12288	; 0x3000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001ac6:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac8:	2712      	movs	r7, #18
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001acc:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad2:	f043 0308 	orr.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad6:	480f      	ldr	r0, [pc, #60]	; (8001b14 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad8:	6323      	str	r3, [r4, #48]	; 0x30
 8001ada:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001adc:	f8cd e00c 	str.w	lr, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae0:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae6:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001aee:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af0:	f001 f9ac 	bl	8002e4c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afa:	6423      	str	r3, [r4, #64]	; 0x40
 8001afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b02:	9302      	str	r3, [sp, #8]
 8001b04:	9b02      	ldr	r3, [sp, #8]
}
 8001b06:	b009      	add	sp, #36	; 0x24
 8001b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40006000 	.word	0x40006000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020c00 	.word	0x40020c00

08001b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1a:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1c:	2234      	movs	r2, #52	; 0x34
 8001b1e:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b20:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b22:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b24:	2501      	movs	r5, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	f004 ff74 	bl	8006a12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2a:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b2c:	2290      	movs	r2, #144	; 0x90
 8001b2e:	a814      	add	r0, sp, #80	; 0x50
 8001b30:	4619      	mov	r1, r3
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b36:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b3c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	9305      	str	r3, [sp, #20]
 8001b42:	9306      	str	r3, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b44:	f004 ff65 	bl	8006a12 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <SystemClock_Config+0xc8>)
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4a:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <SystemClock_Config+0xcc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001b50:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001b54:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b56:	21d8      	movs	r1, #216	; 0xd8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b5a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001b5e:	9200      	str	r2, [sp, #0]
 8001b60:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001b68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b6a:	2204      	movs	r2, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b6c:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b6e:	9507      	str	r5, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b74:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b7c:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7e:	970e      	str	r7, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b80:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b82:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b84:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b86:	f001 fb75 	bl	8003274 <HAL_RCC_OscConfig>
 8001b8a:	b100      	cbz	r0, 8001b8e <SystemClock_Config+0x76>
 8001b8c:	e7fe      	b.n	8001b8c <SystemClock_Config+0x74>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b8e:	f001 fb35 	bl	80031fc <HAL_PWREx_EnableOverDrive>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b100      	cbz	r0, 8001b98 <SystemClock_Config+0x80>
 8001b96:	e7fe      	b.n	8001b96 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b9c:	270f      	movs	r7, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b9e:	f44f 56a0 	mov.w	r6, #5120	; 0x1400

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001ba2:	a802      	add	r0, sp, #8
 8001ba4:	2107      	movs	r1, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001baa:	9702      	str	r7, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bac:	9605      	str	r6, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bae:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001bb0:	f001 fd38 	bl	8003624 <HAL_RCC_ClockConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	b100      	cbz	r0, 8001bba <SystemClock_Config+0xa2>
 8001bb8:	e7fe      	b.n	8001bb8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8001bba:	4e0b      	ldr	r6, [pc, #44]	; (8001be8 <SystemClock_Config+0xd0>)
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001bbc:	2410      	movs	r4, #16
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001bbe:	2140      	movs	r1, #64	; 0x40
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8001bc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc4:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001bc6:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001bc8:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001bca:	9336      	str	r3, [sp, #216]	; 0xd8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8001bcc:	9614      	str	r6, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001bce:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001bd0:	9128      	str	r1, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8001bd2:	922c      	str	r2, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd4:	f001 fe66 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 8001bd8:	b100      	cbz	r0, 8001bdc <SystemClock_Config+0xc4>
 8001bda:	e7fe      	b.n	8001bda <SystemClock_Config+0xc2>
  {
    Error_Handler();
  }
}
 8001bdc:	b039      	add	sp, #228	; 0xe4
 8001bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40007000 	.word	0x40007000
 8001be8:	08022340 	.word	0x08022340

08001bec <main>:
{
 8001bec:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001bf2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bf6:	482c      	ldr	r0, [pc, #176]	; (8001ca8 <main+0xbc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bfe:	6943      	ldr	r3, [r0, #20]
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c0a:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8001c0e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c12:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c16:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8001c1a:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
 8001c1e:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c22:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001c26:	07b7      	lsls	r7, r6, #30
 8001c28:	015d      	lsls	r5, r3, #5
 8001c2a:	ea05 040e 	and.w	r4, r5, lr
 8001c2e:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c30:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c32:	ea44 0301 	orr.w	r3, r4, r1
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8001c36:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c38:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8001c3c:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways--);
 8001c40:	1c53      	adds	r3, r2, #1
 8001c42:	d1f6      	bne.n	8001c32 <main+0x46>
 8001c44:	3d20      	subs	r5, #32
    } while(sets--);
 8001c46:	f115 0f20 	cmn.w	r5, #32
 8001c4a:	d1ee      	bne.n	8001c2a <main+0x3e>
 8001c4c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001c50:	6943      	ldr	r3, [r0, #20]
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c56:	6143      	str	r3, [r0, #20]
 8001c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c5c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001c60:	f000 fcd8 	bl	8002614 <HAL_Init>
  SystemClock_Config();
 8001c64:	f7ff ff58 	bl	8001b18 <SystemClock_Config>
  MX_GPIO_Init();
 8001c68:	f7ff fe68 	bl	800193c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c6c:	f7ff fd68 	bl	8001740 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8001c70:	f7ff fbe8 	bl	8001444 <MX_DFSDM1_Init>
  MX_I2C4_Init();
 8001c74:	f7ff fee8 	bl	8001a48 <MX_I2C4_Init>
  MX_SPI1_Init();
 8001c78:	f000 f824 	bl	8001cc4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001c7c:	f000 fa8a 	bl	8002194 <MX_TIM1_Init>
  MX_UART4_Init();
 8001c80:	f000 fb20 	bl	80022c4 <MX_UART4_Init>
  MX_UART8_Init();
 8001c84:	f000 fb48 	bl	8002318 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001c88:	f000 fb68 	bl	800235c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c8c:	f000 fb8a 	bl	80023a4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001c90:	f000 f910 	bl	8001eb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c94:	f000 f9b6 	bl	8002004 <MX_TIM3_Init>
  SystemInitialization();
 8001c98:	f7ff fb2e 	bl	80012f8 <SystemInitialization>
  MX_FREERTOS_Init();
 8001c9c:	f7ff fd8a 	bl	80017b4 <MX_FREERTOS_Init>
  osKernelStart();
 8001ca0:	f003 f9c8 	bl	8005034 <osKernelStart>
 8001ca4:	e7fe      	b.n	8001ca4 <main+0xb8>
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001cac:	6802      	ldr	r2, [r0, #0]
 8001cae:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d000      	beq.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001cb4:	4770      	bx	lr
    HAL_IncTick();
 8001cb6:	f000 bcc3 	b.w	8002640 <HAL_IncTick>
 8001cba:	bf00      	nop
 8001cbc:	40000800 	.word	0x40000800

08001cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc0:	e7fe      	b.n	8001cc0 <Error_Handler>
 8001cc2:	bf00      	nop

08001cc4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hspi1.Instance = SPI1;
 8001cc6:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cc8:	f44f 7082 	mov.w	r0, #260	; 0x104
  hspi1.Instance = SPI1;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cce:	f44f 67e0 	mov.w	r7, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cd2:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001cd6:	2530      	movs	r5, #48	; 0x30
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001cd8:	2407      	movs	r4, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cda:	2108      	movs	r1, #8
  hspi1.Instance = SPI1;
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cde:	2200      	movs	r2, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce0:	6058      	str	r0, [r3, #4]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ce2:	4618      	mov	r0, r3
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce4:	60df      	str	r7, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ce6:	619e      	str	r6, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ce8:	61dd      	str	r5, [r3, #28]
  hspi1.Init.CRCPolynomial = 7;
 8001cea:	62dc      	str	r4, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cec:	6359      	str	r1, [r3, #52]	; 0x34
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cee:	609a      	str	r2, [r3, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cfc:	f002 f872 	bl	8003de4 <HAL_SPI_Init>
 8001d00:	b900      	cbnz	r0, 8001d04 <MX_SPI1_Init+0x40>
 8001d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 8001d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8001d08:	f7ff bfda 	b.w	8001cc0 <Error_Handler>
 8001d0c:	40013000 	.word	0x40013000
 8001d10:	200040d0 	.word	0x200040d0

08001d14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001d14:	6802      	ldr	r2, [r0, #0]
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_SPI_MspInit+0x84>)
{
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(spiHandle->Instance==SPI1)
 8001d1a:	429a      	cmp	r2, r3
{
 8001d1c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1e:	f04f 0400 	mov.w	r4, #0
 8001d22:	9404      	str	r4, [sp, #16]
 8001d24:	9403      	str	r4, [sp, #12]
 8001d26:	9405      	str	r4, [sp, #20]
 8001d28:	9406      	str	r4, [sp, #24]
 8001d2a:	9407      	str	r4, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8001d2c:	d001      	beq.n	8001d32 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d2e:	b009      	add	sp, #36	; 0x24
 8001d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d32:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d38:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d3e:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d40:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44
 8001d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d4a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d4e:	9200      	str	r2, [sp, #0]
 8001d50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d54:	f042 0208 	orr.w	r2, r2, #8
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
 8001d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d5c:	f002 0208 	and.w	r2, r2, #8
 8001d60:	9201      	str	r2, [sp, #4]
 8001d62:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d66:	433a      	orrs	r2, r7
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d6c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	403b      	ands	r3, r7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d70:	480a      	ldr	r0, [pc, #40]	; (8001d9c <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	9302      	str	r3, [sp, #8]
 8001d76:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d7a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7c:	f001 f866 	bl	8002e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001d80:	2318      	movs	r3, #24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d82:	a903      	add	r1, sp, #12
 8001d84:	4806      	ldr	r0, [pc, #24]	; (8001da0 <HAL_SPI_MspInit+0x8c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d8a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001d8e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f001 f85c 	bl	8002e4c <HAL_GPIO_Init>
}
 8001d94:	b009      	add	sp, #36	; 0x24
 8001d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d98:	40013000 	.word	0x40013000
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40020400 	.word	0x40020400

08001da4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_MspInit+0x3c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	210f      	movs	r1, #15
 8001daa:	f06f 0001 	mvn.w	r0, #1
{
 8001dae:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8001db2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8001db8:	641c      	str	r4, [r3, #64]	; 0x40
 8001dba:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001dbc:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8001dc0:	9400      	str	r4, [sp, #0]
 8001dc2:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001dc6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001dca:	645c      	str	r4, [r3, #68]	; 0x44
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dd6:	f000 fc59 	bl	800268c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd10      	pop	{r4, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800

08001de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001de6:	4601      	mov	r1, r0
{
 8001de8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001dea:	2200      	movs	r2, #0
 8001dec:	201e      	movs	r0, #30
 8001dee:	f000 fc4d 	bl	800268c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001df2:	201e      	movs	r0, #30
 8001df4:	f000 fc84 	bl	8002700 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dfa:	a901      	add	r1, sp, #4
 8001dfc:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e00:	4e14      	ldr	r6, [pc, #80]	; (8001e54 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e02:	f042 0204 	orr.w	r2, r2, #4
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001e06:	4c14      	ldr	r4, [pc, #80]	; (8001e58 <HAL_InitTick+0x74>)
 8001e08:	4d14      	ldr	r5, [pc, #80]	; (8001e5c <HAL_InitTick+0x78>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e16:	f001 fd23 	bl	8003860 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e1a:	f001 fd01 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8001e1e:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e20:	0043      	lsls	r3, r0, #1
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001e22:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim4.Instance = TIM4;
 8001e26:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e28:	fba6 0303 	umull	r0, r3, r6, r3
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001e2c:	4620      	mov	r0, r4
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001e2e:	60e1      	str	r1, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e30:	0c9b      	lsrs	r3, r3, #18
  htim4.Init.ClockDivision = 0;
 8001e32:	6122      	str	r2, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e36:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e38:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001e3a:	f002 f835 	bl	8003ea8 <HAL_TIM_Base_Init>
 8001e3e:	b110      	cbz	r0, 8001e46 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e40:	2001      	movs	r0, #1
}
 8001e42:	b008      	add	sp, #32
 8001e44:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim4);
 8001e46:	4620      	mov	r0, r4
 8001e48:	f002 f8e4 	bl	8004014 <HAL_TIM_Base_Start_IT>
}
 8001e4c:	b008      	add	sp, #32
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	20004134 	.word	0x20004134
 8001e5c:	40000800 	.word	0x40000800

08001e60 <NMI_Handler>:
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop

08001e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e64:	e7fe      	b.n	8001e64 <HardFault_Handler>
 8001e66:	bf00      	nop

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	e7fe      	b.n	8001e68 <MemManage_Handler>
 8001e6a:	bf00      	nop

08001e6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6c:	e7fe      	b.n	8001e6c <BusFault_Handler>
 8001e6e:	bf00      	nop

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	e7fe      	b.n	8001e70 <UsageFault_Handler>
 8001e72:	bf00      	nop

08001e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop

08001e78 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
   HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e78:	4801      	ldr	r0, [pc, #4]	; (8001e80 <DMA1_Stream2_IRQHandler+0x8>)
 8001e7a:	f000 bf17 	b.w	8002cac <HAL_DMA_IRQHandler>
 8001e7e:	bf00      	nop
 8001e80:	20004234 	.word	0x20004234

08001e84 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e84:	4801      	ldr	r0, [pc, #4]	; (8001e8c <TIM4_IRQHandler+0x8>)
 8001e86:	f002 ba6d 	b.w	8004364 <HAL_TIM_IRQHandler>
 8001e8a:	bf00      	nop
 8001e8c:	20004134 	.word	0x20004134

08001e90 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001e90:	4801      	ldr	r0, [pc, #4]	; (8001e98 <DMA2_Stream0_IRQHandler+0x8>)
 8001e92:	f000 bf0b 	b.w	8002cac <HAL_DMA_IRQHandler>
 8001e96:	bf00      	nop
 8001e98:	20003f64 	.word	0x20003f64

08001e9c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001e9c:	4801      	ldr	r0, [pc, #4]	; (8001ea4 <DMA2_Stream1_IRQHandler+0x8>)
 8001e9e:	f000 bf05 	b.w	8002cac <HAL_DMA_IRQHandler>
 8001ea2:	bf00      	nop
 8001ea4:	20003f04 	.word	0x20003f04

08001ea8 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ea8:	4801      	ldr	r0, [pc, #4]	; (8001eb0 <DMA2_Stream2_IRQHandler+0x8>)
 8001eaa:	f000 beff 	b.w	8002cac <HAL_DMA_IRQHandler>
 8001eae:	bf00      	nop
 8001eb0:	20004304 	.word	0x20004304

08001eb4 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 107;
 8001eb6:	206b      	movs	r0, #107	; 0x6b
  htim2.Instance = TIM2;
 8001eb8:	4c4d      	ldr	r4, [pc, #308]	; (8001ff0 <MX_TIM2_Init+0x13c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eba:	2300      	movs	r3, #0
{
 8001ebc:	b097      	sub	sp, #92	; 0x5c
  htim2.Instance = TIM2;
 8001ebe:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 50000;
 8001ec2:	f24c 3150 	movw	r1, #50000	; 0xc350
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec6:	2280      	movs	r2, #128	; 0x80
  htim2.Init.Prescaler = 107;
 8001ec8:	6060      	str	r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eca:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8001ecc:	6025      	str	r5, [r4, #0]
  htim2.Init.Period = 50000;
 8001ece:	60e1      	str	r1, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed0:	61a2      	str	r2, [r4, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed2:	60a3      	str	r3, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed4:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed6:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed8:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	6123      	str	r3, [r4, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001edc:	9307      	str	r3, [sp, #28]
 8001ede:	9308      	str	r3, [sp, #32]
 8001ee0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee2:	9304      	str	r3, [sp, #16]
 8001ee4:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee6:	9310      	str	r3, [sp, #64]	; 0x40
 8001ee8:	9311      	str	r3, [sp, #68]	; 0x44
 8001eea:	9312      	str	r3, [sp, #72]	; 0x48
 8001eec:	9313      	str	r3, [sp, #76]	; 0x4c
 8001eee:	9314      	str	r3, [sp, #80]	; 0x50
 8001ef0:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef2:	f001 ffd9 	bl	8003ea8 <HAL_TIM_Base_Init>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d13a      	bne.n	8001f70 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001efe:	a906      	add	r1, sp, #24
 8001f00:	483b      	ldr	r0, [pc, #236]	; (8001ff0 <MX_TIM2_Init+0x13c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f02:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f04:	f002 f95e 	bl	80041c4 <HAL_TIM_ConfigClockSource>
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d12e      	bne.n	8001f6a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f0c:	4838      	ldr	r0, [pc, #224]	; (8001ff0 <MX_TIM2_Init+0x13c>)
 8001f0e:	f002 f88f 	bl	8004030 <HAL_TIM_PWM_Init>
 8001f12:	bb38      	cbnz	r0, 8001f64 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f14:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f16:	a903      	add	r1, sp, #12
 8001f18:	4835      	ldr	r0, [pc, #212]	; (8001ff0 <MX_TIM2_Init+0x13c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1c:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f1e:	f002 fbb7 	bl	8004690 <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	b9e0      	cbnz	r0, 8001f5e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 8001f24:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f26:	2560      	movs	r5, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f28:	a90f      	add	r1, sp, #60	; 0x3c
 8001f2a:	4831      	ldr	r0, [pc, #196]	; (8001ff0 <MX_TIM2_Init+0x13c>)
 8001f2c:	461a      	mov	r2, r3
  sConfigOC.Pulse = 0;
 8001f2e:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f30:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f32:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f34:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f36:	f002 fc29 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 8001f3a:	b108      	cbz	r0, 8001f40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f3c:	f7ff fec0 	bl	8001cc0 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8001f40:	6823      	ldr	r3, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f42:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8001f44:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <MX_TIM2_Init+0x140>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f46:	940b      	str	r4, [sp, #44]	; 0x2c
  if(timHandle->Instance==TIM1)
 8001f48:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	940a      	str	r4, [sp, #40]	; 0x28
 8001f4c:	940c      	str	r4, [sp, #48]	; 0x30
 8001f4e:	940d      	str	r4, [sp, #52]	; 0x34
 8001f50:	940e      	str	r4, [sp, #56]	; 0x38
  if(timHandle->Instance==TIM1)
 8001f52:	d026      	beq.n	8001fa2 <MX_TIM2_Init+0xee>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d00d      	beq.n	8001f76 <MX_TIM2_Init+0xc2>
}
 8001f5a:	b017      	add	sp, #92	; 0x5c
 8001f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8001f5e:	f7ff feaf 	bl	8001cc0 <Error_Handler>
 8001f62:	e7df      	b.n	8001f24 <MX_TIM2_Init+0x70>
    Error_Handler();
 8001f64:	f7ff feac 	bl	8001cc0 <Error_Handler>
 8001f68:	e7d4      	b.n	8001f14 <MX_TIM2_Init+0x60>
    Error_Handler();
 8001f6a:	f7ff fea9 	bl	8001cc0 <Error_Handler>
 8001f6e:	e7cd      	b.n	8001f0c <MX_TIM2_Init+0x58>
    Error_Handler();
 8001f70:	f7ff fea6 	bl	8001cc0 <Error_Handler>
 8001f74:	e7c1      	b.n	8001efa <MX_TIM2_Init+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f7a:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f7c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	a90a      	add	r1, sp, #40	; 0x28
 8001f86:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <MX_TIM2_Init+0x144>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	4322      	orrs	r2, r4
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f8e:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f94:	940d      	str	r4, [sp, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f9a:	940e      	str	r4, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f000 ff56 	bl	8002e4c <HAL_GPIO_Init>
}
 8001fa0:	e7db      	b.n	8001f5a <MX_TIM2_Init+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <MX_TIM2_Init+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fa4:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fa8:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	a90a      	add	r1, sp, #40	; 0x28
 8001fae:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <MX_TIM2_Init+0x144>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb0:	432a      	orrs	r2, r5
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb6:	402a      	ands	r2, r5
 8001fb8:	9200      	str	r2, [sp, #0]
 8001fba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbe:	f042 0210 	orr.w	r2, r2, #16
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fc6:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc8:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fce:	950e      	str	r5, [sp, #56]	; 0x38
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f000 ff3a 	bl	8002e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8001fd8:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fdc:	a90a      	add	r1, sp, #40	; 0x28
 8001fde:	4808      	ldr	r0, [pc, #32]	; (8002000 <MX_TIM2_Init+0x14c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fe2:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8001fe8:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fea:	f000 ff2f 	bl	8002e4c <HAL_GPIO_Init>
 8001fee:	e7b4      	b.n	8001f5a <MX_TIM2_Init+0xa6>
 8001ff0:	200041f4 	.word	0x200041f4
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40021000 	.word	0x40021000

08002004 <MX_TIM3_Init>:
  htim3.Instance = TIM3;
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <MX_TIM3_Init+0x68>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	2300      	movs	r3, #0
  htim3.Init.Period = 50000;
 8002008:	f24c 3150 	movw	r1, #50000	; 0xc350
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800200c:	4610      	mov	r0, r2
{
 800200e:	b530      	push	{r4, r5, lr}
  htim3.Init.Prescaler = 107;
 8002010:	246b      	movs	r4, #107	; 0x6b
{
 8002012:	b089      	sub	sp, #36	; 0x24
  htim3.Instance = TIM3;
 8002014:	4d16      	ldr	r5, [pc, #88]	; (8002070 <MX_TIM3_Init+0x6c>)
  htim3.Init.Prescaler = 107;
 8002016:	6054      	str	r4, [r2, #4]
  htim3.Instance = TIM3;
 8002018:	6015      	str	r5, [r2, #0]
  htim3.Init.Period = 50000;
 800201a:	60d1      	str	r1, [r2, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201c:	6093      	str	r3, [r2, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	9301      	str	r3, [sp, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	6113      	str	r3, [r2, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	9305      	str	r3, [sp, #20]
 8002028:	9306      	str	r3, [sp, #24]
 800202a:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002030:	f001 ff3a 	bl	8003ea8 <HAL_TIM_Base_Init>
 8002034:	b9b0      	cbnz	r0, 8002064 <MX_TIM3_Init+0x60>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800203a:	a904      	add	r1, sp, #16
 800203c:	480b      	ldr	r0, [pc, #44]	; (800206c <MX_TIM3_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002040:	f002 f8c0 	bl	80041c4 <HAL_TIM_ConfigClockSource>
 8002044:	b958      	cbnz	r0, 800205e <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002048:	a901      	add	r1, sp, #4
 800204a:	4808      	ldr	r0, [pc, #32]	; (800206c <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002050:	f002 fb1e 	bl	8004690 <HAL_TIMEx_MasterConfigSynchronization>
 8002054:	b108      	cbz	r0, 800205a <MX_TIM3_Init+0x56>
    Error_Handler();
 8002056:	f7ff fe33 	bl	8001cc0 <Error_Handler>
}
 800205a:	b009      	add	sp, #36	; 0x24
 800205c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800205e:	f7ff fe2f 	bl	8001cc0 <Error_Handler>
 8002062:	e7f0      	b.n	8002046 <MX_TIM3_Init+0x42>
    Error_Handler();
 8002064:	f7ff fe2c 	bl	8001cc0 <Error_Handler>
 8002068:	e7e5      	b.n	8002036 <MX_TIM3_Init+0x32>
 800206a:	bf00      	nop
 800206c:	20004174 	.word	0x20004174
 8002070:	40000400 	.word	0x40000400

08002074 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 8002074:	6803      	ldr	r3, [r0, #0]
{
 8002076:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM1)
 8002078:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_TIM_Base_MspInit+0x64>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_TIM_Base_MspInit+0x32>
  else if(tim_baseHandle->Instance==TIM2)
 800207e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002082:	d01c      	beq.n	80020be <HAL_TIM_Base_MspInit+0x4a>
  else if(tim_baseHandle->Instance==TIM3)
 8002084:	4a15      	ldr	r2, [pc, #84]	; (80020dc <HAL_TIM_Base_MspInit+0x68>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d001      	beq.n	800208e <HAL_TIM_Base_MspInit+0x1a>
}
 800208a:	b004      	add	sp, #16
 800208c:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_TIM_Base_MspInit+0x6c>)
 8002090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002092:	f042 0202 	orr.w	r2, r2, #2
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	9303      	str	r3, [sp, #12]
 80020a0:	9b03      	ldr	r3, [sp, #12]
}
 80020a2:	b004      	add	sp, #16
 80020a4:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_TIM_Base_MspInit+0x6c>)
 80020a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	645a      	str	r2, [r3, #68]	; 0x44
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	9b01      	ldr	r3, [sp, #4]
}
 80020ba:	b004      	add	sp, #16
 80020bc:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020be:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80020c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c4:	f042 0201 	orr.w	r2, r2, #1
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	9302      	str	r3, [sp, #8]
 80020d2:	9b02      	ldr	r3, [sp, #8]
 80020d4:	e7d9      	b.n	800208a <HAL_TIM_Base_MspInit+0x16>
 80020d6:	bf00      	nop
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_TIM_MspPostInit>:
  if(timHandle->Instance==TIM1)
 80020e4:	6803      	ldr	r3, [r0, #0]
 80020e6:	4a27      	ldr	r2, [pc, #156]	; (8002184 <HAL_TIM_MspPostInit+0xa0>)
{
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(timHandle->Instance==TIM1)
 80020ea:	4293      	cmp	r3, r2
{
 80020ec:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ee:	f04f 0400 	mov.w	r4, #0
 80020f2:	9404      	str	r4, [sp, #16]
 80020f4:	9403      	str	r4, [sp, #12]
 80020f6:	9405      	str	r4, [sp, #20]
 80020f8:	9406      	str	r4, [sp, #24]
 80020fa:	9407      	str	r4, [sp, #28]
  if(timHandle->Instance==TIM1)
 80020fc:	d01a      	beq.n	8002134 <HAL_TIM_MspPostInit+0x50>
  else if(timHandle->Instance==TIM2)
 80020fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002102:	d001      	beq.n	8002108 <HAL_TIM_MspPostInit+0x24>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002104:	b009      	add	sp, #36	; 0x24
 8002106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002108:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800210c:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800210e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	a903      	add	r1, sp, #12
 8002118:	481b      	ldr	r0, [pc, #108]	; (8002188 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4322      	orrs	r2, r4
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002120:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002126:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800212c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f000 fe8d 	bl	8002e4c <HAL_GPIO_Init>
}
 8002132:	e7e7      	b.n	8002104 <HAL_TIM_MspPostInit+0x20>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_TIM_MspPostInit+0xa8>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002136:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800213a:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	a903      	add	r1, sp, #12
 8002140:	4811      	ldr	r0, [pc, #68]	; (8002188 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	432a      	orrs	r2, r5
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
 8002146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002148:	402a      	ands	r2, r5
 800214a:	9200      	str	r2, [sp, #0]
 800214c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800214e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002150:	f042 0210 	orr.w	r2, r2, #16
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002158:	9703      	str	r7, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800215a:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002160:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f000 fe71 	bl	8002e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 800216a:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800216e:	a903      	add	r1, sp, #12
 8002170:	4807      	ldr	r0, [pc, #28]	; (8002190 <HAL_TIM_MspPostInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002174:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 800217a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800217c:	f000 fe66 	bl	8002e4c <HAL_GPIO_Init>
 8002180:	e7c0      	b.n	8002104 <HAL_TIM_MspPostInit+0x20>
 8002182:	bf00      	nop
 8002184:	40010000 	.word	0x40010000
 8002188:	40020000 	.word	0x40020000
 800218c:	40023800 	.word	0x40023800
 8002190:	40021000 	.word	0x40021000

08002194 <MX_TIM1_Init>:
{
 8002194:	b570      	push	{r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002196:	2400      	movs	r4, #0
{
 8002198:	b09a      	sub	sp, #104	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800219a:	222c      	movs	r2, #44	; 0x2c
  htim1.Instance = TIM1;
 800219c:	4d47      	ldr	r5, [pc, #284]	; (80022bc <MX_TIM1_Init+0x128>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800219e:	4621      	mov	r1, r4
 80021a0:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a2:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a4:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a6:	9408      	str	r4, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a8:	9405      	str	r4, [sp, #20]
 80021aa:	9406      	str	r4, [sp, #24]
 80021ac:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ae:	9402      	str	r4, [sp, #8]
 80021b0:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b2:	9409      	str	r4, [sp, #36]	; 0x24
 80021b4:	940a      	str	r4, [sp, #40]	; 0x28
 80021b6:	940b      	str	r4, [sp, #44]	; 0x2c
 80021b8:	940c      	str	r4, [sp, #48]	; 0x30
 80021ba:	940d      	str	r4, [sp, #52]	; 0x34
 80021bc:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021be:	f004 fc28 	bl	8006a12 <memset>
  htim1.Instance = TIM1;
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <MX_TIM1_Init+0x12c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021c4:	2120      	movs	r1, #32
  htim1.Init.Period = 2160;
 80021c6:	f44f 6207 	mov.w	r2, #2160	; 0x870
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021ca:	4618      	mov	r0, r3
  htim1.Init.Prescaler = 0;
 80021cc:	605c      	str	r4, [r3, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ce:	611c      	str	r4, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021d0:	615c      	str	r4, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d2:	619c      	str	r4, [r3, #24]
  htim1.Instance = TIM1;
 80021d4:	601d      	str	r5, [r3, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021d6:	6099      	str	r1, [r3, #8]
  htim1.Init.Period = 2160;
 80021d8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021da:	f001 fe65 	bl	8003ea8 <HAL_TIM_Base_Init>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d168      	bne.n	80022b4 <MX_TIM1_Init+0x120>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021e6:	a904      	add	r1, sp, #16
 80021e8:	4835      	ldr	r0, [pc, #212]	; (80022c0 <MX_TIM1_Init+0x12c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ea:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021ec:	f001 ffea 	bl	80041c4 <HAL_TIM_ConfigClockSource>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d15c      	bne.n	80022ae <MX_TIM1_Init+0x11a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021f4:	4832      	ldr	r0, [pc, #200]	; (80022c0 <MX_TIM1_Init+0x12c>)
 80021f6:	f001 ff1b 	bl	8004030 <HAL_TIM_PWM_Init>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d154      	bne.n	80022a8 <MX_TIM1_Init+0x114>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fe:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002200:	a901      	add	r1, sp, #4
 8002202:	482f      	ldr	r0, [pc, #188]	; (80022c0 <MX_TIM1_Init+0x12c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002204:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002206:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800220a:	f002 fa41 	bl	8004690 <HAL_TIMEx_MasterConfigSynchronization>
 800220e:	2800      	cmp	r0, #0
 8002210:	d147      	bne.n	80022a2 <MX_TIM1_Init+0x10e>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002212:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002214:	2560      	movs	r5, #96	; 0x60
  sConfigOC.Pulse = 580;
 8002216:	f44f 7411 	mov.w	r4, #580	; 0x244
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221a:	a908      	add	r1, sp, #32
 800221c:	461a      	mov	r2, r3
 800221e:	4828      	ldr	r0, [pc, #160]	; (80022c0 <MX_TIM1_Init+0x12c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002220:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002222:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002224:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002226:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002228:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222a:	9508      	str	r5, [sp, #32]
  sConfigOC.Pulse = 580;
 800222c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800222e:	f002 faad 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 8002232:	2800      	cmp	r0, #0
 8002234:	d132      	bne.n	800229c <MX_TIM1_Init+0x108>
  sConfigOC.Pulse = 0;
 8002236:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002238:	2204      	movs	r2, #4
 800223a:	a908      	add	r1, sp, #32
 800223c:	4820      	ldr	r0, [pc, #128]	; (80022c0 <MX_TIM1_Init+0x12c>)
  sConfigOC.Pulse = 0;
 800223e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002240:	f002 faa4 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 8002244:	bb38      	cbnz	r0, 8002296 <MX_TIM1_Init+0x102>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002246:	a908      	add	r1, sp, #32
 8002248:	2208      	movs	r2, #8
 800224a:	481d      	ldr	r0, [pc, #116]	; (80022c0 <MX_TIM1_Init+0x12c>)
 800224c:	f002 fa9e 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 8002250:	b9f0      	cbnz	r0, 8002290 <MX_TIM1_Init+0xfc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002252:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = 45;
 8002254:	262d      	movs	r6, #45	; 0x2d
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002256:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800225a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800225e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002262:	a90f      	add	r1, sp, #60	; 0x3c
 8002264:	4816      	ldr	r0, [pc, #88]	; (80022c0 <MX_TIM1_Init+0x12c>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002266:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002268:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800226a:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800226c:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 800226e:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002270:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002272:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = 45;
 8002274:	9612      	str	r6, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002276:	9514      	str	r5, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002278:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800227a:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800227c:	f002 fa34 	bl	80046e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002280:	b108      	cbz	r0, 8002286 <MX_TIM1_Init+0xf2>
    Error_Handler();
 8002282:	f7ff fd1d 	bl	8001cc0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002286:	480e      	ldr	r0, [pc, #56]	; (80022c0 <MX_TIM1_Init+0x12c>)
 8002288:	f7ff ff2c 	bl	80020e4 <HAL_TIM_MspPostInit>
}
 800228c:	b01a      	add	sp, #104	; 0x68
 800228e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002290:	f7ff fd16 	bl	8001cc0 <Error_Handler>
 8002294:	e7dd      	b.n	8002252 <MX_TIM1_Init+0xbe>
    Error_Handler();
 8002296:	f7ff fd13 	bl	8001cc0 <Error_Handler>
 800229a:	e7d4      	b.n	8002246 <MX_TIM1_Init+0xb2>
    Error_Handler();
 800229c:	f7ff fd10 	bl	8001cc0 <Error_Handler>
 80022a0:	e7c9      	b.n	8002236 <MX_TIM1_Init+0xa2>
    Error_Handler();
 80022a2:	f7ff fd0d 	bl	8001cc0 <Error_Handler>
 80022a6:	e7b4      	b.n	8002212 <MX_TIM1_Init+0x7e>
    Error_Handler();
 80022a8:	f7ff fd0a 	bl	8001cc0 <Error_Handler>
 80022ac:	e7a7      	b.n	80021fe <MX_TIM1_Init+0x6a>
    Error_Handler();
 80022ae:	f7ff fd07 	bl	8001cc0 <Error_Handler>
 80022b2:	e79f      	b.n	80021f4 <MX_TIM1_Init+0x60>
    Error_Handler();
 80022b4:	f7ff fd04 	bl	8001cc0 <Error_Handler>
 80022b8:	e793      	b.n	80021e2 <MX_TIM1_Init+0x4e>
 80022ba:	bf00      	nop
 80022bc:	40010000 	.word	0x40010000
 80022c0:	200041b4 	.word	0x200041b4

080022c4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart4.Instance = UART4;
 80022c6:	4a11      	ldr	r2, [pc, #68]	; (800230c <MX_UART4_Init+0x48>)
  huart4.Init.BaudRate = 8000000;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_RX;
 80022c8:	2704      	movs	r7, #4
  huart4.Instance = UART4;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_UART4_Init+0x4c>)
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT
 80022cc:	26b0      	movs	r6, #176	; 0xb0
  huart4.Init.BaudRate = 8000000;
 80022ce:	4811      	ldr	r0, [pc, #68]	; (8002314 <MX_UART4_Init+0x50>)
                              |UART_ADVFEATURE_MSBFIRST_INIT;
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80022d0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80022d4:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 80022d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  huart4.Instance = UART4;
 80022dc:	601a      	str	r2, [r3, #0]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	2200      	movs	r2, #0
  huart4.Init.BaudRate = 8000000;
 80022e0:	6058      	str	r0, [r3, #4]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80022e2:	4618      	mov	r0, r3
  huart4.Init.Mode = UART_MODE_RX;
 80022e4:	615f      	str	r7, [r3, #20]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT
 80022e6:	625e      	str	r6, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80022e8:	639d      	str	r5, [r3, #56]	; 0x38
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80022ea:	63dc      	str	r4, [r3, #60]	; 0x3c
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 80022ec:	6499      	str	r1, [r3, #72]	; 0x48
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80022f2:	611a      	str	r2, [r3, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f8:	621a      	str	r2, [r3, #32]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80022fa:	f002 fcd7 	bl	8004cac <HAL_UART_Init>
 80022fe:	b900      	cbnz	r0, 8002302 <MX_UART4_Init+0x3e>
 8002300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 8002302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002306:	f7ff bcdb 	b.w	8001cc0 <Error_Handler>
 800230a:	bf00      	nop
 800230c:	40004c00 	.word	0x40004c00
 8002310:	20004444 	.word	0x20004444
 8002314:	007a1200 	.word	0x007a1200

08002318 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{

  huart8.Instance = UART8;
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <MX_UART8_Init+0x38>)
  huart8.Init.BaudRate = 26666666;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	2200      	movs	r2, #0
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 800231c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002320:	4618      	mov	r0, r3
{
 8002322:	b570      	push	{r4, r5, r6, lr}
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002324:	240c      	movs	r4, #12
  huart8.Instance = UART8;
 8002326:	4e0b      	ldr	r6, [pc, #44]	; (8002354 <MX_UART8_Init+0x3c>)
  huart8.Init.BaudRate = 26666666;
 8002328:	4d0b      	ldr	r5, [pc, #44]	; (8002358 <MX_UART8_Init+0x40>)
  huart8.Instance = UART8;
 800232a:	601e      	str	r6, [r3, #0]
  huart8.Init.BaudRate = 26666666;
 800232c:	605d      	str	r5, [r3, #4]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800232e:	615c      	str	r4, [r3, #20]
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 8002330:	61d9      	str	r1, [r3, #28]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002334:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002336:	611a      	str	r2, [r3, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002338:	619a      	str	r2, [r3, #24]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800233a:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800233e:	f002 fcb5 	bl	8004cac <HAL_UART_Init>
 8002342:	b900      	cbnz	r0, 8002346 <MX_UART8_Init+0x2e>
 8002344:	bd70      	pop	{r4, r5, r6, pc}
  {
    Error_Handler();
  }

}
 8002346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 800234a:	f7ff bcb9 	b.w	8001cc0 <Error_Handler>
 800234e:	bf00      	nop
 8002350:	200043d4 	.word	0x200043d4
 8002354:	40007c00 	.word	0x40007c00
 8002358:	0196e6aa 	.word	0x0196e6aa

0800235c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart1.Instance = USART1;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_USART1_UART_Init+0x3c>)
  huart1.Init.BaudRate = 1500000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002360:	2200      	movs	r2, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002362:	250c      	movs	r5, #12
  huart1.Instance = USART1;
 8002364:	4f0d      	ldr	r7, [pc, #52]	; (800239c <MX_USART1_UART_Init+0x40>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002366:	2410      	movs	r4, #16
  huart1.Init.BaudRate = 1500000;
 8002368:	4e0d      	ldr	r6, [pc, #52]	; (80023a0 <MX_USART1_UART_Init+0x44>)
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800236a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800236e:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 8002370:	601f      	str	r7, [r3, #0]
  huart1.Init.BaudRate = 1500000;
 8002372:	605e      	str	r6, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002374:	615d      	str	r5, [r3, #20]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002376:	625c      	str	r4, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002378:	6399      	str	r1, [r3, #56]	; 0x38
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800237a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800237c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800237e:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002380:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002382:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002384:	621a      	str	r2, [r3, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002386:	f002 fc91 	bl	8004cac <HAL_UART_Init>
 800238a:	b900      	cbnz	r0, 800238e <MX_USART1_UART_Init+0x32>
 800238c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 800238e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002392:	f7ff bc95 	b.w	8001cc0 <Error_Handler>
 8002396:	bf00      	nop
 8002398:	20004364 	.word	0x20004364
 800239c:	40011000 	.word	0x40011000
 80023a0:	0016e360 	.word	0x0016e360

080023a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 26666666;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023a6:	2200      	movs	r2, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80023a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023ac:	4618      	mov	r0, r3
{
 80023ae:	b570      	push	{r4, r5, r6, lr}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023b0:	240c      	movs	r4, #12
  huart3.Instance = USART3;
 80023b2:	4e0b      	ldr	r6, [pc, #44]	; (80023e0 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 26666666;
 80023b4:	4d0b      	ldr	r5, [pc, #44]	; (80023e4 <MX_USART3_UART_Init+0x40>)
  huart3.Instance = USART3;
 80023b6:	601e      	str	r6, [r3, #0]
  huart3.Init.BaudRate = 26666666;
 80023b8:	605d      	str	r5, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023ba:	615c      	str	r4, [r3, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80023bc:	61d9      	str	r1, [r3, #28]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023c2:	611a      	str	r2, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c4:	619a      	str	r2, [r3, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023ca:	f002 fc6f 	bl	8004cac <HAL_UART_Init>
 80023ce:	b900      	cbnz	r0, 80023d2 <MX_USART3_UART_Init+0x2e>
 80023d0:	bd70      	pop	{r4, r5, r6, pc}
  {
    Error_Handler();
  }

}
 80023d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 80023d6:	f7ff bc73 	b.w	8001cc0 <Error_Handler>
 80023da:	bf00      	nop
 80023dc:	20004294 	.word	0x20004294
 80023e0:	40004800 	.word	0x40004800
 80023e4:	0196e6aa 	.word	0x0196e6aa

080023e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART4)
 80023e8:	4a6a      	ldr	r2, [pc, #424]	; (8002594 <HAL_UART_MspInit+0x1ac>)
 80023ea:	6803      	ldr	r3, [r0, #0]
{
 80023ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(uartHandle->Instance==UART4)
 80023ee:	4293      	cmp	r3, r2
{
 80023f0:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f2:	f04f 0400 	mov.w	r4, #0
{
 80023f6:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	940a      	str	r4, [sp, #40]	; 0x28
 80023fa:	9409      	str	r4, [sp, #36]	; 0x24
 80023fc:	940b      	str	r4, [sp, #44]	; 0x2c
 80023fe:	940c      	str	r4, [sp, #48]	; 0x30
 8002400:	940d      	str	r4, [sp, #52]	; 0x34
  if(uartHandle->Instance==UART4)
 8002402:	d02c      	beq.n	800245e <HAL_UART_MspInit+0x76>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 8002404:	4a64      	ldr	r2, [pc, #400]	; (8002598 <HAL_UART_MspInit+0x1b0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	f000 80a4 	beq.w	8002554 <HAL_UART_MspInit+0x16c>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 800240c:	4a63      	ldr	r2, [pc, #396]	; (800259c <HAL_UART_MspInit+0x1b4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d064      	beq.n	80024dc <HAL_UART_MspInit+0xf4>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002412:	4a63      	ldr	r2, [pc, #396]	; (80025a0 <HAL_UART_MspInit+0x1b8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d001      	beq.n	800241c <HAL_UART_MspInit+0x34>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002418:	b00f      	add	sp, #60	; 0x3c
 800241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 800241c:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <HAL_UART_MspInit+0x1bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800241e:	f44f 7740 	mov.w	r7, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 8002426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002428:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242a:	a909      	add	r1, sp, #36	; 0x24
 800242c:	485e      	ldr	r0, [pc, #376]	; (80025a8 <HAL_UART_MspInit+0x1c0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800242e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
 8002434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002436:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800243a:	9207      	str	r2, [sp, #28]
 800243c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800243e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002440:	f042 0208 	orr.w	r2, r2, #8
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002448:	9709      	str	r7, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244a:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002452:	9308      	str	r3, [sp, #32]
 8002454:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002456:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002458:	f000 fcf8 	bl	8002e4c <HAL_GPIO_Init>
}
 800245c:	e7dc      	b.n	8002418 <HAL_UART_MspInit+0x30>
    __HAL_RCC_UART4_CLK_ENABLE();
 800245e:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <HAL_UART_MspInit+0x1bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002460:	2603      	movs	r6, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	f04f 0e02 	mov.w	lr, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002466:	2708      	movs	r7, #8
    __HAL_RCC_UART4_CLK_ENABLE();
 8002468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	a909      	add	r1, sp, #36	; 0x24
 800246c:	484f      	ldr	r0, [pc, #316]	; (80025ac <HAL_UART_MspInit+0x1c4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800246e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
 8002474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002476:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800247a:	9201      	str	r2, [sp, #4]
 800247c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002488:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	960c      	str	r6, [sp, #48]	; 0x30
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002490:	4e47      	ldr	r6, [pc, #284]	; (80025b0 <HAL_UART_MspInit+0x1c8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800249a:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	f000 fcd6 	bl	8002e4c <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80024a0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80024a4:	f8df e118 	ldr.w	lr, [pc, #280]	; 80025c0 <HAL_UART_MspInit+0x1d8>
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80024ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024b4:	4630      	mov	r0, r6
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024b6:	60b4      	str	r4, [r6, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b8:	60f4      	str	r4, [r6, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ba:	6174      	str	r4, [r6, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024bc:	61b4      	str	r4, [r6, #24]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024be:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80024c0:	f8c6 e000 	str.w	lr, [r6]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80024c4:	6077      	str	r7, [r6, #4]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024c6:	6131      	str	r1, [r6, #16]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80024c8:	61f2      	str	r2, [r6, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024ca:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024cc:	f000 fb0c 	bl	8002ae8 <HAL_DMA_Init>
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d13c      	bne.n	800254e <HAL_UART_MspInit+0x166>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80024d4:	666e      	str	r6, [r5, #100]	; 0x64
 80024d6:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80024d8:	b00f      	add	sp, #60	; 0x3c
 80024da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80024dc:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <HAL_UART_MspInit+0x1bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024de:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	f04f 0e03 	mov.w	lr, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 80024e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024ea:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ee:	f042 0210 	orr.w	r2, r2, #16
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44
 80024f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024f6:	f002 0210 	and.w	r2, r2, #16
 80024fa:	9205      	str	r2, [sp, #20]
 80024fc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002508:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	4827      	ldr	r0, [pc, #156]	; (80025ac <HAL_UART_MspInit+0x1c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	9306      	str	r3, [sp, #24]
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002514:	4e27      	ldr	r6, [pc, #156]	; (80025b4 <HAL_UART_MspInit+0x1cc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002518:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f000 fc95 	bl	8002e4c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002522:	4f25      	ldr	r7, [pc, #148]	; (80025b8 <HAL_UART_MspInit+0x1d0>)
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002524:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002528:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800252c:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002530:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002532:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002534:	60f4      	str	r4, [r6, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002536:	6174      	str	r4, [r6, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002538:	61b4      	str	r4, [r6, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800253a:	6234      	str	r4, [r6, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800253c:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800253e:	6037      	str	r7, [r6, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002540:	6071      	str	r1, [r6, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002542:	6132      	str	r2, [r6, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002544:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002546:	f000 facf 	bl	8002ae8 <HAL_DMA_Init>
 800254a:	2800      	cmp	r0, #0
 800254c:	d0c2      	beq.n	80024d4 <HAL_UART_MspInit+0xec>
      Error_Handler();
 800254e:	f7ff fbb7 	bl	8001cc0 <Error_Handler>
 8002552:	e7bf      	b.n	80024d4 <HAL_UART_MspInit+0xec>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_UART_MspInit+0x1bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002556:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800255a:	2508      	movs	r5, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 800255c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800255e:	a909      	add	r1, sp, #36	; 0x24
 8002560:	4816      	ldr	r0, [pc, #88]	; (80025bc <HAL_UART_MspInit+0x1d4>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8002562:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
 8002568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800256a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800256e:	9203      	str	r2, [sp, #12]
 8002570:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002574:	f042 0210 	orr.w	r2, r2, #16
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800257c:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800257e:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002582:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002586:	9304      	str	r3, [sp, #16]
 8002588:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800258a:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800258c:	f000 fc5e 	bl	8002e4c <HAL_GPIO_Init>
 8002590:	e742      	b.n	8002418 <HAL_UART_MspInit+0x30>
 8002592:	bf00      	nop
 8002594:	40004c00 	.word	0x40004c00
 8002598:	40007c00 	.word	0x40007c00
 800259c:	40011000 	.word	0x40011000
 80025a0:	40004800 	.word	0x40004800
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020c00 	.word	0x40020c00
 80025ac:	40020000 	.word	0x40020000
 80025b0:	20004234 	.word	0x20004234
 80025b4:	20004304 	.word	0x20004304
 80025b8:	40026440 	.word	0x40026440
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40026040 	.word	0x40026040

080025c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c4:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025cc:	490f      	ldr	r1, [pc, #60]	; (800260c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025ce:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 80025d2:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 80025d8:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 80025da:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025dc:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 80025e0:	4e0b      	ldr	r6, [pc, #44]	; (8002610 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 80025e2:	f040 0001 	orr.w	r0, r0, #1
 80025e6:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 80025e8:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	4001      	ands	r1, r0
 80025ee:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 80025f0:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80025f8:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 80025fa:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025fc:	6095      	str	r5, [r2, #8]
#endif
}
 80025fe:	bc70      	pop	{r4, r5, r6}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00
 8002608:	40023800 	.word	0x40023800
 800260c:	fef6ffff 	.word	0xfef6ffff
 8002610:	24003010 	.word	0x24003010

08002614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002614:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002618:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002620:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002628:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262a:	f000 f81b 	bl	8002664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	2000      	movs	r0, #0
 8002630:	f7ff fbd8 	bl	8001de4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fbb6 	bl	8001da4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8002638:	2000      	movs	r0, #0
 800263a:	bd08      	pop	{r3, pc}
 800263c:	40023c00 	.word	0x40023c00

08002640 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002640:	4a03      	ldr	r2, [pc, #12]	; (8002650 <HAL_IncTick+0x10>)
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <HAL_IncTick+0x14>)
 8002644:	6811      	ldr	r1, [r2, #0]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	440b      	add	r3, r1
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	200044b4 	.word	0x200044b4
 8002654:	20000020 	.word	0x20000020

08002658 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002658:	4b01      	ldr	r3, [pc, #4]	; (8002660 <HAL_GetTick+0x8>)
 800265a:	6818      	ldr	r0, [r3, #0]
}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	200044b4 	.word	0x200044b4

08002664 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4907      	ldr	r1, [pc, #28]	; (8002684 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002666:	0200      	lsls	r0, r0, #8
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800266a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800266c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002672:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8002676:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800267c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267e:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8002680:	60c8      	str	r0, [r1, #12]
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00
 8002688:	05fa0000 	.word	0x05fa0000

0800268c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268e:	b470      	push	{r4, r5, r6}
 8002690:	68dc      	ldr	r4, [r3, #12]
 8002692:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002696:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	2e04      	cmp	r6, #4
 800269e:	bf28      	it	cs
 80026a0:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d919      	bls.n	80026da <HAL_NVIC_SetPriority+0x4e>
 80026a6:	3c03      	subs	r4, #3
 80026a8:	2501      	movs	r5, #1
 80026aa:	40a5      	lsls	r5, r4
 80026ac:	3d01      	subs	r5, #1
 80026ae:	402a      	ands	r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) < 0)
 80026b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	fa03 f306 	lsl.w	r3, r3, r6
 80026b8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80026bc:	ea01 0103 	and.w	r1, r1, r3
 80026c0:	fa01 f104 	lsl.w	r1, r1, r4
 80026c4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80026c8:	db0a      	blt.n	80026e0 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	0109      	lsls	r1, r1, #4
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_NVIC_SetPriority+0x6c>)
 80026ce:	b2c9      	uxtb	r1, r1
 80026d0:	4403      	add	r3, r0
 80026d2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026d6:	bc70      	pop	{r4, r5, r6}
 80026d8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	2200      	movs	r2, #0
 80026dc:	4614      	mov	r4, r2
 80026de:	e7e7      	b.n	80026b0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e0:	f000 000f 	and.w	r0, r0, #15
 80026e4:	0109      	lsls	r1, r1, #4
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_NVIC_SetPriority+0x70>)
 80026e8:	b2c9      	uxtb	r1, r1
 80026ea:	4403      	add	r3, r0
 80026ec:	7619      	strb	r1, [r3, #24]
 80026ee:	bc70      	pop	{r4, r5, r6}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ecfc 	.word	0xe000ecfc

08002700 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002700:	f000 011f 	and.w	r1, r0, #31
 8002704:	2301      	movs	r3, #1
 8002706:	4a03      	ldr	r2, [pc, #12]	; (8002714 <HAL_NVIC_EnableIRQ+0x14>)
 8002708:	0940      	lsrs	r0, r0, #5
 800270a:	408b      	lsls	r3, r1
 800270c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <HAL_DFSDM_ChannelInit>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002718:	b350      	cbz	r0, 8002770 <HAL_DFSDM_ChannelInit+0x58>
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800271a:	4a5f      	ldr	r2, [pc, #380]	; (8002898 <HAL_DFSDM_ChannelInit+0x180>)
{
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800271e:	6803      	ldr	r3, [r0, #0]
  if(Instance == DFSDM1_Channel0)
 8002720:	4293      	cmp	r3, r2
 8002722:	d027      	beq.n	8002774 <HAL_DFSDM_ChannelInit+0x5c>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 8002724:	3220      	adds	r2, #32
 8002726:	4293      	cmp	r3, r2
 8002728:	f000 8087 	beq.w	800283a <HAL_DFSDM_ChannelInit+0x122>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 800272c:	3220      	adds	r2, #32
 800272e:	4293      	cmp	r3, r2
 8002730:	d01a      	beq.n	8002768 <HAL_DFSDM_ChannelInit+0x50>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 8002732:	3220      	adds	r2, #32
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <HAL_DFSDM_ChannelInit+0x48>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 8002738:	3220      	adds	r2, #32
 800273a:	4293      	cmp	r3, r2
 800273c:	d016      	beq.n	800276c <HAL_DFSDM_ChannelInit+0x54>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 800273e:	3220      	adds	r2, #32
 8002740:	4293      	cmp	r3, r2
 8002742:	d07c      	beq.n	800283e <HAL_DFSDM_ChannelInit+0x126>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 8002744:	3220      	adds	r2, #32
 8002746:	4293      	cmp	r3, r2
 8002748:	d00c      	beq.n	8002764 <HAL_DFSDM_ChannelInit+0x4c>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
 800274a:	3220      	adds	r2, #32
  {
    channel = 7;
 800274c:	4293      	cmp	r3, r2
 800274e:	bf14      	ite	ne
 8002750:	23ff      	movne	r3, #255	; 0xff
 8002752:	2307      	moveq	r3, #7
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002754:	4d51      	ldr	r5, [pc, #324]	; (800289c <HAL_DFSDM_ChannelInit+0x184>)
 8002756:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800275a:	b16b      	cbz	r3, 8002778 <HAL_DFSDM_ChannelInit+0x60>
    return HAL_ERROR;
 800275c:	2001      	movs	r0, #1
}
 800275e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    channel = 3;
 8002760:	2303      	movs	r3, #3
 8002762:	e7f7      	b.n	8002754 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 6;
 8002764:	2306      	movs	r3, #6
 8002766:	e7f5      	b.n	8002754 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 2;
 8002768:	2302      	movs	r3, #2
 800276a:	e7f3      	b.n	8002754 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 4;
 800276c:	2304      	movs	r3, #4
 800276e:	e7f1      	b.n	8002754 <HAL_DFSDM_ChannelInit+0x3c>
    return HAL_ERROR;
 8002770:	2001      	movs	r0, #1
 8002772:	4770      	bx	lr
    channel = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	e7ed      	b.n	8002754 <HAL_DFSDM_ChannelInit+0x3c>
 8002778:	4604      	mov	r4, r0
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800277a:	f7fe ff8b 	bl	8001694 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 800277e:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <HAL_DFSDM_ChannelInit+0x188>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	3201      	adds	r2, #1
 8002784:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d05c      	beq.n	8002846 <HAL_DFSDM_ChannelInit+0x12e>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800278c:	6823      	ldr	r3, [r4, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800278e:	2001      	movs	r0, #1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002790:	6966      	ldr	r6, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002792:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002794:	6922      	ldr	r2, [r4, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002796:	69a7      	ldr	r7, [r4, #24]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002798:	f421 4171 	bic.w	r1, r1, #61696	; 0xf100
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800279c:	4332      	orrs	r2, r6
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800279e:	69e6      	ldr	r6, [r4, #28]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80027a0:	6019      	str	r1, [r3, #0]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80027a2:	433a      	orrs	r2, r7
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80027a4:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027a6:	6a27      	ldr	r7, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80027a8:	430a      	orrs	r2, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80027aa:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027b0:	433e      	orrs	r6, r7
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80027b2:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80027b4:	681f      	ldr	r7, [r3, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027b6:	1e4a      	subs	r2, r1, #1
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80027b8:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80027bc:	f027 070f 	bic.w	r7, r7, #15
 80027c0:	601f      	str	r7, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027c2:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80027c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80027c6:	430e      	orrs	r6, r1
 80027c8:	601e      	str	r6, [r3, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027ca:	6899      	ldr	r1, [r3, #8]
  if(Instance == DFSDM1_Channel0)
 80027cc:	4e32      	ldr	r6, [pc, #200]	; (8002898 <HAL_DFSDM_ChannelInit+0x180>)
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027ce:	f421 015f 	bic.w	r1, r1, #14614528	; 0xdf0000
  if(Instance == DFSDM1_Channel0)
 80027d2:	42b3      	cmp	r3, r6
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027d4:	6099      	str	r1, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80027d6:	6899      	ldr	r1, [r3, #8]
 80027d8:	ea41 010c 	orr.w	r1, r1, ip
 80027dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80027e0:	6099      	str	r1, [r3, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	f001 0107 	and.w	r1, r1, #7
 80027e8:	6059      	str	r1, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	ea42 02ce 	orr.w	r2, r2, lr, lsl #3
 80027f0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80027f4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027fc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027fe:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(Instance == DFSDM1_Channel0)
 8002802:	d03b      	beq.n	800287c <HAL_DFSDM_ChannelInit+0x164>
  else if(Instance == DFSDM1_Channel1)
 8002804:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_DFSDM_ChannelInit+0x18c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_DFSDM_ChannelInit+0x11a>
  else if(Instance == DFSDM1_Channel2)
 800280a:	3220      	adds	r2, #32
 800280c:	4293      	cmp	r3, r2
 800280e:	d031      	beq.n	8002874 <HAL_DFSDM_ChannelInit+0x15c>
  else if(Instance == DFSDM1_Channel3)
 8002810:	3220      	adds	r2, #32
 8002812:	4293      	cmp	r3, r2
 8002814:	d015      	beq.n	8002842 <HAL_DFSDM_ChannelInit+0x12a>
  else if(Instance == DFSDM1_Channel4)
 8002816:	3220      	adds	r2, #32
 8002818:	4293      	cmp	r3, r2
 800281a:	d02d      	beq.n	8002878 <HAL_DFSDM_ChannelInit+0x160>
  else if(Instance == DFSDM1_Channel5)
 800281c:	3220      	adds	r2, #32
 800281e:	4293      	cmp	r3, r2
 8002820:	d02e      	beq.n	8002880 <HAL_DFSDM_ChannelInit+0x168>
  else if(Instance == DFSDM1_Channel6)
 8002822:	3220      	adds	r2, #32
 8002824:	4293      	cmp	r3, r2
 8002826:	d034      	beq.n	8002892 <HAL_DFSDM_ChannelInit+0x17a>
  else if(Instance == DFSDM1_Channel7)
 8002828:	481f      	ldr	r0, [pc, #124]	; (80028a8 <HAL_DFSDM_ChannelInit+0x190>)
    channel = 7;
 800282a:	4283      	cmp	r3, r0
 800282c:	bf14      	ite	ne
 800282e:	20ff      	movne	r0, #255	; 0xff
 8002830:	2007      	moveq	r0, #7
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002832:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8002836:	2000      	movs	r0, #0
 8002838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    channel = 1;
 800283a:	2301      	movs	r3, #1
 800283c:	e78a      	b.n	8002754 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 5;
 800283e:	2305      	movs	r3, #5
 8002840:	e788      	b.n	8002754 <HAL_DFSDM_ChannelInit+0x3c>
    channel = 3;
 8002842:	2003      	movs	r0, #3
 8002844:	e7f5      	b.n	8002832 <HAL_DFSDM_ChannelInit+0x11a>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_DFSDM_ChannelInit+0x180>)
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002848:	7921      	ldrb	r1, [r4, #4]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800284a:	681a      	ldr	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800284c:	2901      	cmp	r1, #1
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800284e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002852:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68a0      	ldr	r0, [r4, #8]
 8002858:	ea42 0200 	orr.w	r2, r2, r0
 800285c:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002864:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002866:	d00d      	beq.n	8002884 <HAL_DFSDM_ChannelInit+0x16c>
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HAL_DFSDM_ChannelInit+0x180>)
 800286a:	6813      	ldr	r3, [r2, #0]
 800286c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e78b      	b.n	800278c <HAL_DFSDM_ChannelInit+0x74>
    channel = 2;
 8002874:	2002      	movs	r0, #2
 8002876:	e7dc      	b.n	8002832 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 4;
 8002878:	2004      	movs	r0, #4
 800287a:	e7da      	b.n	8002832 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 0;
 800287c:	2000      	movs	r0, #0
 800287e:	e7d8      	b.n	8002832 <HAL_DFSDM_ChannelInit+0x11a>
    channel = 5;
 8002880:	2005      	movs	r0, #5
 8002882:	e7d6      	b.n	8002832 <HAL_DFSDM_ChannelInit+0x11a>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8002884:	68e1      	ldr	r1, [r4, #12]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	3901      	subs	r1, #1
 800288a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e7ea      	b.n	8002868 <HAL_DFSDM_ChannelInit+0x150>
    channel = 6;
 8002892:	2006      	movs	r0, #6
 8002894:	e7cd      	b.n	8002832 <HAL_DFSDM_ChannelInit+0x11a>
 8002896:	bf00      	nop
 8002898:	40017400 	.word	0x40017400
 800289c:	200000f8 	.word	0x200000f8
 80028a0:	20000118 	.word	0x20000118
 80028a4:	40017420 	.word	0x40017420
 80028a8:	400174e0 	.word	0x400174e0

080028ac <HAL_DFSDM_FilterInit>:
  if(hdfsdm_filter == NULL)
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d06b      	beq.n	8002988 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80028b0:	6802      	ldr	r2, [r0, #0]
{
 80028b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <HAL_DFSDM_FilterInit+0xe0>)
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d059      	beq.n	800296e <HAL_DFSDM_FilterInit+0xc2>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80028ba:	2200      	movs	r2, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80028bc:	2301      	movs	r3, #1
 80028be:	4604      	mov	r4, r0
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80028c0:	6302      	str	r2, [r0, #48]	; 0x30
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80028c2:	6502      	str	r2, [r0, #80]	; 0x50
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80028c4:	6443      	str	r3, [r0, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80028c6:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80028c8:	f7fe fe30 	bl	800152c <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028cc:	6823      	ldr	r3, [r4, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80028ce:	7a21      	ldrb	r1, [r4, #8]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028d0:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80028d2:	2901      	cmp	r1, #1
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028d4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80028d8:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	bf0c      	ite	eq
 80028de:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80028e2:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 80028e6:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80028e8:	7a62      	ldrb	r2, [r4, #9]
 80028ea:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	bf0c      	ite	eq
 80028f0:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80028f4:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 80028f8:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80028fa:	4a25      	ldr	r2, [pc, #148]	; (8002990 <HAL_DFSDM_FilterInit+0xe4>)
 80028fc:	6819      	ldr	r1, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80028fe:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002902:	400a      	ands	r2, r1
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002904:	f1be 0f02 	cmp.w	lr, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002908:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800290a:	d038      	beq.n	800297e <HAL_DFSDM_FilterInit+0xd2>
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800290c:	7c25      	ldrb	r5, [r4, #16]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800290e:	2601      	movs	r6, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002910:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002912:	2000      	movs	r0, #0
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002914:	2d01      	cmp	r5, #1
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002916:	491f      	ldr	r1, [pc, #124]	; (8002994 <HAL_DFSDM_FilterInit+0xe8>)
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002918:	bf0c      	ite	eq
 800291a:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800291e:	f022 0210 	bicne.w	r2, r2, #16
 8002922:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002924:	7c62      	ldrb	r2, [r4, #17]
 8002926:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	bf0c      	ite	eq
 800292c:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002930:	f022 0220 	bicne.w	r2, r2, #32
 8002934:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002936:	695a      	ldr	r2, [r3, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002938:	69e7      	ldr	r7, [r4, #28]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800293a:	4011      	ands	r1, r2
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800293c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800293e:	6159      	str	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8002940:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002942:	6959      	ldr	r1, [r3, #20]
 8002944:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002946:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002948:	433a      	orrs	r2, r7
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800294a:	3901      	subs	r1, #1
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800294c:	6867      	ldr	r7, [r4, #4]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800294e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002952:	69a1      	ldr	r1, [r4, #24]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002954:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002956:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002958:	f8c4 e038 	str.w	lr, [r4, #56]	; 0x38
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800295c:	4332      	orrs	r2, r6
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800295e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002962:	6367      	str	r7, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002964:	63e1      	str	r1, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002966:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002968:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
  return HAL_OK;
 800296c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800296e:	6843      	ldr	r3, [r0, #4]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d002      	beq.n	800297a <HAL_DFSDM_FilterInit+0xce>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002974:	68c3      	ldr	r3, [r0, #12]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d19f      	bne.n	80028ba <HAL_DFSDM_FilterInit+0xe>
    return HAL_ERROR;
 800297a:	4618      	mov	r0, r3
}
 800297c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	6961      	ldr	r1, [r4, #20]
 8002982:	430a      	orrs	r2, r1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e7c1      	b.n	800290c <HAL_DFSDM_FilterInit+0x60>
    return HAL_ERROR;
 8002988:	2001      	movs	r0, #1
 800298a:	4770      	bx	lr
 800298c:	40017500 	.word	0x40017500
 8002990:	ffff80f7 	.word	0xffff80f7
 8002994:	1c00ff00 	.word	0x1c00ff00

08002998 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002998:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800299c:	3b01      	subs	r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2bfd      	cmp	r3, #253	; 0xfd
 80029a2:	d812      	bhi.n	80029ca <HAL_DFSDM_FilterConfigRegChannel+0x32>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_DFSDM_FilterConfigRegChannel+0x50>)
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80029a6:	2a01      	cmp	r2, #1
{
 80029a8:	b430      	push	{r4, r5}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80029aa:	6804      	ldr	r4, [r0, #0]
 80029ac:	6825      	ldr	r5, [r4, #0]
 80029ae:	ea03 0305 	and.w	r3, r3, r5
 80029b2:	6023      	str	r3, [r4, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80029b4:	d00b      	beq.n	80029ce <HAL_DFSDM_FilterConfigRegChannel+0x36>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80029b6:	0209      	lsls	r1, r1, #8
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80029be:	4319      	orrs	r1, r3
 80029c0:	6021      	str	r1, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80029c2:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80029c4:	2000      	movs	r0, #0
}
 80029c6:	bc30      	pop	{r4, r5}
 80029c8:	4770      	bx	lr
    status = HAL_ERROR;
 80029ca:	2001      	movs	r0, #1
 80029cc:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80029ce:	020b      	lsls	r3, r1, #8
 80029d0:	6821      	ldr	r1, [r4, #0]
 80029d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029da:	430b      	orrs	r3, r1
 80029dc:	6023      	str	r3, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80029de:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2000      	movs	r0, #0
}
 80029e2:	bc30      	pop	{r4, r5}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	f8fbffff 	.word	0xf8fbffff

080029ec <HAL_DFSDM_FilterRegularStart>:
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80029ec:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80029f0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80029f4:	2a01      	cmp	r2, #1
 80029f6:	d001      	beq.n	80029fc <HAL_DFSDM_FilterRegularStart+0x10>
    status = HAL_ERROR;
 80029f8:	2001      	movs	r0, #1
}
 80029fa:	4770      	bx	lr
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80029fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80029fe:	b19a      	cbz	r2, 8002a28 <HAL_DFSDM_FilterRegularStart+0x3c>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002a00:	6802      	ldr	r2, [r0, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002a02:	2b03      	cmp	r3, #3
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002a04:	6811      	ldr	r1, [r2, #0]
 8002a06:	f021 0101 	bic.w	r1, r1, #1
 8002a0a:	6011      	str	r1, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002a0c:	6811      	ldr	r1, [r2, #0]
 8002a0e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8002a12:	6011      	str	r1, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002a14:	6811      	ldr	r1, [r2, #0]
 8002a16:	f041 0101 	orr.w	r1, r1, #1
 8002a1a:	6011      	str	r1, [r2, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002a1c:	d010      	beq.n	8002a40 <HAL_DFSDM_FilterRegularStart+0x54>
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a1e:	2302      	movs	r3, #2
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002a20:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2000      	movs	r0, #0
 8002a26:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002a28:	6801      	ldr	r1, [r0, #0]
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a2a:	2b01      	cmp	r3, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002a2c:	680a      	ldr	r2, [r1, #0]
 8002a2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a32:	600a      	str	r2, [r1, #0]
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a34:	d0f3      	beq.n	8002a1e <HAL_DFSDM_FilterRegularStart+0x32>
 8002a36:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002a38:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	4770      	bx	lr
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002a40:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a42:	b91b      	cbnz	r3, 8002a4c <HAL_DFSDM_FilterRegularStart+0x60>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002a44:	6813      	ldr	r3, [r2, #0]
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	6013      	str	r3, [r2, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8002a4c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a50:	2b01      	cmp	r3, #1
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002a52:	f04f 0304 	mov.w	r3, #4
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8002a56:	bf0c      	ite	eq
 8002a58:	6c42      	ldreq	r2, [r0, #68]	; 0x44
 8002a5a:	2201      	movne	r2, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002a5c:	6482      	str	r2, [r0, #72]	; 0x48
 8002a5e:	e7df      	b.n	8002a20 <HAL_DFSDM_FilterRegularStart+0x34>

08002a60 <HAL_DFSDM_FilterGetRegularValue>:
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8002a60:	6803      	ldr	r3, [r0, #0]
 8002a62:	69d8      	ldr	r0, [r3, #28]
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8002a64:	f000 0307 	and.w	r3, r0, #7
}
 8002a68:	1200      	asrs	r0, r0, #8
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8002a6a:	600b      	str	r3, [r1, #0]
}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop

08002a70 <HAL_DFSDM_FilterErrorCallback>:
{
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop

08002a74 <HAL_DFSDM_FilterPollForRegConversion>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002a74:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d003      	beq.n	8002a84 <HAL_DFSDM_FilterPollForRegConversion+0x10>
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d001      	beq.n	8002a84 <HAL_DFSDM_FilterPollForRegConversion+0x10>
    return HAL_ERROR;
 8002a80:	2001      	movs	r0, #1
 8002a82:	4770      	bx	lr
{
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	460c      	mov	r4, r1
 8002a88:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();  
 8002a8a:	f7ff fde5 	bl	8002658 <HAL_GetTick>
 8002a8e:	4606      	mov	r6, r0
 8002a90:	1c63      	adds	r3, r4, #1
 8002a92:	682a      	ldr	r2, [r5, #0]
 8002a94:	d114      	bne.n	8002ac0 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002a96:	6893      	ldr	r3, [r2, #8]
 8002a98:	0798      	lsls	r0, r3, #30
 8002a9a:	d5fc      	bpl.n	8002a96 <HAL_DFSDM_FilterPollForRegConversion+0x22>
    if((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 8002a9c:	6893      	ldr	r3, [r2, #8]
 8002a9e:	071b      	lsls	r3, r3, #28
 8002aa0:	d419      	bmi.n	8002ad6 <HAL_DFSDM_FilterPollForRegConversion+0x62>
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002aa2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002aa4:	b953      	cbnz	r3, 8002abc <HAL_DFSDM_FilterPollForRegConversion+0x48>
 8002aa6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8002aa8:	b940      	cbnz	r0, 8002abc <HAL_DFSDM_FilterPollForRegConversion+0x48>
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8002aaa:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	bf14      	ite	ne
 8002ab2:	2303      	movne	r3, #3
 8002ab4:	2301      	moveq	r3, #1
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002ab6:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_OK;
 8002abc:	2000      	movs	r0, #0
 8002abe:	bd70      	pop	{r4, r5, r6, pc}
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002ac0:	6893      	ldr	r3, [r2, #8]
 8002ac2:	0799      	lsls	r1, r3, #30
 8002ac4:	d4ea      	bmi.n	8002a9c <HAL_DFSDM_FilterPollForRegConversion+0x28>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ac6:	b124      	cbz	r4, 8002ad2 <HAL_DFSDM_FilterPollForRegConversion+0x5e>
 8002ac8:	f7ff fdc6 	bl	8002658 <HAL_GetTick>
 8002acc:	1b80      	subs	r0, r0, r6
 8002ace:	4284      	cmp	r4, r0
 8002ad0:	d2de      	bcs.n	8002a90 <HAL_DFSDM_FilterPollForRegConversion+0x1c>
          return HAL_TIMEOUT;
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8002ad6:	2301      	movs	r3, #1
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002ad8:	4628      	mov	r0, r5
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8002ada:	652b      	str	r3, [r5, #80]	; 0x50
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002adc:	f7ff ffc8 	bl	8002a70 <HAL_DFSDM_FilterErrorCallback>
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8002ae0:	682b      	ldr	r3, [r5, #0]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	e7dc      	b.n	8002aa2 <HAL_DFSDM_FilterPollForRegConversion+0x2e>

08002ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002aec:	f7ff fdb4 	bl	8002658 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002af0:	2c00      	cmp	r4, #0
 8002af2:	d076      	beq.n	8002be2 <HAL_DMA_Init+0xfa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af4:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002af6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002af8:	2100      	movs	r1, #0
 8002afa:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002afc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002b00:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8002b02:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b0c:	e005      	b.n	8002b1a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b0e:	f7ff fda3 	bl	8002658 <HAL_GetTick>
 8002b12:	1b40      	subs	r0, r0, r5
 8002b14:	2805      	cmp	r0, #5
 8002b16:	d83e      	bhi.n	8002b96 <HAL_DMA_Init+0xae>
 8002b18:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	07d1      	lsls	r1, r2, #31
 8002b1e:	d4f6      	bmi.n	8002b0e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b20:	68a1      	ldr	r1, [r4, #8]
 8002b22:	6862      	ldr	r2, [r4, #4]
 8002b24:	68e0      	ldr	r0, [r4, #12]
 8002b26:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b28:	6921      	ldr	r1, [r4, #16]
 8002b2a:	6965      	ldr	r5, [r4, #20]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b2c:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2e:	69a6      	ldr	r6, [r4, #24]
 8002b30:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b32:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b34:	4f37      	ldr	r7, [pc, #220]	; (8002c14 <HAL_DMA_Init+0x12c>)
  tmp = hdma->Instance->CR;
 8002b36:	6819      	ldr	r1, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b38:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b3c:	400f      	ands	r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3e:	6a21      	ldr	r1, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b40:	4332      	orrs	r2, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b42:	2d04      	cmp	r5, #4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b44:	ea42 0200 	orr.w	r2, r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b48:	ea42 0201 	orr.w	r2, r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b4c:	ea42 0207 	orr.w	r2, r2, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b50:	d028      	beq.n	8002ba4 <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b54:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b56:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b5a:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	482e      	ldr	r0, [pc, #184]	; (8002c18 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b60:	492e      	ldr	r1, [pc, #184]	; (8002c1c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b62:	3a10      	subs	r2, #16
  hdma->Instance->FCR = tmp;
 8002b64:	615d      	str	r5, [r3, #20]
  hdma->State = HAL_DMA_STATE_READY;
 8002b66:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b68:	fba0 0202 	umull	r0, r2, r0, r2
 8002b6c:	0912      	lsrs	r2, r2, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b6e:	5c88      	ldrb	r0, [r1, r2]
  
  if (stream_number > 3U)
 8002b70:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b72:	4a2b      	ldr	r2, [pc, #172]	; (8002c20 <HAL_DMA_Init+0x138>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b74:	f04f 0100 	mov.w	r1, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b78:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b7a:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b7e:	f04f 033f 	mov.w	r3, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b82:	bf88      	it	hi
 8002b84:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b86:	4083      	lsls	r3, r0
  return HAL_OK;
 8002b88:	4608      	mov	r0, r1
 8002b8a:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b8c:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8e:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002b90:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8002b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b98:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8002b9a:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ba4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002ba6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmp |= hdma->Init.FIFOThreshold;
 8002ba8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002baa:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8002bac:	f047 0504 	orr.w	r5, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bb0:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8002bb2:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002bb4:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bb6:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8002bba:	4315      	orrs	r5, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d0cd      	beq.n	8002b5c <HAL_DMA_Init+0x74>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc0:	b18e      	cbz	r6, 8002be6 <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bc2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002bc6:	d018      	beq.n	8002bfa <HAL_DMA_Init+0x112>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bc8:	2f02      	cmp	r7, #2
 8002bca:	d903      	bls.n	8002bd4 <HAL_DMA_Init+0xec>
 8002bcc:	2f03      	cmp	r7, #3
 8002bce:	d1c5      	bne.n	8002b5c <HAL_DMA_Init+0x74>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd0:	01c2      	lsls	r2, r0, #7
 8002bd2:	d5c3      	bpl.n	8002b5c <HAL_DMA_Init+0x74>
        hdma->State = HAL_DMA_STATE_READY;
 8002bd4:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd6:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8002bd8:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bda:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002bdc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002be2:	2001      	movs	r0, #1
 8002be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8002be6:	2f01      	cmp	r7, #1
 8002be8:	d003      	beq.n	8002bf2 <HAL_DMA_Init+0x10a>
 8002bea:	d3f1      	bcc.n	8002bd0 <HAL_DMA_Init+0xe8>
 8002bec:	2f02      	cmp	r7, #2
 8002bee:	d1b5      	bne.n	8002b5c <HAL_DMA_Init+0x74>
 8002bf0:	e7ee      	b.n	8002bd0 <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bf2:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002bf6:	d1b1      	bne.n	8002b5c <HAL_DMA_Init+0x74>
 8002bf8:	e7ec      	b.n	8002bd4 <HAL_DMA_Init+0xec>
    switch (tmp)
 8002bfa:	2f03      	cmp	r7, #3
 8002bfc:	d8ae      	bhi.n	8002b5c <HAL_DMA_Init+0x74>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <HAL_DMA_Init+0x11c>)
 8002c00:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8002c04:	08002bd5 	.word	0x08002bd5
 8002c08:	08002bd1 	.word	0x08002bd1
 8002c0c:	08002bd5 	.word	0x08002bd5
 8002c10:	08002bf3 	.word	0x08002bf3
 8002c14:	e010803f 	.word	0xe010803f
 8002c18:	aaaaaaab 	.word	0xaaaaaaab
 8002c1c:	08007794 	.word	0x08007794
 8002c20:	fffffc00 	.word	0xfffffc00

08002c24 <HAL_DMA_Start_IT>:
{
 8002c24:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8002c26:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002c2a:	2c01      	cmp	r4, #1
 8002c2c:	d00e      	beq.n	8002c4c <HAL_DMA_Start_IT+0x28>
 8002c2e:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c30:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c34:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c36:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8002c38:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c3c:	d00a      	beq.n	8002c54 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8002c3e:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 8002c42:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bcf0      	pop	{r4, r5, r6, r7}
 8002c4a:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002c4c:	2302      	movs	r3, #2
}
 8002c4e:	bcf0      	pop	{r4, r5, r6, r7}
 8002c50:	4618      	mov	r0, r3
 8002c52:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c54:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c56:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c58:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c5a:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5e:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c60:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c62:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c64:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c66:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002c6a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002c6c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c6e:	d019      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x80>
    hdma->Instance->PAR = SrcAddress;
 8002c70:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c72:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c74:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002c76:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8002c78:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7a:	408b      	lsls	r3, r1
 8002c7c:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	f043 0316 	orr.w	r3, r3, #22
 8002c84:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c86:	6963      	ldr	r3, [r4, #20]
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002c8e:	b11a      	cbz	r2, 8002c98 <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	f043 0308 	orr.w	r3, r3, #8
 8002c96:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002c98:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	6022      	str	r2, [r4, #0]
 8002ca2:	e7d0      	b.n	8002c46 <HAL_DMA_Start_IT+0x22>
    hdma->Instance->PAR = DstAddress;
 8002ca4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002ca6:	60e1      	str	r1, [r4, #12]
 8002ca8:	e7e4      	b.n	8002c74 <HAL_DMA_Start_IT+0x50>
 8002caa:	bf00      	nop

08002cac <HAL_DMA_IRQHandler>:
{
 8002cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cae:	4604      	mov	r4, r0
 8002cb0:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8002cb2:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb4:	2208      	movs	r2, #8
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb6:	6da7      	ldr	r7, [r4, #88]	; 0x58
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  __IO uint32_t count = 0;
 8002cba:	9001      	str	r0, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8002cbe:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cc0:	4960      	ldr	r1, [pc, #384]	; (8002e44 <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc2:	4215      	tst	r5, r2
  uint32_t timeout = SystemCoreClock / 9600;
 8002cc4:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc6:	d003      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cc8:	6821      	ldr	r1, [r4, #0]
 8002cca:	6808      	ldr	r0, [r1, #0]
 8002ccc:	0740      	lsls	r0, r0, #29
 8002cce:	d476      	bmi.n	8002dbe <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	4215      	tst	r5, r2
 8002cd6:	d003      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd8:	6821      	ldr	r1, [r4, #0]
 8002cda:	6949      	ldr	r1, [r1, #20]
 8002cdc:	0608      	lsls	r0, r1, #24
 8002cde:	d468      	bmi.n	8002db2 <HAL_DMA_IRQHandler+0x106>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	4215      	tst	r5, r2
 8002ce6:	d003      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ce8:	6821      	ldr	r1, [r4, #0]
 8002cea:	6809      	ldr	r1, [r1, #0]
 8002cec:	0789      	lsls	r1, r1, #30
 8002cee:	d45a      	bmi.n	8002da6 <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	4215      	tst	r5, r2
 8002cf6:	d003      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cf8:	6821      	ldr	r1, [r4, #0]
 8002cfa:	6808      	ldr	r0, [r1, #0]
 8002cfc:	0700      	lsls	r0, r0, #28
 8002cfe:	d43f      	bmi.n	8002d80 <HAL_DMA_IRQHandler+0xd4>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d00:	2220      	movs	r2, #32
 8002d02:	409a      	lsls	r2, r3
 8002d04:	4215      	tst	r5, r2
 8002d06:	d003      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d08:	6821      	ldr	r1, [r4, #0]
 8002d0a:	6808      	ldr	r0, [r1, #0]
 8002d0c:	06c0      	lsls	r0, r0, #27
 8002d0e:	d425      	bmi.n	8002d5c <HAL_DMA_IRQHandler+0xb0>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d12:	b30b      	cbz	r3, 8002d58 <HAL_DMA_IRQHandler+0xac>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d16:	07da      	lsls	r2, r3, #31
 8002d18:	d51a      	bpl.n	8002d50 <HAL_DMA_IRQHandler+0xa4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d1a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8002d1c:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d1e:	4a4a      	ldr	r2, [pc, #296]	; (8002e48 <HAL_DMA_IRQHandler+0x19c>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8002d24:	fba2 3206 	umull	r3, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 8002d28:	680b      	ldr	r3, [r1, #0]
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8002d2e:	0a92      	lsrs	r2, r2, #10
      __HAL_DMA_DISABLE(hdma);
 8002d30:	600b      	str	r3, [r1, #0]
 8002d32:	e002      	b.n	8002d3a <HAL_DMA_IRQHandler+0x8e>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d34:	680b      	ldr	r3, [r1, #0]
 8002d36:	07db      	lsls	r3, r3, #31
 8002d38:	d504      	bpl.n	8002d44 <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 8002d3a:	9b01      	ldr	r3, [sp, #4]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	d2f7      	bcs.n	8002d34 <HAL_DMA_IRQHandler+0x88>
      __HAL_UNLOCK(hdma);
 8002d44:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002d46:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8002d48:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002d50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d52:	b10b      	cbz	r3, 8002d58 <HAL_DMA_IRQHandler+0xac>
      hdma->XferErrorCallback(hdma);
 8002d54:	4620      	mov	r0, r4
 8002d56:	4798      	blx	r3
}
 8002d58:	b003      	add	sp, #12
 8002d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d5c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d5e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002d62:	2a05      	cmp	r2, #5
 8002d64:	d03b      	beq.n	8002dde <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d66:	680b      	ldr	r3, [r1, #0]
 8002d68:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d6c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d6e:	d054      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d70:	0319      	lsls	r1, r3, #12
 8002d72:	d55f      	bpl.n	8002e34 <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 8002d74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0ca      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	4798      	blx	r3
 8002d7e:	e7c7      	b.n	8002d10 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d80:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d82:	680a      	ldr	r2, [r1, #0]
 8002d84:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d88:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d8a:	d122      	bne.n	8002dd2 <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8c:	05d2      	lsls	r2, r2, #23
 8002d8e:	d403      	bmi.n	8002d98 <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d90:	680a      	ldr	r2, [r1, #0]
 8002d92:	f022 0208 	bic.w	r2, r2, #8
 8002d96:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002d98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d9a:	2a00      	cmp	r2, #0
 8002d9c:	d0b0      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8002d9e:	4620      	mov	r0, r4
 8002da0:	4790      	blx	r2
 8002da2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002da4:	e7ac      	b.n	8002d00 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002da6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002da8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002daa:	f042 0204 	orr.w	r2, r2, #4
 8002dae:	6562      	str	r2, [r4, #84]	; 0x54
 8002db0:	e79e      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002db2:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002db4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002db6:	f042 0202 	orr.w	r2, r2, #2
 8002dba:	6562      	str	r2, [r4, #84]	; 0x54
 8002dbc:	e790      	b.n	8002ce0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dbe:	6808      	ldr	r0, [r1, #0]
 8002dc0:	f020 0004 	bic.w	r0, r0, #4
 8002dc4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dc6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dc8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	6562      	str	r2, [r4, #84]	; 0x54
 8002dd0:	e77e      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dd2:	0311      	lsls	r1, r2, #12
 8002dd4:	d5e0      	bpl.n	8002d98 <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dd6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002dd8:	2a00      	cmp	r2, #0
 8002dda:	d1e0      	bne.n	8002d9e <HAL_DMA_IRQHandler+0xf2>
 8002ddc:	e790      	b.n	8002d00 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dde:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002de0:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002de2:	f022 0216 	bic.w	r2, r2, #22
 8002de6:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002de8:	694a      	ldr	r2, [r1, #20]
 8002dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dee:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df0:	b320      	cbz	r0, 8002e3c <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002df2:	680a      	ldr	r2, [r1, #0]
 8002df4:	f022 0208 	bic.w	r2, r2, #8
 8002df8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dfa:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8002dfc:	2500      	movs	r5, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	2001      	movs	r0, #1
        if(hdma->XferAbortCallback != NULL)
 8002e00:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002e08:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002e0c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002e10:	2900      	cmp	r1, #0
 8002e12:	d0a1      	beq.n	8002d58 <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 8002e14:	4620      	mov	r0, r4
 8002e16:	4788      	blx	r1
 8002e18:	e79e      	b.n	8002d58 <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e1a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002e1e:	d1a9      	bne.n	8002d74 <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e20:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002e22:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e24:	f022 0210 	bic.w	r2, r2, #16
 8002e28:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8002e2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8002e32:	e79f      	b.n	8002d74 <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 8002e34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d19f      	bne.n	8002d7a <HAL_DMA_IRQHandler+0xce>
 8002e3a:	e769      	b.n	8002d10 <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e3e:	2a00      	cmp	r2, #0
 8002e40:	d1d7      	bne.n	8002df2 <HAL_DMA_IRQHandler+0x146>
 8002e42:	e7da      	b.n	8002dfa <HAL_DMA_IRQHandler+0x14e>
 8002e44:	2000001c 	.word	0x2000001c
 8002e48:	1b4e81b5 	.word	0x1b4e81b5

08002e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e50:	f8d1 c000 	ldr.w	ip, [r1]
 8002e54:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e56:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e58:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8003088 <HAL_GPIO_Init+0x23c>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e5c:	f8df e22c 	ldr.w	lr, [pc, #556]	; 800308c <HAL_GPIO_Init+0x240>
 8002e60:	e003      	b.n	8002e6a <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e62:	3501      	adds	r5, #1
 8002e64:	2d10      	cmp	r5, #16
 8002e66:	f000 80bf 	beq.w	8002fe8 <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e6e:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d1f5      	bne.n	8002e62 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e76:	684e      	ldr	r6, [r1, #4]
 8002e78:	f026 0910 	bic.w	r9, r6, #16
 8002e7c:	f1b9 0f02 	cmp.w	r9, #2
 8002e80:	f040 80b5 	bne.w	8002fee <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 8002e84:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e88:	f005 0a07 	and.w	sl, r5, #7
 8002e8c:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e90:	690c      	ldr	r4, [r1, #16]
 8002e92:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e96:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002e9a:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e9e:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ea2:	fa04 f40a 	lsl.w	r4, r4, sl
 8002ea6:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eaa:	ea27 070b 	bic.w	r7, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eae:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002eb2:	433c      	orrs	r4, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eb4:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002eb8:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3] = temp;
 8002ebc:	f8c9 4020 	str.w	r4, [r9, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ec0:	ea6f 040b 	mvn.w	r4, fp
      temp = GPIOx->MODER;
 8002ec4:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ec8:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ecc:	ea04 0909 	and.w	r9, r4, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ed0:	ea47 0709 	orr.w	r7, r7, r9
      GPIOx->MODER = temp;
 8002ed4:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8002ed6:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ed8:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002edc:	ea07 0b04 	and.w	fp, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ee0:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ee2:	fa09 f905 	lsl.w	r9, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ee6:	fa07 f70a 	lsl.w	r7, r7, sl
 8002eea:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8002eee:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ef0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef2:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ef6:	ea49 0303 	orr.w	r3, r9, r3
        GPIOx->OTYPER = temp;
 8002efa:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8002efc:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002efe:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f00:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f02:	fa03 f30a 	lsl.w	r3, r3, sl
 8002f06:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8002f08:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f0a:	00f3      	lsls	r3, r6, #3
 8002f0c:	d5a9      	bpl.n	8002e62 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0e:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8002f12:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f16:	f005 0303 	and.w	r3, r5, #3
 8002f1a:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002f22:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f26:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f28:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
 8002f2c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002f30:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f34:	fa09 f903 	lsl.w	r9, r9, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f38:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8002f3c:	9401      	str	r4, [sp, #4]
 8002f3e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002f40:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f42:	ea24 0a09 	bic.w	sl, r4, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f46:	4c4b      	ldr	r4, [pc, #300]	; (8003074 <HAL_GPIO_Init+0x228>)
 8002f48:	42a0      	cmp	r0, r4
 8002f4a:	d069      	beq.n	8003020 <HAL_GPIO_Init+0x1d4>
 8002f4c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f50:	42a0      	cmp	r0, r4
 8002f52:	d067      	beq.n	8003024 <HAL_GPIO_Init+0x1d8>
 8002f54:	4c48      	ldr	r4, [pc, #288]	; (8003078 <HAL_GPIO_Init+0x22c>)
 8002f56:	42a0      	cmp	r0, r4
 8002f58:	d069      	beq.n	800302e <HAL_GPIO_Init+0x1e2>
 8002f5a:	4c48      	ldr	r4, [pc, #288]	; (800307c <HAL_GPIO_Init+0x230>)
 8002f5c:	42a0      	cmp	r0, r4
 8002f5e:	d06b      	beq.n	8003038 <HAL_GPIO_Init+0x1ec>
 8002f60:	4c47      	ldr	r4, [pc, #284]	; (8003080 <HAL_GPIO_Init+0x234>)
 8002f62:	42a0      	cmp	r0, r4
 8002f64:	d06d      	beq.n	8003042 <HAL_GPIO_Init+0x1f6>
 8002f66:	4c47      	ldr	r4, [pc, #284]	; (8003084 <HAL_GPIO_Init+0x238>)
 8002f68:	42a0      	cmp	r0, r4
 8002f6a:	d06f      	beq.n	800304c <HAL_GPIO_Init+0x200>
 8002f6c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8003090 <HAL_GPIO_Init+0x244>
 8002f70:	4548      	cmp	r0, r9
 8002f72:	d070      	beq.n	8003056 <HAL_GPIO_Init+0x20a>
 8002f74:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8003094 <HAL_GPIO_Init+0x248>
 8002f78:	4548      	cmp	r0, r9
 8002f7a:	d071      	beq.n	8003060 <HAL_GPIO_Init+0x214>
 8002f7c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8003098 <HAL_GPIO_Init+0x24c>
 8002f80:	4548      	cmp	r0, r9
 8002f82:	d072      	beq.n	800306a <HAL_GPIO_Init+0x21e>
 8002f84:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800309c <HAL_GPIO_Init+0x250>
 8002f88:	4548      	cmp	r0, r9
 8002f8a:	bf0c      	ite	eq
 8002f8c:	f04f 0909 	moveq.w	r9, #9
 8002f90:	f04f 090a 	movne.w	r9, #10
 8002f94:	fa09 f303 	lsl.w	r3, r9, r3
 8002f98:	ea43 030a 	orr.w	r3, r3, sl
        temp &= ~((uint32_t)iocurrent);
 8002f9c:	43d4      	mvns	r4, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f9e:	3501      	adds	r5, #1
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fa0:	60bb      	str	r3, [r7, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fa2:	03f7      	lsls	r7, r6, #15
        temp = EXTI->IMR;
 8002fa4:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8002fa8:	bf54      	ite	pl
 8002faa:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002fac:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fae:	03b7      	lsls	r7, r6, #14
        EXTI->IMR = temp;
 8002fb0:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 8002fb4:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8002fb8:	bf54      	ite	pl
 8002fba:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002fbc:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fbe:	02f7      	lsls	r7, r6, #11
        EXTI->EMR = temp;
 8002fc0:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 8002fc4:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	bf54      	ite	pl
 8002fca:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002fcc:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fce:	02b6      	lsls	r6, r6, #10
        EXTI->RTSR = temp;
 8002fd0:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 8002fd4:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	bf54      	ite	pl
 8002fda:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8002fdc:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fde:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8002fe0:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fe4:	f47f af41 	bne.w	8002e6a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8002fe8:	b003      	add	sp, #12
 8002fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fee:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ff2:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8002ff4:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ffc:	ea06 0704 	and.w	r7, r6, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003000:	fa04 f40a 	lsl.w	r4, r4, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003004:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003008:	ea6f 0404 	mvn.w	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800300c:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003010:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003014:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 8003018:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800301a:	f63f af6f 	bhi.w	8002efc <HAL_GPIO_Init+0xb0>
 800301e:	e75a      	b.n	8002ed6 <HAL_GPIO_Init+0x8a>
 8003020:	2300      	movs	r3, #0
 8003022:	e7b9      	b.n	8002f98 <HAL_GPIO_Init+0x14c>
 8003024:	f04f 0901 	mov.w	r9, #1
 8003028:	fa09 f303 	lsl.w	r3, r9, r3
 800302c:	e7b4      	b.n	8002f98 <HAL_GPIO_Init+0x14c>
 800302e:	f04f 0902 	mov.w	r9, #2
 8003032:	fa09 f303 	lsl.w	r3, r9, r3
 8003036:	e7af      	b.n	8002f98 <HAL_GPIO_Init+0x14c>
 8003038:	f04f 0903 	mov.w	r9, #3
 800303c:	fa09 f303 	lsl.w	r3, r9, r3
 8003040:	e7aa      	b.n	8002f98 <HAL_GPIO_Init+0x14c>
 8003042:	f04f 0904 	mov.w	r9, #4
 8003046:	fa09 f303 	lsl.w	r3, r9, r3
 800304a:	e7a5      	b.n	8002f98 <HAL_GPIO_Init+0x14c>
 800304c:	f04f 0905 	mov.w	r9, #5
 8003050:	fa09 f303 	lsl.w	r3, r9, r3
 8003054:	e7a0      	b.n	8002f98 <HAL_GPIO_Init+0x14c>
 8003056:	f04f 0906 	mov.w	r9, #6
 800305a:	fa09 f303 	lsl.w	r3, r9, r3
 800305e:	e79b      	b.n	8002f98 <HAL_GPIO_Init+0x14c>
 8003060:	f04f 0907 	mov.w	r9, #7
 8003064:	fa09 f303 	lsl.w	r3, r9, r3
 8003068:	e796      	b.n	8002f98 <HAL_GPIO_Init+0x14c>
 800306a:	f04f 0908 	mov.w	r9, #8
 800306e:	fa09 f303 	lsl.w	r3, r9, r3
 8003072:	e791      	b.n	8002f98 <HAL_GPIO_Init+0x14c>
 8003074:	40020000 	.word	0x40020000
 8003078:	40020800 	.word	0x40020800
 800307c:	40020c00 	.word	0x40020c00
 8003080:	40021000 	.word	0x40021000
 8003084:	40021400 	.word	0x40021400
 8003088:	40023800 	.word	0x40023800
 800308c:	40013c00 	.word	0x40013c00
 8003090:	40021800 	.word	0x40021800
 8003094:	40021c00 	.word	0x40021c00
 8003098:	40022000 	.word	0x40022000
 800309c:	40022400 	.word	0x40022400

080030a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a0:	b902      	cbnz	r2, 80030a4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030a2:	0409      	lsls	r1, r1, #16
 80030a4:	6181      	str	r1, [r0, #24]
 80030a6:	4770      	bx	lr

080030a8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80030a8:	6943      	ldr	r3, [r0, #20]
 80030aa:	4059      	eors	r1, r3
 80030ac:	6141      	str	r1, [r0, #20]
 80030ae:	4770      	bx	lr

080030b0 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d04f      	beq.n	8003154 <HAL_I2C_Init+0xa4>
{
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80030ba:	4604      	mov	r4, r0
 80030bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d03e      	beq.n	8003142 <HAL_I2C_Init+0x92>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c6:	2124      	movs	r1, #36	; 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030c8:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ca:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80030ce:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030d4:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80030d6:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030da:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 80030dc:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030de:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e6:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030e8:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ea:	d02f      	beq.n	800314c <HAL_I2C_Init+0x9c>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030ec:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f0:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030f2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f4:	d021      	beq.n	800313a <HAL_I2C_Init+0x8a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030f6:	685e      	ldr	r6, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f8:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030fa:	4d17      	ldr	r5, [pc, #92]	; (8003158 <HAL_I2C_Init+0xa8>)
  hi2c->State = HAL_I2C_STATE_READY;
 80030fc:	f04f 0e20 	mov.w	lr, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003100:	6922      	ldr	r2, [r4, #16]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8003102:	4608      	mov	r0, r1
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003104:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003106:	6966      	ldr	r6, [r4, #20]
 8003108:	69a7      	ldr	r7, [r4, #24]
 800310a:	4332      	orrs	r2, r6
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800310c:	605d      	str	r5, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800310e:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003110:	68de      	ldr	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003112:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003116:	6a27      	ldr	r7, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003118:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800311c:	433d      	orrs	r5, r7
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800311e:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003120:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003122:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312c:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800312e:	f884 e041 	strb.w	lr, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  return HAL_OK;
 8003138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800313a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	e7d9      	b.n	80030f6 <HAL_I2C_Init+0x46>
    hi2c->Lock = HAL_UNLOCKED;
 8003142:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003146:	f7fe fcad 	bl	8001aa4 <HAL_I2C_MspInit>
 800314a:	e7bb      	b.n	80030c4 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800314c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	e7d0      	b.n	80030f6 <HAL_I2C_Init+0x46>
    return HAL_ERROR;
 8003154:	2001      	movs	r0, #1
 8003156:	4770      	bx	lr
 8003158:	02008000 	.word	0x02008000

0800315c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b20      	cmp	r3, #32
 8003164:	d001      	beq.n	800316a <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003166:	2002      	movs	r0, #2
 8003168:	4770      	bx	lr
 800316a:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 800316c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003170:	2801      	cmp	r0, #1
 8003172:	d0f8      	beq.n	8003166 <HAL_I2CEx_ConfigAnalogFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003174:	2024      	movs	r0, #36	; 0x24
{
 8003176:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 8003178:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800317a:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800317c:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003180:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 8003182:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8003184:	f025 0501 	bic.w	r5, r5, #1
 8003188:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800318a:	6825      	ldr	r5, [r4, #0]
 800318c:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8003190:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003192:	6825      	ldr	r5, [r4, #0]
 8003194:	4329      	orrs	r1, r5
 8003196:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003198:	6821      	ldr	r1, [r4, #0]
 800319a:	f041 0101 	orr.w	r1, r1, #1
 800319e:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80031a0:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80031a4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 80031a8:	bc70      	pop	{r4, r5, r6}
 80031aa:	4770      	bx	lr

080031ac <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d001      	beq.n	80031ba <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80031b6:	2002      	movs	r0, #2
 80031b8:	4770      	bx	lr
 80031ba:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 80031bc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80031c0:	2801      	cmp	r0, #1
 80031c2:	d0f8      	beq.n	80031b6 <HAL_I2CEx_ConfigDigitalFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031c4:	2024      	movs	r0, #36	; 0x24
{
 80031c6:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 80031c8:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80031ca:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031cc:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80031d0:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 80031d2:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 80031d4:	f025 0501 	bic.w	r5, r5, #1
 80031d8:	6025      	str	r5, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 80031da:	6825      	ldr	r5, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80031dc:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80031e0:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80031e4:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 80031e6:	6821      	ldr	r1, [r4, #0]
 80031e8:	f041 0101 	orr.w	r1, r1, #1
 80031ec:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80031ee:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 80031f6:	bc70      	pop	{r4, r5, r6}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop

080031fc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	4a1b      	ldr	r2, [pc, #108]	; (800326c <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031fe:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003202:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8003206:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	6411      	str	r1, [r2, #64]	; 0x40
{
 800320a:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800320c:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800320e:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003214:	9201      	str	r2, [sp, #4]
 8003216:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800321e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003220:	f7ff fa1a 	bl	8002658 <HAL_GetTick>
 8003224:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003226:	e005      	b.n	8003234 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003228:	f7ff fa16 	bl	8002658 <HAL_GetTick>
 800322c:	1b40      	subs	r0, r0, r5
 800322e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003232:	d817      	bhi.n	8003264 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003234:	6863      	ldr	r3, [r4, #4]
 8003236:	03da      	lsls	r2, r3, #15
 8003238:	d5f6      	bpl.n	8003228 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800323a:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800323c:	4d0c      	ldr	r5, [pc, #48]	; (8003270 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800323e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003242:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003244:	f7ff fa08 	bl	8002658 <HAL_GetTick>
 8003248:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800324a:	e005      	b.n	8003258 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800324c:	f7ff fa04 	bl	8002658 <HAL_GetTick>
 8003250:	1b00      	subs	r0, r0, r4
 8003252:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003256:	d805      	bhi.n	8003264 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003258:	686b      	ldr	r3, [r5, #4]
 800325a:	039b      	lsls	r3, r3, #14
 800325c:	d5f6      	bpl.n	800324c <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800325e:	2000      	movs	r0, #0
}
 8003260:	b003      	add	sp, #12
 8003262:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003264:	2003      	movs	r0, #3
}
 8003266:	b003      	add	sp, #12
 8003268:	bd30      	pop	{r4, r5, pc}
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	40007000 	.word	0x40007000

08003274 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003274:	2800      	cmp	r0, #0
 8003276:	f000 81d0 	beq.w	800361a <HAL_RCC_OscConfig+0x3a6>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327a:	6803      	ldr	r3, [r0, #0]
{
 800327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003280:	07dd      	lsls	r5, r3, #31
{
 8003282:	b082      	sub	sp, #8
 8003284:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003286:	d530      	bpl.n	80032ea <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003288:	49aa      	ldr	r1, [pc, #680]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 800328a:	688a      	ldr	r2, [r1, #8]
 800328c:	f002 020c 	and.w	r2, r2, #12
 8003290:	2a04      	cmp	r2, #4
 8003292:	f000 8119 	beq.w	80034c8 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003296:	688a      	ldr	r2, [r1, #8]
 8003298:	f002 020c 	and.w	r2, r2, #12
 800329c:	2a08      	cmp	r2, #8
 800329e:	f000 810f 	beq.w	80034c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a2:	6863      	ldr	r3, [r4, #4]
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a8:	f000 8152 	beq.w	8003550 <HAL_RCC_OscConfig+0x2dc>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80db 	beq.w	8003468 <HAL_RCC_OscConfig+0x1f4>
 80032b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b6:	4b9f      	ldr	r3, [pc, #636]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	f000 81a6 	beq.w	800360a <HAL_RCC_OscConfig+0x396>
 80032be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7ff f9c4 	bl	8002658 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d0:	4d98      	ldr	r5, [pc, #608]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 80032d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d4:	e005      	b.n	80032e2 <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d6:	f7ff f9bf 	bl	8002658 <HAL_GetTick>
 80032da:	1b80      	subs	r0, r0, r6
 80032dc:	2864      	cmp	r0, #100	; 0x64
 80032de:	f200 80eb 	bhi.w	80034b8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	682b      	ldr	r3, [r5, #0]
 80032e4:	039a      	lsls	r2, r3, #14
 80032e6:	d5f6      	bpl.n	80032d6 <HAL_RCC_OscConfig+0x62>
 80032e8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	079f      	lsls	r7, r3, #30
 80032ec:	d529      	bpl.n	8003342 <HAL_RCC_OscConfig+0xce>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ee:	4a91      	ldr	r2, [pc, #580]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 80032f0:	6891      	ldr	r1, [r2, #8]
 80032f2:	f011 0f0c 	tst.w	r1, #12
 80032f6:	f000 8082 	beq.w	80033fe <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	6891      	ldr	r1, [r2, #8]
 80032fc:	f001 010c 	and.w	r1, r1, #12
 8003300:	2908      	cmp	r1, #8
 8003302:	d079      	beq.n	80033f8 <HAL_RCC_OscConfig+0x184>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003304:	68e3      	ldr	r3, [r4, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8109 	beq.w	800351e <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330c:	4b89      	ldr	r3, [pc, #548]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 800330e:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003310:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003318:	f7ff f99e 	bl	8002658 <HAL_GetTick>
 800331c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	e005      	b.n	800332c <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003320:	f7ff f99a 	bl	8002658 <HAL_GetTick>
 8003324:	1b80      	subs	r0, r0, r6
 8003326:	2802      	cmp	r0, #2
 8003328:	f200 80c6 	bhi.w	80034b8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	0798      	lsls	r0, r3, #30
 8003330:	d5f6      	bpl.n	8003320 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	682b      	ldr	r3, [r5, #0]
 8003334:	6922      	ldr	r2, [r4, #16]
 8003336:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800333a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800333e:	602b      	str	r3, [r5, #0]
 8003340:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	071a      	lsls	r2, r3, #28
 8003344:	d41f      	bmi.n	8003386 <HAL_RCC_OscConfig+0x112>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003346:	075d      	lsls	r5, r3, #29
 8003348:	d536      	bpl.n	80033b8 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334a:	4b7a      	ldr	r3, [pc, #488]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 800334c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334e:	00d0      	lsls	r0, r2, #3
 8003350:	d573      	bpl.n	800343a <HAL_RCC_OscConfig+0x1c6>
  FlagStatus pwrclkchanged = RESET;
 8003352:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003354:	4b78      	ldr	r3, [pc, #480]	; (8003538 <HAL_RCC_OscConfig+0x2c4>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	05d1      	lsls	r1, r2, #23
 800335a:	f140 809c 	bpl.w	8003496 <HAL_RCC_OscConfig+0x222>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335e:	68a3      	ldr	r3, [r4, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	f000 80fb 	beq.w	800355c <HAL_RCC_OscConfig+0x2e8>
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80b8 	beq.w	80034dc <HAL_RCC_OscConfig+0x268>
 800336c:	2b05      	cmp	r3, #5
 800336e:	4b71      	ldr	r3, [pc, #452]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 8003370:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003372:	f000 810c 	beq.w	800358e <HAL_RCC_OscConfig+0x31a>
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	671a      	str	r2, [r3, #112]	; 0x70
 800337c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	671a      	str	r2, [r3, #112]	; 0x70
 8003384:	e0ef      	b.n	8003566 <HAL_RCC_OscConfig+0x2f2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003386:	6963      	ldr	r3, [r4, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d043      	beq.n	8003414 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 800338c:	4b69      	ldr	r3, [pc, #420]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 800338e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003390:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003398:	f7ff f95e 	bl	8002658 <HAL_GetTick>
 800339c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	e005      	b.n	80033ac <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a0:	f7ff f95a 	bl	8002658 <HAL_GetTick>
 80033a4:	1b80      	subs	r0, r0, r6
 80033a6:	2802      	cmp	r0, #2
 80033a8:	f200 8086 	bhi.w	80034b8 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80033ae:	079b      	lsls	r3, r3, #30
 80033b0:	d5f6      	bpl.n	80033a0 <HAL_RCC_OscConfig+0x12c>
 80033b2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b4:	075d      	lsls	r5, r3, #29
 80033b6:	d4c8      	bmi.n	800334a <HAL_RCC_OscConfig+0xd6>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b8:	69a2      	ldr	r2, [r4, #24]
 80033ba:	b1ca      	cbz	r2, 80033f0 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033bc:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 80033be:	6899      	ldr	r1, [r3, #8]
 80033c0:	f001 010c 	and.w	r1, r1, #12
 80033c4:	2908      	cmp	r1, #8
 80033c6:	d021      	beq.n	800340c <HAL_RCC_OscConfig+0x198>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c8:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033cc:	f000 80e7 	beq.w	800359e <HAL_RCC_OscConfig+0x32a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d4:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 80033d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033d8:	f7ff f93e 	bl	8002658 <HAL_GetTick>
 80033dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	e004      	b.n	80033ea <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e0:	f7ff f93a 	bl	8002658 <HAL_GetTick>
 80033e4:	1b40      	subs	r0, r0, r5
 80033e6:	2802      	cmp	r0, #2
 80033e8:	d866      	bhi.n	80034b8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	019b      	lsls	r3, r3, #6
 80033ee:	d4f7      	bmi.n	80033e0 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80033f0:	2000      	movs	r0, #0
}
 80033f2:	b002      	add	sp, #8
 80033f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f8:	6852      	ldr	r2, [r2, #4]
 80033fa:	0256      	lsls	r6, r2, #9
 80033fc:	d482      	bmi.n	8003304 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4a4d      	ldr	r2, [pc, #308]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	0795      	lsls	r5, r2, #30
 8003404:	d524      	bpl.n	8003450 <HAL_RCC_OscConfig+0x1dc>
 8003406:	68e2      	ldr	r2, [r4, #12]
 8003408:	2a01      	cmp	r2, #1
 800340a:	d021      	beq.n	8003450 <HAL_RCC_OscConfig+0x1dc>
    return HAL_ERROR;
 800340c:	2001      	movs	r0, #1
}
 800340e:	b002      	add	sp, #8
 8003410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003414:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 8003416:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003420:	f7ff f91a 	bl	8002658 <HAL_GetTick>
 8003424:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003426:	e004      	b.n	8003432 <HAL_RCC_OscConfig+0x1be>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003428:	f7ff f916 	bl	8002658 <HAL_GetTick>
 800342c:	1b80      	subs	r0, r0, r6
 800342e:	2802      	cmp	r0, #2
 8003430:	d842      	bhi.n	80034b8 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003432:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003434:	079f      	lsls	r7, r3, #30
 8003436:	d4f7      	bmi.n	8003428 <HAL_RCC_OscConfig+0x1b4>
 8003438:	e7bb      	b.n	80033b2 <HAL_RCC_OscConfig+0x13e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800343c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	9b01      	ldr	r3, [sp, #4]
 800344e:	e781      	b.n	8003354 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003450:	4938      	ldr	r1, [pc, #224]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 8003452:	6920      	ldr	r0, [r4, #16]
 8003454:	680a      	ldr	r2, [r1, #0]
 8003456:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800345a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800345e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003460:	071a      	lsls	r2, r3, #28
 8003462:	f57f af70 	bpl.w	8003346 <HAL_RCC_OscConfig+0xd2>
 8003466:	e78e      	b.n	8003386 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003468:	4b32      	ldr	r3, [pc, #200]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 800346a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346c:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800347a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800347c:	f7ff f8ec 	bl	8002658 <HAL_GetTick>
 8003480:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	e004      	b.n	800348e <HAL_RCC_OscConfig+0x21a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003484:	f7ff f8e8 	bl	8002658 <HAL_GetTick>
 8003488:	1b80      	subs	r0, r0, r6
 800348a:	2864      	cmp	r0, #100	; 0x64
 800348c:	d814      	bhi.n	80034b8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	682b      	ldr	r3, [r5, #0]
 8003490:	039b      	lsls	r3, r3, #14
 8003492:	d4f7      	bmi.n	8003484 <HAL_RCC_OscConfig+0x210>
 8003494:	e728      	b.n	80032e8 <HAL_RCC_OscConfig+0x74>
      PWR->CR1 |= PWR_CR1_DBP;
 8003496:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003498:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800349a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800349e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80034a0:	f7ff f8da 	bl	8002658 <HAL_GetTick>
 80034a4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a6:	6833      	ldr	r3, [r6, #0]
 80034a8:	05da      	lsls	r2, r3, #23
 80034aa:	f53f af58 	bmi.w	800335e <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7ff f8d3 	bl	8002658 <HAL_GetTick>
 80034b2:	1bc0      	subs	r0, r0, r7
 80034b4:	2864      	cmp	r0, #100	; 0x64
 80034b6:	d9f6      	bls.n	80034a6 <HAL_RCC_OscConfig+0x232>
            return HAL_TIMEOUT;
 80034b8:	2003      	movs	r0, #3
}
 80034ba:	b002      	add	sp, #8
 80034bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c0:	684a      	ldr	r2, [r1, #4]
 80034c2:	0250      	lsls	r0, r2, #9
 80034c4:	f57f aeed 	bpl.w	80032a2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c8:	4a1a      	ldr	r2, [pc, #104]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	0391      	lsls	r1, r2, #14
 80034ce:	f57f af0c 	bpl.w	80032ea <HAL_RCC_OscConfig+0x76>
 80034d2:	6862      	ldr	r2, [r4, #4]
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	f47f af08 	bne.w	80032ea <HAL_RCC_OscConfig+0x76>
 80034da:	e797      	b.n	800340c <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e4:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	671a      	str	r2, [r3, #112]	; 0x70
 80034ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034ee:	f022 0204 	bic.w	r2, r2, #4
 80034f2:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80034f4:	f7ff f8b0 	bl	8002658 <HAL_GetTick>
 80034f8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fa:	e004      	b.n	8003506 <HAL_RCC_OscConfig+0x292>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7ff f8ac 	bl	8002658 <HAL_GetTick>
 8003500:	1bc0      	subs	r0, r0, r7
 8003502:	4540      	cmp	r0, r8
 8003504:	d8d8      	bhi.n	80034b8 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003506:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003508:	0798      	lsls	r0, r3, #30
 800350a:	d4f7      	bmi.n	80034fc <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 800350c:	2d00      	cmp	r5, #0
 800350e:	f43f af53 	beq.w	80033b8 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 8003514:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351a:	6413      	str	r3, [r2, #64]	; 0x40
 800351c:	e74c      	b.n	80033b8 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCC_OscConfig+0x2c0>)
 8003520:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800352a:	f7ff f895 	bl	8002658 <HAL_GetTick>
 800352e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003530:	e009      	b.n	8003546 <HAL_RCC_OscConfig+0x2d2>
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353c:	f7ff f88c 	bl	8002658 <HAL_GetTick>
 8003540:	1b80      	subs	r0, r0, r6
 8003542:	2802      	cmp	r0, #2
 8003544:	d8b8      	bhi.n	80034b8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	0799      	lsls	r1, r3, #30
 800354a:	d4f7      	bmi.n	800353c <HAL_RCC_OscConfig+0x2c8>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	e6f8      	b.n	8003342 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003550:	4a33      	ldr	r2, [pc, #204]	; (8003620 <HAL_RCC_OscConfig+0x3ac>)
 8003552:	6813      	ldr	r3, [r2, #0]
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e6b7      	b.n	80032cc <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355c:	4a30      	ldr	r2, [pc, #192]	; (8003620 <HAL_RCC_OscConfig+0x3ac>)
 800355e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003566:	f7ff f877 	bl	8002658 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356a:	4e2d      	ldr	r6, [pc, #180]	; (8003620 <HAL_RCC_OscConfig+0x3ac>)
      tickstart = HAL_GetTick();
 800356c:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003572:	e005      	b.n	8003580 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7ff f870 	bl	8002658 <HAL_GetTick>
 8003578:	eba0 0008 	sub.w	r0, r0, r8
 800357c:	42b8      	cmp	r0, r7
 800357e:	d89b      	bhi.n	80034b8 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003582:	079b      	lsls	r3, r3, #30
 8003584:	d5f6      	bpl.n	8003574 <HAL_RCC_OscConfig+0x300>
    if(pwrclkchanged == SET)
 8003586:	2d00      	cmp	r5, #0
 8003588:	f43f af16 	beq.w	80033b8 <HAL_RCC_OscConfig+0x144>
 800358c:	e7c1      	b.n	8003512 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358e:	f042 0204 	orr.w	r2, r2, #4
 8003592:	671a      	str	r2, [r3, #112]	; 0x70
 8003594:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	671a      	str	r2, [r3, #112]	; 0x70
 800359c:	e7e3      	b.n	8003566 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 800359e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80035a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035a6:	f7ff f857 	bl	8002658 <HAL_GetTick>
 80035aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ac:	e005      	b.n	80035ba <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ae:	f7ff f853 	bl	8002658 <HAL_GetTick>
 80035b2:	1b80      	subs	r0, r0, r6
 80035b4:	2802      	cmp	r0, #2
 80035b6:	f63f af7f 	bhi.w	80034b8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	682b      	ldr	r3, [r5, #0]
 80035bc:	0199      	lsls	r1, r3, #6
 80035be:	d4f6      	bmi.n	80035ae <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c0:	6a22      	ldr	r2, [r4, #32]
 80035c2:	69e3      	ldr	r3, [r4, #28]
 80035c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80035c6:	4313      	orrs	r3, r2
 80035c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80035ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80035cc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80035d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035d2:	0852      	lsrs	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d4:	4c12      	ldr	r4, [pc, #72]	; (8003620 <HAL_RCC_OscConfig+0x3ac>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80035da:	3a01      	subs	r2, #1
 80035dc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80035e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035e4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80035e6:	682b      	ldr	r3, [r5, #0]
 80035e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80035ee:	f7ff f833 	bl	8002658 <HAL_GetTick>
 80035f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	e005      	b.n	8003602 <HAL_RCC_OscConfig+0x38e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7ff f82f 	bl	8002658 <HAL_GetTick>
 80035fa:	1b40      	subs	r0, r0, r5
 80035fc:	2802      	cmp	r0, #2
 80035fe:	f63f af5b 	bhi.w	80034b8 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	019a      	lsls	r2, r3, #6
 8003606:	d5f6      	bpl.n	80035f6 <HAL_RCC_OscConfig+0x382>
 8003608:	e6f2      	b.n	80033f0 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e658      	b.n	80032cc <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 800361a:	2001      	movs	r0, #1
}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003624:	b178      	cbz	r0, 8003646 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003626:	4a5e      	ldr	r2, [pc, #376]	; (80037a0 <HAL_RCC_ClockConfig+0x17c>)
 8003628:	6813      	ldr	r3, [r2, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	428b      	cmp	r3, r1
 8003630:	d20b      	bcs.n	800364a <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	6813      	ldr	r3, [r2, #0]
 8003634:	f023 030f 	bic.w	r3, r3, #15
 8003638:	430b      	orrs	r3, r1
 800363a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363c:	6813      	ldr	r3, [r2, #0]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	4299      	cmp	r1, r3
 8003644:	d001      	beq.n	800364a <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8003646:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8003648:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364a:	6803      	ldr	r3, [r0, #0]
{
 800364c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003650:	079d      	lsls	r5, r3, #30
 8003652:	d514      	bpl.n	800367e <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	075c      	lsls	r4, r3, #29
 8003656:	d504      	bpl.n	8003662 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003658:	4c52      	ldr	r4, [pc, #328]	; (80037a4 <HAL_RCC_ClockConfig+0x180>)
 800365a:	68a2      	ldr	r2, [r4, #8]
 800365c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003660:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	071a      	lsls	r2, r3, #28
 8003664:	d504      	bpl.n	8003670 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003666:	4c4f      	ldr	r4, [pc, #316]	; (80037a4 <HAL_RCC_ClockConfig+0x180>)
 8003668:	68a2      	ldr	r2, [r4, #8]
 800366a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800366e:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003670:	4c4c      	ldr	r4, [pc, #304]	; (80037a4 <HAL_RCC_ClockConfig+0x180>)
 8003672:	6885      	ldr	r5, [r0, #8]
 8003674:	68a2      	ldr	r2, [r4, #8]
 8003676:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800367a:	432a      	orrs	r2, r5
 800367c:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367e:	07df      	lsls	r7, r3, #31
 8003680:	4604      	mov	r4, r0
 8003682:	460d      	mov	r5, r1
 8003684:	d521      	bpl.n	80036ca <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003686:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003688:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368e:	d07b      	beq.n	8003788 <HAL_RCC_ClockConfig+0x164>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003690:	2a02      	cmp	r2, #2
 8003692:	d071      	beq.n	8003778 <HAL_RCC_ClockConfig+0x154>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	0799      	lsls	r1, r3, #30
 8003696:	d528      	bpl.n	80036ea <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003698:	4942      	ldr	r1, [pc, #264]	; (80037a4 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369e:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a0:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80036aa:	f7fe ffd5 	bl	8002658 <HAL_GetTick>
 80036ae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b0:	e004      	b.n	80036bc <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b2:	f7fe ffd1 	bl	8002658 <HAL_GetTick>
 80036b6:	1bc0      	subs	r0, r0, r7
 80036b8:	4540      	cmp	r0, r8
 80036ba:	d862      	bhi.n	8003782 <HAL_RCC_ClockConfig+0x15e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036bc:	68b3      	ldr	r3, [r6, #8]
 80036be:	6862      	ldr	r2, [r4, #4]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80036c8:	d1f3      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ca:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <HAL_RCC_ClockConfig+0x17c>)
 80036cc:	6813      	ldr	r3, [r2, #0]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	429d      	cmp	r5, r3
 80036d4:	d20c      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	f023 030f 	bic.w	r3, r3, #15
 80036dc:	432b      	orrs	r3, r5
 80036de:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	429d      	cmp	r5, r3
 80036e8:	d002      	beq.n	80036f0 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 80036ea:	2001      	movs	r0, #1
 80036ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	075a      	lsls	r2, r3, #29
 80036f4:	d506      	bpl.n	8003704 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f6:	492b      	ldr	r1, [pc, #172]	; (80037a4 <HAL_RCC_ClockConfig+0x180>)
 80036f8:	68e0      	ldr	r0, [r4, #12]
 80036fa:	688a      	ldr	r2, [r1, #8]
 80036fc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003700:	4302      	orrs	r2, r0
 8003702:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	071b      	lsls	r3, r3, #28
 8003706:	d507      	bpl.n	8003718 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003708:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <HAL_RCC_ClockConfig+0x180>)
 800370a:	6921      	ldr	r1, [r4, #16]
 800370c:	6893      	ldr	r3, [r2, #8]
 800370e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003712:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003716:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003718:	4922      	ldr	r1, [pc, #136]	; (80037a4 <HAL_RCC_ClockConfig+0x180>)
 800371a:	688b      	ldr	r3, [r1, #8]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b04      	cmp	r3, #4
 8003722:	d019      	beq.n	8003758 <HAL_RCC_ClockConfig+0x134>
 8003724:	2b08      	cmp	r3, #8
 8003726:	d12a      	bne.n	800377e <HAL_RCC_ClockConfig+0x15a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003728:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800372a:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800372c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003730:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003732:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8003736:	d12a      	bne.n	800378e <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003738:	481b      	ldr	r0, [pc, #108]	; (80037a8 <HAL_RCC_ClockConfig+0x184>)
 800373a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800373e:	fba1 0100 	umull	r0, r1, r1, r0
 8003742:	f7fc fd7d 	bl	8000240 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_RCC_ClockConfig+0x180>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003752:	fbb0 f3f3 	udiv	r3, r0, r3
 8003756:	e000      	b.n	800375a <HAL_RCC_ClockConfig+0x136>
      sysclockfreq = HSE_VALUE;
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800375a:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <HAL_RCC_ClockConfig+0x180>)
  HAL_InitTick (TICK_INT_PRIORITY);
 800375c:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800375e:	4c14      	ldr	r4, [pc, #80]	; (80037b0 <HAL_RCC_ClockConfig+0x18c>)
 8003760:	6892      	ldr	r2, [r2, #8]
 8003762:	4914      	ldr	r1, [pc, #80]	; (80037b4 <HAL_RCC_ClockConfig+0x190>)
 8003764:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003768:	5ca2      	ldrb	r2, [r4, r2]
 800376a:	40d3      	lsrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800376e:	f7fe fb39 	bl	8001de4 <HAL_InitTick>
  return HAL_OK;
 8003772:	2000      	movs	r0, #0
 8003774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	0198      	lsls	r0, r3, #6
 800377a:	d48d      	bmi.n	8003698 <HAL_RCC_ClockConfig+0x74>
 800377c:	e7b5      	b.n	80036ea <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSI_VALUE;
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x184>)
 8003780:	e7eb      	b.n	800375a <HAL_RCC_ClockConfig+0x136>
        return HAL_TIMEOUT;
 8003782:	2003      	movs	r0, #3
}
 8003784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003788:	039e      	lsls	r6, r3, #14
 800378a:	d485      	bmi.n	8003698 <HAL_RCC_ClockConfig+0x74>
 800378c:	e7ad      	b.n	80036ea <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378e:	4807      	ldr	r0, [pc, #28]	; (80037ac <HAL_RCC_ClockConfig+0x188>)
 8003790:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003794:	2300      	movs	r3, #0
 8003796:	fba1 0100 	umull	r0, r1, r1, r0
 800379a:	f7fc fd51 	bl	8000240 <__aeabi_uldivmod>
 800379e:	e7d2      	b.n	8003746 <HAL_RCC_ClockConfig+0x122>
 80037a0:	40023c00 	.word	0x40023c00
 80037a4:	40023800 	.word	0x40023800
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	007a1200 	.word	0x007a1200
 80037b0:	0800777c 	.word	0x0800777c
 80037b4:	2000001c 	.word	0x2000001c

080037b8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b8:	4916      	ldr	r1, [pc, #88]	; (8003814 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80037ba:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037bc:	688b      	ldr	r3, [r1, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d01b      	beq.n	80037fe <HAL_RCC_GetSysClockFreq+0x46>
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d117      	bne.n	80037fa <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ca:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037cc:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037d4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80037d8:	d113      	bne.n	8003802 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037da:	480f      	ldr	r0, [pc, #60]	; (8003818 <HAL_RCC_GetSysClockFreq+0x60>)
 80037dc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80037e0:	fba1 0100 	umull	r0, r1, r1, r0
 80037e4:	f7fc fd2c 	bl	8000240 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <HAL_RCC_GetSysClockFreq+0x5c>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80037f0:	3301      	adds	r3, #1
 80037f2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80037f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80037f8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80037fa:	4807      	ldr	r0, [pc, #28]	; (8003818 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80037fc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80037fe:	4807      	ldr	r0, [pc, #28]	; (800381c <HAL_RCC_GetSysClockFreq+0x64>)
 8003800:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003802:	4806      	ldr	r0, [pc, #24]	; (800381c <HAL_RCC_GetSysClockFreq+0x64>)
 8003804:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003808:	2300      	movs	r3, #0
 800380a:	fba1 0100 	umull	r0, r1, r1, r0
 800380e:	f7fc fd17 	bl	8000240 <__aeabi_uldivmod>
 8003812:	e7e9      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x30>
 8003814:	40023800 	.word	0x40023800
 8003818:	00f42400 	.word	0x00f42400
 800381c:	007a1200 	.word	0x007a1200

08003820 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003822:	4a05      	ldr	r2, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003824:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003826:	4905      	ldr	r1, [pc, #20]	; (800383c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003828:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800382c:	6808      	ldr	r0, [r1, #0]
 800382e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003830:	40d8      	lsrs	r0, r3
 8003832:	4770      	bx	lr
 8003834:	40023800 	.word	0x40023800
 8003838:	0800778c 	.word	0x0800778c
 800383c:	2000001c 	.word	0x2000001c

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003844:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003846:	4905      	ldr	r1, [pc, #20]	; (800385c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003848:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800384c:	6808      	ldr	r0, [r1, #0]
 800384e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003850:	40d8      	lsrs	r0, r3
 8003852:	4770      	bx	lr
 8003854:	40023800 	.word	0x40023800
 8003858:	0800778c 	.word	0x0800778c
 800385c:	2000001c 	.word	0x2000001c

08003860 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003860:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003862:	220f      	movs	r2, #15
 8003864:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	f002 0203 	and.w	r2, r2, #3
 800386c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003874:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800387c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	08db      	lsrs	r3, r3, #3
{
 8003882:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003884:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003888:	4c05      	ldr	r4, [pc, #20]	; (80038a0 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800388a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800388c:	6823      	ldr	r3, [r4, #0]
}
 800388e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	600b      	str	r3, [r1, #0]
}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	40023c00 	.word	0x40023c00

080038a4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038a4:	6803      	ldr	r3, [r0, #0]
{
 80038a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038aa:	f013 0501 	ands.w	r5, r3, #1
{
 80038ae:	b083      	sub	sp, #12
 80038b0:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038b2:	d00b      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038b4:	4a9d      	ldr	r2, [pc, #628]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80038b6:	6891      	ldr	r1, [r2, #8]
 80038b8:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80038bc:	6091      	str	r1, [r2, #8]
 80038be:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80038c0:	6891      	ldr	r1, [r2, #8]
 80038c2:	4329      	orrs	r1, r5

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038c4:	fab5 f585 	clz	r5, r5
 80038c8:	096d      	lsrs	r5, r5, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038ca:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038cc:	f413 2600 	ands.w	r6, r3, #524288	; 0x80000
 80038d0:	d010      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038d2:	4996      	ldr	r1, [pc, #600]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80038d4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 80038d6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038da:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038de:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80038e2:	ea42 0206 	orr.w	r2, r2, r6
 80038e6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038ea:	f000 81c0 	beq.w	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038ee:	fab6 f686 	clz	r6, r6
 80038f2:	0976      	lsrs	r6, r6, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038f4:	02d9      	lsls	r1, r3, #11
 80038f6:	d510      	bpl.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038f8:	488c      	ldr	r0, [pc, #560]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80038fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80038fc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003900:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003904:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003908:	ea42 0201 	orr.w	r2, r2, r1
 800390c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003910:	f000 81ab 	beq.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003914:	2900      	cmp	r1, #0
 8003916:	bf08      	it	eq
 8003918:	2601      	moveq	r6, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800391a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800391e:	bf18      	it	ne
 8003920:	2501      	movne	r5, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003922:	069a      	lsls	r2, r3, #26
 8003924:	f100 815a 	bmi.w	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003928:	06da      	lsls	r2, r3, #27
 800392a:	d50c      	bpl.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800392c:	4a7f      	ldr	r2, [pc, #508]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800392e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003932:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003936:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800393a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800393e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003940:	4301      	orrs	r1, r0
 8003942:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003946:	045f      	lsls	r7, r3, #17
 8003948:	d508      	bpl.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800394a:	4978      	ldr	r1, [pc, #480]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800394c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800394e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003952:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003956:	4302      	orrs	r2, r0
 8003958:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800395c:	0418      	lsls	r0, r3, #16
 800395e:	d508      	bpl.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003960:	4972      	ldr	r1, [pc, #456]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003962:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003964:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003968:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800396c:	4302      	orrs	r2, r0
 800396e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003972:	03d9      	lsls	r1, r3, #15
 8003974:	d508      	bpl.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003976:	496d      	ldr	r1, [pc, #436]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003978:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800397a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800397e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003982:	4302      	orrs	r2, r0
 8003984:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003988:	039a      	lsls	r2, r3, #14
 800398a:	d508      	bpl.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800398c:	4967      	ldr	r1, [pc, #412]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800398e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003990:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003994:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003998:	4302      	orrs	r2, r0
 800399a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800399e:	065f      	lsls	r7, r3, #25
 80039a0:	d508      	bpl.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a2:	4962      	ldr	r1, [pc, #392]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039a4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80039a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039aa:	f022 0203 	bic.w	r2, r2, #3
 80039ae:	4302      	orrs	r2, r0
 80039b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b4:	0618      	lsls	r0, r3, #24
 80039b6:	d508      	bpl.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039b8:	495c      	ldr	r1, [pc, #368]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80039bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039c0:	f022 020c 	bic.w	r2, r2, #12
 80039c4:	4302      	orrs	r2, r0
 80039c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ca:	05d9      	lsls	r1, r3, #23
 80039cc:	d508      	bpl.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039ce:	4957      	ldr	r1, [pc, #348]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80039d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039d6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80039da:	4302      	orrs	r2, r0
 80039dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039e0:	059a      	lsls	r2, r3, #22
 80039e2:	d508      	bpl.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039e4:	4951      	ldr	r1, [pc, #324]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80039e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039ec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80039f0:	4302      	orrs	r2, r0
 80039f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039f6:	055f      	lsls	r7, r3, #21
 80039f8:	d508      	bpl.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039fa:	494c      	ldr	r1, [pc, #304]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a06:	4302      	orrs	r2, r0
 8003a08:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a0c:	0518      	lsls	r0, r3, #20
 8003a0e:	d508      	bpl.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a10:	4946      	ldr	r1, [pc, #280]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a14:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a1c:	4302      	orrs	r2, r0
 8003a1e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a22:	04d9      	lsls	r1, r3, #19
 8003a24:	d508      	bpl.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a26:	4941      	ldr	r1, [pc, #260]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a28:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003a2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a2e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003a32:	4302      	orrs	r2, r0
 8003a34:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a38:	049a      	lsls	r2, r3, #18
 8003a3a:	d508      	bpl.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a3c:	493b      	ldr	r1, [pc, #236]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a3e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003a40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a44:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003a48:	4302      	orrs	r2, r0
 8003a4a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a4e:	025f      	lsls	r7, r3, #9
 8003a50:	d508      	bpl.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a52:	4936      	ldr	r1, [pc, #216]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a54:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003a56:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a5a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003a5e:	4302      	orrs	r2, r0
 8003a60:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a64:	0298      	lsls	r0, r3, #10
 8003a66:	d50c      	bpl.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a68:	4930      	ldr	r1, [pc, #192]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a6a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003a6c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003a70:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a74:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003a78:	bf08      	it	eq
 8003a7a:	2601      	moveq	r6, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a7c:	4302      	orrs	r2, r0
 8003a7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a82:	0359      	lsls	r1, r3, #13
 8003a84:	d508      	bpl.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a86:	4929      	ldr	r1, [pc, #164]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a88:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003a8a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a8e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a92:	4302      	orrs	r2, r0
 8003a94:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a98:	021a      	lsls	r2, r3, #8
 8003a9a:	d509      	bpl.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a9c:	4923      	ldr	r1, [pc, #140]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003a9e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003aa2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003aa6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003aaa:	4302      	orrs	r2, r0
 8003aac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ab0:	015f      	lsls	r7, r3, #5
 8003ab2:	d509      	bpl.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ab4:	491d      	ldr	r1, [pc, #116]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ab6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003aba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003abe:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003ac2:	4302      	orrs	r2, r0
 8003ac4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ac8:	0118      	lsls	r0, r3, #4
 8003aca:	d509      	bpl.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003acc:	4917      	ldr	r1, [pc, #92]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ace:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003ad2:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003ad6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003ada:	4302      	orrs	r2, r0
 8003adc:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ae0:	00d9      	lsls	r1, r3, #3
 8003ae2:	d40b      	bmi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x258>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003aea:	07ea      	lsls	r2, r5, #31
 8003aec:	d414      	bmi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x274>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003aee:	2e01      	cmp	r6, #1
 8003af0:	f000 80c0 	beq.w	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003af4:	2000      	movs	r0, #0
}
 8003af6:	b003      	add	sp, #12
 8003af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003afc:	490b      	ldr	r1, [pc, #44]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003afe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b02:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003b06:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003b0a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003b0e:	ea42 0200 	orr.w	r2, r2, r0
 8003b12:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b16:	d1e8      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_PLLI2S_DISABLE();
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b1c:	461d      	mov	r5, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8003b1e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003b22:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003b24:	f7fe fd98 	bl	8002658 <HAL_GetTick>
 8003b28:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b2a:	e006      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003b2c:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b30:	f7fe fd92 	bl	8002658 <HAL_GetTick>
 8003b34:	1bc0      	subs	r0, r0, r7
 8003b36:	2864      	cmp	r0, #100	; 0x64
 8003b38:	d84c      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b3a:	682b      	ldr	r3, [r5, #0]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	d4f7      	bmi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	07df      	lsls	r7, r3, #31
 8003b44:	d503      	bpl.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003b46:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	f000 80e1 	beq.w	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b4e:	031d      	lsls	r5, r3, #12
 8003b50:	d504      	bpl.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003b52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b54:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003b58:	f000 8105 	beq.w	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b5c:	02d8      	lsls	r0, r3, #11
 8003b5e:	d504      	bpl.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b62:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003b66:	f000 80fe 	beq.w	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b6a:	01d9      	lsls	r1, r3, #7
 8003b6c:	d511      	bpl.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b6e:	4d9a      	ldr	r5, [pc, #616]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b70:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b72:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b76:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b7a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003b7e:	6921      	ldr	r1, [r4, #16]
 8003b80:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8003b84:	433a      	orrs	r2, r7
 8003b86:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003b8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b8e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b92:	019a      	lsls	r2, r3, #6
 8003b94:	d50d      	bpl.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	6862      	ldr	r2, [r4, #4]
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	68e0      	ldr	r0, [r4, #12]
 8003b9e:	68a1      	ldr	r1, [r4, #8]
 8003ba0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003ba4:	4a8c      	ldr	r2, [pc, #560]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003ba6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003baa:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003bae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003bb2:	4b89      	ldr	r3, [pc, #548]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bb6:	461d      	mov	r5, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8003bb8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003bbc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003bbe:	f7fe fd4b 	bl	8002658 <HAL_GetTick>
 8003bc2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	d491      	bmi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x24a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bca:	f7fe fd45 	bl	8002658 <HAL_GetTick>
 8003bce:	1bc0      	subs	r0, r0, r7
 8003bd0:	2864      	cmp	r0, #100	; 0x64
 8003bd2:	d9f7      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x320>
        return HAL_TIMEOUT;
 8003bd4:	2003      	movs	r0, #3
}
 8003bd6:	b003      	add	sp, #12
 8003bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4a7e      	ldr	r2, [pc, #504]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 8003bde:	4b7f      	ldr	r3, [pc, #508]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be0:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003be2:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003be8:	6411      	str	r1, [r2, #64]	; 0x40
 8003bea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bec:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003bf0:	9201      	str	r2, [sp, #4]
 8003bf2:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bfa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003bfc:	f7fe fd2c 	bl	8002658 <HAL_GetTick>
 8003c00:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c02:	e005      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c04:	f7fe fd28 	bl	8002658 <HAL_GetTick>
 8003c08:	eba0 0008 	sub.w	r0, r0, r8
 8003c0c:	2864      	cmp	r0, #100	; 0x64
 8003c0e:	d8e1      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	05db      	lsls	r3, r3, #23
 8003c14:	d5f6      	bpl.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x360>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c16:	4a70      	ldr	r2, [pc, #448]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c1a:	6f11      	ldr	r1, [r2, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c1c:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8003c20:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 8003c24:	d010      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003c26:	4281      	cmp	r1, r0
 8003c28:	d00e      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c2a:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c2c:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c2e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c32:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 8003c36:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c38:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8003c3a:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8003c3e:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003c40:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c42:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003c44:	07cf      	lsls	r7, r1, #31
 8003c46:	d479      	bmi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x498>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c48:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8003c4c:	f000 80a7 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003c50:	4961      	ldr	r1, [pc, #388]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003c52:	688a      	ldr	r2, [r1, #8]
 8003c54:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003c58:	608a      	str	r2, [r1, #8]
 8003c5a:	4a5f      	ldr	r2, [pc, #380]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c60:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	e65e      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 8003c6a:	2501      	movs	r5, #1
 8003c6c:	e655      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 8003c6e:	2600      	movs	r6, #0
      plli2sused = 1;
 8003c70:	2501      	movs	r5, #1
 8003c72:	e63f      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 8003c74:	4b58      	ldr	r3, [pc, #352]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003c76:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c78:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8003c7a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003c7e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003c80:	f7fe fcea 	bl	8002658 <HAL_GetTick>
 8003c84:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c86:	e004      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c88:	f7fe fce6 	bl	8002658 <HAL_GetTick>
 8003c8c:	1b80      	subs	r0, r0, r6
 8003c8e:	2864      	cmp	r0, #100	; 0x64
 8003c90:	d8a0      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c92:	682b      	ldr	r3, [r5, #0]
 8003c94:	009f      	lsls	r7, r3, #2
 8003c96:	d4f7      	bmi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c98:	6822      	ldr	r2, [r4, #0]
 8003c9a:	0310      	lsls	r0, r2, #12
 8003c9c:	d44a      	bmi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8003c9e:	02d1      	lsls	r1, r2, #11
 8003ca0:	d51d      	bpl.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ca4:	b9db      	cbnz	r3, 8003cde <HAL_RCCEx_PeriphCLKConfig+0x43a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ca6:	494c      	ldr	r1, [pc, #304]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ca8:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003caa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cae:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb6:	69a0      	ldr	r0, [r4, #24]
 8003cb8:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8003cbc:	4333      	orrs	r3, r6
 8003cbe:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003cc2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cca:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8003cce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003cd0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003cd4:	3801      	subs	r0, #1
 8003cd6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003cda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cde:	0292      	lsls	r2, r2, #10
 8003ce0:	d503      	bpl.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003ce2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce8:	d062      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    __HAL_RCC_PLLSAI_ENABLE();
 8003cea:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003cec:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cee:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8003cf0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cf4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003cf6:	f7fe fcaf 	bl	8002658 <HAL_GetTick>
 8003cfa:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	f53f aef8 	bmi.w	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d04:	f7fe fca8 	bl	8002658 <HAL_GetTick>
 8003d08:	1b40      	subs	r0, r0, r5
 8003d0a:	2864      	cmp	r0, #100	; 0x64
 8003d0c:	d9f6      	bls.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003d0e:	e761      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d10:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d14:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d18:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8003d1c:	6860      	ldr	r0, [r4, #4]
 8003d1e:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8003d22:	68a1      	ldr	r1, [r4, #8]
 8003d24:	433a      	orrs	r2, r7
 8003d26:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003d2a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003d2e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 8003d32:	e70c      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0b5      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x402>
 8003d3a:	e7b0      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003d42:	f7fe fc89 	bl	8002658 <HAL_GetTick>
 8003d46:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	e006      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fe fc85 	bl	8002658 <HAL_GetTick>
 8003d4e:	eba0 0009 	sub.w	r0, r0, r9
 8003d52:	4540      	cmp	r0, r8
 8003d54:	f63f af3e 	bhi.w	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d5a:	0799      	lsls	r1, r3, #30
 8003d5c:	d5f5      	bpl.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003d5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d60:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8003d64:	e770      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d66:	4d1c      	ldr	r5, [pc, #112]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d68:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d6a:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d6e:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d72:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8003d76:	68e1      	ldr	r1, [r4, #12]
 8003d78:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8003d7c:	433a      	orrs	r2, r7
 8003d7e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003d82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003d86:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d8a:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8003d8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d90:	f021 011f 	bic.w	r1, r1, #31
 8003d94:	3a01      	subs	r2, #1
 8003d96:	430a      	orrs	r2, r1
 8003d98:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8003d9c:	e6e5      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d9e:	480e      	ldr	r0, [pc, #56]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003da0:	490f      	ldr	r1, [pc, #60]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003da2:	6882      	ldr	r2, [r0, #8]
 8003da4:	4019      	ands	r1, r3
 8003da6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003daa:	430a      	orrs	r2, r1
 8003dac:	6082      	str	r2, [r0, #8]
 8003dae:	e754      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003db0:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003db2:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003db4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003db8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dbc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003dc0:	6a20      	ldr	r0, [r4, #32]
 8003dc2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003dcc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003dd4:	e789      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	0ffffcff 	.word	0x0ffffcff

08003de4 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d05d      	beq.n	8003ea4 <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de8:	2200      	movs	r2, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dea:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
{
 8003dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df2:	6282      	str	r2, [r0, #40]	; 0x28
 8003df4:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003df6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d04d      	beq.n	8003e9a <HAL_SPI_Init+0xb6>

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dfe:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e00:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003e02:	6822      	ldr	r2, [r4, #0]
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e04:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e08:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e0c:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 8003e10:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e12:	bf94      	ite	ls
 8003e14:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 8003e18:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 8003e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003e22:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e24:	d135      	bne.n	8003e92 <HAL_SPI_Init+0xae>
 8003e26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003e28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e2a:	b92b      	cbnz	r3, 8003e38 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e2c:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003e30:	bf8c      	ite	hi
 8003e32:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003e34:	2301      	movls	r3, #1
 8003e36:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e38:	68a1      	ldr	r1, [r4, #8]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e3a:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e3e:	6863      	ldr	r3, [r4, #4]
 8003e40:	6920      	ldr	r0, [r4, #16]
 8003e42:	430b      	orrs	r3, r1
 8003e44:	6961      	ldr	r1, [r4, #20]
 8003e46:	4303      	orrs	r3, r0
 8003e48:	69a0      	ldr	r0, [r4, #24]
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e4e:	ea4f 4e10 	mov.w	lr, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e52:	f400 7c00 	and.w	ip, r0, #512	; 0x200
 8003e56:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e5a:	f00e 0e04 	and.w	lr, lr, #4
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 8003e5e:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e60:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e62:	6a21      	ldr	r1, [r4, #32]
 8003e64:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e68:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e6a:	ea43 030c 	orr.w	r3, r3, ip
  hspi->State     = HAL_SPI_STATE_READY;
 8003e6e:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e72:	ea47 070e 	orr.w	r7, r7, lr
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e76:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e78:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e7a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e7c:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e7e:	69d3      	ldr	r3, [r2, #28]
 8003e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e84:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e86:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e8a:	f884 c05d 	strb.w	ip, [r4, #93]	; 0x5d
  return HAL_OK;
 8003e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	461e      	mov	r6, r3
 8003e96:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e98:	e7c6      	b.n	8003e28 <HAL_SPI_Init+0x44>
    hspi->Lock = HAL_UNLOCKED;
 8003e9a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003e9e:	f7fd ff39 	bl	8001d14 <HAL_SPI_MspInit>
 8003ea2:	e7ac      	b.n	8003dfe <HAL_SPI_Init+0x1a>
    return HAL_ERROR;
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	f000 808d 	beq.w	8003fc8 <HAL_TIM_Base_Init+0x120>
{ 
 8003eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003eb0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d077      	beq.n	8003fae <HAL_TIM_Base_Init+0x106>
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003ebe:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003ec0:	2302      	movs	r3, #2
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003ec2:	4943      	ldr	r1, [pc, #268]	; (8003fd0 <HAL_TIM_Base_Init+0x128>)
 8003ec4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;
 8003ec8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003ecc:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8003ed0:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003ed2:	fab1 f181 	clz	r1, r1
 8003ed6:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8003eda:	d047      	beq.n	8003f6c <HAL_TIM_Base_Init+0xc4>
 8003edc:	2900      	cmp	r1, #0
 8003ede:	d145      	bne.n	8003f6c <HAL_TIM_Base_Init+0xc4>
 8003ee0:	483c      	ldr	r0, [pc, #240]	; (8003fd4 <HAL_TIM_Base_Init+0x12c>)
 8003ee2:	4282      	cmp	r2, r0
 8003ee4:	d068      	beq.n	8003fb8 <HAL_TIM_Base_Init+0x110>
 8003ee6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003eea:	4282      	cmp	r2, r0
 8003eec:	d064      	beq.n	8003fb8 <HAL_TIM_Base_Init+0x110>
 8003eee:	4d3a      	ldr	r5, [pc, #232]	; (8003fd8 <HAL_TIM_Base_Init+0x130>)
 8003ef0:	4e3a      	ldr	r6, [pc, #232]	; (8003fdc <HAL_TIM_Base_Init+0x134>)
 8003ef2:	1b50      	subs	r0, r2, r5
 8003ef4:	42aa      	cmp	r2, r5
 8003ef6:	bf18      	it	ne
 8003ef8:	42b2      	cmpne	r2, r6
 8003efa:	fab0 f080 	clz	r0, r0
 8003efe:	ea4f 1050 	mov.w	r0, r0, lsr #5
 8003f02:	d15f      	bne.n	8003fc4 <HAL_TIM_Base_Init+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003f04:	4d36      	ldr	r5, [pc, #216]	; (8003fe0 <HAL_TIM_Base_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f0a:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003f0c:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 8003f0e:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003f12:	d034      	beq.n	8003f7e <HAL_TIM_Base_Init+0xd6>
 8003f14:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 8003f18:	42aa      	cmp	r2, r5
 8003f1a:	d030      	beq.n	8003f7e <HAL_TIM_Base_Init+0xd6>
 8003f1c:	4d2f      	ldr	r5, [pc, #188]	; (8003fdc <HAL_TIM_Base_Init+0x134>)
 8003f1e:	42aa      	cmp	r2, r5
 8003f20:	bf14      	ite	ne
 8003f22:	4605      	movne	r5, r0
 8003f24:	f040 0501 	orreq.w	r5, r0, #1
 8003f28:	bb4d      	cbnz	r5, 8003f7e <HAL_TIM_Base_Init+0xd6>
 8003f2a:	482e      	ldr	r0, [pc, #184]	; (8003fe4 <HAL_TIM_Base_Init+0x13c>)
 8003f2c:	4e2e      	ldr	r6, [pc, #184]	; (8003fe8 <HAL_TIM_Base_Init+0x140>)
 8003f2e:	4282      	cmp	r2, r0
 8003f30:	bf18      	it	ne
 8003f32:	42b2      	cmpne	r2, r6
 8003f34:	bf0c      	ite	eq
 8003f36:	2001      	moveq	r0, #1
 8003f38:	2000      	movne	r0, #0
 8003f3a:	d047      	beq.n	8003fcc <HAL_TIM_Base_Init+0x124>
 8003f3c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003f40:	4d2a      	ldr	r5, [pc, #168]	; (8003fec <HAL_TIM_Base_Init+0x144>)
 8003f42:	42aa      	cmp	r2, r5
 8003f44:	bf18      	it	ne
 8003f46:	42b2      	cmpne	r2, r6
 8003f48:	d019      	beq.n	8003f7e <HAL_TIM_Base_Init+0xd6>
 8003f4a:	4829      	ldr	r0, [pc, #164]	; (8003ff0 <HAL_TIM_Base_Init+0x148>)
 8003f4c:	4282      	cmp	r2, r0
 8003f4e:	d03d      	beq.n	8003fcc <HAL_TIM_Base_Init+0x124>
 8003f50:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003f54:	4282      	cmp	r2, r0
 8003f56:	d039      	beq.n	8003fcc <HAL_TIM_Base_Init+0x124>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f58:	69a1      	ldr	r1, [r4, #24]
 8003f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f5e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f60:	430b      	orrs	r3, r1
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003f62:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003f64:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f66:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003f68:	6291      	str	r1, [r2, #40]	; 0x28
 8003f6a:	e017      	b.n	8003f9c <HAL_TIM_Base_Init+0xf4>
 8003f6c:	481a      	ldr	r0, [pc, #104]	; (8003fd8 <HAL_TIM_Base_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f72:	68a5      	ldr	r5, [r4, #8]
 8003f74:	1a10      	subs	r0, r2, r0
 8003f76:	432b      	orrs	r3, r5
 8003f78:	fab0 f080 	clz	r0, r0
 8003f7c:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f84:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f86:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f88:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003f8a:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f90:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003f92:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f94:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003f96:	6296      	str	r6, [r2, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003f98:	b931      	cbnz	r1, 8003fa8 <HAL_TIM_Base_Init+0x100>
 8003f9a:	b928      	cbnz	r0, 8003fa8 <HAL_TIM_Base_Init+0x100>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f9c:	2301      	movs	r3, #1
  return HAL_OK;
 8003f9e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003fa0:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 8003fa2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa8:	6963      	ldr	r3, [r4, #20]
 8003faa:	6313      	str	r3, [r2, #48]	; 0x30
 8003fac:	e7f6      	b.n	8003f9c <HAL_TIM_Base_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;
 8003fae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003fb2:	f7fe f85f 	bl	8002074 <HAL_TIM_Base_MspInit>
 8003fb6:	e782      	b.n	8003ebe <HAL_TIM_Base_Init+0x16>
 8003fb8:	4807      	ldr	r0, [pc, #28]	; (8003fd8 <HAL_TIM_Base_Init+0x130>)
 8003fba:	1a10      	subs	r0, r2, r0
 8003fbc:	fab0 f080 	clz	r0, r0
 8003fc0:	0940      	lsrs	r0, r0, #5
 8003fc2:	e79f      	b.n	8003f04 <HAL_TIM_Base_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	e7a9      	b.n	8003f1c <HAL_TIM_Base_Init+0x74>
    return HAL_ERROR;
 8003fc8:	2001      	movs	r0, #1
 8003fca:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003fcc:	2000      	movs	r0, #0
 8003fce:	e7d6      	b.n	8003f7e <HAL_TIM_Base_Init+0xd6>
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40010400 	.word	0x40010400
 8003fdc:	40000c00 	.word	0x40000c00
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40014400 	.word	0x40014400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40001800 	.word	0x40001800
 8003ff0:	40001c00 	.word	0x40001c00

08003ff4 <HAL_TIM_Base_Start>:
{
 8003ff4:	4603      	mov	r3, r0
  htim->State= HAL_TIM_STATE_BUSY;
 8003ff6:	2202      	movs	r2, #2
}
 8003ff8:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003ffa:	6819      	ldr	r1, [r3, #0]
{
 8003ffc:	b410      	push	{r4}
  htim->State= HAL_TIM_STATE_READY;
 8003ffe:	2401      	movs	r4, #1
  htim->State= HAL_TIM_STATE_BUSY;
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8004004:	680a      	ldr	r2, [r1, #0]
 8004006:	4322      	orrs	r2, r4
 8004008:	600a      	str	r2, [r1, #0]
  htim->State= HAL_TIM_STATE_READY;
 800400a:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
}
 800400e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004014:	6803      	ldr	r3, [r0, #0]
}
 8004016:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop

0800402c <HAL_TIM_PWM_MspInit>:
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop

08004030 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8004030:	2800      	cmp	r0, #0
 8004032:	f000 808d 	beq.w	8004150 <HAL_TIM_PWM_Init+0x120>
{
 8004036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8004038:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800403c:	4604      	mov	r4, r0
 800403e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004042:	2b00      	cmp	r3, #0
 8004044:	d077      	beq.n	8004136 <HAL_TIM_PWM_Init+0x106>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004046:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;  
 8004048:	2302      	movs	r3, #2
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800404a:	4943      	ldr	r1, [pc, #268]	; (8004158 <HAL_TIM_PWM_Init+0x128>)
 800404c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;  
 8004050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004054:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8004058:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800405a:	fab1 f181 	clz	r1, r1
 800405e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8004062:	d047      	beq.n	80040f4 <HAL_TIM_PWM_Init+0xc4>
 8004064:	2900      	cmp	r1, #0
 8004066:	d145      	bne.n	80040f4 <HAL_TIM_PWM_Init+0xc4>
 8004068:	483c      	ldr	r0, [pc, #240]	; (800415c <HAL_TIM_PWM_Init+0x12c>)
 800406a:	4282      	cmp	r2, r0
 800406c:	d068      	beq.n	8004140 <HAL_TIM_PWM_Init+0x110>
 800406e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004072:	4282      	cmp	r2, r0
 8004074:	d064      	beq.n	8004140 <HAL_TIM_PWM_Init+0x110>
 8004076:	4d3a      	ldr	r5, [pc, #232]	; (8004160 <HAL_TIM_PWM_Init+0x130>)
 8004078:	4e3a      	ldr	r6, [pc, #232]	; (8004164 <HAL_TIM_PWM_Init+0x134>)
 800407a:	1b50      	subs	r0, r2, r5
 800407c:	42aa      	cmp	r2, r5
 800407e:	bf18      	it	ne
 8004080:	42b2      	cmpne	r2, r6
 8004082:	fab0 f080 	clz	r0, r0
 8004086:	ea4f 1050 	mov.w	r0, r0, lsr #5
 800408a:	d15f      	bne.n	800414c <HAL_TIM_PWM_Init+0x11c>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800408c:	4d36      	ldr	r5, [pc, #216]	; (8004168 <HAL_TIM_PWM_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004092:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004094:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 8004096:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800409a:	d034      	beq.n	8004106 <HAL_TIM_PWM_Init+0xd6>
 800409c:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 80040a0:	42aa      	cmp	r2, r5
 80040a2:	d030      	beq.n	8004106 <HAL_TIM_PWM_Init+0xd6>
 80040a4:	4d2f      	ldr	r5, [pc, #188]	; (8004164 <HAL_TIM_PWM_Init+0x134>)
 80040a6:	42aa      	cmp	r2, r5
 80040a8:	bf14      	ite	ne
 80040aa:	4605      	movne	r5, r0
 80040ac:	f040 0501 	orreq.w	r5, r0, #1
 80040b0:	bb4d      	cbnz	r5, 8004106 <HAL_TIM_PWM_Init+0xd6>
 80040b2:	482e      	ldr	r0, [pc, #184]	; (800416c <HAL_TIM_PWM_Init+0x13c>)
 80040b4:	4e2e      	ldr	r6, [pc, #184]	; (8004170 <HAL_TIM_PWM_Init+0x140>)
 80040b6:	4282      	cmp	r2, r0
 80040b8:	bf18      	it	ne
 80040ba:	42b2      	cmpne	r2, r6
 80040bc:	bf0c      	ite	eq
 80040be:	2001      	moveq	r0, #1
 80040c0:	2000      	movne	r0, #0
 80040c2:	d047      	beq.n	8004154 <HAL_TIM_PWM_Init+0x124>
 80040c4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80040c8:	4d2a      	ldr	r5, [pc, #168]	; (8004174 <HAL_TIM_PWM_Init+0x144>)
 80040ca:	42aa      	cmp	r2, r5
 80040cc:	bf18      	it	ne
 80040ce:	42b2      	cmpne	r2, r6
 80040d0:	d019      	beq.n	8004106 <HAL_TIM_PWM_Init+0xd6>
 80040d2:	4829      	ldr	r0, [pc, #164]	; (8004178 <HAL_TIM_PWM_Init+0x148>)
 80040d4:	4282      	cmp	r2, r0
 80040d6:	d03d      	beq.n	8004154 <HAL_TIM_PWM_Init+0x124>
 80040d8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80040dc:	4282      	cmp	r2, r0
 80040de:	d039      	beq.n	8004154 <HAL_TIM_PWM_Init+0x124>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e0:	69a1      	ldr	r1, [r4, #24]
 80040e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e8:	430b      	orrs	r3, r1
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80040ea:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80040ec:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ee:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80040f0:	6291      	str	r1, [r2, #40]	; 0x28
 80040f2:	e017      	b.n	8004124 <HAL_TIM_PWM_Init+0xf4>
 80040f4:	481a      	ldr	r0, [pc, #104]	; (8004160 <HAL_TIM_PWM_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80040fa:	68a5      	ldr	r5, [r4, #8]
 80040fc:	1a10      	subs	r0, r2, r0
 80040fe:	432b      	orrs	r3, r5
 8004100:	fab0 f080 	clz	r0, r0
 8004104:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004106:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800410c:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004110:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004112:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004118:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800411a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800411c:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800411e:	6296      	str	r6, [r2, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004120:	b931      	cbnz	r1, 8004130 <HAL_TIM_PWM_Init+0x100>
 8004122:	b928      	cbnz	r0, 8004130 <HAL_TIM_PWM_Init+0x100>
  TIMx->EGR = TIM_EGR_UG;
 8004124:	2301      	movs	r3, #1
  return HAL_OK;
 8004126:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004128:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 800412a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8004130:	6963      	ldr	r3, [r4, #20]
 8004132:	6313      	str	r3, [r2, #48]	; 0x30
 8004134:	e7f6      	b.n	8004124 <HAL_TIM_PWM_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;
 8004136:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800413a:	f7ff ff77 	bl	800402c <HAL_TIM_PWM_MspInit>
 800413e:	e782      	b.n	8004046 <HAL_TIM_PWM_Init+0x16>
 8004140:	4807      	ldr	r0, [pc, #28]	; (8004160 <HAL_TIM_PWM_Init+0x130>)
 8004142:	1a10      	subs	r0, r2, r0
 8004144:	fab0 f080 	clz	r0, r0
 8004148:	0940      	lsrs	r0, r0, #5
 800414a:	e79f      	b.n	800408c <HAL_TIM_PWM_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800414c:	4608      	mov	r0, r1
 800414e:	e7a9      	b.n	80040a4 <HAL_TIM_PWM_Init+0x74>
    return HAL_ERROR;
 8004150:	2001      	movs	r0, #1
 8004152:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004154:	2000      	movs	r0, #0
 8004156:	e7d6      	b.n	8004106 <HAL_TIM_PWM_Init+0xd6>
 8004158:	40010000 	.word	0x40010000
 800415c:	40000400 	.word	0x40000400
 8004160:	40010400 	.word	0x40010400
 8004164:	40000c00 	.word	0x40000c00
 8004168:	40000800 	.word	0x40000800
 800416c:	40014400 	.word	0x40014400
 8004170:	40014000 	.word	0x40014000
 8004174:	40001800 	.word	0x40001800
 8004178:	40001c00 	.word	0x40001c00

0800417c <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800417c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800417e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004180:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8004182:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8004186:	ea20 0001 	bic.w	r0, r0, r1
{
 800418a:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 800418c:	6218      	str	r0, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800418e:	4c0b      	ldr	r4, [pc, #44]	; (80041bc <HAL_TIM_PWM_Start+0x40>)

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8004190:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8004192:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8004194:	ea41 0102 	orr.w	r1, r1, r2
 8004198:	6219      	str	r1, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800419a:	d00a      	beq.n	80041b2 <HAL_TIM_PWM_Start+0x36>
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <HAL_TIM_PWM_Start+0x44>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <HAL_TIM_PWM_Start+0x36>
  __HAL_TIM_ENABLE(htim);
 80041a2:	681a      	ldr	r2, [r3, #0]
} 
 80041a4:	2000      	movs	r0, #0
 80041a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_TIM_ENABLE(htim);
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
} 
 80041b0:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80041b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
 80041ba:	e7f2      	b.n	80041a2 <HAL_TIM_PWM_Start+0x26>
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40010400 	.word	0x40010400

080041c4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80041c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d03f      	beq.n	800424c <HAL_TIM_ConfigClockSource+0x88>
  tmpsmcr = htim->Instance->SMCR;
 80041cc:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ce:	4a5e      	ldr	r2, [pc, #376]	; (8004348 <HAL_TIM_ConfigClockSource+0x184>)
{
 80041d0:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80041d2:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80041d4:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80041d6:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  switch (sClockSourceConfig->ClockSource)
 80041da:	680c      	ldr	r4, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80041dc:	689e      	ldr	r6, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80041de:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 80041e0:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e4:	ea02 0206 	and.w	r2, r2, r6
  htim->Instance->SMCR = tmpsmcr;
 80041e8:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80041ea:	d076      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x116>
 80041ec:	d918      	bls.n	8004220 <HAL_TIM_ConfigClockSource+0x5c>
 80041ee:	2c70      	cmp	r4, #112	; 0x70
 80041f0:	d061      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0xf2>
 80041f2:	d92e      	bls.n	8004252 <HAL_TIM_ConfigClockSource+0x8e>
 80041f4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80041f8:	d058      	beq.n	80042ac <HAL_TIM_ConfigClockSource+0xe8>
 80041fa:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80041fe:	d11c      	bne.n	800423a <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004200:	688a      	ldr	r2, [r1, #8]
 8004202:	684d      	ldr	r5, [r1, #4]
 8004204:	68cc      	ldr	r4, [r1, #12]
 8004206:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 8004208:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800420a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004212:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004214:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800421c:	609a      	str	r2, [r3, #8]
    break;
 800421e:	e00c      	b.n	800423a <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8004220:	2c10      	cmp	r4, #16
 8004222:	d033      	beq.n	800428c <HAL_TIM_ConfigClockSource+0xc8>
 8004224:	d939      	bls.n	800429a <HAL_TIM_ConfigClockSource+0xd6>
 8004226:	2c20      	cmp	r4, #32
 8004228:	d06f      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x146>
 800422a:	2c30      	cmp	r4, #48	; 0x30
 800422c:	d105      	bne.n	800423a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800422e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004230:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004234:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8004238:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800423a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800423c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800423e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004242:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004246:	4610      	mov	r0, r2
 8004248:	bcf0      	pop	{r4, r5, r6, r7}
 800424a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800424c:	2302      	movs	r3, #2
}
 800424e:	4618      	mov	r0, r3
 8004250:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004252:	2c50      	cmp	r4, #80	; 0x50
 8004254:	d060      	beq.n	8004318 <HAL_TIM_ConfigClockSource+0x154>
 8004256:	2c60      	cmp	r4, #96	; 0x60
 8004258:	d1ef      	bne.n	800423a <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800425c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8004262:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004264:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004266:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004268:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800426a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800426e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8004272:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8004276:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800427a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800427c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800427e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004280:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004284:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8004288:	609a      	str	r2, [r3, #8]
 800428a:	e7d6      	b.n	800423a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800428c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800428e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004292:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	e7cf      	b.n	800423a <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 800429a:	2c00      	cmp	r4, #0
 800429c:	d1cd      	bne.n	800423a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800429e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80042a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80042a4:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	e7c6      	b.n	800423a <HAL_TIM_ConfigClockSource+0x76>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80042ac:	6899      	ldr	r1, [r3, #8]
 80042ae:	4a27      	ldr	r2, [pc, #156]	; (800434c <HAL_TIM_ConfigClockSource+0x188>)
 80042b0:	400a      	ands	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
    break;
 80042b4:	e7c1      	b.n	800423a <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80042b6:	684c      	ldr	r4, [r1, #4]
 80042b8:	688a      	ldr	r2, [r1, #8]
 80042ba:	68cd      	ldr	r5, [r1, #12]
 80042bc:	4322      	orrs	r2, r4
  tmpsmcr = TIMx->SMCR;
 80042be:	689c      	ldr	r4, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c0:	4923      	ldr	r1, [pc, #140]	; (8004350 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80042c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80042ca:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80042cc:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80042ce:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d0:	4011      	ands	r1, r2
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042d2:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80042d6:	6099      	str	r1, [r3, #8]
    break;
 80042d8:	e7af      	b.n	800423a <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 80042da:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042dc:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80042de:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042e0:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e4:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80042e8:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 80042ea:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ec:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80042ee:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80042f4:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80042f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042fa:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80042fc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80042fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004302:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	e797      	b.n	800423a <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800430a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800430c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004310:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8004314:	609a      	str	r2, [r3, #8]
 8004316:	e790      	b.n	800423a <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 8004318:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431a:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800431c:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431e:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004322:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004326:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8004328:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800432c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800432e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8004332:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800433a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800433c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004340:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	e778      	b.n	800423a <HAL_TIM_ConfigClockSource+0x76>
 8004348:	fffe0088 	.word	0xfffe0088
 800434c:	fffefff8 	.word	0xfffefff8
 8004350:	fffeff88 	.word	0xfffeff88

08004354 <HAL_TIM_OC_DelayElapsedCallback>:
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop

08004358 <HAL_TIM_IC_CaptureCallback>:
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop

0800435c <HAL_TIM_PWM_PulseFinishedCallback>:
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop

08004360 <HAL_TIM_TriggerCallback>:
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop

08004364 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004364:	6803      	ldr	r3, [r0, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	0791      	lsls	r1, r2, #30
{
 800436a:	b510      	push	{r4, lr}
 800436c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800436e:	d502      	bpl.n	8004376 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	0792      	lsls	r2, r2, #30
 8004374:	d465      	bmi.n	8004442 <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	0752      	lsls	r2, r2, #29
 800437a:	d502      	bpl.n	8004382 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	0750      	lsls	r0, r2, #29
 8004380:	d44c      	bmi.n	800441c <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	0711      	lsls	r1, r2, #28
 8004386:	d502      	bpl.n	800438e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	0712      	lsls	r2, r2, #28
 800438c:	d434      	bmi.n	80043f8 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	06d0      	lsls	r0, r2, #27
 8004392:	d502      	bpl.n	800439a <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	06d1      	lsls	r1, r2, #27
 8004398:	d41e      	bmi.n	80043d8 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	07d2      	lsls	r2, r2, #31
 800439e:	d502      	bpl.n	80043a6 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	07d0      	lsls	r0, r2, #31
 80043a4:	d46b      	bmi.n	800447e <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	0611      	lsls	r1, r2, #24
 80043aa:	d502      	bpl.n	80043b2 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	0612      	lsls	r2, r2, #24
 80043b0:	d46d      	bmi.n	800448e <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	05d0      	lsls	r0, r2, #23
 80043b6:	d502      	bpl.n	80043be <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	0611      	lsls	r1, r2, #24
 80043bc:	d46f      	bmi.n	800449e <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	0652      	lsls	r2, r2, #25
 80043c2:	d502      	bpl.n	80043ca <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	0650      	lsls	r0, r2, #25
 80043c8:	d451      	bmi.n	800446e <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	0691      	lsls	r1, r2, #26
 80043ce:	d502      	bpl.n	80043d6 <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	0692      	lsls	r2, r2, #26
 80043d4:	d443      	bmi.n	800445e <HAL_TIM_IRQHandler+0xfa>
 80043d6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043dc:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043e0:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80043e2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80043e6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80043ea:	d06c      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 80043ec:	f7ff ffb4 	bl	8004358 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f0:	2200      	movs	r2, #0
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	7722      	strb	r2, [r4, #28]
 80043f6:	e7d0      	b.n	800439a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043f8:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fc:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80043fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004400:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004402:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004404:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004406:	079b      	lsls	r3, r3, #30
 8004408:	d15a      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440a:	f7ff ffa3 	bl	8004354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440e:	4620      	mov	r0, r4
 8004410:	f7ff ffa4 	bl	800435c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004414:	2200      	movs	r2, #0
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	7722      	strb	r2, [r4, #28]
 800441a:	e7b8      	b.n	800438e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800441c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004420:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004424:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004426:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004428:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800442a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800442e:	d144      	bne.n	80044ba <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004430:	f7ff ff90 	bl	8004354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	4620      	mov	r0, r4
 8004436:	f7ff ff91 	bl	800435c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	2200      	movs	r2, #0
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	7722      	strb	r2, [r4, #28]
 8004440:	e79f      	b.n	8004382 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004442:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004446:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004448:	6119      	str	r1, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800444a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800444e:	0799      	lsls	r1, r3, #30
 8004450:	d02d      	beq.n	80044ae <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8004452:	f7ff ff81 	bl	8004358 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	2200      	movs	r2, #0
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	7722      	strb	r2, [r4, #28]
 800445c:	e78b      	b.n	8004376 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800445e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8004462:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004464:	611a      	str	r2, [r3, #16]
}
 8004466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800446a:	f000 b98b 	b.w	8004784 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800446e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004472:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004474:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004476:	f7ff ff73 	bl	8004360 <HAL_TIM_TriggerCallback>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	e7a5      	b.n	80043ca <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800447e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004482:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004484:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004486:	f7fd fc11 	bl	8001cac <HAL_TIM_PeriodElapsedCallback>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	e78b      	b.n	80043a6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800448e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004492:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004494:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004496:	f000 f977 	bl	8004788 <HAL_TIMEx_BreakCallback>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	e789      	b.n	80043b2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800449e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80044a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80044a6:	f000 f96f 	bl	8004788 <HAL_TIMEx_BreakCallback>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	e787      	b.n	80043be <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ae:	f7ff ff51 	bl	8004354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7ff ff52 	bl	800435c <HAL_TIM_PWM_PulseFinishedCallback>
 80044b8:	e7cd      	b.n	8004456 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	f7ff ff4d 	bl	8004358 <HAL_TIM_IC_CaptureCallback>
 80044be:	e7bc      	b.n	800443a <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 80044c0:	f7ff ff4a 	bl	8004358 <HAL_TIM_IC_CaptureCallback>
 80044c4:	e7a6      	b.n	8004414 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	f7ff ff45 	bl	8004354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ca:	4620      	mov	r0, r4
 80044cc:	f7ff ff46 	bl	800435c <HAL_TIM_PWM_PulseFinishedCallback>
 80044d0:	e78e      	b.n	80043f0 <HAL_TIM_IRQHandler+0x8c>
 80044d2:	bf00      	nop

080044d4 <TIM_OC1_SetConfig>:
{
 80044d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d6:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 80044d8:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044da:	f024 0401 	bic.w	r4, r4, #1
  tmpccmrx |= OC_Config->OCMode;
 80044de:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e2:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80044e4:	4d13      	ldr	r5, [pc, #76]	; (8004534 <TIM_OC1_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 80044e6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80044e8:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80044ea:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 80044ec:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80044f0:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044f4:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= OC_Config->OCPolarity;
 80044f8:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 80044fc:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004500:	d009      	beq.n	8004516 <TIM_OC1_SetConfig+0x42>
 8004502:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004506:	42a8      	cmp	r0, r5
 8004508:	d005      	beq.n	8004516 <TIM_OC1_SetConfig+0x42>
  TIMx->CCR1 = OC_Config->Pulse;
 800450a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800450c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800450e:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004510:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8004512:	6203      	str	r3, [r0, #32]
 8004514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8004516:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800451a:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800451c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800451e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004522:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004524:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8004526:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004528:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800452c:	432c      	orrs	r4, r5
 800452e:	e7ec      	b.n	800450a <TIM_OC1_SetConfig+0x36>
 8004530:	fffeff8c 	.word	0xfffeff8c
 8004534:	40010000 	.word	0x40010000

08004538 <TIM_OC2_SetConfig>:
{
 8004538:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4);
 800453c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453e:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004542:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004544:	4a14      	ldr	r2, [pc, #80]	; (8004598 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004546:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004548:	4d14      	ldr	r5, [pc, #80]	; (800459c <TIM_OC2_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 800454a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800454c:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800454e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 8004550:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004554:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004558:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 4);
 800455c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004560:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004564:	d009      	beq.n	800457a <TIM_OC2_SetConfig+0x42>
 8004566:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800456a:	42a8      	cmp	r0, r5
 800456c:	d005      	beq.n	800457a <TIM_OC2_SetConfig+0x42>
  TIMx->CCR2 = OC_Config->Pulse;
 800456e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004570:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004572:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004574:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004576:	6203      	str	r3, [r0, #32]
 8004578:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 800457a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800457e:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004580:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004582:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004586:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8004588:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800458c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800458e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004592:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004596:	e7ea      	b.n	800456e <TIM_OC2_SetConfig+0x36>
 8004598:	feff8cff 	.word	0xfeff8cff
 800459c:	40010000 	.word	0x40010000

080045a0 <TIM_OC3_SetConfig>:
{
 80045a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045a2:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8);
 80045a4:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045a6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 80045aa:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80045ac:	4a14      	ldr	r2, [pc, #80]	; (8004600 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ae:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80045b0:	4d14      	ldr	r5, [pc, #80]	; (8004604 <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 80045b2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80045b4:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80045b6:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 80045b8:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80045bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80045c0:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 8);
 80045c4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80045c8:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80045cc:	d009      	beq.n	80045e2 <TIM_OC3_SetConfig+0x42>
 80045ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045d2:	42a8      	cmp	r0, r5
 80045d4:	d005      	beq.n	80045e2 <TIM_OC3_SetConfig+0x42>
  TIMx->CCR3 = OC_Config->Pulse;
 80045d6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045d8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80045da:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80045dc:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80045de:	6203      	str	r3, [r0, #32]
 80045e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 80045e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80045e6:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80045e8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ea:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80045ee:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80045f0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80045f4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80045f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80045fa:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80045fe:	e7ea      	b.n	80045d6 <TIM_OC3_SetConfig+0x36>
 8004600:	fffeff8c 	.word	0xfffeff8c
 8004604:	40010000 	.word	0x40010000

08004608 <TIM_OC4_SetConfig>:
{
 8004608:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800460a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12);
 800460c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800460e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004612:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004614:	4a10      	ldr	r2, [pc, #64]	; (8004658 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004616:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004618:	4d10      	ldr	r5, [pc, #64]	; (800465c <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 800461a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800461c:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800461e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 8004620:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004628:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 12);
 800462c:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004630:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004634:	d009      	beq.n	800464a <TIM_OC4_SetConfig+0x42>
 8004636:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800463a:	42a8      	cmp	r0, r5
 800463c:	d005      	beq.n	800464a <TIM_OC4_SetConfig+0x42>
  TIMx->CCR4 = OC_Config->Pulse;
 800463e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004640:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004642:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004644:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004646:	6203      	str	r3, [r0, #32]
 8004648:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 800464a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800464e:	694d      	ldr	r5, [r1, #20]
 8004650:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004654:	e7f3      	b.n	800463e <TIM_OC4_SetConfig+0x36>
 8004656:	bf00      	nop
 8004658:	feff8cff 	.word	0xfeff8cff
 800465c:	40010000 	.word	0x40010000

08004660 <HAL_TIMEx_PWMN_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004660:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8004662:	2204      	movs	r2, #4
} 
 8004664:	2000      	movs	r0, #0
  tmp = TIM_CCER_CC1NE << Channel;
 8004666:	fa02 f101 	lsl.w	r1, r2, r1
{
 800466a:	b410      	push	{r4}

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 800466c:	6a1c      	ldr	r4, [r3, #32]
 800466e:	ea24 0401 	bic.w	r4, r4, r1
 8004672:	621c      	str	r4, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8004674:	6a1a      	ldr	r2, [r3, #32]
} 
 8004676:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 800467a:	4311      	orrs	r1, r2
 800467c:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 800467e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004684:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
} 
 800468e:	4770      	bx	lr

08004690 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004690:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004694:	2b01      	cmp	r3, #1
{
 8004696:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8004698:	d01f      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  tmpcr2 = htim->Instance->CR2;
 800469a:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800469c:	4d11      	ldr	r5, [pc, #68]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 800469e:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046a0:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80046a2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046a4:	d014      	beq.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80046a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80046aa:	42aa      	cmp	r2, r5
 80046ac:	d010      	beq.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ae:	680d      	ldr	r5, [r1, #0]
  __HAL_UNLOCK(htim);
 80046b0:	2600      	movs	r6, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b2:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80046b4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046bc:	4321      	orrs	r1, r4
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046be:	432b      	orrs	r3, r5
  return HAL_OK;
 80046c0:	4635      	mov	r5, r6
  htim->Instance->CR2 = tmpcr2;
 80046c2:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 80046c4:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80046c6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
} 
 80046ca:	4628      	mov	r0, r5
 80046cc:	bc70      	pop	{r4, r5, r6}
 80046ce:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046d4:	684d      	ldr	r5, [r1, #4]
 80046d6:	432b      	orrs	r3, r5
 80046d8:	e7e9      	b.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x1e>
  __HAL_LOCK(htim);
 80046da:	2502      	movs	r5, #2
} 
 80046dc:	4628      	mov	r0, r5
 80046de:	bc70      	pop	{r4, r5, r6}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000

080046e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80046e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d041      	beq.n	8004774 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046f0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046f2:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
{
 80046f8:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046fa:	688c      	ldr	r4, [r1, #8]
{
 80046fc:	b082      	sub	sp, #8
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046fe:	680f      	ldr	r7, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004700:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004702:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004704:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800470a:	6805      	ldr	r5, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800470c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800470e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004714:	9201      	str	r2, [sp, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004716:	690a      	ldr	r2, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004718:	433b      	orrs	r3, r7
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800471a:	4f18      	ldr	r7, [pc, #96]	; (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800471c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004720:	42bd      	cmp	r5, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004722:	ea43 0302 	orr.w	r3, r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004726:	9a01      	ldr	r2, [sp, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800472c:	ea43 0306 	orr.w	r3, r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004734:	ea43 0304 	orr.w	r3, r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004738:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800473c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004740:	d00a      	beq.n	8004758 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8004742:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8004744:	4295      	cmp	r5, r2
 8004746:	d007      	beq.n	8004758 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  __HAL_UNLOCK(htim);
 8004748:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 800474a:	646b      	str	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800474c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8004750:	4610      	mov	r0, r2
 8004752:	b002      	add	sp, #8
 8004754:	bcf0      	pop	{r4, r5, r6, r7}
 8004756:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004758:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800475a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800475e:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004760:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004764:	6a0a      	ldr	r2, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800476c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004770:	4313      	orrs	r3, r2
 8004772:	e7e9      	b.n	8004748 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8004774:	2302      	movs	r3, #2
}
 8004776:	4618      	mov	r0, r3
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40010400 	.word	0x40010400

08004784 <HAL_TIMEx_CommutationCallback>:
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop

08004788 <HAL_TIMEx_BreakCallback>:
{
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop

0800478c <HAL_TIM_PWM_ConfigChannel>:
{
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800478e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d030      	beq.n	80047f8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8004796:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800479a:	2101      	movs	r1, #1
 800479c:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800479e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80047a2:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  switch (Channel)
 80047a6:	2a14      	cmp	r2, #20
 80047a8:	d81e      	bhi.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80047aa:	e8df f002 	tbb	[pc, r2]
 80047ae:	1d56      	.short	0x1d56
 80047b0:	1d681d1d 	.word	0x1d681d1d
 80047b4:	1d7b1d1d 	.word	0x1d7b1d1d
 80047b8:	1d0b1d1d 	.word	0x1d0b1d1d
 80047bc:	1d8d1d1d 	.word	0x1d8d1d1d
 80047c0:	1d1d      	.short	0x1d1d
 80047c2:	27          	.byte	0x27
 80047c3:	00          	.byte	0x00
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047c4:	4629      	mov	r1, r5
 80047c6:	6800      	ldr	r0, [r0, #0]
 80047c8:	f7ff ff1e 	bl	8004608 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047cc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80047ce:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047d0:	69d9      	ldr	r1, [r3, #28]
 80047d2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80047d6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047d8:	69d9      	ldr	r1, [r3, #28]
 80047da:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80047de:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80047e6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80047e8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80047ea:	2201      	movs	r2, #1
  return HAL_OK;
 80047ec:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80047ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80047f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 80047f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80047f8:	2002      	movs	r0, #2
}
 80047fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047fc:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80047fe:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004800:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004802:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004804:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004808:	494c      	ldr	r1, [pc, #304]	; (800493c <HAL_TIM_PWM_ConfigChannel+0x1b0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800480a:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800480c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800480e:	6858      	ldr	r0, [r3, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004810:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 8004814:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20);
 8004818:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	4e48      	ldr	r6, [pc, #288]	; (8004940 <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800481e:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004824:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004828:	f000 8081 	beq.w	800492e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800482c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004830:	42b3      	cmp	r3, r6
 8004832:	d07c      	beq.n	800492e <HAL_TIM_PWM_ConfigChannel+0x1a2>
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004834:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004836:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004838:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800483a:	65de      	str	r6, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800483c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800483e:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004840:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004842:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004846:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004848:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800484a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800484e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004852:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004858:	e7c6      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800485a:	4629      	mov	r1, r5
 800485c:	6800      	ldr	r0, [r0, #0]
 800485e:	f7ff fe39 	bl	80044d4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004862:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004864:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004866:	6999      	ldr	r1, [r3, #24]
 8004868:	f041 0108 	orr.w	r1, r1, #8
 800486c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800486e:	6999      	ldr	r1, [r3, #24]
 8004870:	f021 0104 	bic.w	r1, r1, #4
 8004874:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	4302      	orrs	r2, r0
 800487a:	619a      	str	r2, [r3, #24]
    break;
 800487c:	e7b4      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800487e:	4629      	mov	r1, r5
 8004880:	6800      	ldr	r0, [r0, #0]
 8004882:	f7ff fe59 	bl	8004538 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004886:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004888:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800488a:	6999      	ldr	r1, [r3, #24]
 800488c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004890:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004892:	6999      	ldr	r1, [r3, #24]
 8004894:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004898:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800489a:	699a      	ldr	r2, [r3, #24]
 800489c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80048a0:	619a      	str	r2, [r3, #24]
    break;
 80048a2:	e7a1      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048a4:	4629      	mov	r1, r5
 80048a6:	6800      	ldr	r0, [r0, #0]
 80048a8:	f7ff fe7a 	bl	80045a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80048ae:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048b0:	69d9      	ldr	r1, [r3, #28]
 80048b2:	f041 0108 	orr.w	r1, r1, #8
 80048b6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048b8:	69d9      	ldr	r1, [r3, #28]
 80048ba:	f021 0104 	bic.w	r1, r1, #4
 80048be:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80048c0:	69da      	ldr	r2, [r3, #28]
 80048c2:	4302      	orrs	r2, r0
 80048c4:	61da      	str	r2, [r3, #28]
    break;
 80048c6:	e78f      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048c8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16);
 80048ca:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048cc:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80048ce:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048d0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048d4:	491b      	ldr	r1, [pc, #108]	; (8004944 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048d6:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80048d8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 80048da:	6858      	ldr	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 80048dc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 80048e0:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16);
 80048e4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80048e8:	4e15      	ldr	r6, [pc, #84]	; (8004940 <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048ea:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80048ee:	42b3      	cmp	r3, r6
  tmpccmrx |= OC_Config->OCMode;
 80048f0:	ea41 0107 	orr.w	r1, r1, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80048f4:	d015      	beq.n	8004922 <HAL_TIM_PWM_ConfigChannel+0x196>
 80048f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80048fa:	42b3      	cmp	r3, r6
 80048fc:	d011      	beq.n	8004922 <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CCR5 = OC_Config->Pulse;
 80048fe:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004900:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004902:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004904:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 8004906:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004908:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800490a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800490c:	f041 0108 	orr.w	r1, r1, #8
 8004910:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004912:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004914:	f021 0104 	bic.w	r1, r1, #4
 8004918:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800491a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800491c:	4302      	orrs	r2, r0
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004920:	e762      	b.n	80047e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004922:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8004926:	696e      	ldr	r6, [r5, #20]
 8004928:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800492c:	e7e7      	b.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x172>
    tmpcr2 &= ~TIM_CR2_OIS6;
 800492e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8004932:	696e      	ldr	r6, [r5, #20]
 8004934:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004938:	e77c      	b.n	8004834 <HAL_TIM_PWM_ConfigChannel+0xa8>
 800493a:	bf00      	nop
 800493c:	feff8fff 	.word	0xfeff8fff
 8004940:	40010000 	.word	0x40010000
 8004944:	fffeff8f 	.word	0xfffeff8f

08004948 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800494c:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800494e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8004952:	b082      	sub	sp, #8
  if(huart->gState == HAL_UART_STATE_READY)
 8004954:	2b20      	cmp	r3, #32
 8004956:	d003      	beq.n	8004960 <HAL_UART_Transmit+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004958:	2002      	movs	r0, #2
  }
}
 800495a:	b002      	add	sp, #8
 800495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004960:	4688      	mov	r8, r1
    if((pData == NULL ) || (Size == 0U))
 8004962:	b391      	cbz	r1, 80049ca <HAL_UART_Transmit+0x82>
 8004964:	fab2 f382 	clz	r3, r2
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	bb73      	cbnz	r3, 80049ca <HAL_UART_Transmit+0x82>
    __HAL_LOCK(huart);
 800496c:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 8004970:	4605      	mov	r5, r0
 8004972:	2901      	cmp	r1, #1
 8004974:	d0f0      	beq.n	8004958 <HAL_UART_Transmit+0x10>
 8004976:	2001      	movs	r0, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004978:	2121      	movs	r1, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497a:	66eb      	str	r3, [r5, #108]	; 0x6c
    __HAL_LOCK(huart);
 800497c:	f885 0068 	strb.w	r0, [r5, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004980:	f885 1069 	strb.w	r1, [r5, #105]	; 0x69
 8004984:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8004986:	f7fd fe67 	bl	8002658 <HAL_GetTick>
    huart->TxXferSize = Size;
 800498a:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 800498c:	4607      	mov	r7, r0
 800498e:	682c      	ldr	r4, [r5, #0]
    huart->TxXferSize = Size;
 8004990:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
    huart->TxXferCount = Size;
 8004994:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8004998:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 800499c:	b29b      	uxth	r3, r3
 800499e:	b303      	cbz	r3, 80049e2 <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 80049a0:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
 80049ac:	1c72      	adds	r2, r6, #1
 80049ae:	d125      	bne.n	80049fc <HAL_UART_Transmit+0xb4>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b0:	69e2      	ldr	r2, [r4, #28]
 80049b2:	0613      	lsls	r3, r2, #24
 80049b4:	d5fc      	bpl.n	80049b0 <HAL_UART_Transmit+0x68>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b6:	68ab      	ldr	r3, [r5, #8]
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d03a      	beq.n	8004a34 <HAL_UART_Transmit+0xec>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80049be:	f898 3000 	ldrb.w	r3, [r8]
 80049c2:	f108 0801 	add.w	r8, r8, #1
 80049c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80049c8:	e7e6      	b.n	8004998 <HAL_UART_Transmit+0x50>
      return  HAL_ERROR;
 80049ca:	2001      	movs	r0, #1
 80049cc:	e7c5      	b.n	800495a <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ce:	69e3      	ldr	r3, [r4, #28]
 80049d0:	065b      	lsls	r3, r3, #25
 80049d2:	d40b      	bmi.n	80049ec <HAL_UART_Transmit+0xa4>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80049d4:	b1e6      	cbz	r6, 8004a10 <HAL_UART_Transmit+0xc8>
 80049d6:	f7fd fe3f 	bl	8002658 <HAL_GetTick>
 80049da:	1bc0      	subs	r0, r0, r7
 80049dc:	682c      	ldr	r4, [r5, #0]
 80049de:	4286      	cmp	r6, r0
 80049e0:	d916      	bls.n	8004a10 <HAL_UART_Transmit+0xc8>
 80049e2:	1c71      	adds	r1, r6, #1
 80049e4:	d1f3      	bne.n	80049ce <HAL_UART_Transmit+0x86>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e6:	69e3      	ldr	r3, [r4, #28]
 80049e8:	065a      	lsls	r2, r3, #25
 80049ea:	d5fc      	bpl.n	80049e6 <HAL_UART_Transmit+0x9e>
    __HAL_UNLOCK(huart);
 80049ec:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_READY;
 80049ee:	2220      	movs	r2, #32
    return HAL_OK;
 80049f0:	4618      	mov	r0, r3
    __HAL_UNLOCK(huart);
 80049f2:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 80049f6:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
    return HAL_OK;
 80049fa:	e7ae      	b.n	800495a <HAL_UART_Transmit+0x12>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fc:	69e3      	ldr	r3, [r4, #28]
 80049fe:	0618      	lsls	r0, r3, #24
 8004a00:	d4d9      	bmi.n	80049b6 <HAL_UART_Transmit+0x6e>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004a02:	b12e      	cbz	r6, 8004a10 <HAL_UART_Transmit+0xc8>
 8004a04:	f7fd fe28 	bl	8002658 <HAL_GetTick>
 8004a08:	1bc0      	subs	r0, r0, r7
 8004a0a:	682c      	ldr	r4, [r5, #0]
 8004a0c:	4286      	cmp	r6, r0
 8004a0e:	d8cd      	bhi.n	80049ac <HAL_UART_Transmit+0x64>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a10:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

        huart->gState = HAL_UART_STATE_READY;
 8004a12:	2220      	movs	r2, #32
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a14:	2100      	movs	r1, #0
      return HAL_TIMEOUT;
 8004a16:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a1c:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	68a3      	ldr	r3, [r4, #8]
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004a26:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8004a2a:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
 8004a32:	e792      	b.n	800495a <HAL_UART_Transmit+0x12>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a34:	692b      	ldr	r3, [r5, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1c1      	bne.n	80049be <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004a3a:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a42:	62a3      	str	r3, [r4, #40]	; 0x28
        pData += 2;
 8004a44:	e7a8      	b.n	8004998 <HAL_UART_Transmit+0x50>
 8004a46:	bf00      	nop

08004a48 <HAL_UART_Receive_DMA>:
{
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8004a4a:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 8004a4e:	2c20      	cmp	r4, #32
 8004a50:	d001      	beq.n	8004a56 <HAL_UART_Receive_DMA+0xe>
    return HAL_BUSY;
 8004a52:	2002      	movs	r0, #2
}
 8004a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 8004a56:	2900      	cmp	r1, #0
 8004a58:	d035      	beq.n	8004ac6 <HAL_UART_Receive_DMA+0x7e>
 8004a5a:	fab2 f482 	clz	r4, r2
 8004a5e:	0964      	lsrs	r4, r4, #5
 8004a60:	2c00      	cmp	r4, #0
 8004a62:	d130      	bne.n	8004ac6 <HAL_UART_Receive_DMA+0x7e>
    __HAL_LOCK(huart);
 8004a64:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d0f2      	beq.n	8004a52 <HAL_UART_Receive_DMA+0xa>
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	4616      	mov	r6, r2
 8004a70:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a72:	2122      	movs	r1, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a74:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_LOCK(huart);
 8004a76:	f04f 0e01 	mov.w	lr, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7a:	66c4      	str	r4, [r0, #108]	; 0x6c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004a7c:	4633      	mov	r3, r6
    huart->pRxBuffPtr = pData;
 8004a7e:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8004a80:	f8a0 6058 	strh.w	r6, [r0, #88]	; 0x58
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004a84:	4638      	mov	r0, r7
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a86:	f885 106a 	strb.w	r1, [r5, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a8a:	4e10      	ldr	r6, [pc, #64]	; (8004acc <HAL_UART_Receive_DMA+0x84>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a8c:	4910      	ldr	r1, [pc, #64]	; (8004ad0 <HAL_UART_Receive_DMA+0x88>)
    __HAL_LOCK(huart);
 8004a8e:	f885 e068 	strb.w	lr, [r5, #104]	; 0x68
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a92:	63fe      	str	r6, [r7, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a94:	6439      	str	r1, [r7, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a96:	4e0f      	ldr	r6, [pc, #60]	; (8004ad4 <HAL_UART_Receive_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004a98:	6829      	ldr	r1, [r5, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8004a9a:	653c      	str	r4, [r7, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a9c:	64fe      	str	r6, [r7, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8004a9e:	3124      	adds	r1, #36	; 0x24
 8004aa0:	f7fe f8c0 	bl	8002c24 <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aa4:	682b      	ldr	r3, [r5, #0]
    __HAL_UNLOCK(huart);
 8004aa6:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
    return HAL_OK;
 8004aaa:	4620      	mov	r0, r4
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab2:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac2:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8004ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aca:	bf00      	nop
 8004acc:	08004b4d 	.word	0x08004b4d
 8004ad0:	08004b89 	.word	0x08004b89
 8004ad4:	08004b95 	.word	0x08004b95

08004ad8 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8004ad8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d016      	beq.n	8004b0e <HAL_UART_DMAResume+0x36>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ae0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  __HAL_LOCK(huart);
 8004ae4:	2201      	movs	r2, #1
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ae6:	2b21      	cmp	r3, #33	; 0x21
  __HAL_LOCK(huart);
 8004ae8:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004aec:	6803      	ldr	r3, [r0, #0]
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aee:	d023      	beq.n	8004b38 <HAL_UART_DMAResume+0x60>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004af0:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8004af4:	2a22      	cmp	r2, #34	; 0x22
 8004af6:	d00c      	beq.n	8004b12 <HAL_UART_DMAResume+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	f010 0001 	ands.w	r0, r0, #1
 8004afe:	d104      	bne.n	8004b0a <HAL_UART_DMAResume+0x32>
    __HAL_UART_ENABLE(huart);
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	4770      	bx	lr
  return HAL_OK;
 8004b0a:	2000      	movs	r0, #0
}
 8004b0c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004b0e:	2002      	movs	r0, #2
 8004b10:	4770      	bx	lr
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8004b12:	2208      	movs	r2, #8
 8004b14:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b2c:	609a      	str	r2, [r3, #8]
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	f010 0001 	ands.w	r0, r0, #1
 8004b34:	d0e4      	beq.n	8004b00 <HAL_UART_DMAResume+0x28>
 8004b36:	e7e8      	b.n	8004b0a <HAL_UART_DMAResume+0x32>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b3e:	609a      	str	r2, [r3, #8]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b40:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8004b44:	2a22      	cmp	r2, #34	; 0x22
 8004b46:	d1d7      	bne.n	8004af8 <HAL_UART_DMAResume+0x20>
 8004b48:	e7e3      	b.n	8004b12 <HAL_UART_DMAResume+0x3a>
 8004b4a:	bf00      	nop

08004b4c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback
  * @param hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* DMA Normal mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b4e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b50:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8004b58:	d111      	bne.n	8004b7e <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b5a:	6802      	ldr	r2, [r0, #0]
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

	/* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 8004b5e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b68:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6a:	6893      	ldr	r3, [r2, #8]
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b72:	6893      	ldr	r3, [r2, #8]
 8004b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b78:	6093      	str	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
  }
  HAL_UART_RxCpltCallback(huart);
 8004b7e:	f7fb fee7 	bl	8000950 <HAL_UART_RxCpltCallback>
 8004b82:	bd08      	pop	{r3, pc}

08004b84 <HAL_UART_RxHalfCpltCallback>:
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop

08004b88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback
  * @param hdma  DMA handle
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b88:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8004b8a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004b8c:	f7ff fffa 	bl	8004b84 <HAL_UART_RxHalfCpltCallback>
 8004b90:	bd08      	pop	{r3, pc}
 8004b92:	bf00      	nop

08004b94 <UART_DMAError>:
  * @brief DMA UART communication error callback
  * @param hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b94:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0U;
 8004b96:	2200      	movs	r2, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b98:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8004b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ba2:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8004ba6:	2a21      	cmp	r2, #33	; 0x21
 8004ba8:	d01b      	beq.n	8004be2 <UART_DMAError+0x4e>
  {
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004baa:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8004bae:	2a22      	cmp	r2, #34	; 0x22
 8004bb0:	d007      	beq.n	8004bc2 <UART_DMAError+0x2e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
  {
    UART_EndRxTransfer(huart);
  }
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8004bb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8004bb4:	4618      	mov	r0, r3
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8004bb6:	f042 0210 	orr.w	r2, r2, #16
 8004bba:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8004bbc:	f7fb fec4 	bl	8000948 <HAL_UART_ErrorCallback>
 8004bc0:	bd08      	pop	{r3, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	6891      	ldr	r1, [r2, #8]
 8004bc6:	0649      	lsls	r1, r1, #25
 8004bc8:	d5f3      	bpl.n	8004bb2 <UART_DMAError+0x1e>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bca:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bce:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8004bd2:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd4:	6891      	ldr	r1, [r2, #8]
 8004bd6:	f021 0101 	bic.w	r1, r1, #1
 8004bda:	6091      	str	r1, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004bdc:	f883 006a 	strb.w	r0, [r3, #106]	; 0x6a
 8004be0:	e7e7      	b.n	8004bb2 <UART_DMAError+0x1e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	6891      	ldr	r1, [r2, #8]
 8004be6:	0608      	lsls	r0, r1, #24
 8004be8:	d5df      	bpl.n	8004baa <UART_DMAError+0x16>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bea:	6811      	ldr	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004bec:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bee:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004bf2:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004bf4:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
 8004bf8:	e7d7      	b.n	8004baa <UART_DMAError+0x16>
 8004bfa:	bf00      	nop

08004bfc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004bfe:	07da      	lsls	r2, r3, #31
{
 8004c00:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c02:	d506      	bpl.n	8004c12 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c04:	6801      	ldr	r1, [r0, #0]
 8004c06:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004c08:	684a      	ldr	r2, [r1, #4]
 8004c0a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004c0e:	4322      	orrs	r2, r4
 8004c10:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c12:	079c      	lsls	r4, r3, #30
 8004c14:	d506      	bpl.n	8004c24 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c16:	6801      	ldr	r1, [r0, #0]
 8004c18:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004c1a:	684a      	ldr	r2, [r1, #4]
 8004c1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c20:	4322      	orrs	r2, r4
 8004c22:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c24:	0759      	lsls	r1, r3, #29
 8004c26:	d506      	bpl.n	8004c36 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c28:	6801      	ldr	r1, [r0, #0]
 8004c2a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004c2c:	684a      	ldr	r2, [r1, #4]
 8004c2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c32:	4322      	orrs	r2, r4
 8004c34:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c36:	071a      	lsls	r2, r3, #28
 8004c38:	d506      	bpl.n	8004c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c3a:	6801      	ldr	r1, [r0, #0]
 8004c3c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004c3e:	684a      	ldr	r2, [r1, #4]
 8004c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c44:	4322      	orrs	r2, r4
 8004c46:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c48:	06dc      	lsls	r4, r3, #27
 8004c4a:	d506      	bpl.n	8004c5a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c4c:	6801      	ldr	r1, [r0, #0]
 8004c4e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004c50:	688a      	ldr	r2, [r1, #8]
 8004c52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c56:	4322      	orrs	r2, r4
 8004c58:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c5a:	0699      	lsls	r1, r3, #26
 8004c5c:	d506      	bpl.n	8004c6c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c5e:	6801      	ldr	r1, [r0, #0]
 8004c60:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004c62:	688a      	ldr	r2, [r1, #8]
 8004c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c68:	4322      	orrs	r2, r4
 8004c6a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c6c:	065a      	lsls	r2, r3, #25
 8004c6e:	d50a      	bpl.n	8004c86 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c70:	6801      	ldr	r1, [r0, #0]
 8004c72:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004c74:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c76:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c7a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004c7e:	ea42 0204 	orr.w	r2, r2, r4
 8004c82:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c84:	d00b      	beq.n	8004c9e <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	d506      	bpl.n	8004c98 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c8a:	6802      	ldr	r2, [r0, #0]
 8004c8c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004c8e:	6853      	ldr	r3, [r2, #4]
 8004c90:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004c94:	430b      	orrs	r3, r1
 8004c96:	6053      	str	r3, [r2, #4]
  }
}
 8004c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c9c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c9e:	684a      	ldr	r2, [r1, #4]
 8004ca0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004ca2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004ca6:	4322      	orrs	r2, r4
 8004ca8:	604a      	str	r2, [r1, #4]
 8004caa:	e7ec      	b.n	8004c86 <UART_AdvFeatureConfig+0x8a>

08004cac <HAL_UART_Init>:
  if(huart == NULL)
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f000 81be 	beq.w	800502e <HAL_UART_Init+0x382>
{
 8004cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8004cb4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004cb8:	4604      	mov	r4, r0
 8004cba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d047      	beq.n	8004d52 <HAL_UART_Init+0xa6>
  __HAL_UART_DISABLE(huart);
 8004cc2:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004cc4:	2224      	movs	r2, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc6:	6921      	ldr	r1, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8004cc8:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ccc:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004cce:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	6961      	ldr	r1, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004cd8:	48b8      	ldr	r0, [pc, #736]	; (8004fbc <HAL_UART_Init+0x310>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8004cde:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004ce0:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ce2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce4:	68e7      	ldr	r7, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004ce6:	4010      	ands	r0, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004ce8:	6a26      	ldr	r6, [r4, #32]
 8004cea:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004cec:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cee:	48b4      	ldr	r0, [pc, #720]	; (8004fc0 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004cf0:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004cf2:	602b      	str	r3, [r5, #0]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cf4:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf6:	686b      	ldr	r3, [r5, #4]
 8004cf8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004cfc:	ea43 0307 	orr.w	r3, r3, r7
 8004d00:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004d02:	68ab      	ldr	r3, [r5, #8]
 8004d04:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d08:	ea42 0203 	orr.w	r2, r2, r3
 8004d0c:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d0e:	f000 8094 	beq.w	8004e3a <HAL_UART_Init+0x18e>
 8004d12:	4bac      	ldr	r3, [pc, #688]	; (8004fc4 <HAL_UART_Init+0x318>)
 8004d14:	429d      	cmp	r5, r3
 8004d16:	f000 80a4 	beq.w	8004e62 <HAL_UART_Init+0x1b6>
 8004d1a:	4bab      	ldr	r3, [pc, #684]	; (8004fc8 <HAL_UART_Init+0x31c>)
 8004d1c:	429d      	cmp	r5, r3
 8004d1e:	f000 80a9 	beq.w	8004e74 <HAL_UART_Init+0x1c8>
 8004d22:	4baa      	ldr	r3, [pc, #680]	; (8004fcc <HAL_UART_Init+0x320>)
 8004d24:	429d      	cmp	r5, r3
 8004d26:	d019      	beq.n	8004d5c <HAL_UART_Init+0xb0>
 8004d28:	4ba9      	ldr	r3, [pc, #676]	; (8004fd0 <HAL_UART_Init+0x324>)
 8004d2a:	429d      	cmp	r5, r3
 8004d2c:	d027      	beq.n	8004d7e <HAL_UART_Init+0xd2>
 8004d2e:	4ba9      	ldr	r3, [pc, #676]	; (8004fd4 <HAL_UART_Init+0x328>)
 8004d30:	429d      	cmp	r5, r3
 8004d32:	f000 80c8 	beq.w	8004ec6 <HAL_UART_Init+0x21a>
 8004d36:	4ba8      	ldr	r3, [pc, #672]	; (8004fd8 <HAL_UART_Init+0x32c>)
 8004d38:	429d      	cmp	r5, r3
 8004d3a:	f000 80b5 	beq.w	8004ea8 <HAL_UART_Init+0x1fc>
 8004d3e:	4ba7      	ldr	r3, [pc, #668]	; (8004fdc <HAL_UART_Init+0x330>)
 8004d40:	429d      	cmp	r5, r3
 8004d42:	f000 8159 	beq.w	8004ff8 <HAL_UART_Init+0x34c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d46:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004d4a:	f000 8168 	beq.w	800501e <HAL_UART_Init+0x372>
    return HAL_ERROR;
 8004d4e:	2001      	movs	r0, #1
 8004d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8004d52:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004d56:	f7fd fb47 	bl	80023e8 <HAL_UART_MspInit>
 8004d5a:	e7b2      	b.n	8004cc2 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d5c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	f000 80a6 	beq.w	8004eba <HAL_UART_Init+0x20e>
 8004d6e:	d912      	bls.n	8004d96 <HAL_UART_Init+0xea>
 8004d70:	2b80      	cmp	r3, #128	; 0x80
 8004d72:	f000 8103 	beq.w	8004f7c <HAL_UART_Init+0x2d0>
 8004d76:	2bc0      	cmp	r3, #192	; 0xc0
 8004d78:	f000 808a 	beq.w	8004e90 <HAL_UART_Init+0x1e4>
 8004d7c:	e7e3      	b.n	8004d46 <HAL_UART_Init+0x9a>
 8004d7e:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8e:	f000 8094 	beq.w	8004eba <HAL_UART_Init+0x20e>
 8004d92:	f200 80e6 	bhi.w	8004f62 <HAL_UART_Init+0x2b6>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1d5      	bne.n	8004d46 <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004d9e:	f000 80e7 	beq.w	8004f70 <HAL_UART_Init+0x2c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004da2:	f7fe fd3d 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004da6:	6862      	ldr	r2, [r4, #4]
 8004da8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d13b      	bne.n	8004e32 <HAL_UART_Init+0x186>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dba:	6823      	ldr	r3, [r4, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbc:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dcc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd6:	66e1      	str	r1, [r4, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004dd8:	f7fd fc3e 	bl	8002658 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ddc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004dde:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	0712      	lsls	r2, r2, #28
 8004de4:	d409      	bmi.n	8004dfa <HAL_UART_Init+0x14e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8004de6:	2220      	movs	r2, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004de8:	2300      	movs	r3, #0
  huart->gState= HAL_UART_STATE_READY;
 8004dea:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69

  return HAL_OK;
 8004dee:	4618      	mov	r0, r3
  huart->RxState= HAL_UART_STATE_READY;
 8004df0:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8004df4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8004df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004dfa:	4f79      	ldr	r7, [pc, #484]	; (8004fe0 <HAL_UART_Init+0x334>)
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfc:	69dd      	ldr	r5, [r3, #28]
 8004dfe:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8004e02:	d1f0      	bne.n	8004de6 <HAL_UART_Init+0x13a>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004e04:	f7fd fc28 	bl	8002658 <HAL_GetTick>
 8004e08:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e0a:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004e0c:	42b8      	cmp	r0, r7
 8004e0e:	d9f5      	bls.n	8004dfc <HAL_UART_Init+0x150>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e10:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8004e12:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8004e14:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e1a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004e24:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8004e28:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 8004e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UART_AdvFeatureConfig(huart);
 8004e32:	4620      	mov	r0, r4
 8004e34:	f7ff fee2 	bl	8004bfc <UART_AdvFeatureConfig>
 8004e38:	e7bf      	b.n	8004dba <HAL_UART_Init+0x10e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e3a:	4b6a      	ldr	r3, [pc, #424]	; (8004fe4 <HAL_UART_Init+0x338>)
 8004e3c:	4a6a      	ldr	r2, [pc, #424]	; (8004fe8 <HAL_UART_Init+0x33c>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e48:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004e4c:	d159      	bne.n	8004f02 <HAL_UART_Init+0x256>
    switch (clocksource)
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	f200 80e5 	bhi.w	800501e <HAL_UART_Init+0x372>
 8004e54:	e8df f003 	tbb	[pc, r3]
 8004e58:	e395748c 	.word	0xe395748c
 8004e5c:	e3e3e38f 	.word	0xe3e3e38f
 8004e60:	9d          	.byte	0x9d
 8004e61:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e62:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8004e66:	4a61      	ldr	r2, [pc, #388]	; (8004fec <HAL_UART_Init+0x340>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	5cd3      	ldrb	r3, [r2, r3]
 8004e72:	e7e9      	b.n	8004e48 <HAL_UART_Init+0x19c>
 8004e74:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8004e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d01a      	beq.n	8004eba <HAL_UART_Init+0x20e>
 8004e84:	d987      	bls.n	8004d96 <HAL_UART_Init+0xea>
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d078      	beq.n	8004f7c <HAL_UART_Init+0x2d0>
 8004e8a:	2b30      	cmp	r3, #48	; 0x30
 8004e8c:	f47f af5b 	bne.w	8004d46 <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e90:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004e94:	d07d      	beq.n	8004f92 <HAL_UART_Init+0x2e6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e96:	6862      	ldr	r2, [r4, #4]
 8004e98:	0853      	lsrs	r3, r2, #1
 8004e9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	60eb      	str	r3, [r5, #12]
 8004ea6:	e785      	b.n	8004db4 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ea8:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb8:	d116      	bne.n	8004ee8 <HAL_UART_Init+0x23c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004ebe:	d05a      	beq.n	8004f76 <HAL_UART_Init+0x2ca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ec0:	f7fe fc7a 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8004ec4:	e76f      	b.n	8004da6 <HAL_UART_Init+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ec6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed6:	d0f0      	beq.n	8004eba <HAL_UART_Init+0x20e>
 8004ed8:	d92c      	bls.n	8004f34 <HAL_UART_Init+0x288>
 8004eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ede:	d04d      	beq.n	8004f7c <HAL_UART_Init+0x2d0>
 8004ee0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee4:	d0d4      	beq.n	8004e90 <HAL_UART_Init+0x1e4>
 8004ee6:	e72e      	b.n	8004d46 <HAL_UART_Init+0x9a>
 8004ee8:	f240 809d 	bls.w	8005026 <HAL_UART_Init+0x37a>
 8004eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef0:	d044      	beq.n	8004f7c <HAL_UART_Init+0x2d0>
 8004ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ef6:	d0cb      	beq.n	8004e90 <HAL_UART_Init+0x1e4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004efc:	f000 808f 	beq.w	800501e <HAL_UART_Init+0x372>
 8004f00:	2310      	movs	r3, #16
    switch (clocksource)
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	f63f af23 	bhi.w	8004d4e <HAL_UART_Init+0xa2>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <HAL_UART_Init+0x264>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004da3 	.word	0x08004da3
 8004f14:	08004fa3 	.word	0x08004fa3
 8004f18:	08004fa9 	.word	0x08004fa9
 8004f1c:	08004d4f 	.word	0x08004d4f
 8004f20:	08004ec1 	.word	0x08004ec1
 8004f24:	08004d4f 	.word	0x08004d4f
 8004f28:	08004d4f 	.word	0x08004d4f
 8004f2c:	08004d4f 	.word	0x08004d4f
 8004f30:	08004e97 	.word	0x08004e97
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f47f af06 	bne.w	8004d46 <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004f3e:	d130      	bne.n	8004fa2 <HAL_UART_Init+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004f40:	f7fe fc7e 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004f44:	6862      	ldr	r2, [r4, #4]
 8004f46:	6825      	ldr	r5, [r4, #0]
 8004f48:	0853      	lsrs	r3, r2, #1
 8004f4a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f52:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8004f54:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f58:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60eb      	str	r3, [r5, #12]
 8004f60:	e728      	b.n	8004db4 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f66:	d009      	beq.n	8004f7c <HAL_UART_Init+0x2d0>
 8004f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6c:	d090      	beq.n	8004e90 <HAL_UART_Init+0x1e4>
 8004f6e:	e6ea      	b.n	8004d46 <HAL_UART_Init+0x9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004f70:	f7fe fc56 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 8004f74:	e7e6      	b.n	8004f44 <HAL_UART_Init+0x298>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004f76:	f7fe fc1f 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8004f7a:	e7e3      	b.n	8004f44 <HAL_UART_Init+0x298>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004f80:	d112      	bne.n	8004fa8 <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004f82:	6862      	ldr	r2, [r4, #4]
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <HAL_UART_Init+0x344>)
 8004f86:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004f8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	e7e0      	b.n	8004f54 <HAL_UART_Init+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f92:	6862      	ldr	r2, [r4, #4]
 8004f94:	0853      	lsrs	r3, r2, #1
 8004f96:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	e7d8      	b.n	8004f54 <HAL_UART_Init+0x2a8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004fa2:	f7fe fc4d 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8004fa6:	e6fe      	b.n	8004da6 <HAL_UART_Init+0xfa>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004fa8:	6862      	ldr	r2, [r4, #4]
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <HAL_UART_Init+0x348>)
 8004fac:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	60eb      	str	r3, [r5, #12]
 8004fb8:	e6fc      	b.n	8004db4 <HAL_UART_Init+0x108>
 8004fba:	bf00      	nop
 8004fbc:	efff69f3 	.word	0xefff69f3
 8004fc0:	40011000 	.word	0x40011000
 8004fc4:	40004400 	.word	0x40004400
 8004fc8:	40004800 	.word	0x40004800
 8004fcc:	40004c00 	.word	0x40004c00
 8004fd0:	40005000 	.word	0x40005000
 8004fd4:	40011400 	.word	0x40011400
 8004fd8:	40007800 	.word	0x40007800
 8004fdc:	40007c00 	.word	0x40007c00
 8004fe0:	01fffffe 	.word	0x01fffffe
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	0800779c 	.word	0x0800779c
 8004fec:	080077a0 	.word	0x080077a0
 8004ff0:	01e84800 	.word	0x01e84800
 8004ff4:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff8:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005008:	f43f af57 	beq.w	8004eba <HAL_UART_Init+0x20e>
 800500c:	d90b      	bls.n	8005026 <HAL_UART_Init+0x37a>
 800500e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005012:	d0b3      	beq.n	8004f7c <HAL_UART_Init+0x2d0>
 8005014:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005018:	f43f af3a 	beq.w	8004e90 <HAL_UART_Init+0x1e4>
 800501c:	e76c      	b.n	8004ef8 <HAL_UART_Init+0x24c>
    huart->Instance->BRR = brrtemp;
 800501e:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005020:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8005022:	60eb      	str	r3, [r5, #12]
 8005024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005026:	2b00      	cmp	r3, #0
 8005028:	f43f aeb7 	beq.w	8004d9a <HAL_UART_Init+0xee>
 800502c:	e764      	b.n	8004ef8 <HAL_UART_Init+0x24c>
    return HAL_ERROR;
 800502e:	2001      	movs	r0, #1
}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop

08005034 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005034:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005036:	f001 f8bd 	bl	80061b4 <vTaskStartScheduler>
  
  return osOK;
}
 800503a:	2000      	movs	r0, #0
 800503c:	bd08      	pop	{r3, pc}
 800503e:	bf00      	nop

08005040 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005040:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005042:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8005046:	b085      	sub	sp, #20
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 800504c:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800504e:	ad03      	add	r5, sp, #12
 8005050:	6811      	ldr	r1, [r2, #0]
    fpriority += (priority - osPriorityIdle);
 8005052:	bf14      	ite	ne
 8005054:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005056:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005058:	8a12      	ldrh	r2, [r2, #16]
 800505a:	6840      	ldr	r0, [r0, #4]
 800505c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005060:	f000 ff78 	bl	8005f54 <xTaskCreate>
 8005064:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005066:	bf0c      	ite	eq
 8005068:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800506a:	2000      	movne	r0, #0
}
 800506c:	b005      	add	sp, #20
 800506e:	bd30      	pop	{r4, r5, pc}

08005070 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005070:	2800      	cmp	r0, #0
 8005072:	bf08      	it	eq
 8005074:	2001      	moveq	r0, #1
{
 8005076:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005078:	f001 fa24 	bl	80064c4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800507c:	2000      	movs	r0, #0
 800507e:	bd08      	pop	{r3, pc}

08005080 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8005080:	2001      	movs	r0, #1
 8005082:	f000 bd13 	b.w	8005aac <xQueueCreateMutex>
 8005086:	bf00      	nop

08005088 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005088:	2200      	movs	r2, #0
 800508a:	c803      	ldmia	r0, {r0, r1}
 800508c:	f000 bb6a 	b.w	8005764 <xQueueGenericCreate>

08005090 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <prvInsertBlockIntoFreeList+0x48>)
{
 8005092:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4282      	cmp	r2, r0
 8005098:	d201      	bcs.n	800509e <prvInsertBlockIntoFreeList+0xe>
 800509a:	4613      	mov	r3, r2
 800509c:	e7fa      	b.n	8005094 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800509e:	685c      	ldr	r4, [r3, #4]
 80050a0:	1919      	adds	r1, r3, r4
 80050a2:	4288      	cmp	r0, r1
 80050a4:	d103      	bne.n	80050ae <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050a6:	6841      	ldr	r1, [r0, #4]
 80050a8:	4618      	mov	r0, r3
 80050aa:	4421      	add	r1, r4
 80050ac:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050ae:	6844      	ldr	r4, [r0, #4]
 80050b0:	1901      	adds	r1, r0, r4
 80050b2:	428a      	cmp	r2, r1
 80050b4:	d109      	bne.n	80050ca <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050b6:	4909      	ldr	r1, [pc, #36]	; (80050dc <prvInsertBlockIntoFreeList+0x4c>)
 80050b8:	6809      	ldr	r1, [r1, #0]
 80050ba:	428a      	cmp	r2, r1
 80050bc:	d005      	beq.n	80050ca <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050be:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050c0:	6815      	ldr	r5, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050c2:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050c4:	6005      	str	r5, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050c6:	6041      	str	r1, [r0, #4]
 80050c8:	e000      	b.n	80050cc <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050ca:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050cc:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ce:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050d0:	bf18      	it	ne
 80050d2:	6018      	strne	r0, [r3, #0]
}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20003d2c 	.word	0x20003d2c
 80050dc:	2000011c 	.word	0x2000011c

080050e0 <pvPortMalloc>:
{
 80050e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80050e4:	4e47      	ldr	r6, [pc, #284]	; (8005204 <pvPortMalloc+0x124>)
{
 80050e6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80050e8:	f001 f8a4 	bl	8006234 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d05e      	beq.n	80051b0 <pvPortMalloc+0xd0>
 80050f2:	4a45      	ldr	r2, [pc, #276]	; (8005208 <pvPortMalloc+0x128>)
 80050f4:	6816      	ldr	r6, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050f6:	4234      	tst	r4, r6
 80050f8:	d154      	bne.n	80051a4 <pvPortMalloc+0xc4>
			if( xWantedSize > 0 )
 80050fa:	2c00      	cmp	r4, #0
 80050fc:	d052      	beq.n	80051a4 <pvPortMalloc+0xc4>
				xWantedSize += xHeapStructSize;
 80050fe:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005102:	0750      	lsls	r0, r2, #29
 8005104:	d002      	beq.n	800510c <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005106:	f022 0207 	bic.w	r2, r2, #7
 800510a:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800510c:	2a00      	cmp	r2, #0
 800510e:	d049      	beq.n	80051a4 <pvPortMalloc+0xc4>
 8005110:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005218 <pvPortMalloc+0x138>
 8005114:	f8d8 5000 	ldr.w	r5, [r8]
 8005118:	42aa      	cmp	r2, r5
 800511a:	d843      	bhi.n	80051a4 <pvPortMalloc+0xc4>
				pxBlock = xStart.pxNextFreeBlock;
 800511c:	483b      	ldr	r0, [pc, #236]	; (800520c <pvPortMalloc+0x12c>)
 800511e:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005120:	e006      	b.n	8005130 <pvPortMalloc+0x50>
 8005122:	f8d4 e000 	ldr.w	lr, [r4]
 8005126:	f1be 0f00 	cmp.w	lr, #0
 800512a:	d004      	beq.n	8005136 <pvPortMalloc+0x56>
 800512c:	4620      	mov	r0, r4
 800512e:	4674      	mov	r4, lr
 8005130:	6861      	ldr	r1, [r4, #4]
 8005132:	428a      	cmp	r2, r1
 8005134:	d8f5      	bhi.n	8005122 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8005136:	429c      	cmp	r4, r3
 8005138:	d034      	beq.n	80051a4 <pvPortMalloc+0xc4>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800513a:	1a8b      	subs	r3, r1, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800513c:	6827      	ldr	r7, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800513e:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005140:	6007      	str	r7, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005142:	d912      	bls.n	800516a <pvPortMalloc+0x8a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005144:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005146:	0741      	lsls	r1, r0, #29
 8005148:	d00a      	beq.n	8005160 <pvPortMalloc+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	b672      	cpsid	i
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	b662      	cpsie	i
 800515e:	e7fe      	b.n	800515e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005160:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005162:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005164:	f7ff ff94 	bl	8005090 <prvInsertBlockIntoFreeList>
 8005168:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800516a:	4a29      	ldr	r2, [pc, #164]	; (8005210 <pvPortMalloc+0x130>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800516c:	1a6d      	subs	r5, r5, r1
					pxBlock->pxNextFreeBlock = NULL;
 800516e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005170:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005172:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005174:	f8c8 5000 	str.w	r5, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005178:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 800517a:	6023      	str	r3, [r4, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800517c:	6061      	str	r1, [r4, #4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800517e:	bf38      	it	cc
 8005180:	6015      	strcc	r5, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005182:	f104 0508 	add.w	r5, r4, #8
	( void ) xTaskResumeAll();
 8005186:	f001 f90d 	bl	80063a4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800518a:	076b      	lsls	r3, r5, #29
 800518c:	d00d      	beq.n	80051aa <pvPortMalloc+0xca>
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	b672      	cpsid	i
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	b662      	cpsie	i
 80051a2:	e7fe      	b.n	80051a2 <pvPortMalloc+0xc2>
	( void ) xTaskResumeAll();
 80051a4:	2500      	movs	r5, #0
 80051a6:	f001 f8fd 	bl	80063a4 <xTaskResumeAll>
}
 80051aa:	4628      	mov	r0, r5
 80051ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 80051b0:	4918      	ldr	r1, [pc, #96]	; (8005214 <pvPortMalloc+0x134>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051b2:	074d      	lsls	r5, r1, #29
 80051b4:	d023      	beq.n	80051fe <pvPortMalloc+0x11e>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051b6:	1dca      	adds	r2, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051b8:	f501 5370 	add.w	r3, r1, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051bc:	f022 0107 	bic.w	r1, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051c0:	1a5b      	subs	r3, r3, r1
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051c2:	440b      	add	r3, r1
	xStart.xBlockSize = ( size_t ) 0;
 80051c4:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051c6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051ca:	4f10      	ldr	r7, [pc, #64]	; (800520c <pvPortMalloc+0x12c>)
	uxAddress -= xHeapStructSize;
 80051cc:	3b08      	subs	r3, #8
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051ce:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8005210 <pvPortMalloc+0x130>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051d2:	f8df c044 	ldr.w	ip, [pc, #68]	; 8005218 <pvPortMalloc+0x138>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051d6:	f023 0307 	bic.w	r3, r3, #7
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051da:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8005208 <pvPortMalloc+0x128>
	xStart.xBlockSize = ( size_t ) 0;
 80051de:	6078      	str	r0, [r7, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051e0:	1a5a      	subs	r2, r3, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051e2:	6039      	str	r1, [r7, #0]
	pxEnd->xBlockSize = 0;
 80051e4:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051e6:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 80051e8:	6033      	str	r3, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051ea:	462e      	mov	r6, r5
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051ec:	f8c8 2000 	str.w	r2, [r8]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051f0:	f8cc 2000 	str.w	r2, [ip]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051f4:	f8ce 5000 	str.w	r5, [lr]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051f8:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051fa:	600b      	str	r3, [r1, #0]
 80051fc:	e77b      	b.n	80050f6 <pvPortMalloc+0x16>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005202:	e7de      	b.n	80051c2 <pvPortMalloc+0xe2>
 8005204:	2000011c 	.word	0x2000011c
 8005208:	20003d20 	.word	0x20003d20
 800520c:	20003d2c 	.word	0x20003d2c
 8005210:	20003d28 	.word	0x20003d28
 8005214:	20000120 	.word	0x20000120
 8005218:	20003d24 	.word	0x20003d24

0800521c <vPortFree>:
	if( pv != NULL )
 800521c:	b1f0      	cbz	r0, 800525c <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800521e:	4a1b      	ldr	r2, [pc, #108]	; (800528c <vPortFree+0x70>)
 8005220:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	4213      	tst	r3, r2
 8005228:	d10a      	bne.n	8005240 <vPortFree+0x24>
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	b672      	cpsid	i
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	b662      	cpsie	i
 800523e:	e7fe      	b.n	800523e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005240:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005244:	b159      	cbz	r1, 800525e <vPortFree+0x42>
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	b672      	cpsid	i
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	b662      	cpsie	i
 800525a:	e7fe      	b.n	800525a <vPortFree+0x3e>
 800525c:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800525e:	ea23 0302 	bic.w	r3, r3, r2
{
 8005262:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005264:	f840 3c04 	str.w	r3, [r0, #-4]
 8005268:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800526a:	f000 ffe3 	bl	8006234 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800526e:	4a08      	ldr	r2, [pc, #32]	; (8005290 <vPortFree+0x74>)
 8005270:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005274:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005278:	6811      	ldr	r1, [r2, #0]
 800527a:	440b      	add	r3, r1
 800527c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800527e:	f7ff ff07 	bl	8005090 <prvInsertBlockIntoFreeList>
}
 8005282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005286:	f001 b88d 	b.w	80063a4 <xTaskResumeAll>
 800528a:	bf00      	nop
 800528c:	20003d20 	.word	0x20003d20
 8005290:	20003d24 	.word	0x20003d24

08005294 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005294:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800529c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800529e:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a2:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a4:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop

080052ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80052ac:	2300      	movs	r3, #0
 80052ae:	6103      	str	r3, [r0, #16]
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop

080052b4 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80052b4:	e890 000c 	ldmia.w	r0, {r2, r3}
{
 80052b8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052ba:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80052bc:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 80052be:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052c0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052c2:	689c      	ldr	r4, [r3, #8]
 80052c4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052c6:	6099      	str	r1, [r3, #8]
}
 80052c8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052cc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80052ce:	6002      	str	r2, [r0, #0]
}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop

080052d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052d4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052d6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052d8:	1c6b      	adds	r3, r5, #1
 80052da:	d011      	beq.n	8005300 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052dc:	f100 0208 	add.w	r2, r0, #8
 80052e0:	e000      	b.n	80052e4 <vListInsert+0x10>
 80052e2:	461a      	mov	r2, r3
 80052e4:	6853      	ldr	r3, [r2, #4]
 80052e6:	681c      	ldr	r4, [r3, #0]
 80052e8:	42a5      	cmp	r5, r4
 80052ea:	d2fa      	bcs.n	80052e2 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80052ec:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80052ee:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80052f0:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052f2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052f4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80052f6:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80052fa:	6004      	str	r4, [r0, #0]
}
 80052fc:	bc30      	pop	{r4, r5}
 80052fe:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005300:	6902      	ldr	r2, [r0, #16]
 8005302:	6853      	ldr	r3, [r2, #4]
 8005304:	e7f2      	b.n	80052ec <vListInsert+0x18>
 8005306:	bf00      	nop

08005308 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005308:	6902      	ldr	r2, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800530a:	6843      	ldr	r3, [r0, #4]
 800530c:	6881      	ldr	r1, [r0, #8]
{
 800530e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005310:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005312:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005314:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8005316:	42a0      	cmp	r0, r4

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8005318:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800531c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )--;
 800531e:	6813      	ldr	r3, [r2, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005320:	bf08      	it	eq
 8005322:	6051      	streq	r1, [r2, #4]
	pxItemToRemove->pvContainer = NULL;
 8005324:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8005326:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 8005328:	6101      	str	r1, [r0, #16]
}
 800532a:	4618      	mov	r0, r3
	( pxList->uxNumberOfItems )--;
 800532c:	6013      	str	r3, [r2, #0]
}
 800532e:	4770      	bx	lr

08005330 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <prvTaskExitError+0x34>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	d00a      	beq.n	800534e <prvTaskExitError+0x1e>
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	b672      	cpsid	i
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	b662      	cpsie	i
 800534c:	e7fe      	b.n	800534c <prvTaskExitError+0x1c>
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	b672      	cpsid	i
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	b662      	cpsie	i
 8005362:	e7fe      	b.n	8005362 <prvTaskExitError+0x32>
 8005364:	20000024 	.word	0x20000024

08005368 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005368:	4806      	ldr	r0, [pc, #24]	; (8005384 <prvPortStartFirstTask+0x1c>)
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f380 8808 	msr	MSP, r0
 8005372:	b662      	cpsie	i
 8005374:	b661      	cpsie	f
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	df00      	svc	0
 8005380:	bf00      	nop
 8005382:	0000      	.short	0x0000
 8005384:	e000ed08 	.word	0xe000ed08

08005388 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005388:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005398 <vPortEnableVFP+0x10>
 800538c:	6801      	ldr	r1, [r0, #0]
 800538e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005392:	6001      	str	r1, [r0, #0]
 8005394:	4770      	bx	lr
 8005396:	0000      	.short	0x0000
 8005398:	e000ed88 	.word	0xe000ed88

0800539c <pxPortInitialiseStack>:
{
 800539c:	b470      	push	{r4, r5, r6}
 800539e:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053a0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053a4:	4d08      	ldr	r5, [pc, #32]	; (80053c8 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80053a6:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053aa:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053ae:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80053b2:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053b4:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053b6:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053ba:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80053be:	f843 4c24 	str.w	r4, [r3, #-36]
}
 80053c2:	bc70      	pop	{r4, r5, r6}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	08005331 	.word	0x08005331
 80053cc:	00000000 	.word	0x00000000

080053d0 <SVC_Handler>:
	__asm volatile (
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <pxCurrentTCBConst2>)
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053da:	f380 8809 	msr	PSP, r0
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8811 	msr	BASEPRI, r0
 80053ea:	4770      	bx	lr
 80053ec:	f3af 8000 	nop.w

080053f0 <pxCurrentTCBConst2>:
 80053f0:	20003d3c 	.word	0x20003d3c

080053f4 <vPortEnterCritical>:
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	b672      	cpsid	i
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	b662      	cpsie	i
	uxCriticalNesting++;
 8005408:	4a0b      	ldr	r2, [pc, #44]	; (8005438 <vPortEnterCritical+0x44>)
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800540e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005412:	d000      	beq.n	8005416 <vPortEnterCritical+0x22>
 8005414:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <vPortEnterCritical+0x48>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800541e:	d0f9      	beq.n	8005414 <vPortEnterCritical+0x20>
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	b672      	cpsid	i
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	b662      	cpsie	i
 8005434:	e7fe      	b.n	8005434 <vPortEnterCritical+0x40>
 8005436:	bf00      	nop
 8005438:	20000024 	.word	0x20000024
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005440:	4a09      	ldr	r2, [pc, #36]	; (8005468 <vPortExitCritical+0x28>)
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	b953      	cbnz	r3, 800545c <vPortExitCritical+0x1c>
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	b672      	cpsid	i
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	b662      	cpsie	i
 800545a:	e7fe      	b.n	800545a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800545c:	3b01      	subs	r3, #1
 800545e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005460:	b90b      	cbnz	r3, 8005466 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	4770      	bx	lr
 8005468:	20000024 	.word	0x20000024
 800546c:	00000000 	.word	0x00000000

08005470 <PendSV_Handler>:
	__asm volatile
 8005470:	f3ef 8009 	mrs	r0, PSP
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <pxCurrentTCBConst>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	f01e 0f10 	tst.w	lr, #16
 8005480:	bf08      	it	eq
 8005482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	6010      	str	r0, [r2, #0]
 800548c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005494:	b672      	cpsid	i
 8005496:	f380 8811 	msr	BASEPRI, r0
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	b662      	cpsie	i
 80054a4:	f001 f87e 	bl	80065a4 <vTaskSwitchContext>
 80054a8:	f04f 0000 	mov.w	r0, #0
 80054ac:	f380 8811 	msr	BASEPRI, r0
 80054b0:	bc08      	pop	{r3}
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	6808      	ldr	r0, [r1, #0]
 80054b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ba:	f01e 0f10 	tst.w	lr, #16
 80054be:	bf08      	it	eq
 80054c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054c4:	f380 8809 	msr	PSP, r0
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop

080054d0 <pxCurrentTCBConst>:
 80054d0:	20003d3c 	.word	0x20003d3c

080054d4 <SysTick_Handler>:
{
 80054d4:	b508      	push	{r3, lr}
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	b672      	cpsid	i
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80054ea:	f000 feab 	bl	8006244 <xTaskIncrementTick>
 80054ee:	b118      	cbz	r0, 80054f8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <SysTick_Handler+0x2c>)
 80054f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80054f8:	2300      	movs	r3, #0
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	bd08      	pop	{r3, pc}
 8005500:	e000ed04 	.word	0xe000ed04

08005504 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005506:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005508:	4a06      	ldr	r2, [pc, #24]	; (8005524 <vPortSetupTimerInterrupt+0x20>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4806      	ldr	r0, [pc, #24]	; (8005528 <vPortSetupTimerInterrupt+0x24>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005512:	4a06      	ldr	r2, [pc, #24]	; (800552c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005514:	099b      	lsrs	r3, r3, #6
 8005516:	3b01      	subs	r3, #1
 8005518:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800551a:	6011      	str	r1, [r2, #0]
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	2000001c 	.word	0x2000001c
 8005524:	10624dd3 	.word	0x10624dd3
 8005528:	e000e014 	.word	0xe000e014
 800552c:	e000e010 	.word	0xe000e010

08005530 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005530:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005532:	2207      	movs	r2, #7
 8005534:	4823      	ldr	r0, [pc, #140]	; (80055c4 <xPortStartScheduler+0x94>)
{
 8005536:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005538:	7819      	ldrb	r1, [r3, #0]
{
 800553a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800553c:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800553e:	4c22      	ldr	r4, [pc, #136]	; (80055c8 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005540:	b2c9      	uxtb	r1, r1
 8005542:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005544:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005546:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005548:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005550:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005554:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005558:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800555c:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800555e:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005560:	d50d      	bpl.n	800557e <xPortStartScheduler+0x4e>
 8005562:	2206      	movs	r2, #6
 8005564:	e000      	b.n	8005568 <xPortStartScheduler+0x38>
 8005566:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005568:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800556c:	1e51      	subs	r1, r2, #1
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005576:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800557a:	061b      	lsls	r3, r3, #24
 800557c:	d4f3      	bmi.n	8005566 <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800557e:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005580:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <xPortStartScheduler+0x9c>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005584:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005586:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800558a:	4c0d      	ldr	r4, [pc, #52]	; (80055c0 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800558c:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800558e:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005596:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800559e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80055a0:	f7ff ffb0 	bl	8005504 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80055a4:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <xPortStartScheduler+0xa0>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80055aa:	f7ff feed 	bl	8005388 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <xPortStartScheduler+0xa4>)
 80055b0:	6813      	ldr	r3, [r2, #0]
 80055b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055b6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80055b8:	f7ff fed6 	bl	8005368 <prvPortStartFirstTask>
	prvTaskExitError();
 80055bc:	f7ff feb8 	bl	8005330 <prvTaskExitError>
 80055c0:	e000e400 	.word	0xe000e400
 80055c4:	20003d38 	.word	0x20003d38
 80055c8:	20003d34 	.word	0x20003d34
 80055cc:	e000ed20 	.word	0xe000ed20
 80055d0:	20000024 	.word	0x20000024
 80055d4:	e000ef34 	.word	0xe000ef34

080055d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80055d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055dc:	2b0f      	cmp	r3, #15
 80055de:	d910      	bls.n	8005602 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055e0:	4912      	ldr	r1, [pc, #72]	; (800562c <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055e2:	4a13      	ldr	r2, [pc, #76]	; (8005630 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055e4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055e6:	7812      	ldrb	r2, [r2, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d90a      	bls.n	8005602 <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	b672      	cpsid	i
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	b662      	cpsie	i
 8005600:	e7fe      	b.n	8005600 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005602:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <vPortValidateInterruptPriority+0x5c>)
 8005604:	4a0c      	ldr	r2, [pc, #48]	; (8005638 <vPortValidateInterruptPriority+0x60>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800560e:	4293      	cmp	r3, r2
 8005610:	d90a      	bls.n	8005628 <vPortValidateInterruptPriority+0x50>
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	b672      	cpsid	i
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	b662      	cpsie	i
 8005626:	e7fe      	b.n	8005626 <vPortValidateInterruptPriority+0x4e>
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	e000e3f0 	.word	0xe000e3f0
 8005630:	20003d34 	.word	0x20003d34
 8005634:	e000ed0c 	.word	0xe000ed0c
 8005638:	20003d38 	.word	0x20003d38

0800563c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005640:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8005642:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005644:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005646:	b932      	cbnz	r2, 8005656 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005648:	6805      	ldr	r5, [r0, #0]
 800564a:	bb3d      	cbnz	r5, 800569c <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800564c:	6840      	ldr	r0, [r0, #4]
 800564e:	f001 f947 	bl	80068e0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005652:	6065      	str	r5, [r4, #4]
 8005654:	e025      	b.n	80056a2 <prvCopyDataToQueue+0x66>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005656:	b96d      	cbnz	r5, 8005674 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005658:	6880      	ldr	r0, [r0, #8]
 800565a:	f001 f9cf 	bl	80069fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800565e:	68a3      	ldr	r3, [r4, #8]
 8005660:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005662:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005664:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005666:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005668:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800566a:	d317      	bcc.n	800569c <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800566c:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800566e:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005670:	60a3      	str	r3, [r4, #8]
 8005672:	e016      	b.n	80056a2 <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005674:	68c0      	ldr	r0, [r0, #12]
 8005676:	f001 f9c1 	bl	80069fc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800567a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800567c:	68e2      	ldr	r2, [r4, #12]
 800567e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005680:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005682:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005684:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005686:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005688:	d202      	bcs.n	8005690 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800568a:	6862      	ldr	r2, [r4, #4]
 800568c:	4413      	add	r3, r2
 800568e:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005690:	2d02      	cmp	r5, #2
 8005692:	d103      	bne.n	800569c <prvCopyDataToQueue+0x60>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005694:	b126      	cbz	r6, 80056a0 <prvCopyDataToQueue+0x64>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005696:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005698:	2000      	movs	r0, #0
 800569a:	e002      	b.n	80056a2 <prvCopyDataToQueue+0x66>
 800569c:	2000      	movs	r0, #0
 800569e:	e000      	b.n	80056a2 <prvCopyDataToQueue+0x66>
 80056a0:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80056a2:	3601      	adds	r6, #1
 80056a4:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80056a6:	bd70      	pop	{r4, r5, r6, pc}

080056a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80056aa:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056ac:	b172      	cbz	r2, 80056cc <prvCopyDataFromQueue+0x24>
 80056ae:	4608      	mov	r0, r1
{
 80056b0:	b410      	push	{r4}
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80056b2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056b4:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80056b6:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056b8:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80056ba:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056bc:	d301      	bcc.n	80056c2 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056c2:	68d9      	ldr	r1, [r3, #12]
	}
}
 80056c4:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056c8:	f001 b998 	b.w	80069fc <memcpy>
 80056cc:	4770      	bx	lr
	...

080056d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056d4:	f7ff fe8e 	bl	80053f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056d8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80056dc:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056de:	2c00      	cmp	r4, #0
 80056e0:	dd16      	ble.n	8005710 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056e4:	b1a3      	cbz	r3, 8005710 <prvUnlockQueue+0x40>
 80056e6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80056ea:	e005      	b.n	80056f8 <prvUnlockQueue+0x28>
 80056ec:	3c01      	subs	r4, #1
 80056ee:	b2e3      	uxtb	r3, r4
 80056f0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056f2:	b16b      	cbz	r3, 8005710 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056f6:	b15b      	cbz	r3, 8005710 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056f8:	4630      	mov	r0, r6
 80056fa:	f000 ffe5 	bl	80066c8 <xTaskRemoveFromEventList>
 80056fe:	2800      	cmp	r0, #0
 8005700:	d0f4      	beq.n	80056ec <prvUnlockQueue+0x1c>
 8005702:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005704:	f001 f888 	bl	8006818 <vTaskMissedYield>
 8005708:	b2e3      	uxtb	r3, r4
 800570a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f1      	bne.n	80056f4 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005710:	23ff      	movs	r3, #255	; 0xff
 8005712:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005716:	f7ff fe93 	bl	8005440 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800571a:	f7ff fe6b 	bl	80053f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800571e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005722:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005724:	2c00      	cmp	r4, #0
 8005726:	dd16      	ble.n	8005756 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005728:	692b      	ldr	r3, [r5, #16]
 800572a:	b1a3      	cbz	r3, 8005756 <prvUnlockQueue+0x86>
 800572c:	f105 0610 	add.w	r6, r5, #16
 8005730:	e005      	b.n	800573e <prvUnlockQueue+0x6e>
 8005732:	3c01      	subs	r4, #1
 8005734:	b2e3      	uxtb	r3, r4
 8005736:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005738:	b16b      	cbz	r3, 8005756 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800573a:	692b      	ldr	r3, [r5, #16]
 800573c:	b15b      	cbz	r3, 8005756 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800573e:	4630      	mov	r0, r6
 8005740:	f000 ffc2 	bl	80066c8 <xTaskRemoveFromEventList>
 8005744:	2800      	cmp	r0, #0
 8005746:	d0f4      	beq.n	8005732 <prvUnlockQueue+0x62>
 8005748:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800574a:	f001 f865 	bl	8006818 <vTaskMissedYield>
 800574e:	b2e3      	uxtb	r3, r4
 8005750:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f1      	bne.n	800573a <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005756:	23ff      	movs	r3, #255	; 0xff
 8005758:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800575c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005760:	f7ff be6e 	b.w	8005440 <vPortExitCritical>

08005764 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005764:	b950      	cbnz	r0, 800577c <xQueueGenericCreate+0x18>
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	b672      	cpsid	i
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	b662      	cpsie	i
 800577a:	e7fe      	b.n	800577a <xQueueGenericCreate+0x16>
	{
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005780:	fb01 f000 	mul.w	r0, r1, r0
 8005784:	460d      	mov	r5, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005786:	3048      	adds	r0, #72	; 0x48
 8005788:	f7ff fcaa 	bl	80050e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800578c:	4604      	mov	r4, r0
 800578e:	b318      	cbz	r0, 80057d8 <xQueueGenericCreate+0x74>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005790:	b325      	cbz	r5, 80057dc <xQueueGenericCreate+0x78>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005792:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8005796:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005798:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800579a:	2600      	movs	r6, #0
	pxNewQueue->uxItemSize = uxItemSize;
 800579c:	6425      	str	r5, [r4, #64]	; 0x40
		pxQueue->cRxLock = queueUNLOCKED;
 800579e:	25ff      	movs	r5, #255	; 0xff
	taskENTER_CRITICAL();
 80057a0:	f7ff fe28 	bl	80053f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80057a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057a8:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057ac:	6822      	ldr	r2, [r4, #0]
 80057ae:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057b2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80057b4:	1a59      	subs	r1, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057b6:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057b8:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80057ba:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057bc:	6063      	str	r3, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 80057be:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80057c2:	60e2      	str	r2, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 80057c4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057c8:	f7ff fd64 	bl	8005294 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80057d0:	f7ff fd60 	bl	8005294 <vListInitialise>
	taskEXIT_CRITICAL();
 80057d4:	f7ff fe34 	bl	8005440 <vPortExitCritical>
	}
 80057d8:	4620      	mov	r0, r4
 80057da:	bd70      	pop	{r4, r5, r6, pc}
	if( uxItemSize == ( UBaseType_t ) 0 )
 80057dc:	4603      	mov	r3, r0
 80057de:	e7da      	b.n	8005796 <xQueueGenericCreate+0x32>

080057e0 <xQueueGenericSend>:
{
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	b085      	sub	sp, #20
 80057e6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80057e8:	2800      	cmp	r0, #0
 80057ea:	f000 810a 	beq.w	8005a02 <xQueueGenericSend+0x222>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ee:	2900      	cmp	r1, #0
 80057f0:	f000 814b 	beq.w	8005a8a <xQueueGenericSend+0x2aa>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	f000 8139 	beq.w	8005a6c <xQueueGenericSend+0x28c>
 80057fa:	4604      	mov	r4, r0
 80057fc:	461f      	mov	r7, r3
 80057fe:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005800:	f001 f810 	bl	8006824 <xTaskGetSchedulerState>
 8005804:	b918      	cbnz	r0, 800580e <xQueueGenericSend+0x2e>
 8005806:	9b01      	ldr	r3, [sp, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f040 8124 	bne.w	8005a56 <xQueueGenericSend+0x276>
		taskENTER_CRITICAL();
 800580e:	f7ff fdf1 	bl	80053f4 <vPortEnterCritical>
 8005812:	f1a7 0602 	sub.w	r6, r7, #2
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005816:	6ba2      	ldr	r2, [r4, #56]	; 0x38
{
 8005818:	2500      	movs	r5, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800581a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800581c:	fab6 f686 	clz	r6, r6
		prvLockQueue( pxQueue );
 8005820:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005822:	429a      	cmp	r2, r3
 8005824:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8005828:	d378      	bcc.n	800591c <xQueueGenericSend+0x13c>
 800582a:	2e00      	cmp	r6, #0
 800582c:	d176      	bne.n	800591c <xQueueGenericSend+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800582e:	9b01      	ldr	r3, [sp, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8104 	beq.w	8005a3e <xQueueGenericSend+0x25e>
				else if( xEntryTimeSet == pdFALSE )
 8005836:	2d00      	cmp	r5, #0
 8005838:	f000 80fd 	beq.w	8005a36 <xQueueGenericSend+0x256>
		taskEXIT_CRITICAL();
 800583c:	f7ff fe00 	bl	8005440 <vPortExitCritical>
		vTaskSuspendAll();
 8005840:	f000 fcf8 	bl	8006234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005844:	f7ff fdd6 	bl	80053f4 <vPortEnterCritical>
 8005848:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800584c:	2bff      	cmp	r3, #255	; 0xff
 800584e:	f000 80ef 	beq.w	8005a30 <xQueueGenericSend+0x250>
 8005852:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005856:	2bff      	cmp	r3, #255	; 0xff
 8005858:	f000 80e7 	beq.w	8005a2a <xQueueGenericSend+0x24a>
 800585c:	f7ff fdf0 	bl	8005440 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005860:	a901      	add	r1, sp, #4
 8005862:	a802      	add	r0, sp, #8
 8005864:	f000 ff90 	bl	8006788 <xTaskCheckForTimeOut>
 8005868:	2800      	cmp	r0, #0
 800586a:	f040 80d5 	bne.w	8005a18 <xQueueGenericSend+0x238>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800586e:	f7ff fdc1 	bl	80053f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005872:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005874:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005876:	429a      	cmp	r2, r3
 8005878:	d066      	beq.n	8005948 <xQueueGenericSend+0x168>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800587a:	f7ff fde1 	bl	8005440 <vPortExitCritical>
	taskENTER_CRITICAL();
 800587e:	f7ff fdb9 	bl	80053f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005882:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005886:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005888:	2d00      	cmp	r5, #0
 800588a:	dd16      	ble.n	80058ba <xQueueGenericSend+0xda>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800588c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800588e:	b1a3      	cbz	r3, 80058ba <xQueueGenericSend+0xda>
 8005890:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 8005894:	e005      	b.n	80058a2 <xQueueGenericSend+0xc2>
 8005896:	3d01      	subs	r5, #1
 8005898:	b2eb      	uxtb	r3, r5
 800589a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800589c:	b16b      	cbz	r3, 80058ba <xQueueGenericSend+0xda>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800589e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058a0:	b15b      	cbz	r3, 80058ba <xQueueGenericSend+0xda>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a2:	4658      	mov	r0, fp
 80058a4:	f000 ff10 	bl	80066c8 <xTaskRemoveFromEventList>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d0f4      	beq.n	8005896 <xQueueGenericSend+0xb6>
 80058ac:	3d01      	subs	r5, #1
						vTaskMissedYield();
 80058ae:	f000 ffb3 	bl	8006818 <vTaskMissedYield>
 80058b2:	b2eb      	uxtb	r3, r5
 80058b4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f1      	bne.n	800589e <xQueueGenericSend+0xbe>
		pxQueue->cTxLock = queueUNLOCKED;
 80058ba:	23ff      	movs	r3, #255	; 0xff
 80058bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80058c0:	f7ff fdbe 	bl	8005440 <vPortExitCritical>
	taskENTER_CRITICAL();
 80058c4:	f7ff fd96 	bl	80053f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80058c8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80058cc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	dd16      	ble.n	8005900 <xQueueGenericSend+0x120>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	b1a3      	cbz	r3, 8005900 <xQueueGenericSend+0x120>
 80058d6:	f104 0b10 	add.w	fp, r4, #16
 80058da:	e005      	b.n	80058e8 <xQueueGenericSend+0x108>
 80058dc:	3d01      	subs	r5, #1
 80058de:	b2eb      	uxtb	r3, r5
 80058e0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058e2:	b16b      	cbz	r3, 8005900 <xQueueGenericSend+0x120>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e4:	6923      	ldr	r3, [r4, #16]
 80058e6:	b15b      	cbz	r3, 8005900 <xQueueGenericSend+0x120>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e8:	4658      	mov	r0, fp
 80058ea:	f000 feed 	bl	80066c8 <xTaskRemoveFromEventList>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d0f4      	beq.n	80058dc <xQueueGenericSend+0xfc>
 80058f2:	3d01      	subs	r5, #1
					vTaskMissedYield();
 80058f4:	f000 ff90 	bl	8006818 <vTaskMissedYield>
 80058f8:	b2eb      	uxtb	r3, r5
 80058fa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f1      	bne.n	80058e4 <xQueueGenericSend+0x104>
		pxQueue->cRxLock = queueUNLOCKED;
 8005900:	23ff      	movs	r3, #255	; 0xff
 8005902:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005906:	f7ff fd9b 	bl	8005440 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800590a:	f000 fd4b 	bl	80063a4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800590e:	f7ff fd71 	bl	80053f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005912:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005914:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005916:	2501      	movs	r5, #1
 8005918:	429a      	cmp	r2, r3
 800591a:	d286      	bcs.n	800582a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800591c:	463a      	mov	r2, r7
 800591e:	4641      	mov	r1, r8
 8005920:	4620      	mov	r0, r4
 8005922:	f7ff fe8b 	bl	800563c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	f040 808c 	bne.w	8005a46 <xQueueGenericSend+0x266>
					else if( xYieldRequired != pdFALSE )
 800592e:	b138      	cbz	r0, 8005940 <xQueueGenericSend+0x160>
						queueYIELD_IF_USING_PREEMPTION();
 8005930:	4b5d      	ldr	r3, [pc, #372]	; (8005aa8 <xQueueGenericSend+0x2c8>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005940:	f7ff fd7e 	bl	8005440 <vPortExitCritical>
				return pdPASS;
 8005944:	2001      	movs	r0, #1
 8005946:	e06d      	b.n	8005a24 <xQueueGenericSend+0x244>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005948:	f104 0b10 	add.w	fp, r4, #16
	taskEXIT_CRITICAL();
 800594c:	f7ff fd78 	bl	8005440 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005950:	9901      	ldr	r1, [sp, #4]
 8005952:	4658      	mov	r0, fp
 8005954:	f000 fe64 	bl	8006620 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005958:	f7ff fd4c 	bl	80053f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800595c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005960:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005964:	f1ba 0f00 	cmp.w	sl, #0
 8005968:	dd1a      	ble.n	80059a0 <xQueueGenericSend+0x1c0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800596a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800596c:	b1c2      	cbz	r2, 80059a0 <xQueueGenericSend+0x1c0>
 800596e:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8005972:	e007      	b.n	8005984 <xQueueGenericSend+0x1a4>
 8005974:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005978:	b2db      	uxtb	r3, r3
 800597a:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800597e:	b17b      	cbz	r3, 80059a0 <xQueueGenericSend+0x1c0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005980:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005982:	b16a      	cbz	r2, 80059a0 <xQueueGenericSend+0x1c0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005984:	4628      	mov	r0, r5
 8005986:	f000 fe9f 	bl	80066c8 <xTaskRemoveFromEventList>
 800598a:	2800      	cmp	r0, #0
 800598c:	d0f2      	beq.n	8005974 <xQueueGenericSend+0x194>
						vTaskMissedYield();
 800598e:	f000 ff43 	bl	8006818 <vTaskMissedYield>
 8005992:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005996:	b2db      	uxtb	r3, r3
 8005998:	fa4f fa83 	sxtb.w	sl, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ef      	bne.n	8005980 <xQueueGenericSend+0x1a0>
		pxQueue->cTxLock = queueUNLOCKED;
 80059a0:	23ff      	movs	r3, #255	; 0xff
 80059a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80059a6:	f7ff fd4b 	bl	8005440 <vPortExitCritical>
	taskENTER_CRITICAL();
 80059aa:	f7ff fd23 	bl	80053f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80059ae:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80059b2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059b4:	2d00      	cmp	r5, #0
 80059b6:	dc04      	bgt.n	80059c2 <xQueueGenericSend+0x1e2>
 80059b8:	e011      	b.n	80059de <xQueueGenericSend+0x1fe>
 80059ba:	3d01      	subs	r5, #1
 80059bc:	b2eb      	uxtb	r3, r5
 80059be:	b25d      	sxtb	r5, r3
 80059c0:	b16b      	cbz	r3, 80059de <xQueueGenericSend+0x1fe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	b15b      	cbz	r3, 80059de <xQueueGenericSend+0x1fe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059c6:	4658      	mov	r0, fp
 80059c8:	f000 fe7e 	bl	80066c8 <xTaskRemoveFromEventList>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d0f4      	beq.n	80059ba <xQueueGenericSend+0x1da>
 80059d0:	3d01      	subs	r5, #1
					vTaskMissedYield();
 80059d2:	f000 ff21 	bl	8006818 <vTaskMissedYield>
 80059d6:	b2eb      	uxtb	r3, r5
 80059d8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f1      	bne.n	80059c2 <xQueueGenericSend+0x1e2>
		pxQueue->cRxLock = queueUNLOCKED;
 80059de:	23ff      	movs	r3, #255	; 0xff
 80059e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80059e4:	f7ff fd2c 	bl	8005440 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80059e8:	f000 fcdc 	bl	80063a4 <xTaskResumeAll>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d18e      	bne.n	800590e <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80059f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059f4:	4a2c      	ldr	r2, [pc, #176]	; (8005aa8 <xQueueGenericSend+0x2c8>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	e785      	b.n	800590e <xQueueGenericSend+0x12e>
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	b672      	cpsid	i
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	b662      	cpsie	i
 8005a16:	e7fe      	b.n	8005a16 <xQueueGenericSend+0x236>
			prvUnlockQueue( pxQueue );
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f7ff fe59 	bl	80056d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a1e:	f000 fcc1 	bl	80063a4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005a22:	2000      	movs	r0, #0
}
 8005a24:	b005      	add	sp, #20
 8005a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		prvLockQueue( pxQueue );
 8005a2a:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8005a2e:	e715      	b.n	800585c <xQueueGenericSend+0x7c>
 8005a30:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8005a34:	e70d      	b.n	8005852 <xQueueGenericSend+0x72>
					vTaskSetTimeOutState( &xTimeOut );
 8005a36:	a802      	add	r0, sp, #8
 8005a38:	f000 fe8e 	bl	8006758 <vTaskSetTimeOutState>
 8005a3c:	e6fe      	b.n	800583c <xQueueGenericSend+0x5c>
					taskEXIT_CRITICAL();
 8005a3e:	f7ff fcff 	bl	8005440 <vPortExitCritical>
					return errQUEUE_FULL;
 8005a42:	4630      	mov	r0, r6
 8005a44:	e7ee      	b.n	8005a24 <xQueueGenericSend+0x244>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a4a:	f000 fe3d 	bl	80066c8 <xTaskRemoveFromEventList>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	f47f af6e 	bne.w	8005930 <xQueueGenericSend+0x150>
 8005a54:	e774      	b.n	8005940 <xQueueGenericSend+0x160>
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	b672      	cpsid	i
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	b662      	cpsie	i
 8005a6a:	e7fe      	b.n	8005a6a <xQueueGenericSend+0x28a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005a6e:	2a01      	cmp	r2, #1
 8005a70:	f43f aec3 	beq.w	80057fa <xQueueGenericSend+0x1a>
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	b672      	cpsid	i
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	b662      	cpsie	i
 8005a88:	e7fe      	b.n	8005a88 <xQueueGenericSend+0x2a8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a8a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	f43f aeb1 	beq.w	80057f4 <xQueueGenericSend+0x14>
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	b672      	cpsid	i
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	b662      	cpsie	i
 8005aa6:	e7fe      	b.n	8005aa6 <xQueueGenericSend+0x2c6>
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <xQueueCreateMutex>:
	{
 8005aac:	b570      	push	{r4, r5, r6, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005aae:	2048      	movs	r0, #72	; 0x48
 8005ab0:	f7ff fb16 	bl	80050e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	b350      	cbz	r0, 8005b0e <xQueueCreateMutex+0x62>
	pxNewQueue->uxItemSize = uxItemSize;
 8005ab8:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8005aba:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005abc:	6020      	str	r0, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
 8005abe:	26ff      	movs	r6, #255	; 0xff
	pxNewQueue->uxLength = uxQueueLength;
 8005ac0:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ac2:	6405      	str	r5, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
 8005ac4:	f7ff fc96 	bl	80053f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ac8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005aca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005acc:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	fb02 f201 	mul.w	r2, r2, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ad6:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005ad8:	1a51      	subs	r1, r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ada:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005adc:	63a5      	str	r5, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005ade:	440b      	add	r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ae0:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ae2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005ae6:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8005ae8:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005aec:	f7ff fbd2 	bl	8005294 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005af0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005af4:	f7ff fbce 	bl	8005294 <vListInitialise>
	taskEXIT_CRITICAL();
 8005af8:	f7ff fca2 	bl	8005440 <vPortExitCritical>
			pxNewQueue->pxMutexHolder = NULL;
 8005afc:	6065      	str	r5, [r4, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005afe:	6025      	str	r5, [r4, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b00:	462b      	mov	r3, r5
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005b02:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b04:	462a      	mov	r2, r5
 8005b06:	4629      	mov	r1, r5
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f7ff fe69 	bl	80057e0 <xQueueGenericSend>
	}
 8005b0e:	4620      	mov	r0, r4
 8005b10:	bd70      	pop	{r4, r5, r6, pc}
 8005b12:	bf00      	nop

08005b14 <xQueueGenericSendFromISR>:
{
 8005b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005b18:	b318      	cbz	r0, 8005b62 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b1a:	2900      	cmp	r1, #0
 8005b1c:	d04a      	beq.n	8005bb4 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d03a      	beq.n	8005b98 <xQueueGenericSendFromISR+0x84>
 8005b22:	4604      	mov	r4, r0
 8005b24:	461f      	mov	r7, r3
 8005b26:	4690      	mov	r8, r2
 8005b28:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b2a:	f7ff fd55 	bl	80055d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005b2e:	f3ef 8611 	mrs	r6, BASEPRI
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	b672      	cpsid	i
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d314      	bcc.n	8005b78 <xQueueGenericSendFromISR+0x64>
 8005b4e:	f1a7 0002 	sub.w	r0, r7, #2
 8005b52:	fab0 f080 	clz	r0, r0
 8005b56:	0940      	lsrs	r0, r0, #5
 8005b58:	b970      	cbnz	r0, 8005b78 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005b5a:	f386 8811 	msr	BASEPRI, r6
}
 8005b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	b672      	cpsid	i
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	b662      	cpsie	i
 8005b76:	e7fe      	b.n	8005b76 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b78:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b7c:	463a      	mov	r2, r7
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b82:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b84:	f7ff fd5a 	bl	800563c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005b88:	1c6b      	adds	r3, r5, #1
 8005b8a:	d021      	beq.n	8005bd0 <xQueueGenericSendFromISR+0xbc>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b8c:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8005b8e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b90:	b25b      	sxtb	r3, r3
 8005b92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b96:	e7e0      	b.n	8005b5a <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b98:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005b9a:	2c01      	cmp	r4, #1
 8005b9c:	d0c1      	beq.n	8005b22 <xQueueGenericSendFromISR+0xe>
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	b672      	cpsid	i
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	b662      	cpsie	i
 8005bb2:	e7fe      	b.n	8005bb2 <xQueueGenericSendFromISR+0x9e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005bb6:	2c00      	cmp	r4, #0
 8005bb8:	d0b1      	beq.n	8005b1e <xQueueGenericSendFromISR+0xa>
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	b672      	cpsid	i
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	b662      	cpsie	i
 8005bce:	e7fe      	b.n	8005bce <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bd2:	b90b      	cbnz	r3, 8005bd8 <xQueueGenericSendFromISR+0xc4>
			xReturn = pdPASS;
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	e7c0      	b.n	8005b5a <xQueueGenericSendFromISR+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005bdc:	f000 fd74 	bl	80066c8 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d0f7      	beq.n	8005bd4 <xQueueGenericSendFromISR+0xc0>
 8005be4:	f1b8 0f00 	cmp.w	r8, #0
 8005be8:	d0f4      	beq.n	8005bd4 <xQueueGenericSendFromISR+0xc0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bea:	2001      	movs	r0, #1
 8005bec:	f8c8 0000 	str.w	r0, [r8]
 8005bf0:	e7b3      	b.n	8005b5a <xQueueGenericSendFromISR+0x46>
 8005bf2:	bf00      	nop

08005bf4 <xQueueGenericReceive>:
{
 8005bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f000 811e 	beq.w	8005e3e <xQueueGenericReceive+0x24a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c02:	2900      	cmp	r1, #0
 8005c04:	f000 814f 	beq.w	8005ea6 <xQueueGenericReceive+0x2b2>
 8005c08:	4604      	mov	r4, r0
 8005c0a:	461f      	mov	r7, r3
 8005c0c:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c0e:	f000 fe09 	bl	8006824 <xTaskGetSchedulerState>
 8005c12:	b960      	cbnz	r0, 8005c2e <xQueueGenericReceive+0x3a>
 8005c14:	9d01      	ldr	r5, [sp, #4]
 8005c16:	b15d      	cbz	r5, 8005c30 <xQueueGenericReceive+0x3c>
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	b672      	cpsid	i
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	b662      	cpsie	i
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericReceive+0x38>
 8005c2e:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
 8005c30:	f7ff fbe0 	bl	80053f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c34:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8005c38:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8005c3c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8005ec4 <xQueueGenericReceive+0x2d0>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c40:	f1ba 0f00 	cmp.w	sl, #0
 8005c44:	f040 808a 	bne.w	8005d5c <xQueueGenericReceive+0x168>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 810a 	beq.w	8005e64 <xQueueGenericReceive+0x270>
				else if( xEntryTimeSet == pdFALSE )
 8005c50:	b915      	cbnz	r5, 8005c58 <xQueueGenericReceive+0x64>
					vTaskSetTimeOutState( &xTimeOut );
 8005c52:	a802      	add	r0, sp, #8
 8005c54:	f000 fd80 	bl	8006758 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8005c58:	f7ff fbf2 	bl	8005440 <vPortExitCritical>
		vTaskSuspendAll();
 8005c5c:	f000 faea 	bl	8006234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c60:	f7ff fbc8 	bl	80053f4 <vPortEnterCritical>
 8005c64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005c68:	2bff      	cmp	r3, #255	; 0xff
 8005c6a:	d101      	bne.n	8005c70 <xQueueGenericReceive+0x7c>
 8005c6c:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8005c70:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005c74:	2bff      	cmp	r3, #255	; 0xff
 8005c76:	d101      	bne.n	8005c7c <xQueueGenericReceive+0x88>
 8005c78:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8005c7c:	f7ff fbe0 	bl	8005440 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c80:	a901      	add	r1, sp, #4
 8005c82:	a802      	add	r0, sp, #8
 8005c84:	f000 fd80 	bl	8006788 <xTaskCheckForTimeOut>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	f040 8088 	bne.w	8005d9e <xQueueGenericReceive+0x1aa>
	taskENTER_CRITICAL();
 8005c8e:	f7ff fbb1 	bl	80053f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d179      	bne.n	8005d8c <xQueueGenericReceive+0x198>
	taskEXIT_CRITICAL();
 8005c98:	f7ff fbd2 	bl	8005440 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 80d8 	beq.w	8005e54 <xQueueGenericReceive+0x260>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ca4:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8005ca8:	9901      	ldr	r1, [sp, #4]
 8005caa:	4650      	mov	r0, sl
 8005cac:	f000 fcb8 	bl	8006620 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005cb0:	f7ff fba0 	bl	80053f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005cb4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005cb8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cba:	2d00      	cmp	r5, #0
 8005cbc:	dc04      	bgt.n	8005cc8 <xQueueGenericReceive+0xd4>
 8005cbe:	e011      	b.n	8005ce4 <xQueueGenericReceive+0xf0>
 8005cc0:	3d01      	subs	r5, #1
 8005cc2:	b2eb      	uxtb	r3, r5
 8005cc4:	b25d      	sxtb	r5, r3
 8005cc6:	b16b      	cbz	r3, 8005ce4 <xQueueGenericReceive+0xf0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cca:	b15b      	cbz	r3, 8005ce4 <xQueueGenericReceive+0xf0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ccc:	4650      	mov	r0, sl
 8005cce:	f000 fcfb 	bl	80066c8 <xTaskRemoveFromEventList>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d0f4      	beq.n	8005cc0 <xQueueGenericReceive+0xcc>
 8005cd6:	3d01      	subs	r5, #1
						vTaskMissedYield();
 8005cd8:	f000 fd9e 	bl	8006818 <vTaskMissedYield>
 8005cdc:	b2eb      	uxtb	r3, r5
 8005cde:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1f1      	bne.n	8005cc8 <xQueueGenericReceive+0xd4>
		pxQueue->cTxLock = queueUNLOCKED;
 8005ce4:	23ff      	movs	r3, #255	; 0xff
 8005ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005cea:	f7ff fba9 	bl	8005440 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005cee:	f7ff fb81 	bl	80053f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005cf2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005cf6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cf8:	2d00      	cmp	r5, #0
 8005cfa:	dd16      	ble.n	8005d2a <xQueueGenericReceive+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cfc:	6923      	ldr	r3, [r4, #16]
 8005cfe:	b1a3      	cbz	r3, 8005d2a <xQueueGenericReceive+0x136>
 8005d00:	f104 0a10 	add.w	sl, r4, #16
 8005d04:	e005      	b.n	8005d12 <xQueueGenericReceive+0x11e>
 8005d06:	3d01      	subs	r5, #1
 8005d08:	b2eb      	uxtb	r3, r5
 8005d0a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d0c:	b16b      	cbz	r3, 8005d2a <xQueueGenericReceive+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	b15b      	cbz	r3, 8005d2a <xQueueGenericReceive+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d12:	4650      	mov	r0, sl
 8005d14:	f000 fcd8 	bl	80066c8 <xTaskRemoveFromEventList>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d0f4      	beq.n	8005d06 <xQueueGenericReceive+0x112>
 8005d1c:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8005d1e:	f000 fd7b 	bl	8006818 <vTaskMissedYield>
 8005d22:	b2eb      	uxtb	r3, r5
 8005d24:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f1      	bne.n	8005d0e <xQueueGenericReceive+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 8005d2a:	23ff      	movs	r3, #255	; 0xff
 8005d2c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005d30:	f7ff fb86 	bl	8005440 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005d34:	f000 fb36 	bl	80063a4 <xTaskResumeAll>
 8005d38:	b938      	cbnz	r0, 8005d4a <xQueueGenericReceive+0x156>
					portYIELD_WITHIN_API();
 8005d3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005d3e:	f8c9 3000 	str.w	r3, [r9]
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8005d4c:	f7ff fb52 	bl	80053f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d50:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d54:	f1ba 0f00 	cmp.w	sl, #0
 8005d58:	f43f af76 	beq.w	8005c48 <xQueueGenericReceive+0x54>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005d60:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d62:	f7ff fca1 	bl	80056a8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8005d66:	2f00      	cmp	r7, #0
 8005d68:	f040 8082 	bne.w	8005e70 <xQueueGenericReceive+0x27c>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005d6c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d70:	6822      	ldr	r2, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005d72:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d74:	b912      	cbnz	r2, 8005d7c <xQueueGenericReceive+0x188>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005d76:	f000 fe11 	bl	800699c <pvTaskIncrementMutexHeldCount>
 8005d7a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 808a 	bne.w	8005e98 <xQueueGenericReceive+0x2a4>
				taskEXIT_CRITICAL();
 8005d84:	f7ff fb5c 	bl	8005440 <vPortExitCritical>
				return pdPASS;
 8005d88:	2001      	movs	r0, #1
 8005d8a:	e06e      	b.n	8005e6a <xQueueGenericReceive+0x276>
	taskEXIT_CRITICAL();
 8005d8c:	f7ff fb58 	bl	8005440 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005d90:	4620      	mov	r0, r4
 8005d92:	f7ff fc9d 	bl	80056d0 <prvUnlockQueue>
 8005d96:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 8005d98:	f000 fb04 	bl	80063a4 <xTaskResumeAll>
 8005d9c:	e7d6      	b.n	8005d4c <xQueueGenericReceive+0x158>
	taskENTER_CRITICAL();
 8005d9e:	f7ff fb29 	bl	80053f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005da2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005da6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005da8:	2d00      	cmp	r5, #0
 8005daa:	dd16      	ble.n	8005dda <xQueueGenericReceive+0x1e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dae:	b1a3      	cbz	r3, 8005dda <xQueueGenericReceive+0x1e6>
 8005db0:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8005db4:	e005      	b.n	8005dc2 <xQueueGenericReceive+0x1ce>
 8005db6:	3d01      	subs	r5, #1
 8005db8:	b2eb      	uxtb	r3, r5
 8005dba:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dbc:	b16b      	cbz	r3, 8005dda <xQueueGenericReceive+0x1e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc0:	b15b      	cbz	r3, 8005dda <xQueueGenericReceive+0x1e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	f000 fc80 	bl	80066c8 <xTaskRemoveFromEventList>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d0f4      	beq.n	8005db6 <xQueueGenericReceive+0x1c2>
 8005dcc:	3d01      	subs	r5, #1
						vTaskMissedYield();
 8005dce:	f000 fd23 	bl	8006818 <vTaskMissedYield>
 8005dd2:	b2eb      	uxtb	r3, r5
 8005dd4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f1      	bne.n	8005dbe <xQueueGenericReceive+0x1ca>
		pxQueue->cTxLock = queueUNLOCKED;
 8005dda:	23ff      	movs	r3, #255	; 0xff
 8005ddc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005de0:	f7ff fb2e 	bl	8005440 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005de4:	f7ff fb06 	bl	80053f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005de8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005dec:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dee:	2d00      	cmp	r5, #0
 8005df0:	dd16      	ble.n	8005e20 <xQueueGenericReceive+0x22c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	b1a3      	cbz	r3, 8005e20 <xQueueGenericReceive+0x22c>
 8005df6:	f104 0a10 	add.w	sl, r4, #16
 8005dfa:	e005      	b.n	8005e08 <xQueueGenericReceive+0x214>
 8005dfc:	3d01      	subs	r5, #1
 8005dfe:	b2eb      	uxtb	r3, r5
 8005e00:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e02:	b16b      	cbz	r3, 8005e20 <xQueueGenericReceive+0x22c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e04:	6923      	ldr	r3, [r4, #16]
 8005e06:	b15b      	cbz	r3, 8005e20 <xQueueGenericReceive+0x22c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e08:	4650      	mov	r0, sl
 8005e0a:	f000 fc5d 	bl	80066c8 <xTaskRemoveFromEventList>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d0f4      	beq.n	8005dfc <xQueueGenericReceive+0x208>
 8005e12:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8005e14:	f000 fd00 	bl	8006818 <vTaskMissedYield>
 8005e18:	b2eb      	uxtb	r3, r5
 8005e1a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f1      	bne.n	8005e04 <xQueueGenericReceive+0x210>
		pxQueue->cRxLock = queueUNLOCKED;
 8005e20:	23ff      	movs	r3, #255	; 0xff
 8005e22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005e26:	f7ff fb0b 	bl	8005440 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8005e2a:	f000 fabb 	bl	80063a4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005e2e:	f7ff fae1 	bl	80053f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e34:	b1b3      	cbz	r3, 8005e64 <xQueueGenericReceive+0x270>
	taskEXIT_CRITICAL();
 8005e36:	f7ff fb03 	bl	8005440 <vPortExitCritical>
 8005e3a:	2501      	movs	r5, #1
 8005e3c:	e786      	b.n	8005d4c <xQueueGenericReceive+0x158>
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	b672      	cpsid	i
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	b662      	cpsie	i
 8005e52:	e7fe      	b.n	8005e52 <xQueueGenericReceive+0x25e>
						taskENTER_CRITICAL();
 8005e54:	f7ff face 	bl	80053f4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005e58:	6860      	ldr	r0, [r4, #4]
 8005e5a:	f000 fcf3 	bl	8006844 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8005e5e:	f7ff faef 	bl	8005440 <vPortExitCritical>
 8005e62:	e71f      	b.n	8005ca4 <xQueueGenericReceive+0xb0>
					taskEXIT_CRITICAL();
 8005e64:	f7ff faec 	bl	8005440 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005e68:	2000      	movs	r0, #0
}
 8005e6a:	b004      	add	sp, #16
 8005e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005e72:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d085      	beq.n	8005d84 <xQueueGenericReceive+0x190>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005e7c:	f000 fc24 	bl	80066c8 <xTaskRemoveFromEventList>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	f43f af7f 	beq.w	8005d84 <xQueueGenericReceive+0x190>
							queueYIELD_IF_USING_PREEMPTION();
 8005e86:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <xQueueGenericReceive+0x2d0>)
 8005e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	e775      	b.n	8005d84 <xQueueGenericReceive+0x190>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e98:	f104 0010 	add.w	r0, r4, #16
 8005e9c:	f000 fc14 	bl	80066c8 <xTaskRemoveFromEventList>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d1f0      	bne.n	8005e86 <xQueueGenericReceive+0x292>
 8005ea4:	e76e      	b.n	8005d84 <xQueueGenericReceive+0x190>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ea6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	f43f aead 	beq.w	8005c08 <xQueueGenericReceive+0x14>
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	b672      	cpsid	i
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	b662      	cpsie	i
 8005ec2:	e7fe      	b.n	8005ec2 <xQueueGenericReceive+0x2ce>
 8005ec4:	e000ed04 	.word	0xe000ed04

08005ec8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eca:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8005ecc:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ece:	4d1b      	ldr	r5, [pc, #108]	; (8005f3c <prvAddCurrentTaskToDelayedList+0x74>)
{
 8005ed0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8005ed2:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed4:	6828      	ldr	r0, [r5, #0]
 8005ed6:	3004      	adds	r0, #4
 8005ed8:	f7ff fa16 	bl	8005308 <uxListRemove>
 8005edc:	b940      	cbnz	r0, 8005ef0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005ede:	682b      	ldr	r3, [r5, #0]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4917      	ldr	r1, [pc, #92]	; (8005f40 <prvAddCurrentTaskToDelayedList+0x78>)
 8005ee4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005ee6:	680b      	ldr	r3, [r1, #0]
 8005ee8:	4082      	lsls	r2, r0
 8005eea:	ea23 0302 	bic.w	r3, r3, r2
 8005eee:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ef0:	1c63      	adds	r3, r4, #1
 8005ef2:	d100      	bne.n	8005ef6 <prvAddCurrentTaskToDelayedList+0x2e>
 8005ef4:	b9c7      	cbnz	r7, 8005f28 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ef6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ef8:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 8005efa:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005efc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005efe:	d80b      	bhi.n	8005f18 <prvAddCurrentTaskToDelayedList+0x50>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f00:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	6829      	ldr	r1, [r5, #0]
 8005f06:	3104      	adds	r1, #4
 8005f08:	f7ff f9e4 	bl	80052d4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <prvAddCurrentTaskToDelayedList+0x80>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4294      	cmp	r4, r2
 8005f12:	d200      	bcs.n	8005f16 <prvAddCurrentTaskToDelayedList+0x4e>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005f14:	601c      	str	r4, [r3, #0]
 8005f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f18:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <prvAddCurrentTaskToDelayedList+0x84>)
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f22:	3104      	adds	r1, #4
 8005f24:	f7ff b9d6 	b.w	80052d4 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f28:	6829      	ldr	r1, [r5, #0]
 8005f2a:	4809      	ldr	r0, [pc, #36]	; (8005f50 <prvAddCurrentTaskToDelayedList+0x88>)
 8005f2c:	3104      	adds	r1, #4
}
 8005f2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f32:	f7ff b9bf 	b.w	80052b4 <vListInsertEnd>
 8005f36:	bf00      	nop
 8005f38:	20003e60 	.word	0x20003e60
 8005f3c:	20003d3c 	.word	0x20003d3c
 8005f40:	20003de8 	.word	0x20003de8
 8005f44:	20003d40 	.word	0x20003d40
 8005f48:	20003e18 	.word	0x20003e18
 8005f4c:	20003d44 	.word	0x20003d44
 8005f50:	20003e38 	.word	0x20003e38

08005f54 <xTaskCreate>:
	{
 8005f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f58:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8005f5c:	4680      	mov	r8, r0
 8005f5e:	460d      	mov	r5, r1
 8005f60:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f62:	4650      	mov	r0, sl
	{
 8005f64:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f66:	f7ff f8bb 	bl	80050e0 <pvPortMalloc>
			if( pxStack != NULL )
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f000 80cc 	beq.w	8006108 <xTaskCreate+0x1b4>
 8005f70:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f72:	2054      	movs	r0, #84	; 0x54
 8005f74:	f7ff f8b4 	bl	80050e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005f78:	4604      	mov	r4, r0
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f000 80d1 	beq.w	8006122 <xTaskCreate+0x1ce>
					pxNewTCB->pxStack = pxStack;
 8005f80:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f82:	f1aa 0a04 	sub.w	sl, sl, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f86:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f88:	4456      	add	r6, sl
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f8a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8005f8e:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f90:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d047      	beq.n	8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f98:	786b      	ldrb	r3, [r5, #1]
 8005f9a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8005f9e:	786b      	ldrb	r3, [r5, #1]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d041      	beq.n	8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fa4:	78ab      	ldrb	r3, [r5, #2]
 8005fa6:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 8005faa:	78ab      	ldrb	r3, [r5, #2]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d03b      	beq.n	8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fb0:	78eb      	ldrb	r3, [r5, #3]
 8005fb2:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8005fb6:	78eb      	ldrb	r3, [r5, #3]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d035      	beq.n	8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fbc:	792b      	ldrb	r3, [r5, #4]
 8005fbe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8005fc2:	792b      	ldrb	r3, [r5, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d02f      	beq.n	8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fc8:	796b      	ldrb	r3, [r5, #5]
 8005fca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 8005fce:	796b      	ldrb	r3, [r5, #5]
 8005fd0:	b353      	cbz	r3, 8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fd2:	79ab      	ldrb	r3, [r5, #6]
 8005fd4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 8005fd8:	79ab      	ldrb	r3, [r5, #6]
 8005fda:	b32b      	cbz	r3, 8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fdc:	79eb      	ldrb	r3, [r5, #7]
 8005fde:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8005fe2:	79eb      	ldrb	r3, [r5, #7]
 8005fe4:	b303      	cbz	r3, 8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fe6:	7a2b      	ldrb	r3, [r5, #8]
 8005fe8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 8005fec:	7a2b      	ldrb	r3, [r5, #8]
 8005fee:	b1db      	cbz	r3, 8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff0:	7a6b      	ldrb	r3, [r5, #9]
 8005ff2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8005ff6:	7a6b      	ldrb	r3, [r5, #9]
 8005ff8:	b1b3      	cbz	r3, 8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ffa:	7aab      	ldrb	r3, [r5, #10]
 8005ffc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8006000:	7aab      	ldrb	r3, [r5, #10]
 8006002:	b18b      	cbz	r3, 8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006004:	7aeb      	ldrb	r3, [r5, #11]
 8006006:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800600a:	7aeb      	ldrb	r3, [r5, #11]
 800600c:	b163      	cbz	r3, 8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800600e:	7b2b      	ldrb	r3, [r5, #12]
 8006010:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8006014:	7b2b      	ldrb	r3, [r5, #12]
 8006016:	b13b      	cbz	r3, 8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006018:	7b6b      	ldrb	r3, [r5, #13]
 800601a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800601e:	7b6b      	ldrb	r3, [r5, #13]
 8006020:	b113      	cbz	r3, 8006028 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006022:	7bab      	ldrb	r3, [r5, #14]
 8006024:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8006028:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800602a:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800602e:	f104 0a04 	add.w	sl, r4, #4
 8006032:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006034:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006038:	4650      	mov	r0, sl
		pxNewTCB->uxMutexesHeld = 0;
 800603a:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800603e:	bf28      	it	cs
 8006040:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8006042:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006044:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006046:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800604a:	f7ff f92f 	bl	80052ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800604e:	f104 0018 	add.w	r0, r4, #24
 8006052:	f7ff f92b 	bl	80052ac <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006056:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800605a:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800605c:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800605e:	4641      	mov	r1, r8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006060:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006064:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006066:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006068:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800606a:	f7ff f997 	bl	800539c <pxPortInitialiseStack>
 800606e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006070:	b107      	cbz	r7, 8006074 <xTaskCreate+0x120>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006072:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 8006074:	f7ff f9be 	bl	80053f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006078:	4a40      	ldr	r2, [pc, #256]	; (800617c <xTaskCreate+0x228>)
		if( pxCurrentTCB == NULL )
 800607a:	4e41      	ldr	r6, [pc, #260]	; (8006180 <xTaskCreate+0x22c>)
		uxCurrentNumberOfTasks++;
 800607c:	6813      	ldr	r3, [r2, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006082:	6833      	ldr	r3, [r6, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d043      	beq.n	8006110 <xTaskCreate+0x1bc>
			if( xSchedulerRunning == pdFALSE )
 8006088:	4f3e      	ldr	r7, [pc, #248]	; (8006184 <xTaskCreate+0x230>)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	b383      	cbz	r3, 80060f0 <xTaskCreate+0x19c>
 800608e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006090:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80061a4 <xTaskCreate+0x250>
		uxTaskNumber++;
 8006094:	f8df c110 	ldr.w	ip, [pc, #272]	; 80061a8 <xTaskCreate+0x254>
		prvAddTaskToReadyList( pxNewTCB );
 8006098:	f04f 0b01 	mov.w	fp, #1
 800609c:	f8df e10c 	ldr.w	lr, [pc, #268]	; 80061ac <xTaskCreate+0x258>
 80060a0:	4651      	mov	r1, sl
		uxTaskNumber++;
 80060a2:	f8dc 5000 	ldr.w	r5, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 80060a6:	fa0b f203 	lsl.w	r2, fp, r3
 80060aa:	f8de 0000 	ldr.w	r0, [lr]
 80060ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 80060b2:	eb05 090b 	add.w	r9, r5, fp
		prvAddTaskToReadyList( pxNewTCB );
 80060b6:	4302      	orrs	r2, r0
 80060b8:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 80060bc:	f8cc 9000 	str.w	r9, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 80060c0:	f8ce 2000 	str.w	r2, [lr]
 80060c4:	f7ff f8f6 	bl	80052b4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80060c8:	f7ff f9ba 	bl	8005440 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	b1c3      	cbz	r3, 8006102 <xTaskCreate+0x1ae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060d0:	6832      	ldr	r2, [r6, #0]
 80060d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d213      	bcs.n	8006102 <xTaskCreate+0x1ae>
			taskYIELD_IF_USING_PREEMPTION();
 80060da:	4b2b      	ldr	r3, [pc, #172]	; (8006188 <xTaskCreate+0x234>)
 80060dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 80060ea:	4658      	mov	r0, fp
 80060ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060f0:	6832      	ldr	r2, [r6, #0]
 80060f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060f6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80061a4 <xTaskCreate+0x250>
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d8ca      	bhi.n	8006094 <xTaskCreate+0x140>
					pxCurrentTCB = pxNewTCB;
 80060fe:	6034      	str	r4, [r6, #0]
 8006100:	e7c8      	b.n	8006094 <xTaskCreate+0x140>
			xReturn = pdPASS;
 8006102:	4658      	mov	r0, fp
	}
 8006104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800610c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 8006110:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006112:	6813      	ldr	r3, [r2, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d00b      	beq.n	8006130 <xTaskCreate+0x1dc>
 8006118:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800611a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80061a4 <xTaskCreate+0x250>
 800611e:	4f19      	ldr	r7, [pc, #100]	; (8006184 <xTaskCreate+0x230>)
 8006120:	e7b8      	b.n	8006094 <xTaskCreate+0x140>
					vPortFree( pxStack );
 8006122:	4630      	mov	r0, r6
 8006124:	f7ff f87a 	bl	800521c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800612c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006130:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80061a4 <xTaskCreate+0x250>
 8006134:	4645      	mov	r5, r8
 8006136:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800613a:	4628      	mov	r0, r5
 800613c:	3514      	adds	r5, #20
 800613e:	f7ff f8a9 	bl	8005294 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006142:	42bd      	cmp	r5, r7
 8006144:	d1f9      	bne.n	800613a <xTaskCreate+0x1e6>
	vListInitialise( &xDelayedTaskList1 );
 8006146:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80061b0 <xTaskCreate+0x25c>
	vListInitialise( &xDelayedTaskList2 );
 800614a:	4d10      	ldr	r5, [pc, #64]	; (800618c <xTaskCreate+0x238>)
	vListInitialise( &xDelayedTaskList1 );
 800614c:	4648      	mov	r0, r9
 800614e:	4f0d      	ldr	r7, [pc, #52]	; (8006184 <xTaskCreate+0x230>)
 8006150:	f7ff f8a0 	bl	8005294 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006154:	4628      	mov	r0, r5
 8006156:	f7ff f89d 	bl	8005294 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800615a:	480d      	ldr	r0, [pc, #52]	; (8006190 <xTaskCreate+0x23c>)
 800615c:	f7ff f89a 	bl	8005294 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006160:	480c      	ldr	r0, [pc, #48]	; (8006194 <xTaskCreate+0x240>)
 8006162:	f7ff f897 	bl	8005294 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006166:	480c      	ldr	r0, [pc, #48]	; (8006198 <xTaskCreate+0x244>)
 8006168:	f7ff f894 	bl	8005294 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <xTaskCreate+0x248>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800616e:	4a0c      	ldr	r2, [pc, #48]	; (80061a0 <xTaskCreate+0x24c>)
 8006170:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006174:	601d      	str	r5, [r3, #0]
 8006176:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006178:	e78c      	b.n	8006094 <xTaskCreate+0x140>
 800617a:	bf00      	nop
 800617c:	20003dd4 	.word	0x20003dd4
 8006180:	20003d3c 	.word	0x20003d3c
 8006184:	20003e34 	.word	0x20003e34
 8006188:	e000ed04 	.word	0xe000ed04
 800618c:	20003e00 	.word	0x20003e00
 8006190:	20003e20 	.word	0x20003e20
 8006194:	20003e4c 	.word	0x20003e4c
 8006198:	20003e38 	.word	0x20003e38
 800619c:	20003d44 	.word	0x20003d44
 80061a0:	20003d40 	.word	0x20003d40
 80061a4:	20003d48 	.word	0x20003d48
 80061a8:	20003de4 	.word	0x20003de4
 80061ac:	20003de8 	.word	0x20003de8
 80061b0:	20003dec 	.word	0x20003dec

080061b4 <vTaskStartScheduler>:
{
 80061b4:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80061b6:	4b19      	ldr	r3, [pc, #100]	; (800621c <vTaskStartScheduler+0x68>)
{
 80061b8:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80061ba:	2400      	movs	r4, #0
 80061bc:	2280      	movs	r2, #128	; 0x80
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	4917      	ldr	r1, [pc, #92]	; (8006220 <vTaskStartScheduler+0x6c>)
 80061c2:	4623      	mov	r3, r4
 80061c4:	9400      	str	r4, [sp, #0]
 80061c6:	4817      	ldr	r0, [pc, #92]	; (8006224 <vTaskStartScheduler+0x70>)
 80061c8:	f7ff fec4 	bl	8005f54 <xTaskCreate>
	if( xReturn == pdPASS )
 80061cc:	2801      	cmp	r0, #1
 80061ce:	d00e      	beq.n	80061ee <vTaskStartScheduler+0x3a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061d0:	3001      	adds	r0, #1
 80061d2:	d001      	beq.n	80061d8 <vTaskStartScheduler+0x24>
}
 80061d4:	b003      	add	sp, #12
 80061d6:	bd30      	pop	{r4, r5, pc}
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	b672      	cpsid	i
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	b662      	cpsie	i
 80061ec:	e7fe      	b.n	80061ec <vTaskStartScheduler+0x38>
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	b672      	cpsid	i
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8006202:	4909      	ldr	r1, [pc, #36]	; (8006228 <vTaskStartScheduler+0x74>)
 8006204:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		xSchedulerRunning = pdTRUE;
 8006208:	4a08      	ldr	r2, [pc, #32]	; (800622c <vTaskStartScheduler+0x78>)
		xTickCount = ( TickType_t ) 0U;
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <vTaskStartScheduler+0x7c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800620c:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800620e:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8006210:	601c      	str	r4, [r3, #0]
}
 8006212:	b003      	add	sp, #12
 8006214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006218:	f7ff b98a 	b.w	8005530 <xPortStartScheduler>
 800621c:	20003e14 	.word	0x20003e14
 8006220:	080077b0 	.word	0x080077b0
 8006224:	08006515 	.word	0x08006515
 8006228:	20003e18 	.word	0x20003e18
 800622c:	20003e34 	.word	0x20003e34
 8006230:	20003e60 	.word	0x20003e60

08006234 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006234:	4a02      	ldr	r2, [pc, #8]	; (8006240 <vTaskSuspendAll+0xc>)
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	3301      	adds	r3, #1
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20003de0 	.word	0x20003de0

08006244 <xTaskIncrementTick>:
{
 8006244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006248:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <xTaskIncrementTick+0x134>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d153      	bne.n	80062f8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8006250:	4b4a      	ldr	r3, [pc, #296]	; (800637c <xTaskIncrementTick+0x138>)
 8006252:	681e      	ldr	r6, [r3, #0]
 8006254:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006256:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8006258:	2e00      	cmp	r6, #0
 800625a:	d05a      	beq.n	8006312 <xTaskIncrementTick+0xce>
 800625c:	f8df b13c 	ldr.w	fp, [pc, #316]	; 800639c <xTaskIncrementTick+0x158>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006260:	f8db 2000 	ldr.w	r2, [fp]
 8006264:	2400      	movs	r4, #0
 8006266:	4296      	cmp	r6, r2
 8006268:	d362      	bcc.n	8006330 <xTaskIncrementTick+0xec>
 800626a:	4d45      	ldr	r5, [pc, #276]	; (8006380 <xTaskIncrementTick+0x13c>)
 800626c:	4f45      	ldr	r7, [pc, #276]	; (8006384 <xTaskIncrementTick+0x140>)
 800626e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80063a0 <xTaskIncrementTick+0x15c>
 8006272:	e02e      	b.n	80062d2 <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006274:	682a      	ldr	r2, [r5, #0]
 8006276:	68d2      	ldr	r2, [r2, #12]
 8006278:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800627c:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006280:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8006284:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006286:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8006288:	d36b      	bcc.n	8006362 <xTaskIncrementTick+0x11e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800628a:	f7ff f83d 	bl	8005308 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800628e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006292:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006296:	b109      	cbz	r1, 800629c <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006298:	f7ff f836 	bl	8005308 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800629c:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 80062a0:	2201      	movs	r2, #1
 80062a2:	4b39      	ldr	r3, [pc, #228]	; (8006388 <xTaskIncrementTick+0x144>)
 80062a4:	4651      	mov	r1, sl
 80062a6:	fa02 fe00 	lsl.w	lr, r2, r0
 80062aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80062b4:	ea4e 0e03 	orr.w	lr, lr, r3
 80062b8:	4b33      	ldr	r3, [pc, #204]	; (8006388 <xTaskIncrementTick+0x144>)
 80062ba:	f8c3 e000 	str.w	lr, [r3]
 80062be:	f7fe fff9 	bl	80052b4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062c2:	f8d8 0000 	ldr.w	r0, [r8]
 80062c6:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 80062ca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80062cc:	4291      	cmp	r1, r2
 80062ce:	bf28      	it	cs
 80062d0:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062d2:	682a      	ldr	r2, [r5, #0]
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	d1cc      	bne.n	8006274 <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062de:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062e2:	f8d8 3000 	ldr.w	r3, [r8]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80062ec:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	bf28      	it	cs
 80062f4:	2401      	movcs	r4, #1
 80062f6:	e004      	b.n	8006302 <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 80062f8:	4a24      	ldr	r2, [pc, #144]	; (800638c <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 80062fa:	2400      	movs	r4, #0
		++uxPendedTicks;
 80062fc:	6813      	ldr	r3, [r2, #0]
 80062fe:	3301      	adds	r3, #1
 8006300:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8006302:	4b23      	ldr	r3, [pc, #140]	; (8006390 <xTaskIncrementTick+0x14c>)
 8006304:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006306:	2b00      	cmp	r3, #0
 8006308:	bf18      	it	ne
 800630a:	2401      	movne	r4, #1
}
 800630c:	4620      	mov	r0, r4
 800630e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006312:	4d1b      	ldr	r5, [pc, #108]	; (8006380 <xTaskIncrementTick+0x13c>)
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	b173      	cbz	r3, 8006338 <xTaskIncrementTick+0xf4>
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	b672      	cpsid	i
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	b662      	cpsie	i
 800632e:	e7fe      	b.n	800632e <xTaskIncrementTick+0xea>
 8006330:	4f14      	ldr	r7, [pc, #80]	; (8006384 <xTaskIncrementTick+0x140>)
 8006332:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80063a0 <xTaskIncrementTick+0x15c>
 8006336:	e7d4      	b.n	80062e2 <xTaskIncrementTick+0x9e>
 8006338:	4b16      	ldr	r3, [pc, #88]	; (8006394 <xTaskIncrementTick+0x150>)
 800633a:	6829      	ldr	r1, [r5, #0]
 800633c:	4a16      	ldr	r2, [pc, #88]	; (8006398 <xTaskIncrementTick+0x154>)
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	6028      	str	r0, [r5, #0]
 8006342:	6019      	str	r1, [r3, #0]
 8006344:	6813      	ldr	r3, [r2, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	b15b      	cbz	r3, 8006368 <xTaskIncrementTick+0x124>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006350:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006352:	f8df b048 	ldr.w	fp, [pc, #72]	; 800639c <xTaskIncrementTick+0x158>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006356:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006358:	68d2      	ldr	r2, [r2, #12]
 800635a:	6852      	ldr	r2, [r2, #4]
 800635c:	f8cb 2000 	str.w	r2, [fp]
 8006360:	e77e      	b.n	8006260 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 8006362:	f8cb 1000 	str.w	r1, [fp]
						break;
 8006366:	e7bc      	b.n	80062e2 <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006368:	f8df b030 	ldr.w	fp, [pc, #48]	; 800639c <xTaskIncrementTick+0x158>
 800636c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006370:	f8cb 2000 	str.w	r2, [fp]
 8006374:	e774      	b.n	8006260 <xTaskIncrementTick+0x1c>
 8006376:	bf00      	nop
 8006378:	20003de0 	.word	0x20003de0
 800637c:	20003e60 	.word	0x20003e60
 8006380:	20003d40 	.word	0x20003d40
 8006384:	20003d48 	.word	0x20003d48
 8006388:	20003de8 	.word	0x20003de8
 800638c:	20003ddc 	.word	0x20003ddc
 8006390:	20003e64 	.word	0x20003e64
 8006394:	20003d44 	.word	0x20003d44
 8006398:	20003e1c 	.word	0x20003e1c
 800639c:	20003e18 	.word	0x20003e18
 80063a0:	20003d3c 	.word	0x20003d3c

080063a4 <xTaskResumeAll>:
{
 80063a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80063a8:	4c3b      	ldr	r4, [pc, #236]	; (8006498 <xTaskResumeAll+0xf4>)
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	b953      	cbnz	r3, 80063c4 <xTaskResumeAll+0x20>
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	b672      	cpsid	i
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	b662      	cpsie	i
 80063c2:	e7fe      	b.n	80063c2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80063c4:	f7ff f816 	bl	80053f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ce:	6824      	ldr	r4, [r4, #0]
 80063d0:	2c00      	cmp	r4, #0
 80063d2:	d153      	bne.n	800647c <xTaskResumeAll+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063d4:	4b31      	ldr	r3, [pc, #196]	; (800649c <xTaskResumeAll+0xf8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d04f      	beq.n	800647c <xTaskResumeAll+0xd8>
 80063dc:	4d30      	ldr	r5, [pc, #192]	; (80064a0 <xTaskResumeAll+0xfc>)
 80063de:	4f31      	ldr	r7, [pc, #196]	; (80064a4 <xTaskResumeAll+0x100>)
					prvAddTaskToReadyList( pxTCB );
 80063e0:	4e31      	ldr	r6, [pc, #196]	; (80064a8 <xTaskResumeAll+0x104>)
 80063e2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80064bc <xTaskResumeAll+0x118>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063e6:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80064c0 <xTaskResumeAll+0x11c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ea:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 80063ec:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063f0:	b323      	cbz	r3, 800643c <xTaskResumeAll+0x98>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063f6:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063fa:	f104 0018 	add.w	r0, r4, #24
 80063fe:	f7fe ff83 	bl	8005308 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006402:	4650      	mov	r0, sl
 8006404:	f7fe ff80 	bl	8005308 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006408:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800640a:	6832      	ldr	r2, [r6, #0]
 800640c:	4651      	mov	r1, sl
 800640e:	fa08 f300 	lsl.w	r3, r8, r0
 8006412:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006416:	4313      	orrs	r3, r2
 8006418:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800641c:	6033      	str	r3, [r6, #0]
 800641e:	f7fe ff49 	bl	80052b4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006422:	f8db 3000 	ldr.w	r3, [fp]
 8006426:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	429a      	cmp	r2, r3
 800642c:	d3dd      	bcc.n	80063ea <xTaskResumeAll+0x46>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800642e:	683b      	ldr	r3, [r7, #0]
						xYieldPending = pdTRUE;
 8006430:	f8c5 8000 	str.w	r8, [r5]
					prvAddTaskToReadyList( pxTCB );
 8006434:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1da      	bne.n	80063f2 <xTaskResumeAll+0x4e>
				if( pxTCB != NULL )
 800643c:	b13c      	cbz	r4, 800644e <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800643e:	4b1b      	ldr	r3, [pc, #108]	; (80064ac <xTaskResumeAll+0x108>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	bb02      	cbnz	r2, 8006488 <xTaskResumeAll+0xe4>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006446:	4b1a      	ldr	r3, [pc, #104]	; (80064b0 <xTaskResumeAll+0x10c>)
 8006448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800644c:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800644e:	4e19      	ldr	r6, [pc, #100]	; (80064b4 <xTaskResumeAll+0x110>)
 8006450:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006452:	b13c      	cbz	r4, 8006464 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 8006454:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006456:	f7ff fef5 	bl	8006244 <xTaskIncrementTick>
 800645a:	b100      	cbz	r0, 800645e <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 800645c:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800645e:	3c01      	subs	r4, #1
 8006460:	d1f9      	bne.n	8006456 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8006462:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b14b      	cbz	r3, 800647c <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 8006468:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <xTaskResumeAll+0x114>)
 800646a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006478:	2401      	movs	r4, #1
 800647a:	e000      	b.n	800647e <xTaskResumeAll+0xda>
BaseType_t xAlreadyYielded = pdFALSE;
 800647c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800647e:	f7fe ffdf 	bl	8005440 <vPortExitCritical>
}
 8006482:	4620      	mov	r0, r4
 8006484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006488:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800648a:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <xTaskResumeAll+0x10c>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800648c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800648e:	68d2      	ldr	r2, [r2, #12]
 8006490:	6852      	ldr	r2, [r2, #4]
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e7db      	b.n	800644e <xTaskResumeAll+0xaa>
 8006496:	bf00      	nop
 8006498:	20003de0 	.word	0x20003de0
 800649c:	20003dd4 	.word	0x20003dd4
 80064a0:	20003e64 	.word	0x20003e64
 80064a4:	20003e20 	.word	0x20003e20
 80064a8:	20003de8 	.word	0x20003de8
 80064ac:	20003d40 	.word	0x20003d40
 80064b0:	20003e18 	.word	0x20003e18
 80064b4:	20003ddc 	.word	0x20003ddc
 80064b8:	e000ed04 	.word	0xe000ed04
 80064bc:	20003d48 	.word	0x20003d48
 80064c0:	20003d3c 	.word	0x20003d3c

080064c4 <vTaskDelay>:
	{
 80064c4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064c6:	b168      	cbz	r0, 80064e4 <vTaskDelay+0x20>
			configASSERT( uxSchedulerSuspended == 0 );
 80064c8:	4b10      	ldr	r3, [pc, #64]	; (800650c <vTaskDelay+0x48>)
 80064ca:	6819      	ldr	r1, [r3, #0]
 80064cc:	b199      	cbz	r1, 80064f6 <vTaskDelay+0x32>
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	b672      	cpsid	i
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	b662      	cpsie	i
 80064e2:	e7fe      	b.n	80064e2 <vTaskDelay+0x1e>
			portYIELD_WITHIN_API();
 80064e4:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <vTaskDelay+0x4c>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	3201      	adds	r2, #1
 80064fa:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064fc:	f7ff fce4 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006500:	f7ff ff50 	bl	80063a4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006504:	2800      	cmp	r0, #0
 8006506:	d0ed      	beq.n	80064e4 <vTaskDelay+0x20>
 8006508:	bd08      	pop	{r3, pc}
 800650a:	bf00      	nop
 800650c:	20003de0 	.word	0x20003de0
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <prvIdleTask>:
{
 8006514:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8006518:	4c1c      	ldr	r4, [pc, #112]	; (800658c <prvIdleTask+0x78>)
				taskYIELD();
 800651a:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 800651e:	4e1c      	ldr	r6, [pc, #112]	; (8006590 <prvIdleTask+0x7c>)
 8006520:	4d1c      	ldr	r5, [pc, #112]	; (8006594 <prvIdleTask+0x80>)
 8006522:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800659c <prvIdleTask+0x88>
 8006526:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80065a0 <prvIdleTask+0x8c>
 800652a:	e006      	b.n	800653a <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 800652c:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800652e:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 8006530:	3301      	adds	r3, #1
 8006532:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 8006534:	f7ff ff36 	bl	80063a4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8006538:	b96f      	cbnz	r7, 8006556 <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1f5      	bne.n	800652c <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006540:	f8d8 3000 	ldr.w	r3, [r8]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d9f8      	bls.n	800653a <prvIdleTask+0x26>
				taskYIELD();
 8006548:	f8c9 a000 	str.w	sl, [r9]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	e7f1      	b.n	800653a <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 8006556:	f7fe ff4d 	bl	80053f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800655a:	68f3      	ldr	r3, [r6, #12]
 800655c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006560:	f10b 0004 	add.w	r0, fp, #4
 8006564:	f7fe fed0 	bl	8005308 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <prvIdleTask+0x84>)
 800656a:	4a0b      	ldr	r2, [pc, #44]	; (8006598 <prvIdleTask+0x84>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3b01      	subs	r3, #1
 8006570:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006572:	682b      	ldr	r3, [r5, #0]
 8006574:	3b01      	subs	r3, #1
 8006576:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 8006578:	f7fe ff62 	bl	8005440 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800657c:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 8006580:	f7fe fe4c 	bl	800521c <vPortFree>
			vPortFree( pxTCB );
 8006584:	4658      	mov	r0, fp
 8006586:	f7fe fe49 	bl	800521c <vPortFree>
 800658a:	e7d6      	b.n	800653a <prvIdleTask+0x26>
 800658c:	20003de0 	.word	0x20003de0
 8006590:	20003e4c 	.word	0x20003e4c
 8006594:	20003dd8 	.word	0x20003dd8
 8006598:	20003dd4 	.word	0x20003dd4
 800659c:	20003d48 	.word	0x20003d48
 80065a0:	e000ed04 	.word	0xe000ed04

080065a4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065a4:	4b19      	ldr	r3, [pc, #100]	; (800660c <vTaskSwitchContext+0x68>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	bb2b      	cbnz	r3, 80065f6 <vTaskSwitchContext+0x52>
		xYieldPending = pdFALSE;
 80065aa:	4919      	ldr	r1, [pc, #100]	; (8006610 <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065ac:	4a19      	ldr	r2, [pc, #100]	; (8006614 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 80065ae:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065b0:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80065b2:	fab3 f383 	clz	r3, r3
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	4a17      	ldr	r2, [pc, #92]	; (8006618 <vTaskSwitchContext+0x74>)
 80065ba:	f1c3 031f 	rsb	r3, r3, #31
 80065be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	58d0      	ldr	r0, [r2, r3]
 80065c6:	18d1      	adds	r1, r2, r3
 80065c8:	b950      	cbnz	r0, 80065e0 <vTaskSwitchContext+0x3c>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	b672      	cpsid	i
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	b662      	cpsie	i
 80065de:	e7fe      	b.n	80065de <vTaskSwitchContext+0x3a>
 80065e0:	3308      	adds	r3, #8
 80065e2:	6848      	ldr	r0, [r1, #4]
 80065e4:	441a      	add	r2, r3
 80065e6:	6843      	ldr	r3, [r0, #4]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	604b      	str	r3, [r1, #4]
 80065ec:	d007      	beq.n	80065fe <vTaskSwitchContext+0x5a>
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <vTaskSwitchContext+0x78>)
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	4770      	bx	lr
		xYieldPending = pdTRUE;
 80065f6:	4b06      	ldr	r3, [pc, #24]	; (8006610 <vTaskSwitchContext+0x6c>)
 80065f8:	2201      	movs	r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	604b      	str	r3, [r1, #4]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	4b05      	ldr	r3, [pc, #20]	; (800661c <vTaskSwitchContext+0x78>)
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20003de0 	.word	0x20003de0
 8006610:	20003e64 	.word	0x20003e64
 8006614:	20003de8 	.word	0x20003de8
 8006618:	20003d48 	.word	0x20003d48
 800661c:	20003d3c 	.word	0x20003d3c

08006620 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006620:	b348      	cbz	r0, 8006676 <vTaskPlaceOnEventList+0x56>
{
 8006622:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006624:	4d21      	ldr	r5, [pc, #132]	; (80066ac <vTaskPlaceOnEventList+0x8c>)
 8006626:	460c      	mov	r4, r1
 8006628:	6829      	ldr	r1, [r5, #0]
 800662a:	3118      	adds	r1, #24
 800662c:	f7fe fe52 	bl	80052d4 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8006630:	4b1f      	ldr	r3, [pc, #124]	; (80066b0 <vTaskPlaceOnEventList+0x90>)
 8006632:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006634:	6828      	ldr	r0, [r5, #0]
 8006636:	3004      	adds	r0, #4
 8006638:	f7fe fe66 	bl	8005308 <uxListRemove>
 800663c:	b940      	cbnz	r0, 8006650 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800663e:	682b      	ldr	r3, [r5, #0]
 8006640:	2201      	movs	r2, #1
 8006642:	491c      	ldr	r1, [pc, #112]	; (80066b4 <vTaskPlaceOnEventList+0x94>)
 8006644:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006646:	680b      	ldr	r3, [r1, #0]
 8006648:	4082      	lsls	r2, r0
 800664a:	ea23 0302 	bic.w	r3, r3, r2
 800664e:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006650:	1c63      	adds	r3, r4, #1
 8006652:	d01b      	beq.n	800668c <vTaskPlaceOnEventList+0x6c>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006654:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006656:	682b      	ldr	r3, [r5, #0]
			if( xTimeToWake < xConstTickCount )
 8006658:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800665a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800665c:	d81d      	bhi.n	800669a <vTaskPlaceOnEventList+0x7a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800665e:	4b16      	ldr	r3, [pc, #88]	; (80066b8 <vTaskPlaceOnEventList+0x98>)
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	6829      	ldr	r1, [r5, #0]
 8006664:	3104      	adds	r1, #4
 8006666:	f7fe fe35 	bl	80052d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800666a:	4b14      	ldr	r3, [pc, #80]	; (80066bc <vTaskPlaceOnEventList+0x9c>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4294      	cmp	r4, r2
 8006670:	d200      	bcs.n	8006674 <vTaskPlaceOnEventList+0x54>
					xNextTaskUnblockTime = xTimeToWake;
 8006672:	601c      	str	r4, [r3, #0]
 8006674:	bd70      	pop	{r4, r5, r6, pc}
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	b672      	cpsid	i
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	b662      	cpsie	i
 800668a:	e7fe      	b.n	800668a <vTaskPlaceOnEventList+0x6a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800668c:	6829      	ldr	r1, [r5, #0]
 800668e:	480c      	ldr	r0, [pc, #48]	; (80066c0 <vTaskPlaceOnEventList+0xa0>)
 8006690:	3104      	adds	r1, #4
}
 8006692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006696:	f7fe be0d 	b.w	80052b4 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <vTaskPlaceOnEventList+0xa4>)
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	6829      	ldr	r1, [r5, #0]
}
 80066a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066a4:	3104      	adds	r1, #4
 80066a6:	f7fe be15 	b.w	80052d4 <vListInsert>
 80066aa:	bf00      	nop
 80066ac:	20003d3c 	.word	0x20003d3c
 80066b0:	20003e60 	.word	0x20003e60
 80066b4:	20003de8 	.word	0x20003de8
 80066b8:	20003d40 	.word	0x20003d40
 80066bc:	20003e18 	.word	0x20003e18
 80066c0:	20003e38 	.word	0x20003e38
 80066c4:	20003d44 	.word	0x20003d44

080066c8 <xTaskRemoveFromEventList>:
{
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80066ca:	68c3      	ldr	r3, [r0, #12]
 80066cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80066ce:	b324      	cbz	r4, 800671a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066d0:	f104 0518 	add.w	r5, r4, #24
 80066d4:	4628      	mov	r0, r5
 80066d6:	f7fe fe17 	bl	8005308 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066da:	4b19      	ldr	r3, [pc, #100]	; (8006740 <xTaskRemoveFromEventList+0x78>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	bb4b      	cbnz	r3, 8006734 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066e0:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066e2:	4d18      	ldr	r5, [pc, #96]	; (8006744 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066e4:	4630      	mov	r0, r6
 80066e6:	f7fe fe0f 	bl	8005308 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066ec:	2301      	movs	r3, #1
 80066ee:	4816      	ldr	r0, [pc, #88]	; (8006748 <xTaskRemoveFromEventList+0x80>)
 80066f0:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80066f4:	4631      	mov	r1, r6
 80066f6:	4093      	lsls	r3, r2
 80066f8:	682a      	ldr	r2, [r5, #0]
 80066fa:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 80066fe:	4313      	orrs	r3, r2
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	f7fe fdd7 	bl	80052b4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006706:	4b11      	ldr	r3, [pc, #68]	; (800674c <xTaskRemoveFromEventList+0x84>)
 8006708:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	429a      	cmp	r2, r3
 8006710:	d90e      	bls.n	8006730 <xTaskRemoveFromEventList+0x68>
		xYieldPending = pdTRUE;
 8006712:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <xTaskRemoveFromEventList+0x88>)
 8006714:	2001      	movs	r0, #1
 8006716:	6018      	str	r0, [r3, #0]
 8006718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	b672      	cpsid	i
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	b662      	cpsie	i
 800672e:	e7fe      	b.n	800672e <xTaskRemoveFromEventList+0x66>
		xReturn = pdFALSE;
 8006730:	2000      	movs	r0, #0
}
 8006732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006734:	4629      	mov	r1, r5
 8006736:	4807      	ldr	r0, [pc, #28]	; (8006754 <xTaskRemoveFromEventList+0x8c>)
 8006738:	f7fe fdbc 	bl	80052b4 <vListInsertEnd>
 800673c:	e7e3      	b.n	8006706 <xTaskRemoveFromEventList+0x3e>
 800673e:	bf00      	nop
 8006740:	20003de0 	.word	0x20003de0
 8006744:	20003de8 	.word	0x20003de8
 8006748:	20003d48 	.word	0x20003d48
 800674c:	20003d3c 	.word	0x20003d3c
 8006750:	20003e64 	.word	0x20003e64
 8006754:	20003e20 	.word	0x20003e20

08006758 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8006758:	b130      	cbz	r0, 8006768 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800675a:	4a09      	ldr	r2, [pc, #36]	; (8006780 <vTaskSetTimeOutState+0x28>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800675c:	4b09      	ldr	r3, [pc, #36]	; (8006784 <vTaskSetTimeOutState+0x2c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800675e:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	e880 000c 	stmia.w	r0, {r2, r3}
 8006766:	4770      	bx	lr
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	b672      	cpsid	i
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	b662      	cpsie	i
 800677c:	e7fe      	b.n	800677c <vTaskSetTimeOutState+0x24>
 800677e:	bf00      	nop
 8006780:	20003e1c 	.word	0x20003e1c
 8006784:	20003e60 	.word	0x20003e60

08006788 <xTaskCheckForTimeOut>:
{
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800678a:	2800      	cmp	r0, #0
 800678c:	d030      	beq.n	80067f0 <xTaskCheckForTimeOut+0x68>
	configASSERT( pxTicksToWait );
 800678e:	b321      	cbz	r1, 80067da <xTaskCheckForTimeOut+0x52>
 8006790:	460d      	mov	r5, r1
 8006792:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006794:	f7fe fe2e 	bl	80053f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006798:	481d      	ldr	r0, [pc, #116]	; (8006810 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 800679a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800679c:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	d031      	beq.n	8006806 <xTaskCheckForTimeOut+0x7e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067a2:	4e1c      	ldr	r6, [pc, #112]	; (8006814 <xTaskCheckForTimeOut+0x8c>)
 80067a4:	6827      	ldr	r7, [r4, #0]
 80067a6:	6832      	ldr	r2, [r6, #0]
 80067a8:	4297      	cmp	r7, r2
 80067aa:	6862      	ldr	r2, [r4, #4]
 80067ac:	d006      	beq.n	80067bc <xTaskCheckForTimeOut+0x34>
 80067ae:	4291      	cmp	r1, r2
 80067b0:	d304      	bcc.n	80067bc <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 80067b2:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 80067b4:	f7fe fe44 	bl	8005440 <vPortExitCritical>
}
 80067b8:	4630      	mov	r0, r6
 80067ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067bc:	1a8f      	subs	r7, r1, r2
 80067be:	42bb      	cmp	r3, r7
 80067c0:	d9f7      	bls.n	80067b2 <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80067c2:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067c4:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067c6:	6801      	ldr	r1, [r0, #0]
			xReturn = pdFALSE;
 80067c8:	2600      	movs	r6, #0
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80067ca:	4413      	add	r3, r2
 80067cc:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067ce:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067d0:	6061      	str	r1, [r4, #4]
	taskEXIT_CRITICAL();
 80067d2:	f7fe fe35 	bl	8005440 <vPortExitCritical>
}
 80067d6:	4630      	mov	r0, r6
 80067d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	b672      	cpsid	i
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	b662      	cpsie	i
 80067ee:	e7fe      	b.n	80067ee <xTaskCheckForTimeOut+0x66>
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	b672      	cpsid	i
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	b662      	cpsie	i
 8006804:	e7fe      	b.n	8006804 <xTaskCheckForTimeOut+0x7c>
				xReturn = pdFALSE;
 8006806:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 8006808:	f7fe fe1a 	bl	8005440 <vPortExitCritical>
}
 800680c:	4630      	mov	r0, r6
 800680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006810:	20003e60 	.word	0x20003e60
 8006814:	20003e1c 	.word	0x20003e1c

08006818 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006818:	4b01      	ldr	r3, [pc, #4]	; (8006820 <vTaskMissedYield+0x8>)
 800681a:	2201      	movs	r2, #1
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	4770      	bx	lr
 8006820:	20003e64 	.word	0x20003e64

08006824 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <xTaskGetSchedulerState+0x18>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	b133      	cbz	r3, 8006838 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <xTaskGetSchedulerState+0x1c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8006830:	bf0c      	ite	eq
 8006832:	2002      	moveq	r0, #2
 8006834:	2000      	movne	r0, #0
 8006836:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006838:	2001      	movs	r0, #1
	}
 800683a:	4770      	bx	lr
 800683c:	20003e34 	.word	0x20003e34
 8006840:	20003de0 	.word	0x20003de0

08006844 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8006844:	2800      	cmp	r0, #0
 8006846:	d042      	beq.n	80068ce <vTaskPriorityInherit+0x8a>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006848:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	{
 800684a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800684e:	4c21      	ldr	r4, [pc, #132]	; (80068d4 <vTaskPriorityInherit+0x90>)
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006854:	4293      	cmp	r3, r2
 8006856:	d212      	bcs.n	800687e <vTaskPriorityInherit+0x3a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006858:	6982      	ldr	r2, [r0, #24]
 800685a:	2a00      	cmp	r2, #0
 800685c:	db04      	blt.n	8006868 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685e:	6822      	ldr	r2, [r4, #0]
 8006860:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006862:	f1c2 0207 	rsb	r2, r2, #7
 8006866:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006868:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800686c:	4d1a      	ldr	r5, [pc, #104]	; (80068d8 <vTaskPriorityInherit+0x94>)
 800686e:	6942      	ldr	r2, [r0, #20]
 8006870:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006874:	429a      	cmp	r2, r3
 8006876:	d004      	beq.n	8006882 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800687e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006882:	f100 0804 	add.w	r8, r0, #4
 8006886:	4607      	mov	r7, r0
 8006888:	4640      	mov	r0, r8
 800688a:	f7fe fd3d 	bl	8005308 <uxListRemove>
 800688e:	b9f8      	cbnz	r0, 80068d0 <vTaskPriorityInherit+0x8c>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	4e12      	ldr	r6, [pc, #72]	; (80068dc <vTaskPriorityInherit+0x98>)
 8006894:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006898:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800689c:	b932      	cbnz	r2, 80068ac <vTaskPriorityInherit+0x68>
 800689e:	2101      	movs	r1, #1
 80068a0:	6832      	ldr	r2, [r6, #0]
 80068a2:	fa01 f303 	lsl.w	r3, r1, r3
 80068a6:	ea22 0303 	bic.w	r3, r2, r3
 80068aa:	6033      	str	r3, [r6, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068ac:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 80068ae:	2301      	movs	r3, #1
 80068b0:	6834      	ldr	r4, [r6, #0]
 80068b2:	4641      	mov	r1, r8
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80068b6:	4093      	lsls	r3, r2
 80068b8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068bc:	62fa      	str	r2, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80068be:	4323      	orrs	r3, r4
 80068c0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80068c4:	6033      	str	r3, [r6, #0]
	}
 80068c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80068ca:	f7fe bcf3 	b.w	80052b4 <vListInsertEnd>
 80068ce:	4770      	bx	lr
 80068d0:	4e02      	ldr	r6, [pc, #8]	; (80068dc <vTaskPriorityInherit+0x98>)
 80068d2:	e7eb      	b.n	80068ac <vTaskPriorityInherit+0x68>
 80068d4:	20003d3c 	.word	0x20003d3c
 80068d8:	20003d48 	.word	0x20003d48
 80068dc:	20003de8 	.word	0x20003de8

080068e0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d041      	beq.n	8006968 <xTaskPriorityDisinherit+0x88>
	{
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80068e6:	4b2a      	ldr	r3, [pc, #168]	; (8006990 <xTaskPriorityDisinherit+0xb0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4298      	cmp	r0, r3
 80068ec:	d00a      	beq.n	8006904 <xTaskPriorityDisinherit+0x24>
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	b672      	cpsid	i
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	b662      	cpsie	i
 8006902:	e7fe      	b.n	8006902 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006904:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006906:	b953      	cbnz	r3, 800691e <xTaskPriorityDisinherit+0x3e>
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	b672      	cpsid	i
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	b662      	cpsie	i
 800691c:	e7fe      	b.n	800691c <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800691e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8006920:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006922:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8006924:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006926:	4291      	cmp	r1, r2
 8006928:	d030      	beq.n	800698c <xTaskPriorityDisinherit+0xac>
 800692a:	bb7b      	cbnz	r3, 800698c <xTaskPriorityDisinherit+0xac>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800692c:	1d07      	adds	r7, r0, #4
 800692e:	4604      	mov	r4, r0
 8006930:	4638      	mov	r0, r7
 8006932:	f7fe fce9 	bl	8005308 <uxListRemove>
 8006936:	b1c8      	cbz	r0, 800696c <xTaskPriorityDisinherit+0x8c>
 8006938:	4816      	ldr	r0, [pc, #88]	; (8006994 <xTaskPriorityDisinherit+0xb4>)
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800693c:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 800693e:	2501      	movs	r5, #1
 8006940:	f8d2 e000 	ldr.w	lr, [r2]
 8006944:	4639      	mov	r1, r7
 8006946:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800694a:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800694e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006950:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006954:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006958:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800695a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800695e:	6016      	str	r6, [r2, #0]
 8006960:	f7fe fca8 	bl	80052b4 <vListInsertEnd>
					xReturn = pdTRUE;
 8006964:	4628      	mov	r0, r5
	}
 8006966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 8006968:	2000      	movs	r0, #0
	}
 800696a:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800696c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800696e:	4809      	ldr	r0, [pc, #36]	; (8006994 <xTaskPriorityDisinherit+0xb4>)
 8006970:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8006974:	4a08      	ldr	r2, [pc, #32]	; (8006998 <xTaskPriorityDisinherit+0xb8>)
 8006976:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1de      	bne.n	800693c <xTaskPriorityDisinherit+0x5c>
 800697e:	2501      	movs	r5, #1
 8006980:	6813      	ldr	r3, [r2, #0]
 8006982:	40b5      	lsls	r5, r6
 8006984:	ea23 0305 	bic.w	r3, r3, r5
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	e7d7      	b.n	800693c <xTaskPriorityDisinherit+0x5c>
	BaseType_t xReturn = pdFALSE;
 800698c:	2000      	movs	r0, #0
 800698e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006990:	20003d3c 	.word	0x20003d3c
 8006994:	20003d48 	.word	0x20003d48
 8006998:	20003de8 	.word	0x20003de8

0800699c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800699c:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <pvTaskIncrementMutexHeldCount+0x14>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	b11a      	cbz	r2, 80069aa <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80069a2:	6819      	ldr	r1, [r3, #0]
 80069a4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80069a6:	3201      	adds	r2, #1
 80069a8:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80069aa:	6818      	ldr	r0, [r3, #0]
	}
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	20003d3c 	.word	0x20003d3c

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4e0d      	ldr	r6, [pc, #52]	; (80069ec <__libc_init_array+0x38>)
 80069b8:	4c0d      	ldr	r4, [pc, #52]	; (80069f0 <__libc_init_array+0x3c>)
 80069ba:	1ba4      	subs	r4, r4, r6
 80069bc:	10a4      	asrs	r4, r4, #2
 80069be:	2500      	movs	r5, #0
 80069c0:	42a5      	cmp	r5, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	4e0b      	ldr	r6, [pc, #44]	; (80069f4 <__libc_init_array+0x40>)
 80069c6:	4c0c      	ldr	r4, [pc, #48]	; (80069f8 <__libc_init_array+0x44>)
 80069c8:	f000 fe2a 	bl	8007620 <_init>
 80069cc:	1ba4      	subs	r4, r4, r6
 80069ce:	10a4      	asrs	r4, r4, #2
 80069d0:	2500      	movs	r5, #0
 80069d2:	42a5      	cmp	r5, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069dc:	4798      	blx	r3
 80069de:	3501      	adds	r5, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069e6:	4798      	blx	r3
 80069e8:	3501      	adds	r5, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	08007998 	.word	0x08007998
 80069f0:	08007998 	.word	0x08007998
 80069f4:	08007998 	.word	0x08007998
 80069f8:	0800799c 	.word	0x0800799c

080069fc <memcpy>:
 80069fc:	b510      	push	{r4, lr}
 80069fe:	1e43      	subs	r3, r0, #1
 8006a00:	440a      	add	r2, r1
 8006a02:	4291      	cmp	r1, r2
 8006a04:	d100      	bne.n	8006a08 <memcpy+0xc>
 8006a06:	bd10      	pop	{r4, pc}
 8006a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a10:	e7f7      	b.n	8006a02 <memcpy+0x6>

08006a12 <memset>:
 8006a12:	4402      	add	r2, r0
 8006a14:	4603      	mov	r3, r0
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d100      	bne.n	8006a1c <memset+0xa>
 8006a1a:	4770      	bx	lr
 8006a1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a20:	e7f9      	b.n	8006a16 <memset+0x4>
 8006a22:	0000      	movs	r0, r0
 8006a24:	0000      	movs	r0, r0
	...

08006a28 <cos>:
 8006a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a2a:	eeb0 7b40 	vmov.f64	d7, d0
 8006a2e:	ee17 3a90 	vmov	r3, s15
 8006a32:	4a19      	ldr	r2, [pc, #100]	; (8006a98 <cos+0x70>)
 8006a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	dc04      	bgt.n	8006a46 <cos+0x1e>
 8006a3c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8006a90 <cos+0x68>
 8006a40:	f000 f9aa 	bl	8006d98 <__kernel_cos>
 8006a44:	e004      	b.n	8006a50 <cos+0x28>
 8006a46:	4a15      	ldr	r2, [pc, #84]	; (8006a9c <cos+0x74>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	dd04      	ble.n	8006a56 <cos+0x2e>
 8006a4c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006a50:	b005      	add	sp, #20
 8006a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a56:	4668      	mov	r0, sp
 8006a58:	f000 f85e 	bl	8006b18 <__ieee754_rem_pio2>
 8006a5c:	f000 0003 	and.w	r0, r0, #3
 8006a60:	2801      	cmp	r0, #1
 8006a62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a66:	ed9d 0b00 	vldr	d0, [sp]
 8006a6a:	d007      	beq.n	8006a7c <cos+0x54>
 8006a6c:	2802      	cmp	r0, #2
 8006a6e:	d00a      	beq.n	8006a86 <cos+0x5e>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d0e5      	beq.n	8006a40 <cos+0x18>
 8006a74:	2001      	movs	r0, #1
 8006a76:	f000 fc6f 	bl	8007358 <__kernel_sin>
 8006a7a:	e7e9      	b.n	8006a50 <cos+0x28>
 8006a7c:	f000 fc6c 	bl	8007358 <__kernel_sin>
 8006a80:	eeb1 0b40 	vneg.f64	d0, d0
 8006a84:	e7e4      	b.n	8006a50 <cos+0x28>
 8006a86:	f000 f987 	bl	8006d98 <__kernel_cos>
 8006a8a:	e7f9      	b.n	8006a80 <cos+0x58>
 8006a8c:	f3af 8000 	nop.w
	...
 8006a98:	3fe921fb 	.word	0x3fe921fb
 8006a9c:	7fefffff 	.word	0x7fefffff

08006aa0 <sin>:
 8006aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aa2:	eeb0 7b40 	vmov.f64	d7, d0
 8006aa6:	ee17 3a90 	vmov	r3, s15
 8006aaa:	4a19      	ldr	r2, [pc, #100]	; (8006b10 <sin+0x70>)
 8006aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	dc05      	bgt.n	8006ac0 <sin+0x20>
 8006ab4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8006b08 <sin+0x68>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	f000 fc4d 	bl	8007358 <__kernel_sin>
 8006abe:	e004      	b.n	8006aca <sin+0x2a>
 8006ac0:	4a14      	ldr	r2, [pc, #80]	; (8006b14 <sin+0x74>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	dd04      	ble.n	8006ad0 <sin+0x30>
 8006ac6:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006aca:	b005      	add	sp, #20
 8006acc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ad0:	4668      	mov	r0, sp
 8006ad2:	f000 f821 	bl	8006b18 <__ieee754_rem_pio2>
 8006ad6:	f000 0003 	and.w	r0, r0, #3
 8006ada:	2801      	cmp	r0, #1
 8006adc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ae0:	ed9d 0b00 	vldr	d0, [sp]
 8006ae4:	d004      	beq.n	8006af0 <sin+0x50>
 8006ae6:	2802      	cmp	r0, #2
 8006ae8:	d005      	beq.n	8006af6 <sin+0x56>
 8006aea:	b950      	cbnz	r0, 8006b02 <sin+0x62>
 8006aec:	2001      	movs	r0, #1
 8006aee:	e7e4      	b.n	8006aba <sin+0x1a>
 8006af0:	f000 f952 	bl	8006d98 <__kernel_cos>
 8006af4:	e7e9      	b.n	8006aca <sin+0x2a>
 8006af6:	2001      	movs	r0, #1
 8006af8:	f000 fc2e 	bl	8007358 <__kernel_sin>
 8006afc:	eeb1 0b40 	vneg.f64	d0, d0
 8006b00:	e7e3      	b.n	8006aca <sin+0x2a>
 8006b02:	f000 f949 	bl	8006d98 <__kernel_cos>
 8006b06:	e7f9      	b.n	8006afc <sin+0x5c>
	...
 8006b10:	3fe921fb 	.word	0x3fe921fb
 8006b14:	7fefffff 	.word	0x7fefffff

08006b18 <__ieee754_rem_pio2>:
 8006b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1a:	eeb0 7b40 	vmov.f64	d7, d0
 8006b1e:	ee17 5a90 	vmov	r5, s15
 8006b22:	4b97      	ldr	r3, [pc, #604]	; (8006d80 <__ieee754_rem_pio2+0x268>)
 8006b24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006b28:	429e      	cmp	r6, r3
 8006b2a:	b089      	sub	sp, #36	; 0x24
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	dc07      	bgt.n	8006b40 <__ieee754_rem_pio2+0x28>
 8006b30:	2200      	movs	r2, #0
 8006b32:	2300      	movs	r3, #0
 8006b34:	ed84 0b00 	vstr	d0, [r4]
 8006b38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	e01b      	b.n	8006b78 <__ieee754_rem_pio2+0x60>
 8006b40:	4b90      	ldr	r3, [pc, #576]	; (8006d84 <__ieee754_rem_pio2+0x26c>)
 8006b42:	429e      	cmp	r6, r3
 8006b44:	dc3b      	bgt.n	8006bbe <__ieee754_rem_pio2+0xa6>
 8006b46:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8006b4a:	2d00      	cmp	r5, #0
 8006b4c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8006d40 <__ieee754_rem_pio2+0x228>
 8006b50:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8006b54:	dd19      	ble.n	8006b8a <__ieee754_rem_pio2+0x72>
 8006b56:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006b5a:	429e      	cmp	r6, r3
 8006b5c:	d00e      	beq.n	8006b7c <__ieee754_rem_pio2+0x64>
 8006b5e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8006d48 <__ieee754_rem_pio2+0x230>
 8006b62:	ee37 5b46 	vsub.f64	d5, d7, d6
 8006b66:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006b6a:	ed84 5b00 	vstr	d5, [r4]
 8006b6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006b72:	ed84 7b02 	vstr	d7, [r4, #8]
 8006b76:	2001      	movs	r0, #1
 8006b78:	b009      	add	sp, #36	; 0x24
 8006b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8006d50 <__ieee754_rem_pio2+0x238>
 8006b80:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006b84:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8006d58 <__ieee754_rem_pio2+0x240>
 8006b88:	e7eb      	b.n	8006b62 <__ieee754_rem_pio2+0x4a>
 8006b8a:	429e      	cmp	r6, r3
 8006b8c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006b90:	d00e      	beq.n	8006bb0 <__ieee754_rem_pio2+0x98>
 8006b92:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8006d48 <__ieee754_rem_pio2+0x230>
 8006b96:	ee37 5b06 	vadd.f64	d5, d7, d6
 8006b9a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006b9e:	ed84 5b00 	vstr	d5, [r4]
 8006ba2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006baa:	ed84 7b02 	vstr	d7, [r4, #8]
 8006bae:	e7e3      	b.n	8006b78 <__ieee754_rem_pio2+0x60>
 8006bb0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8006d50 <__ieee754_rem_pio2+0x238>
 8006bb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bb8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8006d58 <__ieee754_rem_pio2+0x240>
 8006bbc:	e7eb      	b.n	8006b96 <__ieee754_rem_pio2+0x7e>
 8006bbe:	4b72      	ldr	r3, [pc, #456]	; (8006d88 <__ieee754_rem_pio2+0x270>)
 8006bc0:	429e      	cmp	r6, r3
 8006bc2:	dc6e      	bgt.n	8006ca2 <__ieee754_rem_pio2+0x18a>
 8006bc4:	f000 fc20 	bl	8007408 <fabs>
 8006bc8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006bcc:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8006d60 <__ieee754_rem_pio2+0x248>
 8006bd0:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006bd4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006bd8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006bdc:	ee17 0a90 	vmov	r0, s15
 8006be0:	eeb1 5b44 	vneg.f64	d5, d4
 8006be4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8006d40 <__ieee754_rem_pio2+0x228>
 8006be8:	eea5 0b07 	vfma.f64	d0, d5, d7
 8006bec:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8006d48 <__ieee754_rem_pio2+0x230>
 8006bf0:	281f      	cmp	r0, #31
 8006bf2:	ee24 7b07 	vmul.f64	d7, d4, d7
 8006bf6:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006bfa:	dc1b      	bgt.n	8006c34 <__ieee754_rem_pio2+0x11c>
 8006bfc:	1e42      	subs	r2, r0, #1
 8006bfe:	4b63      	ldr	r3, [pc, #396]	; (8006d8c <__ieee754_rem_pio2+0x274>)
 8006c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c04:	429e      	cmp	r6, r3
 8006c06:	d015      	beq.n	8006c34 <__ieee754_rem_pio2+0x11c>
 8006c08:	ed84 6b00 	vstr	d6, [r4]
 8006c0c:	ed94 6b00 	vldr	d6, [r4]
 8006c10:	2d00      	cmp	r5, #0
 8006c12:	ee30 0b46 	vsub.f64	d0, d0, d6
 8006c16:	ee30 7b47 	vsub.f64	d7, d0, d7
 8006c1a:	ed84 7b02 	vstr	d7, [r4, #8]
 8006c1e:	daab      	bge.n	8006b78 <__ieee754_rem_pio2+0x60>
 8006c20:	eeb1 6b46 	vneg.f64	d6, d6
 8006c24:	ed84 6b00 	vstr	d6, [r4]
 8006c28:	eeb1 7b47 	vneg.f64	d7, d7
 8006c2c:	4240      	negs	r0, r0
 8006c2e:	ed84 7b02 	vstr	d7, [r4, #8]
 8006c32:	e7a1      	b.n	8006b78 <__ieee754_rem_pio2+0x60>
 8006c34:	ee16 3a90 	vmov	r3, s13
 8006c38:	1536      	asrs	r6, r6, #20
 8006c3a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006c3e:	1af3      	subs	r3, r6, r3
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	ed84 6b00 	vstr	d6, [r4]
 8006c46:	dde1      	ble.n	8006c0c <__ieee754_rem_pio2+0xf4>
 8006c48:	eeb0 6b40 	vmov.f64	d6, d0
 8006c4c:	ed9f 3b40 	vldr	d3, [pc, #256]	; 8006d50 <__ieee754_rem_pio2+0x238>
 8006c50:	eea5 6b03 	vfma.f64	d6, d5, d3
 8006c54:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006c58:	eea5 7b03 	vfma.f64	d7, d5, d3
 8006c5c:	ed9f 3b3e 	vldr	d3, [pc, #248]	; 8006d58 <__ieee754_rem_pio2+0x240>
 8006c60:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8006c64:	ee36 3b47 	vsub.f64	d3, d6, d7
 8006c68:	ee13 3a90 	vmov	r3, s7
 8006c6c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006c70:	1af6      	subs	r6, r6, r3
 8006c72:	2e31      	cmp	r6, #49	; 0x31
 8006c74:	ed84 3b00 	vstr	d3, [r4]
 8006c78:	dd10      	ble.n	8006c9c <__ieee754_rem_pio2+0x184>
 8006c7a:	eeb0 0b46 	vmov.f64	d0, d6
 8006c7e:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8006d68 <__ieee754_rem_pio2+0x250>
 8006c82:	eea5 0b03 	vfma.f64	d0, d5, d3
 8006c86:	ee36 7b40 	vsub.f64	d7, d6, d0
 8006c8a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8006d70 <__ieee754_rem_pio2+0x258>
 8006c8e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8006c92:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8006c96:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006c9a:	e7b5      	b.n	8006c08 <__ieee754_rem_pio2+0xf0>
 8006c9c:	eeb0 0b46 	vmov.f64	d0, d6
 8006ca0:	e7b4      	b.n	8006c0c <__ieee754_rem_pio2+0xf4>
 8006ca2:	4b3b      	ldr	r3, [pc, #236]	; (8006d90 <__ieee754_rem_pio2+0x278>)
 8006ca4:	429e      	cmp	r6, r3
 8006ca6:	dd06      	ble.n	8006cb6 <__ieee754_rem_pio2+0x19e>
 8006ca8:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006cac:	ed80 7b02 	vstr	d7, [r0, #8]
 8006cb0:	ed80 7b00 	vstr	d7, [r0]
 8006cb4:	e742      	b.n	8006b3c <__ieee754_rem_pio2+0x24>
 8006cb6:	ee10 3a10 	vmov	r3, s0
 8006cba:	1532      	asrs	r2, r6, #20
 8006cbc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006cc6:	ec41 0b17 	vmov	d7, r0, r1
 8006cca:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006cce:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8006d78 <__ieee754_rem_pio2+0x260>
 8006cd2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006cd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006cda:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006cde:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006ce2:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006ce6:	a908      	add	r1, sp, #32
 8006ce8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006cec:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006cf0:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006cf4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006cf8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	ed31 7b02 	vldmdb	r1!, {d7}
 8006d02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d0a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8006d0e:	d013      	beq.n	8006d38 <__ieee754_rem_pio2+0x220>
 8006d10:	4920      	ldr	r1, [pc, #128]	; (8006d94 <__ieee754_rem_pio2+0x27c>)
 8006d12:	9101      	str	r1, [sp, #4]
 8006d14:	2102      	movs	r1, #2
 8006d16:	9100      	str	r1, [sp, #0]
 8006d18:	a802      	add	r0, sp, #8
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	f000 f8a8 	bl	8006e70 <__kernel_rem_pio2>
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	f6bf af29 	bge.w	8006b78 <__ieee754_rem_pio2+0x60>
 8006d26:	ed94 7b00 	vldr	d7, [r4]
 8006d2a:	eeb1 7b47 	vneg.f64	d7, d7
 8006d2e:	ed84 7b00 	vstr	d7, [r4]
 8006d32:	ed94 7b02 	vldr	d7, [r4, #8]
 8006d36:	e777      	b.n	8006c28 <__ieee754_rem_pio2+0x110>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	e7e0      	b.n	8006cfe <__ieee754_rem_pio2+0x1e6>
 8006d3c:	f3af 8000 	nop.w
 8006d40:	54400000 	.word	0x54400000
 8006d44:	3ff921fb 	.word	0x3ff921fb
 8006d48:	1a626331 	.word	0x1a626331
 8006d4c:	3dd0b461 	.word	0x3dd0b461
 8006d50:	1a600000 	.word	0x1a600000
 8006d54:	3dd0b461 	.word	0x3dd0b461
 8006d58:	2e037073 	.word	0x2e037073
 8006d5c:	3ba3198a 	.word	0x3ba3198a
 8006d60:	6dc9c883 	.word	0x6dc9c883
 8006d64:	3fe45f30 	.word	0x3fe45f30
 8006d68:	2e000000 	.word	0x2e000000
 8006d6c:	3ba3198a 	.word	0x3ba3198a
 8006d70:	252049c1 	.word	0x252049c1
 8006d74:	397b839a 	.word	0x397b839a
 8006d78:	00000000 	.word	0x00000000
 8006d7c:	41700000 	.word	0x41700000
 8006d80:	3fe921fb 	.word	0x3fe921fb
 8006d84:	4002d97b 	.word	0x4002d97b
 8006d88:	413921fb 	.word	0x413921fb
 8006d8c:	080077b8 	.word	0x080077b8
 8006d90:	7fefffff 	.word	0x7fefffff
 8006d94:	08007838 	.word	0x08007838

08006d98 <__kernel_cos>:
 8006d98:	ee10 1a90 	vmov	r1, s1
 8006d9c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8006da0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006da4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8006da8:	da05      	bge.n	8006db6 <__kernel_cos+0x1e>
 8006daa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006dae:	ee17 3a90 	vmov	r3, s15
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d03d      	beq.n	8006e32 <__kernel_cos+0x9a>
 8006db6:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006dba:	ee20 1b01 	vmul.f64	d1, d0, d1
 8006dbe:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8006e38 <__kernel_cos+0xa0>
 8006dc2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006dc6:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8006e40 <__kernel_cos+0xa8>
 8006dca:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006dce:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8006e48 <__kernel_cos+0xb0>
 8006dd2:	eea6 7b04 	vfma.f64	d7, d6, d4
 8006dd6:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8006e50 <__kernel_cos+0xb8>
 8006dda:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006dde:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8006e58 <__kernel_cos+0xc0>
 8006de2:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <__kernel_cos+0xd0>)
 8006de4:	eea6 7b04 	vfma.f64	d7, d6, d4
 8006de8:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8006e60 <__kernel_cos+0xc8>
 8006dec:	4299      	cmp	r1, r3
 8006dee:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006df2:	ee24 4b06 	vmul.f64	d4, d4, d6
 8006df6:	dc06      	bgt.n	8006e06 <__kernel_cos+0x6e>
 8006df8:	ee96 1b04 	vfnms.f64	d1, d6, d4
 8006dfc:	ee96 1b03 	vfnms.f64	d1, d6, d3
 8006e00:	ee35 0b41 	vsub.f64	d0, d5, d1
 8006e04:	4770      	bx	lr
 8006e06:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <__kernel_cos+0xd4>)
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	dc0f      	bgt.n	8006e2c <__kernel_cos+0x94>
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8006e12:	ec43 2b17 	vmov	d7, r2, r3
 8006e16:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006e1a:	ee96 1b04 	vfnms.f64	d1, d6, d4
 8006e1e:	ee96 7b03 	vfnms.f64	d7, d6, d3
 8006e22:	ee37 0b41 	vsub.f64	d0, d7, d1
 8006e26:	ee35 0b40 	vsub.f64	d0, d5, d0
 8006e2a:	4770      	bx	lr
 8006e2c:	eeb5 7b02 	vmov.f64	d7, #82	; 0x3e900000  0.2812500
 8006e30:	e7f1      	b.n	8006e16 <__kernel_cos+0x7e>
 8006e32:	eeb0 0b45 	vmov.f64	d0, d5
 8006e36:	4770      	bx	lr
 8006e38:	be8838d4 	.word	0xbe8838d4
 8006e3c:	bda8fae9 	.word	0xbda8fae9
 8006e40:	bdb4b1c4 	.word	0xbdb4b1c4
 8006e44:	3e21ee9e 	.word	0x3e21ee9e
 8006e48:	809c52ad 	.word	0x809c52ad
 8006e4c:	be927e4f 	.word	0xbe927e4f
 8006e50:	19cb1590 	.word	0x19cb1590
 8006e54:	3efa01a0 	.word	0x3efa01a0
 8006e58:	16c15177 	.word	0x16c15177
 8006e5c:	bf56c16c 	.word	0xbf56c16c
 8006e60:	5555554c 	.word	0x5555554c
 8006e64:	3fa55555 	.word	0x3fa55555
 8006e68:	3fd33332 	.word	0x3fd33332
 8006e6c:	3fe90000 	.word	0x3fe90000

08006e70 <__kernel_rem_pio2>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	ed2d 8b06 	vpush	{d8-d10}
 8006e78:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006e7c:	468b      	mov	fp, r1
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006e82:	4bcf      	ldr	r3, [pc, #828]	; (80071c0 <__kernel_rem_pio2+0x350>)
 8006e84:	9002      	str	r0, [sp, #8]
 8006e86:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8006e8a:	9b01      	ldr	r3, [sp, #4]
 8006e8c:	9ca3      	ldr	r4, [sp, #652]	; 0x28c
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	1ed0      	subs	r0, r2, #3
 8006e92:	2518      	movs	r5, #24
 8006e94:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 80071a8 <__kernel_rem_pio2+0x338>
 8006e98:	fb90 f0f5 	sdiv	r0, r0, r5
 8006e9c:	f06f 0517 	mvn.w	r5, #23
 8006ea0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006ea4:	fb00 5505 	mla	r5, r0, r5, r5
 8006ea8:	1ac7      	subs	r7, r0, r3
 8006eaa:	4415      	add	r5, r2
 8006eac:	eb0a 0e03 	add.w	lr, sl, r3
 8006eb0:	ae1a      	add	r6, sp, #104	; 0x68
 8006eb2:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4572      	cmp	r2, lr
 8006eba:	dd0f      	ble.n	8006edc <__kernel_rem_pio2+0x6c>
 8006ebc:	f50d 7ed4 	add.w	lr, sp, #424	; 0x1a8
 8006ec0:	2600      	movs	r6, #0
 8006ec2:	4556      	cmp	r6, sl
 8006ec4:	dc27      	bgt.n	8006f16 <__kernel_rem_pio2+0xa6>
 8006ec6:	9a01      	ldr	r2, [sp, #4]
 8006ec8:	9f02      	ldr	r7, [sp, #8]
 8006eca:	4432      	add	r2, r6
 8006ecc:	a91a      	add	r1, sp, #104	; 0x68
 8006ece:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006ed2:	ed9f 7bb5 	vldr	d7, [pc, #724]	; 80071a8 <__kernel_rem_pio2+0x338>
 8006ed6:	f04f 0c00 	mov.w	ip, #0
 8006eda:	e016      	b.n	8006f0a <__kernel_rem_pio2+0x9a>
 8006edc:	42d7      	cmn	r7, r2
 8006ede:	d409      	bmi.n	8006ef4 <__kernel_rem_pio2+0x84>
 8006ee0:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8006ee4:	ee07 1a90 	vmov	s15, r1
 8006ee8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006eec:	eca6 7b02 	vstmia	r6!, {d7}
 8006ef0:	3201      	adds	r2, #1
 8006ef2:	e7e1      	b.n	8006eb8 <__kernel_rem_pio2+0x48>
 8006ef4:	eeb0 7b46 	vmov.f64	d7, d6
 8006ef8:	e7f8      	b.n	8006eec <__kernel_rem_pio2+0x7c>
 8006efa:	ecb7 5b02 	vldmia	r7!, {d5}
 8006efe:	ed32 6b02 	vldmdb	r2!, {d6}
 8006f02:	f10c 0c01 	add.w	ip, ip, #1
 8006f06:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006f0a:	459c      	cmp	ip, r3
 8006f0c:	ddf5      	ble.n	8006efa <__kernel_rem_pio2+0x8a>
 8006f0e:	ecae 7b02 	vstmia	lr!, {d7}
 8006f12:	3601      	adds	r6, #1
 8006f14:	e7d5      	b.n	8006ec2 <__kernel_rem_pio2+0x52>
 8006f16:	aa06      	add	r2, sp, #24
 8006f18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f1c:	ed9f 9ba4 	vldr	d9, [pc, #656]	; 80071b0 <__kernel_rem_pio2+0x340>
 8006f20:	ed9f aba5 	vldr	d10, [pc, #660]	; 80071b8 <__kernel_rem_pio2+0x348>
 8006f24:	9204      	str	r2, [sp, #16]
 8006f26:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8006f2a:	9203      	str	r2, [sp, #12]
 8006f2c:	4657      	mov	r7, sl
 8006f2e:	aa92      	add	r2, sp, #584	; 0x248
 8006f30:	f107 5800 	add.w	r8, r7, #536870912	; 0x20000000
 8006f34:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8006f38:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006f3c:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8006f40:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8006f44:	aa92      	add	r2, sp, #584	; 0x248
 8006f46:	eb02 0008 	add.w	r0, r2, r8
 8006f4a:	3898      	subs	r0, #152	; 0x98
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	1abc      	subs	r4, r7, r2
 8006f50:	2c00      	cmp	r4, #0
 8006f52:	dc4c      	bgt.n	8006fee <__kernel_rem_pio2+0x17e>
 8006f54:	4628      	mov	r0, r5
 8006f56:	9305      	str	r3, [sp, #20]
 8006f58:	f000 fad6 	bl	8007508 <scalbn>
 8006f5c:	eeb0 8b40 	vmov.f64	d8, d0
 8006f60:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8006f64:	ee28 0b00 	vmul.f64	d0, d8, d0
 8006f68:	f000 fa56 	bl	8007418 <floor>
 8006f6c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8006f70:	eea0 8b47 	vfms.f64	d8, d0, d7
 8006f74:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8006f78:	2d00      	cmp	r5, #0
 8006f7a:	ee17 9a90 	vmov	r9, s15
 8006f7e:	9b05      	ldr	r3, [sp, #20]
 8006f80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f84:	ee38 8b47 	vsub.f64	d8, d8, d7
 8006f88:	dd46      	ble.n	8007018 <__kernel_rem_pio2+0x1a8>
 8006f8a:	1e78      	subs	r0, r7, #1
 8006f8c:	aa06      	add	r2, sp, #24
 8006f8e:	f1c5 0418 	rsb	r4, r5, #24
 8006f92:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8006f96:	fa46 f204 	asr.w	r2, r6, r4
 8006f9a:	4491      	add	r9, r2
 8006f9c:	40a2      	lsls	r2, r4
 8006f9e:	1ab6      	subs	r6, r6, r2
 8006fa0:	aa06      	add	r2, sp, #24
 8006fa2:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8006fa6:	f1c5 0217 	rsb	r2, r5, #23
 8006faa:	4116      	asrs	r6, r2
 8006fac:	2e00      	cmp	r6, #0
 8006fae:	dd42      	ble.n	8007036 <__kernel_rem_pio2+0x1c6>
 8006fb0:	2400      	movs	r4, #0
 8006fb2:	f109 0901 	add.w	r9, r9, #1
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8006fbc:	42a7      	cmp	r7, r4
 8006fbe:	dc75      	bgt.n	80070ac <__kernel_rem_pio2+0x23c>
 8006fc0:	2d00      	cmp	r5, #0
 8006fc2:	dd05      	ble.n	8006fd0 <__kernel_rem_pio2+0x160>
 8006fc4:	2d01      	cmp	r5, #1
 8006fc6:	f000 8086 	beq.w	80070d6 <__kernel_rem_pio2+0x266>
 8006fca:	2d02      	cmp	r5, #2
 8006fcc:	f000 808d 	beq.w	80070ea <__kernel_rem_pio2+0x27a>
 8006fd0:	2e02      	cmp	r6, #2
 8006fd2:	d130      	bne.n	8007036 <__kernel_rem_pio2+0x1c6>
 8006fd4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006fd8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8006fdc:	b358      	cbz	r0, 8007036 <__kernel_rem_pio2+0x1c6>
 8006fde:	4628      	mov	r0, r5
 8006fe0:	9305      	str	r3, [sp, #20]
 8006fe2:	f000 fa91 	bl	8007508 <scalbn>
 8006fe6:	9b05      	ldr	r3, [sp, #20]
 8006fe8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006fec:	e023      	b.n	8007036 <__kernel_rem_pio2+0x1c6>
 8006fee:	ee20 7b09 	vmul.f64	d7, d0, d9
 8006ff2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006ff6:	ac06      	add	r4, sp, #24
 8006ff8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8006ffc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8007000:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007004:	ee10 1a10 	vmov	r1, s0
 8007008:	ed30 0b02 	vldmdb	r0!, {d0}
 800700c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8007010:	ee37 0b00 	vadd.f64	d0, d7, d0
 8007014:	3201      	adds	r2, #1
 8007016:	e79a      	b.n	8006f4e <__kernel_rem_pio2+0xde>
 8007018:	d105      	bne.n	8007026 <__kernel_rem_pio2+0x1b6>
 800701a:	1e7a      	subs	r2, r7, #1
 800701c:	a906      	add	r1, sp, #24
 800701e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8007022:	15f6      	asrs	r6, r6, #23
 8007024:	e7c2      	b.n	8006fac <__kernel_rem_pio2+0x13c>
 8007026:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800702a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800702e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007032:	da39      	bge.n	80070a8 <__kernel_rem_pio2+0x238>
 8007034:	2600      	movs	r6, #0
 8007036:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800703a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800703e:	f040 808e 	bne.w	800715e <__kernel_rem_pio2+0x2ee>
 8007042:	1e7c      	subs	r4, r7, #1
 8007044:	4620      	mov	r0, r4
 8007046:	2200      	movs	r2, #0
 8007048:	4550      	cmp	r0, sl
 800704a:	da55      	bge.n	80070f8 <__kernel_rem_pio2+0x288>
 800704c:	2a00      	cmp	r2, #0
 800704e:	d164      	bne.n	800711a <__kernel_rem_pio2+0x2aa>
 8007050:	2401      	movs	r4, #1
 8007052:	f06f 0003 	mvn.w	r0, #3
 8007056:	fb00 f204 	mul.w	r2, r0, r4
 800705a:	9904      	ldr	r1, [sp, #16]
 800705c:	588a      	ldr	r2, [r1, r2]
 800705e:	2a00      	cmp	r2, #0
 8007060:	d050      	beq.n	8007104 <__kernel_rem_pio2+0x294>
 8007062:	aa92      	add	r2, sp, #584	; 0x248
 8007064:	4490      	add	r8, r2
 8007066:	9a01      	ldr	r2, [sp, #4]
 8007068:	a91a      	add	r1, sp, #104	; 0x68
 800706a:	443a      	add	r2, r7
 800706c:	1c78      	adds	r0, r7, #1
 800706e:	f1a8 0890 	sub.w	r8, r8, #144	; 0x90
 8007072:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007076:	4427      	add	r7, r4
 8007078:	42b8      	cmp	r0, r7
 800707a:	f73f af58 	bgt.w	8006f2e <__kernel_rem_pio2+0xbe>
 800707e:	9903      	ldr	r1, [sp, #12]
 8007080:	9e02      	ldr	r6, [sp, #8]
 8007082:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007086:	9105      	str	r1, [sp, #20]
 8007088:	ee07 1a90 	vmov	s15, r1
 800708c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007090:	2400      	movs	r4, #0
 8007092:	eca2 7b02 	vstmia	r2!, {d7}
 8007096:	ed9f 7b44 	vldr	d7, [pc, #272]	; 80071a8 <__kernel_rem_pio2+0x338>
 800709a:	4696      	mov	lr, r2
 800709c:	429c      	cmp	r4, r3
 800709e:	dd33      	ble.n	8007108 <__kernel_rem_pio2+0x298>
 80070a0:	eca8 7b02 	vstmia	r8!, {d7}
 80070a4:	3001      	adds	r0, #1
 80070a6:	e7e7      	b.n	8007078 <__kernel_rem_pio2+0x208>
 80070a8:	2602      	movs	r6, #2
 80070aa:	e781      	b.n	8006fb0 <__kernel_rem_pio2+0x140>
 80070ac:	aa06      	add	r2, sp, #24
 80070ae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80070b2:	b948      	cbnz	r0, 80070c8 <__kernel_rem_pio2+0x258>
 80070b4:	b12a      	cbz	r2, 80070c2 <__kernel_rem_pio2+0x252>
 80070b6:	a906      	add	r1, sp, #24
 80070b8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80070bc:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80070c0:	2201      	movs	r2, #1
 80070c2:	3401      	adds	r4, #1
 80070c4:	4610      	mov	r0, r2
 80070c6:	e779      	b.n	8006fbc <__kernel_rem_pio2+0x14c>
 80070c8:	a906      	add	r1, sp, #24
 80070ca:	ebae 0202 	sub.w	r2, lr, r2
 80070ce:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80070d2:	4602      	mov	r2, r0
 80070d4:	e7f5      	b.n	80070c2 <__kernel_rem_pio2+0x252>
 80070d6:	1e7c      	subs	r4, r7, #1
 80070d8:	aa06      	add	r2, sp, #24
 80070da:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80070de:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80070e2:	a906      	add	r1, sp, #24
 80070e4:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80070e8:	e772      	b.n	8006fd0 <__kernel_rem_pio2+0x160>
 80070ea:	1e7c      	subs	r4, r7, #1
 80070ec:	aa06      	add	r2, sp, #24
 80070ee:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80070f2:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80070f6:	e7f4      	b.n	80070e2 <__kernel_rem_pio2+0x272>
 80070f8:	a906      	add	r1, sp, #24
 80070fa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80070fe:	3801      	subs	r0, #1
 8007100:	430a      	orrs	r2, r1
 8007102:	e7a1      	b.n	8007048 <__kernel_rem_pio2+0x1d8>
 8007104:	3401      	adds	r4, #1
 8007106:	e7a6      	b.n	8007056 <__kernel_rem_pio2+0x1e6>
 8007108:	ecb6 5b02 	vldmia	r6!, {d5}
 800710c:	ed3e 6b02 	vldmdb	lr!, {d6}
 8007110:	3401      	adds	r4, #1
 8007112:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007116:	e7c1      	b.n	800709c <__kernel_rem_pio2+0x22c>
 8007118:	3c01      	subs	r4, #1
 800711a:	ab06      	add	r3, sp, #24
 800711c:	3d18      	subs	r5, #24
 800711e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f8      	beq.n	8007118 <__kernel_rem_pio2+0x2a8>
 8007126:	4628      	mov	r0, r5
 8007128:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800712c:	f000 f9ec 	bl	8007508 <scalbn>
 8007130:	00e3      	lsls	r3, r4, #3
 8007132:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80071b0 <__kernel_rem_pio2+0x340>
 8007136:	aa6a      	add	r2, sp, #424	; 0x1a8
 8007138:	3308      	adds	r3, #8
 800713a:	18d0      	adds	r0, r2, r3
 800713c:	4622      	mov	r2, r4
 800713e:	2a00      	cmp	r2, #0
 8007140:	da4b      	bge.n	80071da <__kernel_rem_pio2+0x36a>
 8007142:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 8007146:	2200      	movs	r2, #0
 8007148:	4677      	mov	r7, lr
 800714a:	1aa5      	subs	r5, r4, r2
 800714c:	d464      	bmi.n	8007218 <__kernel_rem_pio2+0x3a8>
 800714e:	a86a      	add	r0, sp, #424	; 0x1a8
 8007150:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8007154:	491b      	ldr	r1, [pc, #108]	; (80071c4 <__kernel_rem_pio2+0x354>)
 8007156:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80071a8 <__kernel_rem_pio2+0x338>
 800715a:	2000      	movs	r0, #0
 800715c:	e054      	b.n	8007208 <__kernel_rem_pio2+0x398>
 800715e:	4268      	negs	r0, r5
 8007160:	eeb0 0b48 	vmov.f64	d0, d8
 8007164:	f000 f9d0 	bl	8007508 <scalbn>
 8007168:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80071b8 <__kernel_rem_pio2+0x348>
 800716c:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8007170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007174:	db28      	blt.n	80071c8 <__kernel_rem_pio2+0x358>
 8007176:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80071b0 <__kernel_rem_pio2+0x340>
 800717a:	ee20 7b07 	vmul.f64	d7, d0, d7
 800717e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007182:	aa06      	add	r2, sp, #24
 8007184:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8007188:	eea5 0b46 	vfms.f64	d0, d5, d6
 800718c:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007190:	1c7c      	adds	r4, r7, #1
 8007192:	ee10 3a10 	vmov	r3, s0
 8007196:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800719a:	ee17 3a10 	vmov	r3, s14
 800719e:	3518      	adds	r5, #24
 80071a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80071a4:	e7bf      	b.n	8007126 <__kernel_rem_pio2+0x2b6>
 80071a6:	bf00      	nop
	...
 80071b4:	3e700000 	.word	0x3e700000
 80071b8:	00000000 	.word	0x00000000
 80071bc:	41700000 	.word	0x41700000
 80071c0:	08007980 	.word	0x08007980
 80071c4:	08007940 	.word	0x08007940
 80071c8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80071cc:	aa06      	add	r2, sp, #24
 80071ce:	ee10 3a10 	vmov	r3, s0
 80071d2:	463c      	mov	r4, r7
 80071d4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80071d8:	e7a5      	b.n	8007126 <__kernel_rem_pio2+0x2b6>
 80071da:	a906      	add	r1, sp, #24
 80071dc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80071e0:	9101      	str	r1, [sp, #4]
 80071e2:	ee07 1a90 	vmov	s15, r1
 80071e6:	3a01      	subs	r2, #1
 80071e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80071ec:	ee27 7b00 	vmul.f64	d7, d7, d0
 80071f0:	ee20 0b06 	vmul.f64	d0, d0, d6
 80071f4:	ed20 7b02 	vstmdb	r0!, {d7}
 80071f8:	e7a1      	b.n	800713e <__kernel_rem_pio2+0x2ce>
 80071fa:	ecb1 5b02 	vldmia	r1!, {d5}
 80071fe:	ecb5 6b02 	vldmia	r5!, {d6}
 8007202:	3001      	adds	r0, #1
 8007204:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007208:	4550      	cmp	r0, sl
 800720a:	dc01      	bgt.n	8007210 <__kernel_rem_pio2+0x3a0>
 800720c:	4290      	cmp	r0, r2
 800720e:	ddf4      	ble.n	80071fa <__kernel_rem_pio2+0x38a>
 8007210:	ecae 7b02 	vstmia	lr!, {d7}
 8007214:	3201      	adds	r2, #1
 8007216:	e798      	b.n	800714a <__kernel_rem_pio2+0x2da>
 8007218:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800721a:	2a03      	cmp	r2, #3
 800721c:	d843      	bhi.n	80072a6 <__kernel_rem_pio2+0x436>
 800721e:	e8df f002 	tbb	[pc, r2]
 8007222:	1d37      	.short	0x1d37
 8007224:	021d      	.short	0x021d
 8007226:	aa42      	add	r2, sp, #264	; 0x108
 8007228:	4413      	add	r3, r2
 800722a:	461a      	mov	r2, r3
 800722c:	4620      	mov	r0, r4
 800722e:	2800      	cmp	r0, #0
 8007230:	dc56      	bgt.n	80072e0 <__kernel_rem_pio2+0x470>
 8007232:	461a      	mov	r2, r3
 8007234:	4620      	mov	r0, r4
 8007236:	2801      	cmp	r0, #1
 8007238:	dc62      	bgt.n	8007300 <__kernel_rem_pio2+0x490>
 800723a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8007350 <__kernel_rem_pio2+0x4e0>
 800723e:	2c01      	cmp	r4, #1
 8007240:	dc6e      	bgt.n	8007320 <__kernel_rem_pio2+0x4b0>
 8007242:	2e00      	cmp	r6, #0
 8007244:	d172      	bne.n	800732c <__kernel_rem_pio2+0x4bc>
 8007246:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 800724a:	e9cb 2300 	strd	r2, r3, [fp]
 800724e:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 8007252:	e9cb 2302 	strd	r2, r3, [fp, #8]
 8007256:	ed8b 7b04 	vstr	d7, [fp, #16]
 800725a:	e024      	b.n	80072a6 <__kernel_rem_pio2+0x436>
 800725c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007350 <__kernel_rem_pio2+0x4e0>
 8007260:	aa42      	add	r2, sp, #264	; 0x108
 8007262:	4413      	add	r3, r2
 8007264:	4622      	mov	r2, r4
 8007266:	2a00      	cmp	r2, #0
 8007268:	da2b      	bge.n	80072c2 <__kernel_rem_pio2+0x452>
 800726a:	b386      	cbz	r6, 80072ce <__kernel_rem_pio2+0x45e>
 800726c:	eeb1 7b46 	vneg.f64	d7, d6
 8007270:	ed8b 7b00 	vstr	d7, [fp]
 8007274:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8007278:	aa44      	add	r2, sp, #272	; 0x110
 800727a:	2301      	movs	r3, #1
 800727c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007280:	429c      	cmp	r4, r3
 8007282:	da27      	bge.n	80072d4 <__kernel_rem_pio2+0x464>
 8007284:	b10e      	cbz	r6, 800728a <__kernel_rem_pio2+0x41a>
 8007286:	eeb1 7b47 	vneg.f64	d7, d7
 800728a:	ed8b 7b02 	vstr	d7, [fp, #8]
 800728e:	e00a      	b.n	80072a6 <__kernel_rem_pio2+0x436>
 8007290:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007350 <__kernel_rem_pio2+0x4e0>
 8007294:	aa42      	add	r2, sp, #264	; 0x108
 8007296:	4413      	add	r3, r2
 8007298:	2c00      	cmp	r4, #0
 800729a:	da0c      	bge.n	80072b6 <__kernel_rem_pio2+0x446>
 800729c:	b10e      	cbz	r6, 80072a2 <__kernel_rem_pio2+0x432>
 800729e:	eeb1 7b47 	vneg.f64	d7, d7
 80072a2:	ed8b 7b00 	vstr	d7, [fp]
 80072a6:	f009 0007 	and.w	r0, r9, #7
 80072aa:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80072ae:	ecbd 8b06 	vpop	{d8-d10}
 80072b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b6:	ed33 6b02 	vldmdb	r3!, {d6}
 80072ba:	3c01      	subs	r4, #1
 80072bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80072c0:	e7ea      	b.n	8007298 <__kernel_rem_pio2+0x428>
 80072c2:	ed33 7b02 	vldmdb	r3!, {d7}
 80072c6:	3a01      	subs	r2, #1
 80072c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80072cc:	e7cb      	b.n	8007266 <__kernel_rem_pio2+0x3f6>
 80072ce:	eeb0 7b46 	vmov.f64	d7, d6
 80072d2:	e7cd      	b.n	8007270 <__kernel_rem_pio2+0x400>
 80072d4:	ecb2 6b02 	vldmia	r2!, {d6}
 80072d8:	3301      	adds	r3, #1
 80072da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80072de:	e7cf      	b.n	8007280 <__kernel_rem_pio2+0x410>
 80072e0:	ed12 5b02 	vldr	d5, [r2, #-8]
 80072e4:	ed12 7b04 	vldr	d7, [r2, #-16]
 80072e8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80072ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80072f0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80072f4:	ed22 7b02 	vstmdb	r2!, {d7}
 80072f8:	3801      	subs	r0, #1
 80072fa:	ed02 6b02 	vstr	d6, [r2, #-8]
 80072fe:	e796      	b.n	800722e <__kernel_rem_pio2+0x3be>
 8007300:	ed12 5b02 	vldr	d5, [r2, #-8]
 8007304:	ed12 7b04 	vldr	d7, [r2, #-16]
 8007308:	ee37 6b05 	vadd.f64	d6, d7, d5
 800730c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007310:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007314:	ed22 7b02 	vstmdb	r2!, {d7}
 8007318:	3801      	subs	r0, #1
 800731a:	ed02 6b02 	vstr	d6, [r2, #-8]
 800731e:	e78a      	b.n	8007236 <__kernel_rem_pio2+0x3c6>
 8007320:	ed33 6b02 	vldmdb	r3!, {d6}
 8007324:	3c01      	subs	r4, #1
 8007326:	ee37 7b06 	vadd.f64	d7, d7, d6
 800732a:	e788      	b.n	800723e <__kernel_rem_pio2+0x3ce>
 800732c:	ed97 6b00 	vldr	d6, [r7]
 8007330:	eeb1 7b47 	vneg.f64	d7, d7
 8007334:	eeb1 6b46 	vneg.f64	d6, d6
 8007338:	ed8b 6b00 	vstr	d6, [fp]
 800733c:	ed97 6b02 	vldr	d6, [r7, #8]
 8007340:	eeb1 6b46 	vneg.f64	d6, d6
 8007344:	ed8b 6b02 	vstr	d6, [fp, #8]
 8007348:	e785      	b.n	8007256 <__kernel_rem_pio2+0x3e6>
 800734a:	bf00      	nop
 800734c:	f3af 8000 	nop.w
	...

08007358 <__kernel_sin>:
 8007358:	ee10 3a90 	vmov	r3, s1
 800735c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007360:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007364:	da04      	bge.n	8007370 <__kernel_sin+0x18>
 8007366:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800736a:	ee17 3a90 	vmov	r3, s15
 800736e:	b35b      	cbz	r3, 80073c8 <__kernel_sin+0x70>
 8007370:	ee20 6b00 	vmul.f64	d6, d0, d0
 8007374:	ee20 5b06 	vmul.f64	d5, d0, d6
 8007378:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80073d0 <__kernel_sin+0x78>
 800737c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80073d8 <__kernel_sin+0x80>
 8007380:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007384:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80073e0 <__kernel_sin+0x88>
 8007388:	eea6 7b04 	vfma.f64	d7, d6, d4
 800738c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80073e8 <__kernel_sin+0x90>
 8007390:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007394:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80073f0 <__kernel_sin+0x98>
 8007398:	eea6 7b04 	vfma.f64	d7, d6, d4
 800739c:	b930      	cbnz	r0, 80073ac <__kernel_sin+0x54>
 800739e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80073f8 <__kernel_sin+0xa0>
 80073a2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80073a6:	eea5 0b04 	vfma.f64	d0, d5, d4
 80073aa:	4770      	bx	lr
 80073ac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80073b0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80073b4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80073b8:	ee96 1b07 	vfnms.f64	d1, d6, d7
 80073bc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007400 <__kernel_sin+0xa8>
 80073c0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80073c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w
 80073d0:	5acfd57c 	.word	0x5acfd57c
 80073d4:	3de5d93a 	.word	0x3de5d93a
 80073d8:	8a2b9ceb 	.word	0x8a2b9ceb
 80073dc:	be5ae5e6 	.word	0xbe5ae5e6
 80073e0:	57b1fe7d 	.word	0x57b1fe7d
 80073e4:	3ec71de3 	.word	0x3ec71de3
 80073e8:	19c161d5 	.word	0x19c161d5
 80073ec:	bf2a01a0 	.word	0xbf2a01a0
 80073f0:	1110f8a6 	.word	0x1110f8a6
 80073f4:	3f811111 	.word	0x3f811111
 80073f8:	55555549 	.word	0x55555549
 80073fc:	bfc55555 	.word	0xbfc55555
 8007400:	55555549 	.word	0x55555549
 8007404:	3fc55555 	.word	0x3fc55555

08007408 <fabs>:
 8007408:	ec53 2b10 	vmov	r2, r3, d0
 800740c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007410:	ec43 2b10 	vmov	d0, r2, r3
 8007414:	4770      	bx	lr
	...

08007418 <floor>:
 8007418:	ee10 1a90 	vmov	r1, s1
 800741c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007420:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8007424:	2b13      	cmp	r3, #19
 8007426:	b530      	push	{r4, r5, lr}
 8007428:	ee10 0a10 	vmov	r0, s0
 800742c:	ee10 5a10 	vmov	r5, s0
 8007430:	dc33      	bgt.n	800749a <floor+0x82>
 8007432:	2b00      	cmp	r3, #0
 8007434:	da17      	bge.n	8007466 <floor+0x4e>
 8007436:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80074f8 <floor+0xe0>
 800743a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800743e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007446:	dd09      	ble.n	800745c <floor+0x44>
 8007448:	2900      	cmp	r1, #0
 800744a:	da50      	bge.n	80074ee <floor+0xd6>
 800744c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007450:	432b      	orrs	r3, r5
 8007452:	4b2b      	ldr	r3, [pc, #172]	; (8007500 <floor+0xe8>)
 8007454:	f04f 0000 	mov.w	r0, #0
 8007458:	bf18      	it	ne
 800745a:	4619      	movne	r1, r3
 800745c:	460b      	mov	r3, r1
 800745e:	4602      	mov	r2, r0
 8007460:	ec43 2b10 	vmov	d0, r2, r3
 8007464:	bd30      	pop	{r4, r5, pc}
 8007466:	4a27      	ldr	r2, [pc, #156]	; (8007504 <floor+0xec>)
 8007468:	411a      	asrs	r2, r3
 800746a:	ea01 0402 	and.w	r4, r1, r2
 800746e:	432c      	orrs	r4, r5
 8007470:	d0f8      	beq.n	8007464 <floor+0x4c>
 8007472:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80074f8 <floor+0xe0>
 8007476:	ee30 0b07 	vadd.f64	d0, d0, d7
 800747a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800747e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007482:	ddeb      	ble.n	800745c <floor+0x44>
 8007484:	2900      	cmp	r1, #0
 8007486:	bfbe      	ittt	lt
 8007488:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800748c:	fa40 f303 	asrlt.w	r3, r0, r3
 8007490:	18c9      	addlt	r1, r1, r3
 8007492:	ea21 0102 	bic.w	r1, r1, r2
 8007496:	2000      	movs	r0, #0
 8007498:	e7e0      	b.n	800745c <floor+0x44>
 800749a:	2b33      	cmp	r3, #51	; 0x33
 800749c:	dd05      	ble.n	80074aa <floor+0x92>
 800749e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a2:	d1df      	bne.n	8007464 <floor+0x4c>
 80074a4:	ee30 0b00 	vadd.f64	d0, d0, d0
 80074a8:	bd30      	pop	{r4, r5, pc}
 80074aa:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80074ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074b2:	40e2      	lsrs	r2, r4
 80074b4:	4215      	tst	r5, r2
 80074b6:	d0d5      	beq.n	8007464 <floor+0x4c>
 80074b8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80074f8 <floor+0xe0>
 80074bc:	ee30 0b07 	vadd.f64	d0, d0, d7
 80074c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80074c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c8:	ddc8      	ble.n	800745c <floor+0x44>
 80074ca:	2900      	cmp	r1, #0
 80074cc:	da02      	bge.n	80074d4 <floor+0xbc>
 80074ce:	2b14      	cmp	r3, #20
 80074d0:	d103      	bne.n	80074da <floor+0xc2>
 80074d2:	3101      	adds	r1, #1
 80074d4:	ea20 0002 	bic.w	r0, r0, r2
 80074d8:	e7c0      	b.n	800745c <floor+0x44>
 80074da:	2401      	movs	r4, #1
 80074dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80074e0:	fa04 f303 	lsl.w	r3, r4, r3
 80074e4:	4418      	add	r0, r3
 80074e6:	4285      	cmp	r5, r0
 80074e8:	bf88      	it	hi
 80074ea:	1909      	addhi	r1, r1, r4
 80074ec:	e7f2      	b.n	80074d4 <floor+0xbc>
 80074ee:	2000      	movs	r0, #0
 80074f0:	4601      	mov	r1, r0
 80074f2:	e7b3      	b.n	800745c <floor+0x44>
 80074f4:	f3af 8000 	nop.w
 80074f8:	8800759c 	.word	0x8800759c
 80074fc:	7e37e43c 	.word	0x7e37e43c
 8007500:	bff00000 	.word	0xbff00000
 8007504:	000fffff 	.word	0x000fffff

08007508 <scalbn>:
 8007508:	b500      	push	{lr}
 800750a:	ed2d 8b02 	vpush	{d8}
 800750e:	b083      	sub	sp, #12
 8007510:	ed8d 0b00 	vstr	d0, [sp]
 8007514:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8007518:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800751c:	b9a2      	cbnz	r2, 8007548 <scalbn+0x40>
 800751e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007522:	430b      	orrs	r3, r1
 8007524:	d03a      	beq.n	800759c <scalbn+0x94>
 8007526:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80075e0 <scalbn+0xd8>
 800752a:	4a35      	ldr	r2, [pc, #212]	; (8007600 <scalbn+0xf8>)
 800752c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007530:	4290      	cmp	r0, r2
 8007532:	ed8d 7b00 	vstr	d7, [sp]
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	da11      	bge.n	800755e <scalbn+0x56>
 800753a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80075e8 <scalbn+0xe0>
 800753e:	ed9d 6b00 	vldr	d6, [sp]
 8007542:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007546:	e007      	b.n	8007558 <scalbn+0x50>
 8007548:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800754c:	428a      	cmp	r2, r1
 800754e:	d109      	bne.n	8007564 <scalbn+0x5c>
 8007550:	ed9d 7b00 	vldr	d7, [sp]
 8007554:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007558:	ed8d 7b00 	vstr	d7, [sp]
 800755c:	e01e      	b.n	800759c <scalbn+0x94>
 800755e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007562:	3a36      	subs	r2, #54	; 0x36
 8007564:	4402      	add	r2, r0
 8007566:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800756a:	428a      	cmp	r2, r1
 800756c:	dd0a      	ble.n	8007584 <scalbn+0x7c>
 800756e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 80075f0 <scalbn+0xe8>
 8007572:	eeb0 0b48 	vmov.f64	d0, d8
 8007576:	ed9d 1b00 	vldr	d1, [sp]
 800757a:	f000 f843 	bl	8007604 <copysign>
 800757e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8007582:	e7e9      	b.n	8007558 <scalbn+0x50>
 8007584:	2a00      	cmp	r2, #0
 8007586:	dd10      	ble.n	80075aa <scalbn+0xa2>
 8007588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800758c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007590:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007594:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007598:	e9cd 0100 	strd	r0, r1, [sp]
 800759c:	ed9d 0b00 	vldr	d0, [sp]
 80075a0:	b003      	add	sp, #12
 80075a2:	ecbd 8b02 	vpop	{d8}
 80075a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80075aa:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075ae:	da06      	bge.n	80075be <scalbn+0xb6>
 80075b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80075b4:	4298      	cmp	r0, r3
 80075b6:	dcda      	bgt.n	800756e <scalbn+0x66>
 80075b8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 80075e8 <scalbn+0xe0>
 80075bc:	e7d9      	b.n	8007572 <scalbn+0x6a>
 80075be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075c6:	3236      	adds	r2, #54	; 0x36
 80075c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075cc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80075d0:	ec41 0b17 	vmov	d7, r0, r1
 80075d4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80075f8 <scalbn+0xf0>
 80075d8:	e7b3      	b.n	8007542 <scalbn+0x3a>
 80075da:	bf00      	nop
 80075dc:	f3af 8000 	nop.w
 80075e0:	00000000 	.word	0x00000000
 80075e4:	43500000 	.word	0x43500000
 80075e8:	c2f8f359 	.word	0xc2f8f359
 80075ec:	01a56e1f 	.word	0x01a56e1f
 80075f0:	8800759c 	.word	0x8800759c
 80075f4:	7e37e43c 	.word	0x7e37e43c
 80075f8:	00000000 	.word	0x00000000
 80075fc:	3c900000 	.word	0x3c900000
 8007600:	ffff3cb0 	.word	0xffff3cb0

08007604 <copysign>:
 8007604:	ec53 2b10 	vmov	r2, r3, d0
 8007608:	ee11 0a90 	vmov	r0, s3
 800760c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007610:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007614:	ea41 0300 	orr.w	r3, r1, r0
 8007618:	ec43 2b10 	vmov	d0, r2, r3
 800761c:	4770      	bx	lr
	...

08007620 <_init>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr

0800762c <_fini>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr
