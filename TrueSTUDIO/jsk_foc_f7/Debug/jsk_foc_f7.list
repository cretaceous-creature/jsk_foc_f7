
jsk_foc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005664  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08005a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004750  20000008  08005a74  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004758  08005a74  00024758  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_line   000100dd  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003fdd4  00000000  00000000  00030113  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000728b  00000000  00000000  0006fee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001958  00000000  00000000  00077178  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002088  00000000  00000000  00078ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000132f3  00000000  00000000  0007ab58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000953d  00000000  00000000  0008de4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00097388  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004aa4  00000000  00000000  00097404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000008 	.word	0x20000008
 800021c:	00000000 	.word	0x00000000
 8000220:	0800584c 	.word	0x0800584c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000000c 	.word	0x2000000c
 800023c:	0800584c 	.word	0x0800584c

08000240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
  ldr  r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800025e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800026a:	f001 fa9f 	bl	80017ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f005 fab5 	bl	80057dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000272:	f000 fe55 	bl	8000f20 <main>
  bx  lr    
 8000276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000278:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800027c:	08005a6c 	.word	0x08005a6c
  ldr  r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000284:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000288:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800028c:	20004758 	.word	0x20004758

08000290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC_IRQHandler>
	...

08000294 <StartcontrolTask>:
//centralaligned, frequency should be half..
#define setMotorDuty(dutyA,dutyB,dutyC) {htim1.Instance->CCR1=dutyA, \
		htim1.Instance->CCR2=dutyB, \
		htim1.Instance->CCR3=dutyC;}
void StartcontrolTask(void const * argument)
{
 8000294:	b530      	push	{r4, r5, lr}
	uint16_t duty_a = 0;
	for(;;)
	{
		CURDATA shuntdata;
		if(xQueueReceive(shuntQueueHandle,&shuntdata,2)==pdPASS)
 8000296:	4c11      	ldr	r4, [pc, #68]	; (80002dc <StartcontrolTask+0x48>)
{
 8000298:	b087      	sub	sp, #28
			//to test the control frequency
			volatile int32_t a = shuntdata.cur_a;
			volatile int32_t b = shuntdata.cur_b;
			volatile float cc = a+b;
//			setMotorDuty(duty_a,0,0);
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 800029a:	4d11      	ldr	r5, [pc, #68]	; (80002e0 <StartcontrolTask+0x4c>)
		if(xQueueReceive(shuntQueueHandle,&shuntdata,2)==pdPASS)
 800029c:	2300      	movs	r3, #0
 800029e:	2202      	movs	r2, #2
 80002a0:	a903      	add	r1, sp, #12
 80002a2:	6820      	ldr	r0, [r4, #0]
 80002a4:	f004 fd40 	bl	8004d28 <xQueueGenericReceive>
 80002a8:	2801      	cmp	r0, #1
 80002aa:	d112      	bne.n	80002d2 <StartcontrolTask+0x3e>
			volatile int32_t a = shuntdata.cur_a;
 80002ac:	9b03      	ldr	r3, [sp, #12]
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80002ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b2:	4628      	mov	r0, r5
			volatile int32_t a = shuntdata.cur_a;
 80002b4:	9300      	str	r3, [sp, #0]
			volatile int32_t b = shuntdata.cur_b;
 80002b6:	9b04      	ldr	r3, [sp, #16]
 80002b8:	9301      	str	r3, [sp, #4]
			volatile float cc = a+b;
 80002ba:	9b00      	ldr	r3, [sp, #0]
 80002bc:	9a01      	ldr	r2, [sp, #4]
 80002be:	4413      	add	r3, r2
 80002c0:	ee07 3a90 	vmov	s15, r3
 80002c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002c8:	edcd 7a02 	vstr	s15, [sp, #8]
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80002cc:	f001 ff71 	bl	80021b2 <HAL_GPIO_TogglePin>
 80002d0:	e7e4      	b.n	800029c <StartcontrolTask+0x8>
		}
		else
		{
			//1ms no current data was receieved...something is wrong...error handle
			//  _Error_Handler("controlFOC, 1ms no data receved.",500);
			osDelay(1);
 80002d2:	2001      	movs	r0, #1
 80002d4:	f004 f839 	bl	800434a <osDelay>
	{
 80002d8:	e7e0      	b.n	800029c <StartcontrolTask+0x8>
 80002da:	bf00      	nop
 80002dc:	20003fb8 	.word	0x20003fb8
 80002e0:	40020800 	.word	0x40020800

080002e4 <HAL_UART_ErrorCallback>:
 * UART4 error handler
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	//error...
	_Error_Handler("isrSensors.c, uart error",41);
 80002e4:	2129      	movs	r1, #41	; 0x29
 80002e6:	4801      	ldr	r0, [pc, #4]	; (80002ec <HAL_UART_ErrorCallback+0x8>)
 80002e8:	f000 be84 	b.w	8000ff4 <_Error_Handler>
 80002ec:	08005940 	.word	0x08005940

080002f0 <HAL_UART_RxCpltCallback>:
 * UART4 receive complete callback..
 * obtain hall sensor, encoder, etc data from intelligent board.
 * data updating rate <10us  ~100khz
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * the xHigherPriorityTaskWoken will be set to pdTrue and we can directly perform a context switch and thus
	 * leaves the ISR and go to task B, if not so, we need to go back to task A and wait for a tick to switch to B.
	 */
	static BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	if(huart->Instance==huart4.Instance) //not necessary to check..
 80002f4:	4b43      	ldr	r3, [pc, #268]	; (8000404 <HAL_UART_RxCpltCallback+0x114>)
 80002f6:	6802      	ldr	r2, [r0, #0]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d175      	bne.n	80003ea <HAL_UART_RxCpltCallback+0xfa>
	{
		for(int i=0; i<5; i++)
		{
			if(enchall_buff[i] == TXHEADER)
 80002fe:	4f42      	ldr	r7, [pc, #264]	; (8000408 <HAL_UART_RxCpltCallback+0x118>)
 8000300:	2401      	movs	r4, #1
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
				{
					//then we can obtain the correct bytes...
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000302:	4d42      	ldr	r5, [pc, #264]	; (800040c <HAL_UART_RxCpltCallback+0x11c>)
 8000304:	463e      	mov	r6, r7
			if(enchall_buff[i] == TXHEADER)
 8000306:	19e3      	adds	r3, r4, r7
 8000308:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800030c:	2bf8      	cmp	r3, #248	; 0xf8
 800030e:	d166      	bne.n	80003de <HAL_UART_RxCpltCallback+0xee>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 8000310:	2c05      	cmp	r4, #5
 8000312:	d005      	beq.n	8000320 <HAL_UART_RxCpltCallback+0x30>
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 8000314:	2c04      	cmp	r4, #4
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 8000316:	b2e2      	uxtb	r2, r4
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 8000318:	d103      	bne.n	8000322 <HAL_UART_RxCpltCallback+0x32>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 800031a:	4622      	mov	r2, r4
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 800031c:	2300      	movs	r3, #0
 800031e:	e002      	b.n	8000326 <HAL_UART_RxCpltCallback+0x36>
				uint8_t s = i==4?0:i+1; //second byte  1xxx|xxxx
 8000320:	2200      	movs	r2, #0
				uint8_t t = s==4?0:s+1; //third byte   011x|xxxx
 8000322:	1c53      	adds	r3, r2, #1
 8000324:	b2db      	uxtb	r3, r3
				if(enchall_buff[s]&0x80&&enchall_buff[t]&0x60)
 8000326:	5cb2      	ldrb	r2, [r6, r2]
 8000328:	0611      	lsls	r1, r2, #24
 800032a:	d558      	bpl.n	80003de <HAL_UART_RxCpltCallback+0xee>
 800032c:	5cf1      	ldrb	r1, [r6, r3]
 800032e:	f011 0f60 	tst.w	r1, #96	; 0x60
 8000332:	d054      	beq.n	80003de <HAL_UART_RxCpltCallback+0xee>
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 8000334:	f3c2 1080 	ubfx	r0, r2, #6, #1
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
					//next byte
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 8000338:	f001 011f 	and.w	r1, r1, #31
					//next two bytes
					uint8_t b1 = t==4?0:t+1;
 800033c:	2b04      	cmp	r3, #4
					enchall.mseq_out = (enchall_buff[s]&0x40)>>6; //0100|0000
 800033e:	7028      	strb	r0, [r5, #0]
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 8000340:	f3c2 1040 	ubfx	r0, r2, #5, #1
					enchall.enc_counter = enchall_buff[t]&0x1f; // 0001|1111
 8000344:	7129      	strb	r1, [r5, #4]
					enchall.auxbit_in = (enchall_buff[s]&0x20)>>5; //0010|0000
 8000346:	7068      	strb	r0, [r5, #1]
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 8000348:	f3c2 0082 	ubfx	r0, r2, #2, #3
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 800034c:	f002 0203 	and.w	r2, r2, #3
					enchall.hole_in = (enchall_buff[s]&0x1c)>>2; //0001|1100
 8000350:	70a8      	strb	r0, [r5, #2]
					enchall.calc_tag = enchall_buff[s]&0x03; // 0000|0011
 8000352:	70ea      	strb	r2, [r5, #3]
					uint8_t b1 = t==4?0:t+1;
 8000354:	d005      	beq.n	8000362 <HAL_UART_RxCpltCallback+0x72>
 8000356:	3301      	adds	r3, #1
 8000358:	b2db      	uxtb	r3, r3
					uint8_t b2 = b1==4?0:b1+1;
 800035a:	2b04      	cmp	r3, #4
 800035c:	d102      	bne.n	8000364 <HAL_UART_RxCpltCallback+0x74>
 800035e:	2200      	movs	r2, #0
 8000360:	e002      	b.n	8000368 <HAL_UART_RxCpltCallback+0x78>
					uint8_t b1 = t==4?0:t+1;
 8000362:	2300      	movs	r3, #0
					uint8_t b2 = b1==4?0:b1+1;
 8000364:	1c5a      	adds	r2, r3, #1
 8000366:	b2d2      	uxtb	r2, r2
					enchall.enc_high = enchall_buff[b1]&0xff;
 8000368:	5cf3      	ldrb	r3, [r6, r3]
					enchall.enc_low = enchall_buff[b2]&0xff;
					//send the queue to tasks...
					//since we need to always refresh the data, need to use overwrite, only return pass
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 800036a:	4629      	mov	r1, r5
 800036c:	4828      	ldr	r0, [pc, #160]	; (8000410 <HAL_UART_RxCpltCallback+0x120>)
					enchall.enc_high = enchall_buff[b1]&0xff;
 800036e:	716b      	strb	r3, [r5, #5]
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000370:	5cb3      	ldrb	r3, [r6, r2]
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000372:	6800      	ldr	r0, [r0, #0]
					enchall.enc_low = enchall_buff[b2]&0xff;
 8000374:	71ab      	strb	r3, [r5, #6]
					xQueueOverwriteFromISR(enchallQueueHandle,&enchall, &xHigherPriorityTaskWoken);
 8000376:	2302      	movs	r3, #2
 8000378:	4a26      	ldr	r2, [pc, #152]	; (8000414 <HAL_UART_RxCpltCallback+0x124>)
 800037a:	f004 fc6b 	bl	8004c54 <xQueueGenericSendFromISR>
					//send the DFSDM current sensing data.
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 800037e:	2100      	movs	r1, #0
 8000380:	4825      	ldr	r0, [pc, #148]	; (8000418 <HAL_UART_RxCpltCallback+0x128>)
 8000382:	f001 fc4f 	bl	8001c24 <HAL_DFSDM_FilterPollForRegConversion>
 8000386:	4601      	mov	r1, r0
 8000388:	bb48      	cbnz	r0, 80003de <HAL_UART_RxCpltCallback+0xee>
							HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter1,0) == HAL_OK)
 800038a:	4824      	ldr	r0, [pc, #144]	; (800041c <HAL_UART_RxCpltCallback+0x12c>)
 800038c:	f001 fc4a 	bl	8001c24 <HAL_DFSDM_FilterPollForRegConversion>
					if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0,0) == HAL_OK &&
 8000390:	4681      	mov	r9, r0
 8000392:	bb20      	cbnz	r0, 80003de <HAL_UART_RxCpltCallback+0xee>
					{
						//also we need to deal with the offset by shorting the shunt sensor..
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 8000394:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000430 <HAL_UART_RxCpltCallback+0x140>
 8000398:	4921      	ldr	r1, [pc, #132]	; (8000420 <HAL_UART_RxCpltCallback+0x130>)
 800039a:	481f      	ldr	r0, [pc, #124]	; (8000418 <HAL_UART_RxCpltCallback+0x128>)
 800039c:	f001 fc3a 	bl	8001c14 <HAL_DFSDM_FilterGetRegularValue>
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 80003a0:	4920      	ldr	r1, [pc, #128]	; (8000424 <HAL_UART_RxCpltCallback+0x134>)
						motorcurrent.cur_b = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,(uint32_t *)&hdfsdm1_channel0);
 80003a2:	f8c8 0004 	str.w	r0, [r8, #4]
						motorcurrent.cur_a = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1,(uint32_t *)&hdfsdm1_channel3);
 80003a6:	481d      	ldr	r0, [pc, #116]	; (800041c <HAL_UART_RxCpltCallback+0x12c>)
 80003a8:	f001 fc34 	bl	8001c14 <HAL_DFSDM_FilterGetRegularValue>
						// f 256, I 2,  a: 8600 b:18400;  1ma = 100
						// f 128, I 2,  a:1200 b:2300;   1ma = 100/(2^3) = 12.5
						motorcurrent.cur_a -= 8600;
						motorcurrent.cur_b -= 18400;
 80003ac:	f8d8 2004 	ldr.w	r2, [r8, #4]
						motorcurrent.cur_a -= 8600;
 80003b0:	f5a0 5306 	sub.w	r3, r0, #8576	; 0x2180
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80003b4:	f5c0 5006 	rsb	r0, r0, #8576	; 0x2180
						motorcurrent.cur_b -= 18400;
 80003b8:	f5a2 428f 	sub.w	r2, r2, #18304	; 0x4780
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80003bc:	4641      	mov	r1, r8
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80003be:	3018      	adds	r0, #24
						motorcurrent.cur_a -= 8600;
 80003c0:	3b18      	subs	r3, #24
						motorcurrent.cur_b -= 18400;
 80003c2:	3a60      	subs	r2, #96	; 0x60
						motorcurrent.cur_a -= 8600;
 80003c4:	f8c8 3000 	str.w	r3, [r8]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80003c8:	464b      	mov	r3, r9
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80003ca:	1a80      	subs	r0, r0, r2
						motorcurrent.cur_b -= 18400;
 80003cc:	f8c8 2004 	str.w	r2, [r8, #4]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80003d0:	4a10      	ldr	r2, [pc, #64]	; (8000414 <HAL_UART_RxCpltCallback+0x124>)
						motorcurrent.cur_c = - motorcurrent.cur_a - motorcurrent.cur_b;
 80003d2:	f8c8 0008 	str.w	r0, [r8, #8]
						xQueueSendFromISR(shuntQueueHandle,&motorcurrent,&xHigherPriorityTaskWoken);
 80003d6:	4814      	ldr	r0, [pc, #80]	; (8000428 <HAL_UART_RxCpltCallback+0x138>)
 80003d8:	6800      	ldr	r0, [r0, #0]
 80003da:	f004 fc3b 	bl	8004c54 <xQueueGenericSendFromISR>
 80003de:	3401      	adds	r4, #1
		for(int i=0; i<5; i++)
 80003e0:	2c06      	cmp	r4, #6
 80003e2:	d190      	bne.n	8000306 <HAL_UART_RxCpltCallback+0x16>
					}
				}
			}
		}
		//continue DMA
		HAL_UART_DMAResume(&huart4);
 80003e4:	4807      	ldr	r0, [pc, #28]	; (8000404 <HAL_UART_RxCpltCallback+0x114>)
 80003e6:	f003 fa5f 	bl	80038a8 <HAL_UART_DMAResume>
	}
	//call a context switch if needed..
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <HAL_UART_RxCpltCallback+0x124>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	b13b      	cbz	r3, 8000400 <HAL_UART_RxCpltCallback+0x110>
 80003f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003f4:	4b0d      	ldr	r3, [pc, #52]	; (800042c <HAL_UART_RxCpltCallback+0x13c>)
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	f3bf 8f4f 	dsb	sy
 80003fc:	f3bf 8f6f 	isb	sy
 8000400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000404:	200042e4 	.word	0x200042e4
 8000408:	20003db4 	.word	0x20003db4
 800040c:	20000024 	.word	0x20000024
 8000410:	20003fa8 	.word	0x20003fa8
 8000414:	20000038 	.word	0x20000038
 8000418:	20003dbc 	.word	0x20003dbc
 800041c:	20003f08 	.word	0x20003f08
 8000420:	20003f5c 	.word	0x20003f5c
 8000424:	20003e10 	.word	0x20003e10
 8000428:	20003fb8 	.word	0x20003fb8
 800042c:	e000ed04 	.word	0xe000ed04
 8000430:	2000002c 	.word	0x2000002c

08000434 <StartledblueTask>:
/* StartledblueTask function */
void StartledblueTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000434:	4c05      	ldr	r4, [pc, #20]	; (800044c <StartledblueTask+0x18>)
{
 8000436:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin);
 8000438:	4620      	mov	r0, r4
 800043a:	2104      	movs	r1, #4
 800043c:	f001 feb9 	bl	80021b2 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000444:	f003 ff81 	bl	800434a <osDelay>
 8000448:	e7f6      	b.n	8000438 <StartledblueTask+0x4>
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <StartledgreenTask>:
/* StartledgreenTask function */
void StartledgreenTask(void const * argument)
{
	for(;;)
	{
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000450:	4c05      	ldr	r4, [pc, #20]	; (8000468 <StartledgreenTask+0x18>)
{
 8000452:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LEDGREEN_GPIO_Port,LEDGREEN_Pin);
 8000454:	4620      	mov	r0, r4
 8000456:	2108      	movs	r1, #8
 8000458:	f001 feab 	bl	80021b2 <HAL_GPIO_TogglePin>
		osDelay(1000);
 800045c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000460:	f003 ff73 	bl	800434a <osDelay>
 8000464:	e7f6      	b.n	8000454 <StartledgreenTask+0x4>
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <StartiwdgTask>:
	}
}

/* StartiwdgTask function */
void StartiwdgTask(void const * argument)
{
 800046c:	b508      	push	{r3, lr}
	for(;;)
	{
		//feed the watchdog every 100 msec
//		HAL_IWDG_Refresh(&hiwdg);
		osDelay(50);
 800046e:	2032      	movs	r0, #50	; 0x32
 8000470:	f003 ff6b 	bl	800434a <osDelay>
 8000474:	e7fb      	b.n	800046e <StartiwdgTask+0x2>
	...

08000478 <StartbuzzerrythmTask>:
	}
}
void StartbuzzerrythmTask(void const * argument)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b0b4      	sub	sp, #208	; 0xd0
#define SONGNUM 2
#define SONGLENGTH 50
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 800047c:	f240 36f3 	movw	r6, #1011	; 0x3f3
 8000480:	22c8      	movs	r2, #200	; 0xc8
 8000482:	2100      	movs	r1, #0
 8000484:	a802      	add	r0, sp, #8
 8000486:	f240 35f5 	movw	r5, #1013	; 0x3f5
 800048a:	f005 f9d6 	bl	800583a <memset>
 800048e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8000492:	f240 76db 	movw	r6, #2011	; 0x7db
 8000496:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800049a:	f240 72df 	movw	r2, #2015	; 0x7df
 800049e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80004a2:	f8ad 6020 	strh.w	r6, [sp, #32]
 80004a6:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
 80004aa:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80004ae:	f240 34f7 	movw	r4, #1015	; 0x3f7
 80004b2:	f8ad 100a 	strh.w	r1, [sp, #10]
 80004b6:	f240 77dc 	movw	r7, #2012	; 0x7dc
 80004ba:	f8ad 200c 	strh.w	r2, [sp, #12]
 80004be:	f8ad 2012 	strh.w	r2, [sp, #18]
 80004c2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80004c6:	f8ad 1018 	strh.w	r1, [sp, #24]
 80004ca:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80004ce:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80004d2:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 80004d6:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80004da:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80004de:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80004e2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80004e6:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 80004ea:	f240 71e5 	movw	r1, #2021	; 0x7e5
 80004ee:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 80004f2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80004f6:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80004fa:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 80004fe:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8000502:	f8ad 5008 	strh.w	r5, [sp, #8]
 8000506:	f8ad 300e 	strh.w	r3, [sp, #14]
 800050a:	f8ad 4010 	strh.w	r4, [sp, #16]
 800050e:	f8ad 5016 	strh.w	r5, [sp, #22]
 8000512:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000516:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800051a:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 800051e:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 8000522:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
 8000526:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 800052a:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 800052e:	f8ad 701a 	strh.w	r7, [sp, #26]
 8000532:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 8000536:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 800053a:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 800053e:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8000542:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8000546:	f240 33ff 	movw	r3, #1023	; 0x3ff
			1022, 2022, 2021, 1022, 1016, 4016, 1021, 1021, 0},
			{}};
	volatile uint16_t i = 0;
	for(;;)
	{
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 800054a:	4c29      	ldr	r4, [pc, #164]	; (80005f0 <StartbuzzerrythmTask+0x178>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 800054c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8000550:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8000554:	4625      	mov	r5, r4
		{
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 8000556:	4e27      	ldr	r6, [pc, #156]	; (80005f4 <StartbuzzerrythmTask+0x17c>)
	uint16_t rythm[SONGNUM][SONGLENGTH]={{1013, 2013, 2015, 8000, 1015, 2015, 4000,
 8000558:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 800055c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000560:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8000564:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 8000568:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800056c:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 8000570:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 8000574:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8000578:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800057c:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 8000580:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 8000584:	f44f 637b 	mov.w	r3, #4016	; 0xfb0
 8000588:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 800058c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	volatile uint16_t i = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	f8ad 3006 	strh.w	r3, [sp, #6]
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 8000596:	2300      	movs	r3, #0
 8000598:	6820      	ldr	r0, [r4, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	4619      	mov	r1, r3
 800059e:	f004 fbc3 	bl	8004d28 <xQueueGenericReceive>
 80005a2:	2801      	cmp	r0, #1
 80005a4:	d11d      	bne.n	80005e2 <StartbuzzerrythmTask+0x16a>
			if(xQueueSend(buzzerQueueHandle,&rythm[0][i],0)==pdPASS)
 80005a6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80005aa:	2300      	movs	r3, #0
 80005ac:	a802      	add	r0, sp, #8
 80005ae:	b289      	uxth	r1, r1
 80005b0:	461a      	mov	r2, r3
 80005b2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80005b6:	6830      	ldr	r0, [r6, #0]
 80005b8:	f004 fa7c 	bl	8004ab4 <xQueueGenericSend>
 80005bc:	2801      	cmp	r0, #1
 80005be:	d10a      	bne.n	80005d6 <StartbuzzerrythmTask+0x15e>
			{
				i=i==SONGLENGTH-1?0:i+1;
 80005c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	2b31      	cmp	r3, #49	; 0x31
 80005c8:	d00f      	beq.n	80005ea <StartbuzzerrythmTask+0x172>
 80005ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80005ce:	3301      	adds	r3, #1
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	f8ad 3006 	strh.w	r3, [sp, #6]
			}
			xSemaphoreGive(buzzerMutexHandle);
 80005d6:	2300      	movs	r3, #0
 80005d8:	6828      	ldr	r0, [r5, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	f004 fa69 	bl	8004ab4 <xQueueGenericSend>
		}
		osDelay(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f003 feb1 	bl	800434a <osDelay>
		if(xSemaphoreTake(buzzerMutexHandle,0)==pdPASS)
 80005e8:	e7d5      	b.n	8000596 <StartbuzzerrythmTask+0x11e>
				i=i==SONGLENGTH-1?0:i+1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	e7f1      	b.n	80005d2 <StartbuzzerrythmTask+0x15a>
 80005ee:	bf00      	nop
 80005f0:	20003fa4 	.word	0x20003fa4
 80005f4:	20003f98 	.word	0x20003f98

080005f8 <StartbuzzertoneTask>:
	}
}

void StartbuzzertoneTask(void const * argument)
{
 80005f8:	b570      	push	{r4, r5, r6, lr}
	uint16_t tonedata;
#define timebase 1000  //60 per min
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 80005fa:	4c4b      	ldr	r4, [pc, #300]	; (8000728 <StartbuzzertoneTask+0x130>)
			392, 440, 493.88};
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
			415.30/4, 466.16/4};
	volatile float tonefreq = 0, time = 0;;
 80005fc:	2600      	movs	r6, #0
{
 80005fe:	ed2d 8b02 	vpush	{d8}
 8000602:	b090      	sub	sp, #64	; 0x40
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000606:	ad09      	add	r5, sp, #36	; 0x24
	volatile float tonefreq = 0, time = 0;;
 8000608:	9602      	str	r6, [sp, #8]
 800060a:	9603      	str	r6, [sp, #12]
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 800060c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800060e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000612:	340c      	adds	r4, #12
	const float tonetable_white[7] = {261.63, 293.66, 329.63, 349.23,
 8000614:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800061a:	ad04      	add	r5, sp, #16
 800061c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800061e:	6823      	ldr	r3, [r4, #0]
				if(black)
					tonefreq = tonetable_black[black-1] * num *2 ;
				else
					tonefreq = tonetable_white[white-1] * num *2;
				//ring
				SetbuzzerFreq(tonefreq);
 8000620:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 8000720 <StartbuzzertoneTask+0x128>
	const float tonetable_black[5] = {277.18, 311.13, 369.99,
 8000624:	602b      	str	r3, [r5, #0]
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 8000626:	4d41      	ldr	r5, [pc, #260]	; (800072c <StartbuzzertoneTask+0x134>)
		if(xQueueReceive(buzzerQueueHandle,&tonedata,10)==pdPASS)
 8000628:	4841      	ldr	r0, [pc, #260]	; (8000730 <StartbuzzertoneTask+0x138>)
 800062a:	220a      	movs	r2, #10
 800062c:	2300      	movs	r3, #0
 800062e:	f10d 0106 	add.w	r1, sp, #6
 8000632:	6800      	ldr	r0, [r0, #0]
 8000634:	f004 fb78 	bl	8004d28 <xQueueGenericReceive>
 8000638:	2801      	cmp	r0, #1
 800063a:	4602      	mov	r2, r0
 800063c:	4c3d      	ldr	r4, [pc, #244]	; (8000734 <StartbuzzertoneTask+0x13c>)
 800063e:	d168      	bne.n	8000712 <StartbuzzertoneTask+0x11a>
			xSemaphoreTake(buzzerMutexHandle,1);// take the mutex
 8000640:	2300      	movs	r3, #0
 8000642:	6828      	ldr	r0, [r5, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f004 fb6f 	bl	8004d28 <xQueueGenericReceive>
			time = tonedata/1000;
 800064a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	fbb1 f2f3 	udiv	r2, r1, r3
 8000656:	b290      	uxth	r0, r2
			black = (tonedata%1000)/100;
 8000658:	fb03 1212 	mls	r2, r3, r2, r1
			time = tonedata/1000;
 800065c:	ee07 0a90 	vmov	s15, r0
			black = (tonedata%1000)/100;
 8000660:	b292      	uxth	r2, r2
			time = tonedata/1000;
 8000662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000666:	edcd 7a03 	vstr	s15, [sp, #12]
			if((tonedata%1000) != 0)
 800066a:	2a00      	cmp	r2, #0
 800066c:	d04c      	beq.n	8000708 <StartbuzzertoneTask+0x110>
			black = (tonedata%1000)/100;
 800066e:	2064      	movs	r0, #100	; 0x64
			num = (tonedata%100)/10;
 8000670:	fbb1 f3f0 	udiv	r3, r1, r0
 8000674:	fb00 1313 	mls	r3, r0, r3, r1
			black = (tonedata%1000)/100;
 8000678:	fbb2 f2f0 	udiv	r2, r2, r0
			num = (tonedata%100)/10;
 800067c:	b29b      	uxth	r3, r3
 800067e:	200a      	movs	r0, #10
 8000680:	fbb3 f3f0 	udiv	r3, r3, r0
 8000684:	ee07 3a90 	vmov	s15, r3
 8000688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if(black)
 800068c:	b38a      	cbz	r2, 80006f2 <StartbuzzertoneTask+0xfa>
					tonefreq = tonetable_black[black-1] * num *2 ;
 800068e:	ab10      	add	r3, sp, #64	; 0x40
 8000690:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000694:	ed12 7a0d 	vldr	s14, [r2, #-52]	; 0xffffffcc
					tonefreq = tonetable_white[white-1] * num *2;
 8000698:	ee67 7a87 	vmul.f32	s15, s15, s14
				SetbuzzerFreq(tonefreq);
 800069c:	6823      	ldr	r3, [r4, #0]
 800069e:	2200      	movs	r2, #0
					tonefreq = tonetable_white[white-1] * num *2;
 80006a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006a4:	edcd 7a02 	vstr	s15, [sp, #8]
				SetbuzzerFreq(tonefreq);
 80006a8:	ed9d 6a02 	vldr	s12, [sp, #8]
 80006ac:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80006b0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80006b4:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80006b8:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
			else
			{
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
				tonefreq = 0;
			}
			if(time!=0)
 80006be:	eddd 7a03 	vldr	s15, [sp, #12]
 80006c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d00b      	beq.n	80006e4 <StartbuzzertoneTask+0xec>
				osDelay(500/time); //time is used to shorter the sound..
 80006cc:	ed9d 7a03 	vldr	s14, [sp, #12]
 80006d0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000738 <StartbuzzertoneTask+0x140>
 80006d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006dc:	ee17 0a90 	vmov	r0, s15
 80006e0:	f003 fe33 	bl	800434a <osDelay>
			xSemaphoreGive(buzzerMutexHandle);
 80006e4:	2300      	movs	r3, #0
 80006e6:	6828      	ldr	r0, [r5, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	f004 f9e2 	bl	8004ab4 <xQueueGenericSend>
 80006f0:	e79a      	b.n	8000628 <StartbuzzertoneTask+0x30>
			white  = tonedata%10;
 80006f2:	fbb1 f3f0 	udiv	r3, r1, r0
 80006f6:	fb00 1313 	mls	r3, r0, r3, r1
					tonefreq = tonetable_white[white-1] * num *2;
 80006fa:	aa10      	add	r2, sp, #64	; 0x40
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000702:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8000706:	e7c7      	b.n	8000698 <StartbuzzertoneTask+0xa0>
				htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000708:	6823      	ldr	r3, [r4, #0]
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
				tonefreq = 0;
 800070e:	9602      	str	r6, [sp, #8]
 8000710:	e7d5      	b.n	80006be <StartbuzzertoneTask+0xc6>
		}
		else
		{
			htim2.Instance->CCR1=htim2.Instance->CCR1 = 0;
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
 8000718:	635a      	str	r2, [r3, #52]	; 0x34
 800071a:	e785      	b.n	8000628 <StartbuzzertoneTask+0x30>
 800071c:	f3af 8000 	nop.w
 8000720:	00000000 	.word	0x00000000
 8000724:	412e8480 	.word	0x412e8480
 8000728:	08005864 	.word	0x08005864
 800072c:	20003fa4 	.word	0x20003fa4
 8000730:	20003f98 	.word	0x20003f98
 8000734:	200040f4 	.word	0x200040f4
 8000738:	43fa0000 	.word	0x43fa0000

0800073c <SystemInitialization>:
extern uint8_t enchall_buff[5];
extern int32_t cur_u;
extern int32_t cur_v;

void SystemInitialization(void)
{
 800073c:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);

	/*
	 * tim1 pwm initialization
	 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800073e:	4c15      	ldr	r4, [pc, #84]	; (8000794 <SystemInitialization+0x58>)
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000740:	2100      	movs	r1, #0
 8000742:	4815      	ldr	r0, [pc, #84]	; (8000798 <SystemInitialization+0x5c>)
 8000744:	f002 fee4 	bl	8003510 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000748:	2100      	movs	r1, #0
 800074a:	4620      	mov	r0, r4
 800074c:	f002 fee0 	bl	8003510 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8000750:	2100      	movs	r1, #0
 8000752:	4620      	mov	r0, r4
 8000754:	f002 ff52 	bl	80035fc <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000758:	2104      	movs	r1, #4
 800075a:	4620      	mov	r0, r4
 800075c:	f002 fed8 	bl	8003510 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8000760:	2104      	movs	r1, #4
 8000762:	4620      	mov	r0, r4
 8000764:	f002 ff4a 	bl	80035fc <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000768:	2108      	movs	r1, #8
 800076a:	4620      	mov	r0, r4
 800076c:	f002 fed0 	bl	8003510 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8000770:	2108      	movs	r1, #8
 8000772:	4620      	mov	r0, r4
 8000774:	f002 ff42 	bl	80035fc <HAL_TIMEx_PWMN_Start>

	/*
	 * register the call back of uart4 transmit..
	 */
	//HAL_DMA_RegisterCallback(&hdma_uart4_rx,HAL_DMA_XFER_CPLTUART4_DMA2_Cplt_Callback);
	HAL_UART_Receive_DMA(&huart4,enchall_buff,5);
 8000778:	2205      	movs	r2, #5
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <SystemInitialization+0x60>)
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <SystemInitialization+0x64>)
 800077e:	f003 f84f 	bl	8003820 <HAL_UART_Receive_DMA>

	/*
	 * DFSDM initial
	 */
	//polling mode
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0);
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <SystemInitialization+0x68>)
 8000784:	f001 fa39 	bl	8001bfa <HAL_DFSDM_FilterRegularStart>
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <SystemInitialization+0x6c>)
	//DMA mode
//	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,&cur_u,1);
//	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,&cur_v,1);
}
 800078a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 800078e:	f001 ba34 	b.w	8001bfa <HAL_DFSDM_FilterRegularStart>
 8000792:	bf00      	nop
 8000794:	200040b4 	.word	0x200040b4
 8000798:	200040f4 	.word	0x200040f4
 800079c:	20003db4 	.word	0x20003db4
 80007a0:	200042e4 	.word	0x200042e4
 80007a4:	20003dbc 	.word	0x20003dbc
 80007a8:	20003f08 	.word	0x20003f08

080007ac <StartenchallTask>:
#include "cmsis_os.h"
#include "main.h"
extern osMessageQId enchallQueueHandle;

void StartenchallTask(void const * argument)
{
 80007ac:	b570      	push	{r4, r5, r6, lr}
  for(;;)
  {
	  ENCHD encdata;
	  uint8_t datatosend[50];
	  //We dont wanna read out and destory the data in the queue therefore use xQueuePeek
	  if(xQueuePeek(enchallQueueHandle,&encdata,0)==pdPASS)
 80007ae:	4c22      	ldr	r4, [pc, #136]	; (8000838 <StartenchallTask+0x8c>)
{
 80007b0:	b090      	sub	sp, #64	; 0x40
		  datatosend[++i] = encdata.enc_counter/10 + 0x30; //msb unit
		  datatosend[++i] = encdata.enc_counter%10 + 0x30; //lsb unit
		  datatosend[++i] = '\t';
		  datatosend[++i] = '\r';
		  datatosend[++i] = '\n';
		  HAL_UART_Transmit(&huart1,datatosend,i,10);
 80007b2:	4d22      	ldr	r5, [pc, #136]	; (800083c <StartenchallTask+0x90>)
	  if(xQueuePeek(enchallQueueHandle,&encdata,0)==pdPASS)
 80007b4:	2301      	movs	r3, #1
 80007b6:	2200      	movs	r2, #0
 80007b8:	a901      	add	r1, sp, #4
 80007ba:	6820      	ldr	r0, [r4, #0]
 80007bc:	f004 fab4 	bl	8004d28 <xQueueGenericReceive>
 80007c0:	2801      	cmp	r0, #1
 80007c2:	d134      	bne.n	800082e <StartenchallTask+0x82>
		  datatosend[i] = encdata.mseq_out + 0x30;//1bit
 80007c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
		  datatosend[++i] = '\t';
 80007c8:	2109      	movs	r1, #9
		  datatosend[++i] = encdata.enc_counter/10 + 0x30; //msb unit
 80007ca:	f89d 0008 	ldrb.w	r0, [sp, #8]
		  datatosend[i] = encdata.mseq_out + 0x30;//1bit
 80007ce:	3330      	adds	r3, #48	; 0x30
		  datatosend[++i] = '\t';
 80007d0:	f88d 100e 	strb.w	r1, [sp, #14]
		  datatosend[++i] = '\t';
 80007d4:	f88d 1010 	strb.w	r1, [sp, #16]
		  datatosend[i] = encdata.mseq_out + 0x30;//1bit
 80007d8:	f88d 300c 	strb.w	r3, [sp, #12]
		  datatosend[++i] = encdata.auxbit_in + 0x30;//1bit
 80007dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
		  datatosend[++i] = '\t';
 80007e0:	f88d 1012 	strb.w	r1, [sp, #18]
		  datatosend[++i] = encdata.auxbit_in + 0x30;//1bit
 80007e4:	3330      	adds	r3, #48	; 0x30
		  datatosend[++i] = '\t';
 80007e6:	f88d 1015 	strb.w	r1, [sp, #21]
		  HAL_UART_Transmit(&huart1,datatosend,i,10);
 80007ea:	a903      	add	r1, sp, #12
		  datatosend[++i] = encdata.auxbit_in + 0x30;//1bit
 80007ec:	f88d 300d 	strb.w	r3, [sp, #13]
		  datatosend[++i] = encdata.hole_in + 0x30; //3bits
 80007f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80007f4:	3330      	adds	r3, #48	; 0x30
 80007f6:	f88d 300f 	strb.w	r3, [sp, #15]
		  datatosend[++i] = encdata.calc_tag + 0x30; //2bits
 80007fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80007fe:	3330      	adds	r3, #48	; 0x30
 8000800:	f88d 3011 	strb.w	r3, [sp, #17]
		  datatosend[++i] = encdata.enc_counter/10 + 0x30; //msb unit
 8000804:	230a      	movs	r3, #10
 8000806:	fbb0 f2f3 	udiv	r2, r0, r3
 800080a:	f102 0630 	add.w	r6, r2, #48	; 0x30
		  datatosend[++i] = encdata.enc_counter%10 + 0x30; //lsb unit
 800080e:	fb03 0212 	mls	r2, r3, r2, r0
		  HAL_UART_Transmit(&huart1,datatosend,i,10);
 8000812:	4628      	mov	r0, r5
		  datatosend[++i] = '\n';
 8000814:	f88d 3017 	strb.w	r3, [sp, #23]
		  datatosend[++i] = encdata.enc_counter%10 + 0x30; //lsb unit
 8000818:	3230      	adds	r2, #48	; 0x30
		  datatosend[++i] = encdata.enc_counter/10 + 0x30; //msb unit
 800081a:	f88d 6013 	strb.w	r6, [sp, #19]
		  datatosend[++i] = encdata.enc_counter%10 + 0x30; //lsb unit
 800081e:	f88d 2014 	strb.w	r2, [sp, #20]
		  datatosend[++i] = '\r';
 8000822:	220d      	movs	r2, #13
 8000824:	f88d 2016 	strb.w	r2, [sp, #22]
		  HAL_UART_Transmit(&huart1,datatosend,i,10);
 8000828:	220b      	movs	r2, #11
 800082a:	f003 f89d 	bl	8003968 <HAL_UART_Transmit>
	  }
	  //every 5 mini
	  osDelay(100);
 800082e:	2064      	movs	r0, #100	; 0x64
 8000830:	f003 fd8b 	bl	800434a <osDelay>
  {
 8000834:	e7be      	b.n	80007b4 <StartenchallTask+0x8>
 8000836:	bf00      	nop
 8000838:	20003fa8 	.word	0x20003fa8
 800083c:	20004204 	.word	0x20004204

08000840 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000844:	482e      	ldr	r0, [pc, #184]	; (8000900 <MX_DFSDM1_Init+0xc0>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000846:	2400      	movs	r4, #0
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000848:	2501      	movs	r5, #1
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <MX_DFSDM1_Init+0xc4>)
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 800084c:	2602      	movs	r6, #2
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800084e:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 8000852:	f44f 7780 	mov.w	r7, #256	; 0x100
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000856:	7205      	strb	r5, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000858:	7245      	strb	r5, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800085a:	f8c0 801c 	str.w	r8, [r0, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 800085e:	6207      	str	r7, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 8000860:	6246      	str	r6, [r0, #36]	; 0x24
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000862:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000866:	f001 f939 	bl	8001adc <HAL_DFSDM_FilterInit>

  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 800086a:	4827      	ldr	r0, [pc, #156]	; (8000908 <MX_DFSDM1_Init+0xc8>)
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <MX_DFSDM1_Init+0xcc>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800086e:	7205      	strb	r5, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000870:	7245      	strb	r5, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000872:	f8c0 801c 	str.w	r8, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
 8000876:	6207      	str	r7, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
 8000878:	6246      	str	r6, [r0, #36]	; 0x24
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800087a:	e880 0018 	stmia.w	r0, {r3, r4}
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 800087e:	f001 f92d 	bl	8001adc <HAL_DFSDM_FilterInit>

  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000882:	4823      	ldr	r0, [pc, #140]	; (8000910 <MX_DFSDM1_Init+0xd0>)
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_DFSDM1_Init+0xd4>)
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000886:	7104      	strb	r4, [r0, #4]
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000888:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800088a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800088e:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000890:	60c6      	str	r6, [r0, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000892:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000894:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000896:	6184      	str	r4, [r0, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000898:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800089a:	6204      	str	r4, [r0, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 800089c:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800089e:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80008a0:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80008a2:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80008a4:	f001 f8a6 	bl	80019f4 <HAL_DFSDM_ChannelInit>
 80008a8:	b118      	cbz	r0, 80008b2 <MX_DFSDM1_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 80008aa:	2168      	movs	r1, #104	; 0x68
 80008ac:	481a      	ldr	r0, [pc, #104]	; (8000918 <MX_DFSDM1_Init+0xd8>)
 80008ae:	f000 fba1 	bl	8000ff4 <_Error_Handler>
  }

  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80008b2:	481a      	ldr	r0, [pc, #104]	; (800091c <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 80008b4:	2202      	movs	r2, #2
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_DFSDM1_Init+0xe0>)
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 80008b8:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80008ba:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80008be:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 80008c0:	2300      	movs	r3, #0
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 80008c2:	6242      	str	r2, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80008c4:	2201      	movs	r2, #1
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 80008c6:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008c8:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008ca:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008cc:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008ce:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008d0:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008d2:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80008d4:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 80008d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 80008d8:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 80008da:	f001 f88b 	bl	80019f4 <HAL_DFSDM_ChannelInit>
 80008de:	b118      	cbz	r0, 80008e8 <MX_DFSDM1_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80008e0:	217a      	movs	r1, #122	; 0x7a
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_DFSDM1_Init+0xd8>)
 80008e4:	f000 fb86 	bl	8000ff4 <_Error_Handler>
  }

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 80008e8:	2201      	movs	r2, #1
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_DFSDM1_Init+0xc0>)
 80008ec:	4611      	mov	r1, r2
 80008ee:	f001 f967 	bl	8001bc0 <HAL_DFSDM_FilterConfigRegChannel>

  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 80008f2:	2201      	movs	r2, #1
 80008f4:	490b      	ldr	r1, [pc, #44]	; (8000924 <MX_DFSDM1_Init+0xe4>)
 80008f6:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_DFSDM1_Init+0xc8>)

}
 80008f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON);
 80008fc:	f001 b960 	b.w	8001bc0 <HAL_DFSDM_FilterConfigRegChannel>
 8000900:	20003dbc 	.word	0x20003dbc
 8000904:	40017500 	.word	0x40017500
 8000908:	20003f08 	.word	0x20003f08
 800090c:	40017580 	.word	0x40017580
 8000910:	20003f5c 	.word	0x20003f5c
 8000914:	40017400 	.word	0x40017400
 8000918:	08005959 	.word	0x08005959
 800091c:	20003e10 	.word	0x20003e10
 8000920:	40017460 	.word	0x40017460
 8000924:	00030008 	.word	0x00030008

08000928 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000928:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 800092a:	4c43      	ldr	r4, [pc, #268]	; (8000a38 <HAL_DFSDM_FilterMspInit+0x110>)
{
 800092c:	b087      	sub	sp, #28
 800092e:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d12a      	bne.n	800098c <HAL_DFSDM_FilterMspInit+0x64>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000936:	4a41      	ldr	r2, [pc, #260]	; (8000a3c <HAL_DFSDM_FilterMspInit+0x114>)
 8000938:	6813      	ldr	r3, [r2, #0]
 800093a:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800093c:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800093e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000940:	d109      	bne.n	8000956 <HAL_DFSDM_FilterMspInit+0x2e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <HAL_DFSDM_FilterMspInit+0x118>)
 8000944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000946:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800094a:	645a      	str	r2, [r3, #68]	; 0x44
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	9b00      	ldr	r3, [sp, #0]
    PE4     ------> DFSDM1_DATIN3
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000956:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800095e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000960:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000962:	4838      	ldr	r0, [pc, #224]	; (8000a44 <HAL_DFSDM_FilterMspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000964:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096c:	f001 fb32 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000970:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000972:	a901      	add	r1, sp, #4
 8000974:	4834      	ldr	r0, [pc, #208]	; (8000a48 <HAL_DFSDM_FilterMspInit+0x120>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000976:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000978:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800097c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000982:	f001 fb27 	bl	8001fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000986:	6823      	ldr	r3, [r4, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800098c:	682a      	ldr	r2, [r5, #0]
 800098e:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <HAL_DFSDM_FilterMspInit+0x124>)
 8000990:	429a      	cmp	r2, r3
 8000992:	d125      	bne.n	80009e0 <HAL_DFSDM_FilterMspInit+0xb8>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000994:	4c2e      	ldr	r4, [pc, #184]	; (8000a50 <HAL_DFSDM_FilterMspInit+0x128>)
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000996:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800099a:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800099e:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80009a4:	3310      	adds	r3, #16
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80009a6:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009a8:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80009ae:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80009b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009b4:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80009b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80009ba:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009bc:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80009be:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c4:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c6:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009c8:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009ca:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80009cc:	f001 f976 	bl	8001cbc <HAL_DMA_Init>
 80009d0:	b118      	cbz	r0, 80009da <HAL_DFSDM_FilterMspInit+0xb2>
    {
      _Error_Handler(__FILE__, __LINE__);
 80009d2:	21bf      	movs	r1, #191	; 0xbf
 80009d4:	481f      	ldr	r0, [pc, #124]	; (8000a54 <HAL_DFSDM_FilterMspInit+0x12c>)
 80009d6:	f000 fb0d 	bl	8000ff4 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80009da:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80009dc:	62ac      	str	r4, [r5, #40]	; 0x28
 80009de:	63a5      	str	r5, [r4, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 80009e0:	682a      	ldr	r2, [r5, #0]
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <HAL_DFSDM_FilterMspInit+0x130>)
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d125      	bne.n	8000a34 <HAL_DFSDM_FilterMspInit+0x10c>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80009e8:	4c1c      	ldr	r4, [pc, #112]	; (8000a5c <HAL_DFSDM_FilterMspInit+0x134>)
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80009ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80009ee:	f503 436e 	add.w	r3, r3, #60928	; 0xee00
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80009f2:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80009f8:	33a8      	adds	r3, #168	; 0xa8
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80009fa:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009fc:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 8000a02:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000a04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a08:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000a0e:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a10:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000a12:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a18:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1a:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a1c:	6222      	str	r2, [r4, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a1e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000a20:	f001 f94c 	bl	8001cbc <HAL_DMA_Init>
 8000a24:	b118      	cbz	r0, 8000a2e <HAL_DFSDM_FilterMspInit+0x106>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000a26:	21d6      	movs	r1, #214	; 0xd6
 8000a28:	480a      	ldr	r0, [pc, #40]	; (8000a54 <HAL_DFSDM_FilterMspInit+0x12c>)
 8000a2a:	f000 fae3 	bl	8000ff4 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000a2e:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000a30:	62ac      	str	r4, [r5, #40]	; 0x28
 8000a32:	63a5      	str	r5, [r4, #56]	; 0x38
  }

}
 8000a34:	b007      	add	sp, #28
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a38:	2000003c 	.word	0x2000003c
 8000a3c:	20000040 	.word	0x20000040
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	40017500 	.word	0x40017500
 8000a50:	20003ea8 	.word	0x20003ea8
 8000a54:	08005959 	.word	0x08005959
 8000a58:	40017580 	.word	0x40017580
 8000a5c:	20003e48 	.word	0x20003e48

08000a60 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000a60:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 8000a62:	4c19      	ldr	r4, [pc, #100]	; (8000ac8 <HAL_DFSDM_ChannelMspInit+0x68>)
{
 8000a64:	b086      	sub	sp, #24
  if(DFSDM1_Init == 0)
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d12a      	bne.n	8000ac2 <HAL_DFSDM_ChannelMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a6c:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_DFSDM_ChannelMspInit+0x6c>)
 8000a6e:	6813      	ldr	r3, [r2, #0]
 8000a70:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a72:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a74:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a76:	d109      	bne.n	8000a8c <HAL_DFSDM_ChannelMspInit+0x2c>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_DFSDM_ChannelMspInit+0x70>)
 8000a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a7c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a80:	645a      	str	r2, [r3, #68]	; 0x44
 8000a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	9b00      	ldr	r3, [sp, #0]
    PE4     ------> DFSDM1_DATIN3
    PE5     ------> DFSDM1_CKIN3
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a8c:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a92:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a94:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000a96:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a98:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <HAL_DFSDM_ChannelMspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000a9a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa2:	f001 fa97 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000aa6:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa8:	a901      	add	r1, sp, #4
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <HAL_DFSDM_ChannelMspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000aac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000aae:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ab2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f001 fa8c 	bl	8001fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	6023      	str	r3, [r4, #0]
  }
}
 8000ac2:	b006      	add	sp, #24
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000003c 	.word	0x2000003c
 8000acc:	20000040 	.word	0x20000040
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40020c00 	.word	0x40020c00

08000adc <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_DMA_Init+0x60>)
{
 8000ade:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000ae2:	2105      	movs	r1, #5
 8000ae4:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000aea:	631a      	str	r2, [r3, #48]	; 0x30
 8000aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000af2:	9200      	str	r2, [sp, #0]
 8000af4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000af8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000afe:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b0a:	f000 feb5 	bl	8001878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b0e:	200d      	movs	r0, #13
 8000b10:	f000 feea 	bl	80018e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2105      	movs	r1, #5
 8000b18:	2038      	movs	r0, #56	; 0x38
 8000b1a:	f000 fead 	bl	8001878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b1e:	2038      	movs	r0, #56	; 0x38
 8000b20:	f000 fee2 	bl	80018e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2105      	movs	r1, #5
 8000b28:	2039      	movs	r0, #57	; 0x39
 8000b2a:	f000 fea5 	bl	8001878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b2e:	2039      	movs	r0, #57	; 0x39
 8000b30:	f000 feda 	bl	80018e8 <HAL_NVIC_EnableIRQ>

}
 8000b34:	b003      	add	sp, #12
 8000b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	b0ad      	sub	sp, #180	; 0xb4
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of buzzerMutex */
  osMutexDef(buzzerMutex);
 8000b44:	2500      	movs	r5, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of enchallTask */
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000b46:	4c4b      	ldr	r4, [pc, #300]	; (8000c74 <MX_FREERTOS_Init+0x134>)
  osMutexDef(buzzerMutex);
 8000b48:	a82c      	add	r0, sp, #176	; 0xb0
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000b4a:	ae09      	add	r6, sp, #36	; 0x24
 8000b4c:	4627      	mov	r7, r4
  osMutexDef(buzzerMutex);
 8000b4e:	f840 5db0 	str.w	r5, [r0, #-176]!
  buzzerMutexHandle = osMutexCreate(osMutex(buzzerMutex));
 8000b52:	f003 fc02 	bl	800435a <osMutexCreate>
 8000b56:	4b48      	ldr	r3, [pc, #288]	; (8000c78 <MX_FREERTOS_Init+0x138>)
 8000b58:	6018      	str	r0, [r3, #0]
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000b5a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000b5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b5e:	683b      	ldr	r3, [r7, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000b60:	4629      	mov	r1, r5
 8000b62:	a809      	add	r0, sp, #36	; 0x24

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 8000b64:	f104 0714 	add.w	r7, r4, #20
  osThreadDef(enchallTask, StartenchallTask, osPriorityNormal, 0, 128);
 8000b68:	6033      	str	r3, [r6, #0]
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000b6a:	f003 fbd6 	bl	800431a <osThreadCreate>
 8000b6e:	4b43      	ldr	r3, [pc, #268]	; (8000c7c <MX_FREERTOS_Init+0x13c>)
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 8000b70:	ae0e      	add	r6, sp, #56	; 0x38
  enchallTaskHandle = osThreadCreate(osThread(enchallTask), NULL);
 8000b72:	6018      	str	r0, [r3, #0]
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 8000b74:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000b76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b78:	683b      	ldr	r3, [r7, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	a80e      	add	r0, sp, #56	; 0x38

  /* definition and creation of ledblueTask */
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000b7e:	f104 0728 	add.w	r7, r4, #40	; 0x28
  osThreadDef(controlTask, StartcontrolTask, osPriorityAboveNormal, 0, 128);
 8000b82:	6033      	str	r3, [r6, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8000b84:	f003 fbc9 	bl	800431a <osThreadCreate>
 8000b88:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <MX_FREERTOS_Init+0x140>)
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000b8a:	ae13      	add	r6, sp, #76	; 0x4c
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8000b8c:	6018      	str	r0, [r3, #0]
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000b8e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000b90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b92:	683b      	ldr	r3, [r7, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000b94:	4629      	mov	r1, r5
 8000b96:	a813      	add	r0, sp, #76	; 0x4c

  /* definition and creation of ledgreenTask */
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000b98:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  osThreadDef(ledblueTask, StartledblueTask, osPriorityIdle, 0, 128);
 8000b9c:	6033      	str	r3, [r6, #0]
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000b9e:	f003 fbbc 	bl	800431a <osThreadCreate>
 8000ba2:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <MX_FREERTOS_Init+0x144>)
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000ba4:	ae18      	add	r6, sp, #96	; 0x60
  ledblueTaskHandle = osThreadCreate(osThread(ledblueTask), NULL);
 8000ba6:	6018      	str	r0, [r3, #0]
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000ba8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000baa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bac:	683b      	ldr	r3, [r7, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000bae:	4629      	mov	r1, r5
 8000bb0:	a818      	add	r0, sp, #96	; 0x60

  /* definition and creation of iwdgTask */
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000bb2:	f104 0750 	add.w	r7, r4, #80	; 0x50
  osThreadDef(ledgreenTask, StartledgreenTask, osPriorityIdle, 0, 128);
 8000bb6:	6033      	str	r3, [r6, #0]
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000bb8:	f003 fbaf 	bl	800431a <osThreadCreate>
 8000bbc:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <MX_FREERTOS_Init+0x148>)
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000bbe:	ae1d      	add	r6, sp, #116	; 0x74
  ledgreenTaskHandle = osThreadCreate(osThread(ledgreenTask), NULL);
 8000bc0:	6018      	str	r0, [r3, #0]
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000bc2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000bc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bc6:	683b      	ldr	r3, [r7, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000bc8:	4629      	mov	r1, r5
 8000bca:	a81d      	add	r0, sp, #116	; 0x74

  /* definition and creation of buzzertoneTask */
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000bcc:	f104 0764 	add.w	r7, r4, #100	; 0x64
  osThreadDef(iwdgTask, StartiwdgTask, osPriorityIdle, 0, 128);
 8000bd0:	6033      	str	r3, [r6, #0]
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000bd2:	f003 fba2 	bl	800431a <osThreadCreate>
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_FREERTOS_Init+0x14c>)
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000bd8:	ae22      	add	r6, sp, #136	; 0x88
  iwdgTaskHandle = osThreadCreate(osThread(iwdgTask), NULL);
 8000bda:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000bdc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000bde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000be0:	683b      	ldr	r3, [r7, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000be2:	4629      	mov	r1, r5
 8000be4:	a822      	add	r0, sp, #136	; 0x88

  /* definition and creation of buzzerrythmTask */
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000be6:	f104 0778 	add.w	r7, r4, #120	; 0x78
  osThreadDef(buzzertoneTask, StartbuzzertoneTask, osPriorityIdle, 0, 128);
 8000bea:	6033      	str	r3, [r6, #0]
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000bec:	f003 fb95 	bl	800431a <osThreadCreate>
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <MX_FREERTOS_Init+0x150>)
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000bf2:	ae27      	add	r6, sp, #156	; 0x9c
  buzzertoneTaskHandle = osThreadCreate(osThread(buzzertoneTask), NULL);
 8000bf4:	6018      	str	r0, [r3, #0]
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000bf6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000bf8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bfa:	683b      	ldr	r3, [r7, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	a827      	add	r0, sp, #156	; 0x9c
  osThreadDef(buzzerrythmTask, StartbuzzerrythmTask, osPriorityIdle, 0, 128);
 8000c00:	6033      	str	r3, [r6, #0]
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000c02:	f003 fb8a 	bl	800431a <osThreadCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of buzzerQueue */
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000c06:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  buzzerrythmTaskHandle = osThreadCreate(osThread(buzzerrythmTask), NULL);
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_FREERTOS_Init+0x154>)
 8000c0c:	6018      	str	r0, [r3, #0]
  osMessageQDef(buzzerQueue, 1, uint16_t);
 8000c0e:	ab01      	add	r3, sp, #4
 8000c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c14:	e883 0003 	stmia.w	r3, {r0, r1}
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000c18:	4629      	mov	r1, r5
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fba0 	bl	8004360 <osMessageCreate>

  /* definition and creation of rythmQueue */
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000c20:	f104 0294 	add.w	r2, r4, #148	; 0x94
  buzzerQueueHandle = osMessageCreate(osMessageQ(buzzerQueue), NULL);
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_FREERTOS_Init+0x158>)
 8000c26:	6018      	str	r0, [r3, #0]
  osMessageQDef(rythmQueue, 32, uint16_t);
 8000c28:	ab03      	add	r3, sp, #12
 8000c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c2e:	e883 0003 	stmia.w	r3, {r0, r1}
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8000c32:	4629      	mov	r1, r5
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fb93 	bl	8004360 <osMessageCreate>

  /* definition and creation of enchallQueue */
  osMessageQDef(enchallQueue, 1, ENCHD);
 8000c3a:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_FREERTOS_Init+0x15c>)
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);

  /* definition and creation of shuntQueue */
  osMessageQDef(shuntQueue, 1, CURDATA);
 8000c40:	34a4      	adds	r4, #164	; 0xa4
  rythmQueueHandle = osMessageCreate(osMessageQ(rythmQueue), NULL);
 8000c42:	6018      	str	r0, [r3, #0]
  osMessageQDef(enchallQueue, 1, ENCHD);
 8000c44:	ab05      	add	r3, sp, #20
 8000c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c4a:	e883 0003 	stmia.w	r3, {r0, r1}
  enchallQueueHandle = osMessageCreate(osMessageQ(enchallQueue), NULL);
 8000c4e:	4629      	mov	r1, r5
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 fb85 	bl	8004360 <osMessageCreate>
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_FREERTOS_Init+0x160>)
 8000c58:	6018      	str	r0, [r3, #0]
  osMessageQDef(shuntQueue, 1, CURDATA);
 8000c5a:	ab07      	add	r3, sp, #28
 8000c5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c60:	e883 0003 	stmia.w	r3, {r0, r1}
  shuntQueueHandle = osMessageCreate(osMessageQ(shuntQueue), NULL);
 8000c64:	4629      	mov	r1, r5
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 fb7a 	bl	8004360 <osMessageCreate>
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_FREERTOS_Init+0x164>)
 8000c6e:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  /* USER CODE END RTOS_QUEUES */
}
 8000c70:	b02d      	add	sp, #180	; 0xb4
 8000c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c74:	08005894 	.word	0x08005894
 8000c78:	20003fa4 	.word	0x20003fa4
 8000c7c:	20003fa0 	.word	0x20003fa0
 8000c80:	20003fac 	.word	0x20003fac
 8000c84:	20003fb4 	.word	0x20003fb4
 8000c88:	20003fb0 	.word	0x20003fb0
 8000c8c:	20003fbc 	.word	0x20003fbc
 8000c90:	20003f94 	.word	0x20003f94
 8000c94:	20003fc0 	.word	0x20003fc0
 8000c98:	20003f98 	.word	0x20003f98
 8000c9c:	20003f9c 	.word	0x20003f9c
 8000ca0:	20003fa8 	.word	0x20003fa8
 8000ca4:	20003fb8 	.word	0x20003fb8

08000ca8 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000caa:	210c      	movs	r1, #12
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cae:	f042 0210 	orr.w	r2, r2, #16
{
 8000cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb4:	631a      	str	r2, [r3, #48]	; 0x30
{
 8000cb6:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000cbc:	4c32      	ldr	r4, [pc, #200]	; (8000d88 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cbe:	f002 0210 	and.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cc2:	4f32      	ldr	r7, [pc, #200]	; (8000d8c <MX_GPIO_Init+0xe4>)
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000cc4:	4620      	mov	r0, r4
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8000cc6:	4e32      	ldr	r6, [pc, #200]	; (8000d90 <MX_GPIO_Init+0xe8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc8:	9201      	str	r2, [sp, #4]
 8000cca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8000cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000cda:	9202      	str	r2, [sp, #8]
 8000cdc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ce0:	f042 0204 	orr.w	r2, r2, #4
 8000ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ce8:	f002 0204 	and.w	r2, r2, #4
 8000cec:	9203      	str	r2, [sp, #12]
 8000cee:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cf2:	f042 0201 	orr.w	r2, r2, #1
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8000cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cfa:	f002 0201 	and.w	r2, r2, #1
 8000cfe:	9204      	str	r2, [sp, #16]
 8000d00:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d04:	f042 0202 	orr.w	r2, r2, #2
 8000d08:	631a      	str	r2, [r3, #48]	; 0x30
 8000d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d0c:	f002 0202 	and.w	r2, r2, #2
 8000d10:	9205      	str	r2, [sp, #20]
 8000d12:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d16:	f042 0208 	orr.w	r2, r2, #8
 8000d1a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	9306      	str	r3, [sp, #24]
 8000d26:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin, GPIO_PIN_RESET);
 8000d28:	f001 fa3e 	bl	80021a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d2c:	4638      	mov	r0, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d34:	f001 fa38 	bl	80021a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	2140      	movs	r1, #64	; 0x40
 8000d3e:	f001 fa33 	bl	80021a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000d42:	230c      	movs	r3, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d44:	a907      	add	r1, sp, #28
 8000d46:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin;
 8000d48:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d4a:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	9509      	str	r5, [sp, #36]	; 0x24

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d50:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d54:	f001 f93e 	bl	8001fd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	a907      	add	r1, sp, #28
 8000d5e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d62:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d64:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d68:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f001 f933 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000d6e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8000d70:	a907      	add	r1, sp, #28
 8000d72:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8000d76:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d78:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d7a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f001 f92a 	bl	8001fd4 <HAL_GPIO_Init>

}
 8000d80:	b00d      	add	sp, #52	; 0x34
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020400 	.word	0x40020400

08000d94 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000d94:	b508      	push	{r3, lr}

  hi2c4.Instance = I2C4;
 8000d96:	4815      	ldr	r0, [pc, #84]	; (8000dec <MX_I2C4_Init+0x58>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d98:	2201      	movs	r2, #1
  hi2c4.Init.Timing = 0x20404768;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_I2C4_Init+0x5c>)
 8000d9c:	4915      	ldr	r1, [pc, #84]	; (8000df4 <MX_I2C4_Init+0x60>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d9e:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.Timing = 0x20404768;
 8000da0:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c4.Init.OwnAddress1 = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	6083      	str	r3, [r0, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da8:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000daa:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dac:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000db2:	f001 fa02 	bl	80021ba <HAL_I2C_Init>
 8000db6:	b118      	cbz	r0, 8000dc0 <MX_I2C4_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000db8:	214c      	movs	r1, #76	; 0x4c
 8000dba:	480f      	ldr	r0, [pc, #60]	; (8000df8 <MX_I2C4_Init+0x64>)
 8000dbc:	f000 f91a 	bl	8000ff4 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	480a      	ldr	r0, [pc, #40]	; (8000dec <MX_I2C4_Init+0x58>)
 8000dc4:	f001 fa4a 	bl	800225c <HAL_I2CEx_ConfigAnalogFilter>
 8000dc8:	b118      	cbz	r0, 8000dd2 <MX_I2C4_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000dca:	2153      	movs	r1, #83	; 0x53
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <MX_I2C4_Init+0x64>)
 8000dce:	f000 f911 	bl	8000ff4 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_I2C4_Init+0x58>)
 8000dd6:	f001 fa67 	bl	80022a8 <HAL_I2CEx_ConfigDigitalFilter>
 8000dda:	b128      	cbz	r0, 8000de8 <MX_I2C4_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ddc:	215a      	movs	r1, #90	; 0x5a
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_I2C4_Init+0x64>)
  }

}
 8000de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000de4:	f000 b906 	b.w	8000ff4 <_Error_Handler>
 8000de8:	bd08      	pop	{r3, pc}
 8000dea:	bf00      	nop
 8000dec:	20003fc4 	.word	0x20003fc4
 8000df0:	20404768 	.word	0x20404768
 8000df4:	40006000 	.word	0x40006000
 8000df8:	080059c7 	.word	0x080059c7

08000dfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C4)
 8000dfe:	6802      	ldr	r2, [r0, #0]
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_I2C_MspInit+0x44>)
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d119      	bne.n	8000e3a <HAL_I2C_MspInit+0x3e>
  
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e06:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0a:	480e      	ldr	r0, [pc, #56]	; (8000e44 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e0c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0e:	2312      	movs	r3, #18
 8000e10:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e1a:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1c:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e20:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e22:	f001 f8d7 	bl	8001fd4 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_I2C_MspInit+0x4c>)
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000e3a:	b007      	add	sp, #28
 8000e3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e40:	40006000 	.word	0x40006000
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	40023800 	.word	0x40023800

08000e4c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <SystemClock_Config+0xc8>)
 8000e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	641a      	str	r2, [r3, #64]	; 0x40
{
 8000e58:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e5e:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2701      	movs	r7, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e66:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <SystemClock_Config+0xcc>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e78:	9707      	str	r7, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e80:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e8a:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e8c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e92:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e94:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e96:	23d8      	movs	r3, #216	; 0xd8
 8000e98:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f001 fae5 	bl	8002468 <HAL_RCC_OscConfig>
 8000e9e:	b100      	cbz	r0, 8000ea2 <SystemClock_Config+0x56>
 8000ea0:	e7fe      	b.n	8000ea0 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ea2:	f001 faa9 	bl	80023f8 <HAL_PWREx_EnableOverDrive>
 8000ea6:	b100      	cbz	r0, 8000eaa <SystemClock_Config+0x5e>
 8000ea8:	e7fe      	b.n	8000ea8 <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	260f      	movs	r6, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000eb2:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eb4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000eba:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebc:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebe:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec0:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ec2:	f001 fc8f 	bl	80027e4 <HAL_RCC_ClockConfig>
 8000ec6:	b100      	cbz	r0, 8000eca <SystemClock_Config+0x7e>
 8000ec8:	e7fe      	b.n	8000ec8 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <SystemClock_Config+0xd0>)
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000ecc:	9030      	str	r0, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000ece:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000ed0:	2310      	movs	r3, #16
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ed2:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed4:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000ed6:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000ed8:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000eda:	9725      	str	r7, [sp, #148]	; 0x94
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000edc:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_SYSCLK;
 8000ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ee2:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee4:	f001 fd52 	bl	800298c <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4605      	mov	r5, r0
 8000eea:	b100      	cbz	r0, 8000eee <SystemClock_Config+0xa2>
 8000eec:	e7fe      	b.n	8000eec <SystemClock_Config+0xa0>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000eee:	f001 fd09 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000efa:	f000 fd01 	bl	8001900 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000efe:	4620      	mov	r0, r4
 8000f00:	f000 fd14 	bl	800192c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000f04:	462a      	mov	r2, r5
 8000f06:	4631      	mov	r1, r6
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 fcb4 	bl	8001878 <HAL_NVIC_SetPriority>
}
 8000f10:	b039      	add	sp, #228	; 0xe4
 8000f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000
 8000f1c:	08022340 	.word	0x08022340

08000f20 <main>:
{
 8000f20:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f26:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <main+0xbc>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f38:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8000f42:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f46:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f4a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f4e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f52:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f56:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000f5a:	07a5      	lsls	r5, r4, #30
 8000f5c:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f5e:	ea02 0e06 	and.w	lr, r2, r6
 8000f62:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f64:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f66:	ea4e 0700 	orr.w	r7, lr, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8000f6a:	3901      	subs	r1, #1
 8000f6c:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f70:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 8000f74:	1c4f      	adds	r7, r1, #1
 8000f76:	d1f6      	bne.n	8000f66 <main+0x46>
 8000f78:	3a20      	subs	r2, #32
    } while(sets--);
 8000f7a:	f112 0f20 	cmn.w	r2, #32
 8000f7e:	d1ee      	bne.n	8000f5e <main+0x3e>
 8000f80:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f90:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f94:	f000 fc30 	bl	80017f8 <HAL_Init>
  SystemClock_Config();
 8000f98:	f7ff ff58 	bl	8000e4c <SystemClock_Config>
  MX_GPIO_Init();
 8000f9c:	f7ff fe84 	bl	8000ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa0:	f7ff fd9c 	bl	8000adc <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000fa4:	f7ff fc4c 	bl	8000840 <MX_DFSDM1_Init>
  MX_I2C4_Init();
 8000fa8:	f7ff fef4 	bl	8000d94 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000fac:	f000 f824 	bl	8000ff8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000fb0:	f000 f96c 	bl	800128c <MX_TIM1_Init>
  MX_UART4_Init();
 8000fb4:	f000 fa46 	bl	8001444 <MX_UART4_Init>
  MX_UART8_Init();
 8000fb8:	f000 fa6e 	bl	8001498 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000fbc:	f000 fa92 	bl	80014e4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000fc0:	f000 fab6 	bl	8001530 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000fc4:	f000 fb88 	bl	80016d8 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8000fc8:	f000 f9ea 	bl	80013a0 <MX_TIM2_Init>
  SystemInitialization();
 8000fcc:	f7ff fbb6 	bl	800073c <SystemInitialization>
  MX_FREERTOS_Init();
 8000fd0:	f7ff fdb6 	bl	8000b40 <MX_FREERTOS_Init>
  osKernelStart();
 8000fd4:	f003 f99c 	bl	8004310 <osKernelStart>
 8000fd8:	e7fe      	b.n	8000fd8 <main+0xb8>
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000fe0:	6802      	ldr	r2, [r0, #0]
 8000fe2:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d101      	bne.n	8000fec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000fe8:	f000 bc18 	b.w	800181c <HAL_IncTick>
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40000800 	.word	0x40000800

08000ff4 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000ff4:	e7fe      	b.n	8000ff4 <_Error_Handler>
	...

08000ff8 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8000ff8:	4812      	ldr	r0, [pc, #72]	; (8001044 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ffa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffe:	4912      	ldr	r1, [pc, #72]	; (8001048 <MX_SPI1_Init+0x50>)
{
 8001000:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001002:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001006:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100c:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001010:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001012:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001014:	2230      	movs	r2, #48	; 0x30
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001018:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800101a:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800101c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 800101e:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001020:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001022:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001024:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001026:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001028:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 800102a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800102e:	f001 ff3b 	bl	8002ea8 <HAL_SPI_Init>
 8001032:	b128      	cbz	r0, 8001040 <MX_SPI1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001034:	2151      	movs	r1, #81	; 0x51
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_SPI1_Init+0x54>)
  }

}
 8001038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800103c:	f7ff bfda 	b.w	8000ff4 <_Error_Handler>
 8001040:	bd08      	pop	{r3, pc}
 8001042:	bf00      	nop
 8001044:	20004010 	.word	0x20004010
 8001048:	40013000 	.word	0x40013000
 800104c:	080059da 	.word	0x080059da

08001050 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8001050:	6802      	ldr	r2, [r0, #0]
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_SPI_MspInit+0x58>)
 8001054:	429a      	cmp	r2, r3
{
 8001056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001058:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI1)
 800105a:	d122      	bne.n	80010a2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001068:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106a:	a901      	add	r1, sp, #4
 800106c:	480f      	ldr	r0, [pc, #60]	; (80010ac <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001084:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001086:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001088:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f000 ffa3 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800108e:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	a901      	add	r1, sp, #4
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001094:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800109c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f000 ff99 	bl	8001fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010a2:	b007      	add	sp, #28
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40013000 	.word	0x40013000
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40020400 	.word	0x40020400

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f000 fbcc 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	f06f 000b 	mvn.w	r0, #11
 80010c2:	4611      	mov	r1, r2
 80010c4:	f000 fbd8 	bl	8001878 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f06f 000a 	mvn.w	r0, #10
 80010ce:	4611      	mov	r1, r2
 80010d0:	f000 fbd2 	bl	8001878 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f06f 0009 	mvn.w	r0, #9
 80010da:	4611      	mov	r1, r2
 80010dc:	f000 fbcc 	bl	8001878 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f06f 0004 	mvn.w	r0, #4
 80010e6:	4611      	mov	r1, r2
 80010e8:	f000 fbc6 	bl	8001878 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f06f 0003 	mvn.w	r0, #3
 80010f2:	4611      	mov	r1, r2
 80010f4:	f000 fbc0 	bl	8001878 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	210f      	movs	r1, #15
 80010fc:	f06f 0001 	mvn.w	r0, #1
 8001100:	f000 fbba 	bl	8001878 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001110:	f000 bbb2 	b.w	8001878 <HAL_NVIC_SetPriority>

08001114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001116:	4601      	mov	r1, r0
{
 8001118:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800111a:	2200      	movs	r2, #0
 800111c:	201e      	movs	r0, #30
 800111e:	f000 fbab 	bl	8001878 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001122:	201e      	movs	r0, #30
 8001124:	f000 fbe0 	bl	80018e8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800112a:	a901      	add	r1, sp, #4
 800112c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 800112e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001130:	4c13      	ldr	r4, [pc, #76]	; (8001180 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001132:	f042 0204 	orr.w	r2, r2, #4
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001142:	f001 fc05 	bl	8002950 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001146:	f001 fbe3 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800114c:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 800114e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001150:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001154:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_InitTick+0x74>)
 8001158:	fbb0 f0f3 	udiv	r0, r0, r3
 800115c:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 800115e:	2300      	movs	r3, #0
  htim4.Init.Prescaler = uwPrescalerValue;
 8001160:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001162:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8001164:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001168:	f002 f83e 	bl	80031e8 <HAL_TIM_Base_Init>
 800116c:	b920      	cbnz	r0, 8001178 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800116e:	4620      	mov	r0, r4
 8001170:	f001 ff12 	bl	8002f98 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001174:	b008      	add	sp, #32
 8001176:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001178:	2001      	movs	r0, #1
 800117a:	e7fb      	b.n	8001174 <HAL_InitTick+0x60>
 800117c:	40023800 	.word	0x40023800
 8001180:	20004074 	.word	0x20004074
 8001184:	40000800 	.word	0x40000800
 8001188:	000f4240 	.word	0x000f4240

0800118c <NMI_Handler>:
 800118c:	4770      	bx	lr

0800118e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800118e:	e7fe      	b.n	800118e <HardFault_Handler>

08001190 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001190:	e7fe      	b.n	8001190 <MemManage_Handler>

08001192 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler>

08001194 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler>

08001196 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001196:	4770      	bx	lr

08001198 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001198:	f003 b8e6 	b.w	8004368 <osSystickHandler>

0800119c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800119c:	4801      	ldr	r0, [pc, #4]	; (80011a4 <DMA1_Stream2_IRQHandler+0x8>)
 800119e:	f000 be5b 	b.w	8001e58 <HAL_DMA_IRQHandler>
 80011a2:	bf00      	nop
 80011a4:	20004134 	.word	0x20004134

080011a8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011a8:	4801      	ldr	r0, [pc, #4]	; (80011b0 <TIM4_IRQHandler+0x8>)
 80011aa:	f001 bf05 	b.w	8002fb8 <HAL_TIM_IRQHandler>
 80011ae:	bf00      	nop
 80011b0:	20004074 	.word	0x20004074

080011b4 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011b4:	4801      	ldr	r0, [pc, #4]	; (80011bc <UART4_IRQHandler+0x8>)
 80011b6:	f002 bcb5 	b.w	8003b24 <HAL_UART_IRQHandler>
 80011ba:	bf00      	nop
 80011bc:	200042e4 	.word	0x200042e4

080011c0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80011c0:	4801      	ldr	r0, [pc, #4]	; (80011c8 <DMA2_Stream0_IRQHandler+0x8>)
 80011c2:	f000 be49 	b.w	8001e58 <HAL_DMA_IRQHandler>
 80011c6:	bf00      	nop
 80011c8:	20003ea8 	.word	0x20003ea8

080011cc <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 80011cc:	4801      	ldr	r0, [pc, #4]	; (80011d4 <DMA2_Stream1_IRQHandler+0x8>)
 80011ce:	f000 be43 	b.w	8001e58 <HAL_DMA_IRQHandler>
 80011d2:	bf00      	nop
 80011d4:	20003e48 	.word	0x20003e48

080011d8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80011d8:	6803      	ldr	r3, [r0, #0]
{
 80011da:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_TIM_Base_MspInit+0x40>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10b      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_TIM_Base_MspInit+0x44>)
 80011e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011e6:	f042 0201 	orr.w	r2, r2, #1
 80011ea:	645a      	str	r2, [r3, #68]	; 0x44
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011f6:	b002      	add	sp, #8
 80011f8:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 80011fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011fe:	d1fa      	bne.n	80011f6 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001200:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	9b01      	ldr	r3, [sp, #4]
}
 8001216:	e7ee      	b.n	80011f6 <HAL_TIM_Base_MspInit+0x1e>
 8001218:	40010000 	.word	0x40010000
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8001220:	6803      	ldr	r3, [r0, #0]
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_TIM_MspPostInit+0x60>)
 8001224:	4293      	cmp	r3, r2
{
 8001226:	b570      	push	{r4, r5, r6, lr}
 8001228:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 800122a:	d119      	bne.n	8001260 <HAL_TIM_MspPostInit+0x40>
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800122e:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001232:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	a901      	add	r1, sp, #4
 8001236:	4813      	ldr	r0, [pc, #76]	; (8001284 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001238:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001240:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f000 fec7 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8001246:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124a:	a901      	add	r1, sp, #4
 800124c:	480e      	ldr	r0, [pc, #56]	; (8001288 <HAL_TIM_MspPostInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 800124e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001256:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f000 febc 	bl	8001fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800125c:	b006      	add	sp, #24
 800125e:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM2)
 8001260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001264:	d1fa      	bne.n	800125c <HAL_TIM_MspPostInit+0x3c>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	a901      	add	r1, sp, #4
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800126e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001278:	2301      	movs	r3, #1
 800127a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800127c:	9305      	str	r3, [sp, #20]
 800127e:	e7eb      	b.n	8001258 <HAL_TIM_MspPostInit+0x38>
 8001280:	40010000 	.word	0x40010000
 8001284:	40020000 	.word	0x40020000
 8001288:	40021000 	.word	0x40021000

0800128c <MX_TIM1_Init>:
  htim1.Instance = TIM1;
 800128c:	4841      	ldr	r0, [pc, #260]	; (8001394 <MX_TIM1_Init+0x108>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800128e:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 8001290:	4b41      	ldr	r3, [pc, #260]	; (8001398 <MX_TIM1_Init+0x10c>)
{
 8001292:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 8001294:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001296:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001298:	6082      	str	r2, [r0, #8]
  htim1.Init.Period = 2160;
 800129a:	f44f 6207 	mov.w	r2, #2160	; 0x870
{
 800129e:	b09a      	sub	sp, #104	; 0x68
  htim1.Init.Prescaler = 0;
 80012a0:	6043      	str	r3, [r0, #4]
  htim1.Init.Period = 2160;
 80012a2:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a6:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012aa:	f001 ff9d 	bl	80031e8 <HAL_TIM_Base_Init>
 80012ae:	b118      	cbz	r0, 80012b8 <MX_TIM1_Init+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 80012b0:	214d      	movs	r1, #77	; 0x4d
 80012b2:	483a      	ldr	r0, [pc, #232]	; (800139c <MX_TIM1_Init+0x110>)
 80012b4:	f7ff fe9e 	bl	8000ff4 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b8:	a91a      	add	r1, sp, #104	; 0x68
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012be:	4835      	ldr	r0, [pc, #212]	; (8001394 <MX_TIM1_Init+0x108>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c4:	f002 f88a 	bl	80033dc <HAL_TIM_ConfigClockSource>
 80012c8:	b118      	cbz	r0, 80012d2 <MX_TIM1_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 80012ca:	2153      	movs	r1, #83	; 0x53
 80012cc:	4833      	ldr	r0, [pc, #204]	; (800139c <MX_TIM1_Init+0x110>)
 80012ce:	f7ff fe91 	bl	8000ff4 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012d2:	4830      	ldr	r0, [pc, #192]	; (8001394 <MX_TIM1_Init+0x108>)
 80012d4:	f001 ffa2 	bl	800321c <HAL_TIM_PWM_Init>
 80012d8:	b118      	cbz	r0, 80012e2 <MX_TIM1_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 80012da:	2158      	movs	r1, #88	; 0x58
 80012dc:	482f      	ldr	r0, [pc, #188]	; (800139c <MX_TIM1_Init+0x110>)
 80012de:	f7ff fe89 	bl	8000ff4 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e4:	a901      	add	r1, sp, #4
 80012e6:	482b      	ldr	r0, [pc, #172]	; (8001394 <MX_TIM1_Init+0x108>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012ea:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ee:	f002 f997 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	b118      	cbz	r0, 80012fc <MX_TIM1_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
 80012f4:	2160      	movs	r1, #96	; 0x60
 80012f6:	4829      	ldr	r0, [pc, #164]	; (800139c <MX_TIM1_Init+0x110>)
 80012f8:	f7ff fe7c 	bl	8000ff4 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fc:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fe:	2400      	movs	r4, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001300:	a908      	add	r1, sp, #32
 8001302:	4824      	ldr	r0, [pc, #144]	; (8001394 <MX_TIM1_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001304:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 580;
 8001306:	f44f 7311 	mov.w	r3, #580	; 0x244
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130a:	4622      	mov	r2, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130c:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.Pulse = 580;
 800130e:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001310:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001312:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001314:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001316:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	f002 f9ee 	bl	80036f8 <HAL_TIM_PWM_ConfigChannel>
 800131c:	b118      	cbz	r0, 8001326 <MX_TIM1_Init+0x9a>
    _Error_Handler(__FILE__, __LINE__);
 800131e:	216c      	movs	r1, #108	; 0x6c
 8001320:	481e      	ldr	r0, [pc, #120]	; (800139c <MX_TIM1_Init+0x110>)
 8001322:	f7ff fe67 	bl	8000ff4 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001326:	2204      	movs	r2, #4
 8001328:	a908      	add	r1, sp, #32
 800132a:	481a      	ldr	r0, [pc, #104]	; (8001394 <MX_TIM1_Init+0x108>)
  sConfigOC.Pulse = 0;
 800132c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132e:	f002 f9e3 	bl	80036f8 <HAL_TIM_PWM_ConfigChannel>
 8001332:	b118      	cbz	r0, 800133c <MX_TIM1_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 8001334:	2172      	movs	r1, #114	; 0x72
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <MX_TIM1_Init+0x110>)
 8001338:	f7ff fe5c 	bl	8000ff4 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800133c:	2208      	movs	r2, #8
 800133e:	a908      	add	r1, sp, #32
 8001340:	4814      	ldr	r0, [pc, #80]	; (8001394 <MX_TIM1_Init+0x108>)
 8001342:	f002 f9d9 	bl	80036f8 <HAL_TIM_PWM_ConfigChannel>
 8001346:	b118      	cbz	r0, 8001350 <MX_TIM1_Init+0xc4>
    _Error_Handler(__FILE__, __LINE__);
 8001348:	2177      	movs	r1, #119	; 0x77
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <MX_TIM1_Init+0x110>)
 800134c:	f7ff fe52 	bl	8000ff4 <_Error_Handler>
  sBreakDeadTimeConfig.DeadTime = 2;
 8001350:	2202      	movs	r2, #2
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001352:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001354:	a90f      	add	r1, sp, #60	; 0x3c
 8001356:	480f      	ldr	r0, [pc, #60]	; (8001394 <MX_TIM1_Init+0x108>)
  sBreakDeadTimeConfig.DeadTime = 2;
 8001358:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800135a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800135e:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001360:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001362:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001364:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001366:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001368:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.BreakFilter = 0;
 800136c:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800136e:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001370:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001372:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001376:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001378:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800137a:	f002 f977 	bl	800366c <HAL_TIMEx_ConfigBreakDeadTime>
 800137e:	b118      	cbz	r0, 8001388 <MX_TIM1_Init+0xfc>
    _Error_Handler(__FILE__, __LINE__);
 8001380:	2187      	movs	r1, #135	; 0x87
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM1_Init+0x110>)
 8001384:	f7ff fe36 	bl	8000ff4 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <MX_TIM1_Init+0x108>)
 800138a:	f7ff ff49 	bl	8001220 <HAL_TIM_MspPostInit>
}
 800138e:	b01a      	add	sp, #104	; 0x68
 8001390:	bd10      	pop	{r4, pc}
 8001392:	bf00      	nop
 8001394:	200040b4 	.word	0x200040b4
 8001398:	40010000 	.word	0x40010000
 800139c:	080059ed 	.word	0x080059ed

080013a0 <MX_TIM2_Init>:
  htim2.Instance = TIM2;
 80013a0:	4826      	ldr	r0, [pc, #152]	; (800143c <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 107;
 80013a2:	236b      	movs	r3, #107	; 0x6b
 80013a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 50000;
 80013a8:	f24c 3250 	movw	r2, #50000	; 0xc350
{
 80013ac:	b500      	push	{lr}
  htim2.Init.Prescaler = 107;
 80013ae:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	2300      	movs	r3, #0
{
 80013b4:	b08f      	sub	sp, #60	; 0x3c
  htim2.Init.Period = 50000;
 80013b6:	60c2      	str	r2, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ba:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013c0:	f001 ff12 	bl	80031e8 <HAL_TIM_Base_Init>
 80013c4:	b118      	cbz	r0, 80013ce <MX_TIM2_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 80013c6:	219c      	movs	r1, #156	; 0x9c
 80013c8:	481d      	ldr	r0, [pc, #116]	; (8001440 <MX_TIM2_Init+0xa0>)
 80013ca:	f7ff fe13 	bl	8000ff4 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ce:	a90e      	add	r1, sp, #56	; 0x38
 80013d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d4:	4819      	ldr	r0, [pc, #100]	; (800143c <MX_TIM2_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d6:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013da:	f001 ffff 	bl	80033dc <HAL_TIM_ConfigClockSource>
 80013de:	b118      	cbz	r0, 80013e8 <MX_TIM2_Init+0x48>
    _Error_Handler(__FILE__, __LINE__);
 80013e0:	21a2      	movs	r1, #162	; 0xa2
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_TIM2_Init+0xa0>)
 80013e4:	f7ff fe06 	bl	8000ff4 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e8:	4814      	ldr	r0, [pc, #80]	; (800143c <MX_TIM2_Init+0x9c>)
 80013ea:	f001 ff17 	bl	800321c <HAL_TIM_PWM_Init>
 80013ee:	b118      	cbz	r0, 80013f8 <MX_TIM2_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 80013f0:	21a7      	movs	r1, #167	; 0xa7
 80013f2:	4813      	ldr	r0, [pc, #76]	; (8001440 <MX_TIM2_Init+0xa0>)
 80013f4:	f7ff fdfe 	bl	8000ff4 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fa:	4669      	mov	r1, sp
 80013fc:	480f      	ldr	r0, [pc, #60]	; (800143c <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fe:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001402:	f002 f90d 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	b118      	cbz	r0, 8001410 <MX_TIM2_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
 8001408:	21ae      	movs	r1, #174	; 0xae
 800140a:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_TIM2_Init+0xa0>)
 800140c:	f7ff fdf2 	bl	8000ff4 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8001410:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001412:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001414:	a907      	add	r1, sp, #28
 8001416:	4809      	ldr	r0, [pc, #36]	; (800143c <MX_TIM2_Init+0x9c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001418:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800141a:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141c:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141e:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	f002 f96a 	bl	80036f8 <HAL_TIM_PWM_ConfigChannel>
 8001424:	b118      	cbz	r0, 800142e <MX_TIM2_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 8001426:	21b7      	movs	r1, #183	; 0xb7
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_TIM2_Init+0xa0>)
 800142a:	f7ff fde3 	bl	8000ff4 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <MX_TIM2_Init+0x9c>)
 8001430:	f7ff fef6 	bl	8001220 <HAL_TIM_MspPostInit>
}
 8001434:	b00f      	add	sp, #60	; 0x3c
 8001436:	f85d fb04 	ldr.w	pc, [sp], #4
 800143a:	bf00      	nop
 800143c:	200040f4 	.word	0x200040f4
 8001440:	080059ed 	.word	0x080059ed

08001444 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001444:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8001446:	4810      	ldr	r0, [pc, #64]	; (8001488 <MX_UART4_Init+0x44>)
  huart4.Init.BaudRate = 8000000;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_RX;
 8001448:	2204      	movs	r2, #4
  huart4.Init.BaudRate = 8000000;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_UART4_Init+0x48>)
 800144c:	f8df e044 	ldr.w	lr, [pc, #68]	; 8001494 <MX_UART4_Init+0x50>
  huart4.Init.Mode = UART_MODE_RX;
 8001450:	6142      	str	r2, [r0, #20]
  huart4.Init.BaudRate = 8000000;
 8001452:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	2300      	movs	r3, #0
 8001458:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800145a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800145c:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_MSBFIRST_INIT;
 8001464:	2390      	movs	r3, #144	; 0x90
 8001466:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	6383      	str	r3, [r0, #56]	; 0x38
  huart4.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 800146e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001472:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001474:	f002 fdcd 	bl	8004012 <HAL_UART_Init>
 8001478:	b128      	cbz	r0, 8001486 <MX_UART4_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800147a:	2154      	movs	r1, #84	; 0x54
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_UART4_Init+0x4c>)
  }

}
 800147e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001482:	f7ff bdb7 	b.w	8000ff4 <_Error_Handler>
 8001486:	bd08      	pop	{r3, pc}
 8001488:	200042e4 	.word	0x200042e4
 800148c:	40004c00 	.word	0x40004c00
 8001490:	08005a00 	.word	0x08005a00
 8001494:	007a1200 	.word	0x007a1200

08001498 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001498:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 800149a:	480e      	ldr	r0, [pc, #56]	; (80014d4 <MX_UART8_Init+0x3c>)
  huart8.Init.BaudRate = 26666666;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 800149c:	220c      	movs	r2, #12
  huart8.Init.BaudRate = 26666666;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_UART8_Init+0x40>)
 80014a0:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80014e0 <MX_UART8_Init+0x48>
  huart8.Init.Mode = UART_MODE_TX_RX;
 80014a4:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 80014a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart8.Init.BaudRate = 26666666;
 80014aa:	e880 4008 	stmia.w	r0, {r3, lr}
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	2300      	movs	r3, #0
  huart8.Init.OverSampling = UART_OVERSAMPLING_8;
 80014b0:	61c2      	str	r2, [r0, #28]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80014b4:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80014b6:	6103      	str	r3, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b8:	6183      	str	r3, [r0, #24]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ba:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014bc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80014be:	f002 fda8 	bl	8004012 <HAL_UART_Init>
 80014c2:	b128      	cbz	r0, 80014d0 <MX_UART8_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014c4:	2168      	movs	r1, #104	; 0x68
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_UART8_Init+0x44>)
  }

}
 80014c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80014cc:	f7ff bd92 	b.w	8000ff4 <_Error_Handler>
 80014d0:	bd08      	pop	{r3, pc}
 80014d2:	bf00      	nop
 80014d4:	20004274 	.word	0x20004274
 80014d8:	40007c00 	.word	0x40007c00
 80014dc:	08005a00 	.word	0x08005a00
 80014e0:	0196e6aa 	.word	0x0196e6aa

080014e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014e4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <MX_USART1_UART_Init+0x40>)
  huart1.Init.BaudRate = 921600;
 80014e8:	f44f 2e61 	mov.w	lr, #921600	; 0xe1000
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART1_UART_Init+0x44>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ee:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 921600;
 80014f0:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f6:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014fa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fc:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001502:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001504:	2310      	movs	r3, #16
 8001506:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150e:	f002 fd80 	bl	8004012 <HAL_UART_Init>
 8001512:	b128      	cbz	r0, 8001520 <MX_USART1_UART_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001514:	217e      	movs	r1, #126	; 0x7e
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART1_UART_Init+0x48>)
  }

}
 8001518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800151c:	f7ff bd6a 	b.w	8000ff4 <_Error_Handler>
 8001520:	bd08      	pop	{r3, pc}
 8001522:	bf00      	nop
 8001524:	20004204 	.word	0x20004204
 8001528:	40011000 	.word	0x40011000
 800152c:	08005a00 	.word	0x08005a00

08001530 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001530:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 26666666;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001534:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 26666666;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART3_UART_Init+0x40>)
 8001538:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8001578 <MX_USART3_UART_Init+0x48>
  huart3.Init.Mode = UART_MODE_TX_RX;
 800153c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 800153e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart3.Init.BaudRate = 26666666;
 8001542:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	2300      	movs	r3, #0
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8001548:	61c2      	str	r2, [r0, #28]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800154c:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800154e:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001550:	6183      	str	r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001554:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001556:	f002 fd5c 	bl	8004012 <HAL_UART_Init>
 800155a:	b128      	cbz	r0, 8001568 <MX_USART3_UART_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 800155c:	2193      	movs	r1, #147	; 0x93
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART3_UART_Init+0x44>)
  }

}
 8001560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001564:	f7ff bd46 	b.w	8000ff4 <_Error_Handler>
 8001568:	bd08      	pop	{r3, pc}
 800156a:	bf00      	nop
 800156c:	20004194 	.word	0x20004194
 8001570:	40004800 	.word	0x40004800
 8001574:	08005a00 	.word	0x08005a00
 8001578:	0196e6aa 	.word	0x0196e6aa

0800157c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 800157c:	6803      	ldr	r3, [r0, #0]
 800157e:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_UART_MspInit+0x130>)
 8001580:	4293      	cmp	r3, r2
{
 8001582:	b530      	push	{r4, r5, lr}
 8001584:	4605      	mov	r5, r0
 8001586:	b08b      	sub	sp, #44	; 0x2c
  if(uartHandle->Instance==UART4)
 8001588:	d13f      	bne.n	800160a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800158a:	4b49      	ldr	r3, [pc, #292]	; (80016b0 <HAL_UART_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	a905      	add	r1, sp, #20
 800158e:	4849      	ldr	r0, [pc, #292]	; (80016b4 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001590:	6c1a      	ldr	r2, [r3, #64]	; 0x40

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001592:	4c49      	ldr	r4, [pc, #292]	; (80016b8 <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001594:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2202      	movs	r2, #2
    __HAL_RCC_UART4_CLK_ENABLE();
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	2201      	movs	r2, #1
    __HAL_RCC_UART4_CLK_ENABLE();
 80015a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a6:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART4_CLK_ENABLE();
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ac:	2303      	movs	r3, #3
 80015ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015b2:	2308      	movs	r3, #8
 80015b4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f000 fd0d 	bl	8001fd4 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80015be:	483f      	ldr	r0, [pc, #252]	; (80016bc <HAL_UART_MspInit+0x140>)
 80015c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c4:	6122      	str	r2, [r4, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80015c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80015ca:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80015ce:	61e2      	str	r2, [r4, #28]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d0:	2300      	movs	r3, #0
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80015d6:	4620      	mov	r0, r4
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d8:	60a3      	str	r3, [r4, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015da:	60e3      	str	r3, [r4, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015dc:	6163      	str	r3, [r4, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015de:	61a3      	str	r3, [r4, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015e0:	6222      	str	r2, [r4, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e2:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80015e4:	f000 fb6a 	bl	8001cbc <HAL_DMA_Init>
 80015e8:	b118      	cbz	r0, 80015f2 <HAL_UART_MspInit+0x76>
    {
      _Error_Handler(__FILE__, __LINE__);
 80015ea:	21bd      	movs	r1, #189	; 0xbd
 80015ec:	4834      	ldr	r0, [pc, #208]	; (80016c0 <HAL_UART_MspInit+0x144>)
 80015ee:	f7ff fd01 	bl	8000ff4 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80015f2:	2034      	movs	r0, #52	; 0x34
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80015f4:	666c      	str	r4, [r5, #100]	; 0x64
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2105      	movs	r1, #5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80015fa:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80015fc:	f000 f93c 	bl	8001878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001600:	2034      	movs	r0, #52	; 0x34
 8001602:	f000 f971 	bl	80018e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001606:	b00b      	add	sp, #44	; 0x2c
 8001608:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==UART8)
 800160a:	4a2e      	ldr	r2, [pc, #184]	; (80016c4 <HAL_UART_MspInit+0x148>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d117      	bne.n	8001640 <HAL_UART_MspInit+0xc4>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001610:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001612:	a905      	add	r1, sp, #20
 8001614:	482c      	ldr	r0, [pc, #176]	; (80016c8 <HAL_UART_MspInit+0x14c>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8001616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001618:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2202      	movs	r2, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001624:	2201      	movs	r2, #1
    __HAL_RCC_UART8_CLK_ENABLE();
 8001626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART8_CLK_ENABLE();
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001630:	2303      	movs	r3, #3
 8001632:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001636:	2308      	movs	r3, #8
 8001638:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163a:	f000 fccb 	bl	8001fd4 <HAL_GPIO_Init>
}
 800163e:	e7e2      	b.n	8001606 <HAL_UART_MspInit+0x8a>
  else if(uartHandle->Instance==USART1)
 8001640:	4a22      	ldr	r2, [pc, #136]	; (80016cc <HAL_UART_MspInit+0x150>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d117      	bne.n	8001676 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	a905      	add	r1, sp, #20
 800164a:	481a      	ldr	r0, [pc, #104]	; (80016b4 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800164c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800164e:	f042 0210 	orr.w	r2, r2, #16
 8001652:	645a      	str	r2, [r3, #68]	; 0x44
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	9303      	str	r3, [sp, #12]
 800165c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800165e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001662:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001668:	2301      	movs	r3, #1
 800166a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001670:	2307      	movs	r3, #7
 8001672:	9309      	str	r3, [sp, #36]	; 0x24
 8001674:	e7e1      	b.n	800163a <HAL_UART_MspInit+0xbe>
  else if(uartHandle->Instance==USART3)
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <HAL_UART_MspInit+0x154>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d1c4      	bne.n	8001606 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167e:	a905      	add	r1, sp, #20
 8001680:	4814      	ldr	r0, [pc, #80]	; (80016d4 <HAL_UART_MspInit+0x158>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001684:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001694:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001698:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169e:	2301      	movs	r3, #1
 80016a0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a6:	2307      	movs	r3, #7
 80016a8:	9309      	str	r3, [sp, #36]	; 0x24
 80016aa:	e7c6      	b.n	800163a <HAL_UART_MspInit+0xbe>
 80016ac:	40004c00 	.word	0x40004c00
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	20004134 	.word	0x20004134
 80016bc:	40026040 	.word	0x40026040
 80016c0:	08005a00 	.word	0x08005a00
 80016c4:	40007c00 	.word	0x40007c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40011000 	.word	0x40011000
 80016d0:	40004800 	.word	0x40004800
 80016d4:	40020c00 	.word	0x40020c00

080016d8 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 80016d8:	b508      	push	{r3, lr}

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80016da:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_USB_OTG_HS_PCD_Init+0x38>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80016dc:	2309      	movs	r3, #9
 80016de:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <MX_USB_OTG_HS_PCD_Init+0x3c>)
 80016e0:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80016e4:	2300      	movs	r3, #0
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80016e6:	2201      	movs	r2, #1
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80016e8:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 80016ea:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80016ec:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80016ee:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80016f0:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80016f2:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80016f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80016f6:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80016f8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80016fa:	f000 fdfa 	bl	80022f2 <HAL_PCD_Init>
 80016fe:	b128      	cbz	r0, 800170c <MX_USB_OTG_HS_PCD_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001700:	214f      	movs	r1, #79	; 0x4f
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_USB_OTG_HS_PCD_Init+0x40>)
  }

}
 8001704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001708:	f7ff bc74 	b.w	8000ff4 <_Error_Handler>
 800170c:	bd08      	pop	{r3, pc}
 800170e:	bf00      	nop
 8001710:	20004354 	.word	0x20004354
 8001714:	40040000 	.word	0x40040000
 8001718:	08005a15 	.word	0x08005a15

0800171c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 800171c:	6802      	ldr	r2, [r0, #0]
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_PCD_MspInit+0x7c>)
 8001720:	429a      	cmp	r2, r3
{
 8001722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001724:	b089      	sub	sp, #36	; 0x24
  if(pcdHandle->Instance==USB_OTG_HS)
 8001726:	d135      	bne.n	8001794 <HAL_PCD_MspInit+0x78>
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001728:	230d      	movs	r3, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001730:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001732:	a903      	add	r1, sp, #12
 8001734:	4819      	ldr	r0, [pc, #100]	; (800179c <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001736:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800173e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f000 fc48 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001744:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	a903      	add	r1, sp, #12
 8001748:	4815      	ldr	r0, [pc, #84]	; (80017a0 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800174a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001752:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f000 fc3e 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8001758:	f643 4323 	movw	r3, #15395	; 0x3c23
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	a903      	add	r1, sp, #12
 800175e:	4811      	ldr	r0, [pc, #68]	; (80017a4 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8001760:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001768:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f000 fc33 	bl	8001fd4 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_PCD_MspInit+0x8c>)
 8001770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001772:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
 8001778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800177a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800177e:	9201      	str	r2, [sp, #4]
 8001780:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001784:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001794:	b009      	add	sp, #36	; 0x24
 8001796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001798:	40040000 	.word	0x40040000
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40023800 	.word	0x40023800

080017ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ac:	490f      	ldr	r1, [pc, #60]	; (80017ec <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017ae:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <SystemInit+0x44>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	f042 0201 	orr.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80017c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80017ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <SystemInit+0x48>)
 80017d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017de:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017e0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017e6:	608b      	str	r3, [r1, #8]
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	40023800 	.word	0x40023800
 80017f4:	24003010 	.word	0x24003010

080017f8 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x20>)
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fa:	2003      	movs	r0, #3
{
 80017fc:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80017fe:	6813      	ldr	r3, [r2, #0]
 8001800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001804:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001806:	f000 f825 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fc82 	bl	8001114 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001810:	f7ff fc50 	bl	80010b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001814:	2000      	movs	r0, #0
 8001816:	bd08      	pop	{r3, pc}
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800181c:	4a02      	ldr	r2, [pc, #8]	; (8001828 <HAL_IncTick+0xc>)
 800181e:	6813      	ldr	r3, [r2, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20004754 	.word	0x20004754

0800182c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800182c:	4b01      	ldr	r3, [pc, #4]	; (8001834 <HAL_GetTick+0x8>)
 800182e:	6818      	ldr	r0, [r3, #0]
}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20004754 	.word	0x20004754

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001838:	b513      	push	{r0, r1, r4, lr}
 800183a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800183c:	f7ff fff6 	bl	800182c <HAL_GetTick>
 8001840:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001842:	f7ff fff3 	bl	800182c <HAL_GetTick>
 8001846:	9b01      	ldr	r3, [sp, #4]
 8001848:	1b00      	subs	r0, r0, r4
 800184a:	4298      	cmp	r0, r3
 800184c:	d3f9      	bcc.n	8001842 <HAL_Delay+0xa>
  {
  }
}
 800184e:	b002      	add	sp, #8
 8001850:	bd10      	pop	{r4, pc}
	...

08001854 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001856:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800185a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001862:	041b      	lsls	r3, r3, #16
 8001864:	0c1b      	lsrs	r3, r3, #16
 8001866:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800186a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800186e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001870:	60d3      	str	r3, [r2, #12]
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b530      	push	{r4, r5, lr}
 800187c:	68dc      	ldr	r4, [r3, #12]
 800187e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001882:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	2b04      	cmp	r3, #4
 800188a:	bf28      	it	cs
 800188c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001894:	bf8c      	ite	hi
 8001896:	3c03      	subhi	r4, #3
 8001898:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800189e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80018a4:	ea01 0103 	and.w	r1, r1, r3
 80018a8:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	fa05 f404 	lsl.w	r4, r5, r4
 80018b0:	f104 34ff 	add.w	r4, r4, #4294967295
 80018b4:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	ea42 0201 	orr.w	r2, r2, r1
 80018bc:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 80018c0:	da05      	bge.n	80018ce <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	f000 000f 	and.w	r0, r0, #15
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_NVIC_SetPriority+0x6c>)
 80018ca:	541a      	strb	r2, [r3, r0]
 80018cc:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018d8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80018dc:	bd30      	pop	{r4, r5, pc}
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00
 80018e4:	e000ed14 	.word	0xe000ed14

080018e8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018e8:	0942      	lsrs	r2, r0, #5
 80018ea:	2301      	movs	r3, #1
 80018ec:	f000 001f 	and.w	r0, r0, #31
 80018f0:	fa03 f000 	lsl.w	r0, r3, r0
 80018f4:	4b01      	ldr	r3, [pc, #4]	; (80018fc <HAL_NVIC_EnableIRQ+0x14>)
 80018f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100

08001900 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	3801      	subs	r0, #1
 8001902:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001906:	d20a      	bcs.n	800191e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	21f0      	movs	r1, #240	; 0xf0
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800192e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	bf0c      	ite	eq
 8001934:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001938:	f022 0204 	bicne.w	r2, r2, #4
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	4770      	bx	lr
 8001940:	e000e010 	.word	0xe000e010

08001944 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001944:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001946:	6803      	ldr	r3, [r0, #0]
 8001948:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 800194c:	b93a      	cbnz	r2, 800195e <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001954:	601a      	str	r2, [r3, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001956:	2901      	cmp	r1, #1
 8001958:	d11c      	bne.n	8001994 <DFSDM_RegConvStart+0x50>
 800195a:	2302      	movs	r3, #2
 800195c:	e01b      	b.n	8001996 <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800195e:	681a      	ldr	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001960:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800196e:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001978:	d1ed      	bne.n	8001956 <DFSDM_RegConvStart+0x12>
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800197a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800197c:	b91a      	cbnz	r2, 8001986 <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f042 0202 	orr.w	r2, r2, #2
 8001984:	601a      	str	r2, [r3, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8001986:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800198a:	2b01      	cmp	r3, #1
 800198c:	bf0c      	ite	eq
 800198e:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 8001990:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001992:	6483      	str	r3, [r0, #72]	; 0x48
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001994:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001996:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 800199a:	4770      	bx	lr

0800199c <DFSDM_GetChannelFromInstance>:
  if(Instance == DFSDM1_Channel0)
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <DFSDM_GetChannelFromInstance+0x54>)
 800199e:	4298      	cmp	r0, r3
 80019a0:	d017      	beq.n	80019d2 <DFSDM_GetChannelFromInstance+0x36>
  else if(Instance == DFSDM1_Channel1)
 80019a2:	3320      	adds	r3, #32
 80019a4:	4298      	cmp	r0, r3
 80019a6:	d016      	beq.n	80019d6 <DFSDM_GetChannelFromInstance+0x3a>
  else if(Instance == DFSDM1_Channel2)
 80019a8:	3320      	adds	r3, #32
 80019aa:	4298      	cmp	r0, r3
 80019ac:	d015      	beq.n	80019da <DFSDM_GetChannelFromInstance+0x3e>
  else if(Instance == DFSDM1_Channel3)
 80019ae:	3320      	adds	r3, #32
 80019b0:	4298      	cmp	r0, r3
 80019b2:	d014      	beq.n	80019de <DFSDM_GetChannelFromInstance+0x42>
  else if(Instance == DFSDM1_Channel4)
 80019b4:	3320      	adds	r3, #32
 80019b6:	4298      	cmp	r0, r3
 80019b8:	d013      	beq.n	80019e2 <DFSDM_GetChannelFromInstance+0x46>
  else if(Instance == DFSDM1_Channel5)
 80019ba:	3320      	adds	r3, #32
 80019bc:	4298      	cmp	r0, r3
 80019be:	d012      	beq.n	80019e6 <DFSDM_GetChannelFromInstance+0x4a>
  else if(Instance == DFSDM1_Channel6)
 80019c0:	3320      	adds	r3, #32
 80019c2:	4298      	cmp	r0, r3
 80019c4:	d011      	beq.n	80019ea <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 80019c6:	3320      	adds	r3, #32
 80019c8:	4298      	cmp	r0, r3
 80019ca:	bf14      	ite	ne
 80019cc:	20ff      	movne	r0, #255	; 0xff
 80019ce:	2007      	moveq	r0, #7
 80019d0:	4770      	bx	lr
    channel = 0;
 80019d2:	2000      	movs	r0, #0
 80019d4:	4770      	bx	lr
    channel = 1;
 80019d6:	2001      	movs	r0, #1
 80019d8:	4770      	bx	lr
    channel = 2;
 80019da:	2002      	movs	r0, #2
 80019dc:	4770      	bx	lr
    channel = 3;
 80019de:	2003      	movs	r0, #3
 80019e0:	4770      	bx	lr
    channel = 4;
 80019e2:	2004      	movs	r0, #4
 80019e4:	4770      	bx	lr
    channel = 5;
 80019e6:	2005      	movs	r0, #5
 80019e8:	4770      	bx	lr
    channel = 6;
 80019ea:	2006      	movs	r0, #6
}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40017400 	.word	0x40017400

080019f4 <HAL_DFSDM_ChannelInit>:
{
 80019f4:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 80019f6:	4604      	mov	r4, r0
 80019f8:	2800      	cmp	r0, #0
 80019fa:	d067      	beq.n	8001acc <HAL_DFSDM_ChannelInit+0xd8>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80019fc:	4d34      	ldr	r5, [pc, #208]	; (8001ad0 <HAL_DFSDM_ChannelInit+0xdc>)
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	f7ff ffcc 	bl	800199c <DFSDM_GetChannelFromInstance>
 8001a04:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d15f      	bne.n	8001acc <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7ff f827 	bl	8000a60 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_DFSDM_ChannelInit+0xe0>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	3201      	adds	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d119      	bne.n	8001a54 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_DFSDM_ChannelInit+0xe4>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001a28:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68a1      	ldr	r1, [r4, #8]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001a38:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a3a:	7922      	ldrb	r2, [r4, #4]
 8001a3c:	2a01      	cmp	r2, #1
 8001a3e:	d105      	bne.n	8001a4c <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8001a40:	68e1      	ldr	r1, [r4, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	3901      	subs	r1, #1
 8001a46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001a4a:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a52:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001a54:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001a56:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001a58:	6803      	ldr	r3, [r0, #0]
 8001a5a:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8001a5e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001a60:	6923      	ldr	r3, [r4, #16]
 8001a62:	6802      	ldr	r2, [r0, #0]
 8001a64:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001a66:	69a1      	ldr	r1, [r4, #24]
 8001a68:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001a6a:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a70:	6803      	ldr	r3, [r0, #0]
 8001a72:	f023 030f 	bic.w	r3, r3, #15
 8001a76:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001a78:	69e3      	ldr	r3, [r4, #28]
 8001a7a:	6802      	ldr	r2, [r0, #0]
 8001a7c:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001a7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001a80:	4313      	orrs	r3, r2
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001a84:	6003      	str	r3, [r0, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a86:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a88:	6883      	ldr	r3, [r0, #8]
 8001a8a:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8001a8e:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001a90:	6883      	ldr	r3, [r0, #8]
 8001a92:	430b      	orrs	r3, r1
 8001a94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001a98:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001a9a:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a9c:	6843      	ldr	r3, [r0, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001aa4:	6843      	ldr	r3, [r0, #4]
 8001aa6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001aaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001aac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ab0:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001ab2:	6803      	ldr	r3, [r0, #0]
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab8:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001ac0:	f7ff ff6c 	bl	800199c <DFSDM_GetChannelFromInstance>
 8001ac4:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8001ac8:	2000      	movs	r0, #0
 8001aca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001acc:	2001      	movs	r0, #1
}
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
 8001ad0:	20000044 	.word	0x20000044
 8001ad4:	20000064 	.word	0x20000064
 8001ad8:	40017400 	.word	0x40017400

08001adc <HAL_DFSDM_FilterInit>:
{
 8001adc:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_filter == NULL)
 8001ade:	4604      	mov	r4, r0
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d069      	beq.n	8001bb8 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001ae4:	6802      	ldr	r2, [r0, #0]
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <HAL_DFSDM_FilterInit+0xe0>)
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d105      	bne.n	8001af8 <HAL_DFSDM_FilterInit+0x1c>
 8001aec:	6840      	ldr	r0, [r0, #4]
 8001aee:	2801      	cmp	r0, #1
 8001af0:	d063      	beq.n	8001bba <HAL_DFSDM_FilterInit+0xde>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001af2:	68e0      	ldr	r0, [r4, #12]
 8001af4:	2801      	cmp	r0, #1
 8001af6:	d060      	beq.n	8001bba <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001af8:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001afa:	2201      	movs	r2, #1
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001afc:	4620      	mov	r0, r4
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001afe:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001b00:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001b02:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001b04:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001b06:	f7fe ff0f 	bl	8000928 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001b12:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001b14:	7a22      	ldrb	r2, [r4, #8]
 8001b16:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	bf0c      	ite	eq
 8001b1c:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001b20:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8001b24:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001b26:	7a62      	ldrb	r2, [r4, #9]
 8001b28:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	bf0c      	ite	eq
 8001b2e:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001b32:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8001b36:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001b38:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001b3a:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001b3c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001b40:	2d02      	cmp	r5, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001b42:	f022 0208 	bic.w	r2, r2, #8
 8001b46:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001b48:	d103      	bne.n	8001b52 <HAL_DFSDM_FilterInit+0x76>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	6961      	ldr	r1, [r4, #20]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001b52:	7c20      	ldrb	r0, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001b54:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001b56:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001b58:	bf0c      	ite	eq
 8001b5a:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001b5e:	f022 0210 	bicne.w	r2, r2, #16
 8001b62:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001b64:	7c62      	ldrb	r2, [r4, #17]
 8001b66:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	bf0c      	ite	eq
 8001b6c:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001b70:	f022 0220 	bicne.w	r2, r2, #32
 8001b74:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8001b7c:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001b80:	615a      	str	r2, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8001b82:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b84:	6959      	ldr	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8001b86:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	69e1      	ldr	r1, [r4, #28]
 8001b8c:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8001b8e:	6a21      	ldr	r1, [r4, #32]
 8001b90:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b96:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001b98:	6862      	ldr	r2, [r4, #4]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001b9a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001b9e:	2000      	movs	r0, #0
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001ba0:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001ba2:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001ba4:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001ba6:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8001bb6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001bb8:	2001      	movs	r0, #1
}
 8001bba:	bd38      	pop	{r3, r4, r5, pc}
 8001bbc:	40017500 	.word	0x40017500

08001bc0 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001bc0:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2bfd      	cmp	r3, #253	; 0xfd
{
 8001bca:	b510      	push	{r4, lr}
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001bcc:	d813      	bhi.n	8001bf6 <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001bce:	6803      	ldr	r3, [r0, #0]
 8001bd0:	0209      	lsls	r1, r1, #8
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001bd2:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001bd4:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001bd6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001bda:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001bde:	bf08      	it	eq
 8001be0:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001be4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001be8:	601c      	str	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001bea:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001bec:	4321      	orrs	r1, r4
 8001bee:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001bf0:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001bf6:	2001      	movs	r0, #1
}
 8001bf8:	bd10      	pop	{r4, pc}

08001bfa <HAL_DFSDM_FilterRegularStart>:
{
 8001bfa:	b508      	push	{r3, lr}
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001bfc:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001c00:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d103      	bne.n	8001c10 <HAL_DFSDM_FilterRegularStart+0x16>
    DFSDM_RegConvStart(hdfsdm_filter);
 8001c08:	f7ff fe9c 	bl	8001944 <DFSDM_RegConvStart>
  HAL_StatusTypeDef status = HAL_OK;
 8001c0c:	2000      	movs	r0, #0
    DFSDM_RegConvStart(hdfsdm_filter);
 8001c0e:	bd08      	pop	{r3, pc}
    status = HAL_ERROR;
 8001c10:	2001      	movs	r0, #1
}
 8001c12:	bd08      	pop	{r3, pc}

08001c14 <HAL_DFSDM_FilterGetRegularValue>:
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8001c14:	6803      	ldr	r3, [r0, #0]
 8001c16:	69d8      	ldr	r0, [r3, #28]
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8001c18:	f000 0307 	and.w	r3, r0, #7
}
 8001c1c:	1200      	asrs	r0, r0, #8
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8001c1e:	600b      	str	r3, [r1, #0]
}
 8001c20:	4770      	bx	lr

08001c22 <HAL_DFSDM_FilterErrorCallback>:
{
 8001c22:	4770      	bx	lr

08001c24 <HAL_DFSDM_FilterPollForRegConversion>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001c24:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001c28:	2b02      	cmp	r3, #2
{
 8001c2a:	b570      	push	{r4, r5, r6, lr}
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	460d      	mov	r5, r1
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001c30:	d001      	beq.n	8001c36 <HAL_DFSDM_FilterPollForRegConversion+0x12>
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d12a      	bne.n	8001c8c <HAL_DFSDM_FilterPollForRegConversion+0x68>
    tickstart = HAL_GetTick();  
 8001c36:	f7ff fdf9 	bl	800182c <HAL_GetTick>
 8001c3a:	4606      	mov	r6, r0
    while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	0792      	lsls	r2, r2, #30
 8001c42:	d518      	bpl.n	8001c76 <HAL_DFSDM_FilterPollForRegConversion+0x52>
    if((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	071b      	lsls	r3, r3, #28
 8001c48:	d507      	bpl.n	8001c5a <HAL_DFSDM_FilterPollForRegConversion+0x36>
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001c4a:	2301      	movs	r3, #1
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001c4c:	4620      	mov	r0, r4
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001c4e:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001c50:	f7ff ffe7 	bl	8001c22 <HAL_DFSDM_FilterErrorCallback>
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	2208      	movs	r2, #8
 8001c58:	60da      	str	r2, [r3, #12]
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001c5c:	b948      	cbnz	r0, 8001c72 <HAL_DFSDM_FilterPollForRegConversion+0x4e>
 8001c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c60:	b943      	cbnz	r3, 8001c74 <HAL_DFSDM_FilterPollForRegConversion+0x50>
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001c62:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8001c66:	2a02      	cmp	r2, #2
 8001c68:	bf0c      	ite	eq
 8001c6a:	2201      	moveq	r2, #1
 8001c6c:	2203      	movne	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001c6e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    return HAL_OK;
 8001c72:	2000      	movs	r0, #0
}
 8001c74:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001c76:	1c69      	adds	r1, r5, #1
 8001c78:	d0e1      	beq.n	8001c3e <HAL_DFSDM_FilterPollForRegConversion+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001c7a:	b90d      	cbnz	r5, 8001c80 <HAL_DFSDM_FilterPollForRegConversion+0x5c>
          return HAL_TIMEOUT;
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	bd70      	pop	{r4, r5, r6, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001c80:	f7ff fdd4 	bl	800182c <HAL_GetTick>
 8001c84:	1b80      	subs	r0, r0, r6
 8001c86:	4285      	cmp	r5, r0
 8001c88:	d2d8      	bcs.n	8001c3c <HAL_DFSDM_FilterPollForRegConversion+0x18>
 8001c8a:	e7f7      	b.n	8001c7c <HAL_DFSDM_FilterPollForRegConversion+0x58>
    return HAL_ERROR;
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	bd70      	pop	{r4, r5, r6, pc}

08001c90 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c90:	6803      	ldr	r3, [r0, #0]
 8001c92:	2118      	movs	r1, #24
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c9a:	3a10      	subs	r2, #16
 8001c9c:	f023 0303 	bic.w	r3, r3, #3
 8001ca0:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ca4:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001ca6:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ca8:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001caa:	bf88      	it	hi
 8001cac:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cae:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cb0:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001cb2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	08005a44 	.word	0x08005a44

08001cbc <HAL_DMA_Init>:
{
 8001cbc:	b570      	push	{r4, r5, r6, lr}
 8001cbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff fdb4 	bl	800182c <HAL_GetTick>
 8001cc4:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001cc6:	2c00      	cmp	r4, #0
 8001cc8:	d071      	beq.n	8001dae <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001cca:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8001ccc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001cce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce0:	6821      	ldr	r1, [r4, #0]
 8001ce2:	680b      	ldr	r3, [r1, #0]
 8001ce4:	07d8      	lsls	r0, r3, #31
 8001ce6:	d43c      	bmi.n	8001d62 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001ce8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cea:	4d32      	ldr	r5, [pc, #200]	; (8001db4 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cec:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cee:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf0:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf2:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	68e2      	ldr	r2, [r4, #12]
 8001cf8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfa:	6922      	ldr	r2, [r4, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	6962      	ldr	r2, [r4, #20]
 8001d00:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	69e2      	ldr	r2, [r4, #28]
 8001d04:	4303      	orrs	r3, r0
 8001d06:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d08:	6a22      	ldr	r2, [r4, #32]
 8001d0a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d0e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d10:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d14:	bf01      	itttt	eq
 8001d16:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001d18:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001d1a:	4335      	orreq	r5, r6
 8001d1c:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d1e:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001d20:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001d22:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d24:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001d28:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2c:	d10b      	bne.n	8001d46 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001d2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d30:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001d32:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d34:	b13d      	cbz	r5, 8001d46 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d36:	b9f8      	cbnz	r0, 8001d78 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001d38:	2a01      	cmp	r2, #1
 8001d3a:	d02d      	beq.n	8001d98 <HAL_DMA_Init+0xdc>
 8001d3c:	d301      	bcc.n	8001d42 <HAL_DMA_Init+0x86>
 8001d3e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d40:	d101      	bne.n	8001d46 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d42:	01ea      	lsls	r2, r5, #7
 8001d44:	d42b      	bmi.n	8001d9e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001d46:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff ffa1 	bl	8001c90 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d50:	233f      	movs	r3, #63	; 0x3f
 8001d52:	4093      	lsls	r3, r2
 8001d54:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d56:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001d58:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d62:	f7ff fd63 	bl	800182c <HAL_GetTick>
 8001d66:	1b40      	subs	r0, r0, r5
 8001d68:	2805      	cmp	r0, #5
 8001d6a:	d9b9      	bls.n	8001ce0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d6c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d6e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d70:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001d72:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001d76:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d78:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001d7c:	d113      	bne.n	8001da6 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001d7e:	2a03      	cmp	r2, #3
 8001d80:	d8e1      	bhi.n	8001d46 <HAL_DMA_Init+0x8a>
 8001d82:	a001      	add	r0, pc, #4	; (adr r0, 8001d88 <HAL_DMA_Init+0xcc>)
 8001d84:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001d88:	08001d9f 	.word	0x08001d9f
 8001d8c:	08001d43 	.word	0x08001d43
 8001d90:	08001d9f 	.word	0x08001d9f
 8001d94:	08001d99 	.word	0x08001d99
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d98:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001d9c:	d1d3      	bne.n	8001d46 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d9e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001da0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da2:	6563      	str	r3, [r4, #84]	; 0x54
 8001da4:	e7e5      	b.n	8001d72 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001da6:	2a02      	cmp	r2, #2
 8001da8:	d9f9      	bls.n	8001d9e <HAL_DMA_Init+0xe2>
 8001daa:	2a03      	cmp	r2, #3
 8001dac:	e7c8      	b.n	8001d40 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
 8001db0:	bd70      	pop	{r4, r5, r6, pc}
 8001db2:	bf00      	nop
 8001db4:	e010803f 	.word	0xe010803f

08001db8 <HAL_DMA_Start_IT>:
{
 8001db8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001dba:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001dbe:	2c01      	cmp	r4, #1
 8001dc0:	d035      	beq.n	8001e2e <HAL_DMA_Start_IT+0x76>
 8001dc2:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc4:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001dc6:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8001dc8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dcc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001dd0:	2c01      	cmp	r4, #1
 8001dd2:	f04f 0402 	mov.w	r4, #2
 8001dd6:	d128      	bne.n	8001e2a <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd8:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ddc:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dde:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001de0:	6825      	ldr	r5, [r4, #0]
 8001de2:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001de6:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001de8:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dea:	6883      	ldr	r3, [r0, #8]
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d119      	bne.n	8001e24 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8001df0:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001df2:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001df6:	233f      	movs	r3, #63	; 0x3f
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	f043 0316 	orr.w	r3, r3, #22
 8001e02:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e04:	6963      	ldr	r3, [r4, #20]
 8001e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001e0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e0e:	b11b      	cbz	r3, 8001e18 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	f043 0308 	orr.w	r3, r3, #8
 8001e16:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e18:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8001e24:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e26:	60e2      	str	r2, [r4, #12]
 8001e28:	e7e4      	b.n	8001df4 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8001e2a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001e2e:	2002      	movs	r0, #2
}
 8001e30:	bd70      	pop	{r4, r5, r6, pc}

08001e32 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e32:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d003      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001e3e:	2001      	movs	r0, #1
 8001e40:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001e42:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e44:	2305      	movs	r3, #5
 8001e46:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8001e4a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001e4c:	6813      	ldr	r3, [r2, #0]
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8001e58:	2300      	movs	r3, #0
{
 8001e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001e5c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5e:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001e60:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_DMA_IRQHandler+0x170>)
{
 8001e62:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e64:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8001e66:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e68:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001e6a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	4216      	tst	r6, r2
 8001e70:	d00c      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e72:	6801      	ldr	r1, [r0, #0]
 8001e74:	6808      	ldr	r0, [r1, #0]
 8001e76:	0740      	lsls	r0, r0, #29
 8001e78:	d508      	bpl.n	8001e8c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e7a:	6808      	ldr	r0, [r1, #0]
 8001e7c:	f020 0004 	bic.w	r0, r0, #4
 8001e80:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e82:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e84:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8c:	4a4f      	ldr	r2, [pc, #316]	; (8001fcc <HAL_DMA_IRQHandler+0x174>)
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	4216      	tst	r6, r2
 8001e92:	d008      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e94:	6821      	ldr	r1, [r4, #0]
 8001e96:	6949      	ldr	r1, [r1, #20]
 8001e98:	0609      	lsls	r1, r1, #24
 8001e9a:	d504      	bpl.n	8001ea6 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e9c:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e9e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001ea0:	f042 0202 	orr.w	r2, r2, #2
 8001ea4:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea6:	4a4a      	ldr	r2, [pc, #296]	; (8001fd0 <HAL_DMA_IRQHandler+0x178>)
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	4216      	tst	r6, r2
 8001eac:	d008      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eae:	6821      	ldr	r1, [r4, #0]
 8001eb0:	6809      	ldr	r1, [r1, #0]
 8001eb2:	0788      	lsls	r0, r1, #30
 8001eb4:	d504      	bpl.n	8001ec0 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eb6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eb8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001eba:	f042 0204 	orr.w	r2, r2, #4
 8001ebe:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	4216      	tst	r6, r2
 8001ec6:	d010      	beq.n	8001eea <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	0709      	lsls	r1, r1, #28
 8001ece:	d50c      	bpl.n	8001eea <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ed0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	0350      	lsls	r0, r2, #13
 8001ed6:	d535      	bpl.n	8001f44 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0319      	lsls	r1, r3, #12
 8001edc:	d401      	bmi.n	8001ee2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ee0:	e000      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ee2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee4:	b10b      	cbz	r3, 8001eea <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001eea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001eec:	2220      	movs	r2, #32
 8001eee:	408a      	lsls	r2, r1
 8001ef0:	4216      	tst	r6, r2
 8001ef2:	d038      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	06c6      	lsls	r6, r0, #27
 8001efa:	d534      	bpl.n	8001f66 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001efc:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001efe:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001f02:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f04:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f06:	d125      	bne.n	8001f54 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f08:	f022 0216 	bic.w	r2, r2, #22
 8001f0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f14:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f18:	b90a      	cbnz	r2, 8001f1e <HAL_DMA_IRQHandler+0xc6>
 8001f1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001f1c:	b11a      	cbz	r2, 8001f26 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	f022 0208 	bic.w	r2, r2, #8
 8001f24:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f26:	233f      	movs	r3, #63	; 0x3f
 8001f28:	408b      	lsls	r3, r1
 8001f2a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001f38:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001f3a:	b10b      	cbz	r3, 8001f40 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	4798      	blx	r3
}
 8001f40:	b003      	add	sp, #12
 8001f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	05d2      	lsls	r2, r2, #23
 8001f48:	d4c9      	bmi.n	8001ede <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	f022 0208 	bic.w	r2, r2, #8
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e7c4      	b.n	8001ede <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f54:	0350      	lsls	r0, r2, #13
 8001f56:	d528      	bpl.n	8001faa <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	0319      	lsls	r1, r3, #12
 8001f5c:	d432      	bmi.n	8001fc4 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001f5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001f60:	b10b      	cbz	r3, 8001f66 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001f62:	4620      	mov	r0, r4
 8001f64:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0e9      	beq.n	8001f40 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f6e:	07da      	lsls	r2, r3, #31
 8001f70:	d519      	bpl.n	8001fa6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f72:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001f74:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001f7a:	6813      	ldr	r3, [r2, #0]
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f82:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001f86:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001f8a:	9b01      	ldr	r3, [sp, #4]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	429f      	cmp	r7, r3
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	d302      	bcc.n	8001f9a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	07db      	lsls	r3, r3, #31
 8001f98:	d4f7      	bmi.n	8001f8a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001fa6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001fa8:	e7c7      	b.n	8001f3a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001fb0:	d108      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	f021 0110 	bic.w	r1, r1, #16
 8001fb8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001fba:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001fbc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001fc0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001fc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fc6:	e7cb      	b.n	8001f60 <HAL_DMA_IRQHandler+0x108>
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	00800001 	.word	0x00800001
 8001fd0:	00800004 	.word	0x00800004

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd8:	680b      	ldr	r3, [r1, #0]
{
 8001fda:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80021a0 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe0:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fe2:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe4:	4a6c      	ldr	r2, [pc, #432]	; (8002198 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fe6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80021a4 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8001fea:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fee:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8001ff0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001ff8:	45b6      	cmp	lr, r6
 8001ffa:	f040 80b3 	bne.w	8002164 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ffe:	684c      	ldr	r4, [r1, #4]
 8002000:	f024 0710 	bic.w	r7, r4, #16
 8002004:	2f02      	cmp	r7, #2
 8002006:	d116      	bne.n	8002036 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8002008:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800200c:	f003 0b07 	and.w	fp, r3, #7
 8002010:	f04f 0c0f 	mov.w	ip, #15
 8002014:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8002018:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800201c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002020:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002024:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002028:	690d      	ldr	r5, [r1, #16]
 800202a:	fa05 f50b 	lsl.w	r5, r5, fp
 800202e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8002032:	f8ca 5020 	str.w	r5, [sl, #32]
 8002036:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800203a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800203c:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002040:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002044:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002048:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800204a:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800204e:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002050:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002052:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002056:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800205a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800205e:	d811      	bhi.n	8002084 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8002060:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002062:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002066:	68cf      	ldr	r7, [r1, #12]
 8002068:	fa07 fc0a 	lsl.w	ip, r7, sl
 800206c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8002070:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002072:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002078:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800207c:	409f      	lsls	r7, r3
 800207e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002082:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002084:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002086:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002088:	688f      	ldr	r7, [r1, #8]
 800208a:	fa07 f70a 	lsl.w	r7, r7, sl
 800208e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002090:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002092:	00e5      	lsls	r5, r4, #3
 8002094:	d566      	bpl.n	8002164 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800209a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800209e:	f003 0e03 	and.w	lr, r3, #3
 80020a2:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80020aa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020ae:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80020b6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80020ba:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80020be:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80020c2:	9503      	str	r5, [sp, #12]
 80020c4:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020c6:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80020ca:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020ce:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020d2:	4d32      	ldr	r5, [pc, #200]	; (800219c <HAL_GPIO_Init+0x1c8>)
 80020d4:	42a8      	cmp	r0, r5
 80020d6:	d04c      	beq.n	8002172 <HAL_GPIO_Init+0x19e>
 80020d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020dc:	42a8      	cmp	r0, r5
 80020de:	d04a      	beq.n	8002176 <HAL_GPIO_Init+0x1a2>
 80020e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020e4:	42a8      	cmp	r0, r5
 80020e6:	d048      	beq.n	800217a <HAL_GPIO_Init+0x1a6>
 80020e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020ec:	42a8      	cmp	r0, r5
 80020ee:	d046      	beq.n	800217e <HAL_GPIO_Init+0x1aa>
 80020f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020f4:	42a8      	cmp	r0, r5
 80020f6:	d044      	beq.n	8002182 <HAL_GPIO_Init+0x1ae>
 80020f8:	4548      	cmp	r0, r9
 80020fa:	d044      	beq.n	8002186 <HAL_GPIO_Init+0x1b2>
 80020fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002100:	42a8      	cmp	r0, r5
 8002102:	d042      	beq.n	800218a <HAL_GPIO_Init+0x1b6>
 8002104:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002108:	42a8      	cmp	r0, r5
 800210a:	d040      	beq.n	800218e <HAL_GPIO_Init+0x1ba>
 800210c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002110:	42a8      	cmp	r0, r5
 8002112:	d03e      	beq.n	8002192 <HAL_GPIO_Init+0x1be>
 8002114:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002118:	42a8      	cmp	r0, r5
 800211a:	bf14      	ite	ne
 800211c:	250a      	movne	r5, #10
 800211e:	2509      	moveq	r5, #9
 8002120:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002124:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002128:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800212c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800212e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8002132:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002134:	bf0c      	ite	eq
 8002136:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002138:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800213a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800213e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002140:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002142:	bf0c      	ite	eq
 8002144:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002146:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002148:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800214c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800214e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002150:	bf0c      	ite	eq
 8002152:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002154:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002156:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8002158:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800215a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800215c:	bf54      	ite	pl
 800215e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8002160:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8002162:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002164:	3301      	adds	r3, #1
 8002166:	2b10      	cmp	r3, #16
 8002168:	f47f af3f 	bne.w	8001fea <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800216c:	b005      	add	sp, #20
 800216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002172:	2500      	movs	r5, #0
 8002174:	e7d4      	b.n	8002120 <HAL_GPIO_Init+0x14c>
 8002176:	2501      	movs	r5, #1
 8002178:	e7d2      	b.n	8002120 <HAL_GPIO_Init+0x14c>
 800217a:	2502      	movs	r5, #2
 800217c:	e7d0      	b.n	8002120 <HAL_GPIO_Init+0x14c>
 800217e:	2503      	movs	r5, #3
 8002180:	e7ce      	b.n	8002120 <HAL_GPIO_Init+0x14c>
 8002182:	2504      	movs	r5, #4
 8002184:	e7cc      	b.n	8002120 <HAL_GPIO_Init+0x14c>
 8002186:	2505      	movs	r5, #5
 8002188:	e7ca      	b.n	8002120 <HAL_GPIO_Init+0x14c>
 800218a:	2506      	movs	r5, #6
 800218c:	e7c8      	b.n	8002120 <HAL_GPIO_Init+0x14c>
 800218e:	2507      	movs	r5, #7
 8002190:	e7c6      	b.n	8002120 <HAL_GPIO_Init+0x14c>
 8002192:	2508      	movs	r5, #8
 8002194:	e7c4      	b.n	8002120 <HAL_GPIO_Init+0x14c>
 8002196:	bf00      	nop
 8002198:	40013c00 	.word	0x40013c00
 800219c:	40020000 	.word	0x40020000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40021400 	.word	0x40021400

080021a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a8:	b10a      	cbz	r2, 80021ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021aa:	6181      	str	r1, [r0, #24]
 80021ac:	4770      	bx	lr
 80021ae:	0409      	lsls	r1, r1, #16
 80021b0:	e7fb      	b.n	80021aa <HAL_GPIO_WritePin+0x2>

080021b2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80021b2:	6943      	ldr	r3, [r0, #20]
 80021b4:	4059      	eors	r1, r3
 80021b6:	6141      	str	r1, [r0, #20]
 80021b8:	4770      	bx	lr

080021ba <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021ba:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80021bc:	4604      	mov	r4, r0
 80021be:	2800      	cmp	r0, #0
 80021c0:	d04a      	beq.n	8002258 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80021c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80021c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ca:	b91b      	cbnz	r3, 80021d4 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021cc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021d0:	f7fe fe14 	bl	8000dfc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d4:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021d6:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021dc:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021e8:	6862      	ldr	r2, [r4, #4]
 80021ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021fa:	d124      	bne.n	8002246 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002200:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002202:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002206:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002208:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800220c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002210:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002218:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800221a:	6922      	ldr	r2, [r4, #16]
 800221c:	430a      	orrs	r2, r1
 800221e:	69a1      	ldr	r1, [r4, #24]
 8002220:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002224:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002226:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002228:	69e2      	ldr	r2, [r4, #28]
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002236:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002238:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800223a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800223e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8002244:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002246:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800224a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800224c:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800224e:	d1d8      	bne.n	8002202 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	e7d4      	b.n	8002202 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002258:	2001      	movs	r0, #1
}
 800225a:	bd10      	pop	{r4, pc}

0800225c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800225c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	2a20      	cmp	r2, #32
{
 8002264:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002266:	d11d      	bne.n	80022a4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002268:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800226c:	2b01      	cmp	r3, #1
 800226e:	d019      	beq.n	80022a4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002270:	2324      	movs	r3, #36	; 0x24
 8002272:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002276:	6803      	ldr	r3, [r0, #0]
 8002278:	681c      	ldr	r4, [r3, #0]
 800227a:	f024 0401 	bic.w	r4, r4, #1
 800227e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002280:	681c      	ldr	r4, [r3, #0]
 8002282:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002286:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002288:	681c      	ldr	r4, [r3, #0]
 800228a:	4321      	orrs	r1, r4
 800228c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	f041 0101 	orr.w	r1, r1, #1
 8002294:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002296:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002298:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800229c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80022a4:	2002      	movs	r0, #2
  }
}
 80022a6:	bd10      	pop	{r4, pc}

080022a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022a8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80022aa:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80022ae:	b2e4      	uxtb	r4, r4
 80022b0:	2c20      	cmp	r4, #32
 80022b2:	d11c      	bne.n	80022ee <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d018      	beq.n	80022ee <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022bc:	2324      	movs	r3, #36	; 0x24
 80022be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022c2:	6803      	ldr	r3, [r0, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022cc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022ce:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022d2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022d6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80022e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80022ee:	2002      	movs	r0, #2
  }
}
 80022f0:	bd10      	pop	{r4, pc}

080022f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80022f4:	4606      	mov	r6, r0
{
 80022f6:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d067      	beq.n	80023cc <HAL_PCD_Init+0xda>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022fc:	2303      	movs	r3, #3

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 80022fe:	4634      	mov	r4, r6

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002300:	466d      	mov	r5, sp
 8002302:	1d37      	adds	r7, r6, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002304:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8002308:	f7ff fa08 	bl	800171c <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 800230c:	f854 0b10 	ldr.w	r0, [r4], #16
 8002310:	f001 ff05 	bl	800411e <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800231a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002320:	f106 0410 	add.w	r4, r6, #16
 8002324:	e885 0003 	stmia.w	r5, {r0, r1}
 8002328:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800232c:	6830      	ldr	r0, [r6, #0]

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 800232e:	2501      	movs	r5, #1
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002330:	f001 feba 	bl	80040a8 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8002334:	2100      	movs	r1, #0
 8002336:	6830      	ldr	r0, [r6, #0]
 8002338:	f001 fef7 	bl	800412a <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 800233c:	2100      	movs	r1, #0
 800233e:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8002340:	4632      	mov	r2, r6
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002342:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8002344:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8002348:	321c      	adds	r2, #28
   hpcd->IN_ep[i].tx_fifo_num = i;
 800234a:	8451      	strh	r1, [r2, #34]	; 0x22
 for (i = 0; i < 15 ; i++)
 800234c:	3101      	adds	r1, #1
   hpcd->IN_ep[i].is_in = 1;
 800234e:	7755      	strb	r5, [r2, #29]
 for (i = 0; i < 15 ; i++)
 8002350:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002352:	77d0      	strb	r0, [r2, #31]
   hpcd->IN_ep[i].maxpacket =  0;
 8002354:	6250      	str	r0, [r2, #36]	; 0x24
   hpcd->IN_ep[i].xfer_buff = 0;
 8002356:	6290      	str	r0, [r2, #40]	; 0x28
   hpcd->IN_ep[i].xfer_len = 0;
 8002358:	6310      	str	r0, [r2, #48]	; 0x30
 for (i = 0; i < 15 ; i++)
 800235a:	d1f3      	bne.n	8002344 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0;
   hpcd->OUT_ep[i].xfer_buff = 0;
   hpcd->OUT_ep[i].xfer_len = 0;

   hpcd->Instance->DIEPTXF[i] = 0;
 800235c:	2200      	movs	r2, #0
 800235e:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0;
 8002362:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 8002364:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->Instance->DIEPTXF[i] = 0;
 8002368:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->IN_ep[i].tx_fifo_num = i;
 800236c:	87da      	strh	r2, [r3, #62]	; 0x3e
 for (i = 0; i < 15 ; i++)
 800236e:	3201      	adds	r2, #1
   hpcd->Instance->DIEPTXF[i] = 0;
 8002370:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->OUT_ep[i].is_in = 0;
 8002374:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
 for (i = 0; i < 15 ; i++)
 8002378:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800237a:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 800237e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 8002382:	f103 031c 	add.w	r3, r3, #28
   hpcd->OUT_ep[i].xfer_buff = 0;
 8002386:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0;
 800238a:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   hpcd->Instance->DIEPTXF[i] = 0;
 800238e:	6041      	str	r1, [r0, #4]
 for (i = 0; i < 15 ; i++)
 8002390:	d1e8      	bne.n	8002364 <HAL_PCD_Init+0x72>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8002392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002394:	466d      	mov	r5, sp
 8002396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a4:	4670      	mov	r0, lr
 80023a6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80023aa:	f001 feff 	bl	80041ac <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 80023b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <HAL_PCD_Init+0xce>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 80023ba:	4630      	mov	r0, r6
 80023bc:	f000 f808 	bl	80023d0 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 80023c0:	6830      	ldr	r0, [r6, #0]
 80023c2:	f001 ff99 	bl	80042f8 <USB_DevDisconnect>
 return HAL_OK;
 80023c6:	2000      	movs	r0, #0
}
 80023c8:	b00b      	add	sp, #44	; 0x2c
 80023ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80023cc:	2001      	movs	r0, #1
 80023ce:	e7fb      	b.n	80023c8 <HAL_PCD_Init+0xd6>

080023d0 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 80023d0:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80023d2:	6802      	ldr	r2, [r0, #0]
{
 80023d4:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 80023d6:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 80023da:	2000      	movs	r0, #0
 80023dc:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023e0:	6993      	ldr	r3, [r2, #24]
 80023e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023e6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80023ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ee:	f043 0303 	orr.w	r3, r3, #3
 80023f2:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80023fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023fe:	4c19      	ldr	r4, [pc, #100]	; (8002464 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002416:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002418:	f7ff fa08 	bl	800182c <HAL_GetTick>
 800241c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800241e:	6863      	ldr	r3, [r4, #4]
 8002420:	03da      	lsls	r2, r3, #15
 8002422:	d50c      	bpl.n	800243e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800242c:	f7ff f9fe 	bl	800182c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002430:	4c0c      	ldr	r4, [pc, #48]	; (8002464 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8002432:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002434:	6863      	ldr	r3, [r4, #4]
 8002436:	039b      	lsls	r3, r3, #14
 8002438:	d50a      	bpl.n	8002450 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800243a:	2000      	movs	r0, #0
 800243c:	e006      	b.n	800244c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800243e:	f7ff f9f5 	bl	800182c <HAL_GetTick>
 8002442:	1b40      	subs	r0, r0, r5
 8002444:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002448:	d9e9      	bls.n	800241e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800244a:	2003      	movs	r0, #3
}
 800244c:	b003      	add	sp, #12
 800244e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002450:	f7ff f9ec 	bl	800182c <HAL_GetTick>
 8002454:	1b40      	subs	r0, r0, r5
 8002456:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800245a:	d9eb      	bls.n	8002434 <HAL_PWREx_EnableOverDrive+0x3c>
 800245c:	e7f5      	b.n	800244a <HAL_PWREx_EnableOverDrive+0x52>
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40007000 	.word	0x40007000

08002468 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800246c:	4604      	mov	r4, r0
 800246e:	b918      	cbnz	r0, 8002478 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002470:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002472:	b002      	add	sp, #8
 8002474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002478:	6803      	ldr	r3, [r0, #0]
 800247a:	07d8      	lsls	r0, r3, #31
 800247c:	d410      	bmi.n	80024a0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	0799      	lsls	r1, r3, #30
 8002482:	d45e      	bmi.n	8002542 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	0719      	lsls	r1, r3, #28
 8002488:	f100 80a3 	bmi.w	80025d2 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	075a      	lsls	r2, r3, #29
 8002490:	f100 80c4 	bmi.w	800261c <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002494:	69a2      	ldr	r2, [r4, #24]
 8002496:	2a00      	cmp	r2, #0
 8002498:	f040 812e 	bne.w	80026f8 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 800249c:	2000      	movs	r0, #0
 800249e:	e7e8      	b.n	8002472 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a0:	4b93      	ldr	r3, [pc, #588]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	f002 020c 	and.w	r2, r2, #12
 80024a8:	2a04      	cmp	r2, #4
 80024aa:	d007      	beq.n	80024bc <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	f002 020c 	and.w	r2, r2, #12
 80024b2:	2a08      	cmp	r2, #8
 80024b4:	d10a      	bne.n	80024cc <HAL_RCC_OscConfig+0x64>
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	025a      	lsls	r2, r3, #9
 80024ba:	d507      	bpl.n	80024cc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	039b      	lsls	r3, r3, #14
 80024c2:	d5dc      	bpl.n	800247e <HAL_RCC_OscConfig+0x16>
 80024c4:	6863      	ldr	r3, [r4, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1d9      	bne.n	800247e <HAL_RCC_OscConfig+0x16>
 80024ca:	e7d1      	b.n	8002470 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024cc:	6863      	ldr	r3, [r4, #4]
 80024ce:	4d88      	ldr	r5, [pc, #544]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d111      	bne.n	80024fa <HAL_RCC_OscConfig+0x92>
 80024d6:	682b      	ldr	r3, [r5, #0]
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024de:	f7ff f9a5 	bl	800182c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4d83      	ldr	r5, [pc, #524]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80024e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	682b      	ldr	r3, [r5, #0]
 80024e8:	039f      	lsls	r7, r3, #14
 80024ea:	d4c8      	bmi.n	800247e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ec:	f7ff f99e 	bl	800182c <HAL_GetTick>
 80024f0:	1b80      	subs	r0, r0, r6
 80024f2:	2864      	cmp	r0, #100	; 0x64
 80024f4:	d9f7      	bls.n	80024e6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80024f6:	2003      	movs	r0, #3
 80024f8:	e7bb      	b.n	8002472 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	b99b      	cbnz	r3, 8002524 <HAL_RCC_OscConfig+0xbc>
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	602b      	str	r3, [r5, #0]
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800250c:	f7ff f98e 	bl	800182c <HAL_GetTick>
 8002510:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	682b      	ldr	r3, [r5, #0]
 8002514:	0398      	lsls	r0, r3, #14
 8002516:	d5b2      	bpl.n	800247e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002518:	f7ff f988 	bl	800182c <HAL_GetTick>
 800251c:	1b80      	subs	r0, r0, r6
 800251e:	2864      	cmp	r0, #100	; 0x64
 8002520:	d9f7      	bls.n	8002512 <HAL_RCC_OscConfig+0xaa>
 8002522:	e7e8      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	d103      	bne.n	8002534 <HAL_RCC_OscConfig+0xcc>
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	602b      	str	r3, [r5, #0]
 8002532:	e7d0      	b.n	80024d6 <HAL_RCC_OscConfig+0x6e>
 8002534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	682b      	ldr	r3, [r5, #0]
 800253c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002540:	e7cc      	b.n	80024dc <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002542:	4b6b      	ldr	r3, [pc, #428]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	f012 0f0c 	tst.w	r2, #12
 800254a:	d007      	beq.n	800255c <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	f002 020c 	and.w	r2, r2, #12
 8002552:	2a08      	cmp	r2, #8
 8002554:	d111      	bne.n	800257a <HAL_RCC_OscConfig+0x112>
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0259      	lsls	r1, r3, #9
 800255a:	d40e      	bmi.n	800257a <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255c:	4b64      	ldr	r3, [pc, #400]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	0792      	lsls	r2, r2, #30
 8002562:	d502      	bpl.n	800256a <HAL_RCC_OscConfig+0x102>
 8002564:	68e2      	ldr	r2, [r4, #12]
 8002566:	2a01      	cmp	r2, #1
 8002568:	d182      	bne.n	8002470 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	6921      	ldr	r1, [r4, #16]
 800256e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002572:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002576:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002578:	e784      	b.n	8002484 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800257a:	68e3      	ldr	r3, [r4, #12]
 800257c:	4d5c      	ldr	r5, [pc, #368]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
 800257e:	b1bb      	cbz	r3, 80025b0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8002580:	682b      	ldr	r3, [r5, #0]
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002588:	f7ff f950 	bl	800182c <HAL_GetTick>
 800258c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258e:	682b      	ldr	r3, [r5, #0]
 8002590:	079f      	lsls	r7, r3, #30
 8002592:	d507      	bpl.n	80025a4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	6922      	ldr	r2, [r4, #16]
 8002598:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800259c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80025a0:	602b      	str	r3, [r5, #0]
 80025a2:	e76f      	b.n	8002484 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a4:	f7ff f942 	bl	800182c <HAL_GetTick>
 80025a8:	1b80      	subs	r0, r0, r6
 80025aa:	2802      	cmp	r0, #2
 80025ac:	d9ef      	bls.n	800258e <HAL_RCC_OscConfig+0x126>
 80025ae:	e7a2      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025b8:	f7ff f938 	bl	800182c <HAL_GetTick>
 80025bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	682b      	ldr	r3, [r5, #0]
 80025c0:	0798      	lsls	r0, r3, #30
 80025c2:	f57f af5f 	bpl.w	8002484 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c6:	f7ff f931 	bl	800182c <HAL_GetTick>
 80025ca:	1b80      	subs	r0, r0, r6
 80025cc:	2802      	cmp	r0, #2
 80025ce:	d9f6      	bls.n	80025be <HAL_RCC_OscConfig+0x156>
 80025d0:	e791      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025d2:	6963      	ldr	r3, [r4, #20]
 80025d4:	4d46      	ldr	r5, [pc, #280]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
 80025d6:	b183      	cbz	r3, 80025fa <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80025d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80025e0:	f7ff f924 	bl	800182c <HAL_GetTick>
 80025e4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025e8:	079b      	lsls	r3, r3, #30
 80025ea:	f53f af4f 	bmi.w	800248c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ee:	f7ff f91d 	bl	800182c <HAL_GetTick>
 80025f2:	1b80      	subs	r0, r0, r6
 80025f4:	2802      	cmp	r0, #2
 80025f6:	d9f6      	bls.n	80025e6 <HAL_RCC_OscConfig+0x17e>
 80025f8:	e77d      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80025fa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002602:	f7ff f913 	bl	800182c <HAL_GetTick>
 8002606:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800260a:	079f      	lsls	r7, r3, #30
 800260c:	f57f af3e 	bpl.w	800248c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002610:	f7ff f90c 	bl	800182c <HAL_GetTick>
 8002614:	1b80      	subs	r0, r0, r6
 8002616:	2802      	cmp	r0, #2
 8002618:	d9f6      	bls.n	8002608 <HAL_RCC_OscConfig+0x1a0>
 800261a:	e76c      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
 800261e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002620:	00d0      	lsls	r0, r2, #3
 8002622:	d427      	bmi.n	8002674 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002626:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002638:	4d2e      	ldr	r5, [pc, #184]	; (80026f4 <HAL_RCC_OscConfig+0x28c>)
 800263a:	682b      	ldr	r3, [r5, #0]
 800263c:	05d9      	lsls	r1, r3, #23
 800263e:	d51b      	bpl.n	8002678 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002640:	68a3      	ldr	r3, [r4, #8]
 8002642:	4d2b      	ldr	r5, [pc, #172]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
 8002644:	2b01      	cmp	r3, #1
 8002646:	d127      	bne.n	8002698 <HAL_RCC_OscConfig+0x230>
 8002648:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002654:	f7ff f8ea 	bl	800182c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	4f25      	ldr	r7, [pc, #148]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800265a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800265e:	079b      	lsls	r3, r3, #30
 8002660:	d53f      	bpl.n	80026e2 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8002662:	2e00      	cmp	r6, #0
 8002664:	f43f af16 	beq.w	8002494 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002668:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <HAL_RCC_OscConfig+0x288>)
 800266a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800266c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	e70f      	b.n	8002494 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8002674:	2600      	movs	r6, #0
 8002676:	e7df      	b.n	8002638 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8002678:	682b      	ldr	r3, [r5, #0]
 800267a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002680:	f7ff f8d4 	bl	800182c <HAL_GetTick>
 8002684:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	05da      	lsls	r2, r3, #23
 800268a:	d4d9      	bmi.n	8002640 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800268c:	f7ff f8ce 	bl	800182c <HAL_GetTick>
 8002690:	1bc0      	subs	r0, r0, r7
 8002692:	2864      	cmp	r0, #100	; 0x64
 8002694:	d9f7      	bls.n	8002686 <HAL_RCC_OscConfig+0x21e>
 8002696:	e72e      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002698:	b9ab      	cbnz	r3, 80026c6 <HAL_RCC_OscConfig+0x25e>
 800269a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	672b      	str	r3, [r5, #112]	; 0x70
 80026a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80026ae:	f7ff f8bd 	bl	800182c <HAL_GetTick>
 80026b2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026b6:	0798      	lsls	r0, r3, #30
 80026b8:	d5d3      	bpl.n	8002662 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7ff f8b7 	bl	800182c <HAL_GetTick>
 80026be:	1bc0      	subs	r0, r0, r7
 80026c0:	4540      	cmp	r0, r8
 80026c2:	d9f7      	bls.n	80026b4 <HAL_RCC_OscConfig+0x24c>
 80026c4:	e717      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026ca:	d103      	bne.n	80026d4 <HAL_RCC_OscConfig+0x26c>
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	672b      	str	r3, [r5, #112]	; 0x70
 80026d2:	e7b9      	b.n	8002648 <HAL_RCC_OscConfig+0x1e0>
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	672b      	str	r3, [r5, #112]	; 0x70
 80026da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026dc:	f023 0304 	bic.w	r3, r3, #4
 80026e0:	e7b5      	b.n	800264e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7ff f8a3 	bl	800182c <HAL_GetTick>
 80026e6:	eba0 0008 	sub.w	r0, r0, r8
 80026ea:	42a8      	cmp	r0, r5
 80026ec:	d9b6      	bls.n	800265c <HAL_RCC_OscConfig+0x1f4>
 80026ee:	e702      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	4d24      	ldr	r5, [pc, #144]	; (800278c <HAL_RCC_OscConfig+0x324>)
 80026fa:	68ab      	ldr	r3, [r5, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	f43f aeb5 	beq.w	8002470 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002706:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002708:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800270a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002710:	d12f      	bne.n	8002772 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8002712:	f7ff f88b 	bl	800182c <HAL_GetTick>
 8002716:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	0199      	lsls	r1, r3, #6
 800271c:	d423      	bmi.n	8002766 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271e:	6a22      	ldr	r2, [r4, #32]
 8002720:	69e3      	ldr	r3, [r4, #28]
 8002722:	4313      	orrs	r3, r2
 8002724:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002726:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800272a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800272c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002730:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002732:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002736:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002738:	4c14      	ldr	r4, [pc, #80]	; (800278c <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	3a01      	subs	r2, #1
 800273e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002742:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002744:	682b      	ldr	r3, [r5, #0]
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800274c:	f7ff f86e 	bl	800182c <HAL_GetTick>
 8002750:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	019a      	lsls	r2, r3, #6
 8002756:	f53f aea1 	bmi.w	800249c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275a:	f7ff f867 	bl	800182c <HAL_GetTick>
 800275e:	1b40      	subs	r0, r0, r5
 8002760:	2802      	cmp	r0, #2
 8002762:	d9f6      	bls.n	8002752 <HAL_RCC_OscConfig+0x2ea>
 8002764:	e6c7      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002766:	f7ff f861 	bl	800182c <HAL_GetTick>
 800276a:	1b80      	subs	r0, r0, r6
 800276c:	2802      	cmp	r0, #2
 800276e:	d9d3      	bls.n	8002718 <HAL_RCC_OscConfig+0x2b0>
 8002770:	e6c1      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8002772:	f7ff f85b 	bl	800182c <HAL_GetTick>
 8002776:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	019b      	lsls	r3, r3, #6
 800277c:	f57f ae8e 	bpl.w	800249c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7ff f854 	bl	800182c <HAL_GetTick>
 8002784:	1b00      	subs	r0, r0, r4
 8002786:	2802      	cmp	r0, #2
 8002788:	d9f6      	bls.n	8002778 <HAL_RCC_OscConfig+0x310>
 800278a:	e6b4      	b.n	80024f6 <HAL_RCC_OscConfig+0x8e>
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x48>)
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	f002 020c 	and.w	r2, r2, #12
 8002798:	2a04      	cmp	r2, #4
 800279a:	d003      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x14>
 800279c:	2a08      	cmp	r2, #8
 800279e:	d003      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027a0:	480e      	ldr	r0, [pc, #56]	; (80027dc <HAL_RCC_GetSysClockFreq+0x4c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80027a2:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80027a4:	480e      	ldr	r0, [pc, #56]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x50>)
 80027a6:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a8:	685a      	ldr	r2, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027aa:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 80027b0:	685b      	ldr	r3, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027b2:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 80027b4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80027b8:	bf4c      	ite	mi
 80027ba:	4809      	ldrmi	r0, [pc, #36]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x50>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 80027bc:	4807      	ldrpl	r0, [pc, #28]	; (80027dc <HAL_RCC_GetSysClockFreq+0x4c>)
 80027be:	fbb0 f0f2 	udiv	r0, r0, r2
 80027c2:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x48>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80027cc:	3301      	adds	r3, #1
 80027ce:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80027d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	007a1200 	.word	0x007a1200

080027e4 <HAL_RCC_ClockConfig>:
{
 80027e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80027ea:	4604      	mov	r4, r0
 80027ec:	b910      	cbnz	r0, 80027f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80027ee:	2001      	movs	r0, #1
 80027f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4a3f      	ldr	r2, [pc, #252]	; (80028f4 <HAL_RCC_ClockConfig+0x110>)
 80027f6:	6813      	ldr	r3, [r2, #0]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d328      	bcc.n	8002852 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	6822      	ldr	r2, [r4, #0]
 8002802:	0796      	lsls	r6, r2, #30
 8002804:	d430      	bmi.n	8002868 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002806:	07d0      	lsls	r0, r2, #31
 8002808:	d436      	bmi.n	8002878 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800280a:	4a3a      	ldr	r2, [pc, #232]	; (80028f4 <HAL_RCC_ClockConfig+0x110>)
 800280c:	6813      	ldr	r3, [r2, #0]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	429d      	cmp	r5, r3
 8002814:	d35a      	bcc.n	80028cc <HAL_RCC_ClockConfig+0xe8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002816:	6822      	ldr	r2, [r4, #0]
 8002818:	0751      	lsls	r1, r2, #29
 800281a:	d462      	bmi.n	80028e2 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	0713      	lsls	r3, r2, #28
 800281e:	d507      	bpl.n	8002830 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002820:	4a35      	ldr	r2, [pc, #212]	; (80028f8 <HAL_RCC_ClockConfig+0x114>)
 8002822:	6921      	ldr	r1, [r4, #16]
 8002824:	6893      	ldr	r3, [r2, #8]
 8002826:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800282a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800282e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002830:	f7ff ffae 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 8002834:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_RCC_ClockConfig+0x114>)
 8002836:	4a31      	ldr	r2, [pc, #196]	; (80028fc <HAL_RCC_ClockConfig+0x118>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800283e:	5cd3      	ldrb	r3, [r2, r3]
 8002840:	40d8      	lsrs	r0, r3
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_RCC_ClockConfig+0x11c>)
 8002844:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe fc64 	bl	8001114 <HAL_InitTick>
  return HAL_OK;
 800284c:	2000      	movs	r0, #0
 800284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	6813      	ldr	r3, [r2, #0]
 8002854:	f023 030f 	bic.w	r3, r3, #15
 8002858:	430b      	orrs	r3, r1
 800285a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285c:	6813      	ldr	r3, [r2, #0]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	4299      	cmp	r1, r3
 8002864:	d1c3      	bne.n	80027ee <HAL_RCC_ClockConfig+0xa>
 8002866:	e7cb      	b.n	8002800 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4923      	ldr	r1, [pc, #140]	; (80028f8 <HAL_RCC_ClockConfig+0x114>)
 800286a:	68a0      	ldr	r0, [r4, #8]
 800286c:	688b      	ldr	r3, [r1, #8]
 800286e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002872:	4303      	orrs	r3, r0
 8002874:	608b      	str	r3, [r1, #8]
 8002876:	e7c6      	b.n	8002806 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002878:	6861      	ldr	r1, [r4, #4]
 800287a:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <HAL_RCC_ClockConfig+0x114>)
 800287c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002880:	d11c      	bne.n	80028bc <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	d0b2      	beq.n	80027ee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002888:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4e1a      	ldr	r6, [pc, #104]	; (80028f8 <HAL_RCC_ClockConfig+0x114>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002890:	f022 0203 	bic.w	r2, r2, #3
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002898:	f7fe ffc8 	bl	800182c <HAL_GetTick>
 800289c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	68b3      	ldr	r3, [r6, #8]
 80028a0:	6862      	ldr	r2, [r4, #4]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80028aa:	d0ae      	beq.n	800280a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ac:	f7fe ffbe 	bl	800182c <HAL_GetTick>
 80028b0:	1bc0      	subs	r0, r0, r7
 80028b2:	4540      	cmp	r0, r8
 80028b4:	d9f3      	bls.n	800289e <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 80028b6:	2003      	movs	r0, #3
}
 80028b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028bc:	2902      	cmp	r1, #2
 80028be:	d102      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80028c4:	e7df      	b.n	8002886 <HAL_RCC_ClockConfig+0xa2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	f012 0f02 	tst.w	r2, #2
 80028ca:	e7dc      	b.n	8002886 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028cc:	6813      	ldr	r3, [r2, #0]
 80028ce:	f023 030f 	bic.w	r3, r3, #15
 80028d2:	432b      	orrs	r3, r5
 80028d4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	6813      	ldr	r3, [r2, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	429d      	cmp	r5, r3
 80028de:	d186      	bne.n	80027ee <HAL_RCC_ClockConfig+0xa>
 80028e0:	e799      	b.n	8002816 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e2:	4905      	ldr	r1, [pc, #20]	; (80028f8 <HAL_RCC_ClockConfig+0x114>)
 80028e4:	68e0      	ldr	r0, [r4, #12]
 80028e6:	688b      	ldr	r3, [r1, #8]
 80028e8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80028ec:	4303      	orrs	r3, r0
 80028ee:	608b      	str	r3, [r1, #8]
 80028f0:	e794      	b.n	800281c <HAL_RCC_ClockConfig+0x38>
 80028f2:	bf00      	nop
 80028f4:	40023c00 	.word	0x40023c00
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08005a2c 	.word	0x08005a2c
 8002900:	20000000 	.word	0x20000000

08002904 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002904:	4b01      	ldr	r3, [pc, #4]	; (800290c <HAL_RCC_GetHCLKFreq+0x8>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	4a03      	ldr	r2, [pc, #12]	; (800292c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800291e:	6810      	ldr	r0, [r2, #0]
}
 8002920:	40d8      	lsrs	r0, r3
 8002922:	4770      	bx	lr
 8002924:	40023800 	.word	0x40023800
 8002928:	08005a3c 	.word	0x08005a3c
 800292c:	20000000 	.word	0x20000000

08002930 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800293e:	6810      	ldr	r0, [r2, #0]
} 
 8002940:	40d8      	lsrs	r0, r3
 8002942:	4770      	bx	lr
 8002944:	40023800 	.word	0x40023800
 8002948:	08005a3c 	.word	0x08005a3c
 800294c:	20000000 	.word	0x20000000

08002950 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002950:	230f      	movs	r3, #15
 8002952:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_GetClockConfig+0x34>)
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	f002 0203 	and.w	r2, r2, #3
 800295c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002964:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800296c:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002976:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_GetClockConfig+0x38>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	600b      	str	r3, [r1, #0]
 8002982:	4770      	bx	lr
 8002984:	40023800 	.word	0x40023800
 8002988:	40023c00 	.word	0x40023c00

0800298c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800298c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002990:	6802      	ldr	r2, [r0, #0]
{
 8002992:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002994:	f012 0601 	ands.w	r6, r2, #1
 8002998:	d00b      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800299a:	4bb8      	ldr	r3, [pc, #736]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80029a2:	6099      	str	r1, [r3, #8]
 80029a4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029aa:	fab6 f686 	clz	r6, r6
 80029ae:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029b0:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029b2:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80029b6:	d012      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029b8:	49b0      	ldr	r1, [pc, #704]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029ba:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80029bc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029c0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 80029c8:	bf08      	it	eq
 80029ca:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029cc:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029d0:	bf16      	itet	ne
 80029d2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80029d6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029d8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029de:	02d7      	lsls	r7, r2, #11
 80029e0:	d510      	bpl.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029e2:	48a6      	ldr	r0, [pc, #664]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80029e6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029ea:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029f2:	ea43 0301 	orr.w	r3, r3, r1
 80029f6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029fa:	f000 8189 	beq.w	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x384>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 80029fe:	2900      	cmp	r1, #0
 8002a00:	bf08      	it	eq
 8002a02:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8002a04:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002a08:	bf18      	it	ne
 8002a0a:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a0c:	0690      	lsls	r0, r2, #26
 8002a0e:	d531      	bpl.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	4b9a      	ldr	r3, [pc, #616]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a12:	4f9b      	ldr	r7, [pc, #620]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2e:	f7fe fefd 	bl	800182c <HAL_GetTick>
 8002a32:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	05d9      	lsls	r1, r3, #23
 8002a38:	f140 816c 	bpl.w	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x388>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a3c:	4f8f      	ldr	r7, [pc, #572]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a40:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002a44:	f040 8171 	bne.w	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a4a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002a4e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002a52:	4a8a      	ldr	r2, [pc, #552]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a54:	f040 818f 	bne.w	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002a58:	6891      	ldr	r1, [r2, #8]
 8002a5a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002a5e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002a62:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002a66:	4301      	orrs	r1, r0
 8002a68:	6091      	str	r1, [r2, #8]
 8002a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	06df      	lsls	r7, r3, #27
 8002a78:	d50c      	bpl.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a7a:	4a80      	ldr	r2, [pc, #512]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a7c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002a80:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002a84:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002a88:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002a8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a8e:	4301      	orrs	r1, r0
 8002a90:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a94:	0458      	lsls	r0, r3, #17
 8002a96:	d508      	bpl.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a98:	4978      	ldr	r1, [pc, #480]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a9a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002a9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002aa0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002aa4:	4302      	orrs	r2, r0
 8002aa6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aaa:	0419      	lsls	r1, r3, #16
 8002aac:	d508      	bpl.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aae:	4973      	ldr	r1, [pc, #460]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ab0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002ab2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ab6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002aba:	4302      	orrs	r2, r0
 8002abc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac0:	03da      	lsls	r2, r3, #15
 8002ac2:	d508      	bpl.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ac4:	496d      	ldr	r1, [pc, #436]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ac6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002ac8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002acc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002ad0:	4302      	orrs	r2, r0
 8002ad2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ad6:	039f      	lsls	r7, r3, #14
 8002ad8:	d508      	bpl.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ada:	4968      	ldr	r1, [pc, #416]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002adc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002ade:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ae2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002ae6:	4302      	orrs	r2, r0
 8002ae8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aec:	0658      	lsls	r0, r3, #25
 8002aee:	d508      	bpl.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af0:	4962      	ldr	r1, [pc, #392]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002af2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002af4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002af8:	f022 0203 	bic.w	r2, r2, #3
 8002afc:	4302      	orrs	r2, r0
 8002afe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b02:	0619      	lsls	r1, r3, #24
 8002b04:	d508      	bpl.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b06:	495d      	ldr	r1, [pc, #372]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b08:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002b0a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b0e:	f022 020c 	bic.w	r2, r2, #12
 8002b12:	4302      	orrs	r2, r0
 8002b14:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b18:	05da      	lsls	r2, r3, #23
 8002b1a:	d508      	bpl.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b1c:	4957      	ldr	r1, [pc, #348]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b1e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b20:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b24:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002b28:	4302      	orrs	r2, r0
 8002b2a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b2e:	059f      	lsls	r7, r3, #22
 8002b30:	d508      	bpl.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b32:	4952      	ldr	r1, [pc, #328]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b34:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002b36:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b3a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002b3e:	4302      	orrs	r2, r0
 8002b40:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b44:	0558      	lsls	r0, r3, #21
 8002b46:	d508      	bpl.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b48:	494c      	ldr	r1, [pc, #304]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b4c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b54:	4302      	orrs	r2, r0
 8002b56:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b5a:	0519      	lsls	r1, r3, #20
 8002b5c:	d508      	bpl.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b5e:	4947      	ldr	r1, [pc, #284]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b62:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b6a:	4302      	orrs	r2, r0
 8002b6c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b70:	04da      	lsls	r2, r3, #19
 8002b72:	d508      	bpl.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b74:	4941      	ldr	r1, [pc, #260]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b76:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002b78:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b7c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b80:	4302      	orrs	r2, r0
 8002b82:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b86:	049f      	lsls	r7, r3, #18
 8002b88:	d508      	bpl.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b8a:	493c      	ldr	r1, [pc, #240]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b8c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002b8e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b96:	4302      	orrs	r2, r0
 8002b98:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b9c:	0258      	lsls	r0, r3, #9
 8002b9e:	d508      	bpl.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ba0:	4936      	ldr	r1, [pc, #216]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ba2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002ba4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ba8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002bac:	4302      	orrs	r2, r0
 8002bae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bb2:	0299      	lsls	r1, r3, #10
 8002bb4:	d50c      	bpl.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bb6:	4831      	ldr	r0, [pc, #196]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bb8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002bba:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8002bbe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bc2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8002bc6:	bf08      	it	eq
 8002bc8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bd0:	035a      	lsls	r2, r3, #13
 8002bd2:	d508      	bpl.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bd4:	4929      	ldr	r1, [pc, #164]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bd6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002bd8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002bdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002be0:	4302      	orrs	r2, r0
 8002be2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002be6:	021f      	lsls	r7, r3, #8
 8002be8:	d509      	bpl.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bea:	4924      	ldr	r1, [pc, #144]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002bf0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002bf4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002bf8:	4302      	orrs	r2, r0
 8002bfa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002bfe:	0158      	lsls	r0, r3, #5
 8002c00:	d509      	bpl.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c02:	491e      	ldr	r1, [pc, #120]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c04:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002c08:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002c0c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c10:	4302      	orrs	r2, r0
 8002c12:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c16:	0119      	lsls	r1, r3, #4
 8002c18:	d509      	bpl.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c1a:	4918      	ldr	r1, [pc, #96]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c1c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8002c20:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002c24:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002c28:	4302      	orrs	r2, r0
 8002c2a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c2e:	00da      	lsls	r2, r3, #3
 8002c30:	d509      	bpl.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c32:	4912      	ldr	r1, [pc, #72]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c34:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002c38:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002c3c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002c40:	4302      	orrs	r2, r0
 8002c42:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c46:	2e01      	cmp	r6, #1
 8002c48:	f000 8099 	beq.w	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c50:	f000 8095 	beq.w	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c54:	2d01      	cmp	r5, #1
 8002c56:	d159      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8002c58:	4d08      	ldr	r5, [pc, #32]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c60:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c62:	f7fe fde3 	bl	800182c <HAL_GetTick>
 8002c66:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	009f      	lsls	r7, r3, #2
 8002c6c:	f100 810b 	bmi.w	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c70:	6821      	ldr	r1, [r4, #0]
 8002c72:	030d      	lsls	r5, r1, #12
 8002c74:	d506      	bpl.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002c76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c78:	b143      	cbz	r3, 8002c8c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002c7a:	e003      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40007000 	.word	0x40007000
 8002c84:	02c8      	lsls	r0, r1, #11
 8002c86:	d51d      	bpl.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c8a:	b9db      	cbnz	r3, 8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c8c:	4a85      	ldr	r2, [pc, #532]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002c8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c92:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c9a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002c9e:	4303      	orrs	r3, r0
 8002ca0:	6960      	ldr	r0, [r4, #20]
 8002ca2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002ca6:	69a0      	ldr	r0, [r4, #24]
 8002ca8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cb0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002cb4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002cb6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002cba:	3801      	subs	r0, #1
 8002cbc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002cc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002cc4:	028a      	lsls	r2, r1, #10
 8002cc6:	d515      	bpl.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002cc8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002cca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cce:	d111      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cd0:	4a74      	ldr	r2, [pc, #464]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002cd2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cd6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cda:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002cde:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	6961      	ldr	r1, [r4, #20]
 8002ce6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002cea:	6a21      	ldr	r1, [r4, #32]
 8002cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cf4:	4c6b      	ldr	r4, [pc, #428]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfe:	f7fe fd95 	bl	800182c <HAL_GetTick>
 8002d02:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	f140 80c4 	bpl.w	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x508>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	e009      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x398>
      plli2sused = 1; 
 8002d10:	2601      	movs	r6, #1
 8002d12:	e677      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d14:	f7fe fd8a 	bl	800182c <HAL_GetTick>
 8002d18:	eba0 0008 	sub.w	r0, r0, r8
 8002d1c:	2864      	cmp	r0, #100	; 0x64
 8002d1e:	f67f ae89 	bls.w	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002d22:	2003      	movs	r0, #3
}
 8002d24:	b003      	add	sp, #12
 8002d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d2c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002d30:	4293      	cmp	r3, r2
 8002d32:	f43f ae89 	beq.w	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d42:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d4a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002d4c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d50:	07da      	lsls	r2, r3, #31
 8002d52:	f57f ae79 	bpl.w	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002d56:	f7fe fd69 	bl	800182c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002d5e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d62:	079b      	lsls	r3, r3, #30
 8002d64:	f53f ae70 	bmi.w	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe fd60 	bl	800182c <HAL_GetTick>
 8002d6c:	eba0 0008 	sub.w	r0, r0, r8
 8002d70:	4548      	cmp	r0, r9
 8002d72:	d9f5      	bls.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8002d74:	e7d5      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x396>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d76:	6891      	ldr	r1, [r2, #8]
 8002d78:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002d7c:	e674      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 8002d7e:	4e49      	ldr	r6, [pc, #292]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002d80:	6833      	ldr	r3, [r6, #0]
 8002d82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d86:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002d88:	f7fe fd50 	bl	800182c <HAL_GetTick>
 8002d8c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d8e:	6833      	ldr	r3, [r6, #0]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	d472      	bmi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d94:	6822      	ldr	r2, [r4, #0]
 8002d96:	07d7      	lsls	r7, r2, #31
 8002d98:	d512      	bpl.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d9c:	b983      	cbnz	r3, 8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x434>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d9e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002da2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002daa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002dae:	430b      	orrs	r3, r1
 8002db0:	6861      	ldr	r1, [r4, #4]
 8002db2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002db6:	68a1      	ldr	r1, [r4, #8]
 8002db8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002dbc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dc0:	0316      	lsls	r6, r2, #12
 8002dc2:	d503      	bpl.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002dc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8002dcc:	02d0      	lsls	r0, r2, #11
 8002dce:	d51e      	bpl.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x482>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8002dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd6:	d11a      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dd8:	4932      	ldr	r1, [pc, #200]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002dda:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dde:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002de2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002dea:	4303      	orrs	r3, r0
 8002dec:	6860      	ldr	r0, [r4, #4]
 8002dee:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002df2:	68e0      	ldr	r0, [r4, #12]
 8002df4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002dfc:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e02:	f020 001f 	bic.w	r0, r0, #31
 8002e06:	3b01      	subs	r3, #1
 8002e08:	4303      	orrs	r3, r0
 8002e0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e0e:	01d1      	lsls	r1, r2, #7
 8002e10:	d511      	bpl.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e12:	4924      	ldr	r1, [pc, #144]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002e14:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e18:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e1c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002e20:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002e24:	4303      	orrs	r3, r0
 8002e26:	6860      	ldr	r0, [r4, #4]
 8002e28:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002e2c:	6920      	ldr	r0, [r4, #16]
 8002e2e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e36:	0192      	lsls	r2, r2, #6
 8002e38:	d50d      	bpl.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e3a:	6923      	ldr	r3, [r4, #16]
 8002e3c:	6862      	ldr	r2, [r4, #4]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e44:	68e2      	ldr	r2, [r4, #12]
 8002e46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e4a:	68a2      	ldr	r2, [r4, #8]
 8002e4c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002e52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002e56:	4e13      	ldr	r6, [pc, #76]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002e58:	6833      	ldr	r3, [r6, #0]
 8002e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e5e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002e60:	f7fe fce4 	bl	800182c <HAL_GetTick>
 8002e64:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e66:	6833      	ldr	r3, [r6, #0]
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	f53f aef3 	bmi.w	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e6e:	f7fe fcdd 	bl	800182c <HAL_GetTick>
 8002e72:	1bc0      	subs	r0, r0, r7
 8002e74:	2864      	cmp	r0, #100	; 0x64
 8002e76:	d9f6      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e78:	e753      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e7a:	f7fe fcd7 	bl	800182c <HAL_GetTick>
 8002e7e:	1bc0      	subs	r0, r0, r7
 8002e80:	2864      	cmp	r0, #100	; 0x64
 8002e82:	d984      	bls.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x402>
 8002e84:	e74d      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e86:	f7fe fcd1 	bl	800182c <HAL_GetTick>
 8002e8a:	1b80      	subs	r0, r0, r6
 8002e8c:	2864      	cmp	r0, #100	; 0x64
 8002e8e:	f67f aeeb 	bls.w	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002e92:	e746      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e94:	f7fe fcca 	bl	800182c <HAL_GetTick>
 8002e98:	1b40      	subs	r0, r0, r5
 8002e9a:	2864      	cmp	r0, #100	; 0x64
 8002e9c:	f67f af32 	bls.w	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002ea0:	e73f      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea8:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eaa:	4604      	mov	r4, r0
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d04e      	beq.n	8002f4e <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eb4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002eb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ebc:	b91b      	cbnz	r3, 8002ec6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ebe:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ec2:	f7fe f8c5 	bl	8001050 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ec6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ec8:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eca:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ecc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002ed0:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ed2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eda:	600b      	str	r3, [r1, #0]
 8002edc:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ee0:	d932      	bls.n	8002f48 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ee2:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ee4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee8:	bf18      	it	ne
 8002eea:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002eec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002eee:	b92b      	cbnz	r3, 8002efc <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ef0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002ef4:	bf8c      	ite	hi
 8002ef6:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002ef8:	2301      	movls	r3, #1
 8002efa:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002efc:	68a6      	ldr	r6, [r4, #8]
 8002efe:	6863      	ldr	r3, [r4, #4]
 8002f00:	69a5      	ldr	r5, [r4, #24]
 8002f02:	4333      	orrs	r3, r6
 8002f04:	6926      	ldr	r6, [r4, #16]
 8002f06:	4333      	orrs	r3, r6
 8002f08:	6966      	ldr	r6, [r4, #20]
 8002f0a:	4333      	orrs	r3, r6
 8002f0c:	69e6      	ldr	r6, [r4, #28]
 8002f0e:	4333      	orrs	r3, r6
 8002f10:	6a26      	ldr	r6, [r4, #32]
 8002f12:	4333      	orrs	r3, r6
 8002f14:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f16:	4333      	orrs	r3, r6
 8002f18:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f1c:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002f1e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f20:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002f24:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	432a      	orrs	r2, r5
 8002f30:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f32:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f34:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f36:	69cb      	ldr	r3, [r1, #28]
 8002f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f3c:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002f3e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f40:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f42:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f4c:	e7cc      	b.n	8002ee8 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002f4e:	2001      	movs	r0, #1
}
 8002f50:	bd70      	pop	{r4, r5, r6, pc}

08002f52 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f52:	6a03      	ldr	r3, [r0, #32]
{
 8002f54:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f56:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f58:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f5c:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8002f60:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f62:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002f64:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f66:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002f6a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f6e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f70:	6203      	str	r3, [r0, #32]
 8002f72:	bd10      	pop	{r4, pc}

08002f74 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f74:	6a03      	ldr	r3, [r0, #32]
 8002f76:	f023 0310 	bic.w	r3, r3, #16
{
 8002f7a:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f7c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002f80:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f82:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002f8a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8002f8e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f92:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f94:	6203      	str	r3, [r0, #32]
 8002f96:	bd10      	pop	{r4, pc}

08002f98 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f98:	6803      	ldr	r3, [r0, #0]
}
 8002f9a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
}
 8002fac:	4770      	bx	lr

08002fae <HAL_TIM_PWM_MspInit>:
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIM_OC_DelayElapsedCallback>:
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_TIM_IC_CaptureCallback>:
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIM_TriggerCallback>:
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fb8:	6803      	ldr	r3, [r0, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	0791      	lsls	r1, r2, #30
{
 8002fbe:	b510      	push	{r4, lr}
 8002fc0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc2:	d50f      	bpl.n	8002fe4 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	0792      	lsls	r2, r2, #30
 8002fc8:	d50c      	bpl.n	8002fe4 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fca:	f06f 0202 	mvn.w	r2, #2
 8002fce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd0:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002fd2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd4:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002fd6:	0799      	lsls	r1, r3, #30
 8002fd8:	f000 8085 	beq.w	80030e6 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002fdc:	f7ff ffe9 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	0752      	lsls	r2, r2, #29
 8002fea:	d510      	bpl.n	800300e <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	0750      	lsls	r0, r2, #29
 8002ff0:	d50d      	bpl.n	800300e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff2:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ffa:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002ffc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ffe:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003000:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003004:	d075      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	f7ff ffd4 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	2300      	movs	r3, #0
 800300c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	0711      	lsls	r1, r2, #28
 8003014:	d50f      	bpl.n	8003036 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	0712      	lsls	r2, r2, #28
 800301a:	d50c      	bpl.n	8003036 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800301c:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8003020:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003024:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003026:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003028:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800302a:	079b      	lsls	r3, r3, #30
 800302c:	d067      	beq.n	80030fe <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	f7ff ffc0 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	2300      	movs	r3, #0
 8003034:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	06d0      	lsls	r0, r2, #27
 800303c:	d510      	bpl.n	8003060 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	06d1      	lsls	r1, r2, #27
 8003042:	d50d      	bpl.n	8003060 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003044:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8003048:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800304a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800304e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003050:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003052:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003056:	d058      	beq.n	800310a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003058:	f7ff ffab 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305c:	2300      	movs	r3, #0
 800305e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	07d2      	lsls	r2, r2, #31
 8003066:	d508      	bpl.n	800307a <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	07d0      	lsls	r0, r2, #31
 800306c:	d505      	bpl.n	800307a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800306e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003072:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003074:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003076:	f7fd ffb3 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	0611      	lsls	r1, r2, #24
 8003080:	d508      	bpl.n	8003094 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	0612      	lsls	r2, r2, #24
 8003086:	d505      	bpl.n	8003094 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003088:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800308c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800308e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003090:	f000 fb31 	bl	80036f6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	05d0      	lsls	r0, r2, #23
 800309a:	d508      	bpl.n	80030ae <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	0611      	lsls	r1, r2, #24
 80030a0:	d505      	bpl.n	80030ae <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80030a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80030aa:	f000 fb24 	bl	80036f6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	0652      	lsls	r2, r2, #25
 80030b4:	d508      	bpl.n	80030c8 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	0650      	lsls	r0, r2, #25
 80030ba:	d505      	bpl.n	80030c8 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80030c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80030c4:	f7ff ff77 	bl	8002fb6 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	0691      	lsls	r1, r2, #26
 80030ce:	d522      	bpl.n	8003116 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	0692      	lsls	r2, r2, #26
 80030d4:	d51f      	bpl.n	8003116 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030d6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80030da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030dc:	611a      	str	r2, [r3, #16]
}
 80030de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80030e2:	f000 bb07 	b.w	80036f4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	f7ff ff63 	bl	8002fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f7ff ff62 	bl	8002fb4 <HAL_TIM_PWM_PulseFinishedCallback>
 80030f0:	e776      	b.n	8002fe0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f2:	f7ff ff5d 	bl	8002fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f6:	4620      	mov	r0, r4
 80030f8:	f7ff ff5c 	bl	8002fb4 <HAL_TIM_PWM_PulseFinishedCallback>
 80030fc:	e785      	b.n	800300a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	f7ff ff57 	bl	8002fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003102:	4620      	mov	r0, r4
 8003104:	f7ff ff56 	bl	8002fb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003108:	e793      	b.n	8003032 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	f7ff ff51 	bl	8002fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310e:	4620      	mov	r0, r4
 8003110:	f7ff ff50 	bl	8002fb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003114:	e7a2      	b.n	800305c <HAL_TIM_IRQHandler+0xa4>
 8003116:	bd10      	pop	{r4, pc}

08003118 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003118:	4a30      	ldr	r2, [pc, #192]	; (80031dc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800311a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800311c:	4290      	cmp	r0, r2
 800311e:	d012      	beq.n	8003146 <TIM_Base_SetConfig+0x2e>
 8003120:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003124:	d00f      	beq.n	8003146 <TIM_Base_SetConfig+0x2e>
 8003126:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800312a:	4290      	cmp	r0, r2
 800312c:	d00b      	beq.n	8003146 <TIM_Base_SetConfig+0x2e>
 800312e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003132:	4290      	cmp	r0, r2
 8003134:	d007      	beq.n	8003146 <TIM_Base_SetConfig+0x2e>
 8003136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800313a:	4290      	cmp	r0, r2
 800313c:	d003      	beq.n	8003146 <TIM_Base_SetConfig+0x2e>
 800313e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003142:	4290      	cmp	r0, r2
 8003144:	d11d      	bne.n	8003182 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8003146:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800314c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800314e:	4a23      	ldr	r2, [pc, #140]	; (80031dc <TIM_Base_SetConfig+0xc4>)
 8003150:	4290      	cmp	r0, r2
 8003152:	d104      	bne.n	800315e <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003158:	68ca      	ldr	r2, [r1, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	e028      	b.n	80031b0 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800315e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003162:	d0f7      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
 8003164:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <TIM_Base_SetConfig+0xc8>)
 8003166:	4290      	cmp	r0, r2
 8003168:	d0f4      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
 800316a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800316e:	4290      	cmp	r0, r2
 8003170:	d0f0      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
 8003172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003176:	4290      	cmp	r0, r2
 8003178:	d0ec      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
 800317a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800317e:	4290      	cmp	r0, r2
 8003180:	d0e8      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
 8003182:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <TIM_Base_SetConfig+0xcc>)
 8003184:	4290      	cmp	r0, r2
 8003186:	d0e5      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
 8003188:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800318c:	4290      	cmp	r0, r2
 800318e:	d0e1      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
 8003190:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003194:	4290      	cmp	r0, r2
 8003196:	d0dd      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
 8003198:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800319c:	4290      	cmp	r0, r2
 800319e:	d0d9      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
 80031a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031a4:	4290      	cmp	r0, r2
 80031a6:	d0d5      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
 80031a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031ac:	4290      	cmp	r0, r2
 80031ae:	d0d1      	beq.n	8003154 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b0:	694a      	ldr	r2, [r1, #20]
 80031b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80031b8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ba:	688b      	ldr	r3, [r1, #8]
 80031bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80031be:	680b      	ldr	r3, [r1, #0]
 80031c0:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <TIM_Base_SetConfig+0xc4>)
 80031c4:	4298      	cmp	r0, r3
 80031c6:	d006      	beq.n	80031d6 <TIM_Base_SetConfig+0xbe>
 80031c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031cc:	4298      	cmp	r0, r3
 80031ce:	d002      	beq.n	80031d6 <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 80031d0:	2301      	movs	r3, #1
 80031d2:	6143      	str	r3, [r0, #20]
}
 80031d4:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80031d6:	690b      	ldr	r3, [r1, #16]
 80031d8:	6303      	str	r3, [r0, #48]	; 0x30
 80031da:	e7f9      	b.n	80031d0 <TIM_Base_SetConfig+0xb8>
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40014000 	.word	0x40014000

080031e8 <HAL_TIM_Base_Init>:
{ 
 80031e8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80031ea:	4604      	mov	r4, r0
 80031ec:	b1a0      	cbz	r0, 8003218 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80031ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031f6:	b91b      	cbnz	r3, 8003200 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80031f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80031fc:	f7fd ffec 	bl	80011d8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003200:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8003206:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800320a:	f7ff ff85 	bl	8003118 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800320e:	2301      	movs	r3, #1
  return HAL_OK;
 8003210:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003212:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003216:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003218:	2001      	movs	r0, #1
}
 800321a:	bd10      	pop	{r4, pc}

0800321c <HAL_TIM_PWM_Init>:
{
 800321c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800321e:	4604      	mov	r4, r0
 8003220:	b1a0      	cbz	r0, 800324c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003222:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003226:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800322a:	b91b      	cbnz	r3, 8003234 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;  
 800322c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003230:	f7ff febd 	bl	8002fae <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8003234:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 800323a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800323e:	f7ff ff6b 	bl	8003118 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003242:	2301      	movs	r3, #1
  return HAL_OK;
 8003244:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003246:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800324a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800324c:	2001      	movs	r0, #1
}  
 800324e:	bd10      	pop	{r4, pc}

08003250 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003250:	6a03      	ldr	r3, [r0, #32]
 8003252:	f023 0301 	bic.w	r3, r3, #1
{
 8003256:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003258:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800325a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800325c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800325e:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003260:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8003264:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003266:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800326a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800326e:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8003270:	688d      	ldr	r5, [r1, #8]
 8003272:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003274:	4d0c      	ldr	r5, [pc, #48]	; (80032a8 <TIM_OC1_SetConfig+0x58>)
 8003276:	42a8      	cmp	r0, r5
 8003278:	d009      	beq.n	800328e <TIM_OC1_SetConfig+0x3e>
 800327a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800327e:	42a8      	cmp	r0, r5
 8003280:	d005      	beq.n	800328e <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8003282:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8003284:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003286:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003288:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 800328a:	6203      	str	r3, [r0, #32]
} 
 800328c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800328e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003290:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8003294:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003296:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800329a:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800329c:	694d      	ldr	r5, [r1, #20]
 800329e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80032a0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80032a4:	432a      	orrs	r2, r5
 80032a6:	e7ec      	b.n	8003282 <TIM_OC1_SetConfig+0x32>
 80032a8:	40010000 	.word	0x40010000

080032ac <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ac:	6a03      	ldr	r3, [r0, #32]
 80032ae:	f023 0310 	bic.w	r3, r3, #16
{
 80032b2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80032b6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80032b8:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80032ba:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80032bc:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 80032c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032c2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80032c6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80032ca:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 80032ce:	688d      	ldr	r5, [r1, #8]
 80032d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80032d4:	4d0d      	ldr	r5, [pc, #52]	; (800330c <TIM_OC2_SetConfig+0x60>)
 80032d6:	42a8      	cmp	r0, r5
 80032d8:	d009      	beq.n	80032ee <TIM_OC2_SetConfig+0x42>
 80032da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032de:	42a8      	cmp	r0, r5
 80032e0:	d005      	beq.n	80032ee <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 80032e2:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80032e4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80032e6:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80032e8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80032ea:	6203      	str	r3, [r0, #32]
}
 80032ec:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80032ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80032f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80032f4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80032fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80032fe:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003300:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003306:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800330a:	e7ea      	b.n	80032e2 <TIM_OC2_SetConfig+0x36>
 800330c:	40010000 	.word	0x40010000

08003310 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003310:	6a03      	ldr	r3, [r0, #32]
 8003312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8003316:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003318:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800331a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800331c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800331e:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8003324:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003326:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800332a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800332e:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8003330:	688d      	ldr	r5, [r1, #8]
 8003332:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003336:	4d0e      	ldr	r5, [pc, #56]	; (8003370 <TIM_OC3_SetConfig+0x60>)
 8003338:	42a8      	cmp	r0, r5
 800333a:	d009      	beq.n	8003350 <TIM_OC3_SetConfig+0x40>
 800333c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003340:	42a8      	cmp	r0, r5
 8003342:	d005      	beq.n	8003350 <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8003344:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8003346:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003348:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800334a:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800334c:	6203      	str	r3, [r0, #32]
}
 800334e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003350:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003356:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003358:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800335c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8003360:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003362:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003368:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800336c:	e7ea      	b.n	8003344 <TIM_OC3_SetConfig+0x34>
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000

08003374 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003374:	6a03      	ldr	r3, [r0, #32]
 8003376:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800337a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800337c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800337e:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003380:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003382:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003384:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003388:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800338a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800338e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003392:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003396:	688d      	ldr	r5, [r1, #8]
 8003398:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800339c:	4d09      	ldr	r5, [pc, #36]	; (80033c4 <TIM_OC4_SetConfig+0x50>)
 800339e:	42a8      	cmp	r0, r5
 80033a0:	d009      	beq.n	80033b6 <TIM_OC4_SetConfig+0x42>
 80033a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80033a6:	42a8      	cmp	r0, r5
 80033a8:	d005      	beq.n	80033b6 <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 80033aa:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80033ac:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80033ae:	684b      	ldr	r3, [r1, #4]
 80033b0:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80033b2:	6204      	str	r4, [r0, #32]
}
 80033b4:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80033ba:	694d      	ldr	r5, [r1, #20]
 80033bc:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80033c0:	e7f3      	b.n	80033aa <TIM_OC4_SetConfig+0x36>
 80033c2:	bf00      	nop
 80033c4:	40010000 	.word	0x40010000

080033c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c8:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80033ca:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80033cc:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80033ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80033d6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d8:	6083      	str	r3, [r0, #8]
 80033da:	bd10      	pop	{r4, pc}

080033dc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80033dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
{
 80033e2:	b510      	push	{r4, lr}
 80033e4:	4604      	mov	r4, r0
 80033e6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80033ea:	d018      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80033f0:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80033f2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80033f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80033f8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033fa:	4b3e      	ldr	r3, [pc, #248]	; (80034f4 <HAL_TIM_ConfigClockSource+0x118>)
 80033fc:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80033fe:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003400:	680b      	ldr	r3, [r1, #0]
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d059      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0xde>
 8003406:	d815      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x58>
 8003408:	2b10      	cmp	r3, #16
 800340a:	d067      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x100>
 800340c:	d808      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x44>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d05e      	beq.n	80034d0 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8003412:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003414:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003416:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800341a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800341e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003420:	2b20      	cmp	r3, #32
 8003422:	d061      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0x10c>
 8003424:	2b30      	cmp	r3, #48	; 0x30
 8003426:	d1f4      	bne.n	8003412 <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8003428:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800342e:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8003432:	e026      	b.n	8003482 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8003434:	2b70      	cmp	r3, #112	; 0x70
 8003436:	d026      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0xaa>
 8003438:	d80e      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x7c>
 800343a:	2b50      	cmp	r3, #80	; 0x50
 800343c:	d032      	beq.n	80034a4 <HAL_TIM_ConfigClockSource+0xc8>
 800343e:	2b60      	cmp	r3, #96	; 0x60
 8003440:	d1e7      	bne.n	8003412 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003442:	68ca      	ldr	r2, [r1, #12]
 8003444:	6849      	ldr	r1, [r1, #4]
 8003446:	f7ff fd95 	bl	8002f74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800344a:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800344c:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003452:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003456:	e023      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345c:	d00c      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0x9c>
 800345e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003462:	d1d6      	bne.n	8003412 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8003464:	68cb      	ldr	r3, [r1, #12]
 8003466:	684a      	ldr	r2, [r1, #4]
 8003468:	6889      	ldr	r1, [r1, #8]
 800346a:	f7ff ffad 	bl	80033c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	6893      	ldr	r3, [r2, #8]
 8003472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003476:	e013      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003478:	6883      	ldr	r3, [r0, #8]
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8003482:	6083      	str	r3, [r0, #8]
 8003484:	e7c5      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8003486:	68cb      	ldr	r3, [r1, #12]
 8003488:	684a      	ldr	r2, [r1, #4]
 800348a:	6889      	ldr	r1, [r1, #8]
 800348c:	f7ff ff9c 	bl	80033c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003490:	6822      	ldr	r2, [r4, #0]
 8003492:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003498:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800349c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a0:	6093      	str	r3, [r2, #8]
    break;
 80034a2:	e7b6      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80034a4:	68ca      	ldr	r2, [r1, #12]
 80034a6:	6849      	ldr	r1, [r1, #4]
 80034a8:	f7ff fd53 	bl	8002f52 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ac:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80034ae:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80034b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80034b4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80034b8:	e7f2      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80034ba:	68ca      	ldr	r2, [r1, #12]
 80034bc:	6849      	ldr	r1, [r1, #4]
 80034be:	f7ff fd48 	bl	8002f52 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c2:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80034c4:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80034ca:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80034ce:	e7e7      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 80034d0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80034d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80034d6:	f043 0307 	orr.w	r3, r3, #7
 80034da:	e7d2      	b.n	8003482 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80034dc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80034e2:	f043 0317 	orr.w	r3, r3, #23
 80034e6:	e7cc      	b.n	8003482 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80034e8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80034ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80034ee:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80034f2:	e7c6      	b.n	8003482 <HAL_TIM_ConfigClockSource+0xa6>
 80034f4:	fffe0088 	.word	0xfffe0088

080034f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034f8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80034fa:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034fc:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80034fe:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 8003500:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003502:	ea23 0304 	bic.w	r3, r3, r4
 8003506:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003508:	6a03      	ldr	r3, [r0, #32]
 800350a:	431a      	orrs	r2, r3
 800350c:	6202      	str	r2, [r0, #32]
 800350e:	bd10      	pop	{r4, pc}

08003510 <HAL_TIM_PWM_Start>:
{
 8003510:	b510      	push	{r4, lr}
 8003512:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003514:	2201      	movs	r2, #1
 8003516:	6800      	ldr	r0, [r0, #0]
 8003518:	f7ff ffee 	bl	80034f8 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_TIM_PWM_Start+0x30>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <HAL_TIM_PWM_Start+0x1c>
 8003524:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003528:	4293      	cmp	r3, r2
 800352a:	d103      	bne.n	8003534 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 800352c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800352e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003532:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003534:	681a      	ldr	r2, [r3, #0]
} 
 8003536:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
} 
 800353e:	bd10      	pop	{r4, pc}
 8003540:	40010000 	.word	0x40010000

08003544 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003544:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8003546:	2404      	movs	r4, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8003548:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 800354a:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1NE << Channel;
 800354c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800354e:	ea23 0304 	bic.w	r3, r3, r4
 8003552:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8003554:	6a03      	ldr	r3, [r0, #32]
 8003556:	431a      	orrs	r2, r3
 8003558:	6202      	str	r2, [r0, #32]
 800355a:	bd10      	pop	{r4, pc}

0800355c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800355c:	6a03      	ldr	r3, [r0, #32]
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8003562:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003564:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003568:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800356a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800356c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8003570:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800357a:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800357c:	688d      	ldr	r5, [r1, #8]
 800357e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003582:	4d09      	ldr	r5, [pc, #36]	; (80035a8 <TIM_OC5_SetConfig+0x4c>)
 8003584:	42a8      	cmp	r0, r5
 8003586:	d003      	beq.n	8003590 <TIM_OC5_SetConfig+0x34>
 8003588:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800358c:	42a8      	cmp	r0, r5
 800358e:	d104      	bne.n	800359a <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003590:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8003594:	694d      	ldr	r5, [r1, #20]
 8003596:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800359c:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800359e:	684b      	ldr	r3, [r1, #4]
 80035a0:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80035a2:	6202      	str	r2, [r0, #32]
 80035a4:	bd30      	pop	{r4, r5, pc}
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000

080035ac <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035ac:	6a03      	ldr	r3, [r0, #32]
 80035ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80035b2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035b4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80035b8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80035c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80035ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80035ce:	688d      	ldr	r5, [r1, #8]
 80035d0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80035d4:	4d08      	ldr	r5, [pc, #32]	; (80035f8 <TIM_OC6_SetConfig+0x4c>)
 80035d6:	42a8      	cmp	r0, r5
 80035d8:	d003      	beq.n	80035e2 <TIM_OC6_SetConfig+0x36>
 80035da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035de:	42a8      	cmp	r0, r5
 80035e0:	d104      	bne.n	80035ec <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035e2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80035e6:	694d      	ldr	r5, [r1, #20]
 80035e8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ec:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035ee:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035f0:	684b      	ldr	r3, [r1, #4]
 80035f2:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80035f4:	6202      	str	r2, [r0, #32]
 80035f6:	bd30      	pop	{r4, r5, pc}
 80035f8:	40010000 	.word	0x40010000

080035fc <HAL_TIMEx_PWMN_Start>:
{
 80035fc:	b510      	push	{r4, lr}
 80035fe:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003600:	2204      	movs	r2, #4
 8003602:	6800      	ldr	r0, [r0, #0]
 8003604:	f7ff ff9e 	bl	8003544 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8003608:	6823      	ldr	r3, [r4, #0]
} 
 800360a:	2000      	movs	r0, #0
  __HAL_TIM_MOE_ENABLE(htim);
 800360c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800360e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
} 
 800361c:	bd10      	pop	{r4, pc}
	...

08003620 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8003620:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
{
 8003626:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8003628:	d01c      	beq.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 800362a:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800362c:	4d0e      	ldr	r5, [pc, #56]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800362e:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003630:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8003632:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003634:	d003      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8003636:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800363a:	42aa      	cmp	r2, r5
 800363c:	d103      	bne.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800363e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003642:	684d      	ldr	r5, [r1, #4]
 8003644:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003646:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800364c:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 800364e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003652:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003654:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 8003656:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 8003658:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800365a:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 800365c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003660:	4618      	mov	r0, r3
 8003662:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8003664:	2002      	movs	r0, #2
} 
 8003666:	bd30      	pop	{r4, r5, pc}
 8003668:	40010000 	.word	0x40010000

0800366c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800366c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003670:	2b01      	cmp	r3, #1
 8003672:	f04f 0302 	mov.w	r3, #2
{
 8003676:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003678:	d038      	beq.n	80036ec <HAL_TIMEx_ConfigBreakDeadTime+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800367a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800367e:	68cb      	ldr	r3, [r1, #12]
 8003680:	688a      	ldr	r2, [r1, #8]
 8003682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003686:	4c1a      	ldr	r4, [pc, #104]	; (80036f0 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003688:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800368a:	684a      	ldr	r2, [r1, #4]
 800368c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003690:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003692:	680a      	ldr	r2, [r1, #0]
 8003694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003698:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800369a:	690a      	ldr	r2, [r1, #16]
 800369c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036a2:	694a      	ldr	r2, [r1, #20]
 80036a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036aa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80036b2:	698a      	ldr	r2, [r1, #24]
 80036b4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80036b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80036bc:	6802      	ldr	r2, [r0, #0]
 80036be:	42a2      	cmp	r2, r4
 80036c0:	d003      	beq.n	80036ca <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 80036c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80036c6:	42a2      	cmp	r2, r4
 80036c8:	d10c      	bne.n	80036e4 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80036ca:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80036cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036d0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80036d4:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80036d6:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80036d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036dc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80036de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80036e2:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80036e4:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80036e6:	2300      	movs	r3, #0
 80036e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80036ec:	4618      	mov	r0, r3
}
 80036ee:	bd10      	pop	{r4, pc}
 80036f0:	40010000 	.word	0x40010000

080036f4 <HAL_TIMEx_CommutationCallback>:
 80036f4:	4770      	bx	lr

080036f6 <HAL_TIMEx_BreakCallback>:
{
 80036f6:	4770      	bx	lr

080036f8 <HAL_TIM_PWM_ConfigChannel>:
{
 80036f8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80036fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80036fe:	4604      	mov	r4, r0
 8003700:	460d      	mov	r5, r1
 8003702:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003704:	2b01      	cmp	r3, #1
 8003706:	d010      	beq.n	800372a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003708:	2301      	movs	r3, #1
  switch (Channel)
 800370a:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003710:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003714:	d043      	beq.n	800379e <HAL_TIM_PWM_ConfigChannel+0xa6>
 8003716:	d809      	bhi.n	800372c <HAL_TIM_PWM_ConfigChannel+0x34>
 8003718:	b1fa      	cbz	r2, 800375a <HAL_TIM_PWM_ConfigChannel+0x62>
 800371a:	2a04      	cmp	r2, #4
 800371c:	d02e      	beq.n	800377c <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800371e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003720:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003722:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003726:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800372a:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800372c:	2a10      	cmp	r2, #16
 800372e:	d047      	beq.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8003730:	2a14      	cmp	r2, #20
 8003732:	d056      	beq.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0xea>
 8003734:	2a0c      	cmp	r2, #12
 8003736:	d1f2      	bne.n	800371e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003738:	6820      	ldr	r0, [r4, #0]
 800373a:	f7ff fe1b 	bl	8003374 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800373e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003740:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003758:	e030      	b.n	80037bc <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800375a:	6820      	ldr	r0, [r4, #0]
 800375c:	f7ff fd78 	bl	8003250 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003760:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003762:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	f042 0208 	orr.w	r2, r2, #8
 800376a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	f022 0204 	bic.w	r2, r2, #4
 8003772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003778:	619a      	str	r2, [r3, #24]
    break;
 800377a:	e7d0      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800377c:	6820      	ldr	r0, [r4, #0]
 800377e:	f7ff fd95 	bl	80032ac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003782:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003784:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800378e:	699a      	ldr	r2, [r3, #24]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003794:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800379c:	e7ec      	b.n	8003778 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	f7ff fdb6 	bl	8003310 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80037a6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	f042 0208 	orr.w	r2, r2, #8
 80037ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	f022 0204 	bic.w	r2, r2, #4
 80037b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80037b8:	69da      	ldr	r2, [r3, #28]
 80037ba:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80037bc:	61da      	str	r2, [r3, #28]
    break;
 80037be:	e7ae      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037c0:	6820      	ldr	r0, [r4, #0]
 80037c2:	f7ff fecb 	bl	800355c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037c6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80037c8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037cc:	f042 0208 	orr.w	r2, r2, #8
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037d4:	f022 0204 	bic.w	r2, r2, #4
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80037da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037dc:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 80037e0:	e79d      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037e2:	6820      	ldr	r0, [r4, #0]
 80037e4:	f7ff fee2 	bl	80035ac <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80037ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80037fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003802:	e7ec      	b.n	80037de <HAL_TIM_PWM_ConfigChannel+0xe6>

08003804 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003804:	6803      	ldr	r3, [r0, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800380c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003816:	2320      	movs	r3, #32
 8003818:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800381c:	4770      	bx	lr
	...

08003820 <HAL_UART_Receive_DMA>:
{
 8003820:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8003822:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8003826:	2a20      	cmp	r2, #32
{
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 800382c:	d133      	bne.n	8003896 <HAL_UART_Receive_DMA+0x76>
    if((pData == NULL ) || (Size == 0U))
 800382e:	2900      	cmp	r1, #0
 8003830:	d02f      	beq.n	8003892 <HAL_UART_Receive_DMA+0x72>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d02d      	beq.n	8003892 <HAL_UART_Receive_DMA+0x72>
    __HAL_LOCK(huart);
 8003836:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 800383a:	2a01      	cmp	r2, #1
 800383c:	d02b      	beq.n	8003896 <HAL_UART_Receive_DMA+0x76>
 800383e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	2500      	movs	r5, #0
    huart->pRxBuffPtr = pData;
 8003842:	6541      	str	r1, [r0, #84]	; 0x54
    __HAL_LOCK(huart);
 8003844:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003848:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384a:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxXferSize = Size;
 800384c:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003850:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003854:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8003856:	4a11      	ldr	r2, [pc, #68]	; (800389c <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8003858:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800385a:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800385c:	4a10      	ldr	r2, [pc, #64]	; (80038a0 <HAL_UART_Receive_DMA+0x80>)
    huart->hdmarx->XferAbortCallback = NULL;
 800385e:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003860:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <HAL_UART_Receive_DMA+0x84>)
 8003864:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8003866:	460a      	mov	r2, r1
 8003868:	f106 0124 	add.w	r1, r6, #36	; 0x24
 800386c:	f7fe faa4 	bl	8001db8 <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003870:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8003872:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    return HAL_OK;
 8003876:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800388e:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8003890:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003892:	2001      	movs	r0, #1
 8003894:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003896:	2002      	movs	r0, #2
}
 8003898:	bd70      	pop	{r4, r5, r6, pc}
 800389a:	bf00      	nop
 800389c:	08003a1d 	.word	0x08003a1d
 80038a0:	08003ac7 	.word	0x08003ac7
 80038a4:	08003ad1 	.word	0x08003ad1

080038a8 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 80038a8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d026      	beq.n	80038fe <HAL_UART_DMAResume+0x56>
 80038b0:	2301      	movs	r3, #1
 80038b2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80038b6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80038ba:	2b21      	cmp	r3, #33	; 0x21
 80038bc:	6803      	ldr	r3, [r0, #0]
 80038be:	d103      	bne.n	80038c8 <HAL_UART_DMAResume+0x20>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038c6:	609a      	str	r2, [r3, #8]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038c8:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 80038cc:	2a22      	cmp	r2, #34	; 0x22
 80038ce:	d10d      	bne.n	80038ec <HAL_UART_DMAResume+0x44>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80038d0:	2208      	movs	r2, #8
 80038d2:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038da:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ea:	609a      	str	r2, [r3, #8]
  if ((huart->Instance->CR1 & USART_CR1_UE) == 0U)
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	f010 0001 	ands.w	r0, r0, #1
 80038f2:	d106      	bne.n	8003902 <HAL_UART_DMAResume+0x5a>
    __HAL_UART_ENABLE(huart);
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	4770      	bx	lr
  __HAL_LOCK(huart);
 80038fe:	2002      	movs	r0, #2
 8003900:	4770      	bx	lr
  return HAL_OK;
 8003902:	2000      	movs	r0, #0
}
 8003904:	4770      	bx	lr

08003906 <UART_WaitOnFlagUntilTimeout>:
{
 8003906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390a:	9d06      	ldr	r5, [sp, #24]
 800390c:	4604      	mov	r4, r0
 800390e:	460f      	mov	r7, r1
 8003910:	4616      	mov	r6, r2
 8003912:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003914:	6821      	ldr	r1, [r4, #0]
 8003916:	69ca      	ldr	r2, [r1, #28]
 8003918:	ea37 0302 	bics.w	r3, r7, r2
 800391c:	bf0c      	ite	eq
 800391e:	2201      	moveq	r2, #1
 8003920:	2200      	movne	r2, #0
 8003922:	42b2      	cmp	r2, r6
 8003924:	d002      	beq.n	800392c <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003926:	2000      	movs	r0, #0
}
 8003928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800392c:	1c6b      	adds	r3, r5, #1
 800392e:	d0f2      	beq.n	8003916 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8003930:	b99d      	cbnz	r5, 800395a <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003932:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003934:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800393c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003946:	2320      	movs	r3, #32
 8003948:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800394c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8003950:	2300      	movs	r3, #0
 8003952:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8003956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800395a:	f7fd ff67 	bl	800182c <HAL_GetTick>
 800395e:	eba0 0008 	sub.w	r0, r0, r8
 8003962:	4285      	cmp	r5, r0
 8003964:	d8d6      	bhi.n	8003914 <UART_WaitOnFlagUntilTimeout+0xe>
 8003966:	e7e4      	b.n	8003932 <UART_WaitOnFlagUntilTimeout+0x2c>

08003968 <HAL_UART_Transmit>:
{
 8003968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800396c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800396e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8003972:	4604      	mov	r4, r0
 8003974:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 8003976:	2b20      	cmp	r3, #32
{
 8003978:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800397a:	d14c      	bne.n	8003a16 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 800397c:	2900      	cmp	r1, #0
 800397e:	d048      	beq.n	8003a12 <HAL_UART_Transmit+0xaa>
 8003980:	2a00      	cmp	r2, #0
 8003982:	d046      	beq.n	8003a12 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8003984:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003988:	2b01      	cmp	r3, #1
 800398a:	d044      	beq.n	8003a16 <HAL_UART_Transmit+0xae>
 800398c:	2301      	movs	r3, #1
 800398e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	2300      	movs	r3, #0
 8003994:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003996:	2321      	movs	r3, #33	; 0x21
 8003998:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800399c:	f7fd ff46 	bl	800182c <HAL_GetTick>
 80039a0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80039a2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80039a6:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80039aa:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80039ae:	b292      	uxth	r2, r2
 80039b0:	b962      	cbnz	r2, 80039cc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b2:	9700      	str	r7, [sp, #0]
 80039b4:	4633      	mov	r3, r6
 80039b6:	2140      	movs	r1, #64	; 0x40
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7ff ffa4 	bl	8003906 <UART_WaitOnFlagUntilTimeout>
 80039be:	b998      	cbnz	r0, 80039e8 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80039c0:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80039c2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 80039c6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 80039ca:	e00e      	b.n	80039ea <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80039cc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d0:	2200      	movs	r2, #0
 80039d2:	9700      	str	r7, [sp, #0]
 80039d4:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 80039d6:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d8:	4620      	mov	r0, r4
      huart->TxXferCount--;
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039e0:	4633      	mov	r3, r6
 80039e2:	f7ff ff90 	bl	8003906 <UART_WaitOnFlagUntilTimeout>
 80039e6:	b118      	cbz	r0, 80039f0 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80039e8:	2003      	movs	r0, #3
}
 80039ea:	b002      	add	sp, #8
 80039ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f0:	68a3      	ldr	r3, [r4, #8]
 80039f2:	6822      	ldr	r2, [r4, #0]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f8:	d107      	bne.n	8003a0a <HAL_UART_Transmit+0xa2>
 80039fa:	6923      	ldr	r3, [r4, #16]
 80039fc:	b92b      	cbnz	r3, 8003a0a <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80039fe:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8003a08:	e7cf      	b.n	80039aa <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003a0a:	782b      	ldrb	r3, [r5, #0]
 8003a0c:	3501      	adds	r5, #1
 8003a0e:	6293      	str	r3, [r2, #40]	; 0x28
 8003a10:	e7cb      	b.n	80039aa <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003a12:	2001      	movs	r0, #1
 8003a14:	e7e9      	b.n	80039ea <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8003a16:	2002      	movs	r0, #2
 8003a18:	e7e7      	b.n	80039ea <HAL_UART_Transmit+0x82>

08003a1a <HAL_UART_TxCpltCallback>:
 8003a1a:	4770      	bx	lr

08003a1c <UART_DMAReceiveCplt>:
{
 8003a1c:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a1e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a20:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003a28:	d111      	bne.n	8003a4e <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 8003a2a:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003a36:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a38:	6899      	ldr	r1, [r3, #8]
 8003a3a:	f021 0101 	bic.w	r1, r1, #1
 8003a3e:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a40:	6899      	ldr	r1, [r3, #8]
 8003a42:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003a46:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8003a48:	2320      	movs	r3, #32
 8003a4a:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
  HAL_UART_RxCpltCallback(huart);
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7fc fc4e 	bl	80002f0 <HAL_UART_RxCpltCallback>
 8003a54:	bd08      	pop	{r3, pc}

08003a56 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a56:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003a5a:	6802      	ldr	r2, [r0, #0]
 8003a5c:	2b22      	cmp	r3, #34	; 0x22
{
 8003a5e:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a60:	d12a      	bne.n	8003ab8 <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a62:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8003a64:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a6e:	d11d      	bne.n	8003aac <UART_Receive_IT+0x56>
 8003a70:	6904      	ldr	r4, [r0, #16]
 8003a72:	b9dc      	cbnz	r4, 8003aac <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a76:	4011      	ands	r1, r2
 8003a78:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8003a7c:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8003a7e:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8003a82:	3c01      	subs	r4, #1
 8003a84:	b2a4      	uxth	r4, r4
 8003a86:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8003a8a:	b96c      	cbnz	r4, 8003aa8 <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8c:	6803      	ldr	r3, [r0, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a94:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8003aa4:	f7fc fc24 	bl	80002f0 <HAL_UART_RxCpltCallback>
    return HAL_OK;
 8003aa8:	2000      	movs	r0, #0
}
 8003aaa:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aae:	1c5c      	adds	r4, r3, #1
 8003ab0:	4011      	ands	r1, r2
 8003ab2:	6544      	str	r4, [r0, #84]	; 0x54
 8003ab4:	7019      	strb	r1, [r3, #0]
 8003ab6:	e7e2      	b.n	8003a7e <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ab8:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 8003aba:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003abc:	f043 0308 	orr.w	r3, r3, #8
 8003ac0:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 8003ac2:	bd10      	pop	{r4, pc}

08003ac4 <HAL_UART_RxHalfCpltCallback>:
 8003ac4:	4770      	bx	lr

08003ac6 <UART_DMARxHalfCplt>:
{
 8003ac6:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8003ac8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003aca:	f7ff fffb 	bl	8003ac4 <HAL_UART_RxHalfCpltCallback>
 8003ace:	bd08      	pop	{r3, pc}

08003ad0 <UART_DMAError>:
{
 8003ad0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ad2:	6b81      	ldr	r1, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ada:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ade:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 8003ae2:	2b21      	cmp	r3, #33	; 0x21
 8003ae4:	d10a      	bne.n	8003afc <UART_DMAError+0x2c>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8003ae6:	680b      	ldr	r3, [r1, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	0612      	lsls	r2, r2, #24
 8003aec:	d506      	bpl.n	8003afc <UART_DMAError+0x2c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003af4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003af6:	2320      	movs	r3, #32
 8003af8:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003afc:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 8003b00:	2b22      	cmp	r3, #34	; 0x22
 8003b02:	d106      	bne.n	8003b12 <UART_DMAError+0x42>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8003b04:	680b      	ldr	r3, [r1, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	065b      	lsls	r3, r3, #25
 8003b0a:	d502      	bpl.n	8003b12 <UART_DMAError+0x42>
    UART_EndRxTransfer(huart);
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	f7ff fe79 	bl	8003804 <UART_EndRxTransfer>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8003b12:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003b14:	4608      	mov	r0, r1
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8003b16:	f043 0310 	orr.w	r3, r3, #16
 8003b1a:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003b1c:	f7fc fbe2 	bl	80002e4 <HAL_UART_ErrorCallback>
 8003b20:	bd08      	pop	{r3, pc}
	...

08003b24 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b24:	6803      	ldr	r3, [r0, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b28:	6819      	ldr	r1, [r3, #0]
{
 8003b2a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003b2c:	0716      	lsls	r6, r2, #28
{
 8003b2e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b30:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8003b32:	d107      	bne.n	8003b44 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b34:	0695      	lsls	r5, r2, #26
 8003b36:	d563      	bpl.n	8003c00 <HAL_UART_IRQHandler+0xdc>
 8003b38:	068e      	lsls	r6, r1, #26
 8003b3a:	d561      	bpl.n	8003c00 <HAL_UART_IRQHandler+0xdc>
}
 8003b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003b40:	f7ff bf89 	b.w	8003a56 <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003b44:	f015 0001 	ands.w	r0, r5, #1
 8003b48:	d102      	bne.n	8003b50 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003b4a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003b4e:	d057      	beq.n	8003c00 <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b50:	07d5      	lsls	r5, r2, #31
 8003b52:	d507      	bpl.n	8003b64 <HAL_UART_IRQHandler+0x40>
 8003b54:	05ce      	lsls	r6, r1, #23
 8003b56:	d505      	bpl.n	8003b64 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003b58:	2501      	movs	r5, #1
 8003b5a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b5c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003b5e:	f045 0501 	orr.w	r5, r5, #1
 8003b62:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b64:	0795      	lsls	r5, r2, #30
 8003b66:	d506      	bpl.n	8003b76 <HAL_UART_IRQHandler+0x52>
 8003b68:	b128      	cbz	r0, 8003b76 <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003b6a:	2502      	movs	r5, #2
 8003b6c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b6e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003b70:	f045 0504 	orr.w	r5, r5, #4
 8003b74:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b76:	0756      	lsls	r6, r2, #29
 8003b78:	d506      	bpl.n	8003b88 <HAL_UART_IRQHandler+0x64>
 8003b7a:	b128      	cbz	r0, 8003b88 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003b7c:	2504      	movs	r5, #4
 8003b7e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b80:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003b82:	f045 0502 	orr.w	r5, r5, #2
 8003b86:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003b88:	0715      	lsls	r5, r2, #28
 8003b8a:	d507      	bpl.n	8003b9c <HAL_UART_IRQHandler+0x78>
 8003b8c:	068e      	lsls	r6, r1, #26
 8003b8e:	d400      	bmi.n	8003b92 <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b90:	b120      	cbz	r0, 8003b9c <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003b92:	2008      	movs	r0, #8
 8003b94:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003b98:	4303      	orrs	r3, r0
 8003b9a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d06a      	beq.n	8003c78 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ba2:	0695      	lsls	r5, r2, #26
 8003ba4:	d504      	bpl.n	8003bb0 <HAL_UART_IRQHandler+0x8c>
 8003ba6:	0688      	lsls	r0, r1, #26
 8003ba8:	d502      	bpl.n	8003bb0 <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7ff ff53 	bl	8003a56 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003bb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8003bb2:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003bb4:	0719      	lsls	r1, r3, #28
 8003bb6:	d404      	bmi.n	8003bc2 <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003bbc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003bc0:	d01a      	beq.n	8003bf8 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 8003bc2:	f7ff fe1f 	bl	8003804 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	0652      	lsls	r2, r2, #25
 8003bcc:	d510      	bpl.n	8003bf0 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bce:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003bd0:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd6:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003bd8:	b150      	cbz	r0, 8003bf0 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bda:	4b28      	ldr	r3, [pc, #160]	; (8003c7c <HAL_UART_IRQHandler+0x158>)
 8003bdc:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bde:	f7fe f928 	bl	8001e32 <HAL_DMA_Abort_IT>
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d048      	beq.n	8003c78 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003be6:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8003be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003bee:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7fc fb77 	bl	80002e4 <HAL_UART_ErrorCallback>
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003bf8:	f7fc fb74 	bl	80002e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c00:	0616      	lsls	r6, r2, #24
 8003c02:	d52b      	bpl.n	8003c5c <HAL_UART_IRQHandler+0x138>
 8003c04:	060d      	lsls	r5, r1, #24
 8003c06:	d529      	bpl.n	8003c5c <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c08:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8003c0c:	2a21      	cmp	r2, #33	; 0x21
 8003c0e:	d133      	bne.n	8003c78 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 8003c10:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003c14:	b292      	uxth	r2, r2
 8003c16:	b942      	cbnz	r2, 8003c2a <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c1e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c2a:	68a2      	ldr	r2, [r4, #8]
 8003c2c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003c30:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003c32:	d10e      	bne.n	8003c52 <HAL_UART_IRQHandler+0x12e>
 8003c34:	6921      	ldr	r1, [r4, #16]
 8003c36:	b961      	cbnz	r1, 8003c52 <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003c38:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003c3c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003c40:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003c42:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 8003c44:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003c50:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003c52:	1c51      	adds	r1, r2, #1
 8003c54:	64e1      	str	r1, [r4, #76]	; 0x4c
 8003c56:	7812      	ldrb	r2, [r2, #0]
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
 8003c5a:	e7f3      	b.n	8003c44 <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c5c:	0650      	lsls	r0, r2, #25
 8003c5e:	d50b      	bpl.n	8003c78 <HAL_UART_IRQHandler+0x154>
 8003c60:	064a      	lsls	r2, r1, #25
 8003c62:	d509      	bpl.n	8003c78 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c64:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8003c66:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c6e:	2320      	movs	r3, #32
 8003c70:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8003c74:	f7ff fed1 	bl	8003a1a <HAL_UART_TxCpltCallback>
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08003c81 	.word	0x08003c81

08003c80 <UART_DMAAbortOnError>:
{
 8003c80:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003c82:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c8a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003c8e:	f7fc fb29 	bl	80002e4 <HAL_UART_ErrorCallback>
 8003c92:	bd08      	pop	{r3, pc}

08003c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c98:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c9a:	69c3      	ldr	r3, [r0, #28]
 8003c9c:	6921      	ldr	r1, [r4, #16]
 8003c9e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003ca0:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	6961      	ldr	r1, [r4, #20]
 8003ca6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003ca8:	4993      	ldr	r1, [pc, #588]	; (8003ef8 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003caa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003cac:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003cae:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003cb0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003cb4:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb6:	686a      	ldr	r2, [r5, #4]
 8003cb8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003cc0:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003cc2:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003cc4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003cc6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cce:	4a8b      	ldr	r2, [pc, #556]	; (8003efc <UART_SetConfig+0x268>)
 8003cd0:	4295      	cmp	r5, r2
 8003cd2:	d119      	bne.n	8003d08 <UART_SetConfig+0x74>
 8003cd4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003cd8:	4989      	ldr	r1, [pc, #548]	; (8003f00 <UART_SetConfig+0x26c>)
 8003cda:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003cde:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce6:	5c8a      	ldrb	r2, [r1, r2]
 8003ce8:	f040 80b3 	bne.w	8003e52 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8003cec:	2a08      	cmp	r2, #8
 8003cee:	f200 80ad 	bhi.w	8003e4c <UART_SetConfig+0x1b8>
 8003cf2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003cf6:	0026      	.short	0x0026
 8003cf8:	00e9007b 	.word	0x00e9007b
 8003cfc:	00f500ab 	.word	0x00f500ab
 8003d00:	00ab00ab 	.word	0x00ab00ab
 8003d04:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d08:	4a7e      	ldr	r2, [pc, #504]	; (8003f04 <UART_SetConfig+0x270>)
 8003d0a:	4295      	cmp	r5, r2
 8003d0c:	d107      	bne.n	8003d1e <UART_SetConfig+0x8a>
 8003d0e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003d12:	497d      	ldr	r1, [pc, #500]	; (8003f08 <UART_SetConfig+0x274>)
 8003d14:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d18:	f002 020c 	and.w	r2, r2, #12
 8003d1c:	e7e1      	b.n	8003ce2 <UART_SetConfig+0x4e>
 8003d1e:	4a7b      	ldr	r2, [pc, #492]	; (8003f0c <UART_SetConfig+0x278>)
 8003d20:	4295      	cmp	r5, r2
 8003d22:	d12b      	bne.n	8003d7c <UART_SetConfig+0xe8>
 8003d24:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8003d28:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d2c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003d30:	2a10      	cmp	r2, #16
 8003d32:	f000 80d2 	beq.w	8003eda <UART_SetConfig+0x246>
 8003d36:	d816      	bhi.n	8003d66 <UART_SetConfig+0xd2>
 8003d38:	b9da      	cbnz	r2, 8003d72 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3e:	f040 809f 	bne.w	8003e80 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d42:	f7fe fde5 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d46:	6861      	ldr	r1, [r4, #4]
 8003d48:	084a      	lsrs	r2, r1, #1
 8003d4a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d52:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d54:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003d56:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8003d5e:	6821      	ldr	r1, [r4, #0]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60cb      	str	r3, [r1, #12]
 8003d64:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d66:	2a20      	cmp	r2, #32
 8003d68:	f000 80ab 	beq.w	8003ec2 <UART_SetConfig+0x22e>
 8003d6c:	2a30      	cmp	r2, #48	; 0x30
 8003d6e:	f000 80ba 	beq.w	8003ee6 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d76:	d069      	beq.n	8003e4c <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003d78:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7c:	4a64      	ldr	r2, [pc, #400]	; (8003f10 <UART_SetConfig+0x27c>)
 8003d7e:	4295      	cmp	r5, r2
 8003d80:	d10e      	bne.n	8003da0 <UART_SetConfig+0x10c>
 8003d82:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8003d86:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d8a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003d8e:	2a40      	cmp	r2, #64	; 0x40
 8003d90:	f000 80a3 	beq.w	8003eda <UART_SetConfig+0x246>
 8003d94:	d9d0      	bls.n	8003d38 <UART_SetConfig+0xa4>
 8003d96:	2a80      	cmp	r2, #128	; 0x80
 8003d98:	f000 8093 	beq.w	8003ec2 <UART_SetConfig+0x22e>
 8003d9c:	2ac0      	cmp	r2, #192	; 0xc0
 8003d9e:	e7e6      	b.n	8003d6e <UART_SetConfig+0xda>
 8003da0:	4a5c      	ldr	r2, [pc, #368]	; (8003f14 <UART_SetConfig+0x280>)
 8003da2:	4295      	cmp	r5, r2
 8003da4:	d110      	bne.n	8003dc8 <UART_SetConfig+0x134>
 8003da6:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8003daa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003dae:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003db2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003db6:	f000 8090 	beq.w	8003eda <UART_SetConfig+0x246>
 8003dba:	d9bd      	bls.n	8003d38 <UART_SetConfig+0xa4>
 8003dbc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003dc0:	d07f      	beq.n	8003ec2 <UART_SetConfig+0x22e>
 8003dc2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003dc6:	e7d2      	b.n	8003d6e <UART_SetConfig+0xda>
 8003dc8:	4a53      	ldr	r2, [pc, #332]	; (8003f18 <UART_SetConfig+0x284>)
 8003dca:	4295      	cmp	r5, r2
 8003dcc:	d117      	bne.n	8003dfe <UART_SetConfig+0x16a>
 8003dce:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8003dd2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003dd6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003dda:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003dde:	d07c      	beq.n	8003eda <UART_SetConfig+0x246>
 8003de0:	d807      	bhi.n	8003df2 <UART_SetConfig+0x15e>
 8003de2:	2a00      	cmp	r2, #0
 8003de4:	d1c5      	bne.n	8003d72 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dea:	d154      	bne.n	8003e96 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003dec:	f7fe fda0 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 8003df0:	e7a9      	b.n	8003d46 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003df2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003df6:	d064      	beq.n	8003ec2 <UART_SetConfig+0x22e>
 8003df8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003dfc:	e7b7      	b.n	8003d6e <UART_SetConfig+0xda>
 8003dfe:	4a47      	ldr	r2, [pc, #284]	; (8003f1c <UART_SetConfig+0x288>)
 8003e00:	4295      	cmp	r5, r2
 8003e02:	d10f      	bne.n	8003e24 <UART_SetConfig+0x190>
 8003e04:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003e08:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003e0c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003e10:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003e14:	d061      	beq.n	8003eda <UART_SetConfig+0x246>
 8003e16:	d98f      	bls.n	8003d38 <UART_SetConfig+0xa4>
 8003e18:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e1c:	d051      	beq.n	8003ec2 <UART_SetConfig+0x22e>
 8003e1e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003e22:	e7a4      	b.n	8003d6e <UART_SetConfig+0xda>
 8003e24:	4a3e      	ldr	r2, [pc, #248]	; (8003f20 <UART_SetConfig+0x28c>)
 8003e26:	4295      	cmp	r5, r2
 8003e28:	d1a3      	bne.n	8003d72 <UART_SetConfig+0xde>
 8003e2a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8003e2e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003e32:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003e36:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003e3a:	d04e      	beq.n	8003eda <UART_SetConfig+0x246>
 8003e3c:	f67f af7c 	bls.w	8003d38 <UART_SetConfig+0xa4>
 8003e40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003e44:	d03d      	beq.n	8003ec2 <UART_SetConfig+0x22e>
 8003e46:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8003e4a:	e790      	b.n	8003d6e <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8003e4c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e781      	b.n	8003d56 <UART_SetConfig+0xc2>
    switch (clocksource)
 8003e52:	2a08      	cmp	r2, #8
 8003e54:	d890      	bhi.n	8003d78 <UART_SetConfig+0xe4>
 8003e56:	a301      	add	r3, pc, #4	; (adr r3, 8003e5c <UART_SetConfig+0x1c8>)
 8003e58:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003e97 	.word	0x08003e97
 8003e64:	08003e9d 	.word	0x08003e9d
 8003e68:	08003d79 	.word	0x08003d79
 8003e6c:	08003eb3 	.word	0x08003eb3
 8003e70:	08003d79 	.word	0x08003d79
 8003e74:	08003d79 	.word	0x08003d79
 8003e78:	08003d79 	.word	0x08003d79
 8003e7c:	08003eb9 	.word	0x08003eb9
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e80:	f7fe fd46 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e84:	6863      	ldr	r3, [r4, #4]
 8003e86:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e8e:	b280      	uxth	r0, r0
 8003e90:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e92:	2000      	movs	r0, #0
      break;
 8003e94:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e96:	f7fe fd4b 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 8003e9a:	e7f3      	b.n	8003e84 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003e9c:	6862      	ldr	r2, [r4, #4]
 8003e9e:	0853      	lsrs	r3, r2, #1
 8003ea0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003ea4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	60eb      	str	r3, [r5, #12]
 8003eb0:	e7ef      	b.n	8003e92 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003eb2:	f7fe fc6d 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 8003eb6:	e7e5      	b.n	8003e84 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003eb8:	6862      	ldr	r2, [r4, #4]
 8003eba:	0853      	lsrs	r3, r2, #1
 8003ebc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003ec0:	e7f2      	b.n	8003ea8 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec6:	d1e9      	bne.n	8003e9c <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003ec8:	6860      	ldr	r0, [r4, #4]
 8003eca:	0843      	lsrs	r3, r0, #1
 8003ecc:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003ed0:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ed4:	fbb3 f3f0 	udiv	r3, r3, r0
 8003ed8:	e73b      	b.n	8003d52 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ede:	d1e8      	bne.n	8003eb2 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ee0:	f7fe fc56 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 8003ee4:	e72f      	b.n	8003d46 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eea:	d1e5      	bne.n	8003eb8 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003eec:	6860      	ldr	r0, [r4, #4]
 8003eee:	0843      	lsrs	r3, r0, #1
 8003ef0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003ef4:	e7ee      	b.n	8003ed4 <UART_SetConfig+0x240>
 8003ef6:	bf00      	nop
 8003ef8:	efff69f3 	.word	0xefff69f3
 8003efc:	40011000 	.word	0x40011000
 8003f00:	08005a4c 	.word	0x08005a4c
 8003f04:	40004400 	.word	0x40004400
 8003f08:	08005a50 	.word	0x08005a50
 8003f0c:	40004800 	.word	0x40004800
 8003f10:	40004c00 	.word	0x40004c00
 8003f14:	40005000 	.word	0x40005000
 8003f18:	40011400 	.word	0x40011400
 8003f1c:	40007800 	.word	0x40007800
 8003f20:	40007c00 	.word	0x40007c00

08003f24 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f26:	07da      	lsls	r2, r3, #31
{
 8003f28:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f2a:	d506      	bpl.n	8003f3a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f2c:	6801      	ldr	r1, [r0, #0]
 8003f2e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003f30:	684a      	ldr	r2, [r1, #4]
 8003f32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003f36:	4322      	orrs	r2, r4
 8003f38:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f3a:	079c      	lsls	r4, r3, #30
 8003f3c:	d506      	bpl.n	8003f4c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f3e:	6801      	ldr	r1, [r0, #0]
 8003f40:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003f42:	684a      	ldr	r2, [r1, #4]
 8003f44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f48:	4322      	orrs	r2, r4
 8003f4a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f4c:	0759      	lsls	r1, r3, #29
 8003f4e:	d506      	bpl.n	8003f5e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f50:	6801      	ldr	r1, [r0, #0]
 8003f52:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003f54:	684a      	ldr	r2, [r1, #4]
 8003f56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f5a:	4322      	orrs	r2, r4
 8003f5c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f5e:	071a      	lsls	r2, r3, #28
 8003f60:	d506      	bpl.n	8003f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f62:	6801      	ldr	r1, [r0, #0]
 8003f64:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003f66:	684a      	ldr	r2, [r1, #4]
 8003f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f6c:	4322      	orrs	r2, r4
 8003f6e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f70:	06dc      	lsls	r4, r3, #27
 8003f72:	d506      	bpl.n	8003f82 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f74:	6801      	ldr	r1, [r0, #0]
 8003f76:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003f78:	688a      	ldr	r2, [r1, #8]
 8003f7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f7e:	4322      	orrs	r2, r4
 8003f80:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f82:	0699      	lsls	r1, r3, #26
 8003f84:	d506      	bpl.n	8003f94 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f86:	6801      	ldr	r1, [r0, #0]
 8003f88:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003f8a:	688a      	ldr	r2, [r1, #8]
 8003f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f90:	4322      	orrs	r2, r4
 8003f92:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f94:	065a      	lsls	r2, r3, #25
 8003f96:	d510      	bpl.n	8003fba <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f98:	6801      	ldr	r1, [r0, #0]
 8003f9a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003f9c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f9e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fa2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003fa6:	ea42 0204 	orr.w	r2, r2, r4
 8003faa:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fac:	d105      	bne.n	8003fba <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fae:	684a      	ldr	r2, [r1, #4]
 8003fb0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003fb2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003fb6:	4322      	orrs	r2, r4
 8003fb8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fba:	061b      	lsls	r3, r3, #24
 8003fbc:	d506      	bpl.n	8003fcc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fbe:	6802      	ldr	r2, [r0, #0]
 8003fc0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003fc2:	6853      	ldr	r3, [r2, #4]
 8003fc4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6053      	str	r3, [r2, #4]
 8003fcc:	bd10      	pop	{r4, pc}

08003fce <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd0:	2500      	movs	r5, #0
{
 8003fd2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003fd6:	f7fd fc29 	bl	800182c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fda:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003fdc:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	0712      	lsls	r2, r2, #28
 8003fe2:	d409      	bmi.n	8003ff8 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8003fe4:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fe6:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003fe8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8003fec:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8003ff0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8003ff4:	b003      	add	sp, #12
 8003ff6:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003ffc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004000:	4620      	mov	r0, r4
 8004002:	9200      	str	r2, [sp, #0]
 8004004:	462a      	mov	r2, r5
 8004006:	f7ff fc7e 	bl	8003906 <UART_WaitOnFlagUntilTimeout>
 800400a:	2800      	cmp	r0, #0
 800400c:	d0ea      	beq.n	8003fe4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800400e:	2003      	movs	r0, #3
 8004010:	e7f0      	b.n	8003ff4 <UART_CheckIdleState+0x26>

08004012 <HAL_UART_Init>:
{
 8004012:	b510      	push	{r4, lr}
  if(huart == NULL)
 8004014:	4604      	mov	r4, r0
 8004016:	b360      	cbz	r0, 8004072 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004018:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800401c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004020:	b91b      	cbnz	r3, 800402a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004022:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004026:	f7fd faa9 	bl	800157c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800402a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800402c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800402e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8004030:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8004034:	6813      	ldr	r3, [r2, #0]
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800403c:	f7ff fe2a 	bl	8003c94 <UART_SetConfig>
 8004040:	2801      	cmp	r0, #1
 8004042:	d016      	beq.n	8004072 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004046:	b113      	cbz	r3, 800404e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8004048:	4620      	mov	r0, r4
 800404a:	f7ff ff6b 	bl	8003f24 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800404e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004050:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004058:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004060:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
}
 8004068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800406c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800406e:	f7ff bfae 	b.w	8003fce <UART_CheckIdleState>
}
 8004072:	2001      	movs	r0, #1
 8004074:	bd10      	pop	{r4, pc}
	...

08004078 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 800407a:	3b01      	subs	r3, #1
 800407c:	d101      	bne.n	8004082 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800407e:	2003      	movs	r0, #3
 8004080:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8004082:	6902      	ldr	r2, [r0, #16]
 8004084:	2a00      	cmp	r2, #0
 8004086:	daf8      	bge.n	800407a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004088:	6903      	ldr	r3, [r0, #16]
 800408a:	4a06      	ldr	r2, [pc, #24]	; (80040a4 <USB_CoreReset+0x2c>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 8004092:	3a01      	subs	r2, #1
 8004094:	d0f3      	beq.n	800407e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004096:	6903      	ldr	r3, [r0, #16]
 8004098:	f013 0301 	ands.w	r3, r3, #1
 800409c:	d1f9      	bne.n	8004092 <USB_CoreReset+0x1a>

  return HAL_OK;
 800409e:	4618      	mov	r0, r3
}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	00030d41 	.word	0x00030d41

080040a8 <USB_CoreInit>:
{
 80040a8:	b084      	sub	sp, #16
 80040aa:	b538      	push	{r3, r4, r5, lr}
 80040ac:	ad05      	add	r5, sp, #20
 80040ae:	4604      	mov	r4, r0
 80040b0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d127      	bne.n	800410a <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040c2:	68c3      	ldr	r3, [r0, #12]
 80040c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040cc:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040ce:	68c3      	ldr	r3, [r0, #12]
 80040d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80040d4:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 80040d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d103      	bne.n	80040e4 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040dc:	68c3      	ldr	r3, [r0, #12]
 80040de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e2:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7ff ffc7 	bl	8004078 <USB_CoreReset>
  if(cfg.dma_enable == ENABLE)
 80040ea:	9b08      	ldr	r3, [sp, #32]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040f0:	68a3      	ldr	r3, [r4, #8]
 80040f2:	f043 0306 	orr.w	r3, r3, #6
 80040f6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040f8:	68a3      	ldr	r3, [r4, #8]
 80040fa:	f043 0320 	orr.w	r3, r3, #32
 80040fe:	60a3      	str	r3, [r4, #8]
}
 8004100:	2000      	movs	r0, #0
 8004102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004106:	b004      	add	sp, #16
 8004108:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800410a:	68c3      	ldr	r3, [r0, #12]
 800410c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004110:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8004112:	f7ff ffb1 	bl	8004078 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8004116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800411a:	63a3      	str	r3, [r4, #56]	; 0x38
 800411c:	e7e5      	b.n	80040ea <USB_CoreInit+0x42>

0800411e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800411e:	6883      	ldr	r3, [r0, #8]
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	6083      	str	r3, [r0, #8]
}
 8004126:	2000      	movs	r0, #0
 8004128:	4770      	bx	lr

0800412a <USB_SetCurrentMode>:
{
 800412a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800412c:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 800412e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004130:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004134:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8004136:	d108      	bne.n	800414a <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004138:	68c3      	ldr	r3, [r0, #12]
 800413a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800413e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 8004140:	2032      	movs	r0, #50	; 0x32
 8004142:	f7fd fb79 	bl	8001838 <HAL_Delay>
}
 8004146:	2000      	movs	r0, #0
 8004148:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 800414a:	2900      	cmp	r1, #0
 800414c:	d1f8      	bne.n	8004140 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800414e:	68c3      	ldr	r3, [r0, #12]
 8004150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004154:	e7f3      	b.n	800413e <USB_SetCurrentMode+0x14>
	...

08004158 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8004158:	0189      	lsls	r1, r1, #6
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <USB_FlushTxFifo+0x20>)
 800415c:	f041 0120 	orr.w	r1, r1, #32
 8004160:	6101      	str	r1, [r0, #16]
    if (++count > 200000)
 8004162:	3a01      	subs	r2, #1
 8004164:	d005      	beq.n	8004172 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004166:	6903      	ldr	r3, [r0, #16]
 8004168:	f013 0320 	ands.w	r3, r3, #32
 800416c:	d1f9      	bne.n	8004162 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800416e:	4618      	mov	r0, r3
 8004170:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004172:	2003      	movs	r0, #3
}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	00030d41 	.word	0x00030d41

0800417c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800417c:	2310      	movs	r3, #16
 800417e:	4a06      	ldr	r2, [pc, #24]	; (8004198 <USB_FlushRxFifo+0x1c>)
 8004180:	6103      	str	r3, [r0, #16]
    if (++count > 200000)
 8004182:	3a01      	subs	r2, #1
 8004184:	d005      	beq.n	8004192 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004186:	6903      	ldr	r3, [r0, #16]
 8004188:	f013 0310 	ands.w	r3, r3, #16
 800418c:	d1f9      	bne.n	8004182 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800418e:	4618      	mov	r0, r3
 8004190:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004192:	2003      	movs	r0, #3
}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	00030d41 	.word	0x00030d41

0800419c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800419c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80041a0:	4319      	orrs	r1, r3
 80041a2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80041a6:	2000      	movs	r0, #0
 80041a8:	4770      	bx	lr
	...

080041ac <USB_DevInit>:
{
 80041ac:	b084      	sub	sp, #16
 80041ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b2:	4604      	mov	r4, r0
 80041b4:	a807      	add	r0, sp, #28
 80041b6:	4688      	mov	r8, r1
 80041b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80041bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041be:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80041c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80041c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041ca:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0)
 80041cc:	b95e      	cbnz	r6, 80041e6 <USB_DevInit+0x3a>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80041ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041d4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041dc:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0;
 80041e6:	2300      	movs	r3, #0
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80041e8:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041ea:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0;
 80041ee:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041f2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80041f6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80041fa:	d158      	bne.n	80042ae <USB_DevInit+0x102>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80041fc:	2a00      	cmp	r2, #0
 80041fe:	d154      	bne.n	80042aa <USB_DevInit+0xfe>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8004200:	2100      	movs	r1, #0
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8004202:	4620      	mov	r0, r4
 8004204:	f7ff ffca 	bl	800419c <USB_SetDevSpeed>
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8004208:	2110      	movs	r1, #16
 800420a:	4620      	mov	r0, r4
 800420c:	f7ff ffa4 	bl	8004158 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004210:	4620      	mov	r0, r4
 8004212:	f7ff ffb3 	bl	800417c <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0;
 8004216:	2300      	movs	r3, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004218:	f04f 32ff 	mov.w	r2, #4294967295
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800421c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DIEPMSK = 0;
 8004220:	612b      	str	r3, [r5, #16]
 8004222:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0;
 8004224:	616b      	str	r3, [r5, #20]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8004226:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800422a:	61aa      	str	r2, [r5, #24]
 800422c:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DAINTMSK = 0;
 8004230:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004232:	4543      	cmp	r3, r8
 8004234:	d13f      	bne.n	80042b6 <USB_DevInit+0x10a>
 8004236:	2100      	movs	r1, #0
 8004238:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800423c:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8004240:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004244:	4608      	mov	r0, r1
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004246:	428b      	cmp	r3, r1
 8004248:	d143      	bne.n	80042d2 <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800424a:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 800424c:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800424e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004252:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 8004254:	d108      	bne.n	8004268 <USB_DevInit+0xbc>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8004256:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <USB_DevInit+0x144>)
 8004258:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800425a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	f043 0303 	orr.w	r3, r3, #3
 8004264:	632b      	str	r3, [r5, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 8004266:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 800426c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004270:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == DISABLE)
 8004272:	b91f      	cbnz	r7, 800427c <USB_DevInit+0xd0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004274:	69a3      	ldr	r3, [r4, #24]
 8004276:	f043 0310 	orr.w	r3, r3, #16
 800427a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800427c:	69a2      	ldr	r2, [r4, #24]
 800427e:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <USB_DevInit+0x148>)
 8004280:	4313      	orrs	r3, r2
 8004282:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable)
 8004284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004286:	b11b      	cbz	r3, 8004290 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004288:	69a3      	ldr	r3, [r4, #24]
 800428a:	f043 0308 	orr.w	r3, r3, #8
 800428e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 8004290:	2e01      	cmp	r6, #1
 8004292:	d105      	bne.n	80042a0 <USB_DevInit+0xf4>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004294:	69a3      	ldr	r3, [r4, #24]
 8004296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800429a:	f043 0304 	orr.w	r3, r3, #4
 800429e:	61a3      	str	r3, [r4, #24]
}
 80042a0:	2000      	movs	r0, #0
 80042a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042a6:	b004      	add	sp, #16
 80042a8:	4770      	bx	lr
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80042aa:	2101      	movs	r1, #1
 80042ac:	e7a9      	b.n	8004202 <USB_DevInit+0x56>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 80042ae:	2903      	cmp	r1, #3
 80042b0:	d0a4      	beq.n	80041fc <USB_DevInit+0x50>
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80042b2:	2103      	movs	r1, #3
 80042b4:	e7a5      	b.n	8004202 <USB_DevInit+0x56>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042b6:	f8d2 c000 	ldr.w	ip, [r2]
 80042ba:	f1bc 0f00 	cmp.w	ip, #0
 80042be:	da06      	bge.n	80042ce <USB_DevInit+0x122>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80042c0:	6010      	str	r0, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 80042c2:	6111      	str	r1, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80042c4:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80042c6:	f8c2 e008 	str.w	lr, [r2, #8]
 80042ca:	3220      	adds	r2, #32
 80042cc:	e7b1      	b.n	8004232 <USB_DevInit+0x86>
      USBx_INEP(i)->DIEPCTL = 0;
 80042ce:	6011      	str	r1, [r2, #0]
 80042d0:	e7f7      	b.n	80042c2 <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042d2:	f8d2 8000 	ldr.w	r8, [r2]
 80042d6:	f1b8 0f00 	cmp.w	r8, #0
 80042da:	da07      	bge.n	80042ec <USB_DevInit+0x140>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80042dc:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 80042e0:	6110      	str	r0, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80042e2:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80042e4:	f8c2 c008 	str.w	ip, [r2, #8]
 80042e8:	3220      	adds	r2, #32
 80042ea:	e7ac      	b.n	8004246 <USB_DevInit+0x9a>
      USBx_OUTEP(i)->DOEPCTL = 0;
 80042ec:	6010      	str	r0, [r2, #0]
 80042ee:	e7f7      	b.n	80042e0 <USB_DevInit+0x134>
 80042f0:	00800100 	.word	0x00800100
 80042f4:	803c3800 	.word	0x803c3800

080042f8 <USB_DevDisconnect>:
{
 80042f8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80042fa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8004306:	2003      	movs	r0, #3
 8004308:	f7fd fa96 	bl	8001838 <HAL_Delay>
}
 800430c:	2000      	movs	r0, #0
 800430e:	bd08      	pop	{r3, pc}

08004310 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004310:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004312:	f000 ff07 	bl	8005124 <vTaskStartScheduler>
  
  return osOK;
}
 8004316:	2000      	movs	r0, #0
 8004318:	bd08      	pop	{r3, pc}

0800431a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800431a:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800431c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8004320:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004322:	8a02      	ldrh	r2, [r0, #16]
{
 8004324:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8004326:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004328:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 800432c:	bf14      	ite	ne
 800432e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004330:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004332:	a803      	add	r0, sp, #12
 8004334:	9400      	str	r4, [sp, #0]
 8004336:	9001      	str	r0, [sp, #4]
 8004338:	4628      	mov	r0, r5
 800433a:	f000 fe23 	bl	8004f84 <xTaskCreate>
 800433e:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004340:	bf0c      	ite	eq
 8004342:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8004344:	2000      	movne	r0, #0
}
 8004346:	b005      	add	sp, #20
 8004348:	bd30      	pop	{r4, r5, pc}

0800434a <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800434a:	2800      	cmp	r0, #0
 800434c:	bf08      	it	eq
 800434e:	2001      	moveq	r0, #1
{
 8004350:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004352:	f001 f83d 	bl	80053d0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004356:	2000      	movs	r0, #0
 8004358:	bd08      	pop	{r3, pc}

0800435a <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800435a:	2001      	movs	r0, #1
 800435c:	f000 bc68 	b.w	8004c30 <xQueueCreateMutex>

08004360 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004360:	2200      	movs	r2, #0
 8004362:	c803      	ldmia	r0, {r0, r1}
 8004364:	f000 bb82 	b.w	8004a6c <xQueueGenericCreate>

08004368 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004368:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800436a:	f001 f981 	bl	8005670 <xTaskGetSchedulerState>
 800436e:	2801      	cmp	r0, #1
 8004370:	d003      	beq.n	800437a <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8004372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8004376:	f000 ba05 	b.w	8004784 <xPortSysTickHandler>
 800437a:	bd08      	pop	{r3, pc}

0800437c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <prvInsertBlockIntoFreeList+0x40>)
{
 800437e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4282      	cmp	r2, r0
 8004384:	d318      	bcc.n	80043b8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004386:	685c      	ldr	r4, [r3, #4]
 8004388:	1919      	adds	r1, r3, r4
 800438a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800438c:	bf01      	itttt	eq
 800438e:	6841      	ldreq	r1, [r0, #4]
 8004390:	4618      	moveq	r0, r3
 8004392:	1909      	addeq	r1, r1, r4
 8004394:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004396:	6844      	ldr	r4, [r0, #4]
 8004398:	1901      	adds	r1, r0, r4
 800439a:	428a      	cmp	r2, r1
 800439c:	d107      	bne.n	80043ae <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800439e:	4908      	ldr	r1, [pc, #32]	; (80043c0 <prvInsertBlockIntoFreeList+0x44>)
 80043a0:	6809      	ldr	r1, [r1, #0]
 80043a2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043a4:	bf1f      	itttt	ne
 80043a6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043a8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043aa:	1909      	addne	r1, r1, r4
 80043ac:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043ae:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043b0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043b2:	bf18      	it	ne
 80043b4:	6018      	strne	r0, [r3, #0]
 80043b6:	bd10      	pop	{r4, pc}
 80043b8:	4613      	mov	r3, r2
 80043ba:	e7e1      	b.n	8004380 <prvInsertBlockIntoFreeList+0x4>
 80043bc:	20003c78 	.word	0x20003c78
 80043c0:	20000068 	.word	0x20000068

080043c4 <pvPortMalloc>:
{
 80043c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80043ca:	f000 feeb 	bl	80051a4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80043ce:	4940      	ldr	r1, [pc, #256]	; (80044d0 <pvPortMalloc+0x10c>)
 80043d0:	4d40      	ldr	r5, [pc, #256]	; (80044d4 <pvPortMalloc+0x110>)
 80043d2:	680b      	ldr	r3, [r1, #0]
 80043d4:	bb0b      	cbnz	r3, 800441a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80043d6:	4a40      	ldr	r2, [pc, #256]	; (80044d8 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043d8:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043da:	4e40      	ldr	r6, [pc, #256]	; (80044dc <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043dc:	bf1b      	ittet	ne
 80043de:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043e0:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043e4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043e8:	f020 0007 	bicne.w	r0, r0, #7
 80043ec:	bf1c      	itt	ne
 80043ee:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043f0:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80043f2:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043f4:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043f6:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043f8:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 80043fa:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043fc:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8004400:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004402:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004404:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8004406:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004408:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800440a:	4b35      	ldr	r3, [pc, #212]	; (80044e0 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800440c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800440e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004410:	4b34      	ldr	r3, [pc, #208]	; (80044e4 <pvPortMalloc+0x120>)
 8004412:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004418:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800441a:	682f      	ldr	r7, [r5, #0]
 800441c:	4227      	tst	r7, r4
 800441e:	d116      	bne.n	800444e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8004420:	2c00      	cmp	r4, #0
 8004422:	d042      	beq.n	80044aa <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8004424:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004428:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800442a:	bf1c      	itt	ne
 800442c:	f023 0307 	bicne.w	r3, r3, #7
 8004430:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004432:	b163      	cbz	r3, 800444e <pvPortMalloc+0x8a>
 8004434:	4a2b      	ldr	r2, [pc, #172]	; (80044e4 <pvPortMalloc+0x120>)
 8004436:	6816      	ldr	r6, [r2, #0]
 8004438:	4690      	mov	r8, r2
 800443a:	42b3      	cmp	r3, r6
 800443c:	d807      	bhi.n	800444e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800443e:	4a27      	ldr	r2, [pc, #156]	; (80044dc <pvPortMalloc+0x118>)
 8004440:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004442:	6868      	ldr	r0, [r5, #4]
 8004444:	4283      	cmp	r3, r0
 8004446:	d804      	bhi.n	8004452 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8004448:	6809      	ldr	r1, [r1, #0]
 800444a:	428d      	cmp	r5, r1
 800444c:	d107      	bne.n	800445e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800444e:	2400      	movs	r4, #0
 8004450:	e02b      	b.n	80044aa <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004452:	682c      	ldr	r4, [r5, #0]
 8004454:	2c00      	cmp	r4, #0
 8004456:	d0f7      	beq.n	8004448 <pvPortMalloc+0x84>
 8004458:	462a      	mov	r2, r5
 800445a:	4625      	mov	r5, r4
 800445c:	e7f1      	b.n	8004442 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800445e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004460:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004462:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004464:	1ac2      	subs	r2, r0, r3
 8004466:	2a10      	cmp	r2, #16
 8004468:	d911      	bls.n	800448e <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800446a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800446c:	0741      	lsls	r1, r0, #29
 800446e:	d00a      	beq.n	8004486 <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	b672      	cpsid	i
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	b662      	cpsie	i
 8004484:	e7fe      	b.n	8004484 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004486:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004488:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800448a:	f7ff ff77 	bl	800437c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800448e:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004490:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004492:	4913      	ldr	r1, [pc, #76]	; (80044e0 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004494:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004496:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004498:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800449a:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800449c:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044a0:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044a2:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044a4:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044a6:	bf38      	it	cc
 80044a8:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 80044aa:	f000 ff17 	bl	80052dc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044ae:	0763      	lsls	r3, r4, #29
 80044b0:	d00a      	beq.n	80044c8 <pvPortMalloc+0x104>
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	b672      	cpsid	i
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	b662      	cpsie	i
 80044c6:	e7fe      	b.n	80044c6 <pvPortMalloc+0x102>
}
 80044c8:	4620      	mov	r0, r4
 80044ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ce:	bf00      	nop
 80044d0:	20000068 	.word	0x20000068
 80044d4:	20003c6c 	.word	0x20003c6c
 80044d8:	2000006c 	.word	0x2000006c
 80044dc:	20003c78 	.word	0x20003c78
 80044e0:	20003c74 	.word	0x20003c74
 80044e4:	20003c70 	.word	0x20003c70

080044e8 <vPortFree>:
{
 80044e8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80044ea:	4604      	mov	r4, r0
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d032      	beq.n	8004556 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <vPortFree+0x70>)
 80044f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	4213      	tst	r3, r2
 80044fa:	d10a      	bne.n	8004512 <vPortFree+0x2a>
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	b672      	cpsid	i
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	b662      	cpsie	i
 8004510:	e7fe      	b.n	8004510 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004512:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004516:	b151      	cbz	r1, 800452e <vPortFree+0x46>
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	b672      	cpsid	i
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	b662      	cpsie	i
 800452c:	e7fe      	b.n	800452c <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800452e:	ea23 0302 	bic.w	r3, r3, r2
 8004532:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004536:	f000 fe35 	bl	80051a4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800453a:	4a08      	ldr	r2, [pc, #32]	; (800455c <vPortFree+0x74>)
 800453c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004540:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004544:	6811      	ldr	r1, [r2, #0]
 8004546:	440b      	add	r3, r1
 8004548:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800454a:	f7ff ff17 	bl	800437c <prvInsertBlockIntoFreeList>
}
 800454e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004552:	f000 bec3 	b.w	80052dc <xTaskResumeAll>
 8004556:	bd10      	pop	{r4, pc}
 8004558:	20003c6c 	.word	0x20003c6c
 800455c:	20003c70 	.word	0x20003c70

08004560 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004560:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004568:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800456e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004570:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004572:	6003      	str	r3, [r0, #0]
 8004574:	4770      	bx	lr

08004576 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	6103      	str	r3, [r0, #16]
 800457a:	4770      	bx	lr

0800457c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800457c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800457e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004580:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004582:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004588:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800458a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800458c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800458e:	3301      	adds	r3, #1
 8004590:	6003      	str	r3, [r0, #0]
 8004592:	4770      	bx	lr

08004594 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004594:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004596:	1c53      	adds	r3, r2, #1
{
 8004598:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800459a:	d10a      	bne.n	80045b2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800459c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045a2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045a4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80045a6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80045a8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045aa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80045ac:	3301      	adds	r3, #1
 80045ae:	6003      	str	r3, [r0, #0]
 80045b0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045b2:	f100 0308 	add.w	r3, r0, #8
 80045b6:	685c      	ldr	r4, [r3, #4]
 80045b8:	6825      	ldr	r5, [r4, #0]
 80045ba:	42aa      	cmp	r2, r5
 80045bc:	d3ef      	bcc.n	800459e <vListInsert+0xa>
 80045be:	4623      	mov	r3, r4
 80045c0:	e7f9      	b.n	80045b6 <vListInsert+0x22>

080045c2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045c2:	6841      	ldr	r1, [r0, #4]
 80045c4:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80045c6:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045c8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045ca:	6882      	ldr	r2, [r0, #8]
 80045cc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045ce:	6859      	ldr	r1, [r3, #4]
 80045d0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045d2:	bf08      	it	eq
 80045d4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80045d6:	2200      	movs	r2, #0
 80045d8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	3801      	subs	r0, #1
 80045de:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80045e0:	4770      	bx	lr
	...

080045e4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <prvTaskExitError+0x34>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3301      	adds	r3, #1
 80045ea:	d00a      	beq.n	8004602 <prvTaskExitError+0x1e>
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	b672      	cpsid	i
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	b662      	cpsie	i
 8004600:	e7fe      	b.n	8004600 <prvTaskExitError+0x1c>
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	b672      	cpsid	i
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	b662      	cpsie	i
 8004616:	e7fe      	b.n	8004616 <prvTaskExitError+0x32>
 8004618:	20000004 	.word	0x20000004

0800461c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800461c:	4806      	ldr	r0, [pc, #24]	; (8004638 <prvPortStartFirstTask+0x1c>)
 800461e:	6800      	ldr	r0, [r0, #0]
 8004620:	6800      	ldr	r0, [r0, #0]
 8004622:	f380 8808 	msr	MSP, r0
 8004626:	b662      	cpsie	i
 8004628:	b661      	cpsie	f
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	df00      	svc	0
 8004634:	bf00      	nop
 8004636:	0000      	.short	0x0000
 8004638:	e000ed08 	.word	0xe000ed08

0800463c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800463c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800464c <vPortEnableVFP+0x10>
 8004640:	6801      	ldr	r1, [r0, #0]
 8004642:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004646:	6001      	str	r1, [r0, #0]
 8004648:	4770      	bx	lr
 800464a:	0000      	.short	0x0000
 800464c:	e000ed88 	.word	0xe000ed88

08004650 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004654:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004658:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800465c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800465e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004662:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004664:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004666:	f06f 0302 	mvn.w	r3, #2
 800466a:	6203      	str	r3, [r0, #32]
}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	080045e5 	.word	0x080045e5
	...

08004680 <SVC_Handler>:
	__asm volatile (
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <pxCurrentTCBConst2>)
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	6808      	ldr	r0, [r1, #0]
 8004686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468a:	f380 8809 	msr	PSP, r0
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8811 	msr	BASEPRI, r0
 800469a:	4770      	bx	lr
 800469c:	f3af 8000 	nop.w

080046a0 <pxCurrentTCBConst2>:
 80046a0:	20003c88 	.word	0x20003c88

080046a4 <vPortEnterCritical>:
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	b672      	cpsid	i
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	b662      	cpsie	i
	uxCriticalNesting++;
 80046b8:	4a0b      	ldr	r2, [pc, #44]	; (80046e8 <vPortEnterCritical+0x44>)
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80046be:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80046c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80046c2:	d10f      	bne.n	80046e4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <vPortEnterCritical+0x48>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80046cc:	d00a      	beq.n	80046e4 <vPortEnterCritical+0x40>
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	b672      	cpsid	i
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	b662      	cpsie	i
 80046e2:	e7fe      	b.n	80046e2 <vPortEnterCritical+0x3e>
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000004 	.word	0x20000004
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80046f0:	4a09      	ldr	r2, [pc, #36]	; (8004718 <vPortExitCritical+0x28>)
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	b953      	cbnz	r3, 800470c <vPortExitCritical+0x1c>
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	b672      	cpsid	i
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	b662      	cpsie	i
 800470a:	e7fe      	b.n	800470a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800470c:	3b01      	subs	r3, #1
 800470e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004710:	b90b      	cbnz	r3, 8004716 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	4770      	bx	lr
 8004718:	20000004 	.word	0x20000004
 800471c:	00000000 	.word	0x00000000

08004720 <PendSV_Handler>:
	__asm volatile
 8004720:	f3ef 8009 	mrs	r0, PSP
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <pxCurrentTCBConst>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	f01e 0f10 	tst.w	lr, #16
 8004730:	bf08      	it	eq
 8004732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	6010      	str	r0, [r2, #0]
 800473c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004744:	b672      	cpsid	i
 8004746:	f380 8811 	msr	BASEPRI, r0
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	b662      	cpsie	i
 8004754:	f000 fe9c 	bl	8005490 <vTaskSwitchContext>
 8004758:	f04f 0000 	mov.w	r0, #0
 800475c:	f380 8811 	msr	BASEPRI, r0
 8004760:	bc08      	pop	{r3}
 8004762:	6819      	ldr	r1, [r3, #0]
 8004764:	6808      	ldr	r0, [r1, #0]
 8004766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476a:	f01e 0f10 	tst.w	lr, #16
 800476e:	bf08      	it	eq
 8004770:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004774:	f380 8809 	msr	PSP, r0
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop

08004780 <pxCurrentTCBConst>:
 8004780:	20003c88 	.word	0x20003c88

08004784 <xPortSysTickHandler>:
{
 8004784:	b508      	push	{r3, lr}
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	b672      	cpsid	i
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800479a:	f000 fd0b 	bl	80051b4 <xTaskIncrementTick>
 800479e:	b118      	cbz	r0, 80047a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a4:	4b02      	ldr	r3, [pc, #8]	; (80047b0 <xPortSysTickHandler+0x2c>)
 80047a6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80047a8:	2300      	movs	r3, #0
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	bd08      	pop	{r3, pc}
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <vPortSetupTimerInterrupt+0x1c>)
 80047b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80047c0:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <vPortSetupTimerInterrupt+0x20>)
 80047c2:	3b01      	subs	r3, #1
 80047c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047c6:	2207      	movs	r2, #7
 80047c8:	4b03      	ldr	r3, [pc, #12]	; (80047d8 <vPortSetupTimerInterrupt+0x24>)
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000000 	.word	0x20000000
 80047d4:	e000e014 	.word	0xe000e014
 80047d8:	e000e010 	.word	0xe000e010

080047dc <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047dc:	4b23      	ldr	r3, [pc, #140]	; (800486c <xPortStartScheduler+0x90>)
{
 80047de:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047e0:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047e2:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047e8:	22ff      	movs	r2, #255	; 0xff
 80047ea:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047ec:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047ee:	4a20      	ldr	r2, [pc, #128]	; (8004870 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80047fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047fe:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004800:	2207      	movs	r2, #7
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <xPortStartScheduler+0x98>)
 8004804:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004806:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800480a:	1e54      	subs	r4, r2, #1
 800480c:	0600      	lsls	r0, r0, #24
 800480e:	d423      	bmi.n	8004858 <xPortStartScheduler+0x7c>
 8004810:	b101      	cbz	r1, 8004814 <xPortStartScheduler+0x38>
 8004812:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004818:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800481c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800481e:	9b01      	ldr	r3, [sp, #4]
 8004820:	4a12      	ldr	r2, [pc, #72]	; (800486c <xPortStartScheduler+0x90>)
 8004822:	b2db      	uxtb	r3, r3
 8004824:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <xPortStartScheduler+0x9c>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800482e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004836:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004838:	f7ff ffbc 	bl	80047b4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800483c:	2200      	movs	r2, #0
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <xPortStartScheduler+0xa0>)
 8004840:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8004842:	f7ff fefb 	bl	800463c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004846:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <xPortStartScheduler+0xa4>)
 8004848:	6813      	ldr	r3, [r2, #0]
 800484a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800484e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004850:	f7ff fee4 	bl	800461c <prvPortStartFirstTask>
	prvTaskExitError();
 8004854:	f7ff fec6 	bl	80045e4 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004858:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800485c:	2101      	movs	r1, #1
 800485e:	0052      	lsls	r2, r2, #1
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	f88d 2003 	strb.w	r2, [sp, #3]
 8004866:	4622      	mov	r2, r4
 8004868:	e7cd      	b.n	8004806 <xPortStartScheduler+0x2a>
 800486a:	bf00      	nop
 800486c:	e000e400 	.word	0xe000e400
 8004870:	20003c80 	.word	0x20003c80
 8004874:	20003c84 	.word	0x20003c84
 8004878:	e000ed20 	.word	0xe000ed20
 800487c:	20000004 	.word	0x20000004
 8004880:	e000ef34 	.word	0xe000ef34

08004884 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004884:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004888:	2b0f      	cmp	r3, #15
 800488a:	d910      	bls.n	80048ae <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800488c:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <vPortValidateInterruptPriority+0x54>)
 800488e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004890:	4a12      	ldr	r2, [pc, #72]	; (80048dc <vPortValidateInterruptPriority+0x58>)
 8004892:	7812      	ldrb	r2, [r2, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d90a      	bls.n	80048ae <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	b672      	cpsid	i
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	b662      	cpsie	i
 80048ac:	e7fe      	b.n	80048ac <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048ae:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <vPortValidateInterruptPriority+0x5c>)
 80048b0:	4a0c      	ldr	r2, [pc, #48]	; (80048e4 <vPortValidateInterruptPriority+0x60>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d90a      	bls.n	80048d4 <vPortValidateInterruptPriority+0x50>
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	b672      	cpsid	i
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	b662      	cpsie	i
 80048d2:	e7fe      	b.n	80048d2 <vPortValidateInterruptPriority+0x4e>
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	e000e3f0 	.word	0xe000e3f0
 80048dc:	20003c80 	.word	0x20003c80
 80048e0:	e000ed0c 	.word	0xe000ed0c
 80048e4:	20003c84 	.word	0x20003c84

080048e8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80048ee:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048f2:	b942      	cbnz	r2, 8004906 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048f4:	6805      	ldr	r5, [r0, #0]
 80048f6:	b99d      	cbnz	r5, 8004920 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80048f8:	6840      	ldr	r0, [r0, #4]
 80048fa:	f000 ff0f 	bl	800571c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80048fe:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004900:	3601      	adds	r6, #1
 8004902:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8004904:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004906:	b96d      	cbnz	r5, 8004924 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004908:	6880      	ldr	r0, [r0, #8]
 800490a:	f000 ff8b 	bl	8005824 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800490e:	68a3      	ldr	r3, [r4, #8]
 8004910:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004912:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004914:	6862      	ldr	r2, [r4, #4]
 8004916:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004918:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800491a:	d301      	bcc.n	8004920 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004920:	2000      	movs	r0, #0
 8004922:	e7ed      	b.n	8004900 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004924:	68c0      	ldr	r0, [r0, #12]
 8004926:	f000 ff7d 	bl	8005824 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800492a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800492c:	68e2      	ldr	r2, [r4, #12]
 800492e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004930:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004932:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004934:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004936:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004938:	bf3e      	ittt	cc
 800493a:	6862      	ldrcc	r2, [r4, #4]
 800493c:	189b      	addcc	r3, r3, r2
 800493e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004940:	2d02      	cmp	r5, #2
 8004942:	d1ed      	bne.n	8004920 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004944:	b10e      	cbz	r6, 800494a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004946:	3e01      	subs	r6, #1
 8004948:	e7ea      	b.n	8004920 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800494a:	4630      	mov	r0, r6
 800494c:	e7d8      	b.n	8004900 <prvCopyDataToQueue+0x18>

0800494e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800494e:	4603      	mov	r3, r0
 8004950:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004954:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004956:	b162      	cbz	r2, 8004972 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004958:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800495a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800495c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800495e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004960:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8004962:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004966:	bf24      	itt	cs
 8004968:	6819      	ldrcs	r1, [r3, #0]
 800496a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800496c:	68d9      	ldr	r1, [r3, #12]
 800496e:	f000 bf59 	b.w	8005824 <memcpy>
}
 8004972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004976:	4770      	bx	lr

08004978 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800497c:	f7ff fe92 	bl	80046a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004980:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004984:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004988:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800498a:	2d00      	cmp	r5, #0
 800498c:	dc14      	bgt.n	80049b8 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800498e:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004990:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8004994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004998:	f7ff feaa 	bl	80046f0 <vPortExitCritical>
	taskENTER_CRITICAL();
 800499c:	f7ff fe82 	bl	80046a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80049a0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80049a4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049a6:	2d00      	cmp	r5, #0
 80049a8:	dc12      	bgt.n	80049d0 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049aa:	23ff      	movs	r3, #255	; 0xff
 80049ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80049b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80049b4:	f7ff be9c 	b.w	80046f0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0e7      	beq.n	800498e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049be:	4630      	mov	r0, r6
 80049c0:	f000 fdbe 	bl	8005540 <xTaskRemoveFromEventList>
 80049c4:	b108      	cbz	r0, 80049ca <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80049c6:	f000 fe4d 	bl	8005664 <vTaskMissedYield>
 80049ca:	3d01      	subs	r5, #1
 80049cc:	b26d      	sxtb	r5, r5
 80049ce:	e7dc      	b.n	800498a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d0:	6923      	ldr	r3, [r4, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0e9      	beq.n	80049aa <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d6:	4630      	mov	r0, r6
 80049d8:	f000 fdb2 	bl	8005540 <xTaskRemoveFromEventList>
 80049dc:	b108      	cbz	r0, 80049e2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80049de:	f000 fe41 	bl	8005664 <vTaskMissedYield>
 80049e2:	3d01      	subs	r5, #1
 80049e4:	b26d      	sxtb	r5, r5
 80049e6:	e7de      	b.n	80049a6 <prvUnlockQueue+0x2e>

080049e8 <xQueueGenericReset>:
{
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80049ec:	4604      	mov	r4, r0
 80049ee:	b950      	cbnz	r0, 8004a06 <xQueueGenericReset+0x1e>
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	b672      	cpsid	i
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	b662      	cpsie	i
 8004a04:	e7fe      	b.n	8004a04 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8004a06:	f7ff fe4d 	bl	80046a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a0a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004a0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a12:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a14:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004a16:	1a1b      	subs	r3, r3, r0
 8004a18:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a1a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a1c:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004a1e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a20:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a22:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004a24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004a2c:	b995      	cbnz	r5, 8004a54 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a2e:	6923      	ldr	r3, [r4, #16]
 8004a30:	b163      	cbz	r3, 8004a4c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a32:	f104 0010 	add.w	r0, r4, #16
 8004a36:	f000 fd83 	bl	8005540 <xTaskRemoveFromEventList>
 8004a3a:	b138      	cbz	r0, 8004a4c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8004a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <xQueueGenericReset+0x80>)
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004a4c:	f7ff fe50 	bl	80046f0 <vPortExitCritical>
}
 8004a50:	2001      	movs	r0, #1
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a54:	f104 0010 	add.w	r0, r4, #16
 8004a58:	f7ff fd82 	bl	8004560 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a60:	f7ff fd7e 	bl	8004560 <vListInitialise>
 8004a64:	e7f2      	b.n	8004a4c <xQueueGenericReset+0x64>
 8004a66:	bf00      	nop
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <xQueueGenericCreate>:
	{
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a70:	4606      	mov	r6, r0
 8004a72:	b950      	cbnz	r0, 8004a8a <xQueueGenericCreate+0x1e>
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	b672      	cpsid	i
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	b662      	cpsie	i
 8004a88:	e7fe      	b.n	8004a88 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004a8c:	3048      	adds	r0, #72	; 0x48
 8004a8e:	f7ff fc99 	bl	80043c4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004a92:	4604      	mov	r4, r0
 8004a94:	b138      	cbz	r0, 8004aa6 <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a96:	b945      	cbnz	r5, 8004aaa <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a98:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004a9a:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a9c:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8004a9e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7ff ffa1 	bl	80049e8 <xQueueGenericReset>
	}
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004aaa:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aae:	6003      	str	r3, [r0, #0]
 8004ab0:	e7f3      	b.n	8004a9a <xQueueGenericCreate+0x2e>
	...

08004ab4 <xQueueGenericSend>:
{
 8004ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab8:	4689      	mov	r9, r1
 8004aba:	9201      	str	r2, [sp, #4]
 8004abc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004abe:	4604      	mov	r4, r0
 8004ac0:	b950      	cbnz	r0, 8004ad8 <xQueueGenericSend+0x24>
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	b672      	cpsid	i
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	b662      	cpsie	i
 8004ad6:	e7fe      	b.n	8004ad6 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ad8:	2900      	cmp	r1, #0
 8004ada:	f040 808c 	bne.w	8004bf6 <xQueueGenericSend+0x142>
 8004ade:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8088 	beq.w	8004bf6 <xQueueGenericSend+0x142>
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	b672      	cpsid	i
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	b662      	cpsie	i
 8004afa:	e7fe      	b.n	8004afa <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004afc:	9e01      	ldr	r6, [sp, #4]
 8004afe:	2e00      	cmp	r6, #0
 8004b00:	f000 8084 	beq.w	8004c0c <xQueueGenericSend+0x158>
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	b672      	cpsid	i
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	b662      	cpsie	i
 8004b18:	e7fe      	b.n	8004b18 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b1a:	9d01      	ldr	r5, [sp, #4]
 8004b1c:	b91d      	cbnz	r5, 8004b26 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8004b1e:	f7ff fde7 	bl	80046f0 <vPortExitCritical>
			return errQUEUE_FULL;
 8004b22:	2000      	movs	r0, #0
 8004b24:	e058      	b.n	8004bd8 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8004b26:	b916      	cbnz	r6, 8004b2e <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 8004b28:	a802      	add	r0, sp, #8
 8004b2a:	f000 fd4d 	bl	80055c8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004b2e:	f7ff fddf 	bl	80046f0 <vPortExitCritical>
		vTaskSuspendAll();
 8004b32:	f000 fb37 	bl	80051a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b36:	f7ff fdb5 	bl	80046a4 <vPortEnterCritical>
 8004b3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004b3e:	2bff      	cmp	r3, #255	; 0xff
 8004b40:	d101      	bne.n	8004b46 <xQueueGenericSend+0x92>
 8004b42:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8004b46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004b4a:	2bff      	cmp	r3, #255	; 0xff
 8004b4c:	d101      	bne.n	8004b52 <xQueueGenericSend+0x9e>
 8004b4e:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8004b52:	f7ff fdcd 	bl	80046f0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b56:	a901      	add	r1, sp, #4
 8004b58:	a802      	add	r0, sp, #8
 8004b5a:	f000 fd45 	bl	80055e8 <xTaskCheckForTimeOut>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d143      	bne.n	8004bea <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b62:	f7ff fd9f 	bl	80046a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b66:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004b68:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004b6a:	f7ff fdc1 	bl	80046f0 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b6e:	42ae      	cmp	r6, r5
 8004b70:	d135      	bne.n	8004bde <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b72:	9901      	ldr	r1, [sp, #4]
 8004b74:	f104 0010 	add.w	r0, r4, #16
 8004b78:	f000 fcc6 	bl	8005508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f7ff fefb 	bl	8004978 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b82:	f000 fbab 	bl	80052dc <xTaskResumeAll>
 8004b86:	b938      	cbnz	r0, 8004b98 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8004b88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b8c:	f8ca 3000 	str.w	r3, [sl]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004b9a:	f7ff fd83 	bl	80046a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ba0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d301      	bcc.n	8004baa <xQueueGenericSend+0xf6>
 8004ba6:	2f02      	cmp	r7, #2
 8004ba8:	d1b7      	bne.n	8004b1a <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004baa:	463a      	mov	r2, r7
 8004bac:	4649      	mov	r1, r9
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f7ff fe9a 	bl	80048e8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bb6:	b11b      	cbz	r3, 8004bc0 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004bbc:	f000 fcc0 	bl	8005540 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004bc0:	b138      	cbz	r0, 8004bd2 <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc6:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <xQueueGenericSend+0x178>)
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004bd2:	f7ff fd8d 	bl	80046f0 <vPortExitCritical>
				return pdPASS;
 8004bd6:	2001      	movs	r0, #1
}
 8004bd8:	b004      	add	sp, #16
 8004bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004bde:	4620      	mov	r0, r4
 8004be0:	f7ff feca 	bl	8004978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004be4:	f000 fb7a 	bl	80052dc <xTaskResumeAll>
 8004be8:	e7d6      	b.n	8004b98 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8004bea:	4620      	mov	r0, r4
 8004bec:	f7ff fec4 	bl	8004978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bf0:	f000 fb74 	bl	80052dc <xTaskResumeAll>
 8004bf4:	e795      	b.n	8004b22 <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bf6:	2f02      	cmp	r7, #2
 8004bf8:	d102      	bne.n	8004c00 <xQueueGenericSend+0x14c>
 8004bfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10a      	bne.n	8004c16 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c00:	f000 fd36 	bl	8005670 <xTaskGetSchedulerState>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	f43f af79 	beq.w	8004afc <xQueueGenericSend+0x48>
 8004c0a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004c0c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004c10:	f8df a018 	ldr.w	sl, [pc, #24]	; 8004c2c <xQueueGenericSend+0x178>
 8004c14:	e7c1      	b.n	8004b9a <xQueueGenericSend+0xe6>
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	b672      	cpsid	i
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	b662      	cpsie	i
 8004c2a:	e7fe      	b.n	8004c2a <xQueueGenericSend+0x176>
 8004c2c:	e000ed04 	.word	0xe000ed04

08004c30 <xQueueCreateMutex>:
	{
 8004c30:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c32:	4602      	mov	r2, r0
 8004c34:	2100      	movs	r1, #0
 8004c36:	2001      	movs	r0, #1
 8004c38:	f7ff ff18 	bl	8004a6c <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	b138      	cbz	r0, 8004c50 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c44:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004c46:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c48:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004c4a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c4c:	f7ff ff32 	bl	8004ab4 <xQueueGenericSend>
	}
 8004c50:	4620      	mov	r0, r4
 8004c52:	bd10      	pop	{r4, pc}

08004c54 <xQueueGenericSendFromISR>:
{
 8004c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c58:	4688      	mov	r8, r1
 8004c5a:	4691      	mov	r9, r2
 8004c5c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004c5e:	4604      	mov	r4, r0
 8004c60:	b950      	cbnz	r0, 8004c78 <xQueueGenericSendFromISR+0x24>
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	b672      	cpsid	i
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	b662      	cpsie	i
 8004c76:	e7fe      	b.n	8004c76 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c78:	bb19      	cbnz	r1, 8004cc2 <xQueueGenericSendFromISR+0x6e>
 8004c7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c7c:	b30b      	cbz	r3, 8004cc2 <xQueueGenericSendFromISR+0x6e>
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	b672      	cpsid	i
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	b662      	cpsie	i
 8004c92:	e7fe      	b.n	8004c92 <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c98:	f000 fc52 	bl	8005540 <xTaskRemoveFromEventList>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d036      	beq.n	8004d0e <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8004ca0:	f1b9 0f00 	cmp.w	r9, #0
 8004ca4:	d033      	beq.n	8004d0e <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004cac:	f386 8811 	msr	BASEPRI, r6
}
 8004cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	b26d      	sxtb	r5, r5
 8004cb8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004cbc:	e027      	b.n	8004d0e <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	e7f4      	b.n	8004cac <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cc2:	2f02      	cmp	r7, #2
 8004cc4:	d102      	bne.n	8004ccc <xQueueGenericSendFromISR+0x78>
 8004cc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d122      	bne.n	8004d12 <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ccc:	f7ff fdda 	bl	8004884 <vPortValidateInterruptPriority>
	__asm volatile
 8004cd0:	f3ef 8611 	mrs	r6, BASEPRI
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	b672      	cpsid	i
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ce8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004cea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d301      	bcc.n	8004cf4 <xQueueGenericSendFromISR+0xa0>
 8004cf0:	2f02      	cmp	r7, #2
 8004cf2:	d1e4      	bne.n	8004cbe <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cf4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cf8:	463a      	mov	r2, r7
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cfe:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d00:	f7ff fdf2 	bl	80048e8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004d04:	1c6b      	adds	r3, r5, #1
 8004d06:	d1d5      	bne.n	8004cb4 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1c2      	bne.n	8004c94 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8004d0e:	2001      	movs	r0, #1
 8004d10:	e7cc      	b.n	8004cac <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	b672      	cpsid	i
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	b662      	cpsie	i
 8004d26:	e7fe      	b.n	8004d26 <xQueueGenericSendFromISR+0xd2>

08004d28 <xQueueGenericReceive>:
{
 8004d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	4688      	mov	r8, r1
 8004d2e:	9201      	str	r2, [sp, #4]
 8004d30:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8004d32:	4604      	mov	r4, r0
 8004d34:	b950      	cbnz	r0, 8004d4c <xQueueGenericReceive+0x24>
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	b672      	cpsid	i
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	b662      	cpsie	i
 8004d4a:	e7fe      	b.n	8004d4a <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	f040 80a9 	bne.w	8004ea4 <xQueueGenericReceive+0x17c>
 8004d52:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80a5 	beq.w	8004ea4 <xQueueGenericReceive+0x17c>
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	b672      	cpsid	i
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	b662      	cpsie	i
 8004d6e:	e7fe      	b.n	8004d6e <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d70:	9e01      	ldr	r6, [sp, #4]
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	f000 809c 	beq.w	8004eb0 <xQueueGenericReceive+0x188>
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	b672      	cpsid	i
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	b662      	cpsie	i
 8004d8c:	e7fe      	b.n	8004d8c <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004d90:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d06d      	beq.n	8004e72 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d96:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d9a:	e05f      	b.n	8004e5c <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d9c:	9d01      	ldr	r5, [sp, #4]
 8004d9e:	b91d      	cbnz	r5, 8004da8 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 8004da0:	f7ff fca6 	bl	80046f0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004da4:	4628      	mov	r0, r5
 8004da6:	e067      	b.n	8004e78 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 8004da8:	b916      	cbnz	r6, 8004db0 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 8004daa:	a802      	add	r0, sp, #8
 8004dac:	f000 fc0c 	bl	80055c8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004db0:	f7ff fc9e 	bl	80046f0 <vPortExitCritical>
		vTaskSuspendAll();
 8004db4:	f000 f9f6 	bl	80051a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004db8:	f7ff fc74 	bl	80046a4 <vPortEnterCritical>
 8004dbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004dc0:	2bff      	cmp	r3, #255	; 0xff
 8004dc2:	d101      	bne.n	8004dc8 <xQueueGenericReceive+0xa0>
 8004dc4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004dc8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004dcc:	2bff      	cmp	r3, #255	; 0xff
 8004dce:	d101      	bne.n	8004dd4 <xQueueGenericReceive+0xac>
 8004dd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dd4:	f7ff fc8c 	bl	80046f0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dd8:	a901      	add	r1, sp, #4
 8004dda:	a802      	add	r0, sp, #8
 8004ddc:	f000 fc04 	bl	80055e8 <xTaskCheckForTimeOut>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d152      	bne.n	8004e8a <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 8004de4:	f7ff fc5e 	bl	80046a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004de8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004dea:	f7ff fc81 	bl	80046f0 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dee:	2d00      	cmp	r5, #0
 8004df0:	d145      	bne.n	8004e7e <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	b933      	cbnz	r3, 8004e04 <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 8004df6:	f7ff fc55 	bl	80046a4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004dfa:	6860      	ldr	r0, [r4, #4]
 8004dfc:	f000 fc48 	bl	8005690 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8004e00:	f7ff fc76 	bl	80046f0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e04:	9901      	ldr	r1, [sp, #4]
 8004e06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e0a:	f000 fb7d 	bl	8005508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f7ff fdb2 	bl	8004978 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e14:	f000 fa62 	bl	80052dc <xTaskResumeAll>
 8004e18:	b938      	cbnz	r0, 8004e2a <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 8004e1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e1e:	f8ca 3000 	str.w	r3, [sl]
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004e2c:	f7ff fc3a 	bl	80046a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e30:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	d0b2      	beq.n	8004d9c <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e36:	4641      	mov	r1, r8
 8004e38:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004e3a:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e3c:	f7ff fd87 	bl	800494e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8004e40:	f1b9 0f00 	cmp.w	r9, #0
 8004e44:	d1a3      	bne.n	8004d8e <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004e46:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e48:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004e4a:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e4c:	b913      	cbnz	r3, 8004e54 <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004e4e:	f000 fcb9 	bl	80057c4 <pvTaskIncrementMutexHeldCount>
 8004e52:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e54:	6923      	ldr	r3, [r4, #16]
 8004e56:	b163      	cbz	r3, 8004e72 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e58:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e5c:	f000 fb70 	bl	8005540 <xTaskRemoveFromEventList>
 8004e60:	b138      	cbz	r0, 8004e72 <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 8004e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <xQueueGenericReceive+0x190>)
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004e72:	f7ff fc3d 	bl	80046f0 <vPortExitCritical>
				return pdPASS;
 8004e76:	2001      	movs	r0, #1
}
 8004e78:	b004      	add	sp, #16
 8004e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f7ff fd7a 	bl	8004978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e84:	f000 fa2a 	bl	80052dc <xTaskResumeAll>
 8004e88:	e7cf      	b.n	8004e2a <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f7ff fd74 	bl	8004978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e90:	f000 fa24 	bl	80052dc <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004e94:	f7ff fc06 	bl	80046a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e98:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004e9a:	f7ff fc29 	bl	80046f0 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e9e:	2d00      	cmp	r5, #0
 8004ea0:	d1c3      	bne.n	8004e2a <xQueueGenericReceive+0x102>
 8004ea2:	e77f      	b.n	8004da4 <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ea4:	f000 fbe4 	bl	8005670 <xTaskGetSchedulerState>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	f43f af61 	beq.w	8004d70 <xQueueGenericReceive+0x48>
 8004eae:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004eb0:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8004eb2:	f8df a004 	ldr.w	sl, [pc, #4]	; 8004eb8 <xQueueGenericReceive+0x190>
 8004eb6:	e7b9      	b.n	8004e2c <xQueueGenericReceive+0x104>
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ebc:	4a06      	ldr	r2, [pc, #24]	; (8004ed8 <prvResetNextTaskUnblockTime+0x1c>)
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <prvResetNextTaskUnblockTime+0x20>)
 8004ec4:	b919      	cbnz	r1, 8004ece <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ec6:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ed2:	68d2      	ldr	r2, [r2, #12]
 8004ed4:	6852      	ldr	r2, [r2, #4]
 8004ed6:	e7f8      	b.n	8004eca <prvResetNextTaskUnblockTime+0xe>
 8004ed8:	20003c8c 	.word	0x20003c8c
 8004edc:	20003d64 	.word	0x20003d64

08004ee0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8004ee4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ee6:	4e1b      	ldr	r6, [pc, #108]	; (8004f54 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8004ee8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8004eea:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eec:	6830      	ldr	r0, [r6, #0]
 8004eee:	3004      	adds	r0, #4
 8004ef0:	f7ff fb67 	bl	80045c2 <uxListRemove>
 8004ef4:	4633      	mov	r3, r6
 8004ef6:	b940      	cbnz	r0, 8004f0a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004ef8:	6831      	ldr	r1, [r6, #0]
 8004efa:	2001      	movs	r0, #1
 8004efc:	4e16      	ldr	r6, [pc, #88]	; (8004f58 <prvAddCurrentTaskToDelayedList+0x78>)
 8004efe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004f00:	6832      	ldr	r2, [r6, #0]
 8004f02:	4088      	lsls	r0, r1
 8004f04:	ea22 0200 	bic.w	r2, r2, r0
 8004f08:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f0a:	1c62      	adds	r2, r4, #1
 8004f0c:	d107      	bne.n	8004f1e <prvAddCurrentTaskToDelayedList+0x3e>
 8004f0e:	b137      	cbz	r7, 8004f1e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f10:	6819      	ldr	r1, [r3, #0]
 8004f12:	4812      	ldr	r0, [pc, #72]	; (8004f5c <prvAddCurrentTaskToDelayedList+0x7c>)
 8004f14:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f1a:	f7ff bb2f 	b.w	800457c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f1e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f20:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8004f22:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f24:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8004f26:	d907      	bls.n	8004f38 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f28:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x80>)
 8004f2a:	6810      	ldr	r0, [r2, #0]
 8004f2c:	6819      	ldr	r1, [r3, #0]
}
 8004f2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f32:	3104      	adds	r1, #4
 8004f34:	f7ff bb2e 	b.w	8004594 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f38:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <prvAddCurrentTaskToDelayedList+0x84>)
 8004f3a:	6810      	ldr	r0, [r2, #0]
 8004f3c:	6819      	ldr	r1, [r3, #0]
 8004f3e:	3104      	adds	r1, #4
 8004f40:	f7ff fb28 	bl	8004594 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f44:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <prvAddCurrentTaskToDelayedList+0x88>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4294      	cmp	r4, r2
 8004f4a:	d200      	bcs.n	8004f4e <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8004f4c:	601c      	str	r4, [r3, #0]
 8004f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f50:	20003dac 	.word	0x20003dac
 8004f54:	20003c88 	.word	0x20003c88
 8004f58:	20003d34 	.word	0x20003d34
 8004f5c:	20003d84 	.word	0x20003d84
 8004f60:	20003c90 	.word	0x20003c90
 8004f64:	20003c8c 	.word	0x20003c8c
 8004f68:	20003d64 	.word	0x20003d64

08004f6c <prvTaskIsTaskSuspended.part.0>:
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	b672      	cpsid	i
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	b662      	cpsie	i
 8004f80:	e7fe      	b.n	8004f80 <prvTaskIsTaskSuspended.part.0+0x14>
	...

08004f84 <xTaskCreate>:
	{
 8004f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f88:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8004f8c:	4680      	mov	r8, r0
 8004f8e:	460f      	mov	r7, r1
 8004f90:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f92:	4650      	mov	r0, sl
	{
 8004f94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f96:	f7ff fa15 	bl	80043c4 <pvPortMalloc>
			if( pxStack != NULL )
 8004f9a:	4605      	mov	r5, r0
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f000 8096 	beq.w	80050ce <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004fa2:	2054      	movs	r0, #84	; 0x54
 8004fa4:	f7ff fa0e 	bl	80043c4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004fa8:	4604      	mov	r4, r0
 8004faa:	2800      	cmp	r0, #0
 8004fac:	f000 808c 	beq.w	80050c8 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004fb0:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8004fb4:	6305      	str	r5, [r0, #48]	; 0x30
 8004fb6:	1e7b      	subs	r3, r7, #1
 8004fb8:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004fbc:	4455      	add	r5, sl
 8004fbe:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004fc0:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fc4:	7859      	ldrb	r1, [r3, #1]
 8004fc6:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004fca:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004fce:	b109      	cbz	r1, 8004fd4 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fd0:	42bb      	cmp	r3, r7
 8004fd2:	d1f7      	bne.n	8004fc4 <xTaskCreate+0x40>
 8004fd4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fd6:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fda:	1d27      	adds	r7, r4, #4
 8004fdc:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fde:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fe2:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8004fe4:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8004fe8:	bf28      	it	cs
 8004fea:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004fec:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004fee:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ff4:	f7ff fabf 	bl	8004576 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ff8:	f104 0018 	add.w	r0, r4, #24
 8004ffc:	f7ff fabb 	bl	8004576 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005000:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005004:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005006:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005008:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800500a:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800500c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800500e:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005010:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005014:	f7ff fb1c 	bl	8004650 <pxPortInitialiseStack>
 8005018:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800501a:	b106      	cbz	r6, 800501e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800501c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800501e:	f7ff fb41 	bl	80046a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005022:	4b32      	ldr	r3, [pc, #200]	; (80050ec <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8005024:	4e32      	ldr	r6, [pc, #200]	; (80050f0 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800511c <xTaskCreate+0x198>
 800502c:	3201      	adds	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005030:	6835      	ldr	r5, [r6, #0]
 8005032:	2d00      	cmp	r5, #0
 8005034:	d14e      	bne.n	80050d4 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8005036:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d11d      	bne.n	800507a <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800503e:	eb08 0005 	add.w	r0, r8, r5
 8005042:	3514      	adds	r5, #20
 8005044:	f7ff fa8c 	bl	8004560 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005048:	2d8c      	cmp	r5, #140	; 0x8c
 800504a:	d1f8      	bne.n	800503e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 800504c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8005120 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8005050:	4d28      	ldr	r5, [pc, #160]	; (80050f4 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8005052:	4648      	mov	r0, r9
 8005054:	f7ff fa84 	bl	8004560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005058:	4628      	mov	r0, r5
 800505a:	f7ff fa81 	bl	8004560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800505e:	4826      	ldr	r0, [pc, #152]	; (80050f8 <xTaskCreate+0x174>)
 8005060:	f7ff fa7e 	bl	8004560 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005064:	4825      	ldr	r0, [pc, #148]	; (80050fc <xTaskCreate+0x178>)
 8005066:	f7ff fa7b 	bl	8004560 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800506a:	4825      	ldr	r0, [pc, #148]	; (8005100 <xTaskCreate+0x17c>)
 800506c:	f7ff fa78 	bl	8004560 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005070:	4b24      	ldr	r3, [pc, #144]	; (8005104 <xTaskCreate+0x180>)
 8005072:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005076:	4b24      	ldr	r3, [pc, #144]	; (8005108 <xTaskCreate+0x184>)
 8005078:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800507a:	4a24      	ldr	r2, [pc, #144]	; (800510c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 800507c:	2501      	movs	r5, #1
 800507e:	4924      	ldr	r1, [pc, #144]	; (8005110 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8005080:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005082:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8005084:	3301      	adds	r3, #1
 8005086:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005088:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800508a:	fa05 f302 	lsl.w	r3, r5, r2
 800508e:	4303      	orrs	r3, r0
 8005090:	2014      	movs	r0, #20
 8005092:	600b      	str	r3, [r1, #0]
 8005094:	4639      	mov	r1, r7
 8005096:	fb00 8002 	mla	r0, r0, r2, r8
 800509a:	f7ff fa6f 	bl	800457c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800509e:	f7ff fb27 	bl	80046f0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80050a2:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <xTaskCreate+0x190>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	b163      	cbz	r3, 80050c2 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050a8:	6833      	ldr	r3, [r6, #0]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d207      	bcs.n	80050c2 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80050b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b6:	4b18      	ldr	r3, [pc, #96]	; (8005118 <xTaskCreate+0x194>)
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	f3bf 8f6f 	isb	sy
	}
 80050c2:	4628      	mov	r0, r5
 80050c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80050c8:	4628      	mov	r0, r5
 80050ca:	f7ff fa0d 	bl	80044e8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050ce:	f04f 35ff 	mov.w	r5, #4294967295
 80050d2:	e7f6      	b.n	80050c2 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80050d4:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <xTaskCreate+0x190>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ce      	bne.n	800507a <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050dc:	6833      	ldr	r3, [r6, #0]
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d8c9      	bhi.n	800507a <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 80050e6:	6034      	str	r4, [r6, #0]
 80050e8:	e7c7      	b.n	800507a <xTaskCreate+0xf6>
 80050ea:	bf00      	nop
 80050ec:	20003d20 	.word	0x20003d20
 80050f0:	20003c88 	.word	0x20003c88
 80050f4:	20003d4c 	.word	0x20003d4c
 80050f8:	20003d6c 	.word	0x20003d6c
 80050fc:	20003d98 	.word	0x20003d98
 8005100:	20003d84 	.word	0x20003d84
 8005104:	20003c8c 	.word	0x20003c8c
 8005108:	20003c90 	.word	0x20003c90
 800510c:	20003d30 	.word	0x20003d30
 8005110:	20003d34 	.word	0x20003d34
 8005114:	20003d80 	.word	0x20003d80
 8005118:	e000ed04 	.word	0xe000ed04
 800511c:	20003c94 	.word	0x20003c94
 8005120:	20003d38 	.word	0x20003d38

08005124 <vTaskStartScheduler>:
{
 8005124:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8005126:	4b19      	ldr	r3, [pc, #100]	; (800518c <vTaskStartScheduler+0x68>)
 8005128:	2400      	movs	r4, #0
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	4918      	ldr	r1, [pc, #96]	; (8005190 <vTaskStartScheduler+0x6c>)
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	4623      	mov	r3, r4
 8005132:	9400      	str	r4, [sp, #0]
 8005134:	4817      	ldr	r0, [pc, #92]	; (8005194 <vTaskStartScheduler+0x70>)
 8005136:	f7ff ff25 	bl	8004f84 <xTaskCreate>
	if( xReturn == pdPASS )
 800513a:	2801      	cmp	r0, #1
 800513c:	d116      	bne.n	800516c <vTaskStartScheduler+0x48>
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	b672      	cpsid	i
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	4b10      	ldr	r3, [pc, #64]	; (8005198 <vTaskStartScheduler+0x74>)
 8005158:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <vTaskStartScheduler+0x78>)
 800515c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800515e:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <vTaskStartScheduler+0x7c>)
 8005160:	601c      	str	r4, [r3, #0]
}
 8005162:	b002      	add	sp, #8
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005168:	f7ff bb38 	b.w	80047dc <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800516c:	3001      	adds	r0, #1
 800516e:	d10a      	bne.n	8005186 <vTaskStartScheduler+0x62>
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	b672      	cpsid	i
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	b662      	cpsie	i
 8005184:	e7fe      	b.n	8005184 <vTaskStartScheduler+0x60>
}
 8005186:	b002      	add	sp, #8
 8005188:	bd10      	pop	{r4, pc}
 800518a:	bf00      	nop
 800518c:	20003d60 	.word	0x20003d60
 8005190:	08005a5d 	.word	0x08005a5d
 8005194:	0800541d 	.word	0x0800541d
 8005198:	20003d64 	.word	0x20003d64
 800519c:	20003d80 	.word	0x20003d80
 80051a0:	20003dac 	.word	0x20003dac

080051a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80051a4:	4a02      	ldr	r2, [pc, #8]	; (80051b0 <vTaskSuspendAll+0xc>)
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20003d2c 	.word	0x20003d2c

080051b4 <xTaskIncrementTick>:
{
 80051b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051b8:	4b3d      	ldr	r3, [pc, #244]	; (80052b0 <xTaskIncrementTick+0xfc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d155      	bne.n	800526c <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 80051c0:	4b3c      	ldr	r3, [pc, #240]	; (80052b4 <xTaskIncrementTick+0x100>)
 80051c2:	681c      	ldr	r4, [r3, #0]
 80051c4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80051c6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80051c8:	b9cc      	cbnz	r4, 80051fe <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80051ca:	4b3b      	ldr	r3, [pc, #236]	; (80052b8 <xTaskIncrementTick+0x104>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	b152      	cbz	r2, 80051e8 <xTaskIncrementTick+0x34>
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	b672      	cpsid	i
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	b662      	cpsie	i
 80051e6:	e7fe      	b.n	80051e6 <xTaskIncrementTick+0x32>
 80051e8:	4a34      	ldr	r2, [pc, #208]	; (80052bc <xTaskIncrementTick+0x108>)
 80051ea:	6819      	ldr	r1, [r3, #0]
 80051ec:	6810      	ldr	r0, [r2, #0]
 80051ee:	6018      	str	r0, [r3, #0]
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	4a33      	ldr	r2, [pc, #204]	; (80052c0 <xTaskIncrementTick+0x10c>)
 80051f4:	6813      	ldr	r3, [r2, #0]
 80051f6:	3301      	adds	r3, #1
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	f7ff fe5f 	bl	8004ebc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051fe:	4d31      	ldr	r5, [pc, #196]	; (80052c4 <xTaskIncrementTick+0x110>)
 8005200:	f04f 0b00 	mov.w	fp, #0
 8005204:	4f30      	ldr	r7, [pc, #192]	; (80052c8 <xTaskIncrementTick+0x114>)
 8005206:	682b      	ldr	r3, [r5, #0]
 8005208:	429c      	cmp	r4, r3
 800520a:	d33e      	bcc.n	800528a <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800520c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80052b8 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8005210:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80052d8 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005214:	f8d8 2000 	ldr.w	r2, [r8]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	bb72      	cbnz	r2, 800527a <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800521c:	f04f 32ff 	mov.w	r2, #4294967295
 8005220:	602a      	str	r2, [r5, #0]
					break;
 8005222:	e032      	b.n	800528a <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005224:	f106 0a04 	add.w	sl, r6, #4
 8005228:	4650      	mov	r0, sl
 800522a:	f7ff f9ca 	bl	80045c2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800522e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8005230:	b119      	cbz	r1, 800523a <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005232:	f106 0018 	add.w	r0, r6, #24
 8005236:	f7ff f9c4 	bl	80045c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800523a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800523c:	2201      	movs	r2, #1
 800523e:	f8d9 3000 	ldr.w	r3, [r9]
 8005242:	f04f 0e14 	mov.w	lr, #20
 8005246:	fa02 f100 	lsl.w	r1, r2, r0
 800524a:	4319      	orrs	r1, r3
 800524c:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <xTaskIncrementTick+0x118>)
 800524e:	f8c9 1000 	str.w	r1, [r9]
 8005252:	4651      	mov	r1, sl
 8005254:	fb0e 3000 	mla	r0, lr, r0, r3
 8005258:	f7ff f990 	bl	800457c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800525c:	6838      	ldr	r0, [r7, #0]
 800525e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8005260:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8005262:	4291      	cmp	r1, r2
 8005264:	bf28      	it	cs
 8005266:	f04f 0b01 	movcs.w	fp, #1
 800526a:	e7d3      	b.n	8005214 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 800526c:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800526e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	e011      	b.n	800529e <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800527a:	f8d8 2000 	ldr.w	r2, [r8]
 800527e:	68d2      	ldr	r2, [r2, #12]
 8005280:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005282:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005284:	428c      	cmp	r4, r1
 8005286:	d2cd      	bcs.n	8005224 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 8005288:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <xTaskIncrementTick+0x118>)
 800528e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005290:	2214      	movs	r2, #20
 8005292:	434a      	muls	r2, r1
 8005294:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8005296:	2a02      	cmp	r2, #2
 8005298:	bf28      	it	cs
 800529a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800529e:	4a0d      	ldr	r2, [pc, #52]	; (80052d4 <xTaskIncrementTick+0x120>)
 80052a0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	bf18      	it	ne
 80052a6:	f04f 0b01 	movne.w	fp, #1
}
 80052aa:	4658      	mov	r0, fp
 80052ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b0:	20003d2c 	.word	0x20003d2c
 80052b4:	20003dac 	.word	0x20003dac
 80052b8:	20003c8c 	.word	0x20003c8c
 80052bc:	20003c90 	.word	0x20003c90
 80052c0:	20003d68 	.word	0x20003d68
 80052c4:	20003d64 	.word	0x20003d64
 80052c8:	20003c88 	.word	0x20003c88
 80052cc:	20003c94 	.word	0x20003c94
 80052d0:	20003d28 	.word	0x20003d28
 80052d4:	20003db0 	.word	0x20003db0
 80052d8:	20003d34 	.word	0x20003d34

080052dc <xTaskResumeAll>:
{
 80052dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80052e0:	4c32      	ldr	r4, [pc, #200]	; (80053ac <xTaskResumeAll+0xd0>)
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	b953      	cbnz	r3, 80052fc <xTaskResumeAll+0x20>
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	b672      	cpsid	i
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	b662      	cpsie	i
 80052fa:	e7fe      	b.n	80052fa <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80052fc:	f7ff f9d2 	bl	80046a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	3b01      	subs	r3, #1
 8005304:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005306:	6824      	ldr	r4, [r4, #0]
 8005308:	b12c      	cbz	r4, 8005316 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800530a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800530c:	f7ff f9f0 	bl	80046f0 <vPortExitCritical>
}
 8005310:	4620      	mov	r0, r4
 8005312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005316:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <xTaskResumeAll+0xd4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f5      	beq.n	800530a <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800531e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80053c8 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8005322:	4f24      	ldr	r7, [pc, #144]	; (80053b4 <xTaskResumeAll+0xd8>)
 8005324:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80053cc <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005328:	f8d9 3000 	ldr.w	r3, [r9]
 800532c:	b9e3      	cbnz	r3, 8005368 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800532e:	b10c      	cbz	r4, 8005334 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8005330:	f7ff fdc4 	bl	8004ebc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005334:	4d20      	ldr	r5, [pc, #128]	; (80053b8 <xTaskResumeAll+0xdc>)
 8005336:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005338:	b144      	cbz	r4, 800534c <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 800533a:	4e20      	ldr	r6, [pc, #128]	; (80053bc <xTaskResumeAll+0xe0>)
 800533c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800533e:	f7ff ff39 	bl	80051b4 <xTaskIncrementTick>
 8005342:	b100      	cbz	r0, 8005346 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8005344:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005346:	3c01      	subs	r4, #1
 8005348:	d1f9      	bne.n	800533e <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 800534a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <xTaskResumeAll+0xe0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0da      	beq.n	800530a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8005354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005358:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <xTaskResumeAll+0xe4>)
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005364:	2401      	movs	r4, #1
 8005366:	e7d1      	b.n	800530c <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005368:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 800536c:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800536e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005370:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005372:	f104 0018 	add.w	r0, r4, #24
 8005376:	f7ff f924 	bl	80045c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff f921 	bl	80045c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005380:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	2014      	movs	r0, #20
 8005386:	fa05 f302 	lsl.w	r3, r5, r2
 800538a:	fb00 8002 	mla	r0, r0, r2, r8
 800538e:	430b      	orrs	r3, r1
 8005390:	4631      	mov	r1, r6
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	f7ff f8f2 	bl	800457c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005398:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <xTaskResumeAll+0xe8>)
 800539a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d3c1      	bcc.n	8005328 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <xTaskResumeAll+0xe0>)
 80053a6:	601d      	str	r5, [r3, #0]
 80053a8:	e7be      	b.n	8005328 <xTaskResumeAll+0x4c>
 80053aa:	bf00      	nop
 80053ac:	20003d2c 	.word	0x20003d2c
 80053b0:	20003d20 	.word	0x20003d20
 80053b4:	20003d34 	.word	0x20003d34
 80053b8:	20003d28 	.word	0x20003d28
 80053bc:	20003db0 	.word	0x20003db0
 80053c0:	e000ed04 	.word	0xe000ed04
 80053c4:	20003c88 	.word	0x20003c88
 80053c8:	20003d6c 	.word	0x20003d6c
 80053cc:	20003c94 	.word	0x20003c94

080053d0 <vTaskDelay>:
	{
 80053d0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053d2:	b940      	cbnz	r0, 80053e6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80053d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <vTaskDelay+0x44>)
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <vTaskDelay+0x48>)
 80053e8:	6819      	ldr	r1, [r3, #0]
 80053ea:	b151      	cbz	r1, 8005402 <vTaskDelay+0x32>
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	b672      	cpsid	i
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	b662      	cpsie	i
 8005400:	e7fe      	b.n	8005400 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8005402:	f7ff fecf 	bl	80051a4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005406:	f7ff fd6b 	bl	8004ee0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800540a:	f7ff ff67 	bl	80052dc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800540e:	2800      	cmp	r0, #0
 8005410:	d0e0      	beq.n	80053d4 <vTaskDelay+0x4>
 8005412:	bd08      	pop	{r3, pc}
 8005414:	e000ed04 	.word	0xe000ed04
 8005418:	20003d2c 	.word	0x20003d2c

0800541c <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800541c:	4e17      	ldr	r6, [pc, #92]	; (800547c <prvIdleTask+0x60>)
{
 800541e:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005420:	4c17      	ldr	r4, [pc, #92]	; (8005480 <prvIdleTask+0x64>)
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	b963      	cbnz	r3, 8005440 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005426:	4b17      	ldr	r3, [pc, #92]	; (8005484 <prvIdleTask+0x68>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d9f8      	bls.n	8005420 <prvIdleTask+0x4>
				taskYIELD();
 800542e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <prvIdleTask+0x6c>)
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	e7ef      	b.n	8005420 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8005440:	f7ff feb0 	bl	80051a4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005444:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8005446:	f7ff ff49 	bl	80052dc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800544a:	2d00      	cmp	r5, #0
 800544c:	d0e9      	beq.n	8005422 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800544e:	f7ff f929 	bl	80046a4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005452:	68f3      	ldr	r3, [r6, #12]
 8005454:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005456:	1d28      	adds	r0, r5, #4
 8005458:	f7ff f8b3 	bl	80045c2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800545c:	4a0b      	ldr	r2, [pc, #44]	; (800548c <prvIdleTask+0x70>)
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	3b01      	subs	r3, #1
 8005462:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	3b01      	subs	r3, #1
 8005468:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800546a:	f7ff f941 	bl	80046f0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800546e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005470:	f7ff f83a 	bl	80044e8 <vPortFree>
			vPortFree( pxTCB );
 8005474:	4628      	mov	r0, r5
 8005476:	f7ff f837 	bl	80044e8 <vPortFree>
 800547a:	e7d2      	b.n	8005422 <prvIdleTask+0x6>
 800547c:	20003d98 	.word	0x20003d98
 8005480:	20003d24 	.word	0x20003d24
 8005484:	20003c94 	.word	0x20003c94
 8005488:	e000ed04 	.word	0xe000ed04
 800548c:	20003d20 	.word	0x20003d20

08005490 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005490:	4b18      	ldr	r3, [pc, #96]	; (80054f4 <vTaskSwitchContext+0x64>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <vTaskSwitchContext+0x68>)
{
 8005496:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005498:	b112      	cbz	r2, 80054a0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800549a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80054a0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054a2:	4b16      	ldr	r3, [pc, #88]	; (80054fc <vTaskSwitchContext+0x6c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80054a6:	fab3 f383 	clz	r3, r3
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2214      	movs	r2, #20
 80054ae:	4914      	ldr	r1, [pc, #80]	; (8005500 <vTaskSwitchContext+0x70>)
 80054b0:	f1c3 031f 	rsb	r3, r3, #31
 80054b4:	435a      	muls	r2, r3
 80054b6:	588c      	ldr	r4, [r1, r2]
 80054b8:	1888      	adds	r0, r1, r2
 80054ba:	b954      	cbnz	r4, 80054d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	b672      	cpsid	i
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	b662      	cpsie	i
 80054d0:	e7fe      	b.n	80054d0 <vTaskSwitchContext+0x40>
 80054d2:	6844      	ldr	r4, [r0, #4]
 80054d4:	3208      	adds	r2, #8
 80054d6:	6864      	ldr	r4, [r4, #4]
 80054d8:	440a      	add	r2, r1
 80054da:	4294      	cmp	r4, r2
 80054dc:	6044      	str	r4, [r0, #4]
 80054de:	bf04      	itt	eq
 80054e0:	6862      	ldreq	r2, [r4, #4]
 80054e2:	6042      	streq	r2, [r0, #4]
 80054e4:	2214      	movs	r2, #20
 80054e6:	fb02 1303 	mla	r3, r2, r3, r1
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <vTaskSwitchContext+0x74>)
 80054f0:	e7d4      	b.n	800549c <vTaskSwitchContext+0xc>
 80054f2:	bf00      	nop
 80054f4:	20003d2c 	.word	0x20003d2c
 80054f8:	20003db0 	.word	0x20003db0
 80054fc:	20003d34 	.word	0x20003d34
 8005500:	20003c94 	.word	0x20003c94
 8005504:	20003c88 	.word	0x20003c88

08005508 <vTaskPlaceOnEventList>:
{
 8005508:	b510      	push	{r4, lr}
 800550a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800550c:	b950      	cbnz	r0, 8005524 <vTaskPlaceOnEventList+0x1c>
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	b672      	cpsid	i
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	b662      	cpsie	i
 8005522:	e7fe      	b.n	8005522 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <vTaskPlaceOnEventList+0x34>)
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	3118      	adds	r1, #24
 800552a:	f7ff f833 	bl	8004594 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800552e:	4620      	mov	r0, r4
 8005530:	2101      	movs	r1, #1
}
 8005532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005536:	f7ff bcd3 	b.w	8004ee0 <prvAddCurrentTaskToDelayedList>
 800553a:	bf00      	nop
 800553c:	20003c88 	.word	0x20003c88

08005540 <xTaskRemoveFromEventList>:
{
 8005540:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005542:	68c3      	ldr	r3, [r0, #12]
 8005544:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005546:	b954      	cbnz	r4, 800555e <xTaskRemoveFromEventList+0x1e>
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	b672      	cpsid	i
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	b662      	cpsie	i
 800555c:	e7fe      	b.n	800555c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800555e:	f104 0518 	add.w	r5, r4, #24
 8005562:	4628      	mov	r0, r5
 8005564:	f7ff f82d 	bl	80045c2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005568:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <xTaskRemoveFromEventList+0x70>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	b9db      	cbnz	r3, 80055a6 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800556e:	1d25      	adds	r5, r4, #4
 8005570:	4628      	mov	r0, r5
 8005572:	f7ff f826 	bl	80045c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005576:	490f      	ldr	r1, [pc, #60]	; (80055b4 <xTaskRemoveFromEventList+0x74>)
 8005578:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800557a:	2301      	movs	r3, #1
 800557c:	6808      	ldr	r0, [r1, #0]
 800557e:	4093      	lsls	r3, r2
 8005580:	4303      	orrs	r3, r0
 8005582:	2014      	movs	r0, #20
 8005584:	600b      	str	r3, [r1, #0]
 8005586:	4629      	mov	r1, r5
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <xTaskRemoveFromEventList+0x78>)
 800558a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800558e:	f7fe fff5 	bl	800457c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005592:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <xTaskRemoveFromEventList+0x7c>)
 8005594:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	429a      	cmp	r2, r3
 800559c:	d906      	bls.n	80055ac <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800559e:	2001      	movs	r0, #1
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <xTaskRemoveFromEventList+0x80>)
 80055a2:	6018      	str	r0, [r3, #0]
 80055a4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055a6:	4629      	mov	r1, r5
 80055a8:	4806      	ldr	r0, [pc, #24]	; (80055c4 <xTaskRemoveFromEventList+0x84>)
 80055aa:	e7f0      	b.n	800558e <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 80055ac:	2000      	movs	r0, #0
}
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	20003d2c 	.word	0x20003d2c
 80055b4:	20003d34 	.word	0x20003d34
 80055b8:	20003c94 	.word	0x20003c94
 80055bc:	20003c88 	.word	0x20003c88
 80055c0:	20003db0 	.word	0x20003db0
 80055c4:	20003d6c 	.word	0x20003d6c

080055c8 <vTaskSetTimeOutState>:
{
 80055c8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 80055ca:	b908      	cbnz	r0, 80055d0 <vTaskSetTimeOutState+0x8>
 80055cc:	f7ff fcce 	bl	8004f6c <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055d0:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <vTaskSetTimeOutState+0x18>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055d6:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <vTaskSetTimeOutState+0x1c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6043      	str	r3, [r0, #4]
 80055dc:	bd08      	pop	{r3, pc}
 80055de:	bf00      	nop
 80055e0:	20003d68 	.word	0x20003d68
 80055e4:	20003dac 	.word	0x20003dac

080055e8 <xTaskCheckForTimeOut>:
{
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80055ec:	4604      	mov	r4, r0
 80055ee:	b950      	cbnz	r0, 8005606 <xTaskCheckForTimeOut+0x1e>
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	b672      	cpsid	i
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	b662      	cpsie	i
 8005604:	e7fe      	b.n	8005604 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8005606:	b951      	cbnz	r1, 800561e <xTaskCheckForTimeOut+0x36>
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	b672      	cpsid	i
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	b662      	cpsie	i
 800561c:	e7fe      	b.n	800561c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800561e:	f7ff f841 	bl	80046a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005622:	4b0e      	ldr	r3, [pc, #56]	; (800565c <xTaskCheckForTimeOut+0x74>)
 8005624:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005626:	682b      	ldr	r3, [r5, #0]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	d010      	beq.n	800564e <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800562c:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <xTaskCheckForTimeOut+0x78>)
 800562e:	6820      	ldr	r0, [r4, #0]
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	4290      	cmp	r0, r2
 8005634:	6862      	ldr	r2, [r4, #4]
 8005636:	d001      	beq.n	800563c <xTaskCheckForTimeOut+0x54>
 8005638:	4291      	cmp	r1, r2
 800563a:	d20d      	bcs.n	8005658 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800563c:	1a88      	subs	r0, r1, r2
 800563e:	4283      	cmp	r3, r0
 8005640:	d90a      	bls.n	8005658 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8005642:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 8005644:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8005646:	4413      	add	r3, r2
 8005648:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800564a:	f7ff ffbd 	bl	80055c8 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800564e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005650:	f7ff f84e 	bl	80046f0 <vPortExitCritical>
}
 8005654:	4620      	mov	r0, r4
 8005656:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8005658:	2401      	movs	r4, #1
 800565a:	e7f9      	b.n	8005650 <xTaskCheckForTimeOut+0x68>
 800565c:	20003dac 	.word	0x20003dac
 8005660:	20003d68 	.word	0x20003d68

08005664 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005664:	2201      	movs	r2, #1
 8005666:	4b01      	ldr	r3, [pc, #4]	; (800566c <vTaskMissedYield+0x8>)
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	4770      	bx	lr
 800566c:	20003db0 	.word	0x20003db0

08005670 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <xTaskGetSchedulerState+0x18>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	b133      	cbz	r3, 8005684 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <xTaskGetSchedulerState+0x1c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800567c:	bf0c      	ite	eq
 800567e:	2002      	moveq	r0, #2
 8005680:	2000      	movne	r0, #0
 8005682:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005684:	2001      	movs	r0, #1
	}
 8005686:	4770      	bx	lr
 8005688:	20003d80 	.word	0x20003d80
 800568c:	20003d2c 	.word	0x20003d2c

08005690 <vTaskPriorityInherit>:
	{
 8005690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8005694:	4604      	mov	r4, r0
 8005696:	2800      	cmp	r0, #0
 8005698:	d038      	beq.n	800570c <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800569a:	4d1d      	ldr	r5, [pc, #116]	; (8005710 <vTaskPriorityInherit+0x80>)
 800569c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800569e:	682a      	ldr	r2, [r5, #0]
 80056a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d232      	bcs.n	800570c <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056a6:	6982      	ldr	r2, [r0, #24]
 80056a8:	2a00      	cmp	r2, #0
 80056aa:	db04      	blt.n	80056b6 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ac:	682a      	ldr	r2, [r5, #0]
 80056ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056b0:	f1c2 0207 	rsb	r2, r2, #7
 80056b4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80056b6:	4e17      	ldr	r6, [pc, #92]	; (8005714 <vTaskPriorityInherit+0x84>)
 80056b8:	2714      	movs	r7, #20
 80056ba:	6962      	ldr	r2, [r4, #20]
 80056bc:	fb07 6303 	mla	r3, r7, r3, r6
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d120      	bne.n	8005706 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c4:	f104 0804 	add.w	r8, r4, #4
 80056c8:	4640      	mov	r0, r8
 80056ca:	f7fe ff7a 	bl	80045c2 <uxListRemove>
 80056ce:	4a12      	ldr	r2, [pc, #72]	; (8005718 <vTaskPriorityInherit+0x88>)
 80056d0:	b948      	cbnz	r0, 80056e6 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80056d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80056d4:	4347      	muls	r7, r0
 80056d6:	59f3      	ldr	r3, [r6, r7]
 80056d8:	b92b      	cbnz	r3, 80056e6 <vTaskPriorityInherit+0x56>
 80056da:	2101      	movs	r1, #1
 80056dc:	6813      	ldr	r3, [r2, #0]
 80056de:	4081      	lsls	r1, r0
 80056e0:	ea23 0301 	bic.w	r3, r3, r1
 80056e4:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056e6:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80056e8:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80056ec:	2301      	movs	r3, #1
 80056ee:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056f0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80056f2:	430b      	orrs	r3, r1
 80056f4:	4641      	mov	r1, r8
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	2314      	movs	r3, #20
 80056fa:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80056fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8005702:	f7fe bf3b 	b.w	800457c <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005710:	20003c88 	.word	0x20003c88
 8005714:	20003c94 	.word	0x20003c94
 8005718:	20003d34 	.word	0x20003d34

0800571c <xTaskPriorityDisinherit>:
	{
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800571e:	4604      	mov	r4, r0
 8005720:	b908      	cbnz	r0, 8005726 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8005722:	2000      	movs	r0, #0
 8005724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005726:	4b24      	ldr	r3, [pc, #144]	; (80057b8 <xTaskPriorityDisinherit+0x9c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4298      	cmp	r0, r3
 800572c:	d00a      	beq.n	8005744 <xTaskPriorityDisinherit+0x28>
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	b672      	cpsid	i
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	b662      	cpsie	i
 8005742:	e7fe      	b.n	8005742 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8005744:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005746:	b953      	cbnz	r3, 800575e <xTaskPriorityDisinherit+0x42>
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	b672      	cpsid	i
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	b662      	cpsie	i
 800575c:	e7fe      	b.n	800575c <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800575e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005760:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005762:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8005764:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005766:	4291      	cmp	r1, r2
 8005768:	d0db      	beq.n	8005722 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1d9      	bne.n	8005722 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576e:	1d05      	adds	r5, r0, #4
 8005770:	4e12      	ldr	r6, [pc, #72]	; (80057bc <xTaskPriorityDisinherit+0xa0>)
 8005772:	4628      	mov	r0, r5
 8005774:	f7fe ff25 	bl	80045c2 <uxListRemove>
 8005778:	4a11      	ldr	r2, [pc, #68]	; (80057c0 <xTaskPriorityDisinherit+0xa4>)
 800577a:	b950      	cbnz	r0, 8005792 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800577c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800577e:	2114      	movs	r1, #20
 8005780:	4379      	muls	r1, r7
 8005782:	5873      	ldr	r3, [r6, r1]
 8005784:	b92b      	cbnz	r3, 8005792 <xTaskPriorityDisinherit+0x76>
 8005786:	2001      	movs	r0, #1
 8005788:	6813      	ldr	r3, [r2, #0]
 800578a:	40b8      	lsls	r0, r7
 800578c:	ea23 0300 	bic.w	r3, r3, r0
 8005790:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005792:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005794:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005798:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800579a:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800579c:	2401      	movs	r4, #1
 800579e:	6811      	ldr	r1, [r2, #0]
 80057a0:	fa04 f003 	lsl.w	r0, r4, r3
 80057a4:	4308      	orrs	r0, r1
 80057a6:	4629      	mov	r1, r5
 80057a8:	6010      	str	r0, [r2, #0]
 80057aa:	2014      	movs	r0, #20
 80057ac:	fb00 6003 	mla	r0, r0, r3, r6
 80057b0:	f7fe fee4 	bl	800457c <vListInsertEnd>
					xReturn = pdTRUE;
 80057b4:	4620      	mov	r0, r4
	}
 80057b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b8:	20003c88 	.word	0x20003c88
 80057bc:	20003c94 	.word	0x20003c94
 80057c0:	20003d34 	.word	0x20003d34

080057c4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80057c4:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <pvTaskIncrementMutexHeldCount+0x14>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	b11a      	cbz	r2, 80057d2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80057ca:	6819      	ldr	r1, [r3, #0]
 80057cc:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80057ce:	3201      	adds	r2, #1
 80057d0:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80057d2:	6818      	ldr	r0, [r3, #0]
	}
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20003c88 	.word	0x20003c88

080057dc <__libc_init_array>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	4e0d      	ldr	r6, [pc, #52]	; (8005814 <__libc_init_array+0x38>)
 80057e0:	4c0d      	ldr	r4, [pc, #52]	; (8005818 <__libc_init_array+0x3c>)
 80057e2:	1ba4      	subs	r4, r4, r6
 80057e4:	10a4      	asrs	r4, r4, #2
 80057e6:	2500      	movs	r5, #0
 80057e8:	42a5      	cmp	r5, r4
 80057ea:	d109      	bne.n	8005800 <__libc_init_array+0x24>
 80057ec:	4e0b      	ldr	r6, [pc, #44]	; (800581c <__libc_init_array+0x40>)
 80057ee:	4c0c      	ldr	r4, [pc, #48]	; (8005820 <__libc_init_array+0x44>)
 80057f0:	f000 f82c 	bl	800584c <_init>
 80057f4:	1ba4      	subs	r4, r4, r6
 80057f6:	10a4      	asrs	r4, r4, #2
 80057f8:	2500      	movs	r5, #0
 80057fa:	42a5      	cmp	r5, r4
 80057fc:	d105      	bne.n	800580a <__libc_init_array+0x2e>
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005804:	4798      	blx	r3
 8005806:	3501      	adds	r5, #1
 8005808:	e7ee      	b.n	80057e8 <__libc_init_array+0xc>
 800580a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800580e:	4798      	blx	r3
 8005810:	3501      	adds	r5, #1
 8005812:	e7f2      	b.n	80057fa <__libc_init_array+0x1e>
 8005814:	08005a64 	.word	0x08005a64
 8005818:	08005a64 	.word	0x08005a64
 800581c:	08005a64 	.word	0x08005a64
 8005820:	08005a68 	.word	0x08005a68

08005824 <memcpy>:
 8005824:	b510      	push	{r4, lr}
 8005826:	1e43      	subs	r3, r0, #1
 8005828:	440a      	add	r2, r1
 800582a:	4291      	cmp	r1, r2
 800582c:	d100      	bne.n	8005830 <memcpy+0xc>
 800582e:	bd10      	pop	{r4, pc}
 8005830:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005834:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005838:	e7f7      	b.n	800582a <memcpy+0x6>

0800583a <memset>:
 800583a:	4402      	add	r2, r0
 800583c:	4603      	mov	r3, r0
 800583e:	4293      	cmp	r3, r2
 8005840:	d100      	bne.n	8005844 <memset+0xa>
 8005842:	4770      	bx	lr
 8005844:	f803 1b01 	strb.w	r1, [r3], #1
 8005848:	e7f9      	b.n	800583e <memset+0x4>
	...

0800584c <_init>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr

08005858 <_fini>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr
